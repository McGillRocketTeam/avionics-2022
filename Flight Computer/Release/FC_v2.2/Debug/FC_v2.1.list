
FC_v2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f6f4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002368  0801f8a8  0801f8a8  0002f8a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021c10  08021c10  000403cc  2**0
                  CONTENTS
  4 .ARM          00000008  08021c10  08021c10  00031c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021c18  08021c18  000403cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08021c18  08021c18  00031c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021c20  08021c20  00031c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003cc  20000000  08021c24  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000403cc  2**0
                  CONTENTS
 10 .bss          00008bec  200003cc  200003cc  000403cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20008fb8  20008fb8  000403cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000403cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00074dc2  00000000  00000000  000403fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000aecb  00000000  00000000  000b51be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000041f8  00000000  00000000  000c0090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000389ed  00000000  00000000  000c4288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004a89f  00000000  00000000  000fcc75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001199d3  00000000  00000000  00147514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00260ee7  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00003ec8  00000000  00000000  00260f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00013518  00000000  00000000  00264e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200003cc 	.word	0x200003cc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801f88c 	.word	0x0801f88c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200003d0 	.word	0x200003d0
 80001ec:	0801f88c 	.word	0x0801f88c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <lsm_write>:
/*
 * LSM6DSR
 */

static int32_t lsm_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af04      	add	r7, sp, #16
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	461a      	mov	r2, r3
 8001018:	460b      	mov	r3, r1
 800101a:	72fb      	strb	r3, [r7, #11]
 800101c:	4613      	mov	r3, r2
 800101e:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8001020:	7afb      	ldrb	r3, [r7, #11]
 8001022:	b29a      	uxth	r2, r3
 8001024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001028:	9302      	str	r3, [sp, #8]
 800102a:	893b      	ldrh	r3, [r7, #8]
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	21d5      	movs	r1, #213	; 0xd5
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f008 f8ae 	bl	8009198 <HAL_I2C_Mem_Write>
  return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <lsm_read>:

static int32_t lsm_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b088      	sub	sp, #32
 800104a:	af04      	add	r7, sp, #16
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	607a      	str	r2, [r7, #4]
 8001050:	461a      	mov	r2, r3
 8001052:	460b      	mov	r3, r1
 8001054:	72fb      	strb	r3, [r7, #11]
 8001056:	4613      	mov	r3, r2
 8001058:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSR_I2C_ADD_L, reg,
 800105a:	7afb      	ldrb	r3, [r7, #11]
 800105c:	b29a      	uxth	r2, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	9302      	str	r3, [sp, #8]
 8001064:	893b      	ldrh	r3, [r7, #8]
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	21d5      	movs	r1, #213	; 0xd5
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f008 f98b 	bl	800938c <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <MRT_LSM6DSR_Setup>:




stmdev_ctx_t  MRT_LSM6DSR_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b08b      	sub	sp, #44	; 0x2c
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	  Guart = uart;
 800108c:	4a53      	ldr	r2, [pc, #332]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LSM6DSR Setup Starts\n\r", 22, HAL_MAX_DELAY);
 8001092:	4b52      	ldr	r3, [pc, #328]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 8001094:	6818      	ldr	r0, [r3, #0]
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	2216      	movs	r2, #22
 800109c:	4950      	ldr	r1, [pc, #320]	; (80011e0 <MRT_LSM6DSR_Setup+0x160>)
 800109e:	f00d f9d0 	bl	800e442 <HAL_UART_Transmit>


	  stmdev_ctx_t lsm_ctx;

	  /* Initialize mems driver interface */
	  lsm_ctx.write_reg = lsm_write;
 80010a2:	4b50      	ldr	r3, [pc, #320]	; (80011e4 <MRT_LSM6DSR_Setup+0x164>)
 80010a4:	61fb      	str	r3, [r7, #28]
	  lsm_ctx.read_reg = lsm_read;
 80010a6:	4b50      	ldr	r3, [pc, #320]	; (80011e8 <MRT_LSM6DSR_Setup+0x168>)
 80010a8:	623b      	str	r3, [r7, #32]
	  lsm_ctx.handle = SENSOR_BUS;
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 80010ae:	2064      	movs	r0, #100	; 0x64
 80010b0:	f007 f98e 	bl	80083d0 <HAL_Delay>
	  /* Check device ID */
	  lsm6dsr_device_id_get(&lsm_ctx, &lsm_whoamI);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	494c      	ldr	r1, [pc, #304]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f006 fbc6 	bl	800784c <lsm6dsr_device_id_get>

	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 21, HAL_MAX_DELAY);
 80010c0:	4b46      	ldr	r3, [pc, #280]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	2215      	movs	r2, #21
 80010ca:	4949      	ldr	r1, [pc, #292]	; (80011f0 <MRT_LSM6DSR_Setup+0x170>)
 80010cc:	f00d f9b9 	bl	800e442 <HAL_UART_Transmit>


	  if (lsm_whoamI != LSM6DSR_ID){
 80010d0:	4b46      	ldr	r3, [pc, #280]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b6a      	cmp	r3, #106	; 0x6a
 80010d6:	d032      	beq.n	800113e <MRT_LSM6DSR_Setup+0xbe>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 80010d8:	4b40      	ldr	r3, [pc, #256]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	2208      	movs	r2, #8
 80010e2:	4944      	ldr	r1, [pc, #272]	; (80011f4 <MRT_LSM6DSR_Setup+0x174>)
 80010e4:	f00d f9ad 	bl	800e442 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80010e8:	4b3c      	ldr	r3, [pc, #240]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
 80010f0:	2210      	movs	r2, #16
 80010f2:	4941      	ldr	r1, [pc, #260]	; (80011f8 <MRT_LSM6DSR_Setup+0x178>)
 80010f4:	f00d f9a5 	bl	800e442 <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lsm_whoamI);
 80010f8:	4b3c      	ldr	r3, [pc, #240]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	493e      	ldr	r1, [pc, #248]	; (80011fc <MRT_LSM6DSR_Setup+0x17c>)
 8001104:	4618      	mov	r0, r3
 8001106:	f01a fbbf 	bl	801b888 <siprintf>

			__BKPT();
 800110a:	be00      	bkpt	0x0000

		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 800110c:	4b33      	ldr	r3, [pc, #204]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800110e:	681c      	ldr	r4, [r3, #0]
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f86b 	bl	80001f0 <strlen>
 800111a:	4603      	mov	r3, r0
 800111c:	b29a      	uxth	r2, r3
 800111e:	f107 0110 	add.w	r1, r7, #16
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	4620      	mov	r0, r4
 8001128:	f00d f98b 	bl	800e442 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800112e:	6818      	ldr	r0, [r3, #0]
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	2216      	movs	r2, #22
 8001136:	4932      	ldr	r1, [pc, #200]	; (8001200 <MRT_LSM6DSR_Setup+0x180>)
 8001138:	f00d f983 	bl	800e442 <HAL_UART_Transmit>
		  while(1);
 800113c:	e7fe      	b.n	800113c <MRT_LSM6DSR_Setup+0xbc>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 6, HAL_MAX_DELAY);
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 8001140:	6818      	ldr	r0, [r3, #0]
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	2206      	movs	r2, #6
 8001148:	492e      	ldr	r1, [pc, #184]	; (8001204 <MRT_LSM6DSR_Setup+0x184>)
 800114a:	f00d f97a 	bl	800e442 <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lsm6dsr_reset_set(&lsm_ctx, PROPERTY_ENABLE);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	2101      	movs	r1, #1
 8001154:	4618      	mov	r0, r3
 8001156:	f006 fb8a 	bl	800786e <lsm6dsr_reset_set>


	  HAL_Delay(1000);
 800115a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800115e:	f007 f937 	bl	80083d0 <HAL_Delay>

	  do {
	    lsm6dsr_reset_get(&lsm_ctx, &lsm_rst);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4928      	ldr	r1, [pc, #160]	; (8001208 <MRT_LSM6DSR_Setup+0x188>)
 8001168:	4618      	mov	r0, r3
 800116a:	f006 fba6 	bl	80078ba <lsm6dsr_reset_get>
	  } while (lsm_rst);
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <MRT_LSM6DSR_Setup+0x188>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f5      	bne.n	8001162 <MRT_LSM6DSR_Setup+0xe2>

	  /* Disable I3C interface */
	  //TODO JASPER lsm6dsr_i3c_disable_set(&lsm_ctx, LSM6DSR_I3C_DISABLE);

	  /* Enable Block Data Update */
	  lsm6dsr_block_data_update_set(&lsm_ctx, PROPERTY_ENABLE);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	2101      	movs	r1, #1
 800117c:	4618      	mov	r0, r3
 800117e:	f006 fa15 	bl	80075ac <lsm6dsr_block_data_update_set>
	  /* Set Output Data Rate */
	  lsm6dsr_xl_data_rate_set(&lsm_ctx, LSM6DSR_XL_ODR_12Hz5);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	2101      	movs	r1, #1
 8001188:	4618      	mov	r0, r3
 800118a:	f005 fff1 	bl	8007170 <lsm6dsr_xl_data_rate_set>
	  lsm6dsr_gy_data_rate_set(&lsm_ctx, LSM6DSR_GY_ODR_12Hz5);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	2101      	movs	r1, #1
 8001194:	4618      	mov	r0, r3
 8001196:	f006 f90d 	bl	80073b4 <lsm6dsr_gy_data_rate_set>
	  /* Set full scale */
	  lsm6dsr_xl_full_scale_set(&lsm_ctx, LSM6DSR_2g);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f005 ffbf 	bl	8007124 <lsm6dsr_xl_full_scale_set>
	  lsm6dsr_gy_full_scale_set(&lsm_ctx, LSM6DSR_2000dps);
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	210c      	movs	r1, #12
 80011ac:	4618      	mov	r0, r3
 80011ae:	f006 f8db 	bl	8007368 <lsm6dsr_gy_full_scale_set>
	  /* Configure filtering chain(No aux interface)
	   * Accelerometer - LPF1 + LPF2 path
	   */
	  //TODO JASPER lsm6dsr_xl_hp_path_on_out_set(&lsm_ctx, LSM6DSR_LP_ODR_DIV_100);
	  //TODO JASPER lsm6dsr_xl_filter_lp2_set(&lsm_ctx, PROPERTY_ENABLE);
	  HAL_UART_Transmit(Guart,"LLSM6DSR Setup Ends\n\r", 25, HAL_MAX_DELAY);
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80011b4:	6818      	ldr	r0, [r3, #0]
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	2219      	movs	r2, #25
 80011bc:	4913      	ldr	r1, [pc, #76]	; (800120c <MRT_LSM6DSR_Setup+0x18c>)
 80011be:	f00d f940 	bl	800e442 <HAL_UART_Transmit>

	  return lsm_ctx;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	461c      	mov	r4, r3
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	372c      	adds	r7, #44	; 0x2c
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd90      	pop	{r4, r7, pc}
 80011da:	bf00      	nop
 80011dc:	20005f08 	.word	0x20005f08
 80011e0:	0801f8a8 	.word	0x0801f8a8
 80011e4:	0800100d 	.word	0x0800100d
 80011e8:	08001047 	.word	0x08001047
 80011ec:	200003f8 	.word	0x200003f8
 80011f0:	0801f8c0 	.word	0x0801f8c0
 80011f4:	0801f8d8 	.word	0x0801f8d8
 80011f8:	0801f8e4 	.word	0x0801f8e4
 80011fc:	0801f8f8 	.word	0x0801f8f8
 8001200:	0801f900 	.word	0x0801f900
 8001204:	0801f918 	.word	0x0801f918
 8001208:	200003f9 	.word	0x200003f9
 800120c:	0801f920 	.word	0x0801f920

08001210 <MRT_LSM6DSR_getAcceleration>:


/*
 * Get acceleration values
 */
void MRT_LSM6DSR_getAcceleration(stmdev_ctx_t lsm_ctx,float acceleration_mg[3]){
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
 8001216:	1d3c      	adds	r4, r7, #4
 8001218:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800121c:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_xl_flag_data_ready_get(&lsm_ctx, &reg);
 800121e:	f107 0217 	add.w	r2, r7, #23
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f006 f9e6 	bl	80075f8 <lsm6dsr_xl_flag_data_ready_get>

		//if (reg.status_reg.gda) {
	    if(reg){
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d02d      	beq.n	800128e <MRT_LSM6DSR_getAcceleration+0x7e>
		/* Read magnetic field data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001232:	2206      	movs	r2, #6
 8001234:	2100      	movs	r1, #0
 8001236:	4818      	ldr	r0, [pc, #96]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001238:	f019 faa8 	bl	801a78c <memset>
        lsm6dsr_acceleration_raw_get(&lsm_ctx, data_raw_acceleration);
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	4916      	ldr	r1, [pc, #88]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001240:	4618      	mov	r0, r3
 8001242:	f006 fa92 	bl	800776a <lsm6dsr_acceleration_raw_get>
        acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124c:	4618      	mov	r0, r3
 800124e:	f005 ff1d 	bl	800708c <lsm6dsr_from_fs2g_to_mg>
 8001252:	eef0 7a40 	vmov.f32	s15, s0
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	edc3 7a00 	vstr	s15, [r3]
                               data_raw_acceleration[0]);
        acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 800125e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	1d1c      	adds	r4, r3, #4
 8001266:	4610      	mov	r0, r2
 8001268:	f005 ff10 	bl	800708c <lsm6dsr_from_fs2g_to_mg>
 800126c:	eef0 7a40 	vmov.f32	s15, s0
 8001270:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[1]);
        acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001276:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	f103 0408 	add.w	r4, r3, #8
 8001280:	4610      	mov	r0, r2
 8001282:	f005 ff03 	bl	800708c <lsm6dsr_from_fs2g_to_mg>
 8001286:	eef0 7a40 	vmov.f32	s15, s0
 800128a:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[2]);
      }
}
 800128e:	bf00      	nop
 8001290:	371c      	adds	r7, #28
 8001292:	46bd      	mov	sp, r7
 8001294:	bd90      	pop	{r4, r7, pc}
 8001296:	bf00      	nop
 8001298:	200003e8 	.word	0x200003e8

0800129c <MRT_LSM6DSR_getTemperature>:


/*
 * Get temperature value
 */
void MRT_LSM6DSR_getTemperature(stmdev_ctx_t lsm_ctx,float* temperature_degC){
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	1d3c      	adds	r4, r7, #4
 80012a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012a8:	603b      	str	r3, [r7, #0]
	//lsm6dsr_reg_t reg;
	//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    uint8_t reg;
    lsm6dsr_temp_flag_data_ready_get(&lsm_ctx, &reg);
 80012aa:	f107 0217 	add.w	r2, r7, #23
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f006 f9d2 	bl	800765c <lsm6dsr_temp_flag_data_ready_get>

	//if (reg.status_reg.tda) {
    if(reg){
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d012      	beq.n	80012e4 <MRT_LSM6DSR_getTemperature+0x48>
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <MRT_LSM6DSR_getTemperature+0x50>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	801a      	strh	r2, [r3, #0]
		//Read temperature data
		memset(&lsm_data_raw_temperature, 0x00, sizeof(int16_t));
		lsm6dsr_temperature_raw_get(&lsm_ctx, &lsm_data_raw_temperature);
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	4909      	ldr	r1, [pc, #36]	; (80012ec <MRT_LSM6DSR_getTemperature+0x50>)
 80012c8:	4618      	mov	r0, r3
 80012ca:	f006 f9e0 	bl	800768e <lsm6dsr_temperature_raw_get>
		*temperature_degC = lsm6dsr_from_lsb_to_celsius(lsm_data_raw_temperature);
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <MRT_LSM6DSR_getTemperature+0x50>)
 80012d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f005 ff09 	bl	80070ec <lsm6dsr_from_lsb_to_celsius>
 80012da:	eef0 7a40 	vmov.f32	s15, s0
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	edc3 7a00 	vstr	s15, [r3]

	}
}
 80012e4:	bf00      	nop
 80012e6:	371c      	adds	r7, #28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd90      	pop	{r4, r7, pc}
 80012ec:	200003f6 	.word	0x200003f6

080012f0 <MRT_LSM6DSR_getAngularRate>:


/*
 * Get angular rate values
 */
void MRT_LSM6DSR_getAngularRate(stmdev_ctx_t lsm_ctx,float angular_rate_mdps[3]){
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	1d3c      	adds	r4, r7, #4
 80012f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012fc:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_gy_flag_data_ready_get(&lsm_ctx, &reg);
 80012fe:	f107 0217 	add.w	r2, r7, #23
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	4611      	mov	r1, r2
 8001306:	4618      	mov	r0, r3
 8001308:	f006 f98f 	bl	800762a <lsm6dsr_gy_flag_data_ready_get>

		//if (reg.status_reg.xlda) {
	    if(reg){
 800130c:	7dfb      	ldrb	r3, [r7, #23]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d02d      	beq.n	800136e <MRT_LSM6DSR_getAngularRate+0x7e>
		/* Read magnetic field data */
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8001312:	2206      	movs	r2, #6
 8001314:	2100      	movs	r1, #0
 8001316:	4818      	ldr	r0, [pc, #96]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001318:	f019 fa38 	bl	801a78c <memset>
		lsm6dsr_angular_rate_raw_get(&lsm_ctx, data_raw_angular_rate);
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	4916      	ldr	r1, [pc, #88]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001320:	4618      	mov	r0, r3
 8001322:	f006 f9d7 	bl	80076d4 <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800132c:	4618      	mov	r0, r3
 800132e:	f005 fec5 	bl	80070bc <lsm6dsr_from_fs2000dps_to_mdps>
 8001332:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[0] =
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	edc3 7a00 	vstr	s15, [r3]
		angular_rate_mdps[1] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 800133e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
		angular_rate_mdps[1] =
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	1d1c      	adds	r4, r3, #4
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001346:	4610      	mov	r0, r2
 8001348:	f005 feb8 	bl	80070bc <lsm6dsr_from_fs2000dps_to_mdps>
 800134c:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[1] =
 8001350:	edc4 7a00 	vstr	s15, [r4]
		angular_rate_mdps[2] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001356:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		angular_rate_mdps[2] =
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	f103 0408 	add.w	r4, r3, #8
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001360:	4610      	mov	r0, r2
 8001362:	f005 feab 	bl	80070bc <lsm6dsr_from_fs2000dps_to_mdps>
 8001366:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[2] =
 800136a:	edc4 7a00 	vstr	s15, [r4]
		fs2000dps_to_mdps
		*/

		}

}
 800136e:	bf00      	nop
 8001370:	371c      	adds	r7, #28
 8001372:	46bd      	mov	sp, r7
 8001374:	bd90      	pop	{r4, r7, pc}
 8001376:	bf00      	nop
 8001378:	200003f0 	.word	0x200003f0

0800137c <MRT_LPS22HH_Setup>:
 * LPS22HH
 */


stmdev_ctx_t  MRT_LPS22HH_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b08d      	sub	sp, #52	; 0x34
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]

	  Guart = uart;
 8001388:	4a4b      	ldr	r2, [pc, #300]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Starts\n\r", 22, HAL_MAX_DELAY);
 800138e:	4b4a      	ldr	r3, [pc, #296]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
 8001396:	2216      	movs	r2, #22
 8001398:	4948      	ldr	r1, [pc, #288]	; (80014bc <MRT_LPS22HH_Setup+0x140>)
 800139a:	f00d f852 	bl	800e442 <HAL_UART_Transmit>

	  stmdev_ctx_t lps_ctx;

	  lps22hh_reg_t reg;
	  /* Initialize mems driver interface */
	  lps_ctx.write_reg = lps_write;
 800139e:	4b48      	ldr	r3, [pc, #288]	; (80014c0 <MRT_LPS22HH_Setup+0x144>)
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
	  lps_ctx.read_reg = lps_read;
 80013a2:	4b48      	ldr	r3, [pc, #288]	; (80014c4 <MRT_LPS22HH_Setup+0x148>)
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
	  lps_ctx.handle = SENSOR_BUS;
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 80013aa:	2064      	movs	r0, #100	; 0x64
 80013ac:	f007 f810 	bl	80083d0 <HAL_Delay>
	  /* Check device ID */
	  lps_whoamI = 0;
 80013b0:	4b45      	ldr	r3, [pc, #276]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
	  lps22hh_device_id_get(&lps_ctx, &lps_whoamI);
 80013b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ba:	4943      	ldr	r1, [pc, #268]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013bc:	4618      	mov	r0, r3
 80013be:	f005 fde4 	bl	8006f8a <lps22hh_device_id_get>



  	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 22, HAL_MAX_DELAY);
 80013c2:	4b3d      	ldr	r3, [pc, #244]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 80013c4:	6818      	ldr	r0, [r3, #0]
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	2216      	movs	r2, #22
 80013cc:	493f      	ldr	r1, [pc, #252]	; (80014cc <MRT_LPS22HH_Setup+0x150>)
 80013ce:	f00d f838 	bl	800e442 <HAL_UART_Transmit>
	  if ( lps_whoamI != LPS22HH_ID ){
 80013d2:	4b3d      	ldr	r3, [pc, #244]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2bb3      	cmp	r3, #179	; 0xb3
 80013d8:	d031      	beq.n	800143e <MRT_LPS22HH_Setup+0xc2>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 80013da:	4b37      	ldr	r3, [pc, #220]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
 80013e2:	2208      	movs	r2, #8
 80013e4:	493a      	ldr	r1, [pc, #232]	; (80014d0 <MRT_LPS22HH_Setup+0x154>)
 80013e6:	f00d f82c 	bl	800e442 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80013ea:	4b33      	ldr	r3, [pc, #204]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 80013ec:	6818      	ldr	r0, [r3, #0]
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	2210      	movs	r2, #16
 80013f4:	4937      	ldr	r1, [pc, #220]	; (80014d4 <MRT_LPS22HH_Setup+0x158>)
 80013f6:	f00d f824 	bl	800e442 <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lps_whoamI);
 80013fa:	4b33      	ldr	r3, [pc, #204]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4934      	ldr	r1, [pc, #208]	; (80014d8 <MRT_LPS22HH_Setup+0x15c>)
 8001406:	4618      	mov	r0, r3
 8001408:	f01a fa3e 	bl	801b888 <siprintf>
		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 800140c:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 800140e:	681c      	ldr	r4, [r3, #0]
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4618      	mov	r0, r3
 8001416:	f7fe feeb 	bl	80001f0 <strlen>
 800141a:	4603      	mov	r3, r0
 800141c:	b29a      	uxth	r2, r3
 800141e:	f107 0114 	add.w	r1, r7, #20
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	4620      	mov	r0, r4
 8001428:	f00d f80b 	bl	800e442 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 800142c:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 800142e:	6818      	ldr	r0, [r3, #0]
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
 8001434:	2216      	movs	r2, #22
 8001436:	4929      	ldr	r1, [pc, #164]	; (80014dc <MRT_LPS22HH_Setup+0x160>)
 8001438:	f00d f803 	bl	800e442 <HAL_UART_Transmit>
		  while(1);
 800143c:	e7fe      	b.n	800143c <MRT_LPS22HH_Setup+0xc0>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 4, HAL_MAX_DELAY);
 800143e:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 8001440:	6818      	ldr	r0, [r3, #0]
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	2204      	movs	r2, #4
 8001448:	4925      	ldr	r1, [pc, #148]	; (80014e0 <MRT_LPS22HH_Setup+0x164>)
 800144a:	f00c fffa 	bl	800e442 <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lps22hh_reset_set(&lps_ctx, PROPERTY_ENABLE);
 800144e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001452:	2101      	movs	r1, #1
 8001454:	4618      	mov	r0, r3
 8001456:	f005 fda9 	bl	8006fac <lps22hh_reset_set>

	  HAL_Delay(1000);
 800145a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800145e:	f006 ffb7 	bl	80083d0 <HAL_Delay>

	  do {
	    lps22hh_reset_get(&lps_ctx, &lps_rst);
 8001462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001466:	491f      	ldr	r1, [pc, #124]	; (80014e4 <MRT_LPS22HH_Setup+0x168>)
 8001468:	4618      	mov	r0, r3
 800146a:	f005 fdc5 	bl	8006ff8 <lps22hh_reset_get>
	  } while (lps_rst);
 800146e:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <MRT_LPS22HH_Setup+0x168>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f5      	bne.n	8001462 <MRT_LPS22HH_Setup+0xe6>


	  /* Enable Block Data Update */
	  lps22hh_block_data_update_set(&lps_ctx, PROPERTY_ENABLE);
 8001476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147a:	2101      	movs	r1, #1
 800147c:	4618      	mov	r0, r3
 800147e:	f005 fcab 	bl	8006dd8 <lps22hh_block_data_update_set>
	  /* Set Output Data Rate */
	  lps22hh_data_rate_set(&lps_ctx, LPS22HH_75_Hz_LOW_NOISE);
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	2115      	movs	r1, #21
 8001488:	4618      	mov	r0, r3
 800148a:	f005 fccb 	bl	8006e24 <lps22hh_data_rate_set>
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Ends\n\r", 24, HAL_MAX_DELAY);
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 8001490:	6818      	ldr	r0, [r3, #0]
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
 8001496:	2218      	movs	r2, #24
 8001498:	4913      	ldr	r1, [pc, #76]	; (80014e8 <MRT_LPS22HH_Setup+0x16c>)
 800149a:	f00c ffd2 	bl	800e442 <HAL_UART_Transmit>

	  return lps_ctx;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	461c      	mov	r4, r3
 80014a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	}
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	3734      	adds	r7, #52	; 0x34
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd90      	pop	{r4, r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20005f08 	.word	0x20005f08
 80014bc:	0801f938 	.word	0x0801f938
 80014c0:	08001599 	.word	0x08001599
 80014c4:	080015d3 	.word	0x080015d3
 80014c8:	20000402 	.word	0x20000402
 80014cc:	0801f8c0 	.word	0x0801f8c0
 80014d0:	0801f8d8 	.word	0x0801f8d8
 80014d4:	0801f8e4 	.word	0x0801f8e4
 80014d8:	0801f8f8 	.word	0x0801f8f8
 80014dc:	0801f900 	.word	0x0801f900
 80014e0:	0801f918 	.word	0x0801f918
 80014e4:	20000403 	.word	0x20000403
 80014e8:	0801f950 	.word	0x0801f950

080014ec <MRT_LPS22HH_getPressure>:



void MRT_LPS22HH_getPressure(stmdev_ctx_t lps_ctx,float* pressure){
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b087      	sub	sp, #28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	1d3c      	adds	r4, r7, #4
 80014f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014f8:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 80014fa:	f107 0214 	add.w	r2, r7, #20
 80014fe:	1d38      	adds	r0, r7, #4
 8001500:	2301      	movs	r3, #1
 8001502:	2127      	movs	r1, #39	; 0x27
 8001504:	f005 fc06 	bl	8006d14 <lps22hh_read_reg>

	//uint8_t reg;
	//lps22hh_press_flag_data_ready_get(&lps_ctx, &reg);

	if (reg.status.p_da) {
 8001508:	7d3b      	ldrb	r3, [r7, #20]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d011      	beq.n	8001538 <MRT_LPS22HH_getPressure+0x4c>
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <MRT_LPS22HH_getPressure+0x54>)
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
	//if (reg) {
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t)); //TODO CAN CAUSE AN HARDFAULT
	  lps22hh_pressure_raw_get(&lps_ctx, &data_raw_pressure);
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	4908      	ldr	r1, [pc, #32]	; (8001540 <MRT_LPS22HH_getPressure+0x54>)
 800151e:	4618      	mov	r0, r3
 8001520:	f005 fce7 	bl	8006ef2 <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MRT_LPS22HH_getPressure+0x54>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f005 fc23 	bl	8006d74 <lps22hh_from_lsb_to_hpa>
 800152e:	eef0 7a40 	vmov.f32	s15, s0
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001538:	bf00      	nop
 800153a:	371c      	adds	r7, #28
 800153c:	46bd      	mov	sp, r7
 800153e:	bd90      	pop	{r4, r7, pc}
 8001540:	200003fc 	.word	0x200003fc

08001544 <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(stmdev_ctx_t lps_ctx,float* temperature_degC){
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b087      	sub	sp, #28
 8001548:	af00      	add	r7, sp, #0
 800154a:	1d3c      	adds	r4, r7, #4
 800154c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001550:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	//lps22hh_reg_t reg;
	//lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);

	uint8_t reg;
	lps22hh_temp_flag_data_ready_get(&lps_ctx, &reg);
 8001552:	f107 0217 	add.w	r2, r7, #23
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f005 fcb0 	bl	8006ec0 <lps22hh_temp_flag_data_ready_get>

	//if (reg.status.t_da) {
	if (reg) {
 8001560:	7dfb      	ldrb	r3, [r7, #23]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d012      	beq.n	800158c <MRT_LPS22HH_getTemperature+0x48>
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <MRT_LPS22HH_getTemperature+0x50>)
 8001568:	2200      	movs	r2, #0
 800156a:	801a      	strh	r2, [r3, #0]
	  memset(&lps_data_raw_temperature, 0x00, sizeof(int16_t));
	  lps22hh_temperature_raw_get(&lps_ctx, &lps_data_raw_temperature);
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	4909      	ldr	r1, [pc, #36]	; (8001594 <MRT_LPS22HH_getTemperature+0x50>)
 8001570:	4618      	mov	r0, r3
 8001572:	f005 fce7 	bl	8006f44 <lps22hh_temperature_raw_get>
	  *temperature_degC = lps22hh_from_lsb_to_celsius(lps_data_raw_temperature);
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <MRT_LPS22HH_getTemperature+0x50>)
 8001578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157c:	4618      	mov	r0, r3
 800157e:	f005 fc11 	bl	8006da4 <lps22hh_from_lsb_to_celsius>
 8001582:	eef0 7a40 	vmov.f32	s15, s0
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800158c:	bf00      	nop
 800158e:	371c      	adds	r7, #28
 8001590:	46bd      	mov	sp, r7
 8001592:	bd90      	pop	{r4, r7, pc}
 8001594:	20000400 	.word	0x20000400

08001598 <lps_write>:




static int32_t lps_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af04      	add	r7, sp, #16
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	461a      	mov	r2, r3
 80015a4:	460b      	mov	r3, r1
 80015a6:	72fb      	strb	r3, [r7, #11]
 80015a8:	4613      	mov	r3, r2
 80015aa:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80015ac:	7afb      	ldrb	r3, [r7, #11]
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b4:	9302      	str	r3, [sp, #8]
 80015b6:	893b      	ldrh	r3, [r7, #8]
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	2301      	movs	r3, #1
 80015c0:	21b9      	movs	r1, #185	; 0xb9
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f007 fde8 	bl	8009198 <HAL_I2C_Mem_Write>
  return 0;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <lps_read>:

static int32_t lps_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b088      	sub	sp, #32
 80015d6:	af04      	add	r7, sp, #16
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	461a      	mov	r2, r3
 80015de:	460b      	mov	r3, r1
 80015e0:	72fb      	strb	r3, [r7, #11]
 80015e2:	4613      	mov	r3, r2
 80015e4:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80015e6:	7afb      	ldrb	r3, [r7, #11]
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ee:	9302      	str	r3, [sp, #8]
 80015f0:	893b      	ldrh	r3, [r7, #8]
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2301      	movs	r3, #1
 80015fa:	21b9      	movs	r1, #185	; 0xb9
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f007 fec5 	bl	800938c <HAL_I2C_Mem_Read>
  return 0;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001610:	f3bf 8f4f 	dsb	sy
}
 8001614:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <__NVIC_SystemReset+0x24>)
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800161e:	4904      	ldr	r1, [pc, #16]	; (8001630 <__NVIC_SystemReset+0x24>)
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <__NVIC_SystemReset+0x28>)
 8001622:	4313      	orrs	r3, r2
 8001624:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001626:	f3bf 8f4f 	dsb	sy
}
 800162a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <__NVIC_SystemReset+0x20>
 8001630:	e000ed00 	.word	0xe000ed00
 8001634:	05fa0004 	.word	0x05fa0004

08001638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800163a:	b099      	sub	sp, #100	; 0x64
 800163c:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800163e:	f006 fe85 	bl	800834c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001642:	f000 f9a7 	bl	8001994 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001646:	f000 fd41 	bl	80020cc <MX_GPIO_Init>
  MX_ADC1_Init();
 800164a:	f000 fa0f 	bl	8001a6c <MX_ADC1_Init>
  MX_I2C1_Init();
 800164e:	f000 fa5f 	bl	8001b10 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001652:	f000 fa9d 	bl	8001b90 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001656:	f000 fadb 	bl	8001c10 <MX_I2C3_Init>
  MX_SPI2_Init();
 800165a:	f000 fbbf 	bl	8001ddc <MX_SPI2_Init>
  MX_SPI4_Init();
 800165e:	f000 fbf3 	bl	8001e48 <MX_SPI4_Init>
  MX_SPI5_Init();
 8001662:	f000 fc27 	bl	8001eb4 <MX_SPI5_Init>
  MX_TIM2_Init();
 8001666:	f000 fc5b 	bl	8001f20 <MX_TIM2_Init>
  MX_UART8_Init();
 800166a:	f000 fcb1 	bl	8001fd0 <MX_UART8_Init>
  MX_USART3_UART_Init();
 800166e:	f000 fcd9 	bl	8002024 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001672:	f000 fd01 	bl	8002078 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8001676:	f000 fb25 	bl	8001cc4 <MX_RTC_Init>
  //MX_IWDG_Init(); //TODO remove
  MX_FATFS_Init();
 800167a:	f00e fe37 	bl	80102ec <MX_FATFS_Init>
  /*
   * Reinitialize all peripherals
   */

  // reset LEDs
  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800167e:	2200      	movs	r2, #0
 8001680:	2102      	movs	r1, #2
 8001682:	489a      	ldr	r0, [pc, #616]	; (80018ec <main+0x2b4>)
 8001684:	f007 fc12 	bl	8008eac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001688:	2200      	movs	r2, #0
 800168a:	2104      	movs	r1, #4
 800168c:	4897      	ldr	r0, [pc, #604]	; (80018ec <main+0x2b4>)
 800168e:	f007 fc0d 	bl	8008eac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	2108      	movs	r1, #8
 8001696:	4895      	ldr	r0, [pc, #596]	; (80018ec <main+0x2b4>)
 8001698:	f007 fc08 	bl	8008eac <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 800169c:	2201      	movs	r2, #1
 800169e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016a2:	4893      	ldr	r0, [pc, #588]	; (80018f0 <main+0x2b8>)
 80016a4:	f007 fc02 	bl	8008eac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 80016a8:	2200      	movs	r2, #0
 80016aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ae:	4890      	ldr	r0, [pc, #576]	; (80018f0 <main+0x2b8>)
 80016b0:	f007 fbfc 	bl	8008eac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 80016b4:	2200      	movs	r2, #0
 80016b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ba:	488d      	ldr	r0, [pc, #564]	; (80018f0 <main+0x2b8>)
 80016bc:	f007 fbf6 	bl	8008eac <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET); //PG1 ARMING_PROP
 80016c0:	2201      	movs	r2, #1
 80016c2:	2102      	movs	r1, #2
 80016c4:	488a      	ldr	r0, [pc, #552]	; (80018f0 <main+0x2b8>)
 80016c6:	f007 fbf1 	bl	8008eac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 80016ca:	2200      	movs	r2, #0
 80016cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016d0:	4888      	ldr	r0, [pc, #544]	; (80018f4 <main+0x2bc>)
 80016d2:	f007 fbeb 	bl	8008eac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 80016d6:	2200      	movs	r2, #0
 80016d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016dc:	4885      	ldr	r0, [pc, #532]	; (80018f4 <main+0x2bc>)
 80016de:	f007 fbe5 	bl	8008eac <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 80016e2:	2200      	movs	r2, #0
 80016e4:	2104      	movs	r1, #4
 80016e6:	4884      	ldr	r0, [pc, #528]	; (80018f8 <main+0x2c0>)
 80016e8:	f007 fbe0 	bl	8008eac <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


  // reset payload EN signal
  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 80016ec:	2200      	movs	r2, #0
 80016ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016f2:	4881      	ldr	r0, [pc, #516]	; (80018f8 <main+0x2c0>)
 80016f4:	f007 fbda 	bl	8008eac <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high
  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

  // set power off for VR
  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 80016f8:	2200      	movs	r2, #0
 80016fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016fe:	487c      	ldr	r0, [pc, #496]	; (80018f0 <main+0x2b8>)
 8001700:	f007 fbd4 	bl	8008eac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 8001704:	2200      	movs	r2, #0
 8001706:	2180      	movs	r1, #128	; 0x80
 8001708:	487c      	ldr	r0, [pc, #496]	; (80018fc <main+0x2c4>)
 800170a:	f007 fbcf 	bl	8008eac <HAL_GPIO_WritePin>

  // FLASH set CS, WP and IO3 pins high
  HAL_GPIO_WritePin(OUT_FLASH_CS_GPIO_Port, OUT_FLASH_CS_Pin, SET);
 800170e:	2201      	movs	r2, #1
 8001710:	2140      	movs	r1, #64	; 0x40
 8001712:	487a      	ldr	r0, [pc, #488]	; (80018fc <main+0x2c4>)
 8001714:	f007 fbca 	bl	8008eac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_FLASH_WP_GPIO_Port, OUT_FLASH_WP_Pin, SET);
 8001718:	2201      	movs	r2, #1
 800171a:	2120      	movs	r1, #32
 800171c:	4877      	ldr	r0, [pc, #476]	; (80018fc <main+0x2c4>)
 800171e:	f007 fbc5 	bl	8008eac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_FLASH_IO3_GPIO_Port, OUT_FLASH_IO3_Pin, SET);
 8001722:	2201      	movs	r2, #1
 8001724:	2110      	movs	r1, #16
 8001726:	4875      	ldr	r0, [pc, #468]	; (80018fc <main+0x2c4>)
 8001728:	f007 fbc0 	bl	8008eac <HAL_GPIO_WritePin>
   *-Activate freeRTOS
   *-Change SysTic to any other timer (done in .ioc)
   *-Include the path to all includes folders of the drivers (for C and C++ linkers)
   */

  HAL_UART_Transmit(&DEBUG_UART,"\r\n\r\nStarting FC\r\n\r\n",19,HAL_MAX_DELAY);
 800172c:	f04f 33ff 	mov.w	r3, #4294967295
 8001730:	2213      	movs	r2, #19
 8001732:	4973      	ldr	r1, [pc, #460]	; (8001900 <main+0x2c8>)
 8001734:	4873      	ldr	r0, [pc, #460]	; (8001904 <main+0x2cc>)
 8001736:	f00c fe84 	bl	800e442 <HAL_UART_Transmit>

  /*
   * For external FLASH memory
   *-Put before RTOS setup because you need the external flash in its setup
   */
    MRT_SetupRTOS(&hrtc, DEBUG_UART,SLEEP_TIME); //Put here so we can pass the uart value to the setup
 800173a:	4e72      	ldr	r6, [pc, #456]	; (8001904 <main+0x2cc>)
 800173c:	2305      	movs	r3, #5
 800173e:	930e      	str	r3, [sp, #56]	; 0x38
 8001740:	466d      	mov	r5, sp
 8001742:	f106 040c 	add.w	r4, r6, #12
 8001746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800174c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001750:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001752:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001756:	e885 0003 	stmia.w	r5, {r0, r1}
 800175a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800175e:	486a      	ldr	r0, [pc, #424]	; (8001908 <main+0x2d0>)
 8001760:	f006 f950 	bl	8007a04 <MRT_SetupRTOS>
	MRT_externalFlashSetup(&DEBUG_UART);
 8001764:	4867      	ldr	r0, [pc, #412]	; (8001904 <main+0x2cc>)
 8001766:	f002 f889 	bl	800387c <MRT_externalFlashSetup>
	   *random resets. Now the problem is how do we start the FC from the beginning if we have a random
	   *amount of resets?
	   *Solution : We use the external IN_Button has an external reset that resets the board from
	   *the beginning using the callback function (defined in MRT_Helpers.c)
	   */
	  MX_IWDG_Init();
 800176a:	f000 fa91 	bl	8001c90 <MX_IWDG_Init>
   * -(Optional) Use MCU APB1 freeze register to freeze the WD in StandByMode instead of resetting the FC
   * -(Optional) Setup alarm A and the clock time in .ioc (not recommend because random resets)
   * The rest have been taken care of
   * You can access the flag of both alarm A and B with the variables flagA and flagB
   */
  MRT_setRTC(prev_hours,prev_min,prev_sec);
 800176e:	4b67      	ldr	r3, [pc, #412]	; (800190c <main+0x2d4>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	4a67      	ldr	r2, [pc, #412]	; (8001910 <main+0x2d8>)
 8001774:	7811      	ldrb	r1, [r2, #0]
 8001776:	4a67      	ldr	r2, [pc, #412]	; (8001914 <main+0x2dc>)
 8001778:	7812      	ldrb	r2, [r2, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f006 fac0 	bl	8007d00 <MRT_setRTC>
  HAL_Delay(2000); //To make sure that when you set the Alarm it doesn't go off automatically
 8001780:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001784:	f006 fe24 	bl	80083d0 <HAL_Delay>
  MRT_setAlarmA(WHEN_SLEEP_TIME_HOURS, WHEN_SLEEP_TIME_MIN, WHEN_SLEEP_TIME_SEC);
 8001788:	2200      	movs	r2, #0
 800178a:	2102      	movs	r1, #2
 800178c:	2000      	movs	r0, #0
 800178e:	f006 fa6f 	bl	8007c70 <MRT_setAlarmA>

  /*
   * For Iridium:
   * -Set the project as c++
   */
    HAL_IWDG_Refresh(&hiwdg);
 8001792:	4861      	ldr	r0, [pc, #388]	; (8001918 <main+0x2e0>)
 8001794:	f008 fc6e 	bl	800a074 <HAL_IWDG_Refresh>
	HAL_GPIO_WritePin(Iridium_RST_GPIO_Port, Iridium_RST_Pin, SET);
 8001798:	2201      	movs	r2, #1
 800179a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800179e:	4856      	ldr	r0, [pc, #344]	; (80018f8 <main+0x2c0>)
 80017a0:	f007 fb84 	bl	8008eac <HAL_GPIO_WritePin>
    uint8_t lol = MRT_Static_Iridium_Setup(DEBUG_UART);
 80017a4:	4e57      	ldr	r6, [pc, #348]	; (8001904 <main+0x2cc>)
 80017a6:	466d      	mov	r5, sp
 80017a8:	f106 0410 	add.w	r4, r6, #16
 80017ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b8:	6823      	ldr	r3, [r4, #0]
 80017ba:	602b      	str	r3, [r5, #0]
 80017bc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80017c0:	f004 fd0e 	bl	80061e0 <MRT_Static_Iridium_Setup>
 80017c4:	4603      	mov	r3, r0
 80017c6:	75fb      	strb	r3, [r7, #23]

  /*
   * For LSM6DSR
   *-Enable float formatting for sprintf (go to Project->Properties->C/C++ Build->Settings->MCU Settings->Check the box "Use float with printf")
   */
  HAL_IWDG_Refresh(&hiwdg);
 80017c8:	4853      	ldr	r0, [pc, #332]	; (8001918 <main+0x2e0>)
 80017ca:	f008 fc53 	bl	800a074 <HAL_IWDG_Refresh>
  lsm_ctx = MRT_LSM6DSR_Setup(&LSM_I2C, &DEBUG_UART);
 80017ce:	4c53      	ldr	r4, [pc, #332]	; (800191c <main+0x2e4>)
 80017d0:	463b      	mov	r3, r7
 80017d2:	4a4c      	ldr	r2, [pc, #304]	; (8001904 <main+0x2cc>)
 80017d4:	4952      	ldr	r1, [pc, #328]	; (8001920 <main+0x2e8>)
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fc52 	bl	8001080 <MRT_LSM6DSR_Setup>
 80017dc:	463b      	mov	r3, r7
 80017de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

   /*
    * For LPS22HH
    *-Enable float formatting for sprintf (go to Project->Properties->C/C++ Build->Settings->MCU Settings->Check the box "Use float with printf")
    */
  HAL_IWDG_Refresh(&hiwdg);
 80017e6:	484c      	ldr	r0, [pc, #304]	; (8001918 <main+0x2e0>)
 80017e8:	f008 fc44 	bl	800a074 <HAL_IWDG_Refresh>
  lps_ctx = MRT_LPS22HH_Setup(&LPS_I2C, &DEBUG_UART);
 80017ec:	4c4d      	ldr	r4, [pc, #308]	; (8001924 <main+0x2ec>)
 80017ee:	463b      	mov	r3, r7
 80017f0:	4a44      	ldr	r2, [pc, #272]	; (8001904 <main+0x2cc>)
 80017f2:	494b      	ldr	r1, [pc, #300]	; (8001920 <main+0x2e8>)
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fdc1 	bl	800137c <MRT_LPS22HH_Setup>
 80017fa:	463b      	mov	r3, r7
 80017fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001800:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    * For the GPS:
    * -huart6 on v4.3
    * -Set its uart to 9600
    *
    */
  HAL_IWDG_Refresh(&hiwdg);
 8001804:	4844      	ldr	r0, [pc, #272]	; (8001918 <main+0x2e0>)
 8001806:	f008 fc35 	bl	800a074 <HAL_IWDG_Refresh>
  GPS_init(&GPS_UART, &DEBUG_UART);
 800180a:	493e      	ldr	r1, [pc, #248]	; (8001904 <main+0x2cc>)
 800180c:	4846      	ldr	r0, [pc, #280]	; (8001928 <main+0x2f0>)
 800180e:	f002 f801 	bl	8003814 <GPS_init>

   /*
    * For the xtend
    * -huart3 on v4.3
    */
   HAL_GPIO_WritePin(XTend_CTS_Pin, GPIO_PIN_10, GPIO_PIN_RESET); //TODO is it necessary?
 8001812:	2200      	movs	r2, #0
 8001814:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001818:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800181c:	f007 fb46 	bl	8008eac <HAL_GPIO_WritePin>

   /*
    * For the SRadio
    * -SPI2 on v4.3
    */
  HAL_IWDG_Refresh(&hiwdg);
 8001820:	483d      	ldr	r0, [pc, #244]	; (8001918 <main+0x2e0>)
 8001822:	f008 fc27 	bl	800a074 <HAL_IWDG_Refresh>
  set_hspi(SRADIO_SPI);
 8001826:	4c41      	ldr	r4, [pc, #260]	; (800192c <main+0x2f4>)
 8001828:	4668      	mov	r0, sp
 800182a:	f104 0310 	add.w	r3, r4, #16
 800182e:	2248      	movs	r2, #72	; 0x48
 8001830:	4619      	mov	r1, r3
 8001832:	f018 ff83 	bl	801a73c <memcpy>
 8001836:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800183a:	f00e fd3f 	bl	80102bc <set_hspi>
  // SPI2_SX_CS_GPIO_Port
  set_NSS_pin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin);
 800183e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001842:	483b      	ldr	r0, [pc, #236]	; (8001930 <main+0x2f8>)
 8001844:	f00e fce2 	bl	801020c <set_NSS_pin>
  set_BUSY_pin(SX_BUSY_GPIO_Port, SX_BUSY_Pin);
 8001848:	2108      	movs	r1, #8
 800184a:	4829      	ldr	r0, [pc, #164]	; (80018f0 <main+0x2b8>)
 800184c:	f00e fcf4 	bl	8010238 <set_BUSY_pin>
  set_NRESET_pin(SX_RST_GPIO_Port, SX_RST_Pin);
 8001850:	2104      	movs	r1, #4
 8001852:	4827      	ldr	r0, [pc, #156]	; (80018f0 <main+0x2b8>)
 8001854:	f00e fd06 	bl	8010264 <set_NRESET_pin>
  set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
 8001858:	2110      	movs	r1, #16
 800185a:	4825      	ldr	r0, [pc, #148]	; (80018f0 <main+0x2b8>)
 800185c:	f00e fd18 	bl	8010290 <set_DIO1_pin>

	/*
	* For the SD card
	*
	*/
    HAL_IWDG_Refresh(&hiwdg);
 8001860:	482d      	ldr	r0, [pc, #180]	; (8001918 <main+0x2e0>)
 8001862:	f008 fc07 	bl	800a074 <HAL_IWDG_Refresh>
    sd_init_dynamic_filename("FC", "", filename);
 8001866:	4a33      	ldr	r2, [pc, #204]	; (8001934 <main+0x2fc>)
 8001868:	4933      	ldr	r1, [pc, #204]	; (8001938 <main+0x300>)
 800186a:	4834      	ldr	r0, [pc, #208]	; (800193c <main+0x304>)
 800186c:	f006 fb48 	bl	8007f00 <sd_init_dynamic_filename>
//TODO DISABLE EXTERNAL BUTTON INTERRUPT ONCE ROCKET IS ARMED (or find other way to completely reset the board)

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001870:	f013 fdda 	bl	8015428 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 8001874:	4a32      	ldr	r2, [pc, #200]	; (8001940 <main+0x308>)
 8001876:	2100      	movs	r1, #0
 8001878:	4832      	ldr	r0, [pc, #200]	; (8001944 <main+0x30c>)
 800187a:	f013 fe1f 	bl	80154bc <osThreadNew>
 800187e:	4603      	mov	r3, r0
 8001880:	4a31      	ldr	r2, [pc, #196]	; (8001948 <main+0x310>)
 8001882:	6013      	str	r3, [r2, #0]

  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 8001884:	4a31      	ldr	r2, [pc, #196]	; (800194c <main+0x314>)
 8001886:	2100      	movs	r1, #0
 8001888:	4831      	ldr	r0, [pc, #196]	; (8001950 <main+0x318>)
 800188a:	f013 fe17 	bl	80154bc <osThreadNew>
 800188e:	4603      	mov	r3, r0
 8001890:	4a30      	ldr	r2, [pc, #192]	; (8001954 <main+0x31c>)
 8001892:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 8001894:	4a30      	ldr	r2, [pc, #192]	; (8001958 <main+0x320>)
 8001896:	2100      	movs	r1, #0
 8001898:	4830      	ldr	r0, [pc, #192]	; (800195c <main+0x324>)
 800189a:	f013 fe0f 	bl	80154bc <osThreadNew>
 800189e:	4603      	mov	r3, r0
 80018a0:	4a2f      	ldr	r2, [pc, #188]	; (8001960 <main+0x328>)
 80018a2:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 80018a4:	4a2f      	ldr	r2, [pc, #188]	; (8001964 <main+0x32c>)
 80018a6:	2100      	movs	r1, #0
 80018a8:	482f      	ldr	r0, [pc, #188]	; (8001968 <main+0x330>)
 80018aa:	f013 fe07 	bl	80154bc <osThreadNew>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4a2e      	ldr	r2, [pc, #184]	; (800196c <main+0x334>)
 80018b2:	6013      	str	r3, [r2, #0]

  /* creation of Propulsion4 */
  Propulsion4Handle = osThreadNew(StartPropulsion4, NULL, &Propulsion4_attributes);
 80018b4:	4a2e      	ldr	r2, [pc, #184]	; (8001970 <main+0x338>)
 80018b6:	2100      	movs	r1, #0
 80018b8:	482e      	ldr	r0, [pc, #184]	; (8001974 <main+0x33c>)
 80018ba:	f013 fdff 	bl	80154bc <osThreadNew>
 80018be:	4603      	mov	r3, r0
 80018c0:	4a2d      	ldr	r2, [pc, #180]	; (8001978 <main+0x340>)
 80018c2:	6013      	str	r3, [r2, #0]

  /* creation of Printing */
  PrintingHandle = osThreadNew(StartPrinting, NULL, &Printing_attributes);
 80018c4:	4a2d      	ldr	r2, [pc, #180]	; (800197c <main+0x344>)
 80018c6:	2100      	movs	r1, #0
 80018c8:	482d      	ldr	r0, [pc, #180]	; (8001980 <main+0x348>)
 80018ca:	f013 fdf7 	bl	80154bc <osThreadNew>
 80018ce:	4603      	mov	r3, r0
 80018d0:	4a2c      	ldr	r2, [pc, #176]	; (8001984 <main+0x34c>)
 80018d2:	6013      	str	r3, [r2, #0]

  /* creation of WatchDog */
  WatchDogHandle = osThreadNew(StartWatchDog, NULL, &WatchDog_attributes);
 80018d4:	4a2c      	ldr	r2, [pc, #176]	; (8001988 <main+0x350>)
 80018d6:	2100      	movs	r1, #0
 80018d8:	482c      	ldr	r0, [pc, #176]	; (800198c <main+0x354>)
 80018da:	f013 fdef 	bl	80154bc <osThreadNew>
 80018de:	4603      	mov	r3, r0
 80018e0:	4a2b      	ldr	r2, [pc, #172]	; (8001990 <main+0x358>)
 80018e2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80018e4:	f013 fdc4 	bl	8015470 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <main+0x2b0>
 80018ea:	bf00      	nop
 80018ec:	40020800 	.word	0x40020800
 80018f0:	40021800 	.word	0x40021800
 80018f4:	40021400 	.word	0x40021400
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40020c00 	.word	0x40020c00
 8001900:	0801f9b8 	.word	0x0801f9b8
 8001904:	20005ec4 	.word	0x20005ec4
 8001908:	20006920 	.word	0x20006920
 800190c:	20000434 	.word	0x20000434
 8001910:	20000435 	.word	0x20000435
 8001914:	20000436 	.word	0x20000436
 8001918:	200062f8 	.word	0x200062f8
 800191c:	20006a60 	.word	0x20006a60
 8001920:	20005f0c 	.word	0x20005f0c
 8001924:	20006a50 	.word	0x20006a50
 8001928:	200069b8 	.word	0x200069b8
 800192c:	20005f60 	.word	0x20005f60
 8001930:	40020400 	.word	0x40020400
 8001934:	20006370 	.word	0x20006370
 8001938:	0801f9cc 	.word	0x0801f9cc
 800193c:	0801f9d0 	.word	0x0801f9d0
 8001940:	08021518 	.word	0x08021518
 8001944:	080023f1 	.word	0x080023f1
 8001948:	2000636c 	.word	0x2000636c
 800194c:	0802153c 	.word	0x0802153c
 8001950:	08002499 	.word	0x08002499
 8001954:	200069b0 	.word	0x200069b0
 8001958:	08021560 	.word	0x08021560
 800195c:	080024a9 	.word	0x080024a9
 8001960:	200069b4 	.word	0x200069b4
 8001964:	08021584 	.word	0x08021584
 8001968:	080024c5 	.word	0x080024c5
 800196c:	20006a4c 	.word	0x20006a4c
 8001970:	080215a8 	.word	0x080215a8
 8001974:	08002581 	.word	0x08002581
 8001978:	20006a6c 	.word	0x20006a6c
 800197c:	080215cc 	.word	0x080215cc
 8001980:	0800258d 	.word	0x0800258d
 8001984:	20006940 	.word	0x20006940
 8001988:	080215f0 	.word	0x080215f0
 800198c:	08002845 	.word	0x08002845
 8001990:	20006358 	.word	0x20006358

08001994 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b094      	sub	sp, #80	; 0x50
 8001998:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800199a:	f107 0320 	add.w	r3, r7, #32
 800199e:	2230      	movs	r2, #48	; 0x30
 80019a0:	2100      	movs	r1, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f018 fef2 	bl	801a78c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a8:	f107 030c 	add.w	r3, r7, #12
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b8:	2300      	movs	r3, #0
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	4b29      	ldr	r3, [pc, #164]	; (8001a64 <SystemClock_Config+0xd0>)
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	4a28      	ldr	r2, [pc, #160]	; (8001a64 <SystemClock_Config+0xd0>)
 80019c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c6:	6413      	str	r3, [r2, #64]	; 0x40
 80019c8:	4b26      	ldr	r3, [pc, #152]	; (8001a64 <SystemClock_Config+0xd0>)
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019d4:	2300      	movs	r3, #0
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <SystemClock_Config+0xd4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019e0:	4a21      	ldr	r2, [pc, #132]	; (8001a68 <SystemClock_Config+0xd4>)
 80019e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <SystemClock_Config+0xd4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80019f4:	2309      	movs	r3, #9
 80019f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019fe:	2301      	movs	r3, #1
 8001a00:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a02:	2302      	movs	r3, #2
 8001a04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001a10:	2348      	movs	r3, #72	; 0x48
 8001a12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a14:	2302      	movs	r3, #2
 8001a16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a1c:	f107 0320 	add.w	r3, r7, #32
 8001a20:	4618      	mov	r0, r3
 8001a22:	f009 fcf9 	bl	800b418 <HAL_RCC_OscConfig>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001a2c:	f000 ffae 	bl	800298c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a30:	230f      	movs	r3, #15
 8001a32:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001a34:	2301      	movs	r3, #1
 8001a36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a46:	f107 030c 	add.w	r3, r7, #12
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f009 ff5b 	bl	800b908 <HAL_RCC_ClockConfig>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001a58:	f000 ff98 	bl	800298c <Error_Handler>
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	3750      	adds	r7, #80	; 0x50
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40007000 	.word	0x40007000

08001a6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a72:	463b      	mov	r3, r7
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a7e:	4b21      	ldr	r3, [pc, #132]	; (8001b04 <MX_ADC1_Init+0x98>)
 8001a80:	4a21      	ldr	r2, [pc, #132]	; (8001b08 <MX_ADC1_Init+0x9c>)
 8001a82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a84:	4b1f      	ldr	r3, [pc, #124]	; (8001b04 <MX_ADC1_Init+0x98>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a8a:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <MX_ADC1_Init+0x98>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a90:	4b1c      	ldr	r3, [pc, #112]	; (8001b04 <MX_ADC1_Init+0x98>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a96:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <MX_ADC1_Init+0x98>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <MX_ADC1_Init+0x98>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001aa4:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <MX_ADC1_Init+0x98>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001aaa:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <MX_ADC1_Init+0x98>)
 8001aac:	4a17      	ldr	r2, [pc, #92]	; (8001b0c <MX_ADC1_Init+0xa0>)
 8001aae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ab0:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <MX_ADC1_Init+0x98>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001ab6:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <MX_ADC1_Init+0x98>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001abc:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <MX_ADC1_Init+0x98>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <MX_ADC1_Init+0x98>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001aca:	480e      	ldr	r0, [pc, #56]	; (8001b04 <MX_ADC1_Init+0x98>)
 8001acc:	f006 fca4 	bl	8008418 <HAL_ADC_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001ad6:	f000 ff59 	bl	800298c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001ada:	2306      	movs	r3, #6
 8001adc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ae6:	463b      	mov	r3, r7
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4806      	ldr	r0, [pc, #24]	; (8001b04 <MX_ADC1_Init+0x98>)
 8001aec:	f006 fcd8 	bl	80084a0 <HAL_ADC_ConfigChannel>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001af6:	f000 ff49 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001afa:	bf00      	nop
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	2000676c 	.word	0x2000676c
 8001b08:	40012000 	.word	0x40012000
 8001b0c:	0f000001 	.word	0x0f000001

08001b10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b14:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <MX_I2C1_Init+0x74>)
 8001b16:	4a1c      	ldr	r2, [pc, #112]	; (8001b88 <MX_I2C1_Init+0x78>)
 8001b18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b1a:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <MX_I2C1_Init+0x74>)
 8001b1c:	4a1b      	ldr	r2, [pc, #108]	; (8001b8c <MX_I2C1_Init+0x7c>)
 8001b1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b20:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <MX_I2C1_Init+0x74>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b26:	4b17      	ldr	r3, [pc, #92]	; (8001b84 <MX_I2C1_Init+0x74>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b2c:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <MX_I2C1_Init+0x74>)
 8001b2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b34:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <MX_I2C1_Init+0x74>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b3a:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <MX_I2C1_Init+0x74>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b40:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <MX_I2C1_Init+0x74>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b46:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <MX_I2C1_Init+0x74>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b4c:	480d      	ldr	r0, [pc, #52]	; (8001b84 <MX_I2C1_Init+0x74>)
 8001b4e:	f007 f9df 	bl	8008f10 <HAL_I2C_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b58:	f000 ff18 	bl	800298c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4809      	ldr	r0, [pc, #36]	; (8001b84 <MX_I2C1_Init+0x74>)
 8001b60:	f008 f9cb 	bl	8009efa <HAL_I2CEx_ConfigAnalogFilter>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001b6a:	f000 ff0f 	bl	800298c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4804      	ldr	r0, [pc, #16]	; (8001b84 <MX_I2C1_Init+0x74>)
 8001b72:	f008 f9fe 	bl	8009f72 <HAL_I2CEx_ConfigDigitalFilter>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001b7c:	f000 ff06 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	200062a4 	.word	0x200062a4
 8001b88:	40005400 	.word	0x40005400
 8001b8c:	000186a0 	.word	0x000186a0

08001b90 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b94:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <MX_I2C2_Init+0x74>)
 8001b96:	4a1c      	ldr	r2, [pc, #112]	; (8001c08 <MX_I2C2_Init+0x78>)
 8001b98:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <MX_I2C2_Init+0x74>)
 8001b9c:	4a1b      	ldr	r2, [pc, #108]	; (8001c0c <MX_I2C2_Init+0x7c>)
 8001b9e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ba0:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <MX_I2C2_Init+0x74>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001ba6:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <MX_I2C2_Init+0x74>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bac:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <MX_I2C2_Init+0x74>)
 8001bae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bb2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bb4:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <MX_I2C2_Init+0x74>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001bba:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <MX_I2C2_Init+0x74>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bc0:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <MX_I2C2_Init+0x74>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bc6:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <MX_I2C2_Init+0x74>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001bcc:	480d      	ldr	r0, [pc, #52]	; (8001c04 <MX_I2C2_Init+0x74>)
 8001bce:	f007 f99f 	bl	8008f10 <HAL_I2C_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001bd8:	f000 fed8 	bl	800298c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4809      	ldr	r0, [pc, #36]	; (8001c04 <MX_I2C2_Init+0x74>)
 8001be0:	f008 f98b 	bl	8009efa <HAL_I2CEx_ConfigAnalogFilter>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001bea:	f000 fecf 	bl	800298c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4804      	ldr	r0, [pc, #16]	; (8001c04 <MX_I2C2_Init+0x74>)
 8001bf2:	f008 f9be 	bl	8009f72 <HAL_I2CEx_ConfigDigitalFilter>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001bfc:	f000 fec6 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20006304 	.word	0x20006304
 8001c08:	40005800 	.word	0x40005800
 8001c0c:	000186a0 	.word	0x000186a0

08001c10 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001c14:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <MX_I2C3_Init+0x74>)
 8001c16:	4a1c      	ldr	r2, [pc, #112]	; (8001c88 <MX_I2C3_Init+0x78>)
 8001c18:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <MX_I2C3_Init+0x74>)
 8001c1c:	4a1b      	ldr	r2, [pc, #108]	; (8001c8c <MX_I2C3_Init+0x7c>)
 8001c1e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c20:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <MX_I2C3_Init+0x74>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001c26:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <MX_I2C3_Init+0x74>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c2c:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <MX_I2C3_Init+0x74>)
 8001c2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c32:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c34:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <MX_I2C3_Init+0x74>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001c3a:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <MX_I2C3_Init+0x74>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c40:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <MX_I2C3_Init+0x74>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c46:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <MX_I2C3_Init+0x74>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c4c:	480d      	ldr	r0, [pc, #52]	; (8001c84 <MX_I2C3_Init+0x74>)
 8001c4e:	f007 f95f 	bl	8008f10 <HAL_I2C_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001c58:	f000 fe98 	bl	800298c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4809      	ldr	r0, [pc, #36]	; (8001c84 <MX_I2C3_Init+0x74>)
 8001c60:	f008 f94b 	bl	8009efa <HAL_I2CEx_ConfigAnalogFilter>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001c6a:	f000 fe8f 	bl	800298c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001c6e:	2100      	movs	r1, #0
 8001c70:	4804      	ldr	r0, [pc, #16]	; (8001c84 <MX_I2C3_Init+0x74>)
 8001c72:	f008 f97e 	bl	8009f72 <HAL_I2CEx_ConfigDigitalFilter>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001c7c:	f000 fe86 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20005f0c 	.word	0x20005f0c
 8001c88:	40005c00 	.word	0x40005c00
 8001c8c:	000186a0 	.word	0x000186a0

08001c90 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <MX_IWDG_Init+0x2c>)
 8001c96:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <MX_IWDG_Init+0x30>)
 8001c98:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001c9a:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <MX_IWDG_Init+0x2c>)
 8001c9c:	2204      	movs	r2, #4
 8001c9e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2499;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <MX_IWDG_Init+0x2c>)
 8001ca2:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001ca6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001ca8:	4804      	ldr	r0, [pc, #16]	; (8001cbc <MX_IWDG_Init+0x2c>)
 8001caa:	f008 f9a1 	bl	8009ff0 <HAL_IWDG_Init>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001cb4:	f000 fe6a 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	200062f8 	.word	0x200062f8
 8001cc0:	40003000 	.word	0x40003000

08001cc4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b090      	sub	sp, #64	; 0x40
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001cca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]
 8001cd4:	609a      	str	r2, [r3, #8]
 8001cd6:	60da      	str	r2, [r3, #12]
 8001cd8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001cda:	2300      	movs	r3, #0
 8001cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001cde:	463b      	mov	r3, r7
 8001ce0:	2228      	movs	r2, #40	; 0x28
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f018 fd51 	bl	801a78c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001cea:	4b3a      	ldr	r3, [pc, #232]	; (8001dd4 <MX_RTC_Init+0x110>)
 8001cec:	4a3a      	ldr	r2, [pc, #232]	; (8001dd8 <MX_RTC_Init+0x114>)
 8001cee:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001cf0:	4b38      	ldr	r3, [pc, #224]	; (8001dd4 <MX_RTC_Init+0x110>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001cf6:	4b37      	ldr	r3, [pc, #220]	; (8001dd4 <MX_RTC_Init+0x110>)
 8001cf8:	227f      	movs	r2, #127	; 0x7f
 8001cfa:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001cfc:	4b35      	ldr	r3, [pc, #212]	; (8001dd4 <MX_RTC_Init+0x110>)
 8001cfe:	22ff      	movs	r2, #255	; 0xff
 8001d00:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d02:	4b34      	ldr	r3, [pc, #208]	; (8001dd4 <MX_RTC_Init+0x110>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d08:	4b32      	ldr	r3, [pc, #200]	; (8001dd4 <MX_RTC_Init+0x110>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d0e:	4b31      	ldr	r3, [pc, #196]	; (8001dd4 <MX_RTC_Init+0x110>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d14:	482f      	ldr	r0, [pc, #188]	; (8001dd4 <MX_RTC_Init+0x110>)
 8001d16:	f00a f9e1 	bl	800c0dc <HAL_RTC_Init>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001d20:	f000 fe34 	bl	800298c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d42:	2201      	movs	r2, #1
 8001d44:	4619      	mov	r1, r3
 8001d46:	4823      	ldr	r0, [pc, #140]	; (8001dd4 <MX_RTC_Init+0x110>)
 8001d48:	f00a fa59 	bl	800c1fe <HAL_RTC_SetTime>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001d52:	f000 fe1b 	bl	800298c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d56:	2301      	movs	r3, #1
 8001d58:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001d62:	2301      	movs	r3, #1
 8001d64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d72:	2201      	movs	r2, #1
 8001d74:	4619      	mov	r1, r3
 8001d76:	4817      	ldr	r0, [pc, #92]	; (8001dd4 <MX_RTC_Init+0x110>)
 8001d78:	f00a fb5c 	bl	800c434 <HAL_RTC_SetDate>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001d82:	f000 fe03 	bl	800298c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001daa:	2301      	movs	r3, #1
 8001dac:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001db0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001db6:	463b      	mov	r3, r7
 8001db8:	2201      	movs	r2, #1
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4805      	ldr	r0, [pc, #20]	; (8001dd4 <MX_RTC_Init+0x110>)
 8001dbe:	f00a fc2f 	bl	800c620 <HAL_RTC_SetAlarm_IT>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001dc8:	f000 fde0 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001dcc:	bf00      	nop
 8001dce:	3740      	adds	r7, #64	; 0x40
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20006920 	.word	0x20006920
 8001dd8:	40002800 	.word	0x40002800

08001ddc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001de0:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <MX_SPI2_Init+0x64>)
 8001de2:	4a18      	ldr	r2, [pc, #96]	; (8001e44 <MX_SPI2_Init+0x68>)
 8001de4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <MX_SPI2_Init+0x64>)
 8001de8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001dec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001dee:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <MX_SPI2_Init+0x64>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001df4:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <MX_SPI2_Init+0x64>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dfa:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <MX_SPI2_Init+0x64>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e00:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <MX_SPI2_Init+0x64>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e06:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <MX_SPI2_Init+0x64>)
 8001e08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e0c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e0e:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <MX_SPI2_Init+0x64>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e14:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <MX_SPI2_Init+0x64>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <MX_SPI2_Init+0x64>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <MX_SPI2_Init+0x64>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001e26:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <MX_SPI2_Init+0x64>)
 8001e28:	220a      	movs	r2, #10
 8001e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e2c:	4804      	ldr	r0, [pc, #16]	; (8001e40 <MX_SPI2_Init+0x64>)
 8001e2e:	f00a ff27 	bl	800cc80 <HAL_SPI_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001e38:	f000 fda8 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20005f60 	.word	0x20005f60
 8001e44:	40003800 	.word	0x40003800

08001e48 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001e4c:	4b17      	ldr	r3, [pc, #92]	; (8001eac <MX_SPI4_Init+0x64>)
 8001e4e:	4a18      	ldr	r2, [pc, #96]	; (8001eb0 <MX_SPI4_Init+0x68>)
 8001e50:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001e52:	4b16      	ldr	r3, [pc, #88]	; (8001eac <MX_SPI4_Init+0x64>)
 8001e54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e58:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001e5a:	4b14      	ldr	r3, [pc, #80]	; (8001eac <MX_SPI4_Init+0x64>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e60:	4b12      	ldr	r3, [pc, #72]	; (8001eac <MX_SPI4_Init+0x64>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e66:	4b11      	ldr	r3, [pc, #68]	; (8001eac <MX_SPI4_Init+0x64>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <MX_SPI4_Init+0x64>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001e72:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <MX_SPI4_Init+0x64>)
 8001e74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e78:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <MX_SPI4_Init+0x64>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e80:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <MX_SPI4_Init+0x64>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <MX_SPI4_Init+0x64>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e8c:	4b07      	ldr	r3, [pc, #28]	; (8001eac <MX_SPI4_Init+0x64>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <MX_SPI4_Init+0x64>)
 8001e94:	220a      	movs	r2, #10
 8001e96:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001e98:	4804      	ldr	r0, [pc, #16]	; (8001eac <MX_SPI4_Init+0x64>)
 8001e9a:	f00a fef1 	bl	800cc80 <HAL_SPI_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001ea4:	f000 fd72 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	200068c4 	.word	0x200068c4
 8001eb0:	40013400 	.word	0x40013400

08001eb4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001eb8:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <MX_SPI5_Init+0x64>)
 8001eba:	4a18      	ldr	r2, [pc, #96]	; (8001f1c <MX_SPI5_Init+0x68>)
 8001ebc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001ebe:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <MX_SPI5_Init+0x64>)
 8001ec0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ec4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001ec6:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <MX_SPI5_Init+0x64>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ecc:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <MX_SPI5_Init+0x64>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ed2:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <MX_SPI5_Init+0x64>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ed8:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <MX_SPI5_Init+0x64>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <MX_SPI5_Init+0x64>)
 8001ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ee4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <MX_SPI5_Init+0x64>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001eec:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <MX_SPI5_Init+0x64>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ef2:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <MX_SPI5_Init+0x64>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ef8:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <MX_SPI5_Init+0x64>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <MX_SPI5_Init+0x64>)
 8001f00:	220a      	movs	r2, #10
 8001f02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001f04:	4804      	ldr	r0, [pc, #16]	; (8001f18 <MX_SPI5_Init+0x64>)
 8001f06:	f00a febb 	bl	800cc80 <HAL_SPI_Init>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001f10:	f000 fd3c 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20005fbc 	.word	0x20005fbc
 8001f1c:	40015000 	.word	0x40015000

08001f20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	; 0x28
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f26:	f107 0320 	add.w	r3, r7, #32
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f30:	1d3b      	adds	r3, r7, #4
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	60da      	str	r2, [r3, #12]
 8001f3c:	611a      	str	r2, [r3, #16]
 8001f3e:	615a      	str	r2, [r3, #20]
 8001f40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f42:	4b22      	ldr	r3, [pc, #136]	; (8001fcc <MX_TIM2_Init+0xac>)
 8001f44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f48:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f4a:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <MX_TIM2_Init+0xac>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f50:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <MX_TIM2_Init+0xac>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f56:	4b1d      	ldr	r3, [pc, #116]	; (8001fcc <MX_TIM2_Init+0xac>)
 8001f58:	f04f 32ff 	mov.w	r2, #4294967295
 8001f5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f5e:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <MX_TIM2_Init+0xac>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f64:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <MX_TIM2_Init+0xac>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f6a:	4818      	ldr	r0, [pc, #96]	; (8001fcc <MX_TIM2_Init+0xac>)
 8001f6c:	f00b fcfa 	bl	800d964 <HAL_TIM_PWM_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001f76:	f000 fd09 	bl	800298c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f82:	f107 0320 	add.w	r3, r7, #32
 8001f86:	4619      	mov	r1, r3
 8001f88:	4810      	ldr	r0, [pc, #64]	; (8001fcc <MX_TIM2_Init+0xac>)
 8001f8a:	f00c f97d 	bl	800e288 <HAL_TIMEx_MasterConfigSynchronization>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001f94:	f000 fcfa 	bl	800298c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f98:	2360      	movs	r3, #96	; 0x60
 8001f9a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fa8:	1d3b      	adds	r3, r7, #4
 8001faa:	2208      	movs	r2, #8
 8001fac:	4619      	mov	r1, r3
 8001fae:	4807      	ldr	r0, [pc, #28]	; (8001fcc <MX_TIM2_Init+0xac>)
 8001fb0:	f00b fe30 	bl	800dc14 <HAL_TIM_PWM_ConfigChannel>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001fba:	f000 fce7 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001fbe:	4803      	ldr	r0, [pc, #12]	; (8001fcc <MX_TIM2_Init+0xac>)
 8001fc0:	f000 ff3a 	bl	8002e38 <HAL_TIM_MspPostInit>

}
 8001fc4:	bf00      	nop
 8001fc6:	3728      	adds	r7, #40	; 0x28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20006a04 	.word	0x20006a04

08001fd0 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001fd4:	4b11      	ldr	r3, [pc, #68]	; (800201c <MX_UART8_Init+0x4c>)
 8001fd6:	4a12      	ldr	r2, [pc, #72]	; (8002020 <MX_UART8_Init+0x50>)
 8001fd8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001fda:	4b10      	ldr	r3, [pc, #64]	; (800201c <MX_UART8_Init+0x4c>)
 8001fdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fe0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <MX_UART8_Init+0x4c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <MX_UART8_Init+0x4c>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001fee:	4b0b      	ldr	r3, [pc, #44]	; (800201c <MX_UART8_Init+0x4c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001ff4:	4b09      	ldr	r3, [pc, #36]	; (800201c <MX_UART8_Init+0x4c>)
 8001ff6:	220c      	movs	r2, #12
 8001ff8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ffa:	4b08      	ldr	r3, [pc, #32]	; (800201c <MX_UART8_Init+0x4c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <MX_UART8_Init+0x4c>)
 8002002:	2200      	movs	r2, #0
 8002004:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002006:	4805      	ldr	r0, [pc, #20]	; (800201c <MX_UART8_Init+0x4c>)
 8002008:	f00c f9ce 	bl	800e3a8 <HAL_UART_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8002012:	f000 fcbb 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20005ec4 	.word	0x20005ec4
 8002020:	40007c00 	.word	0x40007c00

08002024 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002028:	4b11      	ldr	r3, [pc, #68]	; (8002070 <MX_USART3_UART_Init+0x4c>)
 800202a:	4a12      	ldr	r2, [pc, #72]	; (8002074 <MX_USART3_UART_Init+0x50>)
 800202c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <MX_USART3_UART_Init+0x4c>)
 8002030:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002034:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002036:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <MX_USART3_UART_Init+0x4c>)
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <MX_USART3_UART_Init+0x4c>)
 800203e:	2200      	movs	r2, #0
 8002040:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002042:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <MX_USART3_UART_Init+0x4c>)
 8002044:	2200      	movs	r2, #0
 8002046:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002048:	4b09      	ldr	r3, [pc, #36]	; (8002070 <MX_USART3_UART_Init+0x4c>)
 800204a:	220c      	movs	r2, #12
 800204c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800204e:	4b08      	ldr	r3, [pc, #32]	; (8002070 <MX_USART3_UART_Init+0x4c>)
 8002050:	2200      	movs	r2, #0
 8002052:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002054:	4b06      	ldr	r3, [pc, #24]	; (8002070 <MX_USART3_UART_Init+0x4c>)
 8002056:	2200      	movs	r2, #0
 8002058:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800205a:	4805      	ldr	r0, [pc, #20]	; (8002070 <MX_USART3_UART_Init+0x4c>)
 800205c:	f00c f9a4 	bl	800e3a8 <HAL_UART_Init>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002066:	f000 fc91 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20006014 	.word	0x20006014
 8002074:	40004800 	.word	0x40004800

08002078 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800207c:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <MX_USART6_UART_Init+0x4c>)
 800207e:	4a12      	ldr	r2, [pc, #72]	; (80020c8 <MX_USART6_UART_Init+0x50>)
 8002080:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <MX_USART6_UART_Init+0x4c>)
 8002084:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002088:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800208a:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <MX_USART6_UART_Init+0x4c>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002090:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <MX_USART6_UART_Init+0x4c>)
 8002092:	2200      	movs	r2, #0
 8002094:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <MX_USART6_UART_Init+0x4c>)
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800209c:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <MX_USART6_UART_Init+0x4c>)
 800209e:	220c      	movs	r2, #12
 80020a0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020a2:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <MX_USART6_UART_Init+0x4c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a8:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <MX_USART6_UART_Init+0x4c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80020ae:	4805      	ldr	r0, [pc, #20]	; (80020c4 <MX_USART6_UART_Init+0x4c>)
 80020b0:	f00c f97a 	bl	800e3a8 <HAL_UART_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80020ba:	f000 fc67 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200069b8 	.word	0x200069b8
 80020c8:	40011400 	.word	0x40011400

080020cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08e      	sub	sp, #56	; 0x38
 80020d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	609a      	str	r2, [r3, #8]
 80020de:	60da      	str	r2, [r3, #12]
 80020e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	623b      	str	r3, [r7, #32]
 80020e6:	4bb5      	ldr	r3, [pc, #724]	; (80023bc <MX_GPIO_Init+0x2f0>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4ab4      	ldr	r2, [pc, #720]	; (80023bc <MX_GPIO_Init+0x2f0>)
 80020ec:	f043 0310 	orr.w	r3, r3, #16
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4bb2      	ldr	r3, [pc, #712]	; (80023bc <MX_GPIO_Init+0x2f0>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0310 	and.w	r3, r3, #16
 80020fa:	623b      	str	r3, [r7, #32]
 80020fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
 8002102:	4bae      	ldr	r3, [pc, #696]	; (80023bc <MX_GPIO_Init+0x2f0>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4aad      	ldr	r2, [pc, #692]	; (80023bc <MX_GPIO_Init+0x2f0>)
 8002108:	f043 0304 	orr.w	r3, r3, #4
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4bab      	ldr	r3, [pc, #684]	; (80023bc <MX_GPIO_Init+0x2f0>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	61fb      	str	r3, [r7, #28]
 8002118:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	61bb      	str	r3, [r7, #24]
 800211e:	4ba7      	ldr	r3, [pc, #668]	; (80023bc <MX_GPIO_Init+0x2f0>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	4aa6      	ldr	r2, [pc, #664]	; (80023bc <MX_GPIO_Init+0x2f0>)
 8002124:	f043 0320 	orr.w	r3, r3, #32
 8002128:	6313      	str	r3, [r2, #48]	; 0x30
 800212a:	4ba4      	ldr	r3, [pc, #656]	; (80023bc <MX_GPIO_Init+0x2f0>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f003 0320 	and.w	r3, r3, #32
 8002132:	61bb      	str	r3, [r7, #24]
 8002134:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	4ba0      	ldr	r3, [pc, #640]	; (80023bc <MX_GPIO_Init+0x2f0>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4a9f      	ldr	r2, [pc, #636]	; (80023bc <MX_GPIO_Init+0x2f0>)
 8002140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4b9d      	ldr	r3, [pc, #628]	; (80023bc <MX_GPIO_Init+0x2f0>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	4b99      	ldr	r3, [pc, #612]	; (80023bc <MX_GPIO_Init+0x2f0>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a98      	ldr	r2, [pc, #608]	; (80023bc <MX_GPIO_Init+0x2f0>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b96      	ldr	r3, [pc, #600]	; (80023bc <MX_GPIO_Init+0x2f0>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	4b92      	ldr	r3, [pc, #584]	; (80023bc <MX_GPIO_Init+0x2f0>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a91      	ldr	r2, [pc, #580]	; (80023bc <MX_GPIO_Init+0x2f0>)
 8002178:	f043 0302 	orr.w	r3, r3, #2
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b8f      	ldr	r3, [pc, #572]	; (80023bc <MX_GPIO_Init+0x2f0>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	4b8b      	ldr	r3, [pc, #556]	; (80023bc <MX_GPIO_Init+0x2f0>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	4a8a      	ldr	r2, [pc, #552]	; (80023bc <MX_GPIO_Init+0x2f0>)
 8002194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002198:	6313      	str	r3, [r2, #48]	; 0x30
 800219a:	4b88      	ldr	r3, [pc, #544]	; (80023bc <MX_GPIO_Init+0x2f0>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	607b      	str	r3, [r7, #4]
 80021aa:	4b84      	ldr	r3, [pc, #528]	; (80023bc <MX_GPIO_Init+0x2f0>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	4a83      	ldr	r2, [pc, #524]	; (80023bc <MX_GPIO_Init+0x2f0>)
 80021b0:	f043 0308 	orr.w	r3, r3, #8
 80021b4:	6313      	str	r3, [r2, #48]	; 0x30
 80021b6:	4b81      	ldr	r3, [pc, #516]	; (80023bc <MX_GPIO_Init+0x2f0>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	607b      	str	r3, [r7, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 80021c2:	2200      	movs	r2, #0
 80021c4:	f248 4184 	movw	r1, #33924	; 0x8484
 80021c8:	487d      	ldr	r0, [pc, #500]	; (80023c0 <MX_GPIO_Init+0x2f4>)
 80021ca:	f006 fe6f 	bl	8008eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 80021ce:	2200      	movs	r2, #0
 80021d0:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 80021d4:	487b      	ldr	r0, [pc, #492]	; (80023c4 <MX_GPIO_Init+0x2f8>)
 80021d6:	f006 fe69 	bl	8008eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 80021da:	2200      	movs	r2, #0
 80021dc:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80021e0:	4879      	ldr	r0, [pc, #484]	; (80023c8 <MX_GPIO_Init+0x2fc>)
 80021e2:	f006 fe63 	bl	8008eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 80021e6:	2200      	movs	r2, #0
 80021e8:	2108      	movs	r1, #8
 80021ea:	4878      	ldr	r0, [pc, #480]	; (80023cc <MX_GPIO_Init+0x300>)
 80021ec:	f006 fe5e 	bl	8008eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 80021f0:	2200      	movs	r2, #0
 80021f2:	f645 2126 	movw	r1, #23078	; 0x5a26
 80021f6:	4876      	ldr	r0, [pc, #472]	; (80023d0 <MX_GPIO_Init+0x304>)
 80021f8:	f006 fe58 	bl	8008eac <HAL_GPIO_WritePin>
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin, GPIO_PIN_RESET);
 80021fc:	2200      	movs	r2, #0
 80021fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002202:	4874      	ldr	r0, [pc, #464]	; (80023d4 <MX_GPIO_Init+0x308>)
 8002204:	f006 fe52 	bl	8008eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8002208:	2200      	movs	r2, #0
 800220a:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 800220e:	4872      	ldr	r0, [pc, #456]	; (80023d8 <MX_GPIO_Init+0x30c>)
 8002210:	f006 fe4c 	bl	8008eac <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_12V_Buck_Pin OUT_Prop_ActuatedVent_Gate_Pin SPI4_CS_Thermocouple_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 8002214:	f248 4384 	movw	r3, #33924	; 0x8484
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800221a:	2301      	movs	r3, #1
 800221c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002222:	2300      	movs	r3, #0
 8002224:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800222a:	4619      	mov	r1, r3
 800222c:	4864      	ldr	r0, [pc, #400]	; (80023c0 <MX_GPIO_Init+0x2f4>)
 800222e:	f006 fc79 	bl	8008b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin OUT_PyroValve_Gate_2_Pin OUT_PyroValve_Gate_1_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 8002232:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002238:	2301      	movs	r3, #1
 800223a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002240:	2300      	movs	r3, #0
 8002242:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002248:	4619      	mov	r1, r3
 800224a:	485e      	ldr	r0, [pc, #376]	; (80023c4 <MX_GPIO_Init+0x2f8>)
 800224c:	f006 fc6a 	bl	8008b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 8002250:	2301      	movs	r3, #1
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002254:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002258:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 800225e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002262:	4619      	mov	r1, r3
 8002264:	4858      	ldr	r0, [pc, #352]	; (80023c8 <MX_GPIO_Init+0x2fc>)
 8002266:	f006 fc5d 	bl	8008b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LED1_Pin OUT_LED2_Pin OUT_LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 800226a:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002270:	2301      	movs	r3, #1
 8002272:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002278:	2300      	movs	r3, #0
 800227a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800227c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002280:	4619      	mov	r1, r3
 8002282:	4851      	ldr	r0, [pc, #324]	; (80023c8 <MX_GPIO_Init+0x2fc>)
 8002284:	f006 fc4e 	bl	8008b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LEDF_Pin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 8002288:	2308      	movs	r3, #8
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800228c:	2301      	movs	r3, #1
 800228e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002294:	2300      	movs	r3, #0
 8002296:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 8002298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800229c:	4619      	mov	r1, r3
 800229e:	484b      	ldr	r0, [pc, #300]	; (80023cc <MX_GPIO_Init+0x300>)
 80022a0:	f006 fc40 	bl	8008b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_Prop_PyroTurboValve_LimitSwitch_Pin IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 80022a4:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022aa:	2300      	movs	r3, #0
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b6:	4619      	mov	r1, r3
 80022b8:	4843      	ldr	r0, [pc, #268]	; (80023c8 <MX_GPIO_Init+0x2fc>)
 80022ba:	f006 fc33 	bl	8008b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 80022be:	2302      	movs	r3, #2
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c2:	2300      	movs	r3, #0
 80022c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 80022ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ce:	4619      	mov	r1, r3
 80022d0:	4840      	ldr	r0, [pc, #256]	; (80023d4 <MX_GPIO_Init+0x308>)
 80022d2:	f006 fc27 	bl	8008b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_PyroValve_Cont_2_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 80022d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022dc:	2300      	movs	r3, #0
 80022de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 80022e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e8:	4619      	mov	r1, r3
 80022ea:	4836      	ldr	r0, [pc, #216]	; (80023c4 <MX_GPIO_Init+0x2f8>)
 80022ec:	f006 fc1a 	bl	8008b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_PyroValve_Cont_1_Pin SX_BUSY_Pin SX_DIO_Pin IN_EJ_Main_Cont_Pin
                           IN_EJ_Drogue_Cont_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|IN_EJ_Main_Cont_Pin
 80022f0:	f242 4319 	movw	r3, #9241	; 0x2419
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
                          |IN_EJ_Drogue_Cont_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022f6:	2300      	movs	r3, #0
 80022f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002302:	4619      	mov	r1, r3
 8002304:	4832      	ldr	r0, [pc, #200]	; (80023d0 <MX_GPIO_Init+0x304>)
 8002306:	f006 fc0d 	bl	8008b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_PyroValve_Arming_Pin SX_RST_Pin SX_RF_SW_Pin OUT_VR_PWR_Pin
                           OUT_EJ_Main_Gate_Pin OUT_EJ_Drogue_Gate_Pin OUT_EJ_Arming_Pin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 800230a:	f645 2326 	movw	r3, #23078	; 0x5a26
 800230e:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002310:	2301      	movs	r3, #1
 8002312:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002318:	2300      	movs	r3, #0
 800231a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800231c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002320:	4619      	mov	r1, r3
 8002322:	482b      	ldr	r0, [pc, #172]	; (80023d0 <MX_GPIO_Init+0x304>)
 8002324:	f006 fbfe 	bl	8008b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAYLOAD_I2C_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 8002328:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800232e:	2300      	movs	r3, #0
 8002330:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800233a:	4619      	mov	r1, r3
 800233c:	4820      	ldr	r0, [pc, #128]	; (80023c0 <MX_GPIO_Init+0x2f4>)
 800233e:	f006 fbf1 	bl	8008b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SX_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin;
 8002342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002348:	2301      	movs	r3, #1
 800234a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002350:	2300      	movs	r3, #0
 8002352:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_SX_CS_GPIO_Port, &GPIO_InitStruct);
 8002354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002358:	4619      	mov	r1, r3
 800235a:	481e      	ldr	r0, [pc, #120]	; (80023d4 <MX_GPIO_Init+0x308>)
 800235c:	f006 fbe2 	bl	8008b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin OUT_FLASH_IO3_Pin OUT_FLASH_WP_Pin OUT_FLASH_CS_Pin
                           OUT_VR_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8002360:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002366:	2301      	movs	r3, #1
 8002368:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236e:	2300      	movs	r3, #0
 8002370:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002376:	4619      	mov	r1, r3
 8002378:	4817      	ldr	r0, [pc, #92]	; (80023d8 <MX_GPIO_Init+0x30c>)
 800237a:	f006 fbd3 	bl	8008b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 800237e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002384:	2300      	movs	r3, #0
 8002386:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 800238c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002390:	4619      	mov	r1, r3
 8002392:	4811      	ldr	r0, [pc, #68]	; (80023d8 <MX_GPIO_Init+0x30c>)
 8002394:	f006 fbc6 	bl	8008b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_LSM6DSR_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 8002398:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800239e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80023a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ac:	4619      	mov	r1, r3
 80023ae:	4808      	ldr	r0, [pc, #32]	; (80023d0 <MX_GPIO_Init+0x304>)
 80023b0:	f006 fbb8 	bl	8008b24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80023b4:	2200      	movs	r2, #0
 80023b6:	2105      	movs	r1, #5
 80023b8:	2006      	movs	r0, #6
 80023ba:	e00f      	b.n	80023dc <MX_GPIO_Init+0x310>
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40021400 	.word	0x40021400
 80023c8:	40020800 	.word	0x40020800
 80023cc:	40020000 	.word	0x40020000
 80023d0:	40021800 	.word	0x40021800
 80023d4:	40020400 	.word	0x40020400
 80023d8:	40020c00 	.word	0x40020c00
 80023dc:	f006 fb6a 	bl	8008ab4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80023e0:	2006      	movs	r0, #6
 80023e2:	f006 fb83 	bl	8008aec <HAL_NVIC_EnableIRQ>

}
 80023e6:	bf00      	nop
 80023e8:	3738      	adds	r7, #56	; 0x38
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop

080023f0 <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 80023f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023f4:	b088      	sub	sp, #32
 80023f6:	af06      	add	r7, sp, #24
 80023f8:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80023fa:	f016 fb87 	bl	8018b0c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */

	//osThreadExit();

	//Add thread id to the list
	threadID[0]=osThreadGetId();
 80023fe:	f013 f8ef 	bl	80155e0 <osThreadGetId>
 8002402:	4603      	mov	r3, r0
 8002404:	4a1b      	ldr	r2, [pc, #108]	; (8002474 <StartMemory0+0x84>)
 8002406:	6013      	str	r3, [r2, #0]
	  for(;;)
	  {


		  //Write data to sd and flash
		  sd_open_file(&filename);
 8002408:	481b      	ldr	r0, [pc, #108]	; (8002478 <StartMemory0+0x88>)
 800240a:	f005 fdf7 	bl	8007ffc <sd_open_file>
		  sprintf((char*)writeBuf, "Data: %f, %f, %f, %f\r\n", PRESSURE, MIN, SEC, SUBSEC);
 800240e:	4b1b      	ldr	r3, [pc, #108]	; (800247c <StartMemory0+0x8c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe f8a8 	bl	8000568 <__aeabi_f2d>
 8002418:	4682      	mov	sl, r0
 800241a:	468b      	mov	fp, r1
 800241c:	4b18      	ldr	r3, [pc, #96]	; (8002480 <StartMemory0+0x90>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe f8a1 	bl	8000568 <__aeabi_f2d>
 8002426:	4604      	mov	r4, r0
 8002428:	460d      	mov	r5, r1
 800242a:	4b16      	ldr	r3, [pc, #88]	; (8002484 <StartMemory0+0x94>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe f89a 	bl	8000568 <__aeabi_f2d>
 8002434:	4680      	mov	r8, r0
 8002436:	4689      	mov	r9, r1
 8002438:	4b13      	ldr	r3, [pc, #76]	; (8002488 <StartMemory0+0x98>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f7fe f893 	bl	8000568 <__aeabi_f2d>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800244a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800244e:	e9cd 4500 	strd	r4, r5, [sp]
 8002452:	4652      	mov	r2, sl
 8002454:	465b      	mov	r3, fp
 8002456:	490d      	ldr	r1, [pc, #52]	; (800248c <StartMemory0+0x9c>)
 8002458:	480d      	ldr	r0, [pc, #52]	; (8002490 <StartMemory0+0xa0>)
 800245a:	f019 fa15 	bl	801b888 <siprintf>
		  sd_write(&fil, writeBuf);
 800245e:	490c      	ldr	r1, [pc, #48]	; (8002490 <StartMemory0+0xa0>)
 8002460:	480c      	ldr	r0, [pc, #48]	; (8002494 <StartMemory0+0xa4>)
 8002462:	f005 fde3 	bl	800802c <sd_write>
		  f_close(&fil);
 8002466:	480b      	ldr	r0, [pc, #44]	; (8002494 <StartMemory0+0xa4>)
 8002468:	f012 fb8e 	bl	8014b88 <f_close>

		  osDelay(1000/DATA_FREQ);
 800246c:	2064      	movs	r0, #100	; 0x64
 800246e:	f013 f8c8 	bl	8015602 <osDelay>
	  {
 8002472:	e7c9      	b.n	8002408 <StartMemory0+0x18>
 8002474:	2000605c 	.word	0x2000605c
 8002478:	20006370 	.word	0x20006370
 800247c:	20006360 	.word	0x20006360
 8002480:	20006ca8 	.word	0x20006ca8
 8002484:	20006368 	.word	0x20006368
 8002488:	20006ca4 	.word	0x20006ca4
 800248c:	0801f9d4 	.word	0x0801f9d4
 8002490:	20006384 	.word	0x20006384
 8002494:	20006a74 	.word	0x20006a74

08002498 <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b0c2      	sub	sp, #264	; 0x108
 800249c:	af00      	add	r7, sp, #0
 800249e:	1d3b      	adds	r3, r7, #4
 80024a0:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartEjection1 */

	osThreadExit();
 80024a2:	f013 f8a8 	bl	80155f6 <osThreadExit>
	...

080024a8 <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemetry2 */

	//Add thread id to the list
	threadID[2]=osThreadGetId();
 80024b0:	f013 f896 	bl	80155e0 <osThreadGetId>
 80024b4:	4603      	mov	r3, r0
 80024b6:	4a02      	ldr	r2, [pc, #8]	; (80024c0 <StartTelemetry2+0x18>)
 80024b8:	6093      	str	r3, [r2, #8]

	osThreadExit();
 80024ba:	f013 f89c 	bl	80155f6 <osThreadExit>
 80024be:	bf00      	nop
 80024c0:	2000605c 	.word	0x2000605c

080024c4 <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	//osThreadExit();

	//Add thread id to the list
	threadID[3]=osThreadGetId();
 80024cc:	f013 f888 	bl	80155e0 <osThreadGetId>
 80024d0:	4603      	mov	r3, r0
 80024d2:	4a1e      	ldr	r2, [pc, #120]	; (800254c <StartSensors3+0x88>)
 80024d4:	60d3      	str	r3, [r2, #12]

  for(;;)
  {

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 80024d6:	2201      	movs	r2, #1
 80024d8:	2102      	movs	r1, #2
 80024da:	481d      	ldr	r0, [pc, #116]	; (8002550 <StartSensors3+0x8c>)
 80024dc:	f006 fce6 	bl	8008eac <HAL_GPIO_WritePin>


	  //GPS
	  GPS_Poll(&LATITUDE, &LONGITUDE, &time);
 80024e0:	4a1c      	ldr	r2, [pc, #112]	; (8002554 <StartSensors3+0x90>)
 80024e2:	491d      	ldr	r1, [pc, #116]	; (8002558 <StartSensors3+0x94>)
 80024e4:	481d      	ldr	r0, [pc, #116]	; (800255c <StartSensors3+0x98>)
 80024e6:	f000 ff33 	bl	8003350 <GPS_Poll>

  	  //LSM6DSR
  	  MRT_LSM6DSR_getAcceleration(lsm_ctx,acceleration_mg);
 80024ea:	4a1d      	ldr	r2, [pc, #116]	; (8002560 <StartSensors3+0x9c>)
 80024ec:	4b1d      	ldr	r3, [pc, #116]	; (8002564 <StartSensors3+0xa0>)
 80024ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80024f0:	f7fe fe8e 	bl	8001210 <MRT_LSM6DSR_getAcceleration>
  	  MRT_LSM6DSR_getAngularRate(lsm_ctx,angular_rate_mdps);
 80024f4:	4a1a      	ldr	r2, [pc, #104]	; (8002560 <StartSensors3+0x9c>)
 80024f6:	4b1c      	ldr	r3, [pc, #112]	; (8002568 <StartSensors3+0xa4>)
 80024f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80024fa:	f7fe fef9 	bl	80012f0 <MRT_LSM6DSR_getAngularRate>
	  MRT_LSM6DSR_getTemperature(lsm_ctx,&lsm_temperature_degC);
 80024fe:	4a18      	ldr	r2, [pc, #96]	; (8002560 <StartSensors3+0x9c>)
 8002500:	4b1a      	ldr	r3, [pc, #104]	; (800256c <StartSensors3+0xa8>)
 8002502:	ca07      	ldmia	r2, {r0, r1, r2}
 8002504:	f7fe feca 	bl	800129c <MRT_LSM6DSR_getTemperature>

	  //LPS22HH
  	  MRT_LPS22HH_getPressure(lps_ctx,&pressure_hPa);
 8002508:	4a19      	ldr	r2, [pc, #100]	; (8002570 <StartSensors3+0xac>)
 800250a:	4b1a      	ldr	r3, [pc, #104]	; (8002574 <StartSensors3+0xb0>)
 800250c:	ca07      	ldmia	r2, {r0, r1, r2}
 800250e:	f7fe ffed 	bl	80014ec <MRT_LPS22HH_getPressure>
	  MRT_LPS22HH_getTemperature(lps_ctx,&lps_temperature_degC);
 8002512:	4a17      	ldr	r2, [pc, #92]	; (8002570 <StartSensors3+0xac>)
 8002514:	4b18      	ldr	r3, [pc, #96]	; (8002578 <StartSensors3+0xb4>)
 8002516:	ca07      	ldmia	r2, {r0, r1, r2}
 8002518:	f7ff f814 	bl	8001544 <MRT_LPS22HH_getTemperature>
	  altitude_m = MRT_getAltitude(pressure_hPa); //Update altitude
 800251c:	4b15      	ldr	r3, [pc, #84]	; (8002574 <StartSensors3+0xb0>)
 800251e:	edd3 7a00 	vldr	s15, [r3]
 8002522:	eeb0 0a67 	vmov.f32	s0, s15
 8002526:	f001 fbf7 	bl	8003d18 <MRT_getAltitude>
 800252a:	eef0 7a40 	vmov.f32	s15, s0
 800252e:	4b13      	ldr	r3, [pc, #76]	; (800257c <StartSensors3+0xb8>)
 8002530:	edc3 7a00 	vstr	s15, [r3]

	  //TODO Pressure tank (just use an analog sensor if you don't have it)


	  //Thermocouple
	  Max31855_Read_Temp();
 8002534:	f005 fc2c 	bl	8007d90 <Max31855_Read_Temp>

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 8002538:	2200      	movs	r2, #0
 800253a:	2102      	movs	r1, #2
 800253c:	4804      	ldr	r0, [pc, #16]	; (8002550 <StartSensors3+0x8c>)
 800253e:	f006 fcb5 	bl	8008eac <HAL_GPIO_WritePin>

	  osDelay(1000/POLL_FREQ);
 8002542:	2032      	movs	r0, #50	; 0x32
 8002544:	f013 f85d 	bl	8015602 <osDelay>
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8002548:	e7c5      	b.n	80024d6 <StartSensors3+0x12>
 800254a:	bf00      	nop
 800254c:	2000605c 	.word	0x2000605c
 8002550:	40020800 	.word	0x40020800
 8002554:	200069a8 	.word	0x200069a8
 8002558:	200067b4 	.word	0x200067b4
 800255c:	2000691c 	.word	0x2000691c
 8002560:	20006a60 	.word	0x20006a60
 8002564:	2000040c 	.word	0x2000040c
 8002568:	20000418 	.word	0x20000418
 800256c:	20000424 	.word	0x20000424
 8002570:	20006a50 	.word	0x20006a50
 8002574:	20000404 	.word	0x20000404
 8002578:	20000408 	.word	0x20000408
 800257c:	20000428 	.word	0x20000428

08002580 <StartPropulsion4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPropulsion4 */
void StartPropulsion4(void *argument)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPropulsion4 */

	osThreadExit();
 8002588:	f013 f835 	bl	80155f6 <osThreadExit>

0800258c <StartPrinting>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrinting */
void StartPrinting(void *argument)
{
 800258c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002590:	b0c6      	sub	sp, #280	; 0x118
 8002592:	af04      	add	r7, sp, #16
 8002594:	1d3b      	adds	r3, r7, #4
 8002596:	6018      	str	r0, [r3, #0]
	char buffer[TX_BUF_DIM];

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 8002598:	2201      	movs	r2, #1
 800259a:	2108      	movs	r1, #8
 800259c:	4897      	ldr	r0, [pc, #604]	; (80027fc <StartPrinting+0x270>)
 800259e:	f006 fc85 	bl	8008eac <HAL_GPIO_WritePin>

	  //GPS
  	  /*
  	   * TODO HOW DO WE RESET THE TIME
  	   */
	  memset(gps_data, 0, GPS_DATA_BUF_DIM);
 80025a2:	2264      	movs	r2, #100	; 0x64
 80025a4:	2100      	movs	r1, #0
 80025a6:	4896      	ldr	r0, [pc, #600]	; (8002800 <StartPrinting+0x274>)
 80025a8:	f018 f8f0 	bl	801a78c <memset>
	  sprintf(gps_data,"Alt: %.2f   Long: %.2f   Time: %.0f\r\n",LATITUDE, LONGITUDE, time);
 80025ac:	4b95      	ldr	r3, [pc, #596]	; (8002804 <StartPrinting+0x278>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fd ffd9 	bl	8000568 <__aeabi_f2d>
 80025b6:	4680      	mov	r8, r0
 80025b8:	4689      	mov	r9, r1
 80025ba:	4b93      	ldr	r3, [pc, #588]	; (8002808 <StartPrinting+0x27c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fd ffd2 	bl	8000568 <__aeabi_f2d>
 80025c4:	4604      	mov	r4, r0
 80025c6:	460d      	mov	r5, r1
 80025c8:	4b90      	ldr	r3, [pc, #576]	; (800280c <StartPrinting+0x280>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fd ffcb 	bl	8000568 <__aeabi_f2d>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80025da:	e9cd 4500 	strd	r4, r5, [sp]
 80025de:	4642      	mov	r2, r8
 80025e0:	464b      	mov	r3, r9
 80025e2:	498b      	ldr	r1, [pc, #556]	; (8002810 <StartPrinting+0x284>)
 80025e4:	4886      	ldr	r0, [pc, #536]	; (8002800 <StartPrinting+0x274>)
 80025e6:	f019 f94f 	bl	801b888 <siprintf>
	  HAL_UART_Transmit(&DEBUG_UART,gps_data,strlen(gps_data),HAL_MAX_DELAY);
 80025ea:	4885      	ldr	r0, [pc, #532]	; (8002800 <StartPrinting+0x274>)
 80025ec:	f7fd fe00 	bl	80001f0 <strlen>
 80025f0:	4603      	mov	r3, r0
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	f04f 33ff 	mov.w	r3, #4294967295
 80025f8:	4981      	ldr	r1, [pc, #516]	; (8002800 <StartPrinting+0x274>)
 80025fa:	4886      	ldr	r0, [pc, #536]	; (8002814 <StartPrinting+0x288>)
 80025fc:	f00b ff21 	bl	800e442 <HAL_UART_Transmit>

  	  //LSM6DSR
  	  memset(buffer, 0, TX_BUF_DIM);
 8002600:	f107 0308 	add.w	r3, r7, #8
 8002604:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002608:	2100      	movs	r1, #0
 800260a:	4618      	mov	r0, r3
 800260c:	f018 f8be 	bl	801a78c <memset>
  	  sprintf(buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8002610:	4b81      	ldr	r3, [pc, #516]	; (8002818 <StartPrinting+0x28c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f7fd ffa7 	bl	8000568 <__aeabi_f2d>
 800261a:	4680      	mov	r8, r0
 800261c:	4689      	mov	r9, r1
 800261e:	4b7e      	ldr	r3, [pc, #504]	; (8002818 <StartPrinting+0x28c>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	4618      	mov	r0, r3
 8002624:	f7fd ffa0 	bl	8000568 <__aeabi_f2d>
 8002628:	4604      	mov	r4, r0
 800262a:	460d      	mov	r5, r1
 800262c:	4b7a      	ldr	r3, [pc, #488]	; (8002818 <StartPrinting+0x28c>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	4618      	mov	r0, r3
 8002632:	f7fd ff99 	bl	8000568 <__aeabi_f2d>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	f107 0008 	add.w	r0, r7, #8
 800263e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002642:	e9cd 4500 	strd	r4, r5, [sp]
 8002646:	4642      	mov	r2, r8
 8002648:	464b      	mov	r3, r9
 800264a:	4974      	ldr	r1, [pc, #464]	; (800281c <StartPrinting+0x290>)
 800264c:	f019 f91c 	bl	801b888 <siprintf>
  	  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 8002650:	f107 0308 	add.w	r3, r7, #8
 8002654:	4618      	mov	r0, r3
 8002656:	f7fd fdcb 	bl	80001f0 <strlen>
 800265a:	4603      	mov	r3, r0
 800265c:	b29a      	uxth	r2, r3
 800265e:	f107 0108 	add.w	r1, r7, #8
 8002662:	f04f 33ff 	mov.w	r3, #4294967295
 8002666:	486b      	ldr	r0, [pc, #428]	; (8002814 <StartPrinting+0x288>)
 8002668:	f00b feeb 	bl	800e442 <HAL_UART_Transmit>

  	  /*
  	   * TODO NEEDS FILTERING BUT WORKS (maybe acceleration needs filtering too)
  	   */
  	  memset(buffer, 0, TX_BUF_DIM);
 800266c:	f107 0308 	add.w	r3, r7, #8
 8002670:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002674:	2100      	movs	r1, #0
 8002676:	4618      	mov	r0, r3
 8002678:	f018 f888 	bl	801a78c <memset>
  	  sprintf(buffer,"Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 800267c:	4b68      	ldr	r3, [pc, #416]	; (8002820 <StartPrinting+0x294>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f7fd ff71 	bl	8000568 <__aeabi_f2d>
 8002686:	4680      	mov	r8, r0
 8002688:	4689      	mov	r9, r1
 800268a:	4b65      	ldr	r3, [pc, #404]	; (8002820 <StartPrinting+0x294>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	4618      	mov	r0, r3
 8002690:	f7fd ff6a 	bl	8000568 <__aeabi_f2d>
 8002694:	4604      	mov	r4, r0
 8002696:	460d      	mov	r5, r1
 8002698:	4b61      	ldr	r3, [pc, #388]	; (8002820 <StartPrinting+0x294>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	4618      	mov	r0, r3
 800269e:	f7fd ff63 	bl	8000568 <__aeabi_f2d>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	f107 0008 	add.w	r0, r7, #8
 80026aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80026ae:	e9cd 4500 	strd	r4, r5, [sp]
 80026b2:	4642      	mov	r2, r8
 80026b4:	464b      	mov	r3, r9
 80026b6:	495b      	ldr	r1, [pc, #364]	; (8002824 <StartPrinting+0x298>)
 80026b8:	f019 f8e6 	bl	801b888 <siprintf>
  	  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 80026bc:	f107 0308 	add.w	r3, r7, #8
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fd fd95 	bl	80001f0 <strlen>
 80026c6:	4603      	mov	r3, r0
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	f107 0108 	add.w	r1, r7, #8
 80026ce:	f04f 33ff 	mov.w	r3, #4294967295
 80026d2:	4850      	ldr	r0, [pc, #320]	; (8002814 <StartPrinting+0x288>)
 80026d4:	f00b feb5 	bl	800e442 <HAL_UART_Transmit>

	  memset(buffer, 0, TX_BUF_DIM);
 80026d8:	f107 0308 	add.w	r3, r7, #8
 80026dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026e0:	2100      	movs	r1, #0
 80026e2:	4618      	mov	r0, r3
 80026e4:	f018 f852 	bl	801a78c <memset>
	  sprintf(buffer, "Temperature [degC]:%6.2f\r\n", lsm_temperature_degC);
 80026e8:	4b4f      	ldr	r3, [pc, #316]	; (8002828 <StartPrinting+0x29c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7fd ff3b 	bl	8000568 <__aeabi_f2d>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	f107 0008 	add.w	r0, r7, #8
 80026fa:	494c      	ldr	r1, [pc, #304]	; (800282c <StartPrinting+0x2a0>)
 80026fc:	f019 f8c4 	bl	801b888 <siprintf>
	  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 8002700:	f107 0308 	add.w	r3, r7, #8
 8002704:	4618      	mov	r0, r3
 8002706:	f7fd fd73 	bl	80001f0 <strlen>
 800270a:	4603      	mov	r3, r0
 800270c:	b29a      	uxth	r2, r3
 800270e:	f107 0108 	add.w	r1, r7, #8
 8002712:	f04f 33ff 	mov.w	r3, #4294967295
 8002716:	483f      	ldr	r0, [pc, #252]	; (8002814 <StartPrinting+0x288>)
 8002718:	f00b fe93 	bl	800e442 <HAL_UART_Transmit>


	  //LPS22HH
  	  memset(buffer, 0, TX_BUF_DIM);
 800271c:	f107 0308 	add.w	r3, r7, #8
 8002720:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002724:	2100      	movs	r1, #0
 8002726:	4618      	mov	r0, r3
 8002728:	f018 f830 	bl	801a78c <memset>
  	  sprintf(buffer,"Pressure [hPa]:%6.2f\r\n",pressure_hPa);
 800272c:	4b40      	ldr	r3, [pc, #256]	; (8002830 <StartPrinting+0x2a4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7fd ff19 	bl	8000568 <__aeabi_f2d>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	f107 0008 	add.w	r0, r7, #8
 800273e:	493d      	ldr	r1, [pc, #244]	; (8002834 <StartPrinting+0x2a8>)
 8002740:	f019 f8a2 	bl	801b888 <siprintf>
  	  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 8002744:	f107 0308 	add.w	r3, r7, #8
 8002748:	4618      	mov	r0, r3
 800274a:	f7fd fd51 	bl	80001f0 <strlen>
 800274e:	4603      	mov	r3, r0
 8002750:	b29a      	uxth	r2, r3
 8002752:	f107 0108 	add.w	r1, r7, #8
 8002756:	f04f 33ff 	mov.w	r3, #4294967295
 800275a:	482e      	ldr	r0, [pc, #184]	; (8002814 <StartPrinting+0x288>)
 800275c:	f00b fe71 	bl	800e442 <HAL_UART_Transmit>

	  memset(buffer, 0, TX_BUF_DIM);
 8002760:	f107 0308 	add.w	r3, r7, #8
 8002764:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002768:	2100      	movs	r1, #0
 800276a:	4618      	mov	r0, r3
 800276c:	f018 f80e 	bl	801a78c <memset>
	  sprintf(buffer, "Temperature [degC]:%6.2f\r\n", lps_temperature_degC);
 8002770:	4b31      	ldr	r3, [pc, #196]	; (8002838 <StartPrinting+0x2ac>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f7fd fef7 	bl	8000568 <__aeabi_f2d>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	f107 0008 	add.w	r0, r7, #8
 8002782:	492a      	ldr	r1, [pc, #168]	; (800282c <StartPrinting+0x2a0>)
 8002784:	f019 f880 	bl	801b888 <siprintf>
	  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 8002788:	f107 0308 	add.w	r3, r7, #8
 800278c:	4618      	mov	r0, r3
 800278e:	f7fd fd2f 	bl	80001f0 <strlen>
 8002792:	4603      	mov	r3, r0
 8002794:	b29a      	uxth	r2, r3
 8002796:	f107 0108 	add.w	r1, r7, #8
 800279a:	f04f 33ff 	mov.w	r3, #4294967295
 800279e:	481d      	ldr	r0, [pc, #116]	; (8002814 <StartPrinting+0x288>)
 80027a0:	f00b fe4f 	bl	800e442 <HAL_UART_Transmit>


	  //Thermocouple
	  memset(buffer, 0, TX_BUF_DIM);
 80027a4:	f107 0308 	add.w	r3, r7, #8
 80027a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027ac:	2100      	movs	r1, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	f017 ffec 	bl	801a78c <memset>
	  sprintf(buffer, "Thermocouple temperature [degC]: %6.2f\r\n", THERMO_TEMP);
 80027b4:	4b21      	ldr	r3, [pc, #132]	; (800283c <StartPrinting+0x2b0>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fd fed5 	bl	8000568 <__aeabi_f2d>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	f107 0008 	add.w	r0, r7, #8
 80027c6:	491e      	ldr	r1, [pc, #120]	; (8002840 <StartPrinting+0x2b4>)
 80027c8:	f019 f85e 	bl	801b888 <siprintf>
	  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 80027cc:	f107 0308 	add.w	r3, r7, #8
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fd fd0d 	bl	80001f0 <strlen>
 80027d6:	4603      	mov	r3, r0
 80027d8:	b29a      	uxth	r2, r3
 80027da:	f107 0108 	add.w	r1, r7, #8
 80027de:	f04f 33ff 	mov.w	r3, #4294967295
 80027e2:	480c      	ldr	r0, [pc, #48]	; (8002814 <StartPrinting+0x288>)
 80027e4:	f00b fe2d 	bl	800e442 <HAL_UART_Transmit>


	  //Iridium
	  //MRT_Static_Iridium_getTime(); //TODO Can get stuck for some time (SHOULD CHANGE TIMEOUT)

	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 80027e8:	2200      	movs	r2, #0
 80027ea:	2108      	movs	r1, #8
 80027ec:	4803      	ldr	r0, [pc, #12]	; (80027fc <StartPrinting+0x270>)
 80027ee:	f006 fb5d 	bl	8008eac <HAL_GPIO_WritePin>

	  osDelay(1000/SEND_FREQ);
 80027f2:	2032      	movs	r0, #50	; 0x32
 80027f4:	f012 ff05 	bl	8015602 <osDelay>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 80027f8:	e6ce      	b.n	8002598 <StartPrinting+0xc>
 80027fa:	bf00      	nop
 80027fc:	40020800 	.word	0x40020800
 8002800:	20006944 	.word	0x20006944
 8002804:	2000691c 	.word	0x2000691c
 8002808:	200067b4 	.word	0x200067b4
 800280c:	200069a8 	.word	0x200069a8
 8002810:	0801f9ec 	.word	0x0801f9ec
 8002814:	20005ec4 	.word	0x20005ec4
 8002818:	2000040c 	.word	0x2000040c
 800281c:	0801fa14 	.word	0x0801fa14
 8002820:	20000418 	.word	0x20000418
 8002824:	0801fa3c 	.word	0x0801fa3c
 8002828:	20000424 	.word	0x20000424
 800282c:	0801fa64 	.word	0x0801fa64
 8002830:	20000404 	.word	0x20000404
 8002834:	0801fa80 	.word	0x0801fa80
 8002838:	20000408 	.word	0x20000408
 800283c:	20006a00 	.word	0x20006a00
 8002840:	0801fa98 	.word	0x0801fa98

08002844 <StartWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchDog */
void StartWatchDog(void *argument)
{
 8002844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002846:	b0c7      	sub	sp, #284	; 0x11c
 8002848:	af04      	add	r7, sp, #16
 800284a:	1d3b      	adds	r3, r7, #4
 800284c:	6018      	str	r0, [r3, #0]

	char buffer[TX_BUF_DIM];
  /* Infinite loop */
  for(;;)
  {
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 800284e:	2201      	movs	r2, #1
 8002850:	2104      	movs	r1, #4
 8002852:	4837      	ldr	r0, [pc, #220]	; (8002930 <StartWatchDog+0xec>)
 8002854:	f006 fb2a 	bl	8008eac <HAL_GPIO_WritePin>
	 HAL_IWDG_Refresh(&hiwdg);
 8002858:	4836      	ldr	r0, [pc, #216]	; (8002934 <StartWatchDog+0xf0>)
 800285a:	f007 fc0b 	bl	800a074 <HAL_IWDG_Refresh>

	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800285e:	2200      	movs	r2, #0
 8002860:	4935      	ldr	r1, [pc, #212]	; (8002938 <StartWatchDog+0xf4>)
 8002862:	4836      	ldr	r0, [pc, #216]	; (800293c <StartWatchDog+0xf8>)
 8002864:	f009 fd88 	bl	800c378 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002868:	2200      	movs	r2, #0
 800286a:	4935      	ldr	r1, [pc, #212]	; (8002940 <StartWatchDog+0xfc>)
 800286c:	4833      	ldr	r0, [pc, #204]	; (800293c <StartWatchDog+0xf8>)
 800286e:	f009 fe88 	bl	800c582 <HAL_RTC_GetDate>

	 prev_hours = sTime.Hours;
 8002872:	4b31      	ldr	r3, [pc, #196]	; (8002938 <StartWatchDog+0xf4>)
 8002874:	781a      	ldrb	r2, [r3, #0]
 8002876:	4b33      	ldr	r3, [pc, #204]	; (8002944 <StartWatchDog+0x100>)
 8002878:	701a      	strb	r2, [r3, #0]
	 prev_min = sTime.Minutes;
 800287a:	4b2f      	ldr	r3, [pc, #188]	; (8002938 <StartWatchDog+0xf4>)
 800287c:	785a      	ldrb	r2, [r3, #1]
 800287e:	4b32      	ldr	r3, [pc, #200]	; (8002948 <StartWatchDog+0x104>)
 8002880:	701a      	strb	r2, [r3, #0]
	 prev_sec = sTime.Seconds;
 8002882:	4b2d      	ldr	r3, [pc, #180]	; (8002938 <StartWatchDog+0xf4>)
 8002884:	789a      	ldrb	r2, [r3, #2]
 8002886:	4b31      	ldr	r3, [pc, #196]	; (800294c <StartWatchDog+0x108>)
 8002888:	701a      	strb	r2, [r3, #0]

	  memset(buffer, 0, TX_BUF_DIM);
 800288a:	f107 0308 	add.w	r3, r7, #8
 800288e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002892:	2100      	movs	r1, #0
 8002894:	4618      	mov	r0, r3
 8002896:	f017 ff79 	bl	801a78c <memset>
	  sprintf(buffer, "Time: %i:%i:%i	Date: \r\n %f\r\n", prev_hours,prev_min,prev_sec, altitude_m);
 800289a:	4b2a      	ldr	r3, [pc, #168]	; (8002944 <StartWatchDog+0x100>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	461d      	mov	r5, r3
 80028a0:	4b29      	ldr	r3, [pc, #164]	; (8002948 <StartWatchDog+0x104>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	461e      	mov	r6, r3
 80028a6:	4b29      	ldr	r3, [pc, #164]	; (800294c <StartWatchDog+0x108>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	461c      	mov	r4, r3
 80028ac:	4b28      	ldr	r3, [pc, #160]	; (8002950 <StartWatchDog+0x10c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fd fe59 	bl	8000568 <__aeabi_f2d>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	f107 0008 	add.w	r0, r7, #8
 80028be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80028c2:	9400      	str	r4, [sp, #0]
 80028c4:	4633      	mov	r3, r6
 80028c6:	462a      	mov	r2, r5
 80028c8:	4922      	ldr	r1, [pc, #136]	; (8002954 <StartWatchDog+0x110>)
 80028ca:	f018 ffdd 	bl	801b888 <siprintf>
	  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 80028ce:	f107 0308 	add.w	r3, r7, #8
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fd fc8c 	bl	80001f0 <strlen>
 80028d8:	4603      	mov	r3, r0
 80028da:	b29a      	uxth	r2, r3
 80028dc:	f107 0108 	add.w	r1, r7, #8
 80028e0:	f04f 33ff 	mov.w	r3, #4294967295
 80028e4:	481c      	ldr	r0, [pc, #112]	; (8002958 <StartWatchDog+0x114>)
 80028e6:	f00b fdac 	bl	800e442 <HAL_UART_Transmit>
	   * does it at the same time or it's a hardfault crash
	   *
	   * Moved the other code where we write to external flash to this thread (when going to sleep)
	   */
	  //Save the time
	  MRT_saveRTCTime();
 80028ea:	f001 fa03 	bl	8003cf4 <MRT_saveRTCTime>

	  //Check if it's sleep time
	  if (flagA==1){
 80028ee:	4b1b      	ldr	r3, [pc, #108]	; (800295c <StartWatchDog+0x118>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d111      	bne.n	800291a <StartWatchDog+0xd6>
		//Update iwdg_flag
		iwdg_flag = 1;
 80028f6:	4b1a      	ldr	r3, [pc, #104]	; (8002960 <StartWatchDog+0x11c>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 80028fc:	4b18      	ldr	r3, [pc, #96]	; (8002960 <StartWatchDog+0x11c>)
 80028fe:	781a      	ldrb	r2, [r3, #0]
 8002900:	4b18      	ldr	r3, [pc, #96]	; (8002964 <StartWatchDog+0x120>)
 8002902:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(1);
 8002904:	2001      	movs	r0, #1
 8002906:	f001 fcaf 	bl	8004268 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 800290a:	2303      	movs	r3, #3
 800290c:	2200      	movs	r2, #0
 800290e:	2101      	movs	r1, #1
 8002910:	4814      	ldr	r0, [pc, #80]	; (8002964 <StartWatchDog+0x120>)
 8002912:	f001 fdf3 	bl	80044fc <W25qxx_WriteSector>

		//Reset to deactivate IWDG
		NVIC_SystemReset();
 8002916:	f7fe fe79 	bl	800160c <__NVIC_SystemReset>
	  }

	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 800291a:	2200      	movs	r2, #0
 800291c:	2104      	movs	r1, #4
 800291e:	4804      	ldr	r0, [pc, #16]	; (8002930 <StartWatchDog+0xec>)
 8002920:	f006 fac4 	bl	8008eac <HAL_GPIO_WritePin>

	  osDelay(1000/WD_FREQ);
 8002924:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002928:	f012 fe6b 	bl	8015602 <osDelay>
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 800292c:	e78f      	b.n	800284e <StartWatchDog+0xa>
 800292e:	bf00      	nop
 8002930:	40020800 	.word	0x40020800
 8002934:	200062f8 	.word	0x200062f8
 8002938:	20000668 	.word	0x20000668
 800293c:	20006920 	.word	0x20006920
 8002940:	2000067c 	.word	0x2000067c
 8002944:	20000434 	.word	0x20000434
 8002948:	20000435 	.word	0x20000435
 800294c:	20000436 	.word	0x20000436
 8002950:	20000428 	.word	0x20000428
 8002954:	0801fac4 	.word	0x0801fac4
 8002958:	20005ec4 	.word	0x20005ec4
 800295c:	200006a8 	.word	0x200006a8
 8002960:	20000433 	.word	0x20000433
 8002964:	20006058 	.word	0x20006058

08002968 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a04      	ldr	r2, [pc, #16]	; (8002988 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d101      	bne.n	800297e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800297a:	f005 fd09 	bl	8008390 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40001000 	.word	0x40001000

0800298c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002990:	bf00      	nop
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
	...

0800299c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	607b      	str	r3, [r7, #4]
 80029a6:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <HAL_MspInit+0x54>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	4a11      	ldr	r2, [pc, #68]	; (80029f0 <HAL_MspInit+0x54>)
 80029ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b0:	6453      	str	r3, [r2, #68]	; 0x44
 80029b2:	4b0f      	ldr	r3, [pc, #60]	; (80029f0 <HAL_MspInit+0x54>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ba:	607b      	str	r3, [r7, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	603b      	str	r3, [r7, #0]
 80029c2:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <HAL_MspInit+0x54>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	4a0a      	ldr	r2, [pc, #40]	; (80029f0 <HAL_MspInit+0x54>)
 80029c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029cc:	6413      	str	r3, [r2, #64]	; 0x40
 80029ce:	4b08      	ldr	r3, [pc, #32]	; (80029f0 <HAL_MspInit+0x54>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80029da:	2200      	movs	r2, #0
 80029dc:	210f      	movs	r1, #15
 80029de:	f06f 0001 	mvn.w	r0, #1
 80029e2:	f006 f867 	bl	8008ab4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40023800 	.word	0x40023800

080029f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08a      	sub	sp, #40	; 0x28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029fc:	f107 0314 	add.w	r3, r7, #20
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	60da      	str	r2, [r3, #12]
 8002a0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a17      	ldr	r2, [pc, #92]	; (8002a70 <HAL_ADC_MspInit+0x7c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d127      	bne.n	8002a66 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	4b16      	ldr	r3, [pc, #88]	; (8002a74 <HAL_ADC_MspInit+0x80>)
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1e:	4a15      	ldr	r2, [pc, #84]	; (8002a74 <HAL_ADC_MspInit+0x80>)
 8002a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a24:	6453      	str	r3, [r2, #68]	; 0x44
 8002a26:	4b13      	ldr	r3, [pc, #76]	; (8002a74 <HAL_ADC_MspInit+0x80>)
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2e:	613b      	str	r3, [r7, #16]
 8002a30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	4b0f      	ldr	r3, [pc, #60]	; (8002a74 <HAL_ADC_MspInit+0x80>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	4a0e      	ldr	r2, [pc, #56]	; (8002a74 <HAL_ADC_MspInit+0x80>)
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	6313      	str	r3, [r2, #48]	; 0x30
 8002a42:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <HAL_ADC_MspInit+0x80>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 8002a4e:	2340      	movs	r3, #64	; 0x40
 8002a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a52:	2303      	movs	r3, #3
 8002a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 8002a5a:	f107 0314 	add.w	r3, r7, #20
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4805      	ldr	r0, [pc, #20]	; (8002a78 <HAL_ADC_MspInit+0x84>)
 8002a62:	f006 f85f 	bl	8008b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a66:	bf00      	nop
 8002a68:	3728      	adds	r7, #40	; 0x28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40012000 	.word	0x40012000
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40020000 	.word	0x40020000

08002a7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08e      	sub	sp, #56	; 0x38
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a5c      	ldr	r2, [pc, #368]	; (8002c0c <HAL_I2C_MspInit+0x190>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d12d      	bne.n	8002afa <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	623b      	str	r3, [r7, #32]
 8002aa2:	4b5b      	ldr	r3, [pc, #364]	; (8002c10 <HAL_I2C_MspInit+0x194>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	4a5a      	ldr	r2, [pc, #360]	; (8002c10 <HAL_I2C_MspInit+0x194>)
 8002aa8:	f043 0302 	orr.w	r3, r3, #2
 8002aac:	6313      	str	r3, [r2, #48]	; 0x30
 8002aae:	4b58      	ldr	r3, [pc, #352]	; (8002c10 <HAL_I2C_MspInit+0x194>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	623b      	str	r3, [r7, #32]
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002aba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ac0:	2312      	movs	r3, #18
 8002ac2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002acc:	2304      	movs	r3, #4
 8002ace:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	484f      	ldr	r0, [pc, #316]	; (8002c14 <HAL_I2C_MspInit+0x198>)
 8002ad8:	f006 f824 	bl	8008b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002adc:	2300      	movs	r3, #0
 8002ade:	61fb      	str	r3, [r7, #28]
 8002ae0:	4b4b      	ldr	r3, [pc, #300]	; (8002c10 <HAL_I2C_MspInit+0x194>)
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	4a4a      	ldr	r2, [pc, #296]	; (8002c10 <HAL_I2C_MspInit+0x194>)
 8002ae6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002aea:	6413      	str	r3, [r2, #64]	; 0x40
 8002aec:	4b48      	ldr	r3, [pc, #288]	; (8002c10 <HAL_I2C_MspInit+0x194>)
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002af8:	e083      	b.n	8002c02 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a46      	ldr	r2, [pc, #280]	; (8002c18 <HAL_I2C_MspInit+0x19c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d12d      	bne.n	8002b60 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b04:	2300      	movs	r3, #0
 8002b06:	61bb      	str	r3, [r7, #24]
 8002b08:	4b41      	ldr	r3, [pc, #260]	; (8002c10 <HAL_I2C_MspInit+0x194>)
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0c:	4a40      	ldr	r2, [pc, #256]	; (8002c10 <HAL_I2C_MspInit+0x194>)
 8002b0e:	f043 0302 	orr.w	r3, r3, #2
 8002b12:	6313      	str	r3, [r2, #48]	; 0x30
 8002b14:	4b3e      	ldr	r3, [pc, #248]	; (8002c10 <HAL_I2C_MspInit+0x194>)
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	61bb      	str	r3, [r7, #24]
 8002b1e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b20:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b26:	2312      	movs	r3, #18
 8002b28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002b32:	2304      	movs	r3, #4
 8002b34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4835      	ldr	r0, [pc, #212]	; (8002c14 <HAL_I2C_MspInit+0x198>)
 8002b3e:	f005 fff1 	bl	8008b24 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	617b      	str	r3, [r7, #20]
 8002b46:	4b32      	ldr	r3, [pc, #200]	; (8002c10 <HAL_I2C_MspInit+0x194>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	4a31      	ldr	r2, [pc, #196]	; (8002c10 <HAL_I2C_MspInit+0x194>)
 8002b4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b50:	6413      	str	r3, [r2, #64]	; 0x40
 8002b52:	4b2f      	ldr	r3, [pc, #188]	; (8002c10 <HAL_I2C_MspInit+0x194>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b5a:	617b      	str	r3, [r7, #20]
 8002b5c:	697b      	ldr	r3, [r7, #20]
}
 8002b5e:	e050      	b.n	8002c02 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a2d      	ldr	r2, [pc, #180]	; (8002c1c <HAL_I2C_MspInit+0x1a0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d14b      	bne.n	8002c02 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	4b28      	ldr	r3, [pc, #160]	; (8002c10 <HAL_I2C_MspInit+0x194>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	4a27      	ldr	r2, [pc, #156]	; (8002c10 <HAL_I2C_MspInit+0x194>)
 8002b74:	f043 0304 	orr.w	r3, r3, #4
 8002b78:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7a:	4b25      	ldr	r3, [pc, #148]	; (8002c10 <HAL_I2C_MspInit+0x194>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	613b      	str	r3, [r7, #16]
 8002b84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	4b21      	ldr	r3, [pc, #132]	; (8002c10 <HAL_I2C_MspInit+0x194>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	4a20      	ldr	r2, [pc, #128]	; (8002c10 <HAL_I2C_MspInit+0x194>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	6313      	str	r3, [r2, #48]	; 0x30
 8002b96:	4b1e      	ldr	r3, [pc, #120]	; (8002c10 <HAL_I2C_MspInit+0x194>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ba2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ba8:	2312      	movs	r3, #18
 8002baa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bac:	2301      	movs	r3, #1
 8002bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002bb4:	2304      	movs	r3, #4
 8002bb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4818      	ldr	r0, [pc, #96]	; (8002c20 <HAL_I2C_MspInit+0x1a4>)
 8002bc0:	f005 ffb0 	bl	8008b24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002bc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bca:	2312      	movs	r3, #18
 8002bcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002bd6:	2304      	movs	r3, #4
 8002bd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bde:	4619      	mov	r1, r3
 8002be0:	4810      	ldr	r0, [pc, #64]	; (8002c24 <HAL_I2C_MspInit+0x1a8>)
 8002be2:	f005 ff9f 	bl	8008b24 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <HAL_I2C_MspInit+0x194>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	4a08      	ldr	r2, [pc, #32]	; (8002c10 <HAL_I2C_MspInit+0x194>)
 8002bf0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf6:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <HAL_I2C_MspInit+0x194>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bfe:	60bb      	str	r3, [r7, #8]
 8002c00:	68bb      	ldr	r3, [r7, #8]
}
 8002c02:	bf00      	nop
 8002c04:	3738      	adds	r7, #56	; 0x38
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40005400 	.word	0x40005400
 8002c10:	40023800 	.word	0x40023800
 8002c14:	40020400 	.word	0x40020400
 8002c18:	40005800 	.word	0x40005800
 8002c1c:	40005c00 	.word	0x40005c00
 8002c20:	40020800 	.word	0x40020800
 8002c24:	40020000 	.word	0x40020000

08002c28 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b08e      	sub	sp, #56	; 0x38
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c30:	f107 0308 	add.w	r3, r7, #8
 8002c34:	2230      	movs	r2, #48	; 0x30
 8002c36:	2100      	movs	r1, #0
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f017 fda7 	bl	801a78c <memset>
  if(hrtc->Instance==RTC)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a10      	ldr	r2, [pc, #64]	; (8002c84 <HAL_RTC_MspInit+0x5c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d119      	bne.n	8002c7c <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002c48:	2320      	movs	r3, #32
 8002c4a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002c4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c50:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c52:	f107 0308 	add.w	r3, r7, #8
 8002c56:	4618      	mov	r0, r3
 8002c58:	f009 f882 	bl	800bd60 <HAL_RCCEx_PeriphCLKConfig>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002c62:	f7ff fe93 	bl	800298c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c66:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <HAL_RTC_MspInit+0x60>)
 8002c68:	2201      	movs	r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2105      	movs	r1, #5
 8002c70:	2029      	movs	r0, #41	; 0x29
 8002c72:	f005 ff1f 	bl	8008ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002c76:	2029      	movs	r0, #41	; 0x29
 8002c78:	f005 ff38 	bl	8008aec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002c7c:	bf00      	nop
 8002c7e:	3738      	adds	r7, #56	; 0x38
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40002800 	.word	0x40002800
 8002c88:	42470e3c 	.word	0x42470e3c

08002c8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08e      	sub	sp, #56	; 0x38
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a4c      	ldr	r2, [pc, #304]	; (8002ddc <HAL_SPI_MspInit+0x150>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d12d      	bne.n	8002d0a <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	623b      	str	r3, [r7, #32]
 8002cb2:	4b4b      	ldr	r3, [pc, #300]	; (8002de0 <HAL_SPI_MspInit+0x154>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	4a4a      	ldr	r2, [pc, #296]	; (8002de0 <HAL_SPI_MspInit+0x154>)
 8002cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cbe:	4b48      	ldr	r3, [pc, #288]	; (8002de0 <HAL_SPI_MspInit+0x154>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc6:	623b      	str	r3, [r7, #32]
 8002cc8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61fb      	str	r3, [r7, #28]
 8002cce:	4b44      	ldr	r3, [pc, #272]	; (8002de0 <HAL_SPI_MspInit+0x154>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	4a43      	ldr	r2, [pc, #268]	; (8002de0 <HAL_SPI_MspInit+0x154>)
 8002cd4:	f043 0302 	orr.w	r3, r3, #2
 8002cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cda:	4b41      	ldr	r3, [pc, #260]	; (8002de0 <HAL_SPI_MspInit+0x154>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	61fb      	str	r3, [r7, #28]
 8002ce4:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002ce6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002cea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cec:	2302      	movs	r3, #2
 8002cee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002cf8:	2305      	movs	r3, #5
 8002cfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d00:	4619      	mov	r1, r3
 8002d02:	4838      	ldr	r0, [pc, #224]	; (8002de4 <HAL_SPI_MspInit+0x158>)
 8002d04:	f005 ff0e 	bl	8008b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002d08:	e064      	b.n	8002dd4 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a36      	ldr	r2, [pc, #216]	; (8002de8 <HAL_SPI_MspInit+0x15c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d12d      	bne.n	8002d70 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002d14:	2300      	movs	r3, #0
 8002d16:	61bb      	str	r3, [r7, #24]
 8002d18:	4b31      	ldr	r3, [pc, #196]	; (8002de0 <HAL_SPI_MspInit+0x154>)
 8002d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1c:	4a30      	ldr	r2, [pc, #192]	; (8002de0 <HAL_SPI_MspInit+0x154>)
 8002d1e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d22:	6453      	str	r3, [r2, #68]	; 0x44
 8002d24:	4b2e      	ldr	r3, [pc, #184]	; (8002de0 <HAL_SPI_MspInit+0x154>)
 8002d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d2c:	61bb      	str	r3, [r7, #24]
 8002d2e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	4b2a      	ldr	r3, [pc, #168]	; (8002de0 <HAL_SPI_MspInit+0x154>)
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d38:	4a29      	ldr	r2, [pc, #164]	; (8002de0 <HAL_SPI_MspInit+0x154>)
 8002d3a:	f043 0310 	orr.w	r3, r3, #16
 8002d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d40:	4b27      	ldr	r3, [pc, #156]	; (8002de0 <HAL_SPI_MspInit+0x154>)
 8002d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d44:	f003 0310 	and.w	r3, r3, #16
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002d4c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d52:	2302      	movs	r3, #2
 8002d54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002d5e:	2305      	movs	r3, #5
 8002d60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d66:	4619      	mov	r1, r3
 8002d68:	4820      	ldr	r0, [pc, #128]	; (8002dec <HAL_SPI_MspInit+0x160>)
 8002d6a:	f005 fedb 	bl	8008b24 <HAL_GPIO_Init>
}
 8002d6e:	e031      	b.n	8002dd4 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a1e      	ldr	r2, [pc, #120]	; (8002df0 <HAL_SPI_MspInit+0x164>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d12c      	bne.n	8002dd4 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <HAL_SPI_MspInit+0x154>)
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	4a17      	ldr	r2, [pc, #92]	; (8002de0 <HAL_SPI_MspInit+0x154>)
 8002d84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d88:	6453      	str	r3, [r2, #68]	; 0x44
 8002d8a:	4b15      	ldr	r3, [pc, #84]	; (8002de0 <HAL_SPI_MspInit+0x154>)
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d92:	613b      	str	r3, [r7, #16]
 8002d94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <HAL_SPI_MspInit+0x154>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	4a10      	ldr	r2, [pc, #64]	; (8002de0 <HAL_SPI_MspInit+0x154>)
 8002da0:	f043 0320 	orr.w	r3, r3, #32
 8002da4:	6313      	str	r3, [r2, #48]	; 0x30
 8002da6:	4b0e      	ldr	r3, [pc, #56]	; (8002de0 <HAL_SPI_MspInit+0x154>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	f003 0320 	and.w	r3, r3, #32
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002db2:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002db6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db8:	2302      	movs	r3, #2
 8002dba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002dc4:	2305      	movs	r3, #5
 8002dc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4809      	ldr	r0, [pc, #36]	; (8002df4 <HAL_SPI_MspInit+0x168>)
 8002dd0:	f005 fea8 	bl	8008b24 <HAL_GPIO_Init>
}
 8002dd4:	bf00      	nop
 8002dd6:	3738      	adds	r7, #56	; 0x38
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40003800 	.word	0x40003800
 8002de0:	40023800 	.word	0x40023800
 8002de4:	40020400 	.word	0x40020400
 8002de8:	40013400 	.word	0x40013400
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40015000 	.word	0x40015000
 8002df4:	40021400 	.word	0x40021400

08002df8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e08:	d10d      	bne.n	8002e26 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <HAL_TIM_PWM_MspInit+0x3c>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	4a08      	ldr	r2, [pc, #32]	; (8002e34 <HAL_TIM_PWM_MspInit+0x3c>)
 8002e14:	f043 0301 	orr.w	r3, r3, #1
 8002e18:	6413      	str	r3, [r2, #64]	; 0x40
 8002e1a:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <HAL_TIM_PWM_MspInit+0x3c>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002e26:	bf00      	nop
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	40023800 	.word	0x40023800

08002e38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b088      	sub	sp, #32
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e40:	f107 030c 	add.w	r3, r7, #12
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	605a      	str	r2, [r3, #4]
 8002e4a:	609a      	str	r2, [r3, #8]
 8002e4c:	60da      	str	r2, [r3, #12]
 8002e4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e58:	d11d      	bne.n	8002e96 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	4b10      	ldr	r3, [pc, #64]	; (8002ea0 <HAL_TIM_MspPostInit+0x68>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	4a0f      	ldr	r2, [pc, #60]	; (8002ea0 <HAL_TIM_MspPostInit+0x68>)
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ea0 <HAL_TIM_MspPostInit+0x68>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	60bb      	str	r3, [r7, #8]
 8002e74:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8002e76:	2304      	movs	r3, #4
 8002e78:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e86:	2301      	movs	r3, #1
 8002e88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8002e8a:	f107 030c 	add.w	r3, r7, #12
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4804      	ldr	r0, [pc, #16]	; (8002ea4 <HAL_TIM_MspPostInit+0x6c>)
 8002e92:	f005 fe47 	bl	8008b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002e96:	bf00      	nop
 8002e98:	3720      	adds	r7, #32
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	40020000 	.word	0x40020000

08002ea8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08e      	sub	sp, #56	; 0x38
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	60da      	str	r2, [r3, #12]
 8002ebe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a4b      	ldr	r2, [pc, #300]	; (8002ff4 <HAL_UART_MspInit+0x14c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d12c      	bne.n	8002f24 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	623b      	str	r3, [r7, #32]
 8002ece:	4b4a      	ldr	r3, [pc, #296]	; (8002ff8 <HAL_UART_MspInit+0x150>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	4a49      	ldr	r2, [pc, #292]	; (8002ff8 <HAL_UART_MspInit+0x150>)
 8002ed4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eda:	4b47      	ldr	r3, [pc, #284]	; (8002ff8 <HAL_UART_MspInit+0x150>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ee2:	623b      	str	r3, [r7, #32]
 8002ee4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61fb      	str	r3, [r7, #28]
 8002eea:	4b43      	ldr	r3, [pc, #268]	; (8002ff8 <HAL_UART_MspInit+0x150>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	4a42      	ldr	r2, [pc, #264]	; (8002ff8 <HAL_UART_MspInit+0x150>)
 8002ef0:	f043 0310 	orr.w	r3, r3, #16
 8002ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef6:	4b40      	ldr	r3, [pc, #256]	; (8002ff8 <HAL_UART_MspInit+0x150>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	f003 0310 	and.w	r3, r3, #16
 8002efe:	61fb      	str	r3, [r7, #28]
 8002f00:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8002f02:	2303      	movs	r3, #3
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f06:	2302      	movs	r3, #2
 8002f08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002f12:	2308      	movs	r3, #8
 8002f14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4837      	ldr	r0, [pc, #220]	; (8002ffc <HAL_UART_MspInit+0x154>)
 8002f1e:	f005 fe01 	bl	8008b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002f22:	e063      	b.n	8002fec <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a35      	ldr	r2, [pc, #212]	; (8003000 <HAL_UART_MspInit+0x158>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d12d      	bne.n	8002f8a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61bb      	str	r3, [r7, #24]
 8002f32:	4b31      	ldr	r3, [pc, #196]	; (8002ff8 <HAL_UART_MspInit+0x150>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	4a30      	ldr	r2, [pc, #192]	; (8002ff8 <HAL_UART_MspInit+0x150>)
 8002f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f3e:	4b2e      	ldr	r3, [pc, #184]	; (8002ff8 <HAL_UART_MspInit+0x150>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f46:	61bb      	str	r3, [r7, #24]
 8002f48:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	4b2a      	ldr	r3, [pc, #168]	; (8002ff8 <HAL_UART_MspInit+0x150>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	4a29      	ldr	r2, [pc, #164]	; (8002ff8 <HAL_UART_MspInit+0x150>)
 8002f54:	f043 0308 	orr.w	r3, r3, #8
 8002f58:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5a:	4b27      	ldr	r3, [pc, #156]	; (8002ff8 <HAL_UART_MspInit+0x150>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8002f66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f74:	2303      	movs	r3, #3
 8002f76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f78:	2307      	movs	r3, #7
 8002f7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f80:	4619      	mov	r1, r3
 8002f82:	4820      	ldr	r0, [pc, #128]	; (8003004 <HAL_UART_MspInit+0x15c>)
 8002f84:	f005 fdce 	bl	8008b24 <HAL_GPIO_Init>
}
 8002f88:	e030      	b.n	8002fec <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a1e      	ldr	r2, [pc, #120]	; (8003008 <HAL_UART_MspInit+0x160>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d12b      	bne.n	8002fec <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002f94:	2300      	movs	r3, #0
 8002f96:	613b      	str	r3, [r7, #16]
 8002f98:	4b17      	ldr	r3, [pc, #92]	; (8002ff8 <HAL_UART_MspInit+0x150>)
 8002f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9c:	4a16      	ldr	r2, [pc, #88]	; (8002ff8 <HAL_UART_MspInit+0x150>)
 8002f9e:	f043 0320 	orr.w	r3, r3, #32
 8002fa2:	6453      	str	r3, [r2, #68]	; 0x44
 8002fa4:	4b14      	ldr	r3, [pc, #80]	; (8002ff8 <HAL_UART_MspInit+0x150>)
 8002fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa8:	f003 0320 	and.w	r3, r3, #32
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <HAL_UART_MspInit+0x150>)
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb8:	4a0f      	ldr	r2, [pc, #60]	; (8002ff8 <HAL_UART_MspInit+0x150>)
 8002fba:	f043 0304 	orr.w	r3, r3, #4
 8002fbe:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc0:	4b0d      	ldr	r3, [pc, #52]	; (8002ff8 <HAL_UART_MspInit+0x150>)
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8002fcc:	23c0      	movs	r3, #192	; 0xc0
 8002fce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002fdc:	2308      	movs	r3, #8
 8002fde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4809      	ldr	r0, [pc, #36]	; (800300c <HAL_UART_MspInit+0x164>)
 8002fe8:	f005 fd9c 	bl	8008b24 <HAL_GPIO_Init>
}
 8002fec:	bf00      	nop
 8002fee:	3738      	adds	r7, #56	; 0x38
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40007c00 	.word	0x40007c00
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	40021000 	.word	0x40021000
 8003000:	40004800 	.word	0x40004800
 8003004:	40020c00 	.word	0x40020c00
 8003008:	40011400 	.word	0x40011400
 800300c:	40020800 	.word	0x40020800

08003010 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08c      	sub	sp, #48	; 0x30
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003018:	2300      	movs	r3, #0
 800301a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003020:	2200      	movs	r2, #0
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	2036      	movs	r0, #54	; 0x36
 8003026:	f005 fd45 	bl	8008ab4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800302a:	2036      	movs	r0, #54	; 0x36
 800302c:	f005 fd5e 	bl	8008aec <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003030:	2300      	movs	r3, #0
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	4b1f      	ldr	r3, [pc, #124]	; (80030b4 <HAL_InitTick+0xa4>)
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	4a1e      	ldr	r2, [pc, #120]	; (80030b4 <HAL_InitTick+0xa4>)
 800303a:	f043 0310 	orr.w	r3, r3, #16
 800303e:	6413      	str	r3, [r2, #64]	; 0x40
 8003040:	4b1c      	ldr	r3, [pc, #112]	; (80030b4 <HAL_InitTick+0xa4>)
 8003042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003044:	f003 0310 	and.w	r3, r3, #16
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800304c:	f107 0210 	add.w	r2, r7, #16
 8003050:	f107 0314 	add.w	r3, r7, #20
 8003054:	4611      	mov	r1, r2
 8003056:	4618      	mov	r0, r3
 8003058:	f008 fe50 	bl	800bcfc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800305c:	f008 fe26 	bl	800bcac <HAL_RCC_GetPCLK1Freq>
 8003060:	4603      	mov	r3, r0
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003068:	4a13      	ldr	r2, [pc, #76]	; (80030b8 <HAL_InitTick+0xa8>)
 800306a:	fba2 2303 	umull	r2, r3, r2, r3
 800306e:	0c9b      	lsrs	r3, r3, #18
 8003070:	3b01      	subs	r3, #1
 8003072:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003074:	4b11      	ldr	r3, [pc, #68]	; (80030bc <HAL_InitTick+0xac>)
 8003076:	4a12      	ldr	r2, [pc, #72]	; (80030c0 <HAL_InitTick+0xb0>)
 8003078:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800307a:	4b10      	ldr	r3, [pc, #64]	; (80030bc <HAL_InitTick+0xac>)
 800307c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003080:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003082:	4a0e      	ldr	r2, [pc, #56]	; (80030bc <HAL_InitTick+0xac>)
 8003084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003086:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003088:	4b0c      	ldr	r3, [pc, #48]	; (80030bc <HAL_InitTick+0xac>)
 800308a:	2200      	movs	r2, #0
 800308c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800308e:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <HAL_InitTick+0xac>)
 8003090:	2200      	movs	r2, #0
 8003092:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003094:	4809      	ldr	r0, [pc, #36]	; (80030bc <HAL_InitTick+0xac>)
 8003096:	f00a fb9b 	bl	800d7d0 <HAL_TIM_Base_Init>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d104      	bne.n	80030aa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80030a0:	4806      	ldr	r0, [pc, #24]	; (80030bc <HAL_InitTick+0xac>)
 80030a2:	f00a fbef 	bl	800d884 <HAL_TIM_Base_Start_IT>
 80030a6:	4603      	mov	r3, r0
 80030a8:	e000      	b.n	80030ac <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3730      	adds	r7, #48	; 0x30
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40023800 	.word	0x40023800
 80030b8:	431bde83 	.word	0x431bde83
 80030bc:	20006cac 	.word	0x20006cac
 80030c0:	40001000 	.word	0x40001000

080030c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80030c8:	bf00      	nop
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030d2:	b480      	push	{r7}
 80030d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030d6:	e7fe      	b.n	80030d6 <HardFault_Handler+0x4>

080030d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030dc:	e7fe      	b.n	80030dc <MemManage_Handler+0x4>

080030de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030de:	b480      	push	{r7}
 80030e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030e2:	e7fe      	b.n	80030e2 <BusFault_Handler+0x4>

080030e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030e8:	e7fe      	b.n	80030e8 <UsageFault_Handler+0x4>

080030ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030ea:	b480      	push	{r7}
 80030ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030ee:	bf00      	nop
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80030fc:	2001      	movs	r0, #1
 80030fe:	f005 feef 	bl	8008ee0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
	...

08003108 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800310c:	4802      	ldr	r0, [pc, #8]	; (8003118 <RTC_Alarm_IRQHandler+0x10>)
 800310e:	f009 fbbf 	bl	800c890 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20006920 	.word	0x20006920

0800311c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003120:	4802      	ldr	r0, [pc, #8]	; (800312c <TIM6_DAC_IRQHandler+0x10>)
 8003122:	f00a fc6e 	bl	800da02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20006cac 	.word	0x20006cac

08003130 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003134:	4802      	ldr	r0, [pc, #8]	; (8003140 <OTG_FS_IRQHandler+0x10>)
 8003136:	f007 f8fd 	bl	800a334 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800313a:	bf00      	nop
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	20008ba0 	.word	0x20008ba0

08003144 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
	return 1;
 8003148:	2301      	movs	r3, #1
}
 800314a:	4618      	mov	r0, r3
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <_kill>:

int _kill(int pid, int sig)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800315e:	f017 f9c1 	bl	801a4e4 <__errno>
 8003162:	4603      	mov	r3, r0
 8003164:	2216      	movs	r2, #22
 8003166:	601a      	str	r2, [r3, #0]
	return -1;
 8003168:	f04f 33ff 	mov.w	r3, #4294967295
}
 800316c:	4618      	mov	r0, r3
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <_exit>:

void _exit (int status)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800317c:	f04f 31ff 	mov.w	r1, #4294967295
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7ff ffe7 	bl	8003154 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003186:	e7fe      	b.n	8003186 <_exit+0x12>

08003188 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	e00a      	b.n	80031b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800319a:	f3af 8000 	nop.w
 800319e:	4601      	mov	r1, r0
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	1c5a      	adds	r2, r3, #1
 80031a4:	60ba      	str	r2, [r7, #8]
 80031a6:	b2ca      	uxtb	r2, r1
 80031a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	3301      	adds	r3, #1
 80031ae:	617b      	str	r3, [r7, #20]
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	dbf0      	blt.n	800319a <_read+0x12>
	}

return len;
 80031b8:	687b      	ldr	r3, [r7, #4]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b086      	sub	sp, #24
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ce:	2300      	movs	r3, #0
 80031d0:	617b      	str	r3, [r7, #20]
 80031d2:	e009      	b.n	80031e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	1c5a      	adds	r2, r3, #1
 80031d8:	60ba      	str	r2, [r7, #8]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	3301      	adds	r3, #1
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	dbf1      	blt.n	80031d4 <_write+0x12>
	}
	return len;
 80031f0:	687b      	ldr	r3, [r7, #4]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <_close>:

int _close(int file)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
	return -1;
 8003202:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003222:	605a      	str	r2, [r3, #4]
	return 0;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <_isatty>:

int _isatty(int file)
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
	return 1;
 800323a:	2301      	movs	r3, #1
}
 800323c:	4618      	mov	r0, r3
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
	return 0;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
	...

08003264 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800326c:	4a14      	ldr	r2, [pc, #80]	; (80032c0 <_sbrk+0x5c>)
 800326e:	4b15      	ldr	r3, [pc, #84]	; (80032c4 <_sbrk+0x60>)
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003278:	4b13      	ldr	r3, [pc, #76]	; (80032c8 <_sbrk+0x64>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d102      	bne.n	8003286 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003280:	4b11      	ldr	r3, [pc, #68]	; (80032c8 <_sbrk+0x64>)
 8003282:	4a12      	ldr	r2, [pc, #72]	; (80032cc <_sbrk+0x68>)
 8003284:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003286:	4b10      	ldr	r3, [pc, #64]	; (80032c8 <_sbrk+0x64>)
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4413      	add	r3, r2
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	429a      	cmp	r2, r3
 8003292:	d207      	bcs.n	80032a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003294:	f017 f926 	bl	801a4e4 <__errno>
 8003298:	4603      	mov	r3, r0
 800329a:	220c      	movs	r2, #12
 800329c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800329e:	f04f 33ff 	mov.w	r3, #4294967295
 80032a2:	e009      	b.n	80032b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032a4:	4b08      	ldr	r3, [pc, #32]	; (80032c8 <_sbrk+0x64>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032aa:	4b07      	ldr	r3, [pc, #28]	; (80032c8 <_sbrk+0x64>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4413      	add	r3, r2
 80032b2:	4a05      	ldr	r2, [pc, #20]	; (80032c8 <_sbrk+0x64>)
 80032b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032b6:	68fb      	ldr	r3, [r7, #12]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	20030000 	.word	0x20030000
 80032c4:	00000400 	.word	0x00000400
 80032c8:	2000042c 	.word	0x2000042c
 80032cc:	20008fb8 	.word	0x20008fb8

080032d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032d4:	4b08      	ldr	r3, [pc, #32]	; (80032f8 <SystemInit+0x28>)
 80032d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032da:	4a07      	ldr	r2, [pc, #28]	; (80032f8 <SystemInit+0x28>)
 80032dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032e4:	4b04      	ldr	r3, [pc, #16]	; (80032f8 <SystemInit+0x28>)
 80032e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032ea:	609a      	str	r2, [r3, #8]
#endif
}
 80032ec:	bf00      	nop
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	e000ed00 	.word	0xe000ed00

080032fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80032fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003334 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003300:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003302:	e003      	b.n	800330c <LoopCopyDataInit>

08003304 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003304:	4b0c      	ldr	r3, [pc, #48]	; (8003338 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003306:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003308:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800330a:	3104      	adds	r1, #4

0800330c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800330c:	480b      	ldr	r0, [pc, #44]	; (800333c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800330e:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003310:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003312:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003314:	d3f6      	bcc.n	8003304 <CopyDataInit>
  ldr  r2, =_sbss
 8003316:	4a0b      	ldr	r2, [pc, #44]	; (8003344 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003318:	e002      	b.n	8003320 <LoopFillZerobss>

0800331a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800331a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800331c:	f842 3b04 	str.w	r3, [r2], #4

08003320 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003320:	4b09      	ldr	r3, [pc, #36]	; (8003348 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003322:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003324:	d3f9      	bcc.n	800331a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003326:	f7ff ffd3 	bl	80032d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800332a:	f017 f9d7 	bl	801a6dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800332e:	f7fe f983 	bl	8001638 <main>
  bx  lr    
 8003332:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003334:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003338:	08021c24 	.word	0x08021c24
  ldr  r0, =_sdata
 800333c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003340:	200003cc 	.word	0x200003cc
  ldr  r2, =_sbss
 8003344:	200003cc 	.word	0x200003cc
  ldr  r3, = _ebss
 8003348:	20008fb8 	.word	0x20008fb8

0800334c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800334c:	e7fe      	b.n	800334c <ADC_IRQHandler>
	...

08003350 <GPS_Poll>:
UART_HandleTypeDef* SERIAL_USART;



void GPS_Poll(float *latitude, float *longitude, float *time)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08c      	sub	sp, #48	; 0x30
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 800335c:	2364      	movs	r3, #100	; 0x64
 800335e:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 8003360:	2300      	movs	r3, #0
 8003362:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 8003364:	2300      	movs	r3, #0
 8003366:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 8003368:	e073      	b.n	8003452 <GPS_Poll+0x102>
		HAL_UART_Receive(GPS_USART, (uint8_t*)&rx_current, 1, 100);
 800336a:	4b3f      	ldr	r3, [pc, #252]	; (8003468 <GPS_Poll+0x118>)
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	2364      	movs	r3, #100	; 0x64
 8003370:	2201      	movs	r2, #1
 8003372:	493e      	ldr	r1, [pc, #248]	; (800346c <GPS_Poll+0x11c>)
 8003374:	f00b f8f7 	bl	800e566 <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 8003378:	4b3c      	ldr	r3, [pc, #240]	; (800346c <GPS_Poll+0x11c>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b0a      	cmp	r3, #10
 800337e:	d00f      	beq.n	80033a0 <GPS_Poll+0x50>
 8003380:	4b3b      	ldr	r3, [pc, #236]	; (8003470 <GPS_Poll+0x120>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b63      	cmp	r3, #99	; 0x63
 8003386:	d80b      	bhi.n	80033a0 <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 8003388:	4b39      	ldr	r3, [pc, #228]	; (8003470 <GPS_Poll+0x120>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	1c5a      	adds	r2, r3, #1
 800338e:	b2d1      	uxtb	r1, r2
 8003390:	4a37      	ldr	r2, [pc, #220]	; (8003470 <GPS_Poll+0x120>)
 8003392:	7011      	strb	r1, [r2, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	4b35      	ldr	r3, [pc, #212]	; (800346c <GPS_Poll+0x11c>)
 8003398:	7819      	ldrb	r1, [r3, #0]
 800339a:	4b36      	ldr	r3, [pc, #216]	; (8003474 <GPS_Poll+0x124>)
 800339c:	5499      	strb	r1, [r3, r2]
 800339e:	e021      	b.n	80033e4 <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 80033a0:	4834      	ldr	r0, [pc, #208]	; (8003474 <GPS_Poll+0x124>)
 80033a2:	f000 f86b 	bl	800347c <GPS_validate>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d013      	beq.n	80033d4 <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 80033ac:	4831      	ldr	r0, [pc, #196]	; (8003474 <GPS_Poll+0x124>)
 80033ae:	f000 f8c7 	bl	8003540 <GPS_parse>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00d      	beq.n	80033d4 <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 80033b8:	4b2f      	ldr	r3, [pc, #188]	; (8003478 <GPS_Poll+0x128>)
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 80033c0:	4b2d      	ldr	r3, [pc, #180]	; (8003478 <GPS_Poll+0x128>)
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 80033c8:	4b2b      	ldr	r3, [pc, #172]	; (8003478 <GPS_Poll+0x128>)
 80033ca:	695a      	ldr	r2, [r3, #20]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	601a      	str	r2, [r3, #0]
					done = 1;
 80033d0:	2301      	movs	r3, #1
 80033d2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 80033d4:	4b26      	ldr	r3, [pc, #152]	; (8003470 <GPS_Poll+0x120>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 80033da:	2264      	movs	r2, #100	; 0x64
 80033dc:	2100      	movs	r1, #0
 80033de:	4825      	ldr	r0, [pc, #148]	; (8003474 <GPS_Poll+0x124>)
 80033e0:	f017 f9d4 	bl	801a78c <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS_USART);
 80033e4:	2300      	movs	r3, #0
 80033e6:	623b      	str	r3, [r7, #32]
 80033e8:	4b1f      	ldr	r3, [pc, #124]	; (8003468 <GPS_Poll+0x118>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	623b      	str	r3, [r7, #32]
 80033f2:	4b1d      	ldr	r3, [pc, #116]	; (8003468 <GPS_Poll+0x118>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	623b      	str	r3, [r7, #32]
 80033fc:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS_USART);
 80033fe:	2300      	movs	r3, #0
 8003400:	61fb      	str	r3, [r7, #28]
 8003402:	4b19      	ldr	r3, [pc, #100]	; (8003468 <GPS_Poll+0x118>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	61fb      	str	r3, [r7, #28]
 800340c:	4b16      	ldr	r3, [pc, #88]	; (8003468 <GPS_Poll+0x118>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	61fb      	str	r3, [r7, #28]
 8003416:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS_USART);
 8003418:	2300      	movs	r3, #0
 800341a:	61bb      	str	r3, [r7, #24]
 800341c:	4b12      	ldr	r3, [pc, #72]	; (8003468 <GPS_Poll+0x118>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	61bb      	str	r3, [r7, #24]
 8003426:	4b10      	ldr	r3, [pc, #64]	; (8003468 <GPS_Poll+0x118>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	61bb      	str	r3, [r7, #24]
 8003430:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS_USART);
 8003432:	2300      	movs	r3, #0
 8003434:	617b      	str	r3, [r7, #20]
 8003436:	4b0c      	ldr	r3, [pc, #48]	; (8003468 <GPS_Poll+0x118>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	4b09      	ldr	r3, [pc, #36]	; (8003468 <GPS_Poll+0x118>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	617b      	str	r3, [r7, #20]
 800344a:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 800344c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800344e:	3301      	adds	r3, #1
 8003450:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 8003452:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003454:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003456:	429a      	cmp	r2, r3
 8003458:	d202      	bcs.n	8003460 <GPS_Poll+0x110>
 800345a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345c:	2b00      	cmp	r3, #0
 800345e:	d084      	beq.n	800336a <GPS_Poll+0x1a>
	}
}
 8003460:	bf00      	nop
 8003462:	3730      	adds	r7, #48	; 0x30
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	20005fb8 	.word	0x20005fb8
 800346c:	20000430 	.word	0x20000430
 8003470:	20000431 	.word	0x20000431
 8003474:	20006d4c 	.word	0x20006d4c
 8003478:	20006cf4 	.word	0x20006cf4

0800347c <GPS_validate>:

int GPS_validate(char *nmeastr){
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8003488:	2300      	movs	r3, #0
 800348a:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	4413      	add	r3, r2
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b24      	cmp	r3, #36	; 0x24
 8003496:	d103      	bne.n	80034a0 <GPS_validate+0x24>
        i++;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	3301      	adds	r3, #1
 800349c:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800349e:	e00c      	b.n	80034ba <GPS_validate+0x3e>
        return 0;
 80034a0:	2300      	movs	r3, #0
 80034a2:	e047      	b.n	8003534 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	4413      	add	r3, r2
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	461a      	mov	r2, r3
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	4053      	eors	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
        i++;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	3301      	adds	r3, #1
 80034b8:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	4413      	add	r3, r2
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d008      	beq.n	80034d8 <GPS_validate+0x5c>
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	4413      	add	r3, r2
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2b2a      	cmp	r3, #42	; 0x2a
 80034d0:	d002      	beq.n	80034d8 <GPS_validate+0x5c>
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2b4a      	cmp	r3, #74	; 0x4a
 80034d6:	dde5      	ble.n	80034a4 <GPS_validate+0x28>
    }

    if(i >= 75){
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	2b4a      	cmp	r3, #74	; 0x4a
 80034dc:	dd01      	ble.n	80034e2 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 80034de:	2300      	movs	r3, #0
 80034e0:	e028      	b.n	8003534 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	4413      	add	r3, r2
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b2a      	cmp	r3, #42	; 0x2a
 80034ec:	d119      	bne.n	8003522 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	3301      	adds	r3, #1
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	4413      	add	r3, r2
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	3302      	adds	r3, #2
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	4413      	add	r3, r2
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 800350a:	f107 0308 	add.w	r3, r7, #8
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	490a      	ldr	r1, [pc, #40]	; (800353c <GPS_validate+0xc0>)
 8003512:	4618      	mov	r0, r3
 8003514:	f018 f9b8 	bl	801b888 <siprintf>
    return((checkcalcstr[0] == check[0])
 8003518:	7a3a      	ldrb	r2, [r7, #8]
 800351a:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800351c:	429a      	cmp	r2, r3
 800351e:	d108      	bne.n	8003532 <GPS_validate+0xb6>
 8003520:	e001      	b.n	8003526 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8003522:	2300      	movs	r3, #0
 8003524:	e006      	b.n	8003534 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8003526:	7a7a      	ldrb	r2, [r7, #9]
 8003528:	7b7b      	ldrb	r3, [r7, #13]
 800352a:	429a      	cmp	r2, r3
 800352c:	d101      	bne.n	8003532 <GPS_validate+0xb6>
 800352e:	2301      	movs	r3, #1
 8003530:	e000      	b.n	8003534 <GPS_validate+0xb8>
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3718      	adds	r7, #24
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	0801fae4 	.word	0x0801fae4

08003540 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 8003540:	b580      	push	{r7, lr}
 8003542:	b08a      	sub	sp, #40	; 0x28
 8003544:	af08      	add	r7, sp, #32
 8003546:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 8003548:	2206      	movs	r2, #6
 800354a:	496d      	ldr	r1, [pc, #436]	; (8003700 <GPS_parse+0x1c0>)
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f018 fa34 	bl	801b9ba <strncmp>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d139      	bne.n	80035cc <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8003558:	4b6a      	ldr	r3, [pc, #424]	; (8003704 <GPS_parse+0x1c4>)
 800355a:	9307      	str	r3, [sp, #28]
 800355c:	4b6a      	ldr	r3, [pc, #424]	; (8003708 <GPS_parse+0x1c8>)
 800355e:	9306      	str	r3, [sp, #24]
 8003560:	4b6a      	ldr	r3, [pc, #424]	; (800370c <GPS_parse+0x1cc>)
 8003562:	9305      	str	r3, [sp, #20]
 8003564:	4b6a      	ldr	r3, [pc, #424]	; (8003710 <GPS_parse+0x1d0>)
 8003566:	9304      	str	r3, [sp, #16]
 8003568:	4b6a      	ldr	r3, [pc, #424]	; (8003714 <GPS_parse+0x1d4>)
 800356a:	9303      	str	r3, [sp, #12]
 800356c:	4b6a      	ldr	r3, [pc, #424]	; (8003718 <GPS_parse+0x1d8>)
 800356e:	9302      	str	r3, [sp, #8]
 8003570:	4b6a      	ldr	r3, [pc, #424]	; (800371c <GPS_parse+0x1dc>)
 8003572:	9301      	str	r3, [sp, #4]
 8003574:	4b6a      	ldr	r3, [pc, #424]	; (8003720 <GPS_parse+0x1e0>)
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	4b6a      	ldr	r3, [pc, #424]	; (8003724 <GPS_parse+0x1e4>)
 800357a:	4a6b      	ldr	r2, [pc, #428]	; (8003728 <GPS_parse+0x1e8>)
 800357c:	496b      	ldr	r1, [pc, #428]	; (800372c <GPS_parse+0x1ec>)
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f018 f9a2 	bl	801b8c8 <siscanf>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	f340 80b5 	ble.w	80036f6 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800358c:	4b68      	ldr	r3, [pc, #416]	; (8003730 <GPS_parse+0x1f0>)
 800358e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003592:	4b67      	ldr	r3, [pc, #412]	; (8003730 <GPS_parse+0x1f0>)
 8003594:	7e1b      	ldrb	r3, [r3, #24]
 8003596:	4618      	mov	r0, r3
 8003598:	eeb0 0a67 	vmov.f32	s0, s15
 800359c:	f000 f8ec 	bl	8003778 <GPS_nmea_to_dec>
 80035a0:	eef0 7a40 	vmov.f32	s15, s0
 80035a4:	4b62      	ldr	r3, [pc, #392]	; (8003730 <GPS_parse+0x1f0>)
 80035a6:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80035aa:	4b61      	ldr	r3, [pc, #388]	; (8003730 <GPS_parse+0x1f0>)
 80035ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80035b0:	4b5f      	ldr	r3, [pc, #380]	; (8003730 <GPS_parse+0x1f0>)
 80035b2:	7e5b      	ldrb	r3, [r3, #25]
 80035b4:	4618      	mov	r0, r3
 80035b6:	eeb0 0a67 	vmov.f32	s0, s15
 80035ba:	f000 f8dd 	bl	8003778 <GPS_nmea_to_dec>
 80035be:	eef0 7a40 	vmov.f32	s15, s0
 80035c2:	4b5b      	ldr	r3, [pc, #364]	; (8003730 <GPS_parse+0x1f0>)
 80035c4:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e095      	b.n	80036f8 <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 80035cc:	2206      	movs	r2, #6
 80035ce:	4959      	ldr	r1, [pc, #356]	; (8003734 <GPS_parse+0x1f4>)
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f018 f9f2 	bl	801b9ba <strncmp>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d134      	bne.n	8003646 <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 80035dc:	4b56      	ldr	r3, [pc, #344]	; (8003738 <GPS_parse+0x1f8>)
 80035de:	9305      	str	r3, [sp, #20]
 80035e0:	4b56      	ldr	r3, [pc, #344]	; (800373c <GPS_parse+0x1fc>)
 80035e2:	9304      	str	r3, [sp, #16]
 80035e4:	4b56      	ldr	r3, [pc, #344]	; (8003740 <GPS_parse+0x200>)
 80035e6:	9303      	str	r3, [sp, #12]
 80035e8:	4b4b      	ldr	r3, [pc, #300]	; (8003718 <GPS_parse+0x1d8>)
 80035ea:	9302      	str	r3, [sp, #8]
 80035ec:	4b4b      	ldr	r3, [pc, #300]	; (800371c <GPS_parse+0x1dc>)
 80035ee:	9301      	str	r3, [sp, #4]
 80035f0:	4b4b      	ldr	r3, [pc, #300]	; (8003720 <GPS_parse+0x1e0>)
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	4b4b      	ldr	r3, [pc, #300]	; (8003724 <GPS_parse+0x1e4>)
 80035f6:	4a4c      	ldr	r2, [pc, #304]	; (8003728 <GPS_parse+0x1e8>)
 80035f8:	4952      	ldr	r1, [pc, #328]	; (8003744 <GPS_parse+0x204>)
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f018 f964 	bl	801b8c8 <siscanf>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	dd77      	ble.n	80036f6 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8003606:	4b4a      	ldr	r3, [pc, #296]	; (8003730 <GPS_parse+0x1f0>)
 8003608:	edd3 7a04 	vldr	s15, [r3, #16]
 800360c:	4b48      	ldr	r3, [pc, #288]	; (8003730 <GPS_parse+0x1f0>)
 800360e:	7e1b      	ldrb	r3, [r3, #24]
 8003610:	4618      	mov	r0, r3
 8003612:	eeb0 0a67 	vmov.f32	s0, s15
 8003616:	f000 f8af 	bl	8003778 <GPS_nmea_to_dec>
 800361a:	eef0 7a40 	vmov.f32	s15, s0
 800361e:	4b44      	ldr	r3, [pc, #272]	; (8003730 <GPS_parse+0x1f0>)
 8003620:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8003624:	4b42      	ldr	r3, [pc, #264]	; (8003730 <GPS_parse+0x1f0>)
 8003626:	edd3 7a03 	vldr	s15, [r3, #12]
 800362a:	4b41      	ldr	r3, [pc, #260]	; (8003730 <GPS_parse+0x1f0>)
 800362c:	7e5b      	ldrb	r3, [r3, #25]
 800362e:	4618      	mov	r0, r3
 8003630:	eeb0 0a67 	vmov.f32	s0, s15
 8003634:	f000 f8a0 	bl	8003778 <GPS_nmea_to_dec>
 8003638:	eef0 7a40 	vmov.f32	s15, s0
 800363c:	4b3c      	ldr	r3, [pc, #240]	; (8003730 <GPS_parse+0x1f0>)
 800363e:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8003642:	2301      	movs	r3, #1
 8003644:	e058      	b.n	80036f8 <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 8003646:	2206      	movs	r2, #6
 8003648:	493f      	ldr	r1, [pc, #252]	; (8003748 <GPS_parse+0x208>)
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f018 f9b5 	bl	801b9ba <strncmp>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d130      	bne.n	80036b8 <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 8003656:	4b3d      	ldr	r3, [pc, #244]	; (800374c <GPS_parse+0x20c>)
 8003658:	9303      	str	r3, [sp, #12]
 800365a:	4b33      	ldr	r3, [pc, #204]	; (8003728 <GPS_parse+0x1e8>)
 800365c:	9302      	str	r3, [sp, #8]
 800365e:	4b2e      	ldr	r3, [pc, #184]	; (8003718 <GPS_parse+0x1d8>)
 8003660:	9301      	str	r3, [sp, #4]
 8003662:	4b2e      	ldr	r3, [pc, #184]	; (800371c <GPS_parse+0x1dc>)
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	4b2e      	ldr	r3, [pc, #184]	; (8003720 <GPS_parse+0x1e0>)
 8003668:	4a2e      	ldr	r2, [pc, #184]	; (8003724 <GPS_parse+0x1e4>)
 800366a:	4939      	ldr	r1, [pc, #228]	; (8003750 <GPS_parse+0x210>)
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f018 f92b 	bl	801b8c8 <siscanf>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	dd3e      	ble.n	80036f6 <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8003678:	4b2d      	ldr	r3, [pc, #180]	; (8003730 <GPS_parse+0x1f0>)
 800367a:	edd3 7a04 	vldr	s15, [r3, #16]
 800367e:	4b2c      	ldr	r3, [pc, #176]	; (8003730 <GPS_parse+0x1f0>)
 8003680:	7e1b      	ldrb	r3, [r3, #24]
 8003682:	4618      	mov	r0, r3
 8003684:	eeb0 0a67 	vmov.f32	s0, s15
 8003688:	f000 f876 	bl	8003778 <GPS_nmea_to_dec>
 800368c:	eef0 7a40 	vmov.f32	s15, s0
 8003690:	4b27      	ldr	r3, [pc, #156]	; (8003730 <GPS_parse+0x1f0>)
 8003692:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8003696:	4b26      	ldr	r3, [pc, #152]	; (8003730 <GPS_parse+0x1f0>)
 8003698:	edd3 7a03 	vldr	s15, [r3, #12]
 800369c:	4b24      	ldr	r3, [pc, #144]	; (8003730 <GPS_parse+0x1f0>)
 800369e:	7e5b      	ldrb	r3, [r3, #25]
 80036a0:	4618      	mov	r0, r3
 80036a2:	eeb0 0a67 	vmov.f32	s0, s15
 80036a6:	f000 f867 	bl	8003778 <GPS_nmea_to_dec>
 80036aa:	eef0 7a40 	vmov.f32	s15, s0
 80036ae:	4b20      	ldr	r3, [pc, #128]	; (8003730 <GPS_parse+0x1f0>)
 80036b0:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e01f      	b.n	80036f8 <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 80036b8:	2206      	movs	r2, #6
 80036ba:	4926      	ldr	r1, [pc, #152]	; (8003754 <GPS_parse+0x214>)
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f018 f97c 	bl	801b9ba <strncmp>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d116      	bne.n	80036f6 <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 80036c8:	4b23      	ldr	r3, [pc, #140]	; (8003758 <GPS_parse+0x218>)
 80036ca:	9305      	str	r3, [sp, #20]
 80036cc:	4b23      	ldr	r3, [pc, #140]	; (800375c <GPS_parse+0x21c>)
 80036ce:	9304      	str	r3, [sp, #16]
 80036d0:	4b23      	ldr	r3, [pc, #140]	; (8003760 <GPS_parse+0x220>)
 80036d2:	9303      	str	r3, [sp, #12]
 80036d4:	4b1a      	ldr	r3, [pc, #104]	; (8003740 <GPS_parse+0x200>)
 80036d6:	9302      	str	r3, [sp, #8]
 80036d8:	4b22      	ldr	r3, [pc, #136]	; (8003764 <GPS_parse+0x224>)
 80036da:	9301      	str	r3, [sp, #4]
 80036dc:	4b22      	ldr	r3, [pc, #136]	; (8003768 <GPS_parse+0x228>)
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	4b22      	ldr	r3, [pc, #136]	; (800376c <GPS_parse+0x22c>)
 80036e2:	4a23      	ldr	r2, [pc, #140]	; (8003770 <GPS_parse+0x230>)
 80036e4:	4923      	ldr	r1, [pc, #140]	; (8003774 <GPS_parse+0x234>)
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f018 f8ee 	bl	801b8c8 <siscanf>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	dd01      	ble.n	80036f6 <GPS_parse+0x1b6>
            return 0;
 80036f2:	2300      	movs	r3, #0
 80036f4:	e000      	b.n	80036f8 <GPS_parse+0x1b8>
    }
    return 0;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	0801faec 	.word	0x0801faec
 8003704:	20006d20 	.word	0x20006d20
 8003708:	20006d1c 	.word	0x20006d1c
 800370c:	20006d18 	.word	0x20006d18
 8003710:	20006d14 	.word	0x20006d14
 8003714:	20006d10 	.word	0x20006d10
 8003718:	20006d0d 	.word	0x20006d0d
 800371c:	20006d00 	.word	0x20006d00
 8003720:	20006d0c 	.word	0x20006d0c
 8003724:	20006d04 	.word	0x20006d04
 8003728:	20006d08 	.word	0x20006d08
 800372c:	0801faf4 	.word	0x0801faf4
 8003730:	20006cf4 	.word	0x20006cf4
 8003734:	0801fb1c 	.word	0x0801fb1c
 8003738:	20006d2c 	.word	0x20006d2c
 800373c:	20006d28 	.word	0x20006d28
 8003740:	20006d24 	.word	0x20006d24
 8003744:	0801fb24 	.word	0x0801fb24
 8003748:	0801fb44 	.word	0x0801fb44
 800374c:	20006d30 	.word	0x20006d30
 8003750:	0801fb4c 	.word	0x0801fb4c
 8003754:	0801fb68 	.word	0x0801fb68
 8003758:	20006d48 	.word	0x20006d48
 800375c:	20006d44 	.word	0x20006d44
 8003760:	20006d41 	.word	0x20006d41
 8003764:	20006d40 	.word	0x20006d40
 8003768:	20006d3c 	.word	0x20006d3c
 800376c:	20006d38 	.word	0x20006d38
 8003770:	20006d34 	.word	0x20006d34
 8003774:	0801fb70 	.word	0x0801fb70

08003778 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8003778:	b480      	push	{r7}
 800377a:	b087      	sub	sp, #28
 800377c:	af00      	add	r7, sp, #0
 800377e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003782:	4603      	mov	r3, r0
 8003784:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8003786:	ed97 7a01 	vldr	s14, [r7, #4]
 800378a:	eddf 6a20 	vldr	s13, [pc, #128]	; 800380c <GPS_nmea_to_dec+0x94>
 800378e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003792:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003796:	ee17 3a90 	vmov	r3, s15
 800379a:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	2264      	movs	r2, #100	; 0x64
 80037a0:	fb02 f303 	mul.w	r3, r2, r3
 80037a4:	ee07 3a90 	vmov	s15, r3
 80037a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80037b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037b4:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 80037b8:	ed97 7a03 	vldr	s14, [r7, #12]
 80037bc:	eddf 6a14 	vldr	s13, [pc, #80]	; 8003810 <GPS_nmea_to_dec+0x98>
 80037c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037c4:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	ee07 3a90 	vmov	s15, r3
 80037ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037d2:	ed97 7a02 	vldr	s14, [r7, #8]
 80037d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037da:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 80037de:	78fb      	ldrb	r3, [r7, #3]
 80037e0:	2b53      	cmp	r3, #83	; 0x53
 80037e2:	d002      	beq.n	80037ea <GPS_nmea_to_dec+0x72>
 80037e4:	78fb      	ldrb	r3, [r7, #3]
 80037e6:	2b57      	cmp	r3, #87	; 0x57
 80037e8:	d105      	bne.n	80037f6 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 80037ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80037ee:	eef1 7a67 	vneg.f32	s15, s15
 80037f2:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	ee07 3a90 	vmov	s15, r3
}
 80037fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003800:	371c      	adds	r7, #28
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	42c80000 	.word	0x42c80000
 8003810:	42700000 	.word	0x42700000

08003814 <GPS_init>:

/*
 * TODO MRT code
 */

void GPS_init(UART_HandleTypeDef* data_uart, UART_HandleTypeDef* transmit_uart){
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
	GPS_USART = data_uart;
 800381e:	4a09      	ldr	r2, [pc, #36]	; (8003844 <GPS_init+0x30>)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6013      	str	r3, [r2, #0]
	SERIAL_USART = transmit_uart;
 8003824:	4a08      	ldr	r2, [pc, #32]	; (8003848 <GPS_init+0x34>)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(SERIAL_USART,"\r\n\r\nGPS Init\r\n\r\n",16,HAL_MAX_DELAY);
 800382a:	4b07      	ldr	r3, [pc, #28]	; (8003848 <GPS_init+0x34>)
 800382c:	6818      	ldr	r0, [r3, #0]
 800382e:	f04f 33ff 	mov.w	r3, #4294967295
 8003832:	2210      	movs	r2, #16
 8003834:	4905      	ldr	r1, [pc, #20]	; (800384c <GPS_init+0x38>)
 8003836:	f00a fe04 	bl	800e442 <HAL_UART_Transmit>
}
 800383a:	bf00      	nop
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	20005fb8 	.word	0x20005fb8
 8003848:	20006db0 	.word	0x20006db0
 800384c:	0801fb90 	.word	0x0801fb90

08003850 <__NVIC_SystemReset>:
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003854:	f3bf 8f4f 	dsb	sy
}
 8003858:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800385a:	4b06      	ldr	r3, [pc, #24]	; (8003874 <__NVIC_SystemReset+0x24>)
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003862:	4904      	ldr	r1, [pc, #16]	; (8003874 <__NVIC_SystemReset+0x24>)
 8003864:	4b04      	ldr	r3, [pc, #16]	; (8003878 <__NVIC_SystemReset+0x28>)
 8003866:	4313      	orrs	r3, r2
 8003868:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800386a:	f3bf 8f4f 	dsb	sy
}
 800386e:	bf00      	nop
    __NOP();
 8003870:	bf00      	nop
 8003872:	e7fd      	b.n	8003870 <__NVIC_SystemReset+0x20>
 8003874:	e000ed00 	.word	0xe000ed00
 8003878:	05fa0004 	.word	0x05fa0004

0800387c <MRT_externalFlashSetup>:


/*
 * User functions
 */
void MRT_externalFlashSetup(UART_HandleTypeDef* uart){
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	e007      	b.n	800389a <MRT_externalFlashSetup+0x1e>
		FLAGS_NULL_BUFFER[i] = 0; //Setup the flags null buffer for the correct number of values
 800388a:	4a10      	ldr	r2, [pc, #64]	; (80038cc <MRT_externalFlashSetup+0x50>)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4413      	add	r3, r2
 8003890:	2200      	movs	r2, #0
 8003892:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	3301      	adds	r3, #1
 8003898:	60fb      	str	r3, [r7, #12]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2b02      	cmp	r3, #2
 800389e:	ddf4      	ble.n	800388a <MRT_externalFlashSetup+0xe>
	}

	if (!W25qxx_Init()) {
 80038a0:	f000 fb90 	bl	8003fc4 <W25qxx_Init>
 80038a4:	4603      	mov	r3, r0
 80038a6:	f083 0301 	eor.w	r3, r3, #1
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <MRT_externalFlashSetup+0x38>
		Error_Handler(); // hangs and blinks LEDF
 80038b0:	f7ff f86c 	bl	800298c <Error_Handler>
	}
	MRT_WUProcedure(); //Needs to be called before getFlags() and after the W25xx_Init()
 80038b4:	f004 f8d4 	bl	8007a60 <MRT_WUProcedure>
	MRT_getFlags();
 80038b8:	f000 f86c 	bl	8003994 <MRT_getFlags>
	MRT_resetInfo(uart);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f94f 	bl	8003b60 <MRT_resetInfo>
}
 80038c2:	bf00      	nop
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20006db4 	.word	0x20006db4

080038d0 <HAL_GPIO_EXTI_Callback>:


/*
 * Helper functions
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == IN_Button_Pin){
 80038da:	88fb      	ldrh	r3, [r7, #6]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_GPIO_EXTI_Callback+0x14>
		//Manual reset from external button
		MRT_resetFromStart();
 80038e0:	f000 f804 	bl	80038ec <MRT_resetFromStart>
	}

}
 80038e4:	bf00      	nop
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <MRT_resetFromStart>:


void MRT_resetFromStart(void){
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
	//Clear wakeup and reset flags
	W25qxx_EraseSector(1);
 80038f0:	2001      	movs	r0, #1
 80038f2:	f000 fcb9 	bl	8004268 <W25qxx_EraseSector>
	W25qxx_WriteSector(FLAGS_NULL_BUFFER, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80038f6:	2303      	movs	r3, #3
 80038f8:	2200      	movs	r2, #0
 80038fa:	2101      	movs	r1, #1
 80038fc:	4807      	ldr	r0, [pc, #28]	; (800391c <MRT_resetFromStart+0x30>)
 80038fe:	f000 fdfd 	bl	80044fc <W25qxx_WriteSector>

	//Clear RTC time (last recorded)
	W25qxx_EraseSector(2);
 8003902:	2002      	movs	r0, #2
 8003904:	f000 fcb0 	bl	8004268 <W25qxx_EraseSector>
	W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, 2, RTC_TIME_OFFSET, 3);
 8003908:	2303      	movs	r3, #3
 800390a:	2200      	movs	r2, #0
 800390c:	2102      	movs	r1, #2
 800390e:	4804      	ldr	r0, [pc, #16]	; (8003920 <MRT_resetFromStart+0x34>)
 8003910:	f000 fdf4 	bl	80044fc <W25qxx_WriteSector>

	//Clear all saved data of ejection stages
	//TODO

	//Shutdown Iridium
	MRT_Static_Iridium_Shutdown();
 8003914:	f002 fc8e 	bl	8006234 <MRT_Static_Iridium_Shutdown>

	//Reset function
	NVIC_SystemReset();
 8003918:	f7ff ff9a 	bl	8003850 <__NVIC_SystemReset>
 800391c:	20006db4 	.word	0x20006db4
 8003920:	20000438 	.word	0x20000438

08003924 <MRT_updateExternalFlashBuffers>:
}


void MRT_updateExternalFlashBuffers(void){
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 800392a:	2300      	movs	r3, #0
 800392c:	607b      	str	r3, [r7, #4]
 800392e:	e00c      	b.n	800394a <MRT_updateExternalFlashBuffers+0x26>
		flash_flags_buffer[i] = *flash_flags[i];
 8003930:	4a14      	ldr	r2, [pc, #80]	; (8003984 <MRT_updateExternalFlashBuffers+0x60>)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003938:	7819      	ldrb	r1, [r3, #0]
 800393a:	4a13      	ldr	r2, [pc, #76]	; (8003988 <MRT_updateExternalFlashBuffers+0x64>)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4413      	add	r3, r2
 8003940:	460a      	mov	r2, r1
 8003942:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3301      	adds	r3, #1
 8003948:	607b      	str	r3, [r7, #4]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b02      	cmp	r3, #2
 800394e:	ddef      	ble.n	8003930 <MRT_updateExternalFlashBuffers+0xc>
	}
	for (int i = 0; i < 3; i++){
 8003950:	2300      	movs	r3, #0
 8003952:	603b      	str	r3, [r7, #0]
 8003954:	e00c      	b.n	8003970 <MRT_updateExternalFlashBuffers+0x4c>
		flash_time_buffer[i] = *flash_time[i];
 8003956:	4a0d      	ldr	r2, [pc, #52]	; (800398c <MRT_updateExternalFlashBuffers+0x68>)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800395e:	7819      	ldrb	r1, [r3, #0]
 8003960:	4a0b      	ldr	r2, [pc, #44]	; (8003990 <MRT_updateExternalFlashBuffers+0x6c>)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	4413      	add	r3, r2
 8003966:	460a      	mov	r2, r1
 8003968:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++){
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	3301      	adds	r3, #1
 800396e:	603b      	str	r3, [r7, #0]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	2b02      	cmp	r3, #2
 8003974:	ddef      	ble.n	8003956 <MRT_updateExternalFlashBuffers+0x32>
	}
}
 8003976:	bf00      	nop
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	20000004 	.word	0x20000004
 8003988:	20006058 	.word	0x20006058
 800398c:	20000010 	.word	0x20000010
 8003990:	200067b8 	.word	0x200067b8

08003994 <MRT_getFlags>:


void MRT_getFlags(void){
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0

	//Retrieve flags
	W25qxx_ReadSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 800399a:	2303      	movs	r3, #3
 800399c:	2200      	movs	r2, #0
 800399e:	2101      	movs	r1, #1
 80039a0:	4865      	ldr	r0, [pc, #404]	; (8003b38 <MRT_getFlags+0x1a4>)
 80039a2:	f000 fee9 	bl	8004778 <W25qxx_ReadSector>

	//Retrieve RTC time (last recorded)
	W25qxx_ReadSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 80039a6:	2303      	movs	r3, #3
 80039a8:	2200      	movs	r2, #0
 80039aa:	2102      	movs	r1, #2
 80039ac:	4863      	ldr	r0, [pc, #396]	; (8003b3c <MRT_getFlags+0x1a8>)
 80039ae:	f000 fee3 	bl	8004778 <W25qxx_ReadSector>

	//If RTC detected a wake up, update the flash memory
	if (wu_flag == 1){
 80039b2:	4b63      	ldr	r3, [pc, #396]	; (8003b40 <MRT_getFlags+0x1ac>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d10e      	bne.n	80039d8 <MRT_getFlags+0x44>
		//Write the new number of wake up to external flash
		flash_flags_buffer[WU_FLAG_OFFSET] = flash_flags_buffer[WU_FLAG_OFFSET] + 1; //Update number of wake up
 80039ba:	4b5f      	ldr	r3, [pc, #380]	; (8003b38 <MRT_getFlags+0x1a4>)
 80039bc:	785b      	ldrb	r3, [r3, #1]
 80039be:	3301      	adds	r3, #1
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	4b5d      	ldr	r3, [pc, #372]	; (8003b38 <MRT_getFlags+0x1a4>)
 80039c4:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 80039c6:	2001      	movs	r0, #1
 80039c8:	f000 fc4e 	bl	8004268 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80039cc:	2303      	movs	r3, #3
 80039ce:	2200      	movs	r2, #0
 80039d0:	2101      	movs	r1, #1
 80039d2:	4859      	ldr	r0, [pc, #356]	; (8003b38 <MRT_getFlags+0x1a4>)
 80039d4:	f000 fd92 	bl	80044fc <W25qxx_WriteSector>
	}

	//Assign each value read to their variable
	for (int i = 0; i < NB_OF_FLAGS; i++){
 80039d8:	2300      	movs	r3, #0
 80039da:	607b      	str	r3, [r7, #4]
 80039dc:	e00b      	b.n	80039f6 <MRT_getFlags+0x62>
		*flash_flags[i] = flash_flags_buffer[i];
 80039de:	4a59      	ldr	r2, [pc, #356]	; (8003b44 <MRT_getFlags+0x1b0>)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e6:	4954      	ldr	r1, [pc, #336]	; (8003b38 <MRT_getFlags+0x1a4>)
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	440a      	add	r2, r1
 80039ec:	7812      	ldrb	r2, [r2, #0]
 80039ee:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3301      	adds	r3, #1
 80039f4:	607b      	str	r3, [r7, #4]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	ddf0      	ble.n	80039de <MRT_getFlags+0x4a>
	}
	for (int i = 0; i < 3; i++){
 80039fc:	2300      	movs	r3, #0
 80039fe:	603b      	str	r3, [r7, #0]
 8003a00:	e00b      	b.n	8003a1a <MRT_getFlags+0x86>
		*flash_time[i] = flash_time_buffer[i];
 8003a02:	4a51      	ldr	r2, [pc, #324]	; (8003b48 <MRT_getFlags+0x1b4>)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a0a:	494c      	ldr	r1, [pc, #304]	; (8003b3c <MRT_getFlags+0x1a8>)
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	440a      	add	r2, r1
 8003a10:	7812      	ldrb	r2, [r2, #0]
 8003a12:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++){
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	3301      	adds	r3, #1
 8003a18:	603b      	str	r3, [r7, #0]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	ddf0      	ble.n	8003a02 <MRT_getFlags+0x6e>
	}


	//Check flags values
	//Reset flag
	if (reset_flag != 0 && reset_flag !=1){ //If random value (none was written)
 8003a20:	4b4a      	ldr	r3, [pc, #296]	; (8003b4c <MRT_getFlags+0x1b8>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d013      	beq.n	8003a50 <MRT_getFlags+0xbc>
 8003a28:	4b48      	ldr	r3, [pc, #288]	; (8003b4c <MRT_getFlags+0x1b8>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d00f      	beq.n	8003a50 <MRT_getFlags+0xbc>
		reset_flag = 0;
 8003a30:	4b46      	ldr	r3, [pc, #280]	; (8003b4c <MRT_getFlags+0x1b8>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 8003a36:	4b45      	ldr	r3, [pc, #276]	; (8003b4c <MRT_getFlags+0x1b8>)
 8003a38:	781a      	ldrb	r2, [r3, #0]
 8003a3a:	4b3f      	ldr	r3, [pc, #252]	; (8003b38 <MRT_getFlags+0x1a4>)
 8003a3c:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(1);
 8003a3e:	2001      	movs	r0, #1
 8003a40:	f000 fc12 	bl	8004268 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003a44:	2303      	movs	r3, #3
 8003a46:	2200      	movs	r2, #0
 8003a48:	2101      	movs	r1, #1
 8003a4a:	483b      	ldr	r0, [pc, #236]	; (8003b38 <MRT_getFlags+0x1a4>)
 8003a4c:	f000 fd56 	bl	80044fc <W25qxx_WriteSector>
	}

	//Wake up flag
	if (wu_flag != 0 && wu_flag !=1 && wu_flag !=2){ //If random value (none was written)
 8003a50:	4b3b      	ldr	r3, [pc, #236]	; (8003b40 <MRT_getFlags+0x1ac>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d017      	beq.n	8003a88 <MRT_getFlags+0xf4>
 8003a58:	4b39      	ldr	r3, [pc, #228]	; (8003b40 <MRT_getFlags+0x1ac>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d013      	beq.n	8003a88 <MRT_getFlags+0xf4>
 8003a60:	4b37      	ldr	r3, [pc, #220]	; (8003b40 <MRT_getFlags+0x1ac>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d00f      	beq.n	8003a88 <MRT_getFlags+0xf4>
		wu_flag = 0;
 8003a68:	4b35      	ldr	r3, [pc, #212]	; (8003b40 <MRT_getFlags+0x1ac>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[WU_FLAG_OFFSET] = wu_flag;
 8003a6e:	4b34      	ldr	r3, [pc, #208]	; (8003b40 <MRT_getFlags+0x1ac>)
 8003a70:	781a      	ldrb	r2, [r3, #0]
 8003a72:	4b31      	ldr	r3, [pc, #196]	; (8003b38 <MRT_getFlags+0x1a4>)
 8003a74:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 8003a76:	2001      	movs	r0, #1
 8003a78:	f000 fbf6 	bl	8004268 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	2200      	movs	r2, #0
 8003a80:	2101      	movs	r1, #1
 8003a82:	482d      	ldr	r0, [pc, #180]	; (8003b38 <MRT_getFlags+0x1a4>)
 8003a84:	f000 fd3a 	bl	80044fc <W25qxx_WriteSector>
	}

	//IWDG flag
	if (iwdg_flag != 0 && iwdg_flag !=1){ //If random value (none was written)
 8003a88:	4b31      	ldr	r3, [pc, #196]	; (8003b50 <MRT_getFlags+0x1bc>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d013      	beq.n	8003ab8 <MRT_getFlags+0x124>
 8003a90:	4b2f      	ldr	r3, [pc, #188]	; (8003b50 <MRT_getFlags+0x1bc>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d00f      	beq.n	8003ab8 <MRT_getFlags+0x124>
		iwdg_flag = 0;
 8003a98:	4b2d      	ldr	r3, [pc, #180]	; (8003b50 <MRT_getFlags+0x1bc>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8003a9e:	4b2c      	ldr	r3, [pc, #176]	; (8003b50 <MRT_getFlags+0x1bc>)
 8003aa0:	781a      	ldrb	r2, [r3, #0]
 8003aa2:	4b25      	ldr	r3, [pc, #148]	; (8003b38 <MRT_getFlags+0x1a4>)
 8003aa4:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(1);
 8003aa6:	2001      	movs	r0, #1
 8003aa8:	f000 fbde 	bl	8004268 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003aac:	2303      	movs	r3, #3
 8003aae:	2200      	movs	r2, #0
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	4821      	ldr	r0, [pc, #132]	; (8003b38 <MRT_getFlags+0x1a4>)
 8003ab4:	f000 fd22 	bl	80044fc <W25qxx_WriteSector>
	}


	//Check RTC time values
	//Hours
	if (!(prev_hours >= 0 && prev_hours < 24)){ //If random value (none was written)
 8003ab8:	4b26      	ldr	r3, [pc, #152]	; (8003b54 <MRT_getFlags+0x1c0>)
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2b17      	cmp	r3, #23
 8003abe:	d90f      	bls.n	8003ae0 <MRT_getFlags+0x14c>
		prev_hours = 0;
 8003ac0:	4b24      	ldr	r3, [pc, #144]	; (8003b54 <MRT_getFlags+0x1c0>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_HOURS_OFFSET] = prev_hours;
 8003ac6:	4b23      	ldr	r3, [pc, #140]	; (8003b54 <MRT_getFlags+0x1c0>)
 8003ac8:	781a      	ldrb	r2, [r3, #0]
 8003aca:	4b1c      	ldr	r3, [pc, #112]	; (8003b3c <MRT_getFlags+0x1a8>)
 8003acc:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(2);
 8003ace:	2002      	movs	r0, #2
 8003ad0:	f000 fbca 	bl	8004268 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	2102      	movs	r1, #2
 8003ada:	4818      	ldr	r0, [pc, #96]	; (8003b3c <MRT_getFlags+0x1a8>)
 8003adc:	f000 fd0e 	bl	80044fc <W25qxx_WriteSector>
	}

	//Minutes
	if (!(prev_min >= 0 && prev_min < 60)){ //If random value (none was written)
 8003ae0:	4b1d      	ldr	r3, [pc, #116]	; (8003b58 <MRT_getFlags+0x1c4>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b3b      	cmp	r3, #59	; 0x3b
 8003ae6:	d90f      	bls.n	8003b08 <MRT_getFlags+0x174>
		prev_min = 0;
 8003ae8:	4b1b      	ldr	r3, [pc, #108]	; (8003b58 <MRT_getFlags+0x1c4>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_MIN_OFFSET] = prev_min;
 8003aee:	4b1a      	ldr	r3, [pc, #104]	; (8003b58 <MRT_getFlags+0x1c4>)
 8003af0:	781a      	ldrb	r2, [r3, #0]
 8003af2:	4b12      	ldr	r3, [pc, #72]	; (8003b3c <MRT_getFlags+0x1a8>)
 8003af4:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(2);
 8003af6:	2002      	movs	r0, #2
 8003af8:	f000 fbb6 	bl	8004268 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003afc:	2303      	movs	r3, #3
 8003afe:	2200      	movs	r2, #0
 8003b00:	2102      	movs	r1, #2
 8003b02:	480e      	ldr	r0, [pc, #56]	; (8003b3c <MRT_getFlags+0x1a8>)
 8003b04:	f000 fcfa 	bl	80044fc <W25qxx_WriteSector>
	}

	//Seconds
	if (!(prev_sec >= 0 && prev_sec < 60)){ //If random value (none was written)
 8003b08:	4b14      	ldr	r3, [pc, #80]	; (8003b5c <MRT_getFlags+0x1c8>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2b3b      	cmp	r3, #59	; 0x3b
 8003b0e:	d90f      	bls.n	8003b30 <MRT_getFlags+0x19c>
		prev_sec = 0;
 8003b10:	4b12      	ldr	r3, [pc, #72]	; (8003b5c <MRT_getFlags+0x1c8>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_SEC_OFFSET] = prev_sec;
 8003b16:	4b11      	ldr	r3, [pc, #68]	; (8003b5c <MRT_getFlags+0x1c8>)
 8003b18:	781a      	ldrb	r2, [r3, #0]
 8003b1a:	4b08      	ldr	r3, [pc, #32]	; (8003b3c <MRT_getFlags+0x1a8>)
 8003b1c:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(2);
 8003b1e:	2002      	movs	r0, #2
 8003b20:	f000 fba2 	bl	8004268 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003b24:	2303      	movs	r3, #3
 8003b26:	2200      	movs	r2, #0
 8003b28:	2102      	movs	r1, #2
 8003b2a:	4804      	ldr	r0, [pc, #16]	; (8003b3c <MRT_getFlags+0x1a8>)
 8003b2c:	f000 fce6 	bl	80044fc <W25qxx_WriteSector>
	}
}
 8003b30:	bf00      	nop
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	20006058 	.word	0x20006058
 8003b3c:	200067b8 	.word	0x200067b8
 8003b40:	200006a9 	.word	0x200006a9
 8003b44:	20000004 	.word	0x20000004
 8003b48:	20000010 	.word	0x20000010
 8003b4c:	20000432 	.word	0x20000432
 8003b50:	20000433 	.word	0x20000433
 8003b54:	20000434 	.word	0x20000434
 8003b58:	20000435 	.word	0x20000435
 8003b5c:	20000436 	.word	0x20000436

08003b60 <MRT_resetInfo>:


void MRT_resetInfo(UART_HandleTypeDef* uart){
 8003b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b62:	b0a7      	sub	sp, #156	; 0x9c
 8003b64:	af04      	add	r7, sp, #16
 8003b66:	6078      	str	r0, [r7, #4]

	  char buffer[100];
	  sprintf(buffer,"Reset: %i,  WU: %i,  IWDG: %i\r\nPrevious RTC time: %i:%i:%i\r\n",reset_flag, wu_flag, iwdg_flag, prev_hours, prev_min, prev_sec);
 8003b68:	4b54      	ldr	r3, [pc, #336]	; (8003cbc <MRT_resetInfo+0x15c>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	461d      	mov	r5, r3
 8003b6e:	4b54      	ldr	r3, [pc, #336]	; (8003cc0 <MRT_resetInfo+0x160>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	461e      	mov	r6, r3
 8003b74:	4b53      	ldr	r3, [pc, #332]	; (8003cc4 <MRT_resetInfo+0x164>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	4b53      	ldr	r3, [pc, #332]	; (8003cc8 <MRT_resetInfo+0x168>)
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4b52      	ldr	r3, [pc, #328]	; (8003ccc <MRT_resetInfo+0x16c>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	461c      	mov	r4, r3
 8003b86:	4b52      	ldr	r3, [pc, #328]	; (8003cd0 <MRT_resetInfo+0x170>)
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	f107 0020 	add.w	r0, r7, #32
 8003b8e:	9303      	str	r3, [sp, #12]
 8003b90:	9402      	str	r4, [sp, #8]
 8003b92:	9101      	str	r1, [sp, #4]
 8003b94:	9200      	str	r2, [sp, #0]
 8003b96:	4633      	mov	r3, r6
 8003b98:	462a      	mov	r2, r5
 8003b9a:	494e      	ldr	r1, [pc, #312]	; (8003cd4 <MRT_resetInfo+0x174>)
 8003b9c:	f017 fe74 	bl	801b888 <siprintf>
	  HAL_UART_Transmit(uart, buffer, strlen(buffer), HAL_MAX_DELAY);
 8003ba0:	f107 0320 	add.w	r3, r7, #32
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fc fb23 	bl	80001f0 <strlen>
 8003baa:	4603      	mov	r3, r0
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	f107 0120 	add.w	r1, r7, #32
 8003bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f00a fc43 	bl	800e442 <HAL_UART_Transmit>

	  //Check if IWDG is being deactivated
	  if (iwdg_flag==1){
 8003bbc:	4b41      	ldr	r3, [pc, #260]	; (8003cc4 <MRT_resetInfo+0x164>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d11d      	bne.n	8003c00 <MRT_resetInfo+0xa0>
		  HAL_UART_Transmit(uart, "Deactivating IWDG\r\n", 19, HAL_MAX_DELAY);
 8003bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc8:	2213      	movs	r2, #19
 8003bca:	4943      	ldr	r1, [pc, #268]	; (8003cd8 <MRT_resetInfo+0x178>)
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f00a fc38 	bl	800e442 <HAL_UART_Transmit>

		  iwdg_flag = 0; //Flip flag
 8003bd2:	4b3c      	ldr	r3, [pc, #240]	; (8003cc4 <MRT_resetInfo+0x164>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
		  flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8003bd8:	4b3a      	ldr	r3, [pc, #232]	; (8003cc4 <MRT_resetInfo+0x164>)
 8003bda:	781a      	ldrb	r2, [r3, #0]
 8003bdc:	4b3f      	ldr	r3, [pc, #252]	; (8003cdc <MRT_resetInfo+0x17c>)
 8003bde:	709a      	strb	r2, [r3, #2]
		  W25qxx_EraseSector(1);
 8003be0:	2001      	movs	r0, #1
 8003be2:	f000 fb41 	bl	8004268 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003be6:	2303      	movs	r3, #3
 8003be8:	2200      	movs	r2, #0
 8003bea:	2101      	movs	r1, #1
 8003bec:	483b      	ldr	r0, [pc, #236]	; (8003cdc <MRT_resetInfo+0x17c>)
 8003bee:	f000 fc85 	bl	80044fc <W25qxx_WriteSector>

		  HAL_Delay(1000);
 8003bf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bf6:	f004 fbeb 	bl	80083d0 <HAL_Delay>

		  //Go to sleep
		  MRT_StandByMode(SLEEP_TIME);
 8003bfa:	2005      	movs	r0, #5
 8003bfc:	f003 ffee 	bl	8007bdc <MRT_StandByMode>
	  }


	  //Check if we are after waking up (and at which wake up we are at)
	  if (wu_flag>0){
 8003c00:	4b2f      	ldr	r3, [pc, #188]	; (8003cc0 <MRT_resetInfo+0x160>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d03a      	beq.n	8003c7e <MRT_resetInfo+0x11e>
		  char buf[20];
		  sprintf(buf, "FC wake up %i\r\n", wu_flag);
 8003c08:	4b2d      	ldr	r3, [pc, #180]	; (8003cc0 <MRT_resetInfo+0x160>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	f107 030c 	add.w	r3, r7, #12
 8003c12:	4933      	ldr	r1, [pc, #204]	; (8003ce0 <MRT_resetInfo+0x180>)
 8003c14:	4618      	mov	r0, r3
 8003c16:	f017 fe37 	bl	801b888 <siprintf>
		  HAL_UART_Transmit(uart, buf, strlen(buf), HAL_MAX_DELAY);
 8003c1a:	f107 030c 	add.w	r3, r7, #12
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fc fae6 	bl	80001f0 <strlen>
 8003c24:	4603      	mov	r3, r0
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	f107 010c 	add.w	r1, r7, #12
 8003c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f00a fc06 	bl	800e442 <HAL_UART_Transmit>

		  HAL_UART_Transmit(uart, "Resetting RTC time\r\n", 20, HAL_MAX_DELAY);
 8003c36:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3a:	2214      	movs	r2, #20
 8003c3c:	4929      	ldr	r1, [pc, #164]	; (8003ce4 <MRT_resetInfo+0x184>)
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f00a fbff 	bl	800e442 <HAL_UART_Transmit>


		  //Clear RTC time (last recorded)
		  W25qxx_EraseSector(2);
 8003c44:	2002      	movs	r0, #2
 8003c46:	f000 fb0f 	bl	8004268 <W25qxx_EraseSector>
		  W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, 2, RTC_TIME_OFFSET, 3);
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	2102      	movs	r1, #2
 8003c50:	4825      	ldr	r0, [pc, #148]	; (8003ce8 <MRT_resetInfo+0x188>)
 8003c52:	f000 fc53 	bl	80044fc <W25qxx_WriteSector>

		  //Update variables (to 0)
		  for (int i = 0; i < 3; i++){
 8003c56:	2300      	movs	r3, #0
 8003c58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c5c:	e00b      	b.n	8003c76 <MRT_resetInfo+0x116>
			  *flash_time[i] = 0x0;
 8003c5e:	4a23      	ldr	r2, [pc, #140]	; (8003cec <MRT_resetInfo+0x18c>)
 8003c60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 3; i++){
 8003c6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c70:	3301      	adds	r3, #1
 8003c72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	ddef      	ble.n	8003c5e <MRT_resetInfo+0xfe>

	  }


	  //Check if we start from the beginning
	  if (reset_flag==0){
 8003c7e:	4b0f      	ldr	r3, [pc, #60]	; (8003cbc <MRT_resetInfo+0x15c>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d116      	bne.n	8003cb4 <MRT_resetInfo+0x154>
		  HAL_UART_Transmit(uart, "FC restarted\r\n", 14, HAL_MAX_DELAY);
 8003c86:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8a:	220e      	movs	r2, #14
 8003c8c:	4918      	ldr	r1, [pc, #96]	; (8003cf0 <MRT_resetInfo+0x190>)
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f00a fbd7 	bl	800e442 <HAL_UART_Transmit>

		  reset_flag = 1; //Flip flag
 8003c94:	4b09      	ldr	r3, [pc, #36]	; (8003cbc <MRT_resetInfo+0x15c>)
 8003c96:	2201      	movs	r2, #1
 8003c98:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
	      flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 8003c9a:	4b08      	ldr	r3, [pc, #32]	; (8003cbc <MRT_resetInfo+0x15c>)
 8003c9c:	781a      	ldrb	r2, [r3, #0]
 8003c9e:	4b0f      	ldr	r3, [pc, #60]	; (8003cdc <MRT_resetInfo+0x17c>)
 8003ca0:	701a      	strb	r2, [r3, #0]
		  W25qxx_EraseSector(1);
 8003ca2:	2001      	movs	r0, #1
 8003ca4:	f000 fae0 	bl	8004268 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003ca8:	2303      	movs	r3, #3
 8003caa:	2200      	movs	r2, #0
 8003cac:	2101      	movs	r1, #1
 8003cae:	480b      	ldr	r0, [pc, #44]	; (8003cdc <MRT_resetInfo+0x17c>)
 8003cb0:	f000 fc24 	bl	80044fc <W25qxx_WriteSector>
	  }
}
 8003cb4:	bf00      	nop
 8003cb6:	378c      	adds	r7, #140	; 0x8c
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cbc:	20000432 	.word	0x20000432
 8003cc0:	200006a9 	.word	0x200006a9
 8003cc4:	20000433 	.word	0x20000433
 8003cc8:	20000434 	.word	0x20000434
 8003ccc:	20000435 	.word	0x20000435
 8003cd0:	20000436 	.word	0x20000436
 8003cd4:	0801fbd4 	.word	0x0801fbd4
 8003cd8:	0801fc14 	.word	0x0801fc14
 8003cdc:	20006058 	.word	0x20006058
 8003ce0:	0801fc28 	.word	0x0801fc28
 8003ce4:	0801fc38 	.word	0x0801fc38
 8003ce8:	20000438 	.word	0x20000438
 8003cec:	20000010 	.word	0x20000010
 8003cf0:	0801fc50 	.word	0x0801fc50

08003cf4 <MRT_saveRTCTime>:


/*
 * Update and save the RTC time in external flash memory
 */
void MRT_saveRTCTime(void){
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
	MRT_updateExternalFlashBuffers();
 8003cf8:	f7ff fe14 	bl	8003924 <MRT_updateExternalFlashBuffers>

	//Write new RTC time to flash memory
	W25qxx_EraseSector(2);
 8003cfc:	2002      	movs	r0, #2
 8003cfe:	f000 fab3 	bl	8004268 <W25qxx_EraseSector>
	W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003d02:	2303      	movs	r3, #3
 8003d04:	2200      	movs	r2, #0
 8003d06:	2102      	movs	r1, #2
 8003d08:	4802      	ldr	r0, [pc, #8]	; (8003d14 <MRT_saveRTCTime+0x20>)
 8003d0a:	f000 fbf7 	bl	80044fc <W25qxx_WriteSector>
}
 8003d0e:	bf00      	nop
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	200067b8 	.word	0x200067b8

08003d18 <MRT_getAltitude>:

/*
 * Gets the altitude using temperature, pressure and sea-level pressure
 *https://www.mide.com/air-pressure-at-altitude-calculator
 */
float MRT_getAltitude(float pressure){
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	ed87 0a01 	vstr	s0, [r7, #4]
	return BASE_HEIGHT+(SEA_LEVEL_TEMPERATURE/-0.0065)*(pow(pressure/SEA_LEVEL_PRESSURE,(-R*-0.0065/(go*M)))-1);
 8003d22:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d26:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003da8 <MRT_getAltitude+0x90>
 8003d2a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003d2e:	ee16 0a90 	vmov	r0, s13
 8003d32:	f7fc fc19 	bl	8000568 <__aeabi_f2d>
 8003d36:	4602      	mov	r2, r0
 8003d38:	460b      	mov	r3, r1
 8003d3a:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8003d98 <MRT_getAltitude+0x80>
 8003d3e:	ec43 2b10 	vmov	d0, r2, r3
 8003d42:	f015 fc13 	bl	801956c <pow>
 8003d46:	ec51 0b10 	vmov	r0, r1, d0
 8003d4a:	f04f 0200 	mov.w	r2, #0
 8003d4e:	4b17      	ldr	r3, [pc, #92]	; (8003dac <MRT_getAltitude+0x94>)
 8003d50:	f7fc faaa 	bl	80002a8 <__aeabi_dsub>
 8003d54:	4602      	mov	r2, r0
 8003d56:	460b      	mov	r3, r1
 8003d58:	4610      	mov	r0, r2
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	a310      	add	r3, pc, #64	; (adr r3, 8003da0 <MRT_getAltitude+0x88>)
 8003d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d62:	f7fc fc59 	bl	8000618 <__aeabi_dmul>
 8003d66:	4602      	mov	r2, r0
 8003d68:	460b      	mov	r3, r1
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	f04f 0200 	mov.w	r2, #0
 8003d72:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <MRT_getAltitude+0x98>)
 8003d74:	f7fc fa9a 	bl	80002ac <__adddf3>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4610      	mov	r0, r2
 8003d7e:	4619      	mov	r1, r3
 8003d80:	f7fc ff42 	bl	8000c08 <__aeabi_d2f>
 8003d84:	4603      	mov	r3, r0
 8003d86:	ee07 3a90 	vmov	s15, r3
}
 8003d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	f3af 8000 	nop.w
 8003d98:	b537afba 	.word	0xb537afba
 8003d9c:	3fc85a8b 	.word	0x3fc85a8b
 8003da0:	76276276 	.word	0x76276276
 8003da4:	c0e481c2 	.word	0xc0e481c2
 8003da8:	447d8000 	.word	0x447d8000
 8003dac:	3ff00000 	.word	0x3ff00000
 8003db0:	40590000 	.word	0x40590000

08003db4 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af02      	add	r7, sp, #8
 8003dba:	4603      	mov	r3, r0
 8003dbc:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8003dbe:	f107 020f 	add.w	r2, r7, #15
 8003dc2:	1df9      	adds	r1, r7, #7
 8003dc4:	2364      	movs	r3, #100	; 0x64
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	2301      	movs	r3, #1
 8003dca:	4804      	ldr	r0, [pc, #16]	; (8003ddc <W25qxx_Spi+0x28>)
 8003dcc:	f009 fa2e 	bl	800d22c <HAL_SPI_TransmitReceive>
	return ret;
 8003dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	20005fbc 	.word	0x20005fbc

08003de0 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8003de6:	2300      	movs	r3, #0
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	2300      	movs	r3, #0
 8003dec:	60bb      	str	r3, [r7, #8]
 8003dee:	2300      	movs	r3, #0
 8003df0:	607b      	str	r3, [r7, #4]
 8003df2:	2300      	movs	r3, #0
 8003df4:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003df6:	2200      	movs	r2, #0
 8003df8:	2140      	movs	r1, #64	; 0x40
 8003dfa:	4813      	ldr	r0, [pc, #76]	; (8003e48 <W25qxx_ReadID+0x68>)
 8003dfc:	f005 f856 	bl	8008eac <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8003e00:	209f      	movs	r0, #159	; 0x9f
 8003e02:	f7ff ffd7 	bl	8003db4 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003e06:	20a5      	movs	r0, #165	; 0xa5
 8003e08:	f7ff ffd4 	bl	8003db4 <W25qxx_Spi>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003e10:	20a5      	movs	r0, #165	; 0xa5
 8003e12:	f7ff ffcf 	bl	8003db4 <W25qxx_Spi>
 8003e16:	4603      	mov	r3, r0
 8003e18:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003e1a:	20a5      	movs	r0, #165	; 0xa5
 8003e1c:	f7ff ffca 	bl	8003db4 <W25qxx_Spi>
 8003e20:	4603      	mov	r3, r0
 8003e22:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003e24:	2201      	movs	r2, #1
 8003e26:	2140      	movs	r1, #64	; 0x40
 8003e28:	4807      	ldr	r0, [pc, #28]	; (8003e48 <W25qxx_ReadID+0x68>)
 8003e2a:	f005 f83f 	bl	8008eac <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	041a      	lsls	r2, r3, #16
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	021b      	lsls	r3, r3, #8
 8003e36:	4313      	orrs	r3, r2
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]
	return Temp;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40020c00 	.word	0x40020c00

08003e4c <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8003e4c:	b590      	push	{r4, r7, lr}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003e52:	2200      	movs	r2, #0
 8003e54:	2140      	movs	r1, #64	; 0x40
 8003e56:	4816      	ldr	r0, [pc, #88]	; (8003eb0 <W25qxx_ReadUniqID+0x64>)
 8003e58:	f005 f828 	bl	8008eac <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8003e5c:	204b      	movs	r0, #75	; 0x4b
 8003e5e:	f7ff ffa9 	bl	8003db4 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003e62:	2300      	movs	r3, #0
 8003e64:	71fb      	strb	r3, [r7, #7]
 8003e66:	e005      	b.n	8003e74 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003e68:	20a5      	movs	r0, #165	; 0xa5
 8003e6a:	f7ff ffa3 	bl	8003db4 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003e6e:	79fb      	ldrb	r3, [r7, #7]
 8003e70:	3301      	adds	r3, #1
 8003e72:	71fb      	strb	r3, [r7, #7]
 8003e74:	79fb      	ldrb	r3, [r7, #7]
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	d9f6      	bls.n	8003e68 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	71bb      	strb	r3, [r7, #6]
 8003e7e:	e00b      	b.n	8003e98 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003e80:	79bc      	ldrb	r4, [r7, #6]
 8003e82:	20a5      	movs	r0, #165	; 0xa5
 8003e84:	f7ff ff96 	bl	8003db4 <W25qxx_Spi>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	4b09      	ldr	r3, [pc, #36]	; (8003eb4 <W25qxx_ReadUniqID+0x68>)
 8003e8e:	4423      	add	r3, r4
 8003e90:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8003e92:	79bb      	ldrb	r3, [r7, #6]
 8003e94:	3301      	adds	r3, #1
 8003e96:	71bb      	strb	r3, [r7, #6]
 8003e98:	79bb      	ldrb	r3, [r7, #6]
 8003e9a:	2b07      	cmp	r3, #7
 8003e9c:	d9f0      	bls.n	8003e80 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	2140      	movs	r1, #64	; 0x40
 8003ea2:	4803      	ldr	r0, [pc, #12]	; (8003eb0 <W25qxx_ReadUniqID+0x64>)
 8003ea4:	f005 f802 	bl	8008eac <HAL_GPIO_WritePin>
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd90      	pop	{r4, r7, pc}
 8003eb0:	40020c00 	.word	0x40020c00
 8003eb4:	20006db8 	.word	0x20006db8

08003eb8 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	2140      	movs	r1, #64	; 0x40
 8003ec0:	4807      	ldr	r0, [pc, #28]	; (8003ee0 <W25qxx_WriteEnable+0x28>)
 8003ec2:	f004 fff3 	bl	8008eac <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8003ec6:	2006      	movs	r0, #6
 8003ec8:	f7ff ff74 	bl	8003db4 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003ecc:	2201      	movs	r2, #1
 8003ece:	2140      	movs	r1, #64	; 0x40
 8003ed0:	4803      	ldr	r0, [pc, #12]	; (8003ee0 <W25qxx_WriteEnable+0x28>)
 8003ed2:	f004 ffeb 	bl	8008eac <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8003ed6:	2001      	movs	r0, #1
 8003ed8:	f011 fb93 	bl	8015602 <osDelay>
}
 8003edc:	bf00      	nop
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40020c00 	.word	0x40020c00

08003ee4 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	2140      	movs	r1, #64	; 0x40
 8003ef6:	481c      	ldr	r0, [pc, #112]	; (8003f68 <W25qxx_ReadStatusRegister+0x84>)
 8003ef8:	f004 ffd8 	bl	8008eac <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8003efc:	79fb      	ldrb	r3, [r7, #7]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d10c      	bne.n	8003f1c <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8003f02:	2005      	movs	r0, #5
 8003f04:	f7ff ff56 	bl	8003db4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003f08:	20a5      	movs	r0, #165	; 0xa5
 8003f0a:	f7ff ff53 	bl	8003db4 <W25qxx_Spi>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8003f12:	4a16      	ldr	r2, [pc, #88]	; (8003f6c <W25qxx_ReadStatusRegister+0x88>)
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
 8003f16:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8003f1a:	e01b      	b.n	8003f54 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8003f1c:	79fb      	ldrb	r3, [r7, #7]
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d10c      	bne.n	8003f3c <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8003f22:	2035      	movs	r0, #53	; 0x35
 8003f24:	f7ff ff46 	bl	8003db4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003f28:	20a5      	movs	r0, #165	; 0xa5
 8003f2a:	f7ff ff43 	bl	8003db4 <W25qxx_Spi>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8003f32:	4a0e      	ldr	r2, [pc, #56]	; (8003f6c <W25qxx_ReadStatusRegister+0x88>)
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
 8003f36:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8003f3a:	e00b      	b.n	8003f54 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8003f3c:	2015      	movs	r0, #21
 8003f3e:	f7ff ff39 	bl	8003db4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003f42:	20a5      	movs	r0, #165	; 0xa5
 8003f44:	f7ff ff36 	bl	8003db4 <W25qxx_Spi>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8003f4c:	4a07      	ldr	r2, [pc, #28]	; (8003f6c <W25qxx_ReadStatusRegister+0x88>)
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
 8003f50:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003f54:	2201      	movs	r2, #1
 8003f56:	2140      	movs	r1, #64	; 0x40
 8003f58:	4803      	ldr	r0, [pc, #12]	; (8003f68 <W25qxx_ReadStatusRegister+0x84>)
 8003f5a:	f004 ffa7 	bl	8008eac <HAL_GPIO_WritePin>
	return status;
 8003f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	40020c00 	.word	0x40020c00
 8003f6c:	20006db8 	.word	0x20006db8

08003f70 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8003f74:	2001      	movs	r0, #1
 8003f76:	f011 fb44 	bl	8015602 <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2140      	movs	r1, #64	; 0x40
 8003f7e:	480f      	ldr	r0, [pc, #60]	; (8003fbc <W25qxx_WaitForWriteEnd+0x4c>)
 8003f80:	f004 ff94 	bl	8008eac <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8003f84:	2005      	movs	r0, #5
 8003f86:	f7ff ff15 	bl	8003db4 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003f8a:	20a5      	movs	r0, #165	; 0xa5
 8003f8c:	f7ff ff12 	bl	8003db4 <W25qxx_Spi>
 8003f90:	4603      	mov	r3, r0
 8003f92:	461a      	mov	r2, r3
 8003f94:	4b0a      	ldr	r3, [pc, #40]	; (8003fc0 <W25qxx_WaitForWriteEnd+0x50>)
 8003f96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8003f9a:	2001      	movs	r0, #1
 8003f9c:	f011 fb31 	bl	8015602 <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8003fa0:	4b07      	ldr	r3, [pc, #28]	; (8003fc0 <W25qxx_WaitForWriteEnd+0x50>)
 8003fa2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1ed      	bne.n	8003f8a <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003fae:	2201      	movs	r2, #1
 8003fb0:	2140      	movs	r1, #64	; 0x40
 8003fb2:	4802      	ldr	r0, [pc, #8]	; (8003fbc <W25qxx_WaitForWriteEnd+0x4c>)
 8003fb4:	f004 ff7a 	bl	8008eac <HAL_GPIO_WritePin>
}
 8003fb8:	bf00      	nop
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40020c00 	.word	0x40020c00
 8003fc0:	20006db8 	.word	0x20006db8

08003fc4 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8003fca:	4b90      	ldr	r3, [pc, #576]	; (800420c <W25qxx_Init+0x248>)
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8003fd2:	e002      	b.n	8003fda <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8003fd4:	2001      	movs	r0, #1
 8003fd6:	f011 fb14 	bl	8015602 <osDelay>
	while (HAL_GetTick() < 100)
 8003fda:	f004 f9ed 	bl	80083b8 <HAL_GetTick>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b63      	cmp	r3, #99	; 0x63
 8003fe2:	d9f7      	bls.n	8003fd4 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	2140      	movs	r1, #64	; 0x40
 8003fe8:	4889      	ldr	r0, [pc, #548]	; (8004210 <W25qxx_Init+0x24c>)
 8003fea:	f004 ff5f 	bl	8008eac <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8003fee:	2064      	movs	r0, #100	; 0x64
 8003ff0:	f011 fb07 	bl	8015602 <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 8003ff4:	4887      	ldr	r0, [pc, #540]	; (8004214 <W25qxx_Init+0x250>)
 8003ff6:	f017 fb7b 	bl	801b6f0 <puts>
#endif
	id = W25qxx_ReadID();
 8003ffa:	f7ff fef1 	bl	8003de0 <W25qxx_ReadID>
 8003ffe:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	4885      	ldr	r0, [pc, #532]	; (8004218 <W25qxx_Init+0x254>)
 8004004:	f017 faee 	bl	801b5e4 <iprintf>
#endif
	switch (id & 0x000000FF)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	b2db      	uxtb	r3, r3
 800400c:	3b11      	subs	r3, #17
 800400e:	2b0f      	cmp	r3, #15
 8004010:	f200 808b 	bhi.w	800412a <W25qxx_Init+0x166>
 8004014:	a201      	add	r2, pc, #4	; (adr r2, 800401c <W25qxx_Init+0x58>)
 8004016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401a:	bf00      	nop
 800401c:	08004117 	.word	0x08004117
 8004020:	08004103 	.word	0x08004103
 8004024:	080040ef 	.word	0x080040ef
 8004028:	080040db 	.word	0x080040db
 800402c:	080040c7 	.word	0x080040c7
 8004030:	080040b3 	.word	0x080040b3
 8004034:	0800409f 	.word	0x0800409f
 8004038:	08004089 	.word	0x08004089
 800403c:	08004073 	.word	0x08004073
 8004040:	0800412b 	.word	0x0800412b
 8004044:	0800412b 	.word	0x0800412b
 8004048:	0800412b 	.word	0x0800412b
 800404c:	0800412b 	.word	0x0800412b
 8004050:	0800412b 	.word	0x0800412b
 8004054:	0800412b 	.word	0x0800412b
 8004058:	0800405d 	.word	0x0800405d
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 800405c:	4b6b      	ldr	r3, [pc, #428]	; (800420c <W25qxx_Init+0x248>)
 800405e:	220a      	movs	r2, #10
 8004060:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8004062:	4b6a      	ldr	r3, [pc, #424]	; (800420c <W25qxx_Init+0x248>)
 8004064:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004068:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 800406a:	486c      	ldr	r0, [pc, #432]	; (800421c <W25qxx_Init+0x258>)
 800406c:	f017 fb40 	bl	801b6f0 <puts>
#endif
		break;
 8004070:	e064      	b.n	800413c <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8004072:	4b66      	ldr	r3, [pc, #408]	; (800420c <W25qxx_Init+0x248>)
 8004074:	2209      	movs	r2, #9
 8004076:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8004078:	4b64      	ldr	r3, [pc, #400]	; (800420c <W25qxx_Init+0x248>)
 800407a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800407e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 8004080:	4867      	ldr	r0, [pc, #412]	; (8004220 <W25qxx_Init+0x25c>)
 8004082:	f017 fb35 	bl	801b6f0 <puts>
#endif
		break;
 8004086:	e059      	b.n	800413c <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8004088:	4b60      	ldr	r3, [pc, #384]	; (800420c <W25qxx_Init+0x248>)
 800408a:	2208      	movs	r2, #8
 800408c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 800408e:	4b5f      	ldr	r3, [pc, #380]	; (800420c <W25qxx_Init+0x248>)
 8004090:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004094:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 8004096:	4863      	ldr	r0, [pc, #396]	; (8004224 <W25qxx_Init+0x260>)
 8004098:	f017 fb2a 	bl	801b6f0 <puts>
#endif
		break;
 800409c:	e04e      	b.n	800413c <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 800409e:	4b5b      	ldr	r3, [pc, #364]	; (800420c <W25qxx_Init+0x248>)
 80040a0:	2207      	movs	r2, #7
 80040a2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 80040a4:	4b59      	ldr	r3, [pc, #356]	; (800420c <W25qxx_Init+0x248>)
 80040a6:	2280      	movs	r2, #128	; 0x80
 80040a8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 80040aa:	485f      	ldr	r0, [pc, #380]	; (8004228 <W25qxx_Init+0x264>)
 80040ac:	f017 fb20 	bl	801b6f0 <puts>
#endif
		break;
 80040b0:	e044      	b.n	800413c <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 80040b2:	4b56      	ldr	r3, [pc, #344]	; (800420c <W25qxx_Init+0x248>)
 80040b4:	2206      	movs	r2, #6
 80040b6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 80040b8:	4b54      	ldr	r3, [pc, #336]	; (800420c <W25qxx_Init+0x248>)
 80040ba:	2240      	movs	r2, #64	; 0x40
 80040bc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 80040be:	485b      	ldr	r0, [pc, #364]	; (800422c <W25qxx_Init+0x268>)
 80040c0:	f017 fb16 	bl	801b6f0 <puts>
#endif
		break;
 80040c4:	e03a      	b.n	800413c <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 80040c6:	4b51      	ldr	r3, [pc, #324]	; (800420c <W25qxx_Init+0x248>)
 80040c8:	2205      	movs	r2, #5
 80040ca:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 80040cc:	4b4f      	ldr	r3, [pc, #316]	; (800420c <W25qxx_Init+0x248>)
 80040ce:	2220      	movs	r2, #32
 80040d0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 80040d2:	4857      	ldr	r0, [pc, #348]	; (8004230 <W25qxx_Init+0x26c>)
 80040d4:	f017 fb0c 	bl	801b6f0 <puts>
#endif
		break;
 80040d8:	e030      	b.n	800413c <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 80040da:	4b4c      	ldr	r3, [pc, #304]	; (800420c <W25qxx_Init+0x248>)
 80040dc:	2204      	movs	r2, #4
 80040de:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 80040e0:	4b4a      	ldr	r3, [pc, #296]	; (800420c <W25qxx_Init+0x248>)
 80040e2:	2210      	movs	r2, #16
 80040e4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 80040e6:	4853      	ldr	r0, [pc, #332]	; (8004234 <W25qxx_Init+0x270>)
 80040e8:	f017 fb02 	bl	801b6f0 <puts>
#endif
		break;
 80040ec:	e026      	b.n	800413c <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 80040ee:	4b47      	ldr	r3, [pc, #284]	; (800420c <W25qxx_Init+0x248>)
 80040f0:	2203      	movs	r2, #3
 80040f2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 80040f4:	4b45      	ldr	r3, [pc, #276]	; (800420c <W25qxx_Init+0x248>)
 80040f6:	2208      	movs	r2, #8
 80040f8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 80040fa:	484f      	ldr	r0, [pc, #316]	; (8004238 <W25qxx_Init+0x274>)
 80040fc:	f017 faf8 	bl	801b6f0 <puts>
#endif
		break;
 8004100:	e01c      	b.n	800413c <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8004102:	4b42      	ldr	r3, [pc, #264]	; (800420c <W25qxx_Init+0x248>)
 8004104:	2202      	movs	r2, #2
 8004106:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8004108:	4b40      	ldr	r3, [pc, #256]	; (800420c <W25qxx_Init+0x248>)
 800410a:	2204      	movs	r2, #4
 800410c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 800410e:	484b      	ldr	r0, [pc, #300]	; (800423c <W25qxx_Init+0x278>)
 8004110:	f017 faee 	bl	801b6f0 <puts>
#endif
		break;
 8004114:	e012      	b.n	800413c <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8004116:	4b3d      	ldr	r3, [pc, #244]	; (800420c <W25qxx_Init+0x248>)
 8004118:	2201      	movs	r2, #1
 800411a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 800411c:	4b3b      	ldr	r3, [pc, #236]	; (800420c <W25qxx_Init+0x248>)
 800411e:	2202      	movs	r2, #2
 8004120:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 8004122:	4847      	ldr	r0, [pc, #284]	; (8004240 <W25qxx_Init+0x27c>)
 8004124:	f017 fae4 	bl	801b6f0 <puts>
#endif
		break;
 8004128:	e008      	b.n	800413c <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 800412a:	4846      	ldr	r0, [pc, #280]	; (8004244 <W25qxx_Init+0x280>)
 800412c:	f017 fae0 	bl	801b6f0 <puts>
#endif
		w25qxx.Lock = 0;
 8004130:	4b36      	ldr	r3, [pc, #216]	; (800420c <W25qxx_Init+0x248>)
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8004138:	2300      	movs	r3, #0
 800413a:	e063      	b.n	8004204 <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 800413c:	4b33      	ldr	r3, [pc, #204]	; (800420c <W25qxx_Init+0x248>)
 800413e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004142:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8004144:	4b31      	ldr	r3, [pc, #196]	; (800420c <W25qxx_Init+0x248>)
 8004146:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800414a:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 800414c:	4b2f      	ldr	r3, [pc, #188]	; (800420c <W25qxx_Init+0x248>)
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	4a2e      	ldr	r2, [pc, #184]	; (800420c <W25qxx_Init+0x248>)
 8004154:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8004156:	4b2d      	ldr	r3, [pc, #180]	; (800420c <W25qxx_Init+0x248>)
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	4a2c      	ldr	r2, [pc, #176]	; (800420c <W25qxx_Init+0x248>)
 800415c:	6912      	ldr	r2, [r2, #16]
 800415e:	fb02 f303 	mul.w	r3, r2, r3
 8004162:	4a2a      	ldr	r2, [pc, #168]	; (800420c <W25qxx_Init+0x248>)
 8004164:	8952      	ldrh	r2, [r2, #10]
 8004166:	fbb3 f3f2 	udiv	r3, r3, r2
 800416a:	4a28      	ldr	r2, [pc, #160]	; (800420c <W25qxx_Init+0x248>)
 800416c:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 800416e:	4b27      	ldr	r3, [pc, #156]	; (800420c <W25qxx_Init+0x248>)
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	4a25      	ldr	r2, [pc, #148]	; (800420c <W25qxx_Init+0x248>)
 8004176:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8004178:	4b24      	ldr	r3, [pc, #144]	; (800420c <W25qxx_Init+0x248>)
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	4a23      	ldr	r2, [pc, #140]	; (800420c <W25qxx_Init+0x248>)
 800417e:	6912      	ldr	r2, [r2, #16]
 8004180:	fb02 f303 	mul.w	r3, r2, r3
 8004184:	0a9b      	lsrs	r3, r3, #10
 8004186:	4a21      	ldr	r2, [pc, #132]	; (800420c <W25qxx_Init+0x248>)
 8004188:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 800418a:	f7ff fe5f 	bl	8003e4c <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 800418e:	2001      	movs	r0, #1
 8004190:	f7ff fea8 	bl	8003ee4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8004194:	2002      	movs	r0, #2
 8004196:	f7ff fea5 	bl	8003ee4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 800419a:	2003      	movs	r0, #3
 800419c:	f7ff fea2 	bl	8003ee4 <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 80041a0:	4b1a      	ldr	r3, [pc, #104]	; (800420c <W25qxx_Init+0x248>)
 80041a2:	895b      	ldrh	r3, [r3, #10]
 80041a4:	4619      	mov	r1, r3
 80041a6:	4828      	ldr	r0, [pc, #160]	; (8004248 <W25qxx_Init+0x284>)
 80041a8:	f017 fa1c 	bl	801b5e4 <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 80041ac:	4b17      	ldr	r3, [pc, #92]	; (800420c <W25qxx_Init+0x248>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	4619      	mov	r1, r3
 80041b2:	4826      	ldr	r0, [pc, #152]	; (800424c <W25qxx_Init+0x288>)
 80041b4:	f017 fa16 	bl	801b5e4 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 80041b8:	4b14      	ldr	r3, [pc, #80]	; (800420c <W25qxx_Init+0x248>)
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	4619      	mov	r1, r3
 80041be:	4824      	ldr	r0, [pc, #144]	; (8004250 <W25qxx_Init+0x28c>)
 80041c0:	f017 fa10 	bl	801b5e4 <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 80041c4:	4b11      	ldr	r3, [pc, #68]	; (800420c <W25qxx_Init+0x248>)
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	4619      	mov	r1, r3
 80041ca:	4822      	ldr	r0, [pc, #136]	; (8004254 <W25qxx_Init+0x290>)
 80041cc:	f017 fa0a 	bl	801b5e4 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 80041d0:	4b0e      	ldr	r3, [pc, #56]	; (800420c <W25qxx_Init+0x248>)
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	4619      	mov	r1, r3
 80041d6:	4820      	ldr	r0, [pc, #128]	; (8004258 <W25qxx_Init+0x294>)
 80041d8:	f017 fa04 	bl	801b5e4 <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 80041dc:	4b0b      	ldr	r3, [pc, #44]	; (800420c <W25qxx_Init+0x248>)
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	4619      	mov	r1, r3
 80041e2:	481e      	ldr	r0, [pc, #120]	; (800425c <W25qxx_Init+0x298>)
 80041e4:	f017 f9fe 	bl	801b5e4 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 80041e8:	4b08      	ldr	r3, [pc, #32]	; (800420c <W25qxx_Init+0x248>)
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	4619      	mov	r1, r3
 80041ee:	481c      	ldr	r0, [pc, #112]	; (8004260 <W25qxx_Init+0x29c>)
 80041f0:	f017 f9f8 	bl	801b5e4 <iprintf>
	printf("w25qxx Init Done\r\n");
 80041f4:	481b      	ldr	r0, [pc, #108]	; (8004264 <W25qxx_Init+0x2a0>)
 80041f6:	f017 fa7b 	bl	801b6f0 <puts>
#endif
	w25qxx.Lock = 0;
 80041fa:	4b04      	ldr	r3, [pc, #16]	; (800420c <W25qxx_Init+0x248>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8004202:	2301      	movs	r3, #1
}
 8004204:	4618      	mov	r0, r3
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	20006db8 	.word	0x20006db8
 8004210:	40020c00 	.word	0x40020c00
 8004214:	0801fc60 	.word	0x0801fc60
 8004218:	0801fc78 	.word	0x0801fc78
 800421c:	0801fc8c 	.word	0x0801fc8c
 8004220:	0801fca4 	.word	0x0801fca4
 8004224:	0801fcbc 	.word	0x0801fcbc
 8004228:	0801fcd4 	.word	0x0801fcd4
 800422c:	0801fcec 	.word	0x0801fcec
 8004230:	0801fd04 	.word	0x0801fd04
 8004234:	0801fd1c 	.word	0x0801fd1c
 8004238:	0801fd34 	.word	0x0801fd34
 800423c:	0801fd4c 	.word	0x0801fd4c
 8004240:	0801fd64 	.word	0x0801fd64
 8004244:	0801fd7c 	.word	0x0801fd7c
 8004248:	0801fd90 	.word	0x0801fd90
 800424c:	0801fdb0 	.word	0x0801fdb0
 8004250:	0801fdc8 	.word	0x0801fdc8
 8004254:	0801fde8 	.word	0x0801fde8
 8004258:	0801fe04 	.word	0x0801fe04
 800425c:	0801fe24 	.word	0x0801fe24
 8004260:	0801fe40 	.word	0x0801fe40
 8004264:	0801fe60 	.word	0x0801fe60

08004268 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8004270:	e002      	b.n	8004278 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8004272:	2001      	movs	r0, #1
 8004274:	f011 f9c5 	bl	8015602 <osDelay>
	while (w25qxx.Lock == 1)
 8004278:	4b2d      	ldr	r3, [pc, #180]	; (8004330 <W25qxx_EraseSector+0xc8>)
 800427a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800427e:	2b01      	cmp	r3, #1
 8004280:	d0f7      	beq.n	8004272 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8004282:	4b2b      	ldr	r3, [pc, #172]	; (8004330 <W25qxx_EraseSector+0xc8>)
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 800428a:	f004 f895 	bl	80083b8 <HAL_GetTick>
 800428e:	60f8      	str	r0, [r7, #12]
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
 8004290:	6879      	ldr	r1, [r7, #4]
 8004292:	4828      	ldr	r0, [pc, #160]	; (8004334 <W25qxx_EraseSector+0xcc>)
 8004294:	f017 f9a6 	bl	801b5e4 <iprintf>
#endif
	W25qxx_WaitForWriteEnd();
 8004298:	f7ff fe6a 	bl	8003f70 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 800429c:	4b24      	ldr	r3, [pc, #144]	; (8004330 <W25qxx_EraseSector+0xc8>)
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	fb02 f303 	mul.w	r3, r2, r3
 80042a6:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 80042a8:	f7ff fe06 	bl	8003eb8 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80042ac:	2200      	movs	r2, #0
 80042ae:	2140      	movs	r1, #64	; 0x40
 80042b0:	4821      	ldr	r0, [pc, #132]	; (8004338 <W25qxx_EraseSector+0xd0>)
 80042b2:	f004 fdfb 	bl	8008eac <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80042b6:	4b1e      	ldr	r3, [pc, #120]	; (8004330 <W25qxx_EraseSector+0xc8>)
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b08      	cmp	r3, #8
 80042bc:	d909      	bls.n	80042d2 <W25qxx_EraseSector+0x6a>
	{
		W25qxx_Spi(0x21);
 80042be:	2021      	movs	r0, #33	; 0x21
 80042c0:	f7ff fd78 	bl	8003db4 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	0e1b      	lsrs	r3, r3, #24
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff fd72 	bl	8003db4 <W25qxx_Spi>
 80042d0:	e002      	b.n	80042d8 <W25qxx_EraseSector+0x70>
	}
	else
	{
		W25qxx_Spi(0x20);
 80042d2:	2020      	movs	r0, #32
 80042d4:	f7ff fd6e 	bl	8003db4 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	0c1b      	lsrs	r3, r3, #16
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff fd68 	bl	8003db4 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	0a1b      	lsrs	r3, r3, #8
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff fd62 	bl	8003db4 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff fd5d 	bl	8003db4 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80042fa:	2201      	movs	r2, #1
 80042fc:	2140      	movs	r1, #64	; 0x40
 80042fe:	480e      	ldr	r0, [pc, #56]	; (8004338 <W25qxx_EraseSector+0xd0>)
 8004300:	f004 fdd4 	bl	8008eac <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004304:	f7ff fe34 	bl	8003f70 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
 8004308:	f004 f856 	bl	80083b8 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	4619      	mov	r1, r3
 8004314:	4809      	ldr	r0, [pc, #36]	; (800433c <W25qxx_EraseSector+0xd4>)
 8004316:	f017 f965 	bl	801b5e4 <iprintf>
#endif
	W25qxx_Delay(1);
 800431a:	2001      	movs	r0, #1
 800431c:	f011 f971 	bl	8015602 <osDelay>
	w25qxx.Lock = 0;
 8004320:	4b03      	ldr	r3, [pc, #12]	; (8004330 <W25qxx_EraseSector+0xc8>)
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004328:	bf00      	nop
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	20006db8 	.word	0x20006db8
 8004334:	0801feb8 	.word	0x0801feb8
 8004338:	40020c00 	.word	0x40020c00
 800433c:	0801fedc 	.word	0x0801fedc

08004340 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8004348:	4b07      	ldr	r3, [pc, #28]	; (8004368 <W25qxx_SectorToPage+0x28>)
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	fb02 f303 	mul.w	r3, r2, r3
 8004352:	4a05      	ldr	r2, [pc, #20]	; (8004368 <W25qxx_SectorToPage+0x28>)
 8004354:	8952      	ldrh	r2, [r2, #10]
 8004356:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800435a:	4618      	mov	r0, r3
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	20006db8 	.word	0x20006db8

0800436c <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
 8004378:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800437a:	e002      	b.n	8004382 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 800437c:	2001      	movs	r0, #1
 800437e:	f011 f940 	bl	8015602 <osDelay>
	while (w25qxx.Lock == 1)
 8004382:	4b57      	ldr	r3, [pc, #348]	; (80044e0 <W25qxx_WritePage+0x174>)
 8004384:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004388:	2b01      	cmp	r3, #1
 800438a:	d0f7      	beq.n	800437c <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 800438c:	4b54      	ldr	r3, [pc, #336]	; (80044e0 <W25qxx_WritePage+0x174>)
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4413      	add	r3, r2
 800439a:	4a51      	ldr	r2, [pc, #324]	; (80044e0 <W25qxx_WritePage+0x174>)
 800439c:	8952      	ldrh	r2, [r2, #10]
 800439e:	4293      	cmp	r3, r2
 80043a0:	d802      	bhi.n	80043a8 <W25qxx_WritePage+0x3c>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d105      	bne.n	80043b4 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80043a8:	4b4d      	ldr	r3, [pc, #308]	; (80044e0 <W25qxx_WritePage+0x174>)
 80043aa:	895b      	ldrh	r3, [r3, #10]
 80043ac:	461a      	mov	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	4413      	add	r3, r2
 80043ba:	4a49      	ldr	r2, [pc, #292]	; (80044e0 <W25qxx_WritePage+0x174>)
 80043bc:	8952      	ldrh	r2, [r2, #10]
 80043be:	4293      	cmp	r3, r2
 80043c0:	d905      	bls.n	80043ce <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80043c2:	4b47      	ldr	r3, [pc, #284]	; (80044e0 <W25qxx_WritePage+0x174>)
 80043c4:	895b      	ldrh	r3, [r3, #10]
 80043c6:	461a      	mov	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	68b9      	ldr	r1, [r7, #8]
 80043d4:	4843      	ldr	r0, [pc, #268]	; (80044e4 <W25qxx_WritePage+0x178>)
 80043d6:	f017 f905 	bl	801b5e4 <iprintf>
	W25qxx_Delay(100);
 80043da:	2064      	movs	r0, #100	; 0x64
 80043dc:	f011 f911 	bl	8015602 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 80043e0:	f003 ffea 	bl	80083b8 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 80043e6:	f7ff fdc3 	bl	8003f70 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 80043ea:	f7ff fd65 	bl	8003eb8 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80043ee:	2200      	movs	r2, #0
 80043f0:	2140      	movs	r1, #64	; 0x40
 80043f2:	483d      	ldr	r0, [pc, #244]	; (80044e8 <W25qxx_WritePage+0x17c>)
 80043f4:	f004 fd5a 	bl	8008eac <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 80043f8:	4b39      	ldr	r3, [pc, #228]	; (80044e0 <W25qxx_WritePage+0x174>)
 80043fa:	895b      	ldrh	r3, [r3, #10]
 80043fc:	461a      	mov	r2, r3
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	fb03 f302 	mul.w	r3, r3, r2
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	4413      	add	r3, r2
 8004408:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 800440a:	4b35      	ldr	r3, [pc, #212]	; (80044e0 <W25qxx_WritePage+0x174>)
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	2b08      	cmp	r3, #8
 8004410:	d909      	bls.n	8004426 <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 8004412:	2012      	movs	r0, #18
 8004414:	f7ff fcce 	bl	8003db4 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	0e1b      	lsrs	r3, r3, #24
 800441c:	b2db      	uxtb	r3, r3
 800441e:	4618      	mov	r0, r3
 8004420:	f7ff fcc8 	bl	8003db4 <W25qxx_Spi>
 8004424:	e002      	b.n	800442c <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 8004426:	2002      	movs	r0, #2
 8004428:	f7ff fcc4 	bl	8003db4 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	0c1b      	lsrs	r3, r3, #16
 8004430:	b2db      	uxtb	r3, r3
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff fcbe 	bl	8003db4 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	0a1b      	lsrs	r3, r3, #8
 800443c:	b2db      	uxtb	r3, r3
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff fcb8 	bl	8003db4 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	b2db      	uxtb	r3, r3
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff fcb3 	bl	8003db4 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	b29a      	uxth	r2, r3
 8004452:	2364      	movs	r3, #100	; 0x64
 8004454:	68f9      	ldr	r1, [r7, #12]
 8004456:	4825      	ldr	r0, [pc, #148]	; (80044ec <W25qxx_WritePage+0x180>)
 8004458:	f008 fc9b 	bl	800cd92 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800445c:	2201      	movs	r2, #1
 800445e:	2140      	movs	r1, #64	; 0x40
 8004460:	4821      	ldr	r0, [pc, #132]	; (80044e8 <W25qxx_WritePage+0x17c>)
 8004462:	f004 fd23 	bl	8008eac <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004466:	f7ff fd83 	bl	8003f70 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 800446a:	f003 ffa5 	bl	80083b8 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 8004476:	2300      	movs	r3, #0
 8004478:	617b      	str	r3, [r7, #20]
 800447a:	e018      	b.n	80044ae <W25qxx_WritePage+0x142>
	{
		if ((i % 8 == 0) && (i > 2))
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	2b00      	cmp	r3, #0
 8004484:	d108      	bne.n	8004498 <W25qxx_WritePage+0x12c>
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2b02      	cmp	r3, #2
 800448a:	d905      	bls.n	8004498 <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 800448c:	4818      	ldr	r0, [pc, #96]	; (80044f0 <W25qxx_WritePage+0x184>)
 800448e:	f017 f92f 	bl	801b6f0 <puts>
			W25qxx_Delay(10);
 8004492:	200a      	movs	r0, #10
 8004494:	f011 f8b5 	bl	8015602 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	4413      	add	r3, r2
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	4619      	mov	r1, r3
 80044a2:	4814      	ldr	r0, [pc, #80]	; (80044f4 <W25qxx_WritePage+0x188>)
 80044a4:	f017 f89e 	bl	801b5e4 <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	3301      	adds	r3, #1
 80044ac:	617b      	str	r3, [r7, #20]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d3e2      	bcc.n	800447c <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 80044b6:	480e      	ldr	r0, [pc, #56]	; (80044f0 <W25qxx_WritePage+0x184>)
 80044b8:	f017 f91a 	bl	801b6f0 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 80044bc:	6939      	ldr	r1, [r7, #16]
 80044be:	480e      	ldr	r0, [pc, #56]	; (80044f8 <W25qxx_WritePage+0x18c>)
 80044c0:	f017 f890 	bl	801b5e4 <iprintf>
	W25qxx_Delay(100);
 80044c4:	2064      	movs	r0, #100	; 0x64
 80044c6:	f011 f89c 	bl	8015602 <osDelay>
#endif
	W25qxx_Delay(1);
 80044ca:	2001      	movs	r0, #1
 80044cc:	f011 f899 	bl	8015602 <osDelay>
	w25qxx.Lock = 0;
 80044d0:	4b03      	ldr	r3, [pc, #12]	; (80044e0 <W25qxx_WritePage+0x174>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80044d8:	bf00      	nop
 80044da:	3718      	adds	r7, #24
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	20006db8 	.word	0x20006db8
 80044e4:	08020140 	.word	0x08020140
 80044e8:	40020c00 	.word	0x40020c00
 80044ec:	20005fbc 	.word	0x20005fbc
 80044f0:	0802017c 	.word	0x0802017c
 80044f4:	08020180 	.word	0x08020180
 80044f8:	08020188 	.word	0x08020188

080044fc <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b088      	sub	sp, #32
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
 8004508:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 800450a:	4b36      	ldr	r3, [pc, #216]	; (80045e4 <W25qxx_WriteSector+0xe8>)
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d802      	bhi.n	800451a <W25qxx_WriteSector+0x1e>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d102      	bne.n	8004520 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 800451a:	4b32      	ldr	r3, [pc, #200]	; (80045e4 <W25qxx_WriteSector+0xe8>)
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	68b9      	ldr	r1, [r7, #8]
 8004526:	4830      	ldr	r0, [pc, #192]	; (80045e8 <W25qxx_WriteSector+0xec>)
 8004528:	f017 f85c 	bl	801b5e4 <iprintf>
	W25qxx_Delay(100);
 800452c:	2064      	movs	r0, #100	; 0x64
 800452e:	f011 f868 	bl	8015602 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004532:	4b2c      	ldr	r3, [pc, #176]	; (80045e4 <W25qxx_WriteSector+0xe8>)
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	429a      	cmp	r2, r3
 800453a:	d306      	bcc.n	800454a <W25qxx_WriteSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
 800453c:	482b      	ldr	r0, [pc, #172]	; (80045ec <W25qxx_WriteSector+0xf0>)
 800453e:	f017 f8d7 	bl	801b6f0 <puts>
		W25qxx_Delay(100);
 8004542:	2064      	movs	r0, #100	; 0x64
 8004544:	f011 f85d 	bl	8015602 <osDelay>
#endif
		return;
 8004548:	e048      	b.n	80045dc <W25qxx_WriteSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	441a      	add	r2, r3
 8004550:	4b24      	ldr	r3, [pc, #144]	; (80045e4 <W25qxx_WriteSector+0xe8>)
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	429a      	cmp	r2, r3
 8004556:	d905      	bls.n	8004564 <W25qxx_WriteSector+0x68>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8004558:	4b22      	ldr	r3, [pc, #136]	; (80045e4 <W25qxx_WriteSector+0xe8>)
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	61bb      	str	r3, [r7, #24]
 8004562:	e001      	b.n	8004568 <W25qxx_WriteSector+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004568:	68b8      	ldr	r0, [r7, #8]
 800456a:	f7ff fee9 	bl	8004340 <W25qxx_SectorToPage>
 800456e:	4602      	mov	r2, r0
 8004570:	4b1c      	ldr	r3, [pc, #112]	; (80045e4 <W25qxx_WriteSector+0xe8>)
 8004572:	895b      	ldrh	r3, [r3, #10]
 8004574:	4619      	mov	r1, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	fbb3 f3f1 	udiv	r3, r3, r1
 800457c:	4413      	add	r3, r2
 800457e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004580:	4b18      	ldr	r3, [pc, #96]	; (80045e4 <W25qxx_WriteSector+0xe8>)
 8004582:	895b      	ldrh	r3, [r3, #10]
 8004584:	461a      	mov	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	fbb3 f1f2 	udiv	r1, r3, r2
 800458c:	fb02 f201 	mul.w	r2, r2, r1
 8004590:	1a9b      	subs	r3, r3, r2
 8004592:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	69f9      	ldr	r1, [r7, #28]
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f7ff fee6 	bl	800436c <W25qxx_WritePage>
		StartPage++;
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	3301      	adds	r3, #1
 80045a4:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 80045a6:	4b0f      	ldr	r3, [pc, #60]	; (80045e4 <W25qxx_WriteSector+0xe8>)
 80045a8:	895b      	ldrh	r3, [r3, #10]
 80045aa:	461a      	mov	r2, r3
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	1a9a      	subs	r2, r3, r2
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	4413      	add	r3, r2
 80045b4:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80045b6:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <W25qxx_WriteSector+0xe8>)
 80045b8:	895b      	ldrh	r3, [r3, #10]
 80045ba:	461a      	mov	r2, r3
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	4413      	add	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80045c6:	2300      	movs	r3, #0
 80045c8:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	dce1      	bgt.n	8004594 <W25qxx_WriteSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
 80045d0:	4807      	ldr	r0, [pc, #28]	; (80045f0 <W25qxx_WriteSector+0xf4>)
 80045d2:	f017 f88d 	bl	801b6f0 <puts>
	W25qxx_Delay(100);
 80045d6:	2064      	movs	r0, #100	; 0x64
 80045d8:	f011 f813 	bl	8015602 <osDelay>
#endif
}
 80045dc:	3720      	adds	r7, #32
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	20006db8 	.word	0x20006db8
 80045e8:	080201ac 	.word	0x080201ac
 80045ec:	080201ec 	.word	0x080201ec
 80045f0:	0802020c 	.word	0x0802020c

080045f4 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
 8004600:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8004602:	e002      	b.n	800460a <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8004604:	2001      	movs	r0, #1
 8004606:	f010 fffc 	bl	8015602 <osDelay>
	while (w25qxx.Lock == 1)
 800460a:	4b54      	ldr	r3, [pc, #336]	; (800475c <W25qxx_ReadPage+0x168>)
 800460c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004610:	2b01      	cmp	r3, #1
 8004612:	d0f7      	beq.n	8004604 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8004614:	4b51      	ldr	r3, [pc, #324]	; (800475c <W25qxx_ReadPage+0x168>)
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 800461c:	4b4f      	ldr	r3, [pc, #316]	; (800475c <W25qxx_ReadPage+0x168>)
 800461e:	895b      	ldrh	r3, [r3, #10]
 8004620:	461a      	mov	r2, r3
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	4293      	cmp	r3, r2
 8004626:	d802      	bhi.n	800462e <W25qxx_ReadPage+0x3a>
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d102      	bne.n	8004634 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 800462e:	4b4b      	ldr	r3, [pc, #300]	; (800475c <W25qxx_ReadPage+0x168>)
 8004630:	895b      	ldrh	r3, [r3, #10]
 8004632:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	4413      	add	r3, r2
 800463a:	4a48      	ldr	r2, [pc, #288]	; (800475c <W25qxx_ReadPage+0x168>)
 800463c:	8952      	ldrh	r2, [r2, #10]
 800463e:	4293      	cmp	r3, r2
 8004640:	d905      	bls.n	800464e <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004642:	4b46      	ldr	r3, [pc, #280]	; (800475c <W25qxx_ReadPage+0x168>)
 8004644:	895b      	ldrh	r3, [r3, #10]
 8004646:	461a      	mov	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	68b9      	ldr	r1, [r7, #8]
 8004654:	4842      	ldr	r0, [pc, #264]	; (8004760 <W25qxx_ReadPage+0x16c>)
 8004656:	f016 ffc5 	bl	801b5e4 <iprintf>
	W25qxx_Delay(100);
 800465a:	2064      	movs	r0, #100	; 0x64
 800465c:	f010 ffd1 	bl	8015602 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8004660:	f003 feaa 	bl	80083b8 <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8004666:	4b3d      	ldr	r3, [pc, #244]	; (800475c <W25qxx_ReadPage+0x168>)
 8004668:	895b      	ldrh	r3, [r3, #10]
 800466a:	461a      	mov	r2, r3
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	fb03 f302 	mul.w	r3, r3, r2
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	4413      	add	r3, r2
 8004676:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004678:	2200      	movs	r2, #0
 800467a:	2140      	movs	r1, #64	; 0x40
 800467c:	4839      	ldr	r0, [pc, #228]	; (8004764 <W25qxx_ReadPage+0x170>)
 800467e:	f004 fc15 	bl	8008eac <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004682:	4b36      	ldr	r3, [pc, #216]	; (800475c <W25qxx_ReadPage+0x168>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2b08      	cmp	r3, #8
 8004688:	d909      	bls.n	800469e <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 800468a:	200c      	movs	r0, #12
 800468c:	f7ff fb92 	bl	8003db4 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	0e1b      	lsrs	r3, r3, #24
 8004694:	b2db      	uxtb	r3, r3
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff fb8c 	bl	8003db4 <W25qxx_Spi>
 800469c:	e002      	b.n	80046a4 <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 800469e:	200b      	movs	r0, #11
 80046a0:	f7ff fb88 	bl	8003db4 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	0c1b      	lsrs	r3, r3, #16
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7ff fb82 	bl	8003db4 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	0a1b      	lsrs	r3, r3, #8
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff fb7c 	bl	8003db4 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff fb77 	bl	8003db4 <W25qxx_Spi>
	W25qxx_Spi(0);
 80046c6:	2000      	movs	r0, #0
 80046c8:	f7ff fb74 	bl	8003db4 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	2364      	movs	r3, #100	; 0x64
 80046d2:	68f9      	ldr	r1, [r7, #12]
 80046d4:	4824      	ldr	r0, [pc, #144]	; (8004768 <W25qxx_ReadPage+0x174>)
 80046d6:	f008 fc98 	bl	800d00a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80046da:	2201      	movs	r2, #1
 80046dc:	2140      	movs	r1, #64	; 0x40
 80046de:	4821      	ldr	r0, [pc, #132]	; (8004764 <W25qxx_ReadPage+0x170>)
 80046e0:	f004 fbe4 	bl	8008eac <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 80046e4:	f003 fe68 	bl	80083b8 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 80046f0:	2300      	movs	r3, #0
 80046f2:	617b      	str	r3, [r7, #20]
 80046f4:	e018      	b.n	8004728 <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d108      	bne.n	8004712 <W25qxx_ReadPage+0x11e>
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	2b02      	cmp	r3, #2
 8004704:	d905      	bls.n	8004712 <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 8004706:	4819      	ldr	r0, [pc, #100]	; (800476c <W25qxx_ReadPage+0x178>)
 8004708:	f016 fff2 	bl	801b6f0 <puts>
			W25qxx_Delay(10);
 800470c:	200a      	movs	r0, #10
 800470e:	f010 ff78 	bl	8015602 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	4413      	add	r3, r2
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	4619      	mov	r1, r3
 800471c:	4814      	ldr	r0, [pc, #80]	; (8004770 <W25qxx_ReadPage+0x17c>)
 800471e:	f016 ff61 	bl	801b5e4 <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	3301      	adds	r3, #1
 8004726:	617b      	str	r3, [r7, #20]
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d3e2      	bcc.n	80046f6 <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 8004730:	480e      	ldr	r0, [pc, #56]	; (800476c <W25qxx_ReadPage+0x178>)
 8004732:	f016 ffdd 	bl	801b6f0 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 8004736:	6939      	ldr	r1, [r7, #16]
 8004738:	480e      	ldr	r0, [pc, #56]	; (8004774 <W25qxx_ReadPage+0x180>)
 800473a:	f016 ff53 	bl	801b5e4 <iprintf>
	W25qxx_Delay(100);
 800473e:	2064      	movs	r0, #100	; 0x64
 8004740:	f010 ff5f 	bl	8015602 <osDelay>
#endif
	W25qxx_Delay(1);
 8004744:	2001      	movs	r0, #1
 8004746:	f010 ff5c 	bl	8015602 <osDelay>
	w25qxx.Lock = 0;
 800474a:	4b04      	ldr	r3, [pc, #16]	; (800475c <W25qxx_ReadPage+0x168>)
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004752:	bf00      	nop
 8004754:	3718      	adds	r7, #24
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	20006db8 	.word	0x20006db8
 8004760:	08020358 	.word	0x08020358
 8004764:	40020c00 	.word	0x40020c00
 8004768:	20005fbc 	.word	0x20005fbc
 800476c:	0802017c 	.word	0x0802017c
 8004770:	08020180 	.word	0x08020180
 8004774:	08020394 	.word	0x08020394

08004778 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
 8004784:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8004786:	4b36      	ldr	r3, [pc, #216]	; (8004860 <W25qxx_ReadSector+0xe8>)
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d802      	bhi.n	8004796 <W25qxx_ReadSector+0x1e>
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d102      	bne.n	800479c <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8004796:	4b32      	ldr	r3, [pc, #200]	; (8004860 <W25qxx_ReadSector+0xe8>)
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	68b9      	ldr	r1, [r7, #8]
 80047a2:	4830      	ldr	r0, [pc, #192]	; (8004864 <W25qxx_ReadSector+0xec>)
 80047a4:	f016 ff1e 	bl	801b5e4 <iprintf>
	W25qxx_Delay(100);
 80047a8:	2064      	movs	r0, #100	; 0x64
 80047aa:	f010 ff2a 	bl	8015602 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80047ae:	4b2c      	ldr	r3, [pc, #176]	; (8004860 <W25qxx_ReadSector+0xe8>)
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d306      	bcc.n	80047c6 <W25qxx_ReadSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
 80047b8:	482b      	ldr	r0, [pc, #172]	; (8004868 <W25qxx_ReadSector+0xf0>)
 80047ba:	f016 ff99 	bl	801b6f0 <puts>
		W25qxx_Delay(100);
 80047be:	2064      	movs	r0, #100	; 0x64
 80047c0:	f010 ff1f 	bl	8015602 <osDelay>
#endif
		return;
 80047c4:	e048      	b.n	8004858 <W25qxx_ReadSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	441a      	add	r2, r3
 80047cc:	4b24      	ldr	r3, [pc, #144]	; (8004860 <W25qxx_ReadSector+0xe8>)
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d905      	bls.n	80047e0 <W25qxx_ReadSector+0x68>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 80047d4:	4b22      	ldr	r3, [pc, #136]	; (8004860 <W25qxx_ReadSector+0xe8>)
 80047d6:	691a      	ldr	r2, [r3, #16]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	61bb      	str	r3, [r7, #24]
 80047de:	e001      	b.n	80047e4 <W25qxx_ReadSector+0x6c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80047e4:	68b8      	ldr	r0, [r7, #8]
 80047e6:	f7ff fdab 	bl	8004340 <W25qxx_SectorToPage>
 80047ea:	4602      	mov	r2, r0
 80047ec:	4b1c      	ldr	r3, [pc, #112]	; (8004860 <W25qxx_ReadSector+0xe8>)
 80047ee:	895b      	ldrh	r3, [r3, #10]
 80047f0:	4619      	mov	r1, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80047f8:	4413      	add	r3, r2
 80047fa:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80047fc:	4b18      	ldr	r3, [pc, #96]	; (8004860 <W25qxx_ReadSector+0xe8>)
 80047fe:	895b      	ldrh	r3, [r3, #10]
 8004800:	461a      	mov	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	fbb3 f1f2 	udiv	r1, r3, r2
 8004808:	fb02 f201 	mul.w	r2, r2, r1
 800480c:	1a9b      	subs	r3, r3, r2
 800480e:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	69f9      	ldr	r1, [r7, #28]
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f7ff feec 	bl	80045f4 <W25qxx_ReadPage>
		StartPage++;
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	3301      	adds	r3, #1
 8004820:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8004822:	4b0f      	ldr	r3, [pc, #60]	; (8004860 <W25qxx_ReadSector+0xe8>)
 8004824:	895b      	ldrh	r3, [r3, #10]
 8004826:	461a      	mov	r2, r3
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	1a9a      	subs	r2, r3, r2
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	4413      	add	r3, r2
 8004830:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8004832:	4b0b      	ldr	r3, [pc, #44]	; (8004860 <W25qxx_ReadSector+0xe8>)
 8004834:	895b      	ldrh	r3, [r3, #10]
 8004836:	461a      	mov	r2, r3
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	4413      	add	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8004842:	2300      	movs	r3, #0
 8004844:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	2b00      	cmp	r3, #0
 800484a:	dce1      	bgt.n	8004810 <W25qxx_ReadSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
 800484c:	4807      	ldr	r0, [pc, #28]	; (800486c <W25qxx_ReadSector+0xf4>)
 800484e:	f016 ff4f 	bl	801b6f0 <puts>
	W25qxx_Delay(100);
 8004852:	2064      	movs	r0, #100	; 0x64
 8004854:	f010 fed5 	bl	8015602 <osDelay>
#endif
}
 8004858:	3720      	adds	r7, #32
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	20006db8 	.word	0x20006db8
 8004864:	080203b8 	.word	0x080203b8
 8004868:	080203f8 	.word	0x080203f8
 800486c:	08020418 	.word	0x08020418

08004870 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	4611      	mov	r1, r2
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	4798      	blx	r3
 800488a:	4603      	mov	r3, r0
 800488c:	4618      	mov	r0, r3
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <_Z12ISBDCallbackv>:

bool ISBDCallback() __attribute__((weak));
void ISBDConsoleCallback(IridiumSBD *device, char c) __attribute__((weak));
void ISBDDiagsCallback(IridiumSBD *device, char c) __attribute__((weak));

bool ISBDCallback() { return true; }
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
 8004898:	2301      	movs	r3, #1
 800489a:	4618      	mov	r0, r3
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <_Z19ISBDConsoleCallbackP10IridiumSBDc>:
void ISBDConsoleCallback(IridiumSBD *device, char c) { }
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	460b      	mov	r3, r1
 80048ae:	70fb      	strb	r3, [r7, #3]
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <_Z17ISBDDiagsCallbackP10IridiumSBDc>:
void ISBDDiagsCallback(IridiumSBD *device, char c) { }
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	460b      	mov	r3, r1
 80048c6:	70fb      	strb	r3, [r7, #3]
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <_ZN10IridiumSBD5beginEv>:



// Power on the RockBLOCK or return from sleep
int IridiumSBD::begin()
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <_ZN10IridiumSBD5beginEv+0x16>
      return ISBD_REENTRANT;
 80048e6:	2309      	movs	r3, #9
 80048e8:	e01b      	b.n	8004922 <_ZN10IridiumSBD5beginEv+0x4e>

   this->reentrant = true;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   int ret = internalBegin();
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f9e6 	bl	8004cc4 <_ZN10IridiumSBD13internalBeginEv>
 80048f8:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

   // Absent a successful startup, keep the device turned off
   if (ret != ISBD_SUCCESS)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00b      	beq.n	8004920 <_ZN10IridiumSBD5beginEv+0x4c>
   {
      if (this->useSerial)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800490e:	2b00      	cmp	r3, #0
 8004910:	d002      	beq.n	8004918 <_ZN10IridiumSBD5beginEv+0x44>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 fd1c 	bl	8005350 <_ZN10IridiumSBD13endSerialPortEv>
      power(false);
 8004918:	2100      	movs	r1, #0
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 fc66 	bl	80051ec <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 8004920:	68fb      	ldr	r3, [r7, #12]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <_ZN10IridiumSBD5sleepEv>:
   return ret;
}

// Gracefully put device to lower power mode (if sleep pin provided)
int IridiumSBD::sleep()
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b084      	sub	sp, #16
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004938:	2b00      	cmp	r3, #0
 800493a:	d001      	beq.n	8004940 <_ZN10IridiumSBD5sleepEv+0x16>
      return ISBD_REENTRANT;
 800493c:	2309      	movs	r3, #9
 800493e:	e028      	b.n	8004992 <_ZN10IridiumSBD5sleepEv+0x68>

   if (this->useSerial && (this->sleepPin == -1))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004946:	2b00      	cmp	r3, #0
 8004948:	d007      	beq.n	800495a <_ZN10IridiumSBD5sleepEv+0x30>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004954:	d101      	bne.n	800495a <_ZN10IridiumSBD5sleepEv+0x30>
      return ISBD_NO_SLEEP_PIN;
 8004956:	230b      	movs	r3, #11
 8004958:	e01b      	b.n	8004992 <_ZN10IridiumSBD5sleepEv+0x68>

   this->reentrant = true;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   int ret = internalSleep();
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fb38 	bl	8004fd8 <_ZN10IridiumSBD13internalSleepEv>
 8004968:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

   if (ret == ISBD_SUCCESS)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10b      	bne.n	8004990 <_ZN10IridiumSBD5sleepEv+0x66>
   {
      if (this->useSerial)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800497e:	2b00      	cmp	r3, #0
 8004980:	d002      	beq.n	8004988 <_ZN10IridiumSBD5sleepEv+0x5e>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 fce4 	bl	8005350 <_ZN10IridiumSBD13endSerialPortEv>
      power(false); // power off
 8004988:	2100      	movs	r1, #0
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 fc2e 	bl	80051ec <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 8004990:	68fb      	ldr	r3, [r7, #12]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <_ZN10IridiumSBD16enableRingAlertsEb>:
{
   this->msstmWorkaroundRequested = useWorkAround;
}

void IridiumSBD::enableRingAlerts(bool enable) // true to enable SBDRING alerts and RING signal pin
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b082      	sub	sp, #8
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	460b      	mov	r3, r1
 80049a4:	70fb      	strb	r3, [r7, #3]
   this->ringAlertsEnabled = enable;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	78fa      	ldrb	r2, [r7, #3]
 80049aa:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
   if (enable)
 80049ae:	78fb      	ldrb	r3, [r7, #3]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00e      	beq.n	80049d2 <_ZN10IridiumSBD16enableRingAlertsEb+0x38>
   {
      this->ringAsserted = false;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
      if (!this->useSerial) // If we are using I2C, clear the ring indicator flag
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049c2:	f083 0301 	eor.w	r3, r3, #1
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d002      	beq.n	80049d2 <_ZN10IridiumSBD16enableRingAlertsEb+0x38>
      {
        clearRingIndicator();
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f923 	bl	8004c18 <_ZN10IridiumSBD18clearRingIndicatorEv>
      }
   }
}
 80049d2:	bf00      	nop
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
	...

080049dc <_ZN10IridiumSBD18getFirmwareVersionEPcj>:
   memcpy(&tm, localtime(&now), sizeof tm);
   return ISBD_SUCCESS;
}

int IridiumSBD::getFirmwareVersion(char *version, size_t bufferSize)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af02      	add	r7, sp, #8
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
   if (bufferSize < 8)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b07      	cmp	r3, #7
 80049ec:	d801      	bhi.n	80049f2 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x16>
      return ISBD_RX_OVERFLOW;
 80049ee:	2308      	movs	r3, #8
 80049f0:	e01e      	b.n	8004a30 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   send(F("AT+CGMR\r"));
 80049f2:	2301      	movs	r3, #1
 80049f4:	2201      	movs	r2, #1
 80049f6:	4910      	ldr	r1, [pc, #64]	; (8004a38 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x5c>)
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 fcb7 	bl	800536c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(version, bufferSize, "Call Processor Version: "))
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	4b0e      	ldr	r3, [pc, #56]	; (8004a3c <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x60>)
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	4b0e      	ldr	r3, [pc, #56]	; (8004a40 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x64>)
 8004a06:	68b9      	ldr	r1, [r7, #8]
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 faf7 	bl	8004ffc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	f083 0301 	eor.w	r3, r3, #1
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d009      	beq.n	8004a2e <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x52>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 fbb4 	bl	8005188 <_ZN10IridiumSBD9cancelledEv>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x4e>
 8004a26:	2304      	movs	r3, #4
 8004a28:	e002      	b.n	8004a30 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e000      	b.n	8004a30 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   return ISBD_SUCCESS;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	080204f4 	.word	0x080204f4
 8004a3c:	080204ec 	.word	0x080204ec
 8004a40:	08020500 	.word	0x08020500

08004a44 <_ZN10IridiumSBD21enableSuperCapChargerEb>:

void IridiumSBD::enableSuperCapCharger(bool enable)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the charger manually)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d004      	beq.n	8004a64 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x20>
  {
    diagprint(F("enableSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004a5a:	4918      	ldr	r1, [pc, #96]	; (8004abc <_ZN10IridiumSBD21enableSuperCapChargerEb+0x78>)
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 fd2d 	bl	80054bc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8004a62:	e028      	b.n	8004ab6 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x72>
  }

  // Enable/disable the supercapacitor charger by pulling its SHDN pin high/low
  check9603pins(); // Update IO_REGISTER
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f001 f80b 	bl	8005a80 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8004a6a:	78fb      	ldrb	r3, [r7, #3]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00b      	beq.n	8004a88 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x44>
  {
    IO_REGISTER |= IO_SHDN; // Set the SHDN bit
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	b2da      	uxtb	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004a86:	e00f      	b.n	8004aa8 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_SHDN; // Clear the SHDN bit
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004a8e:	b25a      	sxtb	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8004a96:	b25b      	sxtb	r3, r3
 8004a98:	43db      	mvns	r3, r3
 8004a9a:	b25b      	sxtb	r3, r3
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	b25b      	sxtb	r3, r3
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004aae:	4619      	mov	r1, r3
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f001 f820 	bl	8005af6 <_ZN10IridiumSBD11set9603pinsEh>
}
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	0802051c 	.word	0x0802051c

08004ac0 <_ZN10IridiumSBD20checkSuperCapChargerEv>:

bool IridiumSBD::checkSuperCapCharger()
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial (the user will have to check PGOOD manually)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d005      	beq.n	8004ade <_ZN10IridiumSBD20checkSuperCapChargerEv+0x1e>
  {
    diagprint(F("checkSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004ad2:	4912      	ldr	r1, [pc, #72]	; (8004b1c <_ZN10IridiumSBD20checkSuperCapChargerEv+0x5c>)
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 fcf1 	bl	80054bc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return(false);
 8004ada:	2300      	movs	r3, #0
 8004adc:	e01a      	b.n	8004b14 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x54>
  }

  // Check the status of the supercapacitor charger PGOOD pin
  check9603pins(); // Update IO_REGISTER
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 ffce 	bl	8005a80 <_ZN10IridiumSBD13check9603pinsEv>
  if (IO_REGISTER &= IO_PGOOD) // If the PGOOD bit is set, return true
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8004af0:	4013      	ands	r3, r2
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	bf14      	ite	ne
 8004b04:	2301      	movne	r3, #1
 8004b06:	2300      	moveq	r3, #0
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x52>
  {
    return(true);
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e000      	b.n	8004b14 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x54>
  }
  else
  {
    return(false);
 8004b12:	2300      	movs	r3, #0
  }
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3708      	adds	r7, #8
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	08020568 	.word	0x08020568

08004b20 <_ZN10IridiumSBD16enable9603NpowerEb>:

void IridiumSBD::enable9603Npower(bool enable)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	460b      	mov	r3, r1
 8004b2a:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N power manually)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d004      	beq.n	8004b40 <_ZN10IridiumSBD16enable9603NpowerEb+0x20>
  {
    diagprint(F("enable9603Npower is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004b36:	4918      	ldr	r1, [pc, #96]	; (8004b98 <_ZN10IridiumSBD16enable9603NpowerEb+0x78>)
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 fcbf 	bl	80054bc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8004b3e:	e028      	b.n	8004b92 <_ZN10IridiumSBD16enable9603NpowerEb+0x72>
  }

  // Enable/disable power to the 9603N by pulling PWR_EN high/low
  check9603pins(); // Update IO_REGISTER
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 ff9d 	bl	8005a80 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8004b46:	78fb      	ldrb	r3, [r7, #3]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00b      	beq.n	8004b64 <_ZN10IridiumSBD16enable9603NpowerEb+0x44>
  {
    IO_REGISTER |= IO_PWR_EN; // Set the PWR_EN bit
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004b62:	e00f      	b.n	8004b84 <_ZN10IridiumSBD16enable9603NpowerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_PWR_EN; // Clear the PWR_EN bit
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004b6a:	b25a      	sxtb	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8004b72:	b25b      	sxtb	r3, r3
 8004b74:	43db      	mvns	r3, r3
 8004b76:	b25b      	sxtb	r3, r3
 8004b78:	4013      	ands	r3, r2
 8004b7a:	b25b      	sxtb	r3, r3
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 ffb2 	bl	8005af6 <_ZN10IridiumSBD11set9603pinsEh>
}
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	080205b4 	.word	0x080205b4

08004b9c <_ZN10IridiumSBD10enable9603Eb>:

void IridiumSBD::enable9603(bool enable)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N manually)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d004      	beq.n	8004bbc <_ZN10IridiumSBD10enable9603Eb+0x20>
  {
    diagprint(F("enable9603 is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004bb2:	4918      	ldr	r1, [pc, #96]	; (8004c14 <_ZN10IridiumSBD10enable9603Eb+0x78>)
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 fc81 	bl	80054bc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8004bba:	e028      	b.n	8004c0e <_ZN10IridiumSBD10enable9603Eb+0x72>
  }

  // Enable/disable the 9603 by pulling ON_OFF high/low
  check9603pins(); // Update IO_REGISTER
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 ff5f 	bl	8005a80 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8004bc2:	78fb      	ldrb	r3, [r7, #3]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00b      	beq.n	8004be0 <_ZN10IridiumSBD10enable9603Eb+0x44>
  {
    IO_REGISTER |= IO_ON_OFF; // Set the ON_OFF bit
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004bde:	e00f      	b.n	8004c00 <_ZN10IridiumSBD10enable9603Eb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_ON_OFF; // Clear the ON_OFF bit
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004be6:	b25a      	sxtb	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8004bee:	b25b      	sxtb	r3, r3
 8004bf0:	43db      	mvns	r3, r3
 8004bf2:	b25b      	sxtb	r3, r3
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	b25b      	sxtb	r3, r3
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004c06:	4619      	mov	r1, r3
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 ff74 	bl	8005af6 <_ZN10IridiumSBD11set9603pinsEh>
}
 8004c0e:	3708      	adds	r7, #8
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	080205fc 	.word	0x080205fc

08004c18 <_ZN10IridiumSBD18clearRingIndicatorEv>:
    return(false);
  }
}

void IridiumSBD::clearRingIndicator()
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d004      	beq.n	8004c34 <_ZN10IridiumSBD18clearRingIndicatorEv+0x1c>
  {
    diagprint(F("clearRingIndicator is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004c2a:	4913      	ldr	r1, [pc, #76]	; (8004c78 <_ZN10IridiumSBD18clearRingIndicatorEv+0x60>)
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fc45 	bl	80054bc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8004c32:	e01d      	b.n	8004c70 <_ZN10IridiumSBD18clearRingIndicatorEv+0x58>
  }

  // Clear the 9603 RI flag
  check9603pins(); // Update IO_REGISTER
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 ff23 	bl	8005a80 <_ZN10IridiumSBD13check9603pinsEv>
  IO_REGISTER &= ~IO_RI; // Clear the RI bit
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004c40:	b25a      	sxtb	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8004c48:	b25b      	sxtb	r3, r3
 8004c4a:	43db      	mvns	r3, r3
 8004c4c:	b25b      	sxtb	r3, r3
 8004c4e:	4013      	ands	r3, r2
 8004c50:	b25b      	sxtb	r3, r3
 8004c52:	b2da      	uxtb	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  set9603pins(IO_REGISTER); // Update the pins
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004c60:	4619      	mov	r1, r3
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 ff47 	bl	8005af6 <_ZN10IridiumSBD11set9603pinsEh>
  this->ringAsserted = false; // Also clear the ringAsserted flag
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
}
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	080206cc 	.word	0x080206cc

08004c7c <_ZN10IridiumSBD11isConnectedEv>:

//Returns true if the I2C device is connected
//Always returns true for serial
//boolean IridiumSBD::isConnected() TODO
bool IridiumSBD::isConnected()
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
   if (this->useSerial) // If we are using Serial
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <_ZN10IridiumSBD11isConnectedEv+0x16>
   {
		return true;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e013      	b.n	8004cba <_ZN10IridiumSBD11isConnectedEv+0x3e>
   }
   else
   {
		wireport->beginTransmission((uint8_t)deviceaddress);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	4610      	mov	r0, r2
 8004ca0:	f001 fbee 	bl	8006480 <_ZN7TwoWire17beginTransmissionEh>
		return (wireport->endTransmission() == 0); // Check that the device ack's
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f001 fc33 	bl	8006514 <_ZN7TwoWire15endTransmissionEv>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	bf0c      	ite	eq
 8004cb4:	2301      	moveq	r3, #1
 8004cb6:	2300      	movne	r3, #0
 8004cb8:	b2db      	uxtb	r3, r3
   }
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
	...

08004cc4 <_ZN10IridiumSBD13internalBeginEv>:
/*
Private interface
*/

int IridiumSBD::internalBegin()
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b090      	sub	sp, #64	; 0x40
 8004cc8:	af02      	add	r7, sp, #8
 8004cca:	6078      	str	r0, [r7, #4]
   diagprint(F("Calling internalBegin\r\n"));
 8004ccc:	49b1      	ldr	r1, [pc, #708]	; (8004f94 <_ZN10IridiumSBD13internalBeginEv+0x2d0>)
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 fbf4 	bl	80054bc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (!this->asleep)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8004cda:	f083 0301 	eor.w	r3, r3, #1
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <_ZN10IridiumSBD13internalBeginEv+0x24>
      return ISBD_ALREADY_AWAKE;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e150      	b.n	8004f8a <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   if (!this->useSerial) // If we are using I2C
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cee:	f083 0301 	eor.w	r3, r3, #1
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d005      	beq.n	8004d04 <_ZN10IridiumSBD13internalBeginEv+0x40>
   {
      check9603pins(); // Update IO_REGISTER with the status of the 9603 pins
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 fec1 	bl	8005a80 <_ZN10IridiumSBD13check9603pinsEv>
      check9603data(); // Get any waiting 9603 serial data
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 fde6 	bl	80058d0 <_ZN10IridiumSBD13check9603dataEv>
   }

   power(true); // power on
 8004d04:	2101      	movs	r1, #1
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fa70 	bl	80051ec <_ZN10IridiumSBD5powerEb>

   bool modemAlive = false;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

   unsigned long startupTime = 500; //ms
 8004d12:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004d16:	62fb      	str	r3, [r7, #44]	; 0x2c
   for (unsigned long start = millis(); millis() - start < startupTime;)
 8004d18:	f003 fb4e 	bl	80083b8 <HAL_GetTick>
 8004d1c:	62b8      	str	r0, [r7, #40]	; 0x28
 8004d1e:	f003 fb4b 	bl	80083b8 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	bf8c      	ite	hi
 8004d2e:	2301      	movhi	r3, #1
 8004d30:	2300      	movls	r3, #0
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d007      	beq.n	8004d48 <_ZN10IridiumSBD13internalBeginEv+0x84>
      if (cancelled())
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 fa25 	bl	8005188 <_ZN10IridiumSBD9cancelledEv>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d0ec      	beq.n	8004d1e <_ZN10IridiumSBD13internalBeginEv+0x5a>
         return ISBD_CANCELLED;
 8004d44:	2304      	movs	r3, #4
 8004d46:	e120      	b.n	8004f8a <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   if (this->useSerial) // If we are using Serial
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <_ZN10IridiumSBD13internalBeginEv+0x94>
      beginSerialPort(); // Apollo3 v2.1 Serial fix - begin the Serial port 500ms after power(true)
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 faee 	bl	8005334 <_ZN10IridiumSBD15beginSerialPortEv>

   // Turn on modem and wait for a response from "AT" command to begin
   for (unsigned long start = millis(); !modemAlive && millis() - start < 1000UL * this->startupTimeout;)
 8004d58:	f003 fb2e 	bl	80083b8 <HAL_GetTick>
 8004d5c:	6278      	str	r0, [r7, #36]	; 0x24
 8004d5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004d62:	f083 0301 	eor.w	r3, r3, #1
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d010      	beq.n	8004d8e <_ZN10IridiumSBD13internalBeginEv+0xca>
 8004d6c:	f003 fb24 	bl	80083b8 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	1ad2      	subs	r2, r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d82:	fb03 f301 	mul.w	r3, r3, r1
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d201      	bcs.n	8004d8e <_ZN10IridiumSBD13internalBeginEv+0xca>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e000      	b.n	8004d90 <_ZN10IridiumSBD13internalBeginEv+0xcc>
 8004d8e:	2300      	movs	r3, #0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d018      	beq.n	8004dc6 <_ZN10IridiumSBD13internalBeginEv+0x102>
   {
      send(F("AT\r"));
 8004d94:	2301      	movs	r3, #1
 8004d96:	2201      	movs	r2, #1
 8004d98:	497f      	ldr	r1, [pc, #508]	; (8004f98 <_ZN10IridiumSBD13internalBeginEv+0x2d4>)
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 fae6 	bl	800536c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      modemAlive = waitForATResponse();
 8004da0:	4b7e      	ldr	r3, [pc, #504]	; (8004f9c <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	2300      	movs	r3, #0
 8004da6:	2200      	movs	r2, #0
 8004da8:	2100      	movs	r1, #0
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f926 	bl	8004ffc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8004db0:	4603      	mov	r3, r0
 8004db2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (cancelled())
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f9e6 	bl	8005188 <_ZN10IridiumSBD9cancelledEv>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0cd      	beq.n	8004d5e <_ZN10IridiumSBD13internalBeginEv+0x9a>
         return ISBD_CANCELLED;
 8004dc2:	2304      	movs	r3, #4
 8004dc4:	e0e1      	b.n	8004f8a <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   }

   if (!modemAlive)
 8004dc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004dca:	f083 0301 	eor.w	r3, r3, #1
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d005      	beq.n	8004de0 <_ZN10IridiumSBD13internalBeginEv+0x11c>
   {
      diagprint(F("No modem detected.\r\n"));
 8004dd4:	4972      	ldr	r1, [pc, #456]	; (8004fa0 <_ZN10IridiumSBD13internalBeginEv+0x2dc>)
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 fb70 	bl	80054bc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      return ISBD_NO_MODEM_DETECTED;
 8004ddc:	2305      	movs	r3, #5
 8004dde:	e0d4      	b.n	8004f8a <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   }

   // The usual initialization sequence
   const char *strings[3] = { "ATE1\r", "AT&D0\r", "AT&K0\r" };
 8004de0:	4a70      	ldr	r2, [pc, #448]	; (8004fa4 <_ZN10IridiumSBD13internalBeginEv+0x2e0>)
 8004de2:	f107 0310 	add.w	r3, r7, #16
 8004de6:	ca07      	ldmia	r2, {r0, r1, r2}
 8004de8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   for (int i=0; i<3; ++i)
 8004dec:	2300      	movs	r3, #0
 8004dee:	633b      	str	r3, [r7, #48]	; 0x30
 8004df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	dc26      	bgt.n	8004e44 <_ZN10IridiumSBD13internalBeginEv+0x180>
   {
      send(strings[i]);
 8004df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004dfe:	4413      	add	r3, r2
 8004e00:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8004e04:	4619      	mov	r1, r3
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fb0a 	bl	8005420 <_ZN10IridiumSBD4sendEPKc>
      if (!waitForATResponse())
 8004e0c:	4b63      	ldr	r3, [pc, #396]	; (8004f9c <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	2300      	movs	r3, #0
 8004e12:	2200      	movs	r2, #0
 8004e14:	2100      	movs	r1, #0
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f8f0 	bl	8004ffc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	f083 0301 	eor.w	r3, r3, #1
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d009      	beq.n	8004e3c <_ZN10IridiumSBD13internalBeginEv+0x178>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f9ad 	bl	8005188 <_ZN10IridiumSBD9cancelledEv>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <_ZN10IridiumSBD13internalBeginEv+0x174>
 8004e34:	2304      	movs	r3, #4
 8004e36:	e0a8      	b.n	8004f8a <_ZN10IridiumSBD13internalBeginEv+0x2c6>
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e0a6      	b.n	8004f8a <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   for (int i=0; i<3; ++i)
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3e:	3301      	adds	r3, #1
 8004e40:	633b      	str	r3, [r7, #48]	; 0x30
 8004e42:	e7d5      	b.n	8004df0 <_ZN10IridiumSBD13internalBeginEv+0x12c>
   }

   // Enable or disable RING alerts as requested by user
   // By default they are on if a RING pin was supplied on constructor
   diagprint(F("Ring alerts are")); diagprint(ringAlertsEnabled ? F("") : F(" NOT")); diagprint(F(" enabled.\r\n"));
 8004e44:	4958      	ldr	r1, [pc, #352]	; (8004fa8 <_ZN10IridiumSBD13internalBeginEv+0x2e4>)
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 fb38 	bl	80054bc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <_ZN10IridiumSBD13internalBeginEv+0x196>
 8004e56:	4b55      	ldr	r3, [pc, #340]	; (8004fac <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 8004e58:	e000      	b.n	8004e5c <_ZN10IridiumSBD13internalBeginEv+0x198>
 8004e5a:	4b55      	ldr	r3, [pc, #340]	; (8004fb0 <_ZN10IridiumSBD13internalBeginEv+0x2ec>)
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 fb2c 	bl	80054bc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8004e64:	4953      	ldr	r1, [pc, #332]	; (8004fb4 <_ZN10IridiumSBD13internalBeginEv+0x2f0>)
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fb28 	bl	80054bc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (ringAlertsEnabled) enableRingAlerts(true); // This will clear ringAsserted and the Ring Indicator flag
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d004      	beq.n	8004e80 <_ZN10IridiumSBD13internalBeginEv+0x1bc>
 8004e76:	2101      	movs	r1, #1
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7ff fd8e 	bl	800499a <_ZN10IridiumSBD16enableRingAlertsEb>
 8004e7e:	e00a      	b.n	8004e96 <_ZN10IridiumSBD13internalBeginEv+0x1d2>
   else {
	   if (!this->useSerial) clearRingIndicator(); // If ring alerts are not enabled and using I2C, make sure the Ring Indicator flag is clear
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e86:	f083 0301 	eor.w	r3, r3, #1
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d002      	beq.n	8004e96 <_ZN10IridiumSBD13internalBeginEv+0x1d2>
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f7ff fec1 	bl	8004c18 <_ZN10IridiumSBD18clearRingIndicatorEv>
   }

   send(ringAlertsEnabled ? F("AT+SBDMTA=1\r") : F("AT+SBDMTA=0\r"));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <_ZN10IridiumSBD13internalBeginEv+0x1e0>
 8004ea0:	4945      	ldr	r1, [pc, #276]	; (8004fb8 <_ZN10IridiumSBD13internalBeginEv+0x2f4>)
 8004ea2:	e000      	b.n	8004ea6 <_ZN10IridiumSBD13internalBeginEv+0x1e2>
 8004ea4:	4945      	ldr	r1, [pc, #276]	; (8004fbc <_ZN10IridiumSBD13internalBeginEv+0x2f8>)
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fa5e 	bl	800536c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse())
 8004eb0:	4b3a      	ldr	r3, [pc, #232]	; (8004f9c <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	2100      	movs	r1, #0
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f89e 	bl	8004ffc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	f083 0301 	eor.w	r3, r3, #1
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d009      	beq.n	8004ee0 <_ZN10IridiumSBD13internalBeginEv+0x21c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 f95b 	bl	8005188 <_ZN10IridiumSBD9cancelledEv>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <_ZN10IridiumSBD13internalBeginEv+0x218>
 8004ed8:	2304      	movs	r3, #4
 8004eda:	e056      	b.n	8004f8a <_ZN10IridiumSBD13internalBeginEv+0x2c6>
 8004edc:	2303      	movs	r3, #3
 8004ede:	e054      	b.n	8004f8a <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   // Decide whether the internal MSSTM workaround should be enforced on TX/RX
   // By default it is unless the firmware rev is >= TA13001
   char version[8];
   int ret = getFirmwareVersion(version, sizeof(version));
 8004ee0:	f107 0308 	add.w	r3, r7, #8
 8004ee4:	2208      	movs	r2, #8
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7ff fd77 	bl	80049dc <_ZN10IridiumSBD18getFirmwareVersionEPcj>
 8004eee:	6238      	str	r0, [r7, #32]
   if (ret != ISBD_SUCCESS)
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d008      	beq.n	8004f08 <_ZN10IridiumSBD13internalBeginEv+0x244>
   {
      diagprint(F("Unknown FW version\r\n"));
 8004ef6:	4932      	ldr	r1, [pc, #200]	; (8004fc0 <_ZN10IridiumSBD13internalBeginEv+0x2fc>)
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 fadf 	bl	80054bc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      msstmWorkaroundRequested = true;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8004f06:	e027      	b.n	8004f58 <_ZN10IridiumSBD13internalBeginEv+0x294>
   }
   else
   {
      diagprint(F("Firmware version is ")); diagprint(version); diagprint(F("\r\n"));
 8004f08:	492e      	ldr	r1, [pc, #184]	; (8004fc4 <_ZN10IridiumSBD13internalBeginEv+0x300>)
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fad6 	bl	80054bc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8004f10:	f107 0308 	add.w	r3, r7, #8
 8004f14:	4619      	mov	r1, r3
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 faf6 	bl	8005508 <_ZN10IridiumSBD9diagprintEPKc>
 8004f1c:	492a      	ldr	r1, [pc, #168]	; (8004fc8 <_ZN10IridiumSBD13internalBeginEv+0x304>)
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 facc 	bl	80054bc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (version[0] == 'T' && version[1] == 'A')
 8004f24:	7a3b      	ldrb	r3, [r7, #8]
 8004f26:	2b54      	cmp	r3, #84	; 0x54
 8004f28:	d116      	bne.n	8004f58 <_ZN10IridiumSBD13internalBeginEv+0x294>
 8004f2a:	7a7b      	ldrb	r3, [r7, #9]
 8004f2c:	2b41      	cmp	r3, #65	; 0x41
 8004f2e:	d113      	bne.n	8004f58 <_ZN10IridiumSBD13internalBeginEv+0x294>
      {
         unsigned long ver = strtoul(version + 2, NULL, 10);
 8004f30:	f107 0308 	add.w	r3, r7, #8
 8004f34:	3302      	adds	r3, #2
 8004f36:	220a      	movs	r2, #10
 8004f38:	2100      	movs	r1, #0
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f017 fc8a 	bl	801c854 <strtoul>
 8004f40:	61f8      	str	r0, [r7, #28]
         msstmWorkaroundRequested = ver < ISBD_MSSTM_WORKAROUND_FW_VER;
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	bf94      	ite	ls
 8004f4c:	2301      	movls	r3, #1
 8004f4e:	2300      	movhi	r3, #0
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
      }
   }
   diagprint(F("MSSTM workaround is")); diagprint(msstmWorkaroundRequested ? F("") : F(" NOT")); diagprint(F(" enforced.\r\n"));
 8004f58:	491c      	ldr	r1, [pc, #112]	; (8004fcc <_ZN10IridiumSBD13internalBeginEv+0x308>)
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 faae 	bl	80054bc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d001      	beq.n	8004f6e <_ZN10IridiumSBD13internalBeginEv+0x2aa>
 8004f6a:	4b10      	ldr	r3, [pc, #64]	; (8004fac <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 8004f6c:	e000      	b.n	8004f70 <_ZN10IridiumSBD13internalBeginEv+0x2ac>
 8004f6e:	4b10      	ldr	r3, [pc, #64]	; (8004fb0 <_ZN10IridiumSBD13internalBeginEv+0x2ec>)
 8004f70:	4619      	mov	r1, r3
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 faa2 	bl	80054bc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8004f78:	4915      	ldr	r1, [pc, #84]	; (8004fd0 <_ZN10IridiumSBD13internalBeginEv+0x30c>)
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 fa9e 	bl	80054bc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   // Done!
   diagprint(F("InternalBegin: success!\r\n"));
 8004f80:	4914      	ldr	r1, [pc, #80]	; (8004fd4 <_ZN10IridiumSBD13internalBeginEv+0x310>)
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 fa9a 	bl	80054bc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   return ISBD_SUCCESS;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3738      	adds	r7, #56	; 0x38
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	080207ec 	.word	0x080207ec
 8004f98:	08020804 	.word	0x08020804
 8004f9c:	080204ec 	.word	0x080204ec
 8004fa0:	08020808 	.word	0x08020808
 8004fa4:	080208dc 	.word	0x080208dc
 8004fa8:	08020820 	.word	0x08020820
 8004fac:	08020830 	.word	0x08020830
 8004fb0:	08020834 	.word	0x08020834
 8004fb4:	0802083c 	.word	0x0802083c
 8004fb8:	08020848 	.word	0x08020848
 8004fbc:	08020858 	.word	0x08020858
 8004fc0:	08020868 	.word	0x08020868
 8004fc4:	08020880 	.word	0x08020880
 8004fc8:	08020898 	.word	0x08020898
 8004fcc:	0802089c 	.word	0x0802089c
 8004fd0:	080208b0 	.word	0x080208b0
 8004fd4:	080208c0 	.word	0x080208c0

08004fd8 <_ZN10IridiumSBD13internalSleepEv>:
   okToProceed = isxdigit(msstmResponseBuf[0]);
   return ISBD_SUCCESS;
}

int IridiumSBD::internalSleep()
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
   if (this->asleep)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <_ZN10IridiumSBD13internalSleepEv+0x16>
      return ISBD_IS_ASLEEP;
 8004fea:	230a      	movs	r3, #10
 8004fec:	e000      	b.n	8004ff0 <_ZN10IridiumSBD13internalSleepEv+0x18>

   if (!waitForATResponse())
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
#endif

   return ISBD_SUCCESS;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>:

// Wait for response from previous AT command.  This process terminates when "terminator" string is seen or upon timeout.
// If "prompt" string is provided (example "+CSQ:"), then all characters following prompt up to the next CRLF are
// stored in response buffer for later parsing by caller.
bool IridiumSBD::waitForATResponse(char *response, int responseSize, const char *prompt, const char *terminator)
{
 8004ffc:	b590      	push	{r4, r7, lr}
 8004ffe:	b08b      	sub	sp, #44	; 0x2c
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
 8005008:	603b      	str	r3, [r7, #0]
   diagprint(F("Waiting for response "));
 800500a:	495d      	ldr	r1, [pc, #372]	; (8005180 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x184>)
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f000 fa55 	bl	80054bc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   diagprint(terminator);
 8005012:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 fa77 	bl	8005508 <_ZN10IridiumSBD9diagprintEPKc>
   HAL_UART_Transmit(&(this->uart),(uint8_t*) terminator, strlen(terminator), HAL_MAX_DELAY); //TODO doesn't print otherwise
 800501a:	68fc      	ldr	r4, [r7, #12]
 800501c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800501e:	f7fb f8e7 	bl	80001f0 <strlen>
 8005022:	4603      	mov	r3, r0
 8005024:	b29a      	uxth	r2, r3
 8005026:	f04f 33ff 	mov.w	r3, #4294967295
 800502a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800502c:	4620      	mov	r0, r4
 800502e:	f009 fa08 	bl	800e442 <HAL_UART_Transmit>
   diagprint(F("\r\n"));
 8005032:	4954      	ldr	r1, [pc, #336]	; (8005184 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x188>)
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f000 fa41 	bl	80054bc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (response)
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d005      	beq.n	800504c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x50>
      memset(response, 0, responseSize);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	461a      	mov	r2, r3
 8005044:	2100      	movs	r1, #0
 8005046:	68b8      	ldr	r0, [r7, #8]
 8005048:	f015 fba0 	bl	801a78c <memset>

   int matchPromptPos = 0; // Matches chars in prompt
 800504c:	2300      	movs	r3, #0
 800504e:	627b      	str	r3, [r7, #36]	; 0x24
   int matchTerminatorPos = 0; // Matches chars in terminator
 8005050:	2300      	movs	r3, #0
 8005052:	623b      	str	r3, [r7, #32]
   enum {LOOKING_FOR_PROMPT, GATHERING_RESPONSE, LOOKING_FOR_TERMINATOR};
   int promptState = prompt ? LOOKING_FOR_PROMPT : LOOKING_FOR_TERMINATOR;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x62>
 800505a:	2300      	movs	r3, #0
 800505c:	e000      	b.n	8005060 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x64>
 800505e:	2302      	movs	r3, #2
 8005060:	61fb      	str	r3, [r7, #28]
   //consoleprint(F("<< ")); //TODO If we comment out this it looks cleaner in the serial
   for (unsigned long start=millis(); millis() - start < 1000UL * atTimeout;)
 8005062:	f003 f9a9 	bl	80083b8 <HAL_GetTick>
 8005066:	61b8      	str	r0, [r7, #24]
 8005068:	f003 f9a6 	bl	80083b8 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	1ad2      	subs	r2, r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005078:	4619      	mov	r1, r3
 800507a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800507e:	fb03 f301 	mul.w	r3, r3, r1
 8005082:	429a      	cmp	r2, r3
 8005084:	bf34      	ite	cc
 8005086:	2301      	movcc	r3, #1
 8005088:	2300      	movcs	r3, #0
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	d072      	beq.n	8005176 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x17a>
   {
      if (cancelled())
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 f879 	bl	8005188 <_ZN10IridiumSBD9cancelledEv>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d001      	beq.n	80050a0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xa4>
         return false;
 800509c:	2300      	movs	r3, #0
 800509e:	e06b      	b.n	8005178 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x17c>

      while (filteredavailable() > 0)
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f000 fbb3 	bl	800580c <_ZN10IridiumSBD17filteredavailableEv>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	bfcc      	ite	gt
 80050ac:	2301      	movgt	r3, #1
 80050ae:	2300      	movle	r3, #0
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d0d8      	beq.n	8005068 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x6c>
      {
         char c = filteredread();
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f000 fbc4 	bl	8005844 <_ZN10IridiumSBD12filteredreadEv>
 80050bc:	4603      	mov	r3, r0
 80050be:	75fb      	strb	r3, [r7, #23]
         if (prompt)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d03b      	beq.n	800513e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x142>
         {
            switch (promptState)
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xd8>
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d01d      	beq.n	800510e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x112>
 80050d2:	e034      	b.n	800513e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x142>
            {
            case LOOKING_FOR_PROMPT:
               if (c == prompt[matchPromptPos])
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	4413      	add	r3, r2
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	7dfa      	ldrb	r2, [r7, #23]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d10b      	bne.n	80050fa <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xfe>
               {
                  ++matchPromptPos;
 80050e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e4:	3301      	adds	r3, #1
 80050e6:	627b      	str	r3, [r7, #36]	; 0x24
                  if (prompt[matchPromptPos] == '\0')
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	4413      	add	r3, r2
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d121      	bne.n	8005138 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x13c>
                     promptState = GATHERING_RESPONSE;
 80050f4:	2301      	movs	r3, #1
 80050f6:	61fb      	str	r3, [r7, #28]
               else
               {
                  matchPromptPos = c == prompt[0] ? 1 : 0;
               }

               break;
 80050f8:	e01e      	b.n	8005138 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x13c>
                  matchPromptPos = c == prompt[0] ? 1 : 0;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	7dfa      	ldrb	r2, [r7, #23]
 8005100:	429a      	cmp	r2, r3
 8005102:	d101      	bne.n	8005108 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x10c>
 8005104:	2301      	movs	r3, #1
 8005106:	e000      	b.n	800510a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x10e>
 8005108:	2300      	movs	r3, #0
 800510a:	627b      	str	r3, [r7, #36]	; 0x24
               break;
 800510c:	e014      	b.n	8005138 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x13c>
            case GATHERING_RESPONSE: // gathering response from end of prompt to first \r
               if (response)
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d013      	beq.n	800513c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x140>
               {
                  if (c == '\r' || responseSize < 2)
 8005114:	7dfb      	ldrb	r3, [r7, #23]
 8005116:	2b0d      	cmp	r3, #13
 8005118:	d002      	beq.n	8005120 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x124>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b01      	cmp	r3, #1
 800511e:	dc02      	bgt.n	8005126 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
                  {
                     promptState = LOOKING_FOR_TERMINATOR;
 8005120:	2302      	movs	r3, #2
 8005122:	61fb      	str	r3, [r7, #28]
                  {
                     *response++ = c;
                     responseSize--;
                  }
               }
               break;
 8005124:	e00a      	b.n	800513c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x140>
                     *response++ = c;
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	1c5a      	adds	r2, r3, #1
 800512a:	60ba      	str	r2, [r7, #8]
 800512c:	7dfa      	ldrb	r2, [r7, #23]
 800512e:	701a      	strb	r2, [r3, #0]
                     responseSize--;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	3b01      	subs	r3, #1
 8005134:	607b      	str	r3, [r7, #4]
               break;
 8005136:	e001      	b.n	800513c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x140>
               break;
 8005138:	bf00      	nop
 800513a:	e000      	b.n	800513e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x142>
               break;
 800513c:	bf00      	nop
            }
         }

         if (c == terminator[matchTerminatorPos])
 800513e:	6a3b      	ldr	r3, [r7, #32]
 8005140:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005142:	4413      	add	r3, r2
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	7dfa      	ldrb	r2, [r7, #23]
 8005148:	429a      	cmp	r2, r3
 800514a:	d10a      	bne.n	8005162 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x166>
         {
            ++matchTerminatorPos;
 800514c:	6a3b      	ldr	r3, [r7, #32]
 800514e:	3301      	adds	r3, #1
 8005150:	623b      	str	r3, [r7, #32]
            if (terminator[matchTerminatorPos] == '\0')
 8005152:	6a3b      	ldr	r3, [r7, #32]
 8005154:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005156:	4413      	add	r3, r2
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1a0      	bne.n	80050a0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xa4>
               return true;
 800515e:	2301      	movs	r3, #1
 8005160:	e00a      	b.n	8005178 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x17c>
         }
         else
         {
            matchTerminatorPos = c == terminator[0] ? 1 : 0;
 8005162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	7dfa      	ldrb	r2, [r7, #23]
 8005168:	429a      	cmp	r2, r3
 800516a:	d101      	bne.n	8005170 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x174>
 800516c:	2301      	movs	r3, #1
 800516e:	e000      	b.n	8005172 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x176>
 8005170:	2300      	movs	r3, #0
 8005172:	623b      	str	r3, [r7, #32]
      while (filteredavailable() > 0)
 8005174:	e794      	b.n	80050a0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xa4>
         }
      } // while (filteredavailable() > 0)
   } // timer loop
   return false;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	372c      	adds	r7, #44	; 0x2c
 800517c:	46bd      	mov	sp, r7
 800517e:	bd90      	pop	{r4, r7, pc}
 8005180:	08020a20 	.word	0x08020a20
 8005184:	08020898 	.word	0x08020898

08005188 <_ZN10IridiumSBD9cancelledEv>:

bool IridiumSBD::cancelled()
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
   if (this->useSerial)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005196:	2b00      	cmp	r3, #0
 8005198:	d019      	beq.n	80051ce <_ZN10IridiumSBD9cancelledEv+0x46>
   {
	   //TODO For some reason when using digitalRead here it didn't work so simply replaced with HAL function
	   //if ((ringPin != -1) && digitalRead(ringPin) == LOW)
	     if ((ringPin != -1) && HAL_GPIO_ReadPin(ringPin_GPIO_Port,ringPin_Pin) == LOW)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80051a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a4:	d008      	beq.n	80051b8 <_ZN10IridiumSBD9cancelledEv+0x30>
 80051a6:	2110      	movs	r1, #16
 80051a8:	480e      	ldr	r0, [pc, #56]	; (80051e4 <_ZN10IridiumSBD9cancelledEv+0x5c>)
 80051aa:	f003 fe67 	bl	8008e7c <HAL_GPIO_ReadPin>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d101      	bne.n	80051b8 <_ZN10IridiumSBD9cancelledEv+0x30>
 80051b4:	2301      	movs	r3, #1
 80051b6:	e000      	b.n	80051ba <_ZN10IridiumSBD9cancelledEv+0x32>
 80051b8:	2300      	movs	r3, #0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d007      	beq.n	80051ce <_ZN10IridiumSBD9cancelledEv+0x46>
	  {
         ringAsserted = true;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
		 diagprint(F("ringPin seen!\r\n"));
 80051c6:	4908      	ldr	r1, [pc, #32]	; (80051e8 <_ZN10IridiumSBD9cancelledEv+0x60>)
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f977 	bl	80054bc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
	  }
   }

   return !ISBDCallback();
 80051ce:	f7ff fb61 	bl	8004894 <_Z12ISBDCallbackv>
 80051d2:	4603      	mov	r3, r0
 80051d4:	f083 0301 	eor.w	r3, r3, #1
 80051d8:	b2db      	uxtb	r3, r3
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	40020800 	.word	0x40020800
 80051e8:	08020a38 	.word	0x08020a38

080051ec <_ZN10IridiumSBD5powerEb>:

   return rxOverflow ? ISBD_RX_OVERFLOW : ISBD_SUCCESS;
}

void IridiumSBD::power(bool on)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	460b      	mov	r3, r1
 80051f6:	70fb      	strb	r3, [r7, #3]
   this->asleep = !on;
 80051f8:	78fb      	ldrb	r3, [r7, #3]
 80051fa:	f083 0301 	eor.w	r3, r3, #1
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

   if (this->useSerial)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800520c:	2b00      	cmp	r3, #0
 800520e:	d011      	beq.n	8005234 <_ZN10IridiumSBD5powerEb+0x48>
   {
      if (this->sleepPin == -1)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521a:	d04c      	beq.n	80052b6 <_ZN10IridiumSBD5powerEb+0xca>
      {
         return;
      }
      else
      {
          if (this->sleepPinConfigured == false)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d106      	bne.n	8005234 <_ZN10IridiumSBD5powerEb+0x48>
          {
             configureSleepPin();
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f84e 	bl	80052c8 <_ZN10IridiumSBD17configureSleepPinEv>
             this->sleepPinConfigured = true;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
          }
      }
   }

   if (on)
 8005234:	78fb      	ldrb	r3, [r7, #3]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d018      	beq.n	800526c <_ZN10IridiumSBD5powerEb+0x80>
   {
      diagprint(F("Powering on modem...\r\n"));
 800523a:	4921      	ldr	r1, [pc, #132]	; (80052c0 <_ZN10IridiumSBD5powerEb+0xd4>)
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f93d 	bl	80054bc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005248:	2b00      	cmp	r3, #0
 800524a:	d004      	beq.n	8005256 <_ZN10IridiumSBD5powerEb+0x6a>
      {
         setSleepPin(HIGH); // HIGH = awake
 800524c:	2101      	movs	r1, #1
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f848 	bl	80052e4 <_ZN10IridiumSBD11setSleepPinEh>
 8005254:	e003      	b.n	800525e <_ZN10IridiumSBD5powerEb+0x72>
      }
      else
      {
         enable9603(true);
 8005256:	2101      	movs	r1, #1
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f7ff fc9f 	bl	8004b9c <_ZN10IridiumSBD10enable9603Eb>
      }
      lastPowerOnTime = millis();
 800525e:	f003 f8ab 	bl	80083b8 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800526a:	e025      	b.n	80052b8 <_ZN10IridiumSBD5powerEb+0xcc>
   }
   else
   {
      // Best Practices Guide suggests waiting at least 2 seconds
      // before powering off again
      unsigned long elapsed = millis() - lastPowerOnTime;
 800526c:	f003 f8a4 	bl	80083b8 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	60fb      	str	r3, [r7, #12]
      if (elapsed < 2000UL)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005282:	d205      	bcs.n	8005290 <_ZN10IridiumSBD5powerEb+0xa4>
         //delay(2000UL - elapsed); TODO
    	  HAL_Delay(2000UL - elapsed);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 800528a:	4618      	mov	r0, r3
 800528c:	f003 f8a0 	bl	80083d0 <HAL_Delay>

      diagprint(F("Powering off modem...\r\n"));
 8005290:	490c      	ldr	r1, [pc, #48]	; (80052c4 <_ZN10IridiumSBD5powerEb+0xd8>)
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f912 	bl	80054bc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d004      	beq.n	80052ac <_ZN10IridiumSBD5powerEb+0xc0>
      {
         setSleepPin(LOW); // LOW = asleep
 80052a2:	2100      	movs	r1, #0
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 f81d 	bl	80052e4 <_ZN10IridiumSBD11setSleepPinEh>
 80052aa:	e005      	b.n	80052b8 <_ZN10IridiumSBD5powerEb+0xcc>
      }
      else
      {
         enable9603(false);
 80052ac:	2100      	movs	r1, #0
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7ff fc74 	bl	8004b9c <_ZN10IridiumSBD10enable9603Eb>
 80052b4:	e000      	b.n	80052b8 <_ZN10IridiumSBD5powerEb+0xcc>
         return;
 80052b6:	bf00      	nop
      }
   }
}
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	08020a8c 	.word	0x08020a8c
 80052c4:	08020aa4 	.word	0x08020aa4

080052c8 <_ZN10IridiumSBD17configureSleepPinEv>:

void IridiumSBD::configureSleepPin()
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
	//pinMode(sleepPin, OUTPUT); // Make the sleep pin an output TODO (doesnt work with this)
   //pinMode(sleepPin, OUTPUT_PP); // Make the sleep pin an output
   diagprint(F("configureSleepPin: sleepPin configured\r\n"));
 80052d0:	4903      	ldr	r1, [pc, #12]	; (80052e0 <_ZN10IridiumSBD17configureSleepPinEv+0x18>)
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f8f2 	bl	80054bc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80052d8:	bf00      	nop
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	08020abc 	.word	0x08020abc

080052e4 <_ZN10IridiumSBD11setSleepPinEh>:

void IridiumSBD::setSleepPin(uint8_t enable)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	460b      	mov	r3, r1
 80052ee:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(sleepPin_GPIO_Port,sleepPin_Pin,GPIO_PIN_SET);
 80052f0:	2201      	movs	r2, #1
 80052f2:	2108      	movs	r1, #8
 80052f4:	480b      	ldr	r0, [pc, #44]	; (8005324 <_ZN10IridiumSBD11setSleepPinEh+0x40>)
 80052f6:	f003 fdd9 	bl	8008eac <HAL_GPIO_WritePin>
   //digitalWrite(this->sleepPin, enable); // HIGH = awake, LOW = asleep TODO
   diagprint(F("setSleepPin: sleepPin set "));
 80052fa:	490b      	ldr	r1, [pc, #44]	; (8005328 <_ZN10IridiumSBD11setSleepPinEh+0x44>)
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 f8dd 	bl	80054bc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   if (enable == HIGH)
 8005302:	78fb      	ldrb	r3, [r7, #3]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d104      	bne.n	8005312 <_ZN10IridiumSBD11setSleepPinEh+0x2e>
      diagprint(F("HIGH\r\n"));
 8005308:	4908      	ldr	r1, [pc, #32]	; (800532c <_ZN10IridiumSBD11setSleepPinEh+0x48>)
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f8d6 	bl	80054bc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   else
      diagprint(F("LOW\r\n"));
}
 8005310:	e003      	b.n	800531a <_ZN10IridiumSBD11setSleepPinEh+0x36>
      diagprint(F("LOW\r\n"));
 8005312:	4907      	ldr	r1, [pc, #28]	; (8005330 <_ZN10IridiumSBD11setSleepPinEh+0x4c>)
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f8d1 	bl	80054bc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 800531a:	bf00      	nop
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	40020800 	.word	0x40020800
 8005328:	08020ae8 	.word	0x08020ae8
 800532c:	08020b04 	.word	0x08020b04
 8005330:	08020b0c 	.word	0x08020b0c

08005334 <_ZN10IridiumSBD15beginSerialPortEv>:

void IridiumSBD::beginSerialPort()
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::beginSerialPort\r\n"));
 800533c:	4903      	ldr	r1, [pc, #12]	; (800534c <_ZN10IridiumSBD15beginSerialPortEv+0x18>)
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f8bc 	bl	80054bc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8005344:	bf00      	nop
 8005346:	3708      	adds	r7, #8
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	08020b14 	.word	0x08020b14

08005350 <_ZN10IridiumSBD13endSerialPortEv>:

void IridiumSBD::endSerialPort()
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::endSerialPort\r\n"));
 8005358:	4903      	ldr	r1, [pc, #12]	; (8005368 <_ZN10IridiumSBD13endSerialPortEv+0x18>)
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f8ae 	bl	80054bc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8005360:	bf00      	nop
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	08020b34 	.word	0x08020b34

0800536c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>:

void IridiumSBD::send(FlashString str, bool beginLine, bool endLine)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	4611      	mov	r1, r2
 8005378:	461a      	mov	r2, r3
 800537a:	460b      	mov	r3, r1
 800537c:	71fb      	strb	r3, [r7, #7]
 800537e:	4613      	mov	r3, r2
 8005380:	71bb      	strb	r3, [r7, #6]
   if (beginLine)
 8005382:	79fb      	ldrb	r3, [r7, #7]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d003      	beq.n	8005390 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x24>
      consoleprint(F(">> "));
 8005388:	4922      	ldr	r1, [pc, #136]	; (8005414 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xa8>)
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 f8de 	bl	800554c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 8005390:	68b9      	ldr	r1, [r7, #8]
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 f8da 	bl	800554c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (endLine)
 8005398:	79bb      	ldrb	r3, [r7, #6]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x3a>
      consoleprint(F("\r\n"));
 800539e:	491e      	ldr	r1, [pc, #120]	; (8005418 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xac>)
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f000 f8d3 	bl	800554c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d006      	beq.n	80053be <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x52>
   {
      stream->print(str);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053b4:	68b9      	ldr	r1, [r7, #8]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 ff96 	bl	80062e8 <_ZN5Print5printEPK19__FlashStringHelper>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 80053bc:	e025      	b.n	800540a <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x9e>
      wireport->beginTransmission((uint8_t)deviceaddress);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053c8:	4619      	mov	r1, r3
 80053ca:	4610      	mov	r0, r2
 80053cc:	f001 f858 	bl	8006480 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d4:	21ff      	movs	r1, #255	; 0xff
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7ff fa4a 	bl	8004870 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053e0:	68b9      	ldr	r1, [r7, #8]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 ff80 	bl	80062e8 <_ZN5Print5printEPK19__FlashStringHelper>
      if (wireport->endTransmission() != 0) //Release bus
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ec:	4618      	mov	r0, r3
 80053ee:	f001 f891 	bl	8006514 <_ZN7TwoWire15endTransmissionEv>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	bf14      	ite	ne
 80053f8:	2301      	movne	r3, #1
 80053fa:	2300      	moveq	r3, #0
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d003      	beq.n	800540a <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x9e>
         diagprint(F("I2C write was not successful!\r\n"));
 8005402:	4906      	ldr	r1, [pc, #24]	; (800541c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xb0>)
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 f859 	bl	80054bc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 800540a:	bf00      	nop
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	08020b50 	.word	0x08020b50
 8005418:	08020898 	.word	0x08020898
 800541c:	08020918 	.word	0x08020918

08005420 <_ZN10IridiumSBD4sendEPKc>:

void IridiumSBD::send(const char *str)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
   consoleprint(F(">> "));
 800542a:	4921      	ldr	r1, [pc, #132]	; (80054b0 <_ZN10IridiumSBD4sendEPKc+0x90>)
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f88d 	bl	800554c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 8005432:	6839      	ldr	r1, [r7, #0]
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f8af 	bl	8005598 <_ZN10IridiumSBD12consoleprintEPKc>
   consoleprint(F("\r\n"));
 800543a:	491e      	ldr	r1, [pc, #120]	; (80054b4 <_ZN10IridiumSBD4sendEPKc+0x94>)
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 f885 	bl	800554c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005448:	2b00      	cmp	r3, #0
 800544a:	d006      	beq.n	800545a <_ZN10IridiumSBD4sendEPKc+0x3a>
   {
      stream->print(str);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005450:	6839      	ldr	r1, [r7, #0]
 8005452:	4618      	mov	r0, r3
 8005454:	f000 ff56 	bl	8006304 <_ZN5Print5printEPKc>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8005458:	e025      	b.n	80054a6 <_ZN10IridiumSBD4sendEPKc+0x86>
      wireport->beginTransmission((uint8_t)deviceaddress);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005464:	4619      	mov	r1, r3
 8005466:	4610      	mov	r0, r2
 8005468:	f001 f80a 	bl	8006480 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005470:	21ff      	movs	r1, #255	; 0xff
 8005472:	4618      	mov	r0, r3
 8005474:	f7ff f9fc 	bl	8004870 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800547c:	6839      	ldr	r1, [r7, #0]
 800547e:	4618      	mov	r0, r3
 8005480:	f000 ff40 	bl	8006304 <_ZN5Print5printEPKc>
      if (wireport->endTransmission() != 0) //Release bus
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005488:	4618      	mov	r0, r3
 800548a:	f001 f843 	bl	8006514 <_ZN7TwoWire15endTransmissionEv>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	bf14      	ite	ne
 8005494:	2301      	movne	r3, #1
 8005496:	2300      	moveq	r3, #0
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <_ZN10IridiumSBD4sendEPKc+0x86>
         diagprint(F("I2C write was not successful!\r\n"));
 800549e:	4906      	ldr	r1, [pc, #24]	; (80054b8 <_ZN10IridiumSBD4sendEPKc+0x98>)
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f80b 	bl	80054bc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80054a6:	bf00      	nop
 80054a8:	3708      	adds	r7, #8
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	08020b50 	.word	0x08020b50
 80054b4:	08020898 	.word	0x08020898
 80054b8:	08020918 	.word	0x08020918

080054bc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>:
         diagprint(F("I2C write was not successful!\r\n"));
   }
}

void IridiumSBD::diagprint(FlashString str)
{
 80054bc:	b590      	push	{r4, r7, lr}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	1c5a      	adds	r2, r3, #1
 80054ce:	60fa      	str	r2, [r7, #12]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 80054d4:	7afb      	ldrb	r3, [r7, #11]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d005      	beq.n	80054e6 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0x2a>
      ISBDDiagsCallback(this, c);
 80054da:	7afb      	ldrb	r3, [r7, #11]
 80054dc:	4619      	mov	r1, r3
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7ff f9ec 	bl	80048bc <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   }
 80054e4:	e7f1      	b.n	80054ca <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 80054e6:	bf00      	nop

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen((const char*)str), HAL_MAX_DELAY);
 80054e8:	687c      	ldr	r4, [r7, #4]
 80054ea:	6838      	ldr	r0, [r7, #0]
 80054ec:	f7fa fe80 	bl	80001f0 <strlen>
 80054f0:	4603      	mov	r3, r0
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	f04f 33ff 	mov.w	r3, #4294967295
 80054f8:	6839      	ldr	r1, [r7, #0]
 80054fa:	4620      	mov	r0, r4
 80054fc:	f008 ffa1 	bl	800e442 <HAL_UART_Transmit>
}
 8005500:	bf00      	nop
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	bd90      	pop	{r4, r7, pc}

08005508 <_ZN10IridiumSBD9diagprintEPKc>:

void IridiumSBD::diagprint(const char *str)
{
 8005508:	b590      	push	{r4, r7, lr}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
   while (*str)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d008      	beq.n	800552c <_ZN10IridiumSBD9diagprintEPKc+0x24>
      ISBDDiagsCallback(this, *str++);
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	1c5a      	adds	r2, r3, #1
 800551e:	603a      	str	r2, [r7, #0]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	4619      	mov	r1, r3
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7ff f9c9 	bl	80048bc <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   while (*str)
 800552a:	e7f2      	b.n	8005512 <_ZN10IridiumSBD9diagprintEPKc+0xa>

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 800552c:	687c      	ldr	r4, [r7, #4]
 800552e:	6838      	ldr	r0, [r7, #0]
 8005530:	f7fa fe5e 	bl	80001f0 <strlen>
 8005534:	4603      	mov	r3, r0
 8005536:	b29a      	uxth	r2, r3
 8005538:	f04f 33ff 	mov.w	r3, #4294967295
 800553c:	6839      	ldr	r1, [r7, #0]
 800553e:	4620      	mov	r0, r4
 8005540:	f008 ff7f 	bl	800e442 <HAL_UART_Transmit>
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	bd90      	pop	{r4, r7, pc}

0800554c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>:
   diagprint(str); //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
}

void IridiumSBD::consoleprint(FlashString str)
{
 800554c:	b590      	push	{r4, r7, lr}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	1c5a      	adds	r2, r3, #1
 800555e:	60fa      	str	r2, [r7, #12]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 8005564:	7afb      	ldrb	r3, [r7, #11]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d005      	beq.n	8005576 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0x2a>
      ISBDConsoleCallback(this, c);
 800556a:	7afb      	ldrb	r3, [r7, #11]
 800556c:	4619      	mov	r1, r3
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7ff f998 	bl	80048a4 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   }
 8005574:	e7f1      	b.n	800555a <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 8005576:	bf00      	nop

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen((const char*) str), HAL_MAX_DELAY);
 8005578:	687c      	ldr	r4, [r7, #4]
 800557a:	6838      	ldr	r0, [r7, #0]
 800557c:	f7fa fe38 	bl	80001f0 <strlen>
 8005580:	4603      	mov	r3, r0
 8005582:	b29a      	uxth	r2, r3
 8005584:	f04f 33ff 	mov.w	r3, #4294967295
 8005588:	6839      	ldr	r1, [r7, #0]
 800558a:	4620      	mov	r0, r4
 800558c:	f008 ff59 	bl	800e442 <HAL_UART_Transmit>
}
 8005590:	bf00      	nop
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	bd90      	pop	{r4, r7, pc}

08005598 <_ZN10IridiumSBD12consoleprintEPKc>:

void IridiumSBD::consoleprint(const char *str)
{
 8005598:	b590      	push	{r4, r7, lr}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
   while (*str)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d008      	beq.n	80055bc <_ZN10IridiumSBD12consoleprintEPKc+0x24>
      ISBDConsoleCallback(this, *str++);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	603a      	str	r2, [r7, #0]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	4619      	mov	r1, r3
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7ff f975 	bl	80048a4 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   while (*str)
 80055ba:	e7f2      	b.n	80055a2 <_ZN10IridiumSBD12consoleprintEPKc+0xa>

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 80055bc:	687c      	ldr	r4, [r7, #4]
 80055be:	6838      	ldr	r0, [r7, #0]
 80055c0:	f7fa fe16 	bl	80001f0 <strlen>
 80055c4:	4603      	mov	r3, r0
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	f04f 33ff 	mov.w	r3, #4294967295
 80055cc:	6839      	ldr	r1, [r7, #0]
 80055ce:	4620      	mov	r0, r4
 80055d0:	f008 ff37 	bl	800e442 <HAL_UART_Transmit>
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd90      	pop	{r4, r7, pc}

080055dc <_ZN10IridiumSBD12consoleprintEc>:
   //consoleprint((const char*) str);
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
}

void IridiumSBD::consoleprint(char c)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	460b      	mov	r3, r1
 80055e6:	70fb      	strb	r3, [r7, #3]
   ISBDConsoleCallback(this, c);
 80055e8:	78fb      	ldrb	r3, [r7, #3]
 80055ea:	4619      	mov	r1, r3
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7ff f959 	bl	80048a4 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
}
 80055f2:	bf00      	nop
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
	...

080055fc <_ZN10IridiumSBD11SBDRINGSeenEv>:

void IridiumSBD::SBDRINGSeen()
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
   ringAsserted = true;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
   diagprint(F("SBDRING alert seen!\r\n"));
 800560c:	4903      	ldr	r1, [pc, #12]	; (800561c <_ZN10IridiumSBD11SBDRINGSeenEv+0x20>)
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7ff ff54 	bl	80054bc <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8005614:	bf00      	nop
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	08020b58 	.word	0x08020b58

08005620 <_ZN10IridiumSBD13filterSBDRINGEv>:
// Read characters until we find one that doesn't match SBDRING
// If nextChar is -1 it means we are still entertaining a possible
// match with SBDRING\r\n.  Once we find a mismatch, stuff it into
// nextChar.
void IridiumSBD::filterSBDRING()
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
   if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800562e:	f083 0301 	eor.w	r3, r3, #1
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b00      	cmp	r3, #0
 8005636:	d002      	beq.n	800563e <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f949 	bl	80058d0 <_ZN10IridiumSBD13check9603dataEv>
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00b      	beq.n	8005660 <_ZN10IridiumSBD13filterSBDRINGEv+0x40>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3308      	adds	r3, #8
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4610      	mov	r0, r2
 8005658:	4798      	blx	r3
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	dc0d      	bgt.n	800567c <_ZN10IridiumSBD13filterSBDRINGEv+0x5c>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005666:	f083 0301 	eor.w	r3, r3, #1
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00d      	beq.n	800568c <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 fa67 	bl	8005b44 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	dd07      	ble.n	800568c <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005686:	d101      	bne.n	800568c <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 8005688:	2301      	movs	r3, #1
 800568a:	e000      	b.n	800568e <_ZN10IridiumSBD13filterSBDRINGEv+0x6e>
 800568c:	2300      	movs	r3, #0
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 80b6 	beq.w	8005800 <_ZN10IridiumSBD13filterSBDRINGEv+0x1e0>
   {
      char c;
      if (this->useSerial)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00b      	beq.n	80056b6 <_ZN10IridiumSBD13filterSBDRINGEv+0x96>
      {
         c = stream->read();
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	330c      	adds	r3, #12
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4610      	mov	r0, r2
 80056ae:	4798      	blx	r3
 80056b0:	4603      	mov	r3, r0
 80056b2:	73fb      	strb	r3, [r7, #15]
 80056b4:	e004      	b.n	80056c0 <_ZN10IridiumSBD13filterSBDRINGEv+0xa0>
      }
      else
      {
         c = i2cSerRead();
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fa5e 	bl	8005b78 <_ZN10IridiumSBD10i2cSerReadEv>
 80056bc:	4603      	mov	r3, r0
 80056be:	73fb      	strb	r3, [r7, #15]
      }
      consoleprint(c);
 80056c0:	7bfb      	ldrb	r3, [r7, #15]
 80056c2:	4619      	mov	r1, r3
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7ff ff89 	bl	80055dc <_ZN10IridiumSBD12consoleprintEc>
      if (*head != 0 && c == *head)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 808d 	beq.w	80057f2 <_ZN10IridiumSBD13filterSBDRINGEv+0x1d2>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	7bfa      	ldrb	r2, [r7, #15]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	f040 8085 	bne.w	80057f2 <_ZN10IridiumSBD13filterSBDRINGEv+0x1d2>
      {
         ++head;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80056ee:	1c5a      	adds	r2, r3, #1
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
         if (*head == 0)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10d      	bne.n	800571e <_ZN10IridiumSBD13filterSBDRINGEv+0xfe>
         {
            SBDRINGSeen();
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f7ff ff7a 	bl	80055fc <_ZN10IridiumSBD11SBDRINGSeenEv>
            head = tail = SBDRING;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a3f      	ldr	r2, [pc, #252]	; (8005808 <_ZN10IridiumSBD13filterSBDRINGEv+0x1e8>)
 800570c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
            {
               --head;
               nextChar = c;
            }
         }
 800571c:	e06e      	b.n	80057fc <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
            for (unsigned long start = millis(); ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) && millis() - start < FILTERTIMEOUT; );
 800571e:	f002 fe4b 	bl	80083b8 <HAL_GetTick>
 8005722:	60b8      	str	r0, [r7, #8]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00b      	beq.n	8005746 <_ZN10IridiumSBD13filterSBDRINGEv+0x126>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3308      	adds	r3, #8
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4610      	mov	r0, r2
 800573e:	4798      	blx	r3
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00d      	beq.n	8005762 <_ZN10IridiumSBD13filterSBDRINGEv+0x142>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800574c:	f083 0301 	eor.w	r3, r3, #1
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00e      	beq.n	8005774 <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f9f4 	bl	8005b44 <_ZN10IridiumSBD15i2cSerAvailableEv>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d108      	bne.n	8005774 <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 8005762:	f002 fe29 	bl	80083b8 <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	2b09      	cmp	r3, #9
 800576e:	d801      	bhi.n	8005774 <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 8005770:	2301      	movs	r3, #1
 8005772:	e000      	b.n	8005776 <_ZN10IridiumSBD13filterSBDRINGEv+0x156>
 8005774:	2300      	movs	r3, #0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d000      	beq.n	800577c <_ZN10IridiumSBD13filterSBDRINGEv+0x15c>
 800577a:	e7d3      	b.n	8005724 <_ZN10IridiumSBD13filterSBDRINGEv+0x104>
            if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005782:	f083 0301 	eor.w	r3, r3, #1
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	d002      	beq.n	8005792 <_ZN10IridiumSBD13filterSBDRINGEv+0x172>
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f89f 	bl	80058d0 <_ZN10IridiumSBD13check9603dataEv>
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00b      	beq.n	80057b4 <_ZN10IridiumSBD13filterSBDRINGEv+0x194>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	3308      	adds	r3, #8
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4610      	mov	r0, r2
 80057ac:	4798      	blx	r3
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00d      	beq.n	80057d0 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b0>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057ba:	f083 0301 	eor.w	r3, r3, #1
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d007      	beq.n	80057d4 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b4>
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 f9bd 	bl	8005b44 <_ZN10IridiumSBD15i2cSerAvailableEv>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b4>
 80057d0:	2301      	movs	r3, #1
 80057d2:	e000      	b.n	80057d6 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b6>
 80057d4:	2300      	movs	r3, #0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d010      	beq.n	80057fc <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
               --head;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80057e0:	1e5a      	subs	r2, r3, #1
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
               nextChar = c;
 80057e8:	7bfa      	ldrb	r2, [r7, #15]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
         }
 80057f0:	e004      	b.n	80057fc <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
      }
      else
      {
         nextChar = c;
 80057f2:	7bfa      	ldrb	r2, [r7, #15]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80057fa:	e720      	b.n	800563e <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
         }
 80057fc:	bf00      	nop
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 80057fe:	e71e      	b.n	800563e <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
      }
   }
}
 8005800:	bf00      	nop
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	0802162c 	.word	0x0802162c

0800580c <_ZN10IridiumSBD17filteredavailableEv>:

const char IridiumSBD::SBDRING[] = "SBDRING\r\n";

int IridiumSBD::filteredavailable()
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f7ff ff03 	bl	8005620 <_ZN10IridiumSBD13filterSBDRINGEv>
   return head - tail + (nextChar != -1 ? 1 : 0);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	f8d2 20d8 	ldr.w	r2, [r2, #216]	; 0xd8
 800582e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005832:	d001      	beq.n	8005838 <_ZN10IridiumSBD17filteredavailableEv+0x2c>
 8005834:	2201      	movs	r2, #1
 8005836:	e000      	b.n	800583a <_ZN10IridiumSBD17filteredavailableEv+0x2e>
 8005838:	2200      	movs	r2, #0
 800583a:	4413      	add	r3, r2
}
 800583c:	4618      	mov	r0, r3
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <_ZN10IridiumSBD12filteredreadEv>:

int IridiumSBD::filteredread()
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f7ff fee7 	bl	8005620 <_ZN10IridiumSBD13filterSBDRINGEv>

   // Use up the queue first
   if (head > tail)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800585e:	429a      	cmp	r2, r3
 8005860:	d91c      	bls.n	800589c <_ZN10IridiumSBD12filteredreadEv+0x58>
   {
      char c = *tail++;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005868:	1c59      	adds	r1, r3, #1
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	f8c2 10d4 	str.w	r1, [r2, #212]	; 0xd4
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	73bb      	strb	r3, [r7, #14]
      if (head == tail)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005880:	429a      	cmp	r2, r3
 8005882:	d109      	bne.n	8005898 <_ZN10IridiumSBD12filteredreadEv+0x54>
         head = tail = SBDRING;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a11      	ldr	r2, [pc, #68]	; (80058cc <_ZN10IridiumSBD12filteredreadEv+0x88>)
 8005888:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
      return c;
 8005898:	7bbb      	ldrb	r3, [r7, #14]
 800589a:	e012      	b.n	80058c2 <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   // Then the "extra" char
   else if (nextChar != -1)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80058a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a6:	d00a      	beq.n	80058be <_ZN10IridiumSBD12filteredreadEv+0x7a>
   {
      char c = (char)nextChar;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80058ae:	73fb      	strb	r3, [r7, #15]
      nextChar = -1;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f04f 32ff 	mov.w	r2, #4294967295
 80058b6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
      return c;
 80058ba:	7bfb      	ldrb	r3, [r7, #15]
 80058bc:	e001      	b.n	80058c2 <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   return -1;
 80058be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	0802162c 	.word	0x0802162c

080058d0 <_ZN10IridiumSBD13check9603dataEv>:

//Checks the number of available serial bytes
//Reads the available serial bytes (if any) and stores them in i2c_ser_buffer
void IridiumSBD::check9603data()
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  if (millis() - lastCheck >= I2C_POLLING_WAIT_MS)
 80058d8:	f002 fd6e 	bl	80083b8 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 80058ec:	4293      	cmp	r3, r2
 80058ee:	bf2c      	ite	cs
 80058f0:	2301      	movcs	r3, #1
 80058f2:	2300      	movcc	r3, #0
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 80be 	beq.w	8005a78 <_ZN10IridiumSBD13check9603dataEv+0x1a8>
  {
    //Check how many serial bytes are waiting to be read
    uint16_t bytesAvailable = 0;
 80058fc:	2300      	movs	r3, #0
 80058fe:	81fb      	strh	r3, [r7, #14]
    wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800590a:	4619      	mov	r1, r3
 800590c:	4610      	mov	r0, r2
 800590e:	f000 fdb7 	bl	8006480 <_ZN7TwoWire17beginTransmissionEh>
    wireport->write(LEN_REG); // Point to the serial buffer length
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005916:	21fd      	movs	r1, #253	; 0xfd
 8005918:	4618      	mov	r0, r3
 800591a:	f7fe ffa9 	bl	8004870 <_ZN7TwoWire5writeEi>
    wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005922:	4618      	mov	r0, r3
 8005924:	f000 fdf6 	bl	8006514 <_ZN7TwoWire15endTransmissionEv>
    if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)2) == 2) // Request two bytes
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005932:	2202      	movs	r2, #2
 8005934:	4619      	mov	r1, r3
 8005936:	f000 fd90 	bl	800645a <_ZN7TwoWire11requestFromEhh>
 800593a:	4603      	mov	r3, r0
 800593c:	2b02      	cmp	r3, #2
 800593e:	bf0c      	ite	eq
 8005940:	2301      	moveq	r3, #1
 8005942:	2300      	movne	r3, #0
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d01d      	beq.n	8005986 <_ZN10IridiumSBD13check9603dataEv+0xb6>
    {
      uint8_t msb = wireport->read();
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	330c      	adds	r3, #12
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4610      	mov	r0, r2
 800595a:	4798      	blx	r3
 800595c:	4603      	mov	r3, r0
 800595e:	737b      	strb	r3, [r7, #13]
      uint8_t lsb = wireport->read();
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	330c      	adds	r3, #12
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4610      	mov	r0, r2
 8005970:	4798      	blx	r3
 8005972:	4603      	mov	r3, r0
 8005974:	733b      	strb	r3, [r7, #12]
      bytesAvailable = (((uint16_t)msb) << 8) | lsb;
 8005976:	7b7b      	ldrb	r3, [r7, #13]
 8005978:	021b      	lsls	r3, r3, #8
 800597a:	b21a      	sxth	r2, r3
 800597c:	7b3b      	ldrb	r3, [r7, #12]
 800597e:	b21b      	sxth	r3, r3
 8005980:	4313      	orrs	r3, r2
 8005982:	b21b      	sxth	r3, r3
 8005984:	81fb      	strh	r3, [r7, #14]
    }

    //Now read the serial bytes (if any)
    if (bytesAvailable > 0)
 8005986:	89fb      	ldrh	r3, [r7, #14]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d06f      	beq.n	8005a6c <_ZN10IridiumSBD13check9603dataEv+0x19c>
    {
      // Request the bytes
      // Poke them into the i2c_serial buffer
      // Release the bus afterwards
      wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005996:	4619      	mov	r1, r3
 8005998:	4610      	mov	r0, r2
 800599a:	f000 fd71 	bl	8006480 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the serial buffer
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059a2:	21ff      	movs	r1, #255	; 0xff
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7fe ff63 	bl	8004870 <_ZN7TwoWire5writeEi>
      wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 fdb0 	bl	8006514 <_ZN7TwoWire15endTransmissionEv>
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 80059b4:	89fb      	ldrh	r3, [r7, #14]
 80059b6:	2b08      	cmp	r3, #8
 80059b8:	d92d      	bls.n	8005a16 <_ZN10IridiumSBD13check9603dataEv+0x146>
      {
        wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)SER_PACKET_SIZE, (uint8_t)false); // Request SER_PACKET_SIZE bytes, don't release the bus
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 80059c4:	2300      	movs	r3, #0
 80059c6:	2208      	movs	r2, #8
 80059c8:	f000 fd0c 	bl	80063e4 <_ZN7TwoWire11requestFromEhhh>
        while (wireport->available())
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3308      	adds	r3, #8
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4610      	mov	r0, r2
 80059dc:	4798      	blx	r3
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	bf14      	ite	ne
 80059e4:	2301      	movne	r3, #1
 80059e6:	2300      	moveq	r3, #0
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00f      	beq.n	8005a0e <_ZN10IridiumSBD13check9603dataEv+0x13e>
        {
          i2cSerPoke(wireport->read()); // Read and store each byte
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	330c      	adds	r3, #12
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4610      	mov	r0, r2
 80059fe:	4798      	blx	r3
 8005a00:	4603      	mov	r3, r0
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	4619      	mov	r1, r3
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f8e2 	bl	8005bd0 <_ZN10IridiumSBD10i2cSerPokeEc>
        while (wireport->available())
 8005a0c:	e7de      	b.n	80059cc <_ZN10IridiumSBD13check9603dataEv+0xfc>
        }
        bytesAvailable -= SER_PACKET_SIZE; // Decrease the number of bytes available by SER_PACKET_SIZE
 8005a0e:	89fb      	ldrh	r3, [r7, #14]
 8005a10:	3b08      	subs	r3, #8
 8005a12:	81fb      	strh	r3, [r7, #14]
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 8005a14:	e7ce      	b.n	80059b4 <_ZN10IridiumSBD13check9603dataEv+0xe4>
      }
      wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)bytesAvailable); // Request remaining bytes, release the bus
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a20:	89fa      	ldrh	r2, [r7, #14]
 8005a22:	b2d2      	uxtb	r2, r2
 8005a24:	4619      	mov	r1, r3
 8005a26:	f000 fd18 	bl	800645a <_ZN7TwoWire11requestFromEhh>
      while (wireport->available())
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	3308      	adds	r3, #8
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4610      	mov	r0, r2
 8005a3a:	4798      	blx	r3
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	bf14      	ite	ne
 8005a42:	2301      	movne	r3, #1
 8005a44:	2300      	moveq	r3, #0
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00f      	beq.n	8005a6c <_ZN10IridiumSBD13check9603dataEv+0x19c>
      {
        i2cSerPoke(wireport->read()); // Read and store each byte
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	330c      	adds	r3, #12
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4610      	mov	r0, r2
 8005a5c:	4798      	blx	r3
 8005a5e:	4603      	mov	r3, r0
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	4619      	mov	r1, r3
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 f8b3 	bl	8005bd0 <_ZN10IridiumSBD10i2cSerPokeEc>
      while (wireport->available())
 8005a6a:	e7de      	b.n	8005a2a <_ZN10IridiumSBD13check9603dataEv+0x15a>
      }
    }

    lastCheck = millis(); //Put off checking to avoid excessive I2C bus traffic
 8005a6c:	f002 fca4 	bl	80083b8 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  }
}
 8005a78:	bf00      	nop
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <_ZN10IridiumSBD13check9603pinsEv>:

//Reads the IO pins and update IO_REGISTER
void IridiumSBD::check9603pins()
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  //Read the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a92:	4619      	mov	r1, r3
 8005a94:	4610      	mov	r0, r2
 8005a96:	f000 fcf3 	bl	8006480 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a9e:	2110      	movs	r1, #16
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fe fee5 	bl	8004870 <_ZN7TwoWire5writeEi>
  wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 fd32 	bl	8006514 <_ZN7TwoWire15endTransmissionEv>
  if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)1) == 1) // Request one byte from the IO register
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005aba:	2201      	movs	r2, #1
 8005abc:	4619      	mov	r1, r3
 8005abe:	f000 fccc 	bl	800645a <_ZN7TwoWire11requestFromEhh>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	bf0c      	ite	eq
 8005ac8:	2301      	moveq	r3, #1
 8005aca:	2300      	movne	r3, #0
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00d      	beq.n	8005aee <_ZN10IridiumSBD13check9603pinsEv+0x6e>
  {
    IO_REGISTER = wireport->read(); // Read the IO register
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	330c      	adds	r3, #12
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	4798      	blx	r3
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	b2da      	uxtb	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
}
 8005aee:	bf00      	nop
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <_ZN10IridiumSBD11set9603pinsEh>:

//Set the IO pins
void IridiumSBD::set9603pins(uint8_t pins)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b082      	sub	sp, #8
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
 8005afe:	460b      	mov	r3, r1
 8005b00:	70fb      	strb	r3, [r7, #3]
  //Write to the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	4610      	mov	r0, r2
 8005b10:	f000 fcb6 	bl	8006480 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b18:	2110      	movs	r1, #16
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7fe fea8 	bl	8004870 <_ZN7TwoWire5writeEi>
  wireport->write(pins); // Set the pins
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	78f9      	ldrb	r1, [r7, #3]
 8005b2e:	4610      	mov	r0, r2
 8005b30:	4798      	blx	r3
  wireport->endTransmission(); // Send data and surrender the bus
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 fcec 	bl	8006514 <_ZN7TwoWire15endTransmissionEv>
}
 8005b3c:	bf00      	nop
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <_ZN10IridiumSBD15i2cSerAvailableEv>:
    return(ISBD_SUCCESS);
}

// I2C_SER functions
int IridiumSBD::i2cSerAvailable()
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  return (i2c_ser_buffer_tail + I2C_SER_MAX_BUFF - i2c_ser_buffer_head) % I2C_SER_MAX_BUFF;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b52:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	425a      	negs	r2, r3
 8005b60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b64:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005b68:	bf58      	it	pl
 8005b6a:	4253      	negpl	r3, r2
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <_ZN10IridiumSBD10i2cSerReadEv>:

int IridiumSBD::i2cSerRead()
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  // Empty buffer?
  if (i2c_ser_buffer_head == i2c_ser_buffer_tail)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d102      	bne.n	8005b96 <_ZN10IridiumSBD10i2cSerReadEv+0x1e>
    return -1;
 8005b90:	f04f 33ff 	mov.w	r3, #4294967295
 8005b94:	e016      	b.n	8005bc4 <_ZN10IridiumSBD10i2cSerReadEv+0x4c>

  // Read from "head"
  uint8_t d = i2c_ser_buffer[i2c_ser_buffer_head]; // grab next byte
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8005ba4:	73fb      	strb	r3, [r7, #15]
  i2c_ser_buffer_head = (i2c_ser_buffer_head + 1) % I2C_SER_MAX_BUFF; // update head
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005bac:	3301      	adds	r3, #1
 8005bae:	425a      	negs	r2, r3
 8005bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bb4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005bb8:	bf58      	it	pl
 8005bba:	4253      	negpl	r3, r2
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  return d;
 8005bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <_ZN10IridiumSBD10i2cSerPokeEc>:

void IridiumSBD::i2cSerPoke(char serChar)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	460b      	mov	r3, r1
 8005bda:	70fb      	strb	r3, [r7, #3]
  // Calculate the new value for the tail
  int next = (i2c_ser_buffer_tail + 1) % I2C_SER_MAX_BUFF;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005be2:	3301      	adds	r3, #1
 8005be4:	425a      	negs	r2, r3
 8005be6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bea:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005bee:	bf58      	it	pl
 8005bf0:	4253      	negpl	r3, r2
 8005bf2:	60fb      	str	r3, [r7, #12]
  // If the buffer is not full (i.e. we are not about to overwrite the head byte)
  // If the buffer is full, the byte is lost
  if (next != i2c_ser_buffer_head)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d00b      	beq.n	8005c18 <_ZN10IridiumSBD10i2cSerPokeEc+0x48>
  {
    // save new data in buffer: tail points to where byte goes
    i2c_ser_buffer[i2c_ser_buffer_tail] = serChar; // save new byte
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	4413      	add	r3, r2
 8005c0a:	78fa      	ldrb	r2, [r7, #3]
 8005c0c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    i2c_ser_buffer_tail = next;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }
}
 8005c18:	bf00      	nop
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef>:
	#endif
}


//uint8_t IridiumSBD::MRT_Iridium_setup(UART_HandleTypeDef huart,POWERPROFILE profile){ TODO
uint8_t IridiumSBD::MRT_Iridium_setup(UART_HandleTypeDef huart){
 8005c24:	b084      	sub	sp, #16
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	f107 001c 	add.w	r0, r7, #28
 8005c32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->uart = huart;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f107 031c 	add.w	r3, r7, #28
 8005c3e:	2244      	movs	r2, #68	; 0x44
 8005c40:	4619      	mov	r1, r3
 8005c42:	f014 fd7b 	bl	801a73c <memcpy>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nSetting up the Iridium 9603N\r\n", 32, HAL_MAX_DELAY);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f04f 33ff 	mov.w	r3, #4294967295
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	4962      	ldr	r1, [pc, #392]	; (8005dd8 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1b4>)
 8005c50:	f008 fbf7 	bl	800e442 <HAL_UART_Transmit>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Checking for the device...", 28, HAL_MAX_DELAY);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f04f 33ff 	mov.w	r3, #4294967295
 8005c5a:	221c      	movs	r2, #28
 8005c5c:	495f      	ldr	r1, [pc, #380]	; (8005ddc <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1b8>)
 8005c5e:	f008 fbf0 	bl	800e442 <HAL_UART_Transmit>
	while(!this->isConnected()){
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7ff f80a 	bl	8004c7c <_ZN10IridiumSBD11isConnectedEv>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	f083 0301 	eor.w	r3, r3, #1
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d02c      	beq.n	8005cce <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0xaa>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Check if the device is connected. Trying again in\r\n", 53, HAL_MAX_DELAY);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f04f 33ff 	mov.w	r3, #4294967295
 8005c7a:	2235      	movs	r2, #53	; 0x35
 8005c7c:	4958      	ldr	r1, [pc, #352]	; (8005de0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1bc>)
 8005c7e:	f008 fbe0 	bl	800e442 <HAL_UART_Transmit>
		HAL_Delay(500);
 8005c82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005c86:	f002 fba3 	bl	80083d0 <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r3", 3, HAL_MAX_DELAY);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c90:	2203      	movs	r2, #3
 8005c92:	4954      	ldr	r1, [pc, #336]	; (8005de4 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1c0>)
 8005c94:	f008 fbd5 	bl	800e442 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8005c98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c9c:	f002 fb98 	bl	80083d0 <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r2", 3, HAL_MAX_DELAY);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca6:	2203      	movs	r2, #3
 8005ca8:	494f      	ldr	r1, [pc, #316]	; (8005de8 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1c4>)
 8005caa:	f008 fbca 	bl	800e442 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8005cae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005cb2:	f002 fb8d 	bl	80083d0 <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r1\r\n", 7, HAL_MAX_DELAY);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8005cbc:	2207      	movs	r2, #7
 8005cbe:	494b      	ldr	r1, [pc, #300]	; (8005dec <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1c8>)
 8005cc0:	f008 fbbf 	bl	800e442 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8005cc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005cc8:	f002 fb82 	bl	80083d0 <HAL_Delay>
	while(!this->isConnected()){
 8005ccc:	e7c9      	b.n	8005c62 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x3e>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd4:	2206      	movs	r2, #6
 8005cd6:	4946      	ldr	r1, [pc, #280]	; (8005df0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1cc>)
 8005cd8:	f008 fbb3 	bl	800e442 <HAL_UART_Transmit>

	//Activate the superchargers
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Activating the superchargers...", 31, HAL_MAX_DELAY);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f04f 33ff 	mov.w	r3, #4294967295
 8005ce2:	221f      	movs	r2, #31
 8005ce4:	4943      	ldr	r1, [pc, #268]	; (8005df4 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1d0>)
 8005ce6:	f008 fbac 	bl	800e442 <HAL_UART_Transmit>
	this->enableSuperCapCharger(true);
 8005cea:	2101      	movs	r1, #1
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f7fe fea9 	bl	8004a44 <_ZN10IridiumSBD21enableSuperCapChargerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8005cf8:	2206      	movs	r2, #6
 8005cfa:	493d      	ldr	r1, [pc, #244]	; (8005df0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1cc>)
 8005cfc:	f008 fba1 	bl	800e442 <HAL_UART_Transmit>


	//Wait for the supercapacitors to charge
	//int start=millis();
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Waiting for the supercapacitors to charge...", 44, HAL_MAX_DELAY);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f04f 33ff 	mov.w	r3, #4294967295
 8005d06:	222c      	movs	r2, #44	; 0x2c
 8005d08:	493b      	ldr	r1, [pc, #236]	; (8005df8 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1d4>)
 8005d0a:	f008 fb9a 	bl	800e442 <HAL_UART_Transmit>
	while (!this->checkSuperCapCharger()){
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7fe fed6 	bl	8004ac0 <_ZN10IridiumSBD20checkSuperCapChargerEv>
 8005d14:	4603      	mov	r3, r0
 8005d16:	f083 0301 	eor.w	r3, r3, #1
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d004      	beq.n	8005d2a <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x106>
		HAL_Delay(333);
 8005d20:	f240 104d 	movw	r0, #333	; 0x14d
 8005d24:	f002 fb54 	bl	80083d0 <HAL_Delay>
	while (!this->checkSuperCapCharger()){
 8005d28:	e7f1      	b.n	8005d0e <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0xea>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d30:	2206      	movs	r2, #6
 8005d32:	492f      	ldr	r1, [pc, #188]	; (8005df0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1cc>)
 8005d34:	f008 fb85 	bl	800e442 <HAL_UART_Transmit>


	//Enable power for the 9603N
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Enabling 9603N power...", 23, HAL_MAX_DELAY);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d3e:	2217      	movs	r2, #23
 8005d40:	492e      	ldr	r1, [pc, #184]	; (8005dfc <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1d8>)
 8005d42:	f008 fb7e 	bl	800e442 <HAL_UART_Transmit>
	this->enable9603Npower(true);
 8005d46:	2101      	movs	r1, #1
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f7fe fee9 	bl	8004b20 <_ZN10IridiumSBD16enable9603NpowerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f04f 33ff 	mov.w	r3, #4294967295
 8005d54:	2206      	movs	r2, #6
 8005d56:	4926      	ldr	r1, [pc, #152]	; (8005df0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1cc>)
 8005d58:	f008 fb73 	bl	800e442 <HAL_UART_Transmit>
	/*
	 * Begin satellite modem operation
	 */

	//Power on the rockblock
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Starting Modem...", 17, HAL_MAX_DELAY);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d62:	2211      	movs	r2, #17
 8005d64:	4926      	ldr	r1, [pc, #152]	; (8005e00 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1dc>)
 8005d66:	f008 fb6c 	bl	800e442 <HAL_UART_Transmit>
	//this->setPowerProfile(profile);
	int err = this->begin();
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7fe fdb2 	bl	80048d4 <_ZN10IridiumSBD5beginEv>
 8005d70:	60f8      	str	r0, [r7, #12]
	if (err != ISBD_SUCCESS)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d015      	beq.n	8005da4 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x180>
	  {
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Failed: ", 8, HAL_MAX_DELAY);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d7e:	2208      	movs	r2, #8
 8005d80:	4920      	ldr	r1, [pc, #128]	; (8005e04 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1e0>)
 8005d82:	f008 fb5e 	bl	800e442 <HAL_UART_Transmit>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) err, 4, HAL_MAX_DELAY);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	68f9      	ldr	r1, [r7, #12]
 8005d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d8e:	2204      	movs	r2, #4
 8005d90:	f008 fb57 	bl	800e442 <HAL_UART_Transmit>
		this->MRT_Iridium_ErrorMessage(err);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	4619      	mov	r1, r3
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f8b0 	bl	8005f00 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>

	    return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e011      	b.n	8005dc8 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1a4>
	  }
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "...OK\r\n", 7, HAL_MAX_DELAY);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f04f 33ff 	mov.w	r3, #4294967295
 8005daa:	2207      	movs	r2, #7
 8005dac:	4916      	ldr	r1, [pc, #88]	; (8005e08 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1e4>)
 8005dae:	f008 fb48 	bl	800e442 <HAL_UART_Transmit>

	//Setup default IMEI to 000000000000000 (no IMEI)
	IMEI="000000000000000";
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a15      	ldr	r2, [pc, #84]	; (8005e0c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1e8>)
 8005db6:	645a      	str	r2, [r3, #68]	; 0x44

	HAL_UART_Transmit(&(this->uart),(uint8_t*) "End of setup\r\n\r\n", 16, HAL_MAX_DELAY);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f04f 33ff 	mov.w	r3, #4294967295
 8005dbe:	2210      	movs	r2, #16
 8005dc0:	4913      	ldr	r1, [pc, #76]	; (8005e10 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1ec>)
 8005dc2:	f008 fb3e 	bl	800e442 <HAL_UART_Transmit>

	return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dd2:	b004      	add	sp, #16
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	08020bd8 	.word	0x08020bd8
 8005ddc:	08020bfc 	.word	0x08020bfc
 8005de0:	08020c18 	.word	0x08020c18
 8005de4:	08020c4c 	.word	0x08020c4c
 8005de8:	08020c50 	.word	0x08020c50
 8005dec:	08020c54 	.word	0x08020c54
 8005df0:	080204ec 	.word	0x080204ec
 8005df4:	08020c5c 	.word	0x08020c5c
 8005df8:	08020c7c 	.word	0x08020c7c
 8005dfc:	08020cac 	.word	0x08020cac
 8005e00:	08020cc4 	.word	0x08020cc4
 8005e04:	08020cd8 	.word	0x08020cd8
 8005e08:	08020ce4 	.word	0x08020ce4
 8005e0c:	08020cec 	.word	0x08020cec
 8005e10:	08020cfc 	.word	0x08020cfc

08005e14 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>:


boolean IridiumSBD::MRT_Iridium_shutdown(void){
 8005e14:	b590      	push	{r4, r7, lr}
 8005e16:	b08b      	sub	sp, #44	; 0x2c
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nShutting down the Iridium\r\n", 29, HAL_MAX_DELAY);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e22:	221d      	movs	r2, #29
 8005e24:	492f      	ldr	r1, [pc, #188]	; (8005ee4 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd0>)
 8005e26:	f008 fb0c 	bl	800e442 <HAL_UART_Transmit>

	// Power down the modem
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Putting the 9603N to sleep...", 29, HAL_MAX_DELAY);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e30:	221d      	movs	r2, #29
 8005e32:	492d      	ldr	r1, [pc, #180]	; (8005ee8 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd4>)
 8005e34:	f008 fb05 	bl	800e442 <HAL_UART_Transmit>
	int err = this->sleep();
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f7fe fd76 	bl	800492a <_ZN10IridiumSBD5sleepEv>
 8005e3e:	6278      	str	r0, [r7, #36]	; 0x24
	if (err != ISBD_SUCCESS)
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d017      	beq.n	8005e76 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x62>
	{
		char str[24+sizeof(int)];
		sprintf(str, "sleep failed: error  %i\r\n", err);
 8005e46:	f107 0308 	add.w	r3, r7, #8
 8005e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e4c:	4927      	ldr	r1, [pc, #156]	; (8005eec <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd8>)
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f015 fd1a 	bl	801b888 <siprintf>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8005e54:	687c      	ldr	r4, [r7, #4]
 8005e56:	f107 0308 	add.w	r3, r7, #8
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7fa f9c8 	bl	80001f0 <strlen>
 8005e60:	4603      	mov	r3, r0
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	f107 0108 	add.w	r1, r7, #8
 8005e68:	f04f 33ff 	mov.w	r3, #4294967295
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	f008 fae8 	bl	800e442 <HAL_UART_Transmit>
		return false;
 8005e72:	2300      	movs	r3, #0
 8005e74:	e032      	b.n	8005edc <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xc8>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f04f 33ff 	mov.w	r3, #4294967295
 8005e7c:	2204      	movs	r2, #4
 8005e7e:	491c      	ldr	r1, [pc, #112]	; (8005ef0 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8005e80:	f008 fadf 	bl	800e442 <HAL_UART_Transmit>

	// Disable 9603N power
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Disabling 9603N power...", 24, HAL_MAX_DELAY);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f04f 33ff 	mov.w	r3, #4294967295
 8005e8a:	2218      	movs	r2, #24
 8005e8c:	4919      	ldr	r1, [pc, #100]	; (8005ef4 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe0>)
 8005e8e:	f008 fad8 	bl	800e442 <HAL_UART_Transmit>
	this->enable9603Npower(false);
 8005e92:	2100      	movs	r1, #0
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7fe fe43 	bl	8004b20 <_ZN10IridiumSBD16enable9603NpowerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005ea0:	2204      	movs	r2, #4
 8005ea2:	4913      	ldr	r1, [pc, #76]	; (8005ef0 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8005ea4:	f008 facd 	bl	800e442 <HAL_UART_Transmit>

	// Disable the supercapacitor charger
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Disabling the supercapacitor charger...", 39, HAL_MAX_DELAY);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8005eae:	2227      	movs	r2, #39	; 0x27
 8005eb0:	4911      	ldr	r1, [pc, #68]	; (8005ef8 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe4>)
 8005eb2:	f008 fac6 	bl	800e442 <HAL_UART_Transmit>
	this->enableSuperCapCharger(false);
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f7fe fdc3 	bl	8004a44 <_ZN10IridiumSBD21enableSuperCapChargerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec4:	2204      	movs	r2, #4
 8005ec6:	490a      	ldr	r1, [pc, #40]	; (8005ef0 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8005ec8:	f008 fabb 	bl	800e442 <HAL_UART_Transmit>

	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Iridium successfully shutdown\r\n", 32, HAL_MAX_DELAY);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f04f 33ff 	mov.w	r3, #4294967295
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	4909      	ldr	r1, [pc, #36]	; (8005efc <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe8>)
 8005ed6:	f008 fab4 	bl	800e442 <HAL_UART_Transmit>
	return true;
 8005eda:	2301      	movs	r3, #1
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	372c      	adds	r7, #44	; 0x2c
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd90      	pop	{r4, r7, pc}
 8005ee4:	08020d10 	.word	0x08020d10
 8005ee8:	08020d30 	.word	0x08020d30
 8005eec:	08020d50 	.word	0x08020d50
 8005ef0:	080204ec 	.word	0x080204ec
 8005ef4:	08020d6c 	.word	0x08020d6c
 8005ef8:	08020d88 	.word	0x08020d88
 8005efc:	08020db0 	.word	0x08020db0

08005f00 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>:



void IridiumSBD::MRT_Iridium_ErrorMessage(uint8_t error){
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	460b      	mov	r3, r1
 8005f0a:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nError:\t", 12, HAL_MAX_DELAY);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f12:	220c      	movs	r2, #12
 8005f14:	4948      	ldr	r1, [pc, #288]	; (8006038 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x138>)
 8005f16:	f008 fa94 	bl	800e442 <HAL_UART_Transmit>
	if (error == ISBD_ALREADY_AWAKE){
 8005f1a:	78fb      	ldrb	r3, [r7, #3]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d107      	bne.n	8005f30 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x30>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Already Awake\r\n", 17, HAL_MAX_DELAY);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f04f 33ff 	mov.w	r3, #4294967295
 8005f26:	2211      	movs	r2, #17
 8005f28:	4944      	ldr	r1, [pc, #272]	; (800603c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x13c>)
 8005f2a:	f008 fa8a 	bl	800e442 <HAL_UART_Transmit>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "DEBUG LINE REACHED\r\n", 22, HAL_MAX_DELAY);
	}
	else{
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "UNKNOWN\r\n", 11, HAL_MAX_DELAY);
	}
}
 8005f2e:	e07f      	b.n	8006030 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_SERIAL_FAILURE){
 8005f30:	78fb      	ldrb	r3, [r7, #3]
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d107      	bne.n	8005f46 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x46>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Serial Failure\r\n", 18, HAL_MAX_DELAY);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f04f 33ff 	mov.w	r3, #4294967295
 8005f3c:	2212      	movs	r2, #18
 8005f3e:	4940      	ldr	r1, [pc, #256]	; (8006040 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x140>)
 8005f40:	f008 fa7f 	bl	800e442 <HAL_UART_Transmit>
}
 8005f44:	e074      	b.n	8006030 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_PROTOCOL_ERROR){
 8005f46:	78fb      	ldrb	r3, [r7, #3]
 8005f48:	2b03      	cmp	r3, #3
 8005f4a:	d107      	bne.n	8005f5c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x5c>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Protocol Error\r\n", 18, HAL_MAX_DELAY);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f52:	2212      	movs	r2, #18
 8005f54:	493b      	ldr	r1, [pc, #236]	; (8006044 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x144>)
 8005f56:	f008 fa74 	bl	800e442 <HAL_UART_Transmit>
}
 8005f5a:	e069      	b.n	8006030 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_CANCELLED){
 8005f5c:	78fb      	ldrb	r3, [r7, #3]
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	d107      	bne.n	8005f72 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x72>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nCancelled", 13, HAL_MAX_DELAY);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f04f 33ff 	mov.w	r3, #4294967295
 8005f68:	220d      	movs	r2, #13
 8005f6a:	4937      	ldr	r1, [pc, #220]	; (8006048 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x148>)
 8005f6c:	f008 fa69 	bl	800e442 <HAL_UART_Transmit>
}
 8005f70:	e05e      	b.n	8006030 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_NO_MODEM_DETECTED){
 8005f72:	78fb      	ldrb	r3, [r7, #3]
 8005f74:	2b05      	cmp	r3, #5
 8005f76:	d107      	bne.n	8005f88 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x88>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nNo modem detected: check wiring.", 36, HAL_MAX_DELAY);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f7e:	2224      	movs	r2, #36	; 0x24
 8005f80:	4932      	ldr	r1, [pc, #200]	; (800604c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x14c>)
 8005f82:	f008 fa5e 	bl	800e442 <HAL_UART_Transmit>
}
 8005f86:	e053      	b.n	8006030 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_SBDIX_FATAL_ERROR){
 8005f88:	78fb      	ldrb	r3, [r7, #3]
 8005f8a:	2b06      	cmp	r3, #6
 8005f8c:	d107      	bne.n	8005f9e <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x9e>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "SDBIX Fatal Error\r\n", 21, HAL_MAX_DELAY);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f04f 33ff 	mov.w	r3, #4294967295
 8005f94:	2215      	movs	r2, #21
 8005f96:	492e      	ldr	r1, [pc, #184]	; (8006050 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x150>)
 8005f98:	f008 fa53 	bl	800e442 <HAL_UART_Transmit>
}
 8005f9c:	e048      	b.n	8006030 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_SENDRECEIVE_TIMEOUT){
 8005f9e:	78fb      	ldrb	r3, [r7, #3]
 8005fa0:	2b07      	cmp	r3, #7
 8005fa2:	d107      	bne.n	8005fb4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xb4>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Send-Receive Timeout\r\n", 24, HAL_MAX_DELAY);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8005faa:	2218      	movs	r2, #24
 8005fac:	4929      	ldr	r1, [pc, #164]	; (8006054 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x154>)
 8005fae:	f008 fa48 	bl	800e442 <HAL_UART_Transmit>
}
 8005fb2:	e03d      	b.n	8006030 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_RX_OVERFLOW){
 8005fb4:	78fb      	ldrb	r3, [r7, #3]
 8005fb6:	2b08      	cmp	r3, #8
 8005fb8:	d107      	bne.n	8005fca <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xca>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "RX Overflow\r\n", 15, HAL_MAX_DELAY);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8005fc0:	220f      	movs	r2, #15
 8005fc2:	4925      	ldr	r1, [pc, #148]	; (8006058 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x158>)
 8005fc4:	f008 fa3d 	bl	800e442 <HAL_UART_Transmit>
}
 8005fc8:	e032      	b.n	8006030 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_REENTRANT){
 8005fca:	78fb      	ldrb	r3, [r7, #3]
 8005fcc:	2b09      	cmp	r3, #9
 8005fce:	d107      	bne.n	8005fe0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xe0>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "REENTRANT\r\n", 13, HAL_MAX_DELAY);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fd6:	220d      	movs	r2, #13
 8005fd8:	4920      	ldr	r1, [pc, #128]	; (800605c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x15c>)
 8005fda:	f008 fa32 	bl	800e442 <HAL_UART_Transmit>
}
 8005fde:	e027      	b.n	8006030 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_IS_ASLEEP){
 8005fe0:	78fb      	ldrb	r3, [r7, #3]
 8005fe2:	2b0a      	cmp	r3, #10
 8005fe4:	d107      	bne.n	8005ff6 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf6>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Is Asleep\r\n", 13, HAL_MAX_DELAY);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fec:	220d      	movs	r2, #13
 8005fee:	491c      	ldr	r1, [pc, #112]	; (8006060 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x160>)
 8005ff0:	f008 fa27 	bl	800e442 <HAL_UART_Transmit>
}
 8005ff4:	e01c      	b.n	8006030 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_NO_SLEEP_PIN){
 8005ff6:	78fb      	ldrb	r3, [r7, #3]
 8005ff8:	2b0b      	cmp	r3, #11
 8005ffa:	d107      	bne.n	800600c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x10c>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "No Sleep Pin\r\n", 16, HAL_MAX_DELAY);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8006002:	2210      	movs	r2, #16
 8006004:	4917      	ldr	r1, [pc, #92]	; (8006064 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x164>)
 8006006:	f008 fa1c 	bl	800e442 <HAL_UART_Transmit>
}
 800600a:	e011      	b.n	8006030 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if(error == 20){
 800600c:	78fb      	ldrb	r3, [r7, #3]
 800600e:	2b14      	cmp	r3, #20
 8006010:	d107      	bne.n	8006022 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x122>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "DEBUG LINE REACHED\r\n", 22, HAL_MAX_DELAY);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f04f 33ff 	mov.w	r3, #4294967295
 8006018:	2216      	movs	r2, #22
 800601a:	4913      	ldr	r1, [pc, #76]	; (8006068 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x168>)
 800601c:	f008 fa11 	bl	800e442 <HAL_UART_Transmit>
}
 8006020:	e006      	b.n	8006030 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "UNKNOWN\r\n", 11, HAL_MAX_DELAY);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f04f 33ff 	mov.w	r3, #4294967295
 8006028:	220b      	movs	r2, #11
 800602a:	4910      	ldr	r1, [pc, #64]	; (800606c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x16c>)
 800602c:	f008 fa09 	bl	800e442 <HAL_UART_Transmit>
}
 8006030:	bf00      	nop
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	08020dd0 	.word	0x08020dd0
 800603c:	08020ddc 	.word	0x08020ddc
 8006040:	08020dec 	.word	0x08020dec
 8006044:	08020e00 	.word	0x08020e00
 8006048:	08020e14 	.word	0x08020e14
 800604c:	08020e20 	.word	0x08020e20
 8006050:	08020e44 	.word	0x08020e44
 8006054:	08020e58 	.word	0x08020e58
 8006058:	08020e70 	.word	0x08020e70
 800605c:	08020e80 	.word	0x08020e80
 8006060:	08020e8c 	.word	0x08020e8c
 8006064:	08020e98 	.word	0x08020e98
 8006068:	08020ea8 	.word	0x08020ea8
 800606c:	08020ec0 	.word	0x08020ec0

08006070 <_ZN10IridiumSBDC1ER7TwoWireh>:
      if (ringPin != -1)
         pinMode(ringPin, INPUT);
   }
   */

IridiumSBD(TwoWire &wirePort = MRT_IRIDIUM_I2C, uint8_t deviceAddress = 0x63)
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	4613      	mov	r3, r2
 800607c:	71fb      	strb	r3, [r7, #7]
   {
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2205      	movs	r2, #5
 800608a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2202      	movs	r2, #2
 800609a:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2204      	movs	r2, #4
 80060a2:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2208      	movs	r2, #8
 80060aa:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2210      	movs	r2, #16
 80060b2:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2220      	movs	r2, #32
 80060ba:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2240      	movs	r2, #64	; 0x40
 80060c2:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
      useSerial = false;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      wireport = &wirePort;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	64da      	str	r2, [r3, #76]	; 0x4c
      deviceaddress = deviceAddress;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	79fa      	ldrb	r2, [r7, #7]
 80060d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      sbdixInterval = ISBD_USB_SBDIX_INTERVAL;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	221e      	movs	r2, #30
 80060e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      atTimeout = ISBD_DEFAULT_AT_TIMEOUT;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	221e      	movs	r2, #30
 80060e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      sendReceiveTimeout = ISBD_DEFAULT_SENDRECEIVE_TIME;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80060f2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
      startupTimeout = ISBD_STARTUP_MAX_TIME;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	22f0      	movs	r2, #240	; 0xf0
 80060fa:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
      remainingMessages = -1;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f04f 32ff 	mov.w	r2, #4294967295
 8006104:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
      asleep = true;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
      reentrant = false;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
      sleepPin = -1;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f04f 32ff 	mov.w	r2, #4294967295
 800611e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
      sleepPinConfigured = false;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
      ringPin = -1;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f04f 32ff 	mov.w	r2, #4294967295
 8006130:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
      msstmWorkaroundRequested = false;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
      ringAlertsEnabled = true;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
      ringAsserted = false;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
      lastPowerOnTime = 0UL;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
      head = SBDRING;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	4a0d      	ldr	r2, [pc, #52]	; (800618c <_ZN10IridiumSBDC1ER7TwoWireh+0x11c>)
 8006158:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
      tail = SBDRING;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4a0b      	ldr	r2, [pc, #44]	; (800618c <_ZN10IridiumSBDC1ER7TwoWireh+0x11c>)
 8006160:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
      nextChar = -1;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f04f 32ff 	mov.w	r2, #4294967295
 800616a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
      i2c_ser_buffer_tail = 0;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      i2c_ser_buffer_head = 0;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   }
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4618      	mov	r0, r3
 8006182:	3714      	adds	r7, #20
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr
 800618c:	0802162c 	.word	0x0802162c

08006190 <MRT_Static_Iridium_Constructor>:
#endif

static IridiumSBD *E_T = NULL;


void MRT_Static_Iridium_Constructor(){
 8006190:	b598      	push	{r3, r4, r7, lr}
 8006192:	af00      	add	r7, sp, #0
	if (E_T==NULL){
 8006194:	4b08      	ldr	r3, [pc, #32]	; (80061b8 <MRT_Static_Iridium_Constructor+0x28>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10b      	bne.n	80061b4 <MRT_Static_Iridium_Constructor+0x24>
		E_T = new IridiumSBD();
 800619c:	20e4      	movs	r0, #228	; 0xe4
 800619e:	f013 f9b7 	bl	8019510 <_Znwj>
 80061a2:	4603      	mov	r3, r0
 80061a4:	461c      	mov	r4, r3
 80061a6:	2263      	movs	r2, #99	; 0x63
 80061a8:	4904      	ldr	r1, [pc, #16]	; (80061bc <MRT_Static_Iridium_Constructor+0x2c>)
 80061aa:	4620      	mov	r0, r4
 80061ac:	f7ff ff60 	bl	8006070 <_ZN10IridiumSBDC1ER7TwoWireh>
 80061b0:	4b01      	ldr	r3, [pc, #4]	; (80061b8 <MRT_Static_Iridium_Constructor+0x28>)
 80061b2:	601c      	str	r4, [r3, #0]
	}
}
 80061b4:	bf00      	nop
 80061b6:	bd98      	pop	{r3, r4, r7, pc}
 80061b8:	2000043c 	.word	0x2000043c
 80061bc:	200004f8 	.word	0x200004f8

080061c0 <MRT_Static_Iridium_Destructor>:

void MRT_Static_Iridium_Destructor(){
 80061c0:	b480      	push	{r7}
 80061c2:	af00      	add	r7, sp, #0
	if (E_T!=NULL){
 80061c4:	4b05      	ldr	r3, [pc, #20]	; (80061dc <MRT_Static_Iridium_Destructor+0x1c>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d002      	beq.n	80061d2 <MRT_Static_Iridium_Destructor+0x12>
		E_T = NULL;
 80061cc:	4b03      	ldr	r3, [pc, #12]	; (80061dc <MRT_Static_Iridium_Destructor+0x1c>)
 80061ce:	2200      	movs	r2, #0
 80061d0:	601a      	str	r2, [r3, #0]
	}
}
 80061d2:	bf00      	nop
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr
 80061dc:	2000043c 	.word	0x2000043c

080061e0 <MRT_Static_Iridium_Setup>:


uint8_t MRT_Static_Iridium_Setup(UART_HandleTypeDef huart){
 80061e0:	b084      	sub	sp, #16
 80061e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061e4:	b08f      	sub	sp, #60	; 0x3c
 80061e6:	af0e      	add	r7, sp, #56	; 0x38
 80061e8:	f107 0418 	add.w	r4, r7, #24
 80061ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MRT_Static_Iridium_Constructor();
 80061f0:	f7ff ffce 	bl	8006190 <MRT_Static_Iridium_Constructor>
	return E_T->MRT_Iridium_setup(huart);
 80061f4:	4b0e      	ldr	r3, [pc, #56]	; (8006230 <MRT_Static_Iridium_Setup+0x50>)
 80061f6:	681e      	ldr	r6, [r3, #0]
 80061f8:	466d      	mov	r5, sp
 80061fa:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80061fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006200:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006202:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006204:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006208:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800620a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800620e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006212:	f107 0318 	add.w	r3, r7, #24
 8006216:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006218:	4630      	mov	r0, r6
 800621a:	f7ff fd03 	bl	8005c24 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef>
 800621e:	4603      	mov	r3, r0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3704      	adds	r7, #4
 8006224:	46bd      	mov	sp, r7
 8006226:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800622a:	b004      	add	sp, #16
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	2000043c 	.word	0x2000043c

08006234 <MRT_Static_Iridium_Shutdown>:

bool MRT_Static_Iridium_Shutdown(void){
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
	bool b = E_T->MRT_Iridium_shutdown();
 800623a:	4b09      	ldr	r3, [pc, #36]	; (8006260 <MRT_Static_Iridium_Shutdown+0x2c>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4618      	mov	r0, r3
 8006240:	f7ff fde8 	bl	8005e14 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	bf14      	ite	ne
 800624a:	2301      	movne	r3, #1
 800624c:	2300      	moveq	r3, #0
 800624e:	71fb      	strb	r3, [r7, #7]
	MRT_Static_Iridium_Destructor();
 8006250:	f7ff ffb6 	bl	80061c0 <MRT_Static_Iridium_Destructor>
	return b;
 8006254:	79fb      	ldrb	r3, [r7, #7]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	2000043c 	.word	0x2000043c

08006264 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8006264:	b590      	push	{r4, r7, lr}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <_ZN5Print5writeEPKc+0x14>
 8006274:	2300      	movs	r3, #0
 8006276:	e00d      	b.n	8006294 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3304      	adds	r3, #4
 800627e:	681c      	ldr	r4, [r3, #0]
 8006280:	6838      	ldr	r0, [r7, #0]
 8006282:	f7f9 ffb5 	bl	80001f0 <strlen>
 8006286:	4603      	mov	r3, r0
 8006288:	461a      	mov	r2, r3
 800628a:	6839      	ldr	r1, [r7, #0]
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	47a0      	blx	r4
 8006290:	4603      	mov	r3, r0
 8006292:	bf00      	nop
    }
 8006294:	4618      	mov	r0, r3
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	bd90      	pop	{r4, r7, pc}

0800629c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b086      	sub	sp, #24
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 80062a8:	2300      	movs	r3, #0
 80062aa:	617b      	str	r3, [r7, #20]
  while (size--) {
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	1e5a      	subs	r2, r3, #1
 80062b0:	607a      	str	r2, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	bf14      	ite	ne
 80062b6:	2301      	movne	r3, #1
 80062b8:	2300      	moveq	r3, #0
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00e      	beq.n	80062de <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	1c59      	adds	r1, r3, #1
 80062ca:	60b9      	str	r1, [r7, #8]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	4619      	mov	r1, r3
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	4790      	blx	r2
 80062d4:	4602      	mov	r2, r0
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	4413      	add	r3, r2
 80062da:	617b      	str	r3, [r7, #20]
  while (size--) {
 80062dc:	e7e6      	b.n	80062ac <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 80062de:	697b      	ldr	r3, [r7, #20]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3718      	adds	r7, #24
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 80062f2:	6839      	ldr	r1, [r7, #0]
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f805 	bl	8006304 <_ZN5Print5printEPKc>
 80062fa:	4603      	mov	r3, r0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3708      	adds	r7, #8
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  return write(str);
 800630e:	6839      	ldr	r1, [r7, #0]
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f7ff ffa7 	bl	8006264 <_ZN5Print5writeEPKc>
 8006316:	4603      	mov	r3, r0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3708      	adds	r7, #8
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	4a06      	ldr	r2, [pc, #24]	; (8006344 <_ZN5PrintC1Ev+0x24>)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	605a      	str	r2, [r3, #4]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4618      	mov	r0, r3
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	08021640 	.word	0x08021640

08006348 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4618      	mov	r0, r3
 8006354:	f7ff ffe4 	bl	8006320 <_ZN5PrintC1Ev>
 8006358:	4a05      	ldr	r2, [pc, #20]	; (8006370 <_ZN6StreamC1Ev+0x28>)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	601a      	str	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006364:	609a      	str	r2, [r3, #8]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4618      	mov	r0, r3
 800636a:	3708      	adds	r7, #8
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	08021670 	.word	0x08021670

08006374 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4618      	mov	r0, r3
 8006382:	f7ff ffe1 	bl	8006348 <_ZN6StreamC1Ev>
 8006386:	4a16      	ldr	r2, [pc, #88]	; (80063e0 <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	3390      	adds	r3, #144	; 0x90
 8006396:	2220      	movs	r2, #32
 8006398:	2100      	movs	r1, #0
 800639a:	4618      	mov	r0, r3
 800639c:	f014 f9f6 	bl	801a78c <memset>
  rxBufferIndex = 0;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4618      	mov	r0, r3
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	08021650 	.word	0x08021650

080063e4 <_ZN7TwoWire11requestFromEhhh>:
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  HAL_I2C_Init(&I2cHandle);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af02      	add	r7, sp, #8
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	4608      	mov	r0, r1
 80063ee:	4611      	mov	r1, r2
 80063f0:	461a      	mov	r2, r3
 80063f2:	4603      	mov	r3, r0
 80063f4:	70fb      	strb	r3, [r7, #3]
 80063f6:	460b      	mov	r3, r1
 80063f8:	70bb      	strb	r3, [r7, #2]
 80063fa:	4613      	mov	r3, r2
 80063fc:	707b      	strb	r3, [r7, #1]
  uint8_t ret_val;

  disableInterrupt();
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fc24 	bl	8006c4c <_ZN7TwoWire16disableInterruptEv>

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
 8006404:	78bb      	ldrb	r3, [r7, #2]
 8006406:	2b20      	cmp	r3, #32
 8006408:	d901      	bls.n	800640e <_ZN7TwoWire11requestFromEhhh+0x2a>
    quantity = BUFFER_LENGTH;
 800640a:	2320      	movs	r3, #32
 800640c:	70bb      	strb	r3, [r7, #2]
  }
  // perform blocking read into buffer
  int read = i2c_master_read((address << 1), (char *)rxBuffer, quantity, sendStop);
 800640e:	78fb      	ldrb	r3, [r7, #3]
 8006410:	005b      	lsls	r3, r3, #1
 8006412:	b2d9      	uxtb	r1, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f103 0290 	add.w	r2, r3, #144	; 0x90
 800641a:	78b8      	ldrb	r0, [r7, #2]
 800641c:	787b      	ldrb	r3, [r7, #1]
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	4603      	mov	r3, r0
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 f9cf 	bl	80067c6 <_ZN7TwoWire15i2c_master_readEhPchh>
 8006428:	60b8      	str	r0, [r7, #8]

  if(read < 0)
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	da02      	bge.n	8006436 <_ZN7TwoWire11requestFromEhhh+0x52>
  {
    ret_val = 0;
 8006430:	2300      	movs	r3, #0
 8006432:	73fb      	strb	r3, [r7, #15]
 8006434:	e001      	b.n	800643a <_ZN7TwoWire11requestFromEhhh+0x56>
  }else
  {
    ret_val = read;
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	73fb      	strb	r3, [r7, #15]
  }

  // set rx buffer iterator vars
  rxBufferIndex = 0;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = ret_val;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	7bfa      	ldrb	r2, [r7, #15]
 8006446:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

  enableInterrupt();
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fbcc 	bl	8006be8 <_ZN7TwoWire15enableInterruptEv>

  return ret_val;
 8006450:	7bfb      	ldrb	r3, [r7, #15]
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b082      	sub	sp, #8
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
 8006462:	460b      	mov	r3, r1
 8006464:	70fb      	strb	r3, [r7, #3]
 8006466:	4613      	mov	r3, r2
 8006468:	70bb      	strb	r3, [r7, #2]
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 800646a:	78ba      	ldrb	r2, [r7, #2]
 800646c:	78f9      	ldrb	r1, [r7, #3]
 800646e:	2301      	movs	r3, #1
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f7ff ffb7 	bl	80063e4 <_ZN7TwoWire11requestFromEhhh>
 8006476:	4603      	mov	r3, r0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3708      	adds	r7, #8
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <_ZN7TwoWire17beginTransmissionEh>:
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	460b      	mov	r3, r1
 800648a:	70fb      	strb	r3, [r7, #3]
  // indicate that we are transmitting
  transmitting = 1;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  // set address of targeted slave
  txAddress = address;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	78fa      	ldrb	r2, [r7, #3]
 8006498:	741a      	strb	r2, [r3, #16]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80064aa:	bf00      	nop
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <_ZN7TwoWire15endTransmissionEh>:
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b086      	sub	sp, #24
 80064ba:	af02      	add	r7, sp, #8
 80064bc:	6078      	str	r0, [r7, #4]
 80064be:	460b      	mov	r3, r1
 80064c0:	70fb      	strb	r3, [r7, #3]
  // transmit buffer (blocking)
  disableInterrupt();
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 fbc2 	bl	8006c4c <_ZN7TwoWire16disableInterruptEv>

  int8_t ret = i2c_master_write((txAddress << 1), (const char *)txBuffer, txBufferLength, sendStop);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	7c1b      	ldrb	r3, [r3, #16]
 80064cc:	0059      	lsls	r1, r3, #1
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f103 0211 	add.w	r2, r3, #17
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80064da:	4618      	mov	r0, r3
 80064dc:	78fb      	ldrb	r3, [r7, #3]
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	4603      	mov	r3, r0
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 fa00 	bl	80068e8 <_ZN7TwoWire16i2c_master_writeEiPKcii>
 80064e8:	4603      	mov	r3, r0
 80064ea:	73fb      	strb	r3, [r7, #15]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  // indicate that we are done transmitting
  transmitting = 0;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  enableInterrupt();
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 fb6f 	bl	8006be8 <_ZN7TwoWire15enableInterruptEv>

  return ret;
 800650a:	7bfb      	ldrb	r3, [r7, #15]
}
 800650c:	4618      	mov	r0, r3
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <_ZN7TwoWire15endTransmissionEv>:

//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  return endTransmission(true);
 800651c:	2101      	movs	r1, #1
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7ff ffc9 	bl	80064b6 <_ZN7TwoWire15endTransmissionEh>
 8006524:	4603      	mov	r3, r0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b082      	sub	sp, #8
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	460b      	mov	r3, r1
 8006538:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006540:	2b00      	cmp	r3, #0
 8006542:	d01d      	beq.n	8006580 <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800654a:	2b1f      	cmp	r3, #31
 800654c:	d901      	bls.n	8006552 <_ZN7TwoWire5writeEh+0x24>
      return 0;
 800654e:	2300      	movs	r3, #0
 8006550:	e028      	b.n	80065a4 <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006558:	4619      	mov	r1, r3
 800655a:	78fa      	ldrb	r2, [r7, #3]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	440b      	add	r3, r1
 8006560:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006568:	3301      	adds	r3, #1
 800656a:	b2da      	uxtb	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800657e:	e010      	b.n	80065a2 <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fb63 	bl	8006c4c <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 8006586:	1cfb      	adds	r3, r7, #3
 8006588:	2201      	movs	r2, #1
 800658a:	4619      	mov	r1, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fa95 	bl	8006abc <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fb28 	bl	8006be8 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	333c      	adds	r3, #60	; 0x3c
 800659c:	4618      	mov	r0, r3
 800659e:	f003 f91b 	bl	80097d8 <HAL_I2C_EnableListen_IT>
  }
  return 1;
 80065a2:	2301      	movs	r3, #1
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3708      	adds	r7, #8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
  if(transmitting){
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d013      	beq.n	80065ea <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 80065c2:	2300      	movs	r3, #0
 80065c4:	617b      	str	r3, [r7, #20]
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d21e      	bcs.n	800660c <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68b9      	ldr	r1, [r7, #8]
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	440a      	add	r2, r1
 80065da:	7812      	ldrb	r2, [r2, #0]
 80065dc:	4611      	mov	r1, r2
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	3301      	adds	r3, #1
 80065e6:	617b      	str	r3, [r7, #20]
 80065e8:	e7ed      	b.n	80065c6 <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f000 fb2e 	bl	8006c4c <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	461a      	mov	r2, r3
 80065f4:	68b9      	ldr	r1, [r7, #8]
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f000 fa60 	bl	8006abc <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f000 faf3 	bl	8006be8 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	333c      	adds	r3, #60	; 0x3c
 8006606:	4618      	mov	r0, r3
 8006608:	f003 f8e6 	bl	80097d8 <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 800660c:	687b      	ldr	r3, [r7, #4]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 8006616:	b480      	push	{r7}
 8006618:	b083      	sub	sp, #12
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006624:	b2db      	uxtb	r3, r3
 8006626:	461a      	mov	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800662e:	b2db      	uxtb	r3, r3
 8006630:	1ad3      	subs	r3, r2, r3
}
 8006632:	4618      	mov	r0, r3
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 800663e:	b480      	push	{r7}
 8006640:	b085      	sub	sp, #20
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
  int value = -1;
 8006646:	f04f 33ff 	mov.w	r3, #4294967295
 800664a:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006652:	b2da      	uxtb	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800665a:	b2db      	uxtb	r3, r3
 800665c:	429a      	cmp	r2, r3
 800665e:	bf34      	ite	cc
 8006660:	2301      	movcc	r3, #1
 8006662:	2300      	movcs	r3, #0
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d012      	beq.n	8006690 <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006670:	b2db      	uxtb	r3, r3
 8006672:	461a      	mov	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4413      	add	r3, r2
 8006678:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800667c:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006684:	b2db      	uxtb	r3, r3
 8006686:	3301      	adds	r3, #1
 8006688:	b2da      	uxtb	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 8006690:	68fb      	ldr	r3, [r7, #12]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 800669e:	b480      	push	{r7}
 80066a0:	b085      	sub	sp, #20
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  int value = -1;
 80066a6:	f04f 33ff 	mov.w	r3, #4294967295
 80066aa:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80066b2:	b2da      	uxtb	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	429a      	cmp	r2, r3
 80066be:	bf34      	ite	cc
 80066c0:	2301      	movcc	r3, #1
 80066c2:	2300      	movcs	r3, #0
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d009      	beq.n	80066de <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	461a      	mov	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4413      	add	r3, r2
 80066d8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80066dc:	60fb      	str	r3, [r7, #12]
  }

  return value;
 80066de:	68fb      	ldr	r3, [r7, #12]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3714      	adds	r7, #20
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <_ZN7TwoWire16i2c_master_startEv>:
{
  user_onRequest = function;
}

int TwoWire::i2c_master_start()
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800670c:	60bb      	str	r3, [r7, #8]

    int timeout;

    // Clear Acknowledge failure flag
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006712:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006716:	615a      	str	r2, [r3, #20]

    // Wait the STOP condition has been previously correctly sent
  // This timeout can be avoid in some specific cases by simply clearing the STOP bit
    timeout = FLAG_TIMEOUT;
 8006718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800671c:	60fb      	str	r3, [r7, #12]
    while ((i2c->CR1 & I2C_CR1_STOP) == I2C_CR1_STOP) {
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006726:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800672a:	bf0c      	ite	eq
 800672c:	2301      	moveq	r3, #1
 800672e:	2300      	movne	r3, #0
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00b      	beq.n	800674e <_ZN7TwoWire16i2c_master_startEv+0x4e>
        if ((timeout--) == 0) {
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	1e5a      	subs	r2, r3, #1
 800673a:	60fa      	str	r2, [r7, #12]
 800673c:	2b00      	cmp	r3, #0
 800673e:	bf0c      	ite	eq
 8006740:	2301      	moveq	r3, #1
 8006742:	2300      	movne	r3, #0
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d0e9      	beq.n	800671e <_ZN7TwoWire16i2c_master_startEv+0x1e>
            return 1;
 800674a:	2301      	movs	r3, #1
 800674c:	e021      	b.n	8006792 <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    // Generate the START condition
    i2c->CR1 |= I2C_CR1_START;
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	601a      	str	r2, [r3, #0]

    // Wait the START condition has been correctly sent
    timeout = FLAG_TIMEOUT;
 800675a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800675e:	60fb      	str	r3, [r7, #12]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	2b01      	cmp	r3, #1
 800676c:	bf14      	ite	ne
 800676e:	2301      	movne	r3, #1
 8006770:	2300      	moveq	r3, #0
 8006772:	b2db      	uxtb	r3, r3
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00b      	beq.n	8006790 <_ZN7TwoWire16i2c_master_startEv+0x90>
        if ((timeout--) == 0) {
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	1e5a      	subs	r2, r3, #1
 800677c:	60fa      	str	r2, [r7, #12]
 800677e:	2b00      	cmp	r3, #0
 8006780:	bf0c      	ite	eq
 8006782:	2301      	moveq	r3, #1
 8006784:	2300      	movne	r3, #0
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b00      	cmp	r3, #0
 800678a:	d0e9      	beq.n	8006760 <_ZN7TwoWire16i2c_master_startEv+0x60>
            return 1;
 800678c:	2301      	movs	r3, #1
 800678e:	e000      	b.n	8006792 <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    return 0;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3714      	adds	r7, #20
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <_ZN7TwoWire15i2c_master_stopEv>:

int TwoWire::i2c_master_stop()
{
 800679e:	b480      	push	{r7}
 80067a0:	b085      	sub	sp, #20
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067aa:	60fb      	str	r3, [r7, #12]

    // Generate the STOP condition
    i2c->CR1 |= I2C_CR1_STOP;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	601a      	str	r2, [r3, #0]

    return 0;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <_ZN7TwoWire15i2c_master_readEhPchh>:

int TwoWire::i2c_master_read(uint8_t address, char *data, uint8_t length, uint8_t stop)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b08a      	sub	sp, #40	; 0x28
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	60f8      	str	r0, [r7, #12]
 80067ce:	607a      	str	r2, [r7, #4]
 80067d0:	461a      	mov	r2, r3
 80067d2:	460b      	mov	r3, r1
 80067d4:	72fb      	strb	r3, [r7, #11]
 80067d6:	4613      	mov	r3, r2
 80067d8:	72bb      	strb	r3, [r7, #10]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067de:	61fb      	str	r3, [r7, #28]
    int timeout;
    int count;
    int value;
    int ret;

    i2c_master_start();
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f7ff ff8d 	bl	8006700 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 80067e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067ea:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	bf14      	ite	ne
 80067fa:	2301      	movne	r3, #1
 80067fc:	2300      	moveq	r3, #0
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b00      	cmp	r3, #0
 8006802:	d008      	beq.n	8006816 <_ZN7TwoWire15i2c_master_readEhPchh+0x50>
        timeout--;
 8006804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006806:	3b01      	subs	r3, #1
 8006808:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1ed      	bne.n	80067ec <_ZN7TwoWire15i2c_master_readEhPchh+0x26>
            return -1;
 8006810:	f04f 33ff 	mov.w	r3, #4294967295
 8006814:	e064      	b.n	80068e0 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_READ(address);
 8006816:	7afb      	ldrb	r3, [r7, #11]
 8006818:	f043 0301 	orr.w	r3, r3, #1
 800681c:	b2db      	uxtb	r3, r3
 800681e:	461a      	mov	r2, r3
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 8006824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006828:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	f003 0302 	and.w	r3, r3, #2
 8006834:	2b02      	cmp	r3, #2
 8006836:	bf14      	ite	ne
 8006838:	2301      	movne	r3, #1
 800683a:	2300      	moveq	r3, #0
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d008      	beq.n	8006854 <_ZN7TwoWire15i2c_master_readEhPchh+0x8e>
        timeout--;
 8006842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006844:	3b01      	subs	r3, #1
 8006846:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 8006848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1ed      	bne.n	800682a <_ZN7TwoWire15i2c_master_readEhPchh+0x64>
            return -1;
 800684e:	f04f 33ff 	mov.w	r3, #4294967295
 8006852:	e045      	b.n	80068e0 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 8006854:	2300      	movs	r3, #0
 8006856:	613b      	str	r3, [r7, #16]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	613b      	str	r3, [r7, #16]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	613b      	str	r3, [r7, #16]
 8006868:	693b      	ldr	r3, [r7, #16]

    // Read all bytes except last one
    for (count = 0; count < (length - 1); count++) {
 800686a:	2300      	movs	r3, #0
 800686c:	623b      	str	r3, [r7, #32]
 800686e:	7abb      	ldrb	r3, [r7, #10]
 8006870:	3b01      	subs	r3, #1
 8006872:	6a3a      	ldr	r2, [r7, #32]
 8006874:	429a      	cmp	r2, r3
 8006876:	da17      	bge.n	80068a8 <_ZN7TwoWire15i2c_master_readEhPchh+0xe2>
        ret = i2c_master_byte_read(&value, 0);
 8006878:	f107 0314 	add.w	r3, r7, #20
 800687c:	2200      	movs	r2, #0
 800687e:	4619      	mov	r1, r3
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f000 f8a4 	bl	80069ce <_ZN7TwoWire20i2c_master_byte_readEPii>
 8006886:	61b8      	str	r0, [r7, #24]
        if(ret)
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d002      	beq.n	8006894 <_ZN7TwoWire15i2c_master_readEhPchh+0xce>
        {
          return -1;
 800688e:	f04f 33ff 	mov.w	r3, #4294967295
 8006892:	e025      	b.n	80068e0 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
        data[count] = (char)value;
 8006894:	6979      	ldr	r1, [r7, #20]
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	4413      	add	r3, r2
 800689c:	b2ca      	uxtb	r2, r1
 800689e:	701a      	strb	r2, [r3, #0]
    for (count = 0; count < (length - 1); count++) {
 80068a0:	6a3b      	ldr	r3, [r7, #32]
 80068a2:	3301      	adds	r3, #1
 80068a4:	623b      	str	r3, [r7, #32]
 80068a6:	e7e2      	b.n	800686e <_ZN7TwoWire15i2c_master_readEhPchh+0xa8>
    }

    // If not repeated start, send stop.
    // Warning: must be done BEFORE the data is read.
    if (stop) {
 80068a8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d002      	beq.n	80068b6 <_ZN7TwoWire15i2c_master_readEhPchh+0xf0>
        i2c_master_stop();
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f7ff ff74 	bl	800679e <_ZN7TwoWire15i2c_master_stopEv>
    }

    // Read the last byte
    ret = i2c_master_byte_read(&value, 1);
 80068b6:	f107 0314 	add.w	r3, r7, #20
 80068ba:	2201      	movs	r2, #1
 80068bc:	4619      	mov	r1, r3
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f000 f885 	bl	80069ce <_ZN7TwoWire20i2c_master_byte_readEPii>
 80068c4:	61b8      	str	r0, [r7, #24]
    if(ret)
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d002      	beq.n	80068d2 <_ZN7TwoWire15i2c_master_readEhPchh+0x10c>
    {
      return -1;
 80068cc:	f04f 33ff 	mov.w	r3, #4294967295
 80068d0:	e006      	b.n	80068e0 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
    }
    data[count] = (char)value;
 80068d2:	6979      	ldr	r1, [r7, #20]
 80068d4:	6a3b      	ldr	r3, [r7, #32]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	4413      	add	r3, r2
 80068da:	b2ca      	uxtb	r2, r1
 80068dc:	701a      	strb	r2, [r3, #0]

    return length;
 80068de:	7abb      	ldrb	r3, [r7, #10]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3728      	adds	r7, #40	; 0x28
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <_ZN7TwoWire16i2c_master_writeEiPKcii>:

int TwoWire::i2c_master_write(int address, const char *data, int length, int stop)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b088      	sub	sp, #32
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
 80068f4:	603b      	str	r3, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fa:	617b      	str	r3, [r7, #20]
    int timeout;
    int count;

    i2c_master_start();
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f7ff feff 	bl	8006700 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 8006902:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006906:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800690c:	695b      	ldr	r3, [r3, #20]
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	2b01      	cmp	r3, #1
 8006914:	bf14      	ite	ne
 8006916:	2301      	movne	r3, #1
 8006918:	2300      	moveq	r3, #0
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b00      	cmp	r3, #0
 800691e:	d007      	beq.n	8006930 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x48>
        timeout--;
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	3b01      	subs	r3, #1
 8006924:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1ed      	bne.n	8006908 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x20>
            return 4;
 800692c:	2304      	movs	r3, #4
 800692e:	e04a      	b.n	80069c6 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_WRITE(address);
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	b2db      	uxtb	r3, r3
 8006934:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 800693c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006940:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006946:	695b      	ldr	r3, [r3, #20]
 8006948:	f003 0302 	and.w	r3, r3, #2
 800694c:	2b02      	cmp	r3, #2
 800694e:	bf14      	ite	ne
 8006950:	2301      	movne	r3, #1
 8006952:	2300      	moveq	r3, #0
 8006954:	b2db      	uxtb	r3, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	d007      	beq.n	800696a <_ZN7TwoWire16i2c_master_writeEiPKcii+0x82>
        timeout--;
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	3b01      	subs	r3, #1
 800695e:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1ed      	bne.n	8006942 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x5a>
            return 2;
 8006966:	2302      	movs	r3, #2
 8006968:	e02d      	b.n	80069c6 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 800696a:	2300      	movs	r3, #0
 800696c:	613b      	str	r3, [r7, #16]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	613b      	str	r3, [r7, #16]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	613b      	str	r3, [r7, #16]
 800697e:	693b      	ldr	r3, [r7, #16]

    for (count = 0; count < length; count++) {
 8006980:	2300      	movs	r3, #0
 8006982:	61bb      	str	r3, [r7, #24]
 8006984:	69ba      	ldr	r2, [r7, #24]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	429a      	cmp	r2, r3
 800698a:	da15      	bge.n	80069b8 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xd0>
        if (i2c_master_byte_write(data[count]) != 1) {
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	4413      	add	r3, r2
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	4619      	mov	r1, r3
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f000 f85a 	bl	8006a50 <_ZN7TwoWire21i2c_master_byte_writeEi>
 800699c:	4603      	mov	r3, r0
 800699e:	2b01      	cmp	r3, #1
 80069a0:	bf14      	ite	ne
 80069a2:	2301      	movne	r3, #1
 80069a4:	2300      	moveq	r3, #0
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d001      	beq.n	80069b0 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xc8>
            return 3;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e00a      	b.n	80069c6 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
    for (count = 0; count < length; count++) {
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	3301      	adds	r3, #1
 80069b4:	61bb      	str	r3, [r7, #24]
 80069b6:	e7e5      	b.n	8006984 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x9c>
        }
    }

    // If not repeated start, send stop.
    if (stop) {
 80069b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d002      	beq.n	80069c4 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xdc>
        i2c_master_stop();
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f7ff feed 	bl	800679e <_ZN7TwoWire15i2c_master_stopEv>
    }

    return 0;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3720      	adds	r7, #32
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <_ZN7TwoWire20i2c_master_byte_readEPii>:

int TwoWire::i2c_master_byte_read(int *value, int last)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b087      	sub	sp, #28
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	60f8      	str	r0, [r7, #12]
 80069d6:	60b9      	str	r1, [r7, #8]
 80069d8:	607a      	str	r2, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069de:	613b      	str	r3, [r7, #16]
    int timeout;

    if (last) {
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d006      	beq.n	80069f4 <_ZN7TwoWire20i2c_master_byte_readEPii+0x26>
        // Don't acknowledge the last byte
        i2c->CR1 &= ~I2C_CR1_ACK;
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	601a      	str	r2, [r3, #0]
 80069f2:	e005      	b.n	8006a00 <_ZN7TwoWire20i2c_master_byte_readEPii+0x32>
    } else {
        // Acknowledge the byte
        i2c->CR1 |= I2C_CR1_ACK;
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	601a      	str	r2, [r3, #0]
    }

    // Wait until the byte is received
    timeout = FLAG_TIMEOUT;
 8006a00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a04:	617b      	str	r3, [r7, #20]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_RXNE) == RESET) {
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a10:	2b40      	cmp	r3, #64	; 0x40
 8006a12:	bf14      	ite	ne
 8006a14:	2301      	movne	r3, #1
 8006a16:	2300      	moveq	r3, #0
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00c      	beq.n	8006a38 <_ZN7TwoWire20i2c_master_byte_readEPii+0x6a>
        if ((timeout--) == 0) {
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	1e5a      	subs	r2, r3, #1
 8006a22:	617a      	str	r2, [r7, #20]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	bf0c      	ite	eq
 8006a28:	2301      	moveq	r3, #1
 8006a2a:	2300      	movne	r3, #0
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d0e9      	beq.n	8006a06 <_ZN7TwoWire20i2c_master_byte_readEPii+0x38>
            return -1;
 8006a32:	f04f 33ff 	mov.w	r3, #4294967295
 8006a36:	e005      	b.n	8006a44 <_ZN7TwoWire20i2c_master_byte_readEPii+0x76>
        }
    }

    *value = (int)i2c->DR;
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	601a      	str	r2, [r3, #0]

    return 0;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	371c      	adds	r7, #28
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <_ZN7TwoWire21i2c_master_byte_writeEi>:

int TwoWire::i2c_master_byte_write(int data)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a5e:	60bb      	str	r3, [r7, #8]
    int timeout;

    i2c->DR = (uint8_t)data;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	461a      	mov	r2, r3
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	611a      	str	r2, [r3, #16]

    // Wait until the byte is transmitted
    timeout = FLAG_TIMEOUT;
 8006a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a6e:	60fb      	str	r3, [r7, #12]
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a7a:	2b80      	cmp	r3, #128	; 0x80
 8006a7c:	d008      	beq.n	8006a90 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
            (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == RESET)) {
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a82:	695b      	ldr	r3, [r3, #20]
 8006a84:	f003 0304 	and.w	r3, r3, #4
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8006a88:	2b04      	cmp	r3, #4
 8006a8a:	d001      	beq.n	8006a90 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e000      	b.n	8006a92 <_ZN7TwoWire21i2c_master_byte_writeEi+0x42>
 8006a90:	2300      	movs	r3, #0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00b      	beq.n	8006aae <_ZN7TwoWire21i2c_master_byte_writeEi+0x5e>
        if ((timeout--) == 0) {
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	1e5a      	subs	r2, r3, #1
 8006a9a:	60fa      	str	r2, [r7, #12]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	bf0c      	ite	eq
 8006aa0:	2301      	moveq	r3, #1
 8006aa2:	2300      	movne	r3, #0
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d0e2      	beq.n	8006a70 <_ZN7TwoWire21i2c_master_byte_writeEi+0x20>
            return 0;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	e000      	b.n	8006ab0 <_ZN7TwoWire21i2c_master_byte_writeEi+0x60>
        }
    }

    return 1;
 8006aae:	2301      	movs	r3, #1
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <_ZN7TwoWire15i2c_slave_writeEPKci>:

int TwoWire::i2c_slave_write(const char *data, int length)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b089      	sub	sp, #36	; 0x24
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad0:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	dd41      	ble.n	8006b5c <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 8006ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006adc:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae2:	695b      	ldr	r3, [r3, #20]
 8006ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae8:	2b80      	cmp	r3, #128	; 0x80
 8006aea:	bf14      	ite	ne
 8006aec:	2301      	movne	r3, #1
 8006aee:	2300      	moveq	r3, #0
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d008      	beq.n	8006b08 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	3b01      	subs	r3, #1
 8006afa:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1ed      	bne.n	8006ade <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 8006b02:	f04f 33ff 	mov.w	r3, #4294967295
 8006b06:	e068      	b.n	8006bda <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	1c5a      	adds	r2, r3, #1
 8006b0c:	60ba      	str	r2, [r7, #8]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	461a      	mov	r2, r3
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	611a      	str	r2, [r3, #16]
        length--;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	607b      	str	r3, [r7, #4]
        size++;
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b26:	695b      	ldr	r3, [r3, #20]
 8006b28:	f003 0304 	and.w	r3, r3, #4
 8006b2c:	2b04      	cmp	r3, #4
 8006b2e:	d104      	bne.n	8006b3a <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8006b36:	2301      	movs	r3, #1
 8006b38:	e000      	b.n	8006b3c <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d0c8      	beq.n	8006ad2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	1c5a      	adds	r2, r3, #1
 8006b44:	60ba      	str	r2, [r7, #8]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	461a      	mov	r2, r3
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	611a      	str	r2, [r3, #16]
            length--;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	3b01      	subs	r3, #1
 8006b52:	607b      	str	r3, [r7, #4]
            size++;
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	3301      	adds	r3, #1
 8006b58:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 8006b5a:	e7ba      	b.n	8006ad2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 8006b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b60:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b66:	695b      	ldr	r3, [r3, #20]
 8006b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b70:	bf14      	ite	ne
 8006b72:	2301      	movne	r3, #1
 8006b74:	2300      	moveq	r3, #0
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d008      	beq.n	8006b8e <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1ec      	bne.n	8006b62 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 8006b88:	f04f 33ff 	mov.w	r3, #4294967295
 8006b8c:	e025      	b.n	8006bda <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b96:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 8006b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b9c:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	f003 0302 	and.w	r3, r3, #2
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	bf0c      	ite	eq
 8006bac:	2301      	moveq	r3, #1
 8006bae:	2300      	movne	r3, #0
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d008      	beq.n	8006bc8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1ed      	bne.n	8006b9e <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 8006bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8006bc6:	e008      	b.n	8006bda <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 8006bd8:	69bb      	ldr	r3, [r7, #24]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3724      	adds	r7, #36	; 0x24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
	...

08006be8 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf4:	4a12      	ldr	r2, [pc, #72]	; (8006c40 <_ZN7TwoWire15enableInterruptEv+0x58>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d106      	bne.n	8006c08 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8006bfa:	2049      	movs	r0, #73	; 0x49
 8006bfc:	f001 ff76 	bl	8008aec <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8006c00:	2048      	movs	r0, #72	; 0x48
 8006c02:	f001 ff73 	bl	8008aec <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8006c06:	e016      	b.n	8006c36 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c0c:	4a0d      	ldr	r2, [pc, #52]	; (8006c44 <_ZN7TwoWire15enableInterruptEv+0x5c>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d106      	bne.n	8006c20 <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8006c12:	2022      	movs	r0, #34	; 0x22
 8006c14:	f001 ff6a 	bl	8008aec <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8006c18:	2021      	movs	r0, #33	; 0x21
 8006c1a:	f001 ff67 	bl	8008aec <HAL_NVIC_EnableIRQ>
}
 8006c1e:	e00a      	b.n	8006c36 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c24:	4a08      	ldr	r2, [pc, #32]	; (8006c48 <_ZN7TwoWire15enableInterruptEv+0x60>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d105      	bne.n	8006c36 <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8006c2a:	2020      	movs	r0, #32
 8006c2c:	f001 ff5e 	bl	8008aec <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8006c30:	201f      	movs	r0, #31
 8006c32:	f001 ff5b 	bl	8008aec <HAL_NVIC_EnableIRQ>
}
 8006c36:	bf00      	nop
 8006c38:	3708      	adds	r7, #8
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	40005c00 	.word	0x40005c00
 8006c44:	40005800 	.word	0x40005800
 8006c48:	40005400 	.word	0x40005400

08006c4c <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c58:	4a12      	ldr	r2, [pc, #72]	; (8006ca4 <_ZN7TwoWire16disableInterruptEv+0x58>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d106      	bne.n	8006c6c <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8006c5e:	2049      	movs	r0, #73	; 0x49
 8006c60:	f001 ff52 	bl	8008b08 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8006c64:	2048      	movs	r0, #72	; 0x48
 8006c66:	f001 ff4f 	bl	8008b08 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8006c6a:	e016      	b.n	8006c9a <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c70:	4a0d      	ldr	r2, [pc, #52]	; (8006ca8 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d106      	bne.n	8006c84 <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8006c76:	2022      	movs	r0, #34	; 0x22
 8006c78:	f001 ff46 	bl	8008b08 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8006c7c:	2021      	movs	r0, #33	; 0x21
 8006c7e:	f001 ff43 	bl	8008b08 <HAL_NVIC_DisableIRQ>
}
 8006c82:	e00a      	b.n	8006c9a <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c88:	4a08      	ldr	r2, [pc, #32]	; (8006cac <_ZN7TwoWire16disableInterruptEv+0x60>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d105      	bne.n	8006c9a <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8006c8e:	2020      	movs	r0, #32
 8006c90:	f001 ff3a 	bl	8008b08 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8006c94:	201f      	movs	r0, #31
 8006c96:	f001 ff37 	bl	8008b08 <HAL_NVIC_DisableIRQ>
}
 8006c9a:	bf00      	nop
 8006c9c:	3708      	adds	r7, #8
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	40005c00 	.word	0x40005c00
 8006ca8:	40005800 	.word	0x40005800
 8006cac:	40005400 	.word	0x40005400

08006cb0 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d110      	bne.n	8006ce2 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d10b      	bne.n	8006ce2 <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 8006cca:	4908      	ldr	r1, [pc, #32]	; (8006cec <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8006ccc:	4808      	ldr	r0, [pc, #32]	; (8006cf0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006cce:	f7ff fb51 	bl	8006374 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 8006cd2:	4908      	ldr	r1, [pc, #32]	; (8006cf4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8006cd4:	4808      	ldr	r0, [pc, #32]	; (8006cf8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8006cd6:	f7ff fb4d 	bl	8006374 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 8006cda:	4908      	ldr	r1, [pc, #32]	; (8006cfc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8006cdc:	4808      	ldr	r0, [pc, #32]	; (8006d00 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8006cde:	f7ff fb49 	bl	8006374 <_ZN7TwoWireC1EP11I2C_TypeDef>
 8006ce2:	bf00      	nop
 8006ce4:	3708      	adds	r7, #8
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	40005400 	.word	0x40005400
 8006cf0:	20000440 	.word	0x20000440
 8006cf4:	40005800 	.word	0x40005800
 8006cf8:	200004f8 	.word	0x200004f8
 8006cfc:	40005c00 	.word	0x40005c00
 8006d00:	200005b0 	.word	0x200005b0

08006d04 <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 8006d04:	b580      	push	{r7, lr}
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006d0c:	2001      	movs	r0, #1
 8006d0e:	f7ff ffcf 	bl	8006cb0 <_Z41__static_initialization_and_destruction_0ii>
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8006d14:	b590      	push	{r4, r7, lr}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	607a      	str	r2, [r7, #4]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	460b      	mov	r3, r1
 8006d22:	72fb      	strb	r3, [r7, #11]
 8006d24:	4613      	mov	r3, r2
 8006d26:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	685c      	ldr	r4, [r3, #4]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6898      	ldr	r0, [r3, #8]
 8006d30:	893b      	ldrh	r3, [r7, #8]
 8006d32:	7af9      	ldrb	r1, [r7, #11]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	47a0      	blx	r4
 8006d38:	6178      	str	r0, [r7, #20]

  return ret;
 8006d3a:	697b      	ldr	r3, [r7, #20]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	371c      	adds	r7, #28
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd90      	pop	{r4, r7, pc}

08006d44 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8006d44:	b590      	push	{r4, r7, lr}
 8006d46:	b087      	sub	sp, #28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	607a      	str	r2, [r7, #4]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	460b      	mov	r3, r1
 8006d52:	72fb      	strb	r3, [r7, #11]
 8006d54:	4613      	mov	r3, r2
 8006d56:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681c      	ldr	r4, [r3, #0]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6898      	ldr	r0, [r3, #8]
 8006d60:	893b      	ldrh	r3, [r7, #8]
 8006d62:	7af9      	ldrb	r1, [r7, #11]
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	47a0      	blx	r4
 8006d68:	6178      	str	r0, [r7, #20]

  return ret;
 8006d6a:	697b      	ldr	r3, [r7, #20]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	371c      	adds	r7, #28
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd90      	pop	{r4, r7, pc}

08006d74 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	ee07 3a90 	vmov	s15, r3
 8006d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d86:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006da0 <lps22hh_from_lsb_to_hpa+0x2c>
 8006d8a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006d8e:	eef0 7a66 	vmov.f32	s15, s13
}
 8006d92:	eeb0 0a67 	vmov.f32	s0, s15
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	49800000 	.word	0x49800000

08006da4 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	4603      	mov	r3, r0
 8006dac:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8006dae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006db2:	ee07 3a90 	vmov	s15, r3
 8006db6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006dba:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006dd4 <lps22hh_from_lsb_to_celsius+0x30>
 8006dbe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006dc2:	eef0 7a66 	vmov.f32	s15, s13
}
 8006dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr
 8006dd4:	42c80000 	.word	0x42c80000

08006dd8 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	460b      	mov	r3, r1
 8006de2:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006de4:	f107 0208 	add.w	r2, r7, #8
 8006de8:	2301      	movs	r3, #1
 8006dea:	2110      	movs	r1, #16
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f7ff ff91 	bl	8006d14 <lps22hh_read_reg>
 8006df2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10f      	bne.n	8006e1a <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8006dfa:	78fb      	ldrb	r3, [r7, #3]
 8006dfc:	f003 0301 	and.w	r3, r3, #1
 8006e00:	b2da      	uxtb	r2, r3
 8006e02:	7a3b      	ldrb	r3, [r7, #8]
 8006e04:	f362 0341 	bfi	r3, r2, #1, #1
 8006e08:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006e0a:	f107 0208 	add.w	r2, r7, #8
 8006e0e:	2301      	movs	r3, #1
 8006e10:	2110      	movs	r1, #16
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7ff ff96 	bl	8006d44 <lps22hh_write_reg>
 8006e18:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3710      	adds	r7, #16
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8006e30:	f107 0210 	add.w	r2, r7, #16
 8006e34:	2301      	movs	r3, #1
 8006e36:	2110      	movs	r1, #16
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7ff ff6b 	bl	8006d14 <lps22hh_read_reg>
 8006e3e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d107      	bne.n	8006e56 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006e46:	f107 020c 	add.w	r2, r7, #12
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	2111      	movs	r1, #17
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7ff ff60 	bl	8006d14 <lps22hh_read_reg>
 8006e54:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d10f      	bne.n	8006e7c <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8006e5c:	78fb      	ldrb	r3, [r7, #3]
 8006e5e:	f003 0307 	and.w	r3, r3, #7
 8006e62:	b2da      	uxtb	r2, r3
 8006e64:	7c3b      	ldrb	r3, [r7, #16]
 8006e66:	f362 1306 	bfi	r3, r2, #4, #3
 8006e6a:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8006e6c:	f107 0210 	add.w	r2, r7, #16
 8006e70:	2301      	movs	r3, #1
 8006e72:	2110      	movs	r1, #16
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f7ff ff65 	bl	8006d44 <lps22hh_write_reg>
 8006e7a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d119      	bne.n	8006eb6 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8006e82:	78fb      	ldrb	r3, [r7, #3]
 8006e84:	091b      	lsrs	r3, r3, #4
 8006e86:	f003 0301 	and.w	r3, r3, #1
 8006e8a:	b2da      	uxtb	r2, r3
 8006e8c:	7b3b      	ldrb	r3, [r7, #12]
 8006e8e:	f362 0341 	bfi	r3, r2, #1, #1
 8006e92:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8006e94:	78fb      	ldrb	r3, [r7, #3]
 8006e96:	08db      	lsrs	r3, r3, #3
 8006e98:	f003 0301 	and.w	r3, r3, #1
 8006e9c:	b2da      	uxtb	r2, r3
 8006e9e:	7b3b      	ldrb	r3, [r7, #12]
 8006ea0:	f362 0300 	bfi	r3, r2, #0, #1
 8006ea4:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006ea6:	f107 020c 	add.w	r2, r7, #12
 8006eaa:	2301      	movs	r3, #1
 8006eac:	2111      	movs	r1, #17
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7ff ff48 	bl	8006d44 <lps22hh_write_reg>
 8006eb4:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8006eb6:	697b      	ldr	r3, [r7, #20]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3718      	adds	r7, #24
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8006eca:	f107 0208 	add.w	r2, r7, #8
 8006ece:	2301      	movs	r3, #1
 8006ed0:	2127      	movs	r1, #39	; 0x27
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7ff ff1e 	bl	8006d14 <lps22hh_read_reg>
 8006ed8:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 8006eda:	7a3b      	ldrb	r3, [r7, #8]
 8006edc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	701a      	strb	r2, [r3, #0]

  return ret;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b084      	sub	sp, #16
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
 8006efa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8006efc:	f107 0208 	add.w	r2, r7, #8
 8006f00:	2303      	movs	r3, #3
 8006f02:	2128      	movs	r1, #40	; 0x28
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f7ff ff05 	bl	8006d14 <lps22hh_read_reg>
 8006f0a:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8006f0c:	7abb      	ldrb	r3, [r7, #10]
 8006f0e:	461a      	mov	r2, r3
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	021b      	lsls	r3, r3, #8
 8006f1a:	7a7a      	ldrb	r2, [r7, #9]
 8006f1c:	441a      	add	r2, r3
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	021b      	lsls	r3, r3, #8
 8006f28:	7a3a      	ldrb	r2, [r7, #8]
 8006f2a:	441a      	add	r2, r3
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	021a      	lsls	r2, r3, #8
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	601a      	str	r2, [r3, #0]

  return ret;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8006f4e:	f107 0208 	add.w	r2, r7, #8
 8006f52:	2302      	movs	r3, #2
 8006f54:	212b      	movs	r1, #43	; 0x2b
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7ff fedc 	bl	8006d14 <lps22hh_read_reg>
 8006f5c:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8006f5e:	7a7b      	ldrb	r3, [r7, #9]
 8006f60:	b21a      	sxth	r2, r3
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	021b      	lsls	r3, r3, #8
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	7a3b      	ldrb	r3, [r7, #8]
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	4413      	add	r3, r2
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	b21a      	sxth	r2, r3
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	801a      	strh	r2, [r3, #0]

  return ret;
 8006f80:	68fb      	ldr	r3, [r7, #12]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b084      	sub	sp, #16
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
 8006f92:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8006f94:	2301      	movs	r3, #1
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	210f      	movs	r1, #15
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7ff feba 	bl	8006d14 <lps22hh_read_reg>
 8006fa0:	60f8      	str	r0, [r7, #12]

  return ret;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3710      	adds	r7, #16
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8006fb8:	f107 0208 	add.w	r2, r7, #8
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	2111      	movs	r1, #17
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f7ff fea7 	bl	8006d14 <lps22hh_read_reg>
 8006fc6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10f      	bne.n	8006fee <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8006fce:	78fb      	ldrb	r3, [r7, #3]
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	b2da      	uxtb	r2, r3
 8006fd6:	7a3b      	ldrb	r3, [r7, #8]
 8006fd8:	f362 0382 	bfi	r3, r2, #2, #1
 8006fdc:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8006fde:	f107 0208 	add.w	r2, r7, #8
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	2111      	movs	r1, #17
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7ff feac 	bl	8006d44 <lps22hh_write_reg>
 8006fec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006fee:	68fb      	ldr	r3, [r7, #12]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3710      	adds	r7, #16
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8007002:	f107 0208 	add.w	r2, r7, #8
 8007006:	2301      	movs	r3, #1
 8007008:	2111      	movs	r1, #17
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f7ff fe82 	bl	8006d14 <lps22hh_read_reg>
 8007010:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8007012:	7a3b      	ldrb	r3, [r7, #8]
 8007014:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007018:	b2db      	uxtb	r3, r3
 800701a:	461a      	mov	r2, r3
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	701a      	strb	r2, [r3, #0]

  return ret;
 8007020:	68fb      	ldr	r3, [r7, #12]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800702a:	b590      	push	{r4, r7, lr}
 800702c:	b087      	sub	sp, #28
 800702e:	af00      	add	r7, sp, #0
 8007030:	60f8      	str	r0, [r7, #12]
 8007032:	607a      	str	r2, [r7, #4]
 8007034:	461a      	mov	r2, r3
 8007036:	460b      	mov	r3, r1
 8007038:	72fb      	strb	r3, [r7, #11]
 800703a:	4613      	mov	r3, r2
 800703c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	685c      	ldr	r4, [r3, #4]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6898      	ldr	r0, [r3, #8]
 8007046:	893b      	ldrh	r3, [r7, #8]
 8007048:	7af9      	ldrb	r1, [r7, #11]
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	47a0      	blx	r4
 800704e:	6178      	str	r0, [r7, #20]

  return ret;
 8007050:	697b      	ldr	r3, [r7, #20]
}
 8007052:	4618      	mov	r0, r3
 8007054:	371c      	adds	r7, #28
 8007056:	46bd      	mov	sp, r7
 8007058:	bd90      	pop	{r4, r7, pc}

0800705a <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800705a:	b590      	push	{r4, r7, lr}
 800705c:	b087      	sub	sp, #28
 800705e:	af00      	add	r7, sp, #0
 8007060:	60f8      	str	r0, [r7, #12]
 8007062:	607a      	str	r2, [r7, #4]
 8007064:	461a      	mov	r2, r3
 8007066:	460b      	mov	r3, r1
 8007068:	72fb      	strb	r3, [r7, #11]
 800706a:	4613      	mov	r3, r2
 800706c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681c      	ldr	r4, [r3, #0]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6898      	ldr	r0, [r3, #8]
 8007076:	893b      	ldrh	r3, [r7, #8]
 8007078:	7af9      	ldrb	r1, [r7, #11]
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	47a0      	blx	r4
 800707e:	6178      	str	r0, [r7, #20]

  return ret;
 8007080:	697b      	ldr	r3, [r7, #20]
}
 8007082:	4618      	mov	r0, r3
 8007084:	371c      	adds	r7, #28
 8007086:	46bd      	mov	sp, r7
 8007088:	bd90      	pop	{r4, r7, pc}
	...

0800708c <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	4603      	mov	r3, r0
 8007094:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8007096:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800709a:	ee07 3a90 	vmov	s15, r3
 800709e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070a2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80070b8 <lsm6dsr_from_fs2g_to_mg+0x2c>
 80070a6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80070aa:	eeb0 0a67 	vmov.f32	s0, s15
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr
 80070b8:	3d79db23 	.word	0x3d79db23

080070bc <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	4603      	mov	r3, r0
 80070c4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 80070c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070ca:	ee07 3a90 	vmov	s15, r3
 80070ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070d2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80070e8 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 80070d6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80070da:	eeb0 0a67 	vmov.f32	s0, s15
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr
 80070e8:	428c0000 	.word	0x428c0000

080070ec <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	4603      	mov	r3, r0
 80070f4:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 80070f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070fa:	ee07 3a90 	vmov	s15, r3
 80070fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007102:	eddf 6a07 	vldr	s13, [pc, #28]	; 8007120 <lsm6dsr_from_lsb_to_celsius+0x34>
 8007106:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800710a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800710e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8007112:	eeb0 0a67 	vmov.f32	s0, s15
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	43800000 	.word	0x43800000

08007124 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	460b      	mov	r3, r1
 800712e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8007130:	f107 0208 	add.w	r2, r7, #8
 8007134:	2301      	movs	r3, #1
 8007136:	2110      	movs	r1, #16
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f7ff ff76 	bl	800702a <lsm6dsr_read_reg>
 800713e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10f      	bne.n	8007166 <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8007146:	78fb      	ldrb	r3, [r7, #3]
 8007148:	f003 0303 	and.w	r3, r3, #3
 800714c:	b2da      	uxtb	r2, r3
 800714e:	7a3b      	ldrb	r3, [r7, #8]
 8007150:	f362 0383 	bfi	r3, r2, #2, #2
 8007154:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8007156:	f107 0208 	add.w	r2, r7, #8
 800715a:	2301      	movs	r3, #1
 800715c:	2110      	movs	r1, #16
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f7ff ff7b 	bl	800705a <lsm6dsr_write_reg>
 8007164:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8007166:	68fb      	ldr	r3, [r7, #12]
}
 8007168:	4618      	mov	r0, r3
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	460b      	mov	r3, r1
 800717a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 800717c:	78fb      	ldrb	r3, [r7, #3]
 800717e:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8007180:	f107 030c 	add.w	r3, r7, #12
 8007184:	4619      	mov	r1, r3
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 fbb0 	bl	80078ec <lsm6dsr_fsm_enable_get>
 800718c:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	2b00      	cmp	r3, #0
 8007192:	f040 80c4 	bne.w	800731e <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007196:	7b3b      	ldrb	r3, [r7, #12]
 8007198:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800719c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800719e:	7b3b      	ldrb	r3, [r7, #12]
 80071a0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80071a4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80071a6:	4313      	orrs	r3, r2
 80071a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80071aa:	7b3b      	ldrb	r3, [r7, #12]
 80071ac:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80071b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80071b2:	4313      	orrs	r3, r2
 80071b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80071b6:	7b3b      	ldrb	r3, [r7, #12]
 80071b8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80071bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80071be:	4313      	orrs	r3, r2
 80071c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80071c2:	7b3b      	ldrb	r3, [r7, #12]
 80071c4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80071c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80071ca:	4313      	orrs	r3, r2
 80071cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80071ce:	7b3b      	ldrb	r3, [r7, #12]
 80071d0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80071d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80071d6:	4313      	orrs	r3, r2
 80071d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80071da:	7b3b      	ldrb	r3, [r7, #12]
 80071dc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80071e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80071e2:	4313      	orrs	r3, r2
 80071e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80071e6:	7b3b      	ldrb	r3, [r7, #12]
 80071e8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80071ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80071ee:	4313      	orrs	r3, r2
 80071f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80071f2:	7b7b      	ldrb	r3, [r7, #13]
 80071f4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80071f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80071fa:	4313      	orrs	r3, r2
 80071fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80071fe:	7b7b      	ldrb	r3, [r7, #13]
 8007200:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007204:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8007206:	4313      	orrs	r3, r2
 8007208:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800720a:	7b7b      	ldrb	r3, [r7, #13]
 800720c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007210:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8007212:	4313      	orrs	r3, r2
 8007214:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8007216:	7b7b      	ldrb	r3, [r7, #13]
 8007218:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800721c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800721e:	4313      	orrs	r3, r2
 8007220:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8007222:	7b7b      	ldrb	r3, [r7, #13]
 8007224:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007228:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800722a:	4313      	orrs	r3, r2
 800722c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800722e:	7b7b      	ldrb	r3, [r7, #13]
 8007230:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007234:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8007236:	4313      	orrs	r3, r2
 8007238:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800723a:	7b7b      	ldrb	r3, [r7, #13]
 800723c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007240:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8007242:	4313      	orrs	r3, r2
 8007244:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8007246:	7b7b      	ldrb	r3, [r7, #13]
 8007248:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800724c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800724e:	4313      	orrs	r3, r2
 8007250:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007252:	2b01      	cmp	r3, #1
 8007254:	d163      	bne.n	800731e <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8007256:	f107 030b 	add.w	r3, r7, #11
 800725a:	4619      	mov	r1, r3
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fb71 	bl	8007944 <lsm6dsr_fsm_data_rate_get>
 8007262:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d159      	bne.n	800731e <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800726a:	7afb      	ldrb	r3, [r7, #11]
 800726c:	2b03      	cmp	r3, #3
 800726e:	d853      	bhi.n	8007318 <lsm6dsr_xl_data_rate_set+0x1a8>
 8007270:	a201      	add	r2, pc, #4	; (adr r2, 8007278 <lsm6dsr_xl_data_rate_set+0x108>)
 8007272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007276:	bf00      	nop
 8007278:	08007289 	.word	0x08007289
 800727c:	0800729b 	.word	0x0800729b
 8007280:	080072b9 	.word	0x080072b9
 8007284:	080072e3 	.word	0x080072e3
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8007288:	78fb      	ldrb	r3, [r7, #3]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d102      	bne.n	8007294 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 800728e:	2301      	movs	r3, #1
 8007290:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8007292:	e045      	b.n	8007320 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8007294:	78fb      	ldrb	r3, [r7, #3]
 8007296:	75fb      	strb	r3, [r7, #23]
            break;
 8007298:	e042      	b.n	8007320 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 800729a:	78fb      	ldrb	r3, [r7, #3]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d102      	bne.n	80072a6 <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 80072a0:	2302      	movs	r3, #2
 80072a2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80072a4:	e03c      	b.n	8007320 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80072a6:	78fb      	ldrb	r3, [r7, #3]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d102      	bne.n	80072b2 <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 80072ac:	2302      	movs	r3, #2
 80072ae:	75fb      	strb	r3, [r7, #23]
            break;
 80072b0:	e036      	b.n	8007320 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80072b2:	78fb      	ldrb	r3, [r7, #3]
 80072b4:	75fb      	strb	r3, [r7, #23]
            break;
 80072b6:	e033      	b.n	8007320 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80072b8:	78fb      	ldrb	r3, [r7, #3]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d102      	bne.n	80072c4 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80072be:	2303      	movs	r3, #3
 80072c0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80072c2:	e02d      	b.n	8007320 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80072c4:	78fb      	ldrb	r3, [r7, #3]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d102      	bne.n	80072d0 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80072ca:	2303      	movs	r3, #3
 80072cc:	75fb      	strb	r3, [r7, #23]
            break;
 80072ce:	e027      	b.n	8007320 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 80072d0:	78fb      	ldrb	r3, [r7, #3]
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d102      	bne.n	80072dc <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80072d6:	2303      	movs	r3, #3
 80072d8:	75fb      	strb	r3, [r7, #23]
            break;
 80072da:	e021      	b.n	8007320 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80072dc:	78fb      	ldrb	r3, [r7, #3]
 80072de:	75fb      	strb	r3, [r7, #23]
            break;
 80072e0:	e01e      	b.n	8007320 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80072e2:	78fb      	ldrb	r3, [r7, #3]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d102      	bne.n	80072ee <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80072e8:	2304      	movs	r3, #4
 80072ea:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80072ec:	e018      	b.n	8007320 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80072ee:	78fb      	ldrb	r3, [r7, #3]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d102      	bne.n	80072fa <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80072f4:	2304      	movs	r3, #4
 80072f6:	75fb      	strb	r3, [r7, #23]
            break;
 80072f8:	e012      	b.n	8007320 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 80072fa:	78fb      	ldrb	r3, [r7, #3]
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d102      	bne.n	8007306 <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8007300:	2304      	movs	r3, #4
 8007302:	75fb      	strb	r3, [r7, #23]
            break;
 8007304:	e00c      	b.n	8007320 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 8007306:	78fb      	ldrb	r3, [r7, #3]
 8007308:	2b03      	cmp	r3, #3
 800730a:	d102      	bne.n	8007312 <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 800730c:	2304      	movs	r3, #4
 800730e:	75fb      	strb	r3, [r7, #23]
            break;
 8007310:	e006      	b.n	8007320 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8007312:	78fb      	ldrb	r3, [r7, #3]
 8007314:	75fb      	strb	r3, [r7, #23]
            break;
 8007316:	e003      	b.n	8007320 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8007318:	78fb      	ldrb	r3, [r7, #3]
 800731a:	75fb      	strb	r3, [r7, #23]
            break;
 800731c:	e000      	b.n	8007320 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 800731e:	bf00      	nop
    }
  }

  if (ret == 0)
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d107      	bne.n	8007336 <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8007326:	f107 0208 	add.w	r2, r7, #8
 800732a:	2301      	movs	r3, #1
 800732c:	2110      	movs	r1, #16
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7ff fe7b 	bl	800702a <lsm6dsr_read_reg>
 8007334:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10f      	bne.n	800735c <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 800733c:	7dfb      	ldrb	r3, [r7, #23]
 800733e:	f003 030f 	and.w	r3, r3, #15
 8007342:	b2da      	uxtb	r2, r3
 8007344:	7a3b      	ldrb	r3, [r7, #8]
 8007346:	f362 1307 	bfi	r3, r2, #4, #4
 800734a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 800734c:	f107 0208 	add.w	r2, r7, #8
 8007350:	2301      	movs	r3, #1
 8007352:	2110      	movs	r1, #16
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f7ff fe80 	bl	800705a <lsm6dsr_write_reg>
 800735a:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800735c:	693b      	ldr	r3, [r7, #16]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3718      	adds	r7, #24
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop

08007368 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	460b      	mov	r3, r1
 8007372:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007374:	f107 0208 	add.w	r2, r7, #8
 8007378:	2301      	movs	r3, #1
 800737a:	2111      	movs	r1, #17
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f7ff fe54 	bl	800702a <lsm6dsr_read_reg>
 8007382:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10f      	bne.n	80073aa <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 800738a:	78fb      	ldrb	r3, [r7, #3]
 800738c:	f003 030f 	and.w	r3, r3, #15
 8007390:	b2da      	uxtb	r2, r3
 8007392:	7a3b      	ldrb	r3, [r7, #8]
 8007394:	f362 0303 	bfi	r3, r2, #0, #4
 8007398:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800739a:	f107 0208 	add.w	r2, r7, #8
 800739e:	2301      	movs	r3, #1
 80073a0:	2111      	movs	r1, #17
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f7ff fe59 	bl	800705a <lsm6dsr_write_reg>
 80073a8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80073aa:	68fb      	ldr	r3, [r7, #12]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 80073c0:	78fb      	ldrb	r3, [r7, #3]
 80073c2:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 80073c4:	f107 030c 	add.w	r3, r7, #12
 80073c8:	4619      	mov	r1, r3
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 fa8e 	bl	80078ec <lsm6dsr_fsm_enable_get>
 80073d0:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f040 80c4 	bne.w	8007562 <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80073da:	7b3b      	ldrb	r3, [r7, #12]
 80073dc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80073e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80073e2:	7b3b      	ldrb	r3, [r7, #12]
 80073e4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80073e8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80073ea:	4313      	orrs	r3, r2
 80073ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80073ee:	7b3b      	ldrb	r3, [r7, #12]
 80073f0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80073f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80073f6:	4313      	orrs	r3, r2
 80073f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80073fa:	7b3b      	ldrb	r3, [r7, #12]
 80073fc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007400:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8007402:	4313      	orrs	r3, r2
 8007404:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8007406:	7b3b      	ldrb	r3, [r7, #12]
 8007408:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800740c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800740e:	4313      	orrs	r3, r2
 8007410:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8007412:	7b3b      	ldrb	r3, [r7, #12]
 8007414:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007418:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800741a:	4313      	orrs	r3, r2
 800741c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800741e:	7b3b      	ldrb	r3, [r7, #12]
 8007420:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007424:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8007426:	4313      	orrs	r3, r2
 8007428:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800742a:	7b3b      	ldrb	r3, [r7, #12]
 800742c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007430:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8007432:	4313      	orrs	r3, r2
 8007434:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8007436:	7b7b      	ldrb	r3, [r7, #13]
 8007438:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800743c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800743e:	4313      	orrs	r3, r2
 8007440:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8007442:	7b7b      	ldrb	r3, [r7, #13]
 8007444:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007448:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800744a:	4313      	orrs	r3, r2
 800744c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800744e:	7b7b      	ldrb	r3, [r7, #13]
 8007450:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007454:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8007456:	4313      	orrs	r3, r2
 8007458:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800745a:	7b7b      	ldrb	r3, [r7, #13]
 800745c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007460:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8007462:	4313      	orrs	r3, r2
 8007464:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8007466:	7b7b      	ldrb	r3, [r7, #13]
 8007468:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800746c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800746e:	4313      	orrs	r3, r2
 8007470:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8007472:	7b7b      	ldrb	r3, [r7, #13]
 8007474:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007478:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800747a:	4313      	orrs	r3, r2
 800747c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800747e:	7b7b      	ldrb	r3, [r7, #13]
 8007480:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007484:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8007486:	4313      	orrs	r3, r2
 8007488:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800748a:	7b7b      	ldrb	r3, [r7, #13]
 800748c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007490:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8007492:	4313      	orrs	r3, r2
 8007494:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007496:	2b01      	cmp	r3, #1
 8007498:	d163      	bne.n	8007562 <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 800749a:	f107 030b 	add.w	r3, r7, #11
 800749e:	4619      	mov	r1, r3
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fa4f 	bl	8007944 <lsm6dsr_fsm_data_rate_get>
 80074a6:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d159      	bne.n	8007562 <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80074ae:	7afb      	ldrb	r3, [r7, #11]
 80074b0:	2b03      	cmp	r3, #3
 80074b2:	d853      	bhi.n	800755c <lsm6dsr_gy_data_rate_set+0x1a8>
 80074b4:	a201      	add	r2, pc, #4	; (adr r2, 80074bc <lsm6dsr_gy_data_rate_set+0x108>)
 80074b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ba:	bf00      	nop
 80074bc:	080074cd 	.word	0x080074cd
 80074c0:	080074df 	.word	0x080074df
 80074c4:	080074fd 	.word	0x080074fd
 80074c8:	08007527 	.word	0x08007527
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 80074cc:	78fb      	ldrb	r3, [r7, #3]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d102      	bne.n	80074d8 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 80074d2:	2301      	movs	r3, #1
 80074d4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80074d6:	e045      	b.n	8007564 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80074d8:	78fb      	ldrb	r3, [r7, #3]
 80074da:	75fb      	strb	r3, [r7, #23]
            break;
 80074dc:	e042      	b.n	8007564 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80074de:	78fb      	ldrb	r3, [r7, #3]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d102      	bne.n	80074ea <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 80074e4:	2302      	movs	r3, #2
 80074e6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80074e8:	e03c      	b.n	8007564 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80074ea:	78fb      	ldrb	r3, [r7, #3]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d102      	bne.n	80074f6 <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 80074f0:	2302      	movs	r3, #2
 80074f2:	75fb      	strb	r3, [r7, #23]
            break;
 80074f4:	e036      	b.n	8007564 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80074f6:	78fb      	ldrb	r3, [r7, #3]
 80074f8:	75fb      	strb	r3, [r7, #23]
            break;
 80074fa:	e033      	b.n	8007564 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80074fc:	78fb      	ldrb	r3, [r7, #3]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d102      	bne.n	8007508 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8007502:	2303      	movs	r3, #3
 8007504:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8007506:	e02d      	b.n	8007564 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8007508:	78fb      	ldrb	r3, [r7, #3]
 800750a:	2b01      	cmp	r3, #1
 800750c:	d102      	bne.n	8007514 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800750e:	2303      	movs	r3, #3
 8007510:	75fb      	strb	r3, [r7, #23]
            break;
 8007512:	e027      	b.n	8007564 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8007514:	78fb      	ldrb	r3, [r7, #3]
 8007516:	2b02      	cmp	r3, #2
 8007518:	d102      	bne.n	8007520 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800751a:	2303      	movs	r3, #3
 800751c:	75fb      	strb	r3, [r7, #23]
            break;
 800751e:	e021      	b.n	8007564 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8007520:	78fb      	ldrb	r3, [r7, #3]
 8007522:	75fb      	strb	r3, [r7, #23]
            break;
 8007524:	e01e      	b.n	8007564 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8007526:	78fb      	ldrb	r3, [r7, #3]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d102      	bne.n	8007532 <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 800752c:	2304      	movs	r3, #4
 800752e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8007530:	e018      	b.n	8007564 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8007532:	78fb      	ldrb	r3, [r7, #3]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d102      	bne.n	800753e <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8007538:	2304      	movs	r3, #4
 800753a:	75fb      	strb	r3, [r7, #23]
            break;
 800753c:	e012      	b.n	8007564 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 800753e:	78fb      	ldrb	r3, [r7, #3]
 8007540:	2b02      	cmp	r3, #2
 8007542:	d102      	bne.n	800754a <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8007544:	2304      	movs	r3, #4
 8007546:	75fb      	strb	r3, [r7, #23]
            break;
 8007548:	e00c      	b.n	8007564 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 800754a:	78fb      	ldrb	r3, [r7, #3]
 800754c:	2b03      	cmp	r3, #3
 800754e:	d102      	bne.n	8007556 <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8007550:	2304      	movs	r3, #4
 8007552:	75fb      	strb	r3, [r7, #23]
            break;
 8007554:	e006      	b.n	8007564 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8007556:	78fb      	ldrb	r3, [r7, #3]
 8007558:	75fb      	strb	r3, [r7, #23]
            break;
 800755a:	e003      	b.n	8007564 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 800755c:	78fb      	ldrb	r3, [r7, #3]
 800755e:	75fb      	strb	r3, [r7, #23]
            break;
 8007560:	e000      	b.n	8007564 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 8007562:	bf00      	nop
    }
  }

  if (ret == 0)
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d107      	bne.n	800757a <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800756a:	f107 0208 	add.w	r2, r7, #8
 800756e:	2301      	movs	r3, #1
 8007570:	2111      	movs	r1, #17
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f7ff fd59 	bl	800702a <lsm6dsr_read_reg>
 8007578:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d10f      	bne.n	80075a0 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8007580:	7dfb      	ldrb	r3, [r7, #23]
 8007582:	f003 030f 	and.w	r3, r3, #15
 8007586:	b2da      	uxtb	r2, r3
 8007588:	7a3b      	ldrb	r3, [r7, #8]
 800758a:	f362 1307 	bfi	r3, r2, #4, #4
 800758e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007590:	f107 0208 	add.w	r2, r7, #8
 8007594:	2301      	movs	r3, #1
 8007596:	2111      	movs	r1, #17
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f7ff fd5e 	bl	800705a <lsm6dsr_write_reg>
 800759e:	6138      	str	r0, [r7, #16]
  }

  return ret;
 80075a0:	693b      	ldr	r3, [r7, #16]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3718      	adds	r7, #24
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop

080075ac <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	460b      	mov	r3, r1
 80075b6:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80075b8:	f107 0208 	add.w	r2, r7, #8
 80075bc:	2301      	movs	r3, #1
 80075be:	2112      	movs	r1, #18
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f7ff fd32 	bl	800702a <lsm6dsr_read_reg>
 80075c6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10f      	bne.n	80075ee <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 80075ce:	78fb      	ldrb	r3, [r7, #3]
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	b2da      	uxtb	r2, r3
 80075d6:	7a3b      	ldrb	r3, [r7, #8]
 80075d8:	f362 1386 	bfi	r3, r2, #6, #1
 80075dc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80075de:	f107 0208 	add.w	r2, r7, #8
 80075e2:	2301      	movs	r3, #1
 80075e4:	2112      	movs	r1, #18
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f7ff fd37 	bl	800705a <lsm6dsr_write_reg>
 80075ec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80075ee:	68fb      	ldr	r3, [r7, #12]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8007602:	f107 0208 	add.w	r2, r7, #8
 8007606:	2301      	movs	r3, #1
 8007608:	211e      	movs	r1, #30
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f7ff fd0d 	bl	800702a <lsm6dsr_read_reg>
 8007610:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 8007612:	7a3b      	ldrb	r3, [r7, #8]
 8007614:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007618:	b2db      	uxtb	r3, r3
 800761a:	461a      	mov	r2, r3
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	701a      	strb	r2, [r3, #0]

  return ret;
 8007620:	68fb      	ldr	r3, [r7, #12]
}
 8007622:	4618      	mov	r0, r3
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b084      	sub	sp, #16
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8007634:	f107 0208 	add.w	r2, r7, #8
 8007638:	2301      	movs	r3, #1
 800763a:	211e      	movs	r1, #30
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f7ff fcf4 	bl	800702a <lsm6dsr_read_reg>
 8007642:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8007644:	7a3b      	ldrb	r3, [r7, #8]
 8007646:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800764a:	b2db      	uxtb	r3, r3
 800764c:	461a      	mov	r2, r3
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	701a      	strb	r2, [r3, #0]

  return ret;
 8007652:	68fb      	ldr	r3, [r7, #12]
}
 8007654:	4618      	mov	r0, r3
 8007656:	3710      	adds	r7, #16
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8007666:	f107 0208 	add.w	r2, r7, #8
 800766a:	2301      	movs	r3, #1
 800766c:	211e      	movs	r1, #30
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f7ff fcdb 	bl	800702a <lsm6dsr_read_reg>
 8007674:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 8007676:	7a3b      	ldrb	r3, [r7, #8]
 8007678:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800767c:	b2db      	uxtb	r3, r3
 800767e:	461a      	mov	r2, r3
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	701a      	strb	r2, [r3, #0]

  return ret;
 8007684:	68fb      	ldr	r3, [r7, #12]
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b084      	sub	sp, #16
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
 8007696:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 8007698:	f107 0208 	add.w	r2, r7, #8
 800769c:	2302      	movs	r3, #2
 800769e:	2120      	movs	r1, #32
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f7ff fcc2 	bl	800702a <lsm6dsr_read_reg>
 80076a6:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 80076a8:	7a7b      	ldrb	r3, [r7, #9]
 80076aa:	b21a      	sxth	r2, r3
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	021b      	lsls	r3, r3, #8
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	7a3b      	ldrb	r3, [r7, #8]
 80076be:	b29b      	uxth	r3, r3
 80076c0:	4413      	add	r3, r2
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	b21a      	sxth	r2, r3
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	801a      	strh	r2, [r3, #0]

  return ret;
 80076ca:	68fb      	ldr	r3, [r7, #12]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b086      	sub	sp, #24
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 80076de:	f107 020c 	add.w	r2, r7, #12
 80076e2:	2306      	movs	r3, #6
 80076e4:	2122      	movs	r1, #34	; 0x22
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f7ff fc9f 	bl	800702a <lsm6dsr_read_reg>
 80076ec:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80076ee:	7b7b      	ldrb	r3, [r7, #13]
 80076f0:	b21a      	sxth	r2, r3
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	021b      	lsls	r3, r3, #8
 8007700:	b29a      	uxth	r2, r3
 8007702:	7b3b      	ldrb	r3, [r7, #12]
 8007704:	b29b      	uxth	r3, r3
 8007706:	4413      	add	r3, r2
 8007708:	b29b      	uxth	r3, r3
 800770a:	b21a      	sxth	r2, r3
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007710:	7bfa      	ldrb	r2, [r7, #15]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	3302      	adds	r3, #2
 8007716:	b212      	sxth	r2, r2
 8007718:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	3302      	adds	r3, #2
 800771e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007722:	b29b      	uxth	r3, r3
 8007724:	021b      	lsls	r3, r3, #8
 8007726:	b29a      	uxth	r2, r3
 8007728:	7bbb      	ldrb	r3, [r7, #14]
 800772a:	b29b      	uxth	r3, r3
 800772c:	4413      	add	r3, r2
 800772e:	b29a      	uxth	r2, r3
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	3302      	adds	r3, #2
 8007734:	b212      	sxth	r2, r2
 8007736:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007738:	7c7a      	ldrb	r2, [r7, #17]
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	3304      	adds	r3, #4
 800773e:	b212      	sxth	r2, r2
 8007740:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	3304      	adds	r3, #4
 8007746:	f9b3 3000 	ldrsh.w	r3, [r3]
 800774a:	b29b      	uxth	r3, r3
 800774c:	021b      	lsls	r3, r3, #8
 800774e:	b29a      	uxth	r2, r3
 8007750:	7c3b      	ldrb	r3, [r7, #16]
 8007752:	b29b      	uxth	r3, r3
 8007754:	4413      	add	r3, r2
 8007756:	b29a      	uxth	r2, r3
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	3304      	adds	r3, #4
 800775c:	b212      	sxth	r2, r2
 800775e:	801a      	strh	r2, [r3, #0]

  return ret;
 8007760:	697b      	ldr	r3, [r7, #20]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3718      	adds	r7, #24
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b086      	sub	sp, #24
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
 8007772:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 8007774:	f107 020c 	add.w	r2, r7, #12
 8007778:	2306      	movs	r3, #6
 800777a:	2128      	movs	r1, #40	; 0x28
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f7ff fc54 	bl	800702a <lsm6dsr_read_reg>
 8007782:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007784:	7b7b      	ldrb	r3, [r7, #13]
 8007786:	b21a      	sxth	r2, r3
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007792:	b29b      	uxth	r3, r3
 8007794:	021b      	lsls	r3, r3, #8
 8007796:	b29a      	uxth	r2, r3
 8007798:	7b3b      	ldrb	r3, [r7, #12]
 800779a:	b29b      	uxth	r3, r3
 800779c:	4413      	add	r3, r2
 800779e:	b29b      	uxth	r3, r3
 80077a0:	b21a      	sxth	r2, r3
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80077a6:	7bfa      	ldrb	r2, [r7, #15]
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	3302      	adds	r3, #2
 80077ac:	b212      	sxth	r2, r2
 80077ae:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	3302      	adds	r3, #2
 80077b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	021b      	lsls	r3, r3, #8
 80077bc:	b29a      	uxth	r2, r3
 80077be:	7bbb      	ldrb	r3, [r7, #14]
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	4413      	add	r3, r2
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	3302      	adds	r3, #2
 80077ca:	b212      	sxth	r2, r2
 80077cc:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80077ce:	7c7a      	ldrb	r2, [r7, #17]
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	3304      	adds	r3, #4
 80077d4:	b212      	sxth	r2, r2
 80077d6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	3304      	adds	r3, #4
 80077dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	021b      	lsls	r3, r3, #8
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	7c3b      	ldrb	r3, [r7, #16]
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	4413      	add	r3, r2
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	3304      	adds	r3, #4
 80077f2:	b212      	sxth	r2, r2
 80077f4:	801a      	strh	r2, [r3, #0]

  return ret;
 80077f6:	697b      	ldr	r3, [r7, #20]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3718      	adds	r7, #24
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	460b      	mov	r3, r1
 800780a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 800780c:	f107 0208 	add.w	r2, r7, #8
 8007810:	2301      	movs	r3, #1
 8007812:	2101      	movs	r1, #1
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f7ff fc08 	bl	800702a <lsm6dsr_read_reg>
 800781a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10f      	bne.n	8007842 <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 8007822:	78fb      	ldrb	r3, [r7, #3]
 8007824:	f003 0303 	and.w	r3, r3, #3
 8007828:	b2da      	uxtb	r2, r3
 800782a:	7a3b      	ldrb	r3, [r7, #8]
 800782c:	f362 1387 	bfi	r3, r2, #6, #2
 8007830:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8007832:	f107 0208 	add.w	r2, r7, #8
 8007836:	2301      	movs	r3, #1
 8007838:	2101      	movs	r1, #1
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7ff fc0d 	bl	800705a <lsm6dsr_write_reg>
 8007840:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8007842:	68fb      	ldr	r3, [r7, #12]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3710      	adds	r7, #16
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 8007856:	2301      	movs	r3, #1
 8007858:	683a      	ldr	r2, [r7, #0]
 800785a:	210f      	movs	r1, #15
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f7ff fbe4 	bl	800702a <lsm6dsr_read_reg>
 8007862:	60f8      	str	r0, [r7, #12]

  return ret;
 8007864:	68fb      	ldr	r3, [r7, #12]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b084      	sub	sp, #16
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	460b      	mov	r3, r1
 8007878:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800787a:	f107 0208 	add.w	r2, r7, #8
 800787e:	2301      	movs	r3, #1
 8007880:	2112      	movs	r1, #18
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7ff fbd1 	bl	800702a <lsm6dsr_read_reg>
 8007888:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10f      	bne.n	80078b0 <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8007890:	78fb      	ldrb	r3, [r7, #3]
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	b2da      	uxtb	r2, r3
 8007898:	7a3b      	ldrb	r3, [r7, #8]
 800789a:	f362 0300 	bfi	r3, r2, #0, #1
 800789e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80078a0:	f107 0208 	add.w	r2, r7, #8
 80078a4:	2301      	movs	r3, #1
 80078a6:	2112      	movs	r1, #18
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f7ff fbd6 	bl	800705a <lsm6dsr_write_reg>
 80078ae:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80078b0:	68fb      	ldr	r3, [r7, #12]
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3710      	adds	r7, #16
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b084      	sub	sp, #16
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
 80078c2:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80078c4:	f107 0208 	add.w	r2, r7, #8
 80078c8:	2301      	movs	r3, #1
 80078ca:	2112      	movs	r1, #18
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f7ff fbac 	bl	800702a <lsm6dsr_read_reg>
 80078d2:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 80078d4:	7a3b      	ldrb	r3, [r7, #8]
 80078d6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	461a      	mov	r2, r3
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	701a      	strb	r2, [r3, #0]

  return ret;
 80078e2:	68fb      	ldr	r3, [r7, #12]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80078f6:	2102      	movs	r1, #2
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f7ff ff81 	bl	8007800 <lsm6dsr_mem_bank_set>
 80078fe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d106      	bne.n	8007914 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 8007906:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 8007908:	2301      	movs	r3, #1
 800790a:	2146      	movs	r1, #70	; 0x46
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f7ff fb8c 	bl	800702a <lsm6dsr_read_reg>
 8007912:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d107      	bne.n	800792a <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 800791e:	2301      	movs	r3, #1
 8007920:	2147      	movs	r1, #71	; 0x47
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7ff fb81 	bl	800702a <lsm6dsr_read_reg>
 8007928:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d104      	bne.n	800793a <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8007930:	2100      	movs	r1, #0
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7ff ff64 	bl	8007800 <lsm6dsr_mem_bank_set>
 8007938:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800793a:	68fb      	ldr	r3, [r7, #12]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800794e:	2102      	movs	r1, #2
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f7ff ff55 	bl	8007800 <lsm6dsr_mem_bank_set>
 8007956:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d107      	bne.n	800796e <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 800795e:	f107 0208 	add.w	r2, r7, #8
 8007962:	2301      	movs	r3, #1
 8007964:	215f      	movs	r1, #95	; 0x5f
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f7ff fb5f 	bl	800702a <lsm6dsr_read_reg>
 800796c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d104      	bne.n	800797e <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8007974:	2100      	movs	r1, #0
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f7ff ff42 	bl	8007800 <lsm6dsr_mem_bank_set>
 800797c:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 800797e:	7a3b      	ldrb	r3, [r7, #8]
 8007980:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b03      	cmp	r3, #3
 8007988:	d81a      	bhi.n	80079c0 <lsm6dsr_fsm_data_rate_get+0x7c>
 800798a:	a201      	add	r2, pc, #4	; (adr r2, 8007990 <lsm6dsr_fsm_data_rate_get+0x4c>)
 800798c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007990:	080079a1 	.word	0x080079a1
 8007994:	080079a9 	.word	0x080079a9
 8007998:	080079b1 	.word	0x080079b1
 800799c:	080079b9 	.word	0x080079b9
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	2200      	movs	r2, #0
 80079a4:	701a      	strb	r2, [r3, #0]
      break;
 80079a6:	e00f      	b.n	80079c8 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	2201      	movs	r2, #1
 80079ac:	701a      	strb	r2, [r3, #0]
      break;
 80079ae:	e00b      	b.n	80079c8 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	2202      	movs	r2, #2
 80079b4:	701a      	strb	r2, [r3, #0]
      break;
 80079b6:	e007      	b.n	80079c8 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	2203      	movs	r2, #3
 80079bc:	701a      	strb	r2, [r3, #0]
      break;
 80079be:	e003      	b.n	80079c8 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	2200      	movs	r2, #0
 80079c4:	701a      	strb	r2, [r3, #0]
      break;
 80079c6:	bf00      	nop
  }

  return ret;
 80079c8:	68fb      	ldr	r3, [r7, #12]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop

080079d4 <HAL_RTC_AlarmAEventCallback>:
								0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
								0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
								0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59};

/*You cannot put these in the user callbacks section and I don't know why (can put in user begin 4)*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),(uint8_t*)"AlarmA\r\n", 8, HAL_MAX_DELAY);
 80079dc:	f04f 33ff 	mov.w	r3, #4294967295
 80079e0:	2208      	movs	r2, #8
 80079e2:	4905      	ldr	r1, [pc, #20]	; (80079f8 <HAL_RTC_AlarmAEventCallback+0x24>)
 80079e4:	4805      	ldr	r0, [pc, #20]	; (80079fc <HAL_RTC_AlarmAEventCallback+0x28>)
 80079e6:	f006 fd2c 	bl	800e442 <HAL_UART_Transmit>
	flagA = 1;
 80079ea:	4b05      	ldr	r3, [pc, #20]	; (8007a00 <HAL_RTC_AlarmAEventCallback+0x2c>)
 80079ec:	2201      	movs	r2, #1
 80079ee:	701a      	strb	r2, [r3, #0]
}
 80079f0:	bf00      	nop
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	080212c8 	.word	0x080212c8
 80079fc:	20006de0 	.word	0x20006de0
 8007a00:	200006a8 	.word	0x200006a8

08007a04 <MRT_SetupRTOS>:
}




void MRT_SetupRTOS(RTC_HandleTypeDef* hrtc, UART_HandleTypeDef uart,uint8_t sleepT){
 8007a04:	b084      	sub	sp, #16
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b082      	sub	sp, #8
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
 8007a0e:	f107 0014 	add.w	r0, r7, #20
 8007a12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	rtc = hrtc;
 8007a16:	4a0f      	ldr	r2, [pc, #60]	; (8007a54 <MRT_SetupRTOS+0x50>)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6013      	str	r3, [r2, #0]
	rtos.huart = uart;
 8007a1c:	4b0e      	ldr	r3, [pc, #56]	; (8007a58 <MRT_SetupRTOS+0x54>)
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f107 0314 	add.w	r3, r7, #20
 8007a24:	2244      	movs	r2, #68	; 0x44
 8007a26:	4619      	mov	r1, r3
 8007a28:	f012 fe88 	bl	801a73c <memcpy>
	rtos.sleepTime = sleepT;
 8007a2c:	4a0a      	ldr	r2, [pc, #40]	; (8007a58 <MRT_SetupRTOS+0x54>)
 8007a2e:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8007a32:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTOS\r\n", 17, HAL_MAX_DELAY);
 8007a36:	f04f 33ff 	mov.w	r3, #4294967295
 8007a3a:	2211      	movs	r2, #17
 8007a3c:	4907      	ldr	r1, [pc, #28]	; (8007a5c <MRT_SetupRTOS+0x58>)
 8007a3e:	4806      	ldr	r0, [pc, #24]	; (8007a58 <MRT_SetupRTOS+0x54>)
 8007a40:	f006 fcff 	bl	800e442 <HAL_UART_Transmit>
}
 8007a44:	bf00      	nop
 8007a46:	3708      	adds	r7, #8
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a4e:	b004      	add	sp, #16
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	20006e28 	.word	0x20006e28
 8007a58:	20006de0 	.word	0x20006de0
 8007a5c:	080212e0 	.word	0x080212e0

08007a60 <MRT_WUProcedure>:



void MRT_WUProcedure(void){
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8007a66:	4b15      	ldr	r3, [pc, #84]	; (8007abc <MRT_WUProcedure+0x5c>)
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	f003 0302 	and.w	r3, r3, #2
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d11e      	bne.n	8007ab0 <MRT_WUProcedure+0x50>
	{

		wu_flag = 1;
 8007a72:	4b13      	ldr	r3, [pc, #76]	; (8007ac0 <MRT_WUProcedure+0x60>)
 8007a74:	2201      	movs	r2, #1
 8007a76:	701a      	strb	r2, [r3, #0]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8007a78:	4b10      	ldr	r3, [pc, #64]	; (8007abc <MRT_WUProcedure+0x5c>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a0f      	ldr	r2, [pc, #60]	; (8007abc <MRT_WUProcedure+0x5c>)
 8007a7e:	f043 0308 	orr.w	r3, r3, #8
 8007a82:	6013      	str	r3, [r2, #0]

		/** display  the string **/
		char *str = "Wakeup from the STANDBY MODE\r\n";
 8007a84:	4b0f      	ldr	r3, [pc, #60]	; (8007ac4 <MRT_WUProcedure+0x64>)
 8007a86:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit(&(rtos.huart), (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f7f8 fbb1 	bl	80001f0 <strlen>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	f04f 33ff 	mov.w	r3, #4294967295
 8007a96:	6879      	ldr	r1, [r7, #4]
 8007a98:	480b      	ldr	r0, [pc, #44]	; (8007ac8 <MRT_WUProcedure+0x68>)
 8007a9a:	f006 fcd2 	bl	800e442 <HAL_UART_Transmit>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8007a9e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007aa2:	f003 fc8d 	bl	800b3c0 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(rtc);
 8007aa6:	4b09      	ldr	r3, [pc, #36]	; (8007acc <MRT_WUProcedure+0x6c>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f005 f886 	bl	800cbbc <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_ClearFlags();
 8007ab0:	f000 f80e 	bl	8007ad0 <MRT_ClearFlags>
}
 8007ab4:	bf00      	nop
 8007ab6:	3708      	adds	r7, #8
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	40007000 	.word	0x40007000
 8007ac0:	200006a9 	.word	0x200006a9
 8007ac4:	080212f4 	.word	0x080212f4
 8007ac8:	20006de0 	.word	0x20006de0
 8007acc:	20006e28 	.word	0x20006e28

08007ad0 <MRT_ClearFlags>:


void MRT_ClearFlags(void){
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	HAL_UART_Transmit(&(rtos.huart),"Clearing the flags\r\n", 20, HAL_MAX_DELAY);
 8007ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ad8:	2214      	movs	r2, #20
 8007ada:	4939      	ldr	r1, [pc, #228]	; (8007bc0 <MRT_ClearFlags+0xf0>)
 8007adc:	4839      	ldr	r0, [pc, #228]	; (8007bc4 <MRT_ClearFlags+0xf4>)
 8007ade:	f006 fcb0 	bl	800e442 <HAL_UART_Transmit>
	  	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(rtc);
 8007ae2:	4b39      	ldr	r3, [pc, #228]	; (8007bc8 <MRT_ClearFlags+0xf8>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	22ca      	movs	r2, #202	; 0xca
 8007aea:	625a      	str	r2, [r3, #36]	; 0x24
 8007aec:	4b36      	ldr	r3, [pc, #216]	; (8007bc8 <MRT_ClearFlags+0xf8>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2253      	movs	r2, #83	; 0x53
 8007af4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRAF) != RESET){
 8007af6:	e011      	b.n	8007b1c <MRT_ClearFlags+0x4c>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm A flag\r\n", 23, HAL_MAX_DELAY);
 8007af8:	f04f 33ff 	mov.w	r3, #4294967295
 8007afc:	2217      	movs	r2, #23
 8007afe:	4933      	ldr	r1, [pc, #204]	; (8007bcc <MRT_ClearFlags+0xfc>)
 8007b00:	4830      	ldr	r0, [pc, #192]	; (8007bc4 <MRT_ClearFlags+0xf4>)
 8007b02:	f006 fc9e 	bl	800e442 <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(rtc, RTC_FLAG_ALRAF);
 8007b06:	4b30      	ldr	r3, [pc, #192]	; (8007bc8 <MRT_ClearFlags+0xf8>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	b2da      	uxtb	r2, r3
 8007b10:	4b2d      	ldr	r3, [pc, #180]	; (8007bc8 <MRT_ClearFlags+0xf8>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007b1a:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRAF) != RESET){
 8007b1c:	4b2a      	ldr	r3, [pc, #168]	; (8007bc8 <MRT_ClearFlags+0xf8>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1e5      	bne.n	8007af8 <MRT_ClearFlags+0x28>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(rtc);
 8007b2c:	4b26      	ldr	r3, [pc, #152]	; (8007bc8 <MRT_ClearFlags+0xf8>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	22ff      	movs	r2, #255	; 0xff
 8007b34:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007b36:	4b26      	ldr	r3, [pc, #152]	; (8007bd0 <MRT_ClearFlags+0x100>)
 8007b38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007b3c:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(rtc);
 8007b3e:	4b22      	ldr	r3, [pc, #136]	; (8007bc8 <MRT_ClearFlags+0xf8>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	22ca      	movs	r2, #202	; 0xca
 8007b46:	625a      	str	r2, [r3, #36]	; 0x24
 8007b48:	4b1f      	ldr	r3, [pc, #124]	; (8007bc8 <MRT_ClearFlags+0xf8>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2253      	movs	r2, #83	; 0x53
 8007b50:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRBF) != RESET){
 8007b52:	e011      	b.n	8007b78 <MRT_ClearFlags+0xa8>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm B flag\r\n", 23, HAL_MAX_DELAY);
 8007b54:	f04f 33ff 	mov.w	r3, #4294967295
 8007b58:	2217      	movs	r2, #23
 8007b5a:	491e      	ldr	r1, [pc, #120]	; (8007bd4 <MRT_ClearFlags+0x104>)
 8007b5c:	4819      	ldr	r0, [pc, #100]	; (8007bc4 <MRT_ClearFlags+0xf4>)
 8007b5e:	f006 fc70 	bl	800e442 <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(rtc, RTC_FLAG_ALRBF);
 8007b62:	4b19      	ldr	r3, [pc, #100]	; (8007bc8 <MRT_ClearFlags+0xf8>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	b2da      	uxtb	r2, r3
 8007b6c:	4b16      	ldr	r3, [pc, #88]	; (8007bc8 <MRT_ClearFlags+0xf8>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007b76:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRBF) != RESET){
 8007b78:	4b13      	ldr	r3, [pc, #76]	; (8007bc8 <MRT_ClearFlags+0xf8>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1e5      	bne.n	8007b54 <MRT_ClearFlags+0x84>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(rtc);
 8007b88:	4b0f      	ldr	r3, [pc, #60]	; (8007bc8 <MRT_ClearFlags+0xf8>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	22ff      	movs	r2, #255	; 0xff
 8007b90:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007b92:	4b0f      	ldr	r3, [pc, #60]	; (8007bd0 <MRT_ClearFlags+0x100>)
 8007b94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007b98:	615a      	str	r2, [r3, #20]


	/* Clear the WU FLAG */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing WU flag\r\n", 18, HAL_MAX_DELAY);
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8007b9a:	4b0f      	ldr	r3, [pc, #60]	; (8007bd8 <MRT_ClearFlags+0x108>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a0e      	ldr	r2, [pc, #56]	; (8007bd8 <MRT_ClearFlags+0x108>)
 8007ba0:	f043 0304 	orr.w	r3, r3, #4
 8007ba4:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing RTC WU flag\r\n", 22, HAL_MAX_DELAY);
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(rtc, RTC_FLAG_WUTF);
 8007ba6:	4b08      	ldr	r3, [pc, #32]	; (8007bc8 <MRT_ClearFlags+0xf8>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	b2da      	uxtb	r2, r3
 8007bb0:	4b05      	ldr	r3, [pc, #20]	; (8007bc8 <MRT_ClearFlags+0xf8>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007bba:	60da      	str	r2, [r3, #12]
}
 8007bbc:	bf00      	nop
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	08021314 	.word	0x08021314
 8007bc4:	20006de0 	.word	0x20006de0
 8007bc8:	20006e28 	.word	0x20006e28
 8007bcc:	0802132c 	.word	0x0802132c
 8007bd0:	40013c00 	.word	0x40013c00
 8007bd4:	08021344 	.word	0x08021344
 8007bd8:	40007000 	.word	0x40007000

08007bdc <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode( uint32_t seconds){
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b0a4      	sub	sp, #144	; 0x90
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),"\r\nStandByMode\r\n", 15, HAL_MAX_DELAY);
 8007be4:	f04f 33ff 	mov.w	r3, #4294967295
 8007be8:	220f      	movs	r2, #15
 8007bea:	491c      	ldr	r1, [pc, #112]	; (8007c5c <MRT_StandByMode+0x80>)
 8007bec:	481c      	ldr	r0, [pc, #112]	; (8007c60 <MRT_StandByMode+0x84>)
 8007bee:	f006 fc28 	bl	800e442 <HAL_UART_Transmit>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8007bf2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007bf6:	f003 fbd1 	bl	800b39c <HAL_PWR_EnableWakeUpPin>

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_ClearFlags();
 8007bfa:	f7ff ff69 	bl	8007ad0 <MRT_ClearFlags>

	//Setup RTC wake up timer
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTCW\r\n", 17, HAL_MAX_DELAY);
 8007bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8007c02:	2211      	movs	r2, #17
 8007c04:	4917      	ldr	r1, [pc, #92]	; (8007c64 <MRT_StandByMode+0x88>)
 8007c06:	4816      	ldr	r0, [pc, #88]	; (8007c60 <MRT_StandByMode+0x84>)
 8007c08:	f006 fc1b 	bl	800e442 <HAL_UART_Transmit>
	  Error_Handler();
	}
	*/

	char* msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds\r\n",seconds);
 8007c0c:	f107 0308 	add.w	r3, r7, #8
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	4915      	ldr	r1, [pc, #84]	; (8007c68 <MRT_StandByMode+0x8c>)
 8007c14:	4618      	mov	r0, r3
 8007c16:	f013 fe37 	bl	801b888 <siprintf>
	HAL_UART_Transmit(&(rtos.huart), msg,strlen(msg),HAL_MAX_DELAY);
 8007c1a:	f107 0308 	add.w	r3, r7, #8
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7f8 fae6 	bl	80001f0 <strlen>
 8007c24:	4603      	mov	r3, r0
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	f107 0108 	add.w	r1, r7, #8
 8007c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c30:	480b      	ldr	r0, [pc, #44]	; (8007c60 <MRT_StandByMode+0x84>)
 8007c32:	f006 fc06 	bl	800e442 <HAL_UART_Transmit>

	if (HAL_RTCEx_SetWakeUpTimer_IT(rtc,seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8007c36:	4b0d      	ldr	r3, [pc, #52]	; (8007c6c <MRT_StandByMode+0x90>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2204      	movs	r2, #4
 8007c3c:	6879      	ldr	r1, [r7, #4]
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f004 fefc 	bl	800ca3c <HAL_RTCEx_SetWakeUpTimer_IT>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d001      	beq.n	8007c4e <MRT_StandByMode+0x72>
	{
	  Error_Handler();
 8007c4a:	f7fa fe9f 	bl	800298c <Error_Handler>
	}

	HAL_PWR_EnterSTANDBYMode();
 8007c4e:	f003 fbcb 	bl	800b3e8 <HAL_PWR_EnterSTANDBYMode>
}
 8007c52:	bf00      	nop
 8007c54:	3790      	adds	r7, #144	; 0x90
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	0802135c 	.word	0x0802135c
 8007c60:	20006de0 	.word	0x20006de0
 8007c64:	0802136c 	.word	0x0802136c
 8007c68:	08021380 	.word	0x08021380
 8007c6c:	20006e28 	.word	0x20006e28

08007c70 <MRT_setAlarmA>:


void MRT_setAlarmA(uint8_t h, uint8_t m, uint8_t s){
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	4603      	mov	r3, r0
 8007c78:	71fb      	strb	r3, [r7, #7]
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	71bb      	strb	r3, [r7, #6]
 8007c7e:	4613      	mov	r3, r2
 8007c80:	717b      	strb	r3, [r7, #5]
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = int_to_hex_table[h];
 8007c82:	79fb      	ldrb	r3, [r7, #7]
 8007c84:	4a1b      	ldr	r2, [pc, #108]	; (8007cf4 <MRT_setAlarmA+0x84>)
 8007c86:	5cd2      	ldrb	r2, [r2, r3]
 8007c88:	4b1b      	ldr	r3, [pc, #108]	; (8007cf8 <MRT_setAlarmA+0x88>)
 8007c8a:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = int_to_hex_table[m];
 8007c8c:	79bb      	ldrb	r3, [r7, #6]
 8007c8e:	4a19      	ldr	r2, [pc, #100]	; (8007cf4 <MRT_setAlarmA+0x84>)
 8007c90:	5cd2      	ldrb	r2, [r2, r3]
 8007c92:	4b19      	ldr	r3, [pc, #100]	; (8007cf8 <MRT_setAlarmA+0x88>)
 8007c94:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = int_to_hex_table[s];
 8007c96:	797b      	ldrb	r3, [r7, #5]
 8007c98:	4a16      	ldr	r2, [pc, #88]	; (8007cf4 <MRT_setAlarmA+0x84>)
 8007c9a:	5cd2      	ldrb	r2, [r2, r3]
 8007c9c:	4b16      	ldr	r3, [pc, #88]	; (8007cf8 <MRT_setAlarmA+0x88>)
 8007c9e:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 8007ca0:	4b15      	ldr	r3, [pc, #84]	; (8007cf8 <MRT_setAlarmA+0x88>)
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007ca6:	4b14      	ldr	r3, [pc, #80]	; (8007cf8 <MRT_setAlarmA+0x88>)
 8007ca8:	2200      	movs	r2, #0
 8007caa:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8007cac:	4b12      	ldr	r3, [pc, #72]	; (8007cf8 <MRT_setAlarmA+0x88>)
 8007cae:	2200      	movs	r2, #0
 8007cb0:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8007cb2:	4b11      	ldr	r3, [pc, #68]	; (8007cf8 <MRT_setAlarmA+0x88>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8007cb8:	4b0f      	ldr	r3, [pc, #60]	; (8007cf8 <MRT_setAlarmA+0x88>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8007cbe:	4b0e      	ldr	r3, [pc, #56]	; (8007cf8 <MRT_setAlarmA+0x88>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 8007cc4:	4b0c      	ldr	r3, [pc, #48]	; (8007cf8 <MRT_setAlarmA+0x88>)
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 8007ccc:	4b0a      	ldr	r3, [pc, #40]	; (8007cf8 <MRT_setAlarmA+0x88>)
 8007cce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cd2:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(rtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8007cd4:	4b09      	ldr	r3, [pc, #36]	; (8007cfc <MRT_setAlarmA+0x8c>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	4907      	ldr	r1, [pc, #28]	; (8007cf8 <MRT_setAlarmA+0x88>)
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f004 fc9f 	bl	800c620 <HAL_RTC_SetAlarm_IT>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d001      	beq.n	8007cec <MRT_setAlarmA+0x7c>
	  {
	    Error_Handler();
 8007ce8:	f7fa fe50 	bl	800298c <Error_Handler>
	  }
}
 8007cec:	bf00      	nop
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	2000001c 	.word	0x2000001c
 8007cf8:	20000680 	.word	0x20000680
 8007cfc:	20006e28 	.word	0x20006e28

08007d00 <MRT_setRTC>:


void MRT_setRTC(uint8_t h, uint8_t m, uint8_t s){
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b088      	sub	sp, #32
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	4603      	mov	r3, r0
 8007d08:	71fb      	strb	r3, [r7, #7]
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	71bb      	strb	r3, [r7, #6]
 8007d0e:	4613      	mov	r3, r2
 8007d10:	717b      	strb	r3, [r7, #5]
	  /** Initialize RTC and set the Time and Date
	  */
	  RTC_TimeTypeDef sTime;

	  sTime.Hours = int_to_hex_table[h];
 8007d12:	79fb      	ldrb	r3, [r7, #7]
 8007d14:	4a1b      	ldr	r2, [pc, #108]	; (8007d84 <MRT_setRTC+0x84>)
 8007d16:	5cd3      	ldrb	r3, [r2, r3]
 8007d18:	733b      	strb	r3, [r7, #12]
	  sTime.Minutes = int_to_hex_table[m];
 8007d1a:	79bb      	ldrb	r3, [r7, #6]
 8007d1c:	4a19      	ldr	r2, [pc, #100]	; (8007d84 <MRT_setRTC+0x84>)
 8007d1e:	5cd3      	ldrb	r3, [r2, r3]
 8007d20:	737b      	strb	r3, [r7, #13]
	  sTime.Seconds = int_to_hex_table[s];
 8007d22:	797b      	ldrb	r3, [r7, #5]
 8007d24:	4a17      	ldr	r2, [pc, #92]	; (8007d84 <MRT_setRTC+0x84>)
 8007d26:	5cd3      	ldrb	r3, [r2, r3]
 8007d28:	73bb      	strb	r3, [r7, #14]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	61bb      	str	r3, [r7, #24]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	61fb      	str	r3, [r7, #28]
	  if (HAL_RTC_SetTime(rtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8007d32:	4b15      	ldr	r3, [pc, #84]	; (8007d88 <MRT_setRTC+0x88>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f107 010c 	add.w	r1, r7, #12
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f004 fa5e 	bl	800c1fe <HAL_RTC_SetTime>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d001      	beq.n	8007d4c <MRT_setRTC+0x4c>
	  {
	    Error_Handler();
 8007d48:	f7fa fe20 	bl	800298c <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8007d4c:	4b0f      	ldr	r3, [pc, #60]	; (8007d8c <MRT_setRTC+0x8c>)
 8007d4e:	2201      	movs	r2, #1
 8007d50:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 8007d52:	4b0e      	ldr	r3, [pc, #56]	; (8007d8c <MRT_setRTC+0x8c>)
 8007d54:	2201      	movs	r2, #1
 8007d56:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 8007d58:	4b0c      	ldr	r3, [pc, #48]	; (8007d8c <MRT_setRTC+0x8c>)
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 8007d5e:	4b0b      	ldr	r3, [pc, #44]	; (8007d8c <MRT_setRTC+0x8c>)
 8007d60:	2200      	movs	r2, #0
 8007d62:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(rtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8007d64:	4b08      	ldr	r3, [pc, #32]	; (8007d88 <MRT_setRTC+0x88>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	4908      	ldr	r1, [pc, #32]	; (8007d8c <MRT_setRTC+0x8c>)
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f004 fb61 	bl	800c434 <HAL_RTC_SetDate>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d001      	beq.n	8007d7c <MRT_setRTC+0x7c>
	  {
	    Error_Handler();
 8007d78:	f7fa fe08 	bl	800298c <Error_Handler>
	  }
}
 8007d7c:	bf00      	nop
 8007d7e:	3720      	adds	r7, #32
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	2000001c 	.word	0x2000001c
 8007d88:	20006e28 	.word	0x20006e28
 8007d8c:	2000067c 	.word	0x2000067c

08007d90 <Max31855_Read_Temp>:
uint32_t sign=0;									  // Sign bit
uint8_t DATARX[4];                                    // Raw Data from MAX6675
//uint8_t DATATX = {0xFF, 0xFF, 0xFF, 0xFF};                                    // Raw Data from MAX6675

// ------------------- Functions ----------------
void Max31855_Read_Temp(void) {
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
	int Temp = 0;                                        // Temperature Variable
 8007d96:	2300      	movs	r3, #0
 8007d98:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); // Low State for SPI Communication
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007da0:	483f      	ldr	r0, [pc, #252]	; (8007ea0 <Max31855_Read_Temp+0x110>)
 8007da2:	f001 f883 	bl	8008eac <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, DATARX, 4, 1000);                // DATA Transfer
 8007da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007daa:	2204      	movs	r2, #4
 8007dac:	493d      	ldr	r1, [pc, #244]	; (8007ea4 <Max31855_Read_Temp+0x114>)
 8007dae:	483e      	ldr	r0, [pc, #248]	; (8007ea8 <Max31855_Read_Temp+0x118>)
 8007db0:	f005 f92b 	bl	800d00a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET); // High State for SPI Communication
 8007db4:	2201      	movs	r2, #1
 8007db6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007dba:	4839      	ldr	r0, [pc, #228]	; (8007ea0 <Max31855_Read_Temp+0x110>)
 8007dbc:	f001 f876 	bl	8008eac <HAL_GPIO_WritePin>


	uint32_t v = DATARX[3] | (DATARX[2] << 8) | (DATARX[1] << 16) | (DATARX[0] << 24);
 8007dc0:	4b38      	ldr	r3, [pc, #224]	; (8007ea4 <Max31855_Read_Temp+0x114>)
 8007dc2:	78db      	ldrb	r3, [r3, #3]
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	4b37      	ldr	r3, [pc, #220]	; (8007ea4 <Max31855_Read_Temp+0x114>)
 8007dc8:	789b      	ldrb	r3, [r3, #2]
 8007dca:	021b      	lsls	r3, r3, #8
 8007dcc:	431a      	orrs	r2, r3
 8007dce:	4b35      	ldr	r3, [pc, #212]	; (8007ea4 <Max31855_Read_Temp+0x114>)
 8007dd0:	785b      	ldrb	r3, [r3, #1]
 8007dd2:	041b      	lsls	r3, r3, #16
 8007dd4:	431a      	orrs	r2, r3
 8007dd6:	4b33      	ldr	r3, [pc, #204]	; (8007ea4 <Max31855_Read_Temp+0x114>)
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	061b      	lsls	r3, r3, #24
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	603b      	str	r3, [r7, #0]

	Error = v & 0x07;								  // Error Detection
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	f003 0307 	and.w	r3, r3, #7
 8007de8:	b2da      	uxtb	r2, r3
 8007dea:	4b30      	ldr	r3, [pc, #192]	; (8007eac <Max31855_Read_Temp+0x11c>)
 8007dec:	701a      	strb	r2, [r3, #0]



		sign = (DATARX[0] & (0x80)) >> 7;					// Sign Bit calculation
 8007dee:	4b2d      	ldr	r3, [pc, #180]	; (8007ea4 <Max31855_Read_Temp+0x114>)
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	09db      	lsrs	r3, r3, #7
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	461a      	mov	r2, r3
 8007df8:	4b2d      	ldr	r3, [pc, #180]	; (8007eb0 <Max31855_Read_Temp+0x120>)
 8007dfa:	601a      	str	r2, [r3, #0]

		if (DATARX[3] & 0x07)								 // Returns Error Number
 8007dfc:	4b29      	ldr	r3, [pc, #164]	; (8007ea4 <Max31855_Read_Temp+0x114>)
 8007dfe:	78db      	ldrb	r3, [r3, #3]
 8007e00:	f003 0307 	and.w	r3, r3, #7
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00c      	beq.n	8007e22 <Max31855_Read_Temp+0x92>
			THERMO_TEMP = (-1 * (DATARX[3] & 0x07));
 8007e08:	4b26      	ldr	r3, [pc, #152]	; (8007ea4 <Max31855_Read_Temp+0x114>)
 8007e0a:	78db      	ldrb	r3, [r3, #3]
 8007e0c:	f003 0307 	and.w	r3, r3, #7
 8007e10:	425b      	negs	r3, r3
 8007e12:	ee07 3a90 	vmov	s15, r3
 8007e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e1a:	4b26      	ldr	r3, [pc, #152]	; (8007eb4 <Max31855_Read_Temp+0x124>)
 8007e1c:	edc3 7a00 	vstr	s15, [r3]

	// LSB = 0.25 degrees C
	centigrade *= 0.25;
	return centigrade;
	*/
}
 8007e20:	e039      	b.n	8007e96 <Max31855_Read_Temp+0x106>
		else if (sign == 1) {								// Negative Temperature
 8007e22:	4b23      	ldr	r3, [pc, #140]	; (8007eb0 <Max31855_Read_Temp+0x120>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d120      	bne.n	8007e6c <Max31855_Read_Temp+0xdc>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8007e2a:	4b1e      	ldr	r3, [pc, #120]	; (8007ea4 <Max31855_Read_Temp+0x114>)
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	019b      	lsls	r3, r3, #6
 8007e30:	4a1c      	ldr	r2, [pc, #112]	; (8007ea4 <Max31855_Read_Temp+0x114>)
 8007e32:	7852      	ldrb	r2, [r2, #1]
 8007e34:	0892      	lsrs	r2, r2, #2
 8007e36:	b2d2      	uxtb	r2, r2
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	607b      	str	r3, [r7, #4]
			Temp &= 0b01111111111111;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e42:	607b      	str	r3, [r7, #4]
			Temp ^= 0b01111111111111;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f483 53ff 	eor.w	r3, r3, #8160	; 0x1fe0
 8007e4a:	f083 031f 	eor.w	r3, r3, #31
 8007e4e:	607b      	str	r3, [r7, #4]
			THERMO_TEMP = ((float) -Temp / 4);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	425b      	negs	r3, r3
 8007e54:	ee07 3a90 	vmov	s15, r3
 8007e58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e5c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8007e60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007e64:	4b13      	ldr	r3, [pc, #76]	; (8007eb4 <Max31855_Read_Temp+0x124>)
 8007e66:	edc3 7a00 	vstr	s15, [r3]
}
 8007e6a:	e014      	b.n	8007e96 <Max31855_Read_Temp+0x106>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8007e6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ea4 <Max31855_Read_Temp+0x114>)
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	019b      	lsls	r3, r3, #6
 8007e72:	4a0c      	ldr	r2, [pc, #48]	; (8007ea4 <Max31855_Read_Temp+0x114>)
 8007e74:	7852      	ldrb	r2, [r2, #1]
 8007e76:	0892      	lsrs	r2, r2, #2
 8007e78:	b2d2      	uxtb	r2, r2
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	607b      	str	r3, [r7, #4]
			THERMO_TEMP = ((float) Temp / 4.0);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	ee07 3a90 	vmov	s15, r3
 8007e84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e88:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8007e8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007e90:	4b08      	ldr	r3, [pc, #32]	; (8007eb4 <Max31855_Read_Temp+0x124>)
 8007e92:	edc3 7a00 	vstr	s15, [r3]
}
 8007e96:	bf00      	nop
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	40021000 	.word	0x40021000
 8007ea4:	20006e2c 	.word	0x20006e2c
 8007ea8:	200068c4 	.word	0x200068c4
 8007eac:	200006aa 	.word	0x200006aa
 8007eb0:	200006ac 	.word	0x200006ac
 8007eb4:	20006a00 	.word	0x20006a00

08007eb8 <myprintf>:


uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value);
void str2upper(char* string, char* upper);

void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 8007eb8:	b40f      	push	{r0, r1, r2, r3}
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b082      	sub	sp, #8
 8007ebe:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8007ec0:	f107 0314 	add.w	r3, r7, #20
 8007ec4:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	693a      	ldr	r2, [r7, #16]
 8007eca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007ece:	480a      	ldr	r0, [pc, #40]	; (8007ef8 <myprintf+0x40>)
 8007ed0:	f014 fcf6 	bl	801c8c0 <vsniprintf>
  va_end(args);

  //CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
  HAL_UART_Transmit(&DEBUG_UART, (uint8_t*)buffer, strlen(buffer), -1);
 8007ed4:	4808      	ldr	r0, [pc, #32]	; (8007ef8 <myprintf+0x40>)
 8007ed6:	f7f8 f98b 	bl	80001f0 <strlen>
 8007eda:	4603      	mov	r3, r0
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	f04f 33ff 	mov.w	r3, #4294967295
 8007ee2:	4905      	ldr	r1, [pc, #20]	; (8007ef8 <myprintf+0x40>)
 8007ee4:	4805      	ldr	r0, [pc, #20]	; (8007efc <myprintf+0x44>)
 8007ee6:	f006 faac 	bl	800e442 <HAL_UART_Transmit>

}
 8007eea:	bf00      	nop
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ef4:	b004      	add	sp, #16
 8007ef6:	4770      	bx	lr
 8007ef8:	200006b0 	.word	0x200006b0
 8007efc:	20005ec4 	.word	0x20005ec4

08007f00 <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b08a      	sub	sp, #40	; 0x28
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	4932      	ldr	r1, [pc, #200]	; (8007fd8 <sd_init_dynamic_filename+0xd8>)
 8007f10:	4832      	ldr	r0, [pc, #200]	; (8007fdc <sd_init_dynamic_filename+0xdc>)
 8007f12:	f00c f9e3 	bl	80142dc <f_mount>
 8007f16:	4603      	mov	r3, r0
 8007f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 8007f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d008      	beq.n	8007f36 <sd_init_dynamic_filename+0x36>
		myprintf("f_mount error (%i)\r\n", fres);
 8007f24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f28:	4619      	mov	r1, r3
 8007f2a:	482d      	ldr	r0, [pc, #180]	; (8007fe0 <sd_init_dynamic_filename+0xe0>)
 8007f2c:	f7ff ffc4 	bl	8007eb8 <myprintf>
		return fres;
 8007f30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f34:	e04b      	b.n	8007fce <sd_init_dynamic_filename+0xce>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 8007f36:	2300      	movs	r3, #0
 8007f38:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 8007f3a:	f107 0320 	add.w	r3, r7, #32
 8007f3e:	461a      	mov	r2, r3
 8007f40:	68f9      	ldr	r1, [r7, #12]
 8007f42:	4825      	ldr	r0, [pc, #148]	; (8007fd8 <sd_init_dynamic_filename+0xd8>)
 8007f44:	f000 f89c 	bl	8008080 <scan_files>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "fc%06lu.txt", max_used_value + 1);
 8007f4e:	6a3b      	ldr	r3, [r7, #32]
 8007f50:	1c5a      	adds	r2, r3, #1
 8007f52:	f107 0310 	add.w	r3, r7, #16
 8007f56:	4923      	ldr	r1, [pc, #140]	; (8007fe4 <sd_init_dynamic_filename+0xe4>)
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f013 fc95 	bl	801b888 <siprintf>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 8007f5e:	f107 0310 	add.w	r3, r7, #16
 8007f62:	4619      	mov	r1, r3
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f013 fd20 	bl	801b9aa <strcpy>
 8007f6a:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8007f6c:	f107 0310 	add.w	r3, r7, #16
 8007f70:	221a      	movs	r2, #26
 8007f72:	4619      	mov	r1, r3
 8007f74:	481c      	ldr	r0, [pc, #112]	; (8007fe8 <sd_init_dynamic_filename+0xe8>)
 8007f76:	f00c fa15 	bl	80143a4 <f_open>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 8007f80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d11a      	bne.n	8007fbe <sd_init_dynamic_filename+0xbe>
		myprintf("I was able to open filename.txt for writing\r\n");
 8007f88:	4818      	ldr	r0, [pc, #96]	; (8007fec <sd_init_dynamic_filename+0xec>)
 8007f8a:	f7ff ff95 	bl	8007eb8 <myprintf>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8007f8e:	4b16      	ldr	r3, [pc, #88]	; (8007fe8 <sd_init_dynamic_filename+0xe8>)
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	4619      	mov	r1, r3
 8007f94:	4814      	ldr	r0, [pc, #80]	; (8007fe8 <sd_init_dynamic_filename+0xe8>)
 8007f96:	f00c fe26 	bl	8014be6 <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 8007f9a:	4915      	ldr	r1, [pc, #84]	; (8007ff0 <sd_init_dynamic_filename+0xf0>)
 8007f9c:	4815      	ldr	r0, [pc, #84]	; (8007ff4 <sd_init_dynamic_filename+0xf4>)
 8007f9e:	f013 fc73 	bl	801b888 <siprintf>
	sd_write(&fil, msg_buffer);
 8007fa2:	4914      	ldr	r1, [pc, #80]	; (8007ff4 <sd_init_dynamic_filename+0xf4>)
 8007fa4:	4810      	ldr	r0, [pc, #64]	; (8007fe8 <sd_init_dynamic_filename+0xe8>)
 8007fa6:	f000 f841 	bl	800802c <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 8007faa:	68b9      	ldr	r1, [r7, #8]
 8007fac:	480e      	ldr	r0, [pc, #56]	; (8007fe8 <sd_init_dynamic_filename+0xe8>)
 8007fae:	f000 f83d 	bl	800802c <sd_write>
	f_close(&fil);
 8007fb2:	480d      	ldr	r0, [pc, #52]	; (8007fe8 <sd_init_dynamic_filename+0xe8>)
 8007fb4:	f00c fde8 	bl	8014b88 <f_close>

	return fres;
 8007fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fbc:	e007      	b.n	8007fce <sd_init_dynamic_filename+0xce>
		myprintf("f_open error (%i)\r\n", fres);
 8007fbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	480c      	ldr	r0, [pc, #48]	; (8007ff8 <sd_init_dynamic_filename+0xf8>)
 8007fc6:	f7ff ff77 	bl	8007eb8 <myprintf>
		return fres;
 8007fca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3728      	adds	r7, #40	; 0x28
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	080213a0 	.word	0x080213a0
 8007fdc:	20006070 	.word	0x20006070
 8007fe0:	080213a4 	.word	0x080213a4
 8007fe4:	08021420 	.word	0x08021420
 8007fe8:	20006a74 	.word	0x20006a74
 8007fec:	080213bc 	.word	0x080213bc
 8007ff0:	08021400 	.word	0x08021400
 8007ff4:	20006e30 	.word	0x20006e30
 8007ff8:	080213ec 	.word	0x080213ec

08007ffc <sd_open_file>:

/*
 * always open in mode FA_WRITE | FA_OPEN_ALWAYS and then appends.
 */
FRESULT sd_open_file(char *filename)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
	// write start to SD card
	FRESULT fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS);
 8008004:	2212      	movs	r2, #18
 8008006:	6879      	ldr	r1, [r7, #4]
 8008008:	4807      	ldr	r0, [pc, #28]	; (8008028 <sd_open_file+0x2c>)
 800800a:	f00c f9cb 	bl	80143a4 <f_open>
 800800e:	4603      	mov	r3, r0
 8008010:	73fb      	strb	r3, [r7, #15]

	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8008012:	4b05      	ldr	r3, [pc, #20]	; (8008028 <sd_open_file+0x2c>)
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	4619      	mov	r1, r3
 8008018:	4803      	ldr	r0, [pc, #12]	; (8008028 <sd_open_file+0x2c>)
 800801a:	f00c fde4 	bl	8014be6 <f_lseek>

	return fres;
 800801e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008020:	4618      	mov	r0, r3
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	20006a74 	.word	0x20006a74

0800802c <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 8008036:	6838      	ldr	r0, [r7, #0]
 8008038:	f7f8 f8da 	bl	80001f0 <strlen>
 800803c:	4602      	mov	r2, r0
 800803e:	f107 0308 	add.w	r3, r7, #8
 8008042:	6839      	ldr	r1, [r7, #0]
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f00c fb72 	bl	801472e <f_write>
 800804a:	4603      	mov	r3, r0
 800804c:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 800804e:	7bfb      	ldrb	r3, [r7, #15]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d107      	bne.n	8008064 <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	4619      	mov	r1, r3
 8008058:	4807      	ldr	r0, [pc, #28]	; (8008078 <sd_write+0x4c>)
 800805a:	f7ff ff2d 	bl	8007eb8 <myprintf>
		return bytesWrote;
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	b25b      	sxtb	r3, r3
 8008062:	e004      	b.n	800806e <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 8008064:	4805      	ldr	r0, [pc, #20]	; (800807c <sd_write+0x50>)
 8008066:	f7ff ff27 	bl	8007eb8 <myprintf>
		return -1;
 800806a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	0802142c 	.word	0x0802142c
 800807c:	08021450 	.word	0x08021450

08008080 <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 8008080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008082:	b099      	sub	sp, #100	; 0x64
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	607a      	str	r2, [r7, #4]
 800808c:	466b      	mov	r3, sp
 800808e:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 8008090:	68b8      	ldr	r0, [r7, #8]
 8008092:	f7f8 f8ad 	bl	80001f0 <strlen>
 8008096:	4603      	mov	r3, r0
 8008098:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 800809c:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 80080a0:	4623      	mov	r3, r4
 80080a2:	3b01      	subs	r3, #1
 80080a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80080a6:	b2e0      	uxtb	r0, r4
 80080a8:	f04f 0100 	mov.w	r1, #0
 80080ac:	f04f 0200 	mov.w	r2, #0
 80080b0:	f04f 0300 	mov.w	r3, #0
 80080b4:	00cb      	lsls	r3, r1, #3
 80080b6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80080ba:	00c2      	lsls	r2, r0, #3
 80080bc:	b2e0      	uxtb	r0, r4
 80080be:	f04f 0100 	mov.w	r1, #0
 80080c2:	f04f 0200 	mov.w	r2, #0
 80080c6:	f04f 0300 	mov.w	r3, #0
 80080ca:	00cb      	lsls	r3, r1, #3
 80080cc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80080d0:	00c2      	lsls	r2, r0, #3
 80080d2:	4623      	mov	r3, r4
 80080d4:	3307      	adds	r3, #7
 80080d6:	08db      	lsrs	r3, r3, #3
 80080d8:	00db      	lsls	r3, r3, #3
 80080da:	ebad 0d03 	sub.w	sp, sp, r3
 80080de:	466b      	mov	r3, sp
 80080e0:	3300      	adds	r3, #0
 80080e2:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 80080e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080e6:	4619      	mov	r1, r3
 80080e8:	68b8      	ldr	r0, [r7, #8]
 80080ea:	f000 f8ff 	bl	80082ec <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 80080f4:	2300      	movs	r3, #0
 80080f6:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 80080f8:	f107 0318 	add.w	r3, r7, #24
 80080fc:	68f9      	ldr	r1, [r7, #12]
 80080fe:	4618      	mov	r0, r3
 8008100:	f00c ffc4 	bl	801508c <f_opendir>
 8008104:	4603      	mov	r3, r0
 8008106:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 800810a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800810e:	2b00      	cmp	r3, #0
 8008110:	d16c      	bne.n	80081ec <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8008112:	f107 0318 	add.w	r3, r7, #24
 8008116:	4939      	ldr	r1, [pc, #228]	; (80081fc <scan_files+0x17c>)
 8008118:	4618      	mov	r0, r3
 800811a:	f00d f85b 	bl	80151d4 <f_readdir>
 800811e:	4603      	mov	r3, r0
 8008120:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8008124:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008128:	2b00      	cmp	r3, #0
 800812a:	d15a      	bne.n	80081e2 <scan_files+0x162>
 800812c:	4b33      	ldr	r3, [pc, #204]	; (80081fc <scan_files+0x17c>)
 800812e:	7a5b      	ldrb	r3, [r3, #9]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d056      	beq.n	80081e2 <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8008134:	4b31      	ldr	r3, [pc, #196]	; (80081fc <scan_files+0x17c>)
 8008136:	7a1b      	ldrb	r3, [r3, #8]
 8008138:	f003 0310 	and.w	r3, r3, #16
 800813c:	2b00      	cmp	r3, #0
 800813e:	d14e      	bne.n	80081de <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 8008140:	466b      	mov	r3, sp
 8008142:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 8008144:	482e      	ldr	r0, [pc, #184]	; (8008200 <scan_files+0x180>)
 8008146:	f7f8 f853 	bl	80001f0 <strlen>
 800814a:	4604      	mov	r4, r0
 800814c:	4623      	mov	r3, r4
 800814e:	3b01      	subs	r3, #1
 8008150:	653b      	str	r3, [r7, #80]	; 0x50
 8008152:	4620      	mov	r0, r4
 8008154:	f04f 0100 	mov.w	r1, #0
 8008158:	f04f 0200 	mov.w	r2, #0
 800815c:	f04f 0300 	mov.w	r3, #0
 8008160:	00cb      	lsls	r3, r1, #3
 8008162:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8008166:	00c2      	lsls	r2, r0, #3
 8008168:	4620      	mov	r0, r4
 800816a:	f04f 0100 	mov.w	r1, #0
 800816e:	f04f 0200 	mov.w	r2, #0
 8008172:	f04f 0300 	mov.w	r3, #0
 8008176:	00cb      	lsls	r3, r1, #3
 8008178:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800817c:	00c2      	lsls	r2, r0, #3
 800817e:	1de3      	adds	r3, r4, #7
 8008180:	08db      	lsrs	r3, r3, #3
 8008182:	00db      	lsls	r3, r3, #3
 8008184:	ebad 0d03 	sub.w	sp, sp, r3
 8008188:	466b      	mov	r3, sp
 800818a:	3300      	adds	r3, #0
 800818c:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 800818e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008190:	4619      	mov	r1, r3
 8008192:	481b      	ldr	r0, [pc, #108]	; (8008200 <scan_files+0x180>)
 8008194:	f000 f8aa 	bl	80082ec <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 8008198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800819a:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800819e:	4619      	mov	r1, r3
 80081a0:	4817      	ldr	r0, [pc, #92]	; (8008200 <scan_files+0x180>)
 80081a2:	f013 fc0a 	bl	801b9ba <strncmp>
 80081a6:	4603      	mov	r3, r0
 80081a8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 80081ac:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d112      	bne.n	80081da <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 80081b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081b6:	f107 0214 	add.w	r2, r7, #20
 80081ba:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 80081be:	4618      	mov	r0, r3
 80081c0:	f000 f820 	bl	8008204 <extract_filename_suffix>
 80081c4:	4603      	mov	r3, r0
 80081c6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d202      	bcs.n	80081da <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 80081d4:	697a      	ldr	r2, [r7, #20]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	601a      	str	r2, [r3, #0]
 80081da:	46b5      	mov	sp, r6
 80081dc:	e799      	b.n	8008112 <scan_files+0x92>
            	continue; // don't enter directory
 80081de:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80081e0:	e797      	b.n	8008112 <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 80081e2:	f107 0318 	add.w	r3, r7, #24
 80081e6:	4618      	mov	r0, r3
 80081e8:	f00c ffc9 	bl	801517e <f_closedir>
    }

    return res;
 80081ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081f0:	46ad      	mov	sp, r5
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3764      	adds	r7, #100	; 0x64
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081fa:	bf00      	nop
 80081fc:	200007b0 	.word	0x200007b0
 8008200:	200007b9 	.word	0x200007b9

08008204 <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 8008204:	b5b0      	push	{r4, r5, r7, lr}
 8008206:	b088      	sub	sp, #32
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	460b      	mov	r3, r1
 800820e:	607a      	str	r2, [r7, #4]
 8008210:	72fb      	strb	r3, [r7, #11]
 8008212:	466b      	mov	r3, sp
 8008214:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	f7f7 ffea 	bl	80001f0 <strlen>
 800821c:	4603      	mov	r3, r0
 800821e:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 8008220:	2308      	movs	r3, #8
 8008222:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 8008224:	7f7c      	ldrb	r4, [r7, #29]
 8008226:	4623      	mov	r3, r4
 8008228:	3b01      	subs	r3, #1
 800822a:	61bb      	str	r3, [r7, #24]
 800822c:	b2e0      	uxtb	r0, r4
 800822e:	f04f 0100 	mov.w	r1, #0
 8008232:	f04f 0200 	mov.w	r2, #0
 8008236:	f04f 0300 	mov.w	r3, #0
 800823a:	00cb      	lsls	r3, r1, #3
 800823c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8008240:	00c2      	lsls	r2, r0, #3
 8008242:	b2e0      	uxtb	r0, r4
 8008244:	f04f 0100 	mov.w	r1, #0
 8008248:	f04f 0200 	mov.w	r2, #0
 800824c:	f04f 0300 	mov.w	r3, #0
 8008250:	00cb      	lsls	r3, r1, #3
 8008252:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8008256:	00c2      	lsls	r2, r0, #3
 8008258:	4623      	mov	r3, r4
 800825a:	3307      	adds	r3, #7
 800825c:	08db      	lsrs	r3, r3, #3
 800825e:	00db      	lsls	r3, r3, #3
 8008260:	ebad 0d03 	sub.w	sp, sp, r3
 8008264:	466b      	mov	r3, sp
 8008266:	3300      	adds	r3, #0
 8008268:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 800826a:	2300      	movs	r3, #0
 800826c:	77fb      	strb	r3, [r7, #31]
 800826e:	e014      	b.n	800829a <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 8008270:	7afb      	ldrb	r3, [r7, #11]
 8008272:	1e5a      	subs	r2, r3, #1
 8008274:	7ffb      	ldrb	r3, [r7, #31]
 8008276:	441a      	add	r2, r3
 8008278:	7fbb      	ldrb	r3, [r7, #30]
 800827a:	3b01      	subs	r3, #1
 800827c:	429a      	cmp	r2, r3
 800827e:	da11      	bge.n	80082a4 <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 8008280:	7afa      	ldrb	r2, [r7, #11]
 8008282:	7ffb      	ldrb	r3, [r7, #31]
 8008284:	4413      	add	r3, r2
 8008286:	461a      	mov	r2, r3
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	441a      	add	r2, r3
 800828c:	7ffb      	ldrb	r3, [r7, #31]
 800828e:	7811      	ldrb	r1, [r2, #0]
 8008290:	697a      	ldr	r2, [r7, #20]
 8008292:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 8008294:	7ffb      	ldrb	r3, [r7, #31]
 8008296:	3301      	adds	r3, #1
 8008298:	77fb      	strb	r3, [r7, #31]
 800829a:	7ffa      	ldrb	r2, [r7, #31]
 800829c:	7f7b      	ldrb	r3, [r7, #29]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d3e6      	bcc.n	8008270 <extract_filename_suffix+0x6c>
 80082a2:	e000      	b.n	80082a6 <extract_filename_suffix+0xa2>
		}
		else break;
 80082a4:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	f107 0110 	add.w	r1, r7, #16
 80082ac:	220a      	movs	r2, #10
 80082ae:	4618      	mov	r0, r3
 80082b0:	f014 fa48 	bl	801c744 <strtol>
 80082b4:	4603      	mov	r3, r0
 80082b6:	461a      	mov	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 80082bc:	697a      	ldr	r2, [r7, #20]
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d00a      	beq.n	80082da <extract_filename_suffix+0xd6>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082cc:	d005      	beq.n	80082da <extract_filename_suffix+0xd6>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d101      	bne.n	80082de <extract_filename_suffix+0xda>
	{
		return 1;
 80082da:	2301      	movs	r3, #1
 80082dc:	e000      	b.n	80082e0 <extract_filename_suffix+0xdc>
	}

	return 0;
 80082de:	2300      	movs	r3, #0
 80082e0:	46ad      	mov	sp, r5
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3720      	adds	r7, #32
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080082ec <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 80082ec:	b590      	push	{r4, r7, lr}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 80082f6:	2300      	movs	r3, #0
 80082f8:	73fb      	strb	r3, [r7, #15]
 80082fa:	e019      	b.n	8008330 <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 80082fc:	7bfb      	ldrb	r3, [r7, #15]
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	4413      	add	r3, r2
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	73bb      	strb	r3, [r7, #14]
 8008306:	7bbb      	ldrb	r3, [r7, #14]
 8008308:	3301      	adds	r3, #1
 800830a:	4a0f      	ldr	r2, [pc, #60]	; (8008348 <str2upper+0x5c>)
 800830c:	4413      	add	r3, r2
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	f003 0303 	and.w	r3, r3, #3
 8008314:	2b02      	cmp	r3, #2
 8008316:	d102      	bne.n	800831e <str2upper+0x32>
 8008318:	7bbb      	ldrb	r3, [r7, #14]
 800831a:	3b20      	subs	r3, #32
 800831c:	e000      	b.n	8008320 <str2upper+0x34>
 800831e:	7bbb      	ldrb	r3, [r7, #14]
 8008320:	7bfa      	ldrb	r2, [r7, #15]
 8008322:	6839      	ldr	r1, [r7, #0]
 8008324:	440a      	add	r2, r1
 8008326:	b2db      	uxtb	r3, r3
 8008328:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 800832a:	7bfb      	ldrb	r3, [r7, #15]
 800832c:	3301      	adds	r3, #1
 800832e:	73fb      	strb	r3, [r7, #15]
 8008330:	7bfc      	ldrb	r4, [r7, #15]
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f7f7 ff5c 	bl	80001f0 <strlen>
 8008338:	4603      	mov	r3, r0
 800833a:	429c      	cmp	r4, r3
 800833c:	d3de      	bcc.n	80082fc <str2upper+0x10>
	}
}
 800833e:	bf00      	nop
 8008340:	bf00      	nop
 8008342:	3714      	adds	r7, #20
 8008344:	46bd      	mov	sp, r7
 8008346:	bd90      	pop	{r4, r7, pc}
 8008348:	08021748 	.word	0x08021748

0800834c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008350:	4b0e      	ldr	r3, [pc, #56]	; (800838c <HAL_Init+0x40>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a0d      	ldr	r2, [pc, #52]	; (800838c <HAL_Init+0x40>)
 8008356:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800835a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800835c:	4b0b      	ldr	r3, [pc, #44]	; (800838c <HAL_Init+0x40>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a0a      	ldr	r2, [pc, #40]	; (800838c <HAL_Init+0x40>)
 8008362:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008366:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008368:	4b08      	ldr	r3, [pc, #32]	; (800838c <HAL_Init+0x40>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a07      	ldr	r2, [pc, #28]	; (800838c <HAL_Init+0x40>)
 800836e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008372:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008374:	2003      	movs	r0, #3
 8008376:	f000 fb92 	bl	8008a9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800837a:	2000      	movs	r0, #0
 800837c:	f7fa fe48 	bl	8003010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008380:	f7fa fb0c 	bl	800299c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	40023c00 	.word	0x40023c00

08008390 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008390:	b480      	push	{r7}
 8008392:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008394:	4b06      	ldr	r3, [pc, #24]	; (80083b0 <HAL_IncTick+0x20>)
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	461a      	mov	r2, r3
 800839a:	4b06      	ldr	r3, [pc, #24]	; (80083b4 <HAL_IncTick+0x24>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4413      	add	r3, r2
 80083a0:	4a04      	ldr	r2, [pc, #16]	; (80083b4 <HAL_IncTick+0x24>)
 80083a2:	6013      	str	r3, [r2, #0]
}
 80083a4:	bf00      	nop
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	2000005c 	.word	0x2000005c
 80083b4:	20007218 	.word	0x20007218

080083b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80083b8:	b480      	push	{r7}
 80083ba:	af00      	add	r7, sp, #0
  return uwTick;
 80083bc:	4b03      	ldr	r3, [pc, #12]	; (80083cc <HAL_GetTick+0x14>)
 80083be:	681b      	ldr	r3, [r3, #0]
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	20007218 	.word	0x20007218

080083d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80083d8:	f7ff ffee 	bl	80083b8 <HAL_GetTick>
 80083dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e8:	d005      	beq.n	80083f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80083ea:	4b0a      	ldr	r3, [pc, #40]	; (8008414 <HAL_Delay+0x44>)
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	461a      	mov	r2, r3
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	4413      	add	r3, r2
 80083f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80083f6:	bf00      	nop
 80083f8:	f7ff ffde 	bl	80083b8 <HAL_GetTick>
 80083fc:	4602      	mov	r2, r0
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	68fa      	ldr	r2, [r7, #12]
 8008404:	429a      	cmp	r2, r3
 8008406:	d8f7      	bhi.n	80083f8 <HAL_Delay+0x28>
  {
  }
}
 8008408:	bf00      	nop
 800840a:	bf00      	nop
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	2000005c 	.word	0x2000005c

08008418 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008420:	2300      	movs	r3, #0
 8008422:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d101      	bne.n	800842e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	e033      	b.n	8008496 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008432:	2b00      	cmp	r3, #0
 8008434:	d109      	bne.n	800844a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f7fa fadc 	bl	80029f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800844e:	f003 0310 	and.w	r3, r3, #16
 8008452:	2b00      	cmp	r3, #0
 8008454:	d118      	bne.n	8008488 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800845e:	f023 0302 	bic.w	r3, r3, #2
 8008462:	f043 0202 	orr.w	r2, r3, #2
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 f94a 	bl	8008704 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847a:	f023 0303 	bic.w	r3, r3, #3
 800847e:	f043 0201 	orr.w	r2, r3, #1
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	641a      	str	r2, [r3, #64]	; 0x40
 8008486:	e001      	b.n	800848c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008494:	7bfb      	ldrb	r3, [r7, #15]
}
 8008496:	4618      	mov	r0, r3
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
	...

080084a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80084aa:	2300      	movs	r3, #0
 80084ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d101      	bne.n	80084bc <HAL_ADC_ConfigChannel+0x1c>
 80084b8:	2302      	movs	r3, #2
 80084ba:	e113      	b.n	80086e4 <HAL_ADC_ConfigChannel+0x244>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2b09      	cmp	r3, #9
 80084ca:	d925      	bls.n	8008518 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	68d9      	ldr	r1, [r3, #12]
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	461a      	mov	r2, r3
 80084da:	4613      	mov	r3, r2
 80084dc:	005b      	lsls	r3, r3, #1
 80084de:	4413      	add	r3, r2
 80084e0:	3b1e      	subs	r3, #30
 80084e2:	2207      	movs	r2, #7
 80084e4:	fa02 f303 	lsl.w	r3, r2, r3
 80084e8:	43da      	mvns	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	400a      	ands	r2, r1
 80084f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68d9      	ldr	r1, [r3, #12]
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	689a      	ldr	r2, [r3, #8]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	b29b      	uxth	r3, r3
 8008502:	4618      	mov	r0, r3
 8008504:	4603      	mov	r3, r0
 8008506:	005b      	lsls	r3, r3, #1
 8008508:	4403      	add	r3, r0
 800850a:	3b1e      	subs	r3, #30
 800850c:	409a      	lsls	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	430a      	orrs	r2, r1
 8008514:	60da      	str	r2, [r3, #12]
 8008516:	e022      	b.n	800855e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	6919      	ldr	r1, [r3, #16]
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	b29b      	uxth	r3, r3
 8008524:	461a      	mov	r2, r3
 8008526:	4613      	mov	r3, r2
 8008528:	005b      	lsls	r3, r3, #1
 800852a:	4413      	add	r3, r2
 800852c:	2207      	movs	r2, #7
 800852e:	fa02 f303 	lsl.w	r3, r2, r3
 8008532:	43da      	mvns	r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	400a      	ands	r2, r1
 800853a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	6919      	ldr	r1, [r3, #16]
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	689a      	ldr	r2, [r3, #8]
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	b29b      	uxth	r3, r3
 800854c:	4618      	mov	r0, r3
 800854e:	4603      	mov	r3, r0
 8008550:	005b      	lsls	r3, r3, #1
 8008552:	4403      	add	r3, r0
 8008554:	409a      	lsls	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	430a      	orrs	r2, r1
 800855c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	2b06      	cmp	r3, #6
 8008564:	d824      	bhi.n	80085b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	685a      	ldr	r2, [r3, #4]
 8008570:	4613      	mov	r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	4413      	add	r3, r2
 8008576:	3b05      	subs	r3, #5
 8008578:	221f      	movs	r2, #31
 800857a:	fa02 f303 	lsl.w	r3, r2, r3
 800857e:	43da      	mvns	r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	400a      	ands	r2, r1
 8008586:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	b29b      	uxth	r3, r3
 8008594:	4618      	mov	r0, r3
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	685a      	ldr	r2, [r3, #4]
 800859a:	4613      	mov	r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	4413      	add	r3, r2
 80085a0:	3b05      	subs	r3, #5
 80085a2:	fa00 f203 	lsl.w	r2, r0, r3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	430a      	orrs	r2, r1
 80085ac:	635a      	str	r2, [r3, #52]	; 0x34
 80085ae:	e04c      	b.n	800864a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	2b0c      	cmp	r3, #12
 80085b6:	d824      	bhi.n	8008602 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	685a      	ldr	r2, [r3, #4]
 80085c2:	4613      	mov	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4413      	add	r3, r2
 80085c8:	3b23      	subs	r3, #35	; 0x23
 80085ca:	221f      	movs	r2, #31
 80085cc:	fa02 f303 	lsl.w	r3, r2, r3
 80085d0:	43da      	mvns	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	400a      	ands	r2, r1
 80085d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	4618      	mov	r0, r3
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	685a      	ldr	r2, [r3, #4]
 80085ec:	4613      	mov	r3, r2
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	4413      	add	r3, r2
 80085f2:	3b23      	subs	r3, #35	; 0x23
 80085f4:	fa00 f203 	lsl.w	r2, r0, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	430a      	orrs	r2, r1
 80085fe:	631a      	str	r2, [r3, #48]	; 0x30
 8008600:	e023      	b.n	800864a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	685a      	ldr	r2, [r3, #4]
 800860c:	4613      	mov	r3, r2
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	4413      	add	r3, r2
 8008612:	3b41      	subs	r3, #65	; 0x41
 8008614:	221f      	movs	r2, #31
 8008616:	fa02 f303 	lsl.w	r3, r2, r3
 800861a:	43da      	mvns	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	400a      	ands	r2, r1
 8008622:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	b29b      	uxth	r3, r3
 8008630:	4618      	mov	r0, r3
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	685a      	ldr	r2, [r3, #4]
 8008636:	4613      	mov	r3, r2
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	4413      	add	r3, r2
 800863c:	3b41      	subs	r3, #65	; 0x41
 800863e:	fa00 f203 	lsl.w	r2, r0, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	430a      	orrs	r2, r1
 8008648:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800864a:	4b29      	ldr	r3, [pc, #164]	; (80086f0 <HAL_ADC_ConfigChannel+0x250>)
 800864c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a28      	ldr	r2, [pc, #160]	; (80086f4 <HAL_ADC_ConfigChannel+0x254>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d10f      	bne.n	8008678 <HAL_ADC_ConfigChannel+0x1d8>
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2b12      	cmp	r3, #18
 800865e:	d10b      	bne.n	8008678 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a1d      	ldr	r2, [pc, #116]	; (80086f4 <HAL_ADC_ConfigChannel+0x254>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d12b      	bne.n	80086da <HAL_ADC_ConfigChannel+0x23a>
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a1c      	ldr	r2, [pc, #112]	; (80086f8 <HAL_ADC_ConfigChannel+0x258>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d003      	beq.n	8008694 <HAL_ADC_ConfigChannel+0x1f4>
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2b11      	cmp	r3, #17
 8008692:	d122      	bne.n	80086da <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a11      	ldr	r2, [pc, #68]	; (80086f8 <HAL_ADC_ConfigChannel+0x258>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d111      	bne.n	80086da <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80086b6:	4b11      	ldr	r3, [pc, #68]	; (80086fc <HAL_ADC_ConfigChannel+0x25c>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a11      	ldr	r2, [pc, #68]	; (8008700 <HAL_ADC_ConfigChannel+0x260>)
 80086bc:	fba2 2303 	umull	r2, r3, r2, r3
 80086c0:	0c9a      	lsrs	r2, r3, #18
 80086c2:	4613      	mov	r3, r2
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	4413      	add	r3, r2
 80086c8:	005b      	lsls	r3, r3, #1
 80086ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80086cc:	e002      	b.n	80086d4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	3b01      	subs	r3, #1
 80086d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1f9      	bne.n	80086ce <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80086e2:	2300      	movs	r3, #0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3714      	adds	r7, #20
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr
 80086f0:	40012300 	.word	0x40012300
 80086f4:	40012000 	.word	0x40012000
 80086f8:	10000012 	.word	0x10000012
 80086fc:	20000000 	.word	0x20000000
 8008700:	431bde83 	.word	0x431bde83

08008704 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800870c:	4b79      	ldr	r3, [pc, #484]	; (80088f4 <ADC_Init+0x1f0>)
 800870e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	685a      	ldr	r2, [r3, #4]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	431a      	orrs	r2, r3
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	685a      	ldr	r2, [r3, #4]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008738:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	6859      	ldr	r1, [r3, #4]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	021a      	lsls	r2, r3, #8
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	430a      	orrs	r2, r1
 800874c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	685a      	ldr	r2, [r3, #4]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800875c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	6859      	ldr	r1, [r3, #4]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	689a      	ldr	r2, [r3, #8]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	430a      	orrs	r2, r1
 800876e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	689a      	ldr	r2, [r3, #8]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800877e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	6899      	ldr	r1, [r3, #8]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	68da      	ldr	r2, [r3, #12]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	430a      	orrs	r2, r1
 8008790:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008796:	4a58      	ldr	r2, [pc, #352]	; (80088f8 <ADC_Init+0x1f4>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d022      	beq.n	80087e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	689a      	ldr	r2, [r3, #8]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80087aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	6899      	ldr	r1, [r3, #8]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	430a      	orrs	r2, r1
 80087bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	689a      	ldr	r2, [r3, #8]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80087cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	6899      	ldr	r1, [r3, #8]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	430a      	orrs	r2, r1
 80087de:	609a      	str	r2, [r3, #8]
 80087e0:	e00f      	b.n	8008802 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	689a      	ldr	r2, [r3, #8]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80087f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	689a      	ldr	r2, [r3, #8]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008800:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	689a      	ldr	r2, [r3, #8]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f022 0202 	bic.w	r2, r2, #2
 8008810:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	6899      	ldr	r1, [r3, #8]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	7e1b      	ldrb	r3, [r3, #24]
 800881c:	005a      	lsls	r2, r3, #1
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	430a      	orrs	r2, r1
 8008824:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f893 3020 	ldrb.w	r3, [r3, #32]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d01b      	beq.n	8008868 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	685a      	ldr	r2, [r3, #4]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800883e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	685a      	ldr	r2, [r3, #4]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800884e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	6859      	ldr	r1, [r3, #4]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885a:	3b01      	subs	r3, #1
 800885c:	035a      	lsls	r2, r3, #13
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	430a      	orrs	r2, r1
 8008864:	605a      	str	r2, [r3, #4]
 8008866:	e007      	b.n	8008878 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	685a      	ldr	r2, [r3, #4]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008876:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008886:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	69db      	ldr	r3, [r3, #28]
 8008892:	3b01      	subs	r3, #1
 8008894:	051a      	lsls	r2, r3, #20
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	430a      	orrs	r2, r1
 800889c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	689a      	ldr	r2, [r3, #8]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80088ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	6899      	ldr	r1, [r3, #8]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80088ba:	025a      	lsls	r2, r3, #9
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	430a      	orrs	r2, r1
 80088c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	689a      	ldr	r2, [r3, #8]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	6899      	ldr	r1, [r3, #8]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	695b      	ldr	r3, [r3, #20]
 80088de:	029a      	lsls	r2, r3, #10
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	430a      	orrs	r2, r1
 80088e6:	609a      	str	r2, [r3, #8]
}
 80088e8:	bf00      	nop
 80088ea:	3714      	adds	r7, #20
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr
 80088f4:	40012300 	.word	0x40012300
 80088f8:	0f000001 	.word	0x0f000001

080088fc <__NVIC_SetPriorityGrouping>:
{
 80088fc:	b480      	push	{r7}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f003 0307 	and.w	r3, r3, #7
 800890a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800890c:	4b0c      	ldr	r3, [pc, #48]	; (8008940 <__NVIC_SetPriorityGrouping+0x44>)
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008912:	68ba      	ldr	r2, [r7, #8]
 8008914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008918:	4013      	ands	r3, r2
 800891a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800892c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800892e:	4a04      	ldr	r2, [pc, #16]	; (8008940 <__NVIC_SetPriorityGrouping+0x44>)
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	60d3      	str	r3, [r2, #12]
}
 8008934:	bf00      	nop
 8008936:	3714      	adds	r7, #20
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr
 8008940:	e000ed00 	.word	0xe000ed00

08008944 <__NVIC_GetPriorityGrouping>:
{
 8008944:	b480      	push	{r7}
 8008946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008948:	4b04      	ldr	r3, [pc, #16]	; (800895c <__NVIC_GetPriorityGrouping+0x18>)
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	0a1b      	lsrs	r3, r3, #8
 800894e:	f003 0307 	and.w	r3, r3, #7
}
 8008952:	4618      	mov	r0, r3
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr
 800895c:	e000ed00 	.word	0xe000ed00

08008960 <__NVIC_EnableIRQ>:
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	4603      	mov	r3, r0
 8008968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800896a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800896e:	2b00      	cmp	r3, #0
 8008970:	db0b      	blt.n	800898a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008972:	79fb      	ldrb	r3, [r7, #7]
 8008974:	f003 021f 	and.w	r2, r3, #31
 8008978:	4907      	ldr	r1, [pc, #28]	; (8008998 <__NVIC_EnableIRQ+0x38>)
 800897a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800897e:	095b      	lsrs	r3, r3, #5
 8008980:	2001      	movs	r0, #1
 8008982:	fa00 f202 	lsl.w	r2, r0, r2
 8008986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800898a:	bf00      	nop
 800898c:	370c      	adds	r7, #12
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr
 8008996:	bf00      	nop
 8008998:	e000e100 	.word	0xe000e100

0800899c <__NVIC_DisableIRQ>:
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	4603      	mov	r3, r0
 80089a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	db12      	blt.n	80089d4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80089ae:	79fb      	ldrb	r3, [r7, #7]
 80089b0:	f003 021f 	and.w	r2, r3, #31
 80089b4:	490a      	ldr	r1, [pc, #40]	; (80089e0 <__NVIC_DisableIRQ+0x44>)
 80089b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089ba:	095b      	lsrs	r3, r3, #5
 80089bc:	2001      	movs	r0, #1
 80089be:	fa00 f202 	lsl.w	r2, r0, r2
 80089c2:	3320      	adds	r3, #32
 80089c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80089c8:	f3bf 8f4f 	dsb	sy
}
 80089cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80089ce:	f3bf 8f6f 	isb	sy
}
 80089d2:	bf00      	nop
}
 80089d4:	bf00      	nop
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr
 80089e0:	e000e100 	.word	0xe000e100

080089e4 <__NVIC_SetPriority>:
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	4603      	mov	r3, r0
 80089ec:	6039      	str	r1, [r7, #0]
 80089ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	db0a      	blt.n	8008a0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	b2da      	uxtb	r2, r3
 80089fc:	490c      	ldr	r1, [pc, #48]	; (8008a30 <__NVIC_SetPriority+0x4c>)
 80089fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a02:	0112      	lsls	r2, r2, #4
 8008a04:	b2d2      	uxtb	r2, r2
 8008a06:	440b      	add	r3, r1
 8008a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008a0c:	e00a      	b.n	8008a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	b2da      	uxtb	r2, r3
 8008a12:	4908      	ldr	r1, [pc, #32]	; (8008a34 <__NVIC_SetPriority+0x50>)
 8008a14:	79fb      	ldrb	r3, [r7, #7]
 8008a16:	f003 030f 	and.w	r3, r3, #15
 8008a1a:	3b04      	subs	r3, #4
 8008a1c:	0112      	lsls	r2, r2, #4
 8008a1e:	b2d2      	uxtb	r2, r2
 8008a20:	440b      	add	r3, r1
 8008a22:	761a      	strb	r2, [r3, #24]
}
 8008a24:	bf00      	nop
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr
 8008a30:	e000e100 	.word	0xe000e100
 8008a34:	e000ed00 	.word	0xe000ed00

08008a38 <NVIC_EncodePriority>:
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b089      	sub	sp, #36	; 0x24
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f003 0307 	and.w	r3, r3, #7
 8008a4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	f1c3 0307 	rsb	r3, r3, #7
 8008a52:	2b04      	cmp	r3, #4
 8008a54:	bf28      	it	cs
 8008a56:	2304      	movcs	r3, #4
 8008a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	3304      	adds	r3, #4
 8008a5e:	2b06      	cmp	r3, #6
 8008a60:	d902      	bls.n	8008a68 <NVIC_EncodePriority+0x30>
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	3b03      	subs	r3, #3
 8008a66:	e000      	b.n	8008a6a <NVIC_EncodePriority+0x32>
 8008a68:	2300      	movs	r3, #0
 8008a6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	fa02 f303 	lsl.w	r3, r2, r3
 8008a76:	43da      	mvns	r2, r3
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	401a      	ands	r2, r3
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008a80:	f04f 31ff 	mov.w	r1, #4294967295
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	fa01 f303 	lsl.w	r3, r1, r3
 8008a8a:	43d9      	mvns	r1, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a90:	4313      	orrs	r3, r2
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3724      	adds	r7, #36	; 0x24
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr

08008a9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b082      	sub	sp, #8
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f7ff ff28 	bl	80088fc <__NVIC_SetPriorityGrouping>
}
 8008aac:	bf00      	nop
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b086      	sub	sp, #24
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	4603      	mov	r3, r0
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]
 8008ac0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008ac6:	f7ff ff3d 	bl	8008944 <__NVIC_GetPriorityGrouping>
 8008aca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	68b9      	ldr	r1, [r7, #8]
 8008ad0:	6978      	ldr	r0, [r7, #20]
 8008ad2:	f7ff ffb1 	bl	8008a38 <NVIC_EncodePriority>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008adc:	4611      	mov	r1, r2
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7ff ff80 	bl	80089e4 <__NVIC_SetPriority>
}
 8008ae4:	bf00      	nop
 8008ae6:	3718      	adds	r7, #24
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	4603      	mov	r3, r0
 8008af4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7ff ff30 	bl	8008960 <__NVIC_EnableIRQ>
}
 8008b00:	bf00      	nop
 8008b02:	3708      	adds	r7, #8
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	4603      	mov	r3, r0
 8008b10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7ff ff40 	bl	800899c <__NVIC_DisableIRQ>
}
 8008b1c:	bf00      	nop
 8008b1e:	3708      	adds	r7, #8
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b089      	sub	sp, #36	; 0x24
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008b32:	2300      	movs	r3, #0
 8008b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008b36:	2300      	movs	r3, #0
 8008b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	61fb      	str	r3, [r7, #28]
 8008b3e:	e177      	b.n	8008e30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008b40:	2201      	movs	r2, #1
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	fa02 f303 	lsl.w	r3, r2, r3
 8008b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	697a      	ldr	r2, [r7, #20]
 8008b50:	4013      	ands	r3, r2
 8008b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	f040 8166 	bne.w	8008e2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	f003 0303 	and.w	r3, r3, #3
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d005      	beq.n	8008b76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	d130      	bne.n	8008bd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	005b      	lsls	r3, r3, #1
 8008b80:	2203      	movs	r2, #3
 8008b82:	fa02 f303 	lsl.w	r3, r2, r3
 8008b86:	43db      	mvns	r3, r3
 8008b88:	69ba      	ldr	r2, [r7, #24]
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	68da      	ldr	r2, [r3, #12]
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	005b      	lsls	r3, r3, #1
 8008b96:	fa02 f303 	lsl.w	r3, r2, r3
 8008b9a:	69ba      	ldr	r2, [r7, #24]
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	69ba      	ldr	r2, [r7, #24]
 8008ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008bac:	2201      	movs	r2, #1
 8008bae:	69fb      	ldr	r3, [r7, #28]
 8008bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb4:	43db      	mvns	r3, r3
 8008bb6:	69ba      	ldr	r2, [r7, #24]
 8008bb8:	4013      	ands	r3, r2
 8008bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	091b      	lsrs	r3, r3, #4
 8008bc2:	f003 0201 	and.w	r2, r3, #1
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bcc:	69ba      	ldr	r2, [r7, #24]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	69ba      	ldr	r2, [r7, #24]
 8008bd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	f003 0303 	and.w	r3, r3, #3
 8008be0:	2b03      	cmp	r3, #3
 8008be2:	d017      	beq.n	8008c14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	005b      	lsls	r3, r3, #1
 8008bee:	2203      	movs	r2, #3
 8008bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf4:	43db      	mvns	r3, r3
 8008bf6:	69ba      	ldr	r2, [r7, #24]
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	689a      	ldr	r2, [r3, #8]
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	005b      	lsls	r3, r3, #1
 8008c04:	fa02 f303 	lsl.w	r3, r2, r3
 8008c08:	69ba      	ldr	r2, [r7, #24]
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	69ba      	ldr	r2, [r7, #24]
 8008c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	f003 0303 	and.w	r3, r3, #3
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d123      	bne.n	8008c68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	08da      	lsrs	r2, r3, #3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	3208      	adds	r2, #8
 8008c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	f003 0307 	and.w	r3, r3, #7
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	220f      	movs	r2, #15
 8008c38:	fa02 f303 	lsl.w	r3, r2, r3
 8008c3c:	43db      	mvns	r3, r3
 8008c3e:	69ba      	ldr	r2, [r7, #24]
 8008c40:	4013      	ands	r3, r2
 8008c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	691a      	ldr	r2, [r3, #16]
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	f003 0307 	and.w	r3, r3, #7
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	fa02 f303 	lsl.w	r3, r2, r3
 8008c54:	69ba      	ldr	r2, [r7, #24]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	08da      	lsrs	r2, r3, #3
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	3208      	adds	r2, #8
 8008c62:	69b9      	ldr	r1, [r7, #24]
 8008c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	005b      	lsls	r3, r3, #1
 8008c72:	2203      	movs	r2, #3
 8008c74:	fa02 f303 	lsl.w	r3, r2, r3
 8008c78:	43db      	mvns	r3, r3
 8008c7a:	69ba      	ldr	r2, [r7, #24]
 8008c7c:	4013      	ands	r3, r2
 8008c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	f003 0203 	and.w	r2, r3, #3
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	005b      	lsls	r3, r3, #1
 8008c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c90:	69ba      	ldr	r2, [r7, #24]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	69ba      	ldr	r2, [r7, #24]
 8008c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f000 80c0 	beq.w	8008e2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008caa:	2300      	movs	r3, #0
 8008cac:	60fb      	str	r3, [r7, #12]
 8008cae:	4b66      	ldr	r3, [pc, #408]	; (8008e48 <HAL_GPIO_Init+0x324>)
 8008cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cb2:	4a65      	ldr	r2, [pc, #404]	; (8008e48 <HAL_GPIO_Init+0x324>)
 8008cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8008cba:	4b63      	ldr	r3, [pc, #396]	; (8008e48 <HAL_GPIO_Init+0x324>)
 8008cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cc2:	60fb      	str	r3, [r7, #12]
 8008cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008cc6:	4a61      	ldr	r2, [pc, #388]	; (8008e4c <HAL_GPIO_Init+0x328>)
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	089b      	lsrs	r3, r3, #2
 8008ccc:	3302      	adds	r3, #2
 8008cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	f003 0303 	and.w	r3, r3, #3
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	220f      	movs	r2, #15
 8008cde:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce2:	43db      	mvns	r3, r3
 8008ce4:	69ba      	ldr	r2, [r7, #24]
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a58      	ldr	r2, [pc, #352]	; (8008e50 <HAL_GPIO_Init+0x32c>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d037      	beq.n	8008d62 <HAL_GPIO_Init+0x23e>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4a57      	ldr	r2, [pc, #348]	; (8008e54 <HAL_GPIO_Init+0x330>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d031      	beq.n	8008d5e <HAL_GPIO_Init+0x23a>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a56      	ldr	r2, [pc, #344]	; (8008e58 <HAL_GPIO_Init+0x334>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d02b      	beq.n	8008d5a <HAL_GPIO_Init+0x236>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a55      	ldr	r2, [pc, #340]	; (8008e5c <HAL_GPIO_Init+0x338>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d025      	beq.n	8008d56 <HAL_GPIO_Init+0x232>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a54      	ldr	r2, [pc, #336]	; (8008e60 <HAL_GPIO_Init+0x33c>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d01f      	beq.n	8008d52 <HAL_GPIO_Init+0x22e>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a53      	ldr	r2, [pc, #332]	; (8008e64 <HAL_GPIO_Init+0x340>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d019      	beq.n	8008d4e <HAL_GPIO_Init+0x22a>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a52      	ldr	r2, [pc, #328]	; (8008e68 <HAL_GPIO_Init+0x344>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d013      	beq.n	8008d4a <HAL_GPIO_Init+0x226>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a51      	ldr	r2, [pc, #324]	; (8008e6c <HAL_GPIO_Init+0x348>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d00d      	beq.n	8008d46 <HAL_GPIO_Init+0x222>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a50      	ldr	r2, [pc, #320]	; (8008e70 <HAL_GPIO_Init+0x34c>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d007      	beq.n	8008d42 <HAL_GPIO_Init+0x21e>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a4f      	ldr	r2, [pc, #316]	; (8008e74 <HAL_GPIO_Init+0x350>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d101      	bne.n	8008d3e <HAL_GPIO_Init+0x21a>
 8008d3a:	2309      	movs	r3, #9
 8008d3c:	e012      	b.n	8008d64 <HAL_GPIO_Init+0x240>
 8008d3e:	230a      	movs	r3, #10
 8008d40:	e010      	b.n	8008d64 <HAL_GPIO_Init+0x240>
 8008d42:	2308      	movs	r3, #8
 8008d44:	e00e      	b.n	8008d64 <HAL_GPIO_Init+0x240>
 8008d46:	2307      	movs	r3, #7
 8008d48:	e00c      	b.n	8008d64 <HAL_GPIO_Init+0x240>
 8008d4a:	2306      	movs	r3, #6
 8008d4c:	e00a      	b.n	8008d64 <HAL_GPIO_Init+0x240>
 8008d4e:	2305      	movs	r3, #5
 8008d50:	e008      	b.n	8008d64 <HAL_GPIO_Init+0x240>
 8008d52:	2304      	movs	r3, #4
 8008d54:	e006      	b.n	8008d64 <HAL_GPIO_Init+0x240>
 8008d56:	2303      	movs	r3, #3
 8008d58:	e004      	b.n	8008d64 <HAL_GPIO_Init+0x240>
 8008d5a:	2302      	movs	r3, #2
 8008d5c:	e002      	b.n	8008d64 <HAL_GPIO_Init+0x240>
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e000      	b.n	8008d64 <HAL_GPIO_Init+0x240>
 8008d62:	2300      	movs	r3, #0
 8008d64:	69fa      	ldr	r2, [r7, #28]
 8008d66:	f002 0203 	and.w	r2, r2, #3
 8008d6a:	0092      	lsls	r2, r2, #2
 8008d6c:	4093      	lsls	r3, r2
 8008d6e:	69ba      	ldr	r2, [r7, #24]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008d74:	4935      	ldr	r1, [pc, #212]	; (8008e4c <HAL_GPIO_Init+0x328>)
 8008d76:	69fb      	ldr	r3, [r7, #28]
 8008d78:	089b      	lsrs	r3, r3, #2
 8008d7a:	3302      	adds	r3, #2
 8008d7c:	69ba      	ldr	r2, [r7, #24]
 8008d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008d82:	4b3d      	ldr	r3, [pc, #244]	; (8008e78 <HAL_GPIO_Init+0x354>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	43db      	mvns	r3, r3
 8008d8c:	69ba      	ldr	r2, [r7, #24]
 8008d8e:	4013      	ands	r3, r2
 8008d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d003      	beq.n	8008da6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008d9e:	69ba      	ldr	r2, [r7, #24]
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008da6:	4a34      	ldr	r2, [pc, #208]	; (8008e78 <HAL_GPIO_Init+0x354>)
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008dac:	4b32      	ldr	r3, [pc, #200]	; (8008e78 <HAL_GPIO_Init+0x354>)
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	43db      	mvns	r3, r3
 8008db6:	69ba      	ldr	r2, [r7, #24]
 8008db8:	4013      	ands	r3, r2
 8008dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d003      	beq.n	8008dd0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008dc8:	69ba      	ldr	r2, [r7, #24]
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008dd0:	4a29      	ldr	r2, [pc, #164]	; (8008e78 <HAL_GPIO_Init+0x354>)
 8008dd2:	69bb      	ldr	r3, [r7, #24]
 8008dd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008dd6:	4b28      	ldr	r3, [pc, #160]	; (8008e78 <HAL_GPIO_Init+0x354>)
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	43db      	mvns	r3, r3
 8008de0:	69ba      	ldr	r2, [r7, #24]
 8008de2:	4013      	ands	r3, r2
 8008de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d003      	beq.n	8008dfa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008df2:	69ba      	ldr	r2, [r7, #24]
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008dfa:	4a1f      	ldr	r2, [pc, #124]	; (8008e78 <HAL_GPIO_Init+0x354>)
 8008dfc:	69bb      	ldr	r3, [r7, #24]
 8008dfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008e00:	4b1d      	ldr	r3, [pc, #116]	; (8008e78 <HAL_GPIO_Init+0x354>)
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	43db      	mvns	r3, r3
 8008e0a:	69ba      	ldr	r2, [r7, #24]
 8008e0c:	4013      	ands	r3, r2
 8008e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d003      	beq.n	8008e24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008e1c:	69ba      	ldr	r2, [r7, #24]
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	4313      	orrs	r3, r2
 8008e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008e24:	4a14      	ldr	r2, [pc, #80]	; (8008e78 <HAL_GPIO_Init+0x354>)
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	61fb      	str	r3, [r7, #28]
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	2b0f      	cmp	r3, #15
 8008e34:	f67f ae84 	bls.w	8008b40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008e38:	bf00      	nop
 8008e3a:	bf00      	nop
 8008e3c:	3724      	adds	r7, #36	; 0x24
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	40023800 	.word	0x40023800
 8008e4c:	40013800 	.word	0x40013800
 8008e50:	40020000 	.word	0x40020000
 8008e54:	40020400 	.word	0x40020400
 8008e58:	40020800 	.word	0x40020800
 8008e5c:	40020c00 	.word	0x40020c00
 8008e60:	40021000 	.word	0x40021000
 8008e64:	40021400 	.word	0x40021400
 8008e68:	40021800 	.word	0x40021800
 8008e6c:	40021c00 	.word	0x40021c00
 8008e70:	40022000 	.word	0x40022000
 8008e74:	40022400 	.word	0x40022400
 8008e78:	40013c00 	.word	0x40013c00

08008e7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	460b      	mov	r3, r1
 8008e86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	691a      	ldr	r2, [r3, #16]
 8008e8c:	887b      	ldrh	r3, [r7, #2]
 8008e8e:	4013      	ands	r3, r2
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d002      	beq.n	8008e9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008e94:	2301      	movs	r3, #1
 8008e96:	73fb      	strb	r3, [r7, #15]
 8008e98:	e001      	b.n	8008e9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3714      	adds	r7, #20
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	807b      	strh	r3, [r7, #2]
 8008eb8:	4613      	mov	r3, r2
 8008eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008ebc:	787b      	ldrb	r3, [r7, #1]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d003      	beq.n	8008eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008ec2:	887a      	ldrh	r2, [r7, #2]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008ec8:	e003      	b.n	8008ed2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008eca:	887b      	ldrh	r3, [r7, #2]
 8008ecc:	041a      	lsls	r2, r3, #16
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	619a      	str	r2, [r3, #24]
}
 8008ed2:	bf00      	nop
 8008ed4:	370c      	adds	r7, #12
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr
	...

08008ee0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008eea:	4b08      	ldr	r3, [pc, #32]	; (8008f0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008eec:	695a      	ldr	r2, [r3, #20]
 8008eee:	88fb      	ldrh	r3, [r7, #6]
 8008ef0:	4013      	ands	r3, r2
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d006      	beq.n	8008f04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008ef6:	4a05      	ldr	r2, [pc, #20]	; (8008f0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008ef8:	88fb      	ldrh	r3, [r7, #6]
 8008efa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008efc:	88fb      	ldrh	r3, [r7, #6]
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7fa fce6 	bl	80038d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8008f04:	bf00      	nop
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	40013c00 	.word	0x40013c00

08008f10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d101      	bne.n	8008f22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e12b      	b.n	800917a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d106      	bne.n	8008f3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f7f9 fda0 	bl	8002a7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2224      	movs	r2, #36	; 0x24
 8008f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f022 0201 	bic.w	r2, r2, #1
 8008f52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008f74:	f002 fe9a 	bl	800bcac <HAL_RCC_GetPCLK1Freq>
 8008f78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	4a81      	ldr	r2, [pc, #516]	; (8009184 <HAL_I2C_Init+0x274>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d807      	bhi.n	8008f94 <HAL_I2C_Init+0x84>
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	4a80      	ldr	r2, [pc, #512]	; (8009188 <HAL_I2C_Init+0x278>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	bf94      	ite	ls
 8008f8c:	2301      	movls	r3, #1
 8008f8e:	2300      	movhi	r3, #0
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	e006      	b.n	8008fa2 <HAL_I2C_Init+0x92>
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	4a7d      	ldr	r2, [pc, #500]	; (800918c <HAL_I2C_Init+0x27c>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	bf94      	ite	ls
 8008f9c:	2301      	movls	r3, #1
 8008f9e:	2300      	movhi	r3, #0
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d001      	beq.n	8008faa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e0e7      	b.n	800917a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	4a78      	ldr	r2, [pc, #480]	; (8009190 <HAL_I2C_Init+0x280>)
 8008fae:	fba2 2303 	umull	r2, r3, r2, r3
 8008fb2:	0c9b      	lsrs	r3, r3, #18
 8008fb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	68ba      	ldr	r2, [r7, #8]
 8008fc6:	430a      	orrs	r2, r1
 8008fc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	6a1b      	ldr	r3, [r3, #32]
 8008fd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	4a6a      	ldr	r2, [pc, #424]	; (8009184 <HAL_I2C_Init+0x274>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d802      	bhi.n	8008fe4 <HAL_I2C_Init+0xd4>
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	e009      	b.n	8008ff8 <HAL_I2C_Init+0xe8>
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008fea:	fb02 f303 	mul.w	r3, r2, r3
 8008fee:	4a69      	ldr	r2, [pc, #420]	; (8009194 <HAL_I2C_Init+0x284>)
 8008ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff4:	099b      	lsrs	r3, r3, #6
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	6812      	ldr	r2, [r2, #0]
 8008ffc:	430b      	orrs	r3, r1
 8008ffe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	69db      	ldr	r3, [r3, #28]
 8009006:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800900a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	495c      	ldr	r1, [pc, #368]	; (8009184 <HAL_I2C_Init+0x274>)
 8009014:	428b      	cmp	r3, r1
 8009016:	d819      	bhi.n	800904c <HAL_I2C_Init+0x13c>
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	1e59      	subs	r1, r3, #1
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	005b      	lsls	r3, r3, #1
 8009022:	fbb1 f3f3 	udiv	r3, r1, r3
 8009026:	1c59      	adds	r1, r3, #1
 8009028:	f640 73fc 	movw	r3, #4092	; 0xffc
 800902c:	400b      	ands	r3, r1
 800902e:	2b00      	cmp	r3, #0
 8009030:	d00a      	beq.n	8009048 <HAL_I2C_Init+0x138>
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	1e59      	subs	r1, r3, #1
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	005b      	lsls	r3, r3, #1
 800903c:	fbb1 f3f3 	udiv	r3, r1, r3
 8009040:	3301      	adds	r3, #1
 8009042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009046:	e051      	b.n	80090ec <HAL_I2C_Init+0x1dc>
 8009048:	2304      	movs	r3, #4
 800904a:	e04f      	b.n	80090ec <HAL_I2C_Init+0x1dc>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d111      	bne.n	8009078 <HAL_I2C_Init+0x168>
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	1e58      	subs	r0, r3, #1
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6859      	ldr	r1, [r3, #4]
 800905c:	460b      	mov	r3, r1
 800905e:	005b      	lsls	r3, r3, #1
 8009060:	440b      	add	r3, r1
 8009062:	fbb0 f3f3 	udiv	r3, r0, r3
 8009066:	3301      	adds	r3, #1
 8009068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800906c:	2b00      	cmp	r3, #0
 800906e:	bf0c      	ite	eq
 8009070:	2301      	moveq	r3, #1
 8009072:	2300      	movne	r3, #0
 8009074:	b2db      	uxtb	r3, r3
 8009076:	e012      	b.n	800909e <HAL_I2C_Init+0x18e>
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	1e58      	subs	r0, r3, #1
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6859      	ldr	r1, [r3, #4]
 8009080:	460b      	mov	r3, r1
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	440b      	add	r3, r1
 8009086:	0099      	lsls	r1, r3, #2
 8009088:	440b      	add	r3, r1
 800908a:	fbb0 f3f3 	udiv	r3, r0, r3
 800908e:	3301      	adds	r3, #1
 8009090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009094:	2b00      	cmp	r3, #0
 8009096:	bf0c      	ite	eq
 8009098:	2301      	moveq	r3, #1
 800909a:	2300      	movne	r3, #0
 800909c:	b2db      	uxtb	r3, r3
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d001      	beq.n	80090a6 <HAL_I2C_Init+0x196>
 80090a2:	2301      	movs	r3, #1
 80090a4:	e022      	b.n	80090ec <HAL_I2C_Init+0x1dc>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d10e      	bne.n	80090cc <HAL_I2C_Init+0x1bc>
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	1e58      	subs	r0, r3, #1
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6859      	ldr	r1, [r3, #4]
 80090b6:	460b      	mov	r3, r1
 80090b8:	005b      	lsls	r3, r3, #1
 80090ba:	440b      	add	r3, r1
 80090bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80090c0:	3301      	adds	r3, #1
 80090c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090ca:	e00f      	b.n	80090ec <HAL_I2C_Init+0x1dc>
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	1e58      	subs	r0, r3, #1
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6859      	ldr	r1, [r3, #4]
 80090d4:	460b      	mov	r3, r1
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	440b      	add	r3, r1
 80090da:	0099      	lsls	r1, r3, #2
 80090dc:	440b      	add	r3, r1
 80090de:	fbb0 f3f3 	udiv	r3, r0, r3
 80090e2:	3301      	adds	r3, #1
 80090e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80090ec:	6879      	ldr	r1, [r7, #4]
 80090ee:	6809      	ldr	r1, [r1, #0]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	69da      	ldr	r2, [r3, #28]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6a1b      	ldr	r3, [r3, #32]
 8009106:	431a      	orrs	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	430a      	orrs	r2, r1
 800910e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800911a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	6911      	ldr	r1, [r2, #16]
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	68d2      	ldr	r2, [r2, #12]
 8009126:	4311      	orrs	r1, r2
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	6812      	ldr	r2, [r2, #0]
 800912c:	430b      	orrs	r3, r1
 800912e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	695a      	ldr	r2, [r3, #20]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	699b      	ldr	r3, [r3, #24]
 8009142:	431a      	orrs	r2, r3
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	430a      	orrs	r2, r1
 800914a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f042 0201 	orr.w	r2, r2, #1
 800915a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2220      	movs	r2, #32
 8009166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009178:	2300      	movs	r3, #0
}
 800917a:	4618      	mov	r0, r3
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	000186a0 	.word	0x000186a0
 8009188:	001e847f 	.word	0x001e847f
 800918c:	003d08ff 	.word	0x003d08ff
 8009190:	431bde83 	.word	0x431bde83
 8009194:	10624dd3 	.word	0x10624dd3

08009198 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b088      	sub	sp, #32
 800919c:	af02      	add	r7, sp, #8
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	4608      	mov	r0, r1
 80091a2:	4611      	mov	r1, r2
 80091a4:	461a      	mov	r2, r3
 80091a6:	4603      	mov	r3, r0
 80091a8:	817b      	strh	r3, [r7, #10]
 80091aa:	460b      	mov	r3, r1
 80091ac:	813b      	strh	r3, [r7, #8]
 80091ae:	4613      	mov	r3, r2
 80091b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80091b2:	f7ff f901 	bl	80083b8 <HAL_GetTick>
 80091b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	2b20      	cmp	r3, #32
 80091c2:	f040 80d9 	bne.w	8009378 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	9300      	str	r3, [sp, #0]
 80091ca:	2319      	movs	r3, #25
 80091cc:	2201      	movs	r2, #1
 80091ce:	496d      	ldr	r1, [pc, #436]	; (8009384 <HAL_I2C_Mem_Write+0x1ec>)
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	f000 fcb5 	bl	8009b40 <I2C_WaitOnFlagUntilTimeout>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d001      	beq.n	80091e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80091dc:	2302      	movs	r3, #2
 80091de:	e0cc      	b.n	800937a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d101      	bne.n	80091ee <HAL_I2C_Mem_Write+0x56>
 80091ea:	2302      	movs	r3, #2
 80091ec:	e0c5      	b.n	800937a <HAL_I2C_Mem_Write+0x1e2>
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2201      	movs	r2, #1
 80091f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 0301 	and.w	r3, r3, #1
 8009200:	2b01      	cmp	r3, #1
 8009202:	d007      	beq.n	8009214 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f042 0201 	orr.w	r2, r2, #1
 8009212:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009222:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2221      	movs	r2, #33	; 0x21
 8009228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2240      	movs	r2, #64	; 0x40
 8009230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2200      	movs	r2, #0
 8009238:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6a3a      	ldr	r2, [r7, #32]
 800923e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009244:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800924a:	b29a      	uxth	r2, r3
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	4a4d      	ldr	r2, [pc, #308]	; (8009388 <HAL_I2C_Mem_Write+0x1f0>)
 8009254:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009256:	88f8      	ldrh	r0, [r7, #6]
 8009258:	893a      	ldrh	r2, [r7, #8]
 800925a:	8979      	ldrh	r1, [r7, #10]
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	9301      	str	r3, [sp, #4]
 8009260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009262:	9300      	str	r3, [sp, #0]
 8009264:	4603      	mov	r3, r0
 8009266:	68f8      	ldr	r0, [r7, #12]
 8009268:	f000 faec 	bl	8009844 <I2C_RequestMemoryWrite>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d052      	beq.n	8009318 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	e081      	b.n	800937a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009276:	697a      	ldr	r2, [r7, #20]
 8009278:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f000 fd36 	bl	8009cec <I2C_WaitOnTXEFlagUntilTimeout>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00d      	beq.n	80092a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800928a:	2b04      	cmp	r3, #4
 800928c:	d107      	bne.n	800929e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800929c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800929e:	2301      	movs	r3, #1
 80092a0:	e06b      	b.n	800937a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a6:	781a      	ldrb	r2, [r3, #0]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b2:	1c5a      	adds	r2, r3, #1
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092bc:	3b01      	subs	r3, #1
 80092be:	b29a      	uxth	r2, r3
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	3b01      	subs	r3, #1
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	695b      	ldr	r3, [r3, #20]
 80092d8:	f003 0304 	and.w	r3, r3, #4
 80092dc:	2b04      	cmp	r3, #4
 80092de:	d11b      	bne.n	8009318 <HAL_I2C_Mem_Write+0x180>
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d017      	beq.n	8009318 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ec:	781a      	ldrb	r2, [r3, #0]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f8:	1c5a      	adds	r2, r3, #1
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009302:	3b01      	subs	r3, #1
 8009304:	b29a      	uxth	r2, r3
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800930e:	b29b      	uxth	r3, r3
 8009310:	3b01      	subs	r3, #1
 8009312:	b29a      	uxth	r2, r3
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800931c:	2b00      	cmp	r3, #0
 800931e:	d1aa      	bne.n	8009276 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009320:	697a      	ldr	r2, [r7, #20]
 8009322:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f000 fd22 	bl	8009d6e <I2C_WaitOnBTFFlagUntilTimeout>
 800932a:	4603      	mov	r3, r0
 800932c:	2b00      	cmp	r3, #0
 800932e:	d00d      	beq.n	800934c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009334:	2b04      	cmp	r3, #4
 8009336:	d107      	bne.n	8009348 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009346:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009348:	2301      	movs	r3, #1
 800934a:	e016      	b.n	800937a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800935a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2220      	movs	r2, #32
 8009360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2200      	movs	r2, #0
 8009368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2200      	movs	r2, #0
 8009370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009374:	2300      	movs	r3, #0
 8009376:	e000      	b.n	800937a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009378:	2302      	movs	r3, #2
  }
}
 800937a:	4618      	mov	r0, r3
 800937c:	3718      	adds	r7, #24
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	00100002 	.word	0x00100002
 8009388:	ffff0000 	.word	0xffff0000

0800938c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b08c      	sub	sp, #48	; 0x30
 8009390:	af02      	add	r7, sp, #8
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	4608      	mov	r0, r1
 8009396:	4611      	mov	r1, r2
 8009398:	461a      	mov	r2, r3
 800939a:	4603      	mov	r3, r0
 800939c:	817b      	strh	r3, [r7, #10]
 800939e:	460b      	mov	r3, r1
 80093a0:	813b      	strh	r3, [r7, #8]
 80093a2:	4613      	mov	r3, r2
 80093a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80093a6:	f7ff f807 	bl	80083b8 <HAL_GetTick>
 80093aa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	2b20      	cmp	r3, #32
 80093b6:	f040 8208 	bne.w	80097ca <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80093ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093bc:	9300      	str	r3, [sp, #0]
 80093be:	2319      	movs	r3, #25
 80093c0:	2201      	movs	r2, #1
 80093c2:	497b      	ldr	r1, [pc, #492]	; (80095b0 <HAL_I2C_Mem_Read+0x224>)
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	f000 fbbb 	bl	8009b40 <I2C_WaitOnFlagUntilTimeout>
 80093ca:	4603      	mov	r3, r0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d001      	beq.n	80093d4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80093d0:	2302      	movs	r3, #2
 80093d2:	e1fb      	b.n	80097cc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d101      	bne.n	80093e2 <HAL_I2C_Mem_Read+0x56>
 80093de:	2302      	movs	r3, #2
 80093e0:	e1f4      	b.n	80097cc <HAL_I2C_Mem_Read+0x440>
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2201      	movs	r2, #1
 80093e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f003 0301 	and.w	r3, r3, #1
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d007      	beq.n	8009408 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f042 0201 	orr.w	r2, r2, #1
 8009406:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009416:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2222      	movs	r2, #34	; 0x22
 800941c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2240      	movs	r2, #64	; 0x40
 8009424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2200      	movs	r2, #0
 800942c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009432:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009438:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800943e:	b29a      	uxth	r2, r3
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	4a5b      	ldr	r2, [pc, #364]	; (80095b4 <HAL_I2C_Mem_Read+0x228>)
 8009448:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800944a:	88f8      	ldrh	r0, [r7, #6]
 800944c:	893a      	ldrh	r2, [r7, #8]
 800944e:	8979      	ldrh	r1, [r7, #10]
 8009450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009452:	9301      	str	r3, [sp, #4]
 8009454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009456:	9300      	str	r3, [sp, #0]
 8009458:	4603      	mov	r3, r0
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f000 fa88 	bl	8009970 <I2C_RequestMemoryRead>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d001      	beq.n	800946a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	e1b0      	b.n	80097cc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800946e:	2b00      	cmp	r3, #0
 8009470:	d113      	bne.n	800949a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009472:	2300      	movs	r3, #0
 8009474:	623b      	str	r3, [r7, #32]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	695b      	ldr	r3, [r3, #20]
 800947c:	623b      	str	r3, [r7, #32]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	699b      	ldr	r3, [r3, #24]
 8009484:	623b      	str	r3, [r7, #32]
 8009486:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009496:	601a      	str	r2, [r3, #0]
 8009498:	e184      	b.n	80097a4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d11b      	bne.n	80094da <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094b2:	2300      	movs	r3, #0
 80094b4:	61fb      	str	r3, [r7, #28]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	695b      	ldr	r3, [r3, #20]
 80094bc:	61fb      	str	r3, [r7, #28]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	699b      	ldr	r3, [r3, #24]
 80094c4:	61fb      	str	r3, [r7, #28]
 80094c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094d6:	601a      	str	r2, [r3, #0]
 80094d8:	e164      	b.n	80097a4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094de:	2b02      	cmp	r3, #2
 80094e0:	d11b      	bne.n	800951a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009500:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009502:	2300      	movs	r3, #0
 8009504:	61bb      	str	r3, [r7, #24]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	695b      	ldr	r3, [r3, #20]
 800950c:	61bb      	str	r3, [r7, #24]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	699b      	ldr	r3, [r3, #24]
 8009514:	61bb      	str	r3, [r7, #24]
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	e144      	b.n	80097a4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800951a:	2300      	movs	r3, #0
 800951c:	617b      	str	r3, [r7, #20]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	695b      	ldr	r3, [r3, #20]
 8009524:	617b      	str	r3, [r7, #20]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	699b      	ldr	r3, [r3, #24]
 800952c:	617b      	str	r3, [r7, #20]
 800952e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009530:	e138      	b.n	80097a4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009536:	2b03      	cmp	r3, #3
 8009538:	f200 80f1 	bhi.w	800971e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009540:	2b01      	cmp	r3, #1
 8009542:	d123      	bne.n	800958c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009546:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f000 fc51 	bl	8009df0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800954e:	4603      	mov	r3, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d001      	beq.n	8009558 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	e139      	b.n	80097cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	691a      	ldr	r2, [r3, #16]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009562:	b2d2      	uxtb	r2, r2
 8009564:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800956a:	1c5a      	adds	r2, r3, #1
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009574:	3b01      	subs	r3, #1
 8009576:	b29a      	uxth	r2, r3
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009580:	b29b      	uxth	r3, r3
 8009582:	3b01      	subs	r3, #1
 8009584:	b29a      	uxth	r2, r3
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	855a      	strh	r2, [r3, #42]	; 0x2a
 800958a:	e10b      	b.n	80097a4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009590:	2b02      	cmp	r3, #2
 8009592:	d14e      	bne.n	8009632 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009596:	9300      	str	r3, [sp, #0]
 8009598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800959a:	2200      	movs	r2, #0
 800959c:	4906      	ldr	r1, [pc, #24]	; (80095b8 <HAL_I2C_Mem_Read+0x22c>)
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f000 face 	bl	8009b40 <I2C_WaitOnFlagUntilTimeout>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d008      	beq.n	80095bc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e10e      	b.n	80097cc <HAL_I2C_Mem_Read+0x440>
 80095ae:	bf00      	nop
 80095b0:	00100002 	.word	0x00100002
 80095b4:	ffff0000 	.word	0xffff0000
 80095b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	691a      	ldr	r2, [r3, #16]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d6:	b2d2      	uxtb	r2, r2
 80095d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095de:	1c5a      	adds	r2, r3, #1
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095e8:	3b01      	subs	r3, #1
 80095ea:	b29a      	uxth	r2, r3
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	3b01      	subs	r3, #1
 80095f8:	b29a      	uxth	r2, r3
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	691a      	ldr	r2, [r3, #16]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009608:	b2d2      	uxtb	r2, r2
 800960a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009610:	1c5a      	adds	r2, r3, #1
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800961a:	3b01      	subs	r3, #1
 800961c:	b29a      	uxth	r2, r3
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009626:	b29b      	uxth	r3, r3
 8009628:	3b01      	subs	r3, #1
 800962a:	b29a      	uxth	r2, r3
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009630:	e0b8      	b.n	80097a4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009634:	9300      	str	r3, [sp, #0]
 8009636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009638:	2200      	movs	r2, #0
 800963a:	4966      	ldr	r1, [pc, #408]	; (80097d4 <HAL_I2C_Mem_Read+0x448>)
 800963c:	68f8      	ldr	r0, [r7, #12]
 800963e:	f000 fa7f 	bl	8009b40 <I2C_WaitOnFlagUntilTimeout>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d001      	beq.n	800964c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	e0bf      	b.n	80097cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800965a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	691a      	ldr	r2, [r3, #16]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009666:	b2d2      	uxtb	r2, r2
 8009668:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966e:	1c5a      	adds	r2, r3, #1
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009678:	3b01      	subs	r3, #1
 800967a:	b29a      	uxth	r2, r3
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009684:	b29b      	uxth	r3, r3
 8009686:	3b01      	subs	r3, #1
 8009688:	b29a      	uxth	r2, r3
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800968e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009690:	9300      	str	r3, [sp, #0]
 8009692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009694:	2200      	movs	r2, #0
 8009696:	494f      	ldr	r1, [pc, #316]	; (80097d4 <HAL_I2C_Mem_Read+0x448>)
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f000 fa51 	bl	8009b40 <I2C_WaitOnFlagUntilTimeout>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d001      	beq.n	80096a8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	e091      	b.n	80097cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	691a      	ldr	r2, [r3, #16]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c2:	b2d2      	uxtb	r2, r2
 80096c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ca:	1c5a      	adds	r2, r3, #1
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096d4:	3b01      	subs	r3, #1
 80096d6:	b29a      	uxth	r2, r3
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	3b01      	subs	r3, #1
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	691a      	ldr	r2, [r3, #16]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f4:	b2d2      	uxtb	r2, r2
 80096f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fc:	1c5a      	adds	r2, r3, #1
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009706:	3b01      	subs	r3, #1
 8009708:	b29a      	uxth	r2, r3
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009712:	b29b      	uxth	r3, r3
 8009714:	3b01      	subs	r3, #1
 8009716:	b29a      	uxth	r2, r3
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800971c:	e042      	b.n	80097a4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800971e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009720:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	f000 fb64 	bl	8009df0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d001      	beq.n	8009732 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	e04c      	b.n	80097cc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	691a      	ldr	r2, [r3, #16]
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973c:	b2d2      	uxtb	r2, r2
 800973e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009744:	1c5a      	adds	r2, r3, #1
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800974e:	3b01      	subs	r3, #1
 8009750:	b29a      	uxth	r2, r3
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800975a:	b29b      	uxth	r3, r3
 800975c:	3b01      	subs	r3, #1
 800975e:	b29a      	uxth	r2, r3
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	695b      	ldr	r3, [r3, #20]
 800976a:	f003 0304 	and.w	r3, r3, #4
 800976e:	2b04      	cmp	r3, #4
 8009770:	d118      	bne.n	80097a4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	691a      	ldr	r2, [r3, #16]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800977c:	b2d2      	uxtb	r2, r2
 800977e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009784:	1c5a      	adds	r2, r3, #1
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800978e:	3b01      	subs	r3, #1
 8009790:	b29a      	uxth	r2, r3
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800979a:	b29b      	uxth	r3, r3
 800979c:	3b01      	subs	r3, #1
 800979e:	b29a      	uxth	r2, r3
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	f47f aec2 	bne.w	8009532 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2220      	movs	r2, #32
 80097b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2200      	movs	r2, #0
 80097ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2200      	movs	r2, #0
 80097c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80097c6:	2300      	movs	r3, #0
 80097c8:	e000      	b.n	80097cc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80097ca:	2302      	movs	r3, #2
  }
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3728      	adds	r7, #40	; 0x28
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	00010004 	.word	0x00010004

080097d8 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	2b20      	cmp	r3, #32
 80097ea:	d124      	bne.n	8009836 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2228      	movs	r2, #40	; 0x28
 80097f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f003 0301 	and.w	r3, r3, #1
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d007      	beq.n	8009812 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f042 0201 	orr.w	r2, r2, #1
 8009810:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009820:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	685a      	ldr	r2, [r3, #4]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8009830:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8009832:	2300      	movs	r3, #0
 8009834:	e000      	b.n	8009838 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8009836:	2302      	movs	r3, #2
  }
}
 8009838:	4618      	mov	r0, r3
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b088      	sub	sp, #32
 8009848:	af02      	add	r7, sp, #8
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	4608      	mov	r0, r1
 800984e:	4611      	mov	r1, r2
 8009850:	461a      	mov	r2, r3
 8009852:	4603      	mov	r3, r0
 8009854:	817b      	strh	r3, [r7, #10]
 8009856:	460b      	mov	r3, r1
 8009858:	813b      	strh	r3, [r7, #8]
 800985a:	4613      	mov	r3, r2
 800985c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800986c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800986e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009870:	9300      	str	r3, [sp, #0]
 8009872:	6a3b      	ldr	r3, [r7, #32]
 8009874:	2200      	movs	r2, #0
 8009876:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f000 f960 	bl	8009b40 <I2C_WaitOnFlagUntilTimeout>
 8009880:	4603      	mov	r3, r0
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00d      	beq.n	80098a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009894:	d103      	bne.n	800989e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800989c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800989e:	2303      	movs	r3, #3
 80098a0:	e05f      	b.n	8009962 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80098a2:	897b      	ldrh	r3, [r7, #10]
 80098a4:	b2db      	uxtb	r3, r3
 80098a6:	461a      	mov	r2, r3
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80098b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80098b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b4:	6a3a      	ldr	r2, [r7, #32]
 80098b6:	492d      	ldr	r1, [pc, #180]	; (800996c <I2C_RequestMemoryWrite+0x128>)
 80098b8:	68f8      	ldr	r0, [r7, #12]
 80098ba:	f000 f998 	bl	8009bee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80098be:	4603      	mov	r3, r0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d001      	beq.n	80098c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	e04c      	b.n	8009962 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098c8:	2300      	movs	r3, #0
 80098ca:	617b      	str	r3, [r7, #20]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	695b      	ldr	r3, [r3, #20]
 80098d2:	617b      	str	r3, [r7, #20]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	699b      	ldr	r3, [r3, #24]
 80098da:	617b      	str	r3, [r7, #20]
 80098dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80098de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098e0:	6a39      	ldr	r1, [r7, #32]
 80098e2:	68f8      	ldr	r0, [r7, #12]
 80098e4:	f000 fa02 	bl	8009cec <I2C_WaitOnTXEFlagUntilTimeout>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d00d      	beq.n	800990a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f2:	2b04      	cmp	r3, #4
 80098f4:	d107      	bne.n	8009906 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009904:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009906:	2301      	movs	r3, #1
 8009908:	e02b      	b.n	8009962 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800990a:	88fb      	ldrh	r3, [r7, #6]
 800990c:	2b01      	cmp	r3, #1
 800990e:	d105      	bne.n	800991c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009910:	893b      	ldrh	r3, [r7, #8]
 8009912:	b2da      	uxtb	r2, r3
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	611a      	str	r2, [r3, #16]
 800991a:	e021      	b.n	8009960 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800991c:	893b      	ldrh	r3, [r7, #8]
 800991e:	0a1b      	lsrs	r3, r3, #8
 8009920:	b29b      	uxth	r3, r3
 8009922:	b2da      	uxtb	r2, r3
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800992a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800992c:	6a39      	ldr	r1, [r7, #32]
 800992e:	68f8      	ldr	r0, [r7, #12]
 8009930:	f000 f9dc 	bl	8009cec <I2C_WaitOnTXEFlagUntilTimeout>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00d      	beq.n	8009956 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800993e:	2b04      	cmp	r3, #4
 8009940:	d107      	bne.n	8009952 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009950:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009952:	2301      	movs	r3, #1
 8009954:	e005      	b.n	8009962 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009956:	893b      	ldrh	r3, [r7, #8]
 8009958:	b2da      	uxtb	r2, r3
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	3718      	adds	r7, #24
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	00010002 	.word	0x00010002

08009970 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b088      	sub	sp, #32
 8009974:	af02      	add	r7, sp, #8
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	4608      	mov	r0, r1
 800997a:	4611      	mov	r1, r2
 800997c:	461a      	mov	r2, r3
 800997e:	4603      	mov	r3, r0
 8009980:	817b      	strh	r3, [r7, #10]
 8009982:	460b      	mov	r3, r1
 8009984:	813b      	strh	r3, [r7, #8]
 8009986:	4613      	mov	r3, r2
 8009988:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009998:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	681a      	ldr	r2, [r3, #0]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80099aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ac:	9300      	str	r3, [sp, #0]
 80099ae:	6a3b      	ldr	r3, [r7, #32]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	f000 f8c2 	bl	8009b40 <I2C_WaitOnFlagUntilTimeout>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d00d      	beq.n	80099de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099d0:	d103      	bne.n	80099da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80099da:	2303      	movs	r3, #3
 80099dc:	e0aa      	b.n	8009b34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80099de:	897b      	ldrh	r3, [r7, #10]
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	461a      	mov	r2, r3
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80099ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80099ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f0:	6a3a      	ldr	r2, [r7, #32]
 80099f2:	4952      	ldr	r1, [pc, #328]	; (8009b3c <I2C_RequestMemoryRead+0x1cc>)
 80099f4:	68f8      	ldr	r0, [r7, #12]
 80099f6:	f000 f8fa 	bl	8009bee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80099fa:	4603      	mov	r3, r0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d001      	beq.n	8009a04 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009a00:	2301      	movs	r3, #1
 8009a02:	e097      	b.n	8009b34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a04:	2300      	movs	r3, #0
 8009a06:	617b      	str	r3, [r7, #20]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	695b      	ldr	r3, [r3, #20]
 8009a0e:	617b      	str	r3, [r7, #20]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	699b      	ldr	r3, [r3, #24]
 8009a16:	617b      	str	r3, [r7, #20]
 8009a18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a1c:	6a39      	ldr	r1, [r7, #32]
 8009a1e:	68f8      	ldr	r0, [r7, #12]
 8009a20:	f000 f964 	bl	8009cec <I2C_WaitOnTXEFlagUntilTimeout>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00d      	beq.n	8009a46 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a2e:	2b04      	cmp	r3, #4
 8009a30:	d107      	bne.n	8009a42 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	e076      	b.n	8009b34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009a46:	88fb      	ldrh	r3, [r7, #6]
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d105      	bne.n	8009a58 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a4c:	893b      	ldrh	r3, [r7, #8]
 8009a4e:	b2da      	uxtb	r2, r3
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	611a      	str	r2, [r3, #16]
 8009a56:	e021      	b.n	8009a9c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009a58:	893b      	ldrh	r3, [r7, #8]
 8009a5a:	0a1b      	lsrs	r3, r3, #8
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	b2da      	uxtb	r2, r3
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a68:	6a39      	ldr	r1, [r7, #32]
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	f000 f93e 	bl	8009cec <I2C_WaitOnTXEFlagUntilTimeout>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d00d      	beq.n	8009a92 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7a:	2b04      	cmp	r3, #4
 8009a7c:	d107      	bne.n	8009a8e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e050      	b.n	8009b34 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a92:	893b      	ldrh	r3, [r7, #8]
 8009a94:	b2da      	uxtb	r2, r3
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a9e:	6a39      	ldr	r1, [r7, #32]
 8009aa0:	68f8      	ldr	r0, [r7, #12]
 8009aa2:	f000 f923 	bl	8009cec <I2C_WaitOnTXEFlagUntilTimeout>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d00d      	beq.n	8009ac8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab0:	2b04      	cmp	r3, #4
 8009ab2:	d107      	bne.n	8009ac4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ac2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	e035      	b.n	8009b34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ad6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ada:	9300      	str	r3, [sp, #0]
 8009adc:	6a3b      	ldr	r3, [r7, #32]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	f000 f82b 	bl	8009b40 <I2C_WaitOnFlagUntilTimeout>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00d      	beq.n	8009b0c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009afe:	d103      	bne.n	8009b08 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009b08:	2303      	movs	r3, #3
 8009b0a:	e013      	b.n	8009b34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009b0c:	897b      	ldrh	r3, [r7, #10]
 8009b0e:	b2db      	uxtb	r3, r3
 8009b10:	f043 0301 	orr.w	r3, r3, #1
 8009b14:	b2da      	uxtb	r2, r3
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1e:	6a3a      	ldr	r2, [r7, #32]
 8009b20:	4906      	ldr	r1, [pc, #24]	; (8009b3c <I2C_RequestMemoryRead+0x1cc>)
 8009b22:	68f8      	ldr	r0, [r7, #12]
 8009b24:	f000 f863 	bl	8009bee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d001      	beq.n	8009b32 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e000      	b.n	8009b34 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009b32:	2300      	movs	r3, #0
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3718      	adds	r7, #24
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	00010002 	.word	0x00010002

08009b40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	603b      	str	r3, [r7, #0]
 8009b4c:	4613      	mov	r3, r2
 8009b4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b50:	e025      	b.n	8009b9e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b58:	d021      	beq.n	8009b9e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b5a:	f7fe fc2d 	bl	80083b8 <HAL_GetTick>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	1ad3      	subs	r3, r2, r3
 8009b64:	683a      	ldr	r2, [r7, #0]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d302      	bcc.n	8009b70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d116      	bne.n	8009b9e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2200      	movs	r2, #0
 8009b74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2220      	movs	r2, #32
 8009b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2200      	movs	r2, #0
 8009b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b8a:	f043 0220 	orr.w	r2, r3, #32
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2200      	movs	r2, #0
 8009b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e023      	b.n	8009be6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	0c1b      	lsrs	r3, r3, #16
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d10d      	bne.n	8009bc4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	695b      	ldr	r3, [r3, #20]
 8009bae:	43da      	mvns	r2, r3
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	4013      	ands	r3, r2
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	bf0c      	ite	eq
 8009bba:	2301      	moveq	r3, #1
 8009bbc:	2300      	movne	r3, #0
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	e00c      	b.n	8009bde <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	699b      	ldr	r3, [r3, #24]
 8009bca:	43da      	mvns	r2, r3
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	4013      	ands	r3, r2
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	bf0c      	ite	eq
 8009bd6:	2301      	moveq	r3, #1
 8009bd8:	2300      	movne	r3, #0
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	461a      	mov	r2, r3
 8009bde:	79fb      	ldrb	r3, [r7, #7]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d0b6      	beq.n	8009b52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3710      	adds	r7, #16
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b084      	sub	sp, #16
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	60f8      	str	r0, [r7, #12]
 8009bf6:	60b9      	str	r1, [r7, #8]
 8009bf8:	607a      	str	r2, [r7, #4]
 8009bfa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009bfc:	e051      	b.n	8009ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	695b      	ldr	r3, [r3, #20]
 8009c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c0c:	d123      	bne.n	8009c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009c26:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2220      	movs	r2, #32
 8009c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c42:	f043 0204 	orr.w	r2, r3, #4
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009c52:	2301      	movs	r3, #1
 8009c54:	e046      	b.n	8009ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c5c:	d021      	beq.n	8009ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c5e:	f7fe fbab 	bl	80083b8 <HAL_GetTick>
 8009c62:	4602      	mov	r2, r0
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	1ad3      	subs	r3, r2, r3
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d302      	bcc.n	8009c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d116      	bne.n	8009ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2200      	movs	r2, #0
 8009c78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2220      	movs	r2, #32
 8009c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2200      	movs	r2, #0
 8009c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c8e:	f043 0220 	orr.w	r2, r3, #32
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e020      	b.n	8009ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	0c1b      	lsrs	r3, r3, #16
 8009ca6:	b2db      	uxtb	r3, r3
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d10c      	bne.n	8009cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	695b      	ldr	r3, [r3, #20]
 8009cb2:	43da      	mvns	r2, r3
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	4013      	ands	r3, r2
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	bf14      	ite	ne
 8009cbe:	2301      	movne	r3, #1
 8009cc0:	2300      	moveq	r3, #0
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	e00b      	b.n	8009cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	699b      	ldr	r3, [r3, #24]
 8009ccc:	43da      	mvns	r2, r3
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	4013      	ands	r3, r2
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	bf14      	ite	ne
 8009cd8:	2301      	movne	r3, #1
 8009cda:	2300      	moveq	r3, #0
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d18d      	bne.n	8009bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009ce2:	2300      	movs	r3, #0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3710      	adds	r7, #16
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009cf8:	e02d      	b.n	8009d56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f000 f8ce 	bl	8009e9c <I2C_IsAcknowledgeFailed>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d001      	beq.n	8009d0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	e02d      	b.n	8009d66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d10:	d021      	beq.n	8009d56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d12:	f7fe fb51 	bl	80083b8 <HAL_GetTick>
 8009d16:	4602      	mov	r2, r0
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	1ad3      	subs	r3, r2, r3
 8009d1c:	68ba      	ldr	r2, [r7, #8]
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	d302      	bcc.n	8009d28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d116      	bne.n	8009d56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2220      	movs	r2, #32
 8009d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d42:	f043 0220 	orr.w	r2, r3, #32
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009d52:	2301      	movs	r3, #1
 8009d54:	e007      	b.n	8009d66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	695b      	ldr	r3, [r3, #20]
 8009d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d60:	2b80      	cmp	r3, #128	; 0x80
 8009d62:	d1ca      	bne.n	8009cfa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b084      	sub	sp, #16
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	60f8      	str	r0, [r7, #12]
 8009d76:	60b9      	str	r1, [r7, #8]
 8009d78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009d7a:	e02d      	b.n	8009dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	f000 f88d 	bl	8009e9c <I2C_IsAcknowledgeFailed>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d001      	beq.n	8009d8c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	e02d      	b.n	8009de8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d92:	d021      	beq.n	8009dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d94:	f7fe fb10 	bl	80083b8 <HAL_GetTick>
 8009d98:	4602      	mov	r2, r0
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	1ad3      	subs	r3, r2, r3
 8009d9e:	68ba      	ldr	r2, [r7, #8]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d302      	bcc.n	8009daa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d116      	bne.n	8009dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2200      	movs	r2, #0
 8009dae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2220      	movs	r2, #32
 8009db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc4:	f043 0220 	orr.w	r2, r3, #32
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	e007      	b.n	8009de8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	695b      	ldr	r3, [r3, #20]
 8009dde:	f003 0304 	and.w	r3, r3, #4
 8009de2:	2b04      	cmp	r3, #4
 8009de4:	d1ca      	bne.n	8009d7c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009de6:	2300      	movs	r3, #0
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3710      	adds	r7, #16
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	60b9      	str	r1, [r7, #8]
 8009dfa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009dfc:	e042      	b.n	8009e84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	695b      	ldr	r3, [r3, #20]
 8009e04:	f003 0310 	and.w	r3, r3, #16
 8009e08:	2b10      	cmp	r3, #16
 8009e0a:	d119      	bne.n	8009e40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f06f 0210 	mvn.w	r2, #16
 8009e14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2220      	movs	r2, #32
 8009e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2200      	movs	r2, #0
 8009e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e029      	b.n	8009e94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e40:	f7fe faba 	bl	80083b8 <HAL_GetTick>
 8009e44:	4602      	mov	r2, r0
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	1ad3      	subs	r3, r2, r3
 8009e4a:	68ba      	ldr	r2, [r7, #8]
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d302      	bcc.n	8009e56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d116      	bne.n	8009e84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2220      	movs	r2, #32
 8009e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2200      	movs	r2, #0
 8009e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e70:	f043 0220 	orr.w	r2, r3, #32
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009e80:	2301      	movs	r3, #1
 8009e82:	e007      	b.n	8009e94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	695b      	ldr	r3, [r3, #20]
 8009e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e8e:	2b40      	cmp	r3, #64	; 0x40
 8009e90:	d1b5      	bne.n	8009dfe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009e92:	2300      	movs	r3, #0
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3710      	adds	r7, #16
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b083      	sub	sp, #12
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	695b      	ldr	r3, [r3, #20]
 8009eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009eb2:	d11b      	bne.n	8009eec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009ebc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2220      	movs	r2, #32
 8009ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed8:	f043 0204 	orr.w	r2, r3, #4
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e000      	b.n	8009eee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	370c      	adds	r7, #12
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr

08009efa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009efa:	b480      	push	{r7}
 8009efc:	b083      	sub	sp, #12
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
 8009f02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	2b20      	cmp	r3, #32
 8009f0e:	d129      	bne.n	8009f64 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2224      	movs	r2, #36	; 0x24
 8009f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f022 0201 	bic.w	r2, r2, #1
 8009f26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f022 0210 	bic.w	r2, r2, #16
 8009f36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	683a      	ldr	r2, [r7, #0]
 8009f44:	430a      	orrs	r2, r1
 8009f46:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f042 0201 	orr.w	r2, r2, #1
 8009f56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2220      	movs	r2, #32
 8009f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009f60:	2300      	movs	r3, #0
 8009f62:	e000      	b.n	8009f66 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8009f64:	2302      	movs	r3, #2
  }
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	370c      	adds	r7, #12
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr

08009f72 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009f72:	b480      	push	{r7}
 8009f74:	b085      	sub	sp, #20
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
 8009f7a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	2b20      	cmp	r3, #32
 8009f8a:	d12a      	bne.n	8009fe2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2224      	movs	r2, #36	; 0x24
 8009f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f022 0201 	bic.w	r2, r2, #1
 8009fa2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009faa:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8009fac:	89fb      	ldrh	r3, [r7, #14]
 8009fae:	f023 030f 	bic.w	r3, r3, #15
 8009fb2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	b29a      	uxth	r2, r3
 8009fb8:	89fb      	ldrh	r3, [r7, #14]
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	89fa      	ldrh	r2, [r7, #14]
 8009fc4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f042 0201 	orr.w	r2, r2, #1
 8009fd4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2220      	movs	r2, #32
 8009fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	e000      	b.n	8009fe4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8009fe2:	2302      	movs	r3, #2
  }
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3714      	adds	r7, #20
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d101      	bne.n	800a002 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8009ffe:	2301      	movs	r3, #1
 800a000:	e034      	b.n	800a06c <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800a00a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f245 5255 	movw	r2, #21845	; 0x5555
 800a014:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	6852      	ldr	r2, [r2, #4]
 800a01e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	6892      	ldr	r2, [r2, #8]
 800a028:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800a02a:	f7fe f9c5 	bl	80083b8 <HAL_GetTick>
 800a02e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a030:	e00f      	b.n	800a052 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800a032:	f7fe f9c1 	bl	80083b8 <HAL_GetTick>
 800a036:	4602      	mov	r2, r0
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	1ad3      	subs	r3, r2, r3
 800a03c:	2b31      	cmp	r3, #49	; 0x31
 800a03e:	d908      	bls.n	800a052 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	68db      	ldr	r3, [r3, #12]
 800a046:	f003 0303 	and.w	r3, r3, #3
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d001      	beq.n	800a052 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800a04e:	2303      	movs	r3, #3
 800a050:	e00c      	b.n	800a06c <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	f003 0303 	and.w	r3, r3, #3
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d1e8      	bne.n	800a032 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a068:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a06a:	2300      	movs	r3, #0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3710      	adds	r7, #16
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800a074:	b480      	push	{r7}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a084:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a086:	2300      	movs	r3, #0
}
 800a088:	4618      	mov	r0, r3
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a094:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a096:	b08f      	sub	sp, #60	; 0x3c
 800a098:	af0a      	add	r7, sp, #40	; 0x28
 800a09a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d101      	bne.n	800a0a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e10f      	b.n	800a2c6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d106      	bne.n	800a0c6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f00e ff03 	bl	8018ecc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2203      	movs	r2, #3
 800a0ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d102      	bne.n	800a0e0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f004 fe2c 	bl	800ed42 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	603b      	str	r3, [r7, #0]
 800a0f0:	687e      	ldr	r6, [r7, #4]
 800a0f2:	466d      	mov	r5, sp
 800a0f4:	f106 0410 	add.w	r4, r6, #16
 800a0f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a0fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a0fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a0fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a100:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a104:	e885 0003 	stmia.w	r5, {r0, r1}
 800a108:	1d33      	adds	r3, r6, #4
 800a10a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a10c:	6838      	ldr	r0, [r7, #0]
 800a10e:	f004 fd03 	bl	800eb18 <USB_CoreInit>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d005      	beq.n	800a124 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2202      	movs	r2, #2
 800a11c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	e0d0      	b.n	800a2c6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	2100      	movs	r1, #0
 800a12a:	4618      	mov	r0, r3
 800a12c:	f004 fe1a 	bl	800ed64 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a130:	2300      	movs	r3, #0
 800a132:	73fb      	strb	r3, [r7, #15]
 800a134:	e04a      	b.n	800a1cc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a136:	7bfa      	ldrb	r2, [r7, #15]
 800a138:	6879      	ldr	r1, [r7, #4]
 800a13a:	4613      	mov	r3, r2
 800a13c:	00db      	lsls	r3, r3, #3
 800a13e:	1a9b      	subs	r3, r3, r2
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	440b      	add	r3, r1
 800a144:	333d      	adds	r3, #61	; 0x3d
 800a146:	2201      	movs	r2, #1
 800a148:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a14a:	7bfa      	ldrb	r2, [r7, #15]
 800a14c:	6879      	ldr	r1, [r7, #4]
 800a14e:	4613      	mov	r3, r2
 800a150:	00db      	lsls	r3, r3, #3
 800a152:	1a9b      	subs	r3, r3, r2
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	440b      	add	r3, r1
 800a158:	333c      	adds	r3, #60	; 0x3c
 800a15a:	7bfa      	ldrb	r2, [r7, #15]
 800a15c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a15e:	7bfa      	ldrb	r2, [r7, #15]
 800a160:	7bfb      	ldrb	r3, [r7, #15]
 800a162:	b298      	uxth	r0, r3
 800a164:	6879      	ldr	r1, [r7, #4]
 800a166:	4613      	mov	r3, r2
 800a168:	00db      	lsls	r3, r3, #3
 800a16a:	1a9b      	subs	r3, r3, r2
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	440b      	add	r3, r1
 800a170:	3342      	adds	r3, #66	; 0x42
 800a172:	4602      	mov	r2, r0
 800a174:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a176:	7bfa      	ldrb	r2, [r7, #15]
 800a178:	6879      	ldr	r1, [r7, #4]
 800a17a:	4613      	mov	r3, r2
 800a17c:	00db      	lsls	r3, r3, #3
 800a17e:	1a9b      	subs	r3, r3, r2
 800a180:	009b      	lsls	r3, r3, #2
 800a182:	440b      	add	r3, r1
 800a184:	333f      	adds	r3, #63	; 0x3f
 800a186:	2200      	movs	r2, #0
 800a188:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a18a:	7bfa      	ldrb	r2, [r7, #15]
 800a18c:	6879      	ldr	r1, [r7, #4]
 800a18e:	4613      	mov	r3, r2
 800a190:	00db      	lsls	r3, r3, #3
 800a192:	1a9b      	subs	r3, r3, r2
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	440b      	add	r3, r1
 800a198:	3344      	adds	r3, #68	; 0x44
 800a19a:	2200      	movs	r2, #0
 800a19c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a19e:	7bfa      	ldrb	r2, [r7, #15]
 800a1a0:	6879      	ldr	r1, [r7, #4]
 800a1a2:	4613      	mov	r3, r2
 800a1a4:	00db      	lsls	r3, r3, #3
 800a1a6:	1a9b      	subs	r3, r3, r2
 800a1a8:	009b      	lsls	r3, r3, #2
 800a1aa:	440b      	add	r3, r1
 800a1ac:	3348      	adds	r3, #72	; 0x48
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a1b2:	7bfa      	ldrb	r2, [r7, #15]
 800a1b4:	6879      	ldr	r1, [r7, #4]
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	00db      	lsls	r3, r3, #3
 800a1ba:	1a9b      	subs	r3, r3, r2
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	440b      	add	r3, r1
 800a1c0:	3350      	adds	r3, #80	; 0x50
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a1c6:	7bfb      	ldrb	r3, [r7, #15]
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	73fb      	strb	r3, [r7, #15]
 800a1cc:	7bfa      	ldrb	r2, [r7, #15]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d3af      	bcc.n	800a136 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	73fb      	strb	r3, [r7, #15]
 800a1da:	e044      	b.n	800a266 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a1dc:	7bfa      	ldrb	r2, [r7, #15]
 800a1de:	6879      	ldr	r1, [r7, #4]
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	00db      	lsls	r3, r3, #3
 800a1e4:	1a9b      	subs	r3, r3, r2
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	440b      	add	r3, r1
 800a1ea:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a1f2:	7bfa      	ldrb	r2, [r7, #15]
 800a1f4:	6879      	ldr	r1, [r7, #4]
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	00db      	lsls	r3, r3, #3
 800a1fa:	1a9b      	subs	r3, r3, r2
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	440b      	add	r3, r1
 800a200:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800a204:	7bfa      	ldrb	r2, [r7, #15]
 800a206:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a208:	7bfa      	ldrb	r2, [r7, #15]
 800a20a:	6879      	ldr	r1, [r7, #4]
 800a20c:	4613      	mov	r3, r2
 800a20e:	00db      	lsls	r3, r3, #3
 800a210:	1a9b      	subs	r3, r3, r2
 800a212:	009b      	lsls	r3, r3, #2
 800a214:	440b      	add	r3, r1
 800a216:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a21a:	2200      	movs	r2, #0
 800a21c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a21e:	7bfa      	ldrb	r2, [r7, #15]
 800a220:	6879      	ldr	r1, [r7, #4]
 800a222:	4613      	mov	r3, r2
 800a224:	00db      	lsls	r3, r3, #3
 800a226:	1a9b      	subs	r3, r3, r2
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	440b      	add	r3, r1
 800a22c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a230:	2200      	movs	r2, #0
 800a232:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a234:	7bfa      	ldrb	r2, [r7, #15]
 800a236:	6879      	ldr	r1, [r7, #4]
 800a238:	4613      	mov	r3, r2
 800a23a:	00db      	lsls	r3, r3, #3
 800a23c:	1a9b      	subs	r3, r3, r2
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	440b      	add	r3, r1
 800a242:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a246:	2200      	movs	r2, #0
 800a248:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a24a:	7bfa      	ldrb	r2, [r7, #15]
 800a24c:	6879      	ldr	r1, [r7, #4]
 800a24e:	4613      	mov	r3, r2
 800a250:	00db      	lsls	r3, r3, #3
 800a252:	1a9b      	subs	r3, r3, r2
 800a254:	009b      	lsls	r3, r3, #2
 800a256:	440b      	add	r3, r1
 800a258:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a25c:	2200      	movs	r2, #0
 800a25e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a260:	7bfb      	ldrb	r3, [r7, #15]
 800a262:	3301      	adds	r3, #1
 800a264:	73fb      	strb	r3, [r7, #15]
 800a266:	7bfa      	ldrb	r2, [r7, #15]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d3b5      	bcc.n	800a1dc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	603b      	str	r3, [r7, #0]
 800a276:	687e      	ldr	r6, [r7, #4]
 800a278:	466d      	mov	r5, sp
 800a27a:	f106 0410 	add.w	r4, r6, #16
 800a27e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a280:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a282:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a284:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a286:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a28a:	e885 0003 	stmia.w	r5, {r0, r1}
 800a28e:	1d33      	adds	r3, r6, #4
 800a290:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a292:	6838      	ldr	r0, [r7, #0]
 800a294:	f004 fdb2 	bl	800edfc <USB_DevInit>
 800a298:	4603      	mov	r3, r0
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d005      	beq.n	800a2aa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2202      	movs	r2, #2
 800a2a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e00d      	b.n	800a2c6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f005 fe2e 	bl	800ff20 <USB_DevDisconnect>

  return HAL_OK;
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3714      	adds	r7, #20
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a2ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a2ce:	b580      	push	{r7, lr}
 800a2d0:	b084      	sub	sp, #16
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d101      	bne.n	800a2ea <HAL_PCD_Start+0x1c>
 800a2e6:	2302      	movs	r3, #2
 800a2e8:	e020      	b.n	800a32c <HAL_PCD_Start+0x5e>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d109      	bne.n	800a30e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d005      	beq.n	800a30e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a306:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4618      	mov	r0, r3
 800a314:	f004 fd04 	bl	800ed20 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4618      	mov	r0, r3
 800a31e:	f005 fdde 	bl	800fede <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3710      	adds	r7, #16
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a334:	b590      	push	{r4, r7, lr}
 800a336:	b08d      	sub	sp, #52	; 0x34
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a342:	6a3b      	ldr	r3, [r7, #32]
 800a344:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4618      	mov	r0, r3
 800a34c:	f005 fe9c 	bl	8010088 <USB_GetMode>
 800a350:	4603      	mov	r3, r0
 800a352:	2b00      	cmp	r3, #0
 800a354:	f040 839d 	bne.w	800aa92 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4618      	mov	r0, r3
 800a35e:	f005 fe00 	bl	800ff62 <USB_ReadInterrupts>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	f000 8393 	beq.w	800aa90 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4618      	mov	r0, r3
 800a370:	f005 fdf7 	bl	800ff62 <USB_ReadInterrupts>
 800a374:	4603      	mov	r3, r0
 800a376:	f003 0302 	and.w	r3, r3, #2
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d107      	bne.n	800a38e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	695a      	ldr	r2, [r3, #20]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f002 0202 	and.w	r2, r2, #2
 800a38c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4618      	mov	r0, r3
 800a394:	f005 fde5 	bl	800ff62 <USB_ReadInterrupts>
 800a398:	4603      	mov	r3, r0
 800a39a:	f003 0310 	and.w	r3, r3, #16
 800a39e:	2b10      	cmp	r3, #16
 800a3a0:	d161      	bne.n	800a466 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	699a      	ldr	r2, [r3, #24]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f022 0210 	bic.w	r2, r2, #16
 800a3b0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800a3b2:	6a3b      	ldr	r3, [r7, #32]
 800a3b4:	6a1b      	ldr	r3, [r3, #32]
 800a3b6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800a3b8:	69bb      	ldr	r3, [r7, #24]
 800a3ba:	f003 020f 	and.w	r2, r3, #15
 800a3be:	4613      	mov	r3, r2
 800a3c0:	00db      	lsls	r3, r3, #3
 800a3c2:	1a9b      	subs	r3, r3, r2
 800a3c4:	009b      	lsls	r3, r3, #2
 800a3c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	4413      	add	r3, r2
 800a3ce:	3304      	adds	r3, #4
 800a3d0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a3d2:	69bb      	ldr	r3, [r7, #24]
 800a3d4:	0c5b      	lsrs	r3, r3, #17
 800a3d6:	f003 030f 	and.w	r3, r3, #15
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	d124      	bne.n	800a428 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a3de:	69ba      	ldr	r2, [r7, #24]
 800a3e0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800a3e4:	4013      	ands	r3, r2
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d035      	beq.n	800a456 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800a3ee:	69bb      	ldr	r3, [r7, #24]
 800a3f0:	091b      	lsrs	r3, r3, #4
 800a3f2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a3f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	6a38      	ldr	r0, [r7, #32]
 800a3fe:	f005 fc1c 	bl	800fc3a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	68da      	ldr	r2, [r3, #12]
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	091b      	lsrs	r3, r3, #4
 800a40a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a40e:	441a      	add	r2, r3
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	699a      	ldr	r2, [r3, #24]
 800a418:	69bb      	ldr	r3, [r7, #24]
 800a41a:	091b      	lsrs	r3, r3, #4
 800a41c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a420:	441a      	add	r2, r3
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	619a      	str	r2, [r3, #24]
 800a426:	e016      	b.n	800a456 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800a428:	69bb      	ldr	r3, [r7, #24]
 800a42a:	0c5b      	lsrs	r3, r3, #17
 800a42c:	f003 030f 	and.w	r3, r3, #15
 800a430:	2b06      	cmp	r3, #6
 800a432:	d110      	bne.n	800a456 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a43a:	2208      	movs	r2, #8
 800a43c:	4619      	mov	r1, r3
 800a43e:	6a38      	ldr	r0, [r7, #32]
 800a440:	f005 fbfb 	bl	800fc3a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	699a      	ldr	r2, [r3, #24]
 800a448:	69bb      	ldr	r3, [r7, #24]
 800a44a:	091b      	lsrs	r3, r3, #4
 800a44c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a450:	441a      	add	r2, r3
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	699a      	ldr	r2, [r3, #24]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f042 0210 	orr.w	r2, r2, #16
 800a464:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4618      	mov	r0, r3
 800a46c:	f005 fd79 	bl	800ff62 <USB_ReadInterrupts>
 800a470:	4603      	mov	r3, r0
 800a472:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a476:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a47a:	d16e      	bne.n	800a55a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800a47c:	2300      	movs	r3, #0
 800a47e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4618      	mov	r0, r3
 800a486:	f005 fd7f 	bl	800ff88 <USB_ReadDevAllOutEpInterrupt>
 800a48a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800a48c:	e062      	b.n	800a554 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800a48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a490:	f003 0301 	and.w	r3, r3, #1
 800a494:	2b00      	cmp	r3, #0
 800a496:	d057      	beq.n	800a548 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a49e:	b2d2      	uxtb	r2, r2
 800a4a0:	4611      	mov	r1, r2
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f005 fda4 	bl	800fff0 <USB_ReadDevOutEPInterrupt>
 800a4a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	f003 0301 	and.w	r3, r3, #1
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d00c      	beq.n	800a4ce <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b6:	015a      	lsls	r2, r3, #5
 800a4b8:	69fb      	ldr	r3, [r7, #28]
 800a4ba:	4413      	add	r3, r2
 800a4bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800a4c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 fdb1 	bl	800b030 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	f003 0308 	and.w	r3, r3, #8
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d00c      	beq.n	800a4f2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4da:	015a      	lsls	r2, r3, #5
 800a4dc:	69fb      	ldr	r3, [r7, #28]
 800a4de:	4413      	add	r3, r2
 800a4e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	2308      	movs	r3, #8
 800a4e8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800a4ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 feab 	bl	800b248 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	f003 0310 	and.w	r3, r3, #16
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d008      	beq.n	800a50e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800a4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fe:	015a      	lsls	r2, r3, #5
 800a500:	69fb      	ldr	r3, [r7, #28]
 800a502:	4413      	add	r3, r2
 800a504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a508:	461a      	mov	r2, r3
 800a50a:	2310      	movs	r3, #16
 800a50c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	f003 0320 	and.w	r3, r3, #32
 800a514:	2b00      	cmp	r3, #0
 800a516:	d008      	beq.n	800a52a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51a:	015a      	lsls	r2, r3, #5
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	4413      	add	r3, r2
 800a520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a524:	461a      	mov	r2, r3
 800a526:	2320      	movs	r3, #32
 800a528:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a530:	2b00      	cmp	r3, #0
 800a532:	d009      	beq.n	800a548 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800a534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a536:	015a      	lsls	r2, r3, #5
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	4413      	add	r3, r2
 800a53c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a540:	461a      	mov	r2, r3
 800a542:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a546:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800a548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54a:	3301      	adds	r3, #1
 800a54c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a550:	085b      	lsrs	r3, r3, #1
 800a552:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a556:	2b00      	cmp	r3, #0
 800a558:	d199      	bne.n	800a48e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4618      	mov	r0, r3
 800a560:	f005 fcff 	bl	800ff62 <USB_ReadInterrupts>
 800a564:	4603      	mov	r3, r0
 800a566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a56a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a56e:	f040 80c0 	bne.w	800a6f2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4618      	mov	r0, r3
 800a578:	f005 fd20 	bl	800ffbc <USB_ReadDevAllInEpInterrupt>
 800a57c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800a57e:	2300      	movs	r3, #0
 800a580:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800a582:	e0b2      	b.n	800a6ea <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a586:	f003 0301 	and.w	r3, r3, #1
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	f000 80a7 	beq.w	800a6de <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a596:	b2d2      	uxtb	r2, r2
 800a598:	4611      	mov	r1, r2
 800a59a:	4618      	mov	r0, r3
 800a59c:	f005 fd46 	bl	801002c <USB_ReadDevInEPInterrupt>
 800a5a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	f003 0301 	and.w	r3, r3, #1
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d057      	beq.n	800a65c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ae:	f003 030f 	and.w	r3, r3, #15
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a5b8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a5ba:	69fb      	ldr	r3, [r7, #28]
 800a5bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	43db      	mvns	r3, r3
 800a5c6:	69f9      	ldr	r1, [r7, #28]
 800a5c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a5cc:	4013      	ands	r3, r2
 800a5ce:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d2:	015a      	lsls	r2, r3, #5
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	4413      	add	r3, r2
 800a5d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5dc:	461a      	mov	r2, r3
 800a5de:	2301      	movs	r3, #1
 800a5e0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	691b      	ldr	r3, [r3, #16]
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d132      	bne.n	800a650 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a5ea:	6879      	ldr	r1, [r7, #4]
 800a5ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5ee:	4613      	mov	r3, r2
 800a5f0:	00db      	lsls	r3, r3, #3
 800a5f2:	1a9b      	subs	r3, r3, r2
 800a5f4:	009b      	lsls	r3, r3, #2
 800a5f6:	440b      	add	r3, r1
 800a5f8:	3348      	adds	r3, #72	; 0x48
 800a5fa:	6819      	ldr	r1, [r3, #0]
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a600:	4613      	mov	r3, r2
 800a602:	00db      	lsls	r3, r3, #3
 800a604:	1a9b      	subs	r3, r3, r2
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	4403      	add	r3, r0
 800a60a:	3344      	adds	r3, #68	; 0x44
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4419      	add	r1, r3
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a614:	4613      	mov	r3, r2
 800a616:	00db      	lsls	r3, r3, #3
 800a618:	1a9b      	subs	r3, r3, r2
 800a61a:	009b      	lsls	r3, r3, #2
 800a61c:	4403      	add	r3, r0
 800a61e:	3348      	adds	r3, #72	; 0x48
 800a620:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a624:	2b00      	cmp	r3, #0
 800a626:	d113      	bne.n	800a650 <HAL_PCD_IRQHandler+0x31c>
 800a628:	6879      	ldr	r1, [r7, #4]
 800a62a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a62c:	4613      	mov	r3, r2
 800a62e:	00db      	lsls	r3, r3, #3
 800a630:	1a9b      	subs	r3, r3, r2
 800a632:	009b      	lsls	r3, r3, #2
 800a634:	440b      	add	r3, r1
 800a636:	3350      	adds	r3, #80	; 0x50
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d108      	bne.n	800a650 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6818      	ldr	r0, [r3, #0]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a648:	461a      	mov	r2, r3
 800a64a:	2101      	movs	r1, #1
 800a64c:	f005 fd4e 	bl	80100ec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a652:	b2db      	uxtb	r3, r3
 800a654:	4619      	mov	r1, r3
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f00e fcc7 	bl	8018fea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	f003 0308 	and.w	r3, r3, #8
 800a662:	2b00      	cmp	r3, #0
 800a664:	d008      	beq.n	800a678 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a668:	015a      	lsls	r2, r3, #5
 800a66a:	69fb      	ldr	r3, [r7, #28]
 800a66c:	4413      	add	r3, r2
 800a66e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a672:	461a      	mov	r2, r3
 800a674:	2308      	movs	r3, #8
 800a676:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	f003 0310 	and.w	r3, r3, #16
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d008      	beq.n	800a694 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a684:	015a      	lsls	r2, r3, #5
 800a686:	69fb      	ldr	r3, [r7, #28]
 800a688:	4413      	add	r3, r2
 800a68a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a68e:	461a      	mov	r2, r3
 800a690:	2310      	movs	r3, #16
 800a692:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d008      	beq.n	800a6b0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a0:	015a      	lsls	r2, r3, #5
 800a6a2:	69fb      	ldr	r3, [r7, #28]
 800a6a4:	4413      	add	r3, r2
 800a6a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	2340      	movs	r3, #64	; 0x40
 800a6ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	f003 0302 	and.w	r3, r3, #2
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d008      	beq.n	800a6cc <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6bc:	015a      	lsls	r2, r3, #5
 800a6be:	69fb      	ldr	r3, [r7, #28]
 800a6c0:	4413      	add	r3, r2
 800a6c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	2302      	movs	r3, #2
 800a6ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d003      	beq.n	800a6de <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a6d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 fc1b 	bl	800af14 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e0:	3301      	adds	r3, #1
 800a6e2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e6:	085b      	lsrs	r3, r3, #1
 800a6e8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	f47f af49 	bne.w	800a584 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f005 fc33 	bl	800ff62 <USB_ReadInterrupts>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a702:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a706:	d122      	bne.n	800a74e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a708:	69fb      	ldr	r3, [r7, #28]
 800a70a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	69fa      	ldr	r2, [r7, #28]
 800a712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a716:	f023 0301 	bic.w	r3, r3, #1
 800a71a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800a722:	2b01      	cmp	r3, #1
 800a724:	d108      	bne.n	800a738 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2200      	movs	r2, #0
 800a72a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a72e:	2100      	movs	r1, #0
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 fe27 	bl	800b384 <HAL_PCDEx_LPM_Callback>
 800a736:	e002      	b.n	800a73e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f00e fccd 	bl	80190d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	695a      	ldr	r2, [r3, #20]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a74c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4618      	mov	r0, r3
 800a754:	f005 fc05 	bl	800ff62 <USB_ReadInterrupts>
 800a758:	4603      	mov	r3, r0
 800a75a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a75e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a762:	d112      	bne.n	800a78a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a764:	69fb      	ldr	r3, [r7, #28]
 800a766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	f003 0301 	and.w	r3, r3, #1
 800a770:	2b01      	cmp	r3, #1
 800a772:	d102      	bne.n	800a77a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f00e fc89 	bl	801908c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	695a      	ldr	r2, [r3, #20]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800a788:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4618      	mov	r0, r3
 800a790:	f005 fbe7 	bl	800ff62 <USB_ReadInterrupts>
 800a794:	4603      	mov	r3, r0
 800a796:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a79a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a79e:	f040 80c7 	bne.w	800a930 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a7a2:	69fb      	ldr	r3, [r7, #28]
 800a7a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	69fa      	ldr	r2, [r7, #28]
 800a7ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a7b0:	f023 0301 	bic.w	r3, r3, #1
 800a7b4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	2110      	movs	r1, #16
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f004 fc81 	bl	800f0c4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7c6:	e056      	b.n	800a876 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ca:	015a      	lsls	r2, r3, #5
 800a7cc:	69fb      	ldr	r3, [r7, #28]
 800a7ce:	4413      	add	r3, r2
 800a7d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a7da:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7de:	015a      	lsls	r2, r3, #5
 800a7e0:	69fb      	ldr	r3, [r7, #28]
 800a7e2:	4413      	add	r3, r2
 800a7e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7ec:	0151      	lsls	r1, r2, #5
 800a7ee:	69fa      	ldr	r2, [r7, #28]
 800a7f0:	440a      	add	r2, r1
 800a7f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a7fa:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7fe:	015a      	lsls	r2, r3, #5
 800a800:	69fb      	ldr	r3, [r7, #28]
 800a802:	4413      	add	r3, r2
 800a804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a80c:	0151      	lsls	r1, r2, #5
 800a80e:	69fa      	ldr	r2, [r7, #28]
 800a810:	440a      	add	r2, r1
 800a812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a816:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a81a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a81e:	015a      	lsls	r2, r3, #5
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	4413      	add	r3, r2
 800a824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a828:	461a      	mov	r2, r3
 800a82a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a82e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a832:	015a      	lsls	r2, r3, #5
 800a834:	69fb      	ldr	r3, [r7, #28]
 800a836:	4413      	add	r3, r2
 800a838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a840:	0151      	lsls	r1, r2, #5
 800a842:	69fa      	ldr	r2, [r7, #28]
 800a844:	440a      	add	r2, r1
 800a846:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a84a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a84e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a852:	015a      	lsls	r2, r3, #5
 800a854:	69fb      	ldr	r3, [r7, #28]
 800a856:	4413      	add	r3, r2
 800a858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a860:	0151      	lsls	r1, r2, #5
 800a862:	69fa      	ldr	r2, [r7, #28]
 800a864:	440a      	add	r2, r1
 800a866:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a86a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a86e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a872:	3301      	adds	r3, #1
 800a874:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d3a3      	bcc.n	800a7c8 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a880:	69fb      	ldr	r3, [r7, #28]
 800a882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a886:	69db      	ldr	r3, [r3, #28]
 800a888:	69fa      	ldr	r2, [r7, #28]
 800a88a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a88e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a892:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d016      	beq.n	800a8ca <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a89c:	69fb      	ldr	r3, [r7, #28]
 800a89e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8a6:	69fa      	ldr	r2, [r7, #28]
 800a8a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8ac:	f043 030b 	orr.w	r3, r3, #11
 800a8b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a8b4:	69fb      	ldr	r3, [r7, #28]
 800a8b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8bc:	69fa      	ldr	r2, [r7, #28]
 800a8be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8c2:	f043 030b 	orr.w	r3, r3, #11
 800a8c6:	6453      	str	r3, [r2, #68]	; 0x44
 800a8c8:	e015      	b.n	800a8f6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a8ca:	69fb      	ldr	r3, [r7, #28]
 800a8cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8d0:	695b      	ldr	r3, [r3, #20]
 800a8d2:	69fa      	ldr	r2, [r7, #28]
 800a8d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a8dc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800a8e0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a8e2:	69fb      	ldr	r3, [r7, #28]
 800a8e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8e8:	691b      	ldr	r3, [r3, #16]
 800a8ea:	69fa      	ldr	r2, [r7, #28]
 800a8ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8f0:	f043 030b 	orr.w	r3, r3, #11
 800a8f4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a8f6:	69fb      	ldr	r3, [r7, #28]
 800a8f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	69fa      	ldr	r2, [r7, #28]
 800a900:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a904:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a908:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6818      	ldr	r0, [r3, #0]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	691b      	ldr	r3, [r3, #16]
 800a912:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a91a:	461a      	mov	r2, r3
 800a91c:	f005 fbe6 	bl	80100ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	695a      	ldr	r2, [r3, #20]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a92e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4618      	mov	r0, r3
 800a936:	f005 fb14 	bl	800ff62 <USB_ReadInterrupts>
 800a93a:	4603      	mov	r3, r0
 800a93c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a944:	d124      	bne.n	800a990 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4618      	mov	r0, r3
 800a94c:	f005 fbaa 	bl	80100a4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4618      	mov	r0, r3
 800a956:	f004 fc12 	bl	800f17e <USB_GetDevSpeed>
 800a95a:	4603      	mov	r3, r0
 800a95c:	461a      	mov	r2, r3
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681c      	ldr	r4, [r3, #0]
 800a966:	f001 f995 	bl	800bc94 <HAL_RCC_GetHCLKFreq>
 800a96a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a970:	b2db      	uxtb	r3, r3
 800a972:	461a      	mov	r2, r3
 800a974:	4620      	mov	r0, r4
 800a976:	f004 f931 	bl	800ebdc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f00e fb5d 	bl	801903a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	695a      	ldr	r2, [r3, #20]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a98e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4618      	mov	r0, r3
 800a996:	f005 fae4 	bl	800ff62 <USB_ReadInterrupts>
 800a99a:	4603      	mov	r3, r0
 800a99c:	f003 0308 	and.w	r3, r3, #8
 800a9a0:	2b08      	cmp	r3, #8
 800a9a2:	d10a      	bne.n	800a9ba <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f00e fb3a 	bl	801901e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	695a      	ldr	r2, [r3, #20]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f002 0208 	and.w	r2, r2, #8
 800a9b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f005 facf 	bl	800ff62 <USB_ReadInterrupts>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a9ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9ce:	d10f      	bne.n	800a9f0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	4619      	mov	r1, r3
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f00e fb9c 	bl	8019118 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	695a      	ldr	r2, [r3, #20]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a9ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f005 fab4 	bl	800ff62 <USB_ReadInterrupts>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aa00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa04:	d10f      	bne.n	800aa26 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800aa06:	2300      	movs	r3, #0
 800aa08:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800aa0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0c:	b2db      	uxtb	r3, r3
 800aa0e:	4619      	mov	r1, r3
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f00e fb6f 	bl	80190f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	695a      	ldr	r2, [r3, #20]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800aa24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f005 fa99 	bl	800ff62 <USB_ReadInterrupts>
 800aa30:	4603      	mov	r3, r0
 800aa32:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aa36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa3a:	d10a      	bne.n	800aa52 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f00e fb7d 	bl	801913c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	695a      	ldr	r2, [r3, #20]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800aa50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4618      	mov	r0, r3
 800aa58:	f005 fa83 	bl	800ff62 <USB_ReadInterrupts>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	f003 0304 	and.w	r3, r3, #4
 800aa62:	2b04      	cmp	r3, #4
 800aa64:	d115      	bne.n	800aa92 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800aa6e:	69bb      	ldr	r3, [r7, #24]
 800aa70:	f003 0304 	and.w	r3, r3, #4
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d002      	beq.n	800aa7e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f00e fb6d 	bl	8019158 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	6859      	ldr	r1, [r3, #4]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	69ba      	ldr	r2, [r7, #24]
 800aa8a:	430a      	orrs	r2, r1
 800aa8c:	605a      	str	r2, [r3, #4]
 800aa8e:	e000      	b.n	800aa92 <HAL_PCD_IRQHandler+0x75e>
      return;
 800aa90:	bf00      	nop
    }
  }
}
 800aa92:	3734      	adds	r7, #52	; 0x34
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd90      	pop	{r4, r7, pc}

0800aa98 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d101      	bne.n	800aab2 <HAL_PCD_SetAddress+0x1a>
 800aaae:	2302      	movs	r3, #2
 800aab0:	e013      	b.n	800aada <HAL_PCD_SetAddress+0x42>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2201      	movs	r2, #1
 800aab6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	78fa      	ldrb	r2, [r7, #3]
 800aabe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	78fa      	ldrb	r2, [r7, #3]
 800aac8:	4611      	mov	r1, r2
 800aaca:	4618      	mov	r0, r3
 800aacc:	f005 f9e1 	bl	800fe92 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2200      	movs	r2, #0
 800aad4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800aad8:	2300      	movs	r3, #0
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3708      	adds	r7, #8
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}

0800aae2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800aae2:	b580      	push	{r7, lr}
 800aae4:	b084      	sub	sp, #16
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
 800aaea:	4608      	mov	r0, r1
 800aaec:	4611      	mov	r1, r2
 800aaee:	461a      	mov	r2, r3
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	70fb      	strb	r3, [r7, #3]
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	803b      	strh	r3, [r7, #0]
 800aaf8:	4613      	mov	r3, r2
 800aafa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800aafc:	2300      	movs	r3, #0
 800aafe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ab00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	da0f      	bge.n	800ab28 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ab08:	78fb      	ldrb	r3, [r7, #3]
 800ab0a:	f003 020f 	and.w	r2, r3, #15
 800ab0e:	4613      	mov	r3, r2
 800ab10:	00db      	lsls	r3, r3, #3
 800ab12:	1a9b      	subs	r3, r3, r2
 800ab14:	009b      	lsls	r3, r3, #2
 800ab16:	3338      	adds	r3, #56	; 0x38
 800ab18:	687a      	ldr	r2, [r7, #4]
 800ab1a:	4413      	add	r3, r2
 800ab1c:	3304      	adds	r3, #4
 800ab1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2201      	movs	r2, #1
 800ab24:	705a      	strb	r2, [r3, #1]
 800ab26:	e00f      	b.n	800ab48 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ab28:	78fb      	ldrb	r3, [r7, #3]
 800ab2a:	f003 020f 	and.w	r2, r3, #15
 800ab2e:	4613      	mov	r3, r2
 800ab30:	00db      	lsls	r3, r3, #3
 800ab32:	1a9b      	subs	r3, r3, r2
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ab3a:	687a      	ldr	r2, [r7, #4]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	3304      	adds	r3, #4
 800ab40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2200      	movs	r2, #0
 800ab46:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800ab48:	78fb      	ldrb	r3, [r7, #3]
 800ab4a:	f003 030f 	and.w	r3, r3, #15
 800ab4e:	b2da      	uxtb	r2, r3
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800ab54:	883a      	ldrh	r2, [r7, #0]
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	78ba      	ldrb	r2, [r7, #2]
 800ab5e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	785b      	ldrb	r3, [r3, #1]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d004      	beq.n	800ab72 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	b29a      	uxth	r2, r3
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ab72:	78bb      	ldrb	r3, [r7, #2]
 800ab74:	2b02      	cmp	r3, #2
 800ab76:	d102      	bne.n	800ab7e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ab84:	2b01      	cmp	r3, #1
 800ab86:	d101      	bne.n	800ab8c <HAL_PCD_EP_Open+0xaa>
 800ab88:	2302      	movs	r3, #2
 800ab8a:	e00e      	b.n	800abaa <HAL_PCD_EP_Open+0xc8>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2201      	movs	r2, #1
 800ab90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	68f9      	ldr	r1, [r7, #12]
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f004 fb14 	bl	800f1c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2200      	movs	r2, #0
 800aba4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800aba8:	7afb      	ldrb	r3, [r7, #11]
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}

0800abb2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800abb2:	b580      	push	{r7, lr}
 800abb4:	b084      	sub	sp, #16
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
 800abba:	460b      	mov	r3, r1
 800abbc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800abbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	da0f      	bge.n	800abe6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800abc6:	78fb      	ldrb	r3, [r7, #3]
 800abc8:	f003 020f 	and.w	r2, r3, #15
 800abcc:	4613      	mov	r3, r2
 800abce:	00db      	lsls	r3, r3, #3
 800abd0:	1a9b      	subs	r3, r3, r2
 800abd2:	009b      	lsls	r3, r3, #2
 800abd4:	3338      	adds	r3, #56	; 0x38
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	4413      	add	r3, r2
 800abda:	3304      	adds	r3, #4
 800abdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2201      	movs	r2, #1
 800abe2:	705a      	strb	r2, [r3, #1]
 800abe4:	e00f      	b.n	800ac06 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800abe6:	78fb      	ldrb	r3, [r7, #3]
 800abe8:	f003 020f 	and.w	r2, r3, #15
 800abec:	4613      	mov	r3, r2
 800abee:	00db      	lsls	r3, r3, #3
 800abf0:	1a9b      	subs	r3, r3, r2
 800abf2:	009b      	lsls	r3, r3, #2
 800abf4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	4413      	add	r3, r2
 800abfc:	3304      	adds	r3, #4
 800abfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2200      	movs	r2, #0
 800ac04:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800ac06:	78fb      	ldrb	r3, [r7, #3]
 800ac08:	f003 030f 	and.w	r3, r3, #15
 800ac0c:	b2da      	uxtb	r2, r3
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d101      	bne.n	800ac20 <HAL_PCD_EP_Close+0x6e>
 800ac1c:	2302      	movs	r3, #2
 800ac1e:	e00e      	b.n	800ac3e <HAL_PCD_EP_Close+0x8c>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2201      	movs	r2, #1
 800ac24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	68f9      	ldr	r1, [r7, #12]
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f004 fb52 	bl	800f2d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800ac3c:	2300      	movs	r3, #0
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3710      	adds	r7, #16
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}

0800ac46 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ac46:	b580      	push	{r7, lr}
 800ac48:	b086      	sub	sp, #24
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	60f8      	str	r0, [r7, #12]
 800ac4e:	607a      	str	r2, [r7, #4]
 800ac50:	603b      	str	r3, [r7, #0]
 800ac52:	460b      	mov	r3, r1
 800ac54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ac56:	7afb      	ldrb	r3, [r7, #11]
 800ac58:	f003 020f 	and.w	r2, r3, #15
 800ac5c:	4613      	mov	r3, r2
 800ac5e:	00db      	lsls	r3, r3, #3
 800ac60:	1a9b      	subs	r3, r3, r2
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	4413      	add	r3, r2
 800ac6c:	3304      	adds	r3, #4
 800ac6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	683a      	ldr	r2, [r7, #0]
 800ac7a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	2200      	movs	r2, #0
 800ac86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ac88:	7afb      	ldrb	r3, [r7, #11]
 800ac8a:	f003 030f 	and.w	r3, r3, #15
 800ac8e:	b2da      	uxtb	r2, r3
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	691b      	ldr	r3, [r3, #16]
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d102      	bne.n	800aca2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800aca2:	7afb      	ldrb	r3, [r7, #11]
 800aca4:	f003 030f 	and.w	r3, r3, #15
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d109      	bne.n	800acc0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	6818      	ldr	r0, [r3, #0]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	691b      	ldr	r3, [r3, #16]
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	461a      	mov	r2, r3
 800acb8:	6979      	ldr	r1, [r7, #20]
 800acba:	f004 fe2d 	bl	800f918 <USB_EP0StartXfer>
 800acbe:	e008      	b.n	800acd2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	6818      	ldr	r0, [r3, #0]
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	691b      	ldr	r3, [r3, #16]
 800acc8:	b2db      	uxtb	r3, r3
 800acca:	461a      	mov	r2, r3
 800accc:	6979      	ldr	r1, [r7, #20]
 800acce:	f004 fbdf 	bl	800f490 <USB_EPStartXfer>
  }

  return HAL_OK;
 800acd2:	2300      	movs	r3, #0
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3718      	adds	r7, #24
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	460b      	mov	r3, r1
 800ace6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ace8:	78fb      	ldrb	r3, [r7, #3]
 800acea:	f003 020f 	and.w	r2, r3, #15
 800acee:	6879      	ldr	r1, [r7, #4]
 800acf0:	4613      	mov	r3, r2
 800acf2:	00db      	lsls	r3, r3, #3
 800acf4:	1a9b      	subs	r3, r3, r2
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	440b      	add	r3, r1
 800acfa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800acfe:	681b      	ldr	r3, [r3, #0]
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	370c      	adds	r7, #12
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr

0800ad0c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b086      	sub	sp, #24
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	60f8      	str	r0, [r7, #12]
 800ad14:	607a      	str	r2, [r7, #4]
 800ad16:	603b      	str	r3, [r7, #0]
 800ad18:	460b      	mov	r3, r1
 800ad1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ad1c:	7afb      	ldrb	r3, [r7, #11]
 800ad1e:	f003 020f 	and.w	r2, r3, #15
 800ad22:	4613      	mov	r3, r2
 800ad24:	00db      	lsls	r3, r3, #3
 800ad26:	1a9b      	subs	r3, r3, r2
 800ad28:	009b      	lsls	r3, r3, #2
 800ad2a:	3338      	adds	r3, #56	; 0x38
 800ad2c:	68fa      	ldr	r2, [r7, #12]
 800ad2e:	4413      	add	r3, r2
 800ad30:	3304      	adds	r3, #4
 800ad32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	683a      	ldr	r2, [r7, #0]
 800ad3e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	2200      	movs	r2, #0
 800ad44:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	2201      	movs	r2, #1
 800ad4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ad4c:	7afb      	ldrb	r3, [r7, #11]
 800ad4e:	f003 030f 	and.w	r3, r3, #15
 800ad52:	b2da      	uxtb	r2, r3
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	691b      	ldr	r3, [r3, #16]
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	d102      	bne.n	800ad66 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ad60:	687a      	ldr	r2, [r7, #4]
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ad66:	7afb      	ldrb	r3, [r7, #11]
 800ad68:	f003 030f 	and.w	r3, r3, #15
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d109      	bne.n	800ad84 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	6818      	ldr	r0, [r3, #0]
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	691b      	ldr	r3, [r3, #16]
 800ad78:	b2db      	uxtb	r3, r3
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	6979      	ldr	r1, [r7, #20]
 800ad7e:	f004 fdcb 	bl	800f918 <USB_EP0StartXfer>
 800ad82:	e008      	b.n	800ad96 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	6818      	ldr	r0, [r3, #0]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	691b      	ldr	r3, [r3, #16]
 800ad8c:	b2db      	uxtb	r3, r3
 800ad8e:	461a      	mov	r2, r3
 800ad90:	6979      	ldr	r1, [r7, #20]
 800ad92:	f004 fb7d 	bl	800f490 <USB_EPStartXfer>
  }

  return HAL_OK;
 800ad96:	2300      	movs	r3, #0
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3718      	adds	r7, #24
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}

0800ada0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b084      	sub	sp, #16
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	460b      	mov	r3, r1
 800adaa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800adac:	78fb      	ldrb	r3, [r7, #3]
 800adae:	f003 020f 	and.w	r2, r3, #15
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d901      	bls.n	800adbe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800adba:	2301      	movs	r3, #1
 800adbc:	e050      	b.n	800ae60 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800adbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	da0f      	bge.n	800ade6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800adc6:	78fb      	ldrb	r3, [r7, #3]
 800adc8:	f003 020f 	and.w	r2, r3, #15
 800adcc:	4613      	mov	r3, r2
 800adce:	00db      	lsls	r3, r3, #3
 800add0:	1a9b      	subs	r3, r3, r2
 800add2:	009b      	lsls	r3, r3, #2
 800add4:	3338      	adds	r3, #56	; 0x38
 800add6:	687a      	ldr	r2, [r7, #4]
 800add8:	4413      	add	r3, r2
 800adda:	3304      	adds	r3, #4
 800addc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2201      	movs	r2, #1
 800ade2:	705a      	strb	r2, [r3, #1]
 800ade4:	e00d      	b.n	800ae02 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ade6:	78fa      	ldrb	r2, [r7, #3]
 800ade8:	4613      	mov	r3, r2
 800adea:	00db      	lsls	r3, r3, #3
 800adec:	1a9b      	subs	r3, r3, r2
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800adf4:	687a      	ldr	r2, [r7, #4]
 800adf6:	4413      	add	r3, r2
 800adf8:	3304      	adds	r3, #4
 800adfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2200      	movs	r2, #0
 800ae00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2201      	movs	r2, #1
 800ae06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ae08:	78fb      	ldrb	r3, [r7, #3]
 800ae0a:	f003 030f 	and.w	r3, r3, #15
 800ae0e:	b2da      	uxtb	r2, r3
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ae1a:	2b01      	cmp	r3, #1
 800ae1c:	d101      	bne.n	800ae22 <HAL_PCD_EP_SetStall+0x82>
 800ae1e:	2302      	movs	r3, #2
 800ae20:	e01e      	b.n	800ae60 <HAL_PCD_EP_SetStall+0xc0>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2201      	movs	r2, #1
 800ae26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	68f9      	ldr	r1, [r7, #12]
 800ae30:	4618      	mov	r0, r3
 800ae32:	f004 ff5a 	bl	800fcea <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ae36:	78fb      	ldrb	r3, [r7, #3]
 800ae38:	f003 030f 	and.w	r3, r3, #15
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d10a      	bne.n	800ae56 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6818      	ldr	r0, [r3, #0]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	691b      	ldr	r3, [r3, #16]
 800ae48:	b2d9      	uxtb	r1, r3
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ae50:	461a      	mov	r2, r3
 800ae52:	f005 f94b 	bl	80100ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ae5e:	2300      	movs	r3, #0
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3710      	adds	r7, #16
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b084      	sub	sp, #16
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	460b      	mov	r3, r1
 800ae72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ae74:	78fb      	ldrb	r3, [r7, #3]
 800ae76:	f003 020f 	and.w	r2, r3, #15
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d901      	bls.n	800ae86 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800ae82:	2301      	movs	r3, #1
 800ae84:	e042      	b.n	800af0c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ae86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	da0f      	bge.n	800aeae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ae8e:	78fb      	ldrb	r3, [r7, #3]
 800ae90:	f003 020f 	and.w	r2, r3, #15
 800ae94:	4613      	mov	r3, r2
 800ae96:	00db      	lsls	r3, r3, #3
 800ae98:	1a9b      	subs	r3, r3, r2
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	3338      	adds	r3, #56	; 0x38
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	4413      	add	r3, r2
 800aea2:	3304      	adds	r3, #4
 800aea4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2201      	movs	r2, #1
 800aeaa:	705a      	strb	r2, [r3, #1]
 800aeac:	e00f      	b.n	800aece <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aeae:	78fb      	ldrb	r3, [r7, #3]
 800aeb0:	f003 020f 	and.w	r2, r3, #15
 800aeb4:	4613      	mov	r3, r2
 800aeb6:	00db      	lsls	r3, r3, #3
 800aeb8:	1a9b      	subs	r3, r3, r2
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	4413      	add	r3, r2
 800aec4:	3304      	adds	r3, #4
 800aec6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2200      	movs	r2, #0
 800aecc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2200      	movs	r2, #0
 800aed2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800aed4:	78fb      	ldrb	r3, [r7, #3]
 800aed6:	f003 030f 	and.w	r3, r3, #15
 800aeda:	b2da      	uxtb	r2, r3
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	d101      	bne.n	800aeee <HAL_PCD_EP_ClrStall+0x86>
 800aeea:	2302      	movs	r3, #2
 800aeec:	e00e      	b.n	800af0c <HAL_PCD_EP_ClrStall+0xa4>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2201      	movs	r2, #1
 800aef2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	68f9      	ldr	r1, [r7, #12]
 800aefc:	4618      	mov	r0, r3
 800aefe:	f004 ff62 	bl	800fdc6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800af0a:	2300      	movs	r3, #0
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3710      	adds	r7, #16
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b08a      	sub	sp, #40	; 0x28
 800af18:	af02      	add	r7, sp, #8
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800af28:	683a      	ldr	r2, [r7, #0]
 800af2a:	4613      	mov	r3, r2
 800af2c:	00db      	lsls	r3, r3, #3
 800af2e:	1a9b      	subs	r3, r3, r2
 800af30:	009b      	lsls	r3, r3, #2
 800af32:	3338      	adds	r3, #56	; 0x38
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	4413      	add	r3, r2
 800af38:	3304      	adds	r3, #4
 800af3a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	699a      	ldr	r2, [r3, #24]
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	695b      	ldr	r3, [r3, #20]
 800af44:	429a      	cmp	r2, r3
 800af46:	d901      	bls.n	800af4c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800af48:	2301      	movs	r3, #1
 800af4a:	e06c      	b.n	800b026 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	695a      	ldr	r2, [r3, #20]
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	699b      	ldr	r3, [r3, #24]
 800af54:	1ad3      	subs	r3, r2, r3
 800af56:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	689b      	ldr	r3, [r3, #8]
 800af5c:	69fa      	ldr	r2, [r7, #28]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d902      	bls.n	800af68 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	689b      	ldr	r3, [r3, #8]
 800af66:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800af68:	69fb      	ldr	r3, [r7, #28]
 800af6a:	3303      	adds	r3, #3
 800af6c:	089b      	lsrs	r3, r3, #2
 800af6e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800af70:	e02b      	b.n	800afca <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	695a      	ldr	r2, [r3, #20]
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	699b      	ldr	r3, [r3, #24]
 800af7a:	1ad3      	subs	r3, r2, r3
 800af7c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	689b      	ldr	r3, [r3, #8]
 800af82:	69fa      	ldr	r2, [r7, #28]
 800af84:	429a      	cmp	r2, r3
 800af86:	d902      	bls.n	800af8e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	689b      	ldr	r3, [r3, #8]
 800af8c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800af8e:	69fb      	ldr	r3, [r7, #28]
 800af90:	3303      	adds	r3, #3
 800af92:	089b      	lsrs	r3, r3, #2
 800af94:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	68d9      	ldr	r1, [r3, #12]
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	b2da      	uxtb	r2, r3
 800af9e:	69fb      	ldr	r3, [r7, #28]
 800afa0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800afa6:	b2db      	uxtb	r3, r3
 800afa8:	9300      	str	r3, [sp, #0]
 800afaa:	4603      	mov	r3, r0
 800afac:	6978      	ldr	r0, [r7, #20]
 800afae:	f004 fe06 	bl	800fbbe <USB_WritePacket>

    ep->xfer_buff  += len;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	68da      	ldr	r2, [r3, #12]
 800afb6:	69fb      	ldr	r3, [r7, #28]
 800afb8:	441a      	add	r2, r3
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	699a      	ldr	r2, [r3, #24]
 800afc2:	69fb      	ldr	r3, [r7, #28]
 800afc4:	441a      	add	r2, r3
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	015a      	lsls	r2, r3, #5
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	4413      	add	r3, r2
 800afd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afd6:	699b      	ldr	r3, [r3, #24]
 800afd8:	b29b      	uxth	r3, r3
 800afda:	69ba      	ldr	r2, [r7, #24]
 800afdc:	429a      	cmp	r2, r3
 800afde:	d809      	bhi.n	800aff4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	699a      	ldr	r2, [r3, #24]
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800afe8:	429a      	cmp	r2, r3
 800afea:	d203      	bcs.n	800aff4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	695b      	ldr	r3, [r3, #20]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d1be      	bne.n	800af72 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	695a      	ldr	r2, [r3, #20]
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	699b      	ldr	r3, [r3, #24]
 800affc:	429a      	cmp	r2, r3
 800affe:	d811      	bhi.n	800b024 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	f003 030f 	and.w	r3, r3, #15
 800b006:	2201      	movs	r2, #1
 800b008:	fa02 f303 	lsl.w	r3, r2, r3
 800b00c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	43db      	mvns	r3, r3
 800b01a:	6939      	ldr	r1, [r7, #16]
 800b01c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b020:	4013      	ands	r3, r2
 800b022:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800b024:	2300      	movs	r3, #0
}
 800b026:	4618      	mov	r0, r3
 800b028:	3720      	adds	r7, #32
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
	...

0800b030 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b086      	sub	sp, #24
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	333c      	adds	r3, #60	; 0x3c
 800b048:	3304      	adds	r3, #4
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	015a      	lsls	r2, r3, #5
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	4413      	add	r3, r2
 800b056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	691b      	ldr	r3, [r3, #16]
 800b062:	2b01      	cmp	r3, #1
 800b064:	f040 80a0 	bne.w	800b1a8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	f003 0308 	and.w	r3, r3, #8
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d015      	beq.n	800b09e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	4a72      	ldr	r2, [pc, #456]	; (800b240 <PCD_EP_OutXfrComplete_int+0x210>)
 800b076:	4293      	cmp	r3, r2
 800b078:	f240 80dd 	bls.w	800b236 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b082:	2b00      	cmp	r3, #0
 800b084:	f000 80d7 	beq.w	800b236 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	015a      	lsls	r2, r3, #5
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	4413      	add	r3, r2
 800b090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b094:	461a      	mov	r2, r3
 800b096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b09a:	6093      	str	r3, [r2, #8]
 800b09c:	e0cb      	b.n	800b236 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	f003 0320 	and.w	r3, r3, #32
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d009      	beq.n	800b0bc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	015a      	lsls	r2, r3, #5
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	4413      	add	r3, r2
 800b0b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	2320      	movs	r3, #32
 800b0b8:	6093      	str	r3, [r2, #8]
 800b0ba:	e0bc      	b.n	800b236 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	f040 80b7 	bne.w	800b236 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	4a5d      	ldr	r2, [pc, #372]	; (800b240 <PCD_EP_OutXfrComplete_int+0x210>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d90f      	bls.n	800b0f0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d00a      	beq.n	800b0f0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	015a      	lsls	r2, r3, #5
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	4413      	add	r3, r2
 800b0e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0ec:	6093      	str	r3, [r2, #8]
 800b0ee:	e0a2      	b.n	800b236 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800b0f0:	6879      	ldr	r1, [r7, #4]
 800b0f2:	683a      	ldr	r2, [r7, #0]
 800b0f4:	4613      	mov	r3, r2
 800b0f6:	00db      	lsls	r3, r3, #3
 800b0f8:	1a9b      	subs	r3, r3, r2
 800b0fa:	009b      	lsls	r3, r3, #2
 800b0fc:	440b      	add	r3, r1
 800b0fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800b102:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	0159      	lsls	r1, r3, #5
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	440b      	add	r3, r1
 800b10c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b110:	691b      	ldr	r3, [r3, #16]
 800b112:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800b116:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	683a      	ldr	r2, [r7, #0]
 800b11c:	4613      	mov	r3, r2
 800b11e:	00db      	lsls	r3, r3, #3
 800b120:	1a9b      	subs	r3, r3, r2
 800b122:	009b      	lsls	r3, r3, #2
 800b124:	4403      	add	r3, r0
 800b126:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800b12a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800b12c:	6879      	ldr	r1, [r7, #4]
 800b12e:	683a      	ldr	r2, [r7, #0]
 800b130:	4613      	mov	r3, r2
 800b132:	00db      	lsls	r3, r3, #3
 800b134:	1a9b      	subs	r3, r3, r2
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	440b      	add	r3, r1
 800b13a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b13e:	6819      	ldr	r1, [r3, #0]
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	683a      	ldr	r2, [r7, #0]
 800b144:	4613      	mov	r3, r2
 800b146:	00db      	lsls	r3, r3, #3
 800b148:	1a9b      	subs	r3, r3, r2
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	4403      	add	r3, r0
 800b14e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4419      	add	r1, r3
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	683a      	ldr	r2, [r7, #0]
 800b15a:	4613      	mov	r3, r2
 800b15c:	00db      	lsls	r3, r3, #3
 800b15e:	1a9b      	subs	r3, r3, r2
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	4403      	add	r3, r0
 800b164:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b168:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d114      	bne.n	800b19a <PCD_EP_OutXfrComplete_int+0x16a>
 800b170:	6879      	ldr	r1, [r7, #4]
 800b172:	683a      	ldr	r2, [r7, #0]
 800b174:	4613      	mov	r3, r2
 800b176:	00db      	lsls	r3, r3, #3
 800b178:	1a9b      	subs	r3, r3, r2
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	440b      	add	r3, r1
 800b17e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d108      	bne.n	800b19a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6818      	ldr	r0, [r3, #0]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b192:	461a      	mov	r2, r3
 800b194:	2101      	movs	r1, #1
 800b196:	f004 ffa9 	bl	80100ec <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	b2db      	uxtb	r3, r3
 800b19e:	4619      	mov	r1, r3
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f00d ff07 	bl	8018fb4 <HAL_PCD_DataOutStageCallback>
 800b1a6:	e046      	b.n	800b236 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	4a26      	ldr	r2, [pc, #152]	; (800b244 <PCD_EP_OutXfrComplete_int+0x214>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d124      	bne.n	800b1fa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d00a      	beq.n	800b1d0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	015a      	lsls	r2, r3, #5
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	4413      	add	r3, r2
 800b1c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b1cc:	6093      	str	r3, [r2, #8]
 800b1ce:	e032      	b.n	800b236 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	f003 0320 	and.w	r3, r3, #32
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d008      	beq.n	800b1ec <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	015a      	lsls	r2, r3, #5
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	4413      	add	r3, r2
 800b1e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	2320      	movs	r3, #32
 800b1ea:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	b2db      	uxtb	r3, r3
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f00d fede 	bl	8018fb4 <HAL_PCD_DataOutStageCallback>
 800b1f8:	e01d      	b.n	800b236 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d114      	bne.n	800b22a <PCD_EP_OutXfrComplete_int+0x1fa>
 800b200:	6879      	ldr	r1, [r7, #4]
 800b202:	683a      	ldr	r2, [r7, #0]
 800b204:	4613      	mov	r3, r2
 800b206:	00db      	lsls	r3, r3, #3
 800b208:	1a9b      	subs	r3, r3, r2
 800b20a:	009b      	lsls	r3, r3, #2
 800b20c:	440b      	add	r3, r1
 800b20e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d108      	bne.n	800b22a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6818      	ldr	r0, [r3, #0]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b222:	461a      	mov	r2, r3
 800b224:	2100      	movs	r1, #0
 800b226:	f004 ff61 	bl	80100ec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	b2db      	uxtb	r3, r3
 800b22e:	4619      	mov	r1, r3
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f00d febf 	bl	8018fb4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800b236:	2300      	movs	r3, #0
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3718      	adds	r7, #24
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}
 800b240:	4f54300a 	.word	0x4f54300a
 800b244:	4f54310a 	.word	0x4f54310a

0800b248 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b086      	sub	sp, #24
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	333c      	adds	r3, #60	; 0x3c
 800b260:	3304      	adds	r3, #4
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	015a      	lsls	r2, r3, #5
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	4413      	add	r3, r2
 800b26e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b272:	689b      	ldr	r3, [r3, #8]
 800b274:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	4a15      	ldr	r2, [pc, #84]	; (800b2d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d90e      	bls.n	800b29c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b284:	2b00      	cmp	r3, #0
 800b286:	d009      	beq.n	800b29c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	015a      	lsls	r2, r3, #5
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	4413      	add	r3, r2
 800b290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b294:	461a      	mov	r2, r3
 800b296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b29a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f00d fe77 	bl	8018f90 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	4a0a      	ldr	r2, [pc, #40]	; (800b2d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d90c      	bls.n	800b2c4 <PCD_EP_OutSetupPacket_int+0x7c>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	691b      	ldr	r3, [r3, #16]
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d108      	bne.n	800b2c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6818      	ldr	r0, [r3, #0]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b2bc:	461a      	mov	r2, r3
 800b2be:	2101      	movs	r1, #1
 800b2c0:	f004 ff14 	bl	80100ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 800b2c4:	2300      	movs	r3, #0
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3718      	adds	r7, #24
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	4f54300a 	.word	0x4f54300a

0800b2d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b085      	sub	sp, #20
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	460b      	mov	r3, r1
 800b2de:	70fb      	strb	r3, [r7, #3]
 800b2e0:	4613      	mov	r3, r2
 800b2e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800b2ec:	78fb      	ldrb	r3, [r7, #3]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d107      	bne.n	800b302 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800b2f2:	883b      	ldrh	r3, [r7, #0]
 800b2f4:	0419      	lsls	r1, r3, #16
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	68ba      	ldr	r2, [r7, #8]
 800b2fc:	430a      	orrs	r2, r1
 800b2fe:	629a      	str	r2, [r3, #40]	; 0x28
 800b300:	e028      	b.n	800b354 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b308:	0c1b      	lsrs	r3, r3, #16
 800b30a:	68ba      	ldr	r2, [r7, #8]
 800b30c:	4413      	add	r3, r2
 800b30e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b310:	2300      	movs	r3, #0
 800b312:	73fb      	strb	r3, [r7, #15]
 800b314:	e00d      	b.n	800b332 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681a      	ldr	r2, [r3, #0]
 800b31a:	7bfb      	ldrb	r3, [r7, #15]
 800b31c:	3340      	adds	r3, #64	; 0x40
 800b31e:	009b      	lsls	r3, r3, #2
 800b320:	4413      	add	r3, r2
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	0c1b      	lsrs	r3, r3, #16
 800b326:	68ba      	ldr	r2, [r7, #8]
 800b328:	4413      	add	r3, r2
 800b32a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b32c:	7bfb      	ldrb	r3, [r7, #15]
 800b32e:	3301      	adds	r3, #1
 800b330:	73fb      	strb	r3, [r7, #15]
 800b332:	7bfa      	ldrb	r2, [r7, #15]
 800b334:	78fb      	ldrb	r3, [r7, #3]
 800b336:	3b01      	subs	r3, #1
 800b338:	429a      	cmp	r2, r3
 800b33a:	d3ec      	bcc.n	800b316 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800b33c:	883b      	ldrh	r3, [r7, #0]
 800b33e:	0418      	lsls	r0, r3, #16
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6819      	ldr	r1, [r3, #0]
 800b344:	78fb      	ldrb	r3, [r7, #3]
 800b346:	3b01      	subs	r3, #1
 800b348:	68ba      	ldr	r2, [r7, #8]
 800b34a:	4302      	orrs	r2, r0
 800b34c:	3340      	adds	r3, #64	; 0x40
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	440b      	add	r3, r1
 800b352:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b354:	2300      	movs	r3, #0
}
 800b356:	4618      	mov	r0, r3
 800b358:	3714      	adds	r7, #20
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr

0800b362 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800b362:	b480      	push	{r7}
 800b364:	b083      	sub	sp, #12
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
 800b36a:	460b      	mov	r3, r1
 800b36c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	887a      	ldrh	r2, [r7, #2]
 800b374:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b376:	2300      	movs	r3, #0
}
 800b378:	4618      	mov	r0, r3
 800b37a:	370c      	adds	r7, #12
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr

0800b384 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b384:	b480      	push	{r7}
 800b386:	b083      	sub	sp, #12
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	460b      	mov	r3, r1
 800b38e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800b390:	bf00      	nop
 800b392:	370c      	adds	r7, #12
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr

0800b39c <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b083      	sub	sp, #12
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 800b3a4:	4b05      	ldr	r3, [pc, #20]	; (800b3bc <HAL_PWR_EnableWakeUpPin+0x20>)
 800b3a6:	685a      	ldr	r2, [r3, #4]
 800b3a8:	4904      	ldr	r1, [pc, #16]	; (800b3bc <HAL_PWR_EnableWakeUpPin+0x20>)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	604b      	str	r3, [r1, #4]
}
 800b3b0:	bf00      	nop
 800b3b2:	370c      	adds	r7, #12
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr
 800b3bc:	40007000 	.word	0x40007000

0800b3c0 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 800b3c8:	4b06      	ldr	r3, [pc, #24]	; (800b3e4 <HAL_PWR_DisableWakeUpPin+0x24>)
 800b3ca:	685a      	ldr	r2, [r3, #4]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	43db      	mvns	r3, r3
 800b3d0:	4904      	ldr	r1, [pc, #16]	; (800b3e4 <HAL_PWR_DisableWakeUpPin+0x24>)
 800b3d2:	4013      	ands	r3, r2
 800b3d4:	604b      	str	r3, [r1, #4]
}
 800b3d6:	bf00      	nop
 800b3d8:	370c      	adds	r7, #12
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr
 800b3e2:	bf00      	nop
 800b3e4:	40007000 	.word	0x40007000

0800b3e8 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800b3ec:	4b08      	ldr	r3, [pc, #32]	; (800b410 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a07      	ldr	r2, [pc, #28]	; (800b410 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800b3f2:	f043 0302 	orr.w	r3, r3, #2
 800b3f6:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800b3f8:	4b06      	ldr	r3, [pc, #24]	; (800b414 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800b3fa:	691b      	ldr	r3, [r3, #16]
 800b3fc:	4a05      	ldr	r2, [pc, #20]	; (800b414 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800b3fe:	f043 0304 	orr.w	r3, r3, #4
 800b402:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800b404:	bf30      	wfi
}
 800b406:	bf00      	nop
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr
 800b410:	40007000 	.word	0x40007000
 800b414:	e000ed00 	.word	0xe000ed00

0800b418 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b086      	sub	sp, #24
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d101      	bne.n	800b42a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b426:	2301      	movs	r3, #1
 800b428:	e264      	b.n	800b8f4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f003 0301 	and.w	r3, r3, #1
 800b432:	2b00      	cmp	r3, #0
 800b434:	d075      	beq.n	800b522 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b436:	4ba3      	ldr	r3, [pc, #652]	; (800b6c4 <HAL_RCC_OscConfig+0x2ac>)
 800b438:	689b      	ldr	r3, [r3, #8]
 800b43a:	f003 030c 	and.w	r3, r3, #12
 800b43e:	2b04      	cmp	r3, #4
 800b440:	d00c      	beq.n	800b45c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b442:	4ba0      	ldr	r3, [pc, #640]	; (800b6c4 <HAL_RCC_OscConfig+0x2ac>)
 800b444:	689b      	ldr	r3, [r3, #8]
 800b446:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b44a:	2b08      	cmp	r3, #8
 800b44c:	d112      	bne.n	800b474 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b44e:	4b9d      	ldr	r3, [pc, #628]	; (800b6c4 <HAL_RCC_OscConfig+0x2ac>)
 800b450:	685b      	ldr	r3, [r3, #4]
 800b452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b456:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b45a:	d10b      	bne.n	800b474 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b45c:	4b99      	ldr	r3, [pc, #612]	; (800b6c4 <HAL_RCC_OscConfig+0x2ac>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b464:	2b00      	cmp	r3, #0
 800b466:	d05b      	beq.n	800b520 <HAL_RCC_OscConfig+0x108>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d157      	bne.n	800b520 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b470:	2301      	movs	r3, #1
 800b472:	e23f      	b.n	800b8f4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b47c:	d106      	bne.n	800b48c <HAL_RCC_OscConfig+0x74>
 800b47e:	4b91      	ldr	r3, [pc, #580]	; (800b6c4 <HAL_RCC_OscConfig+0x2ac>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	4a90      	ldr	r2, [pc, #576]	; (800b6c4 <HAL_RCC_OscConfig+0x2ac>)
 800b484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b488:	6013      	str	r3, [r2, #0]
 800b48a:	e01d      	b.n	800b4c8 <HAL_RCC_OscConfig+0xb0>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b494:	d10c      	bne.n	800b4b0 <HAL_RCC_OscConfig+0x98>
 800b496:	4b8b      	ldr	r3, [pc, #556]	; (800b6c4 <HAL_RCC_OscConfig+0x2ac>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	4a8a      	ldr	r2, [pc, #552]	; (800b6c4 <HAL_RCC_OscConfig+0x2ac>)
 800b49c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b4a0:	6013      	str	r3, [r2, #0]
 800b4a2:	4b88      	ldr	r3, [pc, #544]	; (800b6c4 <HAL_RCC_OscConfig+0x2ac>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4a87      	ldr	r2, [pc, #540]	; (800b6c4 <HAL_RCC_OscConfig+0x2ac>)
 800b4a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b4ac:	6013      	str	r3, [r2, #0]
 800b4ae:	e00b      	b.n	800b4c8 <HAL_RCC_OscConfig+0xb0>
 800b4b0:	4b84      	ldr	r3, [pc, #528]	; (800b6c4 <HAL_RCC_OscConfig+0x2ac>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4a83      	ldr	r2, [pc, #524]	; (800b6c4 <HAL_RCC_OscConfig+0x2ac>)
 800b4b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b4ba:	6013      	str	r3, [r2, #0]
 800b4bc:	4b81      	ldr	r3, [pc, #516]	; (800b6c4 <HAL_RCC_OscConfig+0x2ac>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a80      	ldr	r2, [pc, #512]	; (800b6c4 <HAL_RCC_OscConfig+0x2ac>)
 800b4c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b4c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d013      	beq.n	800b4f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b4d0:	f7fc ff72 	bl	80083b8 <HAL_GetTick>
 800b4d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b4d6:	e008      	b.n	800b4ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b4d8:	f7fc ff6e 	bl	80083b8 <HAL_GetTick>
 800b4dc:	4602      	mov	r2, r0
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	1ad3      	subs	r3, r2, r3
 800b4e2:	2b64      	cmp	r3, #100	; 0x64
 800b4e4:	d901      	bls.n	800b4ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b4e6:	2303      	movs	r3, #3
 800b4e8:	e204      	b.n	800b8f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b4ea:	4b76      	ldr	r3, [pc, #472]	; (800b6c4 <HAL_RCC_OscConfig+0x2ac>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d0f0      	beq.n	800b4d8 <HAL_RCC_OscConfig+0xc0>
 800b4f6:	e014      	b.n	800b522 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b4f8:	f7fc ff5e 	bl	80083b8 <HAL_GetTick>
 800b4fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b4fe:	e008      	b.n	800b512 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b500:	f7fc ff5a 	bl	80083b8 <HAL_GetTick>
 800b504:	4602      	mov	r2, r0
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	1ad3      	subs	r3, r2, r3
 800b50a:	2b64      	cmp	r3, #100	; 0x64
 800b50c:	d901      	bls.n	800b512 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b50e:	2303      	movs	r3, #3
 800b510:	e1f0      	b.n	800b8f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b512:	4b6c      	ldr	r3, [pc, #432]	; (800b6c4 <HAL_RCC_OscConfig+0x2ac>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d1f0      	bne.n	800b500 <HAL_RCC_OscConfig+0xe8>
 800b51e:	e000      	b.n	800b522 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f003 0302 	and.w	r3, r3, #2
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d063      	beq.n	800b5f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b52e:	4b65      	ldr	r3, [pc, #404]	; (800b6c4 <HAL_RCC_OscConfig+0x2ac>)
 800b530:	689b      	ldr	r3, [r3, #8]
 800b532:	f003 030c 	and.w	r3, r3, #12
 800b536:	2b00      	cmp	r3, #0
 800b538:	d00b      	beq.n	800b552 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b53a:	4b62      	ldr	r3, [pc, #392]	; (800b6c4 <HAL_RCC_OscConfig+0x2ac>)
 800b53c:	689b      	ldr	r3, [r3, #8]
 800b53e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b542:	2b08      	cmp	r3, #8
 800b544:	d11c      	bne.n	800b580 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b546:	4b5f      	ldr	r3, [pc, #380]	; (800b6c4 <HAL_RCC_OscConfig+0x2ac>)
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d116      	bne.n	800b580 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b552:	4b5c      	ldr	r3, [pc, #368]	; (800b6c4 <HAL_RCC_OscConfig+0x2ac>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f003 0302 	and.w	r3, r3, #2
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d005      	beq.n	800b56a <HAL_RCC_OscConfig+0x152>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	68db      	ldr	r3, [r3, #12]
 800b562:	2b01      	cmp	r3, #1
 800b564:	d001      	beq.n	800b56a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b566:	2301      	movs	r3, #1
 800b568:	e1c4      	b.n	800b8f4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b56a:	4b56      	ldr	r3, [pc, #344]	; (800b6c4 <HAL_RCC_OscConfig+0x2ac>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	691b      	ldr	r3, [r3, #16]
 800b576:	00db      	lsls	r3, r3, #3
 800b578:	4952      	ldr	r1, [pc, #328]	; (800b6c4 <HAL_RCC_OscConfig+0x2ac>)
 800b57a:	4313      	orrs	r3, r2
 800b57c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b57e:	e03a      	b.n	800b5f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	68db      	ldr	r3, [r3, #12]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d020      	beq.n	800b5ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b588:	4b4f      	ldr	r3, [pc, #316]	; (800b6c8 <HAL_RCC_OscConfig+0x2b0>)
 800b58a:	2201      	movs	r2, #1
 800b58c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b58e:	f7fc ff13 	bl	80083b8 <HAL_GetTick>
 800b592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b594:	e008      	b.n	800b5a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b596:	f7fc ff0f 	bl	80083b8 <HAL_GetTick>
 800b59a:	4602      	mov	r2, r0
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	1ad3      	subs	r3, r2, r3
 800b5a0:	2b02      	cmp	r3, #2
 800b5a2:	d901      	bls.n	800b5a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b5a4:	2303      	movs	r3, #3
 800b5a6:	e1a5      	b.n	800b8f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b5a8:	4b46      	ldr	r3, [pc, #280]	; (800b6c4 <HAL_RCC_OscConfig+0x2ac>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f003 0302 	and.w	r3, r3, #2
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d0f0      	beq.n	800b596 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b5b4:	4b43      	ldr	r3, [pc, #268]	; (800b6c4 <HAL_RCC_OscConfig+0x2ac>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	691b      	ldr	r3, [r3, #16]
 800b5c0:	00db      	lsls	r3, r3, #3
 800b5c2:	4940      	ldr	r1, [pc, #256]	; (800b6c4 <HAL_RCC_OscConfig+0x2ac>)
 800b5c4:	4313      	orrs	r3, r2
 800b5c6:	600b      	str	r3, [r1, #0]
 800b5c8:	e015      	b.n	800b5f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b5ca:	4b3f      	ldr	r3, [pc, #252]	; (800b6c8 <HAL_RCC_OscConfig+0x2b0>)
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5d0:	f7fc fef2 	bl	80083b8 <HAL_GetTick>
 800b5d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b5d6:	e008      	b.n	800b5ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b5d8:	f7fc feee 	bl	80083b8 <HAL_GetTick>
 800b5dc:	4602      	mov	r2, r0
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	1ad3      	subs	r3, r2, r3
 800b5e2:	2b02      	cmp	r3, #2
 800b5e4:	d901      	bls.n	800b5ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b5e6:	2303      	movs	r3, #3
 800b5e8:	e184      	b.n	800b8f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b5ea:	4b36      	ldr	r3, [pc, #216]	; (800b6c4 <HAL_RCC_OscConfig+0x2ac>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f003 0302 	and.w	r3, r3, #2
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d1f0      	bne.n	800b5d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f003 0308 	and.w	r3, r3, #8
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d030      	beq.n	800b664 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	695b      	ldr	r3, [r3, #20]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d016      	beq.n	800b638 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b60a:	4b30      	ldr	r3, [pc, #192]	; (800b6cc <HAL_RCC_OscConfig+0x2b4>)
 800b60c:	2201      	movs	r2, #1
 800b60e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b610:	f7fc fed2 	bl	80083b8 <HAL_GetTick>
 800b614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b616:	e008      	b.n	800b62a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b618:	f7fc fece 	bl	80083b8 <HAL_GetTick>
 800b61c:	4602      	mov	r2, r0
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	1ad3      	subs	r3, r2, r3
 800b622:	2b02      	cmp	r3, #2
 800b624:	d901      	bls.n	800b62a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b626:	2303      	movs	r3, #3
 800b628:	e164      	b.n	800b8f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b62a:	4b26      	ldr	r3, [pc, #152]	; (800b6c4 <HAL_RCC_OscConfig+0x2ac>)
 800b62c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b62e:	f003 0302 	and.w	r3, r3, #2
 800b632:	2b00      	cmp	r3, #0
 800b634:	d0f0      	beq.n	800b618 <HAL_RCC_OscConfig+0x200>
 800b636:	e015      	b.n	800b664 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b638:	4b24      	ldr	r3, [pc, #144]	; (800b6cc <HAL_RCC_OscConfig+0x2b4>)
 800b63a:	2200      	movs	r2, #0
 800b63c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b63e:	f7fc febb 	bl	80083b8 <HAL_GetTick>
 800b642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b644:	e008      	b.n	800b658 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b646:	f7fc feb7 	bl	80083b8 <HAL_GetTick>
 800b64a:	4602      	mov	r2, r0
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	1ad3      	subs	r3, r2, r3
 800b650:	2b02      	cmp	r3, #2
 800b652:	d901      	bls.n	800b658 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b654:	2303      	movs	r3, #3
 800b656:	e14d      	b.n	800b8f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b658:	4b1a      	ldr	r3, [pc, #104]	; (800b6c4 <HAL_RCC_OscConfig+0x2ac>)
 800b65a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b65c:	f003 0302 	and.w	r3, r3, #2
 800b660:	2b00      	cmp	r3, #0
 800b662:	d1f0      	bne.n	800b646 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	f003 0304 	and.w	r3, r3, #4
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	f000 80a0 	beq.w	800b7b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b672:	2300      	movs	r3, #0
 800b674:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b676:	4b13      	ldr	r3, [pc, #76]	; (800b6c4 <HAL_RCC_OscConfig+0x2ac>)
 800b678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b67a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d10f      	bne.n	800b6a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b682:	2300      	movs	r3, #0
 800b684:	60bb      	str	r3, [r7, #8]
 800b686:	4b0f      	ldr	r3, [pc, #60]	; (800b6c4 <HAL_RCC_OscConfig+0x2ac>)
 800b688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b68a:	4a0e      	ldr	r2, [pc, #56]	; (800b6c4 <HAL_RCC_OscConfig+0x2ac>)
 800b68c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b690:	6413      	str	r3, [r2, #64]	; 0x40
 800b692:	4b0c      	ldr	r3, [pc, #48]	; (800b6c4 <HAL_RCC_OscConfig+0x2ac>)
 800b694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b69a:	60bb      	str	r3, [r7, #8]
 800b69c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b69e:	2301      	movs	r3, #1
 800b6a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b6a2:	4b0b      	ldr	r3, [pc, #44]	; (800b6d0 <HAL_RCC_OscConfig+0x2b8>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d121      	bne.n	800b6f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b6ae:	4b08      	ldr	r3, [pc, #32]	; (800b6d0 <HAL_RCC_OscConfig+0x2b8>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	4a07      	ldr	r2, [pc, #28]	; (800b6d0 <HAL_RCC_OscConfig+0x2b8>)
 800b6b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b6ba:	f7fc fe7d 	bl	80083b8 <HAL_GetTick>
 800b6be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b6c0:	e011      	b.n	800b6e6 <HAL_RCC_OscConfig+0x2ce>
 800b6c2:	bf00      	nop
 800b6c4:	40023800 	.word	0x40023800
 800b6c8:	42470000 	.word	0x42470000
 800b6cc:	42470e80 	.word	0x42470e80
 800b6d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b6d4:	f7fc fe70 	bl	80083b8 <HAL_GetTick>
 800b6d8:	4602      	mov	r2, r0
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	1ad3      	subs	r3, r2, r3
 800b6de:	2b02      	cmp	r3, #2
 800b6e0:	d901      	bls.n	800b6e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800b6e2:	2303      	movs	r3, #3
 800b6e4:	e106      	b.n	800b8f4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b6e6:	4b85      	ldr	r3, [pc, #532]	; (800b8fc <HAL_RCC_OscConfig+0x4e4>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d0f0      	beq.n	800b6d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	689b      	ldr	r3, [r3, #8]
 800b6f6:	2b01      	cmp	r3, #1
 800b6f8:	d106      	bne.n	800b708 <HAL_RCC_OscConfig+0x2f0>
 800b6fa:	4b81      	ldr	r3, [pc, #516]	; (800b900 <HAL_RCC_OscConfig+0x4e8>)
 800b6fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6fe:	4a80      	ldr	r2, [pc, #512]	; (800b900 <HAL_RCC_OscConfig+0x4e8>)
 800b700:	f043 0301 	orr.w	r3, r3, #1
 800b704:	6713      	str	r3, [r2, #112]	; 0x70
 800b706:	e01c      	b.n	800b742 <HAL_RCC_OscConfig+0x32a>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	689b      	ldr	r3, [r3, #8]
 800b70c:	2b05      	cmp	r3, #5
 800b70e:	d10c      	bne.n	800b72a <HAL_RCC_OscConfig+0x312>
 800b710:	4b7b      	ldr	r3, [pc, #492]	; (800b900 <HAL_RCC_OscConfig+0x4e8>)
 800b712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b714:	4a7a      	ldr	r2, [pc, #488]	; (800b900 <HAL_RCC_OscConfig+0x4e8>)
 800b716:	f043 0304 	orr.w	r3, r3, #4
 800b71a:	6713      	str	r3, [r2, #112]	; 0x70
 800b71c:	4b78      	ldr	r3, [pc, #480]	; (800b900 <HAL_RCC_OscConfig+0x4e8>)
 800b71e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b720:	4a77      	ldr	r2, [pc, #476]	; (800b900 <HAL_RCC_OscConfig+0x4e8>)
 800b722:	f043 0301 	orr.w	r3, r3, #1
 800b726:	6713      	str	r3, [r2, #112]	; 0x70
 800b728:	e00b      	b.n	800b742 <HAL_RCC_OscConfig+0x32a>
 800b72a:	4b75      	ldr	r3, [pc, #468]	; (800b900 <HAL_RCC_OscConfig+0x4e8>)
 800b72c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b72e:	4a74      	ldr	r2, [pc, #464]	; (800b900 <HAL_RCC_OscConfig+0x4e8>)
 800b730:	f023 0301 	bic.w	r3, r3, #1
 800b734:	6713      	str	r3, [r2, #112]	; 0x70
 800b736:	4b72      	ldr	r3, [pc, #456]	; (800b900 <HAL_RCC_OscConfig+0x4e8>)
 800b738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b73a:	4a71      	ldr	r2, [pc, #452]	; (800b900 <HAL_RCC_OscConfig+0x4e8>)
 800b73c:	f023 0304 	bic.w	r3, r3, #4
 800b740:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d015      	beq.n	800b776 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b74a:	f7fc fe35 	bl	80083b8 <HAL_GetTick>
 800b74e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b750:	e00a      	b.n	800b768 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b752:	f7fc fe31 	bl	80083b8 <HAL_GetTick>
 800b756:	4602      	mov	r2, r0
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	1ad3      	subs	r3, r2, r3
 800b75c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b760:	4293      	cmp	r3, r2
 800b762:	d901      	bls.n	800b768 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800b764:	2303      	movs	r3, #3
 800b766:	e0c5      	b.n	800b8f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b768:	4b65      	ldr	r3, [pc, #404]	; (800b900 <HAL_RCC_OscConfig+0x4e8>)
 800b76a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b76c:	f003 0302 	and.w	r3, r3, #2
 800b770:	2b00      	cmp	r3, #0
 800b772:	d0ee      	beq.n	800b752 <HAL_RCC_OscConfig+0x33a>
 800b774:	e014      	b.n	800b7a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b776:	f7fc fe1f 	bl	80083b8 <HAL_GetTick>
 800b77a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b77c:	e00a      	b.n	800b794 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b77e:	f7fc fe1b 	bl	80083b8 <HAL_GetTick>
 800b782:	4602      	mov	r2, r0
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	1ad3      	subs	r3, r2, r3
 800b788:	f241 3288 	movw	r2, #5000	; 0x1388
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d901      	bls.n	800b794 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800b790:	2303      	movs	r3, #3
 800b792:	e0af      	b.n	800b8f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b794:	4b5a      	ldr	r3, [pc, #360]	; (800b900 <HAL_RCC_OscConfig+0x4e8>)
 800b796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b798:	f003 0302 	and.w	r3, r3, #2
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d1ee      	bne.n	800b77e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b7a0:	7dfb      	ldrb	r3, [r7, #23]
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	d105      	bne.n	800b7b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b7a6:	4b56      	ldr	r3, [pc, #344]	; (800b900 <HAL_RCC_OscConfig+0x4e8>)
 800b7a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7aa:	4a55      	ldr	r2, [pc, #340]	; (800b900 <HAL_RCC_OscConfig+0x4e8>)
 800b7ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b7b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	699b      	ldr	r3, [r3, #24]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	f000 809b 	beq.w	800b8f2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b7bc:	4b50      	ldr	r3, [pc, #320]	; (800b900 <HAL_RCC_OscConfig+0x4e8>)
 800b7be:	689b      	ldr	r3, [r3, #8]
 800b7c0:	f003 030c 	and.w	r3, r3, #12
 800b7c4:	2b08      	cmp	r3, #8
 800b7c6:	d05c      	beq.n	800b882 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	699b      	ldr	r3, [r3, #24]
 800b7cc:	2b02      	cmp	r3, #2
 800b7ce:	d141      	bne.n	800b854 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b7d0:	4b4c      	ldr	r3, [pc, #304]	; (800b904 <HAL_RCC_OscConfig+0x4ec>)
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b7d6:	f7fc fdef 	bl	80083b8 <HAL_GetTick>
 800b7da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b7dc:	e008      	b.n	800b7f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b7de:	f7fc fdeb 	bl	80083b8 <HAL_GetTick>
 800b7e2:	4602      	mov	r2, r0
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	1ad3      	subs	r3, r2, r3
 800b7e8:	2b02      	cmp	r3, #2
 800b7ea:	d901      	bls.n	800b7f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800b7ec:	2303      	movs	r3, #3
 800b7ee:	e081      	b.n	800b8f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b7f0:	4b43      	ldr	r3, [pc, #268]	; (800b900 <HAL_RCC_OscConfig+0x4e8>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d1f0      	bne.n	800b7de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	69da      	ldr	r2, [r3, #28]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6a1b      	ldr	r3, [r3, #32]
 800b804:	431a      	orrs	r2, r3
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b80a:	019b      	lsls	r3, r3, #6
 800b80c:	431a      	orrs	r2, r3
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b812:	085b      	lsrs	r3, r3, #1
 800b814:	3b01      	subs	r3, #1
 800b816:	041b      	lsls	r3, r3, #16
 800b818:	431a      	orrs	r2, r3
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b81e:	061b      	lsls	r3, r3, #24
 800b820:	4937      	ldr	r1, [pc, #220]	; (800b900 <HAL_RCC_OscConfig+0x4e8>)
 800b822:	4313      	orrs	r3, r2
 800b824:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b826:	4b37      	ldr	r3, [pc, #220]	; (800b904 <HAL_RCC_OscConfig+0x4ec>)
 800b828:	2201      	movs	r2, #1
 800b82a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b82c:	f7fc fdc4 	bl	80083b8 <HAL_GetTick>
 800b830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b832:	e008      	b.n	800b846 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b834:	f7fc fdc0 	bl	80083b8 <HAL_GetTick>
 800b838:	4602      	mov	r2, r0
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	1ad3      	subs	r3, r2, r3
 800b83e:	2b02      	cmp	r3, #2
 800b840:	d901      	bls.n	800b846 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800b842:	2303      	movs	r3, #3
 800b844:	e056      	b.n	800b8f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b846:	4b2e      	ldr	r3, [pc, #184]	; (800b900 <HAL_RCC_OscConfig+0x4e8>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d0f0      	beq.n	800b834 <HAL_RCC_OscConfig+0x41c>
 800b852:	e04e      	b.n	800b8f2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b854:	4b2b      	ldr	r3, [pc, #172]	; (800b904 <HAL_RCC_OscConfig+0x4ec>)
 800b856:	2200      	movs	r2, #0
 800b858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b85a:	f7fc fdad 	bl	80083b8 <HAL_GetTick>
 800b85e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b860:	e008      	b.n	800b874 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b862:	f7fc fda9 	bl	80083b8 <HAL_GetTick>
 800b866:	4602      	mov	r2, r0
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	1ad3      	subs	r3, r2, r3
 800b86c:	2b02      	cmp	r3, #2
 800b86e:	d901      	bls.n	800b874 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800b870:	2303      	movs	r3, #3
 800b872:	e03f      	b.n	800b8f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b874:	4b22      	ldr	r3, [pc, #136]	; (800b900 <HAL_RCC_OscConfig+0x4e8>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d1f0      	bne.n	800b862 <HAL_RCC_OscConfig+0x44a>
 800b880:	e037      	b.n	800b8f2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	699b      	ldr	r3, [r3, #24]
 800b886:	2b01      	cmp	r3, #1
 800b888:	d101      	bne.n	800b88e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800b88a:	2301      	movs	r3, #1
 800b88c:	e032      	b.n	800b8f4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b88e:	4b1c      	ldr	r3, [pc, #112]	; (800b900 <HAL_RCC_OscConfig+0x4e8>)
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	699b      	ldr	r3, [r3, #24]
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d028      	beq.n	800b8ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	d121      	bne.n	800b8ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d11a      	bne.n	800b8ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b8b8:	68fa      	ldr	r2, [r7, #12]
 800b8ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b8be:	4013      	ands	r3, r2
 800b8c0:	687a      	ldr	r2, [r7, #4]
 800b8c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b8c4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d111      	bne.n	800b8ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8d4:	085b      	lsrs	r3, r3, #1
 800b8d6:	3b01      	subs	r3, #1
 800b8d8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d107      	bne.n	800b8ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8e8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d001      	beq.n	800b8f2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e000      	b.n	800b8f4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800b8f2:	2300      	movs	r3, #0
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3718      	adds	r7, #24
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	40007000 	.word	0x40007000
 800b900:	40023800 	.word	0x40023800
 800b904:	42470060 	.word	0x42470060

0800b908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d101      	bne.n	800b91c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b918:	2301      	movs	r3, #1
 800b91a:	e0cc      	b.n	800bab6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b91c:	4b68      	ldr	r3, [pc, #416]	; (800bac0 <HAL_RCC_ClockConfig+0x1b8>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f003 030f 	and.w	r3, r3, #15
 800b924:	683a      	ldr	r2, [r7, #0]
 800b926:	429a      	cmp	r2, r3
 800b928:	d90c      	bls.n	800b944 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b92a:	4b65      	ldr	r3, [pc, #404]	; (800bac0 <HAL_RCC_ClockConfig+0x1b8>)
 800b92c:	683a      	ldr	r2, [r7, #0]
 800b92e:	b2d2      	uxtb	r2, r2
 800b930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b932:	4b63      	ldr	r3, [pc, #396]	; (800bac0 <HAL_RCC_ClockConfig+0x1b8>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f003 030f 	and.w	r3, r3, #15
 800b93a:	683a      	ldr	r2, [r7, #0]
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d001      	beq.n	800b944 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b940:	2301      	movs	r3, #1
 800b942:	e0b8      	b.n	800bab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f003 0302 	and.w	r3, r3, #2
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d020      	beq.n	800b992 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f003 0304 	and.w	r3, r3, #4
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d005      	beq.n	800b968 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b95c:	4b59      	ldr	r3, [pc, #356]	; (800bac4 <HAL_RCC_ClockConfig+0x1bc>)
 800b95e:	689b      	ldr	r3, [r3, #8]
 800b960:	4a58      	ldr	r2, [pc, #352]	; (800bac4 <HAL_RCC_ClockConfig+0x1bc>)
 800b962:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b966:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f003 0308 	and.w	r3, r3, #8
 800b970:	2b00      	cmp	r3, #0
 800b972:	d005      	beq.n	800b980 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b974:	4b53      	ldr	r3, [pc, #332]	; (800bac4 <HAL_RCC_ClockConfig+0x1bc>)
 800b976:	689b      	ldr	r3, [r3, #8]
 800b978:	4a52      	ldr	r2, [pc, #328]	; (800bac4 <HAL_RCC_ClockConfig+0x1bc>)
 800b97a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b97e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b980:	4b50      	ldr	r3, [pc, #320]	; (800bac4 <HAL_RCC_ClockConfig+0x1bc>)
 800b982:	689b      	ldr	r3, [r3, #8]
 800b984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	689b      	ldr	r3, [r3, #8]
 800b98c:	494d      	ldr	r1, [pc, #308]	; (800bac4 <HAL_RCC_ClockConfig+0x1bc>)
 800b98e:	4313      	orrs	r3, r2
 800b990:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f003 0301 	and.w	r3, r3, #1
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d044      	beq.n	800ba28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	2b01      	cmp	r3, #1
 800b9a4:	d107      	bne.n	800b9b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b9a6:	4b47      	ldr	r3, [pc, #284]	; (800bac4 <HAL_RCC_ClockConfig+0x1bc>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d119      	bne.n	800b9e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	e07f      	b.n	800bab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	2b02      	cmp	r3, #2
 800b9bc:	d003      	beq.n	800b9c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b9c2:	2b03      	cmp	r3, #3
 800b9c4:	d107      	bne.n	800b9d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b9c6:	4b3f      	ldr	r3, [pc, #252]	; (800bac4 <HAL_RCC_ClockConfig+0x1bc>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d109      	bne.n	800b9e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	e06f      	b.n	800bab6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b9d6:	4b3b      	ldr	r3, [pc, #236]	; (800bac4 <HAL_RCC_ClockConfig+0x1bc>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f003 0302 	and.w	r3, r3, #2
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d101      	bne.n	800b9e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	e067      	b.n	800bab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b9e6:	4b37      	ldr	r3, [pc, #220]	; (800bac4 <HAL_RCC_ClockConfig+0x1bc>)
 800b9e8:	689b      	ldr	r3, [r3, #8]
 800b9ea:	f023 0203 	bic.w	r2, r3, #3
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	4934      	ldr	r1, [pc, #208]	; (800bac4 <HAL_RCC_ClockConfig+0x1bc>)
 800b9f4:	4313      	orrs	r3, r2
 800b9f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b9f8:	f7fc fcde 	bl	80083b8 <HAL_GetTick>
 800b9fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b9fe:	e00a      	b.n	800ba16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ba00:	f7fc fcda 	bl	80083b8 <HAL_GetTick>
 800ba04:	4602      	mov	r2, r0
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	1ad3      	subs	r3, r2, r3
 800ba0a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d901      	bls.n	800ba16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ba12:	2303      	movs	r3, #3
 800ba14:	e04f      	b.n	800bab6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ba16:	4b2b      	ldr	r3, [pc, #172]	; (800bac4 <HAL_RCC_ClockConfig+0x1bc>)
 800ba18:	689b      	ldr	r3, [r3, #8]
 800ba1a:	f003 020c 	and.w	r2, r3, #12
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	685b      	ldr	r3, [r3, #4]
 800ba22:	009b      	lsls	r3, r3, #2
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d1eb      	bne.n	800ba00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ba28:	4b25      	ldr	r3, [pc, #148]	; (800bac0 <HAL_RCC_ClockConfig+0x1b8>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f003 030f 	and.w	r3, r3, #15
 800ba30:	683a      	ldr	r2, [r7, #0]
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d20c      	bcs.n	800ba50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba36:	4b22      	ldr	r3, [pc, #136]	; (800bac0 <HAL_RCC_ClockConfig+0x1b8>)
 800ba38:	683a      	ldr	r2, [r7, #0]
 800ba3a:	b2d2      	uxtb	r2, r2
 800ba3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba3e:	4b20      	ldr	r3, [pc, #128]	; (800bac0 <HAL_RCC_ClockConfig+0x1b8>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f003 030f 	and.w	r3, r3, #15
 800ba46:	683a      	ldr	r2, [r7, #0]
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d001      	beq.n	800ba50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	e032      	b.n	800bab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f003 0304 	and.w	r3, r3, #4
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d008      	beq.n	800ba6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ba5c:	4b19      	ldr	r3, [pc, #100]	; (800bac4 <HAL_RCC_ClockConfig+0x1bc>)
 800ba5e:	689b      	ldr	r3, [r3, #8]
 800ba60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	68db      	ldr	r3, [r3, #12]
 800ba68:	4916      	ldr	r1, [pc, #88]	; (800bac4 <HAL_RCC_ClockConfig+0x1bc>)
 800ba6a:	4313      	orrs	r3, r2
 800ba6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f003 0308 	and.w	r3, r3, #8
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d009      	beq.n	800ba8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ba7a:	4b12      	ldr	r3, [pc, #72]	; (800bac4 <HAL_RCC_ClockConfig+0x1bc>)
 800ba7c:	689b      	ldr	r3, [r3, #8]
 800ba7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	691b      	ldr	r3, [r3, #16]
 800ba86:	00db      	lsls	r3, r3, #3
 800ba88:	490e      	ldr	r1, [pc, #56]	; (800bac4 <HAL_RCC_ClockConfig+0x1bc>)
 800ba8a:	4313      	orrs	r3, r2
 800ba8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ba8e:	f000 f821 	bl	800bad4 <HAL_RCC_GetSysClockFreq>
 800ba92:	4602      	mov	r2, r0
 800ba94:	4b0b      	ldr	r3, [pc, #44]	; (800bac4 <HAL_RCC_ClockConfig+0x1bc>)
 800ba96:	689b      	ldr	r3, [r3, #8]
 800ba98:	091b      	lsrs	r3, r3, #4
 800ba9a:	f003 030f 	and.w	r3, r3, #15
 800ba9e:	490a      	ldr	r1, [pc, #40]	; (800bac8 <HAL_RCC_ClockConfig+0x1c0>)
 800baa0:	5ccb      	ldrb	r3, [r1, r3]
 800baa2:	fa22 f303 	lsr.w	r3, r2, r3
 800baa6:	4a09      	ldr	r2, [pc, #36]	; (800bacc <HAL_RCC_ClockConfig+0x1c4>)
 800baa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800baaa:	4b09      	ldr	r3, [pc, #36]	; (800bad0 <HAL_RCC_ClockConfig+0x1c8>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	4618      	mov	r0, r3
 800bab0:	f7f7 faae 	bl	8003010 <HAL_InitTick>

  return HAL_OK;
 800bab4:	2300      	movs	r3, #0
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3710      	adds	r7, #16
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}
 800babe:	bf00      	nop
 800bac0:	40023c00 	.word	0x40023c00
 800bac4:	40023800 	.word	0x40023800
 800bac8:	08021614 	.word	0x08021614
 800bacc:	20000000 	.word	0x20000000
 800bad0:	20000058 	.word	0x20000058

0800bad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bad4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800bad8:	b084      	sub	sp, #16
 800bada:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800badc:	2300      	movs	r3, #0
 800bade:	607b      	str	r3, [r7, #4]
 800bae0:	2300      	movs	r3, #0
 800bae2:	60fb      	str	r3, [r7, #12]
 800bae4:	2300      	movs	r3, #0
 800bae6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800bae8:	2300      	movs	r3, #0
 800baea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800baec:	4b67      	ldr	r3, [pc, #412]	; (800bc8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800baee:	689b      	ldr	r3, [r3, #8]
 800baf0:	f003 030c 	and.w	r3, r3, #12
 800baf4:	2b08      	cmp	r3, #8
 800baf6:	d00d      	beq.n	800bb14 <HAL_RCC_GetSysClockFreq+0x40>
 800baf8:	2b08      	cmp	r3, #8
 800bafa:	f200 80bd 	bhi.w	800bc78 <HAL_RCC_GetSysClockFreq+0x1a4>
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d002      	beq.n	800bb08 <HAL_RCC_GetSysClockFreq+0x34>
 800bb02:	2b04      	cmp	r3, #4
 800bb04:	d003      	beq.n	800bb0e <HAL_RCC_GetSysClockFreq+0x3a>
 800bb06:	e0b7      	b.n	800bc78 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bb08:	4b61      	ldr	r3, [pc, #388]	; (800bc90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800bb0a:	60bb      	str	r3, [r7, #8]
       break;
 800bb0c:	e0b7      	b.n	800bc7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bb0e:	4b60      	ldr	r3, [pc, #384]	; (800bc90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800bb10:	60bb      	str	r3, [r7, #8]
      break;
 800bb12:	e0b4      	b.n	800bc7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bb14:	4b5d      	ldr	r3, [pc, #372]	; (800bc8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800bb1e:	4b5b      	ldr	r3, [pc, #364]	; (800bc8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800bb20:	685b      	ldr	r3, [r3, #4]
 800bb22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d04d      	beq.n	800bbc6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bb2a:	4b58      	ldr	r3, [pc, #352]	; (800bc8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	099b      	lsrs	r3, r3, #6
 800bb30:	461a      	mov	r2, r3
 800bb32:	f04f 0300 	mov.w	r3, #0
 800bb36:	f240 10ff 	movw	r0, #511	; 0x1ff
 800bb3a:	f04f 0100 	mov.w	r1, #0
 800bb3e:	ea02 0800 	and.w	r8, r2, r0
 800bb42:	ea03 0901 	and.w	r9, r3, r1
 800bb46:	4640      	mov	r0, r8
 800bb48:	4649      	mov	r1, r9
 800bb4a:	f04f 0200 	mov.w	r2, #0
 800bb4e:	f04f 0300 	mov.w	r3, #0
 800bb52:	014b      	lsls	r3, r1, #5
 800bb54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800bb58:	0142      	lsls	r2, r0, #5
 800bb5a:	4610      	mov	r0, r2
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	ebb0 0008 	subs.w	r0, r0, r8
 800bb62:	eb61 0109 	sbc.w	r1, r1, r9
 800bb66:	f04f 0200 	mov.w	r2, #0
 800bb6a:	f04f 0300 	mov.w	r3, #0
 800bb6e:	018b      	lsls	r3, r1, #6
 800bb70:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800bb74:	0182      	lsls	r2, r0, #6
 800bb76:	1a12      	subs	r2, r2, r0
 800bb78:	eb63 0301 	sbc.w	r3, r3, r1
 800bb7c:	f04f 0000 	mov.w	r0, #0
 800bb80:	f04f 0100 	mov.w	r1, #0
 800bb84:	00d9      	lsls	r1, r3, #3
 800bb86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bb8a:	00d0      	lsls	r0, r2, #3
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	460b      	mov	r3, r1
 800bb90:	eb12 0208 	adds.w	r2, r2, r8
 800bb94:	eb43 0309 	adc.w	r3, r3, r9
 800bb98:	f04f 0000 	mov.w	r0, #0
 800bb9c:	f04f 0100 	mov.w	r1, #0
 800bba0:	0299      	lsls	r1, r3, #10
 800bba2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800bba6:	0290      	lsls	r0, r2, #10
 800bba8:	4602      	mov	r2, r0
 800bbaa:	460b      	mov	r3, r1
 800bbac:	4610      	mov	r0, r2
 800bbae:	4619      	mov	r1, r3
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	f04f 0300 	mov.w	r3, #0
 800bbb8:	f7f5 f876 	bl	8000ca8 <__aeabi_uldivmod>
 800bbbc:	4602      	mov	r2, r0
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	4613      	mov	r3, r2
 800bbc2:	60fb      	str	r3, [r7, #12]
 800bbc4:	e04a      	b.n	800bc5c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bbc6:	4b31      	ldr	r3, [pc, #196]	; (800bc8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	099b      	lsrs	r3, r3, #6
 800bbcc:	461a      	mov	r2, r3
 800bbce:	f04f 0300 	mov.w	r3, #0
 800bbd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800bbd6:	f04f 0100 	mov.w	r1, #0
 800bbda:	ea02 0400 	and.w	r4, r2, r0
 800bbde:	ea03 0501 	and.w	r5, r3, r1
 800bbe2:	4620      	mov	r0, r4
 800bbe4:	4629      	mov	r1, r5
 800bbe6:	f04f 0200 	mov.w	r2, #0
 800bbea:	f04f 0300 	mov.w	r3, #0
 800bbee:	014b      	lsls	r3, r1, #5
 800bbf0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800bbf4:	0142      	lsls	r2, r0, #5
 800bbf6:	4610      	mov	r0, r2
 800bbf8:	4619      	mov	r1, r3
 800bbfa:	1b00      	subs	r0, r0, r4
 800bbfc:	eb61 0105 	sbc.w	r1, r1, r5
 800bc00:	f04f 0200 	mov.w	r2, #0
 800bc04:	f04f 0300 	mov.w	r3, #0
 800bc08:	018b      	lsls	r3, r1, #6
 800bc0a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800bc0e:	0182      	lsls	r2, r0, #6
 800bc10:	1a12      	subs	r2, r2, r0
 800bc12:	eb63 0301 	sbc.w	r3, r3, r1
 800bc16:	f04f 0000 	mov.w	r0, #0
 800bc1a:	f04f 0100 	mov.w	r1, #0
 800bc1e:	00d9      	lsls	r1, r3, #3
 800bc20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bc24:	00d0      	lsls	r0, r2, #3
 800bc26:	4602      	mov	r2, r0
 800bc28:	460b      	mov	r3, r1
 800bc2a:	1912      	adds	r2, r2, r4
 800bc2c:	eb45 0303 	adc.w	r3, r5, r3
 800bc30:	f04f 0000 	mov.w	r0, #0
 800bc34:	f04f 0100 	mov.w	r1, #0
 800bc38:	0299      	lsls	r1, r3, #10
 800bc3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800bc3e:	0290      	lsls	r0, r2, #10
 800bc40:	4602      	mov	r2, r0
 800bc42:	460b      	mov	r3, r1
 800bc44:	4610      	mov	r0, r2
 800bc46:	4619      	mov	r1, r3
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	f04f 0300 	mov.w	r3, #0
 800bc50:	f7f5 f82a 	bl	8000ca8 <__aeabi_uldivmod>
 800bc54:	4602      	mov	r2, r0
 800bc56:	460b      	mov	r3, r1
 800bc58:	4613      	mov	r3, r2
 800bc5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800bc5c:	4b0b      	ldr	r3, [pc, #44]	; (800bc8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	0c1b      	lsrs	r3, r3, #16
 800bc62:	f003 0303 	and.w	r3, r3, #3
 800bc66:	3301      	adds	r3, #1
 800bc68:	005b      	lsls	r3, r3, #1
 800bc6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800bc6c:	68fa      	ldr	r2, [r7, #12]
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc74:	60bb      	str	r3, [r7, #8]
      break;
 800bc76:	e002      	b.n	800bc7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bc78:	4b05      	ldr	r3, [pc, #20]	; (800bc90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800bc7a:	60bb      	str	r3, [r7, #8]
      break;
 800bc7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bc7e:	68bb      	ldr	r3, [r7, #8]
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3710      	adds	r7, #16
 800bc84:	46bd      	mov	sp, r7
 800bc86:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800bc8a:	bf00      	nop
 800bc8c:	40023800 	.word	0x40023800
 800bc90:	00f42400 	.word	0x00f42400

0800bc94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bc94:	b480      	push	{r7}
 800bc96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bc98:	4b03      	ldr	r3, [pc, #12]	; (800bca8 <HAL_RCC_GetHCLKFreq+0x14>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr
 800bca6:	bf00      	nop
 800bca8:	20000000 	.word	0x20000000

0800bcac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800bcb0:	f7ff fff0 	bl	800bc94 <HAL_RCC_GetHCLKFreq>
 800bcb4:	4602      	mov	r2, r0
 800bcb6:	4b05      	ldr	r3, [pc, #20]	; (800bccc <HAL_RCC_GetPCLK1Freq+0x20>)
 800bcb8:	689b      	ldr	r3, [r3, #8]
 800bcba:	0a9b      	lsrs	r3, r3, #10
 800bcbc:	f003 0307 	and.w	r3, r3, #7
 800bcc0:	4903      	ldr	r1, [pc, #12]	; (800bcd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bcc2:	5ccb      	ldrb	r3, [r1, r3]
 800bcc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	bd80      	pop	{r7, pc}
 800bccc:	40023800 	.word	0x40023800
 800bcd0:	08021624 	.word	0x08021624

0800bcd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800bcd8:	f7ff ffdc 	bl	800bc94 <HAL_RCC_GetHCLKFreq>
 800bcdc:	4602      	mov	r2, r0
 800bcde:	4b05      	ldr	r3, [pc, #20]	; (800bcf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bce0:	689b      	ldr	r3, [r3, #8]
 800bce2:	0b5b      	lsrs	r3, r3, #13
 800bce4:	f003 0307 	and.w	r3, r3, #7
 800bce8:	4903      	ldr	r1, [pc, #12]	; (800bcf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bcea:	5ccb      	ldrb	r3, [r1, r3]
 800bcec:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	bd80      	pop	{r7, pc}
 800bcf4:	40023800 	.word	0x40023800
 800bcf8:	08021624 	.word	0x08021624

0800bcfc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b083      	sub	sp, #12
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	220f      	movs	r2, #15
 800bd0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800bd0c:	4b12      	ldr	r3, [pc, #72]	; (800bd58 <HAL_RCC_GetClockConfig+0x5c>)
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	f003 0203 	and.w	r2, r3, #3
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800bd18:	4b0f      	ldr	r3, [pc, #60]	; (800bd58 <HAL_RCC_GetClockConfig+0x5c>)
 800bd1a:	689b      	ldr	r3, [r3, #8]
 800bd1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800bd24:	4b0c      	ldr	r3, [pc, #48]	; (800bd58 <HAL_RCC_GetClockConfig+0x5c>)
 800bd26:	689b      	ldr	r3, [r3, #8]
 800bd28:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800bd30:	4b09      	ldr	r3, [pc, #36]	; (800bd58 <HAL_RCC_GetClockConfig+0x5c>)
 800bd32:	689b      	ldr	r3, [r3, #8]
 800bd34:	08db      	lsrs	r3, r3, #3
 800bd36:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800bd3e:	4b07      	ldr	r3, [pc, #28]	; (800bd5c <HAL_RCC_GetClockConfig+0x60>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f003 020f 	and.w	r2, r3, #15
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	601a      	str	r2, [r3, #0]
}
 800bd4a:	bf00      	nop
 800bd4c:	370c      	adds	r7, #12
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr
 800bd56:	bf00      	nop
 800bd58:	40023800 	.word	0x40023800
 800bd5c:	40023c00 	.word	0x40023c00

0800bd60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b086      	sub	sp, #24
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f003 0301 	and.w	r3, r3, #1
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d10b      	bne.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d105      	bne.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d075      	beq.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800bd94:	4bad      	ldr	r3, [pc, #692]	; (800c04c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800bd96:	2200      	movs	r2, #0
 800bd98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bd9a:	f7fc fb0d 	bl	80083b8 <HAL_GetTick>
 800bd9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bda0:	e008      	b.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800bda2:	f7fc fb09 	bl	80083b8 <HAL_GetTick>
 800bda6:	4602      	mov	r2, r0
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	1ad3      	subs	r3, r2, r3
 800bdac:	2b02      	cmp	r3, #2
 800bdae:	d901      	bls.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bdb0:	2303      	movs	r3, #3
 800bdb2:	e18b      	b.n	800c0cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bdb4:	4ba6      	ldr	r3, [pc, #664]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d1f0      	bne.n	800bda2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f003 0301 	and.w	r3, r3, #1
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d009      	beq.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	685b      	ldr	r3, [r3, #4]
 800bdd0:	019a      	lsls	r2, r3, #6
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	689b      	ldr	r3, [r3, #8]
 800bdd6:	071b      	lsls	r3, r3, #28
 800bdd8:	499d      	ldr	r1, [pc, #628]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bdda:	4313      	orrs	r3, r2
 800bddc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f003 0302 	and.w	r3, r3, #2
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d01f      	beq.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bdec:	4b98      	ldr	r3, [pc, #608]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bdee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdf2:	0f1b      	lsrs	r3, r3, #28
 800bdf4:	f003 0307 	and.w	r3, r3, #7
 800bdf8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	019a      	lsls	r2, r3, #6
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	68db      	ldr	r3, [r3, #12]
 800be04:	061b      	lsls	r3, r3, #24
 800be06:	431a      	orrs	r2, r3
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	071b      	lsls	r3, r3, #28
 800be0c:	4990      	ldr	r1, [pc, #576]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800be0e:	4313      	orrs	r3, r2
 800be10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800be14:	4b8e      	ldr	r3, [pc, #568]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800be16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be1a:	f023 021f 	bic.w	r2, r3, #31
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	69db      	ldr	r3, [r3, #28]
 800be22:	3b01      	subs	r3, #1
 800be24:	498a      	ldr	r1, [pc, #552]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800be26:	4313      	orrs	r3, r2
 800be28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be34:	2b00      	cmp	r3, #0
 800be36:	d00d      	beq.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	019a      	lsls	r2, r3, #6
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	68db      	ldr	r3, [r3, #12]
 800be42:	061b      	lsls	r3, r3, #24
 800be44:	431a      	orrs	r2, r3
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	689b      	ldr	r3, [r3, #8]
 800be4a:	071b      	lsls	r3, r3, #28
 800be4c:	4980      	ldr	r1, [pc, #512]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800be4e:	4313      	orrs	r3, r2
 800be50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800be54:	4b7d      	ldr	r3, [pc, #500]	; (800c04c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800be56:	2201      	movs	r2, #1
 800be58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800be5a:	f7fc faad 	bl	80083b8 <HAL_GetTick>
 800be5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800be60:	e008      	b.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800be62:	f7fc faa9 	bl	80083b8 <HAL_GetTick>
 800be66:	4602      	mov	r2, r0
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	1ad3      	subs	r3, r2, r3
 800be6c:	2b02      	cmp	r3, #2
 800be6e:	d901      	bls.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800be70:	2303      	movs	r3, #3
 800be72:	e12b      	b.n	800c0cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800be74:	4b76      	ldr	r3, [pc, #472]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d0f0      	beq.n	800be62 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f003 0304 	and.w	r3, r3, #4
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d105      	bne.n	800be98 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800be94:	2b00      	cmp	r3, #0
 800be96:	d079      	beq.n	800bf8c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800be98:	4b6e      	ldr	r3, [pc, #440]	; (800c054 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800be9a:	2200      	movs	r2, #0
 800be9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800be9e:	f7fc fa8b 	bl	80083b8 <HAL_GetTick>
 800bea2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bea4:	e008      	b.n	800beb8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800bea6:	f7fc fa87 	bl	80083b8 <HAL_GetTick>
 800beaa:	4602      	mov	r2, r0
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	1ad3      	subs	r3, r2, r3
 800beb0:	2b02      	cmp	r3, #2
 800beb2:	d901      	bls.n	800beb8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800beb4:	2303      	movs	r3, #3
 800beb6:	e109      	b.n	800c0cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800beb8:	4b65      	ldr	r3, [pc, #404]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bec0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bec4:	d0ef      	beq.n	800bea6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f003 0304 	and.w	r3, r3, #4
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d020      	beq.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bed2:	4b5f      	ldr	r3, [pc, #380]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bed8:	0f1b      	lsrs	r3, r3, #28
 800beda:	f003 0307 	and.w	r3, r3, #7
 800bede:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	691b      	ldr	r3, [r3, #16]
 800bee4:	019a      	lsls	r2, r3, #6
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	695b      	ldr	r3, [r3, #20]
 800beea:	061b      	lsls	r3, r3, #24
 800beec:	431a      	orrs	r2, r3
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	071b      	lsls	r3, r3, #28
 800bef2:	4957      	ldr	r1, [pc, #348]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bef4:	4313      	orrs	r3, r2
 800bef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800befa:	4b55      	ldr	r3, [pc, #340]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800befc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf00:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6a1b      	ldr	r3, [r3, #32]
 800bf08:	3b01      	subs	r3, #1
 800bf0a:	021b      	lsls	r3, r3, #8
 800bf0c:	4950      	ldr	r1, [pc, #320]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f003 0308 	and.w	r3, r3, #8
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d01e      	beq.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bf20:	4b4b      	ldr	r3, [pc, #300]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bf22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf26:	0e1b      	lsrs	r3, r3, #24
 800bf28:	f003 030f 	and.w	r3, r3, #15
 800bf2c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	691b      	ldr	r3, [r3, #16]
 800bf32:	019a      	lsls	r2, r3, #6
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	061b      	lsls	r3, r3, #24
 800bf38:	431a      	orrs	r2, r3
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	699b      	ldr	r3, [r3, #24]
 800bf3e:	071b      	lsls	r3, r3, #28
 800bf40:	4943      	ldr	r1, [pc, #268]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bf42:	4313      	orrs	r3, r2
 800bf44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800bf48:	4b41      	ldr	r3, [pc, #260]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bf4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf56:	493e      	ldr	r1, [pc, #248]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800bf5e:	4b3d      	ldr	r3, [pc, #244]	; (800c054 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bf60:	2201      	movs	r2, #1
 800bf62:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bf64:	f7fc fa28 	bl	80083b8 <HAL_GetTick>
 800bf68:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bf6a:	e008      	b.n	800bf7e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800bf6c:	f7fc fa24 	bl	80083b8 <HAL_GetTick>
 800bf70:	4602      	mov	r2, r0
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	1ad3      	subs	r3, r2, r3
 800bf76:	2b02      	cmp	r3, #2
 800bf78:	d901      	bls.n	800bf7e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bf7a:	2303      	movs	r3, #3
 800bf7c:	e0a6      	b.n	800c0cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bf7e:	4b34      	ldr	r3, [pc, #208]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf8a:	d1ef      	bne.n	800bf6c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f003 0320 	and.w	r3, r3, #32
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	f000 808d 	beq.w	800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	60fb      	str	r3, [r7, #12]
 800bf9e:	4b2c      	ldr	r3, [pc, #176]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bfa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfa2:	4a2b      	ldr	r2, [pc, #172]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bfa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bfa8:	6413      	str	r3, [r2, #64]	; 0x40
 800bfaa:	4b29      	ldr	r3, [pc, #164]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bfac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bfb2:	60fb      	str	r3, [r7, #12]
 800bfb4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800bfb6:	4b28      	ldr	r3, [pc, #160]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	4a27      	ldr	r2, [pc, #156]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800bfbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bfc0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bfc2:	f7fc f9f9 	bl	80083b8 <HAL_GetTick>
 800bfc6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800bfc8:	e008      	b.n	800bfdc <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800bfca:	f7fc f9f5 	bl	80083b8 <HAL_GetTick>
 800bfce:	4602      	mov	r2, r0
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	1ad3      	subs	r3, r2, r3
 800bfd4:	2b02      	cmp	r3, #2
 800bfd6:	d901      	bls.n	800bfdc <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800bfd8:	2303      	movs	r3, #3
 800bfda:	e077      	b.n	800c0cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800bfdc:	4b1e      	ldr	r3, [pc, #120]	; (800c058 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d0f0      	beq.n	800bfca <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800bfe8:	4b19      	ldr	r3, [pc, #100]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bfea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bff0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d039      	beq.n	800c06c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c000:	693a      	ldr	r2, [r7, #16]
 800c002:	429a      	cmp	r2, r3
 800c004:	d032      	beq.n	800c06c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c006:	4b12      	ldr	r3, [pc, #72]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c00a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c00e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c010:	4b12      	ldr	r3, [pc, #72]	; (800c05c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800c012:	2201      	movs	r2, #1
 800c014:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c016:	4b11      	ldr	r3, [pc, #68]	; (800c05c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800c018:	2200      	movs	r2, #0
 800c01a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c01c:	4a0c      	ldr	r2, [pc, #48]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c022:	4b0b      	ldr	r3, [pc, #44]	; (800c050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c026:	f003 0301 	and.w	r3, r3, #1
 800c02a:	2b01      	cmp	r3, #1
 800c02c:	d11e      	bne.n	800c06c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c02e:	f7fc f9c3 	bl	80083b8 <HAL_GetTick>
 800c032:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c034:	e014      	b.n	800c060 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c036:	f7fc f9bf 	bl	80083b8 <HAL_GetTick>
 800c03a:	4602      	mov	r2, r0
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	1ad3      	subs	r3, r2, r3
 800c040:	f241 3288 	movw	r2, #5000	; 0x1388
 800c044:	4293      	cmp	r3, r2
 800c046:	d90b      	bls.n	800c060 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800c048:	2303      	movs	r3, #3
 800c04a:	e03f      	b.n	800c0cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800c04c:	42470068 	.word	0x42470068
 800c050:	40023800 	.word	0x40023800
 800c054:	42470070 	.word	0x42470070
 800c058:	40007000 	.word	0x40007000
 800c05c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c060:	4b1c      	ldr	r3, [pc, #112]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c064:	f003 0302 	and.w	r3, r3, #2
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d0e4      	beq.n	800c036 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c070:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c074:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c078:	d10d      	bne.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800c07a:	4b16      	ldr	r3, [pc, #88]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c07c:	689b      	ldr	r3, [r3, #8]
 800c07e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c086:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c08a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c08e:	4911      	ldr	r1, [pc, #68]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c090:	4313      	orrs	r3, r2
 800c092:	608b      	str	r3, [r1, #8]
 800c094:	e005      	b.n	800c0a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800c096:	4b0f      	ldr	r3, [pc, #60]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c098:	689b      	ldr	r3, [r3, #8]
 800c09a:	4a0e      	ldr	r2, [pc, #56]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c09c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c0a0:	6093      	str	r3, [r2, #8]
 800c0a2:	4b0c      	ldr	r3, [pc, #48]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c0a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c0ae:	4909      	ldr	r1, [pc, #36]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f003 0310 	and.w	r3, r3, #16
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d004      	beq.n	800c0ca <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800c0c6:	4b04      	ldr	r3, [pc, #16]	; (800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800c0c8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800c0ca:	2300      	movs	r3, #0
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3718      	adds	r7, #24
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}
 800c0d4:	40023800 	.word	0x40023800
 800c0d8:	424711e0 	.word	0x424711e0

0800c0dc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d101      	bne.n	800c0ee <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	e083      	b.n	800c1f6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	7f5b      	ldrb	r3, [r3, #29]
 800c0f2:	b2db      	uxtb	r3, r3
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d105      	bne.n	800c104 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f7f6 fd92 	bl	8002c28 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2202      	movs	r2, #2
 800c108:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	22ca      	movs	r2, #202	; 0xca
 800c110:	625a      	str	r2, [r3, #36]	; 0x24
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	2253      	movs	r2, #83	; 0x53
 800c118:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f000 fc26 	bl	800c96c <RTC_EnterInitMode>
 800c120:	4603      	mov	r3, r0
 800c122:	2b00      	cmp	r3, #0
 800c124:	d008      	beq.n	800c138 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	22ff      	movs	r2, #255	; 0xff
 800c12c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2204      	movs	r2, #4
 800c132:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800c134:	2301      	movs	r3, #1
 800c136:	e05e      	b.n	800c1f6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	689b      	ldr	r3, [r3, #8]
 800c13e:	687a      	ldr	r2, [r7, #4]
 800c140:	6812      	ldr	r2, [r2, #0]
 800c142:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c146:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c14a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	6899      	ldr	r1, [r3, #8]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	685a      	ldr	r2, [r3, #4]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	691b      	ldr	r3, [r3, #16]
 800c15a:	431a      	orrs	r2, r3
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	695b      	ldr	r3, [r3, #20]
 800c160:	431a      	orrs	r2, r3
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	430a      	orrs	r2, r1
 800c168:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	68d2      	ldr	r2, [r2, #12]
 800c172:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	6919      	ldr	r1, [r3, #16]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	689b      	ldr	r3, [r3, #8]
 800c17e:	041a      	lsls	r2, r3, #16
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	430a      	orrs	r2, r1
 800c186:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	68da      	ldr	r2, [r3, #12]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c196:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	689b      	ldr	r3, [r3, #8]
 800c19e:	f003 0320 	and.w	r3, r3, #32
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d10e      	bne.n	800c1c4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f000 fbb8 	bl	800c91c <HAL_RTC_WaitForSynchro>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d008      	beq.n	800c1c4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	22ff      	movs	r2, #255	; 0xff
 800c1b8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2204      	movs	r2, #4
 800c1be:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	e018      	b.n	800c1f6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c1d2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	699a      	ldr	r2, [r3, #24]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	430a      	orrs	r2, r1
 800c1e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	22ff      	movs	r2, #255	; 0xff
 800c1ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800c1f4:	2300      	movs	r3, #0
  }
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3708      	adds	r7, #8
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}

0800c1fe <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c1fe:	b590      	push	{r4, r7, lr}
 800c200:	b087      	sub	sp, #28
 800c202:	af00      	add	r7, sp, #0
 800c204:	60f8      	str	r0, [r7, #12]
 800c206:	60b9      	str	r1, [r7, #8]
 800c208:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c20a:	2300      	movs	r3, #0
 800c20c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	7f1b      	ldrb	r3, [r3, #28]
 800c212:	2b01      	cmp	r3, #1
 800c214:	d101      	bne.n	800c21a <HAL_RTC_SetTime+0x1c>
 800c216:	2302      	movs	r3, #2
 800c218:	e0aa      	b.n	800c370 <HAL_RTC_SetTime+0x172>
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	2201      	movs	r2, #1
 800c21e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	2202      	movs	r2, #2
 800c224:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d126      	bne.n	800c27a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	689b      	ldr	r3, [r3, #8]
 800c232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c236:	2b00      	cmp	r3, #0
 800c238:	d102      	bne.n	800c240 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	2200      	movs	r2, #0
 800c23e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	4618      	mov	r0, r3
 800c246:	f000 fbbd 	bl	800c9c4 <RTC_ByteToBcd2>
 800c24a:	4603      	mov	r3, r0
 800c24c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	785b      	ldrb	r3, [r3, #1]
 800c252:	4618      	mov	r0, r3
 800c254:	f000 fbb6 	bl	800c9c4 <RTC_ByteToBcd2>
 800c258:	4603      	mov	r3, r0
 800c25a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c25c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	789b      	ldrb	r3, [r3, #2]
 800c262:	4618      	mov	r0, r3
 800c264:	f000 fbae 	bl	800c9c4 <RTC_ByteToBcd2>
 800c268:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c26a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	78db      	ldrb	r3, [r3, #3]
 800c272:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c274:	4313      	orrs	r3, r2
 800c276:	617b      	str	r3, [r7, #20]
 800c278:	e018      	b.n	800c2ac <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	689b      	ldr	r3, [r3, #8]
 800c280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c284:	2b00      	cmp	r3, #0
 800c286:	d102      	bne.n	800c28e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	2200      	movs	r2, #0
 800c28c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	785b      	ldrb	r3, [r3, #1]
 800c298:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c29a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800c29c:	68ba      	ldr	r2, [r7, #8]
 800c29e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c2a0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	78db      	ldrb	r3, [r3, #3]
 800c2a6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c2a8:	4313      	orrs	r3, r2
 800c2aa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	22ca      	movs	r2, #202	; 0xca
 800c2b2:	625a      	str	r2, [r3, #36]	; 0x24
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	2253      	movs	r2, #83	; 0x53
 800c2ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c2bc:	68f8      	ldr	r0, [r7, #12]
 800c2be:	f000 fb55 	bl	800c96c <RTC_EnterInitMode>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d00b      	beq.n	800c2e0 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	22ff      	movs	r2, #255	; 0xff
 800c2ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	2204      	movs	r2, #4
 800c2d4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800c2dc:	2301      	movs	r3, #1
 800c2de:	e047      	b.n	800c370 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681a      	ldr	r2, [r3, #0]
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c2ea:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c2ee:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	689a      	ldr	r2, [r3, #8]
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c2fe:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	6899      	ldr	r1, [r3, #8]
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	68da      	ldr	r2, [r3, #12]
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	691b      	ldr	r3, [r3, #16]
 800c30e:	431a      	orrs	r2, r3
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	430a      	orrs	r2, r1
 800c316:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	68da      	ldr	r2, [r3, #12]
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c326:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	689b      	ldr	r3, [r3, #8]
 800c32e:	f003 0320 	and.w	r3, r3, #32
 800c332:	2b00      	cmp	r3, #0
 800c334:	d111      	bne.n	800c35a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c336:	68f8      	ldr	r0, [r7, #12]
 800c338:	f000 faf0 	bl	800c91c <HAL_RTC_WaitForSynchro>
 800c33c:	4603      	mov	r3, r0
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d00b      	beq.n	800c35a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	22ff      	movs	r2, #255	; 0xff
 800c348:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	2204      	movs	r2, #4
 800c34e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	2200      	movs	r2, #0
 800c354:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c356:	2301      	movs	r3, #1
 800c358:	e00a      	b.n	800c370 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	22ff      	movs	r2, #255	; 0xff
 800c360:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2201      	movs	r2, #1
 800c366:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2200      	movs	r2, #0
 800c36c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800c36e:	2300      	movs	r3, #0
  }
}
 800c370:	4618      	mov	r0, r3
 800c372:	371c      	adds	r7, #28
 800c374:	46bd      	mov	sp, r7
 800c376:	bd90      	pop	{r4, r7, pc}

0800c378 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b086      	sub	sp, #24
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	60f8      	str	r0, [r7, #12]
 800c380:	60b9      	str	r1, [r7, #8]
 800c382:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c384:	2300      	movs	r3, #0
 800c386:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	691b      	ldr	r3, [r3, #16]
 800c398:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c3aa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c3ae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	0c1b      	lsrs	r3, r3, #16
 800c3b4:	b2db      	uxtb	r3, r3
 800c3b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c3ba:	b2da      	uxtb	r2, r3
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	0a1b      	lsrs	r3, r3, #8
 800c3c4:	b2db      	uxtb	r3, r3
 800c3c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3ca:	b2da      	uxtb	r2, r3
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800c3d0:	697b      	ldr	r3, [r7, #20]
 800c3d2:	b2db      	uxtb	r3, r3
 800c3d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3d8:	b2da      	uxtb	r2, r3
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	0c1b      	lsrs	r3, r3, #16
 800c3e2:	b2db      	uxtb	r3, r3
 800c3e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3e8:	b2da      	uxtb	r2, r3
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d11a      	bne.n	800c42a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f000 fb01 	bl	800ca00 <RTC_Bcd2ToByte>
 800c3fe:	4603      	mov	r3, r0
 800c400:	461a      	mov	r2, r3
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	785b      	ldrb	r3, [r3, #1]
 800c40a:	4618      	mov	r0, r3
 800c40c:	f000 faf8 	bl	800ca00 <RTC_Bcd2ToByte>
 800c410:	4603      	mov	r3, r0
 800c412:	461a      	mov	r2, r3
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	789b      	ldrb	r3, [r3, #2]
 800c41c:	4618      	mov	r0, r3
 800c41e:	f000 faef 	bl	800ca00 <RTC_Bcd2ToByte>
 800c422:	4603      	mov	r3, r0
 800c424:	461a      	mov	r2, r3
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c42a:	2300      	movs	r3, #0
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3718      	adds	r7, #24
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}

0800c434 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c434:	b590      	push	{r4, r7, lr}
 800c436:	b087      	sub	sp, #28
 800c438:	af00      	add	r7, sp, #0
 800c43a:	60f8      	str	r0, [r7, #12]
 800c43c:	60b9      	str	r1, [r7, #8]
 800c43e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c440:	2300      	movs	r3, #0
 800c442:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	7f1b      	ldrb	r3, [r3, #28]
 800c448:	2b01      	cmp	r3, #1
 800c44a:	d101      	bne.n	800c450 <HAL_RTC_SetDate+0x1c>
 800c44c:	2302      	movs	r3, #2
 800c44e:	e094      	b.n	800c57a <HAL_RTC_SetDate+0x146>
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2201      	movs	r2, #1
 800c454:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2202      	movs	r2, #2
 800c45a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d10e      	bne.n	800c480 <HAL_RTC_SetDate+0x4c>
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	785b      	ldrb	r3, [r3, #1]
 800c466:	f003 0310 	and.w	r3, r3, #16
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d008      	beq.n	800c480 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	785b      	ldrb	r3, [r3, #1]
 800c472:	f023 0310 	bic.w	r3, r3, #16
 800c476:	b2db      	uxtb	r3, r3
 800c478:	330a      	adds	r3, #10
 800c47a:	b2da      	uxtb	r2, r3
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d11c      	bne.n	800c4c0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	78db      	ldrb	r3, [r3, #3]
 800c48a:	4618      	mov	r0, r3
 800c48c:	f000 fa9a 	bl	800c9c4 <RTC_ByteToBcd2>
 800c490:	4603      	mov	r3, r0
 800c492:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	785b      	ldrb	r3, [r3, #1]
 800c498:	4618      	mov	r0, r3
 800c49a:	f000 fa93 	bl	800c9c4 <RTC_ByteToBcd2>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c4a2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	789b      	ldrb	r3, [r3, #2]
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f000 fa8b 	bl	800c9c4 <RTC_ByteToBcd2>
 800c4ae:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c4b0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	781b      	ldrb	r3, [r3, #0]
 800c4b8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	617b      	str	r3, [r7, #20]
 800c4be:	e00e      	b.n	800c4de <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	78db      	ldrb	r3, [r3, #3]
 800c4c4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	785b      	ldrb	r3, [r3, #1]
 800c4ca:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c4cc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800c4ce:	68ba      	ldr	r2, [r7, #8]
 800c4d0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800c4d2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c4da:	4313      	orrs	r3, r2
 800c4dc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	22ca      	movs	r2, #202	; 0xca
 800c4e4:	625a      	str	r2, [r3, #36]	; 0x24
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	2253      	movs	r2, #83	; 0x53
 800c4ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c4ee:	68f8      	ldr	r0, [r7, #12]
 800c4f0:	f000 fa3c 	bl	800c96c <RTC_EnterInitMode>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d00b      	beq.n	800c512 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	22ff      	movs	r2, #255	; 0xff
 800c500:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	2204      	movs	r2, #4
 800c506:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	2200      	movs	r2, #0
 800c50c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800c50e:	2301      	movs	r3, #1
 800c510:	e033      	b.n	800c57a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681a      	ldr	r2, [r3, #0]
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c51c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c520:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	68da      	ldr	r2, [r3, #12]
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c530:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	689b      	ldr	r3, [r3, #8]
 800c538:	f003 0320 	and.w	r3, r3, #32
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d111      	bne.n	800c564 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c540:	68f8      	ldr	r0, [r7, #12]
 800c542:	f000 f9eb 	bl	800c91c <HAL_RTC_WaitForSynchro>
 800c546:	4603      	mov	r3, r0
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d00b      	beq.n	800c564 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	22ff      	movs	r2, #255	; 0xff
 800c552:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	2204      	movs	r2, #4
 800c558:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	2200      	movs	r2, #0
 800c55e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c560:	2301      	movs	r3, #1
 800c562:	e00a      	b.n	800c57a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	22ff      	movs	r2, #255	; 0xff
 800c56a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	2201      	movs	r2, #1
 800c570:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	2200      	movs	r2, #0
 800c576:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800c578:	2300      	movs	r3, #0
  }
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	371c      	adds	r7, #28
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd90      	pop	{r4, r7, pc}

0800c582 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c582:	b580      	push	{r7, lr}
 800c584:	b086      	sub	sp, #24
 800c586:	af00      	add	r7, sp, #0
 800c588:	60f8      	str	r0, [r7, #12]
 800c58a:	60b9      	str	r1, [r7, #8]
 800c58c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c58e:	2300      	movs	r3, #0
 800c590:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	685b      	ldr	r3, [r3, #4]
 800c598:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c59c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c5a0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	0c1b      	lsrs	r3, r3, #16
 800c5a6:	b2da      	uxtb	r2, r3
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	0a1b      	lsrs	r3, r3, #8
 800c5b0:	b2db      	uxtb	r3, r3
 800c5b2:	f003 031f 	and.w	r3, r3, #31
 800c5b6:	b2da      	uxtb	r2, r3
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	b2db      	uxtb	r3, r3
 800c5c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c5c4:	b2da      	uxtb	r2, r3
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	0b5b      	lsrs	r3, r3, #13
 800c5ce:	b2db      	uxtb	r3, r3
 800c5d0:	f003 0307 	and.w	r3, r3, #7
 800c5d4:	b2da      	uxtb	r2, r3
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d11a      	bne.n	800c616 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	78db      	ldrb	r3, [r3, #3]
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f000 fa0b 	bl	800ca00 <RTC_Bcd2ToByte>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	785b      	ldrb	r3, [r3, #1]
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f000 fa02 	bl	800ca00 <RTC_Bcd2ToByte>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	461a      	mov	r2, r3
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	789b      	ldrb	r3, [r3, #2]
 800c608:	4618      	mov	r0, r3
 800c60a:	f000 f9f9 	bl	800ca00 <RTC_Bcd2ToByte>
 800c60e:	4603      	mov	r3, r0
 800c610:	461a      	mov	r2, r3
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c616:	2300      	movs	r3, #0
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3718      	adds	r7, #24
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}

0800c620 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800c620:	b590      	push	{r4, r7, lr}
 800c622:	b089      	sub	sp, #36	; 0x24
 800c624:	af00      	add	r7, sp, #0
 800c626:	60f8      	str	r0, [r7, #12]
 800c628:	60b9      	str	r1, [r7, #8]
 800c62a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800c62c:	2300      	movs	r3, #0
 800c62e:	61fb      	str	r3, [r7, #28]
 800c630:	2300      	movs	r3, #0
 800c632:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800c634:	4b93      	ldr	r3, [pc, #588]	; (800c884 <HAL_RTC_SetAlarm_IT+0x264>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	4a93      	ldr	r2, [pc, #588]	; (800c888 <HAL_RTC_SetAlarm_IT+0x268>)
 800c63a:	fba2 2303 	umull	r2, r3, r2, r3
 800c63e:	0adb      	lsrs	r3, r3, #11
 800c640:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c644:	fb02 f303 	mul.w	r3, r2, r3
 800c648:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	7f1b      	ldrb	r3, [r3, #28]
 800c64e:	2b01      	cmp	r3, #1
 800c650:	d101      	bne.n	800c656 <HAL_RTC_SetAlarm_IT+0x36>
 800c652:	2302      	movs	r3, #2
 800c654:	e111      	b.n	800c87a <HAL_RTC_SetAlarm_IT+0x25a>
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	2201      	movs	r2, #1
 800c65a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2202      	movs	r2, #2
 800c660:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d137      	bne.n	800c6d8 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	689b      	ldr	r3, [r3, #8]
 800c66e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c672:	2b00      	cmp	r3, #0
 800c674:	d102      	bne.n	800c67c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	2200      	movs	r2, #0
 800c67a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	4618      	mov	r0, r3
 800c682:	f000 f99f 	bl	800c9c4 <RTC_ByteToBcd2>
 800c686:	4603      	mov	r3, r0
 800c688:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	785b      	ldrb	r3, [r3, #1]
 800c68e:	4618      	mov	r0, r3
 800c690:	f000 f998 	bl	800c9c4 <RTC_ByteToBcd2>
 800c694:	4603      	mov	r3, r0
 800c696:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800c698:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	789b      	ldrb	r3, [r3, #2]
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f000 f990 	bl	800c9c4 <RTC_ByteToBcd2>
 800c6a4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c6a6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	78db      	ldrb	r3, [r3, #3]
 800c6ae:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800c6b0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f000 f982 	bl	800c9c4 <RTC_ByteToBcd2>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c6c4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c6cc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800c6d2:	4313      	orrs	r3, r2
 800c6d4:	61fb      	str	r3, [r7, #28]
 800c6d6:	e023      	b.n	800c720 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	689b      	ldr	r3, [r3, #8]
 800c6de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d102      	bne.n	800c6ec <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	785b      	ldrb	r3, [r3, #1]
 800c6f6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800c6f8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800c6fa:	68ba      	ldr	r2, [r7, #8]
 800c6fc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c6fe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	78db      	ldrb	r3, [r3, #3]
 800c704:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800c706:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c70e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c710:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c716:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800c71c:	4313      	orrs	r3, r2
 800c71e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	685a      	ldr	r2, [r3, #4]
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	699b      	ldr	r3, [r3, #24]
 800c728:	4313      	orrs	r3, r2
 800c72a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	22ca      	movs	r2, #202	; 0xca
 800c732:	625a      	str	r2, [r3, #36]	; 0x24
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	2253      	movs	r2, #83	; 0x53
 800c73a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c744:	d141      	bne.n	800c7ca <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	689a      	ldr	r2, [r3, #8]
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c754:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	68db      	ldr	r3, [r3, #12]
 800c75c:	b2da      	uxtb	r2, r3
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800c766:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	1e5a      	subs	r2, r3, #1
 800c76c:	617a      	str	r2, [r7, #20]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d10b      	bne.n	800c78a <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	22ff      	movs	r2, #255	; 0xff
 800c778:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	2203      	movs	r2, #3
 800c77e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	2200      	movs	r2, #0
 800c784:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c786:	2303      	movs	r3, #3
 800c788:	e077      	b.n	800c87a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	68db      	ldr	r3, [r3, #12]
 800c790:	f003 0301 	and.w	r3, r3, #1
 800c794:	2b00      	cmp	r3, #0
 800c796:	d0e7      	beq.n	800c768 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	69fa      	ldr	r2, [r7, #28]
 800c79e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	69ba      	ldr	r2, [r7, #24]
 800c7a6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	689a      	ldr	r2, [r3, #8]
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c7b6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	689a      	ldr	r2, [r3, #8]
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c7c6:	609a      	str	r2, [r3, #8]
 800c7c8:	e040      	b.n	800c84c <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	689a      	ldr	r2, [r3, #8]
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c7d8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	68db      	ldr	r3, [r3, #12]
 800c7e0:	b2da      	uxtb	r2, r3
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f462 7220 	orn	r2, r2, #640	; 0x280
 800c7ea:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	1e5a      	subs	r2, r3, #1
 800c7f0:	617a      	str	r2, [r7, #20]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d10b      	bne.n	800c80e <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	22ff      	movs	r2, #255	; 0xff
 800c7fc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	2203      	movs	r2, #3
 800c802:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	2200      	movs	r2, #0
 800c808:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c80a:	2303      	movs	r3, #3
 800c80c:	e035      	b.n	800c87a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	68db      	ldr	r3, [r3, #12]
 800c814:	f003 0302 	and.w	r3, r3, #2
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d0e7      	beq.n	800c7ec <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	69fa      	ldr	r2, [r7, #28]
 800c822:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	69ba      	ldr	r2, [r7, #24]
 800c82a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	689a      	ldr	r2, [r3, #8]
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c83a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	689a      	ldr	r2, [r3, #8]
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c84a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800c84c:	4b0f      	ldr	r3, [pc, #60]	; (800c88c <HAL_RTC_SetAlarm_IT+0x26c>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4a0e      	ldr	r2, [pc, #56]	; (800c88c <HAL_RTC_SetAlarm_IT+0x26c>)
 800c852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c856:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800c858:	4b0c      	ldr	r3, [pc, #48]	; (800c88c <HAL_RTC_SetAlarm_IT+0x26c>)
 800c85a:	689b      	ldr	r3, [r3, #8]
 800c85c:	4a0b      	ldr	r2, [pc, #44]	; (800c88c <HAL_RTC_SetAlarm_IT+0x26c>)
 800c85e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c862:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	22ff      	movs	r2, #255	; 0xff
 800c86a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	2201      	movs	r2, #1
 800c870:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2200      	movs	r2, #0
 800c876:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c878:	2300      	movs	r3, #0
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3724      	adds	r7, #36	; 0x24
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd90      	pop	{r4, r7, pc}
 800c882:	bf00      	nop
 800c884:	20000000 	.word	0x20000000
 800c888:	10624dd3 	.word	0x10624dd3
 800c88c:	40013c00 	.word	0x40013c00

0800c890 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b082      	sub	sp, #8
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	689b      	ldr	r3, [r3, #8]
 800c89e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d012      	beq.n	800c8cc <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	68db      	ldr	r3, [r3, #12]
 800c8ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d00b      	beq.n	800c8cc <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f7fb f88d 	bl	80079d4 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	68db      	ldr	r3, [r3, #12]
 800c8c0:	b2da      	uxtb	r2, r3
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800c8ca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	689b      	ldr	r3, [r3, #8]
 800c8d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d012      	beq.n	800c900 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	68db      	ldr	r3, [r3, #12]
 800c8e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d00b      	beq.n	800c900 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f000 f9bf 	bl	800cc6c <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	68db      	ldr	r3, [r3, #12]
 800c8f4:	b2da      	uxtb	r2, r3
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f462 7220 	orn	r2, r2, #640	; 0x280
 800c8fe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800c900:	4b05      	ldr	r3, [pc, #20]	; (800c918 <HAL_RTC_AlarmIRQHandler+0x88>)
 800c902:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c906:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2201      	movs	r2, #1
 800c90c:	775a      	strb	r2, [r3, #29]
}
 800c90e:	bf00      	nop
 800c910:	3708      	adds	r7, #8
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
 800c916:	bf00      	nop
 800c918:	40013c00 	.word	0x40013c00

0800c91c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b084      	sub	sp, #16
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c924:	2300      	movs	r3, #0
 800c926:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	68da      	ldr	r2, [r3, #12]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c936:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c938:	f7fb fd3e 	bl	80083b8 <HAL_GetTick>
 800c93c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c93e:	e009      	b.n	800c954 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c940:	f7fb fd3a 	bl	80083b8 <HAL_GetTick>
 800c944:	4602      	mov	r2, r0
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	1ad3      	subs	r3, r2, r3
 800c94a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c94e:	d901      	bls.n	800c954 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800c950:	2303      	movs	r3, #3
 800c952:	e007      	b.n	800c964 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	68db      	ldr	r3, [r3, #12]
 800c95a:	f003 0320 	and.w	r3, r3, #32
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d0ee      	beq.n	800c940 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800c962:	2300      	movs	r3, #0
}
 800c964:	4618      	mov	r0, r3
 800c966:	3710      	adds	r7, #16
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b084      	sub	sp, #16
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c974:	2300      	movs	r3, #0
 800c976:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	68db      	ldr	r3, [r3, #12]
 800c97e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c982:	2b00      	cmp	r3, #0
 800c984:	d119      	bne.n	800c9ba <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f04f 32ff 	mov.w	r2, #4294967295
 800c98e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c990:	f7fb fd12 	bl	80083b8 <HAL_GetTick>
 800c994:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c996:	e009      	b.n	800c9ac <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c998:	f7fb fd0e 	bl	80083b8 <HAL_GetTick>
 800c99c:	4602      	mov	r2, r0
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	1ad3      	subs	r3, r2, r3
 800c9a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c9a6:	d901      	bls.n	800c9ac <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800c9a8:	2303      	movs	r3, #3
 800c9aa:	e007      	b.n	800c9bc <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	68db      	ldr	r3, [r3, #12]
 800c9b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d0ee      	beq.n	800c998 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800c9ba:	2300      	movs	r3, #0
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	3710      	adds	r7, #16
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}

0800c9c4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b085      	sub	sp, #20
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800c9d2:	e005      	b.n	800c9e0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800c9da:	79fb      	ldrb	r3, [r7, #7]
 800c9dc:	3b0a      	subs	r3, #10
 800c9de:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800c9e0:	79fb      	ldrb	r3, [r7, #7]
 800c9e2:	2b09      	cmp	r3, #9
 800c9e4:	d8f6      	bhi.n	800c9d4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	b2db      	uxtb	r3, r3
 800c9ea:	011b      	lsls	r3, r3, #4
 800c9ec:	b2da      	uxtb	r2, r3
 800c9ee:	79fb      	ldrb	r3, [r7, #7]
 800c9f0:	4313      	orrs	r3, r2
 800c9f2:	b2db      	uxtb	r3, r3
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3714      	adds	r7, #20
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr

0800ca00 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800ca00:	b480      	push	{r7}
 800ca02:	b085      	sub	sp, #20
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	4603      	mov	r3, r0
 800ca08:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800ca0e:	79fb      	ldrb	r3, [r7, #7]
 800ca10:	091b      	lsrs	r3, r3, #4
 800ca12:	b2db      	uxtb	r3, r3
 800ca14:	461a      	mov	r2, r3
 800ca16:	4613      	mov	r3, r2
 800ca18:	009b      	lsls	r3, r3, #2
 800ca1a:	4413      	add	r3, r2
 800ca1c:	005b      	lsls	r3, r3, #1
 800ca1e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800ca20:	79fb      	ldrb	r3, [r7, #7]
 800ca22:	f003 030f 	and.w	r3, r3, #15
 800ca26:	b2da      	uxtb	r2, r3
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	b2db      	uxtb	r3, r3
 800ca2c:	4413      	add	r3, r2
 800ca2e:	b2db      	uxtb	r3, r3
}
 800ca30:	4618      	mov	r0, r3
 800ca32:	3714      	adds	r7, #20
 800ca34:	46bd      	mov	sp, r7
 800ca36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3a:	4770      	bx	lr

0800ca3c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800ca3c:	b480      	push	{r7}
 800ca3e:	b087      	sub	sp, #28
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	60f8      	str	r0, [r7, #12]
 800ca44:	60b9      	str	r1, [r7, #8]
 800ca46:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	7f1b      	ldrb	r3, [r3, #28]
 800ca4c:	2b01      	cmp	r3, #1
 800ca4e:	d101      	bne.n	800ca54 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 800ca50:	2302      	movs	r3, #2
 800ca52:	e0a6      	b.n	800cba2 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	2201      	movs	r2, #1
 800ca58:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	2202      	movs	r2, #2
 800ca5e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	22ca      	movs	r2, #202	; 0xca
 800ca66:	625a      	str	r2, [r3, #36]	; 0x24
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	2253      	movs	r2, #83	; 0x53
 800ca6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	689b      	ldr	r3, [r3, #8]
 800ca76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d022      	beq.n	800cac4 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800ca7e:	4b4c      	ldr	r3, [pc, #304]	; (800cbb0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	4a4c      	ldr	r2, [pc, #304]	; (800cbb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800ca84:	fba2 2303 	umull	r2, r3, r2, r3
 800ca88:	0adb      	lsrs	r3, r3, #11
 800ca8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ca8e:	fb02 f303 	mul.w	r3, r2, r3
 800ca92:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	1e5a      	subs	r2, r3, #1
 800ca98:	617a      	str	r2, [r7, #20]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d10b      	bne.n	800cab6 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	22ff      	movs	r2, #255	; 0xff
 800caa4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	2203      	movs	r2, #3
 800caaa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	2200      	movs	r2, #0
 800cab0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800cab2:	2303      	movs	r3, #3
 800cab4:	e075      	b.n	800cba2 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	68db      	ldr	r3, [r3, #12]
 800cabc:	f003 0304 	and.w	r3, r3, #4
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d1e7      	bne.n	800ca94 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	689a      	ldr	r2, [r3, #8]
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cad2:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800cad4:	4b36      	ldr	r3, [pc, #216]	; (800cbb0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	4a36      	ldr	r2, [pc, #216]	; (800cbb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800cada:	fba2 2303 	umull	r2, r3, r2, r3
 800cade:	0adb      	lsrs	r3, r3, #11
 800cae0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cae4:	fb02 f303 	mul.w	r3, r2, r3
 800cae8:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	1e5a      	subs	r2, r3, #1
 800caee:	617a      	str	r2, [r7, #20]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d10b      	bne.n	800cb0c <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	22ff      	movs	r2, #255	; 0xff
 800cafa:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	2203      	movs	r2, #3
 800cb00:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	2200      	movs	r2, #0
 800cb06:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800cb08:	2303      	movs	r3, #3
 800cb0a:	e04a      	b.n	800cba2 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	68db      	ldr	r3, [r3, #12]
 800cb12:	f003 0304 	and.w	r3, r3, #4
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d0e7      	beq.n	800caea <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	68ba      	ldr	r2, [r7, #8]
 800cb20:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	689a      	ldr	r2, [r3, #8]
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f022 0207 	bic.w	r2, r2, #7
 800cb30:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	6899      	ldr	r1, [r3, #8]
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	687a      	ldr	r2, [r7, #4]
 800cb3e:	430a      	orrs	r2, r1
 800cb40:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800cb42:	4b1d      	ldr	r3, [pc, #116]	; (800cbb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	4a1c      	ldr	r2, [pc, #112]	; (800cbb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800cb48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cb4c:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800cb4e:	4b1a      	ldr	r3, [pc, #104]	; (800cbb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800cb50:	689b      	ldr	r3, [r3, #8]
 800cb52:	4a19      	ldr	r2, [pc, #100]	; (800cbb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800cb54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cb58:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	68db      	ldr	r3, [r3, #12]
 800cb60:	b2da      	uxtb	r2, r3
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800cb6a:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	689a      	ldr	r2, [r3, #8]
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cb7a:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	689a      	ldr	r2, [r3, #8]
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cb8a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	22ff      	movs	r2, #255	; 0xff
 800cb92:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	2201      	movs	r2, #1
 800cb98:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800cba0:	2300      	movs	r3, #0
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	371c      	adds	r7, #28
 800cba6:	46bd      	mov	sp, r7
 800cba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbac:	4770      	bx	lr
 800cbae:	bf00      	nop
 800cbb0:	20000000 	.word	0x20000000
 800cbb4:	10624dd3 	.word	0x10624dd3
 800cbb8:	40013c00 	.word	0x40013c00

0800cbbc <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b084      	sub	sp, #16
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	7f1b      	ldrb	r3, [r3, #28]
 800cbcc:	2b01      	cmp	r3, #1
 800cbce:	d101      	bne.n	800cbd4 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 800cbd0:	2302      	movs	r3, #2
 800cbd2:	e047      	b.n	800cc64 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2202      	movs	r2, #2
 800cbde:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	22ca      	movs	r2, #202	; 0xca
 800cbe6:	625a      	str	r2, [r3, #36]	; 0x24
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	2253      	movs	r2, #83	; 0x53
 800cbee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	689a      	ldr	r2, [r3, #8]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cbfe:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	689a      	ldr	r2, [r3, #8]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cc0e:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cc10:	f7fb fbd2 	bl	80083b8 <HAL_GetTick>
 800cc14:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800cc16:	e013      	b.n	800cc40 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cc18:	f7fb fbce 	bl	80083b8 <HAL_GetTick>
 800cc1c:	4602      	mov	r2, r0
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	1ad3      	subs	r3, r2, r3
 800cc22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cc26:	d90b      	bls.n	800cc40 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	22ff      	movs	r2, #255	; 0xff
 800cc2e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2203      	movs	r2, #3
 800cc34:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800cc3c:	2303      	movs	r3, #3
 800cc3e:	e011      	b.n	800cc64 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	68db      	ldr	r3, [r3, #12]
 800cc46:	f003 0304 	and.w	r3, r3, #4
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d0e4      	beq.n	800cc18 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	22ff      	movs	r2, #255	; 0xff
 800cc54:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2201      	movs	r2, #1
 800cc5a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800cc62:	2300      	movs	r3, #0
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3710      	adds	r7, #16
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}

0800cc6c <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b083      	sub	sp, #12
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 800cc74:	bf00      	nop
 800cc76:	370c      	adds	r7, #12
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7e:	4770      	bx	lr

0800cc80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d101      	bne.n	800cc92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cc8e:	2301      	movs	r3, #1
 800cc90:	e07b      	b.n	800cd8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d108      	bne.n	800ccac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	685b      	ldr	r3, [r3, #4]
 800cc9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cca2:	d009      	beq.n	800ccb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2200      	movs	r2, #0
 800cca8:	61da      	str	r2, [r3, #28]
 800ccaa:	e005      	b.n	800ccb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ccc4:	b2db      	uxtb	r3, r3
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d106      	bne.n	800ccd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2200      	movs	r2, #0
 800ccce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f7f5 ffda 	bl	8002c8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2202      	movs	r2, #2
 800ccdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	681a      	ldr	r2, [r3, #0]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ccee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	685b      	ldr	r3, [r3, #4]
 800ccf4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	689b      	ldr	r3, [r3, #8]
 800ccfc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800cd00:	431a      	orrs	r2, r3
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	68db      	ldr	r3, [r3, #12]
 800cd06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cd0a:	431a      	orrs	r2, r3
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	691b      	ldr	r3, [r3, #16]
 800cd10:	f003 0302 	and.w	r3, r3, #2
 800cd14:	431a      	orrs	r2, r3
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	695b      	ldr	r3, [r3, #20]
 800cd1a:	f003 0301 	and.w	r3, r3, #1
 800cd1e:	431a      	orrs	r2, r3
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	699b      	ldr	r3, [r3, #24]
 800cd24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cd28:	431a      	orrs	r2, r3
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	69db      	ldr	r3, [r3, #28]
 800cd2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cd32:	431a      	orrs	r2, r3
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	6a1b      	ldr	r3, [r3, #32]
 800cd38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd3c:	ea42 0103 	orr.w	r1, r2, r3
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd44:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	430a      	orrs	r2, r1
 800cd4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	699b      	ldr	r3, [r3, #24]
 800cd54:	0c1b      	lsrs	r3, r3, #16
 800cd56:	f003 0104 	and.w	r1, r3, #4
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd5e:	f003 0210 	and.w	r2, r3, #16
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	430a      	orrs	r2, r1
 800cd68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	69da      	ldr	r2, [r3, #28]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cd78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2201      	movs	r2, #1
 800cd84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800cd88:	2300      	movs	r3, #0
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3708      	adds	r7, #8
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}

0800cd92 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cd92:	b580      	push	{r7, lr}
 800cd94:	b088      	sub	sp, #32
 800cd96:	af00      	add	r7, sp, #0
 800cd98:	60f8      	str	r0, [r7, #12]
 800cd9a:	60b9      	str	r1, [r7, #8]
 800cd9c:	603b      	str	r3, [r7, #0]
 800cd9e:	4613      	mov	r3, r2
 800cda0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cda2:	2300      	movs	r3, #0
 800cda4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cdac:	2b01      	cmp	r3, #1
 800cdae:	d101      	bne.n	800cdb4 <HAL_SPI_Transmit+0x22>
 800cdb0:	2302      	movs	r3, #2
 800cdb2:	e126      	b.n	800d002 <HAL_SPI_Transmit+0x270>
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2201      	movs	r2, #1
 800cdb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cdbc:	f7fb fafc 	bl	80083b8 <HAL_GetTick>
 800cdc0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800cdc2:	88fb      	ldrh	r3, [r7, #6]
 800cdc4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cdcc:	b2db      	uxtb	r3, r3
 800cdce:	2b01      	cmp	r3, #1
 800cdd0:	d002      	beq.n	800cdd8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800cdd2:	2302      	movs	r3, #2
 800cdd4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800cdd6:	e10b      	b.n	800cff0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d002      	beq.n	800cde4 <HAL_SPI_Transmit+0x52>
 800cdde:	88fb      	ldrh	r3, [r7, #6]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d102      	bne.n	800cdea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800cde4:	2301      	movs	r3, #1
 800cde6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800cde8:	e102      	b.n	800cff0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	2203      	movs	r2, #3
 800cdee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	68ba      	ldr	r2, [r7, #8]
 800cdfc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	88fa      	ldrh	r2, [r7, #6]
 800ce02:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	88fa      	ldrh	r2, [r7, #6]
 800ce08:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2200      	movs	r2, #0
 800ce14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	2200      	movs	r2, #0
 800ce26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	689b      	ldr	r3, [r3, #8]
 800ce2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce30:	d10f      	bne.n	800ce52 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	681a      	ldr	r2, [r3, #0]
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ce40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	681a      	ldr	r2, [r3, #0]
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ce50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce5c:	2b40      	cmp	r3, #64	; 0x40
 800ce5e:	d007      	beq.n	800ce70 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	681a      	ldr	r2, [r3, #0]
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ce6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	68db      	ldr	r3, [r3, #12]
 800ce74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce78:	d14b      	bne.n	800cf12 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	685b      	ldr	r3, [r3, #4]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d002      	beq.n	800ce88 <HAL_SPI_Transmit+0xf6>
 800ce82:	8afb      	ldrh	r3, [r7, #22]
 800ce84:	2b01      	cmp	r3, #1
 800ce86:	d13e      	bne.n	800cf06 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce8c:	881a      	ldrh	r2, [r3, #0]
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce98:	1c9a      	adds	r2, r3, #2
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cea2:	b29b      	uxth	r3, r3
 800cea4:	3b01      	subs	r3, #1
 800cea6:	b29a      	uxth	r2, r3
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ceac:	e02b      	b.n	800cf06 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	689b      	ldr	r3, [r3, #8]
 800ceb4:	f003 0302 	and.w	r3, r3, #2
 800ceb8:	2b02      	cmp	r3, #2
 800ceba:	d112      	bne.n	800cee2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cec0:	881a      	ldrh	r2, [r3, #0]
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cecc:	1c9a      	adds	r2, r3, #2
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ced6:	b29b      	uxth	r3, r3
 800ced8:	3b01      	subs	r3, #1
 800ceda:	b29a      	uxth	r2, r3
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	86da      	strh	r2, [r3, #54]	; 0x36
 800cee0:	e011      	b.n	800cf06 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cee2:	f7fb fa69 	bl	80083b8 <HAL_GetTick>
 800cee6:	4602      	mov	r2, r0
 800cee8:	69bb      	ldr	r3, [r7, #24]
 800ceea:	1ad3      	subs	r3, r2, r3
 800ceec:	683a      	ldr	r2, [r7, #0]
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d803      	bhi.n	800cefa <HAL_SPI_Transmit+0x168>
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cef8:	d102      	bne.n	800cf00 <HAL_SPI_Transmit+0x16e>
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d102      	bne.n	800cf06 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800cf00:	2303      	movs	r3, #3
 800cf02:	77fb      	strb	r3, [r7, #31]
          goto error;
 800cf04:	e074      	b.n	800cff0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cf0a:	b29b      	uxth	r3, r3
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d1ce      	bne.n	800ceae <HAL_SPI_Transmit+0x11c>
 800cf10:	e04c      	b.n	800cfac <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	685b      	ldr	r3, [r3, #4]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d002      	beq.n	800cf20 <HAL_SPI_Transmit+0x18e>
 800cf1a:	8afb      	ldrh	r3, [r7, #22]
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	d140      	bne.n	800cfa2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	330c      	adds	r3, #12
 800cf2a:	7812      	ldrb	r2, [r2, #0]
 800cf2c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf32:	1c5a      	adds	r2, r3, #1
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cf3c:	b29b      	uxth	r3, r3
 800cf3e:	3b01      	subs	r3, #1
 800cf40:	b29a      	uxth	r2, r3
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800cf46:	e02c      	b.n	800cfa2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	689b      	ldr	r3, [r3, #8]
 800cf4e:	f003 0302 	and.w	r3, r3, #2
 800cf52:	2b02      	cmp	r3, #2
 800cf54:	d113      	bne.n	800cf7e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	330c      	adds	r3, #12
 800cf60:	7812      	ldrb	r2, [r2, #0]
 800cf62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf68:	1c5a      	adds	r2, r3, #1
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cf72:	b29b      	uxth	r3, r3
 800cf74:	3b01      	subs	r3, #1
 800cf76:	b29a      	uxth	r2, r3
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	86da      	strh	r2, [r3, #54]	; 0x36
 800cf7c:	e011      	b.n	800cfa2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cf7e:	f7fb fa1b 	bl	80083b8 <HAL_GetTick>
 800cf82:	4602      	mov	r2, r0
 800cf84:	69bb      	ldr	r3, [r7, #24]
 800cf86:	1ad3      	subs	r3, r2, r3
 800cf88:	683a      	ldr	r2, [r7, #0]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d803      	bhi.n	800cf96 <HAL_SPI_Transmit+0x204>
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf94:	d102      	bne.n	800cf9c <HAL_SPI_Transmit+0x20a>
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d102      	bne.n	800cfa2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800cf9c:	2303      	movs	r3, #3
 800cf9e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800cfa0:	e026      	b.n	800cff0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cfa6:	b29b      	uxth	r3, r3
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d1cd      	bne.n	800cf48 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cfac:	69ba      	ldr	r2, [r7, #24]
 800cfae:	6839      	ldr	r1, [r7, #0]
 800cfb0:	68f8      	ldr	r0, [r7, #12]
 800cfb2:	f000 fbcb 	bl	800d74c <SPI_EndRxTxTransaction>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d002      	beq.n	800cfc2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	2220      	movs	r2, #32
 800cfc0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	689b      	ldr	r3, [r3, #8]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d10a      	bne.n	800cfe0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cfca:	2300      	movs	r3, #0
 800cfcc:	613b      	str	r3, [r7, #16]
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	68db      	ldr	r3, [r3, #12]
 800cfd4:	613b      	str	r3, [r7, #16]
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	689b      	ldr	r3, [r3, #8]
 800cfdc:	613b      	str	r3, [r7, #16]
 800cfde:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d002      	beq.n	800cfee <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800cfe8:	2301      	movs	r3, #1
 800cfea:	77fb      	strb	r3, [r7, #31]
 800cfec:	e000      	b.n	800cff0 <HAL_SPI_Transmit+0x25e>
  }

error:
 800cfee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2201      	movs	r2, #1
 800cff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2200      	movs	r2, #0
 800cffc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d000:	7ffb      	ldrb	r3, [r7, #31]
}
 800d002:	4618      	mov	r0, r3
 800d004:	3720      	adds	r7, #32
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}

0800d00a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d00a:	b580      	push	{r7, lr}
 800d00c:	b088      	sub	sp, #32
 800d00e:	af02      	add	r7, sp, #8
 800d010:	60f8      	str	r0, [r7, #12]
 800d012:	60b9      	str	r1, [r7, #8]
 800d014:	603b      	str	r3, [r7, #0]
 800d016:	4613      	mov	r3, r2
 800d018:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d01a:	2300      	movs	r3, #0
 800d01c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	685b      	ldr	r3, [r3, #4]
 800d022:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d026:	d112      	bne.n	800d04e <HAL_SPI_Receive+0x44>
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	689b      	ldr	r3, [r3, #8]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d10e      	bne.n	800d04e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	2204      	movs	r2, #4
 800d034:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d038:	88fa      	ldrh	r2, [r7, #6]
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	9300      	str	r3, [sp, #0]
 800d03e:	4613      	mov	r3, r2
 800d040:	68ba      	ldr	r2, [r7, #8]
 800d042:	68b9      	ldr	r1, [r7, #8]
 800d044:	68f8      	ldr	r0, [r7, #12]
 800d046:	f000 f8f1 	bl	800d22c <HAL_SPI_TransmitReceive>
 800d04a:	4603      	mov	r3, r0
 800d04c:	e0ea      	b.n	800d224 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d054:	2b01      	cmp	r3, #1
 800d056:	d101      	bne.n	800d05c <HAL_SPI_Receive+0x52>
 800d058:	2302      	movs	r3, #2
 800d05a:	e0e3      	b.n	800d224 <HAL_SPI_Receive+0x21a>
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	2201      	movs	r2, #1
 800d060:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d064:	f7fb f9a8 	bl	80083b8 <HAL_GetTick>
 800d068:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d070:	b2db      	uxtb	r3, r3
 800d072:	2b01      	cmp	r3, #1
 800d074:	d002      	beq.n	800d07c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800d076:	2302      	movs	r3, #2
 800d078:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d07a:	e0ca      	b.n	800d212 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d002      	beq.n	800d088 <HAL_SPI_Receive+0x7e>
 800d082:	88fb      	ldrh	r3, [r7, #6]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d102      	bne.n	800d08e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800d088:	2301      	movs	r3, #1
 800d08a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d08c:	e0c1      	b.n	800d212 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	2204      	movs	r2, #4
 800d092:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	2200      	movs	r2, #0
 800d09a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	68ba      	ldr	r2, [r7, #8]
 800d0a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	88fa      	ldrh	r2, [r7, #6]
 800d0a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	88fa      	ldrh	r2, [r7, #6]
 800d0ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	689b      	ldr	r3, [r3, #8]
 800d0d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d0d4:	d10f      	bne.n	800d0f6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	681a      	ldr	r2, [r3, #0]
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d0e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	681a      	ldr	r2, [r3, #0]
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d0f4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d100:	2b40      	cmp	r3, #64	; 0x40
 800d102:	d007      	beq.n	800d114 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	681a      	ldr	r2, [r3, #0]
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d112:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	68db      	ldr	r3, [r3, #12]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d162      	bne.n	800d1e2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800d11c:	e02e      	b.n	800d17c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	689b      	ldr	r3, [r3, #8]
 800d124:	f003 0301 	and.w	r3, r3, #1
 800d128:	2b01      	cmp	r3, #1
 800d12a:	d115      	bne.n	800d158 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f103 020c 	add.w	r2, r3, #12
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d138:	7812      	ldrb	r2, [r2, #0]
 800d13a:	b2d2      	uxtb	r2, r2
 800d13c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d142:	1c5a      	adds	r2, r3, #1
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d14c:	b29b      	uxth	r3, r3
 800d14e:	3b01      	subs	r3, #1
 800d150:	b29a      	uxth	r2, r3
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d156:	e011      	b.n	800d17c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d158:	f7fb f92e 	bl	80083b8 <HAL_GetTick>
 800d15c:	4602      	mov	r2, r0
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	1ad3      	subs	r3, r2, r3
 800d162:	683a      	ldr	r2, [r7, #0]
 800d164:	429a      	cmp	r2, r3
 800d166:	d803      	bhi.n	800d170 <HAL_SPI_Receive+0x166>
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d16e:	d102      	bne.n	800d176 <HAL_SPI_Receive+0x16c>
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d102      	bne.n	800d17c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800d176:	2303      	movs	r3, #3
 800d178:	75fb      	strb	r3, [r7, #23]
          goto error;
 800d17a:	e04a      	b.n	800d212 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d180:	b29b      	uxth	r3, r3
 800d182:	2b00      	cmp	r3, #0
 800d184:	d1cb      	bne.n	800d11e <HAL_SPI_Receive+0x114>
 800d186:	e031      	b.n	800d1ec <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	689b      	ldr	r3, [r3, #8]
 800d18e:	f003 0301 	and.w	r3, r3, #1
 800d192:	2b01      	cmp	r3, #1
 800d194:	d113      	bne.n	800d1be <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	68da      	ldr	r2, [r3, #12]
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1a0:	b292      	uxth	r2, r2
 800d1a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1a8:	1c9a      	adds	r2, r3, #2
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d1b2:	b29b      	uxth	r3, r3
 800d1b4:	3b01      	subs	r3, #1
 800d1b6:	b29a      	uxth	r2, r3
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d1bc:	e011      	b.n	800d1e2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d1be:	f7fb f8fb 	bl	80083b8 <HAL_GetTick>
 800d1c2:	4602      	mov	r2, r0
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	1ad3      	subs	r3, r2, r3
 800d1c8:	683a      	ldr	r2, [r7, #0]
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d803      	bhi.n	800d1d6 <HAL_SPI_Receive+0x1cc>
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1d4:	d102      	bne.n	800d1dc <HAL_SPI_Receive+0x1d2>
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d102      	bne.n	800d1e2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800d1dc:	2303      	movs	r3, #3
 800d1de:	75fb      	strb	r3, [r7, #23]
          goto error;
 800d1e0:	e017      	b.n	800d212 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d1e6:	b29b      	uxth	r3, r3
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d1cd      	bne.n	800d188 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d1ec:	693a      	ldr	r2, [r7, #16]
 800d1ee:	6839      	ldr	r1, [r7, #0]
 800d1f0:	68f8      	ldr	r0, [r7, #12]
 800d1f2:	f000 fa45 	bl	800d680 <SPI_EndRxTransaction>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d002      	beq.n	800d202 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	2220      	movs	r2, #32
 800d200:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d206:	2b00      	cmp	r3, #0
 800d208:	d002      	beq.n	800d210 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800d20a:	2301      	movs	r3, #1
 800d20c:	75fb      	strb	r3, [r7, #23]
 800d20e:	e000      	b.n	800d212 <HAL_SPI_Receive+0x208>
  }

error :
 800d210:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	2201      	movs	r2, #1
 800d216:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	2200      	movs	r2, #0
 800d21e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d222:	7dfb      	ldrb	r3, [r7, #23]
}
 800d224:	4618      	mov	r0, r3
 800d226:	3718      	adds	r7, #24
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}

0800d22c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b08c      	sub	sp, #48	; 0x30
 800d230:	af00      	add	r7, sp, #0
 800d232:	60f8      	str	r0, [r7, #12]
 800d234:	60b9      	str	r1, [r7, #8]
 800d236:	607a      	str	r2, [r7, #4]
 800d238:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d23a:	2301      	movs	r3, #1
 800d23c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800d23e:	2300      	movs	r3, #0
 800d240:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d24a:	2b01      	cmp	r3, #1
 800d24c:	d101      	bne.n	800d252 <HAL_SPI_TransmitReceive+0x26>
 800d24e:	2302      	movs	r3, #2
 800d250:	e18a      	b.n	800d568 <HAL_SPI_TransmitReceive+0x33c>
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	2201      	movs	r2, #1
 800d256:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d25a:	f7fb f8ad 	bl	80083b8 <HAL_GetTick>
 800d25e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800d270:	887b      	ldrh	r3, [r7, #2]
 800d272:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d274:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d278:	2b01      	cmp	r3, #1
 800d27a:	d00f      	beq.n	800d29c <HAL_SPI_TransmitReceive+0x70>
 800d27c:	69fb      	ldr	r3, [r7, #28]
 800d27e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d282:	d107      	bne.n	800d294 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	689b      	ldr	r3, [r3, #8]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d103      	bne.n	800d294 <HAL_SPI_TransmitReceive+0x68>
 800d28c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d290:	2b04      	cmp	r3, #4
 800d292:	d003      	beq.n	800d29c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800d294:	2302      	movs	r3, #2
 800d296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d29a:	e15b      	b.n	800d554 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d005      	beq.n	800d2ae <HAL_SPI_TransmitReceive+0x82>
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d002      	beq.n	800d2ae <HAL_SPI_TransmitReceive+0x82>
 800d2a8:	887b      	ldrh	r3, [r7, #2]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d103      	bne.n	800d2b6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d2b4:	e14e      	b.n	800d554 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d2bc:	b2db      	uxtb	r3, r3
 800d2be:	2b04      	cmp	r3, #4
 800d2c0:	d003      	beq.n	800d2ca <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	2205      	movs	r2, #5
 800d2c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	687a      	ldr	r2, [r7, #4]
 800d2d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	887a      	ldrh	r2, [r7, #2]
 800d2da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	887a      	ldrh	r2, [r7, #2]
 800d2e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	68ba      	ldr	r2, [r7, #8]
 800d2e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	887a      	ldrh	r2, [r7, #2]
 800d2ec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	887a      	ldrh	r2, [r7, #2]
 800d2f2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d30a:	2b40      	cmp	r3, #64	; 0x40
 800d30c:	d007      	beq.n	800d31e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	681a      	ldr	r2, [r3, #0]
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d31c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	68db      	ldr	r3, [r3, #12]
 800d322:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d326:	d178      	bne.n	800d41a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	685b      	ldr	r3, [r3, #4]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d002      	beq.n	800d336 <HAL_SPI_TransmitReceive+0x10a>
 800d330:	8b7b      	ldrh	r3, [r7, #26]
 800d332:	2b01      	cmp	r3, #1
 800d334:	d166      	bne.n	800d404 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d33a:	881a      	ldrh	r2, [r3, #0]
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d346:	1c9a      	adds	r2, r3, #2
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d350:	b29b      	uxth	r3, r3
 800d352:	3b01      	subs	r3, #1
 800d354:	b29a      	uxth	r2, r3
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d35a:	e053      	b.n	800d404 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	689b      	ldr	r3, [r3, #8]
 800d362:	f003 0302 	and.w	r3, r3, #2
 800d366:	2b02      	cmp	r3, #2
 800d368:	d11b      	bne.n	800d3a2 <HAL_SPI_TransmitReceive+0x176>
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d36e:	b29b      	uxth	r3, r3
 800d370:	2b00      	cmp	r3, #0
 800d372:	d016      	beq.n	800d3a2 <HAL_SPI_TransmitReceive+0x176>
 800d374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d376:	2b01      	cmp	r3, #1
 800d378:	d113      	bne.n	800d3a2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d37e:	881a      	ldrh	r2, [r3, #0]
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d38a:	1c9a      	adds	r2, r3, #2
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d394:	b29b      	uxth	r3, r3
 800d396:	3b01      	subs	r3, #1
 800d398:	b29a      	uxth	r2, r3
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	689b      	ldr	r3, [r3, #8]
 800d3a8:	f003 0301 	and.w	r3, r3, #1
 800d3ac:	2b01      	cmp	r3, #1
 800d3ae:	d119      	bne.n	800d3e4 <HAL_SPI_TransmitReceive+0x1b8>
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d3b4:	b29b      	uxth	r3, r3
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d014      	beq.n	800d3e4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	68da      	ldr	r2, [r3, #12]
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3c4:	b292      	uxth	r2, r2
 800d3c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3cc:	1c9a      	adds	r2, r3, #2
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d3d6:	b29b      	uxth	r3, r3
 800d3d8:	3b01      	subs	r3, #1
 800d3da:	b29a      	uxth	r2, r3
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d3e4:	f7fa ffe8 	bl	80083b8 <HAL_GetTick>
 800d3e8:	4602      	mov	r2, r0
 800d3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ec:	1ad3      	subs	r3, r2, r3
 800d3ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d3f0:	429a      	cmp	r2, r3
 800d3f2:	d807      	bhi.n	800d404 <HAL_SPI_TransmitReceive+0x1d8>
 800d3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3fa:	d003      	beq.n	800d404 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800d3fc:	2303      	movs	r3, #3
 800d3fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d402:	e0a7      	b.n	800d554 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d408:	b29b      	uxth	r3, r3
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d1a6      	bne.n	800d35c <HAL_SPI_TransmitReceive+0x130>
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d412:	b29b      	uxth	r3, r3
 800d414:	2b00      	cmp	r3, #0
 800d416:	d1a1      	bne.n	800d35c <HAL_SPI_TransmitReceive+0x130>
 800d418:	e07c      	b.n	800d514 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	685b      	ldr	r3, [r3, #4]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d002      	beq.n	800d428 <HAL_SPI_TransmitReceive+0x1fc>
 800d422:	8b7b      	ldrh	r3, [r7, #26]
 800d424:	2b01      	cmp	r3, #1
 800d426:	d16b      	bne.n	800d500 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	330c      	adds	r3, #12
 800d432:	7812      	ldrb	r2, [r2, #0]
 800d434:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d43a:	1c5a      	adds	r2, r3, #1
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d444:	b29b      	uxth	r3, r3
 800d446:	3b01      	subs	r3, #1
 800d448:	b29a      	uxth	r2, r3
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d44e:	e057      	b.n	800d500 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	689b      	ldr	r3, [r3, #8]
 800d456:	f003 0302 	and.w	r3, r3, #2
 800d45a:	2b02      	cmp	r3, #2
 800d45c:	d11c      	bne.n	800d498 <HAL_SPI_TransmitReceive+0x26c>
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d462:	b29b      	uxth	r3, r3
 800d464:	2b00      	cmp	r3, #0
 800d466:	d017      	beq.n	800d498 <HAL_SPI_TransmitReceive+0x26c>
 800d468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d46a:	2b01      	cmp	r3, #1
 800d46c:	d114      	bne.n	800d498 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	330c      	adds	r3, #12
 800d478:	7812      	ldrb	r2, [r2, #0]
 800d47a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d480:	1c5a      	adds	r2, r3, #1
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d48a:	b29b      	uxth	r3, r3
 800d48c:	3b01      	subs	r3, #1
 800d48e:	b29a      	uxth	r2, r3
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d494:	2300      	movs	r3, #0
 800d496:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	689b      	ldr	r3, [r3, #8]
 800d49e:	f003 0301 	and.w	r3, r3, #1
 800d4a2:	2b01      	cmp	r3, #1
 800d4a4:	d119      	bne.n	800d4da <HAL_SPI_TransmitReceive+0x2ae>
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d4aa:	b29b      	uxth	r3, r3
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d014      	beq.n	800d4da <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	68da      	ldr	r2, [r3, #12]
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ba:	b2d2      	uxtb	r2, r2
 800d4bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4c2:	1c5a      	adds	r2, r3, #1
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d4cc:	b29b      	uxth	r3, r3
 800d4ce:	3b01      	subs	r3, #1
 800d4d0:	b29a      	uxth	r2, r3
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d4da:	f7fa ff6d 	bl	80083b8 <HAL_GetTick>
 800d4de:	4602      	mov	r2, r0
 800d4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4e2:	1ad3      	subs	r3, r2, r3
 800d4e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d803      	bhi.n	800d4f2 <HAL_SPI_TransmitReceive+0x2c6>
 800d4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4f0:	d102      	bne.n	800d4f8 <HAL_SPI_TransmitReceive+0x2cc>
 800d4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d103      	bne.n	800d500 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800d4f8:	2303      	movs	r3, #3
 800d4fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d4fe:	e029      	b.n	800d554 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d504:	b29b      	uxth	r3, r3
 800d506:	2b00      	cmp	r3, #0
 800d508:	d1a2      	bne.n	800d450 <HAL_SPI_TransmitReceive+0x224>
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d50e:	b29b      	uxth	r3, r3
 800d510:	2b00      	cmp	r3, #0
 800d512:	d19d      	bne.n	800d450 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d516:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d518:	68f8      	ldr	r0, [r7, #12]
 800d51a:	f000 f917 	bl	800d74c <SPI_EndRxTxTransaction>
 800d51e:	4603      	mov	r3, r0
 800d520:	2b00      	cmp	r3, #0
 800d522:	d006      	beq.n	800d532 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800d524:	2301      	movs	r3, #1
 800d526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	2220      	movs	r2, #32
 800d52e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800d530:	e010      	b.n	800d554 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	689b      	ldr	r3, [r3, #8]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d10b      	bne.n	800d552 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d53a:	2300      	movs	r3, #0
 800d53c:	617b      	str	r3, [r7, #20]
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	68db      	ldr	r3, [r3, #12]
 800d544:	617b      	str	r3, [r7, #20]
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	689b      	ldr	r3, [r3, #8]
 800d54c:	617b      	str	r3, [r7, #20]
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	e000      	b.n	800d554 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800d552:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	2201      	movs	r2, #1
 800d558:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2200      	movs	r2, #0
 800d560:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d564:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3730      	adds	r7, #48	; 0x30
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b088      	sub	sp, #32
 800d574:	af00      	add	r7, sp, #0
 800d576:	60f8      	str	r0, [r7, #12]
 800d578:	60b9      	str	r1, [r7, #8]
 800d57a:	603b      	str	r3, [r7, #0]
 800d57c:	4613      	mov	r3, r2
 800d57e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d580:	f7fa ff1a 	bl	80083b8 <HAL_GetTick>
 800d584:	4602      	mov	r2, r0
 800d586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d588:	1a9b      	subs	r3, r3, r2
 800d58a:	683a      	ldr	r2, [r7, #0]
 800d58c:	4413      	add	r3, r2
 800d58e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d590:	f7fa ff12 	bl	80083b8 <HAL_GetTick>
 800d594:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d596:	4b39      	ldr	r3, [pc, #228]	; (800d67c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	015b      	lsls	r3, r3, #5
 800d59c:	0d1b      	lsrs	r3, r3, #20
 800d59e:	69fa      	ldr	r2, [r7, #28]
 800d5a0:	fb02 f303 	mul.w	r3, r2, r3
 800d5a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d5a6:	e054      	b.n	800d652 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5ae:	d050      	beq.n	800d652 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d5b0:	f7fa ff02 	bl	80083b8 <HAL_GetTick>
 800d5b4:	4602      	mov	r2, r0
 800d5b6:	69bb      	ldr	r3, [r7, #24]
 800d5b8:	1ad3      	subs	r3, r2, r3
 800d5ba:	69fa      	ldr	r2, [r7, #28]
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	d902      	bls.n	800d5c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800d5c0:	69fb      	ldr	r3, [r7, #28]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d13d      	bne.n	800d642 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	685a      	ldr	r2, [r3, #4]
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d5d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	685b      	ldr	r3, [r3, #4]
 800d5da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d5de:	d111      	bne.n	800d604 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	689b      	ldr	r3, [r3, #8]
 800d5e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d5e8:	d004      	beq.n	800d5f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	689b      	ldr	r3, [r3, #8]
 800d5ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d5f2:	d107      	bne.n	800d604 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	681a      	ldr	r2, [r3, #0]
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d602:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d608:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d60c:	d10f      	bne.n	800d62e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	681a      	ldr	r2, [r3, #0]
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d61c:	601a      	str	r2, [r3, #0]
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	681a      	ldr	r2, [r3, #0]
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d62c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2201      	movs	r2, #1
 800d632:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	2200      	movs	r2, #0
 800d63a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800d63e:	2303      	movs	r3, #3
 800d640:	e017      	b.n	800d672 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d101      	bne.n	800d64c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d648:	2300      	movs	r3, #0
 800d64a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	3b01      	subs	r3, #1
 800d650:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	689a      	ldr	r2, [r3, #8]
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	4013      	ands	r3, r2
 800d65c:	68ba      	ldr	r2, [r7, #8]
 800d65e:	429a      	cmp	r2, r3
 800d660:	bf0c      	ite	eq
 800d662:	2301      	moveq	r3, #1
 800d664:	2300      	movne	r3, #0
 800d666:	b2db      	uxtb	r3, r3
 800d668:	461a      	mov	r2, r3
 800d66a:	79fb      	ldrb	r3, [r7, #7]
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d19b      	bne.n	800d5a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d670:	2300      	movs	r3, #0
}
 800d672:	4618      	mov	r0, r3
 800d674:	3720      	adds	r7, #32
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}
 800d67a:	bf00      	nop
 800d67c:	20000000 	.word	0x20000000

0800d680 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b086      	sub	sp, #24
 800d684:	af02      	add	r7, sp, #8
 800d686:	60f8      	str	r0, [r7, #12]
 800d688:	60b9      	str	r1, [r7, #8]
 800d68a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	685b      	ldr	r3, [r3, #4]
 800d690:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d694:	d111      	bne.n	800d6ba <SPI_EndRxTransaction+0x3a>
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	689b      	ldr	r3, [r3, #8]
 800d69a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d69e:	d004      	beq.n	800d6aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	689b      	ldr	r3, [r3, #8]
 800d6a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d6a8:	d107      	bne.n	800d6ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	681a      	ldr	r2, [r3, #0]
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d6b8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	685b      	ldr	r3, [r3, #4]
 800d6be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d6c2:	d12a      	bne.n	800d71a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	689b      	ldr	r3, [r3, #8]
 800d6c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d6cc:	d012      	beq.n	800d6f4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	9300      	str	r3, [sp, #0]
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	2180      	movs	r1, #128	; 0x80
 800d6d8:	68f8      	ldr	r0, [r7, #12]
 800d6da:	f7ff ff49 	bl	800d570 <SPI_WaitFlagStateUntilTimeout>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d02d      	beq.n	800d740 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6e8:	f043 0220 	orr.w	r2, r3, #32
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d6f0:	2303      	movs	r3, #3
 800d6f2:	e026      	b.n	800d742 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	9300      	str	r3, [sp, #0]
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	2101      	movs	r1, #1
 800d6fe:	68f8      	ldr	r0, [r7, #12]
 800d700:	f7ff ff36 	bl	800d570 <SPI_WaitFlagStateUntilTimeout>
 800d704:	4603      	mov	r3, r0
 800d706:	2b00      	cmp	r3, #0
 800d708:	d01a      	beq.n	800d740 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d70e:	f043 0220 	orr.w	r2, r3, #32
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d716:	2303      	movs	r3, #3
 800d718:	e013      	b.n	800d742 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	9300      	str	r3, [sp, #0]
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	2200      	movs	r2, #0
 800d722:	2101      	movs	r1, #1
 800d724:	68f8      	ldr	r0, [r7, #12]
 800d726:	f7ff ff23 	bl	800d570 <SPI_WaitFlagStateUntilTimeout>
 800d72a:	4603      	mov	r3, r0
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d007      	beq.n	800d740 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d734:	f043 0220 	orr.w	r2, r3, #32
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d73c:	2303      	movs	r3, #3
 800d73e:	e000      	b.n	800d742 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800d740:	2300      	movs	r3, #0
}
 800d742:	4618      	mov	r0, r3
 800d744:	3710      	adds	r7, #16
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
	...

0800d74c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b088      	sub	sp, #32
 800d750:	af02      	add	r7, sp, #8
 800d752:	60f8      	str	r0, [r7, #12]
 800d754:	60b9      	str	r1, [r7, #8]
 800d756:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800d758:	4b1b      	ldr	r3, [pc, #108]	; (800d7c8 <SPI_EndRxTxTransaction+0x7c>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	4a1b      	ldr	r2, [pc, #108]	; (800d7cc <SPI_EndRxTxTransaction+0x80>)
 800d75e:	fba2 2303 	umull	r2, r3, r2, r3
 800d762:	0d5b      	lsrs	r3, r3, #21
 800d764:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d768:	fb02 f303 	mul.w	r3, r2, r3
 800d76c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	685b      	ldr	r3, [r3, #4]
 800d772:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d776:	d112      	bne.n	800d79e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	9300      	str	r3, [sp, #0]
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	2200      	movs	r2, #0
 800d780:	2180      	movs	r1, #128	; 0x80
 800d782:	68f8      	ldr	r0, [r7, #12]
 800d784:	f7ff fef4 	bl	800d570 <SPI_WaitFlagStateUntilTimeout>
 800d788:	4603      	mov	r3, r0
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d016      	beq.n	800d7bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d792:	f043 0220 	orr.w	r2, r3, #32
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d79a:	2303      	movs	r3, #3
 800d79c:	e00f      	b.n	800d7be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800d79e:	697b      	ldr	r3, [r7, #20]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d00a      	beq.n	800d7ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	3b01      	subs	r3, #1
 800d7a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	689b      	ldr	r3, [r3, #8]
 800d7b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7b4:	2b80      	cmp	r3, #128	; 0x80
 800d7b6:	d0f2      	beq.n	800d79e <SPI_EndRxTxTransaction+0x52>
 800d7b8:	e000      	b.n	800d7bc <SPI_EndRxTxTransaction+0x70>
        break;
 800d7ba:	bf00      	nop
  }

  return HAL_OK;
 800d7bc:	2300      	movs	r3, #0
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3718      	adds	r7, #24
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}
 800d7c6:	bf00      	nop
 800d7c8:	20000000 	.word	0x20000000
 800d7cc:	165e9f81 	.word	0x165e9f81

0800d7d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b082      	sub	sp, #8
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d101      	bne.n	800d7e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d7de:	2301      	movs	r3, #1
 800d7e0:	e041      	b.n	800d866 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d7e8:	b2db      	uxtb	r3, r3
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d106      	bne.n	800d7fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f000 f839 	bl	800d86e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2202      	movs	r2, #2
 800d800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681a      	ldr	r2, [r3, #0]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	3304      	adds	r3, #4
 800d80c:	4619      	mov	r1, r3
 800d80e:	4610      	mov	r0, r2
 800d810:	f000 faea 	bl	800dde8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2201      	movs	r2, #1
 800d818:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2201      	movs	r2, #1
 800d820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2201      	movs	r2, #1
 800d828:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2201      	movs	r2, #1
 800d830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2201      	movs	r2, #1
 800d838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2201      	movs	r2, #1
 800d840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2201      	movs	r2, #1
 800d848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2201      	movs	r2, #1
 800d850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2201      	movs	r2, #1
 800d858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2201      	movs	r2, #1
 800d860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d864:	2300      	movs	r3, #0
}
 800d866:	4618      	mov	r0, r3
 800d868:	3708      	adds	r7, #8
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}

0800d86e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d86e:	b480      	push	{r7}
 800d870:	b083      	sub	sp, #12
 800d872:	af00      	add	r7, sp, #0
 800d874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d876:	bf00      	nop
 800d878:	370c      	adds	r7, #12
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr
	...

0800d884 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d884:	b480      	push	{r7}
 800d886:	b085      	sub	sp, #20
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d892:	b2db      	uxtb	r3, r3
 800d894:	2b01      	cmp	r3, #1
 800d896:	d001      	beq.n	800d89c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d898:	2301      	movs	r3, #1
 800d89a:	e04e      	b.n	800d93a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2202      	movs	r2, #2
 800d8a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	68da      	ldr	r2, [r3, #12]
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f042 0201 	orr.w	r2, r2, #1
 800d8b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	4a23      	ldr	r2, [pc, #140]	; (800d948 <HAL_TIM_Base_Start_IT+0xc4>)
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	d022      	beq.n	800d904 <HAL_TIM_Base_Start_IT+0x80>
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d8c6:	d01d      	beq.n	800d904 <HAL_TIM_Base_Start_IT+0x80>
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	4a1f      	ldr	r2, [pc, #124]	; (800d94c <HAL_TIM_Base_Start_IT+0xc8>)
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d018      	beq.n	800d904 <HAL_TIM_Base_Start_IT+0x80>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	4a1e      	ldr	r2, [pc, #120]	; (800d950 <HAL_TIM_Base_Start_IT+0xcc>)
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	d013      	beq.n	800d904 <HAL_TIM_Base_Start_IT+0x80>
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	4a1c      	ldr	r2, [pc, #112]	; (800d954 <HAL_TIM_Base_Start_IT+0xd0>)
 800d8e2:	4293      	cmp	r3, r2
 800d8e4:	d00e      	beq.n	800d904 <HAL_TIM_Base_Start_IT+0x80>
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	4a1b      	ldr	r2, [pc, #108]	; (800d958 <HAL_TIM_Base_Start_IT+0xd4>)
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	d009      	beq.n	800d904 <HAL_TIM_Base_Start_IT+0x80>
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	4a19      	ldr	r2, [pc, #100]	; (800d95c <HAL_TIM_Base_Start_IT+0xd8>)
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	d004      	beq.n	800d904 <HAL_TIM_Base_Start_IT+0x80>
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	4a18      	ldr	r2, [pc, #96]	; (800d960 <HAL_TIM_Base_Start_IT+0xdc>)
 800d900:	4293      	cmp	r3, r2
 800d902:	d111      	bne.n	800d928 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	689b      	ldr	r3, [r3, #8]
 800d90a:	f003 0307 	and.w	r3, r3, #7
 800d90e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	2b06      	cmp	r3, #6
 800d914:	d010      	beq.n	800d938 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	681a      	ldr	r2, [r3, #0]
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	f042 0201 	orr.w	r2, r2, #1
 800d924:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d926:	e007      	b.n	800d938 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	681a      	ldr	r2, [r3, #0]
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	f042 0201 	orr.w	r2, r2, #1
 800d936:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d938:	2300      	movs	r3, #0
}
 800d93a:	4618      	mov	r0, r3
 800d93c:	3714      	adds	r7, #20
 800d93e:	46bd      	mov	sp, r7
 800d940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d944:	4770      	bx	lr
 800d946:	bf00      	nop
 800d948:	40010000 	.word	0x40010000
 800d94c:	40000400 	.word	0x40000400
 800d950:	40000800 	.word	0x40000800
 800d954:	40000c00 	.word	0x40000c00
 800d958:	40010400 	.word	0x40010400
 800d95c:	40014000 	.word	0x40014000
 800d960:	40001800 	.word	0x40001800

0800d964 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d101      	bne.n	800d976 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d972:	2301      	movs	r3, #1
 800d974:	e041      	b.n	800d9fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d97c:	b2db      	uxtb	r3, r3
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d106      	bne.n	800d990 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2200      	movs	r2, #0
 800d986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f7f5 fa34 	bl	8002df8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2202      	movs	r2, #2
 800d994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681a      	ldr	r2, [r3, #0]
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	3304      	adds	r3, #4
 800d9a0:	4619      	mov	r1, r3
 800d9a2:	4610      	mov	r0, r2
 800d9a4:	f000 fa20 	bl	800dde8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2201      	movs	r2, #1
 800d9ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2201      	movs	r2, #1
 800d9b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2201      	movs	r2, #1
 800d9bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2201      	movs	r2, #1
 800d9c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2201      	movs	r2, #1
 800d9cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2201      	movs	r2, #1
 800d9d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2201      	movs	r2, #1
 800d9dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2201      	movs	r2, #1
 800d9e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d9f8:	2300      	movs	r3, #0
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	3708      	adds	r7, #8
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}

0800da02 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800da02:	b580      	push	{r7, lr}
 800da04:	b082      	sub	sp, #8
 800da06:	af00      	add	r7, sp, #0
 800da08:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	691b      	ldr	r3, [r3, #16]
 800da10:	f003 0302 	and.w	r3, r3, #2
 800da14:	2b02      	cmp	r3, #2
 800da16:	d122      	bne.n	800da5e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	68db      	ldr	r3, [r3, #12]
 800da1e:	f003 0302 	and.w	r3, r3, #2
 800da22:	2b02      	cmp	r3, #2
 800da24:	d11b      	bne.n	800da5e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	f06f 0202 	mvn.w	r2, #2
 800da2e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2201      	movs	r2, #1
 800da34:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	699b      	ldr	r3, [r3, #24]
 800da3c:	f003 0303 	and.w	r3, r3, #3
 800da40:	2b00      	cmp	r3, #0
 800da42:	d003      	beq.n	800da4c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f000 f9b1 	bl	800ddac <HAL_TIM_IC_CaptureCallback>
 800da4a:	e005      	b.n	800da58 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f000 f9a3 	bl	800dd98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f000 f9b4 	bl	800ddc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2200      	movs	r2, #0
 800da5c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	691b      	ldr	r3, [r3, #16]
 800da64:	f003 0304 	and.w	r3, r3, #4
 800da68:	2b04      	cmp	r3, #4
 800da6a:	d122      	bne.n	800dab2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	68db      	ldr	r3, [r3, #12]
 800da72:	f003 0304 	and.w	r3, r3, #4
 800da76:	2b04      	cmp	r3, #4
 800da78:	d11b      	bne.n	800dab2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	f06f 0204 	mvn.w	r2, #4
 800da82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2202      	movs	r2, #2
 800da88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	699b      	ldr	r3, [r3, #24]
 800da90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800da94:	2b00      	cmp	r3, #0
 800da96:	d003      	beq.n	800daa0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f000 f987 	bl	800ddac <HAL_TIM_IC_CaptureCallback>
 800da9e:	e005      	b.n	800daac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f000 f979 	bl	800dd98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f000 f98a 	bl	800ddc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2200      	movs	r2, #0
 800dab0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	691b      	ldr	r3, [r3, #16]
 800dab8:	f003 0308 	and.w	r3, r3, #8
 800dabc:	2b08      	cmp	r3, #8
 800dabe:	d122      	bne.n	800db06 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	68db      	ldr	r3, [r3, #12]
 800dac6:	f003 0308 	and.w	r3, r3, #8
 800daca:	2b08      	cmp	r3, #8
 800dacc:	d11b      	bne.n	800db06 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	f06f 0208 	mvn.w	r2, #8
 800dad6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2204      	movs	r2, #4
 800dadc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	69db      	ldr	r3, [r3, #28]
 800dae4:	f003 0303 	and.w	r3, r3, #3
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d003      	beq.n	800daf4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f000 f95d 	bl	800ddac <HAL_TIM_IC_CaptureCallback>
 800daf2:	e005      	b.n	800db00 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f000 f94f 	bl	800dd98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f000 f960 	bl	800ddc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2200      	movs	r2, #0
 800db04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	691b      	ldr	r3, [r3, #16]
 800db0c:	f003 0310 	and.w	r3, r3, #16
 800db10:	2b10      	cmp	r3, #16
 800db12:	d122      	bne.n	800db5a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	68db      	ldr	r3, [r3, #12]
 800db1a:	f003 0310 	and.w	r3, r3, #16
 800db1e:	2b10      	cmp	r3, #16
 800db20:	d11b      	bne.n	800db5a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	f06f 0210 	mvn.w	r2, #16
 800db2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2208      	movs	r2, #8
 800db30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	69db      	ldr	r3, [r3, #28]
 800db38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d003      	beq.n	800db48 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f000 f933 	bl	800ddac <HAL_TIM_IC_CaptureCallback>
 800db46:	e005      	b.n	800db54 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f000 f925 	bl	800dd98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f000 f936 	bl	800ddc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2200      	movs	r2, #0
 800db58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	691b      	ldr	r3, [r3, #16]
 800db60:	f003 0301 	and.w	r3, r3, #1
 800db64:	2b01      	cmp	r3, #1
 800db66:	d10e      	bne.n	800db86 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	68db      	ldr	r3, [r3, #12]
 800db6e:	f003 0301 	and.w	r3, r3, #1
 800db72:	2b01      	cmp	r3, #1
 800db74:	d107      	bne.n	800db86 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	f06f 0201 	mvn.w	r2, #1
 800db7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f7f4 fef1 	bl	8002968 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	691b      	ldr	r3, [r3, #16]
 800db8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db90:	2b80      	cmp	r3, #128	; 0x80
 800db92:	d10e      	bne.n	800dbb2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	68db      	ldr	r3, [r3, #12]
 800db9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db9e:	2b80      	cmp	r3, #128	; 0x80
 800dba0:	d107      	bne.n	800dbb2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dbaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f000 fbf1 	bl	800e394 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	691b      	ldr	r3, [r3, #16]
 800dbb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbbc:	2b40      	cmp	r3, #64	; 0x40
 800dbbe:	d10e      	bne.n	800dbde <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	68db      	ldr	r3, [r3, #12]
 800dbc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbca:	2b40      	cmp	r3, #64	; 0x40
 800dbcc:	d107      	bne.n	800dbde <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dbd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	f000 f8fb 	bl	800ddd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	691b      	ldr	r3, [r3, #16]
 800dbe4:	f003 0320 	and.w	r3, r3, #32
 800dbe8:	2b20      	cmp	r3, #32
 800dbea:	d10e      	bne.n	800dc0a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	68db      	ldr	r3, [r3, #12]
 800dbf2:	f003 0320 	and.w	r3, r3, #32
 800dbf6:	2b20      	cmp	r3, #32
 800dbf8:	d107      	bne.n	800dc0a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	f06f 0220 	mvn.w	r2, #32
 800dc02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f000 fbbb 	bl	800e380 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dc0a:	bf00      	nop
 800dc0c:	3708      	adds	r7, #8
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}
	...

0800dc14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b086      	sub	sp, #24
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	60f8      	str	r0, [r7, #12]
 800dc1c:	60b9      	str	r1, [r7, #8]
 800dc1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dc20:	2300      	movs	r3, #0
 800dc22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc2a:	2b01      	cmp	r3, #1
 800dc2c:	d101      	bne.n	800dc32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800dc2e:	2302      	movs	r3, #2
 800dc30:	e0ae      	b.n	800dd90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	2201      	movs	r2, #1
 800dc36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2b0c      	cmp	r3, #12
 800dc3e:	f200 809f 	bhi.w	800dd80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800dc42:	a201      	add	r2, pc, #4	; (adr r2, 800dc48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800dc44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc48:	0800dc7d 	.word	0x0800dc7d
 800dc4c:	0800dd81 	.word	0x0800dd81
 800dc50:	0800dd81 	.word	0x0800dd81
 800dc54:	0800dd81 	.word	0x0800dd81
 800dc58:	0800dcbd 	.word	0x0800dcbd
 800dc5c:	0800dd81 	.word	0x0800dd81
 800dc60:	0800dd81 	.word	0x0800dd81
 800dc64:	0800dd81 	.word	0x0800dd81
 800dc68:	0800dcff 	.word	0x0800dcff
 800dc6c:	0800dd81 	.word	0x0800dd81
 800dc70:	0800dd81 	.word	0x0800dd81
 800dc74:	0800dd81 	.word	0x0800dd81
 800dc78:	0800dd3f 	.word	0x0800dd3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	68b9      	ldr	r1, [r7, #8]
 800dc82:	4618      	mov	r0, r3
 800dc84:	f000 f950 	bl	800df28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	699a      	ldr	r2, [r3, #24]
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f042 0208 	orr.w	r2, r2, #8
 800dc96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	699a      	ldr	r2, [r3, #24]
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	f022 0204 	bic.w	r2, r2, #4
 800dca6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	6999      	ldr	r1, [r3, #24]
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	691a      	ldr	r2, [r3, #16]
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	430a      	orrs	r2, r1
 800dcb8:	619a      	str	r2, [r3, #24]
      break;
 800dcba:	e064      	b.n	800dd86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	68b9      	ldr	r1, [r7, #8]
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f000 f9a0 	bl	800e008 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	699a      	ldr	r2, [r3, #24]
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dcd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	699a      	ldr	r2, [r3, #24]
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dce6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	6999      	ldr	r1, [r3, #24]
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	691b      	ldr	r3, [r3, #16]
 800dcf2:	021a      	lsls	r2, r3, #8
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	430a      	orrs	r2, r1
 800dcfa:	619a      	str	r2, [r3, #24]
      break;
 800dcfc:	e043      	b.n	800dd86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	68b9      	ldr	r1, [r7, #8]
 800dd04:	4618      	mov	r0, r3
 800dd06:	f000 f9f5 	bl	800e0f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	69da      	ldr	r2, [r3, #28]
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	f042 0208 	orr.w	r2, r2, #8
 800dd18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	69da      	ldr	r2, [r3, #28]
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	f022 0204 	bic.w	r2, r2, #4
 800dd28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	69d9      	ldr	r1, [r3, #28]
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	691a      	ldr	r2, [r3, #16]
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	430a      	orrs	r2, r1
 800dd3a:	61da      	str	r2, [r3, #28]
      break;
 800dd3c:	e023      	b.n	800dd86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	68b9      	ldr	r1, [r7, #8]
 800dd44:	4618      	mov	r0, r3
 800dd46:	f000 fa49 	bl	800e1dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	69da      	ldr	r2, [r3, #28]
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dd58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	69da      	ldr	r2, [r3, #28]
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dd68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	69d9      	ldr	r1, [r3, #28]
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	691b      	ldr	r3, [r3, #16]
 800dd74:	021a      	lsls	r2, r3, #8
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	430a      	orrs	r2, r1
 800dd7c:	61da      	str	r2, [r3, #28]
      break;
 800dd7e:	e002      	b.n	800dd86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800dd80:	2301      	movs	r3, #1
 800dd82:	75fb      	strb	r3, [r7, #23]
      break;
 800dd84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	2200      	movs	r2, #0
 800dd8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dd8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3718      	adds	r7, #24
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dd98:	b480      	push	{r7}
 800dd9a:	b083      	sub	sp, #12
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dda0:	bf00      	nop
 800dda2:	370c      	adds	r7, #12
 800dda4:	46bd      	mov	sp, r7
 800dda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddaa:	4770      	bx	lr

0800ddac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ddac:	b480      	push	{r7}
 800ddae:	b083      	sub	sp, #12
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ddb4:	bf00      	nop
 800ddb6:	370c      	adds	r7, #12
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbe:	4770      	bx	lr

0800ddc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	b083      	sub	sp, #12
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ddc8:	bf00      	nop
 800ddca:	370c      	adds	r7, #12
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd2:	4770      	bx	lr

0800ddd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ddd4:	b480      	push	{r7}
 800ddd6:	b083      	sub	sp, #12
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dddc:	bf00      	nop
 800ddde:	370c      	adds	r7, #12
 800dde0:	46bd      	mov	sp, r7
 800dde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde6:	4770      	bx	lr

0800dde8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dde8:	b480      	push	{r7}
 800ddea:	b085      	sub	sp, #20
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
 800ddf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	4a40      	ldr	r2, [pc, #256]	; (800defc <TIM_Base_SetConfig+0x114>)
 800ddfc:	4293      	cmp	r3, r2
 800ddfe:	d013      	beq.n	800de28 <TIM_Base_SetConfig+0x40>
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de06:	d00f      	beq.n	800de28 <TIM_Base_SetConfig+0x40>
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	4a3d      	ldr	r2, [pc, #244]	; (800df00 <TIM_Base_SetConfig+0x118>)
 800de0c:	4293      	cmp	r3, r2
 800de0e:	d00b      	beq.n	800de28 <TIM_Base_SetConfig+0x40>
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	4a3c      	ldr	r2, [pc, #240]	; (800df04 <TIM_Base_SetConfig+0x11c>)
 800de14:	4293      	cmp	r3, r2
 800de16:	d007      	beq.n	800de28 <TIM_Base_SetConfig+0x40>
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	4a3b      	ldr	r2, [pc, #236]	; (800df08 <TIM_Base_SetConfig+0x120>)
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d003      	beq.n	800de28 <TIM_Base_SetConfig+0x40>
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	4a3a      	ldr	r2, [pc, #232]	; (800df0c <TIM_Base_SetConfig+0x124>)
 800de24:	4293      	cmp	r3, r2
 800de26:	d108      	bne.n	800de3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800de30:	683b      	ldr	r3, [r7, #0]
 800de32:	685b      	ldr	r3, [r3, #4]
 800de34:	68fa      	ldr	r2, [r7, #12]
 800de36:	4313      	orrs	r3, r2
 800de38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	4a2f      	ldr	r2, [pc, #188]	; (800defc <TIM_Base_SetConfig+0x114>)
 800de3e:	4293      	cmp	r3, r2
 800de40:	d02b      	beq.n	800de9a <TIM_Base_SetConfig+0xb2>
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de48:	d027      	beq.n	800de9a <TIM_Base_SetConfig+0xb2>
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	4a2c      	ldr	r2, [pc, #176]	; (800df00 <TIM_Base_SetConfig+0x118>)
 800de4e:	4293      	cmp	r3, r2
 800de50:	d023      	beq.n	800de9a <TIM_Base_SetConfig+0xb2>
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	4a2b      	ldr	r2, [pc, #172]	; (800df04 <TIM_Base_SetConfig+0x11c>)
 800de56:	4293      	cmp	r3, r2
 800de58:	d01f      	beq.n	800de9a <TIM_Base_SetConfig+0xb2>
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	4a2a      	ldr	r2, [pc, #168]	; (800df08 <TIM_Base_SetConfig+0x120>)
 800de5e:	4293      	cmp	r3, r2
 800de60:	d01b      	beq.n	800de9a <TIM_Base_SetConfig+0xb2>
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	4a29      	ldr	r2, [pc, #164]	; (800df0c <TIM_Base_SetConfig+0x124>)
 800de66:	4293      	cmp	r3, r2
 800de68:	d017      	beq.n	800de9a <TIM_Base_SetConfig+0xb2>
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	4a28      	ldr	r2, [pc, #160]	; (800df10 <TIM_Base_SetConfig+0x128>)
 800de6e:	4293      	cmp	r3, r2
 800de70:	d013      	beq.n	800de9a <TIM_Base_SetConfig+0xb2>
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	4a27      	ldr	r2, [pc, #156]	; (800df14 <TIM_Base_SetConfig+0x12c>)
 800de76:	4293      	cmp	r3, r2
 800de78:	d00f      	beq.n	800de9a <TIM_Base_SetConfig+0xb2>
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	4a26      	ldr	r2, [pc, #152]	; (800df18 <TIM_Base_SetConfig+0x130>)
 800de7e:	4293      	cmp	r3, r2
 800de80:	d00b      	beq.n	800de9a <TIM_Base_SetConfig+0xb2>
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	4a25      	ldr	r2, [pc, #148]	; (800df1c <TIM_Base_SetConfig+0x134>)
 800de86:	4293      	cmp	r3, r2
 800de88:	d007      	beq.n	800de9a <TIM_Base_SetConfig+0xb2>
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	4a24      	ldr	r2, [pc, #144]	; (800df20 <TIM_Base_SetConfig+0x138>)
 800de8e:	4293      	cmp	r3, r2
 800de90:	d003      	beq.n	800de9a <TIM_Base_SetConfig+0xb2>
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	4a23      	ldr	r2, [pc, #140]	; (800df24 <TIM_Base_SetConfig+0x13c>)
 800de96:	4293      	cmp	r3, r2
 800de98:	d108      	bne.n	800deac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	68db      	ldr	r3, [r3, #12]
 800dea6:	68fa      	ldr	r2, [r7, #12]
 800dea8:	4313      	orrs	r3, r2
 800deaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	695b      	ldr	r3, [r3, #20]
 800deb6:	4313      	orrs	r3, r2
 800deb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	68fa      	ldr	r2, [r7, #12]
 800debe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	689a      	ldr	r2, [r3, #8]
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	681a      	ldr	r2, [r3, #0]
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	4a0a      	ldr	r2, [pc, #40]	; (800defc <TIM_Base_SetConfig+0x114>)
 800ded4:	4293      	cmp	r3, r2
 800ded6:	d003      	beq.n	800dee0 <TIM_Base_SetConfig+0xf8>
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	4a0c      	ldr	r2, [pc, #48]	; (800df0c <TIM_Base_SetConfig+0x124>)
 800dedc:	4293      	cmp	r3, r2
 800dede:	d103      	bne.n	800dee8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	691a      	ldr	r2, [r3, #16]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2201      	movs	r2, #1
 800deec:	615a      	str	r2, [r3, #20]
}
 800deee:	bf00      	nop
 800def0:	3714      	adds	r7, #20
 800def2:	46bd      	mov	sp, r7
 800def4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def8:	4770      	bx	lr
 800defa:	bf00      	nop
 800defc:	40010000 	.word	0x40010000
 800df00:	40000400 	.word	0x40000400
 800df04:	40000800 	.word	0x40000800
 800df08:	40000c00 	.word	0x40000c00
 800df0c:	40010400 	.word	0x40010400
 800df10:	40014000 	.word	0x40014000
 800df14:	40014400 	.word	0x40014400
 800df18:	40014800 	.word	0x40014800
 800df1c:	40001800 	.word	0x40001800
 800df20:	40001c00 	.word	0x40001c00
 800df24:	40002000 	.word	0x40002000

0800df28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800df28:	b480      	push	{r7}
 800df2a:	b087      	sub	sp, #28
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6a1b      	ldr	r3, [r3, #32]
 800df36:	f023 0201 	bic.w	r2, r3, #1
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6a1b      	ldr	r3, [r3, #32]
 800df42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	685b      	ldr	r3, [r3, #4]
 800df48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	699b      	ldr	r3, [r3, #24]
 800df4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	f023 0303 	bic.w	r3, r3, #3
 800df5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	68fa      	ldr	r2, [r7, #12]
 800df66:	4313      	orrs	r3, r2
 800df68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	f023 0302 	bic.w	r3, r3, #2
 800df70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	689b      	ldr	r3, [r3, #8]
 800df76:	697a      	ldr	r2, [r7, #20]
 800df78:	4313      	orrs	r3, r2
 800df7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	4a20      	ldr	r2, [pc, #128]	; (800e000 <TIM_OC1_SetConfig+0xd8>)
 800df80:	4293      	cmp	r3, r2
 800df82:	d003      	beq.n	800df8c <TIM_OC1_SetConfig+0x64>
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	4a1f      	ldr	r2, [pc, #124]	; (800e004 <TIM_OC1_SetConfig+0xdc>)
 800df88:	4293      	cmp	r3, r2
 800df8a:	d10c      	bne.n	800dfa6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	f023 0308 	bic.w	r3, r3, #8
 800df92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	68db      	ldr	r3, [r3, #12]
 800df98:	697a      	ldr	r2, [r7, #20]
 800df9a:	4313      	orrs	r3, r2
 800df9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	f023 0304 	bic.w	r3, r3, #4
 800dfa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	4a15      	ldr	r2, [pc, #84]	; (800e000 <TIM_OC1_SetConfig+0xd8>)
 800dfaa:	4293      	cmp	r3, r2
 800dfac:	d003      	beq.n	800dfb6 <TIM_OC1_SetConfig+0x8e>
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	4a14      	ldr	r2, [pc, #80]	; (800e004 <TIM_OC1_SetConfig+0xdc>)
 800dfb2:	4293      	cmp	r3, r2
 800dfb4:	d111      	bne.n	800dfda <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dfb6:	693b      	ldr	r3, [r7, #16]
 800dfb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dfbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dfbe:	693b      	ldr	r3, [r7, #16]
 800dfc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dfc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	695b      	ldr	r3, [r3, #20]
 800dfca:	693a      	ldr	r2, [r7, #16]
 800dfcc:	4313      	orrs	r3, r2
 800dfce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	699b      	ldr	r3, [r3, #24]
 800dfd4:	693a      	ldr	r2, [r7, #16]
 800dfd6:	4313      	orrs	r3, r2
 800dfd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	693a      	ldr	r2, [r7, #16]
 800dfde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	68fa      	ldr	r2, [r7, #12]
 800dfe4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	685a      	ldr	r2, [r3, #4]
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	697a      	ldr	r2, [r7, #20]
 800dff2:	621a      	str	r2, [r3, #32]
}
 800dff4:	bf00      	nop
 800dff6:	371c      	adds	r7, #28
 800dff8:	46bd      	mov	sp, r7
 800dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffe:	4770      	bx	lr
 800e000:	40010000 	.word	0x40010000
 800e004:	40010400 	.word	0x40010400

0800e008 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e008:	b480      	push	{r7}
 800e00a:	b087      	sub	sp, #28
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
 800e010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6a1b      	ldr	r3, [r3, #32]
 800e016:	f023 0210 	bic.w	r2, r3, #16
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6a1b      	ldr	r3, [r3, #32]
 800e022:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	685b      	ldr	r3, [r3, #4]
 800e028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	699b      	ldr	r3, [r3, #24]
 800e02e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e03e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	021b      	lsls	r3, r3, #8
 800e046:	68fa      	ldr	r2, [r7, #12]
 800e048:	4313      	orrs	r3, r2
 800e04a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	f023 0320 	bic.w	r3, r3, #32
 800e052:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	689b      	ldr	r3, [r3, #8]
 800e058:	011b      	lsls	r3, r3, #4
 800e05a:	697a      	ldr	r2, [r7, #20]
 800e05c:	4313      	orrs	r3, r2
 800e05e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	4a22      	ldr	r2, [pc, #136]	; (800e0ec <TIM_OC2_SetConfig+0xe4>)
 800e064:	4293      	cmp	r3, r2
 800e066:	d003      	beq.n	800e070 <TIM_OC2_SetConfig+0x68>
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	4a21      	ldr	r2, [pc, #132]	; (800e0f0 <TIM_OC2_SetConfig+0xe8>)
 800e06c:	4293      	cmp	r3, r2
 800e06e:	d10d      	bne.n	800e08c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	68db      	ldr	r3, [r3, #12]
 800e07c:	011b      	lsls	r3, r3, #4
 800e07e:	697a      	ldr	r2, [r7, #20]
 800e080:	4313      	orrs	r3, r2
 800e082:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e08a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	4a17      	ldr	r2, [pc, #92]	; (800e0ec <TIM_OC2_SetConfig+0xe4>)
 800e090:	4293      	cmp	r3, r2
 800e092:	d003      	beq.n	800e09c <TIM_OC2_SetConfig+0x94>
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	4a16      	ldr	r2, [pc, #88]	; (800e0f0 <TIM_OC2_SetConfig+0xe8>)
 800e098:	4293      	cmp	r3, r2
 800e09a:	d113      	bne.n	800e0c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e0a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e0a4:	693b      	ldr	r3, [r7, #16]
 800e0a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e0aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	695b      	ldr	r3, [r3, #20]
 800e0b0:	009b      	lsls	r3, r3, #2
 800e0b2:	693a      	ldr	r2, [r7, #16]
 800e0b4:	4313      	orrs	r3, r2
 800e0b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	699b      	ldr	r3, [r3, #24]
 800e0bc:	009b      	lsls	r3, r3, #2
 800e0be:	693a      	ldr	r2, [r7, #16]
 800e0c0:	4313      	orrs	r3, r2
 800e0c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	693a      	ldr	r2, [r7, #16]
 800e0c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	68fa      	ldr	r2, [r7, #12]
 800e0ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	685a      	ldr	r2, [r3, #4]
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	697a      	ldr	r2, [r7, #20]
 800e0dc:	621a      	str	r2, [r3, #32]
}
 800e0de:	bf00      	nop
 800e0e0:	371c      	adds	r7, #28
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e8:	4770      	bx	lr
 800e0ea:	bf00      	nop
 800e0ec:	40010000 	.word	0x40010000
 800e0f0:	40010400 	.word	0x40010400

0800e0f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	b087      	sub	sp, #28
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
 800e0fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6a1b      	ldr	r3, [r3, #32]
 800e102:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6a1b      	ldr	r3, [r3, #32]
 800e10e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	685b      	ldr	r3, [r3, #4]
 800e114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	69db      	ldr	r3, [r3, #28]
 800e11a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	f023 0303 	bic.w	r3, r3, #3
 800e12a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	68fa      	ldr	r2, [r7, #12]
 800e132:	4313      	orrs	r3, r2
 800e134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e136:	697b      	ldr	r3, [r7, #20]
 800e138:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e13c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	689b      	ldr	r3, [r3, #8]
 800e142:	021b      	lsls	r3, r3, #8
 800e144:	697a      	ldr	r2, [r7, #20]
 800e146:	4313      	orrs	r3, r2
 800e148:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	4a21      	ldr	r2, [pc, #132]	; (800e1d4 <TIM_OC3_SetConfig+0xe0>)
 800e14e:	4293      	cmp	r3, r2
 800e150:	d003      	beq.n	800e15a <TIM_OC3_SetConfig+0x66>
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	4a20      	ldr	r2, [pc, #128]	; (800e1d8 <TIM_OC3_SetConfig+0xe4>)
 800e156:	4293      	cmp	r3, r2
 800e158:	d10d      	bne.n	800e176 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e160:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	68db      	ldr	r3, [r3, #12]
 800e166:	021b      	lsls	r3, r3, #8
 800e168:	697a      	ldr	r2, [r7, #20]
 800e16a:	4313      	orrs	r3, r2
 800e16c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e174:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	4a16      	ldr	r2, [pc, #88]	; (800e1d4 <TIM_OC3_SetConfig+0xe0>)
 800e17a:	4293      	cmp	r3, r2
 800e17c:	d003      	beq.n	800e186 <TIM_OC3_SetConfig+0x92>
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	4a15      	ldr	r2, [pc, #84]	; (800e1d8 <TIM_OC3_SetConfig+0xe4>)
 800e182:	4293      	cmp	r3, r2
 800e184:	d113      	bne.n	800e1ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e18c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	695b      	ldr	r3, [r3, #20]
 800e19a:	011b      	lsls	r3, r3, #4
 800e19c:	693a      	ldr	r2, [r7, #16]
 800e19e:	4313      	orrs	r3, r2
 800e1a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	699b      	ldr	r3, [r3, #24]
 800e1a6:	011b      	lsls	r3, r3, #4
 800e1a8:	693a      	ldr	r2, [r7, #16]
 800e1aa:	4313      	orrs	r3, r2
 800e1ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	693a      	ldr	r2, [r7, #16]
 800e1b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	68fa      	ldr	r2, [r7, #12]
 800e1b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	685a      	ldr	r2, [r3, #4]
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	697a      	ldr	r2, [r7, #20]
 800e1c6:	621a      	str	r2, [r3, #32]
}
 800e1c8:	bf00      	nop
 800e1ca:	371c      	adds	r7, #28
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr
 800e1d4:	40010000 	.word	0x40010000
 800e1d8:	40010400 	.word	0x40010400

0800e1dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e1dc:	b480      	push	{r7}
 800e1de:	b087      	sub	sp, #28
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
 800e1e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6a1b      	ldr	r3, [r3, #32]
 800e1ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6a1b      	ldr	r3, [r3, #32]
 800e1f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	685b      	ldr	r3, [r3, #4]
 800e1fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	69db      	ldr	r3, [r3, #28]
 800e202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e20a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	021b      	lsls	r3, r3, #8
 800e21a:	68fa      	ldr	r2, [r7, #12]
 800e21c:	4313      	orrs	r3, r2
 800e21e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e220:	693b      	ldr	r3, [r7, #16]
 800e222:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e226:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	689b      	ldr	r3, [r3, #8]
 800e22c:	031b      	lsls	r3, r3, #12
 800e22e:	693a      	ldr	r2, [r7, #16]
 800e230:	4313      	orrs	r3, r2
 800e232:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	4a12      	ldr	r2, [pc, #72]	; (800e280 <TIM_OC4_SetConfig+0xa4>)
 800e238:	4293      	cmp	r3, r2
 800e23a:	d003      	beq.n	800e244 <TIM_OC4_SetConfig+0x68>
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	4a11      	ldr	r2, [pc, #68]	; (800e284 <TIM_OC4_SetConfig+0xa8>)
 800e240:	4293      	cmp	r3, r2
 800e242:	d109      	bne.n	800e258 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e244:	697b      	ldr	r3, [r7, #20]
 800e246:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e24a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	695b      	ldr	r3, [r3, #20]
 800e250:	019b      	lsls	r3, r3, #6
 800e252:	697a      	ldr	r2, [r7, #20]
 800e254:	4313      	orrs	r3, r2
 800e256:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	697a      	ldr	r2, [r7, #20]
 800e25c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	68fa      	ldr	r2, [r7, #12]
 800e262:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	685a      	ldr	r2, [r3, #4]
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	693a      	ldr	r2, [r7, #16]
 800e270:	621a      	str	r2, [r3, #32]
}
 800e272:	bf00      	nop
 800e274:	371c      	adds	r7, #28
 800e276:	46bd      	mov	sp, r7
 800e278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27c:	4770      	bx	lr
 800e27e:	bf00      	nop
 800e280:	40010000 	.word	0x40010000
 800e284:	40010400 	.word	0x40010400

0800e288 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e288:	b480      	push	{r7}
 800e28a:	b085      	sub	sp, #20
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
 800e290:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e298:	2b01      	cmp	r3, #1
 800e29a:	d101      	bne.n	800e2a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e29c:	2302      	movs	r3, #2
 800e29e:	e05a      	b.n	800e356 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	2201      	movs	r2, #1
 800e2a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2202      	movs	r2, #2
 800e2ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	685b      	ldr	r3, [r3, #4]
 800e2b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	689b      	ldr	r3, [r3, #8]
 800e2be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e2c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	68fa      	ldr	r2, [r7, #12]
 800e2ce:	4313      	orrs	r3, r2
 800e2d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	68fa      	ldr	r2, [r7, #12]
 800e2d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	4a21      	ldr	r2, [pc, #132]	; (800e364 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e2e0:	4293      	cmp	r3, r2
 800e2e2:	d022      	beq.n	800e32a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2ec:	d01d      	beq.n	800e32a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	4a1d      	ldr	r2, [pc, #116]	; (800e368 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e2f4:	4293      	cmp	r3, r2
 800e2f6:	d018      	beq.n	800e32a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	4a1b      	ldr	r2, [pc, #108]	; (800e36c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e2fe:	4293      	cmp	r3, r2
 800e300:	d013      	beq.n	800e32a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	4a1a      	ldr	r2, [pc, #104]	; (800e370 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e308:	4293      	cmp	r3, r2
 800e30a:	d00e      	beq.n	800e32a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	4a18      	ldr	r2, [pc, #96]	; (800e374 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e312:	4293      	cmp	r3, r2
 800e314:	d009      	beq.n	800e32a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	4a17      	ldr	r2, [pc, #92]	; (800e378 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e31c:	4293      	cmp	r3, r2
 800e31e:	d004      	beq.n	800e32a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	4a15      	ldr	r2, [pc, #84]	; (800e37c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e326:	4293      	cmp	r3, r2
 800e328:	d10c      	bne.n	800e344 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e330:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	685b      	ldr	r3, [r3, #4]
 800e336:	68ba      	ldr	r2, [r7, #8]
 800e338:	4313      	orrs	r3, r2
 800e33a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	68ba      	ldr	r2, [r7, #8]
 800e342:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2201      	movs	r2, #1
 800e348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2200      	movs	r2, #0
 800e350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e354:	2300      	movs	r3, #0
}
 800e356:	4618      	mov	r0, r3
 800e358:	3714      	adds	r7, #20
 800e35a:	46bd      	mov	sp, r7
 800e35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e360:	4770      	bx	lr
 800e362:	bf00      	nop
 800e364:	40010000 	.word	0x40010000
 800e368:	40000400 	.word	0x40000400
 800e36c:	40000800 	.word	0x40000800
 800e370:	40000c00 	.word	0x40000c00
 800e374:	40010400 	.word	0x40010400
 800e378:	40014000 	.word	0x40014000
 800e37c:	40001800 	.word	0x40001800

0800e380 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e380:	b480      	push	{r7}
 800e382:	b083      	sub	sp, #12
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e388:	bf00      	nop
 800e38a:	370c      	adds	r7, #12
 800e38c:	46bd      	mov	sp, r7
 800e38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e392:	4770      	bx	lr

0800e394 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e394:	b480      	push	{r7}
 800e396:	b083      	sub	sp, #12
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e39c:	bf00      	nop
 800e39e:	370c      	adds	r7, #12
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a6:	4770      	bx	lr

0800e3a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b082      	sub	sp, #8
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d101      	bne.n	800e3ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	e03f      	b.n	800e43a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e3c0:	b2db      	uxtb	r3, r3
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d106      	bne.n	800e3d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e3ce:	6878      	ldr	r0, [r7, #4]
 800e3d0:	f7f4 fd6a 	bl	8002ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2224      	movs	r2, #36	; 0x24
 800e3d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	68da      	ldr	r2, [r3, #12]
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e3ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f000 f9cb 	bl	800e788 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	691a      	ldr	r2, [r3, #16]
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e400:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	695a      	ldr	r2, [r3, #20]
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e410:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	68da      	ldr	r2, [r3, #12]
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e420:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2200      	movs	r2, #0
 800e426:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2220      	movs	r2, #32
 800e42c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2220      	movs	r2, #32
 800e434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800e438:	2300      	movs	r3, #0
}
 800e43a:	4618      	mov	r0, r3
 800e43c:	3708      	adds	r7, #8
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd80      	pop	{r7, pc}

0800e442 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e442:	b580      	push	{r7, lr}
 800e444:	b08a      	sub	sp, #40	; 0x28
 800e446:	af02      	add	r7, sp, #8
 800e448:	60f8      	str	r0, [r7, #12]
 800e44a:	60b9      	str	r1, [r7, #8]
 800e44c:	603b      	str	r3, [r7, #0]
 800e44e:	4613      	mov	r3, r2
 800e450:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800e452:	2300      	movs	r3, #0
 800e454:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e45c:	b2db      	uxtb	r3, r3
 800e45e:	2b20      	cmp	r3, #32
 800e460:	d17c      	bne.n	800e55c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d002      	beq.n	800e46e <HAL_UART_Transmit+0x2c>
 800e468:	88fb      	ldrh	r3, [r7, #6]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d101      	bne.n	800e472 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800e46e:	2301      	movs	r3, #1
 800e470:	e075      	b.n	800e55e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e478:	2b01      	cmp	r3, #1
 800e47a:	d101      	bne.n	800e480 <HAL_UART_Transmit+0x3e>
 800e47c:	2302      	movs	r3, #2
 800e47e:	e06e      	b.n	800e55e <HAL_UART_Transmit+0x11c>
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	2201      	movs	r2, #1
 800e484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	2200      	movs	r2, #0
 800e48c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	2221      	movs	r2, #33	; 0x21
 800e492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e496:	f7f9 ff8f 	bl	80083b8 <HAL_GetTick>
 800e49a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	88fa      	ldrh	r2, [r7, #6]
 800e4a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	88fa      	ldrh	r2, [r7, #6]
 800e4a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	689b      	ldr	r3, [r3, #8]
 800e4ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e4b0:	d108      	bne.n	800e4c4 <HAL_UART_Transmit+0x82>
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	691b      	ldr	r3, [r3, #16]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d104      	bne.n	800e4c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e4be:	68bb      	ldr	r3, [r7, #8]
 800e4c0:	61bb      	str	r3, [r7, #24]
 800e4c2:	e003      	b.n	800e4cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800e4d4:	e02a      	b.n	800e52c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	9300      	str	r3, [sp, #0]
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	2200      	movs	r2, #0
 800e4de:	2180      	movs	r1, #128	; 0x80
 800e4e0:	68f8      	ldr	r0, [r7, #12]
 800e4e2:	f000 f8e2 	bl	800e6aa <UART_WaitOnFlagUntilTimeout>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d001      	beq.n	800e4f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800e4ec:	2303      	movs	r3, #3
 800e4ee:	e036      	b.n	800e55e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800e4f0:	69fb      	ldr	r3, [r7, #28]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d10b      	bne.n	800e50e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e4f6:	69bb      	ldr	r3, [r7, #24]
 800e4f8:	881b      	ldrh	r3, [r3, #0]
 800e4fa:	461a      	mov	r2, r3
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e504:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800e506:	69bb      	ldr	r3, [r7, #24]
 800e508:	3302      	adds	r3, #2
 800e50a:	61bb      	str	r3, [r7, #24]
 800e50c:	e007      	b.n	800e51e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800e50e:	69fb      	ldr	r3, [r7, #28]
 800e510:	781a      	ldrb	r2, [r3, #0]
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800e518:	69fb      	ldr	r3, [r7, #28]
 800e51a:	3301      	adds	r3, #1
 800e51c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e522:	b29b      	uxth	r3, r3
 800e524:	3b01      	subs	r3, #1
 800e526:	b29a      	uxth	r2, r3
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e530:	b29b      	uxth	r3, r3
 800e532:	2b00      	cmp	r3, #0
 800e534:	d1cf      	bne.n	800e4d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	9300      	str	r3, [sp, #0]
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	2200      	movs	r2, #0
 800e53e:	2140      	movs	r1, #64	; 0x40
 800e540:	68f8      	ldr	r0, [r7, #12]
 800e542:	f000 f8b2 	bl	800e6aa <UART_WaitOnFlagUntilTimeout>
 800e546:	4603      	mov	r3, r0
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d001      	beq.n	800e550 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800e54c:	2303      	movs	r3, #3
 800e54e:	e006      	b.n	800e55e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	2220      	movs	r2, #32
 800e554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800e558:	2300      	movs	r3, #0
 800e55a:	e000      	b.n	800e55e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800e55c:	2302      	movs	r3, #2
  }
}
 800e55e:	4618      	mov	r0, r3
 800e560:	3720      	adds	r7, #32
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}

0800e566 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e566:	b580      	push	{r7, lr}
 800e568:	b08a      	sub	sp, #40	; 0x28
 800e56a:	af02      	add	r7, sp, #8
 800e56c:	60f8      	str	r0, [r7, #12]
 800e56e:	60b9      	str	r1, [r7, #8]
 800e570:	603b      	str	r3, [r7, #0]
 800e572:	4613      	mov	r3, r2
 800e574:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800e576:	2300      	movs	r3, #0
 800e578:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e580:	b2db      	uxtb	r3, r3
 800e582:	2b20      	cmp	r3, #32
 800e584:	f040 808c 	bne.w	800e6a0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d002      	beq.n	800e594 <HAL_UART_Receive+0x2e>
 800e58e:	88fb      	ldrh	r3, [r7, #6]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d101      	bne.n	800e598 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800e594:	2301      	movs	r3, #1
 800e596:	e084      	b.n	800e6a2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e59e:	2b01      	cmp	r3, #1
 800e5a0:	d101      	bne.n	800e5a6 <HAL_UART_Receive+0x40>
 800e5a2:	2302      	movs	r3, #2
 800e5a4:	e07d      	b.n	800e6a2 <HAL_UART_Receive+0x13c>
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	2201      	movs	r2, #1
 800e5aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	2222      	movs	r2, #34	; 0x22
 800e5b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	2200      	movs	r2, #0
 800e5c0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e5c2:	f7f9 fef9 	bl	80083b8 <HAL_GetTick>
 800e5c6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	88fa      	ldrh	r2, [r7, #6]
 800e5cc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	88fa      	ldrh	r2, [r7, #6]
 800e5d2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	689b      	ldr	r3, [r3, #8]
 800e5d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e5dc:	d108      	bne.n	800e5f0 <HAL_UART_Receive+0x8a>
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	691b      	ldr	r3, [r3, #16]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d104      	bne.n	800e5f0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e5ea:	68bb      	ldr	r3, [r7, #8]
 800e5ec:	61bb      	str	r3, [r7, #24]
 800e5ee:	e003      	b.n	800e5f8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800e600:	e043      	b.n	800e68a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	9300      	str	r3, [sp, #0]
 800e606:	697b      	ldr	r3, [r7, #20]
 800e608:	2200      	movs	r2, #0
 800e60a:	2120      	movs	r1, #32
 800e60c:	68f8      	ldr	r0, [r7, #12]
 800e60e:	f000 f84c 	bl	800e6aa <UART_WaitOnFlagUntilTimeout>
 800e612:	4603      	mov	r3, r0
 800e614:	2b00      	cmp	r3, #0
 800e616:	d001      	beq.n	800e61c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800e618:	2303      	movs	r3, #3
 800e61a:	e042      	b.n	800e6a2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800e61c:	69fb      	ldr	r3, [r7, #28]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d10c      	bne.n	800e63c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	685b      	ldr	r3, [r3, #4]
 800e628:	b29b      	uxth	r3, r3
 800e62a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e62e:	b29a      	uxth	r2, r3
 800e630:	69bb      	ldr	r3, [r7, #24]
 800e632:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800e634:	69bb      	ldr	r3, [r7, #24]
 800e636:	3302      	adds	r3, #2
 800e638:	61bb      	str	r3, [r7, #24]
 800e63a:	e01f      	b.n	800e67c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	689b      	ldr	r3, [r3, #8]
 800e640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e644:	d007      	beq.n	800e656 <HAL_UART_Receive+0xf0>
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	689b      	ldr	r3, [r3, #8]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d10a      	bne.n	800e664 <HAL_UART_Receive+0xfe>
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	691b      	ldr	r3, [r3, #16]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d106      	bne.n	800e664 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	685b      	ldr	r3, [r3, #4]
 800e65c:	b2da      	uxtb	r2, r3
 800e65e:	69fb      	ldr	r3, [r7, #28]
 800e660:	701a      	strb	r2, [r3, #0]
 800e662:	e008      	b.n	800e676 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	685b      	ldr	r3, [r3, #4]
 800e66a:	b2db      	uxtb	r3, r3
 800e66c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e670:	b2da      	uxtb	r2, r3
 800e672:	69fb      	ldr	r3, [r7, #28]
 800e674:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800e676:	69fb      	ldr	r3, [r7, #28]
 800e678:	3301      	adds	r3, #1
 800e67a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e680:	b29b      	uxth	r3, r3
 800e682:	3b01      	subs	r3, #1
 800e684:	b29a      	uxth	r2, r3
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e68e:	b29b      	uxth	r3, r3
 800e690:	2b00      	cmp	r3, #0
 800e692:	d1b6      	bne.n	800e602 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	2220      	movs	r2, #32
 800e698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800e69c:	2300      	movs	r3, #0
 800e69e:	e000      	b.n	800e6a2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800e6a0:	2302      	movs	r3, #2
  }
}
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	3720      	adds	r7, #32
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	bd80      	pop	{r7, pc}

0800e6aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800e6aa:	b580      	push	{r7, lr}
 800e6ac:	b090      	sub	sp, #64	; 0x40
 800e6ae:	af00      	add	r7, sp, #0
 800e6b0:	60f8      	str	r0, [r7, #12]
 800e6b2:	60b9      	str	r1, [r7, #8]
 800e6b4:	603b      	str	r3, [r7, #0]
 800e6b6:	4613      	mov	r3, r2
 800e6b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e6ba:	e050      	b.n	800e75e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e6bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6c2:	d04c      	beq.n	800e75e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800e6c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d007      	beq.n	800e6da <UART_WaitOnFlagUntilTimeout+0x30>
 800e6ca:	f7f9 fe75 	bl	80083b8 <HAL_GetTick>
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	1ad3      	subs	r3, r2, r3
 800e6d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	d241      	bcs.n	800e75e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	330c      	adds	r3, #12
 800e6e0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e4:	e853 3f00 	ldrex	r3, [r3]
 800e6e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e6f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	330c      	adds	r3, #12
 800e6f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e6fa:	637a      	str	r2, [r7, #52]	; 0x34
 800e6fc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e700:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e702:	e841 2300 	strex	r3, r2, [r1]
 800e706:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d1e5      	bne.n	800e6da <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	3314      	adds	r3, #20
 800e714:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	e853 3f00 	ldrex	r3, [r3]
 800e71c:	613b      	str	r3, [r7, #16]
   return(result);
 800e71e:	693b      	ldr	r3, [r7, #16]
 800e720:	f023 0301 	bic.w	r3, r3, #1
 800e724:	63bb      	str	r3, [r7, #56]	; 0x38
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	3314      	adds	r3, #20
 800e72c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e72e:	623a      	str	r2, [r7, #32]
 800e730:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e732:	69f9      	ldr	r1, [r7, #28]
 800e734:	6a3a      	ldr	r2, [r7, #32]
 800e736:	e841 2300 	strex	r3, r2, [r1]
 800e73a:	61bb      	str	r3, [r7, #24]
   return(result);
 800e73c:	69bb      	ldr	r3, [r7, #24]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d1e5      	bne.n	800e70e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	2220      	movs	r2, #32
 800e746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	2220      	movs	r2, #32
 800e74e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	2200      	movs	r2, #0
 800e756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800e75a:	2303      	movs	r3, #3
 800e75c:	e00f      	b.n	800e77e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	681a      	ldr	r2, [r3, #0]
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	4013      	ands	r3, r2
 800e768:	68ba      	ldr	r2, [r7, #8]
 800e76a:	429a      	cmp	r2, r3
 800e76c:	bf0c      	ite	eq
 800e76e:	2301      	moveq	r3, #1
 800e770:	2300      	movne	r3, #0
 800e772:	b2db      	uxtb	r3, r3
 800e774:	461a      	mov	r2, r3
 800e776:	79fb      	ldrb	r3, [r7, #7]
 800e778:	429a      	cmp	r2, r3
 800e77a:	d09f      	beq.n	800e6bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e77c:	2300      	movs	r3, #0
}
 800e77e:	4618      	mov	r0, r3
 800e780:	3740      	adds	r7, #64	; 0x40
 800e782:	46bd      	mov	sp, r7
 800e784:	bd80      	pop	{r7, pc}
	...

0800e788 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e78c:	b09f      	sub	sp, #124	; 0x7c
 800e78e:	af00      	add	r7, sp, #0
 800e790:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	691b      	ldr	r3, [r3, #16]
 800e798:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e79c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e79e:	68d9      	ldr	r1, [r3, #12]
 800e7a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7a2:	681a      	ldr	r2, [r3, #0]
 800e7a4:	ea40 0301 	orr.w	r3, r0, r1
 800e7a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e7aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7ac:	689a      	ldr	r2, [r3, #8]
 800e7ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7b0:	691b      	ldr	r3, [r3, #16]
 800e7b2:	431a      	orrs	r2, r3
 800e7b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7b6:	695b      	ldr	r3, [r3, #20]
 800e7b8:	431a      	orrs	r2, r3
 800e7ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7bc:	69db      	ldr	r3, [r3, #28]
 800e7be:	4313      	orrs	r3, r2
 800e7c0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800e7c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	68db      	ldr	r3, [r3, #12]
 800e7c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800e7cc:	f021 010c 	bic.w	r1, r1, #12
 800e7d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7d2:	681a      	ldr	r2, [r3, #0]
 800e7d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e7d6:	430b      	orrs	r3, r1
 800e7d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e7da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	695b      	ldr	r3, [r3, #20]
 800e7e0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800e7e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7e6:	6999      	ldr	r1, [r3, #24]
 800e7e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7ea:	681a      	ldr	r2, [r3, #0]
 800e7ec:	ea40 0301 	orr.w	r3, r0, r1
 800e7f0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e7f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7f4:	681a      	ldr	r2, [r3, #0]
 800e7f6:	4bc5      	ldr	r3, [pc, #788]	; (800eb0c <UART_SetConfig+0x384>)
 800e7f8:	429a      	cmp	r2, r3
 800e7fa:	d004      	beq.n	800e806 <UART_SetConfig+0x7e>
 800e7fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7fe:	681a      	ldr	r2, [r3, #0]
 800e800:	4bc3      	ldr	r3, [pc, #780]	; (800eb10 <UART_SetConfig+0x388>)
 800e802:	429a      	cmp	r2, r3
 800e804:	d103      	bne.n	800e80e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e806:	f7fd fa65 	bl	800bcd4 <HAL_RCC_GetPCLK2Freq>
 800e80a:	6778      	str	r0, [r7, #116]	; 0x74
 800e80c:	e002      	b.n	800e814 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e80e:	f7fd fa4d 	bl	800bcac <HAL_RCC_GetPCLK1Freq>
 800e812:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e816:	69db      	ldr	r3, [r3, #28]
 800e818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e81c:	f040 80b6 	bne.w	800e98c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e820:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e822:	461c      	mov	r4, r3
 800e824:	f04f 0500 	mov.w	r5, #0
 800e828:	4622      	mov	r2, r4
 800e82a:	462b      	mov	r3, r5
 800e82c:	1891      	adds	r1, r2, r2
 800e82e:	6439      	str	r1, [r7, #64]	; 0x40
 800e830:	415b      	adcs	r3, r3
 800e832:	647b      	str	r3, [r7, #68]	; 0x44
 800e834:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e838:	1912      	adds	r2, r2, r4
 800e83a:	eb45 0303 	adc.w	r3, r5, r3
 800e83e:	f04f 0000 	mov.w	r0, #0
 800e842:	f04f 0100 	mov.w	r1, #0
 800e846:	00d9      	lsls	r1, r3, #3
 800e848:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e84c:	00d0      	lsls	r0, r2, #3
 800e84e:	4602      	mov	r2, r0
 800e850:	460b      	mov	r3, r1
 800e852:	1911      	adds	r1, r2, r4
 800e854:	6639      	str	r1, [r7, #96]	; 0x60
 800e856:	416b      	adcs	r3, r5
 800e858:	667b      	str	r3, [r7, #100]	; 0x64
 800e85a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e85c:	685b      	ldr	r3, [r3, #4]
 800e85e:	461a      	mov	r2, r3
 800e860:	f04f 0300 	mov.w	r3, #0
 800e864:	1891      	adds	r1, r2, r2
 800e866:	63b9      	str	r1, [r7, #56]	; 0x38
 800e868:	415b      	adcs	r3, r3
 800e86a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e86c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e870:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800e874:	f7f2 fa18 	bl	8000ca8 <__aeabi_uldivmod>
 800e878:	4602      	mov	r2, r0
 800e87a:	460b      	mov	r3, r1
 800e87c:	4ba5      	ldr	r3, [pc, #660]	; (800eb14 <UART_SetConfig+0x38c>)
 800e87e:	fba3 2302 	umull	r2, r3, r3, r2
 800e882:	095b      	lsrs	r3, r3, #5
 800e884:	011e      	lsls	r6, r3, #4
 800e886:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e888:	461c      	mov	r4, r3
 800e88a:	f04f 0500 	mov.w	r5, #0
 800e88e:	4622      	mov	r2, r4
 800e890:	462b      	mov	r3, r5
 800e892:	1891      	adds	r1, r2, r2
 800e894:	6339      	str	r1, [r7, #48]	; 0x30
 800e896:	415b      	adcs	r3, r3
 800e898:	637b      	str	r3, [r7, #52]	; 0x34
 800e89a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800e89e:	1912      	adds	r2, r2, r4
 800e8a0:	eb45 0303 	adc.w	r3, r5, r3
 800e8a4:	f04f 0000 	mov.w	r0, #0
 800e8a8:	f04f 0100 	mov.w	r1, #0
 800e8ac:	00d9      	lsls	r1, r3, #3
 800e8ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e8b2:	00d0      	lsls	r0, r2, #3
 800e8b4:	4602      	mov	r2, r0
 800e8b6:	460b      	mov	r3, r1
 800e8b8:	1911      	adds	r1, r2, r4
 800e8ba:	65b9      	str	r1, [r7, #88]	; 0x58
 800e8bc:	416b      	adcs	r3, r5
 800e8be:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e8c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8c2:	685b      	ldr	r3, [r3, #4]
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	f04f 0300 	mov.w	r3, #0
 800e8ca:	1891      	adds	r1, r2, r2
 800e8cc:	62b9      	str	r1, [r7, #40]	; 0x28
 800e8ce:	415b      	adcs	r3, r3
 800e8d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e8d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e8d6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800e8da:	f7f2 f9e5 	bl	8000ca8 <__aeabi_uldivmod>
 800e8de:	4602      	mov	r2, r0
 800e8e0:	460b      	mov	r3, r1
 800e8e2:	4b8c      	ldr	r3, [pc, #560]	; (800eb14 <UART_SetConfig+0x38c>)
 800e8e4:	fba3 1302 	umull	r1, r3, r3, r2
 800e8e8:	095b      	lsrs	r3, r3, #5
 800e8ea:	2164      	movs	r1, #100	; 0x64
 800e8ec:	fb01 f303 	mul.w	r3, r1, r3
 800e8f0:	1ad3      	subs	r3, r2, r3
 800e8f2:	00db      	lsls	r3, r3, #3
 800e8f4:	3332      	adds	r3, #50	; 0x32
 800e8f6:	4a87      	ldr	r2, [pc, #540]	; (800eb14 <UART_SetConfig+0x38c>)
 800e8f8:	fba2 2303 	umull	r2, r3, r2, r3
 800e8fc:	095b      	lsrs	r3, r3, #5
 800e8fe:	005b      	lsls	r3, r3, #1
 800e900:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e904:	441e      	add	r6, r3
 800e906:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e908:	4618      	mov	r0, r3
 800e90a:	f04f 0100 	mov.w	r1, #0
 800e90e:	4602      	mov	r2, r0
 800e910:	460b      	mov	r3, r1
 800e912:	1894      	adds	r4, r2, r2
 800e914:	623c      	str	r4, [r7, #32]
 800e916:	415b      	adcs	r3, r3
 800e918:	627b      	str	r3, [r7, #36]	; 0x24
 800e91a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e91e:	1812      	adds	r2, r2, r0
 800e920:	eb41 0303 	adc.w	r3, r1, r3
 800e924:	f04f 0400 	mov.w	r4, #0
 800e928:	f04f 0500 	mov.w	r5, #0
 800e92c:	00dd      	lsls	r5, r3, #3
 800e92e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e932:	00d4      	lsls	r4, r2, #3
 800e934:	4622      	mov	r2, r4
 800e936:	462b      	mov	r3, r5
 800e938:	1814      	adds	r4, r2, r0
 800e93a:	653c      	str	r4, [r7, #80]	; 0x50
 800e93c:	414b      	adcs	r3, r1
 800e93e:	657b      	str	r3, [r7, #84]	; 0x54
 800e940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e942:	685b      	ldr	r3, [r3, #4]
 800e944:	461a      	mov	r2, r3
 800e946:	f04f 0300 	mov.w	r3, #0
 800e94a:	1891      	adds	r1, r2, r2
 800e94c:	61b9      	str	r1, [r7, #24]
 800e94e:	415b      	adcs	r3, r3
 800e950:	61fb      	str	r3, [r7, #28]
 800e952:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e956:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e95a:	f7f2 f9a5 	bl	8000ca8 <__aeabi_uldivmod>
 800e95e:	4602      	mov	r2, r0
 800e960:	460b      	mov	r3, r1
 800e962:	4b6c      	ldr	r3, [pc, #432]	; (800eb14 <UART_SetConfig+0x38c>)
 800e964:	fba3 1302 	umull	r1, r3, r3, r2
 800e968:	095b      	lsrs	r3, r3, #5
 800e96a:	2164      	movs	r1, #100	; 0x64
 800e96c:	fb01 f303 	mul.w	r3, r1, r3
 800e970:	1ad3      	subs	r3, r2, r3
 800e972:	00db      	lsls	r3, r3, #3
 800e974:	3332      	adds	r3, #50	; 0x32
 800e976:	4a67      	ldr	r2, [pc, #412]	; (800eb14 <UART_SetConfig+0x38c>)
 800e978:	fba2 2303 	umull	r2, r3, r2, r3
 800e97c:	095b      	lsrs	r3, r3, #5
 800e97e:	f003 0207 	and.w	r2, r3, #7
 800e982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	4432      	add	r2, r6
 800e988:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e98a:	e0b9      	b.n	800eb00 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e98c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e98e:	461c      	mov	r4, r3
 800e990:	f04f 0500 	mov.w	r5, #0
 800e994:	4622      	mov	r2, r4
 800e996:	462b      	mov	r3, r5
 800e998:	1891      	adds	r1, r2, r2
 800e99a:	6139      	str	r1, [r7, #16]
 800e99c:	415b      	adcs	r3, r3
 800e99e:	617b      	str	r3, [r7, #20]
 800e9a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e9a4:	1912      	adds	r2, r2, r4
 800e9a6:	eb45 0303 	adc.w	r3, r5, r3
 800e9aa:	f04f 0000 	mov.w	r0, #0
 800e9ae:	f04f 0100 	mov.w	r1, #0
 800e9b2:	00d9      	lsls	r1, r3, #3
 800e9b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e9b8:	00d0      	lsls	r0, r2, #3
 800e9ba:	4602      	mov	r2, r0
 800e9bc:	460b      	mov	r3, r1
 800e9be:	eb12 0804 	adds.w	r8, r2, r4
 800e9c2:	eb43 0905 	adc.w	r9, r3, r5
 800e9c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9c8:	685b      	ldr	r3, [r3, #4]
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f04f 0100 	mov.w	r1, #0
 800e9d0:	f04f 0200 	mov.w	r2, #0
 800e9d4:	f04f 0300 	mov.w	r3, #0
 800e9d8:	008b      	lsls	r3, r1, #2
 800e9da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e9de:	0082      	lsls	r2, r0, #2
 800e9e0:	4640      	mov	r0, r8
 800e9e2:	4649      	mov	r1, r9
 800e9e4:	f7f2 f960 	bl	8000ca8 <__aeabi_uldivmod>
 800e9e8:	4602      	mov	r2, r0
 800e9ea:	460b      	mov	r3, r1
 800e9ec:	4b49      	ldr	r3, [pc, #292]	; (800eb14 <UART_SetConfig+0x38c>)
 800e9ee:	fba3 2302 	umull	r2, r3, r3, r2
 800e9f2:	095b      	lsrs	r3, r3, #5
 800e9f4:	011e      	lsls	r6, r3, #4
 800e9f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f04f 0100 	mov.w	r1, #0
 800e9fe:	4602      	mov	r2, r0
 800ea00:	460b      	mov	r3, r1
 800ea02:	1894      	adds	r4, r2, r2
 800ea04:	60bc      	str	r4, [r7, #8]
 800ea06:	415b      	adcs	r3, r3
 800ea08:	60fb      	str	r3, [r7, #12]
 800ea0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ea0e:	1812      	adds	r2, r2, r0
 800ea10:	eb41 0303 	adc.w	r3, r1, r3
 800ea14:	f04f 0400 	mov.w	r4, #0
 800ea18:	f04f 0500 	mov.w	r5, #0
 800ea1c:	00dd      	lsls	r5, r3, #3
 800ea1e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ea22:	00d4      	lsls	r4, r2, #3
 800ea24:	4622      	mov	r2, r4
 800ea26:	462b      	mov	r3, r5
 800ea28:	1814      	adds	r4, r2, r0
 800ea2a:	64bc      	str	r4, [r7, #72]	; 0x48
 800ea2c:	414b      	adcs	r3, r1
 800ea2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea32:	685b      	ldr	r3, [r3, #4]
 800ea34:	4618      	mov	r0, r3
 800ea36:	f04f 0100 	mov.w	r1, #0
 800ea3a:	f04f 0200 	mov.w	r2, #0
 800ea3e:	f04f 0300 	mov.w	r3, #0
 800ea42:	008b      	lsls	r3, r1, #2
 800ea44:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ea48:	0082      	lsls	r2, r0, #2
 800ea4a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800ea4e:	f7f2 f92b 	bl	8000ca8 <__aeabi_uldivmod>
 800ea52:	4602      	mov	r2, r0
 800ea54:	460b      	mov	r3, r1
 800ea56:	4b2f      	ldr	r3, [pc, #188]	; (800eb14 <UART_SetConfig+0x38c>)
 800ea58:	fba3 1302 	umull	r1, r3, r3, r2
 800ea5c:	095b      	lsrs	r3, r3, #5
 800ea5e:	2164      	movs	r1, #100	; 0x64
 800ea60:	fb01 f303 	mul.w	r3, r1, r3
 800ea64:	1ad3      	subs	r3, r2, r3
 800ea66:	011b      	lsls	r3, r3, #4
 800ea68:	3332      	adds	r3, #50	; 0x32
 800ea6a:	4a2a      	ldr	r2, [pc, #168]	; (800eb14 <UART_SetConfig+0x38c>)
 800ea6c:	fba2 2303 	umull	r2, r3, r2, r3
 800ea70:	095b      	lsrs	r3, r3, #5
 800ea72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ea76:	441e      	add	r6, r3
 800ea78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f04f 0100 	mov.w	r1, #0
 800ea80:	4602      	mov	r2, r0
 800ea82:	460b      	mov	r3, r1
 800ea84:	1894      	adds	r4, r2, r2
 800ea86:	603c      	str	r4, [r7, #0]
 800ea88:	415b      	adcs	r3, r3
 800ea8a:	607b      	str	r3, [r7, #4]
 800ea8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea90:	1812      	adds	r2, r2, r0
 800ea92:	eb41 0303 	adc.w	r3, r1, r3
 800ea96:	f04f 0400 	mov.w	r4, #0
 800ea9a:	f04f 0500 	mov.w	r5, #0
 800ea9e:	00dd      	lsls	r5, r3, #3
 800eaa0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800eaa4:	00d4      	lsls	r4, r2, #3
 800eaa6:	4622      	mov	r2, r4
 800eaa8:	462b      	mov	r3, r5
 800eaaa:	eb12 0a00 	adds.w	sl, r2, r0
 800eaae:	eb43 0b01 	adc.w	fp, r3, r1
 800eab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eab4:	685b      	ldr	r3, [r3, #4]
 800eab6:	4618      	mov	r0, r3
 800eab8:	f04f 0100 	mov.w	r1, #0
 800eabc:	f04f 0200 	mov.w	r2, #0
 800eac0:	f04f 0300 	mov.w	r3, #0
 800eac4:	008b      	lsls	r3, r1, #2
 800eac6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800eaca:	0082      	lsls	r2, r0, #2
 800eacc:	4650      	mov	r0, sl
 800eace:	4659      	mov	r1, fp
 800ead0:	f7f2 f8ea 	bl	8000ca8 <__aeabi_uldivmod>
 800ead4:	4602      	mov	r2, r0
 800ead6:	460b      	mov	r3, r1
 800ead8:	4b0e      	ldr	r3, [pc, #56]	; (800eb14 <UART_SetConfig+0x38c>)
 800eada:	fba3 1302 	umull	r1, r3, r3, r2
 800eade:	095b      	lsrs	r3, r3, #5
 800eae0:	2164      	movs	r1, #100	; 0x64
 800eae2:	fb01 f303 	mul.w	r3, r1, r3
 800eae6:	1ad3      	subs	r3, r2, r3
 800eae8:	011b      	lsls	r3, r3, #4
 800eaea:	3332      	adds	r3, #50	; 0x32
 800eaec:	4a09      	ldr	r2, [pc, #36]	; (800eb14 <UART_SetConfig+0x38c>)
 800eaee:	fba2 2303 	umull	r2, r3, r2, r3
 800eaf2:	095b      	lsrs	r3, r3, #5
 800eaf4:	f003 020f 	and.w	r2, r3, #15
 800eaf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	4432      	add	r2, r6
 800eafe:	609a      	str	r2, [r3, #8]
}
 800eb00:	bf00      	nop
 800eb02:	377c      	adds	r7, #124	; 0x7c
 800eb04:	46bd      	mov	sp, r7
 800eb06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb0a:	bf00      	nop
 800eb0c:	40011000 	.word	0x40011000
 800eb10:	40011400 	.word	0x40011400
 800eb14:	51eb851f 	.word	0x51eb851f

0800eb18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800eb18:	b084      	sub	sp, #16
 800eb1a:	b580      	push	{r7, lr}
 800eb1c:	b084      	sub	sp, #16
 800eb1e:	af00      	add	r7, sp, #0
 800eb20:	6078      	str	r0, [r7, #4]
 800eb22:	f107 001c 	add.w	r0, r7, #28
 800eb26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800eb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb2c:	2b01      	cmp	r3, #1
 800eb2e:	d122      	bne.n	800eb76 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	68db      	ldr	r3, [r3, #12]
 800eb40:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800eb44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb48:	687a      	ldr	r2, [r7, #4]
 800eb4a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	68db      	ldr	r3, [r3, #12]
 800eb50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800eb58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb5a:	2b01      	cmp	r3, #1
 800eb5c:	d105      	bne.n	800eb6a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	68db      	ldr	r3, [r3, #12]
 800eb62:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	f001 fb1c 	bl	80101a8 <USB_CoreReset>
 800eb70:	4603      	mov	r3, r0
 800eb72:	73fb      	strb	r3, [r7, #15]
 800eb74:	e01a      	b.n	800ebac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	68db      	ldr	r3, [r3, #12]
 800eb7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800eb82:	6878      	ldr	r0, [r7, #4]
 800eb84:	f001 fb10 	bl	80101a8 <USB_CoreReset>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800eb8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d106      	bne.n	800eba0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	639a      	str	r2, [r3, #56]	; 0x38
 800eb9e:	e005      	b.n	800ebac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eba4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ebac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebae:	2b01      	cmp	r3, #1
 800ebb0:	d10b      	bne.n	800ebca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	689b      	ldr	r3, [r3, #8]
 800ebb6:	f043 0206 	orr.w	r2, r3, #6
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	689b      	ldr	r3, [r3, #8]
 800ebc2:	f043 0220 	orr.w	r2, r3, #32
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ebca:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebcc:	4618      	mov	r0, r3
 800ebce:	3710      	adds	r7, #16
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ebd6:	b004      	add	sp, #16
 800ebd8:	4770      	bx	lr
	...

0800ebdc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ebdc:	b480      	push	{r7}
 800ebde:	b087      	sub	sp, #28
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	60f8      	str	r0, [r7, #12]
 800ebe4:	60b9      	str	r1, [r7, #8]
 800ebe6:	4613      	mov	r3, r2
 800ebe8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ebea:	79fb      	ldrb	r3, [r7, #7]
 800ebec:	2b02      	cmp	r3, #2
 800ebee:	d165      	bne.n	800ecbc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ebf0:	68bb      	ldr	r3, [r7, #8]
 800ebf2:	4a41      	ldr	r2, [pc, #260]	; (800ecf8 <USB_SetTurnaroundTime+0x11c>)
 800ebf4:	4293      	cmp	r3, r2
 800ebf6:	d906      	bls.n	800ec06 <USB_SetTurnaroundTime+0x2a>
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	4a40      	ldr	r2, [pc, #256]	; (800ecfc <USB_SetTurnaroundTime+0x120>)
 800ebfc:	4293      	cmp	r3, r2
 800ebfe:	d202      	bcs.n	800ec06 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ec00:	230f      	movs	r3, #15
 800ec02:	617b      	str	r3, [r7, #20]
 800ec04:	e062      	b.n	800eccc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	4a3c      	ldr	r2, [pc, #240]	; (800ecfc <USB_SetTurnaroundTime+0x120>)
 800ec0a:	4293      	cmp	r3, r2
 800ec0c:	d306      	bcc.n	800ec1c <USB_SetTurnaroundTime+0x40>
 800ec0e:	68bb      	ldr	r3, [r7, #8]
 800ec10:	4a3b      	ldr	r2, [pc, #236]	; (800ed00 <USB_SetTurnaroundTime+0x124>)
 800ec12:	4293      	cmp	r3, r2
 800ec14:	d202      	bcs.n	800ec1c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ec16:	230e      	movs	r3, #14
 800ec18:	617b      	str	r3, [r7, #20]
 800ec1a:	e057      	b.n	800eccc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ec1c:	68bb      	ldr	r3, [r7, #8]
 800ec1e:	4a38      	ldr	r2, [pc, #224]	; (800ed00 <USB_SetTurnaroundTime+0x124>)
 800ec20:	4293      	cmp	r3, r2
 800ec22:	d306      	bcc.n	800ec32 <USB_SetTurnaroundTime+0x56>
 800ec24:	68bb      	ldr	r3, [r7, #8]
 800ec26:	4a37      	ldr	r2, [pc, #220]	; (800ed04 <USB_SetTurnaroundTime+0x128>)
 800ec28:	4293      	cmp	r3, r2
 800ec2a:	d202      	bcs.n	800ec32 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ec2c:	230d      	movs	r3, #13
 800ec2e:	617b      	str	r3, [r7, #20]
 800ec30:	e04c      	b.n	800eccc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	4a33      	ldr	r2, [pc, #204]	; (800ed04 <USB_SetTurnaroundTime+0x128>)
 800ec36:	4293      	cmp	r3, r2
 800ec38:	d306      	bcc.n	800ec48 <USB_SetTurnaroundTime+0x6c>
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	4a32      	ldr	r2, [pc, #200]	; (800ed08 <USB_SetTurnaroundTime+0x12c>)
 800ec3e:	4293      	cmp	r3, r2
 800ec40:	d802      	bhi.n	800ec48 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ec42:	230c      	movs	r3, #12
 800ec44:	617b      	str	r3, [r7, #20]
 800ec46:	e041      	b.n	800eccc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	4a2f      	ldr	r2, [pc, #188]	; (800ed08 <USB_SetTurnaroundTime+0x12c>)
 800ec4c:	4293      	cmp	r3, r2
 800ec4e:	d906      	bls.n	800ec5e <USB_SetTurnaroundTime+0x82>
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	4a2e      	ldr	r2, [pc, #184]	; (800ed0c <USB_SetTurnaroundTime+0x130>)
 800ec54:	4293      	cmp	r3, r2
 800ec56:	d802      	bhi.n	800ec5e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ec58:	230b      	movs	r3, #11
 800ec5a:	617b      	str	r3, [r7, #20]
 800ec5c:	e036      	b.n	800eccc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ec5e:	68bb      	ldr	r3, [r7, #8]
 800ec60:	4a2a      	ldr	r2, [pc, #168]	; (800ed0c <USB_SetTurnaroundTime+0x130>)
 800ec62:	4293      	cmp	r3, r2
 800ec64:	d906      	bls.n	800ec74 <USB_SetTurnaroundTime+0x98>
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	4a29      	ldr	r2, [pc, #164]	; (800ed10 <USB_SetTurnaroundTime+0x134>)
 800ec6a:	4293      	cmp	r3, r2
 800ec6c:	d802      	bhi.n	800ec74 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ec6e:	230a      	movs	r3, #10
 800ec70:	617b      	str	r3, [r7, #20]
 800ec72:	e02b      	b.n	800eccc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	4a26      	ldr	r2, [pc, #152]	; (800ed10 <USB_SetTurnaroundTime+0x134>)
 800ec78:	4293      	cmp	r3, r2
 800ec7a:	d906      	bls.n	800ec8a <USB_SetTurnaroundTime+0xae>
 800ec7c:	68bb      	ldr	r3, [r7, #8]
 800ec7e:	4a25      	ldr	r2, [pc, #148]	; (800ed14 <USB_SetTurnaroundTime+0x138>)
 800ec80:	4293      	cmp	r3, r2
 800ec82:	d202      	bcs.n	800ec8a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ec84:	2309      	movs	r3, #9
 800ec86:	617b      	str	r3, [r7, #20]
 800ec88:	e020      	b.n	800eccc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	4a21      	ldr	r2, [pc, #132]	; (800ed14 <USB_SetTurnaroundTime+0x138>)
 800ec8e:	4293      	cmp	r3, r2
 800ec90:	d306      	bcc.n	800eca0 <USB_SetTurnaroundTime+0xc4>
 800ec92:	68bb      	ldr	r3, [r7, #8]
 800ec94:	4a20      	ldr	r2, [pc, #128]	; (800ed18 <USB_SetTurnaroundTime+0x13c>)
 800ec96:	4293      	cmp	r3, r2
 800ec98:	d802      	bhi.n	800eca0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ec9a:	2308      	movs	r3, #8
 800ec9c:	617b      	str	r3, [r7, #20]
 800ec9e:	e015      	b.n	800eccc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	4a1d      	ldr	r2, [pc, #116]	; (800ed18 <USB_SetTurnaroundTime+0x13c>)
 800eca4:	4293      	cmp	r3, r2
 800eca6:	d906      	bls.n	800ecb6 <USB_SetTurnaroundTime+0xda>
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	4a1c      	ldr	r2, [pc, #112]	; (800ed1c <USB_SetTurnaroundTime+0x140>)
 800ecac:	4293      	cmp	r3, r2
 800ecae:	d202      	bcs.n	800ecb6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ecb0:	2307      	movs	r3, #7
 800ecb2:	617b      	str	r3, [r7, #20]
 800ecb4:	e00a      	b.n	800eccc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ecb6:	2306      	movs	r3, #6
 800ecb8:	617b      	str	r3, [r7, #20]
 800ecba:	e007      	b.n	800eccc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ecbc:	79fb      	ldrb	r3, [r7, #7]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d102      	bne.n	800ecc8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ecc2:	2309      	movs	r3, #9
 800ecc4:	617b      	str	r3, [r7, #20]
 800ecc6:	e001      	b.n	800eccc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ecc8:	2309      	movs	r3, #9
 800ecca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	68db      	ldr	r3, [r3, #12]
 800ecd0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	68da      	ldr	r2, [r3, #12]
 800ecdc:	697b      	ldr	r3, [r7, #20]
 800ecde:	029b      	lsls	r3, r3, #10
 800ece0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ece4:	431a      	orrs	r2, r3
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ecea:	2300      	movs	r3, #0
}
 800ecec:	4618      	mov	r0, r3
 800ecee:	371c      	adds	r7, #28
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf6:	4770      	bx	lr
 800ecf8:	00d8acbf 	.word	0x00d8acbf
 800ecfc:	00e4e1c0 	.word	0x00e4e1c0
 800ed00:	00f42400 	.word	0x00f42400
 800ed04:	01067380 	.word	0x01067380
 800ed08:	011a499f 	.word	0x011a499f
 800ed0c:	01312cff 	.word	0x01312cff
 800ed10:	014ca43f 	.word	0x014ca43f
 800ed14:	016e3600 	.word	0x016e3600
 800ed18:	01a6ab1f 	.word	0x01a6ab1f
 800ed1c:	01e84800 	.word	0x01e84800

0800ed20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ed20:	b480      	push	{r7}
 800ed22:	b083      	sub	sp, #12
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	689b      	ldr	r3, [r3, #8]
 800ed2c:	f043 0201 	orr.w	r2, r3, #1
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ed34:	2300      	movs	r3, #0
}
 800ed36:	4618      	mov	r0, r3
 800ed38:	370c      	adds	r7, #12
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed40:	4770      	bx	lr

0800ed42 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ed42:	b480      	push	{r7}
 800ed44:	b083      	sub	sp, #12
 800ed46:	af00      	add	r7, sp, #0
 800ed48:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	689b      	ldr	r3, [r3, #8]
 800ed4e:	f023 0201 	bic.w	r2, r3, #1
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ed56:	2300      	movs	r3, #0
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	370c      	adds	r7, #12
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed62:	4770      	bx	lr

0800ed64 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b084      	sub	sp, #16
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
 800ed6c:	460b      	mov	r3, r1
 800ed6e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ed70:	2300      	movs	r3, #0
 800ed72:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	68db      	ldr	r3, [r3, #12]
 800ed78:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ed80:	78fb      	ldrb	r3, [r7, #3]
 800ed82:	2b01      	cmp	r3, #1
 800ed84:	d115      	bne.n	800edb2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	68db      	ldr	r3, [r3, #12]
 800ed8a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ed92:	2001      	movs	r0, #1
 800ed94:	f7f9 fb1c 	bl	80083d0 <HAL_Delay>
      ms++;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	3301      	adds	r3, #1
 800ed9c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ed9e:	6878      	ldr	r0, [r7, #4]
 800eda0:	f001 f972 	bl	8010088 <USB_GetMode>
 800eda4:	4603      	mov	r3, r0
 800eda6:	2b01      	cmp	r3, #1
 800eda8:	d01e      	beq.n	800ede8 <USB_SetCurrentMode+0x84>
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	2b31      	cmp	r3, #49	; 0x31
 800edae:	d9f0      	bls.n	800ed92 <USB_SetCurrentMode+0x2e>
 800edb0:	e01a      	b.n	800ede8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800edb2:	78fb      	ldrb	r3, [r7, #3]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d115      	bne.n	800ede4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	68db      	ldr	r3, [r3, #12]
 800edbc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800edc4:	2001      	movs	r0, #1
 800edc6:	f7f9 fb03 	bl	80083d0 <HAL_Delay>
      ms++;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	3301      	adds	r3, #1
 800edce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800edd0:	6878      	ldr	r0, [r7, #4]
 800edd2:	f001 f959 	bl	8010088 <USB_GetMode>
 800edd6:	4603      	mov	r3, r0
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d005      	beq.n	800ede8 <USB_SetCurrentMode+0x84>
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	2b31      	cmp	r3, #49	; 0x31
 800ede0:	d9f0      	bls.n	800edc4 <USB_SetCurrentMode+0x60>
 800ede2:	e001      	b.n	800ede8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ede4:	2301      	movs	r3, #1
 800ede6:	e005      	b.n	800edf4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	2b32      	cmp	r3, #50	; 0x32
 800edec:	d101      	bne.n	800edf2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800edee:	2301      	movs	r3, #1
 800edf0:	e000      	b.n	800edf4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800edf2:	2300      	movs	r3, #0
}
 800edf4:	4618      	mov	r0, r3
 800edf6:	3710      	adds	r7, #16
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}

0800edfc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800edfc:	b084      	sub	sp, #16
 800edfe:	b580      	push	{r7, lr}
 800ee00:	b086      	sub	sp, #24
 800ee02:	af00      	add	r7, sp, #0
 800ee04:	6078      	str	r0, [r7, #4]
 800ee06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ee0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ee16:	2300      	movs	r3, #0
 800ee18:	613b      	str	r3, [r7, #16]
 800ee1a:	e009      	b.n	800ee30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ee1c:	687a      	ldr	r2, [r7, #4]
 800ee1e:	693b      	ldr	r3, [r7, #16]
 800ee20:	3340      	adds	r3, #64	; 0x40
 800ee22:	009b      	lsls	r3, r3, #2
 800ee24:	4413      	add	r3, r2
 800ee26:	2200      	movs	r2, #0
 800ee28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ee2a:	693b      	ldr	r3, [r7, #16]
 800ee2c:	3301      	adds	r3, #1
 800ee2e:	613b      	str	r3, [r7, #16]
 800ee30:	693b      	ldr	r3, [r7, #16]
 800ee32:	2b0e      	cmp	r3, #14
 800ee34:	d9f2      	bls.n	800ee1c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ee36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d11c      	bne.n	800ee76 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee42:	685b      	ldr	r3, [r3, #4]
 800ee44:	68fa      	ldr	r2, [r7, #12]
 800ee46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ee4a:	f043 0302 	orr.w	r3, r3, #2
 800ee4e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee54:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee60:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee6c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	639a      	str	r2, [r3, #56]	; 0x38
 800ee74:	e00b      	b.n	800ee8e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee7a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee86:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ee94:	461a      	mov	r2, r3
 800ee96:	2300      	movs	r3, #0
 800ee98:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eea0:	4619      	mov	r1, r3
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eea8:	461a      	mov	r2, r3
 800eeaa:	680b      	ldr	r3, [r1, #0]
 800eeac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800eeae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeb0:	2b01      	cmp	r3, #1
 800eeb2:	d10c      	bne.n	800eece <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800eeb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d104      	bne.n	800eec4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800eeba:	2100      	movs	r1, #0
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f000 f945 	bl	800f14c <USB_SetDevSpeed>
 800eec2:	e008      	b.n	800eed6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800eec4:	2101      	movs	r1, #1
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f000 f940 	bl	800f14c <USB_SetDevSpeed>
 800eecc:	e003      	b.n	800eed6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800eece:	2103      	movs	r1, #3
 800eed0:	6878      	ldr	r0, [r7, #4]
 800eed2:	f000 f93b 	bl	800f14c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800eed6:	2110      	movs	r1, #16
 800eed8:	6878      	ldr	r0, [r7, #4]
 800eeda:	f000 f8f3 	bl	800f0c4 <USB_FlushTxFifo>
 800eede:	4603      	mov	r3, r0
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d001      	beq.n	800eee8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800eee4:	2301      	movs	r3, #1
 800eee6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f000 f90f 	bl	800f10c <USB_FlushRxFifo>
 800eeee:	4603      	mov	r3, r0
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d001      	beq.n	800eef8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800eef4:	2301      	movs	r3, #1
 800eef6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eefe:	461a      	mov	r2, r3
 800ef00:	2300      	movs	r3, #0
 800ef02:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef0a:	461a      	mov	r2, r3
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef16:	461a      	mov	r2, r3
 800ef18:	2300      	movs	r3, #0
 800ef1a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	613b      	str	r3, [r7, #16]
 800ef20:	e043      	b.n	800efaa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ef22:	693b      	ldr	r3, [r7, #16]
 800ef24:	015a      	lsls	r2, r3, #5
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	4413      	add	r3, r2
 800ef2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ef34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ef38:	d118      	bne.n	800ef6c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800ef3a:	693b      	ldr	r3, [r7, #16]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d10a      	bne.n	800ef56 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ef40:	693b      	ldr	r3, [r7, #16]
 800ef42:	015a      	lsls	r2, r3, #5
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	4413      	add	r3, r2
 800ef48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef4c:	461a      	mov	r2, r3
 800ef4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ef52:	6013      	str	r3, [r2, #0]
 800ef54:	e013      	b.n	800ef7e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ef56:	693b      	ldr	r3, [r7, #16]
 800ef58:	015a      	lsls	r2, r3, #5
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	4413      	add	r3, r2
 800ef5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef62:	461a      	mov	r2, r3
 800ef64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ef68:	6013      	str	r3, [r2, #0]
 800ef6a:	e008      	b.n	800ef7e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ef6c:	693b      	ldr	r3, [r7, #16]
 800ef6e:	015a      	lsls	r2, r3, #5
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	4413      	add	r3, r2
 800ef74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef78:	461a      	mov	r2, r3
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ef7e:	693b      	ldr	r3, [r7, #16]
 800ef80:	015a      	lsls	r2, r3, #5
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	4413      	add	r3, r2
 800ef86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef8a:	461a      	mov	r2, r3
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ef90:	693b      	ldr	r3, [r7, #16]
 800ef92:	015a      	lsls	r2, r3, #5
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	4413      	add	r3, r2
 800ef98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef9c:	461a      	mov	r2, r3
 800ef9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800efa2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800efa4:	693b      	ldr	r3, [r7, #16]
 800efa6:	3301      	adds	r3, #1
 800efa8:	613b      	str	r3, [r7, #16]
 800efaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efac:	693a      	ldr	r2, [r7, #16]
 800efae:	429a      	cmp	r2, r3
 800efb0:	d3b7      	bcc.n	800ef22 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800efb2:	2300      	movs	r3, #0
 800efb4:	613b      	str	r3, [r7, #16]
 800efb6:	e043      	b.n	800f040 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800efb8:	693b      	ldr	r3, [r7, #16]
 800efba:	015a      	lsls	r2, r3, #5
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	4413      	add	r3, r2
 800efc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800efca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800efce:	d118      	bne.n	800f002 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800efd0:	693b      	ldr	r3, [r7, #16]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d10a      	bne.n	800efec <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800efd6:	693b      	ldr	r3, [r7, #16]
 800efd8:	015a      	lsls	r2, r3, #5
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	4413      	add	r3, r2
 800efde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efe2:	461a      	mov	r2, r3
 800efe4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800efe8:	6013      	str	r3, [r2, #0]
 800efea:	e013      	b.n	800f014 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800efec:	693b      	ldr	r3, [r7, #16]
 800efee:	015a      	lsls	r2, r3, #5
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	4413      	add	r3, r2
 800eff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eff8:	461a      	mov	r2, r3
 800effa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800effe:	6013      	str	r3, [r2, #0]
 800f000:	e008      	b.n	800f014 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f002:	693b      	ldr	r3, [r7, #16]
 800f004:	015a      	lsls	r2, r3, #5
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	4413      	add	r3, r2
 800f00a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f00e:	461a      	mov	r2, r3
 800f010:	2300      	movs	r3, #0
 800f012:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f014:	693b      	ldr	r3, [r7, #16]
 800f016:	015a      	lsls	r2, r3, #5
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	4413      	add	r3, r2
 800f01c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f020:	461a      	mov	r2, r3
 800f022:	2300      	movs	r3, #0
 800f024:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f026:	693b      	ldr	r3, [r7, #16]
 800f028:	015a      	lsls	r2, r3, #5
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	4413      	add	r3, r2
 800f02e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f032:	461a      	mov	r2, r3
 800f034:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f038:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f03a:	693b      	ldr	r3, [r7, #16]
 800f03c:	3301      	adds	r3, #1
 800f03e:	613b      	str	r3, [r7, #16]
 800f040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f042:	693a      	ldr	r2, [r7, #16]
 800f044:	429a      	cmp	r2, r3
 800f046:	d3b7      	bcc.n	800efb8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f04e:	691b      	ldr	r3, [r3, #16]
 800f050:	68fa      	ldr	r2, [r7, #12]
 800f052:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f056:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f05a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2200      	movs	r2, #0
 800f060:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f068:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d105      	bne.n	800f07c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	699b      	ldr	r3, [r3, #24]
 800f074:	f043 0210 	orr.w	r2, r3, #16
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	699a      	ldr	r2, [r3, #24]
 800f080:	4b0f      	ldr	r3, [pc, #60]	; (800f0c0 <USB_DevInit+0x2c4>)
 800f082:	4313      	orrs	r3, r2
 800f084:	687a      	ldr	r2, [r7, #4]
 800f086:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d005      	beq.n	800f09a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	699b      	ldr	r3, [r3, #24]
 800f092:	f043 0208 	orr.w	r2, r3, #8
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f09a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f09c:	2b01      	cmp	r3, #1
 800f09e:	d107      	bne.n	800f0b0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	699b      	ldr	r3, [r3, #24]
 800f0a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f0a8:	f043 0304 	orr.w	r3, r3, #4
 800f0ac:	687a      	ldr	r2, [r7, #4]
 800f0ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f0b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3718      	adds	r7, #24
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f0bc:	b004      	add	sp, #16
 800f0be:	4770      	bx	lr
 800f0c0:	803c3800 	.word	0x803c3800

0800f0c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f0c4:	b480      	push	{r7}
 800f0c6:	b085      	sub	sp, #20
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	019b      	lsls	r3, r3, #6
 800f0d6:	f043 0220 	orr.w	r2, r3, #32
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	3301      	adds	r3, #1
 800f0e2:	60fb      	str	r3, [r7, #12]
 800f0e4:	4a08      	ldr	r2, [pc, #32]	; (800f108 <USB_FlushTxFifo+0x44>)
 800f0e6:	4293      	cmp	r3, r2
 800f0e8:	d901      	bls.n	800f0ee <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800f0ea:	2303      	movs	r3, #3
 800f0ec:	e006      	b.n	800f0fc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	691b      	ldr	r3, [r3, #16]
 800f0f2:	f003 0320 	and.w	r3, r3, #32
 800f0f6:	2b20      	cmp	r3, #32
 800f0f8:	d0f1      	beq.n	800f0de <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f0fa:	2300      	movs	r3, #0
}
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	3714      	adds	r7, #20
 800f100:	46bd      	mov	sp, r7
 800f102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f106:	4770      	bx	lr
 800f108:	00030d40 	.word	0x00030d40

0800f10c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f10c:	b480      	push	{r7}
 800f10e:	b085      	sub	sp, #20
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f114:	2300      	movs	r3, #0
 800f116:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	2210      	movs	r2, #16
 800f11c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	3301      	adds	r3, #1
 800f122:	60fb      	str	r3, [r7, #12]
 800f124:	4a08      	ldr	r2, [pc, #32]	; (800f148 <USB_FlushRxFifo+0x3c>)
 800f126:	4293      	cmp	r3, r2
 800f128:	d901      	bls.n	800f12e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800f12a:	2303      	movs	r3, #3
 800f12c:	e006      	b.n	800f13c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	691b      	ldr	r3, [r3, #16]
 800f132:	f003 0310 	and.w	r3, r3, #16
 800f136:	2b10      	cmp	r3, #16
 800f138:	d0f1      	beq.n	800f11e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f13a:	2300      	movs	r3, #0
}
 800f13c:	4618      	mov	r0, r3
 800f13e:	3714      	adds	r7, #20
 800f140:	46bd      	mov	sp, r7
 800f142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f146:	4770      	bx	lr
 800f148:	00030d40 	.word	0x00030d40

0800f14c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f14c:	b480      	push	{r7}
 800f14e:	b085      	sub	sp, #20
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
 800f154:	460b      	mov	r3, r1
 800f156:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f162:	681a      	ldr	r2, [r3, #0]
 800f164:	78fb      	ldrb	r3, [r7, #3]
 800f166:	68f9      	ldr	r1, [r7, #12]
 800f168:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f16c:	4313      	orrs	r3, r2
 800f16e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f170:	2300      	movs	r3, #0
}
 800f172:	4618      	mov	r0, r3
 800f174:	3714      	adds	r7, #20
 800f176:	46bd      	mov	sp, r7
 800f178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17c:	4770      	bx	lr

0800f17e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f17e:	b480      	push	{r7}
 800f180:	b087      	sub	sp, #28
 800f182:	af00      	add	r7, sp, #0
 800f184:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f18a:	693b      	ldr	r3, [r7, #16]
 800f18c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f190:	689b      	ldr	r3, [r3, #8]
 800f192:	f003 0306 	and.w	r3, r3, #6
 800f196:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d102      	bne.n	800f1a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800f19e:	2300      	movs	r3, #0
 800f1a0:	75fb      	strb	r3, [r7, #23]
 800f1a2:	e00a      	b.n	800f1ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	2b02      	cmp	r3, #2
 800f1a8:	d002      	beq.n	800f1b0 <USB_GetDevSpeed+0x32>
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	2b06      	cmp	r3, #6
 800f1ae:	d102      	bne.n	800f1b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f1b0:	2302      	movs	r3, #2
 800f1b2:	75fb      	strb	r3, [r7, #23]
 800f1b4:	e001      	b.n	800f1ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800f1b6:	230f      	movs	r3, #15
 800f1b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f1ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1bc:	4618      	mov	r0, r3
 800f1be:	371c      	adds	r7, #28
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c6:	4770      	bx	lr

0800f1c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f1c8:	b480      	push	{r7}
 800f1ca:	b085      	sub	sp, #20
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
 800f1d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	781b      	ldrb	r3, [r3, #0]
 800f1da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	785b      	ldrb	r3, [r3, #1]
 800f1e0:	2b01      	cmp	r3, #1
 800f1e2:	d13a      	bne.n	800f25a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1ea:	69da      	ldr	r2, [r3, #28]
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	781b      	ldrb	r3, [r3, #0]
 800f1f0:	f003 030f 	and.w	r3, r3, #15
 800f1f4:	2101      	movs	r1, #1
 800f1f6:	fa01 f303 	lsl.w	r3, r1, r3
 800f1fa:	b29b      	uxth	r3, r3
 800f1fc:	68f9      	ldr	r1, [r7, #12]
 800f1fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f202:	4313      	orrs	r3, r2
 800f204:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	015a      	lsls	r2, r3, #5
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	4413      	add	r3, r2
 800f20e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d155      	bne.n	800f2c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f21c:	68bb      	ldr	r3, [r7, #8]
 800f21e:	015a      	lsls	r2, r3, #5
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	4413      	add	r3, r2
 800f224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f228:	681a      	ldr	r2, [r3, #0]
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	689b      	ldr	r3, [r3, #8]
 800f22e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	78db      	ldrb	r3, [r3, #3]
 800f236:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f238:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	059b      	lsls	r3, r3, #22
 800f23e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f240:	4313      	orrs	r3, r2
 800f242:	68ba      	ldr	r2, [r7, #8]
 800f244:	0151      	lsls	r1, r2, #5
 800f246:	68fa      	ldr	r2, [r7, #12]
 800f248:	440a      	add	r2, r1
 800f24a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f24e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f256:	6013      	str	r3, [r2, #0]
 800f258:	e036      	b.n	800f2c8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f260:	69da      	ldr	r2, [r3, #28]
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	781b      	ldrb	r3, [r3, #0]
 800f266:	f003 030f 	and.w	r3, r3, #15
 800f26a:	2101      	movs	r1, #1
 800f26c:	fa01 f303 	lsl.w	r3, r1, r3
 800f270:	041b      	lsls	r3, r3, #16
 800f272:	68f9      	ldr	r1, [r7, #12]
 800f274:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f278:	4313      	orrs	r3, r2
 800f27a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	015a      	lsls	r2, r3, #5
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	4413      	add	r3, r2
 800f284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d11a      	bne.n	800f2c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	015a      	lsls	r2, r3, #5
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	4413      	add	r3, r2
 800f29a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f29e:	681a      	ldr	r2, [r3, #0]
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	689b      	ldr	r3, [r3, #8]
 800f2a4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	78db      	ldrb	r3, [r3, #3]
 800f2ac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f2ae:	430b      	orrs	r3, r1
 800f2b0:	4313      	orrs	r3, r2
 800f2b2:	68ba      	ldr	r2, [r7, #8]
 800f2b4:	0151      	lsls	r1, r2, #5
 800f2b6:	68fa      	ldr	r2, [r7, #12]
 800f2b8:	440a      	add	r2, r1
 800f2ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f2be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f2c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f2c6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f2c8:	2300      	movs	r3, #0
}
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	3714      	adds	r7, #20
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d4:	4770      	bx	lr
	...

0800f2d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f2d8:	b480      	push	{r7}
 800f2da:	b085      	sub	sp, #20
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
 800f2e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	781b      	ldrb	r3, [r3, #0]
 800f2ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	785b      	ldrb	r3, [r3, #1]
 800f2f0:	2b01      	cmp	r3, #1
 800f2f2:	d161      	bne.n	800f3b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	015a      	lsls	r2, r3, #5
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	4413      	add	r3, r2
 800f2fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f306:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f30a:	d11f      	bne.n	800f34c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f30c:	68bb      	ldr	r3, [r7, #8]
 800f30e:	015a      	lsls	r2, r3, #5
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	4413      	add	r3, r2
 800f314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	68ba      	ldr	r2, [r7, #8]
 800f31c:	0151      	lsls	r1, r2, #5
 800f31e:	68fa      	ldr	r2, [r7, #12]
 800f320:	440a      	add	r2, r1
 800f322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f326:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f32a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	015a      	lsls	r2, r3, #5
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	4413      	add	r3, r2
 800f334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	68ba      	ldr	r2, [r7, #8]
 800f33c:	0151      	lsls	r1, r2, #5
 800f33e:	68fa      	ldr	r2, [r7, #12]
 800f340:	440a      	add	r2, r1
 800f342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f346:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f34a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f352:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	781b      	ldrb	r3, [r3, #0]
 800f358:	f003 030f 	and.w	r3, r3, #15
 800f35c:	2101      	movs	r1, #1
 800f35e:	fa01 f303 	lsl.w	r3, r1, r3
 800f362:	b29b      	uxth	r3, r3
 800f364:	43db      	mvns	r3, r3
 800f366:	68f9      	ldr	r1, [r7, #12]
 800f368:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f36c:	4013      	ands	r3, r2
 800f36e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f376:	69da      	ldr	r2, [r3, #28]
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	781b      	ldrb	r3, [r3, #0]
 800f37c:	f003 030f 	and.w	r3, r3, #15
 800f380:	2101      	movs	r1, #1
 800f382:	fa01 f303 	lsl.w	r3, r1, r3
 800f386:	b29b      	uxth	r3, r3
 800f388:	43db      	mvns	r3, r3
 800f38a:	68f9      	ldr	r1, [r7, #12]
 800f38c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f390:	4013      	ands	r3, r2
 800f392:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	015a      	lsls	r2, r3, #5
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	4413      	add	r3, r2
 800f39c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3a0:	681a      	ldr	r2, [r3, #0]
 800f3a2:	68bb      	ldr	r3, [r7, #8]
 800f3a4:	0159      	lsls	r1, r3, #5
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	440b      	add	r3, r1
 800f3aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3ae:	4619      	mov	r1, r3
 800f3b0:	4b35      	ldr	r3, [pc, #212]	; (800f488 <USB_DeactivateEndpoint+0x1b0>)
 800f3b2:	4013      	ands	r3, r2
 800f3b4:	600b      	str	r3, [r1, #0]
 800f3b6:	e060      	b.n	800f47a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	015a      	lsls	r2, r3, #5
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	4413      	add	r3, r2
 800f3c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f3ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f3ce:	d11f      	bne.n	800f410 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	015a      	lsls	r2, r3, #5
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	4413      	add	r3, r2
 800f3d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	68ba      	ldr	r2, [r7, #8]
 800f3e0:	0151      	lsls	r1, r2, #5
 800f3e2:	68fa      	ldr	r2, [r7, #12]
 800f3e4:	440a      	add	r2, r1
 800f3e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f3ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	015a      	lsls	r2, r3, #5
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	4413      	add	r3, r2
 800f3f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	68ba      	ldr	r2, [r7, #8]
 800f400:	0151      	lsls	r1, r2, #5
 800f402:	68fa      	ldr	r2, [r7, #12]
 800f404:	440a      	add	r2, r1
 800f406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f40a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f40e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f416:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	781b      	ldrb	r3, [r3, #0]
 800f41c:	f003 030f 	and.w	r3, r3, #15
 800f420:	2101      	movs	r1, #1
 800f422:	fa01 f303 	lsl.w	r3, r1, r3
 800f426:	041b      	lsls	r3, r3, #16
 800f428:	43db      	mvns	r3, r3
 800f42a:	68f9      	ldr	r1, [r7, #12]
 800f42c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f430:	4013      	ands	r3, r2
 800f432:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f43a:	69da      	ldr	r2, [r3, #28]
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	781b      	ldrb	r3, [r3, #0]
 800f440:	f003 030f 	and.w	r3, r3, #15
 800f444:	2101      	movs	r1, #1
 800f446:	fa01 f303 	lsl.w	r3, r1, r3
 800f44a:	041b      	lsls	r3, r3, #16
 800f44c:	43db      	mvns	r3, r3
 800f44e:	68f9      	ldr	r1, [r7, #12]
 800f450:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f454:	4013      	ands	r3, r2
 800f456:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	015a      	lsls	r2, r3, #5
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	4413      	add	r3, r2
 800f460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f464:	681a      	ldr	r2, [r3, #0]
 800f466:	68bb      	ldr	r3, [r7, #8]
 800f468:	0159      	lsls	r1, r3, #5
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	440b      	add	r3, r1
 800f46e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f472:	4619      	mov	r1, r3
 800f474:	4b05      	ldr	r3, [pc, #20]	; (800f48c <USB_DeactivateEndpoint+0x1b4>)
 800f476:	4013      	ands	r3, r2
 800f478:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f47a:	2300      	movs	r3, #0
}
 800f47c:	4618      	mov	r0, r3
 800f47e:	3714      	adds	r7, #20
 800f480:	46bd      	mov	sp, r7
 800f482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f486:	4770      	bx	lr
 800f488:	ec337800 	.word	0xec337800
 800f48c:	eff37800 	.word	0xeff37800

0800f490 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b08a      	sub	sp, #40	; 0x28
 800f494:	af02      	add	r7, sp, #8
 800f496:	60f8      	str	r0, [r7, #12]
 800f498:	60b9      	str	r1, [r7, #8]
 800f49a:	4613      	mov	r3, r2
 800f49c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	781b      	ldrb	r3, [r3, #0]
 800f4a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f4a8:	68bb      	ldr	r3, [r7, #8]
 800f4aa:	785b      	ldrb	r3, [r3, #1]
 800f4ac:	2b01      	cmp	r3, #1
 800f4ae:	f040 815c 	bne.w	800f76a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f4b2:	68bb      	ldr	r3, [r7, #8]
 800f4b4:	695b      	ldr	r3, [r3, #20]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d132      	bne.n	800f520 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f4ba:	69bb      	ldr	r3, [r7, #24]
 800f4bc:	015a      	lsls	r2, r3, #5
 800f4be:	69fb      	ldr	r3, [r7, #28]
 800f4c0:	4413      	add	r3, r2
 800f4c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4c6:	691b      	ldr	r3, [r3, #16]
 800f4c8:	69ba      	ldr	r2, [r7, #24]
 800f4ca:	0151      	lsls	r1, r2, #5
 800f4cc:	69fa      	ldr	r2, [r7, #28]
 800f4ce:	440a      	add	r2, r1
 800f4d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f4d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f4d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f4dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f4de:	69bb      	ldr	r3, [r7, #24]
 800f4e0:	015a      	lsls	r2, r3, #5
 800f4e2:	69fb      	ldr	r3, [r7, #28]
 800f4e4:	4413      	add	r3, r2
 800f4e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4ea:	691b      	ldr	r3, [r3, #16]
 800f4ec:	69ba      	ldr	r2, [r7, #24]
 800f4ee:	0151      	lsls	r1, r2, #5
 800f4f0:	69fa      	ldr	r2, [r7, #28]
 800f4f2:	440a      	add	r2, r1
 800f4f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f4f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f4fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f4fe:	69bb      	ldr	r3, [r7, #24]
 800f500:	015a      	lsls	r2, r3, #5
 800f502:	69fb      	ldr	r3, [r7, #28]
 800f504:	4413      	add	r3, r2
 800f506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f50a:	691b      	ldr	r3, [r3, #16]
 800f50c:	69ba      	ldr	r2, [r7, #24]
 800f50e:	0151      	lsls	r1, r2, #5
 800f510:	69fa      	ldr	r2, [r7, #28]
 800f512:	440a      	add	r2, r1
 800f514:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f518:	0cdb      	lsrs	r3, r3, #19
 800f51a:	04db      	lsls	r3, r3, #19
 800f51c:	6113      	str	r3, [r2, #16]
 800f51e:	e074      	b.n	800f60a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f520:	69bb      	ldr	r3, [r7, #24]
 800f522:	015a      	lsls	r2, r3, #5
 800f524:	69fb      	ldr	r3, [r7, #28]
 800f526:	4413      	add	r3, r2
 800f528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f52c:	691b      	ldr	r3, [r3, #16]
 800f52e:	69ba      	ldr	r2, [r7, #24]
 800f530:	0151      	lsls	r1, r2, #5
 800f532:	69fa      	ldr	r2, [r7, #28]
 800f534:	440a      	add	r2, r1
 800f536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f53a:	0cdb      	lsrs	r3, r3, #19
 800f53c:	04db      	lsls	r3, r3, #19
 800f53e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f540:	69bb      	ldr	r3, [r7, #24]
 800f542:	015a      	lsls	r2, r3, #5
 800f544:	69fb      	ldr	r3, [r7, #28]
 800f546:	4413      	add	r3, r2
 800f548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f54c:	691b      	ldr	r3, [r3, #16]
 800f54e:	69ba      	ldr	r2, [r7, #24]
 800f550:	0151      	lsls	r1, r2, #5
 800f552:	69fa      	ldr	r2, [r7, #28]
 800f554:	440a      	add	r2, r1
 800f556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f55a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f55e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f562:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f564:	69bb      	ldr	r3, [r7, #24]
 800f566:	015a      	lsls	r2, r3, #5
 800f568:	69fb      	ldr	r3, [r7, #28]
 800f56a:	4413      	add	r3, r2
 800f56c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f570:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f572:	68bb      	ldr	r3, [r7, #8]
 800f574:	6959      	ldr	r1, [r3, #20]
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	689b      	ldr	r3, [r3, #8]
 800f57a:	440b      	add	r3, r1
 800f57c:	1e59      	subs	r1, r3, #1
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	689b      	ldr	r3, [r3, #8]
 800f582:	fbb1 f3f3 	udiv	r3, r1, r3
 800f586:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f588:	4b9d      	ldr	r3, [pc, #628]	; (800f800 <USB_EPStartXfer+0x370>)
 800f58a:	400b      	ands	r3, r1
 800f58c:	69b9      	ldr	r1, [r7, #24]
 800f58e:	0148      	lsls	r0, r1, #5
 800f590:	69f9      	ldr	r1, [r7, #28]
 800f592:	4401      	add	r1, r0
 800f594:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f598:	4313      	orrs	r3, r2
 800f59a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f59c:	69bb      	ldr	r3, [r7, #24]
 800f59e:	015a      	lsls	r2, r3, #5
 800f5a0:	69fb      	ldr	r3, [r7, #28]
 800f5a2:	4413      	add	r3, r2
 800f5a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5a8:	691a      	ldr	r2, [r3, #16]
 800f5aa:	68bb      	ldr	r3, [r7, #8]
 800f5ac:	695b      	ldr	r3, [r3, #20]
 800f5ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f5b2:	69b9      	ldr	r1, [r7, #24]
 800f5b4:	0148      	lsls	r0, r1, #5
 800f5b6:	69f9      	ldr	r1, [r7, #28]
 800f5b8:	4401      	add	r1, r0
 800f5ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f5be:	4313      	orrs	r3, r2
 800f5c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	78db      	ldrb	r3, [r3, #3]
 800f5c6:	2b01      	cmp	r3, #1
 800f5c8:	d11f      	bne.n	800f60a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f5ca:	69bb      	ldr	r3, [r7, #24]
 800f5cc:	015a      	lsls	r2, r3, #5
 800f5ce:	69fb      	ldr	r3, [r7, #28]
 800f5d0:	4413      	add	r3, r2
 800f5d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5d6:	691b      	ldr	r3, [r3, #16]
 800f5d8:	69ba      	ldr	r2, [r7, #24]
 800f5da:	0151      	lsls	r1, r2, #5
 800f5dc:	69fa      	ldr	r2, [r7, #28]
 800f5de:	440a      	add	r2, r1
 800f5e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f5e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f5ea:	69bb      	ldr	r3, [r7, #24]
 800f5ec:	015a      	lsls	r2, r3, #5
 800f5ee:	69fb      	ldr	r3, [r7, #28]
 800f5f0:	4413      	add	r3, r2
 800f5f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5f6:	691b      	ldr	r3, [r3, #16]
 800f5f8:	69ba      	ldr	r2, [r7, #24]
 800f5fa:	0151      	lsls	r1, r2, #5
 800f5fc:	69fa      	ldr	r2, [r7, #28]
 800f5fe:	440a      	add	r2, r1
 800f600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f604:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f608:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f60a:	79fb      	ldrb	r3, [r7, #7]
 800f60c:	2b01      	cmp	r3, #1
 800f60e:	d14b      	bne.n	800f6a8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	691b      	ldr	r3, [r3, #16]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d009      	beq.n	800f62c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f618:	69bb      	ldr	r3, [r7, #24]
 800f61a:	015a      	lsls	r2, r3, #5
 800f61c:	69fb      	ldr	r3, [r7, #28]
 800f61e:	4413      	add	r3, r2
 800f620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f624:	461a      	mov	r2, r3
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	691b      	ldr	r3, [r3, #16]
 800f62a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f62c:	68bb      	ldr	r3, [r7, #8]
 800f62e:	78db      	ldrb	r3, [r3, #3]
 800f630:	2b01      	cmp	r3, #1
 800f632:	d128      	bne.n	800f686 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f634:	69fb      	ldr	r3, [r7, #28]
 800f636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f63a:	689b      	ldr	r3, [r3, #8]
 800f63c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f640:	2b00      	cmp	r3, #0
 800f642:	d110      	bne.n	800f666 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f644:	69bb      	ldr	r3, [r7, #24]
 800f646:	015a      	lsls	r2, r3, #5
 800f648:	69fb      	ldr	r3, [r7, #28]
 800f64a:	4413      	add	r3, r2
 800f64c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	69ba      	ldr	r2, [r7, #24]
 800f654:	0151      	lsls	r1, r2, #5
 800f656:	69fa      	ldr	r2, [r7, #28]
 800f658:	440a      	add	r2, r1
 800f65a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f65e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f662:	6013      	str	r3, [r2, #0]
 800f664:	e00f      	b.n	800f686 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f666:	69bb      	ldr	r3, [r7, #24]
 800f668:	015a      	lsls	r2, r3, #5
 800f66a:	69fb      	ldr	r3, [r7, #28]
 800f66c:	4413      	add	r3, r2
 800f66e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	69ba      	ldr	r2, [r7, #24]
 800f676:	0151      	lsls	r1, r2, #5
 800f678:	69fa      	ldr	r2, [r7, #28]
 800f67a:	440a      	add	r2, r1
 800f67c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f684:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f686:	69bb      	ldr	r3, [r7, #24]
 800f688:	015a      	lsls	r2, r3, #5
 800f68a:	69fb      	ldr	r3, [r7, #28]
 800f68c:	4413      	add	r3, r2
 800f68e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	69ba      	ldr	r2, [r7, #24]
 800f696:	0151      	lsls	r1, r2, #5
 800f698:	69fa      	ldr	r2, [r7, #28]
 800f69a:	440a      	add	r2, r1
 800f69c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f6a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f6a4:	6013      	str	r3, [r2, #0]
 800f6a6:	e12f      	b.n	800f908 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f6a8:	69bb      	ldr	r3, [r7, #24]
 800f6aa:	015a      	lsls	r2, r3, #5
 800f6ac:	69fb      	ldr	r3, [r7, #28]
 800f6ae:	4413      	add	r3, r2
 800f6b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	69ba      	ldr	r2, [r7, #24]
 800f6b8:	0151      	lsls	r1, r2, #5
 800f6ba:	69fa      	ldr	r2, [r7, #28]
 800f6bc:	440a      	add	r2, r1
 800f6be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f6c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f6c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	78db      	ldrb	r3, [r3, #3]
 800f6cc:	2b01      	cmp	r3, #1
 800f6ce:	d015      	beq.n	800f6fc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	695b      	ldr	r3, [r3, #20]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	f000 8117 	beq.w	800f908 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f6da:	69fb      	ldr	r3, [r7, #28]
 800f6dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f6e2:	68bb      	ldr	r3, [r7, #8]
 800f6e4:	781b      	ldrb	r3, [r3, #0]
 800f6e6:	f003 030f 	and.w	r3, r3, #15
 800f6ea:	2101      	movs	r1, #1
 800f6ec:	fa01 f303 	lsl.w	r3, r1, r3
 800f6f0:	69f9      	ldr	r1, [r7, #28]
 800f6f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f6f6:	4313      	orrs	r3, r2
 800f6f8:	634b      	str	r3, [r1, #52]	; 0x34
 800f6fa:	e105      	b.n	800f908 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f6fc:	69fb      	ldr	r3, [r7, #28]
 800f6fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f702:	689b      	ldr	r3, [r3, #8]
 800f704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d110      	bne.n	800f72e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f70c:	69bb      	ldr	r3, [r7, #24]
 800f70e:	015a      	lsls	r2, r3, #5
 800f710:	69fb      	ldr	r3, [r7, #28]
 800f712:	4413      	add	r3, r2
 800f714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	69ba      	ldr	r2, [r7, #24]
 800f71c:	0151      	lsls	r1, r2, #5
 800f71e:	69fa      	ldr	r2, [r7, #28]
 800f720:	440a      	add	r2, r1
 800f722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f726:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f72a:	6013      	str	r3, [r2, #0]
 800f72c:	e00f      	b.n	800f74e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f72e:	69bb      	ldr	r3, [r7, #24]
 800f730:	015a      	lsls	r2, r3, #5
 800f732:	69fb      	ldr	r3, [r7, #28]
 800f734:	4413      	add	r3, r2
 800f736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	69ba      	ldr	r2, [r7, #24]
 800f73e:	0151      	lsls	r1, r2, #5
 800f740:	69fa      	ldr	r2, [r7, #28]
 800f742:	440a      	add	r2, r1
 800f744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f74c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f74e:	68bb      	ldr	r3, [r7, #8]
 800f750:	68d9      	ldr	r1, [r3, #12]
 800f752:	68bb      	ldr	r3, [r7, #8]
 800f754:	781a      	ldrb	r2, [r3, #0]
 800f756:	68bb      	ldr	r3, [r7, #8]
 800f758:	695b      	ldr	r3, [r3, #20]
 800f75a:	b298      	uxth	r0, r3
 800f75c:	79fb      	ldrb	r3, [r7, #7]
 800f75e:	9300      	str	r3, [sp, #0]
 800f760:	4603      	mov	r3, r0
 800f762:	68f8      	ldr	r0, [r7, #12]
 800f764:	f000 fa2b 	bl	800fbbe <USB_WritePacket>
 800f768:	e0ce      	b.n	800f908 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f76a:	69bb      	ldr	r3, [r7, #24]
 800f76c:	015a      	lsls	r2, r3, #5
 800f76e:	69fb      	ldr	r3, [r7, #28]
 800f770:	4413      	add	r3, r2
 800f772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f776:	691b      	ldr	r3, [r3, #16]
 800f778:	69ba      	ldr	r2, [r7, #24]
 800f77a:	0151      	lsls	r1, r2, #5
 800f77c:	69fa      	ldr	r2, [r7, #28]
 800f77e:	440a      	add	r2, r1
 800f780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f784:	0cdb      	lsrs	r3, r3, #19
 800f786:	04db      	lsls	r3, r3, #19
 800f788:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f78a:	69bb      	ldr	r3, [r7, #24]
 800f78c:	015a      	lsls	r2, r3, #5
 800f78e:	69fb      	ldr	r3, [r7, #28]
 800f790:	4413      	add	r3, r2
 800f792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f796:	691b      	ldr	r3, [r3, #16]
 800f798:	69ba      	ldr	r2, [r7, #24]
 800f79a:	0151      	lsls	r1, r2, #5
 800f79c:	69fa      	ldr	r2, [r7, #28]
 800f79e:	440a      	add	r2, r1
 800f7a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f7a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f7a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f7ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800f7ae:	68bb      	ldr	r3, [r7, #8]
 800f7b0:	695b      	ldr	r3, [r3, #20]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d126      	bne.n	800f804 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f7b6:	69bb      	ldr	r3, [r7, #24]
 800f7b8:	015a      	lsls	r2, r3, #5
 800f7ba:	69fb      	ldr	r3, [r7, #28]
 800f7bc:	4413      	add	r3, r2
 800f7be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7c2:	691a      	ldr	r2, [r3, #16]
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	689b      	ldr	r3, [r3, #8]
 800f7c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f7cc:	69b9      	ldr	r1, [r7, #24]
 800f7ce:	0148      	lsls	r0, r1, #5
 800f7d0:	69f9      	ldr	r1, [r7, #28]
 800f7d2:	4401      	add	r1, r0
 800f7d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f7d8:	4313      	orrs	r3, r2
 800f7da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f7dc:	69bb      	ldr	r3, [r7, #24]
 800f7de:	015a      	lsls	r2, r3, #5
 800f7e0:	69fb      	ldr	r3, [r7, #28]
 800f7e2:	4413      	add	r3, r2
 800f7e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7e8:	691b      	ldr	r3, [r3, #16]
 800f7ea:	69ba      	ldr	r2, [r7, #24]
 800f7ec:	0151      	lsls	r1, r2, #5
 800f7ee:	69fa      	ldr	r2, [r7, #28]
 800f7f0:	440a      	add	r2, r1
 800f7f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f7f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f7fa:	6113      	str	r3, [r2, #16]
 800f7fc:	e036      	b.n	800f86c <USB_EPStartXfer+0x3dc>
 800f7fe:	bf00      	nop
 800f800:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f804:	68bb      	ldr	r3, [r7, #8]
 800f806:	695a      	ldr	r2, [r3, #20]
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	689b      	ldr	r3, [r3, #8]
 800f80c:	4413      	add	r3, r2
 800f80e:	1e5a      	subs	r2, r3, #1
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	689b      	ldr	r3, [r3, #8]
 800f814:	fbb2 f3f3 	udiv	r3, r2, r3
 800f818:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f81a:	69bb      	ldr	r3, [r7, #24]
 800f81c:	015a      	lsls	r2, r3, #5
 800f81e:	69fb      	ldr	r3, [r7, #28]
 800f820:	4413      	add	r3, r2
 800f822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f826:	691a      	ldr	r2, [r3, #16]
 800f828:	8afb      	ldrh	r3, [r7, #22]
 800f82a:	04d9      	lsls	r1, r3, #19
 800f82c:	4b39      	ldr	r3, [pc, #228]	; (800f914 <USB_EPStartXfer+0x484>)
 800f82e:	400b      	ands	r3, r1
 800f830:	69b9      	ldr	r1, [r7, #24]
 800f832:	0148      	lsls	r0, r1, #5
 800f834:	69f9      	ldr	r1, [r7, #28]
 800f836:	4401      	add	r1, r0
 800f838:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f83c:	4313      	orrs	r3, r2
 800f83e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f840:	69bb      	ldr	r3, [r7, #24]
 800f842:	015a      	lsls	r2, r3, #5
 800f844:	69fb      	ldr	r3, [r7, #28]
 800f846:	4413      	add	r3, r2
 800f848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f84c:	691a      	ldr	r2, [r3, #16]
 800f84e:	68bb      	ldr	r3, [r7, #8]
 800f850:	689b      	ldr	r3, [r3, #8]
 800f852:	8af9      	ldrh	r1, [r7, #22]
 800f854:	fb01 f303 	mul.w	r3, r1, r3
 800f858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f85c:	69b9      	ldr	r1, [r7, #24]
 800f85e:	0148      	lsls	r0, r1, #5
 800f860:	69f9      	ldr	r1, [r7, #28]
 800f862:	4401      	add	r1, r0
 800f864:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f868:	4313      	orrs	r3, r2
 800f86a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f86c:	79fb      	ldrb	r3, [r7, #7]
 800f86e:	2b01      	cmp	r3, #1
 800f870:	d10d      	bne.n	800f88e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f872:	68bb      	ldr	r3, [r7, #8]
 800f874:	68db      	ldr	r3, [r3, #12]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d009      	beq.n	800f88e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f87a:	68bb      	ldr	r3, [r7, #8]
 800f87c:	68d9      	ldr	r1, [r3, #12]
 800f87e:	69bb      	ldr	r3, [r7, #24]
 800f880:	015a      	lsls	r2, r3, #5
 800f882:	69fb      	ldr	r3, [r7, #28]
 800f884:	4413      	add	r3, r2
 800f886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f88a:	460a      	mov	r2, r1
 800f88c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f88e:	68bb      	ldr	r3, [r7, #8]
 800f890:	78db      	ldrb	r3, [r3, #3]
 800f892:	2b01      	cmp	r3, #1
 800f894:	d128      	bne.n	800f8e8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f896:	69fb      	ldr	r3, [r7, #28]
 800f898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f89c:	689b      	ldr	r3, [r3, #8]
 800f89e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d110      	bne.n	800f8c8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f8a6:	69bb      	ldr	r3, [r7, #24]
 800f8a8:	015a      	lsls	r2, r3, #5
 800f8aa:	69fb      	ldr	r3, [r7, #28]
 800f8ac:	4413      	add	r3, r2
 800f8ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	69ba      	ldr	r2, [r7, #24]
 800f8b6:	0151      	lsls	r1, r2, #5
 800f8b8:	69fa      	ldr	r2, [r7, #28]
 800f8ba:	440a      	add	r2, r1
 800f8bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f8c4:	6013      	str	r3, [r2, #0]
 800f8c6:	e00f      	b.n	800f8e8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f8c8:	69bb      	ldr	r3, [r7, #24]
 800f8ca:	015a      	lsls	r2, r3, #5
 800f8cc:	69fb      	ldr	r3, [r7, #28]
 800f8ce:	4413      	add	r3, r2
 800f8d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	69ba      	ldr	r2, [r7, #24]
 800f8d8:	0151      	lsls	r1, r2, #5
 800f8da:	69fa      	ldr	r2, [r7, #28]
 800f8dc:	440a      	add	r2, r1
 800f8de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f8e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f8e8:	69bb      	ldr	r3, [r7, #24]
 800f8ea:	015a      	lsls	r2, r3, #5
 800f8ec:	69fb      	ldr	r3, [r7, #28]
 800f8ee:	4413      	add	r3, r2
 800f8f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	69ba      	ldr	r2, [r7, #24]
 800f8f8:	0151      	lsls	r1, r2, #5
 800f8fa:	69fa      	ldr	r2, [r7, #28]
 800f8fc:	440a      	add	r2, r1
 800f8fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f902:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f906:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f908:	2300      	movs	r3, #0
}
 800f90a:	4618      	mov	r0, r3
 800f90c:	3720      	adds	r7, #32
 800f90e:	46bd      	mov	sp, r7
 800f910:	bd80      	pop	{r7, pc}
 800f912:	bf00      	nop
 800f914:	1ff80000 	.word	0x1ff80000

0800f918 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f918:	b480      	push	{r7}
 800f91a:	b087      	sub	sp, #28
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	60f8      	str	r0, [r7, #12]
 800f920:	60b9      	str	r1, [r7, #8]
 800f922:	4613      	mov	r3, r2
 800f924:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	781b      	ldrb	r3, [r3, #0]
 800f92e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f930:	68bb      	ldr	r3, [r7, #8]
 800f932:	785b      	ldrb	r3, [r3, #1]
 800f934:	2b01      	cmp	r3, #1
 800f936:	f040 80cd 	bne.w	800fad4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	695b      	ldr	r3, [r3, #20]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d132      	bne.n	800f9a8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f942:	693b      	ldr	r3, [r7, #16]
 800f944:	015a      	lsls	r2, r3, #5
 800f946:	697b      	ldr	r3, [r7, #20]
 800f948:	4413      	add	r3, r2
 800f94a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f94e:	691b      	ldr	r3, [r3, #16]
 800f950:	693a      	ldr	r2, [r7, #16]
 800f952:	0151      	lsls	r1, r2, #5
 800f954:	697a      	ldr	r2, [r7, #20]
 800f956:	440a      	add	r2, r1
 800f958:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f95c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f960:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f964:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f966:	693b      	ldr	r3, [r7, #16]
 800f968:	015a      	lsls	r2, r3, #5
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	4413      	add	r3, r2
 800f96e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f972:	691b      	ldr	r3, [r3, #16]
 800f974:	693a      	ldr	r2, [r7, #16]
 800f976:	0151      	lsls	r1, r2, #5
 800f978:	697a      	ldr	r2, [r7, #20]
 800f97a:	440a      	add	r2, r1
 800f97c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f980:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f984:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f986:	693b      	ldr	r3, [r7, #16]
 800f988:	015a      	lsls	r2, r3, #5
 800f98a:	697b      	ldr	r3, [r7, #20]
 800f98c:	4413      	add	r3, r2
 800f98e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f992:	691b      	ldr	r3, [r3, #16]
 800f994:	693a      	ldr	r2, [r7, #16]
 800f996:	0151      	lsls	r1, r2, #5
 800f998:	697a      	ldr	r2, [r7, #20]
 800f99a:	440a      	add	r2, r1
 800f99c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9a0:	0cdb      	lsrs	r3, r3, #19
 800f9a2:	04db      	lsls	r3, r3, #19
 800f9a4:	6113      	str	r3, [r2, #16]
 800f9a6:	e04e      	b.n	800fa46 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f9a8:	693b      	ldr	r3, [r7, #16]
 800f9aa:	015a      	lsls	r2, r3, #5
 800f9ac:	697b      	ldr	r3, [r7, #20]
 800f9ae:	4413      	add	r3, r2
 800f9b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9b4:	691b      	ldr	r3, [r3, #16]
 800f9b6:	693a      	ldr	r2, [r7, #16]
 800f9b8:	0151      	lsls	r1, r2, #5
 800f9ba:	697a      	ldr	r2, [r7, #20]
 800f9bc:	440a      	add	r2, r1
 800f9be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9c2:	0cdb      	lsrs	r3, r3, #19
 800f9c4:	04db      	lsls	r3, r3, #19
 800f9c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f9c8:	693b      	ldr	r3, [r7, #16]
 800f9ca:	015a      	lsls	r2, r3, #5
 800f9cc:	697b      	ldr	r3, [r7, #20]
 800f9ce:	4413      	add	r3, r2
 800f9d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9d4:	691b      	ldr	r3, [r3, #16]
 800f9d6:	693a      	ldr	r2, [r7, #16]
 800f9d8:	0151      	lsls	r1, r2, #5
 800f9da:	697a      	ldr	r2, [r7, #20]
 800f9dc:	440a      	add	r2, r1
 800f9de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f9e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f9ea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	695a      	ldr	r2, [r3, #20]
 800f9f0:	68bb      	ldr	r3, [r7, #8]
 800f9f2:	689b      	ldr	r3, [r3, #8]
 800f9f4:	429a      	cmp	r2, r3
 800f9f6:	d903      	bls.n	800fa00 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	689a      	ldr	r2, [r3, #8]
 800f9fc:	68bb      	ldr	r3, [r7, #8]
 800f9fe:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fa00:	693b      	ldr	r3, [r7, #16]
 800fa02:	015a      	lsls	r2, r3, #5
 800fa04:	697b      	ldr	r3, [r7, #20]
 800fa06:	4413      	add	r3, r2
 800fa08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa0c:	691b      	ldr	r3, [r3, #16]
 800fa0e:	693a      	ldr	r2, [r7, #16]
 800fa10:	0151      	lsls	r1, r2, #5
 800fa12:	697a      	ldr	r2, [r7, #20]
 800fa14:	440a      	add	r2, r1
 800fa16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fa1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fa20:	693b      	ldr	r3, [r7, #16]
 800fa22:	015a      	lsls	r2, r3, #5
 800fa24:	697b      	ldr	r3, [r7, #20]
 800fa26:	4413      	add	r3, r2
 800fa28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa2c:	691a      	ldr	r2, [r3, #16]
 800fa2e:	68bb      	ldr	r3, [r7, #8]
 800fa30:	695b      	ldr	r3, [r3, #20]
 800fa32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fa36:	6939      	ldr	r1, [r7, #16]
 800fa38:	0148      	lsls	r0, r1, #5
 800fa3a:	6979      	ldr	r1, [r7, #20]
 800fa3c:	4401      	add	r1, r0
 800fa3e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fa42:	4313      	orrs	r3, r2
 800fa44:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800fa46:	79fb      	ldrb	r3, [r7, #7]
 800fa48:	2b01      	cmp	r3, #1
 800fa4a:	d11e      	bne.n	800fa8a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800fa4c:	68bb      	ldr	r3, [r7, #8]
 800fa4e:	691b      	ldr	r3, [r3, #16]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d009      	beq.n	800fa68 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fa54:	693b      	ldr	r3, [r7, #16]
 800fa56:	015a      	lsls	r2, r3, #5
 800fa58:	697b      	ldr	r3, [r7, #20]
 800fa5a:	4413      	add	r3, r2
 800fa5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa60:	461a      	mov	r2, r3
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	691b      	ldr	r3, [r3, #16]
 800fa66:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fa68:	693b      	ldr	r3, [r7, #16]
 800fa6a:	015a      	lsls	r2, r3, #5
 800fa6c:	697b      	ldr	r3, [r7, #20]
 800fa6e:	4413      	add	r3, r2
 800fa70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	693a      	ldr	r2, [r7, #16]
 800fa78:	0151      	lsls	r1, r2, #5
 800fa7a:	697a      	ldr	r2, [r7, #20]
 800fa7c:	440a      	add	r2, r1
 800fa7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fa86:	6013      	str	r3, [r2, #0]
 800fa88:	e092      	b.n	800fbb0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fa8a:	693b      	ldr	r3, [r7, #16]
 800fa8c:	015a      	lsls	r2, r3, #5
 800fa8e:	697b      	ldr	r3, [r7, #20]
 800fa90:	4413      	add	r3, r2
 800fa92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	693a      	ldr	r2, [r7, #16]
 800fa9a:	0151      	lsls	r1, r2, #5
 800fa9c:	697a      	ldr	r2, [r7, #20]
 800fa9e:	440a      	add	r2, r1
 800faa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800faa4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800faa8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	695b      	ldr	r3, [r3, #20]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d07e      	beq.n	800fbb0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fab2:	697b      	ldr	r3, [r7, #20]
 800fab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fab8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	781b      	ldrb	r3, [r3, #0]
 800fabe:	f003 030f 	and.w	r3, r3, #15
 800fac2:	2101      	movs	r1, #1
 800fac4:	fa01 f303 	lsl.w	r3, r1, r3
 800fac8:	6979      	ldr	r1, [r7, #20]
 800faca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800face:	4313      	orrs	r3, r2
 800fad0:	634b      	str	r3, [r1, #52]	; 0x34
 800fad2:	e06d      	b.n	800fbb0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fad4:	693b      	ldr	r3, [r7, #16]
 800fad6:	015a      	lsls	r2, r3, #5
 800fad8:	697b      	ldr	r3, [r7, #20]
 800fada:	4413      	add	r3, r2
 800fadc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fae0:	691b      	ldr	r3, [r3, #16]
 800fae2:	693a      	ldr	r2, [r7, #16]
 800fae4:	0151      	lsls	r1, r2, #5
 800fae6:	697a      	ldr	r2, [r7, #20]
 800fae8:	440a      	add	r2, r1
 800faea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800faee:	0cdb      	lsrs	r3, r3, #19
 800faf0:	04db      	lsls	r3, r3, #19
 800faf2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800faf4:	693b      	ldr	r3, [r7, #16]
 800faf6:	015a      	lsls	r2, r3, #5
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	4413      	add	r3, r2
 800fafc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb00:	691b      	ldr	r3, [r3, #16]
 800fb02:	693a      	ldr	r2, [r7, #16]
 800fb04:	0151      	lsls	r1, r2, #5
 800fb06:	697a      	ldr	r2, [r7, #20]
 800fb08:	440a      	add	r2, r1
 800fb0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb0e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fb12:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fb16:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	695b      	ldr	r3, [r3, #20]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d003      	beq.n	800fb28 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800fb20:	68bb      	ldr	r3, [r7, #8]
 800fb22:	689a      	ldr	r2, [r3, #8]
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fb28:	693b      	ldr	r3, [r7, #16]
 800fb2a:	015a      	lsls	r2, r3, #5
 800fb2c:	697b      	ldr	r3, [r7, #20]
 800fb2e:	4413      	add	r3, r2
 800fb30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb34:	691b      	ldr	r3, [r3, #16]
 800fb36:	693a      	ldr	r2, [r7, #16]
 800fb38:	0151      	lsls	r1, r2, #5
 800fb3a:	697a      	ldr	r2, [r7, #20]
 800fb3c:	440a      	add	r2, r1
 800fb3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fb46:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800fb48:	693b      	ldr	r3, [r7, #16]
 800fb4a:	015a      	lsls	r2, r3, #5
 800fb4c:	697b      	ldr	r3, [r7, #20]
 800fb4e:	4413      	add	r3, r2
 800fb50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb54:	691a      	ldr	r2, [r3, #16]
 800fb56:	68bb      	ldr	r3, [r7, #8]
 800fb58:	689b      	ldr	r3, [r3, #8]
 800fb5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fb5e:	6939      	ldr	r1, [r7, #16]
 800fb60:	0148      	lsls	r0, r1, #5
 800fb62:	6979      	ldr	r1, [r7, #20]
 800fb64:	4401      	add	r1, r0
 800fb66:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fb6a:	4313      	orrs	r3, r2
 800fb6c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800fb6e:	79fb      	ldrb	r3, [r7, #7]
 800fb70:	2b01      	cmp	r3, #1
 800fb72:	d10d      	bne.n	800fb90 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fb74:	68bb      	ldr	r3, [r7, #8]
 800fb76:	68db      	ldr	r3, [r3, #12]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d009      	beq.n	800fb90 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800fb7c:	68bb      	ldr	r3, [r7, #8]
 800fb7e:	68d9      	ldr	r1, [r3, #12]
 800fb80:	693b      	ldr	r3, [r7, #16]
 800fb82:	015a      	lsls	r2, r3, #5
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	4413      	add	r3, r2
 800fb88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb8c:	460a      	mov	r2, r1
 800fb8e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fb90:	693b      	ldr	r3, [r7, #16]
 800fb92:	015a      	lsls	r2, r3, #5
 800fb94:	697b      	ldr	r3, [r7, #20]
 800fb96:	4413      	add	r3, r2
 800fb98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	693a      	ldr	r2, [r7, #16]
 800fba0:	0151      	lsls	r1, r2, #5
 800fba2:	697a      	ldr	r2, [r7, #20]
 800fba4:	440a      	add	r2, r1
 800fba6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fbaa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fbae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fbb0:	2300      	movs	r3, #0
}
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	371c      	adds	r7, #28
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbbc:	4770      	bx	lr

0800fbbe <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800fbbe:	b480      	push	{r7}
 800fbc0:	b089      	sub	sp, #36	; 0x24
 800fbc2:	af00      	add	r7, sp, #0
 800fbc4:	60f8      	str	r0, [r7, #12]
 800fbc6:	60b9      	str	r1, [r7, #8]
 800fbc8:	4611      	mov	r1, r2
 800fbca:	461a      	mov	r2, r3
 800fbcc:	460b      	mov	r3, r1
 800fbce:	71fb      	strb	r3, [r7, #7]
 800fbd0:	4613      	mov	r3, r2
 800fbd2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800fbd8:	68bb      	ldr	r3, [r7, #8]
 800fbda:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800fbdc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d123      	bne.n	800fc2c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800fbe4:	88bb      	ldrh	r3, [r7, #4]
 800fbe6:	3303      	adds	r3, #3
 800fbe8:	089b      	lsrs	r3, r3, #2
 800fbea:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800fbec:	2300      	movs	r3, #0
 800fbee:	61bb      	str	r3, [r7, #24]
 800fbf0:	e018      	b.n	800fc24 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800fbf2:	79fb      	ldrb	r3, [r7, #7]
 800fbf4:	031a      	lsls	r2, r3, #12
 800fbf6:	697b      	ldr	r3, [r7, #20]
 800fbf8:	4413      	add	r3, r2
 800fbfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fbfe:	461a      	mov	r2, r3
 800fc00:	69fb      	ldr	r3, [r7, #28]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	6013      	str	r3, [r2, #0]
      pSrc++;
 800fc06:	69fb      	ldr	r3, [r7, #28]
 800fc08:	3301      	adds	r3, #1
 800fc0a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fc0c:	69fb      	ldr	r3, [r7, #28]
 800fc0e:	3301      	adds	r3, #1
 800fc10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fc12:	69fb      	ldr	r3, [r7, #28]
 800fc14:	3301      	adds	r3, #1
 800fc16:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fc18:	69fb      	ldr	r3, [r7, #28]
 800fc1a:	3301      	adds	r3, #1
 800fc1c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800fc1e:	69bb      	ldr	r3, [r7, #24]
 800fc20:	3301      	adds	r3, #1
 800fc22:	61bb      	str	r3, [r7, #24]
 800fc24:	69ba      	ldr	r2, [r7, #24]
 800fc26:	693b      	ldr	r3, [r7, #16]
 800fc28:	429a      	cmp	r2, r3
 800fc2a:	d3e2      	bcc.n	800fbf2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800fc2c:	2300      	movs	r3, #0
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	3724      	adds	r7, #36	; 0x24
 800fc32:	46bd      	mov	sp, r7
 800fc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc38:	4770      	bx	lr

0800fc3a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800fc3a:	b480      	push	{r7}
 800fc3c:	b08b      	sub	sp, #44	; 0x2c
 800fc3e:	af00      	add	r7, sp, #0
 800fc40:	60f8      	str	r0, [r7, #12]
 800fc42:	60b9      	str	r1, [r7, #8]
 800fc44:	4613      	mov	r3, r2
 800fc46:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800fc4c:	68bb      	ldr	r3, [r7, #8]
 800fc4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800fc50:	88fb      	ldrh	r3, [r7, #6]
 800fc52:	089b      	lsrs	r3, r3, #2
 800fc54:	b29b      	uxth	r3, r3
 800fc56:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800fc58:	88fb      	ldrh	r3, [r7, #6]
 800fc5a:	f003 0303 	and.w	r3, r3, #3
 800fc5e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800fc60:	2300      	movs	r3, #0
 800fc62:	623b      	str	r3, [r7, #32]
 800fc64:	e014      	b.n	800fc90 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800fc66:	69bb      	ldr	r3, [r7, #24]
 800fc68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc6c:	681a      	ldr	r2, [r3, #0]
 800fc6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc70:	601a      	str	r2, [r3, #0]
    pDest++;
 800fc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc74:	3301      	adds	r3, #1
 800fc76:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc7a:	3301      	adds	r3, #1
 800fc7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc80:	3301      	adds	r3, #1
 800fc82:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc86:	3301      	adds	r3, #1
 800fc88:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800fc8a:	6a3b      	ldr	r3, [r7, #32]
 800fc8c:	3301      	adds	r3, #1
 800fc8e:	623b      	str	r3, [r7, #32]
 800fc90:	6a3a      	ldr	r2, [r7, #32]
 800fc92:	697b      	ldr	r3, [r7, #20]
 800fc94:	429a      	cmp	r2, r3
 800fc96:	d3e6      	bcc.n	800fc66 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800fc98:	8bfb      	ldrh	r3, [r7, #30]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d01e      	beq.n	800fcdc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800fc9e:	2300      	movs	r3, #0
 800fca0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800fca2:	69bb      	ldr	r3, [r7, #24]
 800fca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fca8:	461a      	mov	r2, r3
 800fcaa:	f107 0310 	add.w	r3, r7, #16
 800fcae:	6812      	ldr	r2, [r2, #0]
 800fcb0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800fcb2:	693a      	ldr	r2, [r7, #16]
 800fcb4:	6a3b      	ldr	r3, [r7, #32]
 800fcb6:	b2db      	uxtb	r3, r3
 800fcb8:	00db      	lsls	r3, r3, #3
 800fcba:	fa22 f303 	lsr.w	r3, r2, r3
 800fcbe:	b2da      	uxtb	r2, r3
 800fcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcc2:	701a      	strb	r2, [r3, #0]
      i++;
 800fcc4:	6a3b      	ldr	r3, [r7, #32]
 800fcc6:	3301      	adds	r3, #1
 800fcc8:	623b      	str	r3, [r7, #32]
      pDest++;
 800fcca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fccc:	3301      	adds	r3, #1
 800fcce:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800fcd0:	8bfb      	ldrh	r3, [r7, #30]
 800fcd2:	3b01      	subs	r3, #1
 800fcd4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800fcd6:	8bfb      	ldrh	r3, [r7, #30]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d1ea      	bne.n	800fcb2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800fcdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fcde:	4618      	mov	r0, r3
 800fce0:	372c      	adds	r7, #44	; 0x2c
 800fce2:	46bd      	mov	sp, r7
 800fce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce8:	4770      	bx	lr

0800fcea <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fcea:	b480      	push	{r7}
 800fcec:	b085      	sub	sp, #20
 800fcee:	af00      	add	r7, sp, #0
 800fcf0:	6078      	str	r0, [r7, #4]
 800fcf2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	781b      	ldrb	r3, [r3, #0]
 800fcfc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	785b      	ldrb	r3, [r3, #1]
 800fd02:	2b01      	cmp	r3, #1
 800fd04:	d12c      	bne.n	800fd60 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	015a      	lsls	r2, r3, #5
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	4413      	add	r3, r2
 800fd0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	db12      	blt.n	800fd3e <USB_EPSetStall+0x54>
 800fd18:	68bb      	ldr	r3, [r7, #8]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d00f      	beq.n	800fd3e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800fd1e:	68bb      	ldr	r3, [r7, #8]
 800fd20:	015a      	lsls	r2, r3, #5
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	4413      	add	r3, r2
 800fd26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	68ba      	ldr	r2, [r7, #8]
 800fd2e:	0151      	lsls	r1, r2, #5
 800fd30:	68fa      	ldr	r2, [r7, #12]
 800fd32:	440a      	add	r2, r1
 800fd34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fd3c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800fd3e:	68bb      	ldr	r3, [r7, #8]
 800fd40:	015a      	lsls	r2, r3, #5
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	4413      	add	r3, r2
 800fd46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	68ba      	ldr	r2, [r7, #8]
 800fd4e:	0151      	lsls	r1, r2, #5
 800fd50:	68fa      	ldr	r2, [r7, #12]
 800fd52:	440a      	add	r2, r1
 800fd54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fd5c:	6013      	str	r3, [r2, #0]
 800fd5e:	e02b      	b.n	800fdb8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fd60:	68bb      	ldr	r3, [r7, #8]
 800fd62:	015a      	lsls	r2, r3, #5
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	4413      	add	r3, r2
 800fd68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	db12      	blt.n	800fd98 <USB_EPSetStall+0xae>
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d00f      	beq.n	800fd98 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800fd78:	68bb      	ldr	r3, [r7, #8]
 800fd7a:	015a      	lsls	r2, r3, #5
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	4413      	add	r3, r2
 800fd80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	68ba      	ldr	r2, [r7, #8]
 800fd88:	0151      	lsls	r1, r2, #5
 800fd8a:	68fa      	ldr	r2, [r7, #12]
 800fd8c:	440a      	add	r2, r1
 800fd8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fd96:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800fd98:	68bb      	ldr	r3, [r7, #8]
 800fd9a:	015a      	lsls	r2, r3, #5
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	4413      	add	r3, r2
 800fda0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	68ba      	ldr	r2, [r7, #8]
 800fda8:	0151      	lsls	r1, r2, #5
 800fdaa:	68fa      	ldr	r2, [r7, #12]
 800fdac:	440a      	add	r2, r1
 800fdae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fdb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fdb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fdb8:	2300      	movs	r3, #0
}
 800fdba:	4618      	mov	r0, r3
 800fdbc:	3714      	adds	r7, #20
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc4:	4770      	bx	lr

0800fdc6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fdc6:	b480      	push	{r7}
 800fdc8:	b085      	sub	sp, #20
 800fdca:	af00      	add	r7, sp, #0
 800fdcc:	6078      	str	r0, [r7, #4]
 800fdce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fdd4:	683b      	ldr	r3, [r7, #0]
 800fdd6:	781b      	ldrb	r3, [r3, #0]
 800fdd8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fdda:	683b      	ldr	r3, [r7, #0]
 800fddc:	785b      	ldrb	r3, [r3, #1]
 800fdde:	2b01      	cmp	r3, #1
 800fde0:	d128      	bne.n	800fe34 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800fde2:	68bb      	ldr	r3, [r7, #8]
 800fde4:	015a      	lsls	r2, r3, #5
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	4413      	add	r3, r2
 800fdea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	68ba      	ldr	r2, [r7, #8]
 800fdf2:	0151      	lsls	r1, r2, #5
 800fdf4:	68fa      	ldr	r2, [r7, #12]
 800fdf6:	440a      	add	r2, r1
 800fdf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fdfc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fe00:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	78db      	ldrb	r3, [r3, #3]
 800fe06:	2b03      	cmp	r3, #3
 800fe08:	d003      	beq.n	800fe12 <USB_EPClearStall+0x4c>
 800fe0a:	683b      	ldr	r3, [r7, #0]
 800fe0c:	78db      	ldrb	r3, [r3, #3]
 800fe0e:	2b02      	cmp	r3, #2
 800fe10:	d138      	bne.n	800fe84 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fe12:	68bb      	ldr	r3, [r7, #8]
 800fe14:	015a      	lsls	r2, r3, #5
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	4413      	add	r3, r2
 800fe1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	68ba      	ldr	r2, [r7, #8]
 800fe22:	0151      	lsls	r1, r2, #5
 800fe24:	68fa      	ldr	r2, [r7, #12]
 800fe26:	440a      	add	r2, r1
 800fe28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fe30:	6013      	str	r3, [r2, #0]
 800fe32:	e027      	b.n	800fe84 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800fe34:	68bb      	ldr	r3, [r7, #8]
 800fe36:	015a      	lsls	r2, r3, #5
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	4413      	add	r3, r2
 800fe3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	68ba      	ldr	r2, [r7, #8]
 800fe44:	0151      	lsls	r1, r2, #5
 800fe46:	68fa      	ldr	r2, [r7, #12]
 800fe48:	440a      	add	r2, r1
 800fe4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fe52:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	78db      	ldrb	r3, [r3, #3]
 800fe58:	2b03      	cmp	r3, #3
 800fe5a:	d003      	beq.n	800fe64 <USB_EPClearStall+0x9e>
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	78db      	ldrb	r3, [r3, #3]
 800fe60:	2b02      	cmp	r3, #2
 800fe62:	d10f      	bne.n	800fe84 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fe64:	68bb      	ldr	r3, [r7, #8]
 800fe66:	015a      	lsls	r2, r3, #5
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	4413      	add	r3, r2
 800fe6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	68ba      	ldr	r2, [r7, #8]
 800fe74:	0151      	lsls	r1, r2, #5
 800fe76:	68fa      	ldr	r2, [r7, #12]
 800fe78:	440a      	add	r2, r1
 800fe7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fe82:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800fe84:	2300      	movs	r3, #0
}
 800fe86:	4618      	mov	r0, r3
 800fe88:	3714      	adds	r7, #20
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe90:	4770      	bx	lr

0800fe92 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800fe92:	b480      	push	{r7}
 800fe94:	b085      	sub	sp, #20
 800fe96:	af00      	add	r7, sp, #0
 800fe98:	6078      	str	r0, [r7, #4]
 800fe9a:	460b      	mov	r3, r1
 800fe9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	68fa      	ldr	r2, [r7, #12]
 800feac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800feb0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800feb4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800febc:	681a      	ldr	r2, [r3, #0]
 800febe:	78fb      	ldrb	r3, [r7, #3]
 800fec0:	011b      	lsls	r3, r3, #4
 800fec2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800fec6:	68f9      	ldr	r1, [r7, #12]
 800fec8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fecc:	4313      	orrs	r3, r2
 800fece:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800fed0:	2300      	movs	r3, #0
}
 800fed2:	4618      	mov	r0, r3
 800fed4:	3714      	adds	r7, #20
 800fed6:	46bd      	mov	sp, r7
 800fed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fedc:	4770      	bx	lr

0800fede <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fede:	b480      	push	{r7}
 800fee0:	b085      	sub	sp, #20
 800fee2:	af00      	add	r7, sp, #0
 800fee4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	68fa      	ldr	r2, [r7, #12]
 800fef4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fef8:	f023 0303 	bic.w	r3, r3, #3
 800fefc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff04:	685b      	ldr	r3, [r3, #4]
 800ff06:	68fa      	ldr	r2, [r7, #12]
 800ff08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ff0c:	f023 0302 	bic.w	r3, r3, #2
 800ff10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ff12:	2300      	movs	r3, #0
}
 800ff14:	4618      	mov	r0, r3
 800ff16:	3714      	adds	r7, #20
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1e:	4770      	bx	lr

0800ff20 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ff20:	b480      	push	{r7}
 800ff22:	b085      	sub	sp, #20
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	68fa      	ldr	r2, [r7, #12]
 800ff36:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ff3a:	f023 0303 	bic.w	r3, r3, #3
 800ff3e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff46:	685b      	ldr	r3, [r3, #4]
 800ff48:	68fa      	ldr	r2, [r7, #12]
 800ff4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ff4e:	f043 0302 	orr.w	r3, r3, #2
 800ff52:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ff54:	2300      	movs	r3, #0
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	3714      	adds	r7, #20
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff60:	4770      	bx	lr

0800ff62 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ff62:	b480      	push	{r7}
 800ff64:	b085      	sub	sp, #20
 800ff66:	af00      	add	r7, sp, #0
 800ff68:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	695b      	ldr	r3, [r3, #20]
 800ff6e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	699b      	ldr	r3, [r3, #24]
 800ff74:	68fa      	ldr	r2, [r7, #12]
 800ff76:	4013      	ands	r3, r2
 800ff78:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ff7a:	68fb      	ldr	r3, [r7, #12]
}
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	3714      	adds	r7, #20
 800ff80:	46bd      	mov	sp, r7
 800ff82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff86:	4770      	bx	lr

0800ff88 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ff88:	b480      	push	{r7}
 800ff8a:	b085      	sub	sp, #20
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff9a:	699b      	ldr	r3, [r3, #24]
 800ff9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffa4:	69db      	ldr	r3, [r3, #28]
 800ffa6:	68ba      	ldr	r2, [r7, #8]
 800ffa8:	4013      	ands	r3, r2
 800ffaa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	0c1b      	lsrs	r3, r3, #16
}
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	3714      	adds	r7, #20
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffba:	4770      	bx	lr

0800ffbc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ffbc:	b480      	push	{r7}
 800ffbe:	b085      	sub	sp, #20
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffce:	699b      	ldr	r3, [r3, #24]
 800ffd0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffd8:	69db      	ldr	r3, [r3, #28]
 800ffda:	68ba      	ldr	r2, [r7, #8]
 800ffdc:	4013      	ands	r3, r2
 800ffde:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	b29b      	uxth	r3, r3
}
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	3714      	adds	r7, #20
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffee:	4770      	bx	lr

0800fff0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fff0:	b480      	push	{r7}
 800fff2:	b085      	sub	sp, #20
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	460b      	mov	r3, r1
 800fffa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010000:	78fb      	ldrb	r3, [r7, #3]
 8010002:	015a      	lsls	r2, r3, #5
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	4413      	add	r3, r2
 8010008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801000c:	689b      	ldr	r3, [r3, #8]
 801000e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010016:	695b      	ldr	r3, [r3, #20]
 8010018:	68ba      	ldr	r2, [r7, #8]
 801001a:	4013      	ands	r3, r2
 801001c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801001e:	68bb      	ldr	r3, [r7, #8]
}
 8010020:	4618      	mov	r0, r3
 8010022:	3714      	adds	r7, #20
 8010024:	46bd      	mov	sp, r7
 8010026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002a:	4770      	bx	lr

0801002c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801002c:	b480      	push	{r7}
 801002e:	b087      	sub	sp, #28
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
 8010034:	460b      	mov	r3, r1
 8010036:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801003c:	697b      	ldr	r3, [r7, #20]
 801003e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010042:	691b      	ldr	r3, [r3, #16]
 8010044:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010046:	697b      	ldr	r3, [r7, #20]
 8010048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801004c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801004e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010050:	78fb      	ldrb	r3, [r7, #3]
 8010052:	f003 030f 	and.w	r3, r3, #15
 8010056:	68fa      	ldr	r2, [r7, #12]
 8010058:	fa22 f303 	lsr.w	r3, r2, r3
 801005c:	01db      	lsls	r3, r3, #7
 801005e:	b2db      	uxtb	r3, r3
 8010060:	693a      	ldr	r2, [r7, #16]
 8010062:	4313      	orrs	r3, r2
 8010064:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010066:	78fb      	ldrb	r3, [r7, #3]
 8010068:	015a      	lsls	r2, r3, #5
 801006a:	697b      	ldr	r3, [r7, #20]
 801006c:	4413      	add	r3, r2
 801006e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010072:	689b      	ldr	r3, [r3, #8]
 8010074:	693a      	ldr	r2, [r7, #16]
 8010076:	4013      	ands	r3, r2
 8010078:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801007a:	68bb      	ldr	r3, [r7, #8]
}
 801007c:	4618      	mov	r0, r3
 801007e:	371c      	adds	r7, #28
 8010080:	46bd      	mov	sp, r7
 8010082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010086:	4770      	bx	lr

08010088 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010088:	b480      	push	{r7}
 801008a:	b083      	sub	sp, #12
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	695b      	ldr	r3, [r3, #20]
 8010094:	f003 0301 	and.w	r3, r3, #1
}
 8010098:	4618      	mov	r0, r3
 801009a:	370c      	adds	r7, #12
 801009c:	46bd      	mov	sp, r7
 801009e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a2:	4770      	bx	lr

080100a4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80100a4:	b480      	push	{r7}
 80100a6:	b085      	sub	sp, #20
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	68fa      	ldr	r2, [r7, #12]
 80100ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80100c2:	f023 0307 	bic.w	r3, r3, #7
 80100c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100ce:	685b      	ldr	r3, [r3, #4]
 80100d0:	68fa      	ldr	r2, [r7, #12]
 80100d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80100d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80100da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80100dc:	2300      	movs	r3, #0
}
 80100de:	4618      	mov	r0, r3
 80100e0:	3714      	adds	r7, #20
 80100e2:	46bd      	mov	sp, r7
 80100e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e8:	4770      	bx	lr
	...

080100ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80100ec:	b480      	push	{r7}
 80100ee:	b087      	sub	sp, #28
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	60f8      	str	r0, [r7, #12]
 80100f4:	460b      	mov	r3, r1
 80100f6:	607a      	str	r2, [r7, #4]
 80100f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	333c      	adds	r3, #60	; 0x3c
 8010102:	3304      	adds	r3, #4
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010108:	693b      	ldr	r3, [r7, #16]
 801010a:	4a26      	ldr	r2, [pc, #152]	; (80101a4 <USB_EP0_OutStart+0xb8>)
 801010c:	4293      	cmp	r3, r2
 801010e:	d90a      	bls.n	8010126 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010110:	697b      	ldr	r3, [r7, #20]
 8010112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801011c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010120:	d101      	bne.n	8010126 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010122:	2300      	movs	r3, #0
 8010124:	e037      	b.n	8010196 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801012c:	461a      	mov	r2, r3
 801012e:	2300      	movs	r3, #0
 8010130:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010132:	697b      	ldr	r3, [r7, #20]
 8010134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010138:	691b      	ldr	r3, [r3, #16]
 801013a:	697a      	ldr	r2, [r7, #20]
 801013c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010140:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010144:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010146:	697b      	ldr	r3, [r7, #20]
 8010148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801014c:	691b      	ldr	r3, [r3, #16]
 801014e:	697a      	ldr	r2, [r7, #20]
 8010150:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010154:	f043 0318 	orr.w	r3, r3, #24
 8010158:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801015a:	697b      	ldr	r3, [r7, #20]
 801015c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010160:	691b      	ldr	r3, [r3, #16]
 8010162:	697a      	ldr	r2, [r7, #20]
 8010164:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010168:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801016c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801016e:	7afb      	ldrb	r3, [r7, #11]
 8010170:	2b01      	cmp	r3, #1
 8010172:	d10f      	bne.n	8010194 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010174:	697b      	ldr	r3, [r7, #20]
 8010176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801017a:	461a      	mov	r2, r3
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010180:	697b      	ldr	r3, [r7, #20]
 8010182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	697a      	ldr	r2, [r7, #20]
 801018a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801018e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010192:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010194:	2300      	movs	r3, #0
}
 8010196:	4618      	mov	r0, r3
 8010198:	371c      	adds	r7, #28
 801019a:	46bd      	mov	sp, r7
 801019c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a0:	4770      	bx	lr
 80101a2:	bf00      	nop
 80101a4:	4f54300a 	.word	0x4f54300a

080101a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80101a8:	b480      	push	{r7}
 80101aa:	b085      	sub	sp, #20
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80101b0:	2300      	movs	r3, #0
 80101b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	3301      	adds	r3, #1
 80101b8:	60fb      	str	r3, [r7, #12]
 80101ba:	4a13      	ldr	r2, [pc, #76]	; (8010208 <USB_CoreReset+0x60>)
 80101bc:	4293      	cmp	r3, r2
 80101be:	d901      	bls.n	80101c4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80101c0:	2303      	movs	r3, #3
 80101c2:	e01a      	b.n	80101fa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	691b      	ldr	r3, [r3, #16]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	daf3      	bge.n	80101b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80101cc:	2300      	movs	r3, #0
 80101ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	691b      	ldr	r3, [r3, #16]
 80101d4:	f043 0201 	orr.w	r2, r3, #1
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	3301      	adds	r3, #1
 80101e0:	60fb      	str	r3, [r7, #12]
 80101e2:	4a09      	ldr	r2, [pc, #36]	; (8010208 <USB_CoreReset+0x60>)
 80101e4:	4293      	cmp	r3, r2
 80101e6:	d901      	bls.n	80101ec <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80101e8:	2303      	movs	r3, #3
 80101ea:	e006      	b.n	80101fa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	691b      	ldr	r3, [r3, #16]
 80101f0:	f003 0301 	and.w	r3, r3, #1
 80101f4:	2b01      	cmp	r3, #1
 80101f6:	d0f1      	beq.n	80101dc <USB_CoreReset+0x34>

  return HAL_OK;
 80101f8:	2300      	movs	r3, #0
}
 80101fa:	4618      	mov	r0, r3
 80101fc:	3714      	adds	r7, #20
 80101fe:	46bd      	mov	sp, r7
 8010200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010204:	4770      	bx	lr
 8010206:	bf00      	nop
 8010208:	00030d40 	.word	0x00030d40

0801020c <set_NSS_pin>:
    status = HAL_SPI_TransmitReceive(&hspi, (uint8_t*)params, (uint8_t*)response, numOfParams, 100);
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
    return status;
}

void set_NSS_pin(GPIO_TypeDef* _NSS_GPIO, uint16_t _NSS){
 801020c:	b480      	push	{r7}
 801020e:	b083      	sub	sp, #12
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
 8010214:	460b      	mov	r3, r1
 8010216:	807b      	strh	r3, [r7, #2]
    NSS = _NSS;
 8010218:	4a05      	ldr	r2, [pc, #20]	; (8010230 <set_NSS_pin+0x24>)
 801021a:	887b      	ldrh	r3, [r7, #2]
 801021c:	8013      	strh	r3, [r2, #0]
    NSS_GPIO = _NSS_GPIO;
 801021e:	4a05      	ldr	r2, [pc, #20]	; (8010234 <set_NSS_pin+0x28>)
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	6013      	str	r3, [r2, #0]
}
 8010224:	bf00      	nop
 8010226:	370c      	adds	r7, #12
 8010228:	46bd      	mov	sp, r7
 801022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022e:	4770      	bx	lr
 8010230:	200007c8 	.word	0x200007c8
 8010234:	200007cc 	.word	0x200007cc

08010238 <set_BUSY_pin>:

void set_BUSY_pin(GPIO_TypeDef* _BUSY_GPIO, uint16_t _BUSY){
 8010238:	b480      	push	{r7}
 801023a:	b083      	sub	sp, #12
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
 8010240:	460b      	mov	r3, r1
 8010242:	807b      	strh	r3, [r7, #2]
    BUSY = _BUSY;
 8010244:	4a05      	ldr	r2, [pc, #20]	; (801025c <set_BUSY_pin+0x24>)
 8010246:	887b      	ldrh	r3, [r7, #2]
 8010248:	8013      	strh	r3, [r2, #0]
    BUSY_GPIO = _BUSY_GPIO;
 801024a:	4a05      	ldr	r2, [pc, #20]	; (8010260 <set_BUSY_pin+0x28>)
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	6013      	str	r3, [r2, #0]
}
 8010250:	bf00      	nop
 8010252:	370c      	adds	r7, #12
 8010254:	46bd      	mov	sp, r7
 8010256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025a:	4770      	bx	lr
 801025c:	200007d8 	.word	0x200007d8
 8010260:	200007dc 	.word	0x200007dc

08010264 <set_NRESET_pin>:

void set_NRESET_pin(GPIO_TypeDef* _NRESET_GPIO, uint16_t _NRESET){
 8010264:	b480      	push	{r7}
 8010266:	b083      	sub	sp, #12
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
 801026c:	460b      	mov	r3, r1
 801026e:	807b      	strh	r3, [r7, #2]
    NRESET = _NRESET;
 8010270:	4a05      	ldr	r2, [pc, #20]	; (8010288 <set_NRESET_pin+0x24>)
 8010272:	887b      	ldrh	r3, [r7, #2]
 8010274:	8013      	strh	r3, [r2, #0]
    NRESET_GPIO = _NRESET_GPIO;
 8010276:	4a05      	ldr	r2, [pc, #20]	; (801028c <set_NRESET_pin+0x28>)
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	6013      	str	r3, [r2, #0]
}
 801027c:	bf00      	nop
 801027e:	370c      	adds	r7, #12
 8010280:	46bd      	mov	sp, r7
 8010282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010286:	4770      	bx	lr
 8010288:	200007d0 	.word	0x200007d0
 801028c:	200007d4 	.word	0x200007d4

08010290 <set_DIO1_pin>:

void set_DIO1_pin(GPIO_TypeDef* _DIO1_GPIO, uint16_t _DIO1){
 8010290:	b480      	push	{r7}
 8010292:	b083      	sub	sp, #12
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
 8010298:	460b      	mov	r3, r1
 801029a:	807b      	strh	r3, [r7, #2]
    DIO1 = _DIO1;
 801029c:	4a05      	ldr	r2, [pc, #20]	; (80102b4 <set_DIO1_pin+0x24>)
 801029e:	887b      	ldrh	r3, [r7, #2]
 80102a0:	8013      	strh	r3, [r2, #0]
    DIO1_GPIO = _DIO1_GPIO;
 80102a2:	4a05      	ldr	r2, [pc, #20]	; (80102b8 <set_DIO1_pin+0x28>)
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	6013      	str	r3, [r2, #0]
}
 80102a8:	bf00      	nop
 80102aa:	370c      	adds	r7, #12
 80102ac:	46bd      	mov	sp, r7
 80102ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b2:	4770      	bx	lr
 80102b4:	200007e0 	.word	0x200007e0
 80102b8:	200007e4 	.word	0x200007e4

080102bc <set_hspi>:
void set_DIO3_pin(GPIO_TypeDef* _DIO3_GPIO, uint16_t _DIO3){
    DIO3 = _DIO3;
    DIO3_GPIO = _DIO3_GPIO;
}

void set_hspi(SPI_HandleTypeDef _hspi){
 80102bc:	b084      	sub	sp, #16
 80102be:	b580      	push	{r7, lr}
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	f107 0c08 	add.w	ip, r7, #8
 80102c6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    hspi = _hspi;
 80102ca:	4b07      	ldr	r3, [pc, #28]	; (80102e8 <set_hspi+0x2c>)
 80102cc:	4618      	mov	r0, r3
 80102ce:	f107 0308 	add.w	r3, r7, #8
 80102d2:	2258      	movs	r2, #88	; 0x58
 80102d4:	4619      	mov	r1, r3
 80102d6:	f00a fa31 	bl	801a73c <memcpy>
}
 80102da:	bf00      	nop
 80102dc:	46bd      	mov	sp, r7
 80102de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80102e2:	b004      	add	sp, #16
 80102e4:	4770      	bx	lr
 80102e6:	bf00      	nop
 80102e8:	200007e8 	.word	0x200007e8

080102ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80102f0:	4904      	ldr	r1, [pc, #16]	; (8010304 <MX_FATFS_Init+0x18>)
 80102f2:	4805      	ldr	r0, [pc, #20]	; (8010308 <MX_FATFS_Init+0x1c>)
 80102f4:	f004 fffe 	bl	80152f4 <FATFS_LinkDriver>
 80102f8:	4603      	mov	r3, r0
 80102fa:	461a      	mov	r2, r3
 80102fc:	4b03      	ldr	r3, [pc, #12]	; (801030c <MX_FATFS_Init+0x20>)
 80102fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010300:	bf00      	nop
 8010302:	bd80      	pop	{r7, pc}
 8010304:	2000721c 	.word	0x2000721c
 8010308:	20000060 	.word	0x20000060
 801030c:	20007220 	.word	0x20007220

08010310 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010310:	b480      	push	{r7}
 8010312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8010314:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8010316:	4618      	mov	r0, r3
 8010318:	46bd      	mov	sp, r7
 801031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031e:	4770      	bx	lr

08010320 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b082      	sub	sp, #8
 8010324:	af00      	add	r7, sp, #0
 8010326:	4603      	mov	r3, r0
 8010328:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 801032a:	79fb      	ldrb	r3, [r7, #7]
 801032c:	4618      	mov	r0, r3
 801032e:	f000 f9dd 	bl	80106ec <USER_SPI_initialize>
 8010332:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8010334:	4618      	mov	r0, r3
 8010336:	3708      	adds	r7, #8
 8010338:	46bd      	mov	sp, r7
 801033a:	bd80      	pop	{r7, pc}

0801033c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b082      	sub	sp, #8
 8010340:	af00      	add	r7, sp, #0
 8010342:	4603      	mov	r3, r0
 8010344:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8010346:	79fb      	ldrb	r3, [r7, #7]
 8010348:	4618      	mov	r0, r3
 801034a:	f000 fab9 	bl	80108c0 <USER_SPI_status>
 801034e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8010350:	4618      	mov	r0, r3
 8010352:	3708      	adds	r7, #8
 8010354:	46bd      	mov	sp, r7
 8010356:	bd80      	pop	{r7, pc}

08010358 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b084      	sub	sp, #16
 801035c:	af00      	add	r7, sp, #0
 801035e:	60b9      	str	r1, [r7, #8]
 8010360:	607a      	str	r2, [r7, #4]
 8010362:	603b      	str	r3, [r7, #0]
 8010364:	4603      	mov	r3, r0
 8010366:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8010368:	7bf8      	ldrb	r0, [r7, #15]
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	687a      	ldr	r2, [r7, #4]
 801036e:	68b9      	ldr	r1, [r7, #8]
 8010370:	f000 fabc 	bl	80108ec <USER_SPI_read>
 8010374:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8010376:	4618      	mov	r0, r3
 8010378:	3710      	adds	r7, #16
 801037a:	46bd      	mov	sp, r7
 801037c:	bd80      	pop	{r7, pc}

0801037e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801037e:	b580      	push	{r7, lr}
 8010380:	b084      	sub	sp, #16
 8010382:	af00      	add	r7, sp, #0
 8010384:	60b9      	str	r1, [r7, #8]
 8010386:	607a      	str	r2, [r7, #4]
 8010388:	603b      	str	r3, [r7, #0]
 801038a:	4603      	mov	r3, r0
 801038c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 801038e:	7bf8      	ldrb	r0, [r7, #15]
 8010390:	683b      	ldr	r3, [r7, #0]
 8010392:	687a      	ldr	r2, [r7, #4]
 8010394:	68b9      	ldr	r1, [r7, #8]
 8010396:	f000 fb0f 	bl	80109b8 <USER_SPI_write>
 801039a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 801039c:	4618      	mov	r0, r3
 801039e:	3710      	adds	r7, #16
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bd80      	pop	{r7, pc}

080103a4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b082      	sub	sp, #8
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	4603      	mov	r3, r0
 80103ac:	603a      	str	r2, [r7, #0]
 80103ae:	71fb      	strb	r3, [r7, #7]
 80103b0:	460b      	mov	r3, r1
 80103b2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 80103b4:	79b9      	ldrb	r1, [r7, #6]
 80103b6:	79fb      	ldrb	r3, [r7, #7]
 80103b8:	683a      	ldr	r2, [r7, #0]
 80103ba:	4618      	mov	r0, r3
 80103bc:	f000 fb78 	bl	8010ab0 <USER_SPI_ioctl>
 80103c0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80103c2:	4618      	mov	r0, r3
 80103c4:	3708      	adds	r7, #8
 80103c6:	46bd      	mov	sp, r7
 80103c8:	bd80      	pop	{r7, pc}
	...

080103cc <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b082      	sub	sp, #8
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80103d4:	f7f7 fff0 	bl	80083b8 <HAL_GetTick>
 80103d8:	4603      	mov	r3, r0
 80103da:	4a04      	ldr	r2, [pc, #16]	; (80103ec <SPI_Timer_On+0x20>)
 80103dc:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80103de:	4a04      	ldr	r2, [pc, #16]	; (80103f0 <SPI_Timer_On+0x24>)
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	6013      	str	r3, [r2, #0]
}
 80103e4:	bf00      	nop
 80103e6:	3708      	adds	r7, #8
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}
 80103ec:	20007688 	.word	0x20007688
 80103f0:	2000768c 	.word	0x2000768c

080103f4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80103f4:	b580      	push	{r7, lr}
 80103f6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80103f8:	f7f7 ffde 	bl	80083b8 <HAL_GetTick>
 80103fc:	4602      	mov	r2, r0
 80103fe:	4b06      	ldr	r3, [pc, #24]	; (8010418 <SPI_Timer_Status+0x24>)
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	1ad2      	subs	r2, r2, r3
 8010404:	4b05      	ldr	r3, [pc, #20]	; (801041c <SPI_Timer_Status+0x28>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	429a      	cmp	r2, r3
 801040a:	bf34      	ite	cc
 801040c:	2301      	movcc	r3, #1
 801040e:	2300      	movcs	r3, #0
 8010410:	b2db      	uxtb	r3, r3
}
 8010412:	4618      	mov	r0, r3
 8010414:	bd80      	pop	{r7, pc}
 8010416:	bf00      	nop
 8010418:	20007688 	.word	0x20007688
 801041c:	2000768c 	.word	0x2000768c

08010420 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b086      	sub	sp, #24
 8010424:	af02      	add	r7, sp, #8
 8010426:	4603      	mov	r3, r0
 8010428:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 801042a:	f107 020f 	add.w	r2, r7, #15
 801042e:	1df9      	adds	r1, r7, #7
 8010430:	2332      	movs	r3, #50	; 0x32
 8010432:	9300      	str	r3, [sp, #0]
 8010434:	2301      	movs	r3, #1
 8010436:	4804      	ldr	r0, [pc, #16]	; (8010448 <xchg_spi+0x28>)
 8010438:	f7fc fef8 	bl	800d22c <HAL_SPI_TransmitReceive>
    return rxDat;
 801043c:	7bfb      	ldrb	r3, [r7, #15]
}
 801043e:	4618      	mov	r0, r3
 8010440:	3710      	adds	r7, #16
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}
 8010446:	bf00      	nop
 8010448:	20005fbc 	.word	0x20005fbc

0801044c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 801044c:	b590      	push	{r4, r7, lr}
 801044e:	b085      	sub	sp, #20
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
 8010454:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8010456:	2300      	movs	r3, #0
 8010458:	60fb      	str	r3, [r7, #12]
 801045a:	e00a      	b.n	8010472 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 801045c:	687a      	ldr	r2, [r7, #4]
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	18d4      	adds	r4, r2, r3
 8010462:	20ff      	movs	r0, #255	; 0xff
 8010464:	f7ff ffdc 	bl	8010420 <xchg_spi>
 8010468:	4603      	mov	r3, r0
 801046a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	3301      	adds	r3, #1
 8010470:	60fb      	str	r3, [r7, #12]
 8010472:	68fa      	ldr	r2, [r7, #12]
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	429a      	cmp	r2, r3
 8010478:	d3f0      	bcc.n	801045c <rcvr_spi_multi+0x10>
	}
}
 801047a:	bf00      	nop
 801047c:	bf00      	nop
 801047e:	3714      	adds	r7, #20
 8010480:	46bd      	mov	sp, r7
 8010482:	bd90      	pop	{r4, r7, pc}

08010484 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b084      	sub	sp, #16
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
 801048c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 801048e:	2300      	movs	r3, #0
 8010490:	60fb      	str	r3, [r7, #12]
 8010492:	e009      	b.n	80104a8 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8010494:	687a      	ldr	r2, [r7, #4]
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	4413      	add	r3, r2
 801049a:	781b      	ldrb	r3, [r3, #0]
 801049c:	4618      	mov	r0, r3
 801049e:	f7ff ffbf 	bl	8010420 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	3301      	adds	r3, #1
 80104a6:	60fb      	str	r3, [r7, #12]
 80104a8:	68fa      	ldr	r2, [r7, #12]
 80104aa:	683b      	ldr	r3, [r7, #0]
 80104ac:	429a      	cmp	r2, r3
 80104ae:	d3f1      	bcc.n	8010494 <xmit_spi_multi+0x10>
	}
}
 80104b0:	bf00      	nop
 80104b2:	bf00      	nop
 80104b4:	3710      	adds	r7, #16
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}

080104ba <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80104ba:	b580      	push	{r7, lr}
 80104bc:	b086      	sub	sp, #24
 80104be:	af00      	add	r7, sp, #0
 80104c0:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80104c2:	f7f7 ff79 	bl	80083b8 <HAL_GetTick>
 80104c6:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80104cc:	20ff      	movs	r0, #255	; 0xff
 80104ce:	f7ff ffa7 	bl	8010420 <xchg_spi>
 80104d2:	4603      	mov	r3, r0
 80104d4:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80104d6:	7bfb      	ldrb	r3, [r7, #15]
 80104d8:	2bff      	cmp	r3, #255	; 0xff
 80104da:	d007      	beq.n	80104ec <wait_ready+0x32>
 80104dc:	f7f7 ff6c 	bl	80083b8 <HAL_GetTick>
 80104e0:	4602      	mov	r2, r0
 80104e2:	697b      	ldr	r3, [r7, #20]
 80104e4:	1ad3      	subs	r3, r2, r3
 80104e6:	693a      	ldr	r2, [r7, #16]
 80104e8:	429a      	cmp	r2, r3
 80104ea:	d8ef      	bhi.n	80104cc <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80104ec:	7bfb      	ldrb	r3, [r7, #15]
 80104ee:	2bff      	cmp	r3, #255	; 0xff
 80104f0:	bf0c      	ite	eq
 80104f2:	2301      	moveq	r3, #1
 80104f4:	2300      	movne	r3, #0
 80104f6:	b2db      	uxtb	r3, r3
}
 80104f8:	4618      	mov	r0, r3
 80104fa:	3718      	adds	r7, #24
 80104fc:	46bd      	mov	sp, r7
 80104fe:	bd80      	pop	{r7, pc}

08010500 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8010500:	b580      	push	{r7, lr}
 8010502:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8010504:	2201      	movs	r2, #1
 8010506:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801050a:	4804      	ldr	r0, [pc, #16]	; (801051c <despiselect+0x1c>)
 801050c:	f7f8 fcce 	bl	8008eac <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8010510:	20ff      	movs	r0, #255	; 0xff
 8010512:	f7ff ff85 	bl	8010420 <xchg_spi>

}
 8010516:	bf00      	nop
 8010518:	bd80      	pop	{r7, pc}
 801051a:	bf00      	nop
 801051c:	40021400 	.word	0x40021400

08010520 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8010520:	b580      	push	{r7, lr}
 8010522:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8010524:	2200      	movs	r2, #0
 8010526:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801052a:	480a      	ldr	r0, [pc, #40]	; (8010554 <spiselect+0x34>)
 801052c:	f7f8 fcbe 	bl	8008eac <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8010530:	20ff      	movs	r0, #255	; 0xff
 8010532:	f7ff ff75 	bl	8010420 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8010536:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801053a:	f7ff ffbe 	bl	80104ba <wait_ready>
 801053e:	4603      	mov	r3, r0
 8010540:	2b00      	cmp	r3, #0
 8010542:	d001      	beq.n	8010548 <spiselect+0x28>
 8010544:	2301      	movs	r3, #1
 8010546:	e002      	b.n	801054e <spiselect+0x2e>

	despiselect();
 8010548:	f7ff ffda 	bl	8010500 <despiselect>
	return 0;	/* Timeout */
 801054c:	2300      	movs	r3, #0
}
 801054e:	4618      	mov	r0, r3
 8010550:	bd80      	pop	{r7, pc}
 8010552:	bf00      	nop
 8010554:	40021400 	.word	0x40021400

08010558 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b084      	sub	sp, #16
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
 8010560:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8010562:	20c8      	movs	r0, #200	; 0xc8
 8010564:	f7ff ff32 	bl	80103cc <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8010568:	20ff      	movs	r0, #255	; 0xff
 801056a:	f7ff ff59 	bl	8010420 <xchg_spi>
 801056e:	4603      	mov	r3, r0
 8010570:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8010572:	7bfb      	ldrb	r3, [r7, #15]
 8010574:	2bff      	cmp	r3, #255	; 0xff
 8010576:	d104      	bne.n	8010582 <rcvr_datablock+0x2a>
 8010578:	f7ff ff3c 	bl	80103f4 <SPI_Timer_Status>
 801057c:	4603      	mov	r3, r0
 801057e:	2b00      	cmp	r3, #0
 8010580:	d1f2      	bne.n	8010568 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8010582:	7bfb      	ldrb	r3, [r7, #15]
 8010584:	2bfe      	cmp	r3, #254	; 0xfe
 8010586:	d001      	beq.n	801058c <rcvr_datablock+0x34>
 8010588:	2300      	movs	r3, #0
 801058a:	e00a      	b.n	80105a2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 801058c:	6839      	ldr	r1, [r7, #0]
 801058e:	6878      	ldr	r0, [r7, #4]
 8010590:	f7ff ff5c 	bl	801044c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8010594:	20ff      	movs	r0, #255	; 0xff
 8010596:	f7ff ff43 	bl	8010420 <xchg_spi>
 801059a:	20ff      	movs	r0, #255	; 0xff
 801059c:	f7ff ff40 	bl	8010420 <xchg_spi>

	return 1;						/* Function succeeded */
 80105a0:	2301      	movs	r3, #1
}
 80105a2:	4618      	mov	r0, r3
 80105a4:	3710      	adds	r7, #16
 80105a6:	46bd      	mov	sp, r7
 80105a8:	bd80      	pop	{r7, pc}

080105aa <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80105aa:	b580      	push	{r7, lr}
 80105ac:	b084      	sub	sp, #16
 80105ae:	af00      	add	r7, sp, #0
 80105b0:	6078      	str	r0, [r7, #4]
 80105b2:	460b      	mov	r3, r1
 80105b4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80105b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80105ba:	f7ff ff7e 	bl	80104ba <wait_ready>
 80105be:	4603      	mov	r3, r0
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d101      	bne.n	80105c8 <xmit_datablock+0x1e>
 80105c4:	2300      	movs	r3, #0
 80105c6:	e01e      	b.n	8010606 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80105c8:	78fb      	ldrb	r3, [r7, #3]
 80105ca:	4618      	mov	r0, r3
 80105cc:	f7ff ff28 	bl	8010420 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80105d0:	78fb      	ldrb	r3, [r7, #3]
 80105d2:	2bfd      	cmp	r3, #253	; 0xfd
 80105d4:	d016      	beq.n	8010604 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80105d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80105da:	6878      	ldr	r0, [r7, #4]
 80105dc:	f7ff ff52 	bl	8010484 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80105e0:	20ff      	movs	r0, #255	; 0xff
 80105e2:	f7ff ff1d 	bl	8010420 <xchg_spi>
 80105e6:	20ff      	movs	r0, #255	; 0xff
 80105e8:	f7ff ff1a 	bl	8010420 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80105ec:	20ff      	movs	r0, #255	; 0xff
 80105ee:	f7ff ff17 	bl	8010420 <xchg_spi>
 80105f2:	4603      	mov	r3, r0
 80105f4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80105f6:	7bfb      	ldrb	r3, [r7, #15]
 80105f8:	f003 031f 	and.w	r3, r3, #31
 80105fc:	2b05      	cmp	r3, #5
 80105fe:	d001      	beq.n	8010604 <xmit_datablock+0x5a>
 8010600:	2300      	movs	r3, #0
 8010602:	e000      	b.n	8010606 <xmit_datablock+0x5c>
	}
	return 1;
 8010604:	2301      	movs	r3, #1
}
 8010606:	4618      	mov	r0, r3
 8010608:	3710      	adds	r7, #16
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}

0801060e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 801060e:	b580      	push	{r7, lr}
 8010610:	b084      	sub	sp, #16
 8010612:	af00      	add	r7, sp, #0
 8010614:	4603      	mov	r3, r0
 8010616:	6039      	str	r1, [r7, #0]
 8010618:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 801061a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801061e:	2b00      	cmp	r3, #0
 8010620:	da0e      	bge.n	8010640 <send_cmd+0x32>
		cmd &= 0x7F;
 8010622:	79fb      	ldrb	r3, [r7, #7]
 8010624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010628:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 801062a:	2100      	movs	r1, #0
 801062c:	2037      	movs	r0, #55	; 0x37
 801062e:	f7ff ffee 	bl	801060e <send_cmd>
 8010632:	4603      	mov	r3, r0
 8010634:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8010636:	7bbb      	ldrb	r3, [r7, #14]
 8010638:	2b01      	cmp	r3, #1
 801063a:	d901      	bls.n	8010640 <send_cmd+0x32>
 801063c:	7bbb      	ldrb	r3, [r7, #14]
 801063e:	e051      	b.n	80106e4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8010640:	79fb      	ldrb	r3, [r7, #7]
 8010642:	2b0c      	cmp	r3, #12
 8010644:	d008      	beq.n	8010658 <send_cmd+0x4a>
		despiselect();
 8010646:	f7ff ff5b 	bl	8010500 <despiselect>
		if (!spiselect()) return 0xFF;
 801064a:	f7ff ff69 	bl	8010520 <spiselect>
 801064e:	4603      	mov	r3, r0
 8010650:	2b00      	cmp	r3, #0
 8010652:	d101      	bne.n	8010658 <send_cmd+0x4a>
 8010654:	23ff      	movs	r3, #255	; 0xff
 8010656:	e045      	b.n	80106e4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8010658:	79fb      	ldrb	r3, [r7, #7]
 801065a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801065e:	b2db      	uxtb	r3, r3
 8010660:	4618      	mov	r0, r3
 8010662:	f7ff fedd 	bl	8010420 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	0e1b      	lsrs	r3, r3, #24
 801066a:	b2db      	uxtb	r3, r3
 801066c:	4618      	mov	r0, r3
 801066e:	f7ff fed7 	bl	8010420 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8010672:	683b      	ldr	r3, [r7, #0]
 8010674:	0c1b      	lsrs	r3, r3, #16
 8010676:	b2db      	uxtb	r3, r3
 8010678:	4618      	mov	r0, r3
 801067a:	f7ff fed1 	bl	8010420 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 801067e:	683b      	ldr	r3, [r7, #0]
 8010680:	0a1b      	lsrs	r3, r3, #8
 8010682:	b2db      	uxtb	r3, r3
 8010684:	4618      	mov	r0, r3
 8010686:	f7ff fecb 	bl	8010420 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	b2db      	uxtb	r3, r3
 801068e:	4618      	mov	r0, r3
 8010690:	f7ff fec6 	bl	8010420 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8010694:	2301      	movs	r3, #1
 8010696:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8010698:	79fb      	ldrb	r3, [r7, #7]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d101      	bne.n	80106a2 <send_cmd+0x94>
 801069e:	2395      	movs	r3, #149	; 0x95
 80106a0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80106a2:	79fb      	ldrb	r3, [r7, #7]
 80106a4:	2b08      	cmp	r3, #8
 80106a6:	d101      	bne.n	80106ac <send_cmd+0x9e>
 80106a8:	2387      	movs	r3, #135	; 0x87
 80106aa:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80106ac:	7bfb      	ldrb	r3, [r7, #15]
 80106ae:	4618      	mov	r0, r3
 80106b0:	f7ff feb6 	bl	8010420 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80106b4:	79fb      	ldrb	r3, [r7, #7]
 80106b6:	2b0c      	cmp	r3, #12
 80106b8:	d102      	bne.n	80106c0 <send_cmd+0xb2>
 80106ba:	20ff      	movs	r0, #255	; 0xff
 80106bc:	f7ff feb0 	bl	8010420 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80106c0:	230a      	movs	r3, #10
 80106c2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80106c4:	20ff      	movs	r0, #255	; 0xff
 80106c6:	f7ff feab 	bl	8010420 <xchg_spi>
 80106ca:	4603      	mov	r3, r0
 80106cc:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80106ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	da05      	bge.n	80106e2 <send_cmd+0xd4>
 80106d6:	7bfb      	ldrb	r3, [r7, #15]
 80106d8:	3b01      	subs	r3, #1
 80106da:	73fb      	strb	r3, [r7, #15]
 80106dc:	7bfb      	ldrb	r3, [r7, #15]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d1f0      	bne.n	80106c4 <send_cmd+0xb6>

	return res;							/* Return received response */
 80106e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80106e4:	4618      	mov	r0, r3
 80106e6:	3710      	adds	r7, #16
 80106e8:	46bd      	mov	sp, r7
 80106ea:	bd80      	pop	{r7, pc}

080106ec <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80106ec:	b590      	push	{r4, r7, lr}
 80106ee:	b085      	sub	sp, #20
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	4603      	mov	r3, r0
 80106f4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80106f6:	79fb      	ldrb	r3, [r7, #7]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d001      	beq.n	8010700 <USER_SPI_initialize+0x14>
 80106fc:	2301      	movs	r3, #1
 80106fe:	e0d4      	b.n	80108aa <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8010700:	4b6c      	ldr	r3, [pc, #432]	; (80108b4 <USER_SPI_initialize+0x1c8>)
 8010702:	781b      	ldrb	r3, [r3, #0]
 8010704:	b2db      	uxtb	r3, r3
 8010706:	f003 0302 	and.w	r3, r3, #2
 801070a:	2b00      	cmp	r3, #0
 801070c:	d003      	beq.n	8010716 <USER_SPI_initialize+0x2a>
 801070e:	4b69      	ldr	r3, [pc, #420]	; (80108b4 <USER_SPI_initialize+0x1c8>)
 8010710:	781b      	ldrb	r3, [r3, #0]
 8010712:	b2db      	uxtb	r3, r3
 8010714:	e0c9      	b.n	80108aa <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 8010716:	4b68      	ldr	r3, [pc, #416]	; (80108b8 <USER_SPI_initialize+0x1cc>)
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	681a      	ldr	r2, [r3, #0]
 801071c:	4b66      	ldr	r3, [pc, #408]	; (80108b8 <USER_SPI_initialize+0x1cc>)
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8010724:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8010726:	230a      	movs	r3, #10
 8010728:	73fb      	strb	r3, [r7, #15]
 801072a:	e005      	b.n	8010738 <USER_SPI_initialize+0x4c>
 801072c:	20ff      	movs	r0, #255	; 0xff
 801072e:	f7ff fe77 	bl	8010420 <xchg_spi>
 8010732:	7bfb      	ldrb	r3, [r7, #15]
 8010734:	3b01      	subs	r3, #1
 8010736:	73fb      	strb	r3, [r7, #15]
 8010738:	7bfb      	ldrb	r3, [r7, #15]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d1f6      	bne.n	801072c <USER_SPI_initialize+0x40>

	ty = 0;
 801073e:	2300      	movs	r3, #0
 8010740:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8010742:	2100      	movs	r1, #0
 8010744:	2000      	movs	r0, #0
 8010746:	f7ff ff62 	bl	801060e <send_cmd>
 801074a:	4603      	mov	r3, r0
 801074c:	2b01      	cmp	r3, #1
 801074e:	f040 808b 	bne.w	8010868 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8010752:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010756:	f7ff fe39 	bl	80103cc <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 801075a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801075e:	2008      	movs	r0, #8
 8010760:	f7ff ff55 	bl	801060e <send_cmd>
 8010764:	4603      	mov	r3, r0
 8010766:	2b01      	cmp	r3, #1
 8010768:	d151      	bne.n	801080e <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 801076a:	2300      	movs	r3, #0
 801076c:	73fb      	strb	r3, [r7, #15]
 801076e:	e00d      	b.n	801078c <USER_SPI_initialize+0xa0>
 8010770:	7bfc      	ldrb	r4, [r7, #15]
 8010772:	20ff      	movs	r0, #255	; 0xff
 8010774:	f7ff fe54 	bl	8010420 <xchg_spi>
 8010778:	4603      	mov	r3, r0
 801077a:	461a      	mov	r2, r3
 801077c:	f107 0310 	add.w	r3, r7, #16
 8010780:	4423      	add	r3, r4
 8010782:	f803 2c08 	strb.w	r2, [r3, #-8]
 8010786:	7bfb      	ldrb	r3, [r7, #15]
 8010788:	3301      	adds	r3, #1
 801078a:	73fb      	strb	r3, [r7, #15]
 801078c:	7bfb      	ldrb	r3, [r7, #15]
 801078e:	2b03      	cmp	r3, #3
 8010790:	d9ee      	bls.n	8010770 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8010792:	7abb      	ldrb	r3, [r7, #10]
 8010794:	2b01      	cmp	r3, #1
 8010796:	d167      	bne.n	8010868 <USER_SPI_initialize+0x17c>
 8010798:	7afb      	ldrb	r3, [r7, #11]
 801079a:	2baa      	cmp	r3, #170	; 0xaa
 801079c:	d164      	bne.n	8010868 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 801079e:	bf00      	nop
 80107a0:	f7ff fe28 	bl	80103f4 <SPI_Timer_Status>
 80107a4:	4603      	mov	r3, r0
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d007      	beq.n	80107ba <USER_SPI_initialize+0xce>
 80107aa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80107ae:	20a9      	movs	r0, #169	; 0xa9
 80107b0:	f7ff ff2d 	bl	801060e <send_cmd>
 80107b4:	4603      	mov	r3, r0
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d1f2      	bne.n	80107a0 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80107ba:	f7ff fe1b 	bl	80103f4 <SPI_Timer_Status>
 80107be:	4603      	mov	r3, r0
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d051      	beq.n	8010868 <USER_SPI_initialize+0x17c>
 80107c4:	2100      	movs	r1, #0
 80107c6:	203a      	movs	r0, #58	; 0x3a
 80107c8:	f7ff ff21 	bl	801060e <send_cmd>
 80107cc:	4603      	mov	r3, r0
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d14a      	bne.n	8010868 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80107d2:	2300      	movs	r3, #0
 80107d4:	73fb      	strb	r3, [r7, #15]
 80107d6:	e00d      	b.n	80107f4 <USER_SPI_initialize+0x108>
 80107d8:	7bfc      	ldrb	r4, [r7, #15]
 80107da:	20ff      	movs	r0, #255	; 0xff
 80107dc:	f7ff fe20 	bl	8010420 <xchg_spi>
 80107e0:	4603      	mov	r3, r0
 80107e2:	461a      	mov	r2, r3
 80107e4:	f107 0310 	add.w	r3, r7, #16
 80107e8:	4423      	add	r3, r4
 80107ea:	f803 2c08 	strb.w	r2, [r3, #-8]
 80107ee:	7bfb      	ldrb	r3, [r7, #15]
 80107f0:	3301      	adds	r3, #1
 80107f2:	73fb      	strb	r3, [r7, #15]
 80107f4:	7bfb      	ldrb	r3, [r7, #15]
 80107f6:	2b03      	cmp	r3, #3
 80107f8:	d9ee      	bls.n	80107d8 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80107fa:	7a3b      	ldrb	r3, [r7, #8]
 80107fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010800:	2b00      	cmp	r3, #0
 8010802:	d001      	beq.n	8010808 <USER_SPI_initialize+0x11c>
 8010804:	230c      	movs	r3, #12
 8010806:	e000      	b.n	801080a <USER_SPI_initialize+0x11e>
 8010808:	2304      	movs	r3, #4
 801080a:	737b      	strb	r3, [r7, #13]
 801080c:	e02c      	b.n	8010868 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 801080e:	2100      	movs	r1, #0
 8010810:	20a9      	movs	r0, #169	; 0xa9
 8010812:	f7ff fefc 	bl	801060e <send_cmd>
 8010816:	4603      	mov	r3, r0
 8010818:	2b01      	cmp	r3, #1
 801081a:	d804      	bhi.n	8010826 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 801081c:	2302      	movs	r3, #2
 801081e:	737b      	strb	r3, [r7, #13]
 8010820:	23a9      	movs	r3, #169	; 0xa9
 8010822:	73bb      	strb	r3, [r7, #14]
 8010824:	e003      	b.n	801082e <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8010826:	2301      	movs	r3, #1
 8010828:	737b      	strb	r3, [r7, #13]
 801082a:	2301      	movs	r3, #1
 801082c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 801082e:	bf00      	nop
 8010830:	f7ff fde0 	bl	80103f4 <SPI_Timer_Status>
 8010834:	4603      	mov	r3, r0
 8010836:	2b00      	cmp	r3, #0
 8010838:	d007      	beq.n	801084a <USER_SPI_initialize+0x15e>
 801083a:	7bbb      	ldrb	r3, [r7, #14]
 801083c:	2100      	movs	r1, #0
 801083e:	4618      	mov	r0, r3
 8010840:	f7ff fee5 	bl	801060e <send_cmd>
 8010844:	4603      	mov	r3, r0
 8010846:	2b00      	cmp	r3, #0
 8010848:	d1f2      	bne.n	8010830 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 801084a:	f7ff fdd3 	bl	80103f4 <SPI_Timer_Status>
 801084e:	4603      	mov	r3, r0
 8010850:	2b00      	cmp	r3, #0
 8010852:	d007      	beq.n	8010864 <USER_SPI_initialize+0x178>
 8010854:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010858:	2010      	movs	r0, #16
 801085a:	f7ff fed8 	bl	801060e <send_cmd>
 801085e:	4603      	mov	r3, r0
 8010860:	2b00      	cmp	r3, #0
 8010862:	d001      	beq.n	8010868 <USER_SPI_initialize+0x17c>
				ty = 0;
 8010864:	2300      	movs	r3, #0
 8010866:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8010868:	4a14      	ldr	r2, [pc, #80]	; (80108bc <USER_SPI_initialize+0x1d0>)
 801086a:	7b7b      	ldrb	r3, [r7, #13]
 801086c:	7013      	strb	r3, [r2, #0]
	despiselect();
 801086e:	f7ff fe47 	bl	8010500 <despiselect>

	if (ty) {			/* OK */
 8010872:	7b7b      	ldrb	r3, [r7, #13]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d012      	beq.n	801089e <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 8010878:	4b0f      	ldr	r3, [pc, #60]	; (80108b8 <USER_SPI_initialize+0x1cc>)
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8010882:	4b0d      	ldr	r3, [pc, #52]	; (80108b8 <USER_SPI_initialize+0x1cc>)
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	f042 0218 	orr.w	r2, r2, #24
 801088a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 801088c:	4b09      	ldr	r3, [pc, #36]	; (80108b4 <USER_SPI_initialize+0x1c8>)
 801088e:	781b      	ldrb	r3, [r3, #0]
 8010890:	b2db      	uxtb	r3, r3
 8010892:	f023 0301 	bic.w	r3, r3, #1
 8010896:	b2da      	uxtb	r2, r3
 8010898:	4b06      	ldr	r3, [pc, #24]	; (80108b4 <USER_SPI_initialize+0x1c8>)
 801089a:	701a      	strb	r2, [r3, #0]
 801089c:	e002      	b.n	80108a4 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 801089e:	4b05      	ldr	r3, [pc, #20]	; (80108b4 <USER_SPI_initialize+0x1c8>)
 80108a0:	2201      	movs	r2, #1
 80108a2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80108a4:	4b03      	ldr	r3, [pc, #12]	; (80108b4 <USER_SPI_initialize+0x1c8>)
 80108a6:	781b      	ldrb	r3, [r3, #0]
 80108a8:	b2db      	uxtb	r3, r3
}
 80108aa:	4618      	mov	r0, r3
 80108ac:	3714      	adds	r7, #20
 80108ae:	46bd      	mov	sp, r7
 80108b0:	bd90      	pop	{r4, r7, pc}
 80108b2:	bf00      	nop
 80108b4:	20000074 	.word	0x20000074
 80108b8:	20005fbc 	.word	0x20005fbc
 80108bc:	20000840 	.word	0x20000840

080108c0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80108c0:	b480      	push	{r7}
 80108c2:	b083      	sub	sp, #12
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	4603      	mov	r3, r0
 80108c8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80108ca:	79fb      	ldrb	r3, [r7, #7]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d001      	beq.n	80108d4 <USER_SPI_status+0x14>
 80108d0:	2301      	movs	r3, #1
 80108d2:	e002      	b.n	80108da <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80108d4:	4b04      	ldr	r3, [pc, #16]	; (80108e8 <USER_SPI_status+0x28>)
 80108d6:	781b      	ldrb	r3, [r3, #0]
 80108d8:	b2db      	uxtb	r3, r3
}
 80108da:	4618      	mov	r0, r3
 80108dc:	370c      	adds	r7, #12
 80108de:	46bd      	mov	sp, r7
 80108e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e4:	4770      	bx	lr
 80108e6:	bf00      	nop
 80108e8:	20000074 	.word	0x20000074

080108ec <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b084      	sub	sp, #16
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	60b9      	str	r1, [r7, #8]
 80108f4:	607a      	str	r2, [r7, #4]
 80108f6:	603b      	str	r3, [r7, #0]
 80108f8:	4603      	mov	r3, r0
 80108fa:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80108fc:	7bfb      	ldrb	r3, [r7, #15]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d102      	bne.n	8010908 <USER_SPI_read+0x1c>
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d101      	bne.n	801090c <USER_SPI_read+0x20>
 8010908:	2304      	movs	r3, #4
 801090a:	e04d      	b.n	80109a8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 801090c:	4b28      	ldr	r3, [pc, #160]	; (80109b0 <USER_SPI_read+0xc4>)
 801090e:	781b      	ldrb	r3, [r3, #0]
 8010910:	b2db      	uxtb	r3, r3
 8010912:	f003 0301 	and.w	r3, r3, #1
 8010916:	2b00      	cmp	r3, #0
 8010918:	d001      	beq.n	801091e <USER_SPI_read+0x32>
 801091a:	2303      	movs	r3, #3
 801091c:	e044      	b.n	80109a8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 801091e:	4b25      	ldr	r3, [pc, #148]	; (80109b4 <USER_SPI_read+0xc8>)
 8010920:	781b      	ldrb	r3, [r3, #0]
 8010922:	f003 0308 	and.w	r3, r3, #8
 8010926:	2b00      	cmp	r3, #0
 8010928:	d102      	bne.n	8010930 <USER_SPI_read+0x44>
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	025b      	lsls	r3, r3, #9
 801092e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8010930:	683b      	ldr	r3, [r7, #0]
 8010932:	2b01      	cmp	r3, #1
 8010934:	d111      	bne.n	801095a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8010936:	6879      	ldr	r1, [r7, #4]
 8010938:	2011      	movs	r0, #17
 801093a:	f7ff fe68 	bl	801060e <send_cmd>
 801093e:	4603      	mov	r3, r0
 8010940:	2b00      	cmp	r3, #0
 8010942:	d129      	bne.n	8010998 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8010944:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010948:	68b8      	ldr	r0, [r7, #8]
 801094a:	f7ff fe05 	bl	8010558 <rcvr_datablock>
 801094e:	4603      	mov	r3, r0
 8010950:	2b00      	cmp	r3, #0
 8010952:	d021      	beq.n	8010998 <USER_SPI_read+0xac>
			count = 0;
 8010954:	2300      	movs	r3, #0
 8010956:	603b      	str	r3, [r7, #0]
 8010958:	e01e      	b.n	8010998 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 801095a:	6879      	ldr	r1, [r7, #4]
 801095c:	2012      	movs	r0, #18
 801095e:	f7ff fe56 	bl	801060e <send_cmd>
 8010962:	4603      	mov	r3, r0
 8010964:	2b00      	cmp	r3, #0
 8010966:	d117      	bne.n	8010998 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8010968:	f44f 7100 	mov.w	r1, #512	; 0x200
 801096c:	68b8      	ldr	r0, [r7, #8]
 801096e:	f7ff fdf3 	bl	8010558 <rcvr_datablock>
 8010972:	4603      	mov	r3, r0
 8010974:	2b00      	cmp	r3, #0
 8010976:	d00a      	beq.n	801098e <USER_SPI_read+0xa2>
				buff += 512;
 8010978:	68bb      	ldr	r3, [r7, #8]
 801097a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801097e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8010980:	683b      	ldr	r3, [r7, #0]
 8010982:	3b01      	subs	r3, #1
 8010984:	603b      	str	r3, [r7, #0]
 8010986:	683b      	ldr	r3, [r7, #0]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d1ed      	bne.n	8010968 <USER_SPI_read+0x7c>
 801098c:	e000      	b.n	8010990 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 801098e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8010990:	2100      	movs	r1, #0
 8010992:	200c      	movs	r0, #12
 8010994:	f7ff fe3b 	bl	801060e <send_cmd>
		}
	}
	despiselect();
 8010998:	f7ff fdb2 	bl	8010500 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 801099c:	683b      	ldr	r3, [r7, #0]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	bf14      	ite	ne
 80109a2:	2301      	movne	r3, #1
 80109a4:	2300      	moveq	r3, #0
 80109a6:	b2db      	uxtb	r3, r3
}
 80109a8:	4618      	mov	r0, r3
 80109aa:	3710      	adds	r7, #16
 80109ac:	46bd      	mov	sp, r7
 80109ae:	bd80      	pop	{r7, pc}
 80109b0:	20000074 	.word	0x20000074
 80109b4:	20000840 	.word	0x20000840

080109b8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b084      	sub	sp, #16
 80109bc:	af00      	add	r7, sp, #0
 80109be:	60b9      	str	r1, [r7, #8]
 80109c0:	607a      	str	r2, [r7, #4]
 80109c2:	603b      	str	r3, [r7, #0]
 80109c4:	4603      	mov	r3, r0
 80109c6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80109c8:	7bfb      	ldrb	r3, [r7, #15]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d102      	bne.n	80109d4 <USER_SPI_write+0x1c>
 80109ce:	683b      	ldr	r3, [r7, #0]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d101      	bne.n	80109d8 <USER_SPI_write+0x20>
 80109d4:	2304      	movs	r3, #4
 80109d6:	e063      	b.n	8010aa0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80109d8:	4b33      	ldr	r3, [pc, #204]	; (8010aa8 <USER_SPI_write+0xf0>)
 80109da:	781b      	ldrb	r3, [r3, #0]
 80109dc:	b2db      	uxtb	r3, r3
 80109de:	f003 0301 	and.w	r3, r3, #1
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d001      	beq.n	80109ea <USER_SPI_write+0x32>
 80109e6:	2303      	movs	r3, #3
 80109e8:	e05a      	b.n	8010aa0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80109ea:	4b2f      	ldr	r3, [pc, #188]	; (8010aa8 <USER_SPI_write+0xf0>)
 80109ec:	781b      	ldrb	r3, [r3, #0]
 80109ee:	b2db      	uxtb	r3, r3
 80109f0:	f003 0304 	and.w	r3, r3, #4
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d001      	beq.n	80109fc <USER_SPI_write+0x44>
 80109f8:	2302      	movs	r3, #2
 80109fa:	e051      	b.n	8010aa0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80109fc:	4b2b      	ldr	r3, [pc, #172]	; (8010aac <USER_SPI_write+0xf4>)
 80109fe:	781b      	ldrb	r3, [r3, #0]
 8010a00:	f003 0308 	and.w	r3, r3, #8
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d102      	bne.n	8010a0e <USER_SPI_write+0x56>
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	025b      	lsls	r3, r3, #9
 8010a0c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8010a0e:	683b      	ldr	r3, [r7, #0]
 8010a10:	2b01      	cmp	r3, #1
 8010a12:	d110      	bne.n	8010a36 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8010a14:	6879      	ldr	r1, [r7, #4]
 8010a16:	2018      	movs	r0, #24
 8010a18:	f7ff fdf9 	bl	801060e <send_cmd>
 8010a1c:	4603      	mov	r3, r0
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d136      	bne.n	8010a90 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8010a22:	21fe      	movs	r1, #254	; 0xfe
 8010a24:	68b8      	ldr	r0, [r7, #8]
 8010a26:	f7ff fdc0 	bl	80105aa <xmit_datablock>
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d02f      	beq.n	8010a90 <USER_SPI_write+0xd8>
			count = 0;
 8010a30:	2300      	movs	r3, #0
 8010a32:	603b      	str	r3, [r7, #0]
 8010a34:	e02c      	b.n	8010a90 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8010a36:	4b1d      	ldr	r3, [pc, #116]	; (8010aac <USER_SPI_write+0xf4>)
 8010a38:	781b      	ldrb	r3, [r3, #0]
 8010a3a:	f003 0306 	and.w	r3, r3, #6
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d003      	beq.n	8010a4a <USER_SPI_write+0x92>
 8010a42:	6839      	ldr	r1, [r7, #0]
 8010a44:	2097      	movs	r0, #151	; 0x97
 8010a46:	f7ff fde2 	bl	801060e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8010a4a:	6879      	ldr	r1, [r7, #4]
 8010a4c:	2019      	movs	r0, #25
 8010a4e:	f7ff fdde 	bl	801060e <send_cmd>
 8010a52:	4603      	mov	r3, r0
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d11b      	bne.n	8010a90 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8010a58:	21fc      	movs	r1, #252	; 0xfc
 8010a5a:	68b8      	ldr	r0, [r7, #8]
 8010a5c:	f7ff fda5 	bl	80105aa <xmit_datablock>
 8010a60:	4603      	mov	r3, r0
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d00a      	beq.n	8010a7c <USER_SPI_write+0xc4>
				buff += 512;
 8010a66:	68bb      	ldr	r3, [r7, #8]
 8010a68:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8010a6c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8010a6e:	683b      	ldr	r3, [r7, #0]
 8010a70:	3b01      	subs	r3, #1
 8010a72:	603b      	str	r3, [r7, #0]
 8010a74:	683b      	ldr	r3, [r7, #0]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d1ee      	bne.n	8010a58 <USER_SPI_write+0xa0>
 8010a7a:	e000      	b.n	8010a7e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8010a7c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8010a7e:	21fd      	movs	r1, #253	; 0xfd
 8010a80:	2000      	movs	r0, #0
 8010a82:	f7ff fd92 	bl	80105aa <xmit_datablock>
 8010a86:	4603      	mov	r3, r0
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d101      	bne.n	8010a90 <USER_SPI_write+0xd8>
 8010a8c:	2301      	movs	r3, #1
 8010a8e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8010a90:	f7ff fd36 	bl	8010500 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8010a94:	683b      	ldr	r3, [r7, #0]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	bf14      	ite	ne
 8010a9a:	2301      	movne	r3, #1
 8010a9c:	2300      	moveq	r3, #0
 8010a9e:	b2db      	uxtb	r3, r3
}
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	3710      	adds	r7, #16
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	bd80      	pop	{r7, pc}
 8010aa8:	20000074 	.word	0x20000074
 8010aac:	20000840 	.word	0x20000840

08010ab0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b08c      	sub	sp, #48	; 0x30
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	4603      	mov	r3, r0
 8010ab8:	603a      	str	r2, [r7, #0]
 8010aba:	71fb      	strb	r3, [r7, #7]
 8010abc:	460b      	mov	r3, r1
 8010abe:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8010ac0:	79fb      	ldrb	r3, [r7, #7]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d001      	beq.n	8010aca <USER_SPI_ioctl+0x1a>
 8010ac6:	2304      	movs	r3, #4
 8010ac8:	e15a      	b.n	8010d80 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8010aca:	4baf      	ldr	r3, [pc, #700]	; (8010d88 <USER_SPI_ioctl+0x2d8>)
 8010acc:	781b      	ldrb	r3, [r3, #0]
 8010ace:	b2db      	uxtb	r3, r3
 8010ad0:	f003 0301 	and.w	r3, r3, #1
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d001      	beq.n	8010adc <USER_SPI_ioctl+0x2c>
 8010ad8:	2303      	movs	r3, #3
 8010ada:	e151      	b.n	8010d80 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8010adc:	2301      	movs	r3, #1
 8010ade:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8010ae2:	79bb      	ldrb	r3, [r7, #6]
 8010ae4:	2b04      	cmp	r3, #4
 8010ae6:	f200 8136 	bhi.w	8010d56 <USER_SPI_ioctl+0x2a6>
 8010aea:	a201      	add	r2, pc, #4	; (adr r2, 8010af0 <USER_SPI_ioctl+0x40>)
 8010aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010af0:	08010b05 	.word	0x08010b05
 8010af4:	08010b19 	.word	0x08010b19
 8010af8:	08010d57 	.word	0x08010d57
 8010afc:	08010bc5 	.word	0x08010bc5
 8010b00:	08010cbb 	.word	0x08010cbb
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8010b04:	f7ff fd0c 	bl	8010520 <spiselect>
 8010b08:	4603      	mov	r3, r0
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	f000 8127 	beq.w	8010d5e <USER_SPI_ioctl+0x2ae>
 8010b10:	2300      	movs	r3, #0
 8010b12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8010b16:	e122      	b.n	8010d5e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8010b18:	2100      	movs	r1, #0
 8010b1a:	2009      	movs	r0, #9
 8010b1c:	f7ff fd77 	bl	801060e <send_cmd>
 8010b20:	4603      	mov	r3, r0
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	f040 811d 	bne.w	8010d62 <USER_SPI_ioctl+0x2b2>
 8010b28:	f107 030c 	add.w	r3, r7, #12
 8010b2c:	2110      	movs	r1, #16
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f7ff fd12 	bl	8010558 <rcvr_datablock>
 8010b34:	4603      	mov	r3, r0
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	f000 8113 	beq.w	8010d62 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8010b3c:	7b3b      	ldrb	r3, [r7, #12]
 8010b3e:	099b      	lsrs	r3, r3, #6
 8010b40:	b2db      	uxtb	r3, r3
 8010b42:	2b01      	cmp	r3, #1
 8010b44:	d111      	bne.n	8010b6a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8010b46:	7d7b      	ldrb	r3, [r7, #21]
 8010b48:	461a      	mov	r2, r3
 8010b4a:	7d3b      	ldrb	r3, [r7, #20]
 8010b4c:	021b      	lsls	r3, r3, #8
 8010b4e:	4413      	add	r3, r2
 8010b50:	461a      	mov	r2, r3
 8010b52:	7cfb      	ldrb	r3, [r7, #19]
 8010b54:	041b      	lsls	r3, r3, #16
 8010b56:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8010b5a:	4413      	add	r3, r2
 8010b5c:	3301      	adds	r3, #1
 8010b5e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8010b60:	69fb      	ldr	r3, [r7, #28]
 8010b62:	029a      	lsls	r2, r3, #10
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	601a      	str	r2, [r3, #0]
 8010b68:	e028      	b.n	8010bbc <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8010b6a:	7c7b      	ldrb	r3, [r7, #17]
 8010b6c:	f003 030f 	and.w	r3, r3, #15
 8010b70:	b2da      	uxtb	r2, r3
 8010b72:	7dbb      	ldrb	r3, [r7, #22]
 8010b74:	09db      	lsrs	r3, r3, #7
 8010b76:	b2db      	uxtb	r3, r3
 8010b78:	4413      	add	r3, r2
 8010b7a:	b2da      	uxtb	r2, r3
 8010b7c:	7d7b      	ldrb	r3, [r7, #21]
 8010b7e:	005b      	lsls	r3, r3, #1
 8010b80:	b2db      	uxtb	r3, r3
 8010b82:	f003 0306 	and.w	r3, r3, #6
 8010b86:	b2db      	uxtb	r3, r3
 8010b88:	4413      	add	r3, r2
 8010b8a:	b2db      	uxtb	r3, r3
 8010b8c:	3302      	adds	r3, #2
 8010b8e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8010b92:	7d3b      	ldrb	r3, [r7, #20]
 8010b94:	099b      	lsrs	r3, r3, #6
 8010b96:	b2db      	uxtb	r3, r3
 8010b98:	461a      	mov	r2, r3
 8010b9a:	7cfb      	ldrb	r3, [r7, #19]
 8010b9c:	009b      	lsls	r3, r3, #2
 8010b9e:	441a      	add	r2, r3
 8010ba0:	7cbb      	ldrb	r3, [r7, #18]
 8010ba2:	029b      	lsls	r3, r3, #10
 8010ba4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010ba8:	4413      	add	r3, r2
 8010baa:	3301      	adds	r3, #1
 8010bac:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8010bae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010bb2:	3b09      	subs	r3, #9
 8010bb4:	69fa      	ldr	r2, [r7, #28]
 8010bb6:	409a      	lsls	r2, r3
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8010bc2:	e0ce      	b.n	8010d62 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8010bc4:	4b71      	ldr	r3, [pc, #452]	; (8010d8c <USER_SPI_ioctl+0x2dc>)
 8010bc6:	781b      	ldrb	r3, [r3, #0]
 8010bc8:	f003 0304 	and.w	r3, r3, #4
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d031      	beq.n	8010c34 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8010bd0:	2100      	movs	r1, #0
 8010bd2:	208d      	movs	r0, #141	; 0x8d
 8010bd4:	f7ff fd1b 	bl	801060e <send_cmd>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	f040 80c3 	bne.w	8010d66 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8010be0:	20ff      	movs	r0, #255	; 0xff
 8010be2:	f7ff fc1d 	bl	8010420 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8010be6:	f107 030c 	add.w	r3, r7, #12
 8010bea:	2110      	movs	r1, #16
 8010bec:	4618      	mov	r0, r3
 8010bee:	f7ff fcb3 	bl	8010558 <rcvr_datablock>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	f000 80b6 	beq.w	8010d66 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8010bfa:	2330      	movs	r3, #48	; 0x30
 8010bfc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8010c00:	e007      	b.n	8010c12 <USER_SPI_ioctl+0x162>
 8010c02:	20ff      	movs	r0, #255	; 0xff
 8010c04:	f7ff fc0c 	bl	8010420 <xchg_spi>
 8010c08:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010c0c:	3b01      	subs	r3, #1
 8010c0e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8010c12:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d1f3      	bne.n	8010c02 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8010c1a:	7dbb      	ldrb	r3, [r7, #22]
 8010c1c:	091b      	lsrs	r3, r3, #4
 8010c1e:	b2db      	uxtb	r3, r3
 8010c20:	461a      	mov	r2, r3
 8010c22:	2310      	movs	r3, #16
 8010c24:	fa03 f202 	lsl.w	r2, r3, r2
 8010c28:	683b      	ldr	r3, [r7, #0]
 8010c2a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8010c32:	e098      	b.n	8010d66 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8010c34:	2100      	movs	r1, #0
 8010c36:	2009      	movs	r0, #9
 8010c38:	f7ff fce9 	bl	801060e <send_cmd>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	f040 8091 	bne.w	8010d66 <USER_SPI_ioctl+0x2b6>
 8010c44:	f107 030c 	add.w	r3, r7, #12
 8010c48:	2110      	movs	r1, #16
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f7ff fc84 	bl	8010558 <rcvr_datablock>
 8010c50:	4603      	mov	r3, r0
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	f000 8087 	beq.w	8010d66 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8010c58:	4b4c      	ldr	r3, [pc, #304]	; (8010d8c <USER_SPI_ioctl+0x2dc>)
 8010c5a:	781b      	ldrb	r3, [r3, #0]
 8010c5c:	f003 0302 	and.w	r3, r3, #2
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d012      	beq.n	8010c8a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8010c64:	7dbb      	ldrb	r3, [r7, #22]
 8010c66:	005b      	lsls	r3, r3, #1
 8010c68:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8010c6c:	7dfa      	ldrb	r2, [r7, #23]
 8010c6e:	09d2      	lsrs	r2, r2, #7
 8010c70:	b2d2      	uxtb	r2, r2
 8010c72:	4413      	add	r3, r2
 8010c74:	1c5a      	adds	r2, r3, #1
 8010c76:	7e7b      	ldrb	r3, [r7, #25]
 8010c78:	099b      	lsrs	r3, r3, #6
 8010c7a:	b2db      	uxtb	r3, r3
 8010c7c:	3b01      	subs	r3, #1
 8010c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8010c82:	461a      	mov	r2, r3
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	601a      	str	r2, [r3, #0]
 8010c88:	e013      	b.n	8010cb2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8010c8a:	7dbb      	ldrb	r3, [r7, #22]
 8010c8c:	109b      	asrs	r3, r3, #2
 8010c8e:	b29b      	uxth	r3, r3
 8010c90:	f003 031f 	and.w	r3, r3, #31
 8010c94:	3301      	adds	r3, #1
 8010c96:	7dfa      	ldrb	r2, [r7, #23]
 8010c98:	00d2      	lsls	r2, r2, #3
 8010c9a:	f002 0218 	and.w	r2, r2, #24
 8010c9e:	7df9      	ldrb	r1, [r7, #23]
 8010ca0:	0949      	lsrs	r1, r1, #5
 8010ca2:	b2c9      	uxtb	r1, r1
 8010ca4:	440a      	add	r2, r1
 8010ca6:	3201      	adds	r2, #1
 8010ca8:	fb02 f303 	mul.w	r3, r2, r3
 8010cac:	461a      	mov	r2, r3
 8010cae:	683b      	ldr	r3, [r7, #0]
 8010cb0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8010cb8:	e055      	b.n	8010d66 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8010cba:	4b34      	ldr	r3, [pc, #208]	; (8010d8c <USER_SPI_ioctl+0x2dc>)
 8010cbc:	781b      	ldrb	r3, [r3, #0]
 8010cbe:	f003 0306 	and.w	r3, r3, #6
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d051      	beq.n	8010d6a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8010cc6:	f107 020c 	add.w	r2, r7, #12
 8010cca:	79fb      	ldrb	r3, [r7, #7]
 8010ccc:	210b      	movs	r1, #11
 8010cce:	4618      	mov	r0, r3
 8010cd0:	f7ff feee 	bl	8010ab0 <USER_SPI_ioctl>
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d149      	bne.n	8010d6e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8010cda:	7b3b      	ldrb	r3, [r7, #12]
 8010cdc:	099b      	lsrs	r3, r3, #6
 8010cde:	b2db      	uxtb	r3, r3
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d104      	bne.n	8010cee <USER_SPI_ioctl+0x23e>
 8010ce4:	7dbb      	ldrb	r3, [r7, #22]
 8010ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d041      	beq.n	8010d72 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	623b      	str	r3, [r7, #32]
 8010cf2:	6a3b      	ldr	r3, [r7, #32]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8010cf8:	6a3b      	ldr	r3, [r7, #32]
 8010cfa:	685b      	ldr	r3, [r3, #4]
 8010cfc:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8010cfe:	4b23      	ldr	r3, [pc, #140]	; (8010d8c <USER_SPI_ioctl+0x2dc>)
 8010d00:	781b      	ldrb	r3, [r3, #0]
 8010d02:	f003 0308 	and.w	r3, r3, #8
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d105      	bne.n	8010d16 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8010d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d0c:	025b      	lsls	r3, r3, #9
 8010d0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d12:	025b      	lsls	r3, r3, #9
 8010d14:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8010d16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010d18:	2020      	movs	r0, #32
 8010d1a:	f7ff fc78 	bl	801060e <send_cmd>
 8010d1e:	4603      	mov	r3, r0
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d128      	bne.n	8010d76 <USER_SPI_ioctl+0x2c6>
 8010d24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010d26:	2021      	movs	r0, #33	; 0x21
 8010d28:	f7ff fc71 	bl	801060e <send_cmd>
 8010d2c:	4603      	mov	r3, r0
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d121      	bne.n	8010d76 <USER_SPI_ioctl+0x2c6>
 8010d32:	2100      	movs	r1, #0
 8010d34:	2026      	movs	r0, #38	; 0x26
 8010d36:	f7ff fc6a 	bl	801060e <send_cmd>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d11a      	bne.n	8010d76 <USER_SPI_ioctl+0x2c6>
 8010d40:	f247 5030 	movw	r0, #30000	; 0x7530
 8010d44:	f7ff fbb9 	bl	80104ba <wait_ready>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d013      	beq.n	8010d76 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8010d4e:	2300      	movs	r3, #0
 8010d50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8010d54:	e00f      	b.n	8010d76 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8010d56:	2304      	movs	r3, #4
 8010d58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010d5c:	e00c      	b.n	8010d78 <USER_SPI_ioctl+0x2c8>
		break;
 8010d5e:	bf00      	nop
 8010d60:	e00a      	b.n	8010d78 <USER_SPI_ioctl+0x2c8>
		break;
 8010d62:	bf00      	nop
 8010d64:	e008      	b.n	8010d78 <USER_SPI_ioctl+0x2c8>
		break;
 8010d66:	bf00      	nop
 8010d68:	e006      	b.n	8010d78 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8010d6a:	bf00      	nop
 8010d6c:	e004      	b.n	8010d78 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8010d6e:	bf00      	nop
 8010d70:	e002      	b.n	8010d78 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8010d72:	bf00      	nop
 8010d74:	e000      	b.n	8010d78 <USER_SPI_ioctl+0x2c8>
		break;
 8010d76:	bf00      	nop
	}

	despiselect();
 8010d78:	f7ff fbc2 	bl	8010500 <despiselect>

	return res;
 8010d7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010d80:	4618      	mov	r0, r3
 8010d82:	3730      	adds	r7, #48	; 0x30
 8010d84:	46bd      	mov	sp, r7
 8010d86:	bd80      	pop	{r7, pc}
 8010d88:	20000074 	.word	0x20000074
 8010d8c:	20000840 	.word	0x20000840

08010d90 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b084      	sub	sp, #16
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	6078      	str	r0, [r7, #4]
 8010d98:	460b      	mov	r3, r1
 8010d9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010d9c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010da0:	f008 fb72 	bl	8019488 <USBD_static_malloc>
 8010da4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d105      	bne.n	8010db8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	2200      	movs	r2, #0
 8010db0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8010db4:	2302      	movs	r3, #2
 8010db6:	e066      	b.n	8010e86 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	68fa      	ldr	r2, [r7, #12]
 8010dbc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	7c1b      	ldrb	r3, [r3, #16]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d119      	bne.n	8010dfc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010dc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010dcc:	2202      	movs	r2, #2
 8010dce:	2181      	movs	r1, #129	; 0x81
 8010dd0:	6878      	ldr	r0, [r7, #4]
 8010dd2:	f008 fa36 	bl	8019242 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	2201      	movs	r2, #1
 8010dda:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010ddc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010de0:	2202      	movs	r2, #2
 8010de2:	2101      	movs	r1, #1
 8010de4:	6878      	ldr	r0, [r7, #4]
 8010de6:	f008 fa2c 	bl	8019242 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	2201      	movs	r2, #1
 8010dee:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	2210      	movs	r2, #16
 8010df6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8010dfa:	e016      	b.n	8010e2a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010dfc:	2340      	movs	r3, #64	; 0x40
 8010dfe:	2202      	movs	r2, #2
 8010e00:	2181      	movs	r1, #129	; 0x81
 8010e02:	6878      	ldr	r0, [r7, #4]
 8010e04:	f008 fa1d 	bl	8019242 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	2201      	movs	r2, #1
 8010e0c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010e0e:	2340      	movs	r3, #64	; 0x40
 8010e10:	2202      	movs	r2, #2
 8010e12:	2101      	movs	r1, #1
 8010e14:	6878      	ldr	r0, [r7, #4]
 8010e16:	f008 fa14 	bl	8019242 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	2201      	movs	r2, #1
 8010e1e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	2210      	movs	r2, #16
 8010e26:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010e2a:	2308      	movs	r3, #8
 8010e2c:	2203      	movs	r2, #3
 8010e2e:	2182      	movs	r1, #130	; 0x82
 8010e30:	6878      	ldr	r0, [r7, #4]
 8010e32:	f008 fa06 	bl	8019242 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	2201      	movs	r2, #1
 8010e3a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	2200      	movs	r2, #0
 8010e54:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	7c1b      	ldrb	r3, [r3, #16]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d109      	bne.n	8010e74 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010e66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010e6a:	2101      	movs	r1, #1
 8010e6c:	6878      	ldr	r0, [r7, #4]
 8010e6e:	f008 fad7 	bl	8019420 <USBD_LL_PrepareReceive>
 8010e72:	e007      	b.n	8010e84 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010e7a:	2340      	movs	r3, #64	; 0x40
 8010e7c:	2101      	movs	r1, #1
 8010e7e:	6878      	ldr	r0, [r7, #4]
 8010e80:	f008 face 	bl	8019420 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010e84:	2300      	movs	r3, #0
}
 8010e86:	4618      	mov	r0, r3
 8010e88:	3710      	adds	r7, #16
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	bd80      	pop	{r7, pc}

08010e8e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010e8e:	b580      	push	{r7, lr}
 8010e90:	b082      	sub	sp, #8
 8010e92:	af00      	add	r7, sp, #0
 8010e94:	6078      	str	r0, [r7, #4]
 8010e96:	460b      	mov	r3, r1
 8010e98:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8010e9a:	2181      	movs	r1, #129	; 0x81
 8010e9c:	6878      	ldr	r0, [r7, #4]
 8010e9e:	f008 f9f6 	bl	801928e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8010ea8:	2101      	movs	r1, #1
 8010eaa:	6878      	ldr	r0, [r7, #4]
 8010eac:	f008 f9ef 	bl	801928e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8010eb8:	2182      	movs	r1, #130	; 0x82
 8010eba:	6878      	ldr	r0, [r7, #4]
 8010ebc:	f008 f9e7 	bl	801928e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	2200      	movs	r2, #0
 8010ecc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d00e      	beq.n	8010ef8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010ee0:	685b      	ldr	r3, [r3, #4]
 8010ee2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010eea:	4618      	mov	r0, r3
 8010eec:	f008 fada 	bl	80194a4 <USBD_static_free>
    pdev->pClassData = NULL;
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8010ef8:	2300      	movs	r3, #0
}
 8010efa:	4618      	mov	r0, r3
 8010efc:	3708      	adds	r7, #8
 8010efe:	46bd      	mov	sp, r7
 8010f00:	bd80      	pop	{r7, pc}
	...

08010f04 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b086      	sub	sp, #24
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
 8010f0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010f14:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8010f16:	2300      	movs	r3, #0
 8010f18:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8010f1e:	2300      	movs	r3, #0
 8010f20:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8010f22:	693b      	ldr	r3, [r7, #16]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d101      	bne.n	8010f2c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8010f28:	2303      	movs	r3, #3
 8010f2a:	e0af      	b.n	801108c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010f2c:	683b      	ldr	r3, [r7, #0]
 8010f2e:	781b      	ldrb	r3, [r3, #0]
 8010f30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d03f      	beq.n	8010fb8 <USBD_CDC_Setup+0xb4>
 8010f38:	2b20      	cmp	r3, #32
 8010f3a:	f040 809f 	bne.w	801107c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8010f3e:	683b      	ldr	r3, [r7, #0]
 8010f40:	88db      	ldrh	r3, [r3, #6]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d02e      	beq.n	8010fa4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8010f46:	683b      	ldr	r3, [r7, #0]
 8010f48:	781b      	ldrb	r3, [r3, #0]
 8010f4a:	b25b      	sxtb	r3, r3
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	da16      	bge.n	8010f7e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010f56:	689b      	ldr	r3, [r3, #8]
 8010f58:	683a      	ldr	r2, [r7, #0]
 8010f5a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8010f5c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010f5e:	683a      	ldr	r2, [r7, #0]
 8010f60:	88d2      	ldrh	r2, [r2, #6]
 8010f62:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8010f64:	683b      	ldr	r3, [r7, #0]
 8010f66:	88db      	ldrh	r3, [r3, #6]
 8010f68:	2b07      	cmp	r3, #7
 8010f6a:	bf28      	it	cs
 8010f6c:	2307      	movcs	r3, #7
 8010f6e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8010f70:	693b      	ldr	r3, [r7, #16]
 8010f72:	89fa      	ldrh	r2, [r7, #14]
 8010f74:	4619      	mov	r1, r3
 8010f76:	6878      	ldr	r0, [r7, #4]
 8010f78:	f001 fae9 	bl	801254e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8010f7c:	e085      	b.n	801108a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8010f7e:	683b      	ldr	r3, [r7, #0]
 8010f80:	785a      	ldrb	r2, [r3, #1]
 8010f82:	693b      	ldr	r3, [r7, #16]
 8010f84:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8010f88:	683b      	ldr	r3, [r7, #0]
 8010f8a:	88db      	ldrh	r3, [r3, #6]
 8010f8c:	b2da      	uxtb	r2, r3
 8010f8e:	693b      	ldr	r3, [r7, #16]
 8010f90:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010f94:	6939      	ldr	r1, [r7, #16]
 8010f96:	683b      	ldr	r3, [r7, #0]
 8010f98:	88db      	ldrh	r3, [r3, #6]
 8010f9a:	461a      	mov	r2, r3
 8010f9c:	6878      	ldr	r0, [r7, #4]
 8010f9e:	f001 fb02 	bl	80125a6 <USBD_CtlPrepareRx>
      break;
 8010fa2:	e072      	b.n	801108a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010faa:	689b      	ldr	r3, [r3, #8]
 8010fac:	683a      	ldr	r2, [r7, #0]
 8010fae:	7850      	ldrb	r0, [r2, #1]
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	6839      	ldr	r1, [r7, #0]
 8010fb4:	4798      	blx	r3
      break;
 8010fb6:	e068      	b.n	801108a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010fb8:	683b      	ldr	r3, [r7, #0]
 8010fba:	785b      	ldrb	r3, [r3, #1]
 8010fbc:	2b0b      	cmp	r3, #11
 8010fbe:	d852      	bhi.n	8011066 <USBD_CDC_Setup+0x162>
 8010fc0:	a201      	add	r2, pc, #4	; (adr r2, 8010fc8 <USBD_CDC_Setup+0xc4>)
 8010fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fc6:	bf00      	nop
 8010fc8:	08010ff9 	.word	0x08010ff9
 8010fcc:	08011075 	.word	0x08011075
 8010fd0:	08011067 	.word	0x08011067
 8010fd4:	08011067 	.word	0x08011067
 8010fd8:	08011067 	.word	0x08011067
 8010fdc:	08011067 	.word	0x08011067
 8010fe0:	08011067 	.word	0x08011067
 8010fe4:	08011067 	.word	0x08011067
 8010fe8:	08011067 	.word	0x08011067
 8010fec:	08011067 	.word	0x08011067
 8010ff0:	08011023 	.word	0x08011023
 8010ff4:	0801104d 	.word	0x0801104d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010ffe:	b2db      	uxtb	r3, r3
 8011000:	2b03      	cmp	r3, #3
 8011002:	d107      	bne.n	8011014 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011004:	f107 030a 	add.w	r3, r7, #10
 8011008:	2202      	movs	r2, #2
 801100a:	4619      	mov	r1, r3
 801100c:	6878      	ldr	r0, [r7, #4]
 801100e:	f001 fa9e 	bl	801254e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011012:	e032      	b.n	801107a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8011014:	6839      	ldr	r1, [r7, #0]
 8011016:	6878      	ldr	r0, [r7, #4]
 8011018:	f001 fa28 	bl	801246c <USBD_CtlError>
            ret = USBD_FAIL;
 801101c:	2303      	movs	r3, #3
 801101e:	75fb      	strb	r3, [r7, #23]
          break;
 8011020:	e02b      	b.n	801107a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011028:	b2db      	uxtb	r3, r3
 801102a:	2b03      	cmp	r3, #3
 801102c:	d107      	bne.n	801103e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801102e:	f107 030d 	add.w	r3, r7, #13
 8011032:	2201      	movs	r2, #1
 8011034:	4619      	mov	r1, r3
 8011036:	6878      	ldr	r0, [r7, #4]
 8011038:	f001 fa89 	bl	801254e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801103c:	e01d      	b.n	801107a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801103e:	6839      	ldr	r1, [r7, #0]
 8011040:	6878      	ldr	r0, [r7, #4]
 8011042:	f001 fa13 	bl	801246c <USBD_CtlError>
            ret = USBD_FAIL;
 8011046:	2303      	movs	r3, #3
 8011048:	75fb      	strb	r3, [r7, #23]
          break;
 801104a:	e016      	b.n	801107a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011052:	b2db      	uxtb	r3, r3
 8011054:	2b03      	cmp	r3, #3
 8011056:	d00f      	beq.n	8011078 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8011058:	6839      	ldr	r1, [r7, #0]
 801105a:	6878      	ldr	r0, [r7, #4]
 801105c:	f001 fa06 	bl	801246c <USBD_CtlError>
            ret = USBD_FAIL;
 8011060:	2303      	movs	r3, #3
 8011062:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8011064:	e008      	b.n	8011078 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8011066:	6839      	ldr	r1, [r7, #0]
 8011068:	6878      	ldr	r0, [r7, #4]
 801106a:	f001 f9ff 	bl	801246c <USBD_CtlError>
          ret = USBD_FAIL;
 801106e:	2303      	movs	r3, #3
 8011070:	75fb      	strb	r3, [r7, #23]
          break;
 8011072:	e002      	b.n	801107a <USBD_CDC_Setup+0x176>
          break;
 8011074:	bf00      	nop
 8011076:	e008      	b.n	801108a <USBD_CDC_Setup+0x186>
          break;
 8011078:	bf00      	nop
      }
      break;
 801107a:	e006      	b.n	801108a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 801107c:	6839      	ldr	r1, [r7, #0]
 801107e:	6878      	ldr	r0, [r7, #4]
 8011080:	f001 f9f4 	bl	801246c <USBD_CtlError>
      ret = USBD_FAIL;
 8011084:	2303      	movs	r3, #3
 8011086:	75fb      	strb	r3, [r7, #23]
      break;
 8011088:	bf00      	nop
  }

  return (uint8_t)ret;
 801108a:	7dfb      	ldrb	r3, [r7, #23]
}
 801108c:	4618      	mov	r0, r3
 801108e:	3718      	adds	r7, #24
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}

08011094 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b084      	sub	sp, #16
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
 801109c:	460b      	mov	r3, r1
 801109e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80110a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d101      	bne.n	80110b6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80110b2:	2303      	movs	r3, #3
 80110b4:	e04f      	b.n	8011156 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80110bc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80110be:	78fa      	ldrb	r2, [r7, #3]
 80110c0:	6879      	ldr	r1, [r7, #4]
 80110c2:	4613      	mov	r3, r2
 80110c4:	009b      	lsls	r3, r3, #2
 80110c6:	4413      	add	r3, r2
 80110c8:	009b      	lsls	r3, r3, #2
 80110ca:	440b      	add	r3, r1
 80110cc:	3318      	adds	r3, #24
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d029      	beq.n	8011128 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80110d4:	78fa      	ldrb	r2, [r7, #3]
 80110d6:	6879      	ldr	r1, [r7, #4]
 80110d8:	4613      	mov	r3, r2
 80110da:	009b      	lsls	r3, r3, #2
 80110dc:	4413      	add	r3, r2
 80110de:	009b      	lsls	r3, r3, #2
 80110e0:	440b      	add	r3, r1
 80110e2:	3318      	adds	r3, #24
 80110e4:	681a      	ldr	r2, [r3, #0]
 80110e6:	78f9      	ldrb	r1, [r7, #3]
 80110e8:	68f8      	ldr	r0, [r7, #12]
 80110ea:	460b      	mov	r3, r1
 80110ec:	00db      	lsls	r3, r3, #3
 80110ee:	1a5b      	subs	r3, r3, r1
 80110f0:	009b      	lsls	r3, r3, #2
 80110f2:	4403      	add	r3, r0
 80110f4:	3344      	adds	r3, #68	; 0x44
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80110fc:	fb03 f301 	mul.w	r3, r3, r1
 8011100:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011102:	2b00      	cmp	r3, #0
 8011104:	d110      	bne.n	8011128 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8011106:	78fa      	ldrb	r2, [r7, #3]
 8011108:	6879      	ldr	r1, [r7, #4]
 801110a:	4613      	mov	r3, r2
 801110c:	009b      	lsls	r3, r3, #2
 801110e:	4413      	add	r3, r2
 8011110:	009b      	lsls	r3, r3, #2
 8011112:	440b      	add	r3, r1
 8011114:	3318      	adds	r3, #24
 8011116:	2200      	movs	r2, #0
 8011118:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801111a:	78f9      	ldrb	r1, [r7, #3]
 801111c:	2300      	movs	r3, #0
 801111e:	2200      	movs	r2, #0
 8011120:	6878      	ldr	r0, [r7, #4]
 8011122:	f008 f95c 	bl	80193de <USBD_LL_Transmit>
 8011126:	e015      	b.n	8011154 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8011128:	68bb      	ldr	r3, [r7, #8]
 801112a:	2200      	movs	r2, #0
 801112c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011136:	691b      	ldr	r3, [r3, #16]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d00b      	beq.n	8011154 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011142:	691b      	ldr	r3, [r3, #16]
 8011144:	68ba      	ldr	r2, [r7, #8]
 8011146:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801114a:	68ba      	ldr	r2, [r7, #8]
 801114c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8011150:	78fa      	ldrb	r2, [r7, #3]
 8011152:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8011154:	2300      	movs	r3, #0
}
 8011156:	4618      	mov	r0, r3
 8011158:	3710      	adds	r7, #16
 801115a:	46bd      	mov	sp, r7
 801115c:	bd80      	pop	{r7, pc}

0801115e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801115e:	b580      	push	{r7, lr}
 8011160:	b084      	sub	sp, #16
 8011162:	af00      	add	r7, sp, #0
 8011164:	6078      	str	r0, [r7, #4]
 8011166:	460b      	mov	r3, r1
 8011168:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011170:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011178:	2b00      	cmp	r3, #0
 801117a:	d101      	bne.n	8011180 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801117c:	2303      	movs	r3, #3
 801117e:	e015      	b.n	80111ac <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011180:	78fb      	ldrb	r3, [r7, #3]
 8011182:	4619      	mov	r1, r3
 8011184:	6878      	ldr	r0, [r7, #4]
 8011186:	f008 f96c 	bl	8019462 <USBD_LL_GetRxDataSize>
 801118a:	4602      	mov	r2, r0
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011198:	68db      	ldr	r3, [r3, #12]
 801119a:	68fa      	ldr	r2, [r7, #12]
 801119c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80111a0:	68fa      	ldr	r2, [r7, #12]
 80111a2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80111a6:	4611      	mov	r1, r2
 80111a8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80111aa:	2300      	movs	r3, #0
}
 80111ac:	4618      	mov	r0, r3
 80111ae:	3710      	adds	r7, #16
 80111b0:	46bd      	mov	sp, r7
 80111b2:	bd80      	pop	{r7, pc}

080111b4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b084      	sub	sp, #16
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80111c2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d101      	bne.n	80111ce <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80111ca:	2303      	movs	r3, #3
 80111cc:	e01b      	b.n	8011206 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d015      	beq.n	8011204 <USBD_CDC_EP0_RxReady+0x50>
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80111de:	2bff      	cmp	r3, #255	; 0xff
 80111e0:	d010      	beq.n	8011204 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80111e8:	689b      	ldr	r3, [r3, #8]
 80111ea:	68fa      	ldr	r2, [r7, #12]
 80111ec:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80111f0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80111f2:	68fa      	ldr	r2, [r7, #12]
 80111f4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80111f8:	b292      	uxth	r2, r2
 80111fa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	22ff      	movs	r2, #255	; 0xff
 8011200:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8011204:	2300      	movs	r3, #0
}
 8011206:	4618      	mov	r0, r3
 8011208:	3710      	adds	r7, #16
 801120a:	46bd      	mov	sp, r7
 801120c:	bd80      	pop	{r7, pc}
	...

08011210 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011210:	b480      	push	{r7}
 8011212:	b083      	sub	sp, #12
 8011214:	af00      	add	r7, sp, #0
 8011216:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	2243      	movs	r2, #67	; 0x43
 801121c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801121e:	4b03      	ldr	r3, [pc, #12]	; (801122c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8011220:	4618      	mov	r0, r3
 8011222:	370c      	adds	r7, #12
 8011224:	46bd      	mov	sp, r7
 8011226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122a:	4770      	bx	lr
 801122c:	20000100 	.word	0x20000100

08011230 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011230:	b480      	push	{r7}
 8011232:	b083      	sub	sp, #12
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	2243      	movs	r2, #67	; 0x43
 801123c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801123e:	4b03      	ldr	r3, [pc, #12]	; (801124c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011240:	4618      	mov	r0, r3
 8011242:	370c      	adds	r7, #12
 8011244:	46bd      	mov	sp, r7
 8011246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124a:	4770      	bx	lr
 801124c:	200000bc 	.word	0x200000bc

08011250 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011250:	b480      	push	{r7}
 8011252:	b083      	sub	sp, #12
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2243      	movs	r2, #67	; 0x43
 801125c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801125e:	4b03      	ldr	r3, [pc, #12]	; (801126c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011260:	4618      	mov	r0, r3
 8011262:	370c      	adds	r7, #12
 8011264:	46bd      	mov	sp, r7
 8011266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126a:	4770      	bx	lr
 801126c:	20000144 	.word	0x20000144

08011270 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011270:	b480      	push	{r7}
 8011272:	b083      	sub	sp, #12
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	220a      	movs	r2, #10
 801127c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801127e:	4b03      	ldr	r3, [pc, #12]	; (801128c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011280:	4618      	mov	r0, r3
 8011282:	370c      	adds	r7, #12
 8011284:	46bd      	mov	sp, r7
 8011286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128a:	4770      	bx	lr
 801128c:	20000078 	.word	0x20000078

08011290 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011290:	b480      	push	{r7}
 8011292:	b083      	sub	sp, #12
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
 8011298:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d101      	bne.n	80112a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80112a0:	2303      	movs	r3, #3
 80112a2:	e004      	b.n	80112ae <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	683a      	ldr	r2, [r7, #0]
 80112a8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80112ac:	2300      	movs	r3, #0
}
 80112ae:	4618      	mov	r0, r3
 80112b0:	370c      	adds	r7, #12
 80112b2:	46bd      	mov	sp, r7
 80112b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b8:	4770      	bx	lr

080112ba <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80112ba:	b480      	push	{r7}
 80112bc:	b087      	sub	sp, #28
 80112be:	af00      	add	r7, sp, #0
 80112c0:	60f8      	str	r0, [r7, #12]
 80112c2:	60b9      	str	r1, [r7, #8]
 80112c4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80112cc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80112ce:	697b      	ldr	r3, [r7, #20]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d101      	bne.n	80112d8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80112d4:	2303      	movs	r3, #3
 80112d6:	e008      	b.n	80112ea <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80112d8:	697b      	ldr	r3, [r7, #20]
 80112da:	68ba      	ldr	r2, [r7, #8]
 80112dc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80112e0:	697b      	ldr	r3, [r7, #20]
 80112e2:	687a      	ldr	r2, [r7, #4]
 80112e4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80112e8:	2300      	movs	r3, #0
}
 80112ea:	4618      	mov	r0, r3
 80112ec:	371c      	adds	r7, #28
 80112ee:	46bd      	mov	sp, r7
 80112f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f4:	4770      	bx	lr

080112f6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80112f6:	b480      	push	{r7}
 80112f8:	b085      	sub	sp, #20
 80112fa:	af00      	add	r7, sp, #0
 80112fc:	6078      	str	r0, [r7, #4]
 80112fe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011306:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d101      	bne.n	8011312 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 801130e:	2303      	movs	r3, #3
 8011310:	e004      	b.n	801131c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	683a      	ldr	r2, [r7, #0]
 8011316:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801131a:	2300      	movs	r3, #0
}
 801131c:	4618      	mov	r0, r3
 801131e:	3714      	adds	r7, #20
 8011320:	46bd      	mov	sp, r7
 8011322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011326:	4770      	bx	lr

08011328 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011328:	b580      	push	{r7, lr}
 801132a:	b084      	sub	sp, #16
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011336:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801133e:	2b00      	cmp	r3, #0
 8011340:	d101      	bne.n	8011346 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011342:	2303      	movs	r3, #3
 8011344:	e016      	b.n	8011374 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	7c1b      	ldrb	r3, [r3, #16]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d109      	bne.n	8011362 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011354:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011358:	2101      	movs	r1, #1
 801135a:	6878      	ldr	r0, [r7, #4]
 801135c:	f008 f860 	bl	8019420 <USBD_LL_PrepareReceive>
 8011360:	e007      	b.n	8011372 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011368:	2340      	movs	r3, #64	; 0x40
 801136a:	2101      	movs	r1, #1
 801136c:	6878      	ldr	r0, [r7, #4]
 801136e:	f008 f857 	bl	8019420 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011372:	2300      	movs	r3, #0
}
 8011374:	4618      	mov	r0, r3
 8011376:	3710      	adds	r7, #16
 8011378:	46bd      	mov	sp, r7
 801137a:	bd80      	pop	{r7, pc}

0801137c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b086      	sub	sp, #24
 8011380:	af00      	add	r7, sp, #0
 8011382:	60f8      	str	r0, [r7, #12]
 8011384:	60b9      	str	r1, [r7, #8]
 8011386:	4613      	mov	r3, r2
 8011388:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d101      	bne.n	8011394 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011390:	2303      	movs	r3, #3
 8011392:	e01f      	b.n	80113d4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	2200      	movs	r2, #0
 8011398:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	2200      	movs	r2, #0
 80113a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	2200      	movs	r2, #0
 80113a8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80113ac:	68bb      	ldr	r3, [r7, #8]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d003      	beq.n	80113ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	68ba      	ldr	r2, [r7, #8]
 80113b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	2201      	movs	r2, #1
 80113be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	79fa      	ldrb	r2, [r7, #7]
 80113c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80113c8:	68f8      	ldr	r0, [r7, #12]
 80113ca:	f007 fed3 	bl	8019174 <USBD_LL_Init>
 80113ce:	4603      	mov	r3, r0
 80113d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80113d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80113d4:	4618      	mov	r0, r3
 80113d6:	3718      	adds	r7, #24
 80113d8:	46bd      	mov	sp, r7
 80113da:	bd80      	pop	{r7, pc}

080113dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b084      	sub	sp, #16
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80113e6:	2300      	movs	r3, #0
 80113e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80113ea:	683b      	ldr	r3, [r7, #0]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d101      	bne.n	80113f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80113f0:	2303      	movs	r3, #3
 80113f2:	e016      	b.n	8011422 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	683a      	ldr	r2, [r7, #0]
 80113f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011404:	2b00      	cmp	r3, #0
 8011406:	d00b      	beq.n	8011420 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801140e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011410:	f107 020e 	add.w	r2, r7, #14
 8011414:	4610      	mov	r0, r2
 8011416:	4798      	blx	r3
 8011418:	4602      	mov	r2, r0
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8011420:	2300      	movs	r3, #0
}
 8011422:	4618      	mov	r0, r3
 8011424:	3710      	adds	r7, #16
 8011426:	46bd      	mov	sp, r7
 8011428:	bd80      	pop	{r7, pc}

0801142a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801142a:	b580      	push	{r7, lr}
 801142c:	b082      	sub	sp, #8
 801142e:	af00      	add	r7, sp, #0
 8011430:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011432:	6878      	ldr	r0, [r7, #4]
 8011434:	f007 feea 	bl	801920c <USBD_LL_Start>
 8011438:	4603      	mov	r3, r0
}
 801143a:	4618      	mov	r0, r3
 801143c:	3708      	adds	r7, #8
 801143e:	46bd      	mov	sp, r7
 8011440:	bd80      	pop	{r7, pc}

08011442 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011442:	b480      	push	{r7}
 8011444:	b083      	sub	sp, #12
 8011446:	af00      	add	r7, sp, #0
 8011448:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801144a:	2300      	movs	r3, #0
}
 801144c:	4618      	mov	r0, r3
 801144e:	370c      	adds	r7, #12
 8011450:	46bd      	mov	sp, r7
 8011452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011456:	4770      	bx	lr

08011458 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b084      	sub	sp, #16
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
 8011460:	460b      	mov	r3, r1
 8011462:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011464:	2303      	movs	r3, #3
 8011466:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801146e:	2b00      	cmp	r3, #0
 8011470:	d009      	beq.n	8011486 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	78fa      	ldrb	r2, [r7, #3]
 801147c:	4611      	mov	r1, r2
 801147e:	6878      	ldr	r0, [r7, #4]
 8011480:	4798      	blx	r3
 8011482:	4603      	mov	r3, r0
 8011484:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011486:	7bfb      	ldrb	r3, [r7, #15]
}
 8011488:	4618      	mov	r0, r3
 801148a:	3710      	adds	r7, #16
 801148c:	46bd      	mov	sp, r7
 801148e:	bd80      	pop	{r7, pc}

08011490 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b082      	sub	sp, #8
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
 8011498:	460b      	mov	r3, r1
 801149a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d007      	beq.n	80114b6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114ac:	685b      	ldr	r3, [r3, #4]
 80114ae:	78fa      	ldrb	r2, [r7, #3]
 80114b0:	4611      	mov	r1, r2
 80114b2:	6878      	ldr	r0, [r7, #4]
 80114b4:	4798      	blx	r3
  }

  return USBD_OK;
 80114b6:	2300      	movs	r3, #0
}
 80114b8:	4618      	mov	r0, r3
 80114ba:	3708      	adds	r7, #8
 80114bc:	46bd      	mov	sp, r7
 80114be:	bd80      	pop	{r7, pc}

080114c0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80114c0:	b580      	push	{r7, lr}
 80114c2:	b084      	sub	sp, #16
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	6078      	str	r0, [r7, #4]
 80114c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80114d0:	6839      	ldr	r1, [r7, #0]
 80114d2:	4618      	mov	r0, r3
 80114d4:	f000 ff90 	bl	80123f8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	2201      	movs	r2, #1
 80114dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80114e6:	461a      	mov	r2, r3
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80114f4:	f003 031f 	and.w	r3, r3, #31
 80114f8:	2b02      	cmp	r3, #2
 80114fa:	d01a      	beq.n	8011532 <USBD_LL_SetupStage+0x72>
 80114fc:	2b02      	cmp	r3, #2
 80114fe:	d822      	bhi.n	8011546 <USBD_LL_SetupStage+0x86>
 8011500:	2b00      	cmp	r3, #0
 8011502:	d002      	beq.n	801150a <USBD_LL_SetupStage+0x4a>
 8011504:	2b01      	cmp	r3, #1
 8011506:	d00a      	beq.n	801151e <USBD_LL_SetupStage+0x5e>
 8011508:	e01d      	b.n	8011546 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011510:	4619      	mov	r1, r3
 8011512:	6878      	ldr	r0, [r7, #4]
 8011514:	f000 fa62 	bl	80119dc <USBD_StdDevReq>
 8011518:	4603      	mov	r3, r0
 801151a:	73fb      	strb	r3, [r7, #15]
      break;
 801151c:	e020      	b.n	8011560 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011524:	4619      	mov	r1, r3
 8011526:	6878      	ldr	r0, [r7, #4]
 8011528:	f000 fac6 	bl	8011ab8 <USBD_StdItfReq>
 801152c:	4603      	mov	r3, r0
 801152e:	73fb      	strb	r3, [r7, #15]
      break;
 8011530:	e016      	b.n	8011560 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011538:	4619      	mov	r1, r3
 801153a:	6878      	ldr	r0, [r7, #4]
 801153c:	f000 fb05 	bl	8011b4a <USBD_StdEPReq>
 8011540:	4603      	mov	r3, r0
 8011542:	73fb      	strb	r3, [r7, #15]
      break;
 8011544:	e00c      	b.n	8011560 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801154c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011550:	b2db      	uxtb	r3, r3
 8011552:	4619      	mov	r1, r3
 8011554:	6878      	ldr	r0, [r7, #4]
 8011556:	f007 feb9 	bl	80192cc <USBD_LL_StallEP>
 801155a:	4603      	mov	r3, r0
 801155c:	73fb      	strb	r3, [r7, #15]
      break;
 801155e:	bf00      	nop
  }

  return ret;
 8011560:	7bfb      	ldrb	r3, [r7, #15]
}
 8011562:	4618      	mov	r0, r3
 8011564:	3710      	adds	r7, #16
 8011566:	46bd      	mov	sp, r7
 8011568:	bd80      	pop	{r7, pc}

0801156a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801156a:	b580      	push	{r7, lr}
 801156c:	b086      	sub	sp, #24
 801156e:	af00      	add	r7, sp, #0
 8011570:	60f8      	str	r0, [r7, #12]
 8011572:	460b      	mov	r3, r1
 8011574:	607a      	str	r2, [r7, #4]
 8011576:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011578:	7afb      	ldrb	r3, [r7, #11]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d138      	bne.n	80115f0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011584:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801158c:	2b03      	cmp	r3, #3
 801158e:	d14a      	bne.n	8011626 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011590:	693b      	ldr	r3, [r7, #16]
 8011592:	689a      	ldr	r2, [r3, #8]
 8011594:	693b      	ldr	r3, [r7, #16]
 8011596:	68db      	ldr	r3, [r3, #12]
 8011598:	429a      	cmp	r2, r3
 801159a:	d913      	bls.n	80115c4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801159c:	693b      	ldr	r3, [r7, #16]
 801159e:	689a      	ldr	r2, [r3, #8]
 80115a0:	693b      	ldr	r3, [r7, #16]
 80115a2:	68db      	ldr	r3, [r3, #12]
 80115a4:	1ad2      	subs	r2, r2, r3
 80115a6:	693b      	ldr	r3, [r7, #16]
 80115a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80115aa:	693b      	ldr	r3, [r7, #16]
 80115ac:	68da      	ldr	r2, [r3, #12]
 80115ae:	693b      	ldr	r3, [r7, #16]
 80115b0:	689b      	ldr	r3, [r3, #8]
 80115b2:	4293      	cmp	r3, r2
 80115b4:	bf28      	it	cs
 80115b6:	4613      	movcs	r3, r2
 80115b8:	461a      	mov	r2, r3
 80115ba:	6879      	ldr	r1, [r7, #4]
 80115bc:	68f8      	ldr	r0, [r7, #12]
 80115be:	f001 f80f 	bl	80125e0 <USBD_CtlContinueRx>
 80115c2:	e030      	b.n	8011626 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80115ca:	b2db      	uxtb	r3, r3
 80115cc:	2b03      	cmp	r3, #3
 80115ce:	d10b      	bne.n	80115e8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115d6:	691b      	ldr	r3, [r3, #16]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d005      	beq.n	80115e8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115e2:	691b      	ldr	r3, [r3, #16]
 80115e4:	68f8      	ldr	r0, [r7, #12]
 80115e6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80115e8:	68f8      	ldr	r0, [r7, #12]
 80115ea:	f001 f80a 	bl	8012602 <USBD_CtlSendStatus>
 80115ee:	e01a      	b.n	8011626 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80115f6:	b2db      	uxtb	r3, r3
 80115f8:	2b03      	cmp	r3, #3
 80115fa:	d114      	bne.n	8011626 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011602:	699b      	ldr	r3, [r3, #24]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d00e      	beq.n	8011626 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801160e:	699b      	ldr	r3, [r3, #24]
 8011610:	7afa      	ldrb	r2, [r7, #11]
 8011612:	4611      	mov	r1, r2
 8011614:	68f8      	ldr	r0, [r7, #12]
 8011616:	4798      	blx	r3
 8011618:	4603      	mov	r3, r0
 801161a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801161c:	7dfb      	ldrb	r3, [r7, #23]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d001      	beq.n	8011626 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8011622:	7dfb      	ldrb	r3, [r7, #23]
 8011624:	e000      	b.n	8011628 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8011626:	2300      	movs	r3, #0
}
 8011628:	4618      	mov	r0, r3
 801162a:	3718      	adds	r7, #24
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}

08011630 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b086      	sub	sp, #24
 8011634:	af00      	add	r7, sp, #0
 8011636:	60f8      	str	r0, [r7, #12]
 8011638:	460b      	mov	r3, r1
 801163a:	607a      	str	r2, [r7, #4]
 801163c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801163e:	7afb      	ldrb	r3, [r7, #11]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d16b      	bne.n	801171c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	3314      	adds	r3, #20
 8011648:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011650:	2b02      	cmp	r3, #2
 8011652:	d156      	bne.n	8011702 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8011654:	693b      	ldr	r3, [r7, #16]
 8011656:	689a      	ldr	r2, [r3, #8]
 8011658:	693b      	ldr	r3, [r7, #16]
 801165a:	68db      	ldr	r3, [r3, #12]
 801165c:	429a      	cmp	r2, r3
 801165e:	d914      	bls.n	801168a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011660:	693b      	ldr	r3, [r7, #16]
 8011662:	689a      	ldr	r2, [r3, #8]
 8011664:	693b      	ldr	r3, [r7, #16]
 8011666:	68db      	ldr	r3, [r3, #12]
 8011668:	1ad2      	subs	r2, r2, r3
 801166a:	693b      	ldr	r3, [r7, #16]
 801166c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801166e:	693b      	ldr	r3, [r7, #16]
 8011670:	689b      	ldr	r3, [r3, #8]
 8011672:	461a      	mov	r2, r3
 8011674:	6879      	ldr	r1, [r7, #4]
 8011676:	68f8      	ldr	r0, [r7, #12]
 8011678:	f000 ff84 	bl	8012584 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801167c:	2300      	movs	r3, #0
 801167e:	2200      	movs	r2, #0
 8011680:	2100      	movs	r1, #0
 8011682:	68f8      	ldr	r0, [r7, #12]
 8011684:	f007 fecc 	bl	8019420 <USBD_LL_PrepareReceive>
 8011688:	e03b      	b.n	8011702 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801168a:	693b      	ldr	r3, [r7, #16]
 801168c:	68da      	ldr	r2, [r3, #12]
 801168e:	693b      	ldr	r3, [r7, #16]
 8011690:	689b      	ldr	r3, [r3, #8]
 8011692:	429a      	cmp	r2, r3
 8011694:	d11c      	bne.n	80116d0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011696:	693b      	ldr	r3, [r7, #16]
 8011698:	685a      	ldr	r2, [r3, #4]
 801169a:	693b      	ldr	r3, [r7, #16]
 801169c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801169e:	429a      	cmp	r2, r3
 80116a0:	d316      	bcc.n	80116d0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80116a2:	693b      	ldr	r3, [r7, #16]
 80116a4:	685a      	ldr	r2, [r3, #4]
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80116ac:	429a      	cmp	r2, r3
 80116ae:	d20f      	bcs.n	80116d0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80116b0:	2200      	movs	r2, #0
 80116b2:	2100      	movs	r1, #0
 80116b4:	68f8      	ldr	r0, [r7, #12]
 80116b6:	f000 ff65 	bl	8012584 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	2200      	movs	r2, #0
 80116be:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80116c2:	2300      	movs	r3, #0
 80116c4:	2200      	movs	r2, #0
 80116c6:	2100      	movs	r1, #0
 80116c8:	68f8      	ldr	r0, [r7, #12]
 80116ca:	f007 fea9 	bl	8019420 <USBD_LL_PrepareReceive>
 80116ce:	e018      	b.n	8011702 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80116d6:	b2db      	uxtb	r3, r3
 80116d8:	2b03      	cmp	r3, #3
 80116da:	d10b      	bne.n	80116f4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116e2:	68db      	ldr	r3, [r3, #12]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d005      	beq.n	80116f4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116ee:	68db      	ldr	r3, [r3, #12]
 80116f0:	68f8      	ldr	r0, [r7, #12]
 80116f2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80116f4:	2180      	movs	r1, #128	; 0x80
 80116f6:	68f8      	ldr	r0, [r7, #12]
 80116f8:	f007 fde8 	bl	80192cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80116fc:	68f8      	ldr	r0, [r7, #12]
 80116fe:	f000 ff93 	bl	8012628 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011708:	2b01      	cmp	r3, #1
 801170a:	d122      	bne.n	8011752 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 801170c:	68f8      	ldr	r0, [r7, #12]
 801170e:	f7ff fe98 	bl	8011442 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	2200      	movs	r2, #0
 8011716:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801171a:	e01a      	b.n	8011752 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011722:	b2db      	uxtb	r3, r3
 8011724:	2b03      	cmp	r3, #3
 8011726:	d114      	bne.n	8011752 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801172e:	695b      	ldr	r3, [r3, #20]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d00e      	beq.n	8011752 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801173a:	695b      	ldr	r3, [r3, #20]
 801173c:	7afa      	ldrb	r2, [r7, #11]
 801173e:	4611      	mov	r1, r2
 8011740:	68f8      	ldr	r0, [r7, #12]
 8011742:	4798      	blx	r3
 8011744:	4603      	mov	r3, r0
 8011746:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8011748:	7dfb      	ldrb	r3, [r7, #23]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d001      	beq.n	8011752 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801174e:	7dfb      	ldrb	r3, [r7, #23]
 8011750:	e000      	b.n	8011754 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8011752:	2300      	movs	r3, #0
}
 8011754:	4618      	mov	r0, r3
 8011756:	3718      	adds	r7, #24
 8011758:	46bd      	mov	sp, r7
 801175a:	bd80      	pop	{r7, pc}

0801175c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801175c:	b580      	push	{r7, lr}
 801175e:	b082      	sub	sp, #8
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	2201      	movs	r2, #1
 8011768:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	2200      	movs	r2, #0
 8011770:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	2200      	movs	r2, #0
 8011778:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	2200      	movs	r2, #0
 801177e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011788:	2b00      	cmp	r3, #0
 801178a:	d101      	bne.n	8011790 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 801178c:	2303      	movs	r3, #3
 801178e:	e02f      	b.n	80117f0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011796:	2b00      	cmp	r3, #0
 8011798:	d00f      	beq.n	80117ba <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117a0:	685b      	ldr	r3, [r3, #4]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d009      	beq.n	80117ba <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117ac:	685b      	ldr	r3, [r3, #4]
 80117ae:	687a      	ldr	r2, [r7, #4]
 80117b0:	6852      	ldr	r2, [r2, #4]
 80117b2:	b2d2      	uxtb	r2, r2
 80117b4:	4611      	mov	r1, r2
 80117b6:	6878      	ldr	r0, [r7, #4]
 80117b8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80117ba:	2340      	movs	r3, #64	; 0x40
 80117bc:	2200      	movs	r2, #0
 80117be:	2100      	movs	r1, #0
 80117c0:	6878      	ldr	r0, [r7, #4]
 80117c2:	f007 fd3e 	bl	8019242 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	2201      	movs	r2, #1
 80117ca:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	2240      	movs	r2, #64	; 0x40
 80117d2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80117d6:	2340      	movs	r3, #64	; 0x40
 80117d8:	2200      	movs	r2, #0
 80117da:	2180      	movs	r1, #128	; 0x80
 80117dc:	6878      	ldr	r0, [r7, #4]
 80117de:	f007 fd30 	bl	8019242 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	2201      	movs	r2, #1
 80117e6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	2240      	movs	r2, #64	; 0x40
 80117ec:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80117ee:	2300      	movs	r3, #0
}
 80117f0:	4618      	mov	r0, r3
 80117f2:	3708      	adds	r7, #8
 80117f4:	46bd      	mov	sp, r7
 80117f6:	bd80      	pop	{r7, pc}

080117f8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80117f8:	b480      	push	{r7}
 80117fa:	b083      	sub	sp, #12
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
 8011800:	460b      	mov	r3, r1
 8011802:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	78fa      	ldrb	r2, [r7, #3]
 8011808:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801180a:	2300      	movs	r3, #0
}
 801180c:	4618      	mov	r0, r3
 801180e:	370c      	adds	r7, #12
 8011810:	46bd      	mov	sp, r7
 8011812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011816:	4770      	bx	lr

08011818 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011818:	b480      	push	{r7}
 801181a:	b083      	sub	sp, #12
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011826:	b2da      	uxtb	r2, r3
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	2204      	movs	r2, #4
 8011832:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011836:	2300      	movs	r3, #0
}
 8011838:	4618      	mov	r0, r3
 801183a:	370c      	adds	r7, #12
 801183c:	46bd      	mov	sp, r7
 801183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011842:	4770      	bx	lr

08011844 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011844:	b480      	push	{r7}
 8011846:	b083      	sub	sp, #12
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011852:	b2db      	uxtb	r3, r3
 8011854:	2b04      	cmp	r3, #4
 8011856:	d106      	bne.n	8011866 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801185e:	b2da      	uxtb	r2, r3
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011866:	2300      	movs	r3, #0
}
 8011868:	4618      	mov	r0, r3
 801186a:	370c      	adds	r7, #12
 801186c:	46bd      	mov	sp, r7
 801186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011872:	4770      	bx	lr

08011874 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011874:	b580      	push	{r7, lr}
 8011876:	b082      	sub	sp, #8
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011882:	2b00      	cmp	r3, #0
 8011884:	d101      	bne.n	801188a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8011886:	2303      	movs	r3, #3
 8011888:	e012      	b.n	80118b0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011890:	b2db      	uxtb	r3, r3
 8011892:	2b03      	cmp	r3, #3
 8011894:	d10b      	bne.n	80118ae <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801189c:	69db      	ldr	r3, [r3, #28]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d005      	beq.n	80118ae <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118a8:	69db      	ldr	r3, [r3, #28]
 80118aa:	6878      	ldr	r0, [r7, #4]
 80118ac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80118ae:	2300      	movs	r3, #0
}
 80118b0:	4618      	mov	r0, r3
 80118b2:	3708      	adds	r7, #8
 80118b4:	46bd      	mov	sp, r7
 80118b6:	bd80      	pop	{r7, pc}

080118b8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b082      	sub	sp, #8
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
 80118c0:	460b      	mov	r3, r1
 80118c2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d101      	bne.n	80118d2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80118ce:	2303      	movs	r3, #3
 80118d0:	e014      	b.n	80118fc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80118d8:	b2db      	uxtb	r3, r3
 80118da:	2b03      	cmp	r3, #3
 80118dc:	d10d      	bne.n	80118fa <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118e4:	6a1b      	ldr	r3, [r3, #32]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d007      	beq.n	80118fa <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118f0:	6a1b      	ldr	r3, [r3, #32]
 80118f2:	78fa      	ldrb	r2, [r7, #3]
 80118f4:	4611      	mov	r1, r2
 80118f6:	6878      	ldr	r0, [r7, #4]
 80118f8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80118fa:	2300      	movs	r3, #0
}
 80118fc:	4618      	mov	r0, r3
 80118fe:	3708      	adds	r7, #8
 8011900:	46bd      	mov	sp, r7
 8011902:	bd80      	pop	{r7, pc}

08011904 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011904:	b580      	push	{r7, lr}
 8011906:	b082      	sub	sp, #8
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
 801190c:	460b      	mov	r3, r1
 801190e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011916:	2b00      	cmp	r3, #0
 8011918:	d101      	bne.n	801191e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 801191a:	2303      	movs	r3, #3
 801191c:	e014      	b.n	8011948 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011924:	b2db      	uxtb	r3, r3
 8011926:	2b03      	cmp	r3, #3
 8011928:	d10d      	bne.n	8011946 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011932:	2b00      	cmp	r3, #0
 8011934:	d007      	beq.n	8011946 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801193e:	78fa      	ldrb	r2, [r7, #3]
 8011940:	4611      	mov	r1, r2
 8011942:	6878      	ldr	r0, [r7, #4]
 8011944:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011946:	2300      	movs	r3, #0
}
 8011948:	4618      	mov	r0, r3
 801194a:	3708      	adds	r7, #8
 801194c:	46bd      	mov	sp, r7
 801194e:	bd80      	pop	{r7, pc}

08011950 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011950:	b480      	push	{r7}
 8011952:	b083      	sub	sp, #12
 8011954:	af00      	add	r7, sp, #0
 8011956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011958:	2300      	movs	r3, #0
}
 801195a:	4618      	mov	r0, r3
 801195c:	370c      	adds	r7, #12
 801195e:	46bd      	mov	sp, r7
 8011960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011964:	4770      	bx	lr

08011966 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011966:	b580      	push	{r7, lr}
 8011968:	b082      	sub	sp, #8
 801196a:	af00      	add	r7, sp, #0
 801196c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	2201      	movs	r2, #1
 8011972:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801197c:	2b00      	cmp	r3, #0
 801197e:	d009      	beq.n	8011994 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011986:	685b      	ldr	r3, [r3, #4]
 8011988:	687a      	ldr	r2, [r7, #4]
 801198a:	6852      	ldr	r2, [r2, #4]
 801198c:	b2d2      	uxtb	r2, r2
 801198e:	4611      	mov	r1, r2
 8011990:	6878      	ldr	r0, [r7, #4]
 8011992:	4798      	blx	r3
  }

  return USBD_OK;
 8011994:	2300      	movs	r3, #0
}
 8011996:	4618      	mov	r0, r3
 8011998:	3708      	adds	r7, #8
 801199a:	46bd      	mov	sp, r7
 801199c:	bd80      	pop	{r7, pc}

0801199e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801199e:	b480      	push	{r7}
 80119a0:	b087      	sub	sp, #28
 80119a2:	af00      	add	r7, sp, #0
 80119a4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80119aa:	697b      	ldr	r3, [r7, #20]
 80119ac:	781b      	ldrb	r3, [r3, #0]
 80119ae:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80119b0:	697b      	ldr	r3, [r7, #20]
 80119b2:	3301      	adds	r3, #1
 80119b4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80119b6:	697b      	ldr	r3, [r7, #20]
 80119b8:	781b      	ldrb	r3, [r3, #0]
 80119ba:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80119bc:	8a3b      	ldrh	r3, [r7, #16]
 80119be:	021b      	lsls	r3, r3, #8
 80119c0:	b21a      	sxth	r2, r3
 80119c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80119c6:	4313      	orrs	r3, r2
 80119c8:	b21b      	sxth	r3, r3
 80119ca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80119cc:	89fb      	ldrh	r3, [r7, #14]
}
 80119ce:	4618      	mov	r0, r3
 80119d0:	371c      	adds	r7, #28
 80119d2:	46bd      	mov	sp, r7
 80119d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d8:	4770      	bx	lr
	...

080119dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119dc:	b580      	push	{r7, lr}
 80119de:	b084      	sub	sp, #16
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	6078      	str	r0, [r7, #4]
 80119e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80119e6:	2300      	movs	r3, #0
 80119e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80119ea:	683b      	ldr	r3, [r7, #0]
 80119ec:	781b      	ldrb	r3, [r3, #0]
 80119ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80119f2:	2b40      	cmp	r3, #64	; 0x40
 80119f4:	d005      	beq.n	8011a02 <USBD_StdDevReq+0x26>
 80119f6:	2b40      	cmp	r3, #64	; 0x40
 80119f8:	d853      	bhi.n	8011aa2 <USBD_StdDevReq+0xc6>
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d00b      	beq.n	8011a16 <USBD_StdDevReq+0x3a>
 80119fe:	2b20      	cmp	r3, #32
 8011a00:	d14f      	bne.n	8011aa2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a08:	689b      	ldr	r3, [r3, #8]
 8011a0a:	6839      	ldr	r1, [r7, #0]
 8011a0c:	6878      	ldr	r0, [r7, #4]
 8011a0e:	4798      	blx	r3
 8011a10:	4603      	mov	r3, r0
 8011a12:	73fb      	strb	r3, [r7, #15]
      break;
 8011a14:	e04a      	b.n	8011aac <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011a16:	683b      	ldr	r3, [r7, #0]
 8011a18:	785b      	ldrb	r3, [r3, #1]
 8011a1a:	2b09      	cmp	r3, #9
 8011a1c:	d83b      	bhi.n	8011a96 <USBD_StdDevReq+0xba>
 8011a1e:	a201      	add	r2, pc, #4	; (adr r2, 8011a24 <USBD_StdDevReq+0x48>)
 8011a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a24:	08011a79 	.word	0x08011a79
 8011a28:	08011a8d 	.word	0x08011a8d
 8011a2c:	08011a97 	.word	0x08011a97
 8011a30:	08011a83 	.word	0x08011a83
 8011a34:	08011a97 	.word	0x08011a97
 8011a38:	08011a57 	.word	0x08011a57
 8011a3c:	08011a4d 	.word	0x08011a4d
 8011a40:	08011a97 	.word	0x08011a97
 8011a44:	08011a6f 	.word	0x08011a6f
 8011a48:	08011a61 	.word	0x08011a61
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011a4c:	6839      	ldr	r1, [r7, #0]
 8011a4e:	6878      	ldr	r0, [r7, #4]
 8011a50:	f000 f9de 	bl	8011e10 <USBD_GetDescriptor>
          break;
 8011a54:	e024      	b.n	8011aa0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011a56:	6839      	ldr	r1, [r7, #0]
 8011a58:	6878      	ldr	r0, [r7, #4]
 8011a5a:	f000 fb43 	bl	80120e4 <USBD_SetAddress>
          break;
 8011a5e:	e01f      	b.n	8011aa0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011a60:	6839      	ldr	r1, [r7, #0]
 8011a62:	6878      	ldr	r0, [r7, #4]
 8011a64:	f000 fb82 	bl	801216c <USBD_SetConfig>
 8011a68:	4603      	mov	r3, r0
 8011a6a:	73fb      	strb	r3, [r7, #15]
          break;
 8011a6c:	e018      	b.n	8011aa0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011a6e:	6839      	ldr	r1, [r7, #0]
 8011a70:	6878      	ldr	r0, [r7, #4]
 8011a72:	f000 fc21 	bl	80122b8 <USBD_GetConfig>
          break;
 8011a76:	e013      	b.n	8011aa0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011a78:	6839      	ldr	r1, [r7, #0]
 8011a7a:	6878      	ldr	r0, [r7, #4]
 8011a7c:	f000 fc52 	bl	8012324 <USBD_GetStatus>
          break;
 8011a80:	e00e      	b.n	8011aa0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011a82:	6839      	ldr	r1, [r7, #0]
 8011a84:	6878      	ldr	r0, [r7, #4]
 8011a86:	f000 fc81 	bl	801238c <USBD_SetFeature>
          break;
 8011a8a:	e009      	b.n	8011aa0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011a8c:	6839      	ldr	r1, [r7, #0]
 8011a8e:	6878      	ldr	r0, [r7, #4]
 8011a90:	f000 fc90 	bl	80123b4 <USBD_ClrFeature>
          break;
 8011a94:	e004      	b.n	8011aa0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8011a96:	6839      	ldr	r1, [r7, #0]
 8011a98:	6878      	ldr	r0, [r7, #4]
 8011a9a:	f000 fce7 	bl	801246c <USBD_CtlError>
          break;
 8011a9e:	bf00      	nop
      }
      break;
 8011aa0:	e004      	b.n	8011aac <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8011aa2:	6839      	ldr	r1, [r7, #0]
 8011aa4:	6878      	ldr	r0, [r7, #4]
 8011aa6:	f000 fce1 	bl	801246c <USBD_CtlError>
      break;
 8011aaa:	bf00      	nop
  }

  return ret;
 8011aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8011aae:	4618      	mov	r0, r3
 8011ab0:	3710      	adds	r7, #16
 8011ab2:	46bd      	mov	sp, r7
 8011ab4:	bd80      	pop	{r7, pc}
 8011ab6:	bf00      	nop

08011ab8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b084      	sub	sp, #16
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
 8011ac0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011ac6:	683b      	ldr	r3, [r7, #0]
 8011ac8:	781b      	ldrb	r3, [r3, #0]
 8011aca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011ace:	2b40      	cmp	r3, #64	; 0x40
 8011ad0:	d005      	beq.n	8011ade <USBD_StdItfReq+0x26>
 8011ad2:	2b40      	cmp	r3, #64	; 0x40
 8011ad4:	d82f      	bhi.n	8011b36 <USBD_StdItfReq+0x7e>
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d001      	beq.n	8011ade <USBD_StdItfReq+0x26>
 8011ada:	2b20      	cmp	r3, #32
 8011adc:	d12b      	bne.n	8011b36 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ae4:	b2db      	uxtb	r3, r3
 8011ae6:	3b01      	subs	r3, #1
 8011ae8:	2b02      	cmp	r3, #2
 8011aea:	d81d      	bhi.n	8011b28 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011aec:	683b      	ldr	r3, [r7, #0]
 8011aee:	889b      	ldrh	r3, [r3, #4]
 8011af0:	b2db      	uxtb	r3, r3
 8011af2:	2b01      	cmp	r3, #1
 8011af4:	d813      	bhi.n	8011b1e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011afc:	689b      	ldr	r3, [r3, #8]
 8011afe:	6839      	ldr	r1, [r7, #0]
 8011b00:	6878      	ldr	r0, [r7, #4]
 8011b02:	4798      	blx	r3
 8011b04:	4603      	mov	r3, r0
 8011b06:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011b08:	683b      	ldr	r3, [r7, #0]
 8011b0a:	88db      	ldrh	r3, [r3, #6]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d110      	bne.n	8011b32 <USBD_StdItfReq+0x7a>
 8011b10:	7bfb      	ldrb	r3, [r7, #15]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d10d      	bne.n	8011b32 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011b16:	6878      	ldr	r0, [r7, #4]
 8011b18:	f000 fd73 	bl	8012602 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011b1c:	e009      	b.n	8011b32 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8011b1e:	6839      	ldr	r1, [r7, #0]
 8011b20:	6878      	ldr	r0, [r7, #4]
 8011b22:	f000 fca3 	bl	801246c <USBD_CtlError>
          break;
 8011b26:	e004      	b.n	8011b32 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8011b28:	6839      	ldr	r1, [r7, #0]
 8011b2a:	6878      	ldr	r0, [r7, #4]
 8011b2c:	f000 fc9e 	bl	801246c <USBD_CtlError>
          break;
 8011b30:	e000      	b.n	8011b34 <USBD_StdItfReq+0x7c>
          break;
 8011b32:	bf00      	nop
      }
      break;
 8011b34:	e004      	b.n	8011b40 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8011b36:	6839      	ldr	r1, [r7, #0]
 8011b38:	6878      	ldr	r0, [r7, #4]
 8011b3a:	f000 fc97 	bl	801246c <USBD_CtlError>
      break;
 8011b3e:	bf00      	nop
  }

  return ret;
 8011b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b42:	4618      	mov	r0, r3
 8011b44:	3710      	adds	r7, #16
 8011b46:	46bd      	mov	sp, r7
 8011b48:	bd80      	pop	{r7, pc}

08011b4a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b4a:	b580      	push	{r7, lr}
 8011b4c:	b084      	sub	sp, #16
 8011b4e:	af00      	add	r7, sp, #0
 8011b50:	6078      	str	r0, [r7, #4]
 8011b52:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011b54:	2300      	movs	r3, #0
 8011b56:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8011b58:	683b      	ldr	r3, [r7, #0]
 8011b5a:	889b      	ldrh	r3, [r3, #4]
 8011b5c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011b5e:	683b      	ldr	r3, [r7, #0]
 8011b60:	781b      	ldrb	r3, [r3, #0]
 8011b62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011b66:	2b40      	cmp	r3, #64	; 0x40
 8011b68:	d007      	beq.n	8011b7a <USBD_StdEPReq+0x30>
 8011b6a:	2b40      	cmp	r3, #64	; 0x40
 8011b6c:	f200 8145 	bhi.w	8011dfa <USBD_StdEPReq+0x2b0>
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d00c      	beq.n	8011b8e <USBD_StdEPReq+0x44>
 8011b74:	2b20      	cmp	r3, #32
 8011b76:	f040 8140 	bne.w	8011dfa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b80:	689b      	ldr	r3, [r3, #8]
 8011b82:	6839      	ldr	r1, [r7, #0]
 8011b84:	6878      	ldr	r0, [r7, #4]
 8011b86:	4798      	blx	r3
 8011b88:	4603      	mov	r3, r0
 8011b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8011b8c:	e13a      	b.n	8011e04 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011b8e:	683b      	ldr	r3, [r7, #0]
 8011b90:	785b      	ldrb	r3, [r3, #1]
 8011b92:	2b03      	cmp	r3, #3
 8011b94:	d007      	beq.n	8011ba6 <USBD_StdEPReq+0x5c>
 8011b96:	2b03      	cmp	r3, #3
 8011b98:	f300 8129 	bgt.w	8011dee <USBD_StdEPReq+0x2a4>
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d07f      	beq.n	8011ca0 <USBD_StdEPReq+0x156>
 8011ba0:	2b01      	cmp	r3, #1
 8011ba2:	d03c      	beq.n	8011c1e <USBD_StdEPReq+0xd4>
 8011ba4:	e123      	b.n	8011dee <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011bac:	b2db      	uxtb	r3, r3
 8011bae:	2b02      	cmp	r3, #2
 8011bb0:	d002      	beq.n	8011bb8 <USBD_StdEPReq+0x6e>
 8011bb2:	2b03      	cmp	r3, #3
 8011bb4:	d016      	beq.n	8011be4 <USBD_StdEPReq+0x9a>
 8011bb6:	e02c      	b.n	8011c12 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011bb8:	7bbb      	ldrb	r3, [r7, #14]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d00d      	beq.n	8011bda <USBD_StdEPReq+0x90>
 8011bbe:	7bbb      	ldrb	r3, [r7, #14]
 8011bc0:	2b80      	cmp	r3, #128	; 0x80
 8011bc2:	d00a      	beq.n	8011bda <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011bc4:	7bbb      	ldrb	r3, [r7, #14]
 8011bc6:	4619      	mov	r1, r3
 8011bc8:	6878      	ldr	r0, [r7, #4]
 8011bca:	f007 fb7f 	bl	80192cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011bce:	2180      	movs	r1, #128	; 0x80
 8011bd0:	6878      	ldr	r0, [r7, #4]
 8011bd2:	f007 fb7b 	bl	80192cc <USBD_LL_StallEP>
 8011bd6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011bd8:	e020      	b.n	8011c1c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8011bda:	6839      	ldr	r1, [r7, #0]
 8011bdc:	6878      	ldr	r0, [r7, #4]
 8011bde:	f000 fc45 	bl	801246c <USBD_CtlError>
              break;
 8011be2:	e01b      	b.n	8011c1c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011be4:	683b      	ldr	r3, [r7, #0]
 8011be6:	885b      	ldrh	r3, [r3, #2]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d10e      	bne.n	8011c0a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011bec:	7bbb      	ldrb	r3, [r7, #14]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d00b      	beq.n	8011c0a <USBD_StdEPReq+0xc0>
 8011bf2:	7bbb      	ldrb	r3, [r7, #14]
 8011bf4:	2b80      	cmp	r3, #128	; 0x80
 8011bf6:	d008      	beq.n	8011c0a <USBD_StdEPReq+0xc0>
 8011bf8:	683b      	ldr	r3, [r7, #0]
 8011bfa:	88db      	ldrh	r3, [r3, #6]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d104      	bne.n	8011c0a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011c00:	7bbb      	ldrb	r3, [r7, #14]
 8011c02:	4619      	mov	r1, r3
 8011c04:	6878      	ldr	r0, [r7, #4]
 8011c06:	f007 fb61 	bl	80192cc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011c0a:	6878      	ldr	r0, [r7, #4]
 8011c0c:	f000 fcf9 	bl	8012602 <USBD_CtlSendStatus>

              break;
 8011c10:	e004      	b.n	8011c1c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8011c12:	6839      	ldr	r1, [r7, #0]
 8011c14:	6878      	ldr	r0, [r7, #4]
 8011c16:	f000 fc29 	bl	801246c <USBD_CtlError>
              break;
 8011c1a:	bf00      	nop
          }
          break;
 8011c1c:	e0ec      	b.n	8011df8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011c24:	b2db      	uxtb	r3, r3
 8011c26:	2b02      	cmp	r3, #2
 8011c28:	d002      	beq.n	8011c30 <USBD_StdEPReq+0xe6>
 8011c2a:	2b03      	cmp	r3, #3
 8011c2c:	d016      	beq.n	8011c5c <USBD_StdEPReq+0x112>
 8011c2e:	e030      	b.n	8011c92 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011c30:	7bbb      	ldrb	r3, [r7, #14]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d00d      	beq.n	8011c52 <USBD_StdEPReq+0x108>
 8011c36:	7bbb      	ldrb	r3, [r7, #14]
 8011c38:	2b80      	cmp	r3, #128	; 0x80
 8011c3a:	d00a      	beq.n	8011c52 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011c3c:	7bbb      	ldrb	r3, [r7, #14]
 8011c3e:	4619      	mov	r1, r3
 8011c40:	6878      	ldr	r0, [r7, #4]
 8011c42:	f007 fb43 	bl	80192cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011c46:	2180      	movs	r1, #128	; 0x80
 8011c48:	6878      	ldr	r0, [r7, #4]
 8011c4a:	f007 fb3f 	bl	80192cc <USBD_LL_StallEP>
 8011c4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011c50:	e025      	b.n	8011c9e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8011c52:	6839      	ldr	r1, [r7, #0]
 8011c54:	6878      	ldr	r0, [r7, #4]
 8011c56:	f000 fc09 	bl	801246c <USBD_CtlError>
              break;
 8011c5a:	e020      	b.n	8011c9e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011c5c:	683b      	ldr	r3, [r7, #0]
 8011c5e:	885b      	ldrh	r3, [r3, #2]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d11b      	bne.n	8011c9c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011c64:	7bbb      	ldrb	r3, [r7, #14]
 8011c66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d004      	beq.n	8011c78 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011c6e:	7bbb      	ldrb	r3, [r7, #14]
 8011c70:	4619      	mov	r1, r3
 8011c72:	6878      	ldr	r0, [r7, #4]
 8011c74:	f007 fb49 	bl	801930a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011c78:	6878      	ldr	r0, [r7, #4]
 8011c7a:	f000 fcc2 	bl	8012602 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c84:	689b      	ldr	r3, [r3, #8]
 8011c86:	6839      	ldr	r1, [r7, #0]
 8011c88:	6878      	ldr	r0, [r7, #4]
 8011c8a:	4798      	blx	r3
 8011c8c:	4603      	mov	r3, r0
 8011c8e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8011c90:	e004      	b.n	8011c9c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8011c92:	6839      	ldr	r1, [r7, #0]
 8011c94:	6878      	ldr	r0, [r7, #4]
 8011c96:	f000 fbe9 	bl	801246c <USBD_CtlError>
              break;
 8011c9a:	e000      	b.n	8011c9e <USBD_StdEPReq+0x154>
              break;
 8011c9c:	bf00      	nop
          }
          break;
 8011c9e:	e0ab      	b.n	8011df8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ca6:	b2db      	uxtb	r3, r3
 8011ca8:	2b02      	cmp	r3, #2
 8011caa:	d002      	beq.n	8011cb2 <USBD_StdEPReq+0x168>
 8011cac:	2b03      	cmp	r3, #3
 8011cae:	d032      	beq.n	8011d16 <USBD_StdEPReq+0x1cc>
 8011cb0:	e097      	b.n	8011de2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011cb2:	7bbb      	ldrb	r3, [r7, #14]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d007      	beq.n	8011cc8 <USBD_StdEPReq+0x17e>
 8011cb8:	7bbb      	ldrb	r3, [r7, #14]
 8011cba:	2b80      	cmp	r3, #128	; 0x80
 8011cbc:	d004      	beq.n	8011cc8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8011cbe:	6839      	ldr	r1, [r7, #0]
 8011cc0:	6878      	ldr	r0, [r7, #4]
 8011cc2:	f000 fbd3 	bl	801246c <USBD_CtlError>
                break;
 8011cc6:	e091      	b.n	8011dec <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011cc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	da0b      	bge.n	8011ce8 <USBD_StdEPReq+0x19e>
 8011cd0:	7bbb      	ldrb	r3, [r7, #14]
 8011cd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011cd6:	4613      	mov	r3, r2
 8011cd8:	009b      	lsls	r3, r3, #2
 8011cda:	4413      	add	r3, r2
 8011cdc:	009b      	lsls	r3, r3, #2
 8011cde:	3310      	adds	r3, #16
 8011ce0:	687a      	ldr	r2, [r7, #4]
 8011ce2:	4413      	add	r3, r2
 8011ce4:	3304      	adds	r3, #4
 8011ce6:	e00b      	b.n	8011d00 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011ce8:	7bbb      	ldrb	r3, [r7, #14]
 8011cea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011cee:	4613      	mov	r3, r2
 8011cf0:	009b      	lsls	r3, r3, #2
 8011cf2:	4413      	add	r3, r2
 8011cf4:	009b      	lsls	r3, r3, #2
 8011cf6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011cfa:	687a      	ldr	r2, [r7, #4]
 8011cfc:	4413      	add	r3, r2
 8011cfe:	3304      	adds	r3, #4
 8011d00:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011d02:	68bb      	ldr	r3, [r7, #8]
 8011d04:	2200      	movs	r2, #0
 8011d06:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011d08:	68bb      	ldr	r3, [r7, #8]
 8011d0a:	2202      	movs	r2, #2
 8011d0c:	4619      	mov	r1, r3
 8011d0e:	6878      	ldr	r0, [r7, #4]
 8011d10:	f000 fc1d 	bl	801254e <USBD_CtlSendData>
              break;
 8011d14:	e06a      	b.n	8011dec <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011d16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	da11      	bge.n	8011d42 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011d1e:	7bbb      	ldrb	r3, [r7, #14]
 8011d20:	f003 020f 	and.w	r2, r3, #15
 8011d24:	6879      	ldr	r1, [r7, #4]
 8011d26:	4613      	mov	r3, r2
 8011d28:	009b      	lsls	r3, r3, #2
 8011d2a:	4413      	add	r3, r2
 8011d2c:	009b      	lsls	r3, r3, #2
 8011d2e:	440b      	add	r3, r1
 8011d30:	3324      	adds	r3, #36	; 0x24
 8011d32:	881b      	ldrh	r3, [r3, #0]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d117      	bne.n	8011d68 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8011d38:	6839      	ldr	r1, [r7, #0]
 8011d3a:	6878      	ldr	r0, [r7, #4]
 8011d3c:	f000 fb96 	bl	801246c <USBD_CtlError>
                  break;
 8011d40:	e054      	b.n	8011dec <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011d42:	7bbb      	ldrb	r3, [r7, #14]
 8011d44:	f003 020f 	and.w	r2, r3, #15
 8011d48:	6879      	ldr	r1, [r7, #4]
 8011d4a:	4613      	mov	r3, r2
 8011d4c:	009b      	lsls	r3, r3, #2
 8011d4e:	4413      	add	r3, r2
 8011d50:	009b      	lsls	r3, r3, #2
 8011d52:	440b      	add	r3, r1
 8011d54:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011d58:	881b      	ldrh	r3, [r3, #0]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d104      	bne.n	8011d68 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8011d5e:	6839      	ldr	r1, [r7, #0]
 8011d60:	6878      	ldr	r0, [r7, #4]
 8011d62:	f000 fb83 	bl	801246c <USBD_CtlError>
                  break;
 8011d66:	e041      	b.n	8011dec <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011d68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	da0b      	bge.n	8011d88 <USBD_StdEPReq+0x23e>
 8011d70:	7bbb      	ldrb	r3, [r7, #14]
 8011d72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011d76:	4613      	mov	r3, r2
 8011d78:	009b      	lsls	r3, r3, #2
 8011d7a:	4413      	add	r3, r2
 8011d7c:	009b      	lsls	r3, r3, #2
 8011d7e:	3310      	adds	r3, #16
 8011d80:	687a      	ldr	r2, [r7, #4]
 8011d82:	4413      	add	r3, r2
 8011d84:	3304      	adds	r3, #4
 8011d86:	e00b      	b.n	8011da0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011d88:	7bbb      	ldrb	r3, [r7, #14]
 8011d8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011d8e:	4613      	mov	r3, r2
 8011d90:	009b      	lsls	r3, r3, #2
 8011d92:	4413      	add	r3, r2
 8011d94:	009b      	lsls	r3, r3, #2
 8011d96:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011d9a:	687a      	ldr	r2, [r7, #4]
 8011d9c:	4413      	add	r3, r2
 8011d9e:	3304      	adds	r3, #4
 8011da0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011da2:	7bbb      	ldrb	r3, [r7, #14]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d002      	beq.n	8011dae <USBD_StdEPReq+0x264>
 8011da8:	7bbb      	ldrb	r3, [r7, #14]
 8011daa:	2b80      	cmp	r3, #128	; 0x80
 8011dac:	d103      	bne.n	8011db6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8011dae:	68bb      	ldr	r3, [r7, #8]
 8011db0:	2200      	movs	r2, #0
 8011db2:	601a      	str	r2, [r3, #0]
 8011db4:	e00e      	b.n	8011dd4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011db6:	7bbb      	ldrb	r3, [r7, #14]
 8011db8:	4619      	mov	r1, r3
 8011dba:	6878      	ldr	r0, [r7, #4]
 8011dbc:	f007 fac4 	bl	8019348 <USBD_LL_IsStallEP>
 8011dc0:	4603      	mov	r3, r0
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d003      	beq.n	8011dce <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8011dc6:	68bb      	ldr	r3, [r7, #8]
 8011dc8:	2201      	movs	r2, #1
 8011dca:	601a      	str	r2, [r3, #0]
 8011dcc:	e002      	b.n	8011dd4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8011dce:	68bb      	ldr	r3, [r7, #8]
 8011dd0:	2200      	movs	r2, #0
 8011dd2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011dd4:	68bb      	ldr	r3, [r7, #8]
 8011dd6:	2202      	movs	r2, #2
 8011dd8:	4619      	mov	r1, r3
 8011dda:	6878      	ldr	r0, [r7, #4]
 8011ddc:	f000 fbb7 	bl	801254e <USBD_CtlSendData>
              break;
 8011de0:	e004      	b.n	8011dec <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8011de2:	6839      	ldr	r1, [r7, #0]
 8011de4:	6878      	ldr	r0, [r7, #4]
 8011de6:	f000 fb41 	bl	801246c <USBD_CtlError>
              break;
 8011dea:	bf00      	nop
          }
          break;
 8011dec:	e004      	b.n	8011df8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8011dee:	6839      	ldr	r1, [r7, #0]
 8011df0:	6878      	ldr	r0, [r7, #4]
 8011df2:	f000 fb3b 	bl	801246c <USBD_CtlError>
          break;
 8011df6:	bf00      	nop
      }
      break;
 8011df8:	e004      	b.n	8011e04 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8011dfa:	6839      	ldr	r1, [r7, #0]
 8011dfc:	6878      	ldr	r0, [r7, #4]
 8011dfe:	f000 fb35 	bl	801246c <USBD_CtlError>
      break;
 8011e02:	bf00      	nop
  }

  return ret;
 8011e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e06:	4618      	mov	r0, r3
 8011e08:	3710      	adds	r7, #16
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	bd80      	pop	{r7, pc}
	...

08011e10 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b084      	sub	sp, #16
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	6078      	str	r0, [r7, #4]
 8011e18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011e1e:	2300      	movs	r3, #0
 8011e20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011e22:	2300      	movs	r3, #0
 8011e24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011e26:	683b      	ldr	r3, [r7, #0]
 8011e28:	885b      	ldrh	r3, [r3, #2]
 8011e2a:	0a1b      	lsrs	r3, r3, #8
 8011e2c:	b29b      	uxth	r3, r3
 8011e2e:	3b01      	subs	r3, #1
 8011e30:	2b06      	cmp	r3, #6
 8011e32:	f200 8128 	bhi.w	8012086 <USBD_GetDescriptor+0x276>
 8011e36:	a201      	add	r2, pc, #4	; (adr r2, 8011e3c <USBD_GetDescriptor+0x2c>)
 8011e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e3c:	08011e59 	.word	0x08011e59
 8011e40:	08011e71 	.word	0x08011e71
 8011e44:	08011eb1 	.word	0x08011eb1
 8011e48:	08012087 	.word	0x08012087
 8011e4c:	08012087 	.word	0x08012087
 8011e50:	08012027 	.word	0x08012027
 8011e54:	08012053 	.word	0x08012053
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	687a      	ldr	r2, [r7, #4]
 8011e62:	7c12      	ldrb	r2, [r2, #16]
 8011e64:	f107 0108 	add.w	r1, r7, #8
 8011e68:	4610      	mov	r0, r2
 8011e6a:	4798      	blx	r3
 8011e6c:	60f8      	str	r0, [r7, #12]
      break;
 8011e6e:	e112      	b.n	8012096 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	7c1b      	ldrb	r3, [r3, #16]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d10d      	bne.n	8011e94 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e80:	f107 0208 	add.w	r2, r7, #8
 8011e84:	4610      	mov	r0, r2
 8011e86:	4798      	blx	r3
 8011e88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	3301      	adds	r3, #1
 8011e8e:	2202      	movs	r2, #2
 8011e90:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011e92:	e100      	b.n	8012096 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e9c:	f107 0208 	add.w	r2, r7, #8
 8011ea0:	4610      	mov	r0, r2
 8011ea2:	4798      	blx	r3
 8011ea4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	3301      	adds	r3, #1
 8011eaa:	2202      	movs	r2, #2
 8011eac:	701a      	strb	r2, [r3, #0]
      break;
 8011eae:	e0f2      	b.n	8012096 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011eb0:	683b      	ldr	r3, [r7, #0]
 8011eb2:	885b      	ldrh	r3, [r3, #2]
 8011eb4:	b2db      	uxtb	r3, r3
 8011eb6:	2b05      	cmp	r3, #5
 8011eb8:	f200 80ac 	bhi.w	8012014 <USBD_GetDescriptor+0x204>
 8011ebc:	a201      	add	r2, pc, #4	; (adr r2, 8011ec4 <USBD_GetDescriptor+0xb4>)
 8011ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ec2:	bf00      	nop
 8011ec4:	08011edd 	.word	0x08011edd
 8011ec8:	08011f11 	.word	0x08011f11
 8011ecc:	08011f45 	.word	0x08011f45
 8011ed0:	08011f79 	.word	0x08011f79
 8011ed4:	08011fad 	.word	0x08011fad
 8011ed8:	08011fe1 	.word	0x08011fe1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ee2:	685b      	ldr	r3, [r3, #4]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d00b      	beq.n	8011f00 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011eee:	685b      	ldr	r3, [r3, #4]
 8011ef0:	687a      	ldr	r2, [r7, #4]
 8011ef2:	7c12      	ldrb	r2, [r2, #16]
 8011ef4:	f107 0108 	add.w	r1, r7, #8
 8011ef8:	4610      	mov	r0, r2
 8011efa:	4798      	blx	r3
 8011efc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011efe:	e091      	b.n	8012024 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011f00:	6839      	ldr	r1, [r7, #0]
 8011f02:	6878      	ldr	r0, [r7, #4]
 8011f04:	f000 fab2 	bl	801246c <USBD_CtlError>
            err++;
 8011f08:	7afb      	ldrb	r3, [r7, #11]
 8011f0a:	3301      	adds	r3, #1
 8011f0c:	72fb      	strb	r3, [r7, #11]
          break;
 8011f0e:	e089      	b.n	8012024 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f16:	689b      	ldr	r3, [r3, #8]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d00b      	beq.n	8011f34 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f22:	689b      	ldr	r3, [r3, #8]
 8011f24:	687a      	ldr	r2, [r7, #4]
 8011f26:	7c12      	ldrb	r2, [r2, #16]
 8011f28:	f107 0108 	add.w	r1, r7, #8
 8011f2c:	4610      	mov	r0, r2
 8011f2e:	4798      	blx	r3
 8011f30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011f32:	e077      	b.n	8012024 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011f34:	6839      	ldr	r1, [r7, #0]
 8011f36:	6878      	ldr	r0, [r7, #4]
 8011f38:	f000 fa98 	bl	801246c <USBD_CtlError>
            err++;
 8011f3c:	7afb      	ldrb	r3, [r7, #11]
 8011f3e:	3301      	adds	r3, #1
 8011f40:	72fb      	strb	r3, [r7, #11]
          break;
 8011f42:	e06f      	b.n	8012024 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f4a:	68db      	ldr	r3, [r3, #12]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d00b      	beq.n	8011f68 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f56:	68db      	ldr	r3, [r3, #12]
 8011f58:	687a      	ldr	r2, [r7, #4]
 8011f5a:	7c12      	ldrb	r2, [r2, #16]
 8011f5c:	f107 0108 	add.w	r1, r7, #8
 8011f60:	4610      	mov	r0, r2
 8011f62:	4798      	blx	r3
 8011f64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011f66:	e05d      	b.n	8012024 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011f68:	6839      	ldr	r1, [r7, #0]
 8011f6a:	6878      	ldr	r0, [r7, #4]
 8011f6c:	f000 fa7e 	bl	801246c <USBD_CtlError>
            err++;
 8011f70:	7afb      	ldrb	r3, [r7, #11]
 8011f72:	3301      	adds	r3, #1
 8011f74:	72fb      	strb	r3, [r7, #11]
          break;
 8011f76:	e055      	b.n	8012024 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f7e:	691b      	ldr	r3, [r3, #16]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d00b      	beq.n	8011f9c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f8a:	691b      	ldr	r3, [r3, #16]
 8011f8c:	687a      	ldr	r2, [r7, #4]
 8011f8e:	7c12      	ldrb	r2, [r2, #16]
 8011f90:	f107 0108 	add.w	r1, r7, #8
 8011f94:	4610      	mov	r0, r2
 8011f96:	4798      	blx	r3
 8011f98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011f9a:	e043      	b.n	8012024 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011f9c:	6839      	ldr	r1, [r7, #0]
 8011f9e:	6878      	ldr	r0, [r7, #4]
 8011fa0:	f000 fa64 	bl	801246c <USBD_CtlError>
            err++;
 8011fa4:	7afb      	ldrb	r3, [r7, #11]
 8011fa6:	3301      	adds	r3, #1
 8011fa8:	72fb      	strb	r3, [r7, #11]
          break;
 8011faa:	e03b      	b.n	8012024 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011fb2:	695b      	ldr	r3, [r3, #20]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d00b      	beq.n	8011fd0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011fbe:	695b      	ldr	r3, [r3, #20]
 8011fc0:	687a      	ldr	r2, [r7, #4]
 8011fc2:	7c12      	ldrb	r2, [r2, #16]
 8011fc4:	f107 0108 	add.w	r1, r7, #8
 8011fc8:	4610      	mov	r0, r2
 8011fca:	4798      	blx	r3
 8011fcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011fce:	e029      	b.n	8012024 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011fd0:	6839      	ldr	r1, [r7, #0]
 8011fd2:	6878      	ldr	r0, [r7, #4]
 8011fd4:	f000 fa4a 	bl	801246c <USBD_CtlError>
            err++;
 8011fd8:	7afb      	ldrb	r3, [r7, #11]
 8011fda:	3301      	adds	r3, #1
 8011fdc:	72fb      	strb	r3, [r7, #11]
          break;
 8011fde:	e021      	b.n	8012024 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011fe6:	699b      	ldr	r3, [r3, #24]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d00b      	beq.n	8012004 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ff2:	699b      	ldr	r3, [r3, #24]
 8011ff4:	687a      	ldr	r2, [r7, #4]
 8011ff6:	7c12      	ldrb	r2, [r2, #16]
 8011ff8:	f107 0108 	add.w	r1, r7, #8
 8011ffc:	4610      	mov	r0, r2
 8011ffe:	4798      	blx	r3
 8012000:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012002:	e00f      	b.n	8012024 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012004:	6839      	ldr	r1, [r7, #0]
 8012006:	6878      	ldr	r0, [r7, #4]
 8012008:	f000 fa30 	bl	801246c <USBD_CtlError>
            err++;
 801200c:	7afb      	ldrb	r3, [r7, #11]
 801200e:	3301      	adds	r3, #1
 8012010:	72fb      	strb	r3, [r7, #11]
          break;
 8012012:	e007      	b.n	8012024 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012014:	6839      	ldr	r1, [r7, #0]
 8012016:	6878      	ldr	r0, [r7, #4]
 8012018:	f000 fa28 	bl	801246c <USBD_CtlError>
          err++;
 801201c:	7afb      	ldrb	r3, [r7, #11]
 801201e:	3301      	adds	r3, #1
 8012020:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8012022:	bf00      	nop
      }
      break;
 8012024:	e037      	b.n	8012096 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	7c1b      	ldrb	r3, [r3, #16]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d109      	bne.n	8012042 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012036:	f107 0208 	add.w	r2, r7, #8
 801203a:	4610      	mov	r0, r2
 801203c:	4798      	blx	r3
 801203e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012040:	e029      	b.n	8012096 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8012042:	6839      	ldr	r1, [r7, #0]
 8012044:	6878      	ldr	r0, [r7, #4]
 8012046:	f000 fa11 	bl	801246c <USBD_CtlError>
        err++;
 801204a:	7afb      	ldrb	r3, [r7, #11]
 801204c:	3301      	adds	r3, #1
 801204e:	72fb      	strb	r3, [r7, #11]
      break;
 8012050:	e021      	b.n	8012096 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	7c1b      	ldrb	r3, [r3, #16]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d10d      	bne.n	8012076 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012062:	f107 0208 	add.w	r2, r7, #8
 8012066:	4610      	mov	r0, r2
 8012068:	4798      	blx	r3
 801206a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	3301      	adds	r3, #1
 8012070:	2207      	movs	r2, #7
 8012072:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012074:	e00f      	b.n	8012096 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8012076:	6839      	ldr	r1, [r7, #0]
 8012078:	6878      	ldr	r0, [r7, #4]
 801207a:	f000 f9f7 	bl	801246c <USBD_CtlError>
        err++;
 801207e:	7afb      	ldrb	r3, [r7, #11]
 8012080:	3301      	adds	r3, #1
 8012082:	72fb      	strb	r3, [r7, #11]
      break;
 8012084:	e007      	b.n	8012096 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8012086:	6839      	ldr	r1, [r7, #0]
 8012088:	6878      	ldr	r0, [r7, #4]
 801208a:	f000 f9ef 	bl	801246c <USBD_CtlError>
      err++;
 801208e:	7afb      	ldrb	r3, [r7, #11]
 8012090:	3301      	adds	r3, #1
 8012092:	72fb      	strb	r3, [r7, #11]
      break;
 8012094:	bf00      	nop
  }

  if (err != 0U)
 8012096:	7afb      	ldrb	r3, [r7, #11]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d11e      	bne.n	80120da <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 801209c:	683b      	ldr	r3, [r7, #0]
 801209e:	88db      	ldrh	r3, [r3, #6]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d016      	beq.n	80120d2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80120a4:	893b      	ldrh	r3, [r7, #8]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d00e      	beq.n	80120c8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80120aa:	683b      	ldr	r3, [r7, #0]
 80120ac:	88da      	ldrh	r2, [r3, #6]
 80120ae:	893b      	ldrh	r3, [r7, #8]
 80120b0:	4293      	cmp	r3, r2
 80120b2:	bf28      	it	cs
 80120b4:	4613      	movcs	r3, r2
 80120b6:	b29b      	uxth	r3, r3
 80120b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80120ba:	893b      	ldrh	r3, [r7, #8]
 80120bc:	461a      	mov	r2, r3
 80120be:	68f9      	ldr	r1, [r7, #12]
 80120c0:	6878      	ldr	r0, [r7, #4]
 80120c2:	f000 fa44 	bl	801254e <USBD_CtlSendData>
 80120c6:	e009      	b.n	80120dc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80120c8:	6839      	ldr	r1, [r7, #0]
 80120ca:	6878      	ldr	r0, [r7, #4]
 80120cc:	f000 f9ce 	bl	801246c <USBD_CtlError>
 80120d0:	e004      	b.n	80120dc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80120d2:	6878      	ldr	r0, [r7, #4]
 80120d4:	f000 fa95 	bl	8012602 <USBD_CtlSendStatus>
 80120d8:	e000      	b.n	80120dc <USBD_GetDescriptor+0x2cc>
    return;
 80120da:	bf00      	nop
  }
}
 80120dc:	3710      	adds	r7, #16
 80120de:	46bd      	mov	sp, r7
 80120e0:	bd80      	pop	{r7, pc}
 80120e2:	bf00      	nop

080120e4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b084      	sub	sp, #16
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
 80120ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80120ee:	683b      	ldr	r3, [r7, #0]
 80120f0:	889b      	ldrh	r3, [r3, #4]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d131      	bne.n	801215a <USBD_SetAddress+0x76>
 80120f6:	683b      	ldr	r3, [r7, #0]
 80120f8:	88db      	ldrh	r3, [r3, #6]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d12d      	bne.n	801215a <USBD_SetAddress+0x76>
 80120fe:	683b      	ldr	r3, [r7, #0]
 8012100:	885b      	ldrh	r3, [r3, #2]
 8012102:	2b7f      	cmp	r3, #127	; 0x7f
 8012104:	d829      	bhi.n	801215a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012106:	683b      	ldr	r3, [r7, #0]
 8012108:	885b      	ldrh	r3, [r3, #2]
 801210a:	b2db      	uxtb	r3, r3
 801210c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012110:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012118:	b2db      	uxtb	r3, r3
 801211a:	2b03      	cmp	r3, #3
 801211c:	d104      	bne.n	8012128 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801211e:	6839      	ldr	r1, [r7, #0]
 8012120:	6878      	ldr	r0, [r7, #4]
 8012122:	f000 f9a3 	bl	801246c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012126:	e01d      	b.n	8012164 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	7bfa      	ldrb	r2, [r7, #15]
 801212c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012130:	7bfb      	ldrb	r3, [r7, #15]
 8012132:	4619      	mov	r1, r3
 8012134:	6878      	ldr	r0, [r7, #4]
 8012136:	f007 f933 	bl	80193a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801213a:	6878      	ldr	r0, [r7, #4]
 801213c:	f000 fa61 	bl	8012602 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012140:	7bfb      	ldrb	r3, [r7, #15]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d004      	beq.n	8012150 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	2202      	movs	r2, #2
 801214a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801214e:	e009      	b.n	8012164 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	2201      	movs	r2, #1
 8012154:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012158:	e004      	b.n	8012164 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801215a:	6839      	ldr	r1, [r7, #0]
 801215c:	6878      	ldr	r0, [r7, #4]
 801215e:	f000 f985 	bl	801246c <USBD_CtlError>
  }
}
 8012162:	bf00      	nop
 8012164:	bf00      	nop
 8012166:	3710      	adds	r7, #16
 8012168:	46bd      	mov	sp, r7
 801216a:	bd80      	pop	{r7, pc}

0801216c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801216c:	b580      	push	{r7, lr}
 801216e:	b084      	sub	sp, #16
 8012170:	af00      	add	r7, sp, #0
 8012172:	6078      	str	r0, [r7, #4]
 8012174:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012176:	2300      	movs	r3, #0
 8012178:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801217a:	683b      	ldr	r3, [r7, #0]
 801217c:	885b      	ldrh	r3, [r3, #2]
 801217e:	b2da      	uxtb	r2, r3
 8012180:	4b4c      	ldr	r3, [pc, #304]	; (80122b4 <USBD_SetConfig+0x148>)
 8012182:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012184:	4b4b      	ldr	r3, [pc, #300]	; (80122b4 <USBD_SetConfig+0x148>)
 8012186:	781b      	ldrb	r3, [r3, #0]
 8012188:	2b01      	cmp	r3, #1
 801218a:	d905      	bls.n	8012198 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801218c:	6839      	ldr	r1, [r7, #0]
 801218e:	6878      	ldr	r0, [r7, #4]
 8012190:	f000 f96c 	bl	801246c <USBD_CtlError>
    return USBD_FAIL;
 8012194:	2303      	movs	r3, #3
 8012196:	e088      	b.n	80122aa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801219e:	b2db      	uxtb	r3, r3
 80121a0:	2b02      	cmp	r3, #2
 80121a2:	d002      	beq.n	80121aa <USBD_SetConfig+0x3e>
 80121a4:	2b03      	cmp	r3, #3
 80121a6:	d025      	beq.n	80121f4 <USBD_SetConfig+0x88>
 80121a8:	e071      	b.n	801228e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80121aa:	4b42      	ldr	r3, [pc, #264]	; (80122b4 <USBD_SetConfig+0x148>)
 80121ac:	781b      	ldrb	r3, [r3, #0]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d01c      	beq.n	80121ec <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80121b2:	4b40      	ldr	r3, [pc, #256]	; (80122b4 <USBD_SetConfig+0x148>)
 80121b4:	781b      	ldrb	r3, [r3, #0]
 80121b6:	461a      	mov	r2, r3
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80121bc:	4b3d      	ldr	r3, [pc, #244]	; (80122b4 <USBD_SetConfig+0x148>)
 80121be:	781b      	ldrb	r3, [r3, #0]
 80121c0:	4619      	mov	r1, r3
 80121c2:	6878      	ldr	r0, [r7, #4]
 80121c4:	f7ff f948 	bl	8011458 <USBD_SetClassConfig>
 80121c8:	4603      	mov	r3, r0
 80121ca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80121cc:	7bfb      	ldrb	r3, [r7, #15]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d004      	beq.n	80121dc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80121d2:	6839      	ldr	r1, [r7, #0]
 80121d4:	6878      	ldr	r0, [r7, #4]
 80121d6:	f000 f949 	bl	801246c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80121da:	e065      	b.n	80122a8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80121dc:	6878      	ldr	r0, [r7, #4]
 80121de:	f000 fa10 	bl	8012602 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	2203      	movs	r2, #3
 80121e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80121ea:	e05d      	b.n	80122a8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80121ec:	6878      	ldr	r0, [r7, #4]
 80121ee:	f000 fa08 	bl	8012602 <USBD_CtlSendStatus>
      break;
 80121f2:	e059      	b.n	80122a8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80121f4:	4b2f      	ldr	r3, [pc, #188]	; (80122b4 <USBD_SetConfig+0x148>)
 80121f6:	781b      	ldrb	r3, [r3, #0]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d112      	bne.n	8012222 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	2202      	movs	r2, #2
 8012200:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8012204:	4b2b      	ldr	r3, [pc, #172]	; (80122b4 <USBD_SetConfig+0x148>)
 8012206:	781b      	ldrb	r3, [r3, #0]
 8012208:	461a      	mov	r2, r3
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801220e:	4b29      	ldr	r3, [pc, #164]	; (80122b4 <USBD_SetConfig+0x148>)
 8012210:	781b      	ldrb	r3, [r3, #0]
 8012212:	4619      	mov	r1, r3
 8012214:	6878      	ldr	r0, [r7, #4]
 8012216:	f7ff f93b 	bl	8011490 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801221a:	6878      	ldr	r0, [r7, #4]
 801221c:	f000 f9f1 	bl	8012602 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012220:	e042      	b.n	80122a8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8012222:	4b24      	ldr	r3, [pc, #144]	; (80122b4 <USBD_SetConfig+0x148>)
 8012224:	781b      	ldrb	r3, [r3, #0]
 8012226:	461a      	mov	r2, r3
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	685b      	ldr	r3, [r3, #4]
 801222c:	429a      	cmp	r2, r3
 801222e:	d02a      	beq.n	8012286 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	685b      	ldr	r3, [r3, #4]
 8012234:	b2db      	uxtb	r3, r3
 8012236:	4619      	mov	r1, r3
 8012238:	6878      	ldr	r0, [r7, #4]
 801223a:	f7ff f929 	bl	8011490 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801223e:	4b1d      	ldr	r3, [pc, #116]	; (80122b4 <USBD_SetConfig+0x148>)
 8012240:	781b      	ldrb	r3, [r3, #0]
 8012242:	461a      	mov	r2, r3
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012248:	4b1a      	ldr	r3, [pc, #104]	; (80122b4 <USBD_SetConfig+0x148>)
 801224a:	781b      	ldrb	r3, [r3, #0]
 801224c:	4619      	mov	r1, r3
 801224e:	6878      	ldr	r0, [r7, #4]
 8012250:	f7ff f902 	bl	8011458 <USBD_SetClassConfig>
 8012254:	4603      	mov	r3, r0
 8012256:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012258:	7bfb      	ldrb	r3, [r7, #15]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d00f      	beq.n	801227e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801225e:	6839      	ldr	r1, [r7, #0]
 8012260:	6878      	ldr	r0, [r7, #4]
 8012262:	f000 f903 	bl	801246c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	685b      	ldr	r3, [r3, #4]
 801226a:	b2db      	uxtb	r3, r3
 801226c:	4619      	mov	r1, r3
 801226e:	6878      	ldr	r0, [r7, #4]
 8012270:	f7ff f90e 	bl	8011490 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	2202      	movs	r2, #2
 8012278:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801227c:	e014      	b.n	80122a8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801227e:	6878      	ldr	r0, [r7, #4]
 8012280:	f000 f9bf 	bl	8012602 <USBD_CtlSendStatus>
      break;
 8012284:	e010      	b.n	80122a8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012286:	6878      	ldr	r0, [r7, #4]
 8012288:	f000 f9bb 	bl	8012602 <USBD_CtlSendStatus>
      break;
 801228c:	e00c      	b.n	80122a8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801228e:	6839      	ldr	r1, [r7, #0]
 8012290:	6878      	ldr	r0, [r7, #4]
 8012292:	f000 f8eb 	bl	801246c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012296:	4b07      	ldr	r3, [pc, #28]	; (80122b4 <USBD_SetConfig+0x148>)
 8012298:	781b      	ldrb	r3, [r3, #0]
 801229a:	4619      	mov	r1, r3
 801229c:	6878      	ldr	r0, [r7, #4]
 801229e:	f7ff f8f7 	bl	8011490 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80122a2:	2303      	movs	r3, #3
 80122a4:	73fb      	strb	r3, [r7, #15]
      break;
 80122a6:	bf00      	nop
  }

  return ret;
 80122a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80122aa:	4618      	mov	r0, r3
 80122ac:	3710      	adds	r7, #16
 80122ae:	46bd      	mov	sp, r7
 80122b0:	bd80      	pop	{r7, pc}
 80122b2:	bf00      	nop
 80122b4:	20000841 	.word	0x20000841

080122b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122b8:	b580      	push	{r7, lr}
 80122ba:	b082      	sub	sp, #8
 80122bc:	af00      	add	r7, sp, #0
 80122be:	6078      	str	r0, [r7, #4]
 80122c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80122c2:	683b      	ldr	r3, [r7, #0]
 80122c4:	88db      	ldrh	r3, [r3, #6]
 80122c6:	2b01      	cmp	r3, #1
 80122c8:	d004      	beq.n	80122d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80122ca:	6839      	ldr	r1, [r7, #0]
 80122cc:	6878      	ldr	r0, [r7, #4]
 80122ce:	f000 f8cd 	bl	801246c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80122d2:	e023      	b.n	801231c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80122da:	b2db      	uxtb	r3, r3
 80122dc:	2b02      	cmp	r3, #2
 80122de:	dc02      	bgt.n	80122e6 <USBD_GetConfig+0x2e>
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	dc03      	bgt.n	80122ec <USBD_GetConfig+0x34>
 80122e4:	e015      	b.n	8012312 <USBD_GetConfig+0x5a>
 80122e6:	2b03      	cmp	r3, #3
 80122e8:	d00b      	beq.n	8012302 <USBD_GetConfig+0x4a>
 80122ea:	e012      	b.n	8012312 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	2200      	movs	r2, #0
 80122f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	3308      	adds	r3, #8
 80122f6:	2201      	movs	r2, #1
 80122f8:	4619      	mov	r1, r3
 80122fa:	6878      	ldr	r0, [r7, #4]
 80122fc:	f000 f927 	bl	801254e <USBD_CtlSendData>
        break;
 8012300:	e00c      	b.n	801231c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	3304      	adds	r3, #4
 8012306:	2201      	movs	r2, #1
 8012308:	4619      	mov	r1, r3
 801230a:	6878      	ldr	r0, [r7, #4]
 801230c:	f000 f91f 	bl	801254e <USBD_CtlSendData>
        break;
 8012310:	e004      	b.n	801231c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012312:	6839      	ldr	r1, [r7, #0]
 8012314:	6878      	ldr	r0, [r7, #4]
 8012316:	f000 f8a9 	bl	801246c <USBD_CtlError>
        break;
 801231a:	bf00      	nop
}
 801231c:	bf00      	nop
 801231e:	3708      	adds	r7, #8
 8012320:	46bd      	mov	sp, r7
 8012322:	bd80      	pop	{r7, pc}

08012324 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012324:	b580      	push	{r7, lr}
 8012326:	b082      	sub	sp, #8
 8012328:	af00      	add	r7, sp, #0
 801232a:	6078      	str	r0, [r7, #4]
 801232c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012334:	b2db      	uxtb	r3, r3
 8012336:	3b01      	subs	r3, #1
 8012338:	2b02      	cmp	r3, #2
 801233a:	d81e      	bhi.n	801237a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801233c:	683b      	ldr	r3, [r7, #0]
 801233e:	88db      	ldrh	r3, [r3, #6]
 8012340:	2b02      	cmp	r3, #2
 8012342:	d004      	beq.n	801234e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012344:	6839      	ldr	r1, [r7, #0]
 8012346:	6878      	ldr	r0, [r7, #4]
 8012348:	f000 f890 	bl	801246c <USBD_CtlError>
        break;
 801234c:	e01a      	b.n	8012384 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	2201      	movs	r2, #1
 8012352:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801235a:	2b00      	cmp	r3, #0
 801235c:	d005      	beq.n	801236a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	68db      	ldr	r3, [r3, #12]
 8012362:	f043 0202 	orr.w	r2, r3, #2
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	330c      	adds	r3, #12
 801236e:	2202      	movs	r2, #2
 8012370:	4619      	mov	r1, r3
 8012372:	6878      	ldr	r0, [r7, #4]
 8012374:	f000 f8eb 	bl	801254e <USBD_CtlSendData>
      break;
 8012378:	e004      	b.n	8012384 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801237a:	6839      	ldr	r1, [r7, #0]
 801237c:	6878      	ldr	r0, [r7, #4]
 801237e:	f000 f875 	bl	801246c <USBD_CtlError>
      break;
 8012382:	bf00      	nop
  }
}
 8012384:	bf00      	nop
 8012386:	3708      	adds	r7, #8
 8012388:	46bd      	mov	sp, r7
 801238a:	bd80      	pop	{r7, pc}

0801238c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801238c:	b580      	push	{r7, lr}
 801238e:	b082      	sub	sp, #8
 8012390:	af00      	add	r7, sp, #0
 8012392:	6078      	str	r0, [r7, #4]
 8012394:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012396:	683b      	ldr	r3, [r7, #0]
 8012398:	885b      	ldrh	r3, [r3, #2]
 801239a:	2b01      	cmp	r3, #1
 801239c:	d106      	bne.n	80123ac <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	2201      	movs	r2, #1
 80123a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80123a6:	6878      	ldr	r0, [r7, #4]
 80123a8:	f000 f92b 	bl	8012602 <USBD_CtlSendStatus>
  }
}
 80123ac:	bf00      	nop
 80123ae:	3708      	adds	r7, #8
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}

080123b4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b082      	sub	sp, #8
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
 80123bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80123c4:	b2db      	uxtb	r3, r3
 80123c6:	3b01      	subs	r3, #1
 80123c8:	2b02      	cmp	r3, #2
 80123ca:	d80b      	bhi.n	80123e4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80123cc:	683b      	ldr	r3, [r7, #0]
 80123ce:	885b      	ldrh	r3, [r3, #2]
 80123d0:	2b01      	cmp	r3, #1
 80123d2:	d10c      	bne.n	80123ee <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	2200      	movs	r2, #0
 80123d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80123dc:	6878      	ldr	r0, [r7, #4]
 80123de:	f000 f910 	bl	8012602 <USBD_CtlSendStatus>
      }
      break;
 80123e2:	e004      	b.n	80123ee <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80123e4:	6839      	ldr	r1, [r7, #0]
 80123e6:	6878      	ldr	r0, [r7, #4]
 80123e8:	f000 f840 	bl	801246c <USBD_CtlError>
      break;
 80123ec:	e000      	b.n	80123f0 <USBD_ClrFeature+0x3c>
      break;
 80123ee:	bf00      	nop
  }
}
 80123f0:	bf00      	nop
 80123f2:	3708      	adds	r7, #8
 80123f4:	46bd      	mov	sp, r7
 80123f6:	bd80      	pop	{r7, pc}

080123f8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b084      	sub	sp, #16
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
 8012400:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012402:	683b      	ldr	r3, [r7, #0]
 8012404:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	781a      	ldrb	r2, [r3, #0]
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	3301      	adds	r3, #1
 8012412:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	781a      	ldrb	r2, [r3, #0]
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	3301      	adds	r3, #1
 8012420:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012422:	68f8      	ldr	r0, [r7, #12]
 8012424:	f7ff fabb 	bl	801199e <SWAPBYTE>
 8012428:	4603      	mov	r3, r0
 801242a:	461a      	mov	r2, r3
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	3301      	adds	r3, #1
 8012434:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	3301      	adds	r3, #1
 801243a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801243c:	68f8      	ldr	r0, [r7, #12]
 801243e:	f7ff faae 	bl	801199e <SWAPBYTE>
 8012442:	4603      	mov	r3, r0
 8012444:	461a      	mov	r2, r3
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	3301      	adds	r3, #1
 801244e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	3301      	adds	r3, #1
 8012454:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012456:	68f8      	ldr	r0, [r7, #12]
 8012458:	f7ff faa1 	bl	801199e <SWAPBYTE>
 801245c:	4603      	mov	r3, r0
 801245e:	461a      	mov	r2, r3
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	80da      	strh	r2, [r3, #6]
}
 8012464:	bf00      	nop
 8012466:	3710      	adds	r7, #16
 8012468:	46bd      	mov	sp, r7
 801246a:	bd80      	pop	{r7, pc}

0801246c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b082      	sub	sp, #8
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
 8012474:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012476:	2180      	movs	r1, #128	; 0x80
 8012478:	6878      	ldr	r0, [r7, #4]
 801247a:	f006 ff27 	bl	80192cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801247e:	2100      	movs	r1, #0
 8012480:	6878      	ldr	r0, [r7, #4]
 8012482:	f006 ff23 	bl	80192cc <USBD_LL_StallEP>
}
 8012486:	bf00      	nop
 8012488:	3708      	adds	r7, #8
 801248a:	46bd      	mov	sp, r7
 801248c:	bd80      	pop	{r7, pc}

0801248e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801248e:	b580      	push	{r7, lr}
 8012490:	b086      	sub	sp, #24
 8012492:	af00      	add	r7, sp, #0
 8012494:	60f8      	str	r0, [r7, #12]
 8012496:	60b9      	str	r1, [r7, #8]
 8012498:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801249a:	2300      	movs	r3, #0
 801249c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d036      	beq.n	8012512 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80124a8:	6938      	ldr	r0, [r7, #16]
 80124aa:	f000 f836 	bl	801251a <USBD_GetLen>
 80124ae:	4603      	mov	r3, r0
 80124b0:	3301      	adds	r3, #1
 80124b2:	b29b      	uxth	r3, r3
 80124b4:	005b      	lsls	r3, r3, #1
 80124b6:	b29a      	uxth	r2, r3
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80124bc:	7dfb      	ldrb	r3, [r7, #23]
 80124be:	68ba      	ldr	r2, [r7, #8]
 80124c0:	4413      	add	r3, r2
 80124c2:	687a      	ldr	r2, [r7, #4]
 80124c4:	7812      	ldrb	r2, [r2, #0]
 80124c6:	701a      	strb	r2, [r3, #0]
  idx++;
 80124c8:	7dfb      	ldrb	r3, [r7, #23]
 80124ca:	3301      	adds	r3, #1
 80124cc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80124ce:	7dfb      	ldrb	r3, [r7, #23]
 80124d0:	68ba      	ldr	r2, [r7, #8]
 80124d2:	4413      	add	r3, r2
 80124d4:	2203      	movs	r2, #3
 80124d6:	701a      	strb	r2, [r3, #0]
  idx++;
 80124d8:	7dfb      	ldrb	r3, [r7, #23]
 80124da:	3301      	adds	r3, #1
 80124dc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80124de:	e013      	b.n	8012508 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80124e0:	7dfb      	ldrb	r3, [r7, #23]
 80124e2:	68ba      	ldr	r2, [r7, #8]
 80124e4:	4413      	add	r3, r2
 80124e6:	693a      	ldr	r2, [r7, #16]
 80124e8:	7812      	ldrb	r2, [r2, #0]
 80124ea:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80124ec:	693b      	ldr	r3, [r7, #16]
 80124ee:	3301      	adds	r3, #1
 80124f0:	613b      	str	r3, [r7, #16]
    idx++;
 80124f2:	7dfb      	ldrb	r3, [r7, #23]
 80124f4:	3301      	adds	r3, #1
 80124f6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80124f8:	7dfb      	ldrb	r3, [r7, #23]
 80124fa:	68ba      	ldr	r2, [r7, #8]
 80124fc:	4413      	add	r3, r2
 80124fe:	2200      	movs	r2, #0
 8012500:	701a      	strb	r2, [r3, #0]
    idx++;
 8012502:	7dfb      	ldrb	r3, [r7, #23]
 8012504:	3301      	adds	r3, #1
 8012506:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012508:	693b      	ldr	r3, [r7, #16]
 801250a:	781b      	ldrb	r3, [r3, #0]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d1e7      	bne.n	80124e0 <USBD_GetString+0x52>
 8012510:	e000      	b.n	8012514 <USBD_GetString+0x86>
    return;
 8012512:	bf00      	nop
  }
}
 8012514:	3718      	adds	r7, #24
 8012516:	46bd      	mov	sp, r7
 8012518:	bd80      	pop	{r7, pc}

0801251a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801251a:	b480      	push	{r7}
 801251c:	b085      	sub	sp, #20
 801251e:	af00      	add	r7, sp, #0
 8012520:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012522:	2300      	movs	r3, #0
 8012524:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801252a:	e005      	b.n	8012538 <USBD_GetLen+0x1e>
  {
    len++;
 801252c:	7bfb      	ldrb	r3, [r7, #15]
 801252e:	3301      	adds	r3, #1
 8012530:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012532:	68bb      	ldr	r3, [r7, #8]
 8012534:	3301      	adds	r3, #1
 8012536:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012538:	68bb      	ldr	r3, [r7, #8]
 801253a:	781b      	ldrb	r3, [r3, #0]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d1f5      	bne.n	801252c <USBD_GetLen+0x12>
  }

  return len;
 8012540:	7bfb      	ldrb	r3, [r7, #15]
}
 8012542:	4618      	mov	r0, r3
 8012544:	3714      	adds	r7, #20
 8012546:	46bd      	mov	sp, r7
 8012548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254c:	4770      	bx	lr

0801254e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801254e:	b580      	push	{r7, lr}
 8012550:	b084      	sub	sp, #16
 8012552:	af00      	add	r7, sp, #0
 8012554:	60f8      	str	r0, [r7, #12]
 8012556:	60b9      	str	r1, [r7, #8]
 8012558:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	2202      	movs	r2, #2
 801255e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	687a      	ldr	r2, [r7, #4]
 8012566:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	687a      	ldr	r2, [r7, #4]
 801256c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	68ba      	ldr	r2, [r7, #8]
 8012572:	2100      	movs	r1, #0
 8012574:	68f8      	ldr	r0, [r7, #12]
 8012576:	f006 ff32 	bl	80193de <USBD_LL_Transmit>

  return USBD_OK;
 801257a:	2300      	movs	r3, #0
}
 801257c:	4618      	mov	r0, r3
 801257e:	3710      	adds	r7, #16
 8012580:	46bd      	mov	sp, r7
 8012582:	bd80      	pop	{r7, pc}

08012584 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012584:	b580      	push	{r7, lr}
 8012586:	b084      	sub	sp, #16
 8012588:	af00      	add	r7, sp, #0
 801258a:	60f8      	str	r0, [r7, #12]
 801258c:	60b9      	str	r1, [r7, #8]
 801258e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	68ba      	ldr	r2, [r7, #8]
 8012594:	2100      	movs	r1, #0
 8012596:	68f8      	ldr	r0, [r7, #12]
 8012598:	f006 ff21 	bl	80193de <USBD_LL_Transmit>

  return USBD_OK;
 801259c:	2300      	movs	r3, #0
}
 801259e:	4618      	mov	r0, r3
 80125a0:	3710      	adds	r7, #16
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bd80      	pop	{r7, pc}

080125a6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80125a6:	b580      	push	{r7, lr}
 80125a8:	b084      	sub	sp, #16
 80125aa:	af00      	add	r7, sp, #0
 80125ac:	60f8      	str	r0, [r7, #12]
 80125ae:	60b9      	str	r1, [r7, #8]
 80125b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	2203      	movs	r2, #3
 80125b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	687a      	ldr	r2, [r7, #4]
 80125be:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	687a      	ldr	r2, [r7, #4]
 80125c6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	68ba      	ldr	r2, [r7, #8]
 80125ce:	2100      	movs	r1, #0
 80125d0:	68f8      	ldr	r0, [r7, #12]
 80125d2:	f006 ff25 	bl	8019420 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80125d6:	2300      	movs	r3, #0
}
 80125d8:	4618      	mov	r0, r3
 80125da:	3710      	adds	r7, #16
 80125dc:	46bd      	mov	sp, r7
 80125de:	bd80      	pop	{r7, pc}

080125e0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b084      	sub	sp, #16
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	60f8      	str	r0, [r7, #12]
 80125e8:	60b9      	str	r1, [r7, #8]
 80125ea:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	68ba      	ldr	r2, [r7, #8]
 80125f0:	2100      	movs	r1, #0
 80125f2:	68f8      	ldr	r0, [r7, #12]
 80125f4:	f006 ff14 	bl	8019420 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80125f8:	2300      	movs	r3, #0
}
 80125fa:	4618      	mov	r0, r3
 80125fc:	3710      	adds	r7, #16
 80125fe:	46bd      	mov	sp, r7
 8012600:	bd80      	pop	{r7, pc}

08012602 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012602:	b580      	push	{r7, lr}
 8012604:	b082      	sub	sp, #8
 8012606:	af00      	add	r7, sp, #0
 8012608:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	2204      	movs	r2, #4
 801260e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012612:	2300      	movs	r3, #0
 8012614:	2200      	movs	r2, #0
 8012616:	2100      	movs	r1, #0
 8012618:	6878      	ldr	r0, [r7, #4]
 801261a:	f006 fee0 	bl	80193de <USBD_LL_Transmit>

  return USBD_OK;
 801261e:	2300      	movs	r3, #0
}
 8012620:	4618      	mov	r0, r3
 8012622:	3708      	adds	r7, #8
 8012624:	46bd      	mov	sp, r7
 8012626:	bd80      	pop	{r7, pc}

08012628 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012628:	b580      	push	{r7, lr}
 801262a:	b082      	sub	sp, #8
 801262c:	af00      	add	r7, sp, #0
 801262e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	2205      	movs	r2, #5
 8012634:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012638:	2300      	movs	r3, #0
 801263a:	2200      	movs	r2, #0
 801263c:	2100      	movs	r1, #0
 801263e:	6878      	ldr	r0, [r7, #4]
 8012640:	f006 feee 	bl	8019420 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012644:	2300      	movs	r3, #0
}
 8012646:	4618      	mov	r0, r3
 8012648:	3708      	adds	r7, #8
 801264a:	46bd      	mov	sp, r7
 801264c:	bd80      	pop	{r7, pc}
	...

08012650 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012650:	b580      	push	{r7, lr}
 8012652:	b084      	sub	sp, #16
 8012654:	af00      	add	r7, sp, #0
 8012656:	4603      	mov	r3, r0
 8012658:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801265a:	79fb      	ldrb	r3, [r7, #7]
 801265c:	4a08      	ldr	r2, [pc, #32]	; (8012680 <disk_status+0x30>)
 801265e:	009b      	lsls	r3, r3, #2
 8012660:	4413      	add	r3, r2
 8012662:	685b      	ldr	r3, [r3, #4]
 8012664:	685b      	ldr	r3, [r3, #4]
 8012666:	79fa      	ldrb	r2, [r7, #7]
 8012668:	4905      	ldr	r1, [pc, #20]	; (8012680 <disk_status+0x30>)
 801266a:	440a      	add	r2, r1
 801266c:	7a12      	ldrb	r2, [r2, #8]
 801266e:	4610      	mov	r0, r2
 8012670:	4798      	blx	r3
 8012672:	4603      	mov	r3, r0
 8012674:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012676:	7bfb      	ldrb	r3, [r7, #15]
}
 8012678:	4618      	mov	r0, r3
 801267a:	3710      	adds	r7, #16
 801267c:	46bd      	mov	sp, r7
 801267e:	bd80      	pop	{r7, pc}
 8012680:	2000086c 	.word	0x2000086c

08012684 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b084      	sub	sp, #16
 8012688:	af00      	add	r7, sp, #0
 801268a:	4603      	mov	r3, r0
 801268c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801268e:	2300      	movs	r3, #0
 8012690:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8012692:	79fb      	ldrb	r3, [r7, #7]
 8012694:	4a0d      	ldr	r2, [pc, #52]	; (80126cc <disk_initialize+0x48>)
 8012696:	5cd3      	ldrb	r3, [r2, r3]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d111      	bne.n	80126c0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 801269c:	79fb      	ldrb	r3, [r7, #7]
 801269e:	4a0b      	ldr	r2, [pc, #44]	; (80126cc <disk_initialize+0x48>)
 80126a0:	2101      	movs	r1, #1
 80126a2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80126a4:	79fb      	ldrb	r3, [r7, #7]
 80126a6:	4a09      	ldr	r2, [pc, #36]	; (80126cc <disk_initialize+0x48>)
 80126a8:	009b      	lsls	r3, r3, #2
 80126aa:	4413      	add	r3, r2
 80126ac:	685b      	ldr	r3, [r3, #4]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	79fa      	ldrb	r2, [r7, #7]
 80126b2:	4906      	ldr	r1, [pc, #24]	; (80126cc <disk_initialize+0x48>)
 80126b4:	440a      	add	r2, r1
 80126b6:	7a12      	ldrb	r2, [r2, #8]
 80126b8:	4610      	mov	r0, r2
 80126ba:	4798      	blx	r3
 80126bc:	4603      	mov	r3, r0
 80126be:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80126c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80126c2:	4618      	mov	r0, r3
 80126c4:	3710      	adds	r7, #16
 80126c6:	46bd      	mov	sp, r7
 80126c8:	bd80      	pop	{r7, pc}
 80126ca:	bf00      	nop
 80126cc:	2000086c 	.word	0x2000086c

080126d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80126d0:	b590      	push	{r4, r7, lr}
 80126d2:	b087      	sub	sp, #28
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	60b9      	str	r1, [r7, #8]
 80126d8:	607a      	str	r2, [r7, #4]
 80126da:	603b      	str	r3, [r7, #0]
 80126dc:	4603      	mov	r3, r0
 80126de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80126e0:	7bfb      	ldrb	r3, [r7, #15]
 80126e2:	4a0a      	ldr	r2, [pc, #40]	; (801270c <disk_read+0x3c>)
 80126e4:	009b      	lsls	r3, r3, #2
 80126e6:	4413      	add	r3, r2
 80126e8:	685b      	ldr	r3, [r3, #4]
 80126ea:	689c      	ldr	r4, [r3, #8]
 80126ec:	7bfb      	ldrb	r3, [r7, #15]
 80126ee:	4a07      	ldr	r2, [pc, #28]	; (801270c <disk_read+0x3c>)
 80126f0:	4413      	add	r3, r2
 80126f2:	7a18      	ldrb	r0, [r3, #8]
 80126f4:	683b      	ldr	r3, [r7, #0]
 80126f6:	687a      	ldr	r2, [r7, #4]
 80126f8:	68b9      	ldr	r1, [r7, #8]
 80126fa:	47a0      	blx	r4
 80126fc:	4603      	mov	r3, r0
 80126fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8012700:	7dfb      	ldrb	r3, [r7, #23]
}
 8012702:	4618      	mov	r0, r3
 8012704:	371c      	adds	r7, #28
 8012706:	46bd      	mov	sp, r7
 8012708:	bd90      	pop	{r4, r7, pc}
 801270a:	bf00      	nop
 801270c:	2000086c 	.word	0x2000086c

08012710 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012710:	b590      	push	{r4, r7, lr}
 8012712:	b087      	sub	sp, #28
 8012714:	af00      	add	r7, sp, #0
 8012716:	60b9      	str	r1, [r7, #8]
 8012718:	607a      	str	r2, [r7, #4]
 801271a:	603b      	str	r3, [r7, #0]
 801271c:	4603      	mov	r3, r0
 801271e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012720:	7bfb      	ldrb	r3, [r7, #15]
 8012722:	4a0a      	ldr	r2, [pc, #40]	; (801274c <disk_write+0x3c>)
 8012724:	009b      	lsls	r3, r3, #2
 8012726:	4413      	add	r3, r2
 8012728:	685b      	ldr	r3, [r3, #4]
 801272a:	68dc      	ldr	r4, [r3, #12]
 801272c:	7bfb      	ldrb	r3, [r7, #15]
 801272e:	4a07      	ldr	r2, [pc, #28]	; (801274c <disk_write+0x3c>)
 8012730:	4413      	add	r3, r2
 8012732:	7a18      	ldrb	r0, [r3, #8]
 8012734:	683b      	ldr	r3, [r7, #0]
 8012736:	687a      	ldr	r2, [r7, #4]
 8012738:	68b9      	ldr	r1, [r7, #8]
 801273a:	47a0      	blx	r4
 801273c:	4603      	mov	r3, r0
 801273e:	75fb      	strb	r3, [r7, #23]
  return res;
 8012740:	7dfb      	ldrb	r3, [r7, #23]
}
 8012742:	4618      	mov	r0, r3
 8012744:	371c      	adds	r7, #28
 8012746:	46bd      	mov	sp, r7
 8012748:	bd90      	pop	{r4, r7, pc}
 801274a:	bf00      	nop
 801274c:	2000086c 	.word	0x2000086c

08012750 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b084      	sub	sp, #16
 8012754:	af00      	add	r7, sp, #0
 8012756:	4603      	mov	r3, r0
 8012758:	603a      	str	r2, [r7, #0]
 801275a:	71fb      	strb	r3, [r7, #7]
 801275c:	460b      	mov	r3, r1
 801275e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012760:	79fb      	ldrb	r3, [r7, #7]
 8012762:	4a09      	ldr	r2, [pc, #36]	; (8012788 <disk_ioctl+0x38>)
 8012764:	009b      	lsls	r3, r3, #2
 8012766:	4413      	add	r3, r2
 8012768:	685b      	ldr	r3, [r3, #4]
 801276a:	691b      	ldr	r3, [r3, #16]
 801276c:	79fa      	ldrb	r2, [r7, #7]
 801276e:	4906      	ldr	r1, [pc, #24]	; (8012788 <disk_ioctl+0x38>)
 8012770:	440a      	add	r2, r1
 8012772:	7a10      	ldrb	r0, [r2, #8]
 8012774:	79b9      	ldrb	r1, [r7, #6]
 8012776:	683a      	ldr	r2, [r7, #0]
 8012778:	4798      	blx	r3
 801277a:	4603      	mov	r3, r0
 801277c:	73fb      	strb	r3, [r7, #15]
  return res;
 801277e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012780:	4618      	mov	r0, r3
 8012782:	3710      	adds	r7, #16
 8012784:	46bd      	mov	sp, r7
 8012786:	bd80      	pop	{r7, pc}
 8012788:	2000086c 	.word	0x2000086c

0801278c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801278c:	b480      	push	{r7}
 801278e:	b085      	sub	sp, #20
 8012790:	af00      	add	r7, sp, #0
 8012792:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	3301      	adds	r3, #1
 8012798:	781b      	ldrb	r3, [r3, #0]
 801279a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801279c:	89fb      	ldrh	r3, [r7, #14]
 801279e:	021b      	lsls	r3, r3, #8
 80127a0:	b21a      	sxth	r2, r3
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	781b      	ldrb	r3, [r3, #0]
 80127a6:	b21b      	sxth	r3, r3
 80127a8:	4313      	orrs	r3, r2
 80127aa:	b21b      	sxth	r3, r3
 80127ac:	81fb      	strh	r3, [r7, #14]
	return rv;
 80127ae:	89fb      	ldrh	r3, [r7, #14]
}
 80127b0:	4618      	mov	r0, r3
 80127b2:	3714      	adds	r7, #20
 80127b4:	46bd      	mov	sp, r7
 80127b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ba:	4770      	bx	lr

080127bc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80127bc:	b480      	push	{r7}
 80127be:	b085      	sub	sp, #20
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	3303      	adds	r3, #3
 80127c8:	781b      	ldrb	r3, [r3, #0]
 80127ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	021b      	lsls	r3, r3, #8
 80127d0:	687a      	ldr	r2, [r7, #4]
 80127d2:	3202      	adds	r2, #2
 80127d4:	7812      	ldrb	r2, [r2, #0]
 80127d6:	4313      	orrs	r3, r2
 80127d8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	021b      	lsls	r3, r3, #8
 80127de:	687a      	ldr	r2, [r7, #4]
 80127e0:	3201      	adds	r2, #1
 80127e2:	7812      	ldrb	r2, [r2, #0]
 80127e4:	4313      	orrs	r3, r2
 80127e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	021b      	lsls	r3, r3, #8
 80127ec:	687a      	ldr	r2, [r7, #4]
 80127ee:	7812      	ldrb	r2, [r2, #0]
 80127f0:	4313      	orrs	r3, r2
 80127f2:	60fb      	str	r3, [r7, #12]
	return rv;
 80127f4:	68fb      	ldr	r3, [r7, #12]
}
 80127f6:	4618      	mov	r0, r3
 80127f8:	3714      	adds	r7, #20
 80127fa:	46bd      	mov	sp, r7
 80127fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012800:	4770      	bx	lr

08012802 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012802:	b480      	push	{r7}
 8012804:	b083      	sub	sp, #12
 8012806:	af00      	add	r7, sp, #0
 8012808:	6078      	str	r0, [r7, #4]
 801280a:	460b      	mov	r3, r1
 801280c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	1c5a      	adds	r2, r3, #1
 8012812:	607a      	str	r2, [r7, #4]
 8012814:	887a      	ldrh	r2, [r7, #2]
 8012816:	b2d2      	uxtb	r2, r2
 8012818:	701a      	strb	r2, [r3, #0]
 801281a:	887b      	ldrh	r3, [r7, #2]
 801281c:	0a1b      	lsrs	r3, r3, #8
 801281e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	1c5a      	adds	r2, r3, #1
 8012824:	607a      	str	r2, [r7, #4]
 8012826:	887a      	ldrh	r2, [r7, #2]
 8012828:	b2d2      	uxtb	r2, r2
 801282a:	701a      	strb	r2, [r3, #0]
}
 801282c:	bf00      	nop
 801282e:	370c      	adds	r7, #12
 8012830:	46bd      	mov	sp, r7
 8012832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012836:	4770      	bx	lr

08012838 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012838:	b480      	push	{r7}
 801283a:	b083      	sub	sp, #12
 801283c:	af00      	add	r7, sp, #0
 801283e:	6078      	str	r0, [r7, #4]
 8012840:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	1c5a      	adds	r2, r3, #1
 8012846:	607a      	str	r2, [r7, #4]
 8012848:	683a      	ldr	r2, [r7, #0]
 801284a:	b2d2      	uxtb	r2, r2
 801284c:	701a      	strb	r2, [r3, #0]
 801284e:	683b      	ldr	r3, [r7, #0]
 8012850:	0a1b      	lsrs	r3, r3, #8
 8012852:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	1c5a      	adds	r2, r3, #1
 8012858:	607a      	str	r2, [r7, #4]
 801285a:	683a      	ldr	r2, [r7, #0]
 801285c:	b2d2      	uxtb	r2, r2
 801285e:	701a      	strb	r2, [r3, #0]
 8012860:	683b      	ldr	r3, [r7, #0]
 8012862:	0a1b      	lsrs	r3, r3, #8
 8012864:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	1c5a      	adds	r2, r3, #1
 801286a:	607a      	str	r2, [r7, #4]
 801286c:	683a      	ldr	r2, [r7, #0]
 801286e:	b2d2      	uxtb	r2, r2
 8012870:	701a      	strb	r2, [r3, #0]
 8012872:	683b      	ldr	r3, [r7, #0]
 8012874:	0a1b      	lsrs	r3, r3, #8
 8012876:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	1c5a      	adds	r2, r3, #1
 801287c:	607a      	str	r2, [r7, #4]
 801287e:	683a      	ldr	r2, [r7, #0]
 8012880:	b2d2      	uxtb	r2, r2
 8012882:	701a      	strb	r2, [r3, #0]
}
 8012884:	bf00      	nop
 8012886:	370c      	adds	r7, #12
 8012888:	46bd      	mov	sp, r7
 801288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801288e:	4770      	bx	lr

08012890 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012890:	b480      	push	{r7}
 8012892:	b087      	sub	sp, #28
 8012894:	af00      	add	r7, sp, #0
 8012896:	60f8      	str	r0, [r7, #12]
 8012898:	60b9      	str	r1, [r7, #8]
 801289a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80128a0:	68bb      	ldr	r3, [r7, #8]
 80128a2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d00d      	beq.n	80128c6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80128aa:	693a      	ldr	r2, [r7, #16]
 80128ac:	1c53      	adds	r3, r2, #1
 80128ae:	613b      	str	r3, [r7, #16]
 80128b0:	697b      	ldr	r3, [r7, #20]
 80128b2:	1c59      	adds	r1, r3, #1
 80128b4:	6179      	str	r1, [r7, #20]
 80128b6:	7812      	ldrb	r2, [r2, #0]
 80128b8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	3b01      	subs	r3, #1
 80128be:	607b      	str	r3, [r7, #4]
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d1f1      	bne.n	80128aa <mem_cpy+0x1a>
	}
}
 80128c6:	bf00      	nop
 80128c8:	371c      	adds	r7, #28
 80128ca:	46bd      	mov	sp, r7
 80128cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d0:	4770      	bx	lr

080128d2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80128d2:	b480      	push	{r7}
 80128d4:	b087      	sub	sp, #28
 80128d6:	af00      	add	r7, sp, #0
 80128d8:	60f8      	str	r0, [r7, #12]
 80128da:	60b9      	str	r1, [r7, #8]
 80128dc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80128e2:	697b      	ldr	r3, [r7, #20]
 80128e4:	1c5a      	adds	r2, r3, #1
 80128e6:	617a      	str	r2, [r7, #20]
 80128e8:	68ba      	ldr	r2, [r7, #8]
 80128ea:	b2d2      	uxtb	r2, r2
 80128ec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	3b01      	subs	r3, #1
 80128f2:	607b      	str	r3, [r7, #4]
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d1f3      	bne.n	80128e2 <mem_set+0x10>
}
 80128fa:	bf00      	nop
 80128fc:	bf00      	nop
 80128fe:	371c      	adds	r7, #28
 8012900:	46bd      	mov	sp, r7
 8012902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012906:	4770      	bx	lr

08012908 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8012908:	b480      	push	{r7}
 801290a:	b089      	sub	sp, #36	; 0x24
 801290c:	af00      	add	r7, sp, #0
 801290e:	60f8      	str	r0, [r7, #12]
 8012910:	60b9      	str	r1, [r7, #8]
 8012912:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	61fb      	str	r3, [r7, #28]
 8012918:	68bb      	ldr	r3, [r7, #8]
 801291a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801291c:	2300      	movs	r3, #0
 801291e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8012920:	69fb      	ldr	r3, [r7, #28]
 8012922:	1c5a      	adds	r2, r3, #1
 8012924:	61fa      	str	r2, [r7, #28]
 8012926:	781b      	ldrb	r3, [r3, #0]
 8012928:	4619      	mov	r1, r3
 801292a:	69bb      	ldr	r3, [r7, #24]
 801292c:	1c5a      	adds	r2, r3, #1
 801292e:	61ba      	str	r2, [r7, #24]
 8012930:	781b      	ldrb	r3, [r3, #0]
 8012932:	1acb      	subs	r3, r1, r3
 8012934:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	3b01      	subs	r3, #1
 801293a:	607b      	str	r3, [r7, #4]
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d002      	beq.n	8012948 <mem_cmp+0x40>
 8012942:	697b      	ldr	r3, [r7, #20]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d0eb      	beq.n	8012920 <mem_cmp+0x18>

	return r;
 8012948:	697b      	ldr	r3, [r7, #20]
}
 801294a:	4618      	mov	r0, r3
 801294c:	3724      	adds	r7, #36	; 0x24
 801294e:	46bd      	mov	sp, r7
 8012950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012954:	4770      	bx	lr

08012956 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8012956:	b480      	push	{r7}
 8012958:	b083      	sub	sp, #12
 801295a:	af00      	add	r7, sp, #0
 801295c:	6078      	str	r0, [r7, #4]
 801295e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012960:	e002      	b.n	8012968 <chk_chr+0x12>
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	3301      	adds	r3, #1
 8012966:	607b      	str	r3, [r7, #4]
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	781b      	ldrb	r3, [r3, #0]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d005      	beq.n	801297c <chk_chr+0x26>
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	781b      	ldrb	r3, [r3, #0]
 8012974:	461a      	mov	r2, r3
 8012976:	683b      	ldr	r3, [r7, #0]
 8012978:	4293      	cmp	r3, r2
 801297a:	d1f2      	bne.n	8012962 <chk_chr+0xc>
	return *str;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	781b      	ldrb	r3, [r3, #0]
}
 8012980:	4618      	mov	r0, r3
 8012982:	370c      	adds	r7, #12
 8012984:	46bd      	mov	sp, r7
 8012986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801298a:	4770      	bx	lr

0801298c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 801298c:	b580      	push	{r7, lr}
 801298e:	b082      	sub	sp, #8
 8012990:	af00      	add	r7, sp, #0
 8012992:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d009      	beq.n	80129ae <lock_fs+0x22>
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	68db      	ldr	r3, [r3, #12]
 801299e:	4618      	mov	r0, r3
 80129a0:	f002 fcde 	bl	8015360 <ff_req_grant>
 80129a4:	4603      	mov	r3, r0
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d001      	beq.n	80129ae <lock_fs+0x22>
 80129aa:	2301      	movs	r3, #1
 80129ac:	e000      	b.n	80129b0 <lock_fs+0x24>
 80129ae:	2300      	movs	r3, #0
}
 80129b0:	4618      	mov	r0, r3
 80129b2:	3708      	adds	r7, #8
 80129b4:	46bd      	mov	sp, r7
 80129b6:	bd80      	pop	{r7, pc}

080129b8 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80129b8:	b580      	push	{r7, lr}
 80129ba:	b082      	sub	sp, #8
 80129bc:	af00      	add	r7, sp, #0
 80129be:	6078      	str	r0, [r7, #4]
 80129c0:	460b      	mov	r3, r1
 80129c2:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d00d      	beq.n	80129e6 <unlock_fs+0x2e>
 80129ca:	78fb      	ldrb	r3, [r7, #3]
 80129cc:	2b0c      	cmp	r3, #12
 80129ce:	d00a      	beq.n	80129e6 <unlock_fs+0x2e>
 80129d0:	78fb      	ldrb	r3, [r7, #3]
 80129d2:	2b0b      	cmp	r3, #11
 80129d4:	d007      	beq.n	80129e6 <unlock_fs+0x2e>
 80129d6:	78fb      	ldrb	r3, [r7, #3]
 80129d8:	2b0f      	cmp	r3, #15
 80129da:	d004      	beq.n	80129e6 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	68db      	ldr	r3, [r3, #12]
 80129e0:	4618      	mov	r0, r3
 80129e2:	f002 fcd2 	bl	801538a <ff_rel_grant>
	}
}
 80129e6:	bf00      	nop
 80129e8:	3708      	adds	r7, #8
 80129ea:	46bd      	mov	sp, r7
 80129ec:	bd80      	pop	{r7, pc}
	...

080129f0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80129f0:	b480      	push	{r7}
 80129f2:	b085      	sub	sp, #20
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	6078      	str	r0, [r7, #4]
 80129f8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80129fa:	2300      	movs	r3, #0
 80129fc:	60bb      	str	r3, [r7, #8]
 80129fe:	68bb      	ldr	r3, [r7, #8]
 8012a00:	60fb      	str	r3, [r7, #12]
 8012a02:	e029      	b.n	8012a58 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8012a04:	4a27      	ldr	r2, [pc, #156]	; (8012aa4 <chk_lock+0xb4>)
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	011b      	lsls	r3, r3, #4
 8012a0a:	4413      	add	r3, r2
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d01d      	beq.n	8012a4e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012a12:	4a24      	ldr	r2, [pc, #144]	; (8012aa4 <chk_lock+0xb4>)
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	011b      	lsls	r3, r3, #4
 8012a18:	4413      	add	r3, r2
 8012a1a:	681a      	ldr	r2, [r3, #0]
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	429a      	cmp	r2, r3
 8012a22:	d116      	bne.n	8012a52 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8012a24:	4a1f      	ldr	r2, [pc, #124]	; (8012aa4 <chk_lock+0xb4>)
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	011b      	lsls	r3, r3, #4
 8012a2a:	4413      	add	r3, r2
 8012a2c:	3304      	adds	r3, #4
 8012a2e:	681a      	ldr	r2, [r3, #0]
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012a34:	429a      	cmp	r2, r3
 8012a36:	d10c      	bne.n	8012a52 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012a38:	4a1a      	ldr	r2, [pc, #104]	; (8012aa4 <chk_lock+0xb4>)
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	011b      	lsls	r3, r3, #4
 8012a3e:	4413      	add	r3, r2
 8012a40:	3308      	adds	r3, #8
 8012a42:	681a      	ldr	r2, [r3, #0]
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8012a48:	429a      	cmp	r2, r3
 8012a4a:	d102      	bne.n	8012a52 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012a4c:	e007      	b.n	8012a5e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8012a4e:	2301      	movs	r3, #1
 8012a50:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	3301      	adds	r3, #1
 8012a56:	60fb      	str	r3, [r7, #12]
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	2b01      	cmp	r3, #1
 8012a5c:	d9d2      	bls.n	8012a04 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	2b02      	cmp	r3, #2
 8012a62:	d109      	bne.n	8012a78 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8012a64:	68bb      	ldr	r3, [r7, #8]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d102      	bne.n	8012a70 <chk_lock+0x80>
 8012a6a:	683b      	ldr	r3, [r7, #0]
 8012a6c:	2b02      	cmp	r3, #2
 8012a6e:	d101      	bne.n	8012a74 <chk_lock+0x84>
 8012a70:	2300      	movs	r3, #0
 8012a72:	e010      	b.n	8012a96 <chk_lock+0xa6>
 8012a74:	2312      	movs	r3, #18
 8012a76:	e00e      	b.n	8012a96 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8012a78:	683b      	ldr	r3, [r7, #0]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d108      	bne.n	8012a90 <chk_lock+0xa0>
 8012a7e:	4a09      	ldr	r2, [pc, #36]	; (8012aa4 <chk_lock+0xb4>)
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	011b      	lsls	r3, r3, #4
 8012a84:	4413      	add	r3, r2
 8012a86:	330c      	adds	r3, #12
 8012a88:	881b      	ldrh	r3, [r3, #0]
 8012a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012a8e:	d101      	bne.n	8012a94 <chk_lock+0xa4>
 8012a90:	2310      	movs	r3, #16
 8012a92:	e000      	b.n	8012a96 <chk_lock+0xa6>
 8012a94:	2300      	movs	r3, #0
}
 8012a96:	4618      	mov	r0, r3
 8012a98:	3714      	adds	r7, #20
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa0:	4770      	bx	lr
 8012aa2:	bf00      	nop
 8012aa4:	2000084c 	.word	0x2000084c

08012aa8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8012aa8:	b480      	push	{r7}
 8012aaa:	b083      	sub	sp, #12
 8012aac:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012aae:	2300      	movs	r3, #0
 8012ab0:	607b      	str	r3, [r7, #4]
 8012ab2:	e002      	b.n	8012aba <enq_lock+0x12>
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	3301      	adds	r3, #1
 8012ab8:	607b      	str	r3, [r7, #4]
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	2b01      	cmp	r3, #1
 8012abe:	d806      	bhi.n	8012ace <enq_lock+0x26>
 8012ac0:	4a09      	ldr	r2, [pc, #36]	; (8012ae8 <enq_lock+0x40>)
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	011b      	lsls	r3, r3, #4
 8012ac6:	4413      	add	r3, r2
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d1f2      	bne.n	8012ab4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	2b02      	cmp	r3, #2
 8012ad2:	bf14      	ite	ne
 8012ad4:	2301      	movne	r3, #1
 8012ad6:	2300      	moveq	r3, #0
 8012ad8:	b2db      	uxtb	r3, r3
}
 8012ada:	4618      	mov	r0, r3
 8012adc:	370c      	adds	r7, #12
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae4:	4770      	bx	lr
 8012ae6:	bf00      	nop
 8012ae8:	2000084c 	.word	0x2000084c

08012aec <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012aec:	b480      	push	{r7}
 8012aee:	b085      	sub	sp, #20
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
 8012af4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012af6:	2300      	movs	r3, #0
 8012af8:	60fb      	str	r3, [r7, #12]
 8012afa:	e01f      	b.n	8012b3c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8012afc:	4a41      	ldr	r2, [pc, #260]	; (8012c04 <inc_lock+0x118>)
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	011b      	lsls	r3, r3, #4
 8012b02:	4413      	add	r3, r2
 8012b04:	681a      	ldr	r2, [r3, #0]
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	429a      	cmp	r2, r3
 8012b0c:	d113      	bne.n	8012b36 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8012b0e:	4a3d      	ldr	r2, [pc, #244]	; (8012c04 <inc_lock+0x118>)
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	011b      	lsls	r3, r3, #4
 8012b14:	4413      	add	r3, r2
 8012b16:	3304      	adds	r3, #4
 8012b18:	681a      	ldr	r2, [r3, #0]
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8012b1e:	429a      	cmp	r2, r3
 8012b20:	d109      	bne.n	8012b36 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8012b22:	4a38      	ldr	r2, [pc, #224]	; (8012c04 <inc_lock+0x118>)
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	011b      	lsls	r3, r3, #4
 8012b28:	4413      	add	r3, r2
 8012b2a:	3308      	adds	r3, #8
 8012b2c:	681a      	ldr	r2, [r3, #0]
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8012b32:	429a      	cmp	r2, r3
 8012b34:	d006      	beq.n	8012b44 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	3301      	adds	r3, #1
 8012b3a:	60fb      	str	r3, [r7, #12]
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	2b01      	cmp	r3, #1
 8012b40:	d9dc      	bls.n	8012afc <inc_lock+0x10>
 8012b42:	e000      	b.n	8012b46 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8012b44:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	2b02      	cmp	r3, #2
 8012b4a:	d132      	bne.n	8012bb2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	60fb      	str	r3, [r7, #12]
 8012b50:	e002      	b.n	8012b58 <inc_lock+0x6c>
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	3301      	adds	r3, #1
 8012b56:	60fb      	str	r3, [r7, #12]
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	2b01      	cmp	r3, #1
 8012b5c:	d806      	bhi.n	8012b6c <inc_lock+0x80>
 8012b5e:	4a29      	ldr	r2, [pc, #164]	; (8012c04 <inc_lock+0x118>)
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	011b      	lsls	r3, r3, #4
 8012b64:	4413      	add	r3, r2
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d1f2      	bne.n	8012b52 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	2b02      	cmp	r3, #2
 8012b70:	d101      	bne.n	8012b76 <inc_lock+0x8a>
 8012b72:	2300      	movs	r3, #0
 8012b74:	e040      	b.n	8012bf8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	681a      	ldr	r2, [r3, #0]
 8012b7a:	4922      	ldr	r1, [pc, #136]	; (8012c04 <inc_lock+0x118>)
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	011b      	lsls	r3, r3, #4
 8012b80:	440b      	add	r3, r1
 8012b82:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	689a      	ldr	r2, [r3, #8]
 8012b88:	491e      	ldr	r1, [pc, #120]	; (8012c04 <inc_lock+0x118>)
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	011b      	lsls	r3, r3, #4
 8012b8e:	440b      	add	r3, r1
 8012b90:	3304      	adds	r3, #4
 8012b92:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	695a      	ldr	r2, [r3, #20]
 8012b98:	491a      	ldr	r1, [pc, #104]	; (8012c04 <inc_lock+0x118>)
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	011b      	lsls	r3, r3, #4
 8012b9e:	440b      	add	r3, r1
 8012ba0:	3308      	adds	r3, #8
 8012ba2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8012ba4:	4a17      	ldr	r2, [pc, #92]	; (8012c04 <inc_lock+0x118>)
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	011b      	lsls	r3, r3, #4
 8012baa:	4413      	add	r3, r2
 8012bac:	330c      	adds	r3, #12
 8012bae:	2200      	movs	r2, #0
 8012bb0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8012bb2:	683b      	ldr	r3, [r7, #0]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d009      	beq.n	8012bcc <inc_lock+0xe0>
 8012bb8:	4a12      	ldr	r2, [pc, #72]	; (8012c04 <inc_lock+0x118>)
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	011b      	lsls	r3, r3, #4
 8012bbe:	4413      	add	r3, r2
 8012bc0:	330c      	adds	r3, #12
 8012bc2:	881b      	ldrh	r3, [r3, #0]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d001      	beq.n	8012bcc <inc_lock+0xe0>
 8012bc8:	2300      	movs	r3, #0
 8012bca:	e015      	b.n	8012bf8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8012bcc:	683b      	ldr	r3, [r7, #0]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d108      	bne.n	8012be4 <inc_lock+0xf8>
 8012bd2:	4a0c      	ldr	r2, [pc, #48]	; (8012c04 <inc_lock+0x118>)
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	011b      	lsls	r3, r3, #4
 8012bd8:	4413      	add	r3, r2
 8012bda:	330c      	adds	r3, #12
 8012bdc:	881b      	ldrh	r3, [r3, #0]
 8012bde:	3301      	adds	r3, #1
 8012be0:	b29a      	uxth	r2, r3
 8012be2:	e001      	b.n	8012be8 <inc_lock+0xfc>
 8012be4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012be8:	4906      	ldr	r1, [pc, #24]	; (8012c04 <inc_lock+0x118>)
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	011b      	lsls	r3, r3, #4
 8012bee:	440b      	add	r3, r1
 8012bf0:	330c      	adds	r3, #12
 8012bf2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	3301      	adds	r3, #1
}
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	3714      	adds	r7, #20
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c02:	4770      	bx	lr
 8012c04:	2000084c 	.word	0x2000084c

08012c08 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8012c08:	b480      	push	{r7}
 8012c0a:	b085      	sub	sp, #20
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	3b01      	subs	r3, #1
 8012c14:	607b      	str	r3, [r7, #4]
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	2b01      	cmp	r3, #1
 8012c1a:	d825      	bhi.n	8012c68 <dec_lock+0x60>
		n = Files[i].ctr;
 8012c1c:	4a17      	ldr	r2, [pc, #92]	; (8012c7c <dec_lock+0x74>)
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	011b      	lsls	r3, r3, #4
 8012c22:	4413      	add	r3, r2
 8012c24:	330c      	adds	r3, #12
 8012c26:	881b      	ldrh	r3, [r3, #0]
 8012c28:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8012c2a:	89fb      	ldrh	r3, [r7, #14]
 8012c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012c30:	d101      	bne.n	8012c36 <dec_lock+0x2e>
 8012c32:	2300      	movs	r3, #0
 8012c34:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8012c36:	89fb      	ldrh	r3, [r7, #14]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d002      	beq.n	8012c42 <dec_lock+0x3a>
 8012c3c:	89fb      	ldrh	r3, [r7, #14]
 8012c3e:	3b01      	subs	r3, #1
 8012c40:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8012c42:	4a0e      	ldr	r2, [pc, #56]	; (8012c7c <dec_lock+0x74>)
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	011b      	lsls	r3, r3, #4
 8012c48:	4413      	add	r3, r2
 8012c4a:	330c      	adds	r3, #12
 8012c4c:	89fa      	ldrh	r2, [r7, #14]
 8012c4e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8012c50:	89fb      	ldrh	r3, [r7, #14]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d105      	bne.n	8012c62 <dec_lock+0x5a>
 8012c56:	4a09      	ldr	r2, [pc, #36]	; (8012c7c <dec_lock+0x74>)
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	011b      	lsls	r3, r3, #4
 8012c5c:	4413      	add	r3, r2
 8012c5e:	2200      	movs	r2, #0
 8012c60:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8012c62:	2300      	movs	r3, #0
 8012c64:	737b      	strb	r3, [r7, #13]
 8012c66:	e001      	b.n	8012c6c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8012c68:	2302      	movs	r3, #2
 8012c6a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8012c6c:	7b7b      	ldrb	r3, [r7, #13]
}
 8012c6e:	4618      	mov	r0, r3
 8012c70:	3714      	adds	r7, #20
 8012c72:	46bd      	mov	sp, r7
 8012c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c78:	4770      	bx	lr
 8012c7a:	bf00      	nop
 8012c7c:	2000084c 	.word	0x2000084c

08012c80 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8012c80:	b480      	push	{r7}
 8012c82:	b085      	sub	sp, #20
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8012c88:	2300      	movs	r3, #0
 8012c8a:	60fb      	str	r3, [r7, #12]
 8012c8c:	e010      	b.n	8012cb0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8012c8e:	4a0d      	ldr	r2, [pc, #52]	; (8012cc4 <clear_lock+0x44>)
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	011b      	lsls	r3, r3, #4
 8012c94:	4413      	add	r3, r2
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	687a      	ldr	r2, [r7, #4]
 8012c9a:	429a      	cmp	r2, r3
 8012c9c:	d105      	bne.n	8012caa <clear_lock+0x2a>
 8012c9e:	4a09      	ldr	r2, [pc, #36]	; (8012cc4 <clear_lock+0x44>)
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	011b      	lsls	r3, r3, #4
 8012ca4:	4413      	add	r3, r2
 8012ca6:	2200      	movs	r2, #0
 8012ca8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	3301      	adds	r3, #1
 8012cae:	60fb      	str	r3, [r7, #12]
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	2b01      	cmp	r3, #1
 8012cb4:	d9eb      	bls.n	8012c8e <clear_lock+0xe>
	}
}
 8012cb6:	bf00      	nop
 8012cb8:	bf00      	nop
 8012cba:	3714      	adds	r7, #20
 8012cbc:	46bd      	mov	sp, r7
 8012cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc2:	4770      	bx	lr
 8012cc4:	2000084c 	.word	0x2000084c

08012cc8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8012cc8:	b580      	push	{r7, lr}
 8012cca:	b086      	sub	sp, #24
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	78db      	ldrb	r3, [r3, #3]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d034      	beq.n	8012d46 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ce0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	7858      	ldrb	r0, [r3, #1]
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012cec:	2301      	movs	r3, #1
 8012cee:	697a      	ldr	r2, [r7, #20]
 8012cf0:	f7ff fd0e 	bl	8012710 <disk_write>
 8012cf4:	4603      	mov	r3, r0
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d002      	beq.n	8012d00 <sync_window+0x38>
			res = FR_DISK_ERR;
 8012cfa:	2301      	movs	r3, #1
 8012cfc:	73fb      	strb	r3, [r7, #15]
 8012cfe:	e022      	b.n	8012d46 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	2200      	movs	r2, #0
 8012d04:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d0a:	697a      	ldr	r2, [r7, #20]
 8012d0c:	1ad2      	subs	r2, r2, r3
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	69db      	ldr	r3, [r3, #28]
 8012d12:	429a      	cmp	r2, r3
 8012d14:	d217      	bcs.n	8012d46 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	789b      	ldrb	r3, [r3, #2]
 8012d1a:	613b      	str	r3, [r7, #16]
 8012d1c:	e010      	b.n	8012d40 <sync_window+0x78>
					wsect += fs->fsize;
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	69db      	ldr	r3, [r3, #28]
 8012d22:	697a      	ldr	r2, [r7, #20]
 8012d24:	4413      	add	r3, r2
 8012d26:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	7858      	ldrb	r0, [r3, #1]
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012d32:	2301      	movs	r3, #1
 8012d34:	697a      	ldr	r2, [r7, #20]
 8012d36:	f7ff fceb 	bl	8012710 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012d3a:	693b      	ldr	r3, [r7, #16]
 8012d3c:	3b01      	subs	r3, #1
 8012d3e:	613b      	str	r3, [r7, #16]
 8012d40:	693b      	ldr	r3, [r7, #16]
 8012d42:	2b01      	cmp	r3, #1
 8012d44:	d8eb      	bhi.n	8012d1e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8012d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d48:	4618      	mov	r0, r3
 8012d4a:	3718      	adds	r7, #24
 8012d4c:	46bd      	mov	sp, r7
 8012d4e:	bd80      	pop	{r7, pc}

08012d50 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b084      	sub	sp, #16
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	6078      	str	r0, [r7, #4]
 8012d58:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d62:	683a      	ldr	r2, [r7, #0]
 8012d64:	429a      	cmp	r2, r3
 8012d66:	d01b      	beq.n	8012da0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8012d68:	6878      	ldr	r0, [r7, #4]
 8012d6a:	f7ff ffad 	bl	8012cc8 <sync_window>
 8012d6e:	4603      	mov	r3, r0
 8012d70:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8012d72:	7bfb      	ldrb	r3, [r7, #15]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d113      	bne.n	8012da0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	7858      	ldrb	r0, [r3, #1]
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012d82:	2301      	movs	r3, #1
 8012d84:	683a      	ldr	r2, [r7, #0]
 8012d86:	f7ff fca3 	bl	80126d0 <disk_read>
 8012d8a:	4603      	mov	r3, r0
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d004      	beq.n	8012d9a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8012d90:	f04f 33ff 	mov.w	r3, #4294967295
 8012d94:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8012d96:	2301      	movs	r3, #1
 8012d98:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	683a      	ldr	r2, [r7, #0]
 8012d9e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8012da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012da2:	4618      	mov	r0, r3
 8012da4:	3710      	adds	r7, #16
 8012da6:	46bd      	mov	sp, r7
 8012da8:	bd80      	pop	{r7, pc}
	...

08012dac <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b084      	sub	sp, #16
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8012db4:	6878      	ldr	r0, [r7, #4]
 8012db6:	f7ff ff87 	bl	8012cc8 <sync_window>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012dbe:	7bfb      	ldrb	r3, [r7, #15]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d158      	bne.n	8012e76 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	781b      	ldrb	r3, [r3, #0]
 8012dc8:	2b03      	cmp	r3, #3
 8012dca:	d148      	bne.n	8012e5e <sync_fs+0xb2>
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	791b      	ldrb	r3, [r3, #4]
 8012dd0:	2b01      	cmp	r3, #1
 8012dd2:	d144      	bne.n	8012e5e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	3334      	adds	r3, #52	; 0x34
 8012dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012ddc:	2100      	movs	r1, #0
 8012dde:	4618      	mov	r0, r3
 8012de0:	f7ff fd77 	bl	80128d2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	3334      	adds	r3, #52	; 0x34
 8012de8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012dec:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8012df0:	4618      	mov	r0, r3
 8012df2:	f7ff fd06 	bl	8012802 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	3334      	adds	r3, #52	; 0x34
 8012dfa:	4921      	ldr	r1, [pc, #132]	; (8012e80 <sync_fs+0xd4>)
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	f7ff fd1b 	bl	8012838 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	3334      	adds	r3, #52	; 0x34
 8012e06:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012e0a:	491e      	ldr	r1, [pc, #120]	; (8012e84 <sync_fs+0xd8>)
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	f7ff fd13 	bl	8012838 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	3334      	adds	r3, #52	; 0x34
 8012e16:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	695b      	ldr	r3, [r3, #20]
 8012e1e:	4619      	mov	r1, r3
 8012e20:	4610      	mov	r0, r2
 8012e22:	f7ff fd09 	bl	8012838 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	3334      	adds	r3, #52	; 0x34
 8012e2a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	691b      	ldr	r3, [r3, #16]
 8012e32:	4619      	mov	r1, r3
 8012e34:	4610      	mov	r0, r2
 8012e36:	f7ff fcff 	bl	8012838 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	6a1b      	ldr	r3, [r3, #32]
 8012e3e:	1c5a      	adds	r2, r3, #1
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	7858      	ldrb	r0, [r3, #1]
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012e52:	2301      	movs	r3, #1
 8012e54:	f7ff fc5c 	bl	8012710 <disk_write>
			fs->fsi_flag = 0;
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	2200      	movs	r2, #0
 8012e5c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	785b      	ldrb	r3, [r3, #1]
 8012e62:	2200      	movs	r2, #0
 8012e64:	2100      	movs	r1, #0
 8012e66:	4618      	mov	r0, r3
 8012e68:	f7ff fc72 	bl	8012750 <disk_ioctl>
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d001      	beq.n	8012e76 <sync_fs+0xca>
 8012e72:	2301      	movs	r3, #1
 8012e74:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8012e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e78:	4618      	mov	r0, r3
 8012e7a:	3710      	adds	r7, #16
 8012e7c:	46bd      	mov	sp, r7
 8012e7e:	bd80      	pop	{r7, pc}
 8012e80:	41615252 	.word	0x41615252
 8012e84:	61417272 	.word	0x61417272

08012e88 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012e88:	b480      	push	{r7}
 8012e8a:	b083      	sub	sp, #12
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
 8012e90:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8012e92:	683b      	ldr	r3, [r7, #0]
 8012e94:	3b02      	subs	r3, #2
 8012e96:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	699b      	ldr	r3, [r3, #24]
 8012e9c:	3b02      	subs	r3, #2
 8012e9e:	683a      	ldr	r2, [r7, #0]
 8012ea0:	429a      	cmp	r2, r3
 8012ea2:	d301      	bcc.n	8012ea8 <clust2sect+0x20>
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	e008      	b.n	8012eba <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	895b      	ldrh	r3, [r3, #10]
 8012eac:	461a      	mov	r2, r3
 8012eae:	683b      	ldr	r3, [r7, #0]
 8012eb0:	fb03 f202 	mul.w	r2, r3, r2
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012eb8:	4413      	add	r3, r2
}
 8012eba:	4618      	mov	r0, r3
 8012ebc:	370c      	adds	r7, #12
 8012ebe:	46bd      	mov	sp, r7
 8012ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec4:	4770      	bx	lr

08012ec6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8012ec6:	b580      	push	{r7, lr}
 8012ec8:	b086      	sub	sp, #24
 8012eca:	af00      	add	r7, sp, #0
 8012ecc:	6078      	str	r0, [r7, #4]
 8012ece:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012ed6:	683b      	ldr	r3, [r7, #0]
 8012ed8:	2b01      	cmp	r3, #1
 8012eda:	d904      	bls.n	8012ee6 <get_fat+0x20>
 8012edc:	693b      	ldr	r3, [r7, #16]
 8012ede:	699b      	ldr	r3, [r3, #24]
 8012ee0:	683a      	ldr	r2, [r7, #0]
 8012ee2:	429a      	cmp	r2, r3
 8012ee4:	d302      	bcc.n	8012eec <get_fat+0x26>
		val = 1;	/* Internal error */
 8012ee6:	2301      	movs	r3, #1
 8012ee8:	617b      	str	r3, [r7, #20]
 8012eea:	e08f      	b.n	801300c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012eec:	f04f 33ff 	mov.w	r3, #4294967295
 8012ef0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8012ef2:	693b      	ldr	r3, [r7, #16]
 8012ef4:	781b      	ldrb	r3, [r3, #0]
 8012ef6:	2b03      	cmp	r3, #3
 8012ef8:	d062      	beq.n	8012fc0 <get_fat+0xfa>
 8012efa:	2b03      	cmp	r3, #3
 8012efc:	dc7c      	bgt.n	8012ff8 <get_fat+0x132>
 8012efe:	2b01      	cmp	r3, #1
 8012f00:	d002      	beq.n	8012f08 <get_fat+0x42>
 8012f02:	2b02      	cmp	r3, #2
 8012f04:	d042      	beq.n	8012f8c <get_fat+0xc6>
 8012f06:	e077      	b.n	8012ff8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012f08:	683b      	ldr	r3, [r7, #0]
 8012f0a:	60fb      	str	r3, [r7, #12]
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	085b      	lsrs	r3, r3, #1
 8012f10:	68fa      	ldr	r2, [r7, #12]
 8012f12:	4413      	add	r3, r2
 8012f14:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012f16:	693b      	ldr	r3, [r7, #16]
 8012f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	0a5b      	lsrs	r3, r3, #9
 8012f1e:	4413      	add	r3, r2
 8012f20:	4619      	mov	r1, r3
 8012f22:	6938      	ldr	r0, [r7, #16]
 8012f24:	f7ff ff14 	bl	8012d50 <move_window>
 8012f28:	4603      	mov	r3, r0
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d167      	bne.n	8012ffe <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	1c5a      	adds	r2, r3, #1
 8012f32:	60fa      	str	r2, [r7, #12]
 8012f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012f38:	693a      	ldr	r2, [r7, #16]
 8012f3a:	4413      	add	r3, r2
 8012f3c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012f40:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012f42:	693b      	ldr	r3, [r7, #16]
 8012f44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	0a5b      	lsrs	r3, r3, #9
 8012f4a:	4413      	add	r3, r2
 8012f4c:	4619      	mov	r1, r3
 8012f4e:	6938      	ldr	r0, [r7, #16]
 8012f50:	f7ff fefe 	bl	8012d50 <move_window>
 8012f54:	4603      	mov	r3, r0
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d153      	bne.n	8013002 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012f60:	693a      	ldr	r2, [r7, #16]
 8012f62:	4413      	add	r3, r2
 8012f64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012f68:	021b      	lsls	r3, r3, #8
 8012f6a:	461a      	mov	r2, r3
 8012f6c:	68bb      	ldr	r3, [r7, #8]
 8012f6e:	4313      	orrs	r3, r2
 8012f70:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012f72:	683b      	ldr	r3, [r7, #0]
 8012f74:	f003 0301 	and.w	r3, r3, #1
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d002      	beq.n	8012f82 <get_fat+0xbc>
 8012f7c:	68bb      	ldr	r3, [r7, #8]
 8012f7e:	091b      	lsrs	r3, r3, #4
 8012f80:	e002      	b.n	8012f88 <get_fat+0xc2>
 8012f82:	68bb      	ldr	r3, [r7, #8]
 8012f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012f88:	617b      	str	r3, [r7, #20]
			break;
 8012f8a:	e03f      	b.n	801300c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012f8c:	693b      	ldr	r3, [r7, #16]
 8012f8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012f90:	683b      	ldr	r3, [r7, #0]
 8012f92:	0a1b      	lsrs	r3, r3, #8
 8012f94:	4413      	add	r3, r2
 8012f96:	4619      	mov	r1, r3
 8012f98:	6938      	ldr	r0, [r7, #16]
 8012f9a:	f7ff fed9 	bl	8012d50 <move_window>
 8012f9e:	4603      	mov	r3, r0
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d130      	bne.n	8013006 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012fa4:	693b      	ldr	r3, [r7, #16]
 8012fa6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012faa:	683b      	ldr	r3, [r7, #0]
 8012fac:	005b      	lsls	r3, r3, #1
 8012fae:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012fb2:	4413      	add	r3, r2
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	f7ff fbe9 	bl	801278c <ld_word>
 8012fba:	4603      	mov	r3, r0
 8012fbc:	617b      	str	r3, [r7, #20]
			break;
 8012fbe:	e025      	b.n	801300c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012fc0:	693b      	ldr	r3, [r7, #16]
 8012fc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012fc4:	683b      	ldr	r3, [r7, #0]
 8012fc6:	09db      	lsrs	r3, r3, #7
 8012fc8:	4413      	add	r3, r2
 8012fca:	4619      	mov	r1, r3
 8012fcc:	6938      	ldr	r0, [r7, #16]
 8012fce:	f7ff febf 	bl	8012d50 <move_window>
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d118      	bne.n	801300a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012fd8:	693b      	ldr	r3, [r7, #16]
 8012fda:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012fde:	683b      	ldr	r3, [r7, #0]
 8012fe0:	009b      	lsls	r3, r3, #2
 8012fe2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012fe6:	4413      	add	r3, r2
 8012fe8:	4618      	mov	r0, r3
 8012fea:	f7ff fbe7 	bl	80127bc <ld_dword>
 8012fee:	4603      	mov	r3, r0
 8012ff0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012ff4:	617b      	str	r3, [r7, #20]
			break;
 8012ff6:	e009      	b.n	801300c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012ff8:	2301      	movs	r3, #1
 8012ffa:	617b      	str	r3, [r7, #20]
 8012ffc:	e006      	b.n	801300c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012ffe:	bf00      	nop
 8013000:	e004      	b.n	801300c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013002:	bf00      	nop
 8013004:	e002      	b.n	801300c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013006:	bf00      	nop
 8013008:	e000      	b.n	801300c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801300a:	bf00      	nop
		}
	}

	return val;
 801300c:	697b      	ldr	r3, [r7, #20]
}
 801300e:	4618      	mov	r0, r3
 8013010:	3718      	adds	r7, #24
 8013012:	46bd      	mov	sp, r7
 8013014:	bd80      	pop	{r7, pc}

08013016 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8013016:	b590      	push	{r4, r7, lr}
 8013018:	b089      	sub	sp, #36	; 0x24
 801301a:	af00      	add	r7, sp, #0
 801301c:	60f8      	str	r0, [r7, #12]
 801301e:	60b9      	str	r1, [r7, #8]
 8013020:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8013022:	2302      	movs	r3, #2
 8013024:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8013026:	68bb      	ldr	r3, [r7, #8]
 8013028:	2b01      	cmp	r3, #1
 801302a:	f240 80d2 	bls.w	80131d2 <put_fat+0x1bc>
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	699b      	ldr	r3, [r3, #24]
 8013032:	68ba      	ldr	r2, [r7, #8]
 8013034:	429a      	cmp	r2, r3
 8013036:	f080 80cc 	bcs.w	80131d2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	781b      	ldrb	r3, [r3, #0]
 801303e:	2b03      	cmp	r3, #3
 8013040:	f000 8096 	beq.w	8013170 <put_fat+0x15a>
 8013044:	2b03      	cmp	r3, #3
 8013046:	f300 80cd 	bgt.w	80131e4 <put_fat+0x1ce>
 801304a:	2b01      	cmp	r3, #1
 801304c:	d002      	beq.n	8013054 <put_fat+0x3e>
 801304e:	2b02      	cmp	r3, #2
 8013050:	d06e      	beq.n	8013130 <put_fat+0x11a>
 8013052:	e0c7      	b.n	80131e4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8013054:	68bb      	ldr	r3, [r7, #8]
 8013056:	61bb      	str	r3, [r7, #24]
 8013058:	69bb      	ldr	r3, [r7, #24]
 801305a:	085b      	lsrs	r3, r3, #1
 801305c:	69ba      	ldr	r2, [r7, #24]
 801305e:	4413      	add	r3, r2
 8013060:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013066:	69bb      	ldr	r3, [r7, #24]
 8013068:	0a5b      	lsrs	r3, r3, #9
 801306a:	4413      	add	r3, r2
 801306c:	4619      	mov	r1, r3
 801306e:	68f8      	ldr	r0, [r7, #12]
 8013070:	f7ff fe6e 	bl	8012d50 <move_window>
 8013074:	4603      	mov	r3, r0
 8013076:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013078:	7ffb      	ldrb	r3, [r7, #31]
 801307a:	2b00      	cmp	r3, #0
 801307c:	f040 80ab 	bne.w	80131d6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013086:	69bb      	ldr	r3, [r7, #24]
 8013088:	1c59      	adds	r1, r3, #1
 801308a:	61b9      	str	r1, [r7, #24]
 801308c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013090:	4413      	add	r3, r2
 8013092:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013094:	68bb      	ldr	r3, [r7, #8]
 8013096:	f003 0301 	and.w	r3, r3, #1
 801309a:	2b00      	cmp	r3, #0
 801309c:	d00d      	beq.n	80130ba <put_fat+0xa4>
 801309e:	697b      	ldr	r3, [r7, #20]
 80130a0:	781b      	ldrb	r3, [r3, #0]
 80130a2:	b25b      	sxtb	r3, r3
 80130a4:	f003 030f 	and.w	r3, r3, #15
 80130a8:	b25a      	sxtb	r2, r3
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	b2db      	uxtb	r3, r3
 80130ae:	011b      	lsls	r3, r3, #4
 80130b0:	b25b      	sxtb	r3, r3
 80130b2:	4313      	orrs	r3, r2
 80130b4:	b25b      	sxtb	r3, r3
 80130b6:	b2db      	uxtb	r3, r3
 80130b8:	e001      	b.n	80130be <put_fat+0xa8>
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	b2db      	uxtb	r3, r3
 80130be:	697a      	ldr	r2, [r7, #20]
 80130c0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	2201      	movs	r2, #1
 80130c6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80130cc:	69bb      	ldr	r3, [r7, #24]
 80130ce:	0a5b      	lsrs	r3, r3, #9
 80130d0:	4413      	add	r3, r2
 80130d2:	4619      	mov	r1, r3
 80130d4:	68f8      	ldr	r0, [r7, #12]
 80130d6:	f7ff fe3b 	bl	8012d50 <move_window>
 80130da:	4603      	mov	r3, r0
 80130dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80130de:	7ffb      	ldrb	r3, [r7, #31]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d17a      	bne.n	80131da <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80130ea:	69bb      	ldr	r3, [r7, #24]
 80130ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80130f0:	4413      	add	r3, r2
 80130f2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80130f4:	68bb      	ldr	r3, [r7, #8]
 80130f6:	f003 0301 	and.w	r3, r3, #1
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d003      	beq.n	8013106 <put_fat+0xf0>
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	091b      	lsrs	r3, r3, #4
 8013102:	b2db      	uxtb	r3, r3
 8013104:	e00e      	b.n	8013124 <put_fat+0x10e>
 8013106:	697b      	ldr	r3, [r7, #20]
 8013108:	781b      	ldrb	r3, [r3, #0]
 801310a:	b25b      	sxtb	r3, r3
 801310c:	f023 030f 	bic.w	r3, r3, #15
 8013110:	b25a      	sxtb	r2, r3
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	0a1b      	lsrs	r3, r3, #8
 8013116:	b25b      	sxtb	r3, r3
 8013118:	f003 030f 	and.w	r3, r3, #15
 801311c:	b25b      	sxtb	r3, r3
 801311e:	4313      	orrs	r3, r2
 8013120:	b25b      	sxtb	r3, r3
 8013122:	b2db      	uxtb	r3, r3
 8013124:	697a      	ldr	r2, [r7, #20]
 8013126:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	2201      	movs	r2, #1
 801312c:	70da      	strb	r2, [r3, #3]
			break;
 801312e:	e059      	b.n	80131e4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013134:	68bb      	ldr	r3, [r7, #8]
 8013136:	0a1b      	lsrs	r3, r3, #8
 8013138:	4413      	add	r3, r2
 801313a:	4619      	mov	r1, r3
 801313c:	68f8      	ldr	r0, [r7, #12]
 801313e:	f7ff fe07 	bl	8012d50 <move_window>
 8013142:	4603      	mov	r3, r0
 8013144:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013146:	7ffb      	ldrb	r3, [r7, #31]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d148      	bne.n	80131de <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013152:	68bb      	ldr	r3, [r7, #8]
 8013154:	005b      	lsls	r3, r3, #1
 8013156:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801315a:	4413      	add	r3, r2
 801315c:	687a      	ldr	r2, [r7, #4]
 801315e:	b292      	uxth	r2, r2
 8013160:	4611      	mov	r1, r2
 8013162:	4618      	mov	r0, r3
 8013164:	f7ff fb4d 	bl	8012802 <st_word>
			fs->wflag = 1;
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	2201      	movs	r2, #1
 801316c:	70da      	strb	r2, [r3, #3]
			break;
 801316e:	e039      	b.n	80131e4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013174:	68bb      	ldr	r3, [r7, #8]
 8013176:	09db      	lsrs	r3, r3, #7
 8013178:	4413      	add	r3, r2
 801317a:	4619      	mov	r1, r3
 801317c:	68f8      	ldr	r0, [r7, #12]
 801317e:	f7ff fde7 	bl	8012d50 <move_window>
 8013182:	4603      	mov	r3, r0
 8013184:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013186:	7ffb      	ldrb	r3, [r7, #31]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d12a      	bne.n	80131e2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013198:	68bb      	ldr	r3, [r7, #8]
 801319a:	009b      	lsls	r3, r3, #2
 801319c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80131a0:	4413      	add	r3, r2
 80131a2:	4618      	mov	r0, r3
 80131a4:	f7ff fb0a 	bl	80127bc <ld_dword>
 80131a8:	4603      	mov	r3, r0
 80131aa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80131ae:	4323      	orrs	r3, r4
 80131b0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80131b8:	68bb      	ldr	r3, [r7, #8]
 80131ba:	009b      	lsls	r3, r3, #2
 80131bc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80131c0:	4413      	add	r3, r2
 80131c2:	6879      	ldr	r1, [r7, #4]
 80131c4:	4618      	mov	r0, r3
 80131c6:	f7ff fb37 	bl	8012838 <st_dword>
			fs->wflag = 1;
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	2201      	movs	r2, #1
 80131ce:	70da      	strb	r2, [r3, #3]
			break;
 80131d0:	e008      	b.n	80131e4 <put_fat+0x1ce>
		}
	}
 80131d2:	bf00      	nop
 80131d4:	e006      	b.n	80131e4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80131d6:	bf00      	nop
 80131d8:	e004      	b.n	80131e4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80131da:	bf00      	nop
 80131dc:	e002      	b.n	80131e4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80131de:	bf00      	nop
 80131e0:	e000      	b.n	80131e4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80131e2:	bf00      	nop
	return res;
 80131e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80131e6:	4618      	mov	r0, r3
 80131e8:	3724      	adds	r7, #36	; 0x24
 80131ea:	46bd      	mov	sp, r7
 80131ec:	bd90      	pop	{r4, r7, pc}

080131ee <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80131ee:	b580      	push	{r7, lr}
 80131f0:	b088      	sub	sp, #32
 80131f2:	af00      	add	r7, sp, #0
 80131f4:	60f8      	str	r0, [r7, #12]
 80131f6:	60b9      	str	r1, [r7, #8]
 80131f8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80131fa:	2300      	movs	r3, #0
 80131fc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8013204:	68bb      	ldr	r3, [r7, #8]
 8013206:	2b01      	cmp	r3, #1
 8013208:	d904      	bls.n	8013214 <remove_chain+0x26>
 801320a:	69bb      	ldr	r3, [r7, #24]
 801320c:	699b      	ldr	r3, [r3, #24]
 801320e:	68ba      	ldr	r2, [r7, #8]
 8013210:	429a      	cmp	r2, r3
 8013212:	d301      	bcc.n	8013218 <remove_chain+0x2a>
 8013214:	2302      	movs	r3, #2
 8013216:	e04b      	b.n	80132b0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d00c      	beq.n	8013238 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801321e:	f04f 32ff 	mov.w	r2, #4294967295
 8013222:	6879      	ldr	r1, [r7, #4]
 8013224:	69b8      	ldr	r0, [r7, #24]
 8013226:	f7ff fef6 	bl	8013016 <put_fat>
 801322a:	4603      	mov	r3, r0
 801322c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801322e:	7ffb      	ldrb	r3, [r7, #31]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d001      	beq.n	8013238 <remove_chain+0x4a>
 8013234:	7ffb      	ldrb	r3, [r7, #31]
 8013236:	e03b      	b.n	80132b0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8013238:	68b9      	ldr	r1, [r7, #8]
 801323a:	68f8      	ldr	r0, [r7, #12]
 801323c:	f7ff fe43 	bl	8012ec6 <get_fat>
 8013240:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8013242:	697b      	ldr	r3, [r7, #20]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d031      	beq.n	80132ac <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8013248:	697b      	ldr	r3, [r7, #20]
 801324a:	2b01      	cmp	r3, #1
 801324c:	d101      	bne.n	8013252 <remove_chain+0x64>
 801324e:	2302      	movs	r3, #2
 8013250:	e02e      	b.n	80132b0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013252:	697b      	ldr	r3, [r7, #20]
 8013254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013258:	d101      	bne.n	801325e <remove_chain+0x70>
 801325a:	2301      	movs	r3, #1
 801325c:	e028      	b.n	80132b0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801325e:	2200      	movs	r2, #0
 8013260:	68b9      	ldr	r1, [r7, #8]
 8013262:	69b8      	ldr	r0, [r7, #24]
 8013264:	f7ff fed7 	bl	8013016 <put_fat>
 8013268:	4603      	mov	r3, r0
 801326a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801326c:	7ffb      	ldrb	r3, [r7, #31]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d001      	beq.n	8013276 <remove_chain+0x88>
 8013272:	7ffb      	ldrb	r3, [r7, #31]
 8013274:	e01c      	b.n	80132b0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8013276:	69bb      	ldr	r3, [r7, #24]
 8013278:	695a      	ldr	r2, [r3, #20]
 801327a:	69bb      	ldr	r3, [r7, #24]
 801327c:	699b      	ldr	r3, [r3, #24]
 801327e:	3b02      	subs	r3, #2
 8013280:	429a      	cmp	r2, r3
 8013282:	d20b      	bcs.n	801329c <remove_chain+0xae>
			fs->free_clst++;
 8013284:	69bb      	ldr	r3, [r7, #24]
 8013286:	695b      	ldr	r3, [r3, #20]
 8013288:	1c5a      	adds	r2, r3, #1
 801328a:	69bb      	ldr	r3, [r7, #24]
 801328c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 801328e:	69bb      	ldr	r3, [r7, #24]
 8013290:	791b      	ldrb	r3, [r3, #4]
 8013292:	f043 0301 	orr.w	r3, r3, #1
 8013296:	b2da      	uxtb	r2, r3
 8013298:	69bb      	ldr	r3, [r7, #24]
 801329a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801329c:	697b      	ldr	r3, [r7, #20]
 801329e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80132a0:	69bb      	ldr	r3, [r7, #24]
 80132a2:	699b      	ldr	r3, [r3, #24]
 80132a4:	68ba      	ldr	r2, [r7, #8]
 80132a6:	429a      	cmp	r2, r3
 80132a8:	d3c6      	bcc.n	8013238 <remove_chain+0x4a>
 80132aa:	e000      	b.n	80132ae <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80132ac:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80132ae:	2300      	movs	r3, #0
}
 80132b0:	4618      	mov	r0, r3
 80132b2:	3720      	adds	r7, #32
 80132b4:	46bd      	mov	sp, r7
 80132b6:	bd80      	pop	{r7, pc}

080132b8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80132b8:	b580      	push	{r7, lr}
 80132ba:	b088      	sub	sp, #32
 80132bc:	af00      	add	r7, sp, #0
 80132be:	6078      	str	r0, [r7, #4]
 80132c0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80132c8:	683b      	ldr	r3, [r7, #0]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d10d      	bne.n	80132ea <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80132ce:	693b      	ldr	r3, [r7, #16]
 80132d0:	691b      	ldr	r3, [r3, #16]
 80132d2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80132d4:	69bb      	ldr	r3, [r7, #24]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d004      	beq.n	80132e4 <create_chain+0x2c>
 80132da:	693b      	ldr	r3, [r7, #16]
 80132dc:	699b      	ldr	r3, [r3, #24]
 80132de:	69ba      	ldr	r2, [r7, #24]
 80132e0:	429a      	cmp	r2, r3
 80132e2:	d31b      	bcc.n	801331c <create_chain+0x64>
 80132e4:	2301      	movs	r3, #1
 80132e6:	61bb      	str	r3, [r7, #24]
 80132e8:	e018      	b.n	801331c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80132ea:	6839      	ldr	r1, [r7, #0]
 80132ec:	6878      	ldr	r0, [r7, #4]
 80132ee:	f7ff fdea 	bl	8012ec6 <get_fat>
 80132f2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	2b01      	cmp	r3, #1
 80132f8:	d801      	bhi.n	80132fe <create_chain+0x46>
 80132fa:	2301      	movs	r3, #1
 80132fc:	e070      	b.n	80133e0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013304:	d101      	bne.n	801330a <create_chain+0x52>
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	e06a      	b.n	80133e0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801330a:	693b      	ldr	r3, [r7, #16]
 801330c:	699b      	ldr	r3, [r3, #24]
 801330e:	68fa      	ldr	r2, [r7, #12]
 8013310:	429a      	cmp	r2, r3
 8013312:	d201      	bcs.n	8013318 <create_chain+0x60>
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	e063      	b.n	80133e0 <create_chain+0x128>
		scl = clst;
 8013318:	683b      	ldr	r3, [r7, #0]
 801331a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801331c:	69bb      	ldr	r3, [r7, #24]
 801331e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8013320:	69fb      	ldr	r3, [r7, #28]
 8013322:	3301      	adds	r3, #1
 8013324:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8013326:	693b      	ldr	r3, [r7, #16]
 8013328:	699b      	ldr	r3, [r3, #24]
 801332a:	69fa      	ldr	r2, [r7, #28]
 801332c:	429a      	cmp	r2, r3
 801332e:	d307      	bcc.n	8013340 <create_chain+0x88>
				ncl = 2;
 8013330:	2302      	movs	r3, #2
 8013332:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8013334:	69fa      	ldr	r2, [r7, #28]
 8013336:	69bb      	ldr	r3, [r7, #24]
 8013338:	429a      	cmp	r2, r3
 801333a:	d901      	bls.n	8013340 <create_chain+0x88>
 801333c:	2300      	movs	r3, #0
 801333e:	e04f      	b.n	80133e0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013340:	69f9      	ldr	r1, [r7, #28]
 8013342:	6878      	ldr	r0, [r7, #4]
 8013344:	f7ff fdbf 	bl	8012ec6 <get_fat>
 8013348:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d00e      	beq.n	801336e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	2b01      	cmp	r3, #1
 8013354:	d003      	beq.n	801335e <create_chain+0xa6>
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	f1b3 3fff 	cmp.w	r3, #4294967295
 801335c:	d101      	bne.n	8013362 <create_chain+0xaa>
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	e03e      	b.n	80133e0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013362:	69fa      	ldr	r2, [r7, #28]
 8013364:	69bb      	ldr	r3, [r7, #24]
 8013366:	429a      	cmp	r2, r3
 8013368:	d1da      	bne.n	8013320 <create_chain+0x68>
 801336a:	2300      	movs	r3, #0
 801336c:	e038      	b.n	80133e0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801336e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013370:	f04f 32ff 	mov.w	r2, #4294967295
 8013374:	69f9      	ldr	r1, [r7, #28]
 8013376:	6938      	ldr	r0, [r7, #16]
 8013378:	f7ff fe4d 	bl	8013016 <put_fat>
 801337c:	4603      	mov	r3, r0
 801337e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8013380:	7dfb      	ldrb	r3, [r7, #23]
 8013382:	2b00      	cmp	r3, #0
 8013384:	d109      	bne.n	801339a <create_chain+0xe2>
 8013386:	683b      	ldr	r3, [r7, #0]
 8013388:	2b00      	cmp	r3, #0
 801338a:	d006      	beq.n	801339a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801338c:	69fa      	ldr	r2, [r7, #28]
 801338e:	6839      	ldr	r1, [r7, #0]
 8013390:	6938      	ldr	r0, [r7, #16]
 8013392:	f7ff fe40 	bl	8013016 <put_fat>
 8013396:	4603      	mov	r3, r0
 8013398:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801339a:	7dfb      	ldrb	r3, [r7, #23]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d116      	bne.n	80133ce <create_chain+0x116>
		fs->last_clst = ncl;
 80133a0:	693b      	ldr	r3, [r7, #16]
 80133a2:	69fa      	ldr	r2, [r7, #28]
 80133a4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80133a6:	693b      	ldr	r3, [r7, #16]
 80133a8:	695a      	ldr	r2, [r3, #20]
 80133aa:	693b      	ldr	r3, [r7, #16]
 80133ac:	699b      	ldr	r3, [r3, #24]
 80133ae:	3b02      	subs	r3, #2
 80133b0:	429a      	cmp	r2, r3
 80133b2:	d804      	bhi.n	80133be <create_chain+0x106>
 80133b4:	693b      	ldr	r3, [r7, #16]
 80133b6:	695b      	ldr	r3, [r3, #20]
 80133b8:	1e5a      	subs	r2, r3, #1
 80133ba:	693b      	ldr	r3, [r7, #16]
 80133bc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80133be:	693b      	ldr	r3, [r7, #16]
 80133c0:	791b      	ldrb	r3, [r3, #4]
 80133c2:	f043 0301 	orr.w	r3, r3, #1
 80133c6:	b2da      	uxtb	r2, r3
 80133c8:	693b      	ldr	r3, [r7, #16]
 80133ca:	711a      	strb	r2, [r3, #4]
 80133cc:	e007      	b.n	80133de <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80133ce:	7dfb      	ldrb	r3, [r7, #23]
 80133d0:	2b01      	cmp	r3, #1
 80133d2:	d102      	bne.n	80133da <create_chain+0x122>
 80133d4:	f04f 33ff 	mov.w	r3, #4294967295
 80133d8:	e000      	b.n	80133dc <create_chain+0x124>
 80133da:	2301      	movs	r3, #1
 80133dc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80133de:	69fb      	ldr	r3, [r7, #28]
}
 80133e0:	4618      	mov	r0, r3
 80133e2:	3720      	adds	r7, #32
 80133e4:	46bd      	mov	sp, r7
 80133e6:	bd80      	pop	{r7, pc}

080133e8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80133e8:	b480      	push	{r7}
 80133ea:	b087      	sub	sp, #28
 80133ec:	af00      	add	r7, sp, #0
 80133ee:	6078      	str	r0, [r7, #4]
 80133f0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133fc:	3304      	adds	r3, #4
 80133fe:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013400:	683b      	ldr	r3, [r7, #0]
 8013402:	0a5b      	lsrs	r3, r3, #9
 8013404:	68fa      	ldr	r2, [r7, #12]
 8013406:	8952      	ldrh	r2, [r2, #10]
 8013408:	fbb3 f3f2 	udiv	r3, r3, r2
 801340c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801340e:	693b      	ldr	r3, [r7, #16]
 8013410:	1d1a      	adds	r2, r3, #4
 8013412:	613a      	str	r2, [r7, #16]
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013418:	68bb      	ldr	r3, [r7, #8]
 801341a:	2b00      	cmp	r3, #0
 801341c:	d101      	bne.n	8013422 <clmt_clust+0x3a>
 801341e:	2300      	movs	r3, #0
 8013420:	e010      	b.n	8013444 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8013422:	697a      	ldr	r2, [r7, #20]
 8013424:	68bb      	ldr	r3, [r7, #8]
 8013426:	429a      	cmp	r2, r3
 8013428:	d307      	bcc.n	801343a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801342a:	697a      	ldr	r2, [r7, #20]
 801342c:	68bb      	ldr	r3, [r7, #8]
 801342e:	1ad3      	subs	r3, r2, r3
 8013430:	617b      	str	r3, [r7, #20]
 8013432:	693b      	ldr	r3, [r7, #16]
 8013434:	3304      	adds	r3, #4
 8013436:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013438:	e7e9      	b.n	801340e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801343a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801343c:	693b      	ldr	r3, [r7, #16]
 801343e:	681a      	ldr	r2, [r3, #0]
 8013440:	697b      	ldr	r3, [r7, #20]
 8013442:	4413      	add	r3, r2
}
 8013444:	4618      	mov	r0, r3
 8013446:	371c      	adds	r7, #28
 8013448:	46bd      	mov	sp, r7
 801344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344e:	4770      	bx	lr

08013450 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8013450:	b580      	push	{r7, lr}
 8013452:	b086      	sub	sp, #24
 8013454:	af00      	add	r7, sp, #0
 8013456:	6078      	str	r0, [r7, #4]
 8013458:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8013460:	683b      	ldr	r3, [r7, #0]
 8013462:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013466:	d204      	bcs.n	8013472 <dir_sdi+0x22>
 8013468:	683b      	ldr	r3, [r7, #0]
 801346a:	f003 031f 	and.w	r3, r3, #31
 801346e:	2b00      	cmp	r3, #0
 8013470:	d001      	beq.n	8013476 <dir_sdi+0x26>
		return FR_INT_ERR;
 8013472:	2302      	movs	r3, #2
 8013474:	e063      	b.n	801353e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	683a      	ldr	r2, [r7, #0]
 801347a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	689b      	ldr	r3, [r3, #8]
 8013480:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8013482:	697b      	ldr	r3, [r7, #20]
 8013484:	2b00      	cmp	r3, #0
 8013486:	d106      	bne.n	8013496 <dir_sdi+0x46>
 8013488:	693b      	ldr	r3, [r7, #16]
 801348a:	781b      	ldrb	r3, [r3, #0]
 801348c:	2b02      	cmp	r3, #2
 801348e:	d902      	bls.n	8013496 <dir_sdi+0x46>
		clst = fs->dirbase;
 8013490:	693b      	ldr	r3, [r7, #16]
 8013492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013494:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013496:	697b      	ldr	r3, [r7, #20]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d10c      	bne.n	80134b6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801349c:	683b      	ldr	r3, [r7, #0]
 801349e:	095b      	lsrs	r3, r3, #5
 80134a0:	693a      	ldr	r2, [r7, #16]
 80134a2:	8912      	ldrh	r2, [r2, #8]
 80134a4:	4293      	cmp	r3, r2
 80134a6:	d301      	bcc.n	80134ac <dir_sdi+0x5c>
 80134a8:	2302      	movs	r3, #2
 80134aa:	e048      	b.n	801353e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80134ac:	693b      	ldr	r3, [r7, #16]
 80134ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	61da      	str	r2, [r3, #28]
 80134b4:	e029      	b.n	801350a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80134b6:	693b      	ldr	r3, [r7, #16]
 80134b8:	895b      	ldrh	r3, [r3, #10]
 80134ba:	025b      	lsls	r3, r3, #9
 80134bc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80134be:	e019      	b.n	80134f4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	6979      	ldr	r1, [r7, #20]
 80134c4:	4618      	mov	r0, r3
 80134c6:	f7ff fcfe 	bl	8012ec6 <get_fat>
 80134ca:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80134cc:	697b      	ldr	r3, [r7, #20]
 80134ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134d2:	d101      	bne.n	80134d8 <dir_sdi+0x88>
 80134d4:	2301      	movs	r3, #1
 80134d6:	e032      	b.n	801353e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80134d8:	697b      	ldr	r3, [r7, #20]
 80134da:	2b01      	cmp	r3, #1
 80134dc:	d904      	bls.n	80134e8 <dir_sdi+0x98>
 80134de:	693b      	ldr	r3, [r7, #16]
 80134e0:	699b      	ldr	r3, [r3, #24]
 80134e2:	697a      	ldr	r2, [r7, #20]
 80134e4:	429a      	cmp	r2, r3
 80134e6:	d301      	bcc.n	80134ec <dir_sdi+0x9c>
 80134e8:	2302      	movs	r3, #2
 80134ea:	e028      	b.n	801353e <dir_sdi+0xee>
			ofs -= csz;
 80134ec:	683a      	ldr	r2, [r7, #0]
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	1ad3      	subs	r3, r2, r3
 80134f2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80134f4:	683a      	ldr	r2, [r7, #0]
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	429a      	cmp	r2, r3
 80134fa:	d2e1      	bcs.n	80134c0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80134fc:	6979      	ldr	r1, [r7, #20]
 80134fe:	6938      	ldr	r0, [r7, #16]
 8013500:	f7ff fcc2 	bl	8012e88 <clust2sect>
 8013504:	4602      	mov	r2, r0
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	697a      	ldr	r2, [r7, #20]
 801350e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	69db      	ldr	r3, [r3, #28]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d101      	bne.n	801351c <dir_sdi+0xcc>
 8013518:	2302      	movs	r3, #2
 801351a:	e010      	b.n	801353e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	69da      	ldr	r2, [r3, #28]
 8013520:	683b      	ldr	r3, [r7, #0]
 8013522:	0a5b      	lsrs	r3, r3, #9
 8013524:	441a      	add	r2, r3
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801352a:	693b      	ldr	r3, [r7, #16]
 801352c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013530:	683b      	ldr	r3, [r7, #0]
 8013532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013536:	441a      	add	r2, r3
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801353c:	2300      	movs	r3, #0
}
 801353e:	4618      	mov	r0, r3
 8013540:	3718      	adds	r7, #24
 8013542:	46bd      	mov	sp, r7
 8013544:	bd80      	pop	{r7, pc}

08013546 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013546:	b580      	push	{r7, lr}
 8013548:	b086      	sub	sp, #24
 801354a:	af00      	add	r7, sp, #0
 801354c:	6078      	str	r0, [r7, #4]
 801354e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	695b      	ldr	r3, [r3, #20]
 801355a:	3320      	adds	r3, #32
 801355c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	69db      	ldr	r3, [r3, #28]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d003      	beq.n	801356e <dir_next+0x28>
 8013566:	68bb      	ldr	r3, [r7, #8]
 8013568:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801356c:	d301      	bcc.n	8013572 <dir_next+0x2c>
 801356e:	2304      	movs	r3, #4
 8013570:	e0aa      	b.n	80136c8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013572:	68bb      	ldr	r3, [r7, #8]
 8013574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013578:	2b00      	cmp	r3, #0
 801357a:	f040 8098 	bne.w	80136ae <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	69db      	ldr	r3, [r3, #28]
 8013582:	1c5a      	adds	r2, r3, #1
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	699b      	ldr	r3, [r3, #24]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d10b      	bne.n	80135a8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013590:	68bb      	ldr	r3, [r7, #8]
 8013592:	095b      	lsrs	r3, r3, #5
 8013594:	68fa      	ldr	r2, [r7, #12]
 8013596:	8912      	ldrh	r2, [r2, #8]
 8013598:	4293      	cmp	r3, r2
 801359a:	f0c0 8088 	bcc.w	80136ae <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	2200      	movs	r2, #0
 80135a2:	61da      	str	r2, [r3, #28]
 80135a4:	2304      	movs	r3, #4
 80135a6:	e08f      	b.n	80136c8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80135a8:	68bb      	ldr	r3, [r7, #8]
 80135aa:	0a5b      	lsrs	r3, r3, #9
 80135ac:	68fa      	ldr	r2, [r7, #12]
 80135ae:	8952      	ldrh	r2, [r2, #10]
 80135b0:	3a01      	subs	r2, #1
 80135b2:	4013      	ands	r3, r2
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d17a      	bne.n	80136ae <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80135b8:	687a      	ldr	r2, [r7, #4]
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	699b      	ldr	r3, [r3, #24]
 80135be:	4619      	mov	r1, r3
 80135c0:	4610      	mov	r0, r2
 80135c2:	f7ff fc80 	bl	8012ec6 <get_fat>
 80135c6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80135c8:	697b      	ldr	r3, [r7, #20]
 80135ca:	2b01      	cmp	r3, #1
 80135cc:	d801      	bhi.n	80135d2 <dir_next+0x8c>
 80135ce:	2302      	movs	r3, #2
 80135d0:	e07a      	b.n	80136c8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80135d2:	697b      	ldr	r3, [r7, #20]
 80135d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135d8:	d101      	bne.n	80135de <dir_next+0x98>
 80135da:	2301      	movs	r3, #1
 80135dc:	e074      	b.n	80136c8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	699b      	ldr	r3, [r3, #24]
 80135e2:	697a      	ldr	r2, [r7, #20]
 80135e4:	429a      	cmp	r2, r3
 80135e6:	d358      	bcc.n	801369a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80135e8:	683b      	ldr	r3, [r7, #0]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d104      	bne.n	80135f8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	2200      	movs	r2, #0
 80135f2:	61da      	str	r2, [r3, #28]
 80135f4:	2304      	movs	r3, #4
 80135f6:	e067      	b.n	80136c8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80135f8:	687a      	ldr	r2, [r7, #4]
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	699b      	ldr	r3, [r3, #24]
 80135fe:	4619      	mov	r1, r3
 8013600:	4610      	mov	r0, r2
 8013602:	f7ff fe59 	bl	80132b8 <create_chain>
 8013606:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8013608:	697b      	ldr	r3, [r7, #20]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d101      	bne.n	8013612 <dir_next+0xcc>
 801360e:	2307      	movs	r3, #7
 8013610:	e05a      	b.n	80136c8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013612:	697b      	ldr	r3, [r7, #20]
 8013614:	2b01      	cmp	r3, #1
 8013616:	d101      	bne.n	801361c <dir_next+0xd6>
 8013618:	2302      	movs	r3, #2
 801361a:	e055      	b.n	80136c8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801361c:	697b      	ldr	r3, [r7, #20]
 801361e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013622:	d101      	bne.n	8013628 <dir_next+0xe2>
 8013624:	2301      	movs	r3, #1
 8013626:	e04f      	b.n	80136c8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8013628:	68f8      	ldr	r0, [r7, #12]
 801362a:	f7ff fb4d 	bl	8012cc8 <sync_window>
 801362e:	4603      	mov	r3, r0
 8013630:	2b00      	cmp	r3, #0
 8013632:	d001      	beq.n	8013638 <dir_next+0xf2>
 8013634:	2301      	movs	r3, #1
 8013636:	e047      	b.n	80136c8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	3334      	adds	r3, #52	; 0x34
 801363c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013640:	2100      	movs	r1, #0
 8013642:	4618      	mov	r0, r3
 8013644:	f7ff f945 	bl	80128d2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013648:	2300      	movs	r3, #0
 801364a:	613b      	str	r3, [r7, #16]
 801364c:	6979      	ldr	r1, [r7, #20]
 801364e:	68f8      	ldr	r0, [r7, #12]
 8013650:	f7ff fc1a 	bl	8012e88 <clust2sect>
 8013654:	4602      	mov	r2, r0
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	631a      	str	r2, [r3, #48]	; 0x30
 801365a:	e012      	b.n	8013682 <dir_next+0x13c>
						fs->wflag = 1;
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	2201      	movs	r2, #1
 8013660:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013662:	68f8      	ldr	r0, [r7, #12]
 8013664:	f7ff fb30 	bl	8012cc8 <sync_window>
 8013668:	4603      	mov	r3, r0
 801366a:	2b00      	cmp	r3, #0
 801366c:	d001      	beq.n	8013672 <dir_next+0x12c>
 801366e:	2301      	movs	r3, #1
 8013670:	e02a      	b.n	80136c8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013672:	693b      	ldr	r3, [r7, #16]
 8013674:	3301      	adds	r3, #1
 8013676:	613b      	str	r3, [r7, #16]
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801367c:	1c5a      	adds	r2, r3, #1
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	631a      	str	r2, [r3, #48]	; 0x30
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	895b      	ldrh	r3, [r3, #10]
 8013686:	461a      	mov	r2, r3
 8013688:	693b      	ldr	r3, [r7, #16]
 801368a:	4293      	cmp	r3, r2
 801368c:	d3e6      	bcc.n	801365c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013692:	693b      	ldr	r3, [r7, #16]
 8013694:	1ad2      	subs	r2, r2, r3
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	697a      	ldr	r2, [r7, #20]
 801369e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80136a0:	6979      	ldr	r1, [r7, #20]
 80136a2:	68f8      	ldr	r0, [r7, #12]
 80136a4:	f7ff fbf0 	bl	8012e88 <clust2sect>
 80136a8:	4602      	mov	r2, r0
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	68ba      	ldr	r2, [r7, #8]
 80136b2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80136ba:	68bb      	ldr	r3, [r7, #8]
 80136bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80136c0:	441a      	add	r2, r3
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80136c6:	2300      	movs	r3, #0
}
 80136c8:	4618      	mov	r0, r3
 80136ca:	3718      	adds	r7, #24
 80136cc:	46bd      	mov	sp, r7
 80136ce:	bd80      	pop	{r7, pc}

080136d0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b086      	sub	sp, #24
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]
 80136d8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80136e0:	2100      	movs	r1, #0
 80136e2:	6878      	ldr	r0, [r7, #4]
 80136e4:	f7ff feb4 	bl	8013450 <dir_sdi>
 80136e8:	4603      	mov	r3, r0
 80136ea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80136ec:	7dfb      	ldrb	r3, [r7, #23]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d12b      	bne.n	801374a <dir_alloc+0x7a>
		n = 0;
 80136f2:	2300      	movs	r3, #0
 80136f4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	69db      	ldr	r3, [r3, #28]
 80136fa:	4619      	mov	r1, r3
 80136fc:	68f8      	ldr	r0, [r7, #12]
 80136fe:	f7ff fb27 	bl	8012d50 <move_window>
 8013702:	4603      	mov	r3, r0
 8013704:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013706:	7dfb      	ldrb	r3, [r7, #23]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d11d      	bne.n	8013748 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	6a1b      	ldr	r3, [r3, #32]
 8013710:	781b      	ldrb	r3, [r3, #0]
 8013712:	2be5      	cmp	r3, #229	; 0xe5
 8013714:	d004      	beq.n	8013720 <dir_alloc+0x50>
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	6a1b      	ldr	r3, [r3, #32]
 801371a:	781b      	ldrb	r3, [r3, #0]
 801371c:	2b00      	cmp	r3, #0
 801371e:	d107      	bne.n	8013730 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013720:	693b      	ldr	r3, [r7, #16]
 8013722:	3301      	adds	r3, #1
 8013724:	613b      	str	r3, [r7, #16]
 8013726:	693a      	ldr	r2, [r7, #16]
 8013728:	683b      	ldr	r3, [r7, #0]
 801372a:	429a      	cmp	r2, r3
 801372c:	d102      	bne.n	8013734 <dir_alloc+0x64>
 801372e:	e00c      	b.n	801374a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013730:	2300      	movs	r3, #0
 8013732:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013734:	2101      	movs	r1, #1
 8013736:	6878      	ldr	r0, [r7, #4]
 8013738:	f7ff ff05 	bl	8013546 <dir_next>
 801373c:	4603      	mov	r3, r0
 801373e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013740:	7dfb      	ldrb	r3, [r7, #23]
 8013742:	2b00      	cmp	r3, #0
 8013744:	d0d7      	beq.n	80136f6 <dir_alloc+0x26>
 8013746:	e000      	b.n	801374a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013748:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801374a:	7dfb      	ldrb	r3, [r7, #23]
 801374c:	2b04      	cmp	r3, #4
 801374e:	d101      	bne.n	8013754 <dir_alloc+0x84>
 8013750:	2307      	movs	r3, #7
 8013752:	75fb      	strb	r3, [r7, #23]
	return res;
 8013754:	7dfb      	ldrb	r3, [r7, #23]
}
 8013756:	4618      	mov	r0, r3
 8013758:	3718      	adds	r7, #24
 801375a:	46bd      	mov	sp, r7
 801375c:	bd80      	pop	{r7, pc}

0801375e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801375e:	b580      	push	{r7, lr}
 8013760:	b084      	sub	sp, #16
 8013762:	af00      	add	r7, sp, #0
 8013764:	6078      	str	r0, [r7, #4]
 8013766:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013768:	683b      	ldr	r3, [r7, #0]
 801376a:	331a      	adds	r3, #26
 801376c:	4618      	mov	r0, r3
 801376e:	f7ff f80d 	bl	801278c <ld_word>
 8013772:	4603      	mov	r3, r0
 8013774:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	781b      	ldrb	r3, [r3, #0]
 801377a:	2b03      	cmp	r3, #3
 801377c:	d109      	bne.n	8013792 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801377e:	683b      	ldr	r3, [r7, #0]
 8013780:	3314      	adds	r3, #20
 8013782:	4618      	mov	r0, r3
 8013784:	f7ff f802 	bl	801278c <ld_word>
 8013788:	4603      	mov	r3, r0
 801378a:	041b      	lsls	r3, r3, #16
 801378c:	68fa      	ldr	r2, [r7, #12]
 801378e:	4313      	orrs	r3, r2
 8013790:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8013792:	68fb      	ldr	r3, [r7, #12]
}
 8013794:	4618      	mov	r0, r3
 8013796:	3710      	adds	r7, #16
 8013798:	46bd      	mov	sp, r7
 801379a:	bd80      	pop	{r7, pc}

0801379c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801379c:	b580      	push	{r7, lr}
 801379e:	b084      	sub	sp, #16
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	60f8      	str	r0, [r7, #12]
 80137a4:	60b9      	str	r1, [r7, #8]
 80137a6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80137a8:	68bb      	ldr	r3, [r7, #8]
 80137aa:	331a      	adds	r3, #26
 80137ac:	687a      	ldr	r2, [r7, #4]
 80137ae:	b292      	uxth	r2, r2
 80137b0:	4611      	mov	r1, r2
 80137b2:	4618      	mov	r0, r3
 80137b4:	f7ff f825 	bl	8012802 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	781b      	ldrb	r3, [r3, #0]
 80137bc:	2b03      	cmp	r3, #3
 80137be:	d109      	bne.n	80137d4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80137c0:	68bb      	ldr	r3, [r7, #8]
 80137c2:	f103 0214 	add.w	r2, r3, #20
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	0c1b      	lsrs	r3, r3, #16
 80137ca:	b29b      	uxth	r3, r3
 80137cc:	4619      	mov	r1, r3
 80137ce:	4610      	mov	r0, r2
 80137d0:	f7ff f817 	bl	8012802 <st_word>
	}
}
 80137d4:	bf00      	nop
 80137d6:	3710      	adds	r7, #16
 80137d8:	46bd      	mov	sp, r7
 80137da:	bd80      	pop	{r7, pc}

080137dc <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80137dc:	b580      	push	{r7, lr}
 80137de:	b086      	sub	sp, #24
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	6078      	str	r0, [r7, #4]
 80137e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80137e6:	2304      	movs	r3, #4
 80137e8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80137f0:	e03c      	b.n	801386c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	69db      	ldr	r3, [r3, #28]
 80137f6:	4619      	mov	r1, r3
 80137f8:	6938      	ldr	r0, [r7, #16]
 80137fa:	f7ff faa9 	bl	8012d50 <move_window>
 80137fe:	4603      	mov	r3, r0
 8013800:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013802:	7dfb      	ldrb	r3, [r7, #23]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d136      	bne.n	8013876 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	6a1b      	ldr	r3, [r3, #32]
 801380c:	781b      	ldrb	r3, [r3, #0]
 801380e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8013810:	7bfb      	ldrb	r3, [r7, #15]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d102      	bne.n	801381c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8013816:	2304      	movs	r3, #4
 8013818:	75fb      	strb	r3, [r7, #23]
 801381a:	e031      	b.n	8013880 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	6a1b      	ldr	r3, [r3, #32]
 8013820:	330b      	adds	r3, #11
 8013822:	781b      	ldrb	r3, [r3, #0]
 8013824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013828:	73bb      	strb	r3, [r7, #14]
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	7bba      	ldrb	r2, [r7, #14]
 801382e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8013830:	7bfb      	ldrb	r3, [r7, #15]
 8013832:	2be5      	cmp	r3, #229	; 0xe5
 8013834:	d011      	beq.n	801385a <dir_read+0x7e>
 8013836:	7bfb      	ldrb	r3, [r7, #15]
 8013838:	2b2e      	cmp	r3, #46	; 0x2e
 801383a:	d00e      	beq.n	801385a <dir_read+0x7e>
 801383c:	7bbb      	ldrb	r3, [r7, #14]
 801383e:	2b0f      	cmp	r3, #15
 8013840:	d00b      	beq.n	801385a <dir_read+0x7e>
 8013842:	7bbb      	ldrb	r3, [r7, #14]
 8013844:	f023 0320 	bic.w	r3, r3, #32
 8013848:	2b08      	cmp	r3, #8
 801384a:	bf0c      	ite	eq
 801384c:	2301      	moveq	r3, #1
 801384e:	2300      	movne	r3, #0
 8013850:	b2db      	uxtb	r3, r3
 8013852:	461a      	mov	r2, r3
 8013854:	683b      	ldr	r3, [r7, #0]
 8013856:	4293      	cmp	r3, r2
 8013858:	d00f      	beq.n	801387a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801385a:	2100      	movs	r1, #0
 801385c:	6878      	ldr	r0, [r7, #4]
 801385e:	f7ff fe72 	bl	8013546 <dir_next>
 8013862:	4603      	mov	r3, r0
 8013864:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013866:	7dfb      	ldrb	r3, [r7, #23]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d108      	bne.n	801387e <dir_read+0xa2>
	while (dp->sect) {
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	69db      	ldr	r3, [r3, #28]
 8013870:	2b00      	cmp	r3, #0
 8013872:	d1be      	bne.n	80137f2 <dir_read+0x16>
 8013874:	e004      	b.n	8013880 <dir_read+0xa4>
		if (res != FR_OK) break;
 8013876:	bf00      	nop
 8013878:	e002      	b.n	8013880 <dir_read+0xa4>
				break;
 801387a:	bf00      	nop
 801387c:	e000      	b.n	8013880 <dir_read+0xa4>
		if (res != FR_OK) break;
 801387e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8013880:	7dfb      	ldrb	r3, [r7, #23]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d002      	beq.n	801388c <dir_read+0xb0>
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	2200      	movs	r2, #0
 801388a:	61da      	str	r2, [r3, #28]
	return res;
 801388c:	7dfb      	ldrb	r3, [r7, #23]
}
 801388e:	4618      	mov	r0, r3
 8013890:	3718      	adds	r7, #24
 8013892:	46bd      	mov	sp, r7
 8013894:	bd80      	pop	{r7, pc}

08013896 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8013896:	b580      	push	{r7, lr}
 8013898:	b086      	sub	sp, #24
 801389a:	af00      	add	r7, sp, #0
 801389c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80138a4:	2100      	movs	r1, #0
 80138a6:	6878      	ldr	r0, [r7, #4]
 80138a8:	f7ff fdd2 	bl	8013450 <dir_sdi>
 80138ac:	4603      	mov	r3, r0
 80138ae:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80138b0:	7dfb      	ldrb	r3, [r7, #23]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d001      	beq.n	80138ba <dir_find+0x24>
 80138b6:	7dfb      	ldrb	r3, [r7, #23]
 80138b8:	e03e      	b.n	8013938 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	69db      	ldr	r3, [r3, #28]
 80138be:	4619      	mov	r1, r3
 80138c0:	6938      	ldr	r0, [r7, #16]
 80138c2:	f7ff fa45 	bl	8012d50 <move_window>
 80138c6:	4603      	mov	r3, r0
 80138c8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80138ca:	7dfb      	ldrb	r3, [r7, #23]
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d12f      	bne.n	8013930 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	6a1b      	ldr	r3, [r3, #32]
 80138d4:	781b      	ldrb	r3, [r3, #0]
 80138d6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80138d8:	7bfb      	ldrb	r3, [r7, #15]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d102      	bne.n	80138e4 <dir_find+0x4e>
 80138de:	2304      	movs	r3, #4
 80138e0:	75fb      	strb	r3, [r7, #23]
 80138e2:	e028      	b.n	8013936 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	6a1b      	ldr	r3, [r3, #32]
 80138e8:	330b      	adds	r3, #11
 80138ea:	781b      	ldrb	r3, [r3, #0]
 80138ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80138f0:	b2da      	uxtb	r2, r3
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	6a1b      	ldr	r3, [r3, #32]
 80138fa:	330b      	adds	r3, #11
 80138fc:	781b      	ldrb	r3, [r3, #0]
 80138fe:	f003 0308 	and.w	r3, r3, #8
 8013902:	2b00      	cmp	r3, #0
 8013904:	d10a      	bne.n	801391c <dir_find+0x86>
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	6a18      	ldr	r0, [r3, #32]
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	3324      	adds	r3, #36	; 0x24
 801390e:	220b      	movs	r2, #11
 8013910:	4619      	mov	r1, r3
 8013912:	f7fe fff9 	bl	8012908 <mem_cmp>
 8013916:	4603      	mov	r3, r0
 8013918:	2b00      	cmp	r3, #0
 801391a:	d00b      	beq.n	8013934 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801391c:	2100      	movs	r1, #0
 801391e:	6878      	ldr	r0, [r7, #4]
 8013920:	f7ff fe11 	bl	8013546 <dir_next>
 8013924:	4603      	mov	r3, r0
 8013926:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8013928:	7dfb      	ldrb	r3, [r7, #23]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d0c5      	beq.n	80138ba <dir_find+0x24>
 801392e:	e002      	b.n	8013936 <dir_find+0xa0>
		if (res != FR_OK) break;
 8013930:	bf00      	nop
 8013932:	e000      	b.n	8013936 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013934:	bf00      	nop

	return res;
 8013936:	7dfb      	ldrb	r3, [r7, #23]
}
 8013938:	4618      	mov	r0, r3
 801393a:	3718      	adds	r7, #24
 801393c:	46bd      	mov	sp, r7
 801393e:	bd80      	pop	{r7, pc}

08013940 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b084      	sub	sp, #16
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801394e:	2101      	movs	r1, #1
 8013950:	6878      	ldr	r0, [r7, #4]
 8013952:	f7ff febd 	bl	80136d0 <dir_alloc>
 8013956:	4603      	mov	r3, r0
 8013958:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801395a:	7bfb      	ldrb	r3, [r7, #15]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d11c      	bne.n	801399a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	69db      	ldr	r3, [r3, #28]
 8013964:	4619      	mov	r1, r3
 8013966:	68b8      	ldr	r0, [r7, #8]
 8013968:	f7ff f9f2 	bl	8012d50 <move_window>
 801396c:	4603      	mov	r3, r0
 801396e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013970:	7bfb      	ldrb	r3, [r7, #15]
 8013972:	2b00      	cmp	r3, #0
 8013974:	d111      	bne.n	801399a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	6a1b      	ldr	r3, [r3, #32]
 801397a:	2220      	movs	r2, #32
 801397c:	2100      	movs	r1, #0
 801397e:	4618      	mov	r0, r3
 8013980:	f7fe ffa7 	bl	80128d2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	6a18      	ldr	r0, [r3, #32]
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	3324      	adds	r3, #36	; 0x24
 801398c:	220b      	movs	r2, #11
 801398e:	4619      	mov	r1, r3
 8013990:	f7fe ff7e 	bl	8012890 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8013994:	68bb      	ldr	r3, [r7, #8]
 8013996:	2201      	movs	r2, #1
 8013998:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801399a:	7bfb      	ldrb	r3, [r7, #15]
}
 801399c:	4618      	mov	r0, r3
 801399e:	3710      	adds	r7, #16
 80139a0:	46bd      	mov	sp, r7
 80139a2:	bd80      	pop	{r7, pc}

080139a4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80139a4:	b580      	push	{r7, lr}
 80139a6:	b086      	sub	sp, #24
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	6078      	str	r0, [r7, #4]
 80139ac:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80139ae:	683b      	ldr	r3, [r7, #0]
 80139b0:	2200      	movs	r2, #0
 80139b2:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	69db      	ldr	r3, [r3, #28]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d04e      	beq.n	8013a5a <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80139bc:	2300      	movs	r3, #0
 80139be:	613b      	str	r3, [r7, #16]
 80139c0:	693b      	ldr	r3, [r7, #16]
 80139c2:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80139c4:	e021      	b.n	8013a0a <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	6a1a      	ldr	r2, [r3, #32]
 80139ca:	697b      	ldr	r3, [r7, #20]
 80139cc:	1c59      	adds	r1, r3, #1
 80139ce:	6179      	str	r1, [r7, #20]
 80139d0:	4413      	add	r3, r2
 80139d2:	781b      	ldrb	r3, [r3, #0]
 80139d4:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80139d6:	7bfb      	ldrb	r3, [r7, #15]
 80139d8:	2b20      	cmp	r3, #32
 80139da:	d100      	bne.n	80139de <get_fileinfo+0x3a>
 80139dc:	e015      	b.n	8013a0a <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80139de:	7bfb      	ldrb	r3, [r7, #15]
 80139e0:	2b05      	cmp	r3, #5
 80139e2:	d101      	bne.n	80139e8 <get_fileinfo+0x44>
 80139e4:	23e5      	movs	r3, #229	; 0xe5
 80139e6:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80139e8:	697b      	ldr	r3, [r7, #20]
 80139ea:	2b09      	cmp	r3, #9
 80139ec:	d106      	bne.n	80139fc <get_fileinfo+0x58>
 80139ee:	693b      	ldr	r3, [r7, #16]
 80139f0:	1c5a      	adds	r2, r3, #1
 80139f2:	613a      	str	r2, [r7, #16]
 80139f4:	683a      	ldr	r2, [r7, #0]
 80139f6:	4413      	add	r3, r2
 80139f8:	222e      	movs	r2, #46	; 0x2e
 80139fa:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80139fc:	693b      	ldr	r3, [r7, #16]
 80139fe:	1c5a      	adds	r2, r3, #1
 8013a00:	613a      	str	r2, [r7, #16]
 8013a02:	683a      	ldr	r2, [r7, #0]
 8013a04:	4413      	add	r3, r2
 8013a06:	7bfa      	ldrb	r2, [r7, #15]
 8013a08:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8013a0a:	697b      	ldr	r3, [r7, #20]
 8013a0c:	2b0a      	cmp	r3, #10
 8013a0e:	d9da      	bls.n	80139c6 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8013a10:	683a      	ldr	r2, [r7, #0]
 8013a12:	693b      	ldr	r3, [r7, #16]
 8013a14:	4413      	add	r3, r2
 8013a16:	3309      	adds	r3, #9
 8013a18:	2200      	movs	r2, #0
 8013a1a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	6a1b      	ldr	r3, [r3, #32]
 8013a20:	7ada      	ldrb	r2, [r3, #11]
 8013a22:	683b      	ldr	r3, [r7, #0]
 8013a24:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	6a1b      	ldr	r3, [r3, #32]
 8013a2a:	331c      	adds	r3, #28
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	f7fe fec5 	bl	80127bc <ld_dword>
 8013a32:	4602      	mov	r2, r0
 8013a34:	683b      	ldr	r3, [r7, #0]
 8013a36:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	6a1b      	ldr	r3, [r3, #32]
 8013a3c:	3316      	adds	r3, #22
 8013a3e:	4618      	mov	r0, r3
 8013a40:	f7fe febc 	bl	80127bc <ld_dword>
 8013a44:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8013a46:	68bb      	ldr	r3, [r7, #8]
 8013a48:	b29a      	uxth	r2, r3
 8013a4a:	683b      	ldr	r3, [r7, #0]
 8013a4c:	80da      	strh	r2, [r3, #6]
 8013a4e:	68bb      	ldr	r3, [r7, #8]
 8013a50:	0c1b      	lsrs	r3, r3, #16
 8013a52:	b29a      	uxth	r2, r3
 8013a54:	683b      	ldr	r3, [r7, #0]
 8013a56:	809a      	strh	r2, [r3, #4]
 8013a58:	e000      	b.n	8013a5c <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8013a5a:	bf00      	nop
}
 8013a5c:	3718      	adds	r7, #24
 8013a5e:	46bd      	mov	sp, r7
 8013a60:	bd80      	pop	{r7, pc}
	...

08013a64 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013a64:	b580      	push	{r7, lr}
 8013a66:	b088      	sub	sp, #32
 8013a68:	af00      	add	r7, sp, #0
 8013a6a:	6078      	str	r0, [r7, #4]
 8013a6c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8013a6e:	683b      	ldr	r3, [r7, #0]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	60fb      	str	r3, [r7, #12]
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	3324      	adds	r3, #36	; 0x24
 8013a78:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8013a7a:	220b      	movs	r2, #11
 8013a7c:	2120      	movs	r1, #32
 8013a7e:	68b8      	ldr	r0, [r7, #8]
 8013a80:	f7fe ff27 	bl	80128d2 <mem_set>
	si = i = 0; ni = 8;
 8013a84:	2300      	movs	r3, #0
 8013a86:	613b      	str	r3, [r7, #16]
 8013a88:	693b      	ldr	r3, [r7, #16]
 8013a8a:	61fb      	str	r3, [r7, #28]
 8013a8c:	2308      	movs	r3, #8
 8013a8e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8013a90:	69fb      	ldr	r3, [r7, #28]
 8013a92:	1c5a      	adds	r2, r3, #1
 8013a94:	61fa      	str	r2, [r7, #28]
 8013a96:	68fa      	ldr	r2, [r7, #12]
 8013a98:	4413      	add	r3, r2
 8013a9a:	781b      	ldrb	r3, [r3, #0]
 8013a9c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8013a9e:	7efb      	ldrb	r3, [r7, #27]
 8013aa0:	2b20      	cmp	r3, #32
 8013aa2:	d94e      	bls.n	8013b42 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8013aa4:	7efb      	ldrb	r3, [r7, #27]
 8013aa6:	2b2f      	cmp	r3, #47	; 0x2f
 8013aa8:	d006      	beq.n	8013ab8 <create_name+0x54>
 8013aaa:	7efb      	ldrb	r3, [r7, #27]
 8013aac:	2b5c      	cmp	r3, #92	; 0x5c
 8013aae:	d110      	bne.n	8013ad2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8013ab0:	e002      	b.n	8013ab8 <create_name+0x54>
 8013ab2:	69fb      	ldr	r3, [r7, #28]
 8013ab4:	3301      	adds	r3, #1
 8013ab6:	61fb      	str	r3, [r7, #28]
 8013ab8:	68fa      	ldr	r2, [r7, #12]
 8013aba:	69fb      	ldr	r3, [r7, #28]
 8013abc:	4413      	add	r3, r2
 8013abe:	781b      	ldrb	r3, [r3, #0]
 8013ac0:	2b2f      	cmp	r3, #47	; 0x2f
 8013ac2:	d0f6      	beq.n	8013ab2 <create_name+0x4e>
 8013ac4:	68fa      	ldr	r2, [r7, #12]
 8013ac6:	69fb      	ldr	r3, [r7, #28]
 8013ac8:	4413      	add	r3, r2
 8013aca:	781b      	ldrb	r3, [r3, #0]
 8013acc:	2b5c      	cmp	r3, #92	; 0x5c
 8013ace:	d0f0      	beq.n	8013ab2 <create_name+0x4e>
			break;
 8013ad0:	e038      	b.n	8013b44 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8013ad2:	7efb      	ldrb	r3, [r7, #27]
 8013ad4:	2b2e      	cmp	r3, #46	; 0x2e
 8013ad6:	d003      	beq.n	8013ae0 <create_name+0x7c>
 8013ad8:	693a      	ldr	r2, [r7, #16]
 8013ada:	697b      	ldr	r3, [r7, #20]
 8013adc:	429a      	cmp	r2, r3
 8013ade:	d30c      	bcc.n	8013afa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8013ae0:	697b      	ldr	r3, [r7, #20]
 8013ae2:	2b0b      	cmp	r3, #11
 8013ae4:	d002      	beq.n	8013aec <create_name+0x88>
 8013ae6:	7efb      	ldrb	r3, [r7, #27]
 8013ae8:	2b2e      	cmp	r3, #46	; 0x2e
 8013aea:	d001      	beq.n	8013af0 <create_name+0x8c>
 8013aec:	2306      	movs	r3, #6
 8013aee:	e044      	b.n	8013b7a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8013af0:	2308      	movs	r3, #8
 8013af2:	613b      	str	r3, [r7, #16]
 8013af4:	230b      	movs	r3, #11
 8013af6:	617b      	str	r3, [r7, #20]
			continue;
 8013af8:	e022      	b.n	8013b40 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8013afa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	da04      	bge.n	8013b0c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8013b02:	7efb      	ldrb	r3, [r7, #27]
 8013b04:	3b80      	subs	r3, #128	; 0x80
 8013b06:	4a1f      	ldr	r2, [pc, #124]	; (8013b84 <create_name+0x120>)
 8013b08:	5cd3      	ldrb	r3, [r2, r3]
 8013b0a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8013b0c:	7efb      	ldrb	r3, [r7, #27]
 8013b0e:	4619      	mov	r1, r3
 8013b10:	481d      	ldr	r0, [pc, #116]	; (8013b88 <create_name+0x124>)
 8013b12:	f7fe ff20 	bl	8012956 <chk_chr>
 8013b16:	4603      	mov	r3, r0
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d001      	beq.n	8013b20 <create_name+0xbc>
 8013b1c:	2306      	movs	r3, #6
 8013b1e:	e02c      	b.n	8013b7a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8013b20:	7efb      	ldrb	r3, [r7, #27]
 8013b22:	2b60      	cmp	r3, #96	; 0x60
 8013b24:	d905      	bls.n	8013b32 <create_name+0xce>
 8013b26:	7efb      	ldrb	r3, [r7, #27]
 8013b28:	2b7a      	cmp	r3, #122	; 0x7a
 8013b2a:	d802      	bhi.n	8013b32 <create_name+0xce>
 8013b2c:	7efb      	ldrb	r3, [r7, #27]
 8013b2e:	3b20      	subs	r3, #32
 8013b30:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8013b32:	693b      	ldr	r3, [r7, #16]
 8013b34:	1c5a      	adds	r2, r3, #1
 8013b36:	613a      	str	r2, [r7, #16]
 8013b38:	68ba      	ldr	r2, [r7, #8]
 8013b3a:	4413      	add	r3, r2
 8013b3c:	7efa      	ldrb	r2, [r7, #27]
 8013b3e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8013b40:	e7a6      	b.n	8013a90 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8013b42:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8013b44:	68fa      	ldr	r2, [r7, #12]
 8013b46:	69fb      	ldr	r3, [r7, #28]
 8013b48:	441a      	add	r2, r3
 8013b4a:	683b      	ldr	r3, [r7, #0]
 8013b4c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8013b4e:	693b      	ldr	r3, [r7, #16]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d101      	bne.n	8013b58 <create_name+0xf4>
 8013b54:	2306      	movs	r3, #6
 8013b56:	e010      	b.n	8013b7a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013b58:	68bb      	ldr	r3, [r7, #8]
 8013b5a:	781b      	ldrb	r3, [r3, #0]
 8013b5c:	2be5      	cmp	r3, #229	; 0xe5
 8013b5e:	d102      	bne.n	8013b66 <create_name+0x102>
 8013b60:	68bb      	ldr	r3, [r7, #8]
 8013b62:	2205      	movs	r2, #5
 8013b64:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8013b66:	7efb      	ldrb	r3, [r7, #27]
 8013b68:	2b20      	cmp	r3, #32
 8013b6a:	d801      	bhi.n	8013b70 <create_name+0x10c>
 8013b6c:	2204      	movs	r2, #4
 8013b6e:	e000      	b.n	8013b72 <create_name+0x10e>
 8013b70:	2200      	movs	r2, #0
 8013b72:	68bb      	ldr	r3, [r7, #8]
 8013b74:	330b      	adds	r3, #11
 8013b76:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8013b78:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	3720      	adds	r7, #32
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	bd80      	pop	{r7, pc}
 8013b82:	bf00      	nop
 8013b84:	08021688 	.word	0x08021688
 8013b88:	08021468 	.word	0x08021468

08013b8c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8013b8c:	b580      	push	{r7, lr}
 8013b8e:	b086      	sub	sp, #24
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	6078      	str	r0, [r7, #4]
 8013b94:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8013b9a:	693b      	ldr	r3, [r7, #16]
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8013ba0:	e002      	b.n	8013ba8 <follow_path+0x1c>
 8013ba2:	683b      	ldr	r3, [r7, #0]
 8013ba4:	3301      	adds	r3, #1
 8013ba6:	603b      	str	r3, [r7, #0]
 8013ba8:	683b      	ldr	r3, [r7, #0]
 8013baa:	781b      	ldrb	r3, [r3, #0]
 8013bac:	2b2f      	cmp	r3, #47	; 0x2f
 8013bae:	d0f8      	beq.n	8013ba2 <follow_path+0x16>
 8013bb0:	683b      	ldr	r3, [r7, #0]
 8013bb2:	781b      	ldrb	r3, [r3, #0]
 8013bb4:	2b5c      	cmp	r3, #92	; 0x5c
 8013bb6:	d0f4      	beq.n	8013ba2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8013bb8:	693b      	ldr	r3, [r7, #16]
 8013bba:	2200      	movs	r2, #0
 8013bbc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8013bbe:	683b      	ldr	r3, [r7, #0]
 8013bc0:	781b      	ldrb	r3, [r3, #0]
 8013bc2:	2b1f      	cmp	r3, #31
 8013bc4:	d80a      	bhi.n	8013bdc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	2280      	movs	r2, #128	; 0x80
 8013bca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8013bce:	2100      	movs	r1, #0
 8013bd0:	6878      	ldr	r0, [r7, #4]
 8013bd2:	f7ff fc3d 	bl	8013450 <dir_sdi>
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	75fb      	strb	r3, [r7, #23]
 8013bda:	e043      	b.n	8013c64 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013bdc:	463b      	mov	r3, r7
 8013bde:	4619      	mov	r1, r3
 8013be0:	6878      	ldr	r0, [r7, #4]
 8013be2:	f7ff ff3f 	bl	8013a64 <create_name>
 8013be6:	4603      	mov	r3, r0
 8013be8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013bea:	7dfb      	ldrb	r3, [r7, #23]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d134      	bne.n	8013c5a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8013bf0:	6878      	ldr	r0, [r7, #4]
 8013bf2:	f7ff fe50 	bl	8013896 <dir_find>
 8013bf6:	4603      	mov	r3, r0
 8013bf8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013c00:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8013c02:	7dfb      	ldrb	r3, [r7, #23]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d00a      	beq.n	8013c1e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013c08:	7dfb      	ldrb	r3, [r7, #23]
 8013c0a:	2b04      	cmp	r3, #4
 8013c0c:	d127      	bne.n	8013c5e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8013c0e:	7afb      	ldrb	r3, [r7, #11]
 8013c10:	f003 0304 	and.w	r3, r3, #4
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d122      	bne.n	8013c5e <follow_path+0xd2>
 8013c18:	2305      	movs	r3, #5
 8013c1a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013c1c:	e01f      	b.n	8013c5e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013c1e:	7afb      	ldrb	r3, [r7, #11]
 8013c20:	f003 0304 	and.w	r3, r3, #4
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d11c      	bne.n	8013c62 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013c28:	693b      	ldr	r3, [r7, #16]
 8013c2a:	799b      	ldrb	r3, [r3, #6]
 8013c2c:	f003 0310 	and.w	r3, r3, #16
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d102      	bne.n	8013c3a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013c34:	2305      	movs	r3, #5
 8013c36:	75fb      	strb	r3, [r7, #23]
 8013c38:	e014      	b.n	8013c64 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	695b      	ldr	r3, [r3, #20]
 8013c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c48:	4413      	add	r3, r2
 8013c4a:	4619      	mov	r1, r3
 8013c4c:	68f8      	ldr	r0, [r7, #12]
 8013c4e:	f7ff fd86 	bl	801375e <ld_clust>
 8013c52:	4602      	mov	r2, r0
 8013c54:	693b      	ldr	r3, [r7, #16]
 8013c56:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013c58:	e7c0      	b.n	8013bdc <follow_path+0x50>
			if (res != FR_OK) break;
 8013c5a:	bf00      	nop
 8013c5c:	e002      	b.n	8013c64 <follow_path+0xd8>
				break;
 8013c5e:	bf00      	nop
 8013c60:	e000      	b.n	8013c64 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013c62:	bf00      	nop
			}
		}
	}

	return res;
 8013c64:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c66:	4618      	mov	r0, r3
 8013c68:	3718      	adds	r7, #24
 8013c6a:	46bd      	mov	sp, r7
 8013c6c:	bd80      	pop	{r7, pc}

08013c6e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8013c6e:	b480      	push	{r7}
 8013c70:	b087      	sub	sp, #28
 8013c72:	af00      	add	r7, sp, #0
 8013c74:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8013c76:	f04f 33ff 	mov.w	r3, #4294967295
 8013c7a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d031      	beq.n	8013ce8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	617b      	str	r3, [r7, #20]
 8013c8a:	e002      	b.n	8013c92 <get_ldnumber+0x24>
 8013c8c:	697b      	ldr	r3, [r7, #20]
 8013c8e:	3301      	adds	r3, #1
 8013c90:	617b      	str	r3, [r7, #20]
 8013c92:	697b      	ldr	r3, [r7, #20]
 8013c94:	781b      	ldrb	r3, [r3, #0]
 8013c96:	2b20      	cmp	r3, #32
 8013c98:	d903      	bls.n	8013ca2 <get_ldnumber+0x34>
 8013c9a:	697b      	ldr	r3, [r7, #20]
 8013c9c:	781b      	ldrb	r3, [r3, #0]
 8013c9e:	2b3a      	cmp	r3, #58	; 0x3a
 8013ca0:	d1f4      	bne.n	8013c8c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8013ca2:	697b      	ldr	r3, [r7, #20]
 8013ca4:	781b      	ldrb	r3, [r3, #0]
 8013ca6:	2b3a      	cmp	r3, #58	; 0x3a
 8013ca8:	d11c      	bne.n	8013ce4 <get_ldnumber+0x76>
			tp = *path;
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	1c5a      	adds	r2, r3, #1
 8013cb4:	60fa      	str	r2, [r7, #12]
 8013cb6:	781b      	ldrb	r3, [r3, #0]
 8013cb8:	3b30      	subs	r3, #48	; 0x30
 8013cba:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013cbc:	68bb      	ldr	r3, [r7, #8]
 8013cbe:	2b09      	cmp	r3, #9
 8013cc0:	d80e      	bhi.n	8013ce0 <get_ldnumber+0x72>
 8013cc2:	68fa      	ldr	r2, [r7, #12]
 8013cc4:	697b      	ldr	r3, [r7, #20]
 8013cc6:	429a      	cmp	r2, r3
 8013cc8:	d10a      	bne.n	8013ce0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8013cca:	68bb      	ldr	r3, [r7, #8]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d107      	bne.n	8013ce0 <get_ldnumber+0x72>
					vol = (int)i;
 8013cd0:	68bb      	ldr	r3, [r7, #8]
 8013cd2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013cd4:	697b      	ldr	r3, [r7, #20]
 8013cd6:	3301      	adds	r3, #1
 8013cd8:	617b      	str	r3, [r7, #20]
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	697a      	ldr	r2, [r7, #20]
 8013cde:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013ce0:	693b      	ldr	r3, [r7, #16]
 8013ce2:	e002      	b.n	8013cea <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013ce4:	2300      	movs	r3, #0
 8013ce6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013ce8:	693b      	ldr	r3, [r7, #16]
}
 8013cea:	4618      	mov	r0, r3
 8013cec:	371c      	adds	r7, #28
 8013cee:	46bd      	mov	sp, r7
 8013cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf4:	4770      	bx	lr
	...

08013cf8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b082      	sub	sp, #8
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
 8013d00:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	2200      	movs	r2, #0
 8013d06:	70da      	strb	r2, [r3, #3]
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8013d0e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013d10:	6839      	ldr	r1, [r7, #0]
 8013d12:	6878      	ldr	r0, [r7, #4]
 8013d14:	f7ff f81c 	bl	8012d50 <move_window>
 8013d18:	4603      	mov	r3, r0
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d001      	beq.n	8013d22 <check_fs+0x2a>
 8013d1e:	2304      	movs	r3, #4
 8013d20:	e038      	b.n	8013d94 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	3334      	adds	r3, #52	; 0x34
 8013d26:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	f7fe fd2e 	bl	801278c <ld_word>
 8013d30:	4603      	mov	r3, r0
 8013d32:	461a      	mov	r2, r3
 8013d34:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013d38:	429a      	cmp	r2, r3
 8013d3a:	d001      	beq.n	8013d40 <check_fs+0x48>
 8013d3c:	2303      	movs	r3, #3
 8013d3e:	e029      	b.n	8013d94 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013d46:	2be9      	cmp	r3, #233	; 0xe9
 8013d48:	d009      	beq.n	8013d5e <check_fs+0x66>
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013d50:	2beb      	cmp	r3, #235	; 0xeb
 8013d52:	d11e      	bne.n	8013d92 <check_fs+0x9a>
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8013d5a:	2b90      	cmp	r3, #144	; 0x90
 8013d5c:	d119      	bne.n	8013d92 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	3334      	adds	r3, #52	; 0x34
 8013d62:	3336      	adds	r3, #54	; 0x36
 8013d64:	4618      	mov	r0, r3
 8013d66:	f7fe fd29 	bl	80127bc <ld_dword>
 8013d6a:	4603      	mov	r3, r0
 8013d6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013d70:	4a0a      	ldr	r2, [pc, #40]	; (8013d9c <check_fs+0xa4>)
 8013d72:	4293      	cmp	r3, r2
 8013d74:	d101      	bne.n	8013d7a <check_fs+0x82>
 8013d76:	2300      	movs	r3, #0
 8013d78:	e00c      	b.n	8013d94 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	3334      	adds	r3, #52	; 0x34
 8013d7e:	3352      	adds	r3, #82	; 0x52
 8013d80:	4618      	mov	r0, r3
 8013d82:	f7fe fd1b 	bl	80127bc <ld_dword>
 8013d86:	4603      	mov	r3, r0
 8013d88:	4a05      	ldr	r2, [pc, #20]	; (8013da0 <check_fs+0xa8>)
 8013d8a:	4293      	cmp	r3, r2
 8013d8c:	d101      	bne.n	8013d92 <check_fs+0x9a>
 8013d8e:	2300      	movs	r3, #0
 8013d90:	e000      	b.n	8013d94 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8013d92:	2302      	movs	r3, #2
}
 8013d94:	4618      	mov	r0, r3
 8013d96:	3708      	adds	r7, #8
 8013d98:	46bd      	mov	sp, r7
 8013d9a:	bd80      	pop	{r7, pc}
 8013d9c:	00544146 	.word	0x00544146
 8013da0:	33544146 	.word	0x33544146

08013da4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b096      	sub	sp, #88	; 0x58
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	60f8      	str	r0, [r7, #12]
 8013dac:	60b9      	str	r1, [r7, #8]
 8013dae:	4613      	mov	r3, r2
 8013db0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8013db2:	68bb      	ldr	r3, [r7, #8]
 8013db4:	2200      	movs	r2, #0
 8013db6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013db8:	68f8      	ldr	r0, [r7, #12]
 8013dba:	f7ff ff58 	bl	8013c6e <get_ldnumber>
 8013dbe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	da01      	bge.n	8013dca <find_volume+0x26>
 8013dc6:	230b      	movs	r3, #11
 8013dc8:	e236      	b.n	8014238 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8013dca:	4aac      	ldr	r2, [pc, #688]	; (801407c <find_volume+0x2d8>)
 8013dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013dd2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d101      	bne.n	8013dde <find_volume+0x3a>
 8013dda:	230c      	movs	r3, #12
 8013ddc:	e22c      	b.n	8014238 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8013dde:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013de0:	f7fe fdd4 	bl	801298c <lock_fs>
 8013de4:	4603      	mov	r3, r0
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d101      	bne.n	8013dee <find_volume+0x4a>
 8013dea:	230f      	movs	r3, #15
 8013dec:	e224      	b.n	8014238 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8013dee:	68bb      	ldr	r3, [r7, #8]
 8013df0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013df2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013df4:	79fb      	ldrb	r3, [r7, #7]
 8013df6:	f023 0301 	bic.w	r3, r3, #1
 8013dfa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dfe:	781b      	ldrb	r3, [r3, #0]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d01a      	beq.n	8013e3a <find_volume+0x96>
		stat = disk_status(fs->drv);
 8013e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e06:	785b      	ldrb	r3, [r3, #1]
 8013e08:	4618      	mov	r0, r3
 8013e0a:	f7fe fc21 	bl	8012650 <disk_status>
 8013e0e:	4603      	mov	r3, r0
 8013e10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013e14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013e18:	f003 0301 	and.w	r3, r3, #1
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d10c      	bne.n	8013e3a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013e20:	79fb      	ldrb	r3, [r7, #7]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d007      	beq.n	8013e36 <find_volume+0x92>
 8013e26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013e2a:	f003 0304 	and.w	r3, r3, #4
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d001      	beq.n	8013e36 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8013e32:	230a      	movs	r3, #10
 8013e34:	e200      	b.n	8014238 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8013e36:	2300      	movs	r3, #0
 8013e38:	e1fe      	b.n	8014238 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e3c:	2200      	movs	r2, #0
 8013e3e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e42:	b2da      	uxtb	r2, r3
 8013e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e46:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e4a:	785b      	ldrb	r3, [r3, #1]
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	f7fe fc19 	bl	8012684 <disk_initialize>
 8013e52:	4603      	mov	r3, r0
 8013e54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013e58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013e5c:	f003 0301 	and.w	r3, r3, #1
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d001      	beq.n	8013e68 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013e64:	2303      	movs	r3, #3
 8013e66:	e1e7      	b.n	8014238 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013e68:	79fb      	ldrb	r3, [r7, #7]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d007      	beq.n	8013e7e <find_volume+0xda>
 8013e6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013e72:	f003 0304 	and.w	r3, r3, #4
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d001      	beq.n	8013e7e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8013e7a:	230a      	movs	r3, #10
 8013e7c:	e1dc      	b.n	8014238 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013e7e:	2300      	movs	r3, #0
 8013e80:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013e82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013e84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013e86:	f7ff ff37 	bl	8013cf8 <check_fs>
 8013e8a:	4603      	mov	r3, r0
 8013e8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013e90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e94:	2b02      	cmp	r3, #2
 8013e96:	d14b      	bne.n	8013f30 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013e98:	2300      	movs	r3, #0
 8013e9a:	643b      	str	r3, [r7, #64]	; 0x40
 8013e9c:	e01f      	b.n	8013ede <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8013e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ea0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ea6:	011b      	lsls	r3, r3, #4
 8013ea8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8013eac:	4413      	add	r3, r2
 8013eae:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013eb2:	3304      	adds	r3, #4
 8013eb4:	781b      	ldrb	r3, [r3, #0]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d006      	beq.n	8013ec8 <find_volume+0x124>
 8013eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ebc:	3308      	adds	r3, #8
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	f7fe fc7c 	bl	80127bc <ld_dword>
 8013ec4:	4602      	mov	r2, r0
 8013ec6:	e000      	b.n	8013eca <find_volume+0x126>
 8013ec8:	2200      	movs	r2, #0
 8013eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ecc:	009b      	lsls	r3, r3, #2
 8013ece:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8013ed2:	440b      	add	r3, r1
 8013ed4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013eda:	3301      	adds	r3, #1
 8013edc:	643b      	str	r3, [r7, #64]	; 0x40
 8013ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ee0:	2b03      	cmp	r3, #3
 8013ee2:	d9dc      	bls.n	8013e9e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013ee4:	2300      	movs	r3, #0
 8013ee6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8013ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d002      	beq.n	8013ef4 <find_volume+0x150>
 8013eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ef0:	3b01      	subs	r3, #1
 8013ef2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ef6:	009b      	lsls	r3, r3, #2
 8013ef8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8013efc:	4413      	add	r3, r2
 8013efe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013f02:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013f04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d005      	beq.n	8013f16 <find_volume+0x172>
 8013f0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013f0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013f0e:	f7ff fef3 	bl	8013cf8 <check_fs>
 8013f12:	4603      	mov	r3, r0
 8013f14:	e000      	b.n	8013f18 <find_volume+0x174>
 8013f16:	2303      	movs	r3, #3
 8013f18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013f1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013f20:	2b01      	cmp	r3, #1
 8013f22:	d905      	bls.n	8013f30 <find_volume+0x18c>
 8013f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f26:	3301      	adds	r3, #1
 8013f28:	643b      	str	r3, [r7, #64]	; 0x40
 8013f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f2c:	2b03      	cmp	r3, #3
 8013f2e:	d9e1      	bls.n	8013ef4 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013f30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013f34:	2b04      	cmp	r3, #4
 8013f36:	d101      	bne.n	8013f3c <find_volume+0x198>
 8013f38:	2301      	movs	r3, #1
 8013f3a:	e17d      	b.n	8014238 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013f3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013f40:	2b01      	cmp	r3, #1
 8013f42:	d901      	bls.n	8013f48 <find_volume+0x1a4>
 8013f44:	230d      	movs	r3, #13
 8013f46:	e177      	b.n	8014238 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f4a:	3334      	adds	r3, #52	; 0x34
 8013f4c:	330b      	adds	r3, #11
 8013f4e:	4618      	mov	r0, r3
 8013f50:	f7fe fc1c 	bl	801278c <ld_word>
 8013f54:	4603      	mov	r3, r0
 8013f56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013f5a:	d001      	beq.n	8013f60 <find_volume+0x1bc>
 8013f5c:	230d      	movs	r3, #13
 8013f5e:	e16b      	b.n	8014238 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f62:	3334      	adds	r3, #52	; 0x34
 8013f64:	3316      	adds	r3, #22
 8013f66:	4618      	mov	r0, r3
 8013f68:	f7fe fc10 	bl	801278c <ld_word>
 8013f6c:	4603      	mov	r3, r0
 8013f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d106      	bne.n	8013f84 <find_volume+0x1e0>
 8013f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f78:	3334      	adds	r3, #52	; 0x34
 8013f7a:	3324      	adds	r3, #36	; 0x24
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	f7fe fc1d 	bl	80127bc <ld_dword>
 8013f82:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8013f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013f88:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f8c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8013f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f92:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f96:	789b      	ldrb	r3, [r3, #2]
 8013f98:	2b01      	cmp	r3, #1
 8013f9a:	d005      	beq.n	8013fa8 <find_volume+0x204>
 8013f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f9e:	789b      	ldrb	r3, [r3, #2]
 8013fa0:	2b02      	cmp	r3, #2
 8013fa2:	d001      	beq.n	8013fa8 <find_volume+0x204>
 8013fa4:	230d      	movs	r3, #13
 8013fa6:	e147      	b.n	8014238 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013faa:	789b      	ldrb	r3, [r3, #2]
 8013fac:	461a      	mov	r2, r3
 8013fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013fb0:	fb02 f303 	mul.w	r3, r2, r3
 8013fb4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013fbc:	b29a      	uxth	r2, r3
 8013fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fc0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fc4:	895b      	ldrh	r3, [r3, #10]
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d008      	beq.n	8013fdc <find_volume+0x238>
 8013fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fcc:	895b      	ldrh	r3, [r3, #10]
 8013fce:	461a      	mov	r2, r3
 8013fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fd2:	895b      	ldrh	r3, [r3, #10]
 8013fd4:	3b01      	subs	r3, #1
 8013fd6:	4013      	ands	r3, r2
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d001      	beq.n	8013fe0 <find_volume+0x23c>
 8013fdc:	230d      	movs	r3, #13
 8013fde:	e12b      	b.n	8014238 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fe2:	3334      	adds	r3, #52	; 0x34
 8013fe4:	3311      	adds	r3, #17
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	f7fe fbd0 	bl	801278c <ld_word>
 8013fec:	4603      	mov	r3, r0
 8013fee:	461a      	mov	r2, r3
 8013ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ff2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ff6:	891b      	ldrh	r3, [r3, #8]
 8013ff8:	f003 030f 	and.w	r3, r3, #15
 8013ffc:	b29b      	uxth	r3, r3
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d001      	beq.n	8014006 <find_volume+0x262>
 8014002:	230d      	movs	r3, #13
 8014004:	e118      	b.n	8014238 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8014006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014008:	3334      	adds	r3, #52	; 0x34
 801400a:	3313      	adds	r3, #19
 801400c:	4618      	mov	r0, r3
 801400e:	f7fe fbbd 	bl	801278c <ld_word>
 8014012:	4603      	mov	r3, r0
 8014014:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8014016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014018:	2b00      	cmp	r3, #0
 801401a:	d106      	bne.n	801402a <find_volume+0x286>
 801401c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801401e:	3334      	adds	r3, #52	; 0x34
 8014020:	3320      	adds	r3, #32
 8014022:	4618      	mov	r0, r3
 8014024:	f7fe fbca 	bl	80127bc <ld_dword>
 8014028:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801402a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801402c:	3334      	adds	r3, #52	; 0x34
 801402e:	330e      	adds	r3, #14
 8014030:	4618      	mov	r0, r3
 8014032:	f7fe fbab 	bl	801278c <ld_word>
 8014036:	4603      	mov	r3, r0
 8014038:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801403a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801403c:	2b00      	cmp	r3, #0
 801403e:	d101      	bne.n	8014044 <find_volume+0x2a0>
 8014040:	230d      	movs	r3, #13
 8014042:	e0f9      	b.n	8014238 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8014044:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014048:	4413      	add	r3, r2
 801404a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801404c:	8912      	ldrh	r2, [r2, #8]
 801404e:	0912      	lsrs	r2, r2, #4
 8014050:	b292      	uxth	r2, r2
 8014052:	4413      	add	r3, r2
 8014054:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8014056:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801405a:	429a      	cmp	r2, r3
 801405c:	d201      	bcs.n	8014062 <find_volume+0x2be>
 801405e:	230d      	movs	r3, #13
 8014060:	e0ea      	b.n	8014238 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8014062:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014066:	1ad3      	subs	r3, r2, r3
 8014068:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801406a:	8952      	ldrh	r2, [r2, #10]
 801406c:	fbb3 f3f2 	udiv	r3, r3, r2
 8014070:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8014072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014074:	2b00      	cmp	r3, #0
 8014076:	d103      	bne.n	8014080 <find_volume+0x2dc>
 8014078:	230d      	movs	r3, #13
 801407a:	e0dd      	b.n	8014238 <find_volume+0x494>
 801407c:	20000844 	.word	0x20000844
		fmt = FS_FAT32;
 8014080:	2303      	movs	r3, #3
 8014082:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8014086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014088:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801408c:	4293      	cmp	r3, r2
 801408e:	d802      	bhi.n	8014096 <find_volume+0x2f2>
 8014090:	2302      	movs	r3, #2
 8014092:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8014096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014098:	f640 72f5 	movw	r2, #4085	; 0xff5
 801409c:	4293      	cmp	r3, r2
 801409e:	d802      	bhi.n	80140a6 <find_volume+0x302>
 80140a0:	2301      	movs	r3, #1
 80140a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80140a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140a8:	1c9a      	adds	r2, r3, #2
 80140aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140ac:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80140ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80140b2:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80140b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80140b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80140b8:	441a      	add	r2, r3
 80140ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140bc:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80140be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80140c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140c2:	441a      	add	r2, r3
 80140c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140c6:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80140c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80140cc:	2b03      	cmp	r3, #3
 80140ce:	d11e      	bne.n	801410e <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80140d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140d2:	3334      	adds	r3, #52	; 0x34
 80140d4:	332a      	adds	r3, #42	; 0x2a
 80140d6:	4618      	mov	r0, r3
 80140d8:	f7fe fb58 	bl	801278c <ld_word>
 80140dc:	4603      	mov	r3, r0
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d001      	beq.n	80140e6 <find_volume+0x342>
 80140e2:	230d      	movs	r3, #13
 80140e4:	e0a8      	b.n	8014238 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80140e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140e8:	891b      	ldrh	r3, [r3, #8]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d001      	beq.n	80140f2 <find_volume+0x34e>
 80140ee:	230d      	movs	r3, #13
 80140f0:	e0a2      	b.n	8014238 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80140f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140f4:	3334      	adds	r3, #52	; 0x34
 80140f6:	332c      	adds	r3, #44	; 0x2c
 80140f8:	4618      	mov	r0, r3
 80140fa:	f7fe fb5f 	bl	80127bc <ld_dword>
 80140fe:	4602      	mov	r2, r0
 8014100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014102:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8014104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014106:	699b      	ldr	r3, [r3, #24]
 8014108:	009b      	lsls	r3, r3, #2
 801410a:	647b      	str	r3, [r7, #68]	; 0x44
 801410c:	e01f      	b.n	801414e <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801410e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014110:	891b      	ldrh	r3, [r3, #8]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d101      	bne.n	801411a <find_volume+0x376>
 8014116:	230d      	movs	r3, #13
 8014118:	e08e      	b.n	8014238 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801411a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801411c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801411e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014120:	441a      	add	r2, r3
 8014122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014124:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014126:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801412a:	2b02      	cmp	r3, #2
 801412c:	d103      	bne.n	8014136 <find_volume+0x392>
 801412e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014130:	699b      	ldr	r3, [r3, #24]
 8014132:	005b      	lsls	r3, r3, #1
 8014134:	e00a      	b.n	801414c <find_volume+0x3a8>
 8014136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014138:	699a      	ldr	r2, [r3, #24]
 801413a:	4613      	mov	r3, r2
 801413c:	005b      	lsls	r3, r3, #1
 801413e:	4413      	add	r3, r2
 8014140:	085a      	lsrs	r2, r3, #1
 8014142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014144:	699b      	ldr	r3, [r3, #24]
 8014146:	f003 0301 	and.w	r3, r3, #1
 801414a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801414c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801414e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014150:	69da      	ldr	r2, [r3, #28]
 8014152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014154:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8014158:	0a5b      	lsrs	r3, r3, #9
 801415a:	429a      	cmp	r2, r3
 801415c:	d201      	bcs.n	8014162 <find_volume+0x3be>
 801415e:	230d      	movs	r3, #13
 8014160:	e06a      	b.n	8014238 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8014162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014164:	f04f 32ff 	mov.w	r2, #4294967295
 8014168:	615a      	str	r2, [r3, #20]
 801416a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801416c:	695a      	ldr	r2, [r3, #20]
 801416e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014170:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8014172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014174:	2280      	movs	r2, #128	; 0x80
 8014176:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8014178:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801417c:	2b03      	cmp	r3, #3
 801417e:	d149      	bne.n	8014214 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8014180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014182:	3334      	adds	r3, #52	; 0x34
 8014184:	3330      	adds	r3, #48	; 0x30
 8014186:	4618      	mov	r0, r3
 8014188:	f7fe fb00 	bl	801278c <ld_word>
 801418c:	4603      	mov	r3, r0
 801418e:	2b01      	cmp	r3, #1
 8014190:	d140      	bne.n	8014214 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014194:	3301      	adds	r3, #1
 8014196:	4619      	mov	r1, r3
 8014198:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801419a:	f7fe fdd9 	bl	8012d50 <move_window>
 801419e:	4603      	mov	r3, r0
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d137      	bne.n	8014214 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 80141a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141a6:	2200      	movs	r2, #0
 80141a8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80141aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141ac:	3334      	adds	r3, #52	; 0x34
 80141ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80141b2:	4618      	mov	r0, r3
 80141b4:	f7fe faea 	bl	801278c <ld_word>
 80141b8:	4603      	mov	r3, r0
 80141ba:	461a      	mov	r2, r3
 80141bc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80141c0:	429a      	cmp	r2, r3
 80141c2:	d127      	bne.n	8014214 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80141c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141c6:	3334      	adds	r3, #52	; 0x34
 80141c8:	4618      	mov	r0, r3
 80141ca:	f7fe faf7 	bl	80127bc <ld_dword>
 80141ce:	4603      	mov	r3, r0
 80141d0:	4a1b      	ldr	r2, [pc, #108]	; (8014240 <find_volume+0x49c>)
 80141d2:	4293      	cmp	r3, r2
 80141d4:	d11e      	bne.n	8014214 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80141d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141d8:	3334      	adds	r3, #52	; 0x34
 80141da:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80141de:	4618      	mov	r0, r3
 80141e0:	f7fe faec 	bl	80127bc <ld_dword>
 80141e4:	4603      	mov	r3, r0
 80141e6:	4a17      	ldr	r2, [pc, #92]	; (8014244 <find_volume+0x4a0>)
 80141e8:	4293      	cmp	r3, r2
 80141ea:	d113      	bne.n	8014214 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80141ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141ee:	3334      	adds	r3, #52	; 0x34
 80141f0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80141f4:	4618      	mov	r0, r3
 80141f6:	f7fe fae1 	bl	80127bc <ld_dword>
 80141fa:	4602      	mov	r2, r0
 80141fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141fe:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014202:	3334      	adds	r3, #52	; 0x34
 8014204:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8014208:	4618      	mov	r0, r3
 801420a:	f7fe fad7 	bl	80127bc <ld_dword>
 801420e:	4602      	mov	r2, r0
 8014210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014212:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8014214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014216:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801421a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801421c:	4b0a      	ldr	r3, [pc, #40]	; (8014248 <find_volume+0x4a4>)
 801421e:	881b      	ldrh	r3, [r3, #0]
 8014220:	3301      	adds	r3, #1
 8014222:	b29a      	uxth	r2, r3
 8014224:	4b08      	ldr	r3, [pc, #32]	; (8014248 <find_volume+0x4a4>)
 8014226:	801a      	strh	r2, [r3, #0]
 8014228:	4b07      	ldr	r3, [pc, #28]	; (8014248 <find_volume+0x4a4>)
 801422a:	881a      	ldrh	r2, [r3, #0]
 801422c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801422e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8014230:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014232:	f7fe fd25 	bl	8012c80 <clear_lock>
#endif
	return FR_OK;
 8014236:	2300      	movs	r3, #0
}
 8014238:	4618      	mov	r0, r3
 801423a:	3758      	adds	r7, #88	; 0x58
 801423c:	46bd      	mov	sp, r7
 801423e:	bd80      	pop	{r7, pc}
 8014240:	41615252 	.word	0x41615252
 8014244:	61417272 	.word	0x61417272
 8014248:	20000848 	.word	0x20000848

0801424c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801424c:	b580      	push	{r7, lr}
 801424e:	b084      	sub	sp, #16
 8014250:	af00      	add	r7, sp, #0
 8014252:	6078      	str	r0, [r7, #4]
 8014254:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8014256:	2309      	movs	r3, #9
 8014258:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	2b00      	cmp	r3, #0
 801425e:	d02e      	beq.n	80142be <validate+0x72>
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	2b00      	cmp	r3, #0
 8014266:	d02a      	beq.n	80142be <validate+0x72>
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	781b      	ldrb	r3, [r3, #0]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d025      	beq.n	80142be <validate+0x72>
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	889a      	ldrh	r2, [r3, #4]
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	88db      	ldrh	r3, [r3, #6]
 801427c:	429a      	cmp	r2, r3
 801427e:	d11e      	bne.n	80142be <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	4618      	mov	r0, r3
 8014286:	f7fe fb81 	bl	801298c <lock_fs>
 801428a:	4603      	mov	r3, r0
 801428c:	2b00      	cmp	r3, #0
 801428e:	d014      	beq.n	80142ba <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	785b      	ldrb	r3, [r3, #1]
 8014296:	4618      	mov	r0, r3
 8014298:	f7fe f9da 	bl	8012650 <disk_status>
 801429c:	4603      	mov	r3, r0
 801429e:	f003 0301 	and.w	r3, r3, #1
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d102      	bne.n	80142ac <validate+0x60>
				res = FR_OK;
 80142a6:	2300      	movs	r3, #0
 80142a8:	73fb      	strb	r3, [r7, #15]
 80142aa:	e008      	b.n	80142be <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	2100      	movs	r1, #0
 80142b2:	4618      	mov	r0, r3
 80142b4:	f7fe fb80 	bl	80129b8 <unlock_fs>
 80142b8:	e001      	b.n	80142be <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80142ba:	230f      	movs	r3, #15
 80142bc:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80142be:	7bfb      	ldrb	r3, [r7, #15]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d102      	bne.n	80142ca <validate+0x7e>
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	e000      	b.n	80142cc <validate+0x80>
 80142ca:	2300      	movs	r3, #0
 80142cc:	683a      	ldr	r2, [r7, #0]
 80142ce:	6013      	str	r3, [r2, #0]
	return res;
 80142d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80142d2:	4618      	mov	r0, r3
 80142d4:	3710      	adds	r7, #16
 80142d6:	46bd      	mov	sp, r7
 80142d8:	bd80      	pop	{r7, pc}
	...

080142dc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80142dc:	b580      	push	{r7, lr}
 80142de:	b088      	sub	sp, #32
 80142e0:	af00      	add	r7, sp, #0
 80142e2:	60f8      	str	r0, [r7, #12]
 80142e4:	60b9      	str	r1, [r7, #8]
 80142e6:	4613      	mov	r3, r2
 80142e8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80142ea:	68bb      	ldr	r3, [r7, #8]
 80142ec:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80142ee:	f107 0310 	add.w	r3, r7, #16
 80142f2:	4618      	mov	r0, r3
 80142f4:	f7ff fcbb 	bl	8013c6e <get_ldnumber>
 80142f8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80142fa:	69fb      	ldr	r3, [r7, #28]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	da01      	bge.n	8014304 <f_mount+0x28>
 8014300:	230b      	movs	r3, #11
 8014302:	e048      	b.n	8014396 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8014304:	4a26      	ldr	r2, [pc, #152]	; (80143a0 <f_mount+0xc4>)
 8014306:	69fb      	ldr	r3, [r7, #28]
 8014308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801430c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801430e:	69bb      	ldr	r3, [r7, #24]
 8014310:	2b00      	cmp	r3, #0
 8014312:	d00f      	beq.n	8014334 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8014314:	69b8      	ldr	r0, [r7, #24]
 8014316:	f7fe fcb3 	bl	8012c80 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 801431a:	69bb      	ldr	r3, [r7, #24]
 801431c:	68db      	ldr	r3, [r3, #12]
 801431e:	4618      	mov	r0, r3
 8014320:	f001 f812 	bl	8015348 <ff_del_syncobj>
 8014324:	4603      	mov	r3, r0
 8014326:	2b00      	cmp	r3, #0
 8014328:	d101      	bne.n	801432e <f_mount+0x52>
 801432a:	2302      	movs	r3, #2
 801432c:	e033      	b.n	8014396 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801432e:	69bb      	ldr	r3, [r7, #24]
 8014330:	2200      	movs	r2, #0
 8014332:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	2b00      	cmp	r3, #0
 8014338:	d00f      	beq.n	801435a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	2200      	movs	r2, #0
 801433e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8014340:	69fb      	ldr	r3, [r7, #28]
 8014342:	b2da      	uxtb	r2, r3
 8014344:	68fb      	ldr	r3, [r7, #12]
 8014346:	330c      	adds	r3, #12
 8014348:	4619      	mov	r1, r3
 801434a:	4610      	mov	r0, r2
 801434c:	f000 ffe1 	bl	8015312 <ff_cre_syncobj>
 8014350:	4603      	mov	r3, r0
 8014352:	2b00      	cmp	r3, #0
 8014354:	d101      	bne.n	801435a <f_mount+0x7e>
 8014356:	2302      	movs	r3, #2
 8014358:	e01d      	b.n	8014396 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801435a:	68fa      	ldr	r2, [r7, #12]
 801435c:	4910      	ldr	r1, [pc, #64]	; (80143a0 <f_mount+0xc4>)
 801435e:	69fb      	ldr	r3, [r7, #28]
 8014360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d002      	beq.n	8014370 <f_mount+0x94>
 801436a:	79fb      	ldrb	r3, [r7, #7]
 801436c:	2b01      	cmp	r3, #1
 801436e:	d001      	beq.n	8014374 <f_mount+0x98>
 8014370:	2300      	movs	r3, #0
 8014372:	e010      	b.n	8014396 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014374:	f107 010c 	add.w	r1, r7, #12
 8014378:	f107 0308 	add.w	r3, r7, #8
 801437c:	2200      	movs	r2, #0
 801437e:	4618      	mov	r0, r3
 8014380:	f7ff fd10 	bl	8013da4 <find_volume>
 8014384:	4603      	mov	r3, r0
 8014386:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	7dfa      	ldrb	r2, [r7, #23]
 801438c:	4611      	mov	r1, r2
 801438e:	4618      	mov	r0, r3
 8014390:	f7fe fb12 	bl	80129b8 <unlock_fs>
 8014394:	7dfb      	ldrb	r3, [r7, #23]
}
 8014396:	4618      	mov	r0, r3
 8014398:	3720      	adds	r7, #32
 801439a:	46bd      	mov	sp, r7
 801439c:	bd80      	pop	{r7, pc}
 801439e:	bf00      	nop
 80143a0:	20000844 	.word	0x20000844

080143a4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80143a4:	b580      	push	{r7, lr}
 80143a6:	b098      	sub	sp, #96	; 0x60
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	60f8      	str	r0, [r7, #12]
 80143ac:	60b9      	str	r1, [r7, #8]
 80143ae:	4613      	mov	r3, r2
 80143b0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d101      	bne.n	80143bc <f_open+0x18>
 80143b8:	2309      	movs	r3, #9
 80143ba:	e1b4      	b.n	8014726 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80143bc:	79fb      	ldrb	r3, [r7, #7]
 80143be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80143c2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80143c4:	79fa      	ldrb	r2, [r7, #7]
 80143c6:	f107 0110 	add.w	r1, r7, #16
 80143ca:	f107 0308 	add.w	r3, r7, #8
 80143ce:	4618      	mov	r0, r3
 80143d0:	f7ff fce8 	bl	8013da4 <find_volume>
 80143d4:	4603      	mov	r3, r0
 80143d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80143da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80143de:	2b00      	cmp	r3, #0
 80143e0:	f040 8191 	bne.w	8014706 <f_open+0x362>
		dj.obj.fs = fs;
 80143e4:	693b      	ldr	r3, [r7, #16]
 80143e6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80143e8:	68ba      	ldr	r2, [r7, #8]
 80143ea:	f107 0314 	add.w	r3, r7, #20
 80143ee:	4611      	mov	r1, r2
 80143f0:	4618      	mov	r0, r3
 80143f2:	f7ff fbcb 	bl	8013b8c <follow_path>
 80143f6:	4603      	mov	r3, r0
 80143f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80143fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014400:	2b00      	cmp	r3, #0
 8014402:	d11a      	bne.n	801443a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014404:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014408:	b25b      	sxtb	r3, r3
 801440a:	2b00      	cmp	r3, #0
 801440c:	da03      	bge.n	8014416 <f_open+0x72>
				res = FR_INVALID_NAME;
 801440e:	2306      	movs	r3, #6
 8014410:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014414:	e011      	b.n	801443a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014416:	79fb      	ldrb	r3, [r7, #7]
 8014418:	f023 0301 	bic.w	r3, r3, #1
 801441c:	2b00      	cmp	r3, #0
 801441e:	bf14      	ite	ne
 8014420:	2301      	movne	r3, #1
 8014422:	2300      	moveq	r3, #0
 8014424:	b2db      	uxtb	r3, r3
 8014426:	461a      	mov	r2, r3
 8014428:	f107 0314 	add.w	r3, r7, #20
 801442c:	4611      	mov	r1, r2
 801442e:	4618      	mov	r0, r3
 8014430:	f7fe fade 	bl	80129f0 <chk_lock>
 8014434:	4603      	mov	r3, r0
 8014436:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801443a:	79fb      	ldrb	r3, [r7, #7]
 801443c:	f003 031c 	and.w	r3, r3, #28
 8014440:	2b00      	cmp	r3, #0
 8014442:	d07f      	beq.n	8014544 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8014444:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014448:	2b00      	cmp	r3, #0
 801444a:	d017      	beq.n	801447c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801444c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014450:	2b04      	cmp	r3, #4
 8014452:	d10e      	bne.n	8014472 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014454:	f7fe fb28 	bl	8012aa8 <enq_lock>
 8014458:	4603      	mov	r3, r0
 801445a:	2b00      	cmp	r3, #0
 801445c:	d006      	beq.n	801446c <f_open+0xc8>
 801445e:	f107 0314 	add.w	r3, r7, #20
 8014462:	4618      	mov	r0, r3
 8014464:	f7ff fa6c 	bl	8013940 <dir_register>
 8014468:	4603      	mov	r3, r0
 801446a:	e000      	b.n	801446e <f_open+0xca>
 801446c:	2312      	movs	r3, #18
 801446e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8014472:	79fb      	ldrb	r3, [r7, #7]
 8014474:	f043 0308 	orr.w	r3, r3, #8
 8014478:	71fb      	strb	r3, [r7, #7]
 801447a:	e010      	b.n	801449e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801447c:	7ebb      	ldrb	r3, [r7, #26]
 801447e:	f003 0311 	and.w	r3, r3, #17
 8014482:	2b00      	cmp	r3, #0
 8014484:	d003      	beq.n	801448e <f_open+0xea>
					res = FR_DENIED;
 8014486:	2307      	movs	r3, #7
 8014488:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801448c:	e007      	b.n	801449e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801448e:	79fb      	ldrb	r3, [r7, #7]
 8014490:	f003 0304 	and.w	r3, r3, #4
 8014494:	2b00      	cmp	r3, #0
 8014496:	d002      	beq.n	801449e <f_open+0xfa>
 8014498:	2308      	movs	r3, #8
 801449a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801449e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d168      	bne.n	8014578 <f_open+0x1d4>
 80144a6:	79fb      	ldrb	r3, [r7, #7]
 80144a8:	f003 0308 	and.w	r3, r3, #8
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d063      	beq.n	8014578 <f_open+0x1d4>
				dw = GET_FATTIME();
 80144b0:	f7fb ff2e 	bl	8010310 <get_fattime>
 80144b4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80144b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144b8:	330e      	adds	r3, #14
 80144ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80144bc:	4618      	mov	r0, r3
 80144be:	f7fe f9bb 	bl	8012838 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80144c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144c4:	3316      	adds	r3, #22
 80144c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80144c8:	4618      	mov	r0, r3
 80144ca:	f7fe f9b5 	bl	8012838 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80144ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144d0:	330b      	adds	r3, #11
 80144d2:	2220      	movs	r2, #32
 80144d4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80144d6:	693b      	ldr	r3, [r7, #16]
 80144d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80144da:	4611      	mov	r1, r2
 80144dc:	4618      	mov	r0, r3
 80144de:	f7ff f93e 	bl	801375e <ld_clust>
 80144e2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80144e4:	693b      	ldr	r3, [r7, #16]
 80144e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80144e8:	2200      	movs	r2, #0
 80144ea:	4618      	mov	r0, r3
 80144ec:	f7ff f956 	bl	801379c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80144f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144f2:	331c      	adds	r3, #28
 80144f4:	2100      	movs	r1, #0
 80144f6:	4618      	mov	r0, r3
 80144f8:	f7fe f99e 	bl	8012838 <st_dword>
					fs->wflag = 1;
 80144fc:	693b      	ldr	r3, [r7, #16]
 80144fe:	2201      	movs	r2, #1
 8014500:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014504:	2b00      	cmp	r3, #0
 8014506:	d037      	beq.n	8014578 <f_open+0x1d4>
						dw = fs->winsect;
 8014508:	693b      	ldr	r3, [r7, #16]
 801450a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801450c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801450e:	f107 0314 	add.w	r3, r7, #20
 8014512:	2200      	movs	r2, #0
 8014514:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8014516:	4618      	mov	r0, r3
 8014518:	f7fe fe69 	bl	80131ee <remove_chain>
 801451c:	4603      	mov	r3, r0
 801451e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8014522:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014526:	2b00      	cmp	r3, #0
 8014528:	d126      	bne.n	8014578 <f_open+0x1d4>
							res = move_window(fs, dw);
 801452a:	693b      	ldr	r3, [r7, #16]
 801452c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801452e:	4618      	mov	r0, r3
 8014530:	f7fe fc0e 	bl	8012d50 <move_window>
 8014534:	4603      	mov	r3, r0
 8014536:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801453a:	693b      	ldr	r3, [r7, #16]
 801453c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801453e:	3a01      	subs	r2, #1
 8014540:	611a      	str	r2, [r3, #16]
 8014542:	e019      	b.n	8014578 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014544:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014548:	2b00      	cmp	r3, #0
 801454a:	d115      	bne.n	8014578 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801454c:	7ebb      	ldrb	r3, [r7, #26]
 801454e:	f003 0310 	and.w	r3, r3, #16
 8014552:	2b00      	cmp	r3, #0
 8014554:	d003      	beq.n	801455e <f_open+0x1ba>
					res = FR_NO_FILE;
 8014556:	2304      	movs	r3, #4
 8014558:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801455c:	e00c      	b.n	8014578 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801455e:	79fb      	ldrb	r3, [r7, #7]
 8014560:	f003 0302 	and.w	r3, r3, #2
 8014564:	2b00      	cmp	r3, #0
 8014566:	d007      	beq.n	8014578 <f_open+0x1d4>
 8014568:	7ebb      	ldrb	r3, [r7, #26]
 801456a:	f003 0301 	and.w	r3, r3, #1
 801456e:	2b00      	cmp	r3, #0
 8014570:	d002      	beq.n	8014578 <f_open+0x1d4>
						res = FR_DENIED;
 8014572:	2307      	movs	r3, #7
 8014574:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8014578:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801457c:	2b00      	cmp	r3, #0
 801457e:	d128      	bne.n	80145d2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014580:	79fb      	ldrb	r3, [r7, #7]
 8014582:	f003 0308 	and.w	r3, r3, #8
 8014586:	2b00      	cmp	r3, #0
 8014588:	d003      	beq.n	8014592 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801458a:	79fb      	ldrb	r3, [r7, #7]
 801458c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014590:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014592:	693b      	ldr	r3, [r7, #16]
 8014594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801459a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80145a0:	79fb      	ldrb	r3, [r7, #7]
 80145a2:	f023 0301 	bic.w	r3, r3, #1
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	bf14      	ite	ne
 80145aa:	2301      	movne	r3, #1
 80145ac:	2300      	moveq	r3, #0
 80145ae:	b2db      	uxtb	r3, r3
 80145b0:	461a      	mov	r2, r3
 80145b2:	f107 0314 	add.w	r3, r7, #20
 80145b6:	4611      	mov	r1, r2
 80145b8:	4618      	mov	r0, r3
 80145ba:	f7fe fa97 	bl	8012aec <inc_lock>
 80145be:	4602      	mov	r2, r0
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	691b      	ldr	r3, [r3, #16]
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d102      	bne.n	80145d2 <f_open+0x22e>
 80145cc:	2302      	movs	r3, #2
 80145ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80145d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	f040 8095 	bne.w	8014706 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80145dc:	693b      	ldr	r3, [r7, #16]
 80145de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80145e0:	4611      	mov	r1, r2
 80145e2:	4618      	mov	r0, r3
 80145e4:	f7ff f8bb 	bl	801375e <ld_clust>
 80145e8:	4602      	mov	r2, r0
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80145ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145f0:	331c      	adds	r3, #28
 80145f2:	4618      	mov	r0, r3
 80145f4:	f7fe f8e2 	bl	80127bc <ld_dword>
 80145f8:	4602      	mov	r2, r0
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	2200      	movs	r2, #0
 8014602:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8014604:	693a      	ldr	r2, [r7, #16]
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801460a:	693b      	ldr	r3, [r7, #16]
 801460c:	88da      	ldrh	r2, [r3, #6]
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	79fa      	ldrb	r2, [r7, #7]
 8014616:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	2200      	movs	r2, #0
 801461c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	2200      	movs	r2, #0
 8014622:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	2200      	movs	r2, #0
 8014628:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	3330      	adds	r3, #48	; 0x30
 801462e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014632:	2100      	movs	r1, #0
 8014634:	4618      	mov	r0, r3
 8014636:	f7fe f94c 	bl	80128d2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801463a:	79fb      	ldrb	r3, [r7, #7]
 801463c:	f003 0320 	and.w	r3, r3, #32
 8014640:	2b00      	cmp	r3, #0
 8014642:	d060      	beq.n	8014706 <f_open+0x362>
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	68db      	ldr	r3, [r3, #12]
 8014648:	2b00      	cmp	r3, #0
 801464a:	d05c      	beq.n	8014706 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	68da      	ldr	r2, [r3, #12]
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014654:	693b      	ldr	r3, [r7, #16]
 8014656:	895b      	ldrh	r3, [r3, #10]
 8014658:	025b      	lsls	r3, r3, #9
 801465a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	689b      	ldr	r3, [r3, #8]
 8014660:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	68db      	ldr	r3, [r3, #12]
 8014666:	657b      	str	r3, [r7, #84]	; 0x54
 8014668:	e016      	b.n	8014698 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801466e:	4618      	mov	r0, r3
 8014670:	f7fe fc29 	bl	8012ec6 <get_fat>
 8014674:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8014676:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014678:	2b01      	cmp	r3, #1
 801467a:	d802      	bhi.n	8014682 <f_open+0x2de>
 801467c:	2302      	movs	r3, #2
 801467e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014682:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014688:	d102      	bne.n	8014690 <f_open+0x2ec>
 801468a:	2301      	movs	r3, #1
 801468c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014690:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014694:	1ad3      	subs	r3, r2, r3
 8014696:	657b      	str	r3, [r7, #84]	; 0x54
 8014698:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801469c:	2b00      	cmp	r3, #0
 801469e:	d103      	bne.n	80146a8 <f_open+0x304>
 80146a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80146a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80146a4:	429a      	cmp	r2, r3
 80146a6:	d8e0      	bhi.n	801466a <f_open+0x2c6>
				}
				fp->clust = clst;
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80146ac:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80146ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d127      	bne.n	8014706 <f_open+0x362>
 80146b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80146b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d022      	beq.n	8014706 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80146c0:	693b      	ldr	r3, [r7, #16]
 80146c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80146c4:	4618      	mov	r0, r3
 80146c6:	f7fe fbdf 	bl	8012e88 <clust2sect>
 80146ca:	6478      	str	r0, [r7, #68]	; 0x44
 80146cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d103      	bne.n	80146da <f_open+0x336>
						res = FR_INT_ERR;
 80146d2:	2302      	movs	r3, #2
 80146d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80146d8:	e015      	b.n	8014706 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80146da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80146dc:	0a5a      	lsrs	r2, r3, #9
 80146de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80146e0:	441a      	add	r2, r3
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80146e6:	693b      	ldr	r3, [r7, #16]
 80146e8:	7858      	ldrb	r0, [r3, #1]
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	6a1a      	ldr	r2, [r3, #32]
 80146f4:	2301      	movs	r3, #1
 80146f6:	f7fd ffeb 	bl	80126d0 <disk_read>
 80146fa:	4603      	mov	r3, r0
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d002      	beq.n	8014706 <f_open+0x362>
 8014700:	2301      	movs	r3, #1
 8014702:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014706:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801470a:	2b00      	cmp	r3, #0
 801470c:	d002      	beq.n	8014714 <f_open+0x370>
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	2200      	movs	r2, #0
 8014712:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014714:	693b      	ldr	r3, [r7, #16]
 8014716:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801471a:	4611      	mov	r1, r2
 801471c:	4618      	mov	r0, r3
 801471e:	f7fe f94b 	bl	80129b8 <unlock_fs>
 8014722:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8014726:	4618      	mov	r0, r3
 8014728:	3760      	adds	r7, #96	; 0x60
 801472a:	46bd      	mov	sp, r7
 801472c:	bd80      	pop	{r7, pc}

0801472e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801472e:	b580      	push	{r7, lr}
 8014730:	b08c      	sub	sp, #48	; 0x30
 8014732:	af00      	add	r7, sp, #0
 8014734:	60f8      	str	r0, [r7, #12]
 8014736:	60b9      	str	r1, [r7, #8]
 8014738:	607a      	str	r2, [r7, #4]
 801473a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801473c:	68bb      	ldr	r3, [r7, #8]
 801473e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014740:	683b      	ldr	r3, [r7, #0]
 8014742:	2200      	movs	r2, #0
 8014744:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	f107 0210 	add.w	r2, r7, #16
 801474c:	4611      	mov	r1, r2
 801474e:	4618      	mov	r0, r3
 8014750:	f7ff fd7c 	bl	801424c <validate>
 8014754:	4603      	mov	r3, r0
 8014756:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801475a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801475e:	2b00      	cmp	r3, #0
 8014760:	d107      	bne.n	8014772 <f_write+0x44>
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	7d5b      	ldrb	r3, [r3, #21]
 8014766:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801476a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801476e:	2b00      	cmp	r3, #0
 8014770:	d009      	beq.n	8014786 <f_write+0x58>
 8014772:	693b      	ldr	r3, [r7, #16]
 8014774:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8014778:	4611      	mov	r1, r2
 801477a:	4618      	mov	r0, r3
 801477c:	f7fe f91c 	bl	80129b8 <unlock_fs>
 8014780:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014784:	e173      	b.n	8014a6e <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	7d1b      	ldrb	r3, [r3, #20]
 801478a:	f003 0302 	and.w	r3, r3, #2
 801478e:	2b00      	cmp	r3, #0
 8014790:	d106      	bne.n	80147a0 <f_write+0x72>
 8014792:	693b      	ldr	r3, [r7, #16]
 8014794:	2107      	movs	r1, #7
 8014796:	4618      	mov	r0, r3
 8014798:	f7fe f90e 	bl	80129b8 <unlock_fs>
 801479c:	2307      	movs	r3, #7
 801479e:	e166      	b.n	8014a6e <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	699a      	ldr	r2, [r3, #24]
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	441a      	add	r2, r3
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	699b      	ldr	r3, [r3, #24]
 80147ac:	429a      	cmp	r2, r3
 80147ae:	f080 814b 	bcs.w	8014a48 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	699b      	ldr	r3, [r3, #24]
 80147b6:	43db      	mvns	r3, r3
 80147b8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80147ba:	e145      	b.n	8014a48 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	699b      	ldr	r3, [r3, #24]
 80147c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	f040 8101 	bne.w	80149cc <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	699b      	ldr	r3, [r3, #24]
 80147ce:	0a5b      	lsrs	r3, r3, #9
 80147d0:	693a      	ldr	r2, [r7, #16]
 80147d2:	8952      	ldrh	r2, [r2, #10]
 80147d4:	3a01      	subs	r2, #1
 80147d6:	4013      	ands	r3, r2
 80147d8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80147da:	69bb      	ldr	r3, [r7, #24]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d14d      	bne.n	801487c <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	699b      	ldr	r3, [r3, #24]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d10c      	bne.n	8014802 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	689b      	ldr	r3, [r3, #8]
 80147ec:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80147ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d11a      	bne.n	801482a <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	2100      	movs	r1, #0
 80147f8:	4618      	mov	r0, r3
 80147fa:	f7fe fd5d 	bl	80132b8 <create_chain>
 80147fe:	62b8      	str	r0, [r7, #40]	; 0x28
 8014800:	e013      	b.n	801482a <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014806:	2b00      	cmp	r3, #0
 8014808:	d007      	beq.n	801481a <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	699b      	ldr	r3, [r3, #24]
 801480e:	4619      	mov	r1, r3
 8014810:	68f8      	ldr	r0, [r7, #12]
 8014812:	f7fe fde9 	bl	80133e8 <clmt_clust>
 8014816:	62b8      	str	r0, [r7, #40]	; 0x28
 8014818:	e007      	b.n	801482a <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801481a:	68fa      	ldr	r2, [r7, #12]
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	69db      	ldr	r3, [r3, #28]
 8014820:	4619      	mov	r1, r3
 8014822:	4610      	mov	r0, r2
 8014824:	f7fe fd48 	bl	80132b8 <create_chain>
 8014828:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801482a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801482c:	2b00      	cmp	r3, #0
 801482e:	f000 8110 	beq.w	8014a52 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014834:	2b01      	cmp	r3, #1
 8014836:	d109      	bne.n	801484c <f_write+0x11e>
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	2202      	movs	r2, #2
 801483c:	755a      	strb	r2, [r3, #21]
 801483e:	693b      	ldr	r3, [r7, #16]
 8014840:	2102      	movs	r1, #2
 8014842:	4618      	mov	r0, r3
 8014844:	f7fe f8b8 	bl	80129b8 <unlock_fs>
 8014848:	2302      	movs	r3, #2
 801484a:	e110      	b.n	8014a6e <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801484c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801484e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014852:	d109      	bne.n	8014868 <f_write+0x13a>
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	2201      	movs	r2, #1
 8014858:	755a      	strb	r2, [r3, #21]
 801485a:	693b      	ldr	r3, [r7, #16]
 801485c:	2101      	movs	r1, #1
 801485e:	4618      	mov	r0, r3
 8014860:	f7fe f8aa 	bl	80129b8 <unlock_fs>
 8014864:	2301      	movs	r3, #1
 8014866:	e102      	b.n	8014a6e <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801486c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	689b      	ldr	r3, [r3, #8]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d102      	bne.n	801487c <f_write+0x14e>
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801487a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	7d1b      	ldrb	r3, [r3, #20]
 8014880:	b25b      	sxtb	r3, r3
 8014882:	2b00      	cmp	r3, #0
 8014884:	da1d      	bge.n	80148c2 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014886:	693b      	ldr	r3, [r7, #16]
 8014888:	7858      	ldrb	r0, [r3, #1]
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	6a1a      	ldr	r2, [r3, #32]
 8014894:	2301      	movs	r3, #1
 8014896:	f7fd ff3b 	bl	8012710 <disk_write>
 801489a:	4603      	mov	r3, r0
 801489c:	2b00      	cmp	r3, #0
 801489e:	d009      	beq.n	80148b4 <f_write+0x186>
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	2201      	movs	r2, #1
 80148a4:	755a      	strb	r2, [r3, #21]
 80148a6:	693b      	ldr	r3, [r7, #16]
 80148a8:	2101      	movs	r1, #1
 80148aa:	4618      	mov	r0, r3
 80148ac:	f7fe f884 	bl	80129b8 <unlock_fs>
 80148b0:	2301      	movs	r3, #1
 80148b2:	e0dc      	b.n	8014a6e <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	7d1b      	ldrb	r3, [r3, #20]
 80148b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80148bc:	b2da      	uxtb	r2, r3
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80148c2:	693a      	ldr	r2, [r7, #16]
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	69db      	ldr	r3, [r3, #28]
 80148c8:	4619      	mov	r1, r3
 80148ca:	4610      	mov	r0, r2
 80148cc:	f7fe fadc 	bl	8012e88 <clust2sect>
 80148d0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80148d2:	697b      	ldr	r3, [r7, #20]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d109      	bne.n	80148ec <f_write+0x1be>
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	2202      	movs	r2, #2
 80148dc:	755a      	strb	r2, [r3, #21]
 80148de:	693b      	ldr	r3, [r7, #16]
 80148e0:	2102      	movs	r1, #2
 80148e2:	4618      	mov	r0, r3
 80148e4:	f7fe f868 	bl	80129b8 <unlock_fs>
 80148e8:	2302      	movs	r3, #2
 80148ea:	e0c0      	b.n	8014a6e <f_write+0x340>
			sect += csect;
 80148ec:	697a      	ldr	r2, [r7, #20]
 80148ee:	69bb      	ldr	r3, [r7, #24]
 80148f0:	4413      	add	r3, r2
 80148f2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	0a5b      	lsrs	r3, r3, #9
 80148f8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80148fa:	6a3b      	ldr	r3, [r7, #32]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d041      	beq.n	8014984 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014900:	69ba      	ldr	r2, [r7, #24]
 8014902:	6a3b      	ldr	r3, [r7, #32]
 8014904:	4413      	add	r3, r2
 8014906:	693a      	ldr	r2, [r7, #16]
 8014908:	8952      	ldrh	r2, [r2, #10]
 801490a:	4293      	cmp	r3, r2
 801490c:	d905      	bls.n	801491a <f_write+0x1ec>
					cc = fs->csize - csect;
 801490e:	693b      	ldr	r3, [r7, #16]
 8014910:	895b      	ldrh	r3, [r3, #10]
 8014912:	461a      	mov	r2, r3
 8014914:	69bb      	ldr	r3, [r7, #24]
 8014916:	1ad3      	subs	r3, r2, r3
 8014918:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801491a:	693b      	ldr	r3, [r7, #16]
 801491c:	7858      	ldrb	r0, [r3, #1]
 801491e:	6a3b      	ldr	r3, [r7, #32]
 8014920:	697a      	ldr	r2, [r7, #20]
 8014922:	69f9      	ldr	r1, [r7, #28]
 8014924:	f7fd fef4 	bl	8012710 <disk_write>
 8014928:	4603      	mov	r3, r0
 801492a:	2b00      	cmp	r3, #0
 801492c:	d009      	beq.n	8014942 <f_write+0x214>
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	2201      	movs	r2, #1
 8014932:	755a      	strb	r2, [r3, #21]
 8014934:	693b      	ldr	r3, [r7, #16]
 8014936:	2101      	movs	r1, #1
 8014938:	4618      	mov	r0, r3
 801493a:	f7fe f83d 	bl	80129b8 <unlock_fs>
 801493e:	2301      	movs	r3, #1
 8014940:	e095      	b.n	8014a6e <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	6a1a      	ldr	r2, [r3, #32]
 8014946:	697b      	ldr	r3, [r7, #20]
 8014948:	1ad3      	subs	r3, r2, r3
 801494a:	6a3a      	ldr	r2, [r7, #32]
 801494c:	429a      	cmp	r2, r3
 801494e:	d915      	bls.n	801497c <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	6a1a      	ldr	r2, [r3, #32]
 801495a:	697b      	ldr	r3, [r7, #20]
 801495c:	1ad3      	subs	r3, r2, r3
 801495e:	025b      	lsls	r3, r3, #9
 8014960:	69fa      	ldr	r2, [r7, #28]
 8014962:	4413      	add	r3, r2
 8014964:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014968:	4619      	mov	r1, r3
 801496a:	f7fd ff91 	bl	8012890 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	7d1b      	ldrb	r3, [r3, #20]
 8014972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014976:	b2da      	uxtb	r2, r3
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801497c:	6a3b      	ldr	r3, [r7, #32]
 801497e:	025b      	lsls	r3, r3, #9
 8014980:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8014982:	e044      	b.n	8014a0e <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	6a1b      	ldr	r3, [r3, #32]
 8014988:	697a      	ldr	r2, [r7, #20]
 801498a:	429a      	cmp	r2, r3
 801498c:	d01b      	beq.n	80149c6 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	699a      	ldr	r2, [r3, #24]
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014996:	429a      	cmp	r2, r3
 8014998:	d215      	bcs.n	80149c6 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801499a:	693b      	ldr	r3, [r7, #16]
 801499c:	7858      	ldrb	r0, [r3, #1]
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80149a4:	2301      	movs	r3, #1
 80149a6:	697a      	ldr	r2, [r7, #20]
 80149a8:	f7fd fe92 	bl	80126d0 <disk_read>
 80149ac:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d009      	beq.n	80149c6 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	2201      	movs	r2, #1
 80149b6:	755a      	strb	r2, [r3, #21]
 80149b8:	693b      	ldr	r3, [r7, #16]
 80149ba:	2101      	movs	r1, #1
 80149bc:	4618      	mov	r0, r3
 80149be:	f7fd fffb 	bl	80129b8 <unlock_fs>
 80149c2:	2301      	movs	r3, #1
 80149c4:	e053      	b.n	8014a6e <f_write+0x340>
			}
#endif
			fp->sect = sect;
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	697a      	ldr	r2, [r7, #20]
 80149ca:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	699b      	ldr	r3, [r3, #24]
 80149d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80149d4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80149d8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80149da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	429a      	cmp	r2, r3
 80149e0:	d901      	bls.n	80149e6 <f_write+0x2b8>
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	699b      	ldr	r3, [r3, #24]
 80149f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80149f4:	4413      	add	r3, r2
 80149f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80149f8:	69f9      	ldr	r1, [r7, #28]
 80149fa:	4618      	mov	r0, r3
 80149fc:	f7fd ff48 	bl	8012890 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	7d1b      	ldrb	r3, [r3, #20]
 8014a04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014a08:	b2da      	uxtb	r2, r3
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8014a0e:	69fa      	ldr	r2, [r7, #28]
 8014a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a12:	4413      	add	r3, r2
 8014a14:	61fb      	str	r3, [r7, #28]
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	699a      	ldr	r2, [r3, #24]
 8014a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a1c:	441a      	add	r2, r3
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	619a      	str	r2, [r3, #24]
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	68da      	ldr	r2, [r3, #12]
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	699b      	ldr	r3, [r3, #24]
 8014a2a:	429a      	cmp	r2, r3
 8014a2c:	bf38      	it	cc
 8014a2e:	461a      	movcc	r2, r3
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	60da      	str	r2, [r3, #12]
 8014a34:	683b      	ldr	r3, [r7, #0]
 8014a36:	681a      	ldr	r2, [r3, #0]
 8014a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a3a:	441a      	add	r2, r3
 8014a3c:	683b      	ldr	r3, [r7, #0]
 8014a3e:	601a      	str	r2, [r3, #0]
 8014a40:	687a      	ldr	r2, [r7, #4]
 8014a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a44:	1ad3      	subs	r3, r2, r3
 8014a46:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	f47f aeb6 	bne.w	80147bc <f_write+0x8e>
 8014a50:	e000      	b.n	8014a54 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014a52:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	7d1b      	ldrb	r3, [r3, #20]
 8014a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a5c:	b2da      	uxtb	r2, r3
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8014a62:	693b      	ldr	r3, [r7, #16]
 8014a64:	2100      	movs	r1, #0
 8014a66:	4618      	mov	r0, r3
 8014a68:	f7fd ffa6 	bl	80129b8 <unlock_fs>
 8014a6c:	2300      	movs	r3, #0
}
 8014a6e:	4618      	mov	r0, r3
 8014a70:	3730      	adds	r7, #48	; 0x30
 8014a72:	46bd      	mov	sp, r7
 8014a74:	bd80      	pop	{r7, pc}

08014a76 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014a76:	b580      	push	{r7, lr}
 8014a78:	b086      	sub	sp, #24
 8014a7a:	af00      	add	r7, sp, #0
 8014a7c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	f107 0208 	add.w	r2, r7, #8
 8014a84:	4611      	mov	r1, r2
 8014a86:	4618      	mov	r0, r3
 8014a88:	f7ff fbe0 	bl	801424c <validate>
 8014a8c:	4603      	mov	r3, r0
 8014a8e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014a90:	7dfb      	ldrb	r3, [r7, #23]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d16d      	bne.n	8014b72 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	7d1b      	ldrb	r3, [r3, #20]
 8014a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d067      	beq.n	8014b72 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	7d1b      	ldrb	r3, [r3, #20]
 8014aa6:	b25b      	sxtb	r3, r3
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	da1a      	bge.n	8014ae2 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8014aac:	68bb      	ldr	r3, [r7, #8]
 8014aae:	7858      	ldrb	r0, [r3, #1]
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	6a1a      	ldr	r2, [r3, #32]
 8014aba:	2301      	movs	r3, #1
 8014abc:	f7fd fe28 	bl	8012710 <disk_write>
 8014ac0:	4603      	mov	r3, r0
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d006      	beq.n	8014ad4 <f_sync+0x5e>
 8014ac6:	68bb      	ldr	r3, [r7, #8]
 8014ac8:	2101      	movs	r1, #1
 8014aca:	4618      	mov	r0, r3
 8014acc:	f7fd ff74 	bl	80129b8 <unlock_fs>
 8014ad0:	2301      	movs	r3, #1
 8014ad2:	e055      	b.n	8014b80 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	7d1b      	ldrb	r3, [r3, #20]
 8014ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014adc:	b2da      	uxtb	r2, r3
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8014ae2:	f7fb fc15 	bl	8010310 <get_fattime>
 8014ae6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014ae8:	68ba      	ldr	r2, [r7, #8]
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014aee:	4619      	mov	r1, r3
 8014af0:	4610      	mov	r0, r2
 8014af2:	f7fe f92d 	bl	8012d50 <move_window>
 8014af6:	4603      	mov	r3, r0
 8014af8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8014afa:	7dfb      	ldrb	r3, [r7, #23]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d138      	bne.n	8014b72 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b04:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	330b      	adds	r3, #11
 8014b0a:	781a      	ldrb	r2, [r3, #0]
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	330b      	adds	r3, #11
 8014b10:	f042 0220 	orr.w	r2, r2, #32
 8014b14:	b2d2      	uxtb	r2, r2
 8014b16:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	6818      	ldr	r0, [r3, #0]
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	689b      	ldr	r3, [r3, #8]
 8014b20:	461a      	mov	r2, r3
 8014b22:	68f9      	ldr	r1, [r7, #12]
 8014b24:	f7fe fe3a 	bl	801379c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	f103 021c 	add.w	r2, r3, #28
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	68db      	ldr	r3, [r3, #12]
 8014b32:	4619      	mov	r1, r3
 8014b34:	4610      	mov	r0, r2
 8014b36:	f7fd fe7f 	bl	8012838 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	3316      	adds	r3, #22
 8014b3e:	6939      	ldr	r1, [r7, #16]
 8014b40:	4618      	mov	r0, r3
 8014b42:	f7fd fe79 	bl	8012838 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	3312      	adds	r3, #18
 8014b4a:	2100      	movs	r1, #0
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	f7fd fe58 	bl	8012802 <st_word>
					fs->wflag = 1;
 8014b52:	68bb      	ldr	r3, [r7, #8]
 8014b54:	2201      	movs	r2, #1
 8014b56:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014b58:	68bb      	ldr	r3, [r7, #8]
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	f7fe f926 	bl	8012dac <sync_fs>
 8014b60:	4603      	mov	r3, r0
 8014b62:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	7d1b      	ldrb	r3, [r3, #20]
 8014b68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014b6c:	b2da      	uxtb	r2, r3
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014b72:	68bb      	ldr	r3, [r7, #8]
 8014b74:	7dfa      	ldrb	r2, [r7, #23]
 8014b76:	4611      	mov	r1, r2
 8014b78:	4618      	mov	r0, r3
 8014b7a:	f7fd ff1d 	bl	80129b8 <unlock_fs>
 8014b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014b80:	4618      	mov	r0, r3
 8014b82:	3718      	adds	r7, #24
 8014b84:	46bd      	mov	sp, r7
 8014b86:	bd80      	pop	{r7, pc}

08014b88 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b084      	sub	sp, #16
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014b90:	6878      	ldr	r0, [r7, #4]
 8014b92:	f7ff ff70 	bl	8014a76 <f_sync>
 8014b96:	4603      	mov	r3, r0
 8014b98:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8014b9a:	7bfb      	ldrb	r3, [r7, #15]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d11d      	bne.n	8014bdc <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	f107 0208 	add.w	r2, r7, #8
 8014ba6:	4611      	mov	r1, r2
 8014ba8:	4618      	mov	r0, r3
 8014baa:	f7ff fb4f 	bl	801424c <validate>
 8014bae:	4603      	mov	r3, r0
 8014bb0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014bb2:	7bfb      	ldrb	r3, [r7, #15]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d111      	bne.n	8014bdc <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	691b      	ldr	r3, [r3, #16]
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	f7fe f823 	bl	8012c08 <dec_lock>
 8014bc2:	4603      	mov	r3, r0
 8014bc4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8014bc6:	7bfb      	ldrb	r3, [r7, #15]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d102      	bne.n	8014bd2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	2200      	movs	r2, #0
 8014bd0:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8014bd2:	68bb      	ldr	r3, [r7, #8]
 8014bd4:	2100      	movs	r1, #0
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	f7fd feee 	bl	80129b8 <unlock_fs>
#endif
		}
	}
	return res;
 8014bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8014bde:	4618      	mov	r0, r3
 8014be0:	3710      	adds	r7, #16
 8014be2:	46bd      	mov	sp, r7
 8014be4:	bd80      	pop	{r7, pc}

08014be6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8014be6:	b580      	push	{r7, lr}
 8014be8:	b090      	sub	sp, #64	; 0x40
 8014bea:	af00      	add	r7, sp, #0
 8014bec:	6078      	str	r0, [r7, #4]
 8014bee:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	f107 0208 	add.w	r2, r7, #8
 8014bf6:	4611      	mov	r1, r2
 8014bf8:	4618      	mov	r0, r3
 8014bfa:	f7ff fb27 	bl	801424c <validate>
 8014bfe:	4603      	mov	r3, r0
 8014c00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8014c04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d103      	bne.n	8014c14 <f_lseek+0x2e>
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	7d5b      	ldrb	r3, [r3, #21]
 8014c10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8014c14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d009      	beq.n	8014c30 <f_lseek+0x4a>
 8014c1c:	68bb      	ldr	r3, [r7, #8]
 8014c1e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8014c22:	4611      	mov	r1, r2
 8014c24:	4618      	mov	r0, r3
 8014c26:	f7fd fec7 	bl	80129b8 <unlock_fs>
 8014c2a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014c2e:	e229      	b.n	8015084 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	f000 80ea 	beq.w	8014e0e <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8014c3a:	683b      	ldr	r3, [r7, #0]
 8014c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c40:	d164      	bne.n	8014d0c <f_lseek+0x126>
			tbl = fp->cltbl;
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c46:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8014c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c4a:	1d1a      	adds	r2, r3, #4
 8014c4c:	627a      	str	r2, [r7, #36]	; 0x24
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	617b      	str	r3, [r7, #20]
 8014c52:	2302      	movs	r3, #2
 8014c54:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	689b      	ldr	r3, [r3, #8]
 8014c5a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8014c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d044      	beq.n	8014cec <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8014c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c64:	613b      	str	r3, [r7, #16]
 8014c66:	2300      	movs	r3, #0
 8014c68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c6c:	3302      	adds	r3, #2
 8014c6e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8014c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c72:	60fb      	str	r3, [r7, #12]
 8014c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c76:	3301      	adds	r3, #1
 8014c78:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014c7e:	4618      	mov	r0, r3
 8014c80:	f7fe f921 	bl	8012ec6 <get_fat>
 8014c84:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8014c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c88:	2b01      	cmp	r3, #1
 8014c8a:	d809      	bhi.n	8014ca0 <f_lseek+0xba>
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	2202      	movs	r2, #2
 8014c90:	755a      	strb	r2, [r3, #21]
 8014c92:	68bb      	ldr	r3, [r7, #8]
 8014c94:	2102      	movs	r1, #2
 8014c96:	4618      	mov	r0, r3
 8014c98:	f7fd fe8e 	bl	80129b8 <unlock_fs>
 8014c9c:	2302      	movs	r3, #2
 8014c9e:	e1f1      	b.n	8015084 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ca6:	d109      	bne.n	8014cbc <f_lseek+0xd6>
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	2201      	movs	r2, #1
 8014cac:	755a      	strb	r2, [r3, #21]
 8014cae:	68bb      	ldr	r3, [r7, #8]
 8014cb0:	2101      	movs	r1, #1
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	f7fd fe80 	bl	80129b8 <unlock_fs>
 8014cb8:	2301      	movs	r3, #1
 8014cba:	e1e3      	b.n	8015084 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	3301      	adds	r3, #1
 8014cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014cc2:	429a      	cmp	r2, r3
 8014cc4:	d0d4      	beq.n	8014c70 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8014cc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014cc8:	697b      	ldr	r3, [r7, #20]
 8014cca:	429a      	cmp	r2, r3
 8014ccc:	d809      	bhi.n	8014ce2 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8014cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cd0:	1d1a      	adds	r2, r3, #4
 8014cd2:	627a      	str	r2, [r7, #36]	; 0x24
 8014cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014cd6:	601a      	str	r2, [r3, #0]
 8014cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cda:	1d1a      	adds	r2, r3, #4
 8014cdc:	627a      	str	r2, [r7, #36]	; 0x24
 8014cde:	693a      	ldr	r2, [r7, #16]
 8014ce0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8014ce2:	68bb      	ldr	r3, [r7, #8]
 8014ce4:	699b      	ldr	r3, [r3, #24]
 8014ce6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014ce8:	429a      	cmp	r2, r3
 8014cea:	d3ba      	bcc.n	8014c62 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014cf2:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8014cf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014cf6:	697b      	ldr	r3, [r7, #20]
 8014cf8:	429a      	cmp	r2, r3
 8014cfa:	d803      	bhi.n	8014d04 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8014cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cfe:	2200      	movs	r2, #0
 8014d00:	601a      	str	r2, [r3, #0]
 8014d02:	e1b6      	b.n	8015072 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8014d04:	2311      	movs	r3, #17
 8014d06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8014d0a:	e1b2      	b.n	8015072 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	68db      	ldr	r3, [r3, #12]
 8014d10:	683a      	ldr	r2, [r7, #0]
 8014d12:	429a      	cmp	r2, r3
 8014d14:	d902      	bls.n	8014d1c <f_lseek+0x136>
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	68db      	ldr	r3, [r3, #12]
 8014d1a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	683a      	ldr	r2, [r7, #0]
 8014d20:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8014d22:	683b      	ldr	r3, [r7, #0]
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	f000 81a4 	beq.w	8015072 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8014d2a:	683b      	ldr	r3, [r7, #0]
 8014d2c:	3b01      	subs	r3, #1
 8014d2e:	4619      	mov	r1, r3
 8014d30:	6878      	ldr	r0, [r7, #4]
 8014d32:	f7fe fb59 	bl	80133e8 <clmt_clust>
 8014d36:	4602      	mov	r2, r0
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8014d3c:	68ba      	ldr	r2, [r7, #8]
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	69db      	ldr	r3, [r3, #28]
 8014d42:	4619      	mov	r1, r3
 8014d44:	4610      	mov	r0, r2
 8014d46:	f7fe f89f 	bl	8012e88 <clust2sect>
 8014d4a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8014d4c:	69bb      	ldr	r3, [r7, #24]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d109      	bne.n	8014d66 <f_lseek+0x180>
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	2202      	movs	r2, #2
 8014d56:	755a      	strb	r2, [r3, #21]
 8014d58:	68bb      	ldr	r3, [r7, #8]
 8014d5a:	2102      	movs	r1, #2
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	f7fd fe2b 	bl	80129b8 <unlock_fs>
 8014d62:	2302      	movs	r3, #2
 8014d64:	e18e      	b.n	8015084 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8014d66:	683b      	ldr	r3, [r7, #0]
 8014d68:	3b01      	subs	r3, #1
 8014d6a:	0a5b      	lsrs	r3, r3, #9
 8014d6c:	68ba      	ldr	r2, [r7, #8]
 8014d6e:	8952      	ldrh	r2, [r2, #10]
 8014d70:	3a01      	subs	r2, #1
 8014d72:	4013      	ands	r3, r2
 8014d74:	69ba      	ldr	r2, [r7, #24]
 8014d76:	4413      	add	r3, r2
 8014d78:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	699b      	ldr	r3, [r3, #24]
 8014d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	f000 8175 	beq.w	8015072 <f_lseek+0x48c>
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	6a1b      	ldr	r3, [r3, #32]
 8014d8c:	69ba      	ldr	r2, [r7, #24]
 8014d8e:	429a      	cmp	r2, r3
 8014d90:	f000 816f 	beq.w	8015072 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	7d1b      	ldrb	r3, [r3, #20]
 8014d98:	b25b      	sxtb	r3, r3
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	da1d      	bge.n	8014dda <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014d9e:	68bb      	ldr	r3, [r7, #8]
 8014da0:	7858      	ldrb	r0, [r3, #1]
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	6a1a      	ldr	r2, [r3, #32]
 8014dac:	2301      	movs	r3, #1
 8014dae:	f7fd fcaf 	bl	8012710 <disk_write>
 8014db2:	4603      	mov	r3, r0
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d009      	beq.n	8014dcc <f_lseek+0x1e6>
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	2201      	movs	r2, #1
 8014dbc:	755a      	strb	r2, [r3, #21]
 8014dbe:	68bb      	ldr	r3, [r7, #8]
 8014dc0:	2101      	movs	r1, #1
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	f7fd fdf8 	bl	80129b8 <unlock_fs>
 8014dc8:	2301      	movs	r3, #1
 8014dca:	e15b      	b.n	8015084 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	7d1b      	ldrb	r3, [r3, #20]
 8014dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014dd4:	b2da      	uxtb	r2, r3
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8014dda:	68bb      	ldr	r3, [r7, #8]
 8014ddc:	7858      	ldrb	r0, [r3, #1]
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014de4:	2301      	movs	r3, #1
 8014de6:	69ba      	ldr	r2, [r7, #24]
 8014de8:	f7fd fc72 	bl	80126d0 <disk_read>
 8014dec:	4603      	mov	r3, r0
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d009      	beq.n	8014e06 <f_lseek+0x220>
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	2201      	movs	r2, #1
 8014df6:	755a      	strb	r2, [r3, #21]
 8014df8:	68bb      	ldr	r3, [r7, #8]
 8014dfa:	2101      	movs	r1, #1
 8014dfc:	4618      	mov	r0, r3
 8014dfe:	f7fd fddb 	bl	80129b8 <unlock_fs>
 8014e02:	2301      	movs	r3, #1
 8014e04:	e13e      	b.n	8015084 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	69ba      	ldr	r2, [r7, #24]
 8014e0a:	621a      	str	r2, [r3, #32]
 8014e0c:	e131      	b.n	8015072 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	68db      	ldr	r3, [r3, #12]
 8014e12:	683a      	ldr	r2, [r7, #0]
 8014e14:	429a      	cmp	r2, r3
 8014e16:	d908      	bls.n	8014e2a <f_lseek+0x244>
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	7d1b      	ldrb	r3, [r3, #20]
 8014e1c:	f003 0302 	and.w	r3, r3, #2
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d102      	bne.n	8014e2a <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	68db      	ldr	r3, [r3, #12]
 8014e28:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	699b      	ldr	r3, [r3, #24]
 8014e2e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8014e30:	2300      	movs	r3, #0
 8014e32:	637b      	str	r3, [r7, #52]	; 0x34
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014e38:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8014e3a:	683b      	ldr	r3, [r7, #0]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	f000 80c0 	beq.w	8014fc2 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8014e42:	68bb      	ldr	r3, [r7, #8]
 8014e44:	895b      	ldrh	r3, [r3, #10]
 8014e46:	025b      	lsls	r3, r3, #9
 8014e48:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8014e4a:	6a3b      	ldr	r3, [r7, #32]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d01b      	beq.n	8014e88 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8014e50:	683b      	ldr	r3, [r7, #0]
 8014e52:	1e5a      	subs	r2, r3, #1
 8014e54:	69fb      	ldr	r3, [r7, #28]
 8014e56:	fbb2 f2f3 	udiv	r2, r2, r3
 8014e5a:	6a3b      	ldr	r3, [r7, #32]
 8014e5c:	1e59      	subs	r1, r3, #1
 8014e5e:	69fb      	ldr	r3, [r7, #28]
 8014e60:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8014e64:	429a      	cmp	r2, r3
 8014e66:	d30f      	bcc.n	8014e88 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8014e68:	6a3b      	ldr	r3, [r7, #32]
 8014e6a:	1e5a      	subs	r2, r3, #1
 8014e6c:	69fb      	ldr	r3, [r7, #28]
 8014e6e:	425b      	negs	r3, r3
 8014e70:	401a      	ands	r2, r3
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	699b      	ldr	r3, [r3, #24]
 8014e7a:	683a      	ldr	r2, [r7, #0]
 8014e7c:	1ad3      	subs	r3, r2, r3
 8014e7e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	69db      	ldr	r3, [r3, #28]
 8014e84:	63bb      	str	r3, [r7, #56]	; 0x38
 8014e86:	e02c      	b.n	8014ee2 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	689b      	ldr	r3, [r3, #8]
 8014e8c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8014e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d123      	bne.n	8014edc <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	2100      	movs	r1, #0
 8014e98:	4618      	mov	r0, r3
 8014e9a:	f7fe fa0d 	bl	80132b8 <create_chain>
 8014e9e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ea2:	2b01      	cmp	r3, #1
 8014ea4:	d109      	bne.n	8014eba <f_lseek+0x2d4>
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	2202      	movs	r2, #2
 8014eaa:	755a      	strb	r2, [r3, #21]
 8014eac:	68bb      	ldr	r3, [r7, #8]
 8014eae:	2102      	movs	r1, #2
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	f7fd fd81 	bl	80129b8 <unlock_fs>
 8014eb6:	2302      	movs	r3, #2
 8014eb8:	e0e4      	b.n	8015084 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ec0:	d109      	bne.n	8014ed6 <f_lseek+0x2f0>
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	2201      	movs	r2, #1
 8014ec6:	755a      	strb	r2, [r3, #21]
 8014ec8:	68bb      	ldr	r3, [r7, #8]
 8014eca:	2101      	movs	r1, #1
 8014ecc:	4618      	mov	r0, r3
 8014ece:	f7fd fd73 	bl	80129b8 <unlock_fs>
 8014ed2:	2301      	movs	r3, #1
 8014ed4:	e0d6      	b.n	8015084 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014eda:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014ee0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8014ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d06c      	beq.n	8014fc2 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8014ee8:	e044      	b.n	8014f74 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8014eea:	683a      	ldr	r2, [r7, #0]
 8014eec:	69fb      	ldr	r3, [r7, #28]
 8014eee:	1ad3      	subs	r3, r2, r3
 8014ef0:	603b      	str	r3, [r7, #0]
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	699a      	ldr	r2, [r3, #24]
 8014ef6:	69fb      	ldr	r3, [r7, #28]
 8014ef8:	441a      	add	r2, r3
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	7d1b      	ldrb	r3, [r3, #20]
 8014f02:	f003 0302 	and.w	r3, r3, #2
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d00b      	beq.n	8014f22 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014f0e:	4618      	mov	r0, r3
 8014f10:	f7fe f9d2 	bl	80132b8 <create_chain>
 8014f14:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8014f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d108      	bne.n	8014f2e <f_lseek+0x348>
							ofs = 0; break;
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	603b      	str	r3, [r7, #0]
 8014f20:	e02c      	b.n	8014f7c <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014f26:	4618      	mov	r0, r3
 8014f28:	f7fd ffcd 	bl	8012ec6 <get_fat>
 8014f2c:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f34:	d109      	bne.n	8014f4a <f_lseek+0x364>
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	2201      	movs	r2, #1
 8014f3a:	755a      	strb	r2, [r3, #21]
 8014f3c:	68bb      	ldr	r3, [r7, #8]
 8014f3e:	2101      	movs	r1, #1
 8014f40:	4618      	mov	r0, r3
 8014f42:	f7fd fd39 	bl	80129b8 <unlock_fs>
 8014f46:	2301      	movs	r3, #1
 8014f48:	e09c      	b.n	8015084 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8014f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f4c:	2b01      	cmp	r3, #1
 8014f4e:	d904      	bls.n	8014f5a <f_lseek+0x374>
 8014f50:	68bb      	ldr	r3, [r7, #8]
 8014f52:	699b      	ldr	r3, [r3, #24]
 8014f54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014f56:	429a      	cmp	r2, r3
 8014f58:	d309      	bcc.n	8014f6e <f_lseek+0x388>
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	2202      	movs	r2, #2
 8014f5e:	755a      	strb	r2, [r3, #21]
 8014f60:	68bb      	ldr	r3, [r7, #8]
 8014f62:	2102      	movs	r1, #2
 8014f64:	4618      	mov	r0, r3
 8014f66:	f7fd fd27 	bl	80129b8 <unlock_fs>
 8014f6a:	2302      	movs	r3, #2
 8014f6c:	e08a      	b.n	8015084 <f_lseek+0x49e>
					fp->clust = clst;
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014f72:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8014f74:	683a      	ldr	r2, [r7, #0]
 8014f76:	69fb      	ldr	r3, [r7, #28]
 8014f78:	429a      	cmp	r2, r3
 8014f7a:	d8b6      	bhi.n	8014eea <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	699a      	ldr	r2, [r3, #24]
 8014f80:	683b      	ldr	r3, [r7, #0]
 8014f82:	441a      	add	r2, r3
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8014f88:	683b      	ldr	r3, [r7, #0]
 8014f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d017      	beq.n	8014fc2 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8014f92:	68bb      	ldr	r3, [r7, #8]
 8014f94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014f96:	4618      	mov	r0, r3
 8014f98:	f7fd ff76 	bl	8012e88 <clust2sect>
 8014f9c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8014f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d109      	bne.n	8014fb8 <f_lseek+0x3d2>
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	2202      	movs	r2, #2
 8014fa8:	755a      	strb	r2, [r3, #21]
 8014faa:	68bb      	ldr	r3, [r7, #8]
 8014fac:	2102      	movs	r1, #2
 8014fae:	4618      	mov	r0, r3
 8014fb0:	f7fd fd02 	bl	80129b8 <unlock_fs>
 8014fb4:	2302      	movs	r3, #2
 8014fb6:	e065      	b.n	8015084 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8014fb8:	683b      	ldr	r3, [r7, #0]
 8014fba:	0a5b      	lsrs	r3, r3, #9
 8014fbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014fbe:	4413      	add	r3, r2
 8014fc0:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	699a      	ldr	r2, [r3, #24]
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	68db      	ldr	r3, [r3, #12]
 8014fca:	429a      	cmp	r2, r3
 8014fcc:	d90a      	bls.n	8014fe4 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	699a      	ldr	r2, [r3, #24]
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	7d1b      	ldrb	r3, [r3, #20]
 8014fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014fde:	b2da      	uxtb	r2, r3
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	699b      	ldr	r3, [r3, #24]
 8014fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d040      	beq.n	8015072 <f_lseek+0x48c>
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	6a1b      	ldr	r3, [r3, #32]
 8014ff4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014ff6:	429a      	cmp	r2, r3
 8014ff8:	d03b      	beq.n	8015072 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	7d1b      	ldrb	r3, [r3, #20]
 8014ffe:	b25b      	sxtb	r3, r3
 8015000:	2b00      	cmp	r3, #0
 8015002:	da1d      	bge.n	8015040 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015004:	68bb      	ldr	r3, [r7, #8]
 8015006:	7858      	ldrb	r0, [r3, #1]
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	6a1a      	ldr	r2, [r3, #32]
 8015012:	2301      	movs	r3, #1
 8015014:	f7fd fb7c 	bl	8012710 <disk_write>
 8015018:	4603      	mov	r3, r0
 801501a:	2b00      	cmp	r3, #0
 801501c:	d009      	beq.n	8015032 <f_lseek+0x44c>
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	2201      	movs	r2, #1
 8015022:	755a      	strb	r2, [r3, #21]
 8015024:	68bb      	ldr	r3, [r7, #8]
 8015026:	2101      	movs	r1, #1
 8015028:	4618      	mov	r0, r3
 801502a:	f7fd fcc5 	bl	80129b8 <unlock_fs>
 801502e:	2301      	movs	r3, #1
 8015030:	e028      	b.n	8015084 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	7d1b      	ldrb	r3, [r3, #20]
 8015036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801503a:	b2da      	uxtb	r2, r3
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8015040:	68bb      	ldr	r3, [r7, #8]
 8015042:	7858      	ldrb	r0, [r3, #1]
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801504a:	2301      	movs	r3, #1
 801504c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801504e:	f7fd fb3f 	bl	80126d0 <disk_read>
 8015052:	4603      	mov	r3, r0
 8015054:	2b00      	cmp	r3, #0
 8015056:	d009      	beq.n	801506c <f_lseek+0x486>
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	2201      	movs	r2, #1
 801505c:	755a      	strb	r2, [r3, #21]
 801505e:	68bb      	ldr	r3, [r7, #8]
 8015060:	2101      	movs	r1, #1
 8015062:	4618      	mov	r0, r3
 8015064:	f7fd fca8 	bl	80129b8 <unlock_fs>
 8015068:	2301      	movs	r3, #1
 801506a:	e00b      	b.n	8015084 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015070:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8015072:	68bb      	ldr	r3, [r7, #8]
 8015074:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8015078:	4611      	mov	r1, r2
 801507a:	4618      	mov	r0, r3
 801507c:	f7fd fc9c 	bl	80129b8 <unlock_fs>
 8015080:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8015084:	4618      	mov	r0, r3
 8015086:	3740      	adds	r7, #64	; 0x40
 8015088:	46bd      	mov	sp, r7
 801508a:	bd80      	pop	{r7, pc}

0801508c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801508c:	b580      	push	{r7, lr}
 801508e:	b086      	sub	sp, #24
 8015090:	af00      	add	r7, sp, #0
 8015092:	6078      	str	r0, [r7, #4]
 8015094:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	2b00      	cmp	r3, #0
 801509a:	d101      	bne.n	80150a0 <f_opendir+0x14>
 801509c:	2309      	movs	r3, #9
 801509e:	e06a      	b.n	8015176 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80150a4:	f107 010c 	add.w	r1, r7, #12
 80150a8:	463b      	mov	r3, r7
 80150aa:	2200      	movs	r2, #0
 80150ac:	4618      	mov	r0, r3
 80150ae:	f7fe fe79 	bl	8013da4 <find_volume>
 80150b2:	4603      	mov	r3, r0
 80150b4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80150b6:	7dfb      	ldrb	r3, [r7, #23]
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d14f      	bne.n	801515c <f_opendir+0xd0>
		obj->fs = fs;
 80150bc:	68fa      	ldr	r2, [r7, #12]
 80150be:	693b      	ldr	r3, [r7, #16]
 80150c0:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80150c2:	683b      	ldr	r3, [r7, #0]
 80150c4:	4619      	mov	r1, r3
 80150c6:	6878      	ldr	r0, [r7, #4]
 80150c8:	f7fe fd60 	bl	8013b8c <follow_path>
 80150cc:	4603      	mov	r3, r0
 80150ce:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80150d0:	7dfb      	ldrb	r3, [r7, #23]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d13d      	bne.n	8015152 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80150dc:	b25b      	sxtb	r3, r3
 80150de:	2b00      	cmp	r3, #0
 80150e0:	db12      	blt.n	8015108 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80150e2:	693b      	ldr	r3, [r7, #16]
 80150e4:	799b      	ldrb	r3, [r3, #6]
 80150e6:	f003 0310 	and.w	r3, r3, #16
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d00a      	beq.n	8015104 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80150ee:	68fa      	ldr	r2, [r7, #12]
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	6a1b      	ldr	r3, [r3, #32]
 80150f4:	4619      	mov	r1, r3
 80150f6:	4610      	mov	r0, r2
 80150f8:	f7fe fb31 	bl	801375e <ld_clust>
 80150fc:	4602      	mov	r2, r0
 80150fe:	693b      	ldr	r3, [r7, #16]
 8015100:	609a      	str	r2, [r3, #8]
 8015102:	e001      	b.n	8015108 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8015104:	2305      	movs	r3, #5
 8015106:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8015108:	7dfb      	ldrb	r3, [r7, #23]
 801510a:	2b00      	cmp	r3, #0
 801510c:	d121      	bne.n	8015152 <f_opendir+0xc6>
				obj->id = fs->id;
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	88da      	ldrh	r2, [r3, #6]
 8015112:	693b      	ldr	r3, [r7, #16]
 8015114:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8015116:	2100      	movs	r1, #0
 8015118:	6878      	ldr	r0, [r7, #4]
 801511a:	f7fe f999 	bl	8013450 <dir_sdi>
 801511e:	4603      	mov	r3, r0
 8015120:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8015122:	7dfb      	ldrb	r3, [r7, #23]
 8015124:	2b00      	cmp	r3, #0
 8015126:	d114      	bne.n	8015152 <f_opendir+0xc6>
					if (obj->sclust) {
 8015128:	693b      	ldr	r3, [r7, #16]
 801512a:	689b      	ldr	r3, [r3, #8]
 801512c:	2b00      	cmp	r3, #0
 801512e:	d00d      	beq.n	801514c <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8015130:	2100      	movs	r1, #0
 8015132:	6878      	ldr	r0, [r7, #4]
 8015134:	f7fd fcda 	bl	8012aec <inc_lock>
 8015138:	4602      	mov	r2, r0
 801513a:	693b      	ldr	r3, [r7, #16]
 801513c:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801513e:	693b      	ldr	r3, [r7, #16]
 8015140:	691b      	ldr	r3, [r3, #16]
 8015142:	2b00      	cmp	r3, #0
 8015144:	d105      	bne.n	8015152 <f_opendir+0xc6>
 8015146:	2312      	movs	r3, #18
 8015148:	75fb      	strb	r3, [r7, #23]
 801514a:	e002      	b.n	8015152 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 801514c:	693b      	ldr	r3, [r7, #16]
 801514e:	2200      	movs	r2, #0
 8015150:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8015152:	7dfb      	ldrb	r3, [r7, #23]
 8015154:	2b04      	cmp	r3, #4
 8015156:	d101      	bne.n	801515c <f_opendir+0xd0>
 8015158:	2305      	movs	r3, #5
 801515a:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801515c:	7dfb      	ldrb	r3, [r7, #23]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d002      	beq.n	8015168 <f_opendir+0xdc>
 8015162:	693b      	ldr	r3, [r7, #16]
 8015164:	2200      	movs	r2, #0
 8015166:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	7dfa      	ldrb	r2, [r7, #23]
 801516c:	4611      	mov	r1, r2
 801516e:	4618      	mov	r0, r3
 8015170:	f7fd fc22 	bl	80129b8 <unlock_fs>
 8015174:	7dfb      	ldrb	r3, [r7, #23]
}
 8015176:	4618      	mov	r0, r3
 8015178:	3718      	adds	r7, #24
 801517a:	46bd      	mov	sp, r7
 801517c:	bd80      	pop	{r7, pc}

0801517e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801517e:	b580      	push	{r7, lr}
 8015180:	b084      	sub	sp, #16
 8015182:	af00      	add	r7, sp, #0
 8015184:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	f107 0208 	add.w	r2, r7, #8
 801518c:	4611      	mov	r1, r2
 801518e:	4618      	mov	r0, r3
 8015190:	f7ff f85c 	bl	801424c <validate>
 8015194:	4603      	mov	r3, r0
 8015196:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015198:	7bfb      	ldrb	r3, [r7, #15]
 801519a:	2b00      	cmp	r3, #0
 801519c:	d115      	bne.n	80151ca <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	691b      	ldr	r3, [r3, #16]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d006      	beq.n	80151b4 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	691b      	ldr	r3, [r3, #16]
 80151aa:	4618      	mov	r0, r3
 80151ac:	f7fd fd2c 	bl	8012c08 <dec_lock>
 80151b0:	4603      	mov	r3, r0
 80151b2:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80151b4:	7bfb      	ldrb	r3, [r7, #15]
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d102      	bne.n	80151c0 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	2200      	movs	r2, #0
 80151be:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 80151c0:	68bb      	ldr	r3, [r7, #8]
 80151c2:	2100      	movs	r1, #0
 80151c4:	4618      	mov	r0, r3
 80151c6:	f7fd fbf7 	bl	80129b8 <unlock_fs>
#endif
	}
	return res;
 80151ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80151cc:	4618      	mov	r0, r3
 80151ce:	3710      	adds	r7, #16
 80151d0:	46bd      	mov	sp, r7
 80151d2:	bd80      	pop	{r7, pc}

080151d4 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b084      	sub	sp, #16
 80151d8:	af00      	add	r7, sp, #0
 80151da:	6078      	str	r0, [r7, #4]
 80151dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	f107 0208 	add.w	r2, r7, #8
 80151e4:	4611      	mov	r1, r2
 80151e6:	4618      	mov	r0, r3
 80151e8:	f7ff f830 	bl	801424c <validate>
 80151ec:	4603      	mov	r3, r0
 80151ee:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80151f0:	7bfb      	ldrb	r3, [r7, #15]
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d126      	bne.n	8015244 <f_readdir+0x70>
		if (!fno) {
 80151f6:	683b      	ldr	r3, [r7, #0]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d106      	bne.n	801520a <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80151fc:	2100      	movs	r1, #0
 80151fe:	6878      	ldr	r0, [r7, #4]
 8015200:	f7fe f926 	bl	8013450 <dir_sdi>
 8015204:	4603      	mov	r3, r0
 8015206:	73fb      	strb	r3, [r7, #15]
 8015208:	e01c      	b.n	8015244 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 801520a:	2100      	movs	r1, #0
 801520c:	6878      	ldr	r0, [r7, #4]
 801520e:	f7fe fae5 	bl	80137dc <dir_read>
 8015212:	4603      	mov	r3, r0
 8015214:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8015216:	7bfb      	ldrb	r3, [r7, #15]
 8015218:	2b04      	cmp	r3, #4
 801521a:	d101      	bne.n	8015220 <f_readdir+0x4c>
 801521c:	2300      	movs	r3, #0
 801521e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8015220:	7bfb      	ldrb	r3, [r7, #15]
 8015222:	2b00      	cmp	r3, #0
 8015224:	d10e      	bne.n	8015244 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8015226:	6839      	ldr	r1, [r7, #0]
 8015228:	6878      	ldr	r0, [r7, #4]
 801522a:	f7fe fbbb 	bl	80139a4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801522e:	2100      	movs	r1, #0
 8015230:	6878      	ldr	r0, [r7, #4]
 8015232:	f7fe f988 	bl	8013546 <dir_next>
 8015236:	4603      	mov	r3, r0
 8015238:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801523a:	7bfb      	ldrb	r3, [r7, #15]
 801523c:	2b04      	cmp	r3, #4
 801523e:	d101      	bne.n	8015244 <f_readdir+0x70>
 8015240:	2300      	movs	r3, #0
 8015242:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8015244:	68bb      	ldr	r3, [r7, #8]
 8015246:	7bfa      	ldrb	r2, [r7, #15]
 8015248:	4611      	mov	r1, r2
 801524a:	4618      	mov	r0, r3
 801524c:	f7fd fbb4 	bl	80129b8 <unlock_fs>
 8015250:	7bfb      	ldrb	r3, [r7, #15]
}
 8015252:	4618      	mov	r0, r3
 8015254:	3710      	adds	r7, #16
 8015256:	46bd      	mov	sp, r7
 8015258:	bd80      	pop	{r7, pc}
	...

0801525c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801525c:	b480      	push	{r7}
 801525e:	b087      	sub	sp, #28
 8015260:	af00      	add	r7, sp, #0
 8015262:	60f8      	str	r0, [r7, #12]
 8015264:	60b9      	str	r1, [r7, #8]
 8015266:	4613      	mov	r3, r2
 8015268:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801526a:	2301      	movs	r3, #1
 801526c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801526e:	2300      	movs	r3, #0
 8015270:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015272:	4b1f      	ldr	r3, [pc, #124]	; (80152f0 <FATFS_LinkDriverEx+0x94>)
 8015274:	7a5b      	ldrb	r3, [r3, #9]
 8015276:	b2db      	uxtb	r3, r3
 8015278:	2b00      	cmp	r3, #0
 801527a:	d131      	bne.n	80152e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801527c:	4b1c      	ldr	r3, [pc, #112]	; (80152f0 <FATFS_LinkDriverEx+0x94>)
 801527e:	7a5b      	ldrb	r3, [r3, #9]
 8015280:	b2db      	uxtb	r3, r3
 8015282:	461a      	mov	r2, r3
 8015284:	4b1a      	ldr	r3, [pc, #104]	; (80152f0 <FATFS_LinkDriverEx+0x94>)
 8015286:	2100      	movs	r1, #0
 8015288:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801528a:	4b19      	ldr	r3, [pc, #100]	; (80152f0 <FATFS_LinkDriverEx+0x94>)
 801528c:	7a5b      	ldrb	r3, [r3, #9]
 801528e:	b2db      	uxtb	r3, r3
 8015290:	4a17      	ldr	r2, [pc, #92]	; (80152f0 <FATFS_LinkDriverEx+0x94>)
 8015292:	009b      	lsls	r3, r3, #2
 8015294:	4413      	add	r3, r2
 8015296:	68fa      	ldr	r2, [r7, #12]
 8015298:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801529a:	4b15      	ldr	r3, [pc, #84]	; (80152f0 <FATFS_LinkDriverEx+0x94>)
 801529c:	7a5b      	ldrb	r3, [r3, #9]
 801529e:	b2db      	uxtb	r3, r3
 80152a0:	461a      	mov	r2, r3
 80152a2:	4b13      	ldr	r3, [pc, #76]	; (80152f0 <FATFS_LinkDriverEx+0x94>)
 80152a4:	4413      	add	r3, r2
 80152a6:	79fa      	ldrb	r2, [r7, #7]
 80152a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80152aa:	4b11      	ldr	r3, [pc, #68]	; (80152f0 <FATFS_LinkDriverEx+0x94>)
 80152ac:	7a5b      	ldrb	r3, [r3, #9]
 80152ae:	b2db      	uxtb	r3, r3
 80152b0:	1c5a      	adds	r2, r3, #1
 80152b2:	b2d1      	uxtb	r1, r2
 80152b4:	4a0e      	ldr	r2, [pc, #56]	; (80152f0 <FATFS_LinkDriverEx+0x94>)
 80152b6:	7251      	strb	r1, [r2, #9]
 80152b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80152ba:	7dbb      	ldrb	r3, [r7, #22]
 80152bc:	3330      	adds	r3, #48	; 0x30
 80152be:	b2da      	uxtb	r2, r3
 80152c0:	68bb      	ldr	r3, [r7, #8]
 80152c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80152c4:	68bb      	ldr	r3, [r7, #8]
 80152c6:	3301      	adds	r3, #1
 80152c8:	223a      	movs	r2, #58	; 0x3a
 80152ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80152cc:	68bb      	ldr	r3, [r7, #8]
 80152ce:	3302      	adds	r3, #2
 80152d0:	222f      	movs	r2, #47	; 0x2f
 80152d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80152d4:	68bb      	ldr	r3, [r7, #8]
 80152d6:	3303      	adds	r3, #3
 80152d8:	2200      	movs	r2, #0
 80152da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80152dc:	2300      	movs	r3, #0
 80152de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80152e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80152e2:	4618      	mov	r0, r3
 80152e4:	371c      	adds	r7, #28
 80152e6:	46bd      	mov	sp, r7
 80152e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ec:	4770      	bx	lr
 80152ee:	bf00      	nop
 80152f0:	2000086c 	.word	0x2000086c

080152f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80152f4:	b580      	push	{r7, lr}
 80152f6:	b082      	sub	sp, #8
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	6078      	str	r0, [r7, #4]
 80152fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80152fe:	2200      	movs	r2, #0
 8015300:	6839      	ldr	r1, [r7, #0]
 8015302:	6878      	ldr	r0, [r7, #4]
 8015304:	f7ff ffaa 	bl	801525c <FATFS_LinkDriverEx>
 8015308:	4603      	mov	r3, r0
}
 801530a:	4618      	mov	r0, r3
 801530c:	3708      	adds	r7, #8
 801530e:	46bd      	mov	sp, r7
 8015310:	bd80      	pop	{r7, pc}

08015312 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8015312:	b580      	push	{r7, lr}
 8015314:	b084      	sub	sp, #16
 8015316:	af00      	add	r7, sp, #0
 8015318:	4603      	mov	r3, r0
 801531a:	6039      	str	r1, [r7, #0]
 801531c:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 801531e:	2200      	movs	r2, #0
 8015320:	2101      	movs	r1, #1
 8015322:	2001      	movs	r0, #1
 8015324:	f000 f988 	bl	8015638 <osSemaphoreNew>
 8015328:	4602      	mov	r2, r0
 801532a:	683b      	ldr	r3, [r7, #0]
 801532c:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 801532e:	683b      	ldr	r3, [r7, #0]
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	2b00      	cmp	r3, #0
 8015334:	bf14      	ite	ne
 8015336:	2301      	movne	r3, #1
 8015338:	2300      	moveq	r3, #0
 801533a:	b2db      	uxtb	r3, r3
 801533c:	60fb      	str	r3, [r7, #12]

    return ret;
 801533e:	68fb      	ldr	r3, [r7, #12]
}
 8015340:	4618      	mov	r0, r3
 8015342:	3710      	adds	r7, #16
 8015344:	46bd      	mov	sp, r7
 8015346:	bd80      	pop	{r7, pc}

08015348 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8015348:	b580      	push	{r7, lr}
 801534a:	b082      	sub	sp, #8
 801534c:	af00      	add	r7, sp, #0
 801534e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8015350:	6878      	ldr	r0, [r7, #4]
 8015352:	f000 fa91 	bl	8015878 <osSemaphoreDelete>
#endif
    return 1;
 8015356:	2301      	movs	r3, #1
}
 8015358:	4618      	mov	r0, r3
 801535a:	3708      	adds	r7, #8
 801535c:	46bd      	mov	sp, r7
 801535e:	bd80      	pop	{r7, pc}

08015360 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8015360:	b580      	push	{r7, lr}
 8015362:	b084      	sub	sp, #16
 8015364:	af00      	add	r7, sp, #0
 8015366:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8015368:	2300      	movs	r3, #0
 801536a:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 801536c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8015370:	6878      	ldr	r0, [r7, #4]
 8015372:	f000 f9eb 	bl	801574c <osSemaphoreAcquire>
 8015376:	4603      	mov	r3, r0
 8015378:	2b00      	cmp	r3, #0
 801537a:	d101      	bne.n	8015380 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 801537c:	2301      	movs	r3, #1
 801537e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8015380:	68fb      	ldr	r3, [r7, #12]
}
 8015382:	4618      	mov	r0, r3
 8015384:	3710      	adds	r7, #16
 8015386:	46bd      	mov	sp, r7
 8015388:	bd80      	pop	{r7, pc}

0801538a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 801538a:	b580      	push	{r7, lr}
 801538c:	b082      	sub	sp, #8
 801538e:	af00      	add	r7, sp, #0
 8015390:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8015392:	6878      	ldr	r0, [r7, #4]
 8015394:	f000 fa2c 	bl	80157f0 <osSemaphoreRelease>
#endif
}
 8015398:	bf00      	nop
 801539a:	3708      	adds	r7, #8
 801539c:	46bd      	mov	sp, r7
 801539e:	bd80      	pop	{r7, pc}

080153a0 <__NVIC_SetPriority>:
{
 80153a0:	b480      	push	{r7}
 80153a2:	b083      	sub	sp, #12
 80153a4:	af00      	add	r7, sp, #0
 80153a6:	4603      	mov	r3, r0
 80153a8:	6039      	str	r1, [r7, #0]
 80153aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80153ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	db0a      	blt.n	80153ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80153b4:	683b      	ldr	r3, [r7, #0]
 80153b6:	b2da      	uxtb	r2, r3
 80153b8:	490c      	ldr	r1, [pc, #48]	; (80153ec <__NVIC_SetPriority+0x4c>)
 80153ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80153be:	0112      	lsls	r2, r2, #4
 80153c0:	b2d2      	uxtb	r2, r2
 80153c2:	440b      	add	r3, r1
 80153c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80153c8:	e00a      	b.n	80153e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80153ca:	683b      	ldr	r3, [r7, #0]
 80153cc:	b2da      	uxtb	r2, r3
 80153ce:	4908      	ldr	r1, [pc, #32]	; (80153f0 <__NVIC_SetPriority+0x50>)
 80153d0:	79fb      	ldrb	r3, [r7, #7]
 80153d2:	f003 030f 	and.w	r3, r3, #15
 80153d6:	3b04      	subs	r3, #4
 80153d8:	0112      	lsls	r2, r2, #4
 80153da:	b2d2      	uxtb	r2, r2
 80153dc:	440b      	add	r3, r1
 80153de:	761a      	strb	r2, [r3, #24]
}
 80153e0:	bf00      	nop
 80153e2:	370c      	adds	r7, #12
 80153e4:	46bd      	mov	sp, r7
 80153e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ea:	4770      	bx	lr
 80153ec:	e000e100 	.word	0xe000e100
 80153f0:	e000ed00 	.word	0xe000ed00

080153f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80153f4:	b580      	push	{r7, lr}
 80153f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80153f8:	4b05      	ldr	r3, [pc, #20]	; (8015410 <SysTick_Handler+0x1c>)
 80153fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80153fc:	f002 fa20 	bl	8017840 <xTaskGetSchedulerState>
 8015400:	4603      	mov	r3, r0
 8015402:	2b01      	cmp	r3, #1
 8015404:	d001      	beq.n	801540a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8015406:	f003 f907 	bl	8018618 <xPortSysTickHandler>
  }
}
 801540a:	bf00      	nop
 801540c:	bd80      	pop	{r7, pc}
 801540e:	bf00      	nop
 8015410:	e000e010 	.word	0xe000e010

08015414 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8015414:	b580      	push	{r7, lr}
 8015416:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8015418:	2100      	movs	r1, #0
 801541a:	f06f 0004 	mvn.w	r0, #4
 801541e:	f7ff ffbf 	bl	80153a0 <__NVIC_SetPriority>
#endif
}
 8015422:	bf00      	nop
 8015424:	bd80      	pop	{r7, pc}
	...

08015428 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8015428:	b480      	push	{r7}
 801542a:	b083      	sub	sp, #12
 801542c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801542e:	f3ef 8305 	mrs	r3, IPSR
 8015432:	603b      	str	r3, [r7, #0]
  return(result);
 8015434:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015436:	2b00      	cmp	r3, #0
 8015438:	d003      	beq.n	8015442 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801543a:	f06f 0305 	mvn.w	r3, #5
 801543e:	607b      	str	r3, [r7, #4]
 8015440:	e00c      	b.n	801545c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8015442:	4b0a      	ldr	r3, [pc, #40]	; (801546c <osKernelInitialize+0x44>)
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	2b00      	cmp	r3, #0
 8015448:	d105      	bne.n	8015456 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801544a:	4b08      	ldr	r3, [pc, #32]	; (801546c <osKernelInitialize+0x44>)
 801544c:	2201      	movs	r2, #1
 801544e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8015450:	2300      	movs	r3, #0
 8015452:	607b      	str	r3, [r7, #4]
 8015454:	e002      	b.n	801545c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8015456:	f04f 33ff 	mov.w	r3, #4294967295
 801545a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801545c:	687b      	ldr	r3, [r7, #4]
}
 801545e:	4618      	mov	r0, r3
 8015460:	370c      	adds	r7, #12
 8015462:	46bd      	mov	sp, r7
 8015464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015468:	4770      	bx	lr
 801546a:	bf00      	nop
 801546c:	20000878 	.word	0x20000878

08015470 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8015470:	b580      	push	{r7, lr}
 8015472:	b082      	sub	sp, #8
 8015474:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015476:	f3ef 8305 	mrs	r3, IPSR
 801547a:	603b      	str	r3, [r7, #0]
  return(result);
 801547c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801547e:	2b00      	cmp	r3, #0
 8015480:	d003      	beq.n	801548a <osKernelStart+0x1a>
    stat = osErrorISR;
 8015482:	f06f 0305 	mvn.w	r3, #5
 8015486:	607b      	str	r3, [r7, #4]
 8015488:	e010      	b.n	80154ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801548a:	4b0b      	ldr	r3, [pc, #44]	; (80154b8 <osKernelStart+0x48>)
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	2b01      	cmp	r3, #1
 8015490:	d109      	bne.n	80154a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8015492:	f7ff ffbf 	bl	8015414 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8015496:	4b08      	ldr	r3, [pc, #32]	; (80154b8 <osKernelStart+0x48>)
 8015498:	2202      	movs	r2, #2
 801549a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801549c:	f001 fd64 	bl	8016f68 <vTaskStartScheduler>
      stat = osOK;
 80154a0:	2300      	movs	r3, #0
 80154a2:	607b      	str	r3, [r7, #4]
 80154a4:	e002      	b.n	80154ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 80154a6:	f04f 33ff 	mov.w	r3, #4294967295
 80154aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80154ac:	687b      	ldr	r3, [r7, #4]
}
 80154ae:	4618      	mov	r0, r3
 80154b0:	3708      	adds	r7, #8
 80154b2:	46bd      	mov	sp, r7
 80154b4:	bd80      	pop	{r7, pc}
 80154b6:	bf00      	nop
 80154b8:	20000878 	.word	0x20000878

080154bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80154bc:	b580      	push	{r7, lr}
 80154be:	b08e      	sub	sp, #56	; 0x38
 80154c0:	af04      	add	r7, sp, #16
 80154c2:	60f8      	str	r0, [r7, #12]
 80154c4:	60b9      	str	r1, [r7, #8]
 80154c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80154c8:	2300      	movs	r3, #0
 80154ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80154cc:	f3ef 8305 	mrs	r3, IPSR
 80154d0:	617b      	str	r3, [r7, #20]
  return(result);
 80154d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d17e      	bne.n	80155d6 <osThreadNew+0x11a>
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d07b      	beq.n	80155d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80154de:	2380      	movs	r3, #128	; 0x80
 80154e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80154e2:	2318      	movs	r3, #24
 80154e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80154e6:	2300      	movs	r3, #0
 80154e8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80154ea:	f04f 33ff 	mov.w	r3, #4294967295
 80154ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d045      	beq.n	8015582 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	681b      	ldr	r3, [r3, #0]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d002      	beq.n	8015504 <osThreadNew+0x48>
        name = attr->name;
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	699b      	ldr	r3, [r3, #24]
 8015508:	2b00      	cmp	r3, #0
 801550a:	d002      	beq.n	8015512 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	699b      	ldr	r3, [r3, #24]
 8015510:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8015512:	69fb      	ldr	r3, [r7, #28]
 8015514:	2b00      	cmp	r3, #0
 8015516:	d008      	beq.n	801552a <osThreadNew+0x6e>
 8015518:	69fb      	ldr	r3, [r7, #28]
 801551a:	2b38      	cmp	r3, #56	; 0x38
 801551c:	d805      	bhi.n	801552a <osThreadNew+0x6e>
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	685b      	ldr	r3, [r3, #4]
 8015522:	f003 0301 	and.w	r3, r3, #1
 8015526:	2b00      	cmp	r3, #0
 8015528:	d001      	beq.n	801552e <osThreadNew+0x72>
        return (NULL);
 801552a:	2300      	movs	r3, #0
 801552c:	e054      	b.n	80155d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	695b      	ldr	r3, [r3, #20]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d003      	beq.n	801553e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	695b      	ldr	r3, [r3, #20]
 801553a:	089b      	lsrs	r3, r3, #2
 801553c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	689b      	ldr	r3, [r3, #8]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d00e      	beq.n	8015564 <osThreadNew+0xa8>
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	68db      	ldr	r3, [r3, #12]
 801554a:	2bbb      	cmp	r3, #187	; 0xbb
 801554c:	d90a      	bls.n	8015564 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015552:	2b00      	cmp	r3, #0
 8015554:	d006      	beq.n	8015564 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	695b      	ldr	r3, [r3, #20]
 801555a:	2b00      	cmp	r3, #0
 801555c:	d002      	beq.n	8015564 <osThreadNew+0xa8>
        mem = 1;
 801555e:	2301      	movs	r3, #1
 8015560:	61bb      	str	r3, [r7, #24]
 8015562:	e010      	b.n	8015586 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	689b      	ldr	r3, [r3, #8]
 8015568:	2b00      	cmp	r3, #0
 801556a:	d10c      	bne.n	8015586 <osThreadNew+0xca>
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	68db      	ldr	r3, [r3, #12]
 8015570:	2b00      	cmp	r3, #0
 8015572:	d108      	bne.n	8015586 <osThreadNew+0xca>
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	691b      	ldr	r3, [r3, #16]
 8015578:	2b00      	cmp	r3, #0
 801557a:	d104      	bne.n	8015586 <osThreadNew+0xca>
          mem = 0;
 801557c:	2300      	movs	r3, #0
 801557e:	61bb      	str	r3, [r7, #24]
 8015580:	e001      	b.n	8015586 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8015582:	2300      	movs	r3, #0
 8015584:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8015586:	69bb      	ldr	r3, [r7, #24]
 8015588:	2b01      	cmp	r3, #1
 801558a:	d110      	bne.n	80155ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8015590:	687a      	ldr	r2, [r7, #4]
 8015592:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015594:	9202      	str	r2, [sp, #8]
 8015596:	9301      	str	r3, [sp, #4]
 8015598:	69fb      	ldr	r3, [r7, #28]
 801559a:	9300      	str	r3, [sp, #0]
 801559c:	68bb      	ldr	r3, [r7, #8]
 801559e:	6a3a      	ldr	r2, [r7, #32]
 80155a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80155a2:	68f8      	ldr	r0, [r7, #12]
 80155a4:	f001 fa82 	bl	8016aac <xTaskCreateStatic>
 80155a8:	4603      	mov	r3, r0
 80155aa:	613b      	str	r3, [r7, #16]
 80155ac:	e013      	b.n	80155d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80155ae:	69bb      	ldr	r3, [r7, #24]
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d110      	bne.n	80155d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80155b4:	6a3b      	ldr	r3, [r7, #32]
 80155b6:	b29a      	uxth	r2, r3
 80155b8:	f107 0310 	add.w	r3, r7, #16
 80155bc:	9301      	str	r3, [sp, #4]
 80155be:	69fb      	ldr	r3, [r7, #28]
 80155c0:	9300      	str	r3, [sp, #0]
 80155c2:	68bb      	ldr	r3, [r7, #8]
 80155c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80155c6:	68f8      	ldr	r0, [r7, #12]
 80155c8:	f001 facd 	bl	8016b66 <xTaskCreate>
 80155cc:	4603      	mov	r3, r0
 80155ce:	2b01      	cmp	r3, #1
 80155d0:	d001      	beq.n	80155d6 <osThreadNew+0x11a>
            hTask = NULL;
 80155d2:	2300      	movs	r3, #0
 80155d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80155d6:	693b      	ldr	r3, [r7, #16]
}
 80155d8:	4618      	mov	r0, r3
 80155da:	3728      	adds	r7, #40	; 0x28
 80155dc:	46bd      	mov	sp, r7
 80155de:	bd80      	pop	{r7, pc}

080155e0 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b082      	sub	sp, #8
 80155e4:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 80155e6:	f002 f91b 	bl	8017820 <xTaskGetCurrentTaskHandle>
 80155ea:	6078      	str	r0, [r7, #4]

  return (id);
 80155ec:	687b      	ldr	r3, [r7, #4]
}
 80155ee:	4618      	mov	r0, r3
 80155f0:	3708      	adds	r7, #8
 80155f2:	46bd      	mov	sp, r7
 80155f4:	bd80      	pop	{r7, pc}

080155f6 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 80155f6:	b580      	push	{r7, lr}
 80155f8:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 80155fa:	2000      	movs	r0, #0
 80155fc:	f001 fc0e 	bl	8016e1c <vTaskDelete>
#endif
  for (;;);
 8015600:	e7fe      	b.n	8015600 <osThreadExit+0xa>

08015602 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8015602:	b580      	push	{r7, lr}
 8015604:	b084      	sub	sp, #16
 8015606:	af00      	add	r7, sp, #0
 8015608:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801560a:	f3ef 8305 	mrs	r3, IPSR
 801560e:	60bb      	str	r3, [r7, #8]
  return(result);
 8015610:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015612:	2b00      	cmp	r3, #0
 8015614:	d003      	beq.n	801561e <osDelay+0x1c>
    stat = osErrorISR;
 8015616:	f06f 0305 	mvn.w	r3, #5
 801561a:	60fb      	str	r3, [r7, #12]
 801561c:	e007      	b.n	801562e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801561e:	2300      	movs	r3, #0
 8015620:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	2b00      	cmp	r3, #0
 8015626:	d002      	beq.n	801562e <osDelay+0x2c>
      vTaskDelay(ticks);
 8015628:	6878      	ldr	r0, [r7, #4]
 801562a:	f001 fc69 	bl	8016f00 <vTaskDelay>
    }
  }

  return (stat);
 801562e:	68fb      	ldr	r3, [r7, #12]
}
 8015630:	4618      	mov	r0, r3
 8015632:	3710      	adds	r7, #16
 8015634:	46bd      	mov	sp, r7
 8015636:	bd80      	pop	{r7, pc}

08015638 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8015638:	b580      	push	{r7, lr}
 801563a:	b08a      	sub	sp, #40	; 0x28
 801563c:	af02      	add	r7, sp, #8
 801563e:	60f8      	str	r0, [r7, #12]
 8015640:	60b9      	str	r1, [r7, #8]
 8015642:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8015644:	2300      	movs	r3, #0
 8015646:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015648:	f3ef 8305 	mrs	r3, IPSR
 801564c:	613b      	str	r3, [r7, #16]
  return(result);
 801564e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8015650:	2b00      	cmp	r3, #0
 8015652:	d175      	bne.n	8015740 <osSemaphoreNew+0x108>
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	2b00      	cmp	r3, #0
 8015658:	d072      	beq.n	8015740 <osSemaphoreNew+0x108>
 801565a:	68ba      	ldr	r2, [r7, #8]
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	429a      	cmp	r2, r3
 8015660:	d86e      	bhi.n	8015740 <osSemaphoreNew+0x108>
    mem = -1;
 8015662:	f04f 33ff 	mov.w	r3, #4294967295
 8015666:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	2b00      	cmp	r3, #0
 801566c:	d015      	beq.n	801569a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	689b      	ldr	r3, [r3, #8]
 8015672:	2b00      	cmp	r3, #0
 8015674:	d006      	beq.n	8015684 <osSemaphoreNew+0x4c>
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	68db      	ldr	r3, [r3, #12]
 801567a:	2b4f      	cmp	r3, #79	; 0x4f
 801567c:	d902      	bls.n	8015684 <osSemaphoreNew+0x4c>
        mem = 1;
 801567e:	2301      	movs	r3, #1
 8015680:	61bb      	str	r3, [r7, #24]
 8015682:	e00c      	b.n	801569e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	689b      	ldr	r3, [r3, #8]
 8015688:	2b00      	cmp	r3, #0
 801568a:	d108      	bne.n	801569e <osSemaphoreNew+0x66>
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	68db      	ldr	r3, [r3, #12]
 8015690:	2b00      	cmp	r3, #0
 8015692:	d104      	bne.n	801569e <osSemaphoreNew+0x66>
          mem = 0;
 8015694:	2300      	movs	r3, #0
 8015696:	61bb      	str	r3, [r7, #24]
 8015698:	e001      	b.n	801569e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 801569a:	2300      	movs	r3, #0
 801569c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 801569e:	69bb      	ldr	r3, [r7, #24]
 80156a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156a4:	d04c      	beq.n	8015740 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80156a6:	68fb      	ldr	r3, [r7, #12]
 80156a8:	2b01      	cmp	r3, #1
 80156aa:	d128      	bne.n	80156fe <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80156ac:	69bb      	ldr	r3, [r7, #24]
 80156ae:	2b01      	cmp	r3, #1
 80156b0:	d10a      	bne.n	80156c8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	689b      	ldr	r3, [r3, #8]
 80156b6:	2203      	movs	r2, #3
 80156b8:	9200      	str	r2, [sp, #0]
 80156ba:	2200      	movs	r2, #0
 80156bc:	2100      	movs	r1, #0
 80156be:	2001      	movs	r0, #1
 80156c0:	f000 fa4e 	bl	8015b60 <xQueueGenericCreateStatic>
 80156c4:	61f8      	str	r0, [r7, #28]
 80156c6:	e005      	b.n	80156d4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80156c8:	2203      	movs	r2, #3
 80156ca:	2100      	movs	r1, #0
 80156cc:	2001      	movs	r0, #1
 80156ce:	f000 fabf 	bl	8015c50 <xQueueGenericCreate>
 80156d2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80156d4:	69fb      	ldr	r3, [r7, #28]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d022      	beq.n	8015720 <osSemaphoreNew+0xe8>
 80156da:	68bb      	ldr	r3, [r7, #8]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d01f      	beq.n	8015720 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80156e0:	2300      	movs	r3, #0
 80156e2:	2200      	movs	r2, #0
 80156e4:	2100      	movs	r1, #0
 80156e6:	69f8      	ldr	r0, [r7, #28]
 80156e8:	f000 fb7a 	bl	8015de0 <xQueueGenericSend>
 80156ec:	4603      	mov	r3, r0
 80156ee:	2b01      	cmp	r3, #1
 80156f0:	d016      	beq.n	8015720 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80156f2:	69f8      	ldr	r0, [r7, #28]
 80156f4:	f001 f806 	bl	8016704 <vQueueDelete>
            hSemaphore = NULL;
 80156f8:	2300      	movs	r3, #0
 80156fa:	61fb      	str	r3, [r7, #28]
 80156fc:	e010      	b.n	8015720 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80156fe:	69bb      	ldr	r3, [r7, #24]
 8015700:	2b01      	cmp	r3, #1
 8015702:	d108      	bne.n	8015716 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	689b      	ldr	r3, [r3, #8]
 8015708:	461a      	mov	r2, r3
 801570a:	68b9      	ldr	r1, [r7, #8]
 801570c:	68f8      	ldr	r0, [r7, #12]
 801570e:	f000 fafc 	bl	8015d0a <xQueueCreateCountingSemaphoreStatic>
 8015712:	61f8      	str	r0, [r7, #28]
 8015714:	e004      	b.n	8015720 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8015716:	68b9      	ldr	r1, [r7, #8]
 8015718:	68f8      	ldr	r0, [r7, #12]
 801571a:	f000 fb2d 	bl	8015d78 <xQueueCreateCountingSemaphore>
 801571e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8015720:	69fb      	ldr	r3, [r7, #28]
 8015722:	2b00      	cmp	r3, #0
 8015724:	d00c      	beq.n	8015740 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	2b00      	cmp	r3, #0
 801572a:	d003      	beq.n	8015734 <osSemaphoreNew+0xfc>
          name = attr->name;
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	681b      	ldr	r3, [r3, #0]
 8015730:	617b      	str	r3, [r7, #20]
 8015732:	e001      	b.n	8015738 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8015734:	2300      	movs	r3, #0
 8015736:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8015738:	6979      	ldr	r1, [r7, #20]
 801573a:	69f8      	ldr	r0, [r7, #28]
 801573c:	f001 f92e 	bl	801699c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8015740:	69fb      	ldr	r3, [r7, #28]
}
 8015742:	4618      	mov	r0, r3
 8015744:	3720      	adds	r7, #32
 8015746:	46bd      	mov	sp, r7
 8015748:	bd80      	pop	{r7, pc}
	...

0801574c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 801574c:	b580      	push	{r7, lr}
 801574e:	b086      	sub	sp, #24
 8015750:	af00      	add	r7, sp, #0
 8015752:	6078      	str	r0, [r7, #4]
 8015754:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801575a:	2300      	movs	r3, #0
 801575c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801575e:	693b      	ldr	r3, [r7, #16]
 8015760:	2b00      	cmp	r3, #0
 8015762:	d103      	bne.n	801576c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8015764:	f06f 0303 	mvn.w	r3, #3
 8015768:	617b      	str	r3, [r7, #20]
 801576a:	e039      	b.n	80157e0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801576c:	f3ef 8305 	mrs	r3, IPSR
 8015770:	60fb      	str	r3, [r7, #12]
  return(result);
 8015772:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015774:	2b00      	cmp	r3, #0
 8015776:	d022      	beq.n	80157be <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8015778:	683b      	ldr	r3, [r7, #0]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d003      	beq.n	8015786 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 801577e:	f06f 0303 	mvn.w	r3, #3
 8015782:	617b      	str	r3, [r7, #20]
 8015784:	e02c      	b.n	80157e0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8015786:	2300      	movs	r3, #0
 8015788:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801578a:	f107 0308 	add.w	r3, r7, #8
 801578e:	461a      	mov	r2, r3
 8015790:	2100      	movs	r1, #0
 8015792:	6938      	ldr	r0, [r7, #16]
 8015794:	f000 ff36 	bl	8016604 <xQueueReceiveFromISR>
 8015798:	4603      	mov	r3, r0
 801579a:	2b01      	cmp	r3, #1
 801579c:	d003      	beq.n	80157a6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 801579e:	f06f 0302 	mvn.w	r3, #2
 80157a2:	617b      	str	r3, [r7, #20]
 80157a4:	e01c      	b.n	80157e0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80157a6:	68bb      	ldr	r3, [r7, #8]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d019      	beq.n	80157e0 <osSemaphoreAcquire+0x94>
 80157ac:	4b0f      	ldr	r3, [pc, #60]	; (80157ec <osSemaphoreAcquire+0xa0>)
 80157ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80157b2:	601a      	str	r2, [r3, #0]
 80157b4:	f3bf 8f4f 	dsb	sy
 80157b8:	f3bf 8f6f 	isb	sy
 80157bc:	e010      	b.n	80157e0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80157be:	6839      	ldr	r1, [r7, #0]
 80157c0:	6938      	ldr	r0, [r7, #16]
 80157c2:	f000 fe13 	bl	80163ec <xQueueSemaphoreTake>
 80157c6:	4603      	mov	r3, r0
 80157c8:	2b01      	cmp	r3, #1
 80157ca:	d009      	beq.n	80157e0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80157cc:	683b      	ldr	r3, [r7, #0]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d003      	beq.n	80157da <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80157d2:	f06f 0301 	mvn.w	r3, #1
 80157d6:	617b      	str	r3, [r7, #20]
 80157d8:	e002      	b.n	80157e0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80157da:	f06f 0302 	mvn.w	r3, #2
 80157de:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80157e0:	697b      	ldr	r3, [r7, #20]
}
 80157e2:	4618      	mov	r0, r3
 80157e4:	3718      	adds	r7, #24
 80157e6:	46bd      	mov	sp, r7
 80157e8:	bd80      	pop	{r7, pc}
 80157ea:	bf00      	nop
 80157ec:	e000ed04 	.word	0xe000ed04

080157f0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80157f0:	b580      	push	{r7, lr}
 80157f2:	b086      	sub	sp, #24
 80157f4:	af00      	add	r7, sp, #0
 80157f6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80157fc:	2300      	movs	r3, #0
 80157fe:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8015800:	693b      	ldr	r3, [r7, #16]
 8015802:	2b00      	cmp	r3, #0
 8015804:	d103      	bne.n	801580e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8015806:	f06f 0303 	mvn.w	r3, #3
 801580a:	617b      	str	r3, [r7, #20]
 801580c:	e02c      	b.n	8015868 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801580e:	f3ef 8305 	mrs	r3, IPSR
 8015812:	60fb      	str	r3, [r7, #12]
  return(result);
 8015814:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015816:	2b00      	cmp	r3, #0
 8015818:	d01a      	beq.n	8015850 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 801581a:	2300      	movs	r3, #0
 801581c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801581e:	f107 0308 	add.w	r3, r7, #8
 8015822:	4619      	mov	r1, r3
 8015824:	6938      	ldr	r0, [r7, #16]
 8015826:	f000 fc74 	bl	8016112 <xQueueGiveFromISR>
 801582a:	4603      	mov	r3, r0
 801582c:	2b01      	cmp	r3, #1
 801582e:	d003      	beq.n	8015838 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8015830:	f06f 0302 	mvn.w	r3, #2
 8015834:	617b      	str	r3, [r7, #20]
 8015836:	e017      	b.n	8015868 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8015838:	68bb      	ldr	r3, [r7, #8]
 801583a:	2b00      	cmp	r3, #0
 801583c:	d014      	beq.n	8015868 <osSemaphoreRelease+0x78>
 801583e:	4b0d      	ldr	r3, [pc, #52]	; (8015874 <osSemaphoreRelease+0x84>)
 8015840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015844:	601a      	str	r2, [r3, #0]
 8015846:	f3bf 8f4f 	dsb	sy
 801584a:	f3bf 8f6f 	isb	sy
 801584e:	e00b      	b.n	8015868 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015850:	2300      	movs	r3, #0
 8015852:	2200      	movs	r2, #0
 8015854:	2100      	movs	r1, #0
 8015856:	6938      	ldr	r0, [r7, #16]
 8015858:	f000 fac2 	bl	8015de0 <xQueueGenericSend>
 801585c:	4603      	mov	r3, r0
 801585e:	2b01      	cmp	r3, #1
 8015860:	d002      	beq.n	8015868 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8015862:	f06f 0302 	mvn.w	r3, #2
 8015866:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8015868:	697b      	ldr	r3, [r7, #20]
}
 801586a:	4618      	mov	r0, r3
 801586c:	3718      	adds	r7, #24
 801586e:	46bd      	mov	sp, r7
 8015870:	bd80      	pop	{r7, pc}
 8015872:	bf00      	nop
 8015874:	e000ed04 	.word	0xe000ed04

08015878 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8015878:	b580      	push	{r7, lr}
 801587a:	b086      	sub	sp, #24
 801587c:	af00      	add	r7, sp, #0
 801587e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015884:	f3ef 8305 	mrs	r3, IPSR
 8015888:	60fb      	str	r3, [r7, #12]
  return(result);
 801588a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 801588c:	2b00      	cmp	r3, #0
 801588e:	d003      	beq.n	8015898 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8015890:	f06f 0305 	mvn.w	r3, #5
 8015894:	617b      	str	r3, [r7, #20]
 8015896:	e00e      	b.n	80158b6 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8015898:	693b      	ldr	r3, [r7, #16]
 801589a:	2b00      	cmp	r3, #0
 801589c:	d103      	bne.n	80158a6 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 801589e:	f06f 0303 	mvn.w	r3, #3
 80158a2:	617b      	str	r3, [r7, #20]
 80158a4:	e007      	b.n	80158b6 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80158a6:	6938      	ldr	r0, [r7, #16]
 80158a8:	f001 f8a2 	bl	80169f0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80158ac:	2300      	movs	r3, #0
 80158ae:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 80158b0:	6938      	ldr	r0, [r7, #16]
 80158b2:	f000 ff27 	bl	8016704 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80158b6:	697b      	ldr	r3, [r7, #20]
}
 80158b8:	4618      	mov	r0, r3
 80158ba:	3718      	adds	r7, #24
 80158bc:	46bd      	mov	sp, r7
 80158be:	bd80      	pop	{r7, pc}

080158c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80158c0:	b480      	push	{r7}
 80158c2:	b085      	sub	sp, #20
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	60f8      	str	r0, [r7, #12]
 80158c8:	60b9      	str	r1, [r7, #8]
 80158ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	4a07      	ldr	r2, [pc, #28]	; (80158ec <vApplicationGetIdleTaskMemory+0x2c>)
 80158d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80158d2:	68bb      	ldr	r3, [r7, #8]
 80158d4:	4a06      	ldr	r2, [pc, #24]	; (80158f0 <vApplicationGetIdleTaskMemory+0x30>)
 80158d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	2280      	movs	r2, #128	; 0x80
 80158dc:	601a      	str	r2, [r3, #0]
}
 80158de:	bf00      	nop
 80158e0:	3714      	adds	r7, #20
 80158e2:	46bd      	mov	sp, r7
 80158e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e8:	4770      	bx	lr
 80158ea:	bf00      	nop
 80158ec:	2000087c 	.word	0x2000087c
 80158f0:	20000938 	.word	0x20000938

080158f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80158f4:	b480      	push	{r7}
 80158f6:	b085      	sub	sp, #20
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	60f8      	str	r0, [r7, #12]
 80158fc:	60b9      	str	r1, [r7, #8]
 80158fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8015900:	68fb      	ldr	r3, [r7, #12]
 8015902:	4a07      	ldr	r2, [pc, #28]	; (8015920 <vApplicationGetTimerTaskMemory+0x2c>)
 8015904:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8015906:	68bb      	ldr	r3, [r7, #8]
 8015908:	4a06      	ldr	r2, [pc, #24]	; (8015924 <vApplicationGetTimerTaskMemory+0x30>)
 801590a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015912:	601a      	str	r2, [r3, #0]
}
 8015914:	bf00      	nop
 8015916:	3714      	adds	r7, #20
 8015918:	46bd      	mov	sp, r7
 801591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801591e:	4770      	bx	lr
 8015920:	20000b38 	.word	0x20000b38
 8015924:	20000bf4 	.word	0x20000bf4

08015928 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015928:	b480      	push	{r7}
 801592a:	b083      	sub	sp, #12
 801592c:	af00      	add	r7, sp, #0
 801592e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	f103 0208 	add.w	r2, r3, #8
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	f04f 32ff 	mov.w	r2, #4294967295
 8015940:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	f103 0208 	add.w	r2, r3, #8
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	f103 0208 	add.w	r2, r3, #8
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	2200      	movs	r2, #0
 801595a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801595c:	bf00      	nop
 801595e:	370c      	adds	r7, #12
 8015960:	46bd      	mov	sp, r7
 8015962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015966:	4770      	bx	lr

08015968 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8015968:	b480      	push	{r7}
 801596a:	b083      	sub	sp, #12
 801596c:	af00      	add	r7, sp, #0
 801596e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	2200      	movs	r2, #0
 8015974:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8015976:	bf00      	nop
 8015978:	370c      	adds	r7, #12
 801597a:	46bd      	mov	sp, r7
 801597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015980:	4770      	bx	lr

08015982 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015982:	b480      	push	{r7}
 8015984:	b085      	sub	sp, #20
 8015986:	af00      	add	r7, sp, #0
 8015988:	6078      	str	r0, [r7, #4]
 801598a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	685b      	ldr	r3, [r3, #4]
 8015990:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015992:	683b      	ldr	r3, [r7, #0]
 8015994:	68fa      	ldr	r2, [r7, #12]
 8015996:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015998:	68fb      	ldr	r3, [r7, #12]
 801599a:	689a      	ldr	r2, [r3, #8]
 801599c:	683b      	ldr	r3, [r7, #0]
 801599e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80159a0:	68fb      	ldr	r3, [r7, #12]
 80159a2:	689b      	ldr	r3, [r3, #8]
 80159a4:	683a      	ldr	r2, [r7, #0]
 80159a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	683a      	ldr	r2, [r7, #0]
 80159ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80159ae:	683b      	ldr	r3, [r7, #0]
 80159b0:	687a      	ldr	r2, [r7, #4]
 80159b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	1c5a      	adds	r2, r3, #1
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	601a      	str	r2, [r3, #0]
}
 80159be:	bf00      	nop
 80159c0:	3714      	adds	r7, #20
 80159c2:	46bd      	mov	sp, r7
 80159c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159c8:	4770      	bx	lr

080159ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80159ca:	b480      	push	{r7}
 80159cc:	b085      	sub	sp, #20
 80159ce:	af00      	add	r7, sp, #0
 80159d0:	6078      	str	r0, [r7, #4]
 80159d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80159d4:	683b      	ldr	r3, [r7, #0]
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80159da:	68bb      	ldr	r3, [r7, #8]
 80159dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159e0:	d103      	bne.n	80159ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	691b      	ldr	r3, [r3, #16]
 80159e6:	60fb      	str	r3, [r7, #12]
 80159e8:	e00c      	b.n	8015a04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	3308      	adds	r3, #8
 80159ee:	60fb      	str	r3, [r7, #12]
 80159f0:	e002      	b.n	80159f8 <vListInsert+0x2e>
 80159f2:	68fb      	ldr	r3, [r7, #12]
 80159f4:	685b      	ldr	r3, [r3, #4]
 80159f6:	60fb      	str	r3, [r7, #12]
 80159f8:	68fb      	ldr	r3, [r7, #12]
 80159fa:	685b      	ldr	r3, [r3, #4]
 80159fc:	681b      	ldr	r3, [r3, #0]
 80159fe:	68ba      	ldr	r2, [r7, #8]
 8015a00:	429a      	cmp	r2, r3
 8015a02:	d2f6      	bcs.n	80159f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	685a      	ldr	r2, [r3, #4]
 8015a08:	683b      	ldr	r3, [r7, #0]
 8015a0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015a0c:	683b      	ldr	r3, [r7, #0]
 8015a0e:	685b      	ldr	r3, [r3, #4]
 8015a10:	683a      	ldr	r2, [r7, #0]
 8015a12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015a14:	683b      	ldr	r3, [r7, #0]
 8015a16:	68fa      	ldr	r2, [r7, #12]
 8015a18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	683a      	ldr	r2, [r7, #0]
 8015a1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015a20:	683b      	ldr	r3, [r7, #0]
 8015a22:	687a      	ldr	r2, [r7, #4]
 8015a24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	1c5a      	adds	r2, r3, #1
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	601a      	str	r2, [r3, #0]
}
 8015a30:	bf00      	nop
 8015a32:	3714      	adds	r7, #20
 8015a34:	46bd      	mov	sp, r7
 8015a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a3a:	4770      	bx	lr

08015a3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8015a3c:	b480      	push	{r7}
 8015a3e:	b085      	sub	sp, #20
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	691b      	ldr	r3, [r3, #16]
 8015a48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	685b      	ldr	r3, [r3, #4]
 8015a4e:	687a      	ldr	r2, [r7, #4]
 8015a50:	6892      	ldr	r2, [r2, #8]
 8015a52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	689b      	ldr	r3, [r3, #8]
 8015a58:	687a      	ldr	r2, [r7, #4]
 8015a5a:	6852      	ldr	r2, [r2, #4]
 8015a5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	685b      	ldr	r3, [r3, #4]
 8015a62:	687a      	ldr	r2, [r7, #4]
 8015a64:	429a      	cmp	r2, r3
 8015a66:	d103      	bne.n	8015a70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	689a      	ldr	r2, [r3, #8]
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	2200      	movs	r2, #0
 8015a74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	1e5a      	subs	r2, r3, #1
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	681b      	ldr	r3, [r3, #0]
}
 8015a84:	4618      	mov	r0, r3
 8015a86:	3714      	adds	r7, #20
 8015a88:	46bd      	mov	sp, r7
 8015a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a8e:	4770      	bx	lr

08015a90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015a90:	b580      	push	{r7, lr}
 8015a92:	b084      	sub	sp, #16
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	6078      	str	r0, [r7, #4]
 8015a98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d10a      	bne.n	8015aba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015aa8:	f383 8811 	msr	BASEPRI, r3
 8015aac:	f3bf 8f6f 	isb	sy
 8015ab0:	f3bf 8f4f 	dsb	sy
 8015ab4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8015ab6:	bf00      	nop
 8015ab8:	e7fe      	b.n	8015ab8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8015aba:	f002 fd1b 	bl	80184f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015abe:	68fb      	ldr	r3, [r7, #12]
 8015ac0:	681a      	ldr	r2, [r3, #0]
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ac6:	68f9      	ldr	r1, [r7, #12]
 8015ac8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015aca:	fb01 f303 	mul.w	r3, r1, r3
 8015ace:	441a      	add	r2, r3
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015ad4:	68fb      	ldr	r3, [r7, #12]
 8015ad6:	2200      	movs	r2, #0
 8015ad8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	681a      	ldr	r2, [r3, #0]
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015ae2:	68fb      	ldr	r3, [r7, #12]
 8015ae4:	681a      	ldr	r2, [r3, #0]
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015aea:	3b01      	subs	r3, #1
 8015aec:	68f9      	ldr	r1, [r7, #12]
 8015aee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015af0:	fb01 f303 	mul.w	r3, r1, r3
 8015af4:	441a      	add	r2, r3
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015afa:	68fb      	ldr	r3, [r7, #12]
 8015afc:	22ff      	movs	r2, #255	; 0xff
 8015afe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015b02:	68fb      	ldr	r3, [r7, #12]
 8015b04:	22ff      	movs	r2, #255	; 0xff
 8015b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8015b0a:	683b      	ldr	r3, [r7, #0]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d114      	bne.n	8015b3a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	691b      	ldr	r3, [r3, #16]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d01a      	beq.n	8015b4e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015b18:	68fb      	ldr	r3, [r7, #12]
 8015b1a:	3310      	adds	r3, #16
 8015b1c:	4618      	mov	r0, r3
 8015b1e:	f001 fcbd 	bl	801749c <xTaskRemoveFromEventList>
 8015b22:	4603      	mov	r3, r0
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d012      	beq.n	8015b4e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8015b28:	4b0c      	ldr	r3, [pc, #48]	; (8015b5c <xQueueGenericReset+0xcc>)
 8015b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b2e:	601a      	str	r2, [r3, #0]
 8015b30:	f3bf 8f4f 	dsb	sy
 8015b34:	f3bf 8f6f 	isb	sy
 8015b38:	e009      	b.n	8015b4e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	3310      	adds	r3, #16
 8015b3e:	4618      	mov	r0, r3
 8015b40:	f7ff fef2 	bl	8015928 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	3324      	adds	r3, #36	; 0x24
 8015b48:	4618      	mov	r0, r3
 8015b4a:	f7ff feed 	bl	8015928 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015b4e:	f002 fd01 	bl	8018554 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8015b52:	2301      	movs	r3, #1
}
 8015b54:	4618      	mov	r0, r3
 8015b56:	3710      	adds	r7, #16
 8015b58:	46bd      	mov	sp, r7
 8015b5a:	bd80      	pop	{r7, pc}
 8015b5c:	e000ed04 	.word	0xe000ed04

08015b60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015b60:	b580      	push	{r7, lr}
 8015b62:	b08e      	sub	sp, #56	; 0x38
 8015b64:	af02      	add	r7, sp, #8
 8015b66:	60f8      	str	r0, [r7, #12]
 8015b68:	60b9      	str	r1, [r7, #8]
 8015b6a:	607a      	str	r2, [r7, #4]
 8015b6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d10a      	bne.n	8015b8a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8015b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b78:	f383 8811 	msr	BASEPRI, r3
 8015b7c:	f3bf 8f6f 	isb	sy
 8015b80:	f3bf 8f4f 	dsb	sy
 8015b84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015b86:	bf00      	nop
 8015b88:	e7fe      	b.n	8015b88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015b8a:	683b      	ldr	r3, [r7, #0]
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d10a      	bne.n	8015ba6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8015b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b94:	f383 8811 	msr	BASEPRI, r3
 8015b98:	f3bf 8f6f 	isb	sy
 8015b9c:	f3bf 8f4f 	dsb	sy
 8015ba0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015ba2:	bf00      	nop
 8015ba4:	e7fe      	b.n	8015ba4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d002      	beq.n	8015bb2 <xQueueGenericCreateStatic+0x52>
 8015bac:	68bb      	ldr	r3, [r7, #8]
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d001      	beq.n	8015bb6 <xQueueGenericCreateStatic+0x56>
 8015bb2:	2301      	movs	r3, #1
 8015bb4:	e000      	b.n	8015bb8 <xQueueGenericCreateStatic+0x58>
 8015bb6:	2300      	movs	r3, #0
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d10a      	bne.n	8015bd2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8015bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bc0:	f383 8811 	msr	BASEPRI, r3
 8015bc4:	f3bf 8f6f 	isb	sy
 8015bc8:	f3bf 8f4f 	dsb	sy
 8015bcc:	623b      	str	r3, [r7, #32]
}
 8015bce:	bf00      	nop
 8015bd0:	e7fe      	b.n	8015bd0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d102      	bne.n	8015bde <xQueueGenericCreateStatic+0x7e>
 8015bd8:	68bb      	ldr	r3, [r7, #8]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d101      	bne.n	8015be2 <xQueueGenericCreateStatic+0x82>
 8015bde:	2301      	movs	r3, #1
 8015be0:	e000      	b.n	8015be4 <xQueueGenericCreateStatic+0x84>
 8015be2:	2300      	movs	r3, #0
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d10a      	bne.n	8015bfe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8015be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bec:	f383 8811 	msr	BASEPRI, r3
 8015bf0:	f3bf 8f6f 	isb	sy
 8015bf4:	f3bf 8f4f 	dsb	sy
 8015bf8:	61fb      	str	r3, [r7, #28]
}
 8015bfa:	bf00      	nop
 8015bfc:	e7fe      	b.n	8015bfc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015bfe:	2350      	movs	r3, #80	; 0x50
 8015c00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8015c02:	697b      	ldr	r3, [r7, #20]
 8015c04:	2b50      	cmp	r3, #80	; 0x50
 8015c06:	d00a      	beq.n	8015c1e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8015c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c0c:	f383 8811 	msr	BASEPRI, r3
 8015c10:	f3bf 8f6f 	isb	sy
 8015c14:	f3bf 8f4f 	dsb	sy
 8015c18:	61bb      	str	r3, [r7, #24]
}
 8015c1a:	bf00      	nop
 8015c1c:	e7fe      	b.n	8015c1c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015c1e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015c20:	683b      	ldr	r3, [r7, #0]
 8015c22:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8015c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d00d      	beq.n	8015c46 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c2c:	2201      	movs	r2, #1
 8015c2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015c32:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8015c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c38:	9300      	str	r3, [sp, #0]
 8015c3a:	4613      	mov	r3, r2
 8015c3c:	687a      	ldr	r2, [r7, #4]
 8015c3e:	68b9      	ldr	r1, [r7, #8]
 8015c40:	68f8      	ldr	r0, [r7, #12]
 8015c42:	f000 f83f 	bl	8015cc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8015c48:	4618      	mov	r0, r3
 8015c4a:	3730      	adds	r7, #48	; 0x30
 8015c4c:	46bd      	mov	sp, r7
 8015c4e:	bd80      	pop	{r7, pc}

08015c50 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	b08a      	sub	sp, #40	; 0x28
 8015c54:	af02      	add	r7, sp, #8
 8015c56:	60f8      	str	r0, [r7, #12]
 8015c58:	60b9      	str	r1, [r7, #8]
 8015c5a:	4613      	mov	r3, r2
 8015c5c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d10a      	bne.n	8015c7a <xQueueGenericCreate+0x2a>
	__asm volatile
 8015c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c68:	f383 8811 	msr	BASEPRI, r3
 8015c6c:	f3bf 8f6f 	isb	sy
 8015c70:	f3bf 8f4f 	dsb	sy
 8015c74:	613b      	str	r3, [r7, #16]
}
 8015c76:	bf00      	nop
 8015c78:	e7fe      	b.n	8015c78 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	68ba      	ldr	r2, [r7, #8]
 8015c7e:	fb02 f303 	mul.w	r3, r2, r3
 8015c82:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015c84:	69fb      	ldr	r3, [r7, #28]
 8015c86:	3350      	adds	r3, #80	; 0x50
 8015c88:	4618      	mov	r0, r3
 8015c8a:	f002 fd55 	bl	8018738 <pvPortMalloc>
 8015c8e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015c90:	69bb      	ldr	r3, [r7, #24]
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d011      	beq.n	8015cba <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8015c96:	69bb      	ldr	r3, [r7, #24]
 8015c98:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015c9a:	697b      	ldr	r3, [r7, #20]
 8015c9c:	3350      	adds	r3, #80	; 0x50
 8015c9e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015ca0:	69bb      	ldr	r3, [r7, #24]
 8015ca2:	2200      	movs	r2, #0
 8015ca4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015ca8:	79fa      	ldrb	r2, [r7, #7]
 8015caa:	69bb      	ldr	r3, [r7, #24]
 8015cac:	9300      	str	r3, [sp, #0]
 8015cae:	4613      	mov	r3, r2
 8015cb0:	697a      	ldr	r2, [r7, #20]
 8015cb2:	68b9      	ldr	r1, [r7, #8]
 8015cb4:	68f8      	ldr	r0, [r7, #12]
 8015cb6:	f000 f805 	bl	8015cc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015cba:	69bb      	ldr	r3, [r7, #24]
	}
 8015cbc:	4618      	mov	r0, r3
 8015cbe:	3720      	adds	r7, #32
 8015cc0:	46bd      	mov	sp, r7
 8015cc2:	bd80      	pop	{r7, pc}

08015cc4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015cc4:	b580      	push	{r7, lr}
 8015cc6:	b084      	sub	sp, #16
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	60f8      	str	r0, [r7, #12]
 8015ccc:	60b9      	str	r1, [r7, #8]
 8015cce:	607a      	str	r2, [r7, #4]
 8015cd0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015cd2:	68bb      	ldr	r3, [r7, #8]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d103      	bne.n	8015ce0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015cd8:	69bb      	ldr	r3, [r7, #24]
 8015cda:	69ba      	ldr	r2, [r7, #24]
 8015cdc:	601a      	str	r2, [r3, #0]
 8015cde:	e002      	b.n	8015ce6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015ce0:	69bb      	ldr	r3, [r7, #24]
 8015ce2:	687a      	ldr	r2, [r7, #4]
 8015ce4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015ce6:	69bb      	ldr	r3, [r7, #24]
 8015ce8:	68fa      	ldr	r2, [r7, #12]
 8015cea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015cec:	69bb      	ldr	r3, [r7, #24]
 8015cee:	68ba      	ldr	r2, [r7, #8]
 8015cf0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015cf2:	2101      	movs	r1, #1
 8015cf4:	69b8      	ldr	r0, [r7, #24]
 8015cf6:	f7ff fecb 	bl	8015a90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8015cfa:	69bb      	ldr	r3, [r7, #24]
 8015cfc:	78fa      	ldrb	r2, [r7, #3]
 8015cfe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8015d02:	bf00      	nop
 8015d04:	3710      	adds	r7, #16
 8015d06:	46bd      	mov	sp, r7
 8015d08:	bd80      	pop	{r7, pc}

08015d0a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8015d0a:	b580      	push	{r7, lr}
 8015d0c:	b08a      	sub	sp, #40	; 0x28
 8015d0e:	af02      	add	r7, sp, #8
 8015d10:	60f8      	str	r0, [r7, #12]
 8015d12:	60b9      	str	r1, [r7, #8]
 8015d14:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d10a      	bne.n	8015d32 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8015d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d20:	f383 8811 	msr	BASEPRI, r3
 8015d24:	f3bf 8f6f 	isb	sy
 8015d28:	f3bf 8f4f 	dsb	sy
 8015d2c:	61bb      	str	r3, [r7, #24]
}
 8015d2e:	bf00      	nop
 8015d30:	e7fe      	b.n	8015d30 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8015d32:	68ba      	ldr	r2, [r7, #8]
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	429a      	cmp	r2, r3
 8015d38:	d90a      	bls.n	8015d50 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8015d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d3e:	f383 8811 	msr	BASEPRI, r3
 8015d42:	f3bf 8f6f 	isb	sy
 8015d46:	f3bf 8f4f 	dsb	sy
 8015d4a:	617b      	str	r3, [r7, #20]
}
 8015d4c:	bf00      	nop
 8015d4e:	e7fe      	b.n	8015d4e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015d50:	2302      	movs	r3, #2
 8015d52:	9300      	str	r3, [sp, #0]
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	2200      	movs	r2, #0
 8015d58:	2100      	movs	r1, #0
 8015d5a:	68f8      	ldr	r0, [r7, #12]
 8015d5c:	f7ff ff00 	bl	8015b60 <xQueueGenericCreateStatic>
 8015d60:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8015d62:	69fb      	ldr	r3, [r7, #28]
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d002      	beq.n	8015d6e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015d68:	69fb      	ldr	r3, [r7, #28]
 8015d6a:	68ba      	ldr	r2, [r7, #8]
 8015d6c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8015d6e:	69fb      	ldr	r3, [r7, #28]
	}
 8015d70:	4618      	mov	r0, r3
 8015d72:	3720      	adds	r7, #32
 8015d74:	46bd      	mov	sp, r7
 8015d76:	bd80      	pop	{r7, pc}

08015d78 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8015d78:	b580      	push	{r7, lr}
 8015d7a:	b086      	sub	sp, #24
 8015d7c:	af00      	add	r7, sp, #0
 8015d7e:	6078      	str	r0, [r7, #4]
 8015d80:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d10a      	bne.n	8015d9e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8015d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d8c:	f383 8811 	msr	BASEPRI, r3
 8015d90:	f3bf 8f6f 	isb	sy
 8015d94:	f3bf 8f4f 	dsb	sy
 8015d98:	613b      	str	r3, [r7, #16]
}
 8015d9a:	bf00      	nop
 8015d9c:	e7fe      	b.n	8015d9c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8015d9e:	683a      	ldr	r2, [r7, #0]
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	429a      	cmp	r2, r3
 8015da4:	d90a      	bls.n	8015dbc <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8015da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015daa:	f383 8811 	msr	BASEPRI, r3
 8015dae:	f3bf 8f6f 	isb	sy
 8015db2:	f3bf 8f4f 	dsb	sy
 8015db6:	60fb      	str	r3, [r7, #12]
}
 8015db8:	bf00      	nop
 8015dba:	e7fe      	b.n	8015dba <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015dbc:	2202      	movs	r2, #2
 8015dbe:	2100      	movs	r1, #0
 8015dc0:	6878      	ldr	r0, [r7, #4]
 8015dc2:	f7ff ff45 	bl	8015c50 <xQueueGenericCreate>
 8015dc6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8015dc8:	697b      	ldr	r3, [r7, #20]
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d002      	beq.n	8015dd4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015dce:	697b      	ldr	r3, [r7, #20]
 8015dd0:	683a      	ldr	r2, [r7, #0]
 8015dd2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8015dd4:	697b      	ldr	r3, [r7, #20]
	}
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	3718      	adds	r7, #24
 8015dda:	46bd      	mov	sp, r7
 8015ddc:	bd80      	pop	{r7, pc}
	...

08015de0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015de0:	b580      	push	{r7, lr}
 8015de2:	b08e      	sub	sp, #56	; 0x38
 8015de4:	af00      	add	r7, sp, #0
 8015de6:	60f8      	str	r0, [r7, #12]
 8015de8:	60b9      	str	r1, [r7, #8]
 8015dea:	607a      	str	r2, [r7, #4]
 8015dec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8015dee:	2300      	movs	r3, #0
 8015df0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015df2:	68fb      	ldr	r3, [r7, #12]
 8015df4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d10a      	bne.n	8015e12 <xQueueGenericSend+0x32>
	__asm volatile
 8015dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e00:	f383 8811 	msr	BASEPRI, r3
 8015e04:	f3bf 8f6f 	isb	sy
 8015e08:	f3bf 8f4f 	dsb	sy
 8015e0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015e0e:	bf00      	nop
 8015e10:	e7fe      	b.n	8015e10 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015e12:	68bb      	ldr	r3, [r7, #8]
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d103      	bne.n	8015e20 <xQueueGenericSend+0x40>
 8015e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d101      	bne.n	8015e24 <xQueueGenericSend+0x44>
 8015e20:	2301      	movs	r3, #1
 8015e22:	e000      	b.n	8015e26 <xQueueGenericSend+0x46>
 8015e24:	2300      	movs	r3, #0
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d10a      	bne.n	8015e40 <xQueueGenericSend+0x60>
	__asm volatile
 8015e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e2e:	f383 8811 	msr	BASEPRI, r3
 8015e32:	f3bf 8f6f 	isb	sy
 8015e36:	f3bf 8f4f 	dsb	sy
 8015e3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015e3c:	bf00      	nop
 8015e3e:	e7fe      	b.n	8015e3e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015e40:	683b      	ldr	r3, [r7, #0]
 8015e42:	2b02      	cmp	r3, #2
 8015e44:	d103      	bne.n	8015e4e <xQueueGenericSend+0x6e>
 8015e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015e4a:	2b01      	cmp	r3, #1
 8015e4c:	d101      	bne.n	8015e52 <xQueueGenericSend+0x72>
 8015e4e:	2301      	movs	r3, #1
 8015e50:	e000      	b.n	8015e54 <xQueueGenericSend+0x74>
 8015e52:	2300      	movs	r3, #0
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d10a      	bne.n	8015e6e <xQueueGenericSend+0x8e>
	__asm volatile
 8015e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e5c:	f383 8811 	msr	BASEPRI, r3
 8015e60:	f3bf 8f6f 	isb	sy
 8015e64:	f3bf 8f4f 	dsb	sy
 8015e68:	623b      	str	r3, [r7, #32]
}
 8015e6a:	bf00      	nop
 8015e6c:	e7fe      	b.n	8015e6c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015e6e:	f001 fce7 	bl	8017840 <xTaskGetSchedulerState>
 8015e72:	4603      	mov	r3, r0
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d102      	bne.n	8015e7e <xQueueGenericSend+0x9e>
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d101      	bne.n	8015e82 <xQueueGenericSend+0xa2>
 8015e7e:	2301      	movs	r3, #1
 8015e80:	e000      	b.n	8015e84 <xQueueGenericSend+0xa4>
 8015e82:	2300      	movs	r3, #0
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d10a      	bne.n	8015e9e <xQueueGenericSend+0xbe>
	__asm volatile
 8015e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e8c:	f383 8811 	msr	BASEPRI, r3
 8015e90:	f3bf 8f6f 	isb	sy
 8015e94:	f3bf 8f4f 	dsb	sy
 8015e98:	61fb      	str	r3, [r7, #28]
}
 8015e9a:	bf00      	nop
 8015e9c:	e7fe      	b.n	8015e9c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015e9e:	f002 fb29 	bl	80184f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ea4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015eaa:	429a      	cmp	r2, r3
 8015eac:	d302      	bcc.n	8015eb4 <xQueueGenericSend+0xd4>
 8015eae:	683b      	ldr	r3, [r7, #0]
 8015eb0:	2b02      	cmp	r3, #2
 8015eb2:	d129      	bne.n	8015f08 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015eb4:	683a      	ldr	r2, [r7, #0]
 8015eb6:	68b9      	ldr	r1, [r7, #8]
 8015eb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015eba:	f000 fc5e 	bl	801677a <prvCopyDataToQueue>
 8015ebe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d010      	beq.n	8015eea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eca:	3324      	adds	r3, #36	; 0x24
 8015ecc:	4618      	mov	r0, r3
 8015ece:	f001 fae5 	bl	801749c <xTaskRemoveFromEventList>
 8015ed2:	4603      	mov	r3, r0
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d013      	beq.n	8015f00 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015ed8:	4b3f      	ldr	r3, [pc, #252]	; (8015fd8 <xQueueGenericSend+0x1f8>)
 8015eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ede:	601a      	str	r2, [r3, #0]
 8015ee0:	f3bf 8f4f 	dsb	sy
 8015ee4:	f3bf 8f6f 	isb	sy
 8015ee8:	e00a      	b.n	8015f00 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d007      	beq.n	8015f00 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015ef0:	4b39      	ldr	r3, [pc, #228]	; (8015fd8 <xQueueGenericSend+0x1f8>)
 8015ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ef6:	601a      	str	r2, [r3, #0]
 8015ef8:	f3bf 8f4f 	dsb	sy
 8015efc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015f00:	f002 fb28 	bl	8018554 <vPortExitCritical>
				return pdPASS;
 8015f04:	2301      	movs	r3, #1
 8015f06:	e063      	b.n	8015fd0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d103      	bne.n	8015f16 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015f0e:	f002 fb21 	bl	8018554 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8015f12:	2300      	movs	r3, #0
 8015f14:	e05c      	b.n	8015fd0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d106      	bne.n	8015f2a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015f1c:	f107 0314 	add.w	r3, r7, #20
 8015f20:	4618      	mov	r0, r3
 8015f22:	f001 fb1f 	bl	8017564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015f26:	2301      	movs	r3, #1
 8015f28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015f2a:	f002 fb13 	bl	8018554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015f2e:	f001 f88b 	bl	8017048 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015f32:	f002 fadf 	bl	80184f4 <vPortEnterCritical>
 8015f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015f3c:	b25b      	sxtb	r3, r3
 8015f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f42:	d103      	bne.n	8015f4c <xQueueGenericSend+0x16c>
 8015f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f46:	2200      	movs	r2, #0
 8015f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015f52:	b25b      	sxtb	r3, r3
 8015f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f58:	d103      	bne.n	8015f62 <xQueueGenericSend+0x182>
 8015f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f5c:	2200      	movs	r2, #0
 8015f5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015f62:	f002 faf7 	bl	8018554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015f66:	1d3a      	adds	r2, r7, #4
 8015f68:	f107 0314 	add.w	r3, r7, #20
 8015f6c:	4611      	mov	r1, r2
 8015f6e:	4618      	mov	r0, r3
 8015f70:	f001 fb0e 	bl	8017590 <xTaskCheckForTimeOut>
 8015f74:	4603      	mov	r3, r0
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d124      	bne.n	8015fc4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015f7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f7c:	f000 fcf5 	bl	801696a <prvIsQueueFull>
 8015f80:	4603      	mov	r3, r0
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d018      	beq.n	8015fb8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f88:	3310      	adds	r3, #16
 8015f8a:	687a      	ldr	r2, [r7, #4]
 8015f8c:	4611      	mov	r1, r2
 8015f8e:	4618      	mov	r0, r3
 8015f90:	f001 fa34 	bl	80173fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015f94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f96:	f000 fc80 	bl	801689a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015f9a:	f001 f863 	bl	8017064 <xTaskResumeAll>
 8015f9e:	4603      	mov	r3, r0
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	f47f af7c 	bne.w	8015e9e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8015fa6:	4b0c      	ldr	r3, [pc, #48]	; (8015fd8 <xQueueGenericSend+0x1f8>)
 8015fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015fac:	601a      	str	r2, [r3, #0]
 8015fae:	f3bf 8f4f 	dsb	sy
 8015fb2:	f3bf 8f6f 	isb	sy
 8015fb6:	e772      	b.n	8015e9e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015fb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015fba:	f000 fc6e 	bl	801689a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015fbe:	f001 f851 	bl	8017064 <xTaskResumeAll>
 8015fc2:	e76c      	b.n	8015e9e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015fc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015fc6:	f000 fc68 	bl	801689a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015fca:	f001 f84b 	bl	8017064 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015fce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	3738      	adds	r7, #56	; 0x38
 8015fd4:	46bd      	mov	sp, r7
 8015fd6:	bd80      	pop	{r7, pc}
 8015fd8:	e000ed04 	.word	0xe000ed04

08015fdc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	b090      	sub	sp, #64	; 0x40
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	60f8      	str	r0, [r7, #12]
 8015fe4:	60b9      	str	r1, [r7, #8]
 8015fe6:	607a      	str	r2, [r7, #4]
 8015fe8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8015fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d10a      	bne.n	801600a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8015ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ff8:	f383 8811 	msr	BASEPRI, r3
 8015ffc:	f3bf 8f6f 	isb	sy
 8016000:	f3bf 8f4f 	dsb	sy
 8016004:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016006:	bf00      	nop
 8016008:	e7fe      	b.n	8016008 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801600a:	68bb      	ldr	r3, [r7, #8]
 801600c:	2b00      	cmp	r3, #0
 801600e:	d103      	bne.n	8016018 <xQueueGenericSendFromISR+0x3c>
 8016010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016014:	2b00      	cmp	r3, #0
 8016016:	d101      	bne.n	801601c <xQueueGenericSendFromISR+0x40>
 8016018:	2301      	movs	r3, #1
 801601a:	e000      	b.n	801601e <xQueueGenericSendFromISR+0x42>
 801601c:	2300      	movs	r3, #0
 801601e:	2b00      	cmp	r3, #0
 8016020:	d10a      	bne.n	8016038 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8016022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016026:	f383 8811 	msr	BASEPRI, r3
 801602a:	f3bf 8f6f 	isb	sy
 801602e:	f3bf 8f4f 	dsb	sy
 8016032:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016034:	bf00      	nop
 8016036:	e7fe      	b.n	8016036 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016038:	683b      	ldr	r3, [r7, #0]
 801603a:	2b02      	cmp	r3, #2
 801603c:	d103      	bne.n	8016046 <xQueueGenericSendFromISR+0x6a>
 801603e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016042:	2b01      	cmp	r3, #1
 8016044:	d101      	bne.n	801604a <xQueueGenericSendFromISR+0x6e>
 8016046:	2301      	movs	r3, #1
 8016048:	e000      	b.n	801604c <xQueueGenericSendFromISR+0x70>
 801604a:	2300      	movs	r3, #0
 801604c:	2b00      	cmp	r3, #0
 801604e:	d10a      	bne.n	8016066 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8016050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016054:	f383 8811 	msr	BASEPRI, r3
 8016058:	f3bf 8f6f 	isb	sy
 801605c:	f3bf 8f4f 	dsb	sy
 8016060:	623b      	str	r3, [r7, #32]
}
 8016062:	bf00      	nop
 8016064:	e7fe      	b.n	8016064 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016066:	f002 fb27 	bl	80186b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801606a:	f3ef 8211 	mrs	r2, BASEPRI
 801606e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016072:	f383 8811 	msr	BASEPRI, r3
 8016076:	f3bf 8f6f 	isb	sy
 801607a:	f3bf 8f4f 	dsb	sy
 801607e:	61fa      	str	r2, [r7, #28]
 8016080:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8016082:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016084:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801608a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801608c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801608e:	429a      	cmp	r2, r3
 8016090:	d302      	bcc.n	8016098 <xQueueGenericSendFromISR+0xbc>
 8016092:	683b      	ldr	r3, [r7, #0]
 8016094:	2b02      	cmp	r3, #2
 8016096:	d12f      	bne.n	80160f8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801609a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801609e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80160a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80160a6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80160a8:	683a      	ldr	r2, [r7, #0]
 80160aa:	68b9      	ldr	r1, [r7, #8]
 80160ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80160ae:	f000 fb64 	bl	801677a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80160b2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80160b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160ba:	d112      	bne.n	80160e2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80160bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d016      	beq.n	80160f2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80160c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160c6:	3324      	adds	r3, #36	; 0x24
 80160c8:	4618      	mov	r0, r3
 80160ca:	f001 f9e7 	bl	801749c <xTaskRemoveFromEventList>
 80160ce:	4603      	mov	r3, r0
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d00e      	beq.n	80160f2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d00b      	beq.n	80160f2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	2201      	movs	r2, #1
 80160de:	601a      	str	r2, [r3, #0]
 80160e0:	e007      	b.n	80160f2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80160e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80160e6:	3301      	adds	r3, #1
 80160e8:	b2db      	uxtb	r3, r3
 80160ea:	b25a      	sxtb	r2, r3
 80160ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80160f2:	2301      	movs	r3, #1
 80160f4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80160f6:	e001      	b.n	80160fc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80160f8:	2300      	movs	r3, #0
 80160fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80160fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160fe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8016100:	697b      	ldr	r3, [r7, #20]
 8016102:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8016106:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801610a:	4618      	mov	r0, r3
 801610c:	3740      	adds	r7, #64	; 0x40
 801610e:	46bd      	mov	sp, r7
 8016110:	bd80      	pop	{r7, pc}

08016112 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016112:	b580      	push	{r7, lr}
 8016114:	b08e      	sub	sp, #56	; 0x38
 8016116:	af00      	add	r7, sp, #0
 8016118:	6078      	str	r0, [r7, #4]
 801611a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8016120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016122:	2b00      	cmp	r3, #0
 8016124:	d10a      	bne.n	801613c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8016126:	f04f 0350 	mov.w	r3, #80	; 0x50
 801612a:	f383 8811 	msr	BASEPRI, r3
 801612e:	f3bf 8f6f 	isb	sy
 8016132:	f3bf 8f4f 	dsb	sy
 8016136:	623b      	str	r3, [r7, #32]
}
 8016138:	bf00      	nop
 801613a:	e7fe      	b.n	801613a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801613c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801613e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016140:	2b00      	cmp	r3, #0
 8016142:	d00a      	beq.n	801615a <xQueueGiveFromISR+0x48>
	__asm volatile
 8016144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016148:	f383 8811 	msr	BASEPRI, r3
 801614c:	f3bf 8f6f 	isb	sy
 8016150:	f3bf 8f4f 	dsb	sy
 8016154:	61fb      	str	r3, [r7, #28]
}
 8016156:	bf00      	nop
 8016158:	e7fe      	b.n	8016158 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801615a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	2b00      	cmp	r3, #0
 8016160:	d103      	bne.n	801616a <xQueueGiveFromISR+0x58>
 8016162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016164:	689b      	ldr	r3, [r3, #8]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d101      	bne.n	801616e <xQueueGiveFromISR+0x5c>
 801616a:	2301      	movs	r3, #1
 801616c:	e000      	b.n	8016170 <xQueueGiveFromISR+0x5e>
 801616e:	2300      	movs	r3, #0
 8016170:	2b00      	cmp	r3, #0
 8016172:	d10a      	bne.n	801618a <xQueueGiveFromISR+0x78>
	__asm volatile
 8016174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016178:	f383 8811 	msr	BASEPRI, r3
 801617c:	f3bf 8f6f 	isb	sy
 8016180:	f3bf 8f4f 	dsb	sy
 8016184:	61bb      	str	r3, [r7, #24]
}
 8016186:	bf00      	nop
 8016188:	e7fe      	b.n	8016188 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801618a:	f002 fa95 	bl	80186b8 <vPortValidateInterruptPriority>
	__asm volatile
 801618e:	f3ef 8211 	mrs	r2, BASEPRI
 8016192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016196:	f383 8811 	msr	BASEPRI, r3
 801619a:	f3bf 8f6f 	isb	sy
 801619e:	f3bf 8f4f 	dsb	sy
 80161a2:	617a      	str	r2, [r7, #20]
 80161a4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80161a6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80161a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80161aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80161ae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80161b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80161b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80161b6:	429a      	cmp	r2, r3
 80161b8:	d22b      	bcs.n	8016212 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80161ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80161c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80161c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161c6:	1c5a      	adds	r2, r3, #1
 80161c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80161cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80161d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161d4:	d112      	bne.n	80161fc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80161d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d016      	beq.n	801620c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80161de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161e0:	3324      	adds	r3, #36	; 0x24
 80161e2:	4618      	mov	r0, r3
 80161e4:	f001 f95a 	bl	801749c <xTaskRemoveFromEventList>
 80161e8:	4603      	mov	r3, r0
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d00e      	beq.n	801620c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80161ee:	683b      	ldr	r3, [r7, #0]
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d00b      	beq.n	801620c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80161f4:	683b      	ldr	r3, [r7, #0]
 80161f6:	2201      	movs	r2, #1
 80161f8:	601a      	str	r2, [r3, #0]
 80161fa:	e007      	b.n	801620c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80161fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016200:	3301      	adds	r3, #1
 8016202:	b2db      	uxtb	r3, r3
 8016204:	b25a      	sxtb	r2, r3
 8016206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801620c:	2301      	movs	r3, #1
 801620e:	637b      	str	r3, [r7, #52]	; 0x34
 8016210:	e001      	b.n	8016216 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016212:	2300      	movs	r3, #0
 8016214:	637b      	str	r3, [r7, #52]	; 0x34
 8016216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016218:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801621a:	68fb      	ldr	r3, [r7, #12]
 801621c:	f383 8811 	msr	BASEPRI, r3
}
 8016220:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016224:	4618      	mov	r0, r3
 8016226:	3738      	adds	r7, #56	; 0x38
 8016228:	46bd      	mov	sp, r7
 801622a:	bd80      	pop	{r7, pc}

0801622c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801622c:	b580      	push	{r7, lr}
 801622e:	b08c      	sub	sp, #48	; 0x30
 8016230:	af00      	add	r7, sp, #0
 8016232:	60f8      	str	r0, [r7, #12]
 8016234:	60b9      	str	r1, [r7, #8]
 8016236:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8016238:	2300      	movs	r3, #0
 801623a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016242:	2b00      	cmp	r3, #0
 8016244:	d10a      	bne.n	801625c <xQueueReceive+0x30>
	__asm volatile
 8016246:	f04f 0350 	mov.w	r3, #80	; 0x50
 801624a:	f383 8811 	msr	BASEPRI, r3
 801624e:	f3bf 8f6f 	isb	sy
 8016252:	f3bf 8f4f 	dsb	sy
 8016256:	623b      	str	r3, [r7, #32]
}
 8016258:	bf00      	nop
 801625a:	e7fe      	b.n	801625a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801625c:	68bb      	ldr	r3, [r7, #8]
 801625e:	2b00      	cmp	r3, #0
 8016260:	d103      	bne.n	801626a <xQueueReceive+0x3e>
 8016262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016266:	2b00      	cmp	r3, #0
 8016268:	d101      	bne.n	801626e <xQueueReceive+0x42>
 801626a:	2301      	movs	r3, #1
 801626c:	e000      	b.n	8016270 <xQueueReceive+0x44>
 801626e:	2300      	movs	r3, #0
 8016270:	2b00      	cmp	r3, #0
 8016272:	d10a      	bne.n	801628a <xQueueReceive+0x5e>
	__asm volatile
 8016274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016278:	f383 8811 	msr	BASEPRI, r3
 801627c:	f3bf 8f6f 	isb	sy
 8016280:	f3bf 8f4f 	dsb	sy
 8016284:	61fb      	str	r3, [r7, #28]
}
 8016286:	bf00      	nop
 8016288:	e7fe      	b.n	8016288 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801628a:	f001 fad9 	bl	8017840 <xTaskGetSchedulerState>
 801628e:	4603      	mov	r3, r0
 8016290:	2b00      	cmp	r3, #0
 8016292:	d102      	bne.n	801629a <xQueueReceive+0x6e>
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	2b00      	cmp	r3, #0
 8016298:	d101      	bne.n	801629e <xQueueReceive+0x72>
 801629a:	2301      	movs	r3, #1
 801629c:	e000      	b.n	80162a0 <xQueueReceive+0x74>
 801629e:	2300      	movs	r3, #0
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d10a      	bne.n	80162ba <xQueueReceive+0x8e>
	__asm volatile
 80162a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162a8:	f383 8811 	msr	BASEPRI, r3
 80162ac:	f3bf 8f6f 	isb	sy
 80162b0:	f3bf 8f4f 	dsb	sy
 80162b4:	61bb      	str	r3, [r7, #24]
}
 80162b6:	bf00      	nop
 80162b8:	e7fe      	b.n	80162b8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80162ba:	f002 f91b 	bl	80184f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80162be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80162c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80162c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d01f      	beq.n	801630a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80162ca:	68b9      	ldr	r1, [r7, #8]
 80162cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80162ce:	f000 fabe 	bl	801684e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80162d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162d4:	1e5a      	subs	r2, r3, #1
 80162d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80162da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162dc:	691b      	ldr	r3, [r3, #16]
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d00f      	beq.n	8016302 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80162e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162e4:	3310      	adds	r3, #16
 80162e6:	4618      	mov	r0, r3
 80162e8:	f001 f8d8 	bl	801749c <xTaskRemoveFromEventList>
 80162ec:	4603      	mov	r3, r0
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d007      	beq.n	8016302 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80162f2:	4b3d      	ldr	r3, [pc, #244]	; (80163e8 <xQueueReceive+0x1bc>)
 80162f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80162f8:	601a      	str	r2, [r3, #0]
 80162fa:	f3bf 8f4f 	dsb	sy
 80162fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016302:	f002 f927 	bl	8018554 <vPortExitCritical>
				return pdPASS;
 8016306:	2301      	movs	r3, #1
 8016308:	e069      	b.n	80163de <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	2b00      	cmp	r3, #0
 801630e:	d103      	bne.n	8016318 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016310:	f002 f920 	bl	8018554 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016314:	2300      	movs	r3, #0
 8016316:	e062      	b.n	80163de <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801631a:	2b00      	cmp	r3, #0
 801631c:	d106      	bne.n	801632c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801631e:	f107 0310 	add.w	r3, r7, #16
 8016322:	4618      	mov	r0, r3
 8016324:	f001 f91e 	bl	8017564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016328:	2301      	movs	r3, #1
 801632a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801632c:	f002 f912 	bl	8018554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016330:	f000 fe8a 	bl	8017048 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016334:	f002 f8de 	bl	80184f4 <vPortEnterCritical>
 8016338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801633a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801633e:	b25b      	sxtb	r3, r3
 8016340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016344:	d103      	bne.n	801634e <xQueueReceive+0x122>
 8016346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016348:	2200      	movs	r2, #0
 801634a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801634e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016350:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016354:	b25b      	sxtb	r3, r3
 8016356:	f1b3 3fff 	cmp.w	r3, #4294967295
 801635a:	d103      	bne.n	8016364 <xQueueReceive+0x138>
 801635c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801635e:	2200      	movs	r2, #0
 8016360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016364:	f002 f8f6 	bl	8018554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016368:	1d3a      	adds	r2, r7, #4
 801636a:	f107 0310 	add.w	r3, r7, #16
 801636e:	4611      	mov	r1, r2
 8016370:	4618      	mov	r0, r3
 8016372:	f001 f90d 	bl	8017590 <xTaskCheckForTimeOut>
 8016376:	4603      	mov	r3, r0
 8016378:	2b00      	cmp	r3, #0
 801637a:	d123      	bne.n	80163c4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801637c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801637e:	f000 fade 	bl	801693e <prvIsQueueEmpty>
 8016382:	4603      	mov	r3, r0
 8016384:	2b00      	cmp	r3, #0
 8016386:	d017      	beq.n	80163b8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801638a:	3324      	adds	r3, #36	; 0x24
 801638c:	687a      	ldr	r2, [r7, #4]
 801638e:	4611      	mov	r1, r2
 8016390:	4618      	mov	r0, r3
 8016392:	f001 f833 	bl	80173fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016398:	f000 fa7f 	bl	801689a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801639c:	f000 fe62 	bl	8017064 <xTaskResumeAll>
 80163a0:	4603      	mov	r3, r0
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d189      	bne.n	80162ba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80163a6:	4b10      	ldr	r3, [pc, #64]	; (80163e8 <xQueueReceive+0x1bc>)
 80163a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80163ac:	601a      	str	r2, [r3, #0]
 80163ae:	f3bf 8f4f 	dsb	sy
 80163b2:	f3bf 8f6f 	isb	sy
 80163b6:	e780      	b.n	80162ba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80163b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80163ba:	f000 fa6e 	bl	801689a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80163be:	f000 fe51 	bl	8017064 <xTaskResumeAll>
 80163c2:	e77a      	b.n	80162ba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80163c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80163c6:	f000 fa68 	bl	801689a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80163ca:	f000 fe4b 	bl	8017064 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80163ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80163d0:	f000 fab5 	bl	801693e <prvIsQueueEmpty>
 80163d4:	4603      	mov	r3, r0
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	f43f af6f 	beq.w	80162ba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80163dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80163de:	4618      	mov	r0, r3
 80163e0:	3730      	adds	r7, #48	; 0x30
 80163e2:	46bd      	mov	sp, r7
 80163e4:	bd80      	pop	{r7, pc}
 80163e6:	bf00      	nop
 80163e8:	e000ed04 	.word	0xe000ed04

080163ec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80163ec:	b580      	push	{r7, lr}
 80163ee:	b08e      	sub	sp, #56	; 0x38
 80163f0:	af00      	add	r7, sp, #0
 80163f2:	6078      	str	r0, [r7, #4]
 80163f4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80163f6:	2300      	movs	r3, #0
 80163f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80163fe:	2300      	movs	r3, #0
 8016400:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016404:	2b00      	cmp	r3, #0
 8016406:	d10a      	bne.n	801641e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8016408:	f04f 0350 	mov.w	r3, #80	; 0x50
 801640c:	f383 8811 	msr	BASEPRI, r3
 8016410:	f3bf 8f6f 	isb	sy
 8016414:	f3bf 8f4f 	dsb	sy
 8016418:	623b      	str	r3, [r7, #32]
}
 801641a:	bf00      	nop
 801641c:	e7fe      	b.n	801641c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801641e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016422:	2b00      	cmp	r3, #0
 8016424:	d00a      	beq.n	801643c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8016426:	f04f 0350 	mov.w	r3, #80	; 0x50
 801642a:	f383 8811 	msr	BASEPRI, r3
 801642e:	f3bf 8f6f 	isb	sy
 8016432:	f3bf 8f4f 	dsb	sy
 8016436:	61fb      	str	r3, [r7, #28]
}
 8016438:	bf00      	nop
 801643a:	e7fe      	b.n	801643a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801643c:	f001 fa00 	bl	8017840 <xTaskGetSchedulerState>
 8016440:	4603      	mov	r3, r0
 8016442:	2b00      	cmp	r3, #0
 8016444:	d102      	bne.n	801644c <xQueueSemaphoreTake+0x60>
 8016446:	683b      	ldr	r3, [r7, #0]
 8016448:	2b00      	cmp	r3, #0
 801644a:	d101      	bne.n	8016450 <xQueueSemaphoreTake+0x64>
 801644c:	2301      	movs	r3, #1
 801644e:	e000      	b.n	8016452 <xQueueSemaphoreTake+0x66>
 8016450:	2300      	movs	r3, #0
 8016452:	2b00      	cmp	r3, #0
 8016454:	d10a      	bne.n	801646c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8016456:	f04f 0350 	mov.w	r3, #80	; 0x50
 801645a:	f383 8811 	msr	BASEPRI, r3
 801645e:	f3bf 8f6f 	isb	sy
 8016462:	f3bf 8f4f 	dsb	sy
 8016466:	61bb      	str	r3, [r7, #24]
}
 8016468:	bf00      	nop
 801646a:	e7fe      	b.n	801646a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801646c:	f002 f842 	bl	80184f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8016470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016474:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8016476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016478:	2b00      	cmp	r3, #0
 801647a:	d024      	beq.n	80164c6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801647c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801647e:	1e5a      	subs	r2, r3, #1
 8016480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016482:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	2b00      	cmp	r3, #0
 801648a:	d104      	bne.n	8016496 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801648c:	f001 fb4e 	bl	8017b2c <pvTaskIncrementMutexHeldCount>
 8016490:	4602      	mov	r2, r0
 8016492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016494:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016498:	691b      	ldr	r3, [r3, #16]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d00f      	beq.n	80164be <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801649e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164a0:	3310      	adds	r3, #16
 80164a2:	4618      	mov	r0, r3
 80164a4:	f000 fffa 	bl	801749c <xTaskRemoveFromEventList>
 80164a8:	4603      	mov	r3, r0
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d007      	beq.n	80164be <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80164ae:	4b54      	ldr	r3, [pc, #336]	; (8016600 <xQueueSemaphoreTake+0x214>)
 80164b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80164b4:	601a      	str	r2, [r3, #0]
 80164b6:	f3bf 8f4f 	dsb	sy
 80164ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80164be:	f002 f849 	bl	8018554 <vPortExitCritical>
				return pdPASS;
 80164c2:	2301      	movs	r3, #1
 80164c4:	e097      	b.n	80165f6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80164c6:	683b      	ldr	r3, [r7, #0]
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d111      	bne.n	80164f0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80164cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d00a      	beq.n	80164e8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80164d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164d6:	f383 8811 	msr	BASEPRI, r3
 80164da:	f3bf 8f6f 	isb	sy
 80164de:	f3bf 8f4f 	dsb	sy
 80164e2:	617b      	str	r3, [r7, #20]
}
 80164e4:	bf00      	nop
 80164e6:	e7fe      	b.n	80164e6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80164e8:	f002 f834 	bl	8018554 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80164ec:	2300      	movs	r3, #0
 80164ee:	e082      	b.n	80165f6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80164f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d106      	bne.n	8016504 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80164f6:	f107 030c 	add.w	r3, r7, #12
 80164fa:	4618      	mov	r0, r3
 80164fc:	f001 f832 	bl	8017564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016500:	2301      	movs	r3, #1
 8016502:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016504:	f002 f826 	bl	8018554 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016508:	f000 fd9e 	bl	8017048 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801650c:	f001 fff2 	bl	80184f4 <vPortEnterCritical>
 8016510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016512:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016516:	b25b      	sxtb	r3, r3
 8016518:	f1b3 3fff 	cmp.w	r3, #4294967295
 801651c:	d103      	bne.n	8016526 <xQueueSemaphoreTake+0x13a>
 801651e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016520:	2200      	movs	r2, #0
 8016522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016528:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801652c:	b25b      	sxtb	r3, r3
 801652e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016532:	d103      	bne.n	801653c <xQueueSemaphoreTake+0x150>
 8016534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016536:	2200      	movs	r2, #0
 8016538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801653c:	f002 f80a 	bl	8018554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016540:	463a      	mov	r2, r7
 8016542:	f107 030c 	add.w	r3, r7, #12
 8016546:	4611      	mov	r1, r2
 8016548:	4618      	mov	r0, r3
 801654a:	f001 f821 	bl	8017590 <xTaskCheckForTimeOut>
 801654e:	4603      	mov	r3, r0
 8016550:	2b00      	cmp	r3, #0
 8016552:	d132      	bne.n	80165ba <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016554:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016556:	f000 f9f2 	bl	801693e <prvIsQueueEmpty>
 801655a:	4603      	mov	r3, r0
 801655c:	2b00      	cmp	r3, #0
 801655e:	d026      	beq.n	80165ae <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016562:	681b      	ldr	r3, [r3, #0]
 8016564:	2b00      	cmp	r3, #0
 8016566:	d109      	bne.n	801657c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8016568:	f001 ffc4 	bl	80184f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801656c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801656e:	689b      	ldr	r3, [r3, #8]
 8016570:	4618      	mov	r0, r3
 8016572:	f001 f983 	bl	801787c <xTaskPriorityInherit>
 8016576:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8016578:	f001 ffec 	bl	8018554 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801657c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801657e:	3324      	adds	r3, #36	; 0x24
 8016580:	683a      	ldr	r2, [r7, #0]
 8016582:	4611      	mov	r1, r2
 8016584:	4618      	mov	r0, r3
 8016586:	f000 ff39 	bl	80173fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801658a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801658c:	f000 f985 	bl	801689a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016590:	f000 fd68 	bl	8017064 <xTaskResumeAll>
 8016594:	4603      	mov	r3, r0
 8016596:	2b00      	cmp	r3, #0
 8016598:	f47f af68 	bne.w	801646c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 801659c:	4b18      	ldr	r3, [pc, #96]	; (8016600 <xQueueSemaphoreTake+0x214>)
 801659e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80165a2:	601a      	str	r2, [r3, #0]
 80165a4:	f3bf 8f4f 	dsb	sy
 80165a8:	f3bf 8f6f 	isb	sy
 80165ac:	e75e      	b.n	801646c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80165ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80165b0:	f000 f973 	bl	801689a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80165b4:	f000 fd56 	bl	8017064 <xTaskResumeAll>
 80165b8:	e758      	b.n	801646c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80165ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80165bc:	f000 f96d 	bl	801689a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80165c0:	f000 fd50 	bl	8017064 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80165c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80165c6:	f000 f9ba 	bl	801693e <prvIsQueueEmpty>
 80165ca:	4603      	mov	r3, r0
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	f43f af4d 	beq.w	801646c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80165d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d00d      	beq.n	80165f4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80165d8:	f001 ff8c 	bl	80184f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80165dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80165de:	f000 f8b4 	bl	801674a <prvGetDisinheritPriorityAfterTimeout>
 80165e2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80165e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165e6:	689b      	ldr	r3, [r3, #8]
 80165e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80165ea:	4618      	mov	r0, r3
 80165ec:	f001 fa1c 	bl	8017a28 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80165f0:	f001 ffb0 	bl	8018554 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80165f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80165f6:	4618      	mov	r0, r3
 80165f8:	3738      	adds	r7, #56	; 0x38
 80165fa:	46bd      	mov	sp, r7
 80165fc:	bd80      	pop	{r7, pc}
 80165fe:	bf00      	nop
 8016600:	e000ed04 	.word	0xe000ed04

08016604 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016604:	b580      	push	{r7, lr}
 8016606:	b08e      	sub	sp, #56	; 0x38
 8016608:	af00      	add	r7, sp, #0
 801660a:	60f8      	str	r0, [r7, #12]
 801660c:	60b9      	str	r1, [r7, #8]
 801660e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016616:	2b00      	cmp	r3, #0
 8016618:	d10a      	bne.n	8016630 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801661a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801661e:	f383 8811 	msr	BASEPRI, r3
 8016622:	f3bf 8f6f 	isb	sy
 8016626:	f3bf 8f4f 	dsb	sy
 801662a:	623b      	str	r3, [r7, #32]
}
 801662c:	bf00      	nop
 801662e:	e7fe      	b.n	801662e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016630:	68bb      	ldr	r3, [r7, #8]
 8016632:	2b00      	cmp	r3, #0
 8016634:	d103      	bne.n	801663e <xQueueReceiveFromISR+0x3a>
 8016636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801663a:	2b00      	cmp	r3, #0
 801663c:	d101      	bne.n	8016642 <xQueueReceiveFromISR+0x3e>
 801663e:	2301      	movs	r3, #1
 8016640:	e000      	b.n	8016644 <xQueueReceiveFromISR+0x40>
 8016642:	2300      	movs	r3, #0
 8016644:	2b00      	cmp	r3, #0
 8016646:	d10a      	bne.n	801665e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8016648:	f04f 0350 	mov.w	r3, #80	; 0x50
 801664c:	f383 8811 	msr	BASEPRI, r3
 8016650:	f3bf 8f6f 	isb	sy
 8016654:	f3bf 8f4f 	dsb	sy
 8016658:	61fb      	str	r3, [r7, #28]
}
 801665a:	bf00      	nop
 801665c:	e7fe      	b.n	801665c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801665e:	f002 f82b 	bl	80186b8 <vPortValidateInterruptPriority>
	__asm volatile
 8016662:	f3ef 8211 	mrs	r2, BASEPRI
 8016666:	f04f 0350 	mov.w	r3, #80	; 0x50
 801666a:	f383 8811 	msr	BASEPRI, r3
 801666e:	f3bf 8f6f 	isb	sy
 8016672:	f3bf 8f4f 	dsb	sy
 8016676:	61ba      	str	r2, [r7, #24]
 8016678:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801667a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801667c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801667e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016682:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016686:	2b00      	cmp	r3, #0
 8016688:	d02f      	beq.n	80166ea <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801668a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801668c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016694:	68b9      	ldr	r1, [r7, #8]
 8016696:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016698:	f000 f8d9 	bl	801684e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801669c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801669e:	1e5a      	subs	r2, r3, #1
 80166a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166a2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80166a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80166a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166ac:	d112      	bne.n	80166d4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80166ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166b0:	691b      	ldr	r3, [r3, #16]
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d016      	beq.n	80166e4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80166b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166b8:	3310      	adds	r3, #16
 80166ba:	4618      	mov	r0, r3
 80166bc:	f000 feee 	bl	801749c <xTaskRemoveFromEventList>
 80166c0:	4603      	mov	r3, r0
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d00e      	beq.n	80166e4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d00b      	beq.n	80166e4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	2201      	movs	r2, #1
 80166d0:	601a      	str	r2, [r3, #0]
 80166d2:	e007      	b.n	80166e4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80166d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80166d8:	3301      	adds	r3, #1
 80166da:	b2db      	uxtb	r3, r3
 80166dc:	b25a      	sxtb	r2, r3
 80166de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80166e4:	2301      	movs	r3, #1
 80166e6:	637b      	str	r3, [r7, #52]	; 0x34
 80166e8:	e001      	b.n	80166ee <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80166ea:	2300      	movs	r3, #0
 80166ec:	637b      	str	r3, [r7, #52]	; 0x34
 80166ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166f0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80166f2:	693b      	ldr	r3, [r7, #16]
 80166f4:	f383 8811 	msr	BASEPRI, r3
}
 80166f8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80166fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80166fc:	4618      	mov	r0, r3
 80166fe:	3738      	adds	r7, #56	; 0x38
 8016700:	46bd      	mov	sp, r7
 8016702:	bd80      	pop	{r7, pc}

08016704 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8016704:	b580      	push	{r7, lr}
 8016706:	b084      	sub	sp, #16
 8016708:	af00      	add	r7, sp, #0
 801670a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	2b00      	cmp	r3, #0
 8016714:	d10a      	bne.n	801672c <vQueueDelete+0x28>
	__asm volatile
 8016716:	f04f 0350 	mov.w	r3, #80	; 0x50
 801671a:	f383 8811 	msr	BASEPRI, r3
 801671e:	f3bf 8f6f 	isb	sy
 8016722:	f3bf 8f4f 	dsb	sy
 8016726:	60bb      	str	r3, [r7, #8]
}
 8016728:	bf00      	nop
 801672a:	e7fe      	b.n	801672a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801672c:	68f8      	ldr	r0, [r7, #12]
 801672e:	f000 f95f 	bl	80169f0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8016732:	68fb      	ldr	r3, [r7, #12]
 8016734:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8016738:	2b00      	cmp	r3, #0
 801673a:	d102      	bne.n	8016742 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 801673c:	68f8      	ldr	r0, [r7, #12]
 801673e:	f002 f8c7 	bl	80188d0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8016742:	bf00      	nop
 8016744:	3710      	adds	r7, #16
 8016746:	46bd      	mov	sp, r7
 8016748:	bd80      	pop	{r7, pc}

0801674a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801674a:	b480      	push	{r7}
 801674c:	b085      	sub	sp, #20
 801674e:	af00      	add	r7, sp, #0
 8016750:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016756:	2b00      	cmp	r3, #0
 8016758:	d006      	beq.n	8016768 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8016764:	60fb      	str	r3, [r7, #12]
 8016766:	e001      	b.n	801676c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8016768:	2300      	movs	r3, #0
 801676a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801676c:	68fb      	ldr	r3, [r7, #12]
	}
 801676e:	4618      	mov	r0, r3
 8016770:	3714      	adds	r7, #20
 8016772:	46bd      	mov	sp, r7
 8016774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016778:	4770      	bx	lr

0801677a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801677a:	b580      	push	{r7, lr}
 801677c:	b086      	sub	sp, #24
 801677e:	af00      	add	r7, sp, #0
 8016780:	60f8      	str	r0, [r7, #12]
 8016782:	60b9      	str	r1, [r7, #8]
 8016784:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8016786:	2300      	movs	r3, #0
 8016788:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801678e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016794:	2b00      	cmp	r3, #0
 8016796:	d10d      	bne.n	80167b4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d14d      	bne.n	801683c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	689b      	ldr	r3, [r3, #8]
 80167a4:	4618      	mov	r0, r3
 80167a6:	f001 f8d1 	bl	801794c <xTaskPriorityDisinherit>
 80167aa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80167ac:	68fb      	ldr	r3, [r7, #12]
 80167ae:	2200      	movs	r2, #0
 80167b0:	609a      	str	r2, [r3, #8]
 80167b2:	e043      	b.n	801683c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d119      	bne.n	80167ee <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	6858      	ldr	r0, [r3, #4]
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80167c2:	461a      	mov	r2, r3
 80167c4:	68b9      	ldr	r1, [r7, #8]
 80167c6:	f003 ffb9 	bl	801a73c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	685a      	ldr	r2, [r3, #4]
 80167ce:	68fb      	ldr	r3, [r7, #12]
 80167d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80167d2:	441a      	add	r2, r3
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80167d8:	68fb      	ldr	r3, [r7, #12]
 80167da:	685a      	ldr	r2, [r3, #4]
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	689b      	ldr	r3, [r3, #8]
 80167e0:	429a      	cmp	r2, r3
 80167e2:	d32b      	bcc.n	801683c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	681a      	ldr	r2, [r3, #0]
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	605a      	str	r2, [r3, #4]
 80167ec:	e026      	b.n	801683c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80167ee:	68fb      	ldr	r3, [r7, #12]
 80167f0:	68d8      	ldr	r0, [r3, #12]
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80167f6:	461a      	mov	r2, r3
 80167f8:	68b9      	ldr	r1, [r7, #8]
 80167fa:	f003 ff9f 	bl	801a73c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80167fe:	68fb      	ldr	r3, [r7, #12]
 8016800:	68da      	ldr	r2, [r3, #12]
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016806:	425b      	negs	r3, r3
 8016808:	441a      	add	r2, r3
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	68da      	ldr	r2, [r3, #12]
 8016812:	68fb      	ldr	r3, [r7, #12]
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	429a      	cmp	r2, r3
 8016818:	d207      	bcs.n	801682a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801681a:	68fb      	ldr	r3, [r7, #12]
 801681c:	689a      	ldr	r2, [r3, #8]
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016822:	425b      	negs	r3, r3
 8016824:	441a      	add	r2, r3
 8016826:	68fb      	ldr	r3, [r7, #12]
 8016828:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	2b02      	cmp	r3, #2
 801682e:	d105      	bne.n	801683c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016830:	693b      	ldr	r3, [r7, #16]
 8016832:	2b00      	cmp	r3, #0
 8016834:	d002      	beq.n	801683c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8016836:	693b      	ldr	r3, [r7, #16]
 8016838:	3b01      	subs	r3, #1
 801683a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801683c:	693b      	ldr	r3, [r7, #16]
 801683e:	1c5a      	adds	r2, r3, #1
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8016844:	697b      	ldr	r3, [r7, #20]
}
 8016846:	4618      	mov	r0, r3
 8016848:	3718      	adds	r7, #24
 801684a:	46bd      	mov	sp, r7
 801684c:	bd80      	pop	{r7, pc}

0801684e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801684e:	b580      	push	{r7, lr}
 8016850:	b082      	sub	sp, #8
 8016852:	af00      	add	r7, sp, #0
 8016854:	6078      	str	r0, [r7, #4]
 8016856:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801685c:	2b00      	cmp	r3, #0
 801685e:	d018      	beq.n	8016892 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	68da      	ldr	r2, [r3, #12]
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016868:	441a      	add	r2, r3
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	68da      	ldr	r2, [r3, #12]
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	689b      	ldr	r3, [r3, #8]
 8016876:	429a      	cmp	r2, r3
 8016878:	d303      	bcc.n	8016882 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	681a      	ldr	r2, [r3, #0]
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	68d9      	ldr	r1, [r3, #12]
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801688a:	461a      	mov	r2, r3
 801688c:	6838      	ldr	r0, [r7, #0]
 801688e:	f003 ff55 	bl	801a73c <memcpy>
	}
}
 8016892:	bf00      	nop
 8016894:	3708      	adds	r7, #8
 8016896:	46bd      	mov	sp, r7
 8016898:	bd80      	pop	{r7, pc}

0801689a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801689a:	b580      	push	{r7, lr}
 801689c:	b084      	sub	sp, #16
 801689e:	af00      	add	r7, sp, #0
 80168a0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80168a2:	f001 fe27 	bl	80184f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80168ac:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80168ae:	e011      	b.n	80168d4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d012      	beq.n	80168de <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	3324      	adds	r3, #36	; 0x24
 80168bc:	4618      	mov	r0, r3
 80168be:	f000 fded 	bl	801749c <xTaskRemoveFromEventList>
 80168c2:	4603      	mov	r3, r0
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d001      	beq.n	80168cc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80168c8:	f000 fec4 	bl	8017654 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80168cc:	7bfb      	ldrb	r3, [r7, #15]
 80168ce:	3b01      	subs	r3, #1
 80168d0:	b2db      	uxtb	r3, r3
 80168d2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80168d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	dce9      	bgt.n	80168b0 <prvUnlockQueue+0x16>
 80168dc:	e000      	b.n	80168e0 <prvUnlockQueue+0x46>
					break;
 80168de:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	22ff      	movs	r2, #255	; 0xff
 80168e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80168e8:	f001 fe34 	bl	8018554 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80168ec:	f001 fe02 	bl	80184f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80168f6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80168f8:	e011      	b.n	801691e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	691b      	ldr	r3, [r3, #16]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d012      	beq.n	8016928 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	3310      	adds	r3, #16
 8016906:	4618      	mov	r0, r3
 8016908:	f000 fdc8 	bl	801749c <xTaskRemoveFromEventList>
 801690c:	4603      	mov	r3, r0
 801690e:	2b00      	cmp	r3, #0
 8016910:	d001      	beq.n	8016916 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8016912:	f000 fe9f 	bl	8017654 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8016916:	7bbb      	ldrb	r3, [r7, #14]
 8016918:	3b01      	subs	r3, #1
 801691a:	b2db      	uxtb	r3, r3
 801691c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801691e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016922:	2b00      	cmp	r3, #0
 8016924:	dce9      	bgt.n	80168fa <prvUnlockQueue+0x60>
 8016926:	e000      	b.n	801692a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8016928:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	22ff      	movs	r2, #255	; 0xff
 801692e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8016932:	f001 fe0f 	bl	8018554 <vPortExitCritical>
}
 8016936:	bf00      	nop
 8016938:	3710      	adds	r7, #16
 801693a:	46bd      	mov	sp, r7
 801693c:	bd80      	pop	{r7, pc}

0801693e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801693e:	b580      	push	{r7, lr}
 8016940:	b084      	sub	sp, #16
 8016942:	af00      	add	r7, sp, #0
 8016944:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016946:	f001 fdd5 	bl	80184f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801694e:	2b00      	cmp	r3, #0
 8016950:	d102      	bne.n	8016958 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8016952:	2301      	movs	r3, #1
 8016954:	60fb      	str	r3, [r7, #12]
 8016956:	e001      	b.n	801695c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8016958:	2300      	movs	r3, #0
 801695a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801695c:	f001 fdfa 	bl	8018554 <vPortExitCritical>

	return xReturn;
 8016960:	68fb      	ldr	r3, [r7, #12]
}
 8016962:	4618      	mov	r0, r3
 8016964:	3710      	adds	r7, #16
 8016966:	46bd      	mov	sp, r7
 8016968:	bd80      	pop	{r7, pc}

0801696a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801696a:	b580      	push	{r7, lr}
 801696c:	b084      	sub	sp, #16
 801696e:	af00      	add	r7, sp, #0
 8016970:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016972:	f001 fdbf 	bl	80184f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801697e:	429a      	cmp	r2, r3
 8016980:	d102      	bne.n	8016988 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8016982:	2301      	movs	r3, #1
 8016984:	60fb      	str	r3, [r7, #12]
 8016986:	e001      	b.n	801698c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8016988:	2300      	movs	r3, #0
 801698a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801698c:	f001 fde2 	bl	8018554 <vPortExitCritical>

	return xReturn;
 8016990:	68fb      	ldr	r3, [r7, #12]
}
 8016992:	4618      	mov	r0, r3
 8016994:	3710      	adds	r7, #16
 8016996:	46bd      	mov	sp, r7
 8016998:	bd80      	pop	{r7, pc}
	...

0801699c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801699c:	b480      	push	{r7}
 801699e:	b085      	sub	sp, #20
 80169a0:	af00      	add	r7, sp, #0
 80169a2:	6078      	str	r0, [r7, #4]
 80169a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80169a6:	2300      	movs	r3, #0
 80169a8:	60fb      	str	r3, [r7, #12]
 80169aa:	e014      	b.n	80169d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80169ac:	4a0f      	ldr	r2, [pc, #60]	; (80169ec <vQueueAddToRegistry+0x50>)
 80169ae:	68fb      	ldr	r3, [r7, #12]
 80169b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d10b      	bne.n	80169d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80169b8:	490c      	ldr	r1, [pc, #48]	; (80169ec <vQueueAddToRegistry+0x50>)
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	683a      	ldr	r2, [r7, #0]
 80169be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80169c2:	4a0a      	ldr	r2, [pc, #40]	; (80169ec <vQueueAddToRegistry+0x50>)
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	00db      	lsls	r3, r3, #3
 80169c8:	4413      	add	r3, r2
 80169ca:	687a      	ldr	r2, [r7, #4]
 80169cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80169ce:	e006      	b.n	80169de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80169d0:	68fb      	ldr	r3, [r7, #12]
 80169d2:	3301      	adds	r3, #1
 80169d4:	60fb      	str	r3, [r7, #12]
 80169d6:	68fb      	ldr	r3, [r7, #12]
 80169d8:	2b07      	cmp	r3, #7
 80169da:	d9e7      	bls.n	80169ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80169dc:	bf00      	nop
 80169de:	bf00      	nop
 80169e0:	3714      	adds	r7, #20
 80169e2:	46bd      	mov	sp, r7
 80169e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169e8:	4770      	bx	lr
 80169ea:	bf00      	nop
 80169ec:	20007690 	.word	0x20007690

080169f0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80169f0:	b480      	push	{r7}
 80169f2:	b085      	sub	sp, #20
 80169f4:	af00      	add	r7, sp, #0
 80169f6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80169f8:	2300      	movs	r3, #0
 80169fa:	60fb      	str	r3, [r7, #12]
 80169fc:	e016      	b.n	8016a2c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80169fe:	4a10      	ldr	r2, [pc, #64]	; (8016a40 <vQueueUnregisterQueue+0x50>)
 8016a00:	68fb      	ldr	r3, [r7, #12]
 8016a02:	00db      	lsls	r3, r3, #3
 8016a04:	4413      	add	r3, r2
 8016a06:	685b      	ldr	r3, [r3, #4]
 8016a08:	687a      	ldr	r2, [r7, #4]
 8016a0a:	429a      	cmp	r2, r3
 8016a0c:	d10b      	bne.n	8016a26 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8016a0e:	4a0c      	ldr	r2, [pc, #48]	; (8016a40 <vQueueUnregisterQueue+0x50>)
 8016a10:	68fb      	ldr	r3, [r7, #12]
 8016a12:	2100      	movs	r1, #0
 8016a14:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8016a18:	4a09      	ldr	r2, [pc, #36]	; (8016a40 <vQueueUnregisterQueue+0x50>)
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	00db      	lsls	r3, r3, #3
 8016a1e:	4413      	add	r3, r2
 8016a20:	2200      	movs	r2, #0
 8016a22:	605a      	str	r2, [r3, #4]
				break;
 8016a24:	e006      	b.n	8016a34 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	3301      	adds	r3, #1
 8016a2a:	60fb      	str	r3, [r7, #12]
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	2b07      	cmp	r3, #7
 8016a30:	d9e5      	bls.n	80169fe <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8016a32:	bf00      	nop
 8016a34:	bf00      	nop
 8016a36:	3714      	adds	r7, #20
 8016a38:	46bd      	mov	sp, r7
 8016a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a3e:	4770      	bx	lr
 8016a40:	20007690 	.word	0x20007690

08016a44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016a44:	b580      	push	{r7, lr}
 8016a46:	b086      	sub	sp, #24
 8016a48:	af00      	add	r7, sp, #0
 8016a4a:	60f8      	str	r0, [r7, #12]
 8016a4c:	60b9      	str	r1, [r7, #8]
 8016a4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8016a50:	68fb      	ldr	r3, [r7, #12]
 8016a52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8016a54:	f001 fd4e 	bl	80184f4 <vPortEnterCritical>
 8016a58:	697b      	ldr	r3, [r7, #20]
 8016a5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016a5e:	b25b      	sxtb	r3, r3
 8016a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a64:	d103      	bne.n	8016a6e <vQueueWaitForMessageRestricted+0x2a>
 8016a66:	697b      	ldr	r3, [r7, #20]
 8016a68:	2200      	movs	r2, #0
 8016a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016a6e:	697b      	ldr	r3, [r7, #20]
 8016a70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016a74:	b25b      	sxtb	r3, r3
 8016a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a7a:	d103      	bne.n	8016a84 <vQueueWaitForMessageRestricted+0x40>
 8016a7c:	697b      	ldr	r3, [r7, #20]
 8016a7e:	2200      	movs	r2, #0
 8016a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016a84:	f001 fd66 	bl	8018554 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8016a88:	697b      	ldr	r3, [r7, #20]
 8016a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d106      	bne.n	8016a9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016a90:	697b      	ldr	r3, [r7, #20]
 8016a92:	3324      	adds	r3, #36	; 0x24
 8016a94:	687a      	ldr	r2, [r7, #4]
 8016a96:	68b9      	ldr	r1, [r7, #8]
 8016a98:	4618      	mov	r0, r3
 8016a9a:	f000 fcd3 	bl	8017444 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8016a9e:	6978      	ldr	r0, [r7, #20]
 8016aa0:	f7ff fefb 	bl	801689a <prvUnlockQueue>
	}
 8016aa4:	bf00      	nop
 8016aa6:	3718      	adds	r7, #24
 8016aa8:	46bd      	mov	sp, r7
 8016aaa:	bd80      	pop	{r7, pc}

08016aac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016aac:	b580      	push	{r7, lr}
 8016aae:	b08e      	sub	sp, #56	; 0x38
 8016ab0:	af04      	add	r7, sp, #16
 8016ab2:	60f8      	str	r0, [r7, #12]
 8016ab4:	60b9      	str	r1, [r7, #8]
 8016ab6:	607a      	str	r2, [r7, #4]
 8016ab8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8016aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d10a      	bne.n	8016ad6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8016ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ac4:	f383 8811 	msr	BASEPRI, r3
 8016ac8:	f3bf 8f6f 	isb	sy
 8016acc:	f3bf 8f4f 	dsb	sy
 8016ad0:	623b      	str	r3, [r7, #32]
}
 8016ad2:	bf00      	nop
 8016ad4:	e7fe      	b.n	8016ad4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8016ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d10a      	bne.n	8016af2 <xTaskCreateStatic+0x46>
	__asm volatile
 8016adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ae0:	f383 8811 	msr	BASEPRI, r3
 8016ae4:	f3bf 8f6f 	isb	sy
 8016ae8:	f3bf 8f4f 	dsb	sy
 8016aec:	61fb      	str	r3, [r7, #28]
}
 8016aee:	bf00      	nop
 8016af0:	e7fe      	b.n	8016af0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8016af2:	23bc      	movs	r3, #188	; 0xbc
 8016af4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8016af6:	693b      	ldr	r3, [r7, #16]
 8016af8:	2bbc      	cmp	r3, #188	; 0xbc
 8016afa:	d00a      	beq.n	8016b12 <xTaskCreateStatic+0x66>
	__asm volatile
 8016afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b00:	f383 8811 	msr	BASEPRI, r3
 8016b04:	f3bf 8f6f 	isb	sy
 8016b08:	f3bf 8f4f 	dsb	sy
 8016b0c:	61bb      	str	r3, [r7, #24]
}
 8016b0e:	bf00      	nop
 8016b10:	e7fe      	b.n	8016b10 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8016b12:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d01e      	beq.n	8016b58 <xTaskCreateStatic+0xac>
 8016b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d01b      	beq.n	8016b58 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b22:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016b28:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b2c:	2202      	movs	r2, #2
 8016b2e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8016b32:	2300      	movs	r3, #0
 8016b34:	9303      	str	r3, [sp, #12]
 8016b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b38:	9302      	str	r3, [sp, #8]
 8016b3a:	f107 0314 	add.w	r3, r7, #20
 8016b3e:	9301      	str	r3, [sp, #4]
 8016b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b42:	9300      	str	r3, [sp, #0]
 8016b44:	683b      	ldr	r3, [r7, #0]
 8016b46:	687a      	ldr	r2, [r7, #4]
 8016b48:	68b9      	ldr	r1, [r7, #8]
 8016b4a:	68f8      	ldr	r0, [r7, #12]
 8016b4c:	f000 f850 	bl	8016bf0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016b50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016b52:	f000 f8f3 	bl	8016d3c <prvAddNewTaskToReadyList>
 8016b56:	e001      	b.n	8016b5c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8016b58:	2300      	movs	r3, #0
 8016b5a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016b5c:	697b      	ldr	r3, [r7, #20]
	}
 8016b5e:	4618      	mov	r0, r3
 8016b60:	3728      	adds	r7, #40	; 0x28
 8016b62:	46bd      	mov	sp, r7
 8016b64:	bd80      	pop	{r7, pc}

08016b66 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016b66:	b580      	push	{r7, lr}
 8016b68:	b08c      	sub	sp, #48	; 0x30
 8016b6a:	af04      	add	r7, sp, #16
 8016b6c:	60f8      	str	r0, [r7, #12]
 8016b6e:	60b9      	str	r1, [r7, #8]
 8016b70:	603b      	str	r3, [r7, #0]
 8016b72:	4613      	mov	r3, r2
 8016b74:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016b76:	88fb      	ldrh	r3, [r7, #6]
 8016b78:	009b      	lsls	r3, r3, #2
 8016b7a:	4618      	mov	r0, r3
 8016b7c:	f001 fddc 	bl	8018738 <pvPortMalloc>
 8016b80:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016b82:	697b      	ldr	r3, [r7, #20]
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d00e      	beq.n	8016ba6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016b88:	20bc      	movs	r0, #188	; 0xbc
 8016b8a:	f001 fdd5 	bl	8018738 <pvPortMalloc>
 8016b8e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016b90:	69fb      	ldr	r3, [r7, #28]
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d003      	beq.n	8016b9e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016b96:	69fb      	ldr	r3, [r7, #28]
 8016b98:	697a      	ldr	r2, [r7, #20]
 8016b9a:	631a      	str	r2, [r3, #48]	; 0x30
 8016b9c:	e005      	b.n	8016baa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016b9e:	6978      	ldr	r0, [r7, #20]
 8016ba0:	f001 fe96 	bl	80188d0 <vPortFree>
 8016ba4:	e001      	b.n	8016baa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016ba6:	2300      	movs	r3, #0
 8016ba8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016baa:	69fb      	ldr	r3, [r7, #28]
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d017      	beq.n	8016be0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016bb0:	69fb      	ldr	r3, [r7, #28]
 8016bb2:	2200      	movs	r2, #0
 8016bb4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016bb8:	88fa      	ldrh	r2, [r7, #6]
 8016bba:	2300      	movs	r3, #0
 8016bbc:	9303      	str	r3, [sp, #12]
 8016bbe:	69fb      	ldr	r3, [r7, #28]
 8016bc0:	9302      	str	r3, [sp, #8]
 8016bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bc4:	9301      	str	r3, [sp, #4]
 8016bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bc8:	9300      	str	r3, [sp, #0]
 8016bca:	683b      	ldr	r3, [r7, #0]
 8016bcc:	68b9      	ldr	r1, [r7, #8]
 8016bce:	68f8      	ldr	r0, [r7, #12]
 8016bd0:	f000 f80e 	bl	8016bf0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016bd4:	69f8      	ldr	r0, [r7, #28]
 8016bd6:	f000 f8b1 	bl	8016d3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016bda:	2301      	movs	r3, #1
 8016bdc:	61bb      	str	r3, [r7, #24]
 8016bde:	e002      	b.n	8016be6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016be0:	f04f 33ff 	mov.w	r3, #4294967295
 8016be4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016be6:	69bb      	ldr	r3, [r7, #24]
	}
 8016be8:	4618      	mov	r0, r3
 8016bea:	3720      	adds	r7, #32
 8016bec:	46bd      	mov	sp, r7
 8016bee:	bd80      	pop	{r7, pc}

08016bf0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8016bf0:	b580      	push	{r7, lr}
 8016bf2:	b088      	sub	sp, #32
 8016bf4:	af00      	add	r7, sp, #0
 8016bf6:	60f8      	str	r0, [r7, #12]
 8016bf8:	60b9      	str	r1, [r7, #8]
 8016bfa:	607a      	str	r2, [r7, #4]
 8016bfc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8016bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c00:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	009b      	lsls	r3, r3, #2
 8016c06:	461a      	mov	r2, r3
 8016c08:	21a5      	movs	r1, #165	; 0xa5
 8016c0a:	f003 fdbf 	bl	801a78c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8016c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016c18:	3b01      	subs	r3, #1
 8016c1a:	009b      	lsls	r3, r3, #2
 8016c1c:	4413      	add	r3, r2
 8016c1e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8016c20:	69bb      	ldr	r3, [r7, #24]
 8016c22:	f023 0307 	bic.w	r3, r3, #7
 8016c26:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8016c28:	69bb      	ldr	r3, [r7, #24]
 8016c2a:	f003 0307 	and.w	r3, r3, #7
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d00a      	beq.n	8016c48 <prvInitialiseNewTask+0x58>
	__asm volatile
 8016c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c36:	f383 8811 	msr	BASEPRI, r3
 8016c3a:	f3bf 8f6f 	isb	sy
 8016c3e:	f3bf 8f4f 	dsb	sy
 8016c42:	617b      	str	r3, [r7, #20]
}
 8016c44:	bf00      	nop
 8016c46:	e7fe      	b.n	8016c46 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8016c48:	68bb      	ldr	r3, [r7, #8]
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d01f      	beq.n	8016c8e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016c4e:	2300      	movs	r3, #0
 8016c50:	61fb      	str	r3, [r7, #28]
 8016c52:	e012      	b.n	8016c7a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016c54:	68ba      	ldr	r2, [r7, #8]
 8016c56:	69fb      	ldr	r3, [r7, #28]
 8016c58:	4413      	add	r3, r2
 8016c5a:	7819      	ldrb	r1, [r3, #0]
 8016c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c5e:	69fb      	ldr	r3, [r7, #28]
 8016c60:	4413      	add	r3, r2
 8016c62:	3334      	adds	r3, #52	; 0x34
 8016c64:	460a      	mov	r2, r1
 8016c66:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016c68:	68ba      	ldr	r2, [r7, #8]
 8016c6a:	69fb      	ldr	r3, [r7, #28]
 8016c6c:	4413      	add	r3, r2
 8016c6e:	781b      	ldrb	r3, [r3, #0]
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d006      	beq.n	8016c82 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016c74:	69fb      	ldr	r3, [r7, #28]
 8016c76:	3301      	adds	r3, #1
 8016c78:	61fb      	str	r3, [r7, #28]
 8016c7a:	69fb      	ldr	r3, [r7, #28]
 8016c7c:	2b0f      	cmp	r3, #15
 8016c7e:	d9e9      	bls.n	8016c54 <prvInitialiseNewTask+0x64>
 8016c80:	e000      	b.n	8016c84 <prvInitialiseNewTask+0x94>
			{
				break;
 8016c82:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c86:	2200      	movs	r2, #0
 8016c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016c8c:	e003      	b.n	8016c96 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c90:	2200      	movs	r2, #0
 8016c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8016c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c98:	2b37      	cmp	r3, #55	; 0x37
 8016c9a:	d901      	bls.n	8016ca0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016c9c:	2337      	movs	r3, #55	; 0x37
 8016c9e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ca2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016ca4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8016ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ca8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016caa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8016cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cae:	2200      	movs	r2, #0
 8016cb0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cb4:	3304      	adds	r3, #4
 8016cb6:	4618      	mov	r0, r3
 8016cb8:	f7fe fe56 	bl	8015968 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cbe:	3318      	adds	r3, #24
 8016cc0:	4618      	mov	r0, r3
 8016cc2:	f7fe fe51 	bl	8015968 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016cca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cd4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8016cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016cda:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8016cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cde:	2200      	movs	r2, #0
 8016ce0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ce6:	2200      	movs	r2, #0
 8016ce8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8016cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cee:	3354      	adds	r3, #84	; 0x54
 8016cf0:	2260      	movs	r2, #96	; 0x60
 8016cf2:	2100      	movs	r1, #0
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	f003 fd49 	bl	801a78c <memset>
 8016cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cfc:	4a0c      	ldr	r2, [pc, #48]	; (8016d30 <prvInitialiseNewTask+0x140>)
 8016cfe:	659a      	str	r2, [r3, #88]	; 0x58
 8016d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d02:	4a0c      	ldr	r2, [pc, #48]	; (8016d34 <prvInitialiseNewTask+0x144>)
 8016d04:	65da      	str	r2, [r3, #92]	; 0x5c
 8016d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d08:	4a0b      	ldr	r2, [pc, #44]	; (8016d38 <prvInitialiseNewTask+0x148>)
 8016d0a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016d0c:	683a      	ldr	r2, [r7, #0]
 8016d0e:	68f9      	ldr	r1, [r7, #12]
 8016d10:	69b8      	ldr	r0, [r7, #24]
 8016d12:	f001 fac1 	bl	8018298 <pxPortInitialiseStack>
 8016d16:	4602      	mov	r2, r0
 8016d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d1a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8016d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d002      	beq.n	8016d28 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016d26:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016d28:	bf00      	nop
 8016d2a:	3720      	adds	r7, #32
 8016d2c:	46bd      	mov	sp, r7
 8016d2e:	bd80      	pop	{r7, pc}
 8016d30:	0802186c 	.word	0x0802186c
 8016d34:	0802188c 	.word	0x0802188c
 8016d38:	0802184c 	.word	0x0802184c

08016d3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016d3c:	b580      	push	{r7, lr}
 8016d3e:	b082      	sub	sp, #8
 8016d40:	af00      	add	r7, sp, #0
 8016d42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8016d44:	f001 fbd6 	bl	80184f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016d48:	4b2d      	ldr	r3, [pc, #180]	; (8016e00 <prvAddNewTaskToReadyList+0xc4>)
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	3301      	adds	r3, #1
 8016d4e:	4a2c      	ldr	r2, [pc, #176]	; (8016e00 <prvAddNewTaskToReadyList+0xc4>)
 8016d50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8016d52:	4b2c      	ldr	r3, [pc, #176]	; (8016e04 <prvAddNewTaskToReadyList+0xc8>)
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d109      	bne.n	8016d6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8016d5a:	4a2a      	ldr	r2, [pc, #168]	; (8016e04 <prvAddNewTaskToReadyList+0xc8>)
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016d60:	4b27      	ldr	r3, [pc, #156]	; (8016e00 <prvAddNewTaskToReadyList+0xc4>)
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	2b01      	cmp	r3, #1
 8016d66:	d110      	bne.n	8016d8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016d68:	f000 fc98 	bl	801769c <prvInitialiseTaskLists>
 8016d6c:	e00d      	b.n	8016d8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8016d6e:	4b26      	ldr	r3, [pc, #152]	; (8016e08 <prvAddNewTaskToReadyList+0xcc>)
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	d109      	bne.n	8016d8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8016d76:	4b23      	ldr	r3, [pc, #140]	; (8016e04 <prvAddNewTaskToReadyList+0xc8>)
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d80:	429a      	cmp	r2, r3
 8016d82:	d802      	bhi.n	8016d8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016d84:	4a1f      	ldr	r2, [pc, #124]	; (8016e04 <prvAddNewTaskToReadyList+0xc8>)
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8016d8a:	4b20      	ldr	r3, [pc, #128]	; (8016e0c <prvAddNewTaskToReadyList+0xd0>)
 8016d8c:	681b      	ldr	r3, [r3, #0]
 8016d8e:	3301      	adds	r3, #1
 8016d90:	4a1e      	ldr	r2, [pc, #120]	; (8016e0c <prvAddNewTaskToReadyList+0xd0>)
 8016d92:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8016d94:	4b1d      	ldr	r3, [pc, #116]	; (8016e0c <prvAddNewTaskToReadyList+0xd0>)
 8016d96:	681a      	ldr	r2, [r3, #0]
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016da0:	4b1b      	ldr	r3, [pc, #108]	; (8016e10 <prvAddNewTaskToReadyList+0xd4>)
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	429a      	cmp	r2, r3
 8016da6:	d903      	bls.n	8016db0 <prvAddNewTaskToReadyList+0x74>
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016dac:	4a18      	ldr	r2, [pc, #96]	; (8016e10 <prvAddNewTaskToReadyList+0xd4>)
 8016dae:	6013      	str	r3, [r2, #0]
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016db4:	4613      	mov	r3, r2
 8016db6:	009b      	lsls	r3, r3, #2
 8016db8:	4413      	add	r3, r2
 8016dba:	009b      	lsls	r3, r3, #2
 8016dbc:	4a15      	ldr	r2, [pc, #84]	; (8016e14 <prvAddNewTaskToReadyList+0xd8>)
 8016dbe:	441a      	add	r2, r3
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	3304      	adds	r3, #4
 8016dc4:	4619      	mov	r1, r3
 8016dc6:	4610      	mov	r0, r2
 8016dc8:	f7fe fddb 	bl	8015982 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016dcc:	f001 fbc2 	bl	8018554 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8016dd0:	4b0d      	ldr	r3, [pc, #52]	; (8016e08 <prvAddNewTaskToReadyList+0xcc>)
 8016dd2:	681b      	ldr	r3, [r3, #0]
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d00e      	beq.n	8016df6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016dd8:	4b0a      	ldr	r3, [pc, #40]	; (8016e04 <prvAddNewTaskToReadyList+0xc8>)
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016de2:	429a      	cmp	r2, r3
 8016de4:	d207      	bcs.n	8016df6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016de6:	4b0c      	ldr	r3, [pc, #48]	; (8016e18 <prvAddNewTaskToReadyList+0xdc>)
 8016de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016dec:	601a      	str	r2, [r3, #0]
 8016dee:	f3bf 8f4f 	dsb	sy
 8016df2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016df6:	bf00      	nop
 8016df8:	3708      	adds	r7, #8
 8016dfa:	46bd      	mov	sp, r7
 8016dfc:	bd80      	pop	{r7, pc}
 8016dfe:	bf00      	nop
 8016e00:	200014c8 	.word	0x200014c8
 8016e04:	20000ff4 	.word	0x20000ff4
 8016e08:	200014d4 	.word	0x200014d4
 8016e0c:	200014e4 	.word	0x200014e4
 8016e10:	200014d0 	.word	0x200014d0
 8016e14:	20000ff8 	.word	0x20000ff8
 8016e18:	e000ed04 	.word	0xe000ed04

08016e1c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8016e1c:	b580      	push	{r7, lr}
 8016e1e:	b084      	sub	sp, #16
 8016e20:	af00      	add	r7, sp, #0
 8016e22:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8016e24:	f001 fb66 	bl	80184f4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d102      	bne.n	8016e34 <vTaskDelete+0x18>
 8016e2e:	4b2c      	ldr	r3, [pc, #176]	; (8016ee0 <vTaskDelete+0xc4>)
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	e000      	b.n	8016e36 <vTaskDelete+0x1a>
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016e38:	68fb      	ldr	r3, [r7, #12]
 8016e3a:	3304      	adds	r3, #4
 8016e3c:	4618      	mov	r0, r3
 8016e3e:	f7fe fdfd 	bl	8015a3c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016e42:	68fb      	ldr	r3, [r7, #12]
 8016e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d004      	beq.n	8016e54 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016e4a:	68fb      	ldr	r3, [r7, #12]
 8016e4c:	3318      	adds	r3, #24
 8016e4e:	4618      	mov	r0, r3
 8016e50:	f7fe fdf4 	bl	8015a3c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8016e54:	4b23      	ldr	r3, [pc, #140]	; (8016ee4 <vTaskDelete+0xc8>)
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	3301      	adds	r3, #1
 8016e5a:	4a22      	ldr	r2, [pc, #136]	; (8016ee4 <vTaskDelete+0xc8>)
 8016e5c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8016e5e:	4b20      	ldr	r3, [pc, #128]	; (8016ee0 <vTaskDelete+0xc4>)
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	68fa      	ldr	r2, [r7, #12]
 8016e64:	429a      	cmp	r2, r3
 8016e66:	d10b      	bne.n	8016e80 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8016e68:	68fb      	ldr	r3, [r7, #12]
 8016e6a:	3304      	adds	r3, #4
 8016e6c:	4619      	mov	r1, r3
 8016e6e:	481e      	ldr	r0, [pc, #120]	; (8016ee8 <vTaskDelete+0xcc>)
 8016e70:	f7fe fd87 	bl	8015982 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8016e74:	4b1d      	ldr	r3, [pc, #116]	; (8016eec <vTaskDelete+0xd0>)
 8016e76:	681b      	ldr	r3, [r3, #0]
 8016e78:	3301      	adds	r3, #1
 8016e7a:	4a1c      	ldr	r2, [pc, #112]	; (8016eec <vTaskDelete+0xd0>)
 8016e7c:	6013      	str	r3, [r2, #0]
 8016e7e:	e009      	b.n	8016e94 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8016e80:	4b1b      	ldr	r3, [pc, #108]	; (8016ef0 <vTaskDelete+0xd4>)
 8016e82:	681b      	ldr	r3, [r3, #0]
 8016e84:	3b01      	subs	r3, #1
 8016e86:	4a1a      	ldr	r2, [pc, #104]	; (8016ef0 <vTaskDelete+0xd4>)
 8016e88:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8016e8a:	68f8      	ldr	r0, [r7, #12]
 8016e8c:	f000 fc74 	bl	8017778 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8016e90:	f000 fca6 	bl	80177e0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8016e94:	f001 fb5e 	bl	8018554 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8016e98:	4b16      	ldr	r3, [pc, #88]	; (8016ef4 <vTaskDelete+0xd8>)
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d01b      	beq.n	8016ed8 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8016ea0:	4b0f      	ldr	r3, [pc, #60]	; (8016ee0 <vTaskDelete+0xc4>)
 8016ea2:	681b      	ldr	r3, [r3, #0]
 8016ea4:	68fa      	ldr	r2, [r7, #12]
 8016ea6:	429a      	cmp	r2, r3
 8016ea8:	d116      	bne.n	8016ed8 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8016eaa:	4b13      	ldr	r3, [pc, #76]	; (8016ef8 <vTaskDelete+0xdc>)
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d00a      	beq.n	8016ec8 <vTaskDelete+0xac>
	__asm volatile
 8016eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016eb6:	f383 8811 	msr	BASEPRI, r3
 8016eba:	f3bf 8f6f 	isb	sy
 8016ebe:	f3bf 8f4f 	dsb	sy
 8016ec2:	60bb      	str	r3, [r7, #8]
}
 8016ec4:	bf00      	nop
 8016ec6:	e7fe      	b.n	8016ec6 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8016ec8:	4b0c      	ldr	r3, [pc, #48]	; (8016efc <vTaskDelete+0xe0>)
 8016eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016ece:	601a      	str	r2, [r3, #0]
 8016ed0:	f3bf 8f4f 	dsb	sy
 8016ed4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8016ed8:	bf00      	nop
 8016eda:	3710      	adds	r7, #16
 8016edc:	46bd      	mov	sp, r7
 8016ede:	bd80      	pop	{r7, pc}
 8016ee0:	20000ff4 	.word	0x20000ff4
 8016ee4:	200014e4 	.word	0x200014e4
 8016ee8:	2000149c 	.word	0x2000149c
 8016eec:	200014b0 	.word	0x200014b0
 8016ef0:	200014c8 	.word	0x200014c8
 8016ef4:	200014d4 	.word	0x200014d4
 8016ef8:	200014f0 	.word	0x200014f0
 8016efc:	e000ed04 	.word	0xe000ed04

08016f00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8016f00:	b580      	push	{r7, lr}
 8016f02:	b084      	sub	sp, #16
 8016f04:	af00      	add	r7, sp, #0
 8016f06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8016f08:	2300      	movs	r3, #0
 8016f0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d017      	beq.n	8016f42 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8016f12:	4b13      	ldr	r3, [pc, #76]	; (8016f60 <vTaskDelay+0x60>)
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d00a      	beq.n	8016f30 <vTaskDelay+0x30>
	__asm volatile
 8016f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f1e:	f383 8811 	msr	BASEPRI, r3
 8016f22:	f3bf 8f6f 	isb	sy
 8016f26:	f3bf 8f4f 	dsb	sy
 8016f2a:	60bb      	str	r3, [r7, #8]
}
 8016f2c:	bf00      	nop
 8016f2e:	e7fe      	b.n	8016f2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8016f30:	f000 f88a 	bl	8017048 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8016f34:	2100      	movs	r1, #0
 8016f36:	6878      	ldr	r0, [r7, #4]
 8016f38:	f000 fe0c 	bl	8017b54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8016f3c:	f000 f892 	bl	8017064 <xTaskResumeAll>
 8016f40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016f42:	68fb      	ldr	r3, [r7, #12]
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d107      	bne.n	8016f58 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8016f48:	4b06      	ldr	r3, [pc, #24]	; (8016f64 <vTaskDelay+0x64>)
 8016f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016f4e:	601a      	str	r2, [r3, #0]
 8016f50:	f3bf 8f4f 	dsb	sy
 8016f54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016f58:	bf00      	nop
 8016f5a:	3710      	adds	r7, #16
 8016f5c:	46bd      	mov	sp, r7
 8016f5e:	bd80      	pop	{r7, pc}
 8016f60:	200014f0 	.word	0x200014f0
 8016f64:	e000ed04 	.word	0xe000ed04

08016f68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016f68:	b580      	push	{r7, lr}
 8016f6a:	b08a      	sub	sp, #40	; 0x28
 8016f6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016f6e:	2300      	movs	r3, #0
 8016f70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016f72:	2300      	movs	r3, #0
 8016f74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016f76:	463a      	mov	r2, r7
 8016f78:	1d39      	adds	r1, r7, #4
 8016f7a:	f107 0308 	add.w	r3, r7, #8
 8016f7e:	4618      	mov	r0, r3
 8016f80:	f7fe fc9e 	bl	80158c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016f84:	6839      	ldr	r1, [r7, #0]
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	68ba      	ldr	r2, [r7, #8]
 8016f8a:	9202      	str	r2, [sp, #8]
 8016f8c:	9301      	str	r3, [sp, #4]
 8016f8e:	2300      	movs	r3, #0
 8016f90:	9300      	str	r3, [sp, #0]
 8016f92:	2300      	movs	r3, #0
 8016f94:	460a      	mov	r2, r1
 8016f96:	4924      	ldr	r1, [pc, #144]	; (8017028 <vTaskStartScheduler+0xc0>)
 8016f98:	4824      	ldr	r0, [pc, #144]	; (801702c <vTaskStartScheduler+0xc4>)
 8016f9a:	f7ff fd87 	bl	8016aac <xTaskCreateStatic>
 8016f9e:	4603      	mov	r3, r0
 8016fa0:	4a23      	ldr	r2, [pc, #140]	; (8017030 <vTaskStartScheduler+0xc8>)
 8016fa2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016fa4:	4b22      	ldr	r3, [pc, #136]	; (8017030 <vTaskStartScheduler+0xc8>)
 8016fa6:	681b      	ldr	r3, [r3, #0]
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d002      	beq.n	8016fb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016fac:	2301      	movs	r3, #1
 8016fae:	617b      	str	r3, [r7, #20]
 8016fb0:	e001      	b.n	8016fb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8016fb2:	2300      	movs	r3, #0
 8016fb4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8016fb6:	697b      	ldr	r3, [r7, #20]
 8016fb8:	2b01      	cmp	r3, #1
 8016fba:	d102      	bne.n	8016fc2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8016fbc:	f000 fe1e 	bl	8017bfc <xTimerCreateTimerTask>
 8016fc0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8016fc2:	697b      	ldr	r3, [r7, #20]
 8016fc4:	2b01      	cmp	r3, #1
 8016fc6:	d11b      	bne.n	8017000 <vTaskStartScheduler+0x98>
	__asm volatile
 8016fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fcc:	f383 8811 	msr	BASEPRI, r3
 8016fd0:	f3bf 8f6f 	isb	sy
 8016fd4:	f3bf 8f4f 	dsb	sy
 8016fd8:	613b      	str	r3, [r7, #16]
}
 8016fda:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016fdc:	4b15      	ldr	r3, [pc, #84]	; (8017034 <vTaskStartScheduler+0xcc>)
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	3354      	adds	r3, #84	; 0x54
 8016fe2:	4a15      	ldr	r2, [pc, #84]	; (8017038 <vTaskStartScheduler+0xd0>)
 8016fe4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8016fe6:	4b15      	ldr	r3, [pc, #84]	; (801703c <vTaskStartScheduler+0xd4>)
 8016fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8016fec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8016fee:	4b14      	ldr	r3, [pc, #80]	; (8017040 <vTaskStartScheduler+0xd8>)
 8016ff0:	2201      	movs	r2, #1
 8016ff2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8016ff4:	4b13      	ldr	r3, [pc, #76]	; (8017044 <vTaskStartScheduler+0xdc>)
 8016ff6:	2200      	movs	r2, #0
 8016ff8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8016ffa:	f001 f9d9 	bl	80183b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8016ffe:	e00e      	b.n	801701e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8017000:	697b      	ldr	r3, [r7, #20]
 8017002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017006:	d10a      	bne.n	801701e <vTaskStartScheduler+0xb6>
	__asm volatile
 8017008:	f04f 0350 	mov.w	r3, #80	; 0x50
 801700c:	f383 8811 	msr	BASEPRI, r3
 8017010:	f3bf 8f6f 	isb	sy
 8017014:	f3bf 8f4f 	dsb	sy
 8017018:	60fb      	str	r3, [r7, #12]
}
 801701a:	bf00      	nop
 801701c:	e7fe      	b.n	801701c <vTaskStartScheduler+0xb4>
}
 801701e:	bf00      	nop
 8017020:	3718      	adds	r7, #24
 8017022:	46bd      	mov	sp, r7
 8017024:	bd80      	pop	{r7, pc}
 8017026:	bf00      	nop
 8017028:	080214ac 	.word	0x080214ac
 801702c:	0801766d 	.word	0x0801766d
 8017030:	200014ec 	.word	0x200014ec
 8017034:	20000ff4 	.word	0x20000ff4
 8017038:	200001f8 	.word	0x200001f8
 801703c:	200014e8 	.word	0x200014e8
 8017040:	200014d4 	.word	0x200014d4
 8017044:	200014cc 	.word	0x200014cc

08017048 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8017048:	b480      	push	{r7}
 801704a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801704c:	4b04      	ldr	r3, [pc, #16]	; (8017060 <vTaskSuspendAll+0x18>)
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	3301      	adds	r3, #1
 8017052:	4a03      	ldr	r2, [pc, #12]	; (8017060 <vTaskSuspendAll+0x18>)
 8017054:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8017056:	bf00      	nop
 8017058:	46bd      	mov	sp, r7
 801705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801705e:	4770      	bx	lr
 8017060:	200014f0 	.word	0x200014f0

08017064 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017064:	b580      	push	{r7, lr}
 8017066:	b084      	sub	sp, #16
 8017068:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801706a:	2300      	movs	r3, #0
 801706c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801706e:	2300      	movs	r3, #0
 8017070:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8017072:	4b42      	ldr	r3, [pc, #264]	; (801717c <xTaskResumeAll+0x118>)
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	2b00      	cmp	r3, #0
 8017078:	d10a      	bne.n	8017090 <xTaskResumeAll+0x2c>
	__asm volatile
 801707a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801707e:	f383 8811 	msr	BASEPRI, r3
 8017082:	f3bf 8f6f 	isb	sy
 8017086:	f3bf 8f4f 	dsb	sy
 801708a:	603b      	str	r3, [r7, #0]
}
 801708c:	bf00      	nop
 801708e:	e7fe      	b.n	801708e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8017090:	f001 fa30 	bl	80184f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8017094:	4b39      	ldr	r3, [pc, #228]	; (801717c <xTaskResumeAll+0x118>)
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	3b01      	subs	r3, #1
 801709a:	4a38      	ldr	r2, [pc, #224]	; (801717c <xTaskResumeAll+0x118>)
 801709c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801709e:	4b37      	ldr	r3, [pc, #220]	; (801717c <xTaskResumeAll+0x118>)
 80170a0:	681b      	ldr	r3, [r3, #0]
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d162      	bne.n	801716c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80170a6:	4b36      	ldr	r3, [pc, #216]	; (8017180 <xTaskResumeAll+0x11c>)
 80170a8:	681b      	ldr	r3, [r3, #0]
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d05e      	beq.n	801716c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80170ae:	e02f      	b.n	8017110 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80170b0:	4b34      	ldr	r3, [pc, #208]	; (8017184 <xTaskResumeAll+0x120>)
 80170b2:	68db      	ldr	r3, [r3, #12]
 80170b4:	68db      	ldr	r3, [r3, #12]
 80170b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	3318      	adds	r3, #24
 80170bc:	4618      	mov	r0, r3
 80170be:	f7fe fcbd 	bl	8015a3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80170c2:	68fb      	ldr	r3, [r7, #12]
 80170c4:	3304      	adds	r3, #4
 80170c6:	4618      	mov	r0, r3
 80170c8:	f7fe fcb8 	bl	8015a3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80170cc:	68fb      	ldr	r3, [r7, #12]
 80170ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170d0:	4b2d      	ldr	r3, [pc, #180]	; (8017188 <xTaskResumeAll+0x124>)
 80170d2:	681b      	ldr	r3, [r3, #0]
 80170d4:	429a      	cmp	r2, r3
 80170d6:	d903      	bls.n	80170e0 <xTaskResumeAll+0x7c>
 80170d8:	68fb      	ldr	r3, [r7, #12]
 80170da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170dc:	4a2a      	ldr	r2, [pc, #168]	; (8017188 <xTaskResumeAll+0x124>)
 80170de:	6013      	str	r3, [r2, #0]
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170e4:	4613      	mov	r3, r2
 80170e6:	009b      	lsls	r3, r3, #2
 80170e8:	4413      	add	r3, r2
 80170ea:	009b      	lsls	r3, r3, #2
 80170ec:	4a27      	ldr	r2, [pc, #156]	; (801718c <xTaskResumeAll+0x128>)
 80170ee:	441a      	add	r2, r3
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	3304      	adds	r3, #4
 80170f4:	4619      	mov	r1, r3
 80170f6:	4610      	mov	r0, r2
 80170f8:	f7fe fc43 	bl	8015982 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80170fc:	68fb      	ldr	r3, [r7, #12]
 80170fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017100:	4b23      	ldr	r3, [pc, #140]	; (8017190 <xTaskResumeAll+0x12c>)
 8017102:	681b      	ldr	r3, [r3, #0]
 8017104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017106:	429a      	cmp	r2, r3
 8017108:	d302      	bcc.n	8017110 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801710a:	4b22      	ldr	r3, [pc, #136]	; (8017194 <xTaskResumeAll+0x130>)
 801710c:	2201      	movs	r2, #1
 801710e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017110:	4b1c      	ldr	r3, [pc, #112]	; (8017184 <xTaskResumeAll+0x120>)
 8017112:	681b      	ldr	r3, [r3, #0]
 8017114:	2b00      	cmp	r3, #0
 8017116:	d1cb      	bne.n	80170b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	2b00      	cmp	r3, #0
 801711c:	d001      	beq.n	8017122 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801711e:	f000 fb5f 	bl	80177e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8017122:	4b1d      	ldr	r3, [pc, #116]	; (8017198 <xTaskResumeAll+0x134>)
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	2b00      	cmp	r3, #0
 801712c:	d010      	beq.n	8017150 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801712e:	f000 f847 	bl	80171c0 <xTaskIncrementTick>
 8017132:	4603      	mov	r3, r0
 8017134:	2b00      	cmp	r3, #0
 8017136:	d002      	beq.n	801713e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8017138:	4b16      	ldr	r3, [pc, #88]	; (8017194 <xTaskResumeAll+0x130>)
 801713a:	2201      	movs	r2, #1
 801713c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	3b01      	subs	r3, #1
 8017142:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	2b00      	cmp	r3, #0
 8017148:	d1f1      	bne.n	801712e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801714a:	4b13      	ldr	r3, [pc, #76]	; (8017198 <xTaskResumeAll+0x134>)
 801714c:	2200      	movs	r2, #0
 801714e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8017150:	4b10      	ldr	r3, [pc, #64]	; (8017194 <xTaskResumeAll+0x130>)
 8017152:	681b      	ldr	r3, [r3, #0]
 8017154:	2b00      	cmp	r3, #0
 8017156:	d009      	beq.n	801716c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8017158:	2301      	movs	r3, #1
 801715a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801715c:	4b0f      	ldr	r3, [pc, #60]	; (801719c <xTaskResumeAll+0x138>)
 801715e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017162:	601a      	str	r2, [r3, #0]
 8017164:	f3bf 8f4f 	dsb	sy
 8017168:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801716c:	f001 f9f2 	bl	8018554 <vPortExitCritical>

	return xAlreadyYielded;
 8017170:	68bb      	ldr	r3, [r7, #8]
}
 8017172:	4618      	mov	r0, r3
 8017174:	3710      	adds	r7, #16
 8017176:	46bd      	mov	sp, r7
 8017178:	bd80      	pop	{r7, pc}
 801717a:	bf00      	nop
 801717c:	200014f0 	.word	0x200014f0
 8017180:	200014c8 	.word	0x200014c8
 8017184:	20001488 	.word	0x20001488
 8017188:	200014d0 	.word	0x200014d0
 801718c:	20000ff8 	.word	0x20000ff8
 8017190:	20000ff4 	.word	0x20000ff4
 8017194:	200014dc 	.word	0x200014dc
 8017198:	200014d8 	.word	0x200014d8
 801719c:	e000ed04 	.word	0xe000ed04

080171a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80171a0:	b480      	push	{r7}
 80171a2:	b083      	sub	sp, #12
 80171a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80171a6:	4b05      	ldr	r3, [pc, #20]	; (80171bc <xTaskGetTickCount+0x1c>)
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80171ac:	687b      	ldr	r3, [r7, #4]
}
 80171ae:	4618      	mov	r0, r3
 80171b0:	370c      	adds	r7, #12
 80171b2:	46bd      	mov	sp, r7
 80171b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171b8:	4770      	bx	lr
 80171ba:	bf00      	nop
 80171bc:	200014cc 	.word	0x200014cc

080171c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80171c0:	b580      	push	{r7, lr}
 80171c2:	b086      	sub	sp, #24
 80171c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80171c6:	2300      	movs	r3, #0
 80171c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80171ca:	4b4f      	ldr	r3, [pc, #316]	; (8017308 <xTaskIncrementTick+0x148>)
 80171cc:	681b      	ldr	r3, [r3, #0]
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	f040 808f 	bne.w	80172f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80171d4:	4b4d      	ldr	r3, [pc, #308]	; (801730c <xTaskIncrementTick+0x14c>)
 80171d6:	681b      	ldr	r3, [r3, #0]
 80171d8:	3301      	adds	r3, #1
 80171da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80171dc:	4a4b      	ldr	r2, [pc, #300]	; (801730c <xTaskIncrementTick+0x14c>)
 80171de:	693b      	ldr	r3, [r7, #16]
 80171e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80171e2:	693b      	ldr	r3, [r7, #16]
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d120      	bne.n	801722a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80171e8:	4b49      	ldr	r3, [pc, #292]	; (8017310 <xTaskIncrementTick+0x150>)
 80171ea:	681b      	ldr	r3, [r3, #0]
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d00a      	beq.n	8017208 <xTaskIncrementTick+0x48>
	__asm volatile
 80171f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171f6:	f383 8811 	msr	BASEPRI, r3
 80171fa:	f3bf 8f6f 	isb	sy
 80171fe:	f3bf 8f4f 	dsb	sy
 8017202:	603b      	str	r3, [r7, #0]
}
 8017204:	bf00      	nop
 8017206:	e7fe      	b.n	8017206 <xTaskIncrementTick+0x46>
 8017208:	4b41      	ldr	r3, [pc, #260]	; (8017310 <xTaskIncrementTick+0x150>)
 801720a:	681b      	ldr	r3, [r3, #0]
 801720c:	60fb      	str	r3, [r7, #12]
 801720e:	4b41      	ldr	r3, [pc, #260]	; (8017314 <xTaskIncrementTick+0x154>)
 8017210:	681b      	ldr	r3, [r3, #0]
 8017212:	4a3f      	ldr	r2, [pc, #252]	; (8017310 <xTaskIncrementTick+0x150>)
 8017214:	6013      	str	r3, [r2, #0]
 8017216:	4a3f      	ldr	r2, [pc, #252]	; (8017314 <xTaskIncrementTick+0x154>)
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	6013      	str	r3, [r2, #0]
 801721c:	4b3e      	ldr	r3, [pc, #248]	; (8017318 <xTaskIncrementTick+0x158>)
 801721e:	681b      	ldr	r3, [r3, #0]
 8017220:	3301      	adds	r3, #1
 8017222:	4a3d      	ldr	r2, [pc, #244]	; (8017318 <xTaskIncrementTick+0x158>)
 8017224:	6013      	str	r3, [r2, #0]
 8017226:	f000 fadb 	bl	80177e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801722a:	4b3c      	ldr	r3, [pc, #240]	; (801731c <xTaskIncrementTick+0x15c>)
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	693a      	ldr	r2, [r7, #16]
 8017230:	429a      	cmp	r2, r3
 8017232:	d349      	bcc.n	80172c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017234:	4b36      	ldr	r3, [pc, #216]	; (8017310 <xTaskIncrementTick+0x150>)
 8017236:	681b      	ldr	r3, [r3, #0]
 8017238:	681b      	ldr	r3, [r3, #0]
 801723a:	2b00      	cmp	r3, #0
 801723c:	d104      	bne.n	8017248 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801723e:	4b37      	ldr	r3, [pc, #220]	; (801731c <xTaskIncrementTick+0x15c>)
 8017240:	f04f 32ff 	mov.w	r2, #4294967295
 8017244:	601a      	str	r2, [r3, #0]
					break;
 8017246:	e03f      	b.n	80172c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017248:	4b31      	ldr	r3, [pc, #196]	; (8017310 <xTaskIncrementTick+0x150>)
 801724a:	681b      	ldr	r3, [r3, #0]
 801724c:	68db      	ldr	r3, [r3, #12]
 801724e:	68db      	ldr	r3, [r3, #12]
 8017250:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017252:	68bb      	ldr	r3, [r7, #8]
 8017254:	685b      	ldr	r3, [r3, #4]
 8017256:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8017258:	693a      	ldr	r2, [r7, #16]
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	429a      	cmp	r2, r3
 801725e:	d203      	bcs.n	8017268 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8017260:	4a2e      	ldr	r2, [pc, #184]	; (801731c <xTaskIncrementTick+0x15c>)
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8017266:	e02f      	b.n	80172c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017268:	68bb      	ldr	r3, [r7, #8]
 801726a:	3304      	adds	r3, #4
 801726c:	4618      	mov	r0, r3
 801726e:	f7fe fbe5 	bl	8015a3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017272:	68bb      	ldr	r3, [r7, #8]
 8017274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017276:	2b00      	cmp	r3, #0
 8017278:	d004      	beq.n	8017284 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801727a:	68bb      	ldr	r3, [r7, #8]
 801727c:	3318      	adds	r3, #24
 801727e:	4618      	mov	r0, r3
 8017280:	f7fe fbdc 	bl	8015a3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8017284:	68bb      	ldr	r3, [r7, #8]
 8017286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017288:	4b25      	ldr	r3, [pc, #148]	; (8017320 <xTaskIncrementTick+0x160>)
 801728a:	681b      	ldr	r3, [r3, #0]
 801728c:	429a      	cmp	r2, r3
 801728e:	d903      	bls.n	8017298 <xTaskIncrementTick+0xd8>
 8017290:	68bb      	ldr	r3, [r7, #8]
 8017292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017294:	4a22      	ldr	r2, [pc, #136]	; (8017320 <xTaskIncrementTick+0x160>)
 8017296:	6013      	str	r3, [r2, #0]
 8017298:	68bb      	ldr	r3, [r7, #8]
 801729a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801729c:	4613      	mov	r3, r2
 801729e:	009b      	lsls	r3, r3, #2
 80172a0:	4413      	add	r3, r2
 80172a2:	009b      	lsls	r3, r3, #2
 80172a4:	4a1f      	ldr	r2, [pc, #124]	; (8017324 <xTaskIncrementTick+0x164>)
 80172a6:	441a      	add	r2, r3
 80172a8:	68bb      	ldr	r3, [r7, #8]
 80172aa:	3304      	adds	r3, #4
 80172ac:	4619      	mov	r1, r3
 80172ae:	4610      	mov	r0, r2
 80172b0:	f7fe fb67 	bl	8015982 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80172b4:	68bb      	ldr	r3, [r7, #8]
 80172b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80172b8:	4b1b      	ldr	r3, [pc, #108]	; (8017328 <xTaskIncrementTick+0x168>)
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80172be:	429a      	cmp	r2, r3
 80172c0:	d3b8      	bcc.n	8017234 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80172c2:	2301      	movs	r3, #1
 80172c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80172c6:	e7b5      	b.n	8017234 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80172c8:	4b17      	ldr	r3, [pc, #92]	; (8017328 <xTaskIncrementTick+0x168>)
 80172ca:	681b      	ldr	r3, [r3, #0]
 80172cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80172ce:	4915      	ldr	r1, [pc, #84]	; (8017324 <xTaskIncrementTick+0x164>)
 80172d0:	4613      	mov	r3, r2
 80172d2:	009b      	lsls	r3, r3, #2
 80172d4:	4413      	add	r3, r2
 80172d6:	009b      	lsls	r3, r3, #2
 80172d8:	440b      	add	r3, r1
 80172da:	681b      	ldr	r3, [r3, #0]
 80172dc:	2b01      	cmp	r3, #1
 80172de:	d901      	bls.n	80172e4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80172e0:	2301      	movs	r3, #1
 80172e2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80172e4:	4b11      	ldr	r3, [pc, #68]	; (801732c <xTaskIncrementTick+0x16c>)
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d007      	beq.n	80172fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80172ec:	2301      	movs	r3, #1
 80172ee:	617b      	str	r3, [r7, #20]
 80172f0:	e004      	b.n	80172fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80172f2:	4b0f      	ldr	r3, [pc, #60]	; (8017330 <xTaskIncrementTick+0x170>)
 80172f4:	681b      	ldr	r3, [r3, #0]
 80172f6:	3301      	adds	r3, #1
 80172f8:	4a0d      	ldr	r2, [pc, #52]	; (8017330 <xTaskIncrementTick+0x170>)
 80172fa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80172fc:	697b      	ldr	r3, [r7, #20]
}
 80172fe:	4618      	mov	r0, r3
 8017300:	3718      	adds	r7, #24
 8017302:	46bd      	mov	sp, r7
 8017304:	bd80      	pop	{r7, pc}
 8017306:	bf00      	nop
 8017308:	200014f0 	.word	0x200014f0
 801730c:	200014cc 	.word	0x200014cc
 8017310:	20001480 	.word	0x20001480
 8017314:	20001484 	.word	0x20001484
 8017318:	200014e0 	.word	0x200014e0
 801731c:	200014e8 	.word	0x200014e8
 8017320:	200014d0 	.word	0x200014d0
 8017324:	20000ff8 	.word	0x20000ff8
 8017328:	20000ff4 	.word	0x20000ff4
 801732c:	200014dc 	.word	0x200014dc
 8017330:	200014d8 	.word	0x200014d8

08017334 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017334:	b480      	push	{r7}
 8017336:	b085      	sub	sp, #20
 8017338:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801733a:	4b2a      	ldr	r3, [pc, #168]	; (80173e4 <vTaskSwitchContext+0xb0>)
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	2b00      	cmp	r3, #0
 8017340:	d003      	beq.n	801734a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017342:	4b29      	ldr	r3, [pc, #164]	; (80173e8 <vTaskSwitchContext+0xb4>)
 8017344:	2201      	movs	r2, #1
 8017346:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017348:	e046      	b.n	80173d8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 801734a:	4b27      	ldr	r3, [pc, #156]	; (80173e8 <vTaskSwitchContext+0xb4>)
 801734c:	2200      	movs	r2, #0
 801734e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017350:	4b26      	ldr	r3, [pc, #152]	; (80173ec <vTaskSwitchContext+0xb8>)
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	60fb      	str	r3, [r7, #12]
 8017356:	e010      	b.n	801737a <vTaskSwitchContext+0x46>
 8017358:	68fb      	ldr	r3, [r7, #12]
 801735a:	2b00      	cmp	r3, #0
 801735c:	d10a      	bne.n	8017374 <vTaskSwitchContext+0x40>
	__asm volatile
 801735e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017362:	f383 8811 	msr	BASEPRI, r3
 8017366:	f3bf 8f6f 	isb	sy
 801736a:	f3bf 8f4f 	dsb	sy
 801736e:	607b      	str	r3, [r7, #4]
}
 8017370:	bf00      	nop
 8017372:	e7fe      	b.n	8017372 <vTaskSwitchContext+0x3e>
 8017374:	68fb      	ldr	r3, [r7, #12]
 8017376:	3b01      	subs	r3, #1
 8017378:	60fb      	str	r3, [r7, #12]
 801737a:	491d      	ldr	r1, [pc, #116]	; (80173f0 <vTaskSwitchContext+0xbc>)
 801737c:	68fa      	ldr	r2, [r7, #12]
 801737e:	4613      	mov	r3, r2
 8017380:	009b      	lsls	r3, r3, #2
 8017382:	4413      	add	r3, r2
 8017384:	009b      	lsls	r3, r3, #2
 8017386:	440b      	add	r3, r1
 8017388:	681b      	ldr	r3, [r3, #0]
 801738a:	2b00      	cmp	r3, #0
 801738c:	d0e4      	beq.n	8017358 <vTaskSwitchContext+0x24>
 801738e:	68fa      	ldr	r2, [r7, #12]
 8017390:	4613      	mov	r3, r2
 8017392:	009b      	lsls	r3, r3, #2
 8017394:	4413      	add	r3, r2
 8017396:	009b      	lsls	r3, r3, #2
 8017398:	4a15      	ldr	r2, [pc, #84]	; (80173f0 <vTaskSwitchContext+0xbc>)
 801739a:	4413      	add	r3, r2
 801739c:	60bb      	str	r3, [r7, #8]
 801739e:	68bb      	ldr	r3, [r7, #8]
 80173a0:	685b      	ldr	r3, [r3, #4]
 80173a2:	685a      	ldr	r2, [r3, #4]
 80173a4:	68bb      	ldr	r3, [r7, #8]
 80173a6:	605a      	str	r2, [r3, #4]
 80173a8:	68bb      	ldr	r3, [r7, #8]
 80173aa:	685a      	ldr	r2, [r3, #4]
 80173ac:	68bb      	ldr	r3, [r7, #8]
 80173ae:	3308      	adds	r3, #8
 80173b0:	429a      	cmp	r2, r3
 80173b2:	d104      	bne.n	80173be <vTaskSwitchContext+0x8a>
 80173b4:	68bb      	ldr	r3, [r7, #8]
 80173b6:	685b      	ldr	r3, [r3, #4]
 80173b8:	685a      	ldr	r2, [r3, #4]
 80173ba:	68bb      	ldr	r3, [r7, #8]
 80173bc:	605a      	str	r2, [r3, #4]
 80173be:	68bb      	ldr	r3, [r7, #8]
 80173c0:	685b      	ldr	r3, [r3, #4]
 80173c2:	68db      	ldr	r3, [r3, #12]
 80173c4:	4a0b      	ldr	r2, [pc, #44]	; (80173f4 <vTaskSwitchContext+0xc0>)
 80173c6:	6013      	str	r3, [r2, #0]
 80173c8:	4a08      	ldr	r2, [pc, #32]	; (80173ec <vTaskSwitchContext+0xb8>)
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80173ce:	4b09      	ldr	r3, [pc, #36]	; (80173f4 <vTaskSwitchContext+0xc0>)
 80173d0:	681b      	ldr	r3, [r3, #0]
 80173d2:	3354      	adds	r3, #84	; 0x54
 80173d4:	4a08      	ldr	r2, [pc, #32]	; (80173f8 <vTaskSwitchContext+0xc4>)
 80173d6:	6013      	str	r3, [r2, #0]
}
 80173d8:	bf00      	nop
 80173da:	3714      	adds	r7, #20
 80173dc:	46bd      	mov	sp, r7
 80173de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173e2:	4770      	bx	lr
 80173e4:	200014f0 	.word	0x200014f0
 80173e8:	200014dc 	.word	0x200014dc
 80173ec:	200014d0 	.word	0x200014d0
 80173f0:	20000ff8 	.word	0x20000ff8
 80173f4:	20000ff4 	.word	0x20000ff4
 80173f8:	200001f8 	.word	0x200001f8

080173fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80173fc:	b580      	push	{r7, lr}
 80173fe:	b084      	sub	sp, #16
 8017400:	af00      	add	r7, sp, #0
 8017402:	6078      	str	r0, [r7, #4]
 8017404:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	2b00      	cmp	r3, #0
 801740a:	d10a      	bne.n	8017422 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801740c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017410:	f383 8811 	msr	BASEPRI, r3
 8017414:	f3bf 8f6f 	isb	sy
 8017418:	f3bf 8f4f 	dsb	sy
 801741c:	60fb      	str	r3, [r7, #12]
}
 801741e:	bf00      	nop
 8017420:	e7fe      	b.n	8017420 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017422:	4b07      	ldr	r3, [pc, #28]	; (8017440 <vTaskPlaceOnEventList+0x44>)
 8017424:	681b      	ldr	r3, [r3, #0]
 8017426:	3318      	adds	r3, #24
 8017428:	4619      	mov	r1, r3
 801742a:	6878      	ldr	r0, [r7, #4]
 801742c:	f7fe facd 	bl	80159ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017430:	2101      	movs	r1, #1
 8017432:	6838      	ldr	r0, [r7, #0]
 8017434:	f000 fb8e 	bl	8017b54 <prvAddCurrentTaskToDelayedList>
}
 8017438:	bf00      	nop
 801743a:	3710      	adds	r7, #16
 801743c:	46bd      	mov	sp, r7
 801743e:	bd80      	pop	{r7, pc}
 8017440:	20000ff4 	.word	0x20000ff4

08017444 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017444:	b580      	push	{r7, lr}
 8017446:	b086      	sub	sp, #24
 8017448:	af00      	add	r7, sp, #0
 801744a:	60f8      	str	r0, [r7, #12]
 801744c:	60b9      	str	r1, [r7, #8]
 801744e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	2b00      	cmp	r3, #0
 8017454:	d10a      	bne.n	801746c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8017456:	f04f 0350 	mov.w	r3, #80	; 0x50
 801745a:	f383 8811 	msr	BASEPRI, r3
 801745e:	f3bf 8f6f 	isb	sy
 8017462:	f3bf 8f4f 	dsb	sy
 8017466:	617b      	str	r3, [r7, #20]
}
 8017468:	bf00      	nop
 801746a:	e7fe      	b.n	801746a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801746c:	4b0a      	ldr	r3, [pc, #40]	; (8017498 <vTaskPlaceOnEventListRestricted+0x54>)
 801746e:	681b      	ldr	r3, [r3, #0]
 8017470:	3318      	adds	r3, #24
 8017472:	4619      	mov	r1, r3
 8017474:	68f8      	ldr	r0, [r7, #12]
 8017476:	f7fe fa84 	bl	8015982 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	2b00      	cmp	r3, #0
 801747e:	d002      	beq.n	8017486 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8017480:	f04f 33ff 	mov.w	r3, #4294967295
 8017484:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017486:	6879      	ldr	r1, [r7, #4]
 8017488:	68b8      	ldr	r0, [r7, #8]
 801748a:	f000 fb63 	bl	8017b54 <prvAddCurrentTaskToDelayedList>
	}
 801748e:	bf00      	nop
 8017490:	3718      	adds	r7, #24
 8017492:	46bd      	mov	sp, r7
 8017494:	bd80      	pop	{r7, pc}
 8017496:	bf00      	nop
 8017498:	20000ff4 	.word	0x20000ff4

0801749c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801749c:	b580      	push	{r7, lr}
 801749e:	b086      	sub	sp, #24
 80174a0:	af00      	add	r7, sp, #0
 80174a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	68db      	ldr	r3, [r3, #12]
 80174a8:	68db      	ldr	r3, [r3, #12]
 80174aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80174ac:	693b      	ldr	r3, [r7, #16]
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d10a      	bne.n	80174c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80174b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174b6:	f383 8811 	msr	BASEPRI, r3
 80174ba:	f3bf 8f6f 	isb	sy
 80174be:	f3bf 8f4f 	dsb	sy
 80174c2:	60fb      	str	r3, [r7, #12]
}
 80174c4:	bf00      	nop
 80174c6:	e7fe      	b.n	80174c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80174c8:	693b      	ldr	r3, [r7, #16]
 80174ca:	3318      	adds	r3, #24
 80174cc:	4618      	mov	r0, r3
 80174ce:	f7fe fab5 	bl	8015a3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80174d2:	4b1e      	ldr	r3, [pc, #120]	; (801754c <xTaskRemoveFromEventList+0xb0>)
 80174d4:	681b      	ldr	r3, [r3, #0]
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d11d      	bne.n	8017516 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80174da:	693b      	ldr	r3, [r7, #16]
 80174dc:	3304      	adds	r3, #4
 80174de:	4618      	mov	r0, r3
 80174e0:	f7fe faac 	bl	8015a3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80174e4:	693b      	ldr	r3, [r7, #16]
 80174e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174e8:	4b19      	ldr	r3, [pc, #100]	; (8017550 <xTaskRemoveFromEventList+0xb4>)
 80174ea:	681b      	ldr	r3, [r3, #0]
 80174ec:	429a      	cmp	r2, r3
 80174ee:	d903      	bls.n	80174f8 <xTaskRemoveFromEventList+0x5c>
 80174f0:	693b      	ldr	r3, [r7, #16]
 80174f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174f4:	4a16      	ldr	r2, [pc, #88]	; (8017550 <xTaskRemoveFromEventList+0xb4>)
 80174f6:	6013      	str	r3, [r2, #0]
 80174f8:	693b      	ldr	r3, [r7, #16]
 80174fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174fc:	4613      	mov	r3, r2
 80174fe:	009b      	lsls	r3, r3, #2
 8017500:	4413      	add	r3, r2
 8017502:	009b      	lsls	r3, r3, #2
 8017504:	4a13      	ldr	r2, [pc, #76]	; (8017554 <xTaskRemoveFromEventList+0xb8>)
 8017506:	441a      	add	r2, r3
 8017508:	693b      	ldr	r3, [r7, #16]
 801750a:	3304      	adds	r3, #4
 801750c:	4619      	mov	r1, r3
 801750e:	4610      	mov	r0, r2
 8017510:	f7fe fa37 	bl	8015982 <vListInsertEnd>
 8017514:	e005      	b.n	8017522 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017516:	693b      	ldr	r3, [r7, #16]
 8017518:	3318      	adds	r3, #24
 801751a:	4619      	mov	r1, r3
 801751c:	480e      	ldr	r0, [pc, #56]	; (8017558 <xTaskRemoveFromEventList+0xbc>)
 801751e:	f7fe fa30 	bl	8015982 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017522:	693b      	ldr	r3, [r7, #16]
 8017524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017526:	4b0d      	ldr	r3, [pc, #52]	; (801755c <xTaskRemoveFromEventList+0xc0>)
 8017528:	681b      	ldr	r3, [r3, #0]
 801752a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801752c:	429a      	cmp	r2, r3
 801752e:	d905      	bls.n	801753c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8017530:	2301      	movs	r3, #1
 8017532:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8017534:	4b0a      	ldr	r3, [pc, #40]	; (8017560 <xTaskRemoveFromEventList+0xc4>)
 8017536:	2201      	movs	r2, #1
 8017538:	601a      	str	r2, [r3, #0]
 801753a:	e001      	b.n	8017540 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801753c:	2300      	movs	r3, #0
 801753e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8017540:	697b      	ldr	r3, [r7, #20]
}
 8017542:	4618      	mov	r0, r3
 8017544:	3718      	adds	r7, #24
 8017546:	46bd      	mov	sp, r7
 8017548:	bd80      	pop	{r7, pc}
 801754a:	bf00      	nop
 801754c:	200014f0 	.word	0x200014f0
 8017550:	200014d0 	.word	0x200014d0
 8017554:	20000ff8 	.word	0x20000ff8
 8017558:	20001488 	.word	0x20001488
 801755c:	20000ff4 	.word	0x20000ff4
 8017560:	200014dc 	.word	0x200014dc

08017564 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017564:	b480      	push	{r7}
 8017566:	b083      	sub	sp, #12
 8017568:	af00      	add	r7, sp, #0
 801756a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801756c:	4b06      	ldr	r3, [pc, #24]	; (8017588 <vTaskInternalSetTimeOutState+0x24>)
 801756e:	681a      	ldr	r2, [r3, #0]
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017574:	4b05      	ldr	r3, [pc, #20]	; (801758c <vTaskInternalSetTimeOutState+0x28>)
 8017576:	681a      	ldr	r2, [r3, #0]
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	605a      	str	r2, [r3, #4]
}
 801757c:	bf00      	nop
 801757e:	370c      	adds	r7, #12
 8017580:	46bd      	mov	sp, r7
 8017582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017586:	4770      	bx	lr
 8017588:	200014e0 	.word	0x200014e0
 801758c:	200014cc 	.word	0x200014cc

08017590 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017590:	b580      	push	{r7, lr}
 8017592:	b088      	sub	sp, #32
 8017594:	af00      	add	r7, sp, #0
 8017596:	6078      	str	r0, [r7, #4]
 8017598:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	2b00      	cmp	r3, #0
 801759e:	d10a      	bne.n	80175b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80175a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175a4:	f383 8811 	msr	BASEPRI, r3
 80175a8:	f3bf 8f6f 	isb	sy
 80175ac:	f3bf 8f4f 	dsb	sy
 80175b0:	613b      	str	r3, [r7, #16]
}
 80175b2:	bf00      	nop
 80175b4:	e7fe      	b.n	80175b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80175b6:	683b      	ldr	r3, [r7, #0]
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d10a      	bne.n	80175d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80175bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175c0:	f383 8811 	msr	BASEPRI, r3
 80175c4:	f3bf 8f6f 	isb	sy
 80175c8:	f3bf 8f4f 	dsb	sy
 80175cc:	60fb      	str	r3, [r7, #12]
}
 80175ce:	bf00      	nop
 80175d0:	e7fe      	b.n	80175d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80175d2:	f000 ff8f 	bl	80184f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80175d6:	4b1d      	ldr	r3, [pc, #116]	; (801764c <xTaskCheckForTimeOut+0xbc>)
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	685b      	ldr	r3, [r3, #4]
 80175e0:	69ba      	ldr	r2, [r7, #24]
 80175e2:	1ad3      	subs	r3, r2, r3
 80175e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80175e6:	683b      	ldr	r3, [r7, #0]
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80175ee:	d102      	bne.n	80175f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80175f0:	2300      	movs	r3, #0
 80175f2:	61fb      	str	r3, [r7, #28]
 80175f4:	e023      	b.n	801763e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	681a      	ldr	r2, [r3, #0]
 80175fa:	4b15      	ldr	r3, [pc, #84]	; (8017650 <xTaskCheckForTimeOut+0xc0>)
 80175fc:	681b      	ldr	r3, [r3, #0]
 80175fe:	429a      	cmp	r2, r3
 8017600:	d007      	beq.n	8017612 <xTaskCheckForTimeOut+0x82>
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	685b      	ldr	r3, [r3, #4]
 8017606:	69ba      	ldr	r2, [r7, #24]
 8017608:	429a      	cmp	r2, r3
 801760a:	d302      	bcc.n	8017612 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801760c:	2301      	movs	r3, #1
 801760e:	61fb      	str	r3, [r7, #28]
 8017610:	e015      	b.n	801763e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8017612:	683b      	ldr	r3, [r7, #0]
 8017614:	681b      	ldr	r3, [r3, #0]
 8017616:	697a      	ldr	r2, [r7, #20]
 8017618:	429a      	cmp	r2, r3
 801761a:	d20b      	bcs.n	8017634 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801761c:	683b      	ldr	r3, [r7, #0]
 801761e:	681a      	ldr	r2, [r3, #0]
 8017620:	697b      	ldr	r3, [r7, #20]
 8017622:	1ad2      	subs	r2, r2, r3
 8017624:	683b      	ldr	r3, [r7, #0]
 8017626:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8017628:	6878      	ldr	r0, [r7, #4]
 801762a:	f7ff ff9b 	bl	8017564 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801762e:	2300      	movs	r3, #0
 8017630:	61fb      	str	r3, [r7, #28]
 8017632:	e004      	b.n	801763e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8017634:	683b      	ldr	r3, [r7, #0]
 8017636:	2200      	movs	r2, #0
 8017638:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801763a:	2301      	movs	r3, #1
 801763c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801763e:	f000 ff89 	bl	8018554 <vPortExitCritical>

	return xReturn;
 8017642:	69fb      	ldr	r3, [r7, #28]
}
 8017644:	4618      	mov	r0, r3
 8017646:	3720      	adds	r7, #32
 8017648:	46bd      	mov	sp, r7
 801764a:	bd80      	pop	{r7, pc}
 801764c:	200014cc 	.word	0x200014cc
 8017650:	200014e0 	.word	0x200014e0

08017654 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017654:	b480      	push	{r7}
 8017656:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8017658:	4b03      	ldr	r3, [pc, #12]	; (8017668 <vTaskMissedYield+0x14>)
 801765a:	2201      	movs	r2, #1
 801765c:	601a      	str	r2, [r3, #0]
}
 801765e:	bf00      	nop
 8017660:	46bd      	mov	sp, r7
 8017662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017666:	4770      	bx	lr
 8017668:	200014dc 	.word	0x200014dc

0801766c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801766c:	b580      	push	{r7, lr}
 801766e:	b082      	sub	sp, #8
 8017670:	af00      	add	r7, sp, #0
 8017672:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017674:	f000 f852 	bl	801771c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017678:	4b06      	ldr	r3, [pc, #24]	; (8017694 <prvIdleTask+0x28>)
 801767a:	681b      	ldr	r3, [r3, #0]
 801767c:	2b01      	cmp	r3, #1
 801767e:	d9f9      	bls.n	8017674 <prvIdleTask+0x8>
			{
				taskYIELD();
 8017680:	4b05      	ldr	r3, [pc, #20]	; (8017698 <prvIdleTask+0x2c>)
 8017682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017686:	601a      	str	r2, [r3, #0]
 8017688:	f3bf 8f4f 	dsb	sy
 801768c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8017690:	e7f0      	b.n	8017674 <prvIdleTask+0x8>
 8017692:	bf00      	nop
 8017694:	20000ff8 	.word	0x20000ff8
 8017698:	e000ed04 	.word	0xe000ed04

0801769c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801769c:	b580      	push	{r7, lr}
 801769e:	b082      	sub	sp, #8
 80176a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80176a2:	2300      	movs	r3, #0
 80176a4:	607b      	str	r3, [r7, #4]
 80176a6:	e00c      	b.n	80176c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80176a8:	687a      	ldr	r2, [r7, #4]
 80176aa:	4613      	mov	r3, r2
 80176ac:	009b      	lsls	r3, r3, #2
 80176ae:	4413      	add	r3, r2
 80176b0:	009b      	lsls	r3, r3, #2
 80176b2:	4a12      	ldr	r2, [pc, #72]	; (80176fc <prvInitialiseTaskLists+0x60>)
 80176b4:	4413      	add	r3, r2
 80176b6:	4618      	mov	r0, r3
 80176b8:	f7fe f936 	bl	8015928 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	3301      	adds	r3, #1
 80176c0:	607b      	str	r3, [r7, #4]
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	2b37      	cmp	r3, #55	; 0x37
 80176c6:	d9ef      	bls.n	80176a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80176c8:	480d      	ldr	r0, [pc, #52]	; (8017700 <prvInitialiseTaskLists+0x64>)
 80176ca:	f7fe f92d 	bl	8015928 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80176ce:	480d      	ldr	r0, [pc, #52]	; (8017704 <prvInitialiseTaskLists+0x68>)
 80176d0:	f7fe f92a 	bl	8015928 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80176d4:	480c      	ldr	r0, [pc, #48]	; (8017708 <prvInitialiseTaskLists+0x6c>)
 80176d6:	f7fe f927 	bl	8015928 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80176da:	480c      	ldr	r0, [pc, #48]	; (801770c <prvInitialiseTaskLists+0x70>)
 80176dc:	f7fe f924 	bl	8015928 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80176e0:	480b      	ldr	r0, [pc, #44]	; (8017710 <prvInitialiseTaskLists+0x74>)
 80176e2:	f7fe f921 	bl	8015928 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80176e6:	4b0b      	ldr	r3, [pc, #44]	; (8017714 <prvInitialiseTaskLists+0x78>)
 80176e8:	4a05      	ldr	r2, [pc, #20]	; (8017700 <prvInitialiseTaskLists+0x64>)
 80176ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80176ec:	4b0a      	ldr	r3, [pc, #40]	; (8017718 <prvInitialiseTaskLists+0x7c>)
 80176ee:	4a05      	ldr	r2, [pc, #20]	; (8017704 <prvInitialiseTaskLists+0x68>)
 80176f0:	601a      	str	r2, [r3, #0]
}
 80176f2:	bf00      	nop
 80176f4:	3708      	adds	r7, #8
 80176f6:	46bd      	mov	sp, r7
 80176f8:	bd80      	pop	{r7, pc}
 80176fa:	bf00      	nop
 80176fc:	20000ff8 	.word	0x20000ff8
 8017700:	20001458 	.word	0x20001458
 8017704:	2000146c 	.word	0x2000146c
 8017708:	20001488 	.word	0x20001488
 801770c:	2000149c 	.word	0x2000149c
 8017710:	200014b4 	.word	0x200014b4
 8017714:	20001480 	.word	0x20001480
 8017718:	20001484 	.word	0x20001484

0801771c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801771c:	b580      	push	{r7, lr}
 801771e:	b082      	sub	sp, #8
 8017720:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017722:	e019      	b.n	8017758 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8017724:	f000 fee6 	bl	80184f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017728:	4b10      	ldr	r3, [pc, #64]	; (801776c <prvCheckTasksWaitingTermination+0x50>)
 801772a:	68db      	ldr	r3, [r3, #12]
 801772c:	68db      	ldr	r3, [r3, #12]
 801772e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	3304      	adds	r3, #4
 8017734:	4618      	mov	r0, r3
 8017736:	f7fe f981 	bl	8015a3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801773a:	4b0d      	ldr	r3, [pc, #52]	; (8017770 <prvCheckTasksWaitingTermination+0x54>)
 801773c:	681b      	ldr	r3, [r3, #0]
 801773e:	3b01      	subs	r3, #1
 8017740:	4a0b      	ldr	r2, [pc, #44]	; (8017770 <prvCheckTasksWaitingTermination+0x54>)
 8017742:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017744:	4b0b      	ldr	r3, [pc, #44]	; (8017774 <prvCheckTasksWaitingTermination+0x58>)
 8017746:	681b      	ldr	r3, [r3, #0]
 8017748:	3b01      	subs	r3, #1
 801774a:	4a0a      	ldr	r2, [pc, #40]	; (8017774 <prvCheckTasksWaitingTermination+0x58>)
 801774c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801774e:	f000 ff01 	bl	8018554 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8017752:	6878      	ldr	r0, [r7, #4]
 8017754:	f000 f810 	bl	8017778 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017758:	4b06      	ldr	r3, [pc, #24]	; (8017774 <prvCheckTasksWaitingTermination+0x58>)
 801775a:	681b      	ldr	r3, [r3, #0]
 801775c:	2b00      	cmp	r3, #0
 801775e:	d1e1      	bne.n	8017724 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017760:	bf00      	nop
 8017762:	bf00      	nop
 8017764:	3708      	adds	r7, #8
 8017766:	46bd      	mov	sp, r7
 8017768:	bd80      	pop	{r7, pc}
 801776a:	bf00      	nop
 801776c:	2000149c 	.word	0x2000149c
 8017770:	200014c8 	.word	0x200014c8
 8017774:	200014b0 	.word	0x200014b0

08017778 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8017778:	b580      	push	{r7, lr}
 801777a:	b084      	sub	sp, #16
 801777c:	af00      	add	r7, sp, #0
 801777e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	3354      	adds	r3, #84	; 0x54
 8017784:	4618      	mov	r0, r3
 8017786:	f003 ffc9 	bl	801b71c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8017790:	2b00      	cmp	r3, #0
 8017792:	d108      	bne.n	80177a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017798:	4618      	mov	r0, r3
 801779a:	f001 f899 	bl	80188d0 <vPortFree>
				vPortFree( pxTCB );
 801779e:	6878      	ldr	r0, [r7, #4]
 80177a0:	f001 f896 	bl	80188d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80177a4:	e018      	b.n	80177d8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80177ac:	2b01      	cmp	r3, #1
 80177ae:	d103      	bne.n	80177b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80177b0:	6878      	ldr	r0, [r7, #4]
 80177b2:	f001 f88d 	bl	80188d0 <vPortFree>
	}
 80177b6:	e00f      	b.n	80177d8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80177be:	2b02      	cmp	r3, #2
 80177c0:	d00a      	beq.n	80177d8 <prvDeleteTCB+0x60>
	__asm volatile
 80177c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177c6:	f383 8811 	msr	BASEPRI, r3
 80177ca:	f3bf 8f6f 	isb	sy
 80177ce:	f3bf 8f4f 	dsb	sy
 80177d2:	60fb      	str	r3, [r7, #12]
}
 80177d4:	bf00      	nop
 80177d6:	e7fe      	b.n	80177d6 <prvDeleteTCB+0x5e>
	}
 80177d8:	bf00      	nop
 80177da:	3710      	adds	r7, #16
 80177dc:	46bd      	mov	sp, r7
 80177de:	bd80      	pop	{r7, pc}

080177e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80177e0:	b480      	push	{r7}
 80177e2:	b083      	sub	sp, #12
 80177e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80177e6:	4b0c      	ldr	r3, [pc, #48]	; (8017818 <prvResetNextTaskUnblockTime+0x38>)
 80177e8:	681b      	ldr	r3, [r3, #0]
 80177ea:	681b      	ldr	r3, [r3, #0]
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d104      	bne.n	80177fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80177f0:	4b0a      	ldr	r3, [pc, #40]	; (801781c <prvResetNextTaskUnblockTime+0x3c>)
 80177f2:	f04f 32ff 	mov.w	r2, #4294967295
 80177f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80177f8:	e008      	b.n	801780c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80177fa:	4b07      	ldr	r3, [pc, #28]	; (8017818 <prvResetNextTaskUnblockTime+0x38>)
 80177fc:	681b      	ldr	r3, [r3, #0]
 80177fe:	68db      	ldr	r3, [r3, #12]
 8017800:	68db      	ldr	r3, [r3, #12]
 8017802:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	685b      	ldr	r3, [r3, #4]
 8017808:	4a04      	ldr	r2, [pc, #16]	; (801781c <prvResetNextTaskUnblockTime+0x3c>)
 801780a:	6013      	str	r3, [r2, #0]
}
 801780c:	bf00      	nop
 801780e:	370c      	adds	r7, #12
 8017810:	46bd      	mov	sp, r7
 8017812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017816:	4770      	bx	lr
 8017818:	20001480 	.word	0x20001480
 801781c:	200014e8 	.word	0x200014e8

08017820 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8017820:	b480      	push	{r7}
 8017822:	b083      	sub	sp, #12
 8017824:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8017826:	4b05      	ldr	r3, [pc, #20]	; (801783c <xTaskGetCurrentTaskHandle+0x1c>)
 8017828:	681b      	ldr	r3, [r3, #0]
 801782a:	607b      	str	r3, [r7, #4]

		return xReturn;
 801782c:	687b      	ldr	r3, [r7, #4]
	}
 801782e:	4618      	mov	r0, r3
 8017830:	370c      	adds	r7, #12
 8017832:	46bd      	mov	sp, r7
 8017834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017838:	4770      	bx	lr
 801783a:	bf00      	nop
 801783c:	20000ff4 	.word	0x20000ff4

08017840 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017840:	b480      	push	{r7}
 8017842:	b083      	sub	sp, #12
 8017844:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8017846:	4b0b      	ldr	r3, [pc, #44]	; (8017874 <xTaskGetSchedulerState+0x34>)
 8017848:	681b      	ldr	r3, [r3, #0]
 801784a:	2b00      	cmp	r3, #0
 801784c:	d102      	bne.n	8017854 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801784e:	2301      	movs	r3, #1
 8017850:	607b      	str	r3, [r7, #4]
 8017852:	e008      	b.n	8017866 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017854:	4b08      	ldr	r3, [pc, #32]	; (8017878 <xTaskGetSchedulerState+0x38>)
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	2b00      	cmp	r3, #0
 801785a:	d102      	bne.n	8017862 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801785c:	2302      	movs	r3, #2
 801785e:	607b      	str	r3, [r7, #4]
 8017860:	e001      	b.n	8017866 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8017862:	2300      	movs	r3, #0
 8017864:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8017866:	687b      	ldr	r3, [r7, #4]
	}
 8017868:	4618      	mov	r0, r3
 801786a:	370c      	adds	r7, #12
 801786c:	46bd      	mov	sp, r7
 801786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017872:	4770      	bx	lr
 8017874:	200014d4 	.word	0x200014d4
 8017878:	200014f0 	.word	0x200014f0

0801787c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801787c:	b580      	push	{r7, lr}
 801787e:	b084      	sub	sp, #16
 8017880:	af00      	add	r7, sp, #0
 8017882:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8017888:	2300      	movs	r3, #0
 801788a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	2b00      	cmp	r3, #0
 8017890:	d051      	beq.n	8017936 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8017892:	68bb      	ldr	r3, [r7, #8]
 8017894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017896:	4b2a      	ldr	r3, [pc, #168]	; (8017940 <xTaskPriorityInherit+0xc4>)
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801789c:	429a      	cmp	r2, r3
 801789e:	d241      	bcs.n	8017924 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80178a0:	68bb      	ldr	r3, [r7, #8]
 80178a2:	699b      	ldr	r3, [r3, #24]
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	db06      	blt.n	80178b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80178a8:	4b25      	ldr	r3, [pc, #148]	; (8017940 <xTaskPriorityInherit+0xc4>)
 80178aa:	681b      	ldr	r3, [r3, #0]
 80178ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80178ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80178b2:	68bb      	ldr	r3, [r7, #8]
 80178b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80178b6:	68bb      	ldr	r3, [r7, #8]
 80178b8:	6959      	ldr	r1, [r3, #20]
 80178ba:	68bb      	ldr	r3, [r7, #8]
 80178bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80178be:	4613      	mov	r3, r2
 80178c0:	009b      	lsls	r3, r3, #2
 80178c2:	4413      	add	r3, r2
 80178c4:	009b      	lsls	r3, r3, #2
 80178c6:	4a1f      	ldr	r2, [pc, #124]	; (8017944 <xTaskPriorityInherit+0xc8>)
 80178c8:	4413      	add	r3, r2
 80178ca:	4299      	cmp	r1, r3
 80178cc:	d122      	bne.n	8017914 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80178ce:	68bb      	ldr	r3, [r7, #8]
 80178d0:	3304      	adds	r3, #4
 80178d2:	4618      	mov	r0, r3
 80178d4:	f7fe f8b2 	bl	8015a3c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80178d8:	4b19      	ldr	r3, [pc, #100]	; (8017940 <xTaskPriorityInherit+0xc4>)
 80178da:	681b      	ldr	r3, [r3, #0]
 80178dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80178de:	68bb      	ldr	r3, [r7, #8]
 80178e0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80178e2:	68bb      	ldr	r3, [r7, #8]
 80178e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80178e6:	4b18      	ldr	r3, [pc, #96]	; (8017948 <xTaskPriorityInherit+0xcc>)
 80178e8:	681b      	ldr	r3, [r3, #0]
 80178ea:	429a      	cmp	r2, r3
 80178ec:	d903      	bls.n	80178f6 <xTaskPriorityInherit+0x7a>
 80178ee:	68bb      	ldr	r3, [r7, #8]
 80178f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80178f2:	4a15      	ldr	r2, [pc, #84]	; (8017948 <xTaskPriorityInherit+0xcc>)
 80178f4:	6013      	str	r3, [r2, #0]
 80178f6:	68bb      	ldr	r3, [r7, #8]
 80178f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80178fa:	4613      	mov	r3, r2
 80178fc:	009b      	lsls	r3, r3, #2
 80178fe:	4413      	add	r3, r2
 8017900:	009b      	lsls	r3, r3, #2
 8017902:	4a10      	ldr	r2, [pc, #64]	; (8017944 <xTaskPriorityInherit+0xc8>)
 8017904:	441a      	add	r2, r3
 8017906:	68bb      	ldr	r3, [r7, #8]
 8017908:	3304      	adds	r3, #4
 801790a:	4619      	mov	r1, r3
 801790c:	4610      	mov	r0, r2
 801790e:	f7fe f838 	bl	8015982 <vListInsertEnd>
 8017912:	e004      	b.n	801791e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017914:	4b0a      	ldr	r3, [pc, #40]	; (8017940 <xTaskPriorityInherit+0xc4>)
 8017916:	681b      	ldr	r3, [r3, #0]
 8017918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801791a:	68bb      	ldr	r3, [r7, #8]
 801791c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801791e:	2301      	movs	r3, #1
 8017920:	60fb      	str	r3, [r7, #12]
 8017922:	e008      	b.n	8017936 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8017924:	68bb      	ldr	r3, [r7, #8]
 8017926:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017928:	4b05      	ldr	r3, [pc, #20]	; (8017940 <xTaskPriorityInherit+0xc4>)
 801792a:	681b      	ldr	r3, [r3, #0]
 801792c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801792e:	429a      	cmp	r2, r3
 8017930:	d201      	bcs.n	8017936 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8017932:	2301      	movs	r3, #1
 8017934:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017936:	68fb      	ldr	r3, [r7, #12]
	}
 8017938:	4618      	mov	r0, r3
 801793a:	3710      	adds	r7, #16
 801793c:	46bd      	mov	sp, r7
 801793e:	bd80      	pop	{r7, pc}
 8017940:	20000ff4 	.word	0x20000ff4
 8017944:	20000ff8 	.word	0x20000ff8
 8017948:	200014d0 	.word	0x200014d0

0801794c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801794c:	b580      	push	{r7, lr}
 801794e:	b086      	sub	sp, #24
 8017950:	af00      	add	r7, sp, #0
 8017952:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017958:	2300      	movs	r3, #0
 801795a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	2b00      	cmp	r3, #0
 8017960:	d056      	beq.n	8017a10 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8017962:	4b2e      	ldr	r3, [pc, #184]	; (8017a1c <xTaskPriorityDisinherit+0xd0>)
 8017964:	681b      	ldr	r3, [r3, #0]
 8017966:	693a      	ldr	r2, [r7, #16]
 8017968:	429a      	cmp	r2, r3
 801796a:	d00a      	beq.n	8017982 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801796c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017970:	f383 8811 	msr	BASEPRI, r3
 8017974:	f3bf 8f6f 	isb	sy
 8017978:	f3bf 8f4f 	dsb	sy
 801797c:	60fb      	str	r3, [r7, #12]
}
 801797e:	bf00      	nop
 8017980:	e7fe      	b.n	8017980 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8017982:	693b      	ldr	r3, [r7, #16]
 8017984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017986:	2b00      	cmp	r3, #0
 8017988:	d10a      	bne.n	80179a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801798a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801798e:	f383 8811 	msr	BASEPRI, r3
 8017992:	f3bf 8f6f 	isb	sy
 8017996:	f3bf 8f4f 	dsb	sy
 801799a:	60bb      	str	r3, [r7, #8]
}
 801799c:	bf00      	nop
 801799e:	e7fe      	b.n	801799e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80179a0:	693b      	ldr	r3, [r7, #16]
 80179a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80179a4:	1e5a      	subs	r2, r3, #1
 80179a6:	693b      	ldr	r3, [r7, #16]
 80179a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80179aa:	693b      	ldr	r3, [r7, #16]
 80179ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179ae:	693b      	ldr	r3, [r7, #16]
 80179b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80179b2:	429a      	cmp	r2, r3
 80179b4:	d02c      	beq.n	8017a10 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80179b6:	693b      	ldr	r3, [r7, #16]
 80179b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d128      	bne.n	8017a10 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80179be:	693b      	ldr	r3, [r7, #16]
 80179c0:	3304      	adds	r3, #4
 80179c2:	4618      	mov	r0, r3
 80179c4:	f7fe f83a 	bl	8015a3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80179c8:	693b      	ldr	r3, [r7, #16]
 80179ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80179cc:	693b      	ldr	r3, [r7, #16]
 80179ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80179d0:	693b      	ldr	r3, [r7, #16]
 80179d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80179d8:	693b      	ldr	r3, [r7, #16]
 80179da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80179dc:	693b      	ldr	r3, [r7, #16]
 80179de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179e0:	4b0f      	ldr	r3, [pc, #60]	; (8017a20 <xTaskPriorityDisinherit+0xd4>)
 80179e2:	681b      	ldr	r3, [r3, #0]
 80179e4:	429a      	cmp	r2, r3
 80179e6:	d903      	bls.n	80179f0 <xTaskPriorityDisinherit+0xa4>
 80179e8:	693b      	ldr	r3, [r7, #16]
 80179ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179ec:	4a0c      	ldr	r2, [pc, #48]	; (8017a20 <xTaskPriorityDisinherit+0xd4>)
 80179ee:	6013      	str	r3, [r2, #0]
 80179f0:	693b      	ldr	r3, [r7, #16]
 80179f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179f4:	4613      	mov	r3, r2
 80179f6:	009b      	lsls	r3, r3, #2
 80179f8:	4413      	add	r3, r2
 80179fa:	009b      	lsls	r3, r3, #2
 80179fc:	4a09      	ldr	r2, [pc, #36]	; (8017a24 <xTaskPriorityDisinherit+0xd8>)
 80179fe:	441a      	add	r2, r3
 8017a00:	693b      	ldr	r3, [r7, #16]
 8017a02:	3304      	adds	r3, #4
 8017a04:	4619      	mov	r1, r3
 8017a06:	4610      	mov	r0, r2
 8017a08:	f7fd ffbb 	bl	8015982 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8017a0c:	2301      	movs	r3, #1
 8017a0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017a10:	697b      	ldr	r3, [r7, #20]
	}
 8017a12:	4618      	mov	r0, r3
 8017a14:	3718      	adds	r7, #24
 8017a16:	46bd      	mov	sp, r7
 8017a18:	bd80      	pop	{r7, pc}
 8017a1a:	bf00      	nop
 8017a1c:	20000ff4 	.word	0x20000ff4
 8017a20:	200014d0 	.word	0x200014d0
 8017a24:	20000ff8 	.word	0x20000ff8

08017a28 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8017a28:	b580      	push	{r7, lr}
 8017a2a:	b088      	sub	sp, #32
 8017a2c:	af00      	add	r7, sp, #0
 8017a2e:	6078      	str	r0, [r7, #4]
 8017a30:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8017a36:	2301      	movs	r3, #1
 8017a38:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	d06a      	beq.n	8017b16 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8017a40:	69bb      	ldr	r3, [r7, #24]
 8017a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d10a      	bne.n	8017a5e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8017a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a4c:	f383 8811 	msr	BASEPRI, r3
 8017a50:	f3bf 8f6f 	isb	sy
 8017a54:	f3bf 8f4f 	dsb	sy
 8017a58:	60fb      	str	r3, [r7, #12]
}
 8017a5a:	bf00      	nop
 8017a5c:	e7fe      	b.n	8017a5c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8017a5e:	69bb      	ldr	r3, [r7, #24]
 8017a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017a62:	683a      	ldr	r2, [r7, #0]
 8017a64:	429a      	cmp	r2, r3
 8017a66:	d902      	bls.n	8017a6e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8017a68:	683b      	ldr	r3, [r7, #0]
 8017a6a:	61fb      	str	r3, [r7, #28]
 8017a6c:	e002      	b.n	8017a74 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8017a6e:	69bb      	ldr	r3, [r7, #24]
 8017a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017a72:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8017a74:	69bb      	ldr	r3, [r7, #24]
 8017a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a78:	69fa      	ldr	r2, [r7, #28]
 8017a7a:	429a      	cmp	r2, r3
 8017a7c:	d04b      	beq.n	8017b16 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8017a7e:	69bb      	ldr	r3, [r7, #24]
 8017a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017a82:	697a      	ldr	r2, [r7, #20]
 8017a84:	429a      	cmp	r2, r3
 8017a86:	d146      	bne.n	8017b16 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8017a88:	4b25      	ldr	r3, [pc, #148]	; (8017b20 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	69ba      	ldr	r2, [r7, #24]
 8017a8e:	429a      	cmp	r2, r3
 8017a90:	d10a      	bne.n	8017aa8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8017a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a96:	f383 8811 	msr	BASEPRI, r3
 8017a9a:	f3bf 8f6f 	isb	sy
 8017a9e:	f3bf 8f4f 	dsb	sy
 8017aa2:	60bb      	str	r3, [r7, #8]
}
 8017aa4:	bf00      	nop
 8017aa6:	e7fe      	b.n	8017aa6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8017aa8:	69bb      	ldr	r3, [r7, #24]
 8017aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017aac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8017aae:	69bb      	ldr	r3, [r7, #24]
 8017ab0:	69fa      	ldr	r2, [r7, #28]
 8017ab2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017ab4:	69bb      	ldr	r3, [r7, #24]
 8017ab6:	699b      	ldr	r3, [r3, #24]
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	db04      	blt.n	8017ac6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017abc:	69fb      	ldr	r3, [r7, #28]
 8017abe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017ac2:	69bb      	ldr	r3, [r7, #24]
 8017ac4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8017ac6:	69bb      	ldr	r3, [r7, #24]
 8017ac8:	6959      	ldr	r1, [r3, #20]
 8017aca:	693a      	ldr	r2, [r7, #16]
 8017acc:	4613      	mov	r3, r2
 8017ace:	009b      	lsls	r3, r3, #2
 8017ad0:	4413      	add	r3, r2
 8017ad2:	009b      	lsls	r3, r3, #2
 8017ad4:	4a13      	ldr	r2, [pc, #76]	; (8017b24 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8017ad6:	4413      	add	r3, r2
 8017ad8:	4299      	cmp	r1, r3
 8017ada:	d11c      	bne.n	8017b16 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017adc:	69bb      	ldr	r3, [r7, #24]
 8017ade:	3304      	adds	r3, #4
 8017ae0:	4618      	mov	r0, r3
 8017ae2:	f7fd ffab 	bl	8015a3c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8017ae6:	69bb      	ldr	r3, [r7, #24]
 8017ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017aea:	4b0f      	ldr	r3, [pc, #60]	; (8017b28 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8017aec:	681b      	ldr	r3, [r3, #0]
 8017aee:	429a      	cmp	r2, r3
 8017af0:	d903      	bls.n	8017afa <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8017af2:	69bb      	ldr	r3, [r7, #24]
 8017af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017af6:	4a0c      	ldr	r2, [pc, #48]	; (8017b28 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8017af8:	6013      	str	r3, [r2, #0]
 8017afa:	69bb      	ldr	r3, [r7, #24]
 8017afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017afe:	4613      	mov	r3, r2
 8017b00:	009b      	lsls	r3, r3, #2
 8017b02:	4413      	add	r3, r2
 8017b04:	009b      	lsls	r3, r3, #2
 8017b06:	4a07      	ldr	r2, [pc, #28]	; (8017b24 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8017b08:	441a      	add	r2, r3
 8017b0a:	69bb      	ldr	r3, [r7, #24]
 8017b0c:	3304      	adds	r3, #4
 8017b0e:	4619      	mov	r1, r3
 8017b10:	4610      	mov	r0, r2
 8017b12:	f7fd ff36 	bl	8015982 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017b16:	bf00      	nop
 8017b18:	3720      	adds	r7, #32
 8017b1a:	46bd      	mov	sp, r7
 8017b1c:	bd80      	pop	{r7, pc}
 8017b1e:	bf00      	nop
 8017b20:	20000ff4 	.word	0x20000ff4
 8017b24:	20000ff8 	.word	0x20000ff8
 8017b28:	200014d0 	.word	0x200014d0

08017b2c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8017b2c:	b480      	push	{r7}
 8017b2e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8017b30:	4b07      	ldr	r3, [pc, #28]	; (8017b50 <pvTaskIncrementMutexHeldCount+0x24>)
 8017b32:	681b      	ldr	r3, [r3, #0]
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d004      	beq.n	8017b42 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8017b38:	4b05      	ldr	r3, [pc, #20]	; (8017b50 <pvTaskIncrementMutexHeldCount+0x24>)
 8017b3a:	681b      	ldr	r3, [r3, #0]
 8017b3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017b3e:	3201      	adds	r2, #1
 8017b40:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8017b42:	4b03      	ldr	r3, [pc, #12]	; (8017b50 <pvTaskIncrementMutexHeldCount+0x24>)
 8017b44:	681b      	ldr	r3, [r3, #0]
	}
 8017b46:	4618      	mov	r0, r3
 8017b48:	46bd      	mov	sp, r7
 8017b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b4e:	4770      	bx	lr
 8017b50:	20000ff4 	.word	0x20000ff4

08017b54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017b54:	b580      	push	{r7, lr}
 8017b56:	b084      	sub	sp, #16
 8017b58:	af00      	add	r7, sp, #0
 8017b5a:	6078      	str	r0, [r7, #4]
 8017b5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8017b5e:	4b21      	ldr	r3, [pc, #132]	; (8017be4 <prvAddCurrentTaskToDelayedList+0x90>)
 8017b60:	681b      	ldr	r3, [r3, #0]
 8017b62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017b64:	4b20      	ldr	r3, [pc, #128]	; (8017be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8017b66:	681b      	ldr	r3, [r3, #0]
 8017b68:	3304      	adds	r3, #4
 8017b6a:	4618      	mov	r0, r3
 8017b6c:	f7fd ff66 	bl	8015a3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b76:	d10a      	bne.n	8017b8e <prvAddCurrentTaskToDelayedList+0x3a>
 8017b78:	683b      	ldr	r3, [r7, #0]
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d007      	beq.n	8017b8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017b7e:	4b1a      	ldr	r3, [pc, #104]	; (8017be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	3304      	adds	r3, #4
 8017b84:	4619      	mov	r1, r3
 8017b86:	4819      	ldr	r0, [pc, #100]	; (8017bec <prvAddCurrentTaskToDelayedList+0x98>)
 8017b88:	f7fd fefb 	bl	8015982 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017b8c:	e026      	b.n	8017bdc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8017b8e:	68fa      	ldr	r2, [r7, #12]
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	4413      	add	r3, r2
 8017b94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017b96:	4b14      	ldr	r3, [pc, #80]	; (8017be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	68ba      	ldr	r2, [r7, #8]
 8017b9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8017b9e:	68ba      	ldr	r2, [r7, #8]
 8017ba0:	68fb      	ldr	r3, [r7, #12]
 8017ba2:	429a      	cmp	r2, r3
 8017ba4:	d209      	bcs.n	8017bba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017ba6:	4b12      	ldr	r3, [pc, #72]	; (8017bf0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8017ba8:	681a      	ldr	r2, [r3, #0]
 8017baa:	4b0f      	ldr	r3, [pc, #60]	; (8017be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	3304      	adds	r3, #4
 8017bb0:	4619      	mov	r1, r3
 8017bb2:	4610      	mov	r0, r2
 8017bb4:	f7fd ff09 	bl	80159ca <vListInsert>
}
 8017bb8:	e010      	b.n	8017bdc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017bba:	4b0e      	ldr	r3, [pc, #56]	; (8017bf4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8017bbc:	681a      	ldr	r2, [r3, #0]
 8017bbe:	4b0a      	ldr	r3, [pc, #40]	; (8017be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8017bc0:	681b      	ldr	r3, [r3, #0]
 8017bc2:	3304      	adds	r3, #4
 8017bc4:	4619      	mov	r1, r3
 8017bc6:	4610      	mov	r0, r2
 8017bc8:	f7fd feff 	bl	80159ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8017bcc:	4b0a      	ldr	r3, [pc, #40]	; (8017bf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8017bce:	681b      	ldr	r3, [r3, #0]
 8017bd0:	68ba      	ldr	r2, [r7, #8]
 8017bd2:	429a      	cmp	r2, r3
 8017bd4:	d202      	bcs.n	8017bdc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8017bd6:	4a08      	ldr	r2, [pc, #32]	; (8017bf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8017bd8:	68bb      	ldr	r3, [r7, #8]
 8017bda:	6013      	str	r3, [r2, #0]
}
 8017bdc:	bf00      	nop
 8017bde:	3710      	adds	r7, #16
 8017be0:	46bd      	mov	sp, r7
 8017be2:	bd80      	pop	{r7, pc}
 8017be4:	200014cc 	.word	0x200014cc
 8017be8:	20000ff4 	.word	0x20000ff4
 8017bec:	200014b4 	.word	0x200014b4
 8017bf0:	20001484 	.word	0x20001484
 8017bf4:	20001480 	.word	0x20001480
 8017bf8:	200014e8 	.word	0x200014e8

08017bfc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8017bfc:	b580      	push	{r7, lr}
 8017bfe:	b08a      	sub	sp, #40	; 0x28
 8017c00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8017c02:	2300      	movs	r3, #0
 8017c04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8017c06:	f000 fb07 	bl	8018218 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8017c0a:	4b1c      	ldr	r3, [pc, #112]	; (8017c7c <xTimerCreateTimerTask+0x80>)
 8017c0c:	681b      	ldr	r3, [r3, #0]
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	d021      	beq.n	8017c56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8017c12:	2300      	movs	r3, #0
 8017c14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8017c16:	2300      	movs	r3, #0
 8017c18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8017c1a:	1d3a      	adds	r2, r7, #4
 8017c1c:	f107 0108 	add.w	r1, r7, #8
 8017c20:	f107 030c 	add.w	r3, r7, #12
 8017c24:	4618      	mov	r0, r3
 8017c26:	f7fd fe65 	bl	80158f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8017c2a:	6879      	ldr	r1, [r7, #4]
 8017c2c:	68bb      	ldr	r3, [r7, #8]
 8017c2e:	68fa      	ldr	r2, [r7, #12]
 8017c30:	9202      	str	r2, [sp, #8]
 8017c32:	9301      	str	r3, [sp, #4]
 8017c34:	2302      	movs	r3, #2
 8017c36:	9300      	str	r3, [sp, #0]
 8017c38:	2300      	movs	r3, #0
 8017c3a:	460a      	mov	r2, r1
 8017c3c:	4910      	ldr	r1, [pc, #64]	; (8017c80 <xTimerCreateTimerTask+0x84>)
 8017c3e:	4811      	ldr	r0, [pc, #68]	; (8017c84 <xTimerCreateTimerTask+0x88>)
 8017c40:	f7fe ff34 	bl	8016aac <xTaskCreateStatic>
 8017c44:	4603      	mov	r3, r0
 8017c46:	4a10      	ldr	r2, [pc, #64]	; (8017c88 <xTimerCreateTimerTask+0x8c>)
 8017c48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8017c4a:	4b0f      	ldr	r3, [pc, #60]	; (8017c88 <xTimerCreateTimerTask+0x8c>)
 8017c4c:	681b      	ldr	r3, [r3, #0]
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	d001      	beq.n	8017c56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8017c52:	2301      	movs	r3, #1
 8017c54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8017c56:	697b      	ldr	r3, [r7, #20]
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d10a      	bne.n	8017c72 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8017c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c60:	f383 8811 	msr	BASEPRI, r3
 8017c64:	f3bf 8f6f 	isb	sy
 8017c68:	f3bf 8f4f 	dsb	sy
 8017c6c:	613b      	str	r3, [r7, #16]
}
 8017c6e:	bf00      	nop
 8017c70:	e7fe      	b.n	8017c70 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8017c72:	697b      	ldr	r3, [r7, #20]
}
 8017c74:	4618      	mov	r0, r3
 8017c76:	3718      	adds	r7, #24
 8017c78:	46bd      	mov	sp, r7
 8017c7a:	bd80      	pop	{r7, pc}
 8017c7c:	20001524 	.word	0x20001524
 8017c80:	080214b4 	.word	0x080214b4
 8017c84:	08017dc1 	.word	0x08017dc1
 8017c88:	20001528 	.word	0x20001528

08017c8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8017c8c:	b580      	push	{r7, lr}
 8017c8e:	b08a      	sub	sp, #40	; 0x28
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	60f8      	str	r0, [r7, #12]
 8017c94:	60b9      	str	r1, [r7, #8]
 8017c96:	607a      	str	r2, [r7, #4]
 8017c98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8017c9e:	68fb      	ldr	r3, [r7, #12]
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	d10a      	bne.n	8017cba <xTimerGenericCommand+0x2e>
	__asm volatile
 8017ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ca8:	f383 8811 	msr	BASEPRI, r3
 8017cac:	f3bf 8f6f 	isb	sy
 8017cb0:	f3bf 8f4f 	dsb	sy
 8017cb4:	623b      	str	r3, [r7, #32]
}
 8017cb6:	bf00      	nop
 8017cb8:	e7fe      	b.n	8017cb8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8017cba:	4b1a      	ldr	r3, [pc, #104]	; (8017d24 <xTimerGenericCommand+0x98>)
 8017cbc:	681b      	ldr	r3, [r3, #0]
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d02a      	beq.n	8017d18 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8017cc2:	68bb      	ldr	r3, [r7, #8]
 8017cc4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8017cca:	68fb      	ldr	r3, [r7, #12]
 8017ccc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8017cce:	68bb      	ldr	r3, [r7, #8]
 8017cd0:	2b05      	cmp	r3, #5
 8017cd2:	dc18      	bgt.n	8017d06 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8017cd4:	f7ff fdb4 	bl	8017840 <xTaskGetSchedulerState>
 8017cd8:	4603      	mov	r3, r0
 8017cda:	2b02      	cmp	r3, #2
 8017cdc:	d109      	bne.n	8017cf2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8017cde:	4b11      	ldr	r3, [pc, #68]	; (8017d24 <xTimerGenericCommand+0x98>)
 8017ce0:	6818      	ldr	r0, [r3, #0]
 8017ce2:	f107 0110 	add.w	r1, r7, #16
 8017ce6:	2300      	movs	r3, #0
 8017ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017cea:	f7fe f879 	bl	8015de0 <xQueueGenericSend>
 8017cee:	6278      	str	r0, [r7, #36]	; 0x24
 8017cf0:	e012      	b.n	8017d18 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8017cf2:	4b0c      	ldr	r3, [pc, #48]	; (8017d24 <xTimerGenericCommand+0x98>)
 8017cf4:	6818      	ldr	r0, [r3, #0]
 8017cf6:	f107 0110 	add.w	r1, r7, #16
 8017cfa:	2300      	movs	r3, #0
 8017cfc:	2200      	movs	r2, #0
 8017cfe:	f7fe f86f 	bl	8015de0 <xQueueGenericSend>
 8017d02:	6278      	str	r0, [r7, #36]	; 0x24
 8017d04:	e008      	b.n	8017d18 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8017d06:	4b07      	ldr	r3, [pc, #28]	; (8017d24 <xTimerGenericCommand+0x98>)
 8017d08:	6818      	ldr	r0, [r3, #0]
 8017d0a:	f107 0110 	add.w	r1, r7, #16
 8017d0e:	2300      	movs	r3, #0
 8017d10:	683a      	ldr	r2, [r7, #0]
 8017d12:	f7fe f963 	bl	8015fdc <xQueueGenericSendFromISR>
 8017d16:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8017d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017d1a:	4618      	mov	r0, r3
 8017d1c:	3728      	adds	r7, #40	; 0x28
 8017d1e:	46bd      	mov	sp, r7
 8017d20:	bd80      	pop	{r7, pc}
 8017d22:	bf00      	nop
 8017d24:	20001524 	.word	0x20001524

08017d28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8017d28:	b580      	push	{r7, lr}
 8017d2a:	b088      	sub	sp, #32
 8017d2c:	af02      	add	r7, sp, #8
 8017d2e:	6078      	str	r0, [r7, #4]
 8017d30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017d32:	4b22      	ldr	r3, [pc, #136]	; (8017dbc <prvProcessExpiredTimer+0x94>)
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	68db      	ldr	r3, [r3, #12]
 8017d38:	68db      	ldr	r3, [r3, #12]
 8017d3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017d3c:	697b      	ldr	r3, [r7, #20]
 8017d3e:	3304      	adds	r3, #4
 8017d40:	4618      	mov	r0, r3
 8017d42:	f7fd fe7b 	bl	8015a3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017d46:	697b      	ldr	r3, [r7, #20]
 8017d48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017d4c:	f003 0304 	and.w	r3, r3, #4
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d022      	beq.n	8017d9a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8017d54:	697b      	ldr	r3, [r7, #20]
 8017d56:	699a      	ldr	r2, [r3, #24]
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	18d1      	adds	r1, r2, r3
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	683a      	ldr	r2, [r7, #0]
 8017d60:	6978      	ldr	r0, [r7, #20]
 8017d62:	f000 f8d1 	bl	8017f08 <prvInsertTimerInActiveList>
 8017d66:	4603      	mov	r3, r0
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d01f      	beq.n	8017dac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017d6c:	2300      	movs	r3, #0
 8017d6e:	9300      	str	r3, [sp, #0]
 8017d70:	2300      	movs	r3, #0
 8017d72:	687a      	ldr	r2, [r7, #4]
 8017d74:	2100      	movs	r1, #0
 8017d76:	6978      	ldr	r0, [r7, #20]
 8017d78:	f7ff ff88 	bl	8017c8c <xTimerGenericCommand>
 8017d7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8017d7e:	693b      	ldr	r3, [r7, #16]
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	d113      	bne.n	8017dac <prvProcessExpiredTimer+0x84>
	__asm volatile
 8017d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d88:	f383 8811 	msr	BASEPRI, r3
 8017d8c:	f3bf 8f6f 	isb	sy
 8017d90:	f3bf 8f4f 	dsb	sy
 8017d94:	60fb      	str	r3, [r7, #12]
}
 8017d96:	bf00      	nop
 8017d98:	e7fe      	b.n	8017d98 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017d9a:	697b      	ldr	r3, [r7, #20]
 8017d9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017da0:	f023 0301 	bic.w	r3, r3, #1
 8017da4:	b2da      	uxtb	r2, r3
 8017da6:	697b      	ldr	r3, [r7, #20]
 8017da8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017dac:	697b      	ldr	r3, [r7, #20]
 8017dae:	6a1b      	ldr	r3, [r3, #32]
 8017db0:	6978      	ldr	r0, [r7, #20]
 8017db2:	4798      	blx	r3
}
 8017db4:	bf00      	nop
 8017db6:	3718      	adds	r7, #24
 8017db8:	46bd      	mov	sp, r7
 8017dba:	bd80      	pop	{r7, pc}
 8017dbc:	2000151c 	.word	0x2000151c

08017dc0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8017dc0:	b580      	push	{r7, lr}
 8017dc2:	b084      	sub	sp, #16
 8017dc4:	af00      	add	r7, sp, #0
 8017dc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017dc8:	f107 0308 	add.w	r3, r7, #8
 8017dcc:	4618      	mov	r0, r3
 8017dce:	f000 f857 	bl	8017e80 <prvGetNextExpireTime>
 8017dd2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8017dd4:	68bb      	ldr	r3, [r7, #8]
 8017dd6:	4619      	mov	r1, r3
 8017dd8:	68f8      	ldr	r0, [r7, #12]
 8017dda:	f000 f803 	bl	8017de4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8017dde:	f000 f8d5 	bl	8017f8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017de2:	e7f1      	b.n	8017dc8 <prvTimerTask+0x8>

08017de4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8017de4:	b580      	push	{r7, lr}
 8017de6:	b084      	sub	sp, #16
 8017de8:	af00      	add	r7, sp, #0
 8017dea:	6078      	str	r0, [r7, #4]
 8017dec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8017dee:	f7ff f92b 	bl	8017048 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017df2:	f107 0308 	add.w	r3, r7, #8
 8017df6:	4618      	mov	r0, r3
 8017df8:	f000 f866 	bl	8017ec8 <prvSampleTimeNow>
 8017dfc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8017dfe:	68bb      	ldr	r3, [r7, #8]
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	d130      	bne.n	8017e66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8017e04:	683b      	ldr	r3, [r7, #0]
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d10a      	bne.n	8017e20 <prvProcessTimerOrBlockTask+0x3c>
 8017e0a:	687a      	ldr	r2, [r7, #4]
 8017e0c:	68fb      	ldr	r3, [r7, #12]
 8017e0e:	429a      	cmp	r2, r3
 8017e10:	d806      	bhi.n	8017e20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8017e12:	f7ff f927 	bl	8017064 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8017e16:	68f9      	ldr	r1, [r7, #12]
 8017e18:	6878      	ldr	r0, [r7, #4]
 8017e1a:	f7ff ff85 	bl	8017d28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8017e1e:	e024      	b.n	8017e6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8017e20:	683b      	ldr	r3, [r7, #0]
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	d008      	beq.n	8017e38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8017e26:	4b13      	ldr	r3, [pc, #76]	; (8017e74 <prvProcessTimerOrBlockTask+0x90>)
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	681b      	ldr	r3, [r3, #0]
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	d101      	bne.n	8017e34 <prvProcessTimerOrBlockTask+0x50>
 8017e30:	2301      	movs	r3, #1
 8017e32:	e000      	b.n	8017e36 <prvProcessTimerOrBlockTask+0x52>
 8017e34:	2300      	movs	r3, #0
 8017e36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8017e38:	4b0f      	ldr	r3, [pc, #60]	; (8017e78 <prvProcessTimerOrBlockTask+0x94>)
 8017e3a:	6818      	ldr	r0, [r3, #0]
 8017e3c:	687a      	ldr	r2, [r7, #4]
 8017e3e:	68fb      	ldr	r3, [r7, #12]
 8017e40:	1ad3      	subs	r3, r2, r3
 8017e42:	683a      	ldr	r2, [r7, #0]
 8017e44:	4619      	mov	r1, r3
 8017e46:	f7fe fdfd 	bl	8016a44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8017e4a:	f7ff f90b 	bl	8017064 <xTaskResumeAll>
 8017e4e:	4603      	mov	r3, r0
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d10a      	bne.n	8017e6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8017e54:	4b09      	ldr	r3, [pc, #36]	; (8017e7c <prvProcessTimerOrBlockTask+0x98>)
 8017e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017e5a:	601a      	str	r2, [r3, #0]
 8017e5c:	f3bf 8f4f 	dsb	sy
 8017e60:	f3bf 8f6f 	isb	sy
}
 8017e64:	e001      	b.n	8017e6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8017e66:	f7ff f8fd 	bl	8017064 <xTaskResumeAll>
}
 8017e6a:	bf00      	nop
 8017e6c:	3710      	adds	r7, #16
 8017e6e:	46bd      	mov	sp, r7
 8017e70:	bd80      	pop	{r7, pc}
 8017e72:	bf00      	nop
 8017e74:	20001520 	.word	0x20001520
 8017e78:	20001524 	.word	0x20001524
 8017e7c:	e000ed04 	.word	0xe000ed04

08017e80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8017e80:	b480      	push	{r7}
 8017e82:	b085      	sub	sp, #20
 8017e84:	af00      	add	r7, sp, #0
 8017e86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8017e88:	4b0e      	ldr	r3, [pc, #56]	; (8017ec4 <prvGetNextExpireTime+0x44>)
 8017e8a:	681b      	ldr	r3, [r3, #0]
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d101      	bne.n	8017e96 <prvGetNextExpireTime+0x16>
 8017e92:	2201      	movs	r2, #1
 8017e94:	e000      	b.n	8017e98 <prvGetNextExpireTime+0x18>
 8017e96:	2200      	movs	r2, #0
 8017e98:	687b      	ldr	r3, [r7, #4]
 8017e9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	681b      	ldr	r3, [r3, #0]
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d105      	bne.n	8017eb0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017ea4:	4b07      	ldr	r3, [pc, #28]	; (8017ec4 <prvGetNextExpireTime+0x44>)
 8017ea6:	681b      	ldr	r3, [r3, #0]
 8017ea8:	68db      	ldr	r3, [r3, #12]
 8017eaa:	681b      	ldr	r3, [r3, #0]
 8017eac:	60fb      	str	r3, [r7, #12]
 8017eae:	e001      	b.n	8017eb4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8017eb0:	2300      	movs	r3, #0
 8017eb2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8017eb4:	68fb      	ldr	r3, [r7, #12]
}
 8017eb6:	4618      	mov	r0, r3
 8017eb8:	3714      	adds	r7, #20
 8017eba:	46bd      	mov	sp, r7
 8017ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ec0:	4770      	bx	lr
 8017ec2:	bf00      	nop
 8017ec4:	2000151c 	.word	0x2000151c

08017ec8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8017ec8:	b580      	push	{r7, lr}
 8017eca:	b084      	sub	sp, #16
 8017ecc:	af00      	add	r7, sp, #0
 8017ece:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8017ed0:	f7ff f966 	bl	80171a0 <xTaskGetTickCount>
 8017ed4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8017ed6:	4b0b      	ldr	r3, [pc, #44]	; (8017f04 <prvSampleTimeNow+0x3c>)
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	68fa      	ldr	r2, [r7, #12]
 8017edc:	429a      	cmp	r2, r3
 8017ede:	d205      	bcs.n	8017eec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8017ee0:	f000 f936 	bl	8018150 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	2201      	movs	r2, #1
 8017ee8:	601a      	str	r2, [r3, #0]
 8017eea:	e002      	b.n	8017ef2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	2200      	movs	r2, #0
 8017ef0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8017ef2:	4a04      	ldr	r2, [pc, #16]	; (8017f04 <prvSampleTimeNow+0x3c>)
 8017ef4:	68fb      	ldr	r3, [r7, #12]
 8017ef6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8017ef8:	68fb      	ldr	r3, [r7, #12]
}
 8017efa:	4618      	mov	r0, r3
 8017efc:	3710      	adds	r7, #16
 8017efe:	46bd      	mov	sp, r7
 8017f00:	bd80      	pop	{r7, pc}
 8017f02:	bf00      	nop
 8017f04:	2000152c 	.word	0x2000152c

08017f08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8017f08:	b580      	push	{r7, lr}
 8017f0a:	b086      	sub	sp, #24
 8017f0c:	af00      	add	r7, sp, #0
 8017f0e:	60f8      	str	r0, [r7, #12]
 8017f10:	60b9      	str	r1, [r7, #8]
 8017f12:	607a      	str	r2, [r7, #4]
 8017f14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8017f16:	2300      	movs	r3, #0
 8017f18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8017f1a:	68fb      	ldr	r3, [r7, #12]
 8017f1c:	68ba      	ldr	r2, [r7, #8]
 8017f1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017f20:	68fb      	ldr	r3, [r7, #12]
 8017f22:	68fa      	ldr	r2, [r7, #12]
 8017f24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8017f26:	68ba      	ldr	r2, [r7, #8]
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	429a      	cmp	r2, r3
 8017f2c:	d812      	bhi.n	8017f54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017f2e:	687a      	ldr	r2, [r7, #4]
 8017f30:	683b      	ldr	r3, [r7, #0]
 8017f32:	1ad2      	subs	r2, r2, r3
 8017f34:	68fb      	ldr	r3, [r7, #12]
 8017f36:	699b      	ldr	r3, [r3, #24]
 8017f38:	429a      	cmp	r2, r3
 8017f3a:	d302      	bcc.n	8017f42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8017f3c:	2301      	movs	r3, #1
 8017f3e:	617b      	str	r3, [r7, #20]
 8017f40:	e01b      	b.n	8017f7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8017f42:	4b10      	ldr	r3, [pc, #64]	; (8017f84 <prvInsertTimerInActiveList+0x7c>)
 8017f44:	681a      	ldr	r2, [r3, #0]
 8017f46:	68fb      	ldr	r3, [r7, #12]
 8017f48:	3304      	adds	r3, #4
 8017f4a:	4619      	mov	r1, r3
 8017f4c:	4610      	mov	r0, r2
 8017f4e:	f7fd fd3c 	bl	80159ca <vListInsert>
 8017f52:	e012      	b.n	8017f7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8017f54:	687a      	ldr	r2, [r7, #4]
 8017f56:	683b      	ldr	r3, [r7, #0]
 8017f58:	429a      	cmp	r2, r3
 8017f5a:	d206      	bcs.n	8017f6a <prvInsertTimerInActiveList+0x62>
 8017f5c:	68ba      	ldr	r2, [r7, #8]
 8017f5e:	683b      	ldr	r3, [r7, #0]
 8017f60:	429a      	cmp	r2, r3
 8017f62:	d302      	bcc.n	8017f6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8017f64:	2301      	movs	r3, #1
 8017f66:	617b      	str	r3, [r7, #20]
 8017f68:	e007      	b.n	8017f7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017f6a:	4b07      	ldr	r3, [pc, #28]	; (8017f88 <prvInsertTimerInActiveList+0x80>)
 8017f6c:	681a      	ldr	r2, [r3, #0]
 8017f6e:	68fb      	ldr	r3, [r7, #12]
 8017f70:	3304      	adds	r3, #4
 8017f72:	4619      	mov	r1, r3
 8017f74:	4610      	mov	r0, r2
 8017f76:	f7fd fd28 	bl	80159ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8017f7a:	697b      	ldr	r3, [r7, #20]
}
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	3718      	adds	r7, #24
 8017f80:	46bd      	mov	sp, r7
 8017f82:	bd80      	pop	{r7, pc}
 8017f84:	20001520 	.word	0x20001520
 8017f88:	2000151c 	.word	0x2000151c

08017f8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8017f8c:	b580      	push	{r7, lr}
 8017f8e:	b08e      	sub	sp, #56	; 0x38
 8017f90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017f92:	e0ca      	b.n	801812a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	da18      	bge.n	8017fcc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8017f9a:	1d3b      	adds	r3, r7, #4
 8017f9c:	3304      	adds	r3, #4
 8017f9e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8017fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d10a      	bne.n	8017fbc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8017fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017faa:	f383 8811 	msr	BASEPRI, r3
 8017fae:	f3bf 8f6f 	isb	sy
 8017fb2:	f3bf 8f4f 	dsb	sy
 8017fb6:	61fb      	str	r3, [r7, #28]
}
 8017fb8:	bf00      	nop
 8017fba:	e7fe      	b.n	8017fba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8017fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fbe:	681b      	ldr	r3, [r3, #0]
 8017fc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017fc2:	6850      	ldr	r0, [r2, #4]
 8017fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017fc6:	6892      	ldr	r2, [r2, #8]
 8017fc8:	4611      	mov	r1, r2
 8017fca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	f2c0 80aa 	blt.w	8018128 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8017fd4:	68fb      	ldr	r3, [r7, #12]
 8017fd6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8017fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fda:	695b      	ldr	r3, [r3, #20]
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d004      	beq.n	8017fea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fe2:	3304      	adds	r3, #4
 8017fe4:	4618      	mov	r0, r3
 8017fe6:	f7fd fd29 	bl	8015a3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017fea:	463b      	mov	r3, r7
 8017fec:	4618      	mov	r0, r3
 8017fee:	f7ff ff6b 	bl	8017ec8 <prvSampleTimeNow>
 8017ff2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	2b09      	cmp	r3, #9
 8017ff8:	f200 8097 	bhi.w	801812a <prvProcessReceivedCommands+0x19e>
 8017ffc:	a201      	add	r2, pc, #4	; (adr r2, 8018004 <prvProcessReceivedCommands+0x78>)
 8017ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018002:	bf00      	nop
 8018004:	0801802d 	.word	0x0801802d
 8018008:	0801802d 	.word	0x0801802d
 801800c:	0801802d 	.word	0x0801802d
 8018010:	080180a1 	.word	0x080180a1
 8018014:	080180b5 	.word	0x080180b5
 8018018:	080180ff 	.word	0x080180ff
 801801c:	0801802d 	.word	0x0801802d
 8018020:	0801802d 	.word	0x0801802d
 8018024:	080180a1 	.word	0x080180a1
 8018028:	080180b5 	.word	0x080180b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801802c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801802e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018032:	f043 0301 	orr.w	r3, r3, #1
 8018036:	b2da      	uxtb	r2, r3
 8018038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801803a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801803e:	68ba      	ldr	r2, [r7, #8]
 8018040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018042:	699b      	ldr	r3, [r3, #24]
 8018044:	18d1      	adds	r1, r2, r3
 8018046:	68bb      	ldr	r3, [r7, #8]
 8018048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801804a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801804c:	f7ff ff5c 	bl	8017f08 <prvInsertTimerInActiveList>
 8018050:	4603      	mov	r3, r0
 8018052:	2b00      	cmp	r3, #0
 8018054:	d069      	beq.n	801812a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018058:	6a1b      	ldr	r3, [r3, #32]
 801805a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801805c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801805e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018060:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018064:	f003 0304 	and.w	r3, r3, #4
 8018068:	2b00      	cmp	r3, #0
 801806a:	d05e      	beq.n	801812a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801806c:	68ba      	ldr	r2, [r7, #8]
 801806e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018070:	699b      	ldr	r3, [r3, #24]
 8018072:	441a      	add	r2, r3
 8018074:	2300      	movs	r3, #0
 8018076:	9300      	str	r3, [sp, #0]
 8018078:	2300      	movs	r3, #0
 801807a:	2100      	movs	r1, #0
 801807c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801807e:	f7ff fe05 	bl	8017c8c <xTimerGenericCommand>
 8018082:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8018084:	6a3b      	ldr	r3, [r7, #32]
 8018086:	2b00      	cmp	r3, #0
 8018088:	d14f      	bne.n	801812a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801808a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801808e:	f383 8811 	msr	BASEPRI, r3
 8018092:	f3bf 8f6f 	isb	sy
 8018096:	f3bf 8f4f 	dsb	sy
 801809a:	61bb      	str	r3, [r7, #24]
}
 801809c:	bf00      	nop
 801809e:	e7fe      	b.n	801809e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80180a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80180a6:	f023 0301 	bic.w	r3, r3, #1
 80180aa:	b2da      	uxtb	r2, r3
 80180ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80180b2:	e03a      	b.n	801812a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80180b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80180ba:	f043 0301 	orr.w	r3, r3, #1
 80180be:	b2da      	uxtb	r2, r3
 80180c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80180c6:	68ba      	ldr	r2, [r7, #8]
 80180c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80180cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180ce:	699b      	ldr	r3, [r3, #24]
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d10a      	bne.n	80180ea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80180d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180d8:	f383 8811 	msr	BASEPRI, r3
 80180dc:	f3bf 8f6f 	isb	sy
 80180e0:	f3bf 8f4f 	dsb	sy
 80180e4:	617b      	str	r3, [r7, #20]
}
 80180e6:	bf00      	nop
 80180e8:	e7fe      	b.n	80180e8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80180ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180ec:	699a      	ldr	r2, [r3, #24]
 80180ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180f0:	18d1      	adds	r1, r2, r3
 80180f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80180f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80180f8:	f7ff ff06 	bl	8017f08 <prvInsertTimerInActiveList>
					break;
 80180fc:	e015      	b.n	801812a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80180fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018100:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018104:	f003 0302 	and.w	r3, r3, #2
 8018108:	2b00      	cmp	r3, #0
 801810a:	d103      	bne.n	8018114 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801810c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801810e:	f000 fbdf 	bl	80188d0 <vPortFree>
 8018112:	e00a      	b.n	801812a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018116:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801811a:	f023 0301 	bic.w	r3, r3, #1
 801811e:	b2da      	uxtb	r2, r3
 8018120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018122:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8018126:	e000      	b.n	801812a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8018128:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801812a:	4b08      	ldr	r3, [pc, #32]	; (801814c <prvProcessReceivedCommands+0x1c0>)
 801812c:	681b      	ldr	r3, [r3, #0]
 801812e:	1d39      	adds	r1, r7, #4
 8018130:	2200      	movs	r2, #0
 8018132:	4618      	mov	r0, r3
 8018134:	f7fe f87a 	bl	801622c <xQueueReceive>
 8018138:	4603      	mov	r3, r0
 801813a:	2b00      	cmp	r3, #0
 801813c:	f47f af2a 	bne.w	8017f94 <prvProcessReceivedCommands+0x8>
	}
}
 8018140:	bf00      	nop
 8018142:	bf00      	nop
 8018144:	3730      	adds	r7, #48	; 0x30
 8018146:	46bd      	mov	sp, r7
 8018148:	bd80      	pop	{r7, pc}
 801814a:	bf00      	nop
 801814c:	20001524 	.word	0x20001524

08018150 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8018150:	b580      	push	{r7, lr}
 8018152:	b088      	sub	sp, #32
 8018154:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018156:	e048      	b.n	80181ea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018158:	4b2d      	ldr	r3, [pc, #180]	; (8018210 <prvSwitchTimerLists+0xc0>)
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	68db      	ldr	r3, [r3, #12]
 801815e:	681b      	ldr	r3, [r3, #0]
 8018160:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018162:	4b2b      	ldr	r3, [pc, #172]	; (8018210 <prvSwitchTimerLists+0xc0>)
 8018164:	681b      	ldr	r3, [r3, #0]
 8018166:	68db      	ldr	r3, [r3, #12]
 8018168:	68db      	ldr	r3, [r3, #12]
 801816a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801816c:	68fb      	ldr	r3, [r7, #12]
 801816e:	3304      	adds	r3, #4
 8018170:	4618      	mov	r0, r3
 8018172:	f7fd fc63 	bl	8015a3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018176:	68fb      	ldr	r3, [r7, #12]
 8018178:	6a1b      	ldr	r3, [r3, #32]
 801817a:	68f8      	ldr	r0, [r7, #12]
 801817c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801817e:	68fb      	ldr	r3, [r7, #12]
 8018180:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018184:	f003 0304 	and.w	r3, r3, #4
 8018188:	2b00      	cmp	r3, #0
 801818a:	d02e      	beq.n	80181ea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801818c:	68fb      	ldr	r3, [r7, #12]
 801818e:	699b      	ldr	r3, [r3, #24]
 8018190:	693a      	ldr	r2, [r7, #16]
 8018192:	4413      	add	r3, r2
 8018194:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8018196:	68ba      	ldr	r2, [r7, #8]
 8018198:	693b      	ldr	r3, [r7, #16]
 801819a:	429a      	cmp	r2, r3
 801819c:	d90e      	bls.n	80181bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801819e:	68fb      	ldr	r3, [r7, #12]
 80181a0:	68ba      	ldr	r2, [r7, #8]
 80181a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80181a4:	68fb      	ldr	r3, [r7, #12]
 80181a6:	68fa      	ldr	r2, [r7, #12]
 80181a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80181aa:	4b19      	ldr	r3, [pc, #100]	; (8018210 <prvSwitchTimerLists+0xc0>)
 80181ac:	681a      	ldr	r2, [r3, #0]
 80181ae:	68fb      	ldr	r3, [r7, #12]
 80181b0:	3304      	adds	r3, #4
 80181b2:	4619      	mov	r1, r3
 80181b4:	4610      	mov	r0, r2
 80181b6:	f7fd fc08 	bl	80159ca <vListInsert>
 80181ba:	e016      	b.n	80181ea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80181bc:	2300      	movs	r3, #0
 80181be:	9300      	str	r3, [sp, #0]
 80181c0:	2300      	movs	r3, #0
 80181c2:	693a      	ldr	r2, [r7, #16]
 80181c4:	2100      	movs	r1, #0
 80181c6:	68f8      	ldr	r0, [r7, #12]
 80181c8:	f7ff fd60 	bl	8017c8c <xTimerGenericCommand>
 80181cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	d10a      	bne.n	80181ea <prvSwitchTimerLists+0x9a>
	__asm volatile
 80181d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181d8:	f383 8811 	msr	BASEPRI, r3
 80181dc:	f3bf 8f6f 	isb	sy
 80181e0:	f3bf 8f4f 	dsb	sy
 80181e4:	603b      	str	r3, [r7, #0]
}
 80181e6:	bf00      	nop
 80181e8:	e7fe      	b.n	80181e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80181ea:	4b09      	ldr	r3, [pc, #36]	; (8018210 <prvSwitchTimerLists+0xc0>)
 80181ec:	681b      	ldr	r3, [r3, #0]
 80181ee:	681b      	ldr	r3, [r3, #0]
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d1b1      	bne.n	8018158 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80181f4:	4b06      	ldr	r3, [pc, #24]	; (8018210 <prvSwitchTimerLists+0xc0>)
 80181f6:	681b      	ldr	r3, [r3, #0]
 80181f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80181fa:	4b06      	ldr	r3, [pc, #24]	; (8018214 <prvSwitchTimerLists+0xc4>)
 80181fc:	681b      	ldr	r3, [r3, #0]
 80181fe:	4a04      	ldr	r2, [pc, #16]	; (8018210 <prvSwitchTimerLists+0xc0>)
 8018200:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8018202:	4a04      	ldr	r2, [pc, #16]	; (8018214 <prvSwitchTimerLists+0xc4>)
 8018204:	697b      	ldr	r3, [r7, #20]
 8018206:	6013      	str	r3, [r2, #0]
}
 8018208:	bf00      	nop
 801820a:	3718      	adds	r7, #24
 801820c:	46bd      	mov	sp, r7
 801820e:	bd80      	pop	{r7, pc}
 8018210:	2000151c 	.word	0x2000151c
 8018214:	20001520 	.word	0x20001520

08018218 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8018218:	b580      	push	{r7, lr}
 801821a:	b082      	sub	sp, #8
 801821c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801821e:	f000 f969 	bl	80184f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8018222:	4b15      	ldr	r3, [pc, #84]	; (8018278 <prvCheckForValidListAndQueue+0x60>)
 8018224:	681b      	ldr	r3, [r3, #0]
 8018226:	2b00      	cmp	r3, #0
 8018228:	d120      	bne.n	801826c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801822a:	4814      	ldr	r0, [pc, #80]	; (801827c <prvCheckForValidListAndQueue+0x64>)
 801822c:	f7fd fb7c 	bl	8015928 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8018230:	4813      	ldr	r0, [pc, #76]	; (8018280 <prvCheckForValidListAndQueue+0x68>)
 8018232:	f7fd fb79 	bl	8015928 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8018236:	4b13      	ldr	r3, [pc, #76]	; (8018284 <prvCheckForValidListAndQueue+0x6c>)
 8018238:	4a10      	ldr	r2, [pc, #64]	; (801827c <prvCheckForValidListAndQueue+0x64>)
 801823a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801823c:	4b12      	ldr	r3, [pc, #72]	; (8018288 <prvCheckForValidListAndQueue+0x70>)
 801823e:	4a10      	ldr	r2, [pc, #64]	; (8018280 <prvCheckForValidListAndQueue+0x68>)
 8018240:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8018242:	2300      	movs	r3, #0
 8018244:	9300      	str	r3, [sp, #0]
 8018246:	4b11      	ldr	r3, [pc, #68]	; (801828c <prvCheckForValidListAndQueue+0x74>)
 8018248:	4a11      	ldr	r2, [pc, #68]	; (8018290 <prvCheckForValidListAndQueue+0x78>)
 801824a:	2110      	movs	r1, #16
 801824c:	200a      	movs	r0, #10
 801824e:	f7fd fc87 	bl	8015b60 <xQueueGenericCreateStatic>
 8018252:	4603      	mov	r3, r0
 8018254:	4a08      	ldr	r2, [pc, #32]	; (8018278 <prvCheckForValidListAndQueue+0x60>)
 8018256:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8018258:	4b07      	ldr	r3, [pc, #28]	; (8018278 <prvCheckForValidListAndQueue+0x60>)
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	2b00      	cmp	r3, #0
 801825e:	d005      	beq.n	801826c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8018260:	4b05      	ldr	r3, [pc, #20]	; (8018278 <prvCheckForValidListAndQueue+0x60>)
 8018262:	681b      	ldr	r3, [r3, #0]
 8018264:	490b      	ldr	r1, [pc, #44]	; (8018294 <prvCheckForValidListAndQueue+0x7c>)
 8018266:	4618      	mov	r0, r3
 8018268:	f7fe fb98 	bl	801699c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801826c:	f000 f972 	bl	8018554 <vPortExitCritical>
}
 8018270:	bf00      	nop
 8018272:	46bd      	mov	sp, r7
 8018274:	bd80      	pop	{r7, pc}
 8018276:	bf00      	nop
 8018278:	20001524 	.word	0x20001524
 801827c:	200014f4 	.word	0x200014f4
 8018280:	20001508 	.word	0x20001508
 8018284:	2000151c 	.word	0x2000151c
 8018288:	20001520 	.word	0x20001520
 801828c:	200015d0 	.word	0x200015d0
 8018290:	20001530 	.word	0x20001530
 8018294:	080214bc 	.word	0x080214bc

08018298 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018298:	b480      	push	{r7}
 801829a:	b085      	sub	sp, #20
 801829c:	af00      	add	r7, sp, #0
 801829e:	60f8      	str	r0, [r7, #12]
 80182a0:	60b9      	str	r1, [r7, #8]
 80182a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80182a4:	68fb      	ldr	r3, [r7, #12]
 80182a6:	3b04      	subs	r3, #4
 80182a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80182aa:	68fb      	ldr	r3, [r7, #12]
 80182ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80182b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80182b2:	68fb      	ldr	r3, [r7, #12]
 80182b4:	3b04      	subs	r3, #4
 80182b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80182b8:	68bb      	ldr	r3, [r7, #8]
 80182ba:	f023 0201 	bic.w	r2, r3, #1
 80182be:	68fb      	ldr	r3, [r7, #12]
 80182c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80182c2:	68fb      	ldr	r3, [r7, #12]
 80182c4:	3b04      	subs	r3, #4
 80182c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80182c8:	4a0c      	ldr	r2, [pc, #48]	; (80182fc <pxPortInitialiseStack+0x64>)
 80182ca:	68fb      	ldr	r3, [r7, #12]
 80182cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80182ce:	68fb      	ldr	r3, [r7, #12]
 80182d0:	3b14      	subs	r3, #20
 80182d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80182d4:	687a      	ldr	r2, [r7, #4]
 80182d6:	68fb      	ldr	r3, [r7, #12]
 80182d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80182da:	68fb      	ldr	r3, [r7, #12]
 80182dc:	3b04      	subs	r3, #4
 80182de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80182e0:	68fb      	ldr	r3, [r7, #12]
 80182e2:	f06f 0202 	mvn.w	r2, #2
 80182e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80182e8:	68fb      	ldr	r3, [r7, #12]
 80182ea:	3b20      	subs	r3, #32
 80182ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80182ee:	68fb      	ldr	r3, [r7, #12]
}
 80182f0:	4618      	mov	r0, r3
 80182f2:	3714      	adds	r7, #20
 80182f4:	46bd      	mov	sp, r7
 80182f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182fa:	4770      	bx	lr
 80182fc:	08018301 	.word	0x08018301

08018300 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018300:	b480      	push	{r7}
 8018302:	b085      	sub	sp, #20
 8018304:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8018306:	2300      	movs	r3, #0
 8018308:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801830a:	4b12      	ldr	r3, [pc, #72]	; (8018354 <prvTaskExitError+0x54>)
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018312:	d00a      	beq.n	801832a <prvTaskExitError+0x2a>
	__asm volatile
 8018314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018318:	f383 8811 	msr	BASEPRI, r3
 801831c:	f3bf 8f6f 	isb	sy
 8018320:	f3bf 8f4f 	dsb	sy
 8018324:	60fb      	str	r3, [r7, #12]
}
 8018326:	bf00      	nop
 8018328:	e7fe      	b.n	8018328 <prvTaskExitError+0x28>
	__asm volatile
 801832a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801832e:	f383 8811 	msr	BASEPRI, r3
 8018332:	f3bf 8f6f 	isb	sy
 8018336:	f3bf 8f4f 	dsb	sy
 801833a:	60bb      	str	r3, [r7, #8]
}
 801833c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801833e:	bf00      	nop
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	2b00      	cmp	r3, #0
 8018344:	d0fc      	beq.n	8018340 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018346:	bf00      	nop
 8018348:	bf00      	nop
 801834a:	3714      	adds	r7, #20
 801834c:	46bd      	mov	sp, r7
 801834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018352:	4770      	bx	lr
 8018354:	20000188 	.word	0x20000188
	...

08018360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018360:	4b07      	ldr	r3, [pc, #28]	; (8018380 <pxCurrentTCBConst2>)
 8018362:	6819      	ldr	r1, [r3, #0]
 8018364:	6808      	ldr	r0, [r1, #0]
 8018366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801836a:	f380 8809 	msr	PSP, r0
 801836e:	f3bf 8f6f 	isb	sy
 8018372:	f04f 0000 	mov.w	r0, #0
 8018376:	f380 8811 	msr	BASEPRI, r0
 801837a:	4770      	bx	lr
 801837c:	f3af 8000 	nop.w

08018380 <pxCurrentTCBConst2>:
 8018380:	20000ff4 	.word	0x20000ff4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018384:	bf00      	nop
 8018386:	bf00      	nop

08018388 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018388:	4808      	ldr	r0, [pc, #32]	; (80183ac <prvPortStartFirstTask+0x24>)
 801838a:	6800      	ldr	r0, [r0, #0]
 801838c:	6800      	ldr	r0, [r0, #0]
 801838e:	f380 8808 	msr	MSP, r0
 8018392:	f04f 0000 	mov.w	r0, #0
 8018396:	f380 8814 	msr	CONTROL, r0
 801839a:	b662      	cpsie	i
 801839c:	b661      	cpsie	f
 801839e:	f3bf 8f4f 	dsb	sy
 80183a2:	f3bf 8f6f 	isb	sy
 80183a6:	df00      	svc	0
 80183a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80183aa:	bf00      	nop
 80183ac:	e000ed08 	.word	0xe000ed08

080183b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80183b0:	b580      	push	{r7, lr}
 80183b2:	b086      	sub	sp, #24
 80183b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80183b6:	4b46      	ldr	r3, [pc, #280]	; (80184d0 <xPortStartScheduler+0x120>)
 80183b8:	681b      	ldr	r3, [r3, #0]
 80183ba:	4a46      	ldr	r2, [pc, #280]	; (80184d4 <xPortStartScheduler+0x124>)
 80183bc:	4293      	cmp	r3, r2
 80183be:	d10a      	bne.n	80183d6 <xPortStartScheduler+0x26>
	__asm volatile
 80183c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183c4:	f383 8811 	msr	BASEPRI, r3
 80183c8:	f3bf 8f6f 	isb	sy
 80183cc:	f3bf 8f4f 	dsb	sy
 80183d0:	613b      	str	r3, [r7, #16]
}
 80183d2:	bf00      	nop
 80183d4:	e7fe      	b.n	80183d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80183d6:	4b3e      	ldr	r3, [pc, #248]	; (80184d0 <xPortStartScheduler+0x120>)
 80183d8:	681b      	ldr	r3, [r3, #0]
 80183da:	4a3f      	ldr	r2, [pc, #252]	; (80184d8 <xPortStartScheduler+0x128>)
 80183dc:	4293      	cmp	r3, r2
 80183de:	d10a      	bne.n	80183f6 <xPortStartScheduler+0x46>
	__asm volatile
 80183e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183e4:	f383 8811 	msr	BASEPRI, r3
 80183e8:	f3bf 8f6f 	isb	sy
 80183ec:	f3bf 8f4f 	dsb	sy
 80183f0:	60fb      	str	r3, [r7, #12]
}
 80183f2:	bf00      	nop
 80183f4:	e7fe      	b.n	80183f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80183f6:	4b39      	ldr	r3, [pc, #228]	; (80184dc <xPortStartScheduler+0x12c>)
 80183f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80183fa:	697b      	ldr	r3, [r7, #20]
 80183fc:	781b      	ldrb	r3, [r3, #0]
 80183fe:	b2db      	uxtb	r3, r3
 8018400:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018402:	697b      	ldr	r3, [r7, #20]
 8018404:	22ff      	movs	r2, #255	; 0xff
 8018406:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018408:	697b      	ldr	r3, [r7, #20]
 801840a:	781b      	ldrb	r3, [r3, #0]
 801840c:	b2db      	uxtb	r3, r3
 801840e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018410:	78fb      	ldrb	r3, [r7, #3]
 8018412:	b2db      	uxtb	r3, r3
 8018414:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8018418:	b2da      	uxtb	r2, r3
 801841a:	4b31      	ldr	r3, [pc, #196]	; (80184e0 <xPortStartScheduler+0x130>)
 801841c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801841e:	4b31      	ldr	r3, [pc, #196]	; (80184e4 <xPortStartScheduler+0x134>)
 8018420:	2207      	movs	r2, #7
 8018422:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018424:	e009      	b.n	801843a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8018426:	4b2f      	ldr	r3, [pc, #188]	; (80184e4 <xPortStartScheduler+0x134>)
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	3b01      	subs	r3, #1
 801842c:	4a2d      	ldr	r2, [pc, #180]	; (80184e4 <xPortStartScheduler+0x134>)
 801842e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018430:	78fb      	ldrb	r3, [r7, #3]
 8018432:	b2db      	uxtb	r3, r3
 8018434:	005b      	lsls	r3, r3, #1
 8018436:	b2db      	uxtb	r3, r3
 8018438:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801843a:	78fb      	ldrb	r3, [r7, #3]
 801843c:	b2db      	uxtb	r3, r3
 801843e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018442:	2b80      	cmp	r3, #128	; 0x80
 8018444:	d0ef      	beq.n	8018426 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018446:	4b27      	ldr	r3, [pc, #156]	; (80184e4 <xPortStartScheduler+0x134>)
 8018448:	681b      	ldr	r3, [r3, #0]
 801844a:	f1c3 0307 	rsb	r3, r3, #7
 801844e:	2b04      	cmp	r3, #4
 8018450:	d00a      	beq.n	8018468 <xPortStartScheduler+0xb8>
	__asm volatile
 8018452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018456:	f383 8811 	msr	BASEPRI, r3
 801845a:	f3bf 8f6f 	isb	sy
 801845e:	f3bf 8f4f 	dsb	sy
 8018462:	60bb      	str	r3, [r7, #8]
}
 8018464:	bf00      	nop
 8018466:	e7fe      	b.n	8018466 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018468:	4b1e      	ldr	r3, [pc, #120]	; (80184e4 <xPortStartScheduler+0x134>)
 801846a:	681b      	ldr	r3, [r3, #0]
 801846c:	021b      	lsls	r3, r3, #8
 801846e:	4a1d      	ldr	r2, [pc, #116]	; (80184e4 <xPortStartScheduler+0x134>)
 8018470:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018472:	4b1c      	ldr	r3, [pc, #112]	; (80184e4 <xPortStartScheduler+0x134>)
 8018474:	681b      	ldr	r3, [r3, #0]
 8018476:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801847a:	4a1a      	ldr	r2, [pc, #104]	; (80184e4 <xPortStartScheduler+0x134>)
 801847c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	b2da      	uxtb	r2, r3
 8018482:	697b      	ldr	r3, [r7, #20]
 8018484:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018486:	4b18      	ldr	r3, [pc, #96]	; (80184e8 <xPortStartScheduler+0x138>)
 8018488:	681b      	ldr	r3, [r3, #0]
 801848a:	4a17      	ldr	r2, [pc, #92]	; (80184e8 <xPortStartScheduler+0x138>)
 801848c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018490:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018492:	4b15      	ldr	r3, [pc, #84]	; (80184e8 <xPortStartScheduler+0x138>)
 8018494:	681b      	ldr	r3, [r3, #0]
 8018496:	4a14      	ldr	r2, [pc, #80]	; (80184e8 <xPortStartScheduler+0x138>)
 8018498:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801849c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801849e:	f000 f8dd 	bl	801865c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80184a2:	4b12      	ldr	r3, [pc, #72]	; (80184ec <xPortStartScheduler+0x13c>)
 80184a4:	2200      	movs	r2, #0
 80184a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80184a8:	f000 f8fc 	bl	80186a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80184ac:	4b10      	ldr	r3, [pc, #64]	; (80184f0 <xPortStartScheduler+0x140>)
 80184ae:	681b      	ldr	r3, [r3, #0]
 80184b0:	4a0f      	ldr	r2, [pc, #60]	; (80184f0 <xPortStartScheduler+0x140>)
 80184b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80184b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80184b8:	f7ff ff66 	bl	8018388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80184bc:	f7fe ff3a 	bl	8017334 <vTaskSwitchContext>
	prvTaskExitError();
 80184c0:	f7ff ff1e 	bl	8018300 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80184c4:	2300      	movs	r3, #0
}
 80184c6:	4618      	mov	r0, r3
 80184c8:	3718      	adds	r7, #24
 80184ca:	46bd      	mov	sp, r7
 80184cc:	bd80      	pop	{r7, pc}
 80184ce:	bf00      	nop
 80184d0:	e000ed00 	.word	0xe000ed00
 80184d4:	410fc271 	.word	0x410fc271
 80184d8:	410fc270 	.word	0x410fc270
 80184dc:	e000e400 	.word	0xe000e400
 80184e0:	20001620 	.word	0x20001620
 80184e4:	20001624 	.word	0x20001624
 80184e8:	e000ed20 	.word	0xe000ed20
 80184ec:	20000188 	.word	0x20000188
 80184f0:	e000ef34 	.word	0xe000ef34

080184f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80184f4:	b480      	push	{r7}
 80184f6:	b083      	sub	sp, #12
 80184f8:	af00      	add	r7, sp, #0
	__asm volatile
 80184fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184fe:	f383 8811 	msr	BASEPRI, r3
 8018502:	f3bf 8f6f 	isb	sy
 8018506:	f3bf 8f4f 	dsb	sy
 801850a:	607b      	str	r3, [r7, #4]
}
 801850c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801850e:	4b0f      	ldr	r3, [pc, #60]	; (801854c <vPortEnterCritical+0x58>)
 8018510:	681b      	ldr	r3, [r3, #0]
 8018512:	3301      	adds	r3, #1
 8018514:	4a0d      	ldr	r2, [pc, #52]	; (801854c <vPortEnterCritical+0x58>)
 8018516:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8018518:	4b0c      	ldr	r3, [pc, #48]	; (801854c <vPortEnterCritical+0x58>)
 801851a:	681b      	ldr	r3, [r3, #0]
 801851c:	2b01      	cmp	r3, #1
 801851e:	d10f      	bne.n	8018540 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018520:	4b0b      	ldr	r3, [pc, #44]	; (8018550 <vPortEnterCritical+0x5c>)
 8018522:	681b      	ldr	r3, [r3, #0]
 8018524:	b2db      	uxtb	r3, r3
 8018526:	2b00      	cmp	r3, #0
 8018528:	d00a      	beq.n	8018540 <vPortEnterCritical+0x4c>
	__asm volatile
 801852a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801852e:	f383 8811 	msr	BASEPRI, r3
 8018532:	f3bf 8f6f 	isb	sy
 8018536:	f3bf 8f4f 	dsb	sy
 801853a:	603b      	str	r3, [r7, #0]
}
 801853c:	bf00      	nop
 801853e:	e7fe      	b.n	801853e <vPortEnterCritical+0x4a>
	}
}
 8018540:	bf00      	nop
 8018542:	370c      	adds	r7, #12
 8018544:	46bd      	mov	sp, r7
 8018546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801854a:	4770      	bx	lr
 801854c:	20000188 	.word	0x20000188
 8018550:	e000ed04 	.word	0xe000ed04

08018554 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018554:	b480      	push	{r7}
 8018556:	b083      	sub	sp, #12
 8018558:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801855a:	4b12      	ldr	r3, [pc, #72]	; (80185a4 <vPortExitCritical+0x50>)
 801855c:	681b      	ldr	r3, [r3, #0]
 801855e:	2b00      	cmp	r3, #0
 8018560:	d10a      	bne.n	8018578 <vPortExitCritical+0x24>
	__asm volatile
 8018562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018566:	f383 8811 	msr	BASEPRI, r3
 801856a:	f3bf 8f6f 	isb	sy
 801856e:	f3bf 8f4f 	dsb	sy
 8018572:	607b      	str	r3, [r7, #4]
}
 8018574:	bf00      	nop
 8018576:	e7fe      	b.n	8018576 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8018578:	4b0a      	ldr	r3, [pc, #40]	; (80185a4 <vPortExitCritical+0x50>)
 801857a:	681b      	ldr	r3, [r3, #0]
 801857c:	3b01      	subs	r3, #1
 801857e:	4a09      	ldr	r2, [pc, #36]	; (80185a4 <vPortExitCritical+0x50>)
 8018580:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018582:	4b08      	ldr	r3, [pc, #32]	; (80185a4 <vPortExitCritical+0x50>)
 8018584:	681b      	ldr	r3, [r3, #0]
 8018586:	2b00      	cmp	r3, #0
 8018588:	d105      	bne.n	8018596 <vPortExitCritical+0x42>
 801858a:	2300      	movs	r3, #0
 801858c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801858e:	683b      	ldr	r3, [r7, #0]
 8018590:	f383 8811 	msr	BASEPRI, r3
}
 8018594:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8018596:	bf00      	nop
 8018598:	370c      	adds	r7, #12
 801859a:	46bd      	mov	sp, r7
 801859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185a0:	4770      	bx	lr
 80185a2:	bf00      	nop
 80185a4:	20000188 	.word	0x20000188
	...

080185b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80185b0:	f3ef 8009 	mrs	r0, PSP
 80185b4:	f3bf 8f6f 	isb	sy
 80185b8:	4b15      	ldr	r3, [pc, #84]	; (8018610 <pxCurrentTCBConst>)
 80185ba:	681a      	ldr	r2, [r3, #0]
 80185bc:	f01e 0f10 	tst.w	lr, #16
 80185c0:	bf08      	it	eq
 80185c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80185c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185ca:	6010      	str	r0, [r2, #0]
 80185cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80185d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80185d4:	f380 8811 	msr	BASEPRI, r0
 80185d8:	f3bf 8f4f 	dsb	sy
 80185dc:	f3bf 8f6f 	isb	sy
 80185e0:	f7fe fea8 	bl	8017334 <vTaskSwitchContext>
 80185e4:	f04f 0000 	mov.w	r0, #0
 80185e8:	f380 8811 	msr	BASEPRI, r0
 80185ec:	bc09      	pop	{r0, r3}
 80185ee:	6819      	ldr	r1, [r3, #0]
 80185f0:	6808      	ldr	r0, [r1, #0]
 80185f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185f6:	f01e 0f10 	tst.w	lr, #16
 80185fa:	bf08      	it	eq
 80185fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018600:	f380 8809 	msr	PSP, r0
 8018604:	f3bf 8f6f 	isb	sy
 8018608:	4770      	bx	lr
 801860a:	bf00      	nop
 801860c:	f3af 8000 	nop.w

08018610 <pxCurrentTCBConst>:
 8018610:	20000ff4 	.word	0x20000ff4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018614:	bf00      	nop
 8018616:	bf00      	nop

08018618 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018618:	b580      	push	{r7, lr}
 801861a:	b082      	sub	sp, #8
 801861c:	af00      	add	r7, sp, #0
	__asm volatile
 801861e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018622:	f383 8811 	msr	BASEPRI, r3
 8018626:	f3bf 8f6f 	isb	sy
 801862a:	f3bf 8f4f 	dsb	sy
 801862e:	607b      	str	r3, [r7, #4]
}
 8018630:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018632:	f7fe fdc5 	bl	80171c0 <xTaskIncrementTick>
 8018636:	4603      	mov	r3, r0
 8018638:	2b00      	cmp	r3, #0
 801863a:	d003      	beq.n	8018644 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801863c:	4b06      	ldr	r3, [pc, #24]	; (8018658 <xPortSysTickHandler+0x40>)
 801863e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018642:	601a      	str	r2, [r3, #0]
 8018644:	2300      	movs	r3, #0
 8018646:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018648:	683b      	ldr	r3, [r7, #0]
 801864a:	f383 8811 	msr	BASEPRI, r3
}
 801864e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018650:	bf00      	nop
 8018652:	3708      	adds	r7, #8
 8018654:	46bd      	mov	sp, r7
 8018656:	bd80      	pop	{r7, pc}
 8018658:	e000ed04 	.word	0xe000ed04

0801865c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801865c:	b480      	push	{r7}
 801865e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018660:	4b0b      	ldr	r3, [pc, #44]	; (8018690 <vPortSetupTimerInterrupt+0x34>)
 8018662:	2200      	movs	r2, #0
 8018664:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018666:	4b0b      	ldr	r3, [pc, #44]	; (8018694 <vPortSetupTimerInterrupt+0x38>)
 8018668:	2200      	movs	r2, #0
 801866a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801866c:	4b0a      	ldr	r3, [pc, #40]	; (8018698 <vPortSetupTimerInterrupt+0x3c>)
 801866e:	681b      	ldr	r3, [r3, #0]
 8018670:	4a0a      	ldr	r2, [pc, #40]	; (801869c <vPortSetupTimerInterrupt+0x40>)
 8018672:	fba2 2303 	umull	r2, r3, r2, r3
 8018676:	099b      	lsrs	r3, r3, #6
 8018678:	4a09      	ldr	r2, [pc, #36]	; (80186a0 <vPortSetupTimerInterrupt+0x44>)
 801867a:	3b01      	subs	r3, #1
 801867c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801867e:	4b04      	ldr	r3, [pc, #16]	; (8018690 <vPortSetupTimerInterrupt+0x34>)
 8018680:	2207      	movs	r2, #7
 8018682:	601a      	str	r2, [r3, #0]
}
 8018684:	bf00      	nop
 8018686:	46bd      	mov	sp, r7
 8018688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801868c:	4770      	bx	lr
 801868e:	bf00      	nop
 8018690:	e000e010 	.word	0xe000e010
 8018694:	e000e018 	.word	0xe000e018
 8018698:	20000000 	.word	0x20000000
 801869c:	10624dd3 	.word	0x10624dd3
 80186a0:	e000e014 	.word	0xe000e014

080186a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80186a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80186b4 <vPortEnableVFP+0x10>
 80186a8:	6801      	ldr	r1, [r0, #0]
 80186aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80186ae:	6001      	str	r1, [r0, #0]
 80186b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80186b2:	bf00      	nop
 80186b4:	e000ed88 	.word	0xe000ed88

080186b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80186b8:	b480      	push	{r7}
 80186ba:	b085      	sub	sp, #20
 80186bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80186be:	f3ef 8305 	mrs	r3, IPSR
 80186c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80186c4:	68fb      	ldr	r3, [r7, #12]
 80186c6:	2b0f      	cmp	r3, #15
 80186c8:	d914      	bls.n	80186f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80186ca:	4a17      	ldr	r2, [pc, #92]	; (8018728 <vPortValidateInterruptPriority+0x70>)
 80186cc:	68fb      	ldr	r3, [r7, #12]
 80186ce:	4413      	add	r3, r2
 80186d0:	781b      	ldrb	r3, [r3, #0]
 80186d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80186d4:	4b15      	ldr	r3, [pc, #84]	; (801872c <vPortValidateInterruptPriority+0x74>)
 80186d6:	781b      	ldrb	r3, [r3, #0]
 80186d8:	7afa      	ldrb	r2, [r7, #11]
 80186da:	429a      	cmp	r2, r3
 80186dc:	d20a      	bcs.n	80186f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80186de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186e2:	f383 8811 	msr	BASEPRI, r3
 80186e6:	f3bf 8f6f 	isb	sy
 80186ea:	f3bf 8f4f 	dsb	sy
 80186ee:	607b      	str	r3, [r7, #4]
}
 80186f0:	bf00      	nop
 80186f2:	e7fe      	b.n	80186f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80186f4:	4b0e      	ldr	r3, [pc, #56]	; (8018730 <vPortValidateInterruptPriority+0x78>)
 80186f6:	681b      	ldr	r3, [r3, #0]
 80186f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80186fc:	4b0d      	ldr	r3, [pc, #52]	; (8018734 <vPortValidateInterruptPriority+0x7c>)
 80186fe:	681b      	ldr	r3, [r3, #0]
 8018700:	429a      	cmp	r2, r3
 8018702:	d90a      	bls.n	801871a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8018704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018708:	f383 8811 	msr	BASEPRI, r3
 801870c:	f3bf 8f6f 	isb	sy
 8018710:	f3bf 8f4f 	dsb	sy
 8018714:	603b      	str	r3, [r7, #0]
}
 8018716:	bf00      	nop
 8018718:	e7fe      	b.n	8018718 <vPortValidateInterruptPriority+0x60>
	}
 801871a:	bf00      	nop
 801871c:	3714      	adds	r7, #20
 801871e:	46bd      	mov	sp, r7
 8018720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018724:	4770      	bx	lr
 8018726:	bf00      	nop
 8018728:	e000e3f0 	.word	0xe000e3f0
 801872c:	20001620 	.word	0x20001620
 8018730:	e000ed0c 	.word	0xe000ed0c
 8018734:	20001624 	.word	0x20001624

08018738 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018738:	b580      	push	{r7, lr}
 801873a:	b08a      	sub	sp, #40	; 0x28
 801873c:	af00      	add	r7, sp, #0
 801873e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018740:	2300      	movs	r3, #0
 8018742:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018744:	f7fe fc80 	bl	8017048 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018748:	4b5b      	ldr	r3, [pc, #364]	; (80188b8 <pvPortMalloc+0x180>)
 801874a:	681b      	ldr	r3, [r3, #0]
 801874c:	2b00      	cmp	r3, #0
 801874e:	d101      	bne.n	8018754 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018750:	f000 f920 	bl	8018994 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018754:	4b59      	ldr	r3, [pc, #356]	; (80188bc <pvPortMalloc+0x184>)
 8018756:	681a      	ldr	r2, [r3, #0]
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	4013      	ands	r3, r2
 801875c:	2b00      	cmp	r3, #0
 801875e:	f040 8093 	bne.w	8018888 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	2b00      	cmp	r3, #0
 8018766:	d01d      	beq.n	80187a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8018768:	2208      	movs	r2, #8
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	4413      	add	r3, r2
 801876e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	f003 0307 	and.w	r3, r3, #7
 8018776:	2b00      	cmp	r3, #0
 8018778:	d014      	beq.n	80187a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	f023 0307 	bic.w	r3, r3, #7
 8018780:	3308      	adds	r3, #8
 8018782:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	f003 0307 	and.w	r3, r3, #7
 801878a:	2b00      	cmp	r3, #0
 801878c:	d00a      	beq.n	80187a4 <pvPortMalloc+0x6c>
	__asm volatile
 801878e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018792:	f383 8811 	msr	BASEPRI, r3
 8018796:	f3bf 8f6f 	isb	sy
 801879a:	f3bf 8f4f 	dsb	sy
 801879e:	617b      	str	r3, [r7, #20]
}
 80187a0:	bf00      	nop
 80187a2:	e7fe      	b.n	80187a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d06e      	beq.n	8018888 <pvPortMalloc+0x150>
 80187aa:	4b45      	ldr	r3, [pc, #276]	; (80188c0 <pvPortMalloc+0x188>)
 80187ac:	681b      	ldr	r3, [r3, #0]
 80187ae:	687a      	ldr	r2, [r7, #4]
 80187b0:	429a      	cmp	r2, r3
 80187b2:	d869      	bhi.n	8018888 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80187b4:	4b43      	ldr	r3, [pc, #268]	; (80188c4 <pvPortMalloc+0x18c>)
 80187b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80187b8:	4b42      	ldr	r3, [pc, #264]	; (80188c4 <pvPortMalloc+0x18c>)
 80187ba:	681b      	ldr	r3, [r3, #0]
 80187bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80187be:	e004      	b.n	80187ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80187c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80187c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187c6:	681b      	ldr	r3, [r3, #0]
 80187c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80187ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187cc:	685b      	ldr	r3, [r3, #4]
 80187ce:	687a      	ldr	r2, [r7, #4]
 80187d0:	429a      	cmp	r2, r3
 80187d2:	d903      	bls.n	80187dc <pvPortMalloc+0xa4>
 80187d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	2b00      	cmp	r3, #0
 80187da:	d1f1      	bne.n	80187c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80187dc:	4b36      	ldr	r3, [pc, #216]	; (80188b8 <pvPortMalloc+0x180>)
 80187de:	681b      	ldr	r3, [r3, #0]
 80187e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80187e2:	429a      	cmp	r2, r3
 80187e4:	d050      	beq.n	8018888 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80187e6:	6a3b      	ldr	r3, [r7, #32]
 80187e8:	681b      	ldr	r3, [r3, #0]
 80187ea:	2208      	movs	r2, #8
 80187ec:	4413      	add	r3, r2
 80187ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80187f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187f2:	681a      	ldr	r2, [r3, #0]
 80187f4:	6a3b      	ldr	r3, [r7, #32]
 80187f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80187f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187fa:	685a      	ldr	r2, [r3, #4]
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	1ad2      	subs	r2, r2, r3
 8018800:	2308      	movs	r3, #8
 8018802:	005b      	lsls	r3, r3, #1
 8018804:	429a      	cmp	r2, r3
 8018806:	d91f      	bls.n	8018848 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8018808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	4413      	add	r3, r2
 801880e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018810:	69bb      	ldr	r3, [r7, #24]
 8018812:	f003 0307 	and.w	r3, r3, #7
 8018816:	2b00      	cmp	r3, #0
 8018818:	d00a      	beq.n	8018830 <pvPortMalloc+0xf8>
	__asm volatile
 801881a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801881e:	f383 8811 	msr	BASEPRI, r3
 8018822:	f3bf 8f6f 	isb	sy
 8018826:	f3bf 8f4f 	dsb	sy
 801882a:	613b      	str	r3, [r7, #16]
}
 801882c:	bf00      	nop
 801882e:	e7fe      	b.n	801882e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018832:	685a      	ldr	r2, [r3, #4]
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	1ad2      	subs	r2, r2, r3
 8018838:	69bb      	ldr	r3, [r7, #24]
 801883a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801883c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801883e:	687a      	ldr	r2, [r7, #4]
 8018840:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018842:	69b8      	ldr	r0, [r7, #24]
 8018844:	f000 f908 	bl	8018a58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018848:	4b1d      	ldr	r3, [pc, #116]	; (80188c0 <pvPortMalloc+0x188>)
 801884a:	681a      	ldr	r2, [r3, #0]
 801884c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801884e:	685b      	ldr	r3, [r3, #4]
 8018850:	1ad3      	subs	r3, r2, r3
 8018852:	4a1b      	ldr	r2, [pc, #108]	; (80188c0 <pvPortMalloc+0x188>)
 8018854:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018856:	4b1a      	ldr	r3, [pc, #104]	; (80188c0 <pvPortMalloc+0x188>)
 8018858:	681a      	ldr	r2, [r3, #0]
 801885a:	4b1b      	ldr	r3, [pc, #108]	; (80188c8 <pvPortMalloc+0x190>)
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	429a      	cmp	r2, r3
 8018860:	d203      	bcs.n	801886a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018862:	4b17      	ldr	r3, [pc, #92]	; (80188c0 <pvPortMalloc+0x188>)
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	4a18      	ldr	r2, [pc, #96]	; (80188c8 <pvPortMalloc+0x190>)
 8018868:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801886a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801886c:	685a      	ldr	r2, [r3, #4]
 801886e:	4b13      	ldr	r3, [pc, #76]	; (80188bc <pvPortMalloc+0x184>)
 8018870:	681b      	ldr	r3, [r3, #0]
 8018872:	431a      	orrs	r2, r3
 8018874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018876:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8018878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801887a:	2200      	movs	r2, #0
 801887c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801887e:	4b13      	ldr	r3, [pc, #76]	; (80188cc <pvPortMalloc+0x194>)
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	3301      	adds	r3, #1
 8018884:	4a11      	ldr	r2, [pc, #68]	; (80188cc <pvPortMalloc+0x194>)
 8018886:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018888:	f7fe fbec 	bl	8017064 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801888c:	69fb      	ldr	r3, [r7, #28]
 801888e:	f003 0307 	and.w	r3, r3, #7
 8018892:	2b00      	cmp	r3, #0
 8018894:	d00a      	beq.n	80188ac <pvPortMalloc+0x174>
	__asm volatile
 8018896:	f04f 0350 	mov.w	r3, #80	; 0x50
 801889a:	f383 8811 	msr	BASEPRI, r3
 801889e:	f3bf 8f6f 	isb	sy
 80188a2:	f3bf 8f4f 	dsb	sy
 80188a6:	60fb      	str	r3, [r7, #12]
}
 80188a8:	bf00      	nop
 80188aa:	e7fe      	b.n	80188aa <pvPortMalloc+0x172>
	return pvReturn;
 80188ac:	69fb      	ldr	r3, [r7, #28]
}
 80188ae:	4618      	mov	r0, r3
 80188b0:	3728      	adds	r7, #40	; 0x28
 80188b2:	46bd      	mov	sp, r7
 80188b4:	bd80      	pop	{r7, pc}
 80188b6:	bf00      	nop
 80188b8:	20005c80 	.word	0x20005c80
 80188bc:	20005c94 	.word	0x20005c94
 80188c0:	20005c84 	.word	0x20005c84
 80188c4:	20005c78 	.word	0x20005c78
 80188c8:	20005c88 	.word	0x20005c88
 80188cc:	20005c8c 	.word	0x20005c8c

080188d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80188d0:	b580      	push	{r7, lr}
 80188d2:	b086      	sub	sp, #24
 80188d4:	af00      	add	r7, sp, #0
 80188d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	2b00      	cmp	r3, #0
 80188e0:	d04d      	beq.n	801897e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80188e2:	2308      	movs	r3, #8
 80188e4:	425b      	negs	r3, r3
 80188e6:	697a      	ldr	r2, [r7, #20]
 80188e8:	4413      	add	r3, r2
 80188ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80188ec:	697b      	ldr	r3, [r7, #20]
 80188ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80188f0:	693b      	ldr	r3, [r7, #16]
 80188f2:	685a      	ldr	r2, [r3, #4]
 80188f4:	4b24      	ldr	r3, [pc, #144]	; (8018988 <vPortFree+0xb8>)
 80188f6:	681b      	ldr	r3, [r3, #0]
 80188f8:	4013      	ands	r3, r2
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	d10a      	bne.n	8018914 <vPortFree+0x44>
	__asm volatile
 80188fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018902:	f383 8811 	msr	BASEPRI, r3
 8018906:	f3bf 8f6f 	isb	sy
 801890a:	f3bf 8f4f 	dsb	sy
 801890e:	60fb      	str	r3, [r7, #12]
}
 8018910:	bf00      	nop
 8018912:	e7fe      	b.n	8018912 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8018914:	693b      	ldr	r3, [r7, #16]
 8018916:	681b      	ldr	r3, [r3, #0]
 8018918:	2b00      	cmp	r3, #0
 801891a:	d00a      	beq.n	8018932 <vPortFree+0x62>
	__asm volatile
 801891c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018920:	f383 8811 	msr	BASEPRI, r3
 8018924:	f3bf 8f6f 	isb	sy
 8018928:	f3bf 8f4f 	dsb	sy
 801892c:	60bb      	str	r3, [r7, #8]
}
 801892e:	bf00      	nop
 8018930:	e7fe      	b.n	8018930 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8018932:	693b      	ldr	r3, [r7, #16]
 8018934:	685a      	ldr	r2, [r3, #4]
 8018936:	4b14      	ldr	r3, [pc, #80]	; (8018988 <vPortFree+0xb8>)
 8018938:	681b      	ldr	r3, [r3, #0]
 801893a:	4013      	ands	r3, r2
 801893c:	2b00      	cmp	r3, #0
 801893e:	d01e      	beq.n	801897e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8018940:	693b      	ldr	r3, [r7, #16]
 8018942:	681b      	ldr	r3, [r3, #0]
 8018944:	2b00      	cmp	r3, #0
 8018946:	d11a      	bne.n	801897e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018948:	693b      	ldr	r3, [r7, #16]
 801894a:	685a      	ldr	r2, [r3, #4]
 801894c:	4b0e      	ldr	r3, [pc, #56]	; (8018988 <vPortFree+0xb8>)
 801894e:	681b      	ldr	r3, [r3, #0]
 8018950:	43db      	mvns	r3, r3
 8018952:	401a      	ands	r2, r3
 8018954:	693b      	ldr	r3, [r7, #16]
 8018956:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018958:	f7fe fb76 	bl	8017048 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801895c:	693b      	ldr	r3, [r7, #16]
 801895e:	685a      	ldr	r2, [r3, #4]
 8018960:	4b0a      	ldr	r3, [pc, #40]	; (801898c <vPortFree+0xbc>)
 8018962:	681b      	ldr	r3, [r3, #0]
 8018964:	4413      	add	r3, r2
 8018966:	4a09      	ldr	r2, [pc, #36]	; (801898c <vPortFree+0xbc>)
 8018968:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801896a:	6938      	ldr	r0, [r7, #16]
 801896c:	f000 f874 	bl	8018a58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8018970:	4b07      	ldr	r3, [pc, #28]	; (8018990 <vPortFree+0xc0>)
 8018972:	681b      	ldr	r3, [r3, #0]
 8018974:	3301      	adds	r3, #1
 8018976:	4a06      	ldr	r2, [pc, #24]	; (8018990 <vPortFree+0xc0>)
 8018978:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801897a:	f7fe fb73 	bl	8017064 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801897e:	bf00      	nop
 8018980:	3718      	adds	r7, #24
 8018982:	46bd      	mov	sp, r7
 8018984:	bd80      	pop	{r7, pc}
 8018986:	bf00      	nop
 8018988:	20005c94 	.word	0x20005c94
 801898c:	20005c84 	.word	0x20005c84
 8018990:	20005c90 	.word	0x20005c90

08018994 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8018994:	b480      	push	{r7}
 8018996:	b085      	sub	sp, #20
 8018998:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801899a:	f244 6350 	movw	r3, #18000	; 0x4650
 801899e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80189a0:	4b27      	ldr	r3, [pc, #156]	; (8018a40 <prvHeapInit+0xac>)
 80189a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80189a4:	68fb      	ldr	r3, [r7, #12]
 80189a6:	f003 0307 	and.w	r3, r3, #7
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d00c      	beq.n	80189c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80189ae:	68fb      	ldr	r3, [r7, #12]
 80189b0:	3307      	adds	r3, #7
 80189b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80189b4:	68fb      	ldr	r3, [r7, #12]
 80189b6:	f023 0307 	bic.w	r3, r3, #7
 80189ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80189bc:	68ba      	ldr	r2, [r7, #8]
 80189be:	68fb      	ldr	r3, [r7, #12]
 80189c0:	1ad3      	subs	r3, r2, r3
 80189c2:	4a1f      	ldr	r2, [pc, #124]	; (8018a40 <prvHeapInit+0xac>)
 80189c4:	4413      	add	r3, r2
 80189c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80189c8:	68fb      	ldr	r3, [r7, #12]
 80189ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80189cc:	4a1d      	ldr	r2, [pc, #116]	; (8018a44 <prvHeapInit+0xb0>)
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80189d2:	4b1c      	ldr	r3, [pc, #112]	; (8018a44 <prvHeapInit+0xb0>)
 80189d4:	2200      	movs	r2, #0
 80189d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	68ba      	ldr	r2, [r7, #8]
 80189dc:	4413      	add	r3, r2
 80189de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80189e0:	2208      	movs	r2, #8
 80189e2:	68fb      	ldr	r3, [r7, #12]
 80189e4:	1a9b      	subs	r3, r3, r2
 80189e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80189e8:	68fb      	ldr	r3, [r7, #12]
 80189ea:	f023 0307 	bic.w	r3, r3, #7
 80189ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80189f0:	68fb      	ldr	r3, [r7, #12]
 80189f2:	4a15      	ldr	r2, [pc, #84]	; (8018a48 <prvHeapInit+0xb4>)
 80189f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80189f6:	4b14      	ldr	r3, [pc, #80]	; (8018a48 <prvHeapInit+0xb4>)
 80189f8:	681b      	ldr	r3, [r3, #0]
 80189fa:	2200      	movs	r2, #0
 80189fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80189fe:	4b12      	ldr	r3, [pc, #72]	; (8018a48 <prvHeapInit+0xb4>)
 8018a00:	681b      	ldr	r3, [r3, #0]
 8018a02:	2200      	movs	r2, #0
 8018a04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8018a0a:	683b      	ldr	r3, [r7, #0]
 8018a0c:	68fa      	ldr	r2, [r7, #12]
 8018a0e:	1ad2      	subs	r2, r2, r3
 8018a10:	683b      	ldr	r3, [r7, #0]
 8018a12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8018a14:	4b0c      	ldr	r3, [pc, #48]	; (8018a48 <prvHeapInit+0xb4>)
 8018a16:	681a      	ldr	r2, [r3, #0]
 8018a18:	683b      	ldr	r3, [r7, #0]
 8018a1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018a1c:	683b      	ldr	r3, [r7, #0]
 8018a1e:	685b      	ldr	r3, [r3, #4]
 8018a20:	4a0a      	ldr	r2, [pc, #40]	; (8018a4c <prvHeapInit+0xb8>)
 8018a22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018a24:	683b      	ldr	r3, [r7, #0]
 8018a26:	685b      	ldr	r3, [r3, #4]
 8018a28:	4a09      	ldr	r2, [pc, #36]	; (8018a50 <prvHeapInit+0xbc>)
 8018a2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8018a2c:	4b09      	ldr	r3, [pc, #36]	; (8018a54 <prvHeapInit+0xc0>)
 8018a2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8018a32:	601a      	str	r2, [r3, #0]
}
 8018a34:	bf00      	nop
 8018a36:	3714      	adds	r7, #20
 8018a38:	46bd      	mov	sp, r7
 8018a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a3e:	4770      	bx	lr
 8018a40:	20001628 	.word	0x20001628
 8018a44:	20005c78 	.word	0x20005c78
 8018a48:	20005c80 	.word	0x20005c80
 8018a4c:	20005c88 	.word	0x20005c88
 8018a50:	20005c84 	.word	0x20005c84
 8018a54:	20005c94 	.word	0x20005c94

08018a58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8018a58:	b480      	push	{r7}
 8018a5a:	b085      	sub	sp, #20
 8018a5c:	af00      	add	r7, sp, #0
 8018a5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018a60:	4b28      	ldr	r3, [pc, #160]	; (8018b04 <prvInsertBlockIntoFreeList+0xac>)
 8018a62:	60fb      	str	r3, [r7, #12]
 8018a64:	e002      	b.n	8018a6c <prvInsertBlockIntoFreeList+0x14>
 8018a66:	68fb      	ldr	r3, [r7, #12]
 8018a68:	681b      	ldr	r3, [r3, #0]
 8018a6a:	60fb      	str	r3, [r7, #12]
 8018a6c:	68fb      	ldr	r3, [r7, #12]
 8018a6e:	681b      	ldr	r3, [r3, #0]
 8018a70:	687a      	ldr	r2, [r7, #4]
 8018a72:	429a      	cmp	r2, r3
 8018a74:	d8f7      	bhi.n	8018a66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8018a76:	68fb      	ldr	r3, [r7, #12]
 8018a78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8018a7a:	68fb      	ldr	r3, [r7, #12]
 8018a7c:	685b      	ldr	r3, [r3, #4]
 8018a7e:	68ba      	ldr	r2, [r7, #8]
 8018a80:	4413      	add	r3, r2
 8018a82:	687a      	ldr	r2, [r7, #4]
 8018a84:	429a      	cmp	r2, r3
 8018a86:	d108      	bne.n	8018a9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018a88:	68fb      	ldr	r3, [r7, #12]
 8018a8a:	685a      	ldr	r2, [r3, #4]
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	685b      	ldr	r3, [r3, #4]
 8018a90:	441a      	add	r2, r3
 8018a92:	68fb      	ldr	r3, [r7, #12]
 8018a94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8018a96:	68fb      	ldr	r3, [r7, #12]
 8018a98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	685b      	ldr	r3, [r3, #4]
 8018aa2:	68ba      	ldr	r2, [r7, #8]
 8018aa4:	441a      	add	r2, r3
 8018aa6:	68fb      	ldr	r3, [r7, #12]
 8018aa8:	681b      	ldr	r3, [r3, #0]
 8018aaa:	429a      	cmp	r2, r3
 8018aac:	d118      	bne.n	8018ae0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8018aae:	68fb      	ldr	r3, [r7, #12]
 8018ab0:	681a      	ldr	r2, [r3, #0]
 8018ab2:	4b15      	ldr	r3, [pc, #84]	; (8018b08 <prvInsertBlockIntoFreeList+0xb0>)
 8018ab4:	681b      	ldr	r3, [r3, #0]
 8018ab6:	429a      	cmp	r2, r3
 8018ab8:	d00d      	beq.n	8018ad6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	685a      	ldr	r2, [r3, #4]
 8018abe:	68fb      	ldr	r3, [r7, #12]
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	685b      	ldr	r3, [r3, #4]
 8018ac4:	441a      	add	r2, r3
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8018aca:	68fb      	ldr	r3, [r7, #12]
 8018acc:	681b      	ldr	r3, [r3, #0]
 8018ace:	681a      	ldr	r2, [r3, #0]
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	601a      	str	r2, [r3, #0]
 8018ad4:	e008      	b.n	8018ae8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8018ad6:	4b0c      	ldr	r3, [pc, #48]	; (8018b08 <prvInsertBlockIntoFreeList+0xb0>)
 8018ad8:	681a      	ldr	r2, [r3, #0]
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	601a      	str	r2, [r3, #0]
 8018ade:	e003      	b.n	8018ae8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8018ae0:	68fb      	ldr	r3, [r7, #12]
 8018ae2:	681a      	ldr	r2, [r3, #0]
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8018ae8:	68fa      	ldr	r2, [r7, #12]
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	429a      	cmp	r2, r3
 8018aee:	d002      	beq.n	8018af6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018af0:	68fb      	ldr	r3, [r7, #12]
 8018af2:	687a      	ldr	r2, [r7, #4]
 8018af4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018af6:	bf00      	nop
 8018af8:	3714      	adds	r7, #20
 8018afa:	46bd      	mov	sp, r7
 8018afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b00:	4770      	bx	lr
 8018b02:	bf00      	nop
 8018b04:	20005c78 	.word	0x20005c78
 8018b08:	20005c80 	.word	0x20005c80

08018b0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8018b0c:	b580      	push	{r7, lr}
 8018b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8018b10:	2200      	movs	r2, #0
 8018b12:	4912      	ldr	r1, [pc, #72]	; (8018b5c <MX_USB_DEVICE_Init+0x50>)
 8018b14:	4812      	ldr	r0, [pc, #72]	; (8018b60 <MX_USB_DEVICE_Init+0x54>)
 8018b16:	f7f8 fc31 	bl	801137c <USBD_Init>
 8018b1a:	4603      	mov	r3, r0
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	d001      	beq.n	8018b24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018b20:	f7e9 ff34 	bl	800298c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8018b24:	490f      	ldr	r1, [pc, #60]	; (8018b64 <MX_USB_DEVICE_Init+0x58>)
 8018b26:	480e      	ldr	r0, [pc, #56]	; (8018b60 <MX_USB_DEVICE_Init+0x54>)
 8018b28:	f7f8 fc58 	bl	80113dc <USBD_RegisterClass>
 8018b2c:	4603      	mov	r3, r0
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	d001      	beq.n	8018b36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018b32:	f7e9 ff2b 	bl	800298c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8018b36:	490c      	ldr	r1, [pc, #48]	; (8018b68 <MX_USB_DEVICE_Init+0x5c>)
 8018b38:	4809      	ldr	r0, [pc, #36]	; (8018b60 <MX_USB_DEVICE_Init+0x54>)
 8018b3a:	f7f8 fba9 	bl	8011290 <USBD_CDC_RegisterInterface>
 8018b3e:	4603      	mov	r3, r0
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	d001      	beq.n	8018b48 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018b44:	f7e9 ff22 	bl	800298c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8018b48:	4805      	ldr	r0, [pc, #20]	; (8018b60 <MX_USB_DEVICE_Init+0x54>)
 8018b4a:	f7f8 fc6e 	bl	801142a <USBD_Start>
 8018b4e:	4603      	mov	r3, r0
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d001      	beq.n	8018b58 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018b54:	f7e9 ff1a 	bl	800298c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018b58:	bf00      	nop
 8018b5a:	bd80      	pop	{r7, pc}
 8018b5c:	200001a0 	.word	0x200001a0
 8018b60:	200076d0 	.word	0x200076d0
 8018b64:	20000084 	.word	0x20000084
 8018b68:	2000018c 	.word	0x2000018c

08018b6c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8018b6c:	b580      	push	{r7, lr}
 8018b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8018b70:	2200      	movs	r2, #0
 8018b72:	4905      	ldr	r1, [pc, #20]	; (8018b88 <CDC_Init_FS+0x1c>)
 8018b74:	4805      	ldr	r0, [pc, #20]	; (8018b8c <CDC_Init_FS+0x20>)
 8018b76:	f7f8 fba0 	bl	80112ba <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8018b7a:	4905      	ldr	r1, [pc, #20]	; (8018b90 <CDC_Init_FS+0x24>)
 8018b7c:	4803      	ldr	r0, [pc, #12]	; (8018b8c <CDC_Init_FS+0x20>)
 8018b7e:	f7f8 fbba 	bl	80112f6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8018b82:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018b84:	4618      	mov	r0, r3
 8018b86:	bd80      	pop	{r7, pc}
 8018b88:	200081a0 	.word	0x200081a0
 8018b8c:	200076d0 	.word	0x200076d0
 8018b90:	200079a0 	.word	0x200079a0

08018b94 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8018b94:	b480      	push	{r7}
 8018b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8018b98:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018b9a:	4618      	mov	r0, r3
 8018b9c:	46bd      	mov	sp, r7
 8018b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ba2:	4770      	bx	lr

08018ba4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8018ba4:	b480      	push	{r7}
 8018ba6:	b083      	sub	sp, #12
 8018ba8:	af00      	add	r7, sp, #0
 8018baa:	4603      	mov	r3, r0
 8018bac:	6039      	str	r1, [r7, #0]
 8018bae:	71fb      	strb	r3, [r7, #7]
 8018bb0:	4613      	mov	r3, r2
 8018bb2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8018bb4:	79fb      	ldrb	r3, [r7, #7]
 8018bb6:	2b23      	cmp	r3, #35	; 0x23
 8018bb8:	d84a      	bhi.n	8018c50 <CDC_Control_FS+0xac>
 8018bba:	a201      	add	r2, pc, #4	; (adr r2, 8018bc0 <CDC_Control_FS+0x1c>)
 8018bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018bc0:	08018c51 	.word	0x08018c51
 8018bc4:	08018c51 	.word	0x08018c51
 8018bc8:	08018c51 	.word	0x08018c51
 8018bcc:	08018c51 	.word	0x08018c51
 8018bd0:	08018c51 	.word	0x08018c51
 8018bd4:	08018c51 	.word	0x08018c51
 8018bd8:	08018c51 	.word	0x08018c51
 8018bdc:	08018c51 	.word	0x08018c51
 8018be0:	08018c51 	.word	0x08018c51
 8018be4:	08018c51 	.word	0x08018c51
 8018be8:	08018c51 	.word	0x08018c51
 8018bec:	08018c51 	.word	0x08018c51
 8018bf0:	08018c51 	.word	0x08018c51
 8018bf4:	08018c51 	.word	0x08018c51
 8018bf8:	08018c51 	.word	0x08018c51
 8018bfc:	08018c51 	.word	0x08018c51
 8018c00:	08018c51 	.word	0x08018c51
 8018c04:	08018c51 	.word	0x08018c51
 8018c08:	08018c51 	.word	0x08018c51
 8018c0c:	08018c51 	.word	0x08018c51
 8018c10:	08018c51 	.word	0x08018c51
 8018c14:	08018c51 	.word	0x08018c51
 8018c18:	08018c51 	.word	0x08018c51
 8018c1c:	08018c51 	.word	0x08018c51
 8018c20:	08018c51 	.word	0x08018c51
 8018c24:	08018c51 	.word	0x08018c51
 8018c28:	08018c51 	.word	0x08018c51
 8018c2c:	08018c51 	.word	0x08018c51
 8018c30:	08018c51 	.word	0x08018c51
 8018c34:	08018c51 	.word	0x08018c51
 8018c38:	08018c51 	.word	0x08018c51
 8018c3c:	08018c51 	.word	0x08018c51
 8018c40:	08018c51 	.word	0x08018c51
 8018c44:	08018c51 	.word	0x08018c51
 8018c48:	08018c51 	.word	0x08018c51
 8018c4c:	08018c51 	.word	0x08018c51
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018c50:	bf00      	nop
  }

  return (USBD_OK);
 8018c52:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018c54:	4618      	mov	r0, r3
 8018c56:	370c      	adds	r7, #12
 8018c58:	46bd      	mov	sp, r7
 8018c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c5e:	4770      	bx	lr

08018c60 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018c60:	b580      	push	{r7, lr}
 8018c62:	b082      	sub	sp, #8
 8018c64:	af00      	add	r7, sp, #0
 8018c66:	6078      	str	r0, [r7, #4]
 8018c68:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8018c6a:	6879      	ldr	r1, [r7, #4]
 8018c6c:	4805      	ldr	r0, [pc, #20]	; (8018c84 <CDC_Receive_FS+0x24>)
 8018c6e:	f7f8 fb42 	bl	80112f6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018c72:	4804      	ldr	r0, [pc, #16]	; (8018c84 <CDC_Receive_FS+0x24>)
 8018c74:	f7f8 fb58 	bl	8011328 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8018c78:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8018c7a:	4618      	mov	r0, r3
 8018c7c:	3708      	adds	r7, #8
 8018c7e:	46bd      	mov	sp, r7
 8018c80:	bd80      	pop	{r7, pc}
 8018c82:	bf00      	nop
 8018c84:	200076d0 	.word	0x200076d0

08018c88 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8018c88:	b480      	push	{r7}
 8018c8a:	b087      	sub	sp, #28
 8018c8c:	af00      	add	r7, sp, #0
 8018c8e:	60f8      	str	r0, [r7, #12]
 8018c90:	60b9      	str	r1, [r7, #8]
 8018c92:	4613      	mov	r3, r2
 8018c94:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8018c96:	2300      	movs	r3, #0
 8018c98:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8018c9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018c9e:	4618      	mov	r0, r3
 8018ca0:	371c      	adds	r7, #28
 8018ca2:	46bd      	mov	sp, r7
 8018ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ca8:	4770      	bx	lr
	...

08018cac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018cac:	b480      	push	{r7}
 8018cae:	b083      	sub	sp, #12
 8018cb0:	af00      	add	r7, sp, #0
 8018cb2:	4603      	mov	r3, r0
 8018cb4:	6039      	str	r1, [r7, #0]
 8018cb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8018cb8:	683b      	ldr	r3, [r7, #0]
 8018cba:	2212      	movs	r2, #18
 8018cbc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8018cbe:	4b03      	ldr	r3, [pc, #12]	; (8018ccc <USBD_FS_DeviceDescriptor+0x20>)
}
 8018cc0:	4618      	mov	r0, r3
 8018cc2:	370c      	adds	r7, #12
 8018cc4:	46bd      	mov	sp, r7
 8018cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cca:	4770      	bx	lr
 8018ccc:	200001bc 	.word	0x200001bc

08018cd0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018cd0:	b480      	push	{r7}
 8018cd2:	b083      	sub	sp, #12
 8018cd4:	af00      	add	r7, sp, #0
 8018cd6:	4603      	mov	r3, r0
 8018cd8:	6039      	str	r1, [r7, #0]
 8018cda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018cdc:	683b      	ldr	r3, [r7, #0]
 8018cde:	2204      	movs	r2, #4
 8018ce0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018ce2:	4b03      	ldr	r3, [pc, #12]	; (8018cf0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018ce4:	4618      	mov	r0, r3
 8018ce6:	370c      	adds	r7, #12
 8018ce8:	46bd      	mov	sp, r7
 8018cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cee:	4770      	bx	lr
 8018cf0:	200001d0 	.word	0x200001d0

08018cf4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018cf4:	b580      	push	{r7, lr}
 8018cf6:	b082      	sub	sp, #8
 8018cf8:	af00      	add	r7, sp, #0
 8018cfa:	4603      	mov	r3, r0
 8018cfc:	6039      	str	r1, [r7, #0]
 8018cfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018d00:	79fb      	ldrb	r3, [r7, #7]
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	d105      	bne.n	8018d12 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018d06:	683a      	ldr	r2, [r7, #0]
 8018d08:	4907      	ldr	r1, [pc, #28]	; (8018d28 <USBD_FS_ProductStrDescriptor+0x34>)
 8018d0a:	4808      	ldr	r0, [pc, #32]	; (8018d2c <USBD_FS_ProductStrDescriptor+0x38>)
 8018d0c:	f7f9 fbbf 	bl	801248e <USBD_GetString>
 8018d10:	e004      	b.n	8018d1c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018d12:	683a      	ldr	r2, [r7, #0]
 8018d14:	4904      	ldr	r1, [pc, #16]	; (8018d28 <USBD_FS_ProductStrDescriptor+0x34>)
 8018d16:	4805      	ldr	r0, [pc, #20]	; (8018d2c <USBD_FS_ProductStrDescriptor+0x38>)
 8018d18:	f7f9 fbb9 	bl	801248e <USBD_GetString>
  }
  return USBD_StrDesc;
 8018d1c:	4b02      	ldr	r3, [pc, #8]	; (8018d28 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8018d1e:	4618      	mov	r0, r3
 8018d20:	3708      	adds	r7, #8
 8018d22:	46bd      	mov	sp, r7
 8018d24:	bd80      	pop	{r7, pc}
 8018d26:	bf00      	nop
 8018d28:	200089a0 	.word	0x200089a0
 8018d2c:	080214c4 	.word	0x080214c4

08018d30 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018d30:	b580      	push	{r7, lr}
 8018d32:	b082      	sub	sp, #8
 8018d34:	af00      	add	r7, sp, #0
 8018d36:	4603      	mov	r3, r0
 8018d38:	6039      	str	r1, [r7, #0]
 8018d3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018d3c:	683a      	ldr	r2, [r7, #0]
 8018d3e:	4904      	ldr	r1, [pc, #16]	; (8018d50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8018d40:	4804      	ldr	r0, [pc, #16]	; (8018d54 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8018d42:	f7f9 fba4 	bl	801248e <USBD_GetString>
  return USBD_StrDesc;
 8018d46:	4b02      	ldr	r3, [pc, #8]	; (8018d50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8018d48:	4618      	mov	r0, r3
 8018d4a:	3708      	adds	r7, #8
 8018d4c:	46bd      	mov	sp, r7
 8018d4e:	bd80      	pop	{r7, pc}
 8018d50:	200089a0 	.word	0x200089a0
 8018d54:	080214dc 	.word	0x080214dc

08018d58 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018d58:	b580      	push	{r7, lr}
 8018d5a:	b082      	sub	sp, #8
 8018d5c:	af00      	add	r7, sp, #0
 8018d5e:	4603      	mov	r3, r0
 8018d60:	6039      	str	r1, [r7, #0]
 8018d62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018d64:	683b      	ldr	r3, [r7, #0]
 8018d66:	221a      	movs	r2, #26
 8018d68:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018d6a:	f000 f843 	bl	8018df4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8018d6e:	4b02      	ldr	r3, [pc, #8]	; (8018d78 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8018d70:	4618      	mov	r0, r3
 8018d72:	3708      	adds	r7, #8
 8018d74:	46bd      	mov	sp, r7
 8018d76:	bd80      	pop	{r7, pc}
 8018d78:	200001d4 	.word	0x200001d4

08018d7c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018d7c:	b580      	push	{r7, lr}
 8018d7e:	b082      	sub	sp, #8
 8018d80:	af00      	add	r7, sp, #0
 8018d82:	4603      	mov	r3, r0
 8018d84:	6039      	str	r1, [r7, #0]
 8018d86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018d88:	79fb      	ldrb	r3, [r7, #7]
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d105      	bne.n	8018d9a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018d8e:	683a      	ldr	r2, [r7, #0]
 8018d90:	4907      	ldr	r1, [pc, #28]	; (8018db0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018d92:	4808      	ldr	r0, [pc, #32]	; (8018db4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018d94:	f7f9 fb7b 	bl	801248e <USBD_GetString>
 8018d98:	e004      	b.n	8018da4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018d9a:	683a      	ldr	r2, [r7, #0]
 8018d9c:	4904      	ldr	r1, [pc, #16]	; (8018db0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018d9e:	4805      	ldr	r0, [pc, #20]	; (8018db4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018da0:	f7f9 fb75 	bl	801248e <USBD_GetString>
  }
  return USBD_StrDesc;
 8018da4:	4b02      	ldr	r3, [pc, #8]	; (8018db0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8018da6:	4618      	mov	r0, r3
 8018da8:	3708      	adds	r7, #8
 8018daa:	46bd      	mov	sp, r7
 8018dac:	bd80      	pop	{r7, pc}
 8018dae:	bf00      	nop
 8018db0:	200089a0 	.word	0x200089a0
 8018db4:	080214f0 	.word	0x080214f0

08018db8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018db8:	b580      	push	{r7, lr}
 8018dba:	b082      	sub	sp, #8
 8018dbc:	af00      	add	r7, sp, #0
 8018dbe:	4603      	mov	r3, r0
 8018dc0:	6039      	str	r1, [r7, #0]
 8018dc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018dc4:	79fb      	ldrb	r3, [r7, #7]
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	d105      	bne.n	8018dd6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018dca:	683a      	ldr	r2, [r7, #0]
 8018dcc:	4907      	ldr	r1, [pc, #28]	; (8018dec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018dce:	4808      	ldr	r0, [pc, #32]	; (8018df0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018dd0:	f7f9 fb5d 	bl	801248e <USBD_GetString>
 8018dd4:	e004      	b.n	8018de0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018dd6:	683a      	ldr	r2, [r7, #0]
 8018dd8:	4904      	ldr	r1, [pc, #16]	; (8018dec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018dda:	4805      	ldr	r0, [pc, #20]	; (8018df0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018ddc:	f7f9 fb57 	bl	801248e <USBD_GetString>
  }
  return USBD_StrDesc;
 8018de0:	4b02      	ldr	r3, [pc, #8]	; (8018dec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018de2:	4618      	mov	r0, r3
 8018de4:	3708      	adds	r7, #8
 8018de6:	46bd      	mov	sp, r7
 8018de8:	bd80      	pop	{r7, pc}
 8018dea:	bf00      	nop
 8018dec:	200089a0 	.word	0x200089a0
 8018df0:	080214fc 	.word	0x080214fc

08018df4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018df4:	b580      	push	{r7, lr}
 8018df6:	b084      	sub	sp, #16
 8018df8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018dfa:	4b0f      	ldr	r3, [pc, #60]	; (8018e38 <Get_SerialNum+0x44>)
 8018dfc:	681b      	ldr	r3, [r3, #0]
 8018dfe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018e00:	4b0e      	ldr	r3, [pc, #56]	; (8018e3c <Get_SerialNum+0x48>)
 8018e02:	681b      	ldr	r3, [r3, #0]
 8018e04:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018e06:	4b0e      	ldr	r3, [pc, #56]	; (8018e40 <Get_SerialNum+0x4c>)
 8018e08:	681b      	ldr	r3, [r3, #0]
 8018e0a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018e0c:	68fa      	ldr	r2, [r7, #12]
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	4413      	add	r3, r2
 8018e12:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018e14:	68fb      	ldr	r3, [r7, #12]
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d009      	beq.n	8018e2e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018e1a:	2208      	movs	r2, #8
 8018e1c:	4909      	ldr	r1, [pc, #36]	; (8018e44 <Get_SerialNum+0x50>)
 8018e1e:	68f8      	ldr	r0, [r7, #12]
 8018e20:	f000 f814 	bl	8018e4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018e24:	2204      	movs	r2, #4
 8018e26:	4908      	ldr	r1, [pc, #32]	; (8018e48 <Get_SerialNum+0x54>)
 8018e28:	68b8      	ldr	r0, [r7, #8]
 8018e2a:	f000 f80f 	bl	8018e4c <IntToUnicode>
  }
}
 8018e2e:	bf00      	nop
 8018e30:	3710      	adds	r7, #16
 8018e32:	46bd      	mov	sp, r7
 8018e34:	bd80      	pop	{r7, pc}
 8018e36:	bf00      	nop
 8018e38:	1fff7a10 	.word	0x1fff7a10
 8018e3c:	1fff7a14 	.word	0x1fff7a14
 8018e40:	1fff7a18 	.word	0x1fff7a18
 8018e44:	200001d6 	.word	0x200001d6
 8018e48:	200001e6 	.word	0x200001e6

08018e4c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018e4c:	b480      	push	{r7}
 8018e4e:	b087      	sub	sp, #28
 8018e50:	af00      	add	r7, sp, #0
 8018e52:	60f8      	str	r0, [r7, #12]
 8018e54:	60b9      	str	r1, [r7, #8]
 8018e56:	4613      	mov	r3, r2
 8018e58:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018e5a:	2300      	movs	r3, #0
 8018e5c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018e5e:	2300      	movs	r3, #0
 8018e60:	75fb      	strb	r3, [r7, #23]
 8018e62:	e027      	b.n	8018eb4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018e64:	68fb      	ldr	r3, [r7, #12]
 8018e66:	0f1b      	lsrs	r3, r3, #28
 8018e68:	2b09      	cmp	r3, #9
 8018e6a:	d80b      	bhi.n	8018e84 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018e6c:	68fb      	ldr	r3, [r7, #12]
 8018e6e:	0f1b      	lsrs	r3, r3, #28
 8018e70:	b2da      	uxtb	r2, r3
 8018e72:	7dfb      	ldrb	r3, [r7, #23]
 8018e74:	005b      	lsls	r3, r3, #1
 8018e76:	4619      	mov	r1, r3
 8018e78:	68bb      	ldr	r3, [r7, #8]
 8018e7a:	440b      	add	r3, r1
 8018e7c:	3230      	adds	r2, #48	; 0x30
 8018e7e:	b2d2      	uxtb	r2, r2
 8018e80:	701a      	strb	r2, [r3, #0]
 8018e82:	e00a      	b.n	8018e9a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018e84:	68fb      	ldr	r3, [r7, #12]
 8018e86:	0f1b      	lsrs	r3, r3, #28
 8018e88:	b2da      	uxtb	r2, r3
 8018e8a:	7dfb      	ldrb	r3, [r7, #23]
 8018e8c:	005b      	lsls	r3, r3, #1
 8018e8e:	4619      	mov	r1, r3
 8018e90:	68bb      	ldr	r3, [r7, #8]
 8018e92:	440b      	add	r3, r1
 8018e94:	3237      	adds	r2, #55	; 0x37
 8018e96:	b2d2      	uxtb	r2, r2
 8018e98:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018e9a:	68fb      	ldr	r3, [r7, #12]
 8018e9c:	011b      	lsls	r3, r3, #4
 8018e9e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018ea0:	7dfb      	ldrb	r3, [r7, #23]
 8018ea2:	005b      	lsls	r3, r3, #1
 8018ea4:	3301      	adds	r3, #1
 8018ea6:	68ba      	ldr	r2, [r7, #8]
 8018ea8:	4413      	add	r3, r2
 8018eaa:	2200      	movs	r2, #0
 8018eac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018eae:	7dfb      	ldrb	r3, [r7, #23]
 8018eb0:	3301      	adds	r3, #1
 8018eb2:	75fb      	strb	r3, [r7, #23]
 8018eb4:	7dfa      	ldrb	r2, [r7, #23]
 8018eb6:	79fb      	ldrb	r3, [r7, #7]
 8018eb8:	429a      	cmp	r2, r3
 8018eba:	d3d3      	bcc.n	8018e64 <IntToUnicode+0x18>
  }
}
 8018ebc:	bf00      	nop
 8018ebe:	bf00      	nop
 8018ec0:	371c      	adds	r7, #28
 8018ec2:	46bd      	mov	sp, r7
 8018ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ec8:	4770      	bx	lr
	...

08018ecc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018ecc:	b580      	push	{r7, lr}
 8018ece:	b08a      	sub	sp, #40	; 0x28
 8018ed0:	af00      	add	r7, sp, #0
 8018ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018ed4:	f107 0314 	add.w	r3, r7, #20
 8018ed8:	2200      	movs	r2, #0
 8018eda:	601a      	str	r2, [r3, #0]
 8018edc:	605a      	str	r2, [r3, #4]
 8018ede:	609a      	str	r2, [r3, #8]
 8018ee0:	60da      	str	r2, [r3, #12]
 8018ee2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018eec:	d147      	bne.n	8018f7e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018eee:	2300      	movs	r3, #0
 8018ef0:	613b      	str	r3, [r7, #16]
 8018ef2:	4b25      	ldr	r3, [pc, #148]	; (8018f88 <HAL_PCD_MspInit+0xbc>)
 8018ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018ef6:	4a24      	ldr	r2, [pc, #144]	; (8018f88 <HAL_PCD_MspInit+0xbc>)
 8018ef8:	f043 0301 	orr.w	r3, r3, #1
 8018efc:	6313      	str	r3, [r2, #48]	; 0x30
 8018efe:	4b22      	ldr	r3, [pc, #136]	; (8018f88 <HAL_PCD_MspInit+0xbc>)
 8018f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f02:	f003 0301 	and.w	r3, r3, #1
 8018f06:	613b      	str	r3, [r7, #16]
 8018f08:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8018f0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018f10:	2300      	movs	r3, #0
 8018f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018f14:	2300      	movs	r3, #0
 8018f16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018f18:	f107 0314 	add.w	r3, r7, #20
 8018f1c:	4619      	mov	r1, r3
 8018f1e:	481b      	ldr	r0, [pc, #108]	; (8018f8c <HAL_PCD_MspInit+0xc0>)
 8018f20:	f7ef fe00 	bl	8008b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018f24:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8018f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018f2a:	2302      	movs	r3, #2
 8018f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018f2e:	2300      	movs	r3, #0
 8018f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018f32:	2303      	movs	r3, #3
 8018f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8018f36:	230a      	movs	r3, #10
 8018f38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018f3a:	f107 0314 	add.w	r3, r7, #20
 8018f3e:	4619      	mov	r1, r3
 8018f40:	4812      	ldr	r0, [pc, #72]	; (8018f8c <HAL_PCD_MspInit+0xc0>)
 8018f42:	f7ef fdef 	bl	8008b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018f46:	4b10      	ldr	r3, [pc, #64]	; (8018f88 <HAL_PCD_MspInit+0xbc>)
 8018f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018f4a:	4a0f      	ldr	r2, [pc, #60]	; (8018f88 <HAL_PCD_MspInit+0xbc>)
 8018f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018f50:	6353      	str	r3, [r2, #52]	; 0x34
 8018f52:	2300      	movs	r3, #0
 8018f54:	60fb      	str	r3, [r7, #12]
 8018f56:	4b0c      	ldr	r3, [pc, #48]	; (8018f88 <HAL_PCD_MspInit+0xbc>)
 8018f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f5a:	4a0b      	ldr	r2, [pc, #44]	; (8018f88 <HAL_PCD_MspInit+0xbc>)
 8018f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018f60:	6453      	str	r3, [r2, #68]	; 0x44
 8018f62:	4b09      	ldr	r3, [pc, #36]	; (8018f88 <HAL_PCD_MspInit+0xbc>)
 8018f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018f6a:	60fb      	str	r3, [r7, #12]
 8018f6c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8018f6e:	2200      	movs	r2, #0
 8018f70:	2105      	movs	r1, #5
 8018f72:	2043      	movs	r0, #67	; 0x43
 8018f74:	f7ef fd9e 	bl	8008ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018f78:	2043      	movs	r0, #67	; 0x43
 8018f7a:	f7ef fdb7 	bl	8008aec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8018f7e:	bf00      	nop
 8018f80:	3728      	adds	r7, #40	; 0x28
 8018f82:	46bd      	mov	sp, r7
 8018f84:	bd80      	pop	{r7, pc}
 8018f86:	bf00      	nop
 8018f88:	40023800 	.word	0x40023800
 8018f8c:	40020000 	.word	0x40020000

08018f90 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f90:	b580      	push	{r7, lr}
 8018f92:	b082      	sub	sp, #8
 8018f94:	af00      	add	r7, sp, #0
 8018f96:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8018fa4:	4619      	mov	r1, r3
 8018fa6:	4610      	mov	r0, r2
 8018fa8:	f7f8 fa8a 	bl	80114c0 <USBD_LL_SetupStage>
}
 8018fac:	bf00      	nop
 8018fae:	3708      	adds	r7, #8
 8018fb0:	46bd      	mov	sp, r7
 8018fb2:	bd80      	pop	{r7, pc}

08018fb4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018fb4:	b580      	push	{r7, lr}
 8018fb6:	b082      	sub	sp, #8
 8018fb8:	af00      	add	r7, sp, #0
 8018fba:	6078      	str	r0, [r7, #4]
 8018fbc:	460b      	mov	r3, r1
 8018fbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8018fc6:	78fa      	ldrb	r2, [r7, #3]
 8018fc8:	6879      	ldr	r1, [r7, #4]
 8018fca:	4613      	mov	r3, r2
 8018fcc:	00db      	lsls	r3, r3, #3
 8018fce:	1a9b      	subs	r3, r3, r2
 8018fd0:	009b      	lsls	r3, r3, #2
 8018fd2:	440b      	add	r3, r1
 8018fd4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8018fd8:	681a      	ldr	r2, [r3, #0]
 8018fda:	78fb      	ldrb	r3, [r7, #3]
 8018fdc:	4619      	mov	r1, r3
 8018fde:	f7f8 fac4 	bl	801156a <USBD_LL_DataOutStage>
}
 8018fe2:	bf00      	nop
 8018fe4:	3708      	adds	r7, #8
 8018fe6:	46bd      	mov	sp, r7
 8018fe8:	bd80      	pop	{r7, pc}

08018fea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018fea:	b580      	push	{r7, lr}
 8018fec:	b082      	sub	sp, #8
 8018fee:	af00      	add	r7, sp, #0
 8018ff0:	6078      	str	r0, [r7, #4]
 8018ff2:	460b      	mov	r3, r1
 8018ff4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8018ffc:	78fa      	ldrb	r2, [r7, #3]
 8018ffe:	6879      	ldr	r1, [r7, #4]
 8019000:	4613      	mov	r3, r2
 8019002:	00db      	lsls	r3, r3, #3
 8019004:	1a9b      	subs	r3, r3, r2
 8019006:	009b      	lsls	r3, r3, #2
 8019008:	440b      	add	r3, r1
 801900a:	3348      	adds	r3, #72	; 0x48
 801900c:	681a      	ldr	r2, [r3, #0]
 801900e:	78fb      	ldrb	r3, [r7, #3]
 8019010:	4619      	mov	r1, r3
 8019012:	f7f8 fb0d 	bl	8011630 <USBD_LL_DataInStage>
}
 8019016:	bf00      	nop
 8019018:	3708      	adds	r7, #8
 801901a:	46bd      	mov	sp, r7
 801901c:	bd80      	pop	{r7, pc}

0801901e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801901e:	b580      	push	{r7, lr}
 8019020:	b082      	sub	sp, #8
 8019022:	af00      	add	r7, sp, #0
 8019024:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801902c:	4618      	mov	r0, r3
 801902e:	f7f8 fc21 	bl	8011874 <USBD_LL_SOF>
}
 8019032:	bf00      	nop
 8019034:	3708      	adds	r7, #8
 8019036:	46bd      	mov	sp, r7
 8019038:	bd80      	pop	{r7, pc}

0801903a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801903a:	b580      	push	{r7, lr}
 801903c:	b084      	sub	sp, #16
 801903e:	af00      	add	r7, sp, #0
 8019040:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8019042:	2301      	movs	r3, #1
 8019044:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	68db      	ldr	r3, [r3, #12]
 801904a:	2b00      	cmp	r3, #0
 801904c:	d102      	bne.n	8019054 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801904e:	2300      	movs	r3, #0
 8019050:	73fb      	strb	r3, [r7, #15]
 8019052:	e008      	b.n	8019066 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	68db      	ldr	r3, [r3, #12]
 8019058:	2b02      	cmp	r3, #2
 801905a:	d102      	bne.n	8019062 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801905c:	2301      	movs	r3, #1
 801905e:	73fb      	strb	r3, [r7, #15]
 8019060:	e001      	b.n	8019066 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8019062:	f7e9 fc93 	bl	800298c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801906c:	7bfa      	ldrb	r2, [r7, #15]
 801906e:	4611      	mov	r1, r2
 8019070:	4618      	mov	r0, r3
 8019072:	f7f8 fbc1 	bl	80117f8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801907c:	4618      	mov	r0, r3
 801907e:	f7f8 fb6d 	bl	801175c <USBD_LL_Reset>
}
 8019082:	bf00      	nop
 8019084:	3710      	adds	r7, #16
 8019086:	46bd      	mov	sp, r7
 8019088:	bd80      	pop	{r7, pc}
	...

0801908c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801908c:	b580      	push	{r7, lr}
 801908e:	b082      	sub	sp, #8
 8019090:	af00      	add	r7, sp, #0
 8019092:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801909a:	4618      	mov	r0, r3
 801909c:	f7f8 fbbc 	bl	8011818 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	681b      	ldr	r3, [r3, #0]
 80190a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80190a8:	681b      	ldr	r3, [r3, #0]
 80190aa:	687a      	ldr	r2, [r7, #4]
 80190ac:	6812      	ldr	r2, [r2, #0]
 80190ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80190b2:	f043 0301 	orr.w	r3, r3, #1
 80190b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	6a1b      	ldr	r3, [r3, #32]
 80190bc:	2b00      	cmp	r3, #0
 80190be:	d005      	beq.n	80190cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80190c0:	4b04      	ldr	r3, [pc, #16]	; (80190d4 <HAL_PCD_SuspendCallback+0x48>)
 80190c2:	691b      	ldr	r3, [r3, #16]
 80190c4:	4a03      	ldr	r2, [pc, #12]	; (80190d4 <HAL_PCD_SuspendCallback+0x48>)
 80190c6:	f043 0306 	orr.w	r3, r3, #6
 80190ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80190cc:	bf00      	nop
 80190ce:	3708      	adds	r7, #8
 80190d0:	46bd      	mov	sp, r7
 80190d2:	bd80      	pop	{r7, pc}
 80190d4:	e000ed00 	.word	0xe000ed00

080190d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80190d8:	b580      	push	{r7, lr}
 80190da:	b082      	sub	sp, #8
 80190dc:	af00      	add	r7, sp, #0
 80190de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80190e6:	4618      	mov	r0, r3
 80190e8:	f7f8 fbac 	bl	8011844 <USBD_LL_Resume>
}
 80190ec:	bf00      	nop
 80190ee:	3708      	adds	r7, #8
 80190f0:	46bd      	mov	sp, r7
 80190f2:	bd80      	pop	{r7, pc}

080190f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80190f4:	b580      	push	{r7, lr}
 80190f6:	b082      	sub	sp, #8
 80190f8:	af00      	add	r7, sp, #0
 80190fa:	6078      	str	r0, [r7, #4]
 80190fc:	460b      	mov	r3, r1
 80190fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019106:	78fa      	ldrb	r2, [r7, #3]
 8019108:	4611      	mov	r1, r2
 801910a:	4618      	mov	r0, r3
 801910c:	f7f8 fbfa 	bl	8011904 <USBD_LL_IsoOUTIncomplete>
}
 8019110:	bf00      	nop
 8019112:	3708      	adds	r7, #8
 8019114:	46bd      	mov	sp, r7
 8019116:	bd80      	pop	{r7, pc}

08019118 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019118:	b580      	push	{r7, lr}
 801911a:	b082      	sub	sp, #8
 801911c:	af00      	add	r7, sp, #0
 801911e:	6078      	str	r0, [r7, #4]
 8019120:	460b      	mov	r3, r1
 8019122:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801912a:	78fa      	ldrb	r2, [r7, #3]
 801912c:	4611      	mov	r1, r2
 801912e:	4618      	mov	r0, r3
 8019130:	f7f8 fbc2 	bl	80118b8 <USBD_LL_IsoINIncomplete>
}
 8019134:	bf00      	nop
 8019136:	3708      	adds	r7, #8
 8019138:	46bd      	mov	sp, r7
 801913a:	bd80      	pop	{r7, pc}

0801913c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801913c:	b580      	push	{r7, lr}
 801913e:	b082      	sub	sp, #8
 8019140:	af00      	add	r7, sp, #0
 8019142:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801914a:	4618      	mov	r0, r3
 801914c:	f7f8 fc00 	bl	8011950 <USBD_LL_DevConnected>
}
 8019150:	bf00      	nop
 8019152:	3708      	adds	r7, #8
 8019154:	46bd      	mov	sp, r7
 8019156:	bd80      	pop	{r7, pc}

08019158 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019158:	b580      	push	{r7, lr}
 801915a:	b082      	sub	sp, #8
 801915c:	af00      	add	r7, sp, #0
 801915e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019166:	4618      	mov	r0, r3
 8019168:	f7f8 fbfd 	bl	8011966 <USBD_LL_DevDisconnected>
}
 801916c:	bf00      	nop
 801916e:	3708      	adds	r7, #8
 8019170:	46bd      	mov	sp, r7
 8019172:	bd80      	pop	{r7, pc}

08019174 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019174:	b580      	push	{r7, lr}
 8019176:	b082      	sub	sp, #8
 8019178:	af00      	add	r7, sp, #0
 801917a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	781b      	ldrb	r3, [r3, #0]
 8019180:	2b00      	cmp	r3, #0
 8019182:	d13c      	bne.n	80191fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8019184:	4a20      	ldr	r2, [pc, #128]	; (8019208 <USBD_LL_Init+0x94>)
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	4a1e      	ldr	r2, [pc, #120]	; (8019208 <USBD_LL_Init+0x94>)
 8019190:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019194:	4b1c      	ldr	r3, [pc, #112]	; (8019208 <USBD_LL_Init+0x94>)
 8019196:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801919a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801919c:	4b1a      	ldr	r3, [pc, #104]	; (8019208 <USBD_LL_Init+0x94>)
 801919e:	2204      	movs	r2, #4
 80191a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80191a2:	4b19      	ldr	r3, [pc, #100]	; (8019208 <USBD_LL_Init+0x94>)
 80191a4:	2202      	movs	r2, #2
 80191a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80191a8:	4b17      	ldr	r3, [pc, #92]	; (8019208 <USBD_LL_Init+0x94>)
 80191aa:	2200      	movs	r2, #0
 80191ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80191ae:	4b16      	ldr	r3, [pc, #88]	; (8019208 <USBD_LL_Init+0x94>)
 80191b0:	2202      	movs	r2, #2
 80191b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80191b4:	4b14      	ldr	r3, [pc, #80]	; (8019208 <USBD_LL_Init+0x94>)
 80191b6:	2200      	movs	r2, #0
 80191b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80191ba:	4b13      	ldr	r3, [pc, #76]	; (8019208 <USBD_LL_Init+0x94>)
 80191bc:	2200      	movs	r2, #0
 80191be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80191c0:	4b11      	ldr	r3, [pc, #68]	; (8019208 <USBD_LL_Init+0x94>)
 80191c2:	2200      	movs	r2, #0
 80191c4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80191c6:	4b10      	ldr	r3, [pc, #64]	; (8019208 <USBD_LL_Init+0x94>)
 80191c8:	2201      	movs	r2, #1
 80191ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80191cc:	4b0e      	ldr	r3, [pc, #56]	; (8019208 <USBD_LL_Init+0x94>)
 80191ce:	2200      	movs	r2, #0
 80191d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80191d2:	480d      	ldr	r0, [pc, #52]	; (8019208 <USBD_LL_Init+0x94>)
 80191d4:	f7f0 ff5e 	bl	800a094 <HAL_PCD_Init>
 80191d8:	4603      	mov	r3, r0
 80191da:	2b00      	cmp	r3, #0
 80191dc:	d001      	beq.n	80191e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80191de:	f7e9 fbd5 	bl	800298c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80191e2:	2180      	movs	r1, #128	; 0x80
 80191e4:	4808      	ldr	r0, [pc, #32]	; (8019208 <USBD_LL_Init+0x94>)
 80191e6:	f7f2 f8bc 	bl	800b362 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80191ea:	2240      	movs	r2, #64	; 0x40
 80191ec:	2100      	movs	r1, #0
 80191ee:	4806      	ldr	r0, [pc, #24]	; (8019208 <USBD_LL_Init+0x94>)
 80191f0:	f7f2 f870 	bl	800b2d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80191f4:	2280      	movs	r2, #128	; 0x80
 80191f6:	2101      	movs	r1, #1
 80191f8:	4803      	ldr	r0, [pc, #12]	; (8019208 <USBD_LL_Init+0x94>)
 80191fa:	f7f2 f86b 	bl	800b2d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80191fe:	2300      	movs	r3, #0
}
 8019200:	4618      	mov	r0, r3
 8019202:	3708      	adds	r7, #8
 8019204:	46bd      	mov	sp, r7
 8019206:	bd80      	pop	{r7, pc}
 8019208:	20008ba0 	.word	0x20008ba0

0801920c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801920c:	b580      	push	{r7, lr}
 801920e:	b084      	sub	sp, #16
 8019210:	af00      	add	r7, sp, #0
 8019212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019214:	2300      	movs	r3, #0
 8019216:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019218:	2300      	movs	r3, #0
 801921a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019222:	4618      	mov	r0, r3
 8019224:	f7f1 f853 	bl	800a2ce <HAL_PCD_Start>
 8019228:	4603      	mov	r3, r0
 801922a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801922c:	7bfb      	ldrb	r3, [r7, #15]
 801922e:	4618      	mov	r0, r3
 8019230:	f000 f942 	bl	80194b8 <USBD_Get_USB_Status>
 8019234:	4603      	mov	r3, r0
 8019236:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019238:	7bbb      	ldrb	r3, [r7, #14]
}
 801923a:	4618      	mov	r0, r3
 801923c:	3710      	adds	r7, #16
 801923e:	46bd      	mov	sp, r7
 8019240:	bd80      	pop	{r7, pc}

08019242 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019242:	b580      	push	{r7, lr}
 8019244:	b084      	sub	sp, #16
 8019246:	af00      	add	r7, sp, #0
 8019248:	6078      	str	r0, [r7, #4]
 801924a:	4608      	mov	r0, r1
 801924c:	4611      	mov	r1, r2
 801924e:	461a      	mov	r2, r3
 8019250:	4603      	mov	r3, r0
 8019252:	70fb      	strb	r3, [r7, #3]
 8019254:	460b      	mov	r3, r1
 8019256:	70bb      	strb	r3, [r7, #2]
 8019258:	4613      	mov	r3, r2
 801925a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801925c:	2300      	movs	r3, #0
 801925e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019260:	2300      	movs	r3, #0
 8019262:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801926a:	78bb      	ldrb	r3, [r7, #2]
 801926c:	883a      	ldrh	r2, [r7, #0]
 801926e:	78f9      	ldrb	r1, [r7, #3]
 8019270:	f7f1 fc37 	bl	800aae2 <HAL_PCD_EP_Open>
 8019274:	4603      	mov	r3, r0
 8019276:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019278:	7bfb      	ldrb	r3, [r7, #15]
 801927a:	4618      	mov	r0, r3
 801927c:	f000 f91c 	bl	80194b8 <USBD_Get_USB_Status>
 8019280:	4603      	mov	r3, r0
 8019282:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019284:	7bbb      	ldrb	r3, [r7, #14]
}
 8019286:	4618      	mov	r0, r3
 8019288:	3710      	adds	r7, #16
 801928a:	46bd      	mov	sp, r7
 801928c:	bd80      	pop	{r7, pc}

0801928e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801928e:	b580      	push	{r7, lr}
 8019290:	b084      	sub	sp, #16
 8019292:	af00      	add	r7, sp, #0
 8019294:	6078      	str	r0, [r7, #4]
 8019296:	460b      	mov	r3, r1
 8019298:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801929a:	2300      	movs	r3, #0
 801929c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801929e:	2300      	movs	r3, #0
 80192a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80192a8:	78fa      	ldrb	r2, [r7, #3]
 80192aa:	4611      	mov	r1, r2
 80192ac:	4618      	mov	r0, r3
 80192ae:	f7f1 fc80 	bl	800abb2 <HAL_PCD_EP_Close>
 80192b2:	4603      	mov	r3, r0
 80192b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80192b6:	7bfb      	ldrb	r3, [r7, #15]
 80192b8:	4618      	mov	r0, r3
 80192ba:	f000 f8fd 	bl	80194b8 <USBD_Get_USB_Status>
 80192be:	4603      	mov	r3, r0
 80192c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80192c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80192c4:	4618      	mov	r0, r3
 80192c6:	3710      	adds	r7, #16
 80192c8:	46bd      	mov	sp, r7
 80192ca:	bd80      	pop	{r7, pc}

080192cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80192cc:	b580      	push	{r7, lr}
 80192ce:	b084      	sub	sp, #16
 80192d0:	af00      	add	r7, sp, #0
 80192d2:	6078      	str	r0, [r7, #4]
 80192d4:	460b      	mov	r3, r1
 80192d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80192d8:	2300      	movs	r3, #0
 80192da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80192dc:	2300      	movs	r3, #0
 80192de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80192e6:	78fa      	ldrb	r2, [r7, #3]
 80192e8:	4611      	mov	r1, r2
 80192ea:	4618      	mov	r0, r3
 80192ec:	f7f1 fd58 	bl	800ada0 <HAL_PCD_EP_SetStall>
 80192f0:	4603      	mov	r3, r0
 80192f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80192f4:	7bfb      	ldrb	r3, [r7, #15]
 80192f6:	4618      	mov	r0, r3
 80192f8:	f000 f8de 	bl	80194b8 <USBD_Get_USB_Status>
 80192fc:	4603      	mov	r3, r0
 80192fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019300:	7bbb      	ldrb	r3, [r7, #14]
}
 8019302:	4618      	mov	r0, r3
 8019304:	3710      	adds	r7, #16
 8019306:	46bd      	mov	sp, r7
 8019308:	bd80      	pop	{r7, pc}

0801930a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801930a:	b580      	push	{r7, lr}
 801930c:	b084      	sub	sp, #16
 801930e:	af00      	add	r7, sp, #0
 8019310:	6078      	str	r0, [r7, #4]
 8019312:	460b      	mov	r3, r1
 8019314:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019316:	2300      	movs	r3, #0
 8019318:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801931a:	2300      	movs	r3, #0
 801931c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019324:	78fa      	ldrb	r2, [r7, #3]
 8019326:	4611      	mov	r1, r2
 8019328:	4618      	mov	r0, r3
 801932a:	f7f1 fd9d 	bl	800ae68 <HAL_PCD_EP_ClrStall>
 801932e:	4603      	mov	r3, r0
 8019330:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019332:	7bfb      	ldrb	r3, [r7, #15]
 8019334:	4618      	mov	r0, r3
 8019336:	f000 f8bf 	bl	80194b8 <USBD_Get_USB_Status>
 801933a:	4603      	mov	r3, r0
 801933c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801933e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019340:	4618      	mov	r0, r3
 8019342:	3710      	adds	r7, #16
 8019344:	46bd      	mov	sp, r7
 8019346:	bd80      	pop	{r7, pc}

08019348 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019348:	b480      	push	{r7}
 801934a:	b085      	sub	sp, #20
 801934c:	af00      	add	r7, sp, #0
 801934e:	6078      	str	r0, [r7, #4]
 8019350:	460b      	mov	r3, r1
 8019352:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801935a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801935c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019360:	2b00      	cmp	r3, #0
 8019362:	da0b      	bge.n	801937c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019364:	78fb      	ldrb	r3, [r7, #3]
 8019366:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801936a:	68f9      	ldr	r1, [r7, #12]
 801936c:	4613      	mov	r3, r2
 801936e:	00db      	lsls	r3, r3, #3
 8019370:	1a9b      	subs	r3, r3, r2
 8019372:	009b      	lsls	r3, r3, #2
 8019374:	440b      	add	r3, r1
 8019376:	333e      	adds	r3, #62	; 0x3e
 8019378:	781b      	ldrb	r3, [r3, #0]
 801937a:	e00b      	b.n	8019394 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801937c:	78fb      	ldrb	r3, [r7, #3]
 801937e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019382:	68f9      	ldr	r1, [r7, #12]
 8019384:	4613      	mov	r3, r2
 8019386:	00db      	lsls	r3, r3, #3
 8019388:	1a9b      	subs	r3, r3, r2
 801938a:	009b      	lsls	r3, r3, #2
 801938c:	440b      	add	r3, r1
 801938e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8019392:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019394:	4618      	mov	r0, r3
 8019396:	3714      	adds	r7, #20
 8019398:	46bd      	mov	sp, r7
 801939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801939e:	4770      	bx	lr

080193a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80193a0:	b580      	push	{r7, lr}
 80193a2:	b084      	sub	sp, #16
 80193a4:	af00      	add	r7, sp, #0
 80193a6:	6078      	str	r0, [r7, #4]
 80193a8:	460b      	mov	r3, r1
 80193aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80193ac:	2300      	movs	r3, #0
 80193ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80193b0:	2300      	movs	r3, #0
 80193b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80193ba:	78fa      	ldrb	r2, [r7, #3]
 80193bc:	4611      	mov	r1, r2
 80193be:	4618      	mov	r0, r3
 80193c0:	f7f1 fb6a 	bl	800aa98 <HAL_PCD_SetAddress>
 80193c4:	4603      	mov	r3, r0
 80193c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80193c8:	7bfb      	ldrb	r3, [r7, #15]
 80193ca:	4618      	mov	r0, r3
 80193cc:	f000 f874 	bl	80194b8 <USBD_Get_USB_Status>
 80193d0:	4603      	mov	r3, r0
 80193d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80193d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80193d6:	4618      	mov	r0, r3
 80193d8:	3710      	adds	r7, #16
 80193da:	46bd      	mov	sp, r7
 80193dc:	bd80      	pop	{r7, pc}

080193de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80193de:	b580      	push	{r7, lr}
 80193e0:	b086      	sub	sp, #24
 80193e2:	af00      	add	r7, sp, #0
 80193e4:	60f8      	str	r0, [r7, #12]
 80193e6:	607a      	str	r2, [r7, #4]
 80193e8:	603b      	str	r3, [r7, #0]
 80193ea:	460b      	mov	r3, r1
 80193ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80193ee:	2300      	movs	r3, #0
 80193f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80193f2:	2300      	movs	r3, #0
 80193f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80193f6:	68fb      	ldr	r3, [r7, #12]
 80193f8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80193fc:	7af9      	ldrb	r1, [r7, #11]
 80193fe:	683b      	ldr	r3, [r7, #0]
 8019400:	687a      	ldr	r2, [r7, #4]
 8019402:	f7f1 fc83 	bl	800ad0c <HAL_PCD_EP_Transmit>
 8019406:	4603      	mov	r3, r0
 8019408:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801940a:	7dfb      	ldrb	r3, [r7, #23]
 801940c:	4618      	mov	r0, r3
 801940e:	f000 f853 	bl	80194b8 <USBD_Get_USB_Status>
 8019412:	4603      	mov	r3, r0
 8019414:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019416:	7dbb      	ldrb	r3, [r7, #22]
}
 8019418:	4618      	mov	r0, r3
 801941a:	3718      	adds	r7, #24
 801941c:	46bd      	mov	sp, r7
 801941e:	bd80      	pop	{r7, pc}

08019420 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019420:	b580      	push	{r7, lr}
 8019422:	b086      	sub	sp, #24
 8019424:	af00      	add	r7, sp, #0
 8019426:	60f8      	str	r0, [r7, #12]
 8019428:	607a      	str	r2, [r7, #4]
 801942a:	603b      	str	r3, [r7, #0]
 801942c:	460b      	mov	r3, r1
 801942e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019430:	2300      	movs	r3, #0
 8019432:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019434:	2300      	movs	r3, #0
 8019436:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019438:	68fb      	ldr	r3, [r7, #12]
 801943a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801943e:	7af9      	ldrb	r1, [r7, #11]
 8019440:	683b      	ldr	r3, [r7, #0]
 8019442:	687a      	ldr	r2, [r7, #4]
 8019444:	f7f1 fbff 	bl	800ac46 <HAL_PCD_EP_Receive>
 8019448:	4603      	mov	r3, r0
 801944a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801944c:	7dfb      	ldrb	r3, [r7, #23]
 801944e:	4618      	mov	r0, r3
 8019450:	f000 f832 	bl	80194b8 <USBD_Get_USB_Status>
 8019454:	4603      	mov	r3, r0
 8019456:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019458:	7dbb      	ldrb	r3, [r7, #22]
}
 801945a:	4618      	mov	r0, r3
 801945c:	3718      	adds	r7, #24
 801945e:	46bd      	mov	sp, r7
 8019460:	bd80      	pop	{r7, pc}

08019462 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019462:	b580      	push	{r7, lr}
 8019464:	b082      	sub	sp, #8
 8019466:	af00      	add	r7, sp, #0
 8019468:	6078      	str	r0, [r7, #4]
 801946a:	460b      	mov	r3, r1
 801946c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801946e:	687b      	ldr	r3, [r7, #4]
 8019470:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019474:	78fa      	ldrb	r2, [r7, #3]
 8019476:	4611      	mov	r1, r2
 8019478:	4618      	mov	r0, r3
 801947a:	f7f1 fc2f 	bl	800acdc <HAL_PCD_EP_GetRxCount>
 801947e:	4603      	mov	r3, r0
}
 8019480:	4618      	mov	r0, r3
 8019482:	3708      	adds	r7, #8
 8019484:	46bd      	mov	sp, r7
 8019486:	bd80      	pop	{r7, pc}

08019488 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019488:	b480      	push	{r7}
 801948a:	b083      	sub	sp, #12
 801948c:	af00      	add	r7, sp, #0
 801948e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8019490:	4b03      	ldr	r3, [pc, #12]	; (80194a0 <USBD_static_malloc+0x18>)
}
 8019492:	4618      	mov	r0, r3
 8019494:	370c      	adds	r7, #12
 8019496:	46bd      	mov	sp, r7
 8019498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801949c:	4770      	bx	lr
 801949e:	bf00      	nop
 80194a0:	20005c98 	.word	0x20005c98

080194a4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80194a4:	b480      	push	{r7}
 80194a6:	b083      	sub	sp, #12
 80194a8:	af00      	add	r7, sp, #0
 80194aa:	6078      	str	r0, [r7, #4]

}
 80194ac:	bf00      	nop
 80194ae:	370c      	adds	r7, #12
 80194b0:	46bd      	mov	sp, r7
 80194b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194b6:	4770      	bx	lr

080194b8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80194b8:	b480      	push	{r7}
 80194ba:	b085      	sub	sp, #20
 80194bc:	af00      	add	r7, sp, #0
 80194be:	4603      	mov	r3, r0
 80194c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80194c2:	2300      	movs	r3, #0
 80194c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80194c6:	79fb      	ldrb	r3, [r7, #7]
 80194c8:	2b03      	cmp	r3, #3
 80194ca:	d817      	bhi.n	80194fc <USBD_Get_USB_Status+0x44>
 80194cc:	a201      	add	r2, pc, #4	; (adr r2, 80194d4 <USBD_Get_USB_Status+0x1c>)
 80194ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80194d2:	bf00      	nop
 80194d4:	080194e5 	.word	0x080194e5
 80194d8:	080194eb 	.word	0x080194eb
 80194dc:	080194f1 	.word	0x080194f1
 80194e0:	080194f7 	.word	0x080194f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80194e4:	2300      	movs	r3, #0
 80194e6:	73fb      	strb	r3, [r7, #15]
    break;
 80194e8:	e00b      	b.n	8019502 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80194ea:	2303      	movs	r3, #3
 80194ec:	73fb      	strb	r3, [r7, #15]
    break;
 80194ee:	e008      	b.n	8019502 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80194f0:	2301      	movs	r3, #1
 80194f2:	73fb      	strb	r3, [r7, #15]
    break;
 80194f4:	e005      	b.n	8019502 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80194f6:	2303      	movs	r3, #3
 80194f8:	73fb      	strb	r3, [r7, #15]
    break;
 80194fa:	e002      	b.n	8019502 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80194fc:	2303      	movs	r3, #3
 80194fe:	73fb      	strb	r3, [r7, #15]
    break;
 8019500:	bf00      	nop
  }
  return usb_status;
 8019502:	7bfb      	ldrb	r3, [r7, #15]
}
 8019504:	4618      	mov	r0, r3
 8019506:	3714      	adds	r7, #20
 8019508:	46bd      	mov	sp, r7
 801950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801950e:	4770      	bx	lr

08019510 <_Znwj>:
 8019510:	2801      	cmp	r0, #1
 8019512:	bf38      	it	cc
 8019514:	2001      	movcc	r0, #1
 8019516:	b510      	push	{r4, lr}
 8019518:	4604      	mov	r4, r0
 801951a:	4620      	mov	r0, r4
 801951c:	f001 f906 	bl	801a72c <malloc>
 8019520:	b930      	cbnz	r0, 8019530 <_Znwj+0x20>
 8019522:	f000 f81b 	bl	801955c <_ZSt15get_new_handlerv>
 8019526:	b908      	cbnz	r0, 801952c <_Znwj+0x1c>
 8019528:	f000 ffd4 	bl	801a4d4 <abort>
 801952c:	4780      	blx	r0
 801952e:	e7f4      	b.n	801951a <_Znwj+0xa>
 8019530:	bd10      	pop	{r4, pc}

08019532 <__cxa_pure_virtual>:
 8019532:	b508      	push	{r3, lr}
 8019534:	f000 f80c 	bl	8019550 <_ZSt9terminatev>

08019538 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8019538:	b508      	push	{r3, lr}
 801953a:	4780      	blx	r0
 801953c:	f000 ffca 	bl	801a4d4 <abort>

08019540 <_ZSt13get_terminatev>:
 8019540:	4b02      	ldr	r3, [pc, #8]	; (801954c <_ZSt13get_terminatev+0xc>)
 8019542:	6818      	ldr	r0, [r3, #0]
 8019544:	f3bf 8f5b 	dmb	ish
 8019548:	4770      	bx	lr
 801954a:	bf00      	nop
 801954c:	200001f0 	.word	0x200001f0

08019550 <_ZSt9terminatev>:
 8019550:	b508      	push	{r3, lr}
 8019552:	f7ff fff5 	bl	8019540 <_ZSt13get_terminatev>
 8019556:	f7ff ffef 	bl	8019538 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0801955c <_ZSt15get_new_handlerv>:
 801955c:	4b02      	ldr	r3, [pc, #8]	; (8019568 <_ZSt15get_new_handlerv+0xc>)
 801955e:	6818      	ldr	r0, [r3, #0]
 8019560:	f3bf 8f5b 	dmb	ish
 8019564:	4770      	bx	lr
 8019566:	bf00      	nop
 8019568:	20005eb8 	.word	0x20005eb8

0801956c <pow>:
 801956c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019570:	ec59 8b10 	vmov	r8, r9, d0
 8019574:	ec57 6b11 	vmov	r6, r7, d1
 8019578:	f000 f8a6 	bl	80196c8 <__ieee754_pow>
 801957c:	4b4e      	ldr	r3, [pc, #312]	; (80196b8 <pow+0x14c>)
 801957e:	f993 3000 	ldrsb.w	r3, [r3]
 8019582:	3301      	adds	r3, #1
 8019584:	ec55 4b10 	vmov	r4, r5, d0
 8019588:	d015      	beq.n	80195b6 <pow+0x4a>
 801958a:	4632      	mov	r2, r6
 801958c:	463b      	mov	r3, r7
 801958e:	4630      	mov	r0, r6
 8019590:	4639      	mov	r1, r7
 8019592:	f7e7 fadb 	bl	8000b4c <__aeabi_dcmpun>
 8019596:	b970      	cbnz	r0, 80195b6 <pow+0x4a>
 8019598:	4642      	mov	r2, r8
 801959a:	464b      	mov	r3, r9
 801959c:	4640      	mov	r0, r8
 801959e:	4649      	mov	r1, r9
 80195a0:	f7e7 fad4 	bl	8000b4c <__aeabi_dcmpun>
 80195a4:	2200      	movs	r2, #0
 80195a6:	2300      	movs	r3, #0
 80195a8:	b148      	cbz	r0, 80195be <pow+0x52>
 80195aa:	4630      	mov	r0, r6
 80195ac:	4639      	mov	r1, r7
 80195ae:	f7e7 fa9b 	bl	8000ae8 <__aeabi_dcmpeq>
 80195b2:	2800      	cmp	r0, #0
 80195b4:	d17d      	bne.n	80196b2 <pow+0x146>
 80195b6:	ec45 4b10 	vmov	d0, r4, r5
 80195ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80195be:	4640      	mov	r0, r8
 80195c0:	4649      	mov	r1, r9
 80195c2:	f7e7 fa91 	bl	8000ae8 <__aeabi_dcmpeq>
 80195c6:	b1e0      	cbz	r0, 8019602 <pow+0x96>
 80195c8:	2200      	movs	r2, #0
 80195ca:	2300      	movs	r3, #0
 80195cc:	4630      	mov	r0, r6
 80195ce:	4639      	mov	r1, r7
 80195d0:	f7e7 fa8a 	bl	8000ae8 <__aeabi_dcmpeq>
 80195d4:	2800      	cmp	r0, #0
 80195d6:	d16c      	bne.n	80196b2 <pow+0x146>
 80195d8:	ec47 6b10 	vmov	d0, r6, r7
 80195dc:	f000 fe53 	bl	801a286 <finite>
 80195e0:	2800      	cmp	r0, #0
 80195e2:	d0e8      	beq.n	80195b6 <pow+0x4a>
 80195e4:	2200      	movs	r2, #0
 80195e6:	2300      	movs	r3, #0
 80195e8:	4630      	mov	r0, r6
 80195ea:	4639      	mov	r1, r7
 80195ec:	f7e7 fa86 	bl	8000afc <__aeabi_dcmplt>
 80195f0:	2800      	cmp	r0, #0
 80195f2:	d0e0      	beq.n	80195b6 <pow+0x4a>
 80195f4:	f000 ff76 	bl	801a4e4 <__errno>
 80195f8:	2321      	movs	r3, #33	; 0x21
 80195fa:	6003      	str	r3, [r0, #0]
 80195fc:	2400      	movs	r4, #0
 80195fe:	4d2f      	ldr	r5, [pc, #188]	; (80196bc <pow+0x150>)
 8019600:	e7d9      	b.n	80195b6 <pow+0x4a>
 8019602:	ec45 4b10 	vmov	d0, r4, r5
 8019606:	f000 fe3e 	bl	801a286 <finite>
 801960a:	bbb8      	cbnz	r0, 801967c <pow+0x110>
 801960c:	ec49 8b10 	vmov	d0, r8, r9
 8019610:	f000 fe39 	bl	801a286 <finite>
 8019614:	b390      	cbz	r0, 801967c <pow+0x110>
 8019616:	ec47 6b10 	vmov	d0, r6, r7
 801961a:	f000 fe34 	bl	801a286 <finite>
 801961e:	b368      	cbz	r0, 801967c <pow+0x110>
 8019620:	4622      	mov	r2, r4
 8019622:	462b      	mov	r3, r5
 8019624:	4620      	mov	r0, r4
 8019626:	4629      	mov	r1, r5
 8019628:	f7e7 fa90 	bl	8000b4c <__aeabi_dcmpun>
 801962c:	b160      	cbz	r0, 8019648 <pow+0xdc>
 801962e:	f000 ff59 	bl	801a4e4 <__errno>
 8019632:	2321      	movs	r3, #33	; 0x21
 8019634:	6003      	str	r3, [r0, #0]
 8019636:	2200      	movs	r2, #0
 8019638:	2300      	movs	r3, #0
 801963a:	4610      	mov	r0, r2
 801963c:	4619      	mov	r1, r3
 801963e:	f7e7 f915 	bl	800086c <__aeabi_ddiv>
 8019642:	4604      	mov	r4, r0
 8019644:	460d      	mov	r5, r1
 8019646:	e7b6      	b.n	80195b6 <pow+0x4a>
 8019648:	f000 ff4c 	bl	801a4e4 <__errno>
 801964c:	2322      	movs	r3, #34	; 0x22
 801964e:	6003      	str	r3, [r0, #0]
 8019650:	2200      	movs	r2, #0
 8019652:	2300      	movs	r3, #0
 8019654:	4640      	mov	r0, r8
 8019656:	4649      	mov	r1, r9
 8019658:	f7e7 fa50 	bl	8000afc <__aeabi_dcmplt>
 801965c:	2400      	movs	r4, #0
 801965e:	b158      	cbz	r0, 8019678 <pow+0x10c>
 8019660:	ec47 6b10 	vmov	d0, r6, r7
 8019664:	f000 fe24 	bl	801a2b0 <rint>
 8019668:	4632      	mov	r2, r6
 801966a:	ec51 0b10 	vmov	r0, r1, d0
 801966e:	463b      	mov	r3, r7
 8019670:	f7e7 fa3a 	bl	8000ae8 <__aeabi_dcmpeq>
 8019674:	2800      	cmp	r0, #0
 8019676:	d0c2      	beq.n	80195fe <pow+0x92>
 8019678:	4d11      	ldr	r5, [pc, #68]	; (80196c0 <pow+0x154>)
 801967a:	e79c      	b.n	80195b6 <pow+0x4a>
 801967c:	2200      	movs	r2, #0
 801967e:	2300      	movs	r3, #0
 8019680:	4620      	mov	r0, r4
 8019682:	4629      	mov	r1, r5
 8019684:	f7e7 fa30 	bl	8000ae8 <__aeabi_dcmpeq>
 8019688:	2800      	cmp	r0, #0
 801968a:	d094      	beq.n	80195b6 <pow+0x4a>
 801968c:	ec49 8b10 	vmov	d0, r8, r9
 8019690:	f000 fdf9 	bl	801a286 <finite>
 8019694:	2800      	cmp	r0, #0
 8019696:	d08e      	beq.n	80195b6 <pow+0x4a>
 8019698:	ec47 6b10 	vmov	d0, r6, r7
 801969c:	f000 fdf3 	bl	801a286 <finite>
 80196a0:	2800      	cmp	r0, #0
 80196a2:	d088      	beq.n	80195b6 <pow+0x4a>
 80196a4:	f000 ff1e 	bl	801a4e4 <__errno>
 80196a8:	2322      	movs	r3, #34	; 0x22
 80196aa:	6003      	str	r3, [r0, #0]
 80196ac:	2400      	movs	r4, #0
 80196ae:	2500      	movs	r5, #0
 80196b0:	e781      	b.n	80195b6 <pow+0x4a>
 80196b2:	4d04      	ldr	r5, [pc, #16]	; (80196c4 <pow+0x158>)
 80196b4:	2400      	movs	r4, #0
 80196b6:	e77e      	b.n	80195b6 <pow+0x4a>
 80196b8:	200001f4 	.word	0x200001f4
 80196bc:	fff00000 	.word	0xfff00000
 80196c0:	7ff00000 	.word	0x7ff00000
 80196c4:	3ff00000 	.word	0x3ff00000

080196c8 <__ieee754_pow>:
 80196c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196cc:	ed2d 8b06 	vpush	{d8-d10}
 80196d0:	b08d      	sub	sp, #52	; 0x34
 80196d2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80196d6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80196da:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80196de:	ea56 0100 	orrs.w	r1, r6, r0
 80196e2:	ec53 2b10 	vmov	r2, r3, d0
 80196e6:	f000 84d1 	beq.w	801a08c <__ieee754_pow+0x9c4>
 80196ea:	497f      	ldr	r1, [pc, #508]	; (80198e8 <__ieee754_pow+0x220>)
 80196ec:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80196f0:	428c      	cmp	r4, r1
 80196f2:	ee10 8a10 	vmov	r8, s0
 80196f6:	4699      	mov	r9, r3
 80196f8:	dc09      	bgt.n	801970e <__ieee754_pow+0x46>
 80196fa:	d103      	bne.n	8019704 <__ieee754_pow+0x3c>
 80196fc:	b97a      	cbnz	r2, 801971e <__ieee754_pow+0x56>
 80196fe:	42a6      	cmp	r6, r4
 8019700:	dd02      	ble.n	8019708 <__ieee754_pow+0x40>
 8019702:	e00c      	b.n	801971e <__ieee754_pow+0x56>
 8019704:	428e      	cmp	r6, r1
 8019706:	dc02      	bgt.n	801970e <__ieee754_pow+0x46>
 8019708:	428e      	cmp	r6, r1
 801970a:	d110      	bne.n	801972e <__ieee754_pow+0x66>
 801970c:	b178      	cbz	r0, 801972e <__ieee754_pow+0x66>
 801970e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8019712:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019716:	ea54 0308 	orrs.w	r3, r4, r8
 801971a:	f000 84b7 	beq.w	801a08c <__ieee754_pow+0x9c4>
 801971e:	4873      	ldr	r0, [pc, #460]	; (80198ec <__ieee754_pow+0x224>)
 8019720:	b00d      	add	sp, #52	; 0x34
 8019722:	ecbd 8b06 	vpop	{d8-d10}
 8019726:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801972a:	f000 bdb9 	b.w	801a2a0 <nan>
 801972e:	f1b9 0f00 	cmp.w	r9, #0
 8019732:	da36      	bge.n	80197a2 <__ieee754_pow+0xda>
 8019734:	496e      	ldr	r1, [pc, #440]	; (80198f0 <__ieee754_pow+0x228>)
 8019736:	428e      	cmp	r6, r1
 8019738:	dc51      	bgt.n	80197de <__ieee754_pow+0x116>
 801973a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 801973e:	428e      	cmp	r6, r1
 8019740:	f340 84af 	ble.w	801a0a2 <__ieee754_pow+0x9da>
 8019744:	1531      	asrs	r1, r6, #20
 8019746:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801974a:	2914      	cmp	r1, #20
 801974c:	dd0f      	ble.n	801976e <__ieee754_pow+0xa6>
 801974e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8019752:	fa20 fc01 	lsr.w	ip, r0, r1
 8019756:	fa0c f101 	lsl.w	r1, ip, r1
 801975a:	4281      	cmp	r1, r0
 801975c:	f040 84a1 	bne.w	801a0a2 <__ieee754_pow+0x9da>
 8019760:	f00c 0c01 	and.w	ip, ip, #1
 8019764:	f1cc 0102 	rsb	r1, ip, #2
 8019768:	9100      	str	r1, [sp, #0]
 801976a:	b180      	cbz	r0, 801978e <__ieee754_pow+0xc6>
 801976c:	e059      	b.n	8019822 <__ieee754_pow+0x15a>
 801976e:	2800      	cmp	r0, #0
 8019770:	d155      	bne.n	801981e <__ieee754_pow+0x156>
 8019772:	f1c1 0114 	rsb	r1, r1, #20
 8019776:	fa46 fc01 	asr.w	ip, r6, r1
 801977a:	fa0c f101 	lsl.w	r1, ip, r1
 801977e:	42b1      	cmp	r1, r6
 8019780:	f040 848c 	bne.w	801a09c <__ieee754_pow+0x9d4>
 8019784:	f00c 0c01 	and.w	ip, ip, #1
 8019788:	f1cc 0102 	rsb	r1, ip, #2
 801978c:	9100      	str	r1, [sp, #0]
 801978e:	4959      	ldr	r1, [pc, #356]	; (80198f4 <__ieee754_pow+0x22c>)
 8019790:	428e      	cmp	r6, r1
 8019792:	d12d      	bne.n	80197f0 <__ieee754_pow+0x128>
 8019794:	2f00      	cmp	r7, #0
 8019796:	da79      	bge.n	801988c <__ieee754_pow+0x1c4>
 8019798:	4956      	ldr	r1, [pc, #344]	; (80198f4 <__ieee754_pow+0x22c>)
 801979a:	2000      	movs	r0, #0
 801979c:	f7e7 f866 	bl	800086c <__aeabi_ddiv>
 80197a0:	e016      	b.n	80197d0 <__ieee754_pow+0x108>
 80197a2:	2100      	movs	r1, #0
 80197a4:	9100      	str	r1, [sp, #0]
 80197a6:	2800      	cmp	r0, #0
 80197a8:	d13b      	bne.n	8019822 <__ieee754_pow+0x15a>
 80197aa:	494f      	ldr	r1, [pc, #316]	; (80198e8 <__ieee754_pow+0x220>)
 80197ac:	428e      	cmp	r6, r1
 80197ae:	d1ee      	bne.n	801978e <__ieee754_pow+0xc6>
 80197b0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80197b4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80197b8:	ea53 0308 	orrs.w	r3, r3, r8
 80197bc:	f000 8466 	beq.w	801a08c <__ieee754_pow+0x9c4>
 80197c0:	4b4d      	ldr	r3, [pc, #308]	; (80198f8 <__ieee754_pow+0x230>)
 80197c2:	429c      	cmp	r4, r3
 80197c4:	dd0d      	ble.n	80197e2 <__ieee754_pow+0x11a>
 80197c6:	2f00      	cmp	r7, #0
 80197c8:	f280 8464 	bge.w	801a094 <__ieee754_pow+0x9cc>
 80197cc:	2000      	movs	r0, #0
 80197ce:	2100      	movs	r1, #0
 80197d0:	ec41 0b10 	vmov	d0, r0, r1
 80197d4:	b00d      	add	sp, #52	; 0x34
 80197d6:	ecbd 8b06 	vpop	{d8-d10}
 80197da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197de:	2102      	movs	r1, #2
 80197e0:	e7e0      	b.n	80197a4 <__ieee754_pow+0xdc>
 80197e2:	2f00      	cmp	r7, #0
 80197e4:	daf2      	bge.n	80197cc <__ieee754_pow+0x104>
 80197e6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80197ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80197ee:	e7ef      	b.n	80197d0 <__ieee754_pow+0x108>
 80197f0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80197f4:	d104      	bne.n	8019800 <__ieee754_pow+0x138>
 80197f6:	4610      	mov	r0, r2
 80197f8:	4619      	mov	r1, r3
 80197fa:	f7e6 ff0d 	bl	8000618 <__aeabi_dmul>
 80197fe:	e7e7      	b.n	80197d0 <__ieee754_pow+0x108>
 8019800:	493e      	ldr	r1, [pc, #248]	; (80198fc <__ieee754_pow+0x234>)
 8019802:	428f      	cmp	r7, r1
 8019804:	d10d      	bne.n	8019822 <__ieee754_pow+0x15a>
 8019806:	f1b9 0f00 	cmp.w	r9, #0
 801980a:	db0a      	blt.n	8019822 <__ieee754_pow+0x15a>
 801980c:	ec43 2b10 	vmov	d0, r2, r3
 8019810:	b00d      	add	sp, #52	; 0x34
 8019812:	ecbd 8b06 	vpop	{d8-d10}
 8019816:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801981a:	f000 bc77 	b.w	801a10c <__ieee754_sqrt>
 801981e:	2100      	movs	r1, #0
 8019820:	9100      	str	r1, [sp, #0]
 8019822:	ec43 2b10 	vmov	d0, r2, r3
 8019826:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801982a:	f000 fd23 	bl	801a274 <fabs>
 801982e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019832:	ec51 0b10 	vmov	r0, r1, d0
 8019836:	f1b8 0f00 	cmp.w	r8, #0
 801983a:	d12a      	bne.n	8019892 <__ieee754_pow+0x1ca>
 801983c:	b12c      	cbz	r4, 801984a <__ieee754_pow+0x182>
 801983e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80198f4 <__ieee754_pow+0x22c>
 8019842:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8019846:	45e6      	cmp	lr, ip
 8019848:	d123      	bne.n	8019892 <__ieee754_pow+0x1ca>
 801984a:	2f00      	cmp	r7, #0
 801984c:	da05      	bge.n	801985a <__ieee754_pow+0x192>
 801984e:	4602      	mov	r2, r0
 8019850:	460b      	mov	r3, r1
 8019852:	2000      	movs	r0, #0
 8019854:	4927      	ldr	r1, [pc, #156]	; (80198f4 <__ieee754_pow+0x22c>)
 8019856:	f7e7 f809 	bl	800086c <__aeabi_ddiv>
 801985a:	f1b9 0f00 	cmp.w	r9, #0
 801985e:	dab7      	bge.n	80197d0 <__ieee754_pow+0x108>
 8019860:	9b00      	ldr	r3, [sp, #0]
 8019862:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8019866:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801986a:	4323      	orrs	r3, r4
 801986c:	d108      	bne.n	8019880 <__ieee754_pow+0x1b8>
 801986e:	4602      	mov	r2, r0
 8019870:	460b      	mov	r3, r1
 8019872:	4610      	mov	r0, r2
 8019874:	4619      	mov	r1, r3
 8019876:	f7e6 fd17 	bl	80002a8 <__aeabi_dsub>
 801987a:	4602      	mov	r2, r0
 801987c:	460b      	mov	r3, r1
 801987e:	e78d      	b.n	801979c <__ieee754_pow+0xd4>
 8019880:	9b00      	ldr	r3, [sp, #0]
 8019882:	2b01      	cmp	r3, #1
 8019884:	d1a4      	bne.n	80197d0 <__ieee754_pow+0x108>
 8019886:	4602      	mov	r2, r0
 8019888:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801988c:	4610      	mov	r0, r2
 801988e:	4619      	mov	r1, r3
 8019890:	e79e      	b.n	80197d0 <__ieee754_pow+0x108>
 8019892:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8019896:	f10c 35ff 	add.w	r5, ip, #4294967295
 801989a:	950a      	str	r5, [sp, #40]	; 0x28
 801989c:	9d00      	ldr	r5, [sp, #0]
 801989e:	46ac      	mov	ip, r5
 80198a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80198a2:	ea5c 0505 	orrs.w	r5, ip, r5
 80198a6:	d0e4      	beq.n	8019872 <__ieee754_pow+0x1aa>
 80198a8:	4b15      	ldr	r3, [pc, #84]	; (8019900 <__ieee754_pow+0x238>)
 80198aa:	429e      	cmp	r6, r3
 80198ac:	f340 80fc 	ble.w	8019aa8 <__ieee754_pow+0x3e0>
 80198b0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80198b4:	429e      	cmp	r6, r3
 80198b6:	4b10      	ldr	r3, [pc, #64]	; (80198f8 <__ieee754_pow+0x230>)
 80198b8:	dd07      	ble.n	80198ca <__ieee754_pow+0x202>
 80198ba:	429c      	cmp	r4, r3
 80198bc:	dc0a      	bgt.n	80198d4 <__ieee754_pow+0x20c>
 80198be:	2f00      	cmp	r7, #0
 80198c0:	da84      	bge.n	80197cc <__ieee754_pow+0x104>
 80198c2:	a307      	add	r3, pc, #28	; (adr r3, 80198e0 <__ieee754_pow+0x218>)
 80198c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198c8:	e795      	b.n	80197f6 <__ieee754_pow+0x12e>
 80198ca:	429c      	cmp	r4, r3
 80198cc:	dbf7      	blt.n	80198be <__ieee754_pow+0x1f6>
 80198ce:	4b09      	ldr	r3, [pc, #36]	; (80198f4 <__ieee754_pow+0x22c>)
 80198d0:	429c      	cmp	r4, r3
 80198d2:	dd17      	ble.n	8019904 <__ieee754_pow+0x23c>
 80198d4:	2f00      	cmp	r7, #0
 80198d6:	dcf4      	bgt.n	80198c2 <__ieee754_pow+0x1fa>
 80198d8:	e778      	b.n	80197cc <__ieee754_pow+0x104>
 80198da:	bf00      	nop
 80198dc:	f3af 8000 	nop.w
 80198e0:	8800759c 	.word	0x8800759c
 80198e4:	7e37e43c 	.word	0x7e37e43c
 80198e8:	7ff00000 	.word	0x7ff00000
 80198ec:	08021973 	.word	0x08021973
 80198f0:	433fffff 	.word	0x433fffff
 80198f4:	3ff00000 	.word	0x3ff00000
 80198f8:	3fefffff 	.word	0x3fefffff
 80198fc:	3fe00000 	.word	0x3fe00000
 8019900:	41e00000 	.word	0x41e00000
 8019904:	4b64      	ldr	r3, [pc, #400]	; (8019a98 <__ieee754_pow+0x3d0>)
 8019906:	2200      	movs	r2, #0
 8019908:	f7e6 fcce 	bl	80002a8 <__aeabi_dsub>
 801990c:	a356      	add	r3, pc, #344	; (adr r3, 8019a68 <__ieee754_pow+0x3a0>)
 801990e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019912:	4604      	mov	r4, r0
 8019914:	460d      	mov	r5, r1
 8019916:	f7e6 fe7f 	bl	8000618 <__aeabi_dmul>
 801991a:	a355      	add	r3, pc, #340	; (adr r3, 8019a70 <__ieee754_pow+0x3a8>)
 801991c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019920:	4606      	mov	r6, r0
 8019922:	460f      	mov	r7, r1
 8019924:	4620      	mov	r0, r4
 8019926:	4629      	mov	r1, r5
 8019928:	f7e6 fe76 	bl	8000618 <__aeabi_dmul>
 801992c:	4b5b      	ldr	r3, [pc, #364]	; (8019a9c <__ieee754_pow+0x3d4>)
 801992e:	4682      	mov	sl, r0
 8019930:	468b      	mov	fp, r1
 8019932:	2200      	movs	r2, #0
 8019934:	4620      	mov	r0, r4
 8019936:	4629      	mov	r1, r5
 8019938:	f7e6 fe6e 	bl	8000618 <__aeabi_dmul>
 801993c:	4602      	mov	r2, r0
 801993e:	460b      	mov	r3, r1
 8019940:	a14d      	add	r1, pc, #308	; (adr r1, 8019a78 <__ieee754_pow+0x3b0>)
 8019942:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019946:	f7e6 fcaf 	bl	80002a8 <__aeabi_dsub>
 801994a:	4622      	mov	r2, r4
 801994c:	462b      	mov	r3, r5
 801994e:	f7e6 fe63 	bl	8000618 <__aeabi_dmul>
 8019952:	4602      	mov	r2, r0
 8019954:	460b      	mov	r3, r1
 8019956:	2000      	movs	r0, #0
 8019958:	4951      	ldr	r1, [pc, #324]	; (8019aa0 <__ieee754_pow+0x3d8>)
 801995a:	f7e6 fca5 	bl	80002a8 <__aeabi_dsub>
 801995e:	4622      	mov	r2, r4
 8019960:	4680      	mov	r8, r0
 8019962:	4689      	mov	r9, r1
 8019964:	462b      	mov	r3, r5
 8019966:	4620      	mov	r0, r4
 8019968:	4629      	mov	r1, r5
 801996a:	f7e6 fe55 	bl	8000618 <__aeabi_dmul>
 801996e:	4602      	mov	r2, r0
 8019970:	460b      	mov	r3, r1
 8019972:	4640      	mov	r0, r8
 8019974:	4649      	mov	r1, r9
 8019976:	f7e6 fe4f 	bl	8000618 <__aeabi_dmul>
 801997a:	a341      	add	r3, pc, #260	; (adr r3, 8019a80 <__ieee754_pow+0x3b8>)
 801997c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019980:	f7e6 fe4a 	bl	8000618 <__aeabi_dmul>
 8019984:	4602      	mov	r2, r0
 8019986:	460b      	mov	r3, r1
 8019988:	4650      	mov	r0, sl
 801998a:	4659      	mov	r1, fp
 801998c:	f7e6 fc8c 	bl	80002a8 <__aeabi_dsub>
 8019990:	4602      	mov	r2, r0
 8019992:	460b      	mov	r3, r1
 8019994:	4680      	mov	r8, r0
 8019996:	4689      	mov	r9, r1
 8019998:	4630      	mov	r0, r6
 801999a:	4639      	mov	r1, r7
 801999c:	f7e6 fc86 	bl	80002ac <__adddf3>
 80199a0:	2400      	movs	r4, #0
 80199a2:	4632      	mov	r2, r6
 80199a4:	463b      	mov	r3, r7
 80199a6:	4620      	mov	r0, r4
 80199a8:	460d      	mov	r5, r1
 80199aa:	f7e6 fc7d 	bl	80002a8 <__aeabi_dsub>
 80199ae:	4602      	mov	r2, r0
 80199b0:	460b      	mov	r3, r1
 80199b2:	4640      	mov	r0, r8
 80199b4:	4649      	mov	r1, r9
 80199b6:	f7e6 fc77 	bl	80002a8 <__aeabi_dsub>
 80199ba:	9b00      	ldr	r3, [sp, #0]
 80199bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80199be:	3b01      	subs	r3, #1
 80199c0:	4313      	orrs	r3, r2
 80199c2:	4682      	mov	sl, r0
 80199c4:	468b      	mov	fp, r1
 80199c6:	f040 81f1 	bne.w	8019dac <__ieee754_pow+0x6e4>
 80199ca:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8019a88 <__ieee754_pow+0x3c0>
 80199ce:	eeb0 8a47 	vmov.f32	s16, s14
 80199d2:	eef0 8a67 	vmov.f32	s17, s15
 80199d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80199da:	2600      	movs	r6, #0
 80199dc:	4632      	mov	r2, r6
 80199de:	463b      	mov	r3, r7
 80199e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80199e4:	f7e6 fc60 	bl	80002a8 <__aeabi_dsub>
 80199e8:	4622      	mov	r2, r4
 80199ea:	462b      	mov	r3, r5
 80199ec:	f7e6 fe14 	bl	8000618 <__aeabi_dmul>
 80199f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80199f4:	4680      	mov	r8, r0
 80199f6:	4689      	mov	r9, r1
 80199f8:	4650      	mov	r0, sl
 80199fa:	4659      	mov	r1, fp
 80199fc:	f7e6 fe0c 	bl	8000618 <__aeabi_dmul>
 8019a00:	4602      	mov	r2, r0
 8019a02:	460b      	mov	r3, r1
 8019a04:	4640      	mov	r0, r8
 8019a06:	4649      	mov	r1, r9
 8019a08:	f7e6 fc50 	bl	80002ac <__adddf3>
 8019a0c:	4632      	mov	r2, r6
 8019a0e:	463b      	mov	r3, r7
 8019a10:	4680      	mov	r8, r0
 8019a12:	4689      	mov	r9, r1
 8019a14:	4620      	mov	r0, r4
 8019a16:	4629      	mov	r1, r5
 8019a18:	f7e6 fdfe 	bl	8000618 <__aeabi_dmul>
 8019a1c:	460b      	mov	r3, r1
 8019a1e:	4604      	mov	r4, r0
 8019a20:	460d      	mov	r5, r1
 8019a22:	4602      	mov	r2, r0
 8019a24:	4649      	mov	r1, r9
 8019a26:	4640      	mov	r0, r8
 8019a28:	f7e6 fc40 	bl	80002ac <__adddf3>
 8019a2c:	4b1d      	ldr	r3, [pc, #116]	; (8019aa4 <__ieee754_pow+0x3dc>)
 8019a2e:	4299      	cmp	r1, r3
 8019a30:	ec45 4b19 	vmov	d9, r4, r5
 8019a34:	4606      	mov	r6, r0
 8019a36:	460f      	mov	r7, r1
 8019a38:	468b      	mov	fp, r1
 8019a3a:	f340 82fe 	ble.w	801a03a <__ieee754_pow+0x972>
 8019a3e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8019a42:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8019a46:	4303      	orrs	r3, r0
 8019a48:	f000 81f0 	beq.w	8019e2c <__ieee754_pow+0x764>
 8019a4c:	a310      	add	r3, pc, #64	; (adr r3, 8019a90 <__ieee754_pow+0x3c8>)
 8019a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a52:	ec51 0b18 	vmov	r0, r1, d8
 8019a56:	f7e6 fddf 	bl	8000618 <__aeabi_dmul>
 8019a5a:	a30d      	add	r3, pc, #52	; (adr r3, 8019a90 <__ieee754_pow+0x3c8>)
 8019a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a60:	e6cb      	b.n	80197fa <__ieee754_pow+0x132>
 8019a62:	bf00      	nop
 8019a64:	f3af 8000 	nop.w
 8019a68:	60000000 	.word	0x60000000
 8019a6c:	3ff71547 	.word	0x3ff71547
 8019a70:	f85ddf44 	.word	0xf85ddf44
 8019a74:	3e54ae0b 	.word	0x3e54ae0b
 8019a78:	55555555 	.word	0x55555555
 8019a7c:	3fd55555 	.word	0x3fd55555
 8019a80:	652b82fe 	.word	0x652b82fe
 8019a84:	3ff71547 	.word	0x3ff71547
 8019a88:	00000000 	.word	0x00000000
 8019a8c:	bff00000 	.word	0xbff00000
 8019a90:	8800759c 	.word	0x8800759c
 8019a94:	7e37e43c 	.word	0x7e37e43c
 8019a98:	3ff00000 	.word	0x3ff00000
 8019a9c:	3fd00000 	.word	0x3fd00000
 8019aa0:	3fe00000 	.word	0x3fe00000
 8019aa4:	408fffff 	.word	0x408fffff
 8019aa8:	4bd7      	ldr	r3, [pc, #860]	; (8019e08 <__ieee754_pow+0x740>)
 8019aaa:	ea03 0309 	and.w	r3, r3, r9
 8019aae:	2200      	movs	r2, #0
 8019ab0:	b92b      	cbnz	r3, 8019abe <__ieee754_pow+0x3f6>
 8019ab2:	4bd6      	ldr	r3, [pc, #856]	; (8019e0c <__ieee754_pow+0x744>)
 8019ab4:	f7e6 fdb0 	bl	8000618 <__aeabi_dmul>
 8019ab8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8019abc:	460c      	mov	r4, r1
 8019abe:	1523      	asrs	r3, r4, #20
 8019ac0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019ac4:	4413      	add	r3, r2
 8019ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8019ac8:	4bd1      	ldr	r3, [pc, #836]	; (8019e10 <__ieee754_pow+0x748>)
 8019aca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8019ace:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8019ad2:	429c      	cmp	r4, r3
 8019ad4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8019ad8:	dd08      	ble.n	8019aec <__ieee754_pow+0x424>
 8019ada:	4bce      	ldr	r3, [pc, #824]	; (8019e14 <__ieee754_pow+0x74c>)
 8019adc:	429c      	cmp	r4, r3
 8019ade:	f340 8163 	ble.w	8019da8 <__ieee754_pow+0x6e0>
 8019ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ae4:	3301      	adds	r3, #1
 8019ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8019ae8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8019aec:	2400      	movs	r4, #0
 8019aee:	00e3      	lsls	r3, r4, #3
 8019af0:	930b      	str	r3, [sp, #44]	; 0x2c
 8019af2:	4bc9      	ldr	r3, [pc, #804]	; (8019e18 <__ieee754_pow+0x750>)
 8019af4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019af8:	ed93 7b00 	vldr	d7, [r3]
 8019afc:	4629      	mov	r1, r5
 8019afe:	ec53 2b17 	vmov	r2, r3, d7
 8019b02:	eeb0 8a47 	vmov.f32	s16, s14
 8019b06:	eef0 8a67 	vmov.f32	s17, s15
 8019b0a:	4682      	mov	sl, r0
 8019b0c:	f7e6 fbcc 	bl	80002a8 <__aeabi_dsub>
 8019b10:	4652      	mov	r2, sl
 8019b12:	4606      	mov	r6, r0
 8019b14:	460f      	mov	r7, r1
 8019b16:	462b      	mov	r3, r5
 8019b18:	ec51 0b18 	vmov	r0, r1, d8
 8019b1c:	f7e6 fbc6 	bl	80002ac <__adddf3>
 8019b20:	4602      	mov	r2, r0
 8019b22:	460b      	mov	r3, r1
 8019b24:	2000      	movs	r0, #0
 8019b26:	49bd      	ldr	r1, [pc, #756]	; (8019e1c <__ieee754_pow+0x754>)
 8019b28:	f7e6 fea0 	bl	800086c <__aeabi_ddiv>
 8019b2c:	ec41 0b19 	vmov	d9, r0, r1
 8019b30:	4602      	mov	r2, r0
 8019b32:	460b      	mov	r3, r1
 8019b34:	4630      	mov	r0, r6
 8019b36:	4639      	mov	r1, r7
 8019b38:	f7e6 fd6e 	bl	8000618 <__aeabi_dmul>
 8019b3c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019b40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019b44:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8019b48:	2300      	movs	r3, #0
 8019b4a:	9304      	str	r3, [sp, #16]
 8019b4c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8019b50:	46ab      	mov	fp, r5
 8019b52:	106d      	asrs	r5, r5, #1
 8019b54:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8019b58:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8019b5c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8019b60:	2200      	movs	r2, #0
 8019b62:	4640      	mov	r0, r8
 8019b64:	4649      	mov	r1, r9
 8019b66:	4614      	mov	r4, r2
 8019b68:	461d      	mov	r5, r3
 8019b6a:	f7e6 fd55 	bl	8000618 <__aeabi_dmul>
 8019b6e:	4602      	mov	r2, r0
 8019b70:	460b      	mov	r3, r1
 8019b72:	4630      	mov	r0, r6
 8019b74:	4639      	mov	r1, r7
 8019b76:	f7e6 fb97 	bl	80002a8 <__aeabi_dsub>
 8019b7a:	ec53 2b18 	vmov	r2, r3, d8
 8019b7e:	4606      	mov	r6, r0
 8019b80:	460f      	mov	r7, r1
 8019b82:	4620      	mov	r0, r4
 8019b84:	4629      	mov	r1, r5
 8019b86:	f7e6 fb8f 	bl	80002a8 <__aeabi_dsub>
 8019b8a:	4602      	mov	r2, r0
 8019b8c:	460b      	mov	r3, r1
 8019b8e:	4650      	mov	r0, sl
 8019b90:	4659      	mov	r1, fp
 8019b92:	f7e6 fb89 	bl	80002a8 <__aeabi_dsub>
 8019b96:	4642      	mov	r2, r8
 8019b98:	464b      	mov	r3, r9
 8019b9a:	f7e6 fd3d 	bl	8000618 <__aeabi_dmul>
 8019b9e:	4602      	mov	r2, r0
 8019ba0:	460b      	mov	r3, r1
 8019ba2:	4630      	mov	r0, r6
 8019ba4:	4639      	mov	r1, r7
 8019ba6:	f7e6 fb7f 	bl	80002a8 <__aeabi_dsub>
 8019baa:	ec53 2b19 	vmov	r2, r3, d9
 8019bae:	f7e6 fd33 	bl	8000618 <__aeabi_dmul>
 8019bb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019bb6:	ec41 0b18 	vmov	d8, r0, r1
 8019bba:	4610      	mov	r0, r2
 8019bbc:	4619      	mov	r1, r3
 8019bbe:	f7e6 fd2b 	bl	8000618 <__aeabi_dmul>
 8019bc2:	a37d      	add	r3, pc, #500	; (adr r3, 8019db8 <__ieee754_pow+0x6f0>)
 8019bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bc8:	4604      	mov	r4, r0
 8019bca:	460d      	mov	r5, r1
 8019bcc:	f7e6 fd24 	bl	8000618 <__aeabi_dmul>
 8019bd0:	a37b      	add	r3, pc, #492	; (adr r3, 8019dc0 <__ieee754_pow+0x6f8>)
 8019bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bd6:	f7e6 fb69 	bl	80002ac <__adddf3>
 8019bda:	4622      	mov	r2, r4
 8019bdc:	462b      	mov	r3, r5
 8019bde:	f7e6 fd1b 	bl	8000618 <__aeabi_dmul>
 8019be2:	a379      	add	r3, pc, #484	; (adr r3, 8019dc8 <__ieee754_pow+0x700>)
 8019be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019be8:	f7e6 fb60 	bl	80002ac <__adddf3>
 8019bec:	4622      	mov	r2, r4
 8019bee:	462b      	mov	r3, r5
 8019bf0:	f7e6 fd12 	bl	8000618 <__aeabi_dmul>
 8019bf4:	a376      	add	r3, pc, #472	; (adr r3, 8019dd0 <__ieee754_pow+0x708>)
 8019bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bfa:	f7e6 fb57 	bl	80002ac <__adddf3>
 8019bfe:	4622      	mov	r2, r4
 8019c00:	462b      	mov	r3, r5
 8019c02:	f7e6 fd09 	bl	8000618 <__aeabi_dmul>
 8019c06:	a374      	add	r3, pc, #464	; (adr r3, 8019dd8 <__ieee754_pow+0x710>)
 8019c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c0c:	f7e6 fb4e 	bl	80002ac <__adddf3>
 8019c10:	4622      	mov	r2, r4
 8019c12:	462b      	mov	r3, r5
 8019c14:	f7e6 fd00 	bl	8000618 <__aeabi_dmul>
 8019c18:	a371      	add	r3, pc, #452	; (adr r3, 8019de0 <__ieee754_pow+0x718>)
 8019c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c1e:	f7e6 fb45 	bl	80002ac <__adddf3>
 8019c22:	4622      	mov	r2, r4
 8019c24:	4606      	mov	r6, r0
 8019c26:	460f      	mov	r7, r1
 8019c28:	462b      	mov	r3, r5
 8019c2a:	4620      	mov	r0, r4
 8019c2c:	4629      	mov	r1, r5
 8019c2e:	f7e6 fcf3 	bl	8000618 <__aeabi_dmul>
 8019c32:	4602      	mov	r2, r0
 8019c34:	460b      	mov	r3, r1
 8019c36:	4630      	mov	r0, r6
 8019c38:	4639      	mov	r1, r7
 8019c3a:	f7e6 fced 	bl	8000618 <__aeabi_dmul>
 8019c3e:	4642      	mov	r2, r8
 8019c40:	4604      	mov	r4, r0
 8019c42:	460d      	mov	r5, r1
 8019c44:	464b      	mov	r3, r9
 8019c46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019c4a:	f7e6 fb2f 	bl	80002ac <__adddf3>
 8019c4e:	ec53 2b18 	vmov	r2, r3, d8
 8019c52:	f7e6 fce1 	bl	8000618 <__aeabi_dmul>
 8019c56:	4622      	mov	r2, r4
 8019c58:	462b      	mov	r3, r5
 8019c5a:	f7e6 fb27 	bl	80002ac <__adddf3>
 8019c5e:	4642      	mov	r2, r8
 8019c60:	4682      	mov	sl, r0
 8019c62:	468b      	mov	fp, r1
 8019c64:	464b      	mov	r3, r9
 8019c66:	4640      	mov	r0, r8
 8019c68:	4649      	mov	r1, r9
 8019c6a:	f7e6 fcd5 	bl	8000618 <__aeabi_dmul>
 8019c6e:	4b6c      	ldr	r3, [pc, #432]	; (8019e20 <__ieee754_pow+0x758>)
 8019c70:	2200      	movs	r2, #0
 8019c72:	4606      	mov	r6, r0
 8019c74:	460f      	mov	r7, r1
 8019c76:	f7e6 fb19 	bl	80002ac <__adddf3>
 8019c7a:	4652      	mov	r2, sl
 8019c7c:	465b      	mov	r3, fp
 8019c7e:	f7e6 fb15 	bl	80002ac <__adddf3>
 8019c82:	9c04      	ldr	r4, [sp, #16]
 8019c84:	460d      	mov	r5, r1
 8019c86:	4622      	mov	r2, r4
 8019c88:	460b      	mov	r3, r1
 8019c8a:	4640      	mov	r0, r8
 8019c8c:	4649      	mov	r1, r9
 8019c8e:	f7e6 fcc3 	bl	8000618 <__aeabi_dmul>
 8019c92:	4b63      	ldr	r3, [pc, #396]	; (8019e20 <__ieee754_pow+0x758>)
 8019c94:	4680      	mov	r8, r0
 8019c96:	4689      	mov	r9, r1
 8019c98:	2200      	movs	r2, #0
 8019c9a:	4620      	mov	r0, r4
 8019c9c:	4629      	mov	r1, r5
 8019c9e:	f7e6 fb03 	bl	80002a8 <__aeabi_dsub>
 8019ca2:	4632      	mov	r2, r6
 8019ca4:	463b      	mov	r3, r7
 8019ca6:	f7e6 faff 	bl	80002a8 <__aeabi_dsub>
 8019caa:	4602      	mov	r2, r0
 8019cac:	460b      	mov	r3, r1
 8019cae:	4650      	mov	r0, sl
 8019cb0:	4659      	mov	r1, fp
 8019cb2:	f7e6 faf9 	bl	80002a8 <__aeabi_dsub>
 8019cb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019cba:	f7e6 fcad 	bl	8000618 <__aeabi_dmul>
 8019cbe:	4622      	mov	r2, r4
 8019cc0:	4606      	mov	r6, r0
 8019cc2:	460f      	mov	r7, r1
 8019cc4:	462b      	mov	r3, r5
 8019cc6:	ec51 0b18 	vmov	r0, r1, d8
 8019cca:	f7e6 fca5 	bl	8000618 <__aeabi_dmul>
 8019cce:	4602      	mov	r2, r0
 8019cd0:	460b      	mov	r3, r1
 8019cd2:	4630      	mov	r0, r6
 8019cd4:	4639      	mov	r1, r7
 8019cd6:	f7e6 fae9 	bl	80002ac <__adddf3>
 8019cda:	4606      	mov	r6, r0
 8019cdc:	460f      	mov	r7, r1
 8019cde:	4602      	mov	r2, r0
 8019ce0:	460b      	mov	r3, r1
 8019ce2:	4640      	mov	r0, r8
 8019ce4:	4649      	mov	r1, r9
 8019ce6:	f7e6 fae1 	bl	80002ac <__adddf3>
 8019cea:	9c04      	ldr	r4, [sp, #16]
 8019cec:	a33e      	add	r3, pc, #248	; (adr r3, 8019de8 <__ieee754_pow+0x720>)
 8019cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cf2:	4620      	mov	r0, r4
 8019cf4:	460d      	mov	r5, r1
 8019cf6:	f7e6 fc8f 	bl	8000618 <__aeabi_dmul>
 8019cfa:	4642      	mov	r2, r8
 8019cfc:	ec41 0b18 	vmov	d8, r0, r1
 8019d00:	464b      	mov	r3, r9
 8019d02:	4620      	mov	r0, r4
 8019d04:	4629      	mov	r1, r5
 8019d06:	f7e6 facf 	bl	80002a8 <__aeabi_dsub>
 8019d0a:	4602      	mov	r2, r0
 8019d0c:	460b      	mov	r3, r1
 8019d0e:	4630      	mov	r0, r6
 8019d10:	4639      	mov	r1, r7
 8019d12:	f7e6 fac9 	bl	80002a8 <__aeabi_dsub>
 8019d16:	a336      	add	r3, pc, #216	; (adr r3, 8019df0 <__ieee754_pow+0x728>)
 8019d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d1c:	f7e6 fc7c 	bl	8000618 <__aeabi_dmul>
 8019d20:	a335      	add	r3, pc, #212	; (adr r3, 8019df8 <__ieee754_pow+0x730>)
 8019d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d26:	4606      	mov	r6, r0
 8019d28:	460f      	mov	r7, r1
 8019d2a:	4620      	mov	r0, r4
 8019d2c:	4629      	mov	r1, r5
 8019d2e:	f7e6 fc73 	bl	8000618 <__aeabi_dmul>
 8019d32:	4602      	mov	r2, r0
 8019d34:	460b      	mov	r3, r1
 8019d36:	4630      	mov	r0, r6
 8019d38:	4639      	mov	r1, r7
 8019d3a:	f7e6 fab7 	bl	80002ac <__adddf3>
 8019d3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019d40:	4b38      	ldr	r3, [pc, #224]	; (8019e24 <__ieee754_pow+0x75c>)
 8019d42:	4413      	add	r3, r2
 8019d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d48:	f7e6 fab0 	bl	80002ac <__adddf3>
 8019d4c:	4682      	mov	sl, r0
 8019d4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019d50:	468b      	mov	fp, r1
 8019d52:	f7e6 fbf7 	bl	8000544 <__aeabi_i2d>
 8019d56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019d58:	4b33      	ldr	r3, [pc, #204]	; (8019e28 <__ieee754_pow+0x760>)
 8019d5a:	4413      	add	r3, r2
 8019d5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019d60:	4606      	mov	r6, r0
 8019d62:	460f      	mov	r7, r1
 8019d64:	4652      	mov	r2, sl
 8019d66:	465b      	mov	r3, fp
 8019d68:	ec51 0b18 	vmov	r0, r1, d8
 8019d6c:	f7e6 fa9e 	bl	80002ac <__adddf3>
 8019d70:	4642      	mov	r2, r8
 8019d72:	464b      	mov	r3, r9
 8019d74:	f7e6 fa9a 	bl	80002ac <__adddf3>
 8019d78:	4632      	mov	r2, r6
 8019d7a:	463b      	mov	r3, r7
 8019d7c:	f7e6 fa96 	bl	80002ac <__adddf3>
 8019d80:	9c04      	ldr	r4, [sp, #16]
 8019d82:	4632      	mov	r2, r6
 8019d84:	463b      	mov	r3, r7
 8019d86:	4620      	mov	r0, r4
 8019d88:	460d      	mov	r5, r1
 8019d8a:	f7e6 fa8d 	bl	80002a8 <__aeabi_dsub>
 8019d8e:	4642      	mov	r2, r8
 8019d90:	464b      	mov	r3, r9
 8019d92:	f7e6 fa89 	bl	80002a8 <__aeabi_dsub>
 8019d96:	ec53 2b18 	vmov	r2, r3, d8
 8019d9a:	f7e6 fa85 	bl	80002a8 <__aeabi_dsub>
 8019d9e:	4602      	mov	r2, r0
 8019da0:	460b      	mov	r3, r1
 8019da2:	4650      	mov	r0, sl
 8019da4:	4659      	mov	r1, fp
 8019da6:	e606      	b.n	80199b6 <__ieee754_pow+0x2ee>
 8019da8:	2401      	movs	r4, #1
 8019daa:	e6a0      	b.n	8019aee <__ieee754_pow+0x426>
 8019dac:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8019e00 <__ieee754_pow+0x738>
 8019db0:	e60d      	b.n	80199ce <__ieee754_pow+0x306>
 8019db2:	bf00      	nop
 8019db4:	f3af 8000 	nop.w
 8019db8:	4a454eef 	.word	0x4a454eef
 8019dbc:	3fca7e28 	.word	0x3fca7e28
 8019dc0:	93c9db65 	.word	0x93c9db65
 8019dc4:	3fcd864a 	.word	0x3fcd864a
 8019dc8:	a91d4101 	.word	0xa91d4101
 8019dcc:	3fd17460 	.word	0x3fd17460
 8019dd0:	518f264d 	.word	0x518f264d
 8019dd4:	3fd55555 	.word	0x3fd55555
 8019dd8:	db6fabff 	.word	0xdb6fabff
 8019ddc:	3fdb6db6 	.word	0x3fdb6db6
 8019de0:	33333303 	.word	0x33333303
 8019de4:	3fe33333 	.word	0x3fe33333
 8019de8:	e0000000 	.word	0xe0000000
 8019dec:	3feec709 	.word	0x3feec709
 8019df0:	dc3a03fd 	.word	0xdc3a03fd
 8019df4:	3feec709 	.word	0x3feec709
 8019df8:	145b01f5 	.word	0x145b01f5
 8019dfc:	be3e2fe0 	.word	0xbe3e2fe0
 8019e00:	00000000 	.word	0x00000000
 8019e04:	3ff00000 	.word	0x3ff00000
 8019e08:	7ff00000 	.word	0x7ff00000
 8019e0c:	43400000 	.word	0x43400000
 8019e10:	0003988e 	.word	0x0003988e
 8019e14:	000bb679 	.word	0x000bb679
 8019e18:	08021708 	.word	0x08021708
 8019e1c:	3ff00000 	.word	0x3ff00000
 8019e20:	40080000 	.word	0x40080000
 8019e24:	08021728 	.word	0x08021728
 8019e28:	08021718 	.word	0x08021718
 8019e2c:	a3b5      	add	r3, pc, #724	; (adr r3, 801a104 <__ieee754_pow+0xa3c>)
 8019e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e32:	4640      	mov	r0, r8
 8019e34:	4649      	mov	r1, r9
 8019e36:	f7e6 fa39 	bl	80002ac <__adddf3>
 8019e3a:	4622      	mov	r2, r4
 8019e3c:	ec41 0b1a 	vmov	d10, r0, r1
 8019e40:	462b      	mov	r3, r5
 8019e42:	4630      	mov	r0, r6
 8019e44:	4639      	mov	r1, r7
 8019e46:	f7e6 fa2f 	bl	80002a8 <__aeabi_dsub>
 8019e4a:	4602      	mov	r2, r0
 8019e4c:	460b      	mov	r3, r1
 8019e4e:	ec51 0b1a 	vmov	r0, r1, d10
 8019e52:	f7e6 fe71 	bl	8000b38 <__aeabi_dcmpgt>
 8019e56:	2800      	cmp	r0, #0
 8019e58:	f47f adf8 	bne.w	8019a4c <__ieee754_pow+0x384>
 8019e5c:	4aa4      	ldr	r2, [pc, #656]	; (801a0f0 <__ieee754_pow+0xa28>)
 8019e5e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8019e62:	4293      	cmp	r3, r2
 8019e64:	f340 810b 	ble.w	801a07e <__ieee754_pow+0x9b6>
 8019e68:	151b      	asrs	r3, r3, #20
 8019e6a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8019e6e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8019e72:	fa4a f303 	asr.w	r3, sl, r3
 8019e76:	445b      	add	r3, fp
 8019e78:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8019e7c:	4e9d      	ldr	r6, [pc, #628]	; (801a0f4 <__ieee754_pow+0xa2c>)
 8019e7e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8019e82:	4116      	asrs	r6, r2
 8019e84:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8019e88:	2000      	movs	r0, #0
 8019e8a:	ea23 0106 	bic.w	r1, r3, r6
 8019e8e:	f1c2 0214 	rsb	r2, r2, #20
 8019e92:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8019e96:	fa4a fa02 	asr.w	sl, sl, r2
 8019e9a:	f1bb 0f00 	cmp.w	fp, #0
 8019e9e:	4602      	mov	r2, r0
 8019ea0:	460b      	mov	r3, r1
 8019ea2:	4620      	mov	r0, r4
 8019ea4:	4629      	mov	r1, r5
 8019ea6:	bfb8      	it	lt
 8019ea8:	f1ca 0a00 	rsblt	sl, sl, #0
 8019eac:	f7e6 f9fc 	bl	80002a8 <__aeabi_dsub>
 8019eb0:	ec41 0b19 	vmov	d9, r0, r1
 8019eb4:	4642      	mov	r2, r8
 8019eb6:	464b      	mov	r3, r9
 8019eb8:	ec51 0b19 	vmov	r0, r1, d9
 8019ebc:	f7e6 f9f6 	bl	80002ac <__adddf3>
 8019ec0:	2400      	movs	r4, #0
 8019ec2:	a379      	add	r3, pc, #484	; (adr r3, 801a0a8 <__ieee754_pow+0x9e0>)
 8019ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ec8:	4620      	mov	r0, r4
 8019eca:	460d      	mov	r5, r1
 8019ecc:	f7e6 fba4 	bl	8000618 <__aeabi_dmul>
 8019ed0:	ec53 2b19 	vmov	r2, r3, d9
 8019ed4:	4606      	mov	r6, r0
 8019ed6:	460f      	mov	r7, r1
 8019ed8:	4620      	mov	r0, r4
 8019eda:	4629      	mov	r1, r5
 8019edc:	f7e6 f9e4 	bl	80002a8 <__aeabi_dsub>
 8019ee0:	4602      	mov	r2, r0
 8019ee2:	460b      	mov	r3, r1
 8019ee4:	4640      	mov	r0, r8
 8019ee6:	4649      	mov	r1, r9
 8019ee8:	f7e6 f9de 	bl	80002a8 <__aeabi_dsub>
 8019eec:	a370      	add	r3, pc, #448	; (adr r3, 801a0b0 <__ieee754_pow+0x9e8>)
 8019eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ef2:	f7e6 fb91 	bl	8000618 <__aeabi_dmul>
 8019ef6:	a370      	add	r3, pc, #448	; (adr r3, 801a0b8 <__ieee754_pow+0x9f0>)
 8019ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019efc:	4680      	mov	r8, r0
 8019efe:	4689      	mov	r9, r1
 8019f00:	4620      	mov	r0, r4
 8019f02:	4629      	mov	r1, r5
 8019f04:	f7e6 fb88 	bl	8000618 <__aeabi_dmul>
 8019f08:	4602      	mov	r2, r0
 8019f0a:	460b      	mov	r3, r1
 8019f0c:	4640      	mov	r0, r8
 8019f0e:	4649      	mov	r1, r9
 8019f10:	f7e6 f9cc 	bl	80002ac <__adddf3>
 8019f14:	4604      	mov	r4, r0
 8019f16:	460d      	mov	r5, r1
 8019f18:	4602      	mov	r2, r0
 8019f1a:	460b      	mov	r3, r1
 8019f1c:	4630      	mov	r0, r6
 8019f1e:	4639      	mov	r1, r7
 8019f20:	f7e6 f9c4 	bl	80002ac <__adddf3>
 8019f24:	4632      	mov	r2, r6
 8019f26:	463b      	mov	r3, r7
 8019f28:	4680      	mov	r8, r0
 8019f2a:	4689      	mov	r9, r1
 8019f2c:	f7e6 f9bc 	bl	80002a8 <__aeabi_dsub>
 8019f30:	4602      	mov	r2, r0
 8019f32:	460b      	mov	r3, r1
 8019f34:	4620      	mov	r0, r4
 8019f36:	4629      	mov	r1, r5
 8019f38:	f7e6 f9b6 	bl	80002a8 <__aeabi_dsub>
 8019f3c:	4642      	mov	r2, r8
 8019f3e:	4606      	mov	r6, r0
 8019f40:	460f      	mov	r7, r1
 8019f42:	464b      	mov	r3, r9
 8019f44:	4640      	mov	r0, r8
 8019f46:	4649      	mov	r1, r9
 8019f48:	f7e6 fb66 	bl	8000618 <__aeabi_dmul>
 8019f4c:	a35c      	add	r3, pc, #368	; (adr r3, 801a0c0 <__ieee754_pow+0x9f8>)
 8019f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f52:	4604      	mov	r4, r0
 8019f54:	460d      	mov	r5, r1
 8019f56:	f7e6 fb5f 	bl	8000618 <__aeabi_dmul>
 8019f5a:	a35b      	add	r3, pc, #364	; (adr r3, 801a0c8 <__ieee754_pow+0xa00>)
 8019f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f60:	f7e6 f9a2 	bl	80002a8 <__aeabi_dsub>
 8019f64:	4622      	mov	r2, r4
 8019f66:	462b      	mov	r3, r5
 8019f68:	f7e6 fb56 	bl	8000618 <__aeabi_dmul>
 8019f6c:	a358      	add	r3, pc, #352	; (adr r3, 801a0d0 <__ieee754_pow+0xa08>)
 8019f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f72:	f7e6 f99b 	bl	80002ac <__adddf3>
 8019f76:	4622      	mov	r2, r4
 8019f78:	462b      	mov	r3, r5
 8019f7a:	f7e6 fb4d 	bl	8000618 <__aeabi_dmul>
 8019f7e:	a356      	add	r3, pc, #344	; (adr r3, 801a0d8 <__ieee754_pow+0xa10>)
 8019f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f84:	f7e6 f990 	bl	80002a8 <__aeabi_dsub>
 8019f88:	4622      	mov	r2, r4
 8019f8a:	462b      	mov	r3, r5
 8019f8c:	f7e6 fb44 	bl	8000618 <__aeabi_dmul>
 8019f90:	a353      	add	r3, pc, #332	; (adr r3, 801a0e0 <__ieee754_pow+0xa18>)
 8019f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f96:	f7e6 f989 	bl	80002ac <__adddf3>
 8019f9a:	4622      	mov	r2, r4
 8019f9c:	462b      	mov	r3, r5
 8019f9e:	f7e6 fb3b 	bl	8000618 <__aeabi_dmul>
 8019fa2:	4602      	mov	r2, r0
 8019fa4:	460b      	mov	r3, r1
 8019fa6:	4640      	mov	r0, r8
 8019fa8:	4649      	mov	r1, r9
 8019faa:	f7e6 f97d 	bl	80002a8 <__aeabi_dsub>
 8019fae:	4604      	mov	r4, r0
 8019fb0:	460d      	mov	r5, r1
 8019fb2:	4602      	mov	r2, r0
 8019fb4:	460b      	mov	r3, r1
 8019fb6:	4640      	mov	r0, r8
 8019fb8:	4649      	mov	r1, r9
 8019fba:	f7e6 fb2d 	bl	8000618 <__aeabi_dmul>
 8019fbe:	2200      	movs	r2, #0
 8019fc0:	ec41 0b19 	vmov	d9, r0, r1
 8019fc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019fc8:	4620      	mov	r0, r4
 8019fca:	4629      	mov	r1, r5
 8019fcc:	f7e6 f96c 	bl	80002a8 <__aeabi_dsub>
 8019fd0:	4602      	mov	r2, r0
 8019fd2:	460b      	mov	r3, r1
 8019fd4:	ec51 0b19 	vmov	r0, r1, d9
 8019fd8:	f7e6 fc48 	bl	800086c <__aeabi_ddiv>
 8019fdc:	4632      	mov	r2, r6
 8019fde:	4604      	mov	r4, r0
 8019fe0:	460d      	mov	r5, r1
 8019fe2:	463b      	mov	r3, r7
 8019fe4:	4640      	mov	r0, r8
 8019fe6:	4649      	mov	r1, r9
 8019fe8:	f7e6 fb16 	bl	8000618 <__aeabi_dmul>
 8019fec:	4632      	mov	r2, r6
 8019fee:	463b      	mov	r3, r7
 8019ff0:	f7e6 f95c 	bl	80002ac <__adddf3>
 8019ff4:	4602      	mov	r2, r0
 8019ff6:	460b      	mov	r3, r1
 8019ff8:	4620      	mov	r0, r4
 8019ffa:	4629      	mov	r1, r5
 8019ffc:	f7e6 f954 	bl	80002a8 <__aeabi_dsub>
 801a000:	4642      	mov	r2, r8
 801a002:	464b      	mov	r3, r9
 801a004:	f7e6 f950 	bl	80002a8 <__aeabi_dsub>
 801a008:	460b      	mov	r3, r1
 801a00a:	4602      	mov	r2, r0
 801a00c:	493a      	ldr	r1, [pc, #232]	; (801a0f8 <__ieee754_pow+0xa30>)
 801a00e:	2000      	movs	r0, #0
 801a010:	f7e6 f94a 	bl	80002a8 <__aeabi_dsub>
 801a014:	e9cd 0100 	strd	r0, r1, [sp]
 801a018:	9b01      	ldr	r3, [sp, #4]
 801a01a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801a01e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a022:	da2f      	bge.n	801a084 <__ieee754_pow+0x9bc>
 801a024:	4650      	mov	r0, sl
 801a026:	ed9d 0b00 	vldr	d0, [sp]
 801a02a:	f000 f9cd 	bl	801a3c8 <scalbn>
 801a02e:	ec51 0b10 	vmov	r0, r1, d0
 801a032:	ec53 2b18 	vmov	r2, r3, d8
 801a036:	f7ff bbe0 	b.w	80197fa <__ieee754_pow+0x132>
 801a03a:	4b30      	ldr	r3, [pc, #192]	; (801a0fc <__ieee754_pow+0xa34>)
 801a03c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801a040:	429e      	cmp	r6, r3
 801a042:	f77f af0b 	ble.w	8019e5c <__ieee754_pow+0x794>
 801a046:	4b2e      	ldr	r3, [pc, #184]	; (801a100 <__ieee754_pow+0xa38>)
 801a048:	440b      	add	r3, r1
 801a04a:	4303      	orrs	r3, r0
 801a04c:	d00b      	beq.n	801a066 <__ieee754_pow+0x99e>
 801a04e:	a326      	add	r3, pc, #152	; (adr r3, 801a0e8 <__ieee754_pow+0xa20>)
 801a050:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a054:	ec51 0b18 	vmov	r0, r1, d8
 801a058:	f7e6 fade 	bl	8000618 <__aeabi_dmul>
 801a05c:	a322      	add	r3, pc, #136	; (adr r3, 801a0e8 <__ieee754_pow+0xa20>)
 801a05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a062:	f7ff bbca 	b.w	80197fa <__ieee754_pow+0x132>
 801a066:	4622      	mov	r2, r4
 801a068:	462b      	mov	r3, r5
 801a06a:	f7e6 f91d 	bl	80002a8 <__aeabi_dsub>
 801a06e:	4642      	mov	r2, r8
 801a070:	464b      	mov	r3, r9
 801a072:	f7e6 fd57 	bl	8000b24 <__aeabi_dcmpge>
 801a076:	2800      	cmp	r0, #0
 801a078:	f43f aef0 	beq.w	8019e5c <__ieee754_pow+0x794>
 801a07c:	e7e7      	b.n	801a04e <__ieee754_pow+0x986>
 801a07e:	f04f 0a00 	mov.w	sl, #0
 801a082:	e717      	b.n	8019eb4 <__ieee754_pow+0x7ec>
 801a084:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a088:	4619      	mov	r1, r3
 801a08a:	e7d2      	b.n	801a032 <__ieee754_pow+0x96a>
 801a08c:	491a      	ldr	r1, [pc, #104]	; (801a0f8 <__ieee754_pow+0xa30>)
 801a08e:	2000      	movs	r0, #0
 801a090:	f7ff bb9e 	b.w	80197d0 <__ieee754_pow+0x108>
 801a094:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a098:	f7ff bb9a 	b.w	80197d0 <__ieee754_pow+0x108>
 801a09c:	9000      	str	r0, [sp, #0]
 801a09e:	f7ff bb76 	b.w	801978e <__ieee754_pow+0xc6>
 801a0a2:	2100      	movs	r1, #0
 801a0a4:	f7ff bb60 	b.w	8019768 <__ieee754_pow+0xa0>
 801a0a8:	00000000 	.word	0x00000000
 801a0ac:	3fe62e43 	.word	0x3fe62e43
 801a0b0:	fefa39ef 	.word	0xfefa39ef
 801a0b4:	3fe62e42 	.word	0x3fe62e42
 801a0b8:	0ca86c39 	.word	0x0ca86c39
 801a0bc:	be205c61 	.word	0xbe205c61
 801a0c0:	72bea4d0 	.word	0x72bea4d0
 801a0c4:	3e663769 	.word	0x3e663769
 801a0c8:	c5d26bf1 	.word	0xc5d26bf1
 801a0cc:	3ebbbd41 	.word	0x3ebbbd41
 801a0d0:	af25de2c 	.word	0xaf25de2c
 801a0d4:	3f11566a 	.word	0x3f11566a
 801a0d8:	16bebd93 	.word	0x16bebd93
 801a0dc:	3f66c16c 	.word	0x3f66c16c
 801a0e0:	5555553e 	.word	0x5555553e
 801a0e4:	3fc55555 	.word	0x3fc55555
 801a0e8:	c2f8f359 	.word	0xc2f8f359
 801a0ec:	01a56e1f 	.word	0x01a56e1f
 801a0f0:	3fe00000 	.word	0x3fe00000
 801a0f4:	000fffff 	.word	0x000fffff
 801a0f8:	3ff00000 	.word	0x3ff00000
 801a0fc:	4090cbff 	.word	0x4090cbff
 801a100:	3f6f3400 	.word	0x3f6f3400
 801a104:	652b82fe 	.word	0x652b82fe
 801a108:	3c971547 	.word	0x3c971547

0801a10c <__ieee754_sqrt>:
 801a10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a110:	ec55 4b10 	vmov	r4, r5, d0
 801a114:	4e56      	ldr	r6, [pc, #344]	; (801a270 <__ieee754_sqrt+0x164>)
 801a116:	43ae      	bics	r6, r5
 801a118:	ee10 0a10 	vmov	r0, s0
 801a11c:	ee10 3a10 	vmov	r3, s0
 801a120:	4629      	mov	r1, r5
 801a122:	462a      	mov	r2, r5
 801a124:	d110      	bne.n	801a148 <__ieee754_sqrt+0x3c>
 801a126:	ee10 2a10 	vmov	r2, s0
 801a12a:	462b      	mov	r3, r5
 801a12c:	f7e6 fa74 	bl	8000618 <__aeabi_dmul>
 801a130:	4602      	mov	r2, r0
 801a132:	460b      	mov	r3, r1
 801a134:	4620      	mov	r0, r4
 801a136:	4629      	mov	r1, r5
 801a138:	f7e6 f8b8 	bl	80002ac <__adddf3>
 801a13c:	4604      	mov	r4, r0
 801a13e:	460d      	mov	r5, r1
 801a140:	ec45 4b10 	vmov	d0, r4, r5
 801a144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a148:	2d00      	cmp	r5, #0
 801a14a:	dc10      	bgt.n	801a16e <__ieee754_sqrt+0x62>
 801a14c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a150:	4330      	orrs	r0, r6
 801a152:	d0f5      	beq.n	801a140 <__ieee754_sqrt+0x34>
 801a154:	b15d      	cbz	r5, 801a16e <__ieee754_sqrt+0x62>
 801a156:	ee10 2a10 	vmov	r2, s0
 801a15a:	462b      	mov	r3, r5
 801a15c:	ee10 0a10 	vmov	r0, s0
 801a160:	f7e6 f8a2 	bl	80002a8 <__aeabi_dsub>
 801a164:	4602      	mov	r2, r0
 801a166:	460b      	mov	r3, r1
 801a168:	f7e6 fb80 	bl	800086c <__aeabi_ddiv>
 801a16c:	e7e6      	b.n	801a13c <__ieee754_sqrt+0x30>
 801a16e:	1509      	asrs	r1, r1, #20
 801a170:	d076      	beq.n	801a260 <__ieee754_sqrt+0x154>
 801a172:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801a176:	07ce      	lsls	r6, r1, #31
 801a178:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801a17c:	bf5e      	ittt	pl
 801a17e:	0fda      	lsrpl	r2, r3, #31
 801a180:	005b      	lslpl	r3, r3, #1
 801a182:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801a186:	0fda      	lsrs	r2, r3, #31
 801a188:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801a18c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801a190:	2000      	movs	r0, #0
 801a192:	106d      	asrs	r5, r5, #1
 801a194:	005b      	lsls	r3, r3, #1
 801a196:	f04f 0e16 	mov.w	lr, #22
 801a19a:	4684      	mov	ip, r0
 801a19c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801a1a0:	eb0c 0401 	add.w	r4, ip, r1
 801a1a4:	4294      	cmp	r4, r2
 801a1a6:	bfde      	ittt	le
 801a1a8:	1b12      	suble	r2, r2, r4
 801a1aa:	eb04 0c01 	addle.w	ip, r4, r1
 801a1ae:	1840      	addle	r0, r0, r1
 801a1b0:	0052      	lsls	r2, r2, #1
 801a1b2:	f1be 0e01 	subs.w	lr, lr, #1
 801a1b6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801a1ba:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801a1be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a1c2:	d1ed      	bne.n	801a1a0 <__ieee754_sqrt+0x94>
 801a1c4:	4671      	mov	r1, lr
 801a1c6:	2720      	movs	r7, #32
 801a1c8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801a1cc:	4562      	cmp	r2, ip
 801a1ce:	eb04 060e 	add.w	r6, r4, lr
 801a1d2:	dc02      	bgt.n	801a1da <__ieee754_sqrt+0xce>
 801a1d4:	d113      	bne.n	801a1fe <__ieee754_sqrt+0xf2>
 801a1d6:	429e      	cmp	r6, r3
 801a1d8:	d811      	bhi.n	801a1fe <__ieee754_sqrt+0xf2>
 801a1da:	2e00      	cmp	r6, #0
 801a1dc:	eb06 0e04 	add.w	lr, r6, r4
 801a1e0:	da43      	bge.n	801a26a <__ieee754_sqrt+0x15e>
 801a1e2:	f1be 0f00 	cmp.w	lr, #0
 801a1e6:	db40      	blt.n	801a26a <__ieee754_sqrt+0x15e>
 801a1e8:	f10c 0801 	add.w	r8, ip, #1
 801a1ec:	eba2 020c 	sub.w	r2, r2, ip
 801a1f0:	429e      	cmp	r6, r3
 801a1f2:	bf88      	it	hi
 801a1f4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801a1f8:	1b9b      	subs	r3, r3, r6
 801a1fa:	4421      	add	r1, r4
 801a1fc:	46c4      	mov	ip, r8
 801a1fe:	0052      	lsls	r2, r2, #1
 801a200:	3f01      	subs	r7, #1
 801a202:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801a206:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801a20a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a20e:	d1dd      	bne.n	801a1cc <__ieee754_sqrt+0xc0>
 801a210:	4313      	orrs	r3, r2
 801a212:	d006      	beq.n	801a222 <__ieee754_sqrt+0x116>
 801a214:	1c4c      	adds	r4, r1, #1
 801a216:	bf13      	iteet	ne
 801a218:	3101      	addne	r1, #1
 801a21a:	3001      	addeq	r0, #1
 801a21c:	4639      	moveq	r1, r7
 801a21e:	f021 0101 	bicne.w	r1, r1, #1
 801a222:	1043      	asrs	r3, r0, #1
 801a224:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801a228:	0849      	lsrs	r1, r1, #1
 801a22a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801a22e:	07c2      	lsls	r2, r0, #31
 801a230:	bf48      	it	mi
 801a232:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801a236:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801a23a:	460c      	mov	r4, r1
 801a23c:	463d      	mov	r5, r7
 801a23e:	e77f      	b.n	801a140 <__ieee754_sqrt+0x34>
 801a240:	0ada      	lsrs	r2, r3, #11
 801a242:	3815      	subs	r0, #21
 801a244:	055b      	lsls	r3, r3, #21
 801a246:	2a00      	cmp	r2, #0
 801a248:	d0fa      	beq.n	801a240 <__ieee754_sqrt+0x134>
 801a24a:	02d7      	lsls	r7, r2, #11
 801a24c:	d50a      	bpl.n	801a264 <__ieee754_sqrt+0x158>
 801a24e:	f1c1 0420 	rsb	r4, r1, #32
 801a252:	fa23 f404 	lsr.w	r4, r3, r4
 801a256:	1e4d      	subs	r5, r1, #1
 801a258:	408b      	lsls	r3, r1
 801a25a:	4322      	orrs	r2, r4
 801a25c:	1b41      	subs	r1, r0, r5
 801a25e:	e788      	b.n	801a172 <__ieee754_sqrt+0x66>
 801a260:	4608      	mov	r0, r1
 801a262:	e7f0      	b.n	801a246 <__ieee754_sqrt+0x13a>
 801a264:	0052      	lsls	r2, r2, #1
 801a266:	3101      	adds	r1, #1
 801a268:	e7ef      	b.n	801a24a <__ieee754_sqrt+0x13e>
 801a26a:	46e0      	mov	r8, ip
 801a26c:	e7be      	b.n	801a1ec <__ieee754_sqrt+0xe0>
 801a26e:	bf00      	nop
 801a270:	7ff00000 	.word	0x7ff00000

0801a274 <fabs>:
 801a274:	ec51 0b10 	vmov	r0, r1, d0
 801a278:	ee10 2a10 	vmov	r2, s0
 801a27c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a280:	ec43 2b10 	vmov	d0, r2, r3
 801a284:	4770      	bx	lr

0801a286 <finite>:
 801a286:	b082      	sub	sp, #8
 801a288:	ed8d 0b00 	vstr	d0, [sp]
 801a28c:	9801      	ldr	r0, [sp, #4]
 801a28e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801a292:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801a296:	0fc0      	lsrs	r0, r0, #31
 801a298:	b002      	add	sp, #8
 801a29a:	4770      	bx	lr
 801a29c:	0000      	movs	r0, r0
	...

0801a2a0 <nan>:
 801a2a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a2a8 <nan+0x8>
 801a2a4:	4770      	bx	lr
 801a2a6:	bf00      	nop
 801a2a8:	00000000 	.word	0x00000000
 801a2ac:	7ff80000 	.word	0x7ff80000

0801a2b0 <rint>:
 801a2b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a2b2:	ec51 0b10 	vmov	r0, r1, d0
 801a2b6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801a2ba:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801a2be:	2e13      	cmp	r6, #19
 801a2c0:	ee10 4a10 	vmov	r4, s0
 801a2c4:	460b      	mov	r3, r1
 801a2c6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801a2ca:	dc58      	bgt.n	801a37e <rint+0xce>
 801a2cc:	2e00      	cmp	r6, #0
 801a2ce:	da2b      	bge.n	801a328 <rint+0x78>
 801a2d0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801a2d4:	4302      	orrs	r2, r0
 801a2d6:	d023      	beq.n	801a320 <rint+0x70>
 801a2d8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801a2dc:	4302      	orrs	r2, r0
 801a2de:	4254      	negs	r4, r2
 801a2e0:	4314      	orrs	r4, r2
 801a2e2:	0c4b      	lsrs	r3, r1, #17
 801a2e4:	0b24      	lsrs	r4, r4, #12
 801a2e6:	045b      	lsls	r3, r3, #17
 801a2e8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801a2ec:	ea44 0103 	orr.w	r1, r4, r3
 801a2f0:	4b32      	ldr	r3, [pc, #200]	; (801a3bc <rint+0x10c>)
 801a2f2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a2f6:	e9d3 6700 	ldrd	r6, r7, [r3]
 801a2fa:	4602      	mov	r2, r0
 801a2fc:	460b      	mov	r3, r1
 801a2fe:	4630      	mov	r0, r6
 801a300:	4639      	mov	r1, r7
 801a302:	f7e5 ffd3 	bl	80002ac <__adddf3>
 801a306:	e9cd 0100 	strd	r0, r1, [sp]
 801a30a:	463b      	mov	r3, r7
 801a30c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a310:	4632      	mov	r2, r6
 801a312:	f7e5 ffc9 	bl	80002a8 <__aeabi_dsub>
 801a316:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a31a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801a31e:	4639      	mov	r1, r7
 801a320:	ec41 0b10 	vmov	d0, r0, r1
 801a324:	b003      	add	sp, #12
 801a326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a328:	4a25      	ldr	r2, [pc, #148]	; (801a3c0 <rint+0x110>)
 801a32a:	4132      	asrs	r2, r6
 801a32c:	ea01 0702 	and.w	r7, r1, r2
 801a330:	4307      	orrs	r7, r0
 801a332:	d0f5      	beq.n	801a320 <rint+0x70>
 801a334:	0851      	lsrs	r1, r2, #1
 801a336:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801a33a:	4314      	orrs	r4, r2
 801a33c:	d00c      	beq.n	801a358 <rint+0xa8>
 801a33e:	ea23 0201 	bic.w	r2, r3, r1
 801a342:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801a346:	2e13      	cmp	r6, #19
 801a348:	fa43 f606 	asr.w	r6, r3, r6
 801a34c:	bf0c      	ite	eq
 801a34e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801a352:	2400      	movne	r4, #0
 801a354:	ea42 0306 	orr.w	r3, r2, r6
 801a358:	4918      	ldr	r1, [pc, #96]	; (801a3bc <rint+0x10c>)
 801a35a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801a35e:	4622      	mov	r2, r4
 801a360:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a364:	4620      	mov	r0, r4
 801a366:	4629      	mov	r1, r5
 801a368:	f7e5 ffa0 	bl	80002ac <__adddf3>
 801a36c:	e9cd 0100 	strd	r0, r1, [sp]
 801a370:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a374:	4622      	mov	r2, r4
 801a376:	462b      	mov	r3, r5
 801a378:	f7e5 ff96 	bl	80002a8 <__aeabi_dsub>
 801a37c:	e7d0      	b.n	801a320 <rint+0x70>
 801a37e:	2e33      	cmp	r6, #51	; 0x33
 801a380:	dd07      	ble.n	801a392 <rint+0xe2>
 801a382:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801a386:	d1cb      	bne.n	801a320 <rint+0x70>
 801a388:	ee10 2a10 	vmov	r2, s0
 801a38c:	f7e5 ff8e 	bl	80002ac <__adddf3>
 801a390:	e7c6      	b.n	801a320 <rint+0x70>
 801a392:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801a396:	f04f 36ff 	mov.w	r6, #4294967295
 801a39a:	40d6      	lsrs	r6, r2
 801a39c:	4230      	tst	r0, r6
 801a39e:	d0bf      	beq.n	801a320 <rint+0x70>
 801a3a0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 801a3a4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 801a3a8:	bf1f      	itttt	ne
 801a3aa:	ea24 0101 	bicne.w	r1, r4, r1
 801a3ae:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801a3b2:	fa44 f202 	asrne.w	r2, r4, r2
 801a3b6:	ea41 0402 	orrne.w	r4, r1, r2
 801a3ba:	e7cd      	b.n	801a358 <rint+0xa8>
 801a3bc:	08021738 	.word	0x08021738
 801a3c0:	000fffff 	.word	0x000fffff
 801a3c4:	00000000 	.word	0x00000000

0801a3c8 <scalbn>:
 801a3c8:	b570      	push	{r4, r5, r6, lr}
 801a3ca:	ec55 4b10 	vmov	r4, r5, d0
 801a3ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801a3d2:	4606      	mov	r6, r0
 801a3d4:	462b      	mov	r3, r5
 801a3d6:	b99a      	cbnz	r2, 801a400 <scalbn+0x38>
 801a3d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a3dc:	4323      	orrs	r3, r4
 801a3de:	d036      	beq.n	801a44e <scalbn+0x86>
 801a3e0:	4b39      	ldr	r3, [pc, #228]	; (801a4c8 <scalbn+0x100>)
 801a3e2:	4629      	mov	r1, r5
 801a3e4:	ee10 0a10 	vmov	r0, s0
 801a3e8:	2200      	movs	r2, #0
 801a3ea:	f7e6 f915 	bl	8000618 <__aeabi_dmul>
 801a3ee:	4b37      	ldr	r3, [pc, #220]	; (801a4cc <scalbn+0x104>)
 801a3f0:	429e      	cmp	r6, r3
 801a3f2:	4604      	mov	r4, r0
 801a3f4:	460d      	mov	r5, r1
 801a3f6:	da10      	bge.n	801a41a <scalbn+0x52>
 801a3f8:	a32b      	add	r3, pc, #172	; (adr r3, 801a4a8 <scalbn+0xe0>)
 801a3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3fe:	e03a      	b.n	801a476 <scalbn+0xae>
 801a400:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801a404:	428a      	cmp	r2, r1
 801a406:	d10c      	bne.n	801a422 <scalbn+0x5a>
 801a408:	ee10 2a10 	vmov	r2, s0
 801a40c:	4620      	mov	r0, r4
 801a40e:	4629      	mov	r1, r5
 801a410:	f7e5 ff4c 	bl	80002ac <__adddf3>
 801a414:	4604      	mov	r4, r0
 801a416:	460d      	mov	r5, r1
 801a418:	e019      	b.n	801a44e <scalbn+0x86>
 801a41a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801a41e:	460b      	mov	r3, r1
 801a420:	3a36      	subs	r2, #54	; 0x36
 801a422:	4432      	add	r2, r6
 801a424:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801a428:	428a      	cmp	r2, r1
 801a42a:	dd08      	ble.n	801a43e <scalbn+0x76>
 801a42c:	2d00      	cmp	r5, #0
 801a42e:	a120      	add	r1, pc, #128	; (adr r1, 801a4b0 <scalbn+0xe8>)
 801a430:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a434:	da1c      	bge.n	801a470 <scalbn+0xa8>
 801a436:	a120      	add	r1, pc, #128	; (adr r1, 801a4b8 <scalbn+0xf0>)
 801a438:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a43c:	e018      	b.n	801a470 <scalbn+0xa8>
 801a43e:	2a00      	cmp	r2, #0
 801a440:	dd08      	ble.n	801a454 <scalbn+0x8c>
 801a442:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a446:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a44a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801a44e:	ec45 4b10 	vmov	d0, r4, r5
 801a452:	bd70      	pop	{r4, r5, r6, pc}
 801a454:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801a458:	da19      	bge.n	801a48e <scalbn+0xc6>
 801a45a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801a45e:	429e      	cmp	r6, r3
 801a460:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801a464:	dd0a      	ble.n	801a47c <scalbn+0xb4>
 801a466:	a112      	add	r1, pc, #72	; (adr r1, 801a4b0 <scalbn+0xe8>)
 801a468:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a46c:	2b00      	cmp	r3, #0
 801a46e:	d1e2      	bne.n	801a436 <scalbn+0x6e>
 801a470:	a30f      	add	r3, pc, #60	; (adr r3, 801a4b0 <scalbn+0xe8>)
 801a472:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a476:	f7e6 f8cf 	bl	8000618 <__aeabi_dmul>
 801a47a:	e7cb      	b.n	801a414 <scalbn+0x4c>
 801a47c:	a10a      	add	r1, pc, #40	; (adr r1, 801a4a8 <scalbn+0xe0>)
 801a47e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a482:	2b00      	cmp	r3, #0
 801a484:	d0b8      	beq.n	801a3f8 <scalbn+0x30>
 801a486:	a10e      	add	r1, pc, #56	; (adr r1, 801a4c0 <scalbn+0xf8>)
 801a488:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a48c:	e7b4      	b.n	801a3f8 <scalbn+0x30>
 801a48e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a492:	3236      	adds	r2, #54	; 0x36
 801a494:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a498:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801a49c:	4620      	mov	r0, r4
 801a49e:	4b0c      	ldr	r3, [pc, #48]	; (801a4d0 <scalbn+0x108>)
 801a4a0:	2200      	movs	r2, #0
 801a4a2:	e7e8      	b.n	801a476 <scalbn+0xae>
 801a4a4:	f3af 8000 	nop.w
 801a4a8:	c2f8f359 	.word	0xc2f8f359
 801a4ac:	01a56e1f 	.word	0x01a56e1f
 801a4b0:	8800759c 	.word	0x8800759c
 801a4b4:	7e37e43c 	.word	0x7e37e43c
 801a4b8:	8800759c 	.word	0x8800759c
 801a4bc:	fe37e43c 	.word	0xfe37e43c
 801a4c0:	c2f8f359 	.word	0xc2f8f359
 801a4c4:	81a56e1f 	.word	0x81a56e1f
 801a4c8:	43500000 	.word	0x43500000
 801a4cc:	ffff3cb0 	.word	0xffff3cb0
 801a4d0:	3c900000 	.word	0x3c900000

0801a4d4 <abort>:
 801a4d4:	b508      	push	{r3, lr}
 801a4d6:	2006      	movs	r0, #6
 801a4d8:	f001 f9ba 	bl	801b850 <raise>
 801a4dc:	2001      	movs	r0, #1
 801a4de:	f7e8 fe49 	bl	8003174 <_exit>
	...

0801a4e4 <__errno>:
 801a4e4:	4b01      	ldr	r3, [pc, #4]	; (801a4ec <__errno+0x8>)
 801a4e6:	6818      	ldr	r0, [r3, #0]
 801a4e8:	4770      	bx	lr
 801a4ea:	bf00      	nop
 801a4ec:	200001f8 	.word	0x200001f8

0801a4f0 <std>:
 801a4f0:	2300      	movs	r3, #0
 801a4f2:	b510      	push	{r4, lr}
 801a4f4:	4604      	mov	r4, r0
 801a4f6:	e9c0 3300 	strd	r3, r3, [r0]
 801a4fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a4fe:	6083      	str	r3, [r0, #8]
 801a500:	8181      	strh	r1, [r0, #12]
 801a502:	6643      	str	r3, [r0, #100]	; 0x64
 801a504:	81c2      	strh	r2, [r0, #14]
 801a506:	6183      	str	r3, [r0, #24]
 801a508:	4619      	mov	r1, r3
 801a50a:	2208      	movs	r2, #8
 801a50c:	305c      	adds	r0, #92	; 0x5c
 801a50e:	f000 f93d 	bl	801a78c <memset>
 801a512:	4b05      	ldr	r3, [pc, #20]	; (801a528 <std+0x38>)
 801a514:	6263      	str	r3, [r4, #36]	; 0x24
 801a516:	4b05      	ldr	r3, [pc, #20]	; (801a52c <std+0x3c>)
 801a518:	62a3      	str	r3, [r4, #40]	; 0x28
 801a51a:	4b05      	ldr	r3, [pc, #20]	; (801a530 <std+0x40>)
 801a51c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a51e:	4b05      	ldr	r3, [pc, #20]	; (801a534 <std+0x44>)
 801a520:	6224      	str	r4, [r4, #32]
 801a522:	6323      	str	r3, [r4, #48]	; 0x30
 801a524:	bd10      	pop	{r4, pc}
 801a526:	bf00      	nop
 801a528:	0801b921 	.word	0x0801b921
 801a52c:	0801b947 	.word	0x0801b947
 801a530:	0801b97f 	.word	0x0801b97f
 801a534:	0801b9a3 	.word	0x0801b9a3

0801a538 <_cleanup_r>:
 801a538:	4901      	ldr	r1, [pc, #4]	; (801a540 <_cleanup_r+0x8>)
 801a53a:	f000 b8af 	b.w	801a69c <_fwalk_reent>
 801a53e:	bf00      	nop
 801a540:	0801d8dd 	.word	0x0801d8dd

0801a544 <__sfmoreglue>:
 801a544:	b570      	push	{r4, r5, r6, lr}
 801a546:	1e4a      	subs	r2, r1, #1
 801a548:	2568      	movs	r5, #104	; 0x68
 801a54a:	4355      	muls	r5, r2
 801a54c:	460e      	mov	r6, r1
 801a54e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a552:	f000 f973 	bl	801a83c <_malloc_r>
 801a556:	4604      	mov	r4, r0
 801a558:	b140      	cbz	r0, 801a56c <__sfmoreglue+0x28>
 801a55a:	2100      	movs	r1, #0
 801a55c:	e9c0 1600 	strd	r1, r6, [r0]
 801a560:	300c      	adds	r0, #12
 801a562:	60a0      	str	r0, [r4, #8]
 801a564:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a568:	f000 f910 	bl	801a78c <memset>
 801a56c:	4620      	mov	r0, r4
 801a56e:	bd70      	pop	{r4, r5, r6, pc}

0801a570 <__sfp_lock_acquire>:
 801a570:	4801      	ldr	r0, [pc, #4]	; (801a578 <__sfp_lock_acquire+0x8>)
 801a572:	f000 b8d8 	b.w	801a726 <__retarget_lock_acquire_recursive>
 801a576:	bf00      	nop
 801a578:	20008fb0 	.word	0x20008fb0

0801a57c <__sfp_lock_release>:
 801a57c:	4801      	ldr	r0, [pc, #4]	; (801a584 <__sfp_lock_release+0x8>)
 801a57e:	f000 b8d3 	b.w	801a728 <__retarget_lock_release_recursive>
 801a582:	bf00      	nop
 801a584:	20008fb0 	.word	0x20008fb0

0801a588 <__sinit_lock_acquire>:
 801a588:	4801      	ldr	r0, [pc, #4]	; (801a590 <__sinit_lock_acquire+0x8>)
 801a58a:	f000 b8cc 	b.w	801a726 <__retarget_lock_acquire_recursive>
 801a58e:	bf00      	nop
 801a590:	20008fab 	.word	0x20008fab

0801a594 <__sinit_lock_release>:
 801a594:	4801      	ldr	r0, [pc, #4]	; (801a59c <__sinit_lock_release+0x8>)
 801a596:	f000 b8c7 	b.w	801a728 <__retarget_lock_release_recursive>
 801a59a:	bf00      	nop
 801a59c:	20008fab 	.word	0x20008fab

0801a5a0 <__sinit>:
 801a5a0:	b510      	push	{r4, lr}
 801a5a2:	4604      	mov	r4, r0
 801a5a4:	f7ff fff0 	bl	801a588 <__sinit_lock_acquire>
 801a5a8:	69a3      	ldr	r3, [r4, #24]
 801a5aa:	b11b      	cbz	r3, 801a5b4 <__sinit+0x14>
 801a5ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a5b0:	f7ff bff0 	b.w	801a594 <__sinit_lock_release>
 801a5b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a5b8:	6523      	str	r3, [r4, #80]	; 0x50
 801a5ba:	4b13      	ldr	r3, [pc, #76]	; (801a608 <__sinit+0x68>)
 801a5bc:	4a13      	ldr	r2, [pc, #76]	; (801a60c <__sinit+0x6c>)
 801a5be:	681b      	ldr	r3, [r3, #0]
 801a5c0:	62a2      	str	r2, [r4, #40]	; 0x28
 801a5c2:	42a3      	cmp	r3, r4
 801a5c4:	bf04      	itt	eq
 801a5c6:	2301      	moveq	r3, #1
 801a5c8:	61a3      	streq	r3, [r4, #24]
 801a5ca:	4620      	mov	r0, r4
 801a5cc:	f000 f820 	bl	801a610 <__sfp>
 801a5d0:	6060      	str	r0, [r4, #4]
 801a5d2:	4620      	mov	r0, r4
 801a5d4:	f000 f81c 	bl	801a610 <__sfp>
 801a5d8:	60a0      	str	r0, [r4, #8]
 801a5da:	4620      	mov	r0, r4
 801a5dc:	f000 f818 	bl	801a610 <__sfp>
 801a5e0:	2200      	movs	r2, #0
 801a5e2:	60e0      	str	r0, [r4, #12]
 801a5e4:	2104      	movs	r1, #4
 801a5e6:	6860      	ldr	r0, [r4, #4]
 801a5e8:	f7ff ff82 	bl	801a4f0 <std>
 801a5ec:	68a0      	ldr	r0, [r4, #8]
 801a5ee:	2201      	movs	r2, #1
 801a5f0:	2109      	movs	r1, #9
 801a5f2:	f7ff ff7d 	bl	801a4f0 <std>
 801a5f6:	68e0      	ldr	r0, [r4, #12]
 801a5f8:	2202      	movs	r2, #2
 801a5fa:	2112      	movs	r1, #18
 801a5fc:	f7ff ff78 	bl	801a4f0 <std>
 801a600:	2301      	movs	r3, #1
 801a602:	61a3      	str	r3, [r4, #24]
 801a604:	e7d2      	b.n	801a5ac <__sinit+0xc>
 801a606:	bf00      	nop
 801a608:	080218ac 	.word	0x080218ac
 801a60c:	0801a539 	.word	0x0801a539

0801a610 <__sfp>:
 801a610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a612:	4607      	mov	r7, r0
 801a614:	f7ff ffac 	bl	801a570 <__sfp_lock_acquire>
 801a618:	4b1e      	ldr	r3, [pc, #120]	; (801a694 <__sfp+0x84>)
 801a61a:	681e      	ldr	r6, [r3, #0]
 801a61c:	69b3      	ldr	r3, [r6, #24]
 801a61e:	b913      	cbnz	r3, 801a626 <__sfp+0x16>
 801a620:	4630      	mov	r0, r6
 801a622:	f7ff ffbd 	bl	801a5a0 <__sinit>
 801a626:	3648      	adds	r6, #72	; 0x48
 801a628:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a62c:	3b01      	subs	r3, #1
 801a62e:	d503      	bpl.n	801a638 <__sfp+0x28>
 801a630:	6833      	ldr	r3, [r6, #0]
 801a632:	b30b      	cbz	r3, 801a678 <__sfp+0x68>
 801a634:	6836      	ldr	r6, [r6, #0]
 801a636:	e7f7      	b.n	801a628 <__sfp+0x18>
 801a638:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a63c:	b9d5      	cbnz	r5, 801a674 <__sfp+0x64>
 801a63e:	4b16      	ldr	r3, [pc, #88]	; (801a698 <__sfp+0x88>)
 801a640:	60e3      	str	r3, [r4, #12]
 801a642:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a646:	6665      	str	r5, [r4, #100]	; 0x64
 801a648:	f000 f86c 	bl	801a724 <__retarget_lock_init_recursive>
 801a64c:	f7ff ff96 	bl	801a57c <__sfp_lock_release>
 801a650:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a654:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a658:	6025      	str	r5, [r4, #0]
 801a65a:	61a5      	str	r5, [r4, #24]
 801a65c:	2208      	movs	r2, #8
 801a65e:	4629      	mov	r1, r5
 801a660:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a664:	f000 f892 	bl	801a78c <memset>
 801a668:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a66c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a670:	4620      	mov	r0, r4
 801a672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a674:	3468      	adds	r4, #104	; 0x68
 801a676:	e7d9      	b.n	801a62c <__sfp+0x1c>
 801a678:	2104      	movs	r1, #4
 801a67a:	4638      	mov	r0, r7
 801a67c:	f7ff ff62 	bl	801a544 <__sfmoreglue>
 801a680:	4604      	mov	r4, r0
 801a682:	6030      	str	r0, [r6, #0]
 801a684:	2800      	cmp	r0, #0
 801a686:	d1d5      	bne.n	801a634 <__sfp+0x24>
 801a688:	f7ff ff78 	bl	801a57c <__sfp_lock_release>
 801a68c:	230c      	movs	r3, #12
 801a68e:	603b      	str	r3, [r7, #0]
 801a690:	e7ee      	b.n	801a670 <__sfp+0x60>
 801a692:	bf00      	nop
 801a694:	080218ac 	.word	0x080218ac
 801a698:	ffff0001 	.word	0xffff0001

0801a69c <_fwalk_reent>:
 801a69c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a6a0:	4606      	mov	r6, r0
 801a6a2:	4688      	mov	r8, r1
 801a6a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a6a8:	2700      	movs	r7, #0
 801a6aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a6ae:	f1b9 0901 	subs.w	r9, r9, #1
 801a6b2:	d505      	bpl.n	801a6c0 <_fwalk_reent+0x24>
 801a6b4:	6824      	ldr	r4, [r4, #0]
 801a6b6:	2c00      	cmp	r4, #0
 801a6b8:	d1f7      	bne.n	801a6aa <_fwalk_reent+0xe>
 801a6ba:	4638      	mov	r0, r7
 801a6bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a6c0:	89ab      	ldrh	r3, [r5, #12]
 801a6c2:	2b01      	cmp	r3, #1
 801a6c4:	d907      	bls.n	801a6d6 <_fwalk_reent+0x3a>
 801a6c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a6ca:	3301      	adds	r3, #1
 801a6cc:	d003      	beq.n	801a6d6 <_fwalk_reent+0x3a>
 801a6ce:	4629      	mov	r1, r5
 801a6d0:	4630      	mov	r0, r6
 801a6d2:	47c0      	blx	r8
 801a6d4:	4307      	orrs	r7, r0
 801a6d6:	3568      	adds	r5, #104	; 0x68
 801a6d8:	e7e9      	b.n	801a6ae <_fwalk_reent+0x12>
	...

0801a6dc <__libc_init_array>:
 801a6dc:	b570      	push	{r4, r5, r6, lr}
 801a6de:	4d0d      	ldr	r5, [pc, #52]	; (801a714 <__libc_init_array+0x38>)
 801a6e0:	4c0d      	ldr	r4, [pc, #52]	; (801a718 <__libc_init_array+0x3c>)
 801a6e2:	1b64      	subs	r4, r4, r5
 801a6e4:	10a4      	asrs	r4, r4, #2
 801a6e6:	2600      	movs	r6, #0
 801a6e8:	42a6      	cmp	r6, r4
 801a6ea:	d109      	bne.n	801a700 <__libc_init_array+0x24>
 801a6ec:	4d0b      	ldr	r5, [pc, #44]	; (801a71c <__libc_init_array+0x40>)
 801a6ee:	4c0c      	ldr	r4, [pc, #48]	; (801a720 <__libc_init_array+0x44>)
 801a6f0:	f005 f8cc 	bl	801f88c <_init>
 801a6f4:	1b64      	subs	r4, r4, r5
 801a6f6:	10a4      	asrs	r4, r4, #2
 801a6f8:	2600      	movs	r6, #0
 801a6fa:	42a6      	cmp	r6, r4
 801a6fc:	d105      	bne.n	801a70a <__libc_init_array+0x2e>
 801a6fe:	bd70      	pop	{r4, r5, r6, pc}
 801a700:	f855 3b04 	ldr.w	r3, [r5], #4
 801a704:	4798      	blx	r3
 801a706:	3601      	adds	r6, #1
 801a708:	e7ee      	b.n	801a6e8 <__libc_init_array+0xc>
 801a70a:	f855 3b04 	ldr.w	r3, [r5], #4
 801a70e:	4798      	blx	r3
 801a710:	3601      	adds	r6, #1
 801a712:	e7f2      	b.n	801a6fa <__libc_init_array+0x1e>
 801a714:	08021c18 	.word	0x08021c18
 801a718:	08021c18 	.word	0x08021c18
 801a71c:	08021c18 	.word	0x08021c18
 801a720:	08021c20 	.word	0x08021c20

0801a724 <__retarget_lock_init_recursive>:
 801a724:	4770      	bx	lr

0801a726 <__retarget_lock_acquire_recursive>:
 801a726:	4770      	bx	lr

0801a728 <__retarget_lock_release_recursive>:
 801a728:	4770      	bx	lr
	...

0801a72c <malloc>:
 801a72c:	4b02      	ldr	r3, [pc, #8]	; (801a738 <malloc+0xc>)
 801a72e:	4601      	mov	r1, r0
 801a730:	6818      	ldr	r0, [r3, #0]
 801a732:	f000 b883 	b.w	801a83c <_malloc_r>
 801a736:	bf00      	nop
 801a738:	200001f8 	.word	0x200001f8

0801a73c <memcpy>:
 801a73c:	440a      	add	r2, r1
 801a73e:	4291      	cmp	r1, r2
 801a740:	f100 33ff 	add.w	r3, r0, #4294967295
 801a744:	d100      	bne.n	801a748 <memcpy+0xc>
 801a746:	4770      	bx	lr
 801a748:	b510      	push	{r4, lr}
 801a74a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a74e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a752:	4291      	cmp	r1, r2
 801a754:	d1f9      	bne.n	801a74a <memcpy+0xe>
 801a756:	bd10      	pop	{r4, pc}

0801a758 <memmove>:
 801a758:	4288      	cmp	r0, r1
 801a75a:	b510      	push	{r4, lr}
 801a75c:	eb01 0402 	add.w	r4, r1, r2
 801a760:	d902      	bls.n	801a768 <memmove+0x10>
 801a762:	4284      	cmp	r4, r0
 801a764:	4623      	mov	r3, r4
 801a766:	d807      	bhi.n	801a778 <memmove+0x20>
 801a768:	1e43      	subs	r3, r0, #1
 801a76a:	42a1      	cmp	r1, r4
 801a76c:	d008      	beq.n	801a780 <memmove+0x28>
 801a76e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a772:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a776:	e7f8      	b.n	801a76a <memmove+0x12>
 801a778:	4402      	add	r2, r0
 801a77a:	4601      	mov	r1, r0
 801a77c:	428a      	cmp	r2, r1
 801a77e:	d100      	bne.n	801a782 <memmove+0x2a>
 801a780:	bd10      	pop	{r4, pc}
 801a782:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a786:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a78a:	e7f7      	b.n	801a77c <memmove+0x24>

0801a78c <memset>:
 801a78c:	4402      	add	r2, r0
 801a78e:	4603      	mov	r3, r0
 801a790:	4293      	cmp	r3, r2
 801a792:	d100      	bne.n	801a796 <memset+0xa>
 801a794:	4770      	bx	lr
 801a796:	f803 1b01 	strb.w	r1, [r3], #1
 801a79a:	e7f9      	b.n	801a790 <memset+0x4>

0801a79c <_free_r>:
 801a79c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a79e:	2900      	cmp	r1, #0
 801a7a0:	d048      	beq.n	801a834 <_free_r+0x98>
 801a7a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a7a6:	9001      	str	r0, [sp, #4]
 801a7a8:	2b00      	cmp	r3, #0
 801a7aa:	f1a1 0404 	sub.w	r4, r1, #4
 801a7ae:	bfb8      	it	lt
 801a7b0:	18e4      	addlt	r4, r4, r3
 801a7b2:	f003 fcdd 	bl	801e170 <__malloc_lock>
 801a7b6:	4a20      	ldr	r2, [pc, #128]	; (801a838 <_free_r+0x9c>)
 801a7b8:	9801      	ldr	r0, [sp, #4]
 801a7ba:	6813      	ldr	r3, [r2, #0]
 801a7bc:	4615      	mov	r5, r2
 801a7be:	b933      	cbnz	r3, 801a7ce <_free_r+0x32>
 801a7c0:	6063      	str	r3, [r4, #4]
 801a7c2:	6014      	str	r4, [r2, #0]
 801a7c4:	b003      	add	sp, #12
 801a7c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a7ca:	f003 bcd7 	b.w	801e17c <__malloc_unlock>
 801a7ce:	42a3      	cmp	r3, r4
 801a7d0:	d90b      	bls.n	801a7ea <_free_r+0x4e>
 801a7d2:	6821      	ldr	r1, [r4, #0]
 801a7d4:	1862      	adds	r2, r4, r1
 801a7d6:	4293      	cmp	r3, r2
 801a7d8:	bf04      	itt	eq
 801a7da:	681a      	ldreq	r2, [r3, #0]
 801a7dc:	685b      	ldreq	r3, [r3, #4]
 801a7de:	6063      	str	r3, [r4, #4]
 801a7e0:	bf04      	itt	eq
 801a7e2:	1852      	addeq	r2, r2, r1
 801a7e4:	6022      	streq	r2, [r4, #0]
 801a7e6:	602c      	str	r4, [r5, #0]
 801a7e8:	e7ec      	b.n	801a7c4 <_free_r+0x28>
 801a7ea:	461a      	mov	r2, r3
 801a7ec:	685b      	ldr	r3, [r3, #4]
 801a7ee:	b10b      	cbz	r3, 801a7f4 <_free_r+0x58>
 801a7f0:	42a3      	cmp	r3, r4
 801a7f2:	d9fa      	bls.n	801a7ea <_free_r+0x4e>
 801a7f4:	6811      	ldr	r1, [r2, #0]
 801a7f6:	1855      	adds	r5, r2, r1
 801a7f8:	42a5      	cmp	r5, r4
 801a7fa:	d10b      	bne.n	801a814 <_free_r+0x78>
 801a7fc:	6824      	ldr	r4, [r4, #0]
 801a7fe:	4421      	add	r1, r4
 801a800:	1854      	adds	r4, r2, r1
 801a802:	42a3      	cmp	r3, r4
 801a804:	6011      	str	r1, [r2, #0]
 801a806:	d1dd      	bne.n	801a7c4 <_free_r+0x28>
 801a808:	681c      	ldr	r4, [r3, #0]
 801a80a:	685b      	ldr	r3, [r3, #4]
 801a80c:	6053      	str	r3, [r2, #4]
 801a80e:	4421      	add	r1, r4
 801a810:	6011      	str	r1, [r2, #0]
 801a812:	e7d7      	b.n	801a7c4 <_free_r+0x28>
 801a814:	d902      	bls.n	801a81c <_free_r+0x80>
 801a816:	230c      	movs	r3, #12
 801a818:	6003      	str	r3, [r0, #0]
 801a81a:	e7d3      	b.n	801a7c4 <_free_r+0x28>
 801a81c:	6825      	ldr	r5, [r4, #0]
 801a81e:	1961      	adds	r1, r4, r5
 801a820:	428b      	cmp	r3, r1
 801a822:	bf04      	itt	eq
 801a824:	6819      	ldreq	r1, [r3, #0]
 801a826:	685b      	ldreq	r3, [r3, #4]
 801a828:	6063      	str	r3, [r4, #4]
 801a82a:	bf04      	itt	eq
 801a82c:	1949      	addeq	r1, r1, r5
 801a82e:	6021      	streq	r1, [r4, #0]
 801a830:	6054      	str	r4, [r2, #4]
 801a832:	e7c7      	b.n	801a7c4 <_free_r+0x28>
 801a834:	b003      	add	sp, #12
 801a836:	bd30      	pop	{r4, r5, pc}
 801a838:	20005ebc 	.word	0x20005ebc

0801a83c <_malloc_r>:
 801a83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a83e:	1ccd      	adds	r5, r1, #3
 801a840:	f025 0503 	bic.w	r5, r5, #3
 801a844:	3508      	adds	r5, #8
 801a846:	2d0c      	cmp	r5, #12
 801a848:	bf38      	it	cc
 801a84a:	250c      	movcc	r5, #12
 801a84c:	2d00      	cmp	r5, #0
 801a84e:	4606      	mov	r6, r0
 801a850:	db01      	blt.n	801a856 <_malloc_r+0x1a>
 801a852:	42a9      	cmp	r1, r5
 801a854:	d903      	bls.n	801a85e <_malloc_r+0x22>
 801a856:	230c      	movs	r3, #12
 801a858:	6033      	str	r3, [r6, #0]
 801a85a:	2000      	movs	r0, #0
 801a85c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a85e:	f003 fc87 	bl	801e170 <__malloc_lock>
 801a862:	4921      	ldr	r1, [pc, #132]	; (801a8e8 <_malloc_r+0xac>)
 801a864:	680a      	ldr	r2, [r1, #0]
 801a866:	4614      	mov	r4, r2
 801a868:	b99c      	cbnz	r4, 801a892 <_malloc_r+0x56>
 801a86a:	4f20      	ldr	r7, [pc, #128]	; (801a8ec <_malloc_r+0xb0>)
 801a86c:	683b      	ldr	r3, [r7, #0]
 801a86e:	b923      	cbnz	r3, 801a87a <_malloc_r+0x3e>
 801a870:	4621      	mov	r1, r4
 801a872:	4630      	mov	r0, r6
 801a874:	f000 ffae 	bl	801b7d4 <_sbrk_r>
 801a878:	6038      	str	r0, [r7, #0]
 801a87a:	4629      	mov	r1, r5
 801a87c:	4630      	mov	r0, r6
 801a87e:	f000 ffa9 	bl	801b7d4 <_sbrk_r>
 801a882:	1c43      	adds	r3, r0, #1
 801a884:	d123      	bne.n	801a8ce <_malloc_r+0x92>
 801a886:	230c      	movs	r3, #12
 801a888:	6033      	str	r3, [r6, #0]
 801a88a:	4630      	mov	r0, r6
 801a88c:	f003 fc76 	bl	801e17c <__malloc_unlock>
 801a890:	e7e3      	b.n	801a85a <_malloc_r+0x1e>
 801a892:	6823      	ldr	r3, [r4, #0]
 801a894:	1b5b      	subs	r3, r3, r5
 801a896:	d417      	bmi.n	801a8c8 <_malloc_r+0x8c>
 801a898:	2b0b      	cmp	r3, #11
 801a89a:	d903      	bls.n	801a8a4 <_malloc_r+0x68>
 801a89c:	6023      	str	r3, [r4, #0]
 801a89e:	441c      	add	r4, r3
 801a8a0:	6025      	str	r5, [r4, #0]
 801a8a2:	e004      	b.n	801a8ae <_malloc_r+0x72>
 801a8a4:	6863      	ldr	r3, [r4, #4]
 801a8a6:	42a2      	cmp	r2, r4
 801a8a8:	bf0c      	ite	eq
 801a8aa:	600b      	streq	r3, [r1, #0]
 801a8ac:	6053      	strne	r3, [r2, #4]
 801a8ae:	4630      	mov	r0, r6
 801a8b0:	f003 fc64 	bl	801e17c <__malloc_unlock>
 801a8b4:	f104 000b 	add.w	r0, r4, #11
 801a8b8:	1d23      	adds	r3, r4, #4
 801a8ba:	f020 0007 	bic.w	r0, r0, #7
 801a8be:	1ac2      	subs	r2, r0, r3
 801a8c0:	d0cc      	beq.n	801a85c <_malloc_r+0x20>
 801a8c2:	1a1b      	subs	r3, r3, r0
 801a8c4:	50a3      	str	r3, [r4, r2]
 801a8c6:	e7c9      	b.n	801a85c <_malloc_r+0x20>
 801a8c8:	4622      	mov	r2, r4
 801a8ca:	6864      	ldr	r4, [r4, #4]
 801a8cc:	e7cc      	b.n	801a868 <_malloc_r+0x2c>
 801a8ce:	1cc4      	adds	r4, r0, #3
 801a8d0:	f024 0403 	bic.w	r4, r4, #3
 801a8d4:	42a0      	cmp	r0, r4
 801a8d6:	d0e3      	beq.n	801a8a0 <_malloc_r+0x64>
 801a8d8:	1a21      	subs	r1, r4, r0
 801a8da:	4630      	mov	r0, r6
 801a8dc:	f000 ff7a 	bl	801b7d4 <_sbrk_r>
 801a8e0:	3001      	adds	r0, #1
 801a8e2:	d1dd      	bne.n	801a8a0 <_malloc_r+0x64>
 801a8e4:	e7cf      	b.n	801a886 <_malloc_r+0x4a>
 801a8e6:	bf00      	nop
 801a8e8:	20005ebc 	.word	0x20005ebc
 801a8ec:	20005ec0 	.word	0x20005ec0

0801a8f0 <__cvt>:
 801a8f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a8f4:	ec55 4b10 	vmov	r4, r5, d0
 801a8f8:	2d00      	cmp	r5, #0
 801a8fa:	460e      	mov	r6, r1
 801a8fc:	4619      	mov	r1, r3
 801a8fe:	462b      	mov	r3, r5
 801a900:	bfbb      	ittet	lt
 801a902:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801a906:	461d      	movlt	r5, r3
 801a908:	2300      	movge	r3, #0
 801a90a:	232d      	movlt	r3, #45	; 0x2d
 801a90c:	700b      	strb	r3, [r1, #0]
 801a90e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a910:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801a914:	4691      	mov	r9, r2
 801a916:	f023 0820 	bic.w	r8, r3, #32
 801a91a:	bfbc      	itt	lt
 801a91c:	4622      	movlt	r2, r4
 801a91e:	4614      	movlt	r4, r2
 801a920:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a924:	d005      	beq.n	801a932 <__cvt+0x42>
 801a926:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801a92a:	d100      	bne.n	801a92e <__cvt+0x3e>
 801a92c:	3601      	adds	r6, #1
 801a92e:	2102      	movs	r1, #2
 801a930:	e000      	b.n	801a934 <__cvt+0x44>
 801a932:	2103      	movs	r1, #3
 801a934:	ab03      	add	r3, sp, #12
 801a936:	9301      	str	r3, [sp, #4]
 801a938:	ab02      	add	r3, sp, #8
 801a93a:	9300      	str	r3, [sp, #0]
 801a93c:	ec45 4b10 	vmov	d0, r4, r5
 801a940:	4653      	mov	r3, sl
 801a942:	4632      	mov	r2, r6
 801a944:	f002 f958 	bl	801cbf8 <_dtoa_r>
 801a948:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801a94c:	4607      	mov	r7, r0
 801a94e:	d102      	bne.n	801a956 <__cvt+0x66>
 801a950:	f019 0f01 	tst.w	r9, #1
 801a954:	d022      	beq.n	801a99c <__cvt+0xac>
 801a956:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a95a:	eb07 0906 	add.w	r9, r7, r6
 801a95e:	d110      	bne.n	801a982 <__cvt+0x92>
 801a960:	783b      	ldrb	r3, [r7, #0]
 801a962:	2b30      	cmp	r3, #48	; 0x30
 801a964:	d10a      	bne.n	801a97c <__cvt+0x8c>
 801a966:	2200      	movs	r2, #0
 801a968:	2300      	movs	r3, #0
 801a96a:	4620      	mov	r0, r4
 801a96c:	4629      	mov	r1, r5
 801a96e:	f7e6 f8bb 	bl	8000ae8 <__aeabi_dcmpeq>
 801a972:	b918      	cbnz	r0, 801a97c <__cvt+0x8c>
 801a974:	f1c6 0601 	rsb	r6, r6, #1
 801a978:	f8ca 6000 	str.w	r6, [sl]
 801a97c:	f8da 3000 	ldr.w	r3, [sl]
 801a980:	4499      	add	r9, r3
 801a982:	2200      	movs	r2, #0
 801a984:	2300      	movs	r3, #0
 801a986:	4620      	mov	r0, r4
 801a988:	4629      	mov	r1, r5
 801a98a:	f7e6 f8ad 	bl	8000ae8 <__aeabi_dcmpeq>
 801a98e:	b108      	cbz	r0, 801a994 <__cvt+0xa4>
 801a990:	f8cd 900c 	str.w	r9, [sp, #12]
 801a994:	2230      	movs	r2, #48	; 0x30
 801a996:	9b03      	ldr	r3, [sp, #12]
 801a998:	454b      	cmp	r3, r9
 801a99a:	d307      	bcc.n	801a9ac <__cvt+0xbc>
 801a99c:	9b03      	ldr	r3, [sp, #12]
 801a99e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a9a0:	1bdb      	subs	r3, r3, r7
 801a9a2:	4638      	mov	r0, r7
 801a9a4:	6013      	str	r3, [r2, #0]
 801a9a6:	b004      	add	sp, #16
 801a9a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a9ac:	1c59      	adds	r1, r3, #1
 801a9ae:	9103      	str	r1, [sp, #12]
 801a9b0:	701a      	strb	r2, [r3, #0]
 801a9b2:	e7f0      	b.n	801a996 <__cvt+0xa6>

0801a9b4 <__exponent>:
 801a9b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a9b6:	4603      	mov	r3, r0
 801a9b8:	2900      	cmp	r1, #0
 801a9ba:	bfb8      	it	lt
 801a9bc:	4249      	neglt	r1, r1
 801a9be:	f803 2b02 	strb.w	r2, [r3], #2
 801a9c2:	bfb4      	ite	lt
 801a9c4:	222d      	movlt	r2, #45	; 0x2d
 801a9c6:	222b      	movge	r2, #43	; 0x2b
 801a9c8:	2909      	cmp	r1, #9
 801a9ca:	7042      	strb	r2, [r0, #1]
 801a9cc:	dd2a      	ble.n	801aa24 <__exponent+0x70>
 801a9ce:	f10d 0407 	add.w	r4, sp, #7
 801a9d2:	46a4      	mov	ip, r4
 801a9d4:	270a      	movs	r7, #10
 801a9d6:	46a6      	mov	lr, r4
 801a9d8:	460a      	mov	r2, r1
 801a9da:	fb91 f6f7 	sdiv	r6, r1, r7
 801a9de:	fb07 1516 	mls	r5, r7, r6, r1
 801a9e2:	3530      	adds	r5, #48	; 0x30
 801a9e4:	2a63      	cmp	r2, #99	; 0x63
 801a9e6:	f104 34ff 	add.w	r4, r4, #4294967295
 801a9ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801a9ee:	4631      	mov	r1, r6
 801a9f0:	dcf1      	bgt.n	801a9d6 <__exponent+0x22>
 801a9f2:	3130      	adds	r1, #48	; 0x30
 801a9f4:	f1ae 0502 	sub.w	r5, lr, #2
 801a9f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 801a9fc:	1c44      	adds	r4, r0, #1
 801a9fe:	4629      	mov	r1, r5
 801aa00:	4561      	cmp	r1, ip
 801aa02:	d30a      	bcc.n	801aa1a <__exponent+0x66>
 801aa04:	f10d 0209 	add.w	r2, sp, #9
 801aa08:	eba2 020e 	sub.w	r2, r2, lr
 801aa0c:	4565      	cmp	r5, ip
 801aa0e:	bf88      	it	hi
 801aa10:	2200      	movhi	r2, #0
 801aa12:	4413      	add	r3, r2
 801aa14:	1a18      	subs	r0, r3, r0
 801aa16:	b003      	add	sp, #12
 801aa18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aa1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801aa1e:	f804 2f01 	strb.w	r2, [r4, #1]!
 801aa22:	e7ed      	b.n	801aa00 <__exponent+0x4c>
 801aa24:	2330      	movs	r3, #48	; 0x30
 801aa26:	3130      	adds	r1, #48	; 0x30
 801aa28:	7083      	strb	r3, [r0, #2]
 801aa2a:	70c1      	strb	r1, [r0, #3]
 801aa2c:	1d03      	adds	r3, r0, #4
 801aa2e:	e7f1      	b.n	801aa14 <__exponent+0x60>

0801aa30 <_printf_float>:
 801aa30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa34:	ed2d 8b02 	vpush	{d8}
 801aa38:	b08d      	sub	sp, #52	; 0x34
 801aa3a:	460c      	mov	r4, r1
 801aa3c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801aa40:	4616      	mov	r6, r2
 801aa42:	461f      	mov	r7, r3
 801aa44:	4605      	mov	r5, r0
 801aa46:	f003 fb07 	bl	801e058 <_localeconv_r>
 801aa4a:	f8d0 a000 	ldr.w	sl, [r0]
 801aa4e:	4650      	mov	r0, sl
 801aa50:	f7e5 fbce 	bl	80001f0 <strlen>
 801aa54:	2300      	movs	r3, #0
 801aa56:	930a      	str	r3, [sp, #40]	; 0x28
 801aa58:	6823      	ldr	r3, [r4, #0]
 801aa5a:	9305      	str	r3, [sp, #20]
 801aa5c:	f8d8 3000 	ldr.w	r3, [r8]
 801aa60:	f894 b018 	ldrb.w	fp, [r4, #24]
 801aa64:	3307      	adds	r3, #7
 801aa66:	f023 0307 	bic.w	r3, r3, #7
 801aa6a:	f103 0208 	add.w	r2, r3, #8
 801aa6e:	f8c8 2000 	str.w	r2, [r8]
 801aa72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa76:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801aa7a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801aa7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801aa82:	9307      	str	r3, [sp, #28]
 801aa84:	f8cd 8018 	str.w	r8, [sp, #24]
 801aa88:	ee08 0a10 	vmov	s16, r0
 801aa8c:	4b9f      	ldr	r3, [pc, #636]	; (801ad0c <_printf_float+0x2dc>)
 801aa8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801aa92:	f04f 32ff 	mov.w	r2, #4294967295
 801aa96:	f7e6 f859 	bl	8000b4c <__aeabi_dcmpun>
 801aa9a:	bb88      	cbnz	r0, 801ab00 <_printf_float+0xd0>
 801aa9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801aaa0:	4b9a      	ldr	r3, [pc, #616]	; (801ad0c <_printf_float+0x2dc>)
 801aaa2:	f04f 32ff 	mov.w	r2, #4294967295
 801aaa6:	f7e6 f833 	bl	8000b10 <__aeabi_dcmple>
 801aaaa:	bb48      	cbnz	r0, 801ab00 <_printf_float+0xd0>
 801aaac:	2200      	movs	r2, #0
 801aaae:	2300      	movs	r3, #0
 801aab0:	4640      	mov	r0, r8
 801aab2:	4649      	mov	r1, r9
 801aab4:	f7e6 f822 	bl	8000afc <__aeabi_dcmplt>
 801aab8:	b110      	cbz	r0, 801aac0 <_printf_float+0x90>
 801aaba:	232d      	movs	r3, #45	; 0x2d
 801aabc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aac0:	4b93      	ldr	r3, [pc, #588]	; (801ad10 <_printf_float+0x2e0>)
 801aac2:	4894      	ldr	r0, [pc, #592]	; (801ad14 <_printf_float+0x2e4>)
 801aac4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801aac8:	bf94      	ite	ls
 801aaca:	4698      	movls	r8, r3
 801aacc:	4680      	movhi	r8, r0
 801aace:	2303      	movs	r3, #3
 801aad0:	6123      	str	r3, [r4, #16]
 801aad2:	9b05      	ldr	r3, [sp, #20]
 801aad4:	f023 0204 	bic.w	r2, r3, #4
 801aad8:	6022      	str	r2, [r4, #0]
 801aada:	f04f 0900 	mov.w	r9, #0
 801aade:	9700      	str	r7, [sp, #0]
 801aae0:	4633      	mov	r3, r6
 801aae2:	aa0b      	add	r2, sp, #44	; 0x2c
 801aae4:	4621      	mov	r1, r4
 801aae6:	4628      	mov	r0, r5
 801aae8:	f000 f9d8 	bl	801ae9c <_printf_common>
 801aaec:	3001      	adds	r0, #1
 801aaee:	f040 8090 	bne.w	801ac12 <_printf_float+0x1e2>
 801aaf2:	f04f 30ff 	mov.w	r0, #4294967295
 801aaf6:	b00d      	add	sp, #52	; 0x34
 801aaf8:	ecbd 8b02 	vpop	{d8}
 801aafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab00:	4642      	mov	r2, r8
 801ab02:	464b      	mov	r3, r9
 801ab04:	4640      	mov	r0, r8
 801ab06:	4649      	mov	r1, r9
 801ab08:	f7e6 f820 	bl	8000b4c <__aeabi_dcmpun>
 801ab0c:	b140      	cbz	r0, 801ab20 <_printf_float+0xf0>
 801ab0e:	464b      	mov	r3, r9
 801ab10:	2b00      	cmp	r3, #0
 801ab12:	bfbc      	itt	lt
 801ab14:	232d      	movlt	r3, #45	; 0x2d
 801ab16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801ab1a:	487f      	ldr	r0, [pc, #508]	; (801ad18 <_printf_float+0x2e8>)
 801ab1c:	4b7f      	ldr	r3, [pc, #508]	; (801ad1c <_printf_float+0x2ec>)
 801ab1e:	e7d1      	b.n	801aac4 <_printf_float+0x94>
 801ab20:	6863      	ldr	r3, [r4, #4]
 801ab22:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801ab26:	9206      	str	r2, [sp, #24]
 801ab28:	1c5a      	adds	r2, r3, #1
 801ab2a:	d13f      	bne.n	801abac <_printf_float+0x17c>
 801ab2c:	2306      	movs	r3, #6
 801ab2e:	6063      	str	r3, [r4, #4]
 801ab30:	9b05      	ldr	r3, [sp, #20]
 801ab32:	6861      	ldr	r1, [r4, #4]
 801ab34:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801ab38:	2300      	movs	r3, #0
 801ab3a:	9303      	str	r3, [sp, #12]
 801ab3c:	ab0a      	add	r3, sp, #40	; 0x28
 801ab3e:	e9cd b301 	strd	fp, r3, [sp, #4]
 801ab42:	ab09      	add	r3, sp, #36	; 0x24
 801ab44:	ec49 8b10 	vmov	d0, r8, r9
 801ab48:	9300      	str	r3, [sp, #0]
 801ab4a:	6022      	str	r2, [r4, #0]
 801ab4c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801ab50:	4628      	mov	r0, r5
 801ab52:	f7ff fecd 	bl	801a8f0 <__cvt>
 801ab56:	9b06      	ldr	r3, [sp, #24]
 801ab58:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ab5a:	2b47      	cmp	r3, #71	; 0x47
 801ab5c:	4680      	mov	r8, r0
 801ab5e:	d108      	bne.n	801ab72 <_printf_float+0x142>
 801ab60:	1cc8      	adds	r0, r1, #3
 801ab62:	db02      	blt.n	801ab6a <_printf_float+0x13a>
 801ab64:	6863      	ldr	r3, [r4, #4]
 801ab66:	4299      	cmp	r1, r3
 801ab68:	dd41      	ble.n	801abee <_printf_float+0x1be>
 801ab6a:	f1ab 0b02 	sub.w	fp, fp, #2
 801ab6e:	fa5f fb8b 	uxtb.w	fp, fp
 801ab72:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801ab76:	d820      	bhi.n	801abba <_printf_float+0x18a>
 801ab78:	3901      	subs	r1, #1
 801ab7a:	465a      	mov	r2, fp
 801ab7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801ab80:	9109      	str	r1, [sp, #36]	; 0x24
 801ab82:	f7ff ff17 	bl	801a9b4 <__exponent>
 801ab86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ab88:	1813      	adds	r3, r2, r0
 801ab8a:	2a01      	cmp	r2, #1
 801ab8c:	4681      	mov	r9, r0
 801ab8e:	6123      	str	r3, [r4, #16]
 801ab90:	dc02      	bgt.n	801ab98 <_printf_float+0x168>
 801ab92:	6822      	ldr	r2, [r4, #0]
 801ab94:	07d2      	lsls	r2, r2, #31
 801ab96:	d501      	bpl.n	801ab9c <_printf_float+0x16c>
 801ab98:	3301      	adds	r3, #1
 801ab9a:	6123      	str	r3, [r4, #16]
 801ab9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801aba0:	2b00      	cmp	r3, #0
 801aba2:	d09c      	beq.n	801aade <_printf_float+0xae>
 801aba4:	232d      	movs	r3, #45	; 0x2d
 801aba6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801abaa:	e798      	b.n	801aade <_printf_float+0xae>
 801abac:	9a06      	ldr	r2, [sp, #24]
 801abae:	2a47      	cmp	r2, #71	; 0x47
 801abb0:	d1be      	bne.n	801ab30 <_printf_float+0x100>
 801abb2:	2b00      	cmp	r3, #0
 801abb4:	d1bc      	bne.n	801ab30 <_printf_float+0x100>
 801abb6:	2301      	movs	r3, #1
 801abb8:	e7b9      	b.n	801ab2e <_printf_float+0xfe>
 801abba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801abbe:	d118      	bne.n	801abf2 <_printf_float+0x1c2>
 801abc0:	2900      	cmp	r1, #0
 801abc2:	6863      	ldr	r3, [r4, #4]
 801abc4:	dd0b      	ble.n	801abde <_printf_float+0x1ae>
 801abc6:	6121      	str	r1, [r4, #16]
 801abc8:	b913      	cbnz	r3, 801abd0 <_printf_float+0x1a0>
 801abca:	6822      	ldr	r2, [r4, #0]
 801abcc:	07d0      	lsls	r0, r2, #31
 801abce:	d502      	bpl.n	801abd6 <_printf_float+0x1a6>
 801abd0:	3301      	adds	r3, #1
 801abd2:	440b      	add	r3, r1
 801abd4:	6123      	str	r3, [r4, #16]
 801abd6:	65a1      	str	r1, [r4, #88]	; 0x58
 801abd8:	f04f 0900 	mov.w	r9, #0
 801abdc:	e7de      	b.n	801ab9c <_printf_float+0x16c>
 801abde:	b913      	cbnz	r3, 801abe6 <_printf_float+0x1b6>
 801abe0:	6822      	ldr	r2, [r4, #0]
 801abe2:	07d2      	lsls	r2, r2, #31
 801abe4:	d501      	bpl.n	801abea <_printf_float+0x1ba>
 801abe6:	3302      	adds	r3, #2
 801abe8:	e7f4      	b.n	801abd4 <_printf_float+0x1a4>
 801abea:	2301      	movs	r3, #1
 801abec:	e7f2      	b.n	801abd4 <_printf_float+0x1a4>
 801abee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801abf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801abf4:	4299      	cmp	r1, r3
 801abf6:	db05      	blt.n	801ac04 <_printf_float+0x1d4>
 801abf8:	6823      	ldr	r3, [r4, #0]
 801abfa:	6121      	str	r1, [r4, #16]
 801abfc:	07d8      	lsls	r0, r3, #31
 801abfe:	d5ea      	bpl.n	801abd6 <_printf_float+0x1a6>
 801ac00:	1c4b      	adds	r3, r1, #1
 801ac02:	e7e7      	b.n	801abd4 <_printf_float+0x1a4>
 801ac04:	2900      	cmp	r1, #0
 801ac06:	bfd4      	ite	le
 801ac08:	f1c1 0202 	rsble	r2, r1, #2
 801ac0c:	2201      	movgt	r2, #1
 801ac0e:	4413      	add	r3, r2
 801ac10:	e7e0      	b.n	801abd4 <_printf_float+0x1a4>
 801ac12:	6823      	ldr	r3, [r4, #0]
 801ac14:	055a      	lsls	r2, r3, #21
 801ac16:	d407      	bmi.n	801ac28 <_printf_float+0x1f8>
 801ac18:	6923      	ldr	r3, [r4, #16]
 801ac1a:	4642      	mov	r2, r8
 801ac1c:	4631      	mov	r1, r6
 801ac1e:	4628      	mov	r0, r5
 801ac20:	47b8      	blx	r7
 801ac22:	3001      	adds	r0, #1
 801ac24:	d12c      	bne.n	801ac80 <_printf_float+0x250>
 801ac26:	e764      	b.n	801aaf2 <_printf_float+0xc2>
 801ac28:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801ac2c:	f240 80e0 	bls.w	801adf0 <_printf_float+0x3c0>
 801ac30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801ac34:	2200      	movs	r2, #0
 801ac36:	2300      	movs	r3, #0
 801ac38:	f7e5 ff56 	bl	8000ae8 <__aeabi_dcmpeq>
 801ac3c:	2800      	cmp	r0, #0
 801ac3e:	d034      	beq.n	801acaa <_printf_float+0x27a>
 801ac40:	4a37      	ldr	r2, [pc, #220]	; (801ad20 <_printf_float+0x2f0>)
 801ac42:	2301      	movs	r3, #1
 801ac44:	4631      	mov	r1, r6
 801ac46:	4628      	mov	r0, r5
 801ac48:	47b8      	blx	r7
 801ac4a:	3001      	adds	r0, #1
 801ac4c:	f43f af51 	beq.w	801aaf2 <_printf_float+0xc2>
 801ac50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ac54:	429a      	cmp	r2, r3
 801ac56:	db02      	blt.n	801ac5e <_printf_float+0x22e>
 801ac58:	6823      	ldr	r3, [r4, #0]
 801ac5a:	07d8      	lsls	r0, r3, #31
 801ac5c:	d510      	bpl.n	801ac80 <_printf_float+0x250>
 801ac5e:	ee18 3a10 	vmov	r3, s16
 801ac62:	4652      	mov	r2, sl
 801ac64:	4631      	mov	r1, r6
 801ac66:	4628      	mov	r0, r5
 801ac68:	47b8      	blx	r7
 801ac6a:	3001      	adds	r0, #1
 801ac6c:	f43f af41 	beq.w	801aaf2 <_printf_float+0xc2>
 801ac70:	f04f 0800 	mov.w	r8, #0
 801ac74:	f104 091a 	add.w	r9, r4, #26
 801ac78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ac7a:	3b01      	subs	r3, #1
 801ac7c:	4543      	cmp	r3, r8
 801ac7e:	dc09      	bgt.n	801ac94 <_printf_float+0x264>
 801ac80:	6823      	ldr	r3, [r4, #0]
 801ac82:	079b      	lsls	r3, r3, #30
 801ac84:	f100 8105 	bmi.w	801ae92 <_printf_float+0x462>
 801ac88:	68e0      	ldr	r0, [r4, #12]
 801ac8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ac8c:	4298      	cmp	r0, r3
 801ac8e:	bfb8      	it	lt
 801ac90:	4618      	movlt	r0, r3
 801ac92:	e730      	b.n	801aaf6 <_printf_float+0xc6>
 801ac94:	2301      	movs	r3, #1
 801ac96:	464a      	mov	r2, r9
 801ac98:	4631      	mov	r1, r6
 801ac9a:	4628      	mov	r0, r5
 801ac9c:	47b8      	blx	r7
 801ac9e:	3001      	adds	r0, #1
 801aca0:	f43f af27 	beq.w	801aaf2 <_printf_float+0xc2>
 801aca4:	f108 0801 	add.w	r8, r8, #1
 801aca8:	e7e6      	b.n	801ac78 <_printf_float+0x248>
 801acaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801acac:	2b00      	cmp	r3, #0
 801acae:	dc39      	bgt.n	801ad24 <_printf_float+0x2f4>
 801acb0:	4a1b      	ldr	r2, [pc, #108]	; (801ad20 <_printf_float+0x2f0>)
 801acb2:	2301      	movs	r3, #1
 801acb4:	4631      	mov	r1, r6
 801acb6:	4628      	mov	r0, r5
 801acb8:	47b8      	blx	r7
 801acba:	3001      	adds	r0, #1
 801acbc:	f43f af19 	beq.w	801aaf2 <_printf_float+0xc2>
 801acc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801acc4:	4313      	orrs	r3, r2
 801acc6:	d102      	bne.n	801acce <_printf_float+0x29e>
 801acc8:	6823      	ldr	r3, [r4, #0]
 801acca:	07d9      	lsls	r1, r3, #31
 801accc:	d5d8      	bpl.n	801ac80 <_printf_float+0x250>
 801acce:	ee18 3a10 	vmov	r3, s16
 801acd2:	4652      	mov	r2, sl
 801acd4:	4631      	mov	r1, r6
 801acd6:	4628      	mov	r0, r5
 801acd8:	47b8      	blx	r7
 801acda:	3001      	adds	r0, #1
 801acdc:	f43f af09 	beq.w	801aaf2 <_printf_float+0xc2>
 801ace0:	f04f 0900 	mov.w	r9, #0
 801ace4:	f104 0a1a 	add.w	sl, r4, #26
 801ace8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801acea:	425b      	negs	r3, r3
 801acec:	454b      	cmp	r3, r9
 801acee:	dc01      	bgt.n	801acf4 <_printf_float+0x2c4>
 801acf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801acf2:	e792      	b.n	801ac1a <_printf_float+0x1ea>
 801acf4:	2301      	movs	r3, #1
 801acf6:	4652      	mov	r2, sl
 801acf8:	4631      	mov	r1, r6
 801acfa:	4628      	mov	r0, r5
 801acfc:	47b8      	blx	r7
 801acfe:	3001      	adds	r0, #1
 801ad00:	f43f aef7 	beq.w	801aaf2 <_printf_float+0xc2>
 801ad04:	f109 0901 	add.w	r9, r9, #1
 801ad08:	e7ee      	b.n	801ace8 <_printf_float+0x2b8>
 801ad0a:	bf00      	nop
 801ad0c:	7fefffff 	.word	0x7fefffff
 801ad10:	080218b0 	.word	0x080218b0
 801ad14:	080218b4 	.word	0x080218b4
 801ad18:	080218bc 	.word	0x080218bc
 801ad1c:	080218b8 	.word	0x080218b8
 801ad20:	08021bf9 	.word	0x08021bf9
 801ad24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ad26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ad28:	429a      	cmp	r2, r3
 801ad2a:	bfa8      	it	ge
 801ad2c:	461a      	movge	r2, r3
 801ad2e:	2a00      	cmp	r2, #0
 801ad30:	4691      	mov	r9, r2
 801ad32:	dc37      	bgt.n	801ada4 <_printf_float+0x374>
 801ad34:	f04f 0b00 	mov.w	fp, #0
 801ad38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ad3c:	f104 021a 	add.w	r2, r4, #26
 801ad40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ad42:	9305      	str	r3, [sp, #20]
 801ad44:	eba3 0309 	sub.w	r3, r3, r9
 801ad48:	455b      	cmp	r3, fp
 801ad4a:	dc33      	bgt.n	801adb4 <_printf_float+0x384>
 801ad4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ad50:	429a      	cmp	r2, r3
 801ad52:	db3b      	blt.n	801adcc <_printf_float+0x39c>
 801ad54:	6823      	ldr	r3, [r4, #0]
 801ad56:	07da      	lsls	r2, r3, #31
 801ad58:	d438      	bmi.n	801adcc <_printf_float+0x39c>
 801ad5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ad5c:	9b05      	ldr	r3, [sp, #20]
 801ad5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ad60:	1ad3      	subs	r3, r2, r3
 801ad62:	eba2 0901 	sub.w	r9, r2, r1
 801ad66:	4599      	cmp	r9, r3
 801ad68:	bfa8      	it	ge
 801ad6a:	4699      	movge	r9, r3
 801ad6c:	f1b9 0f00 	cmp.w	r9, #0
 801ad70:	dc35      	bgt.n	801adde <_printf_float+0x3ae>
 801ad72:	f04f 0800 	mov.w	r8, #0
 801ad76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ad7a:	f104 0a1a 	add.w	sl, r4, #26
 801ad7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ad82:	1a9b      	subs	r3, r3, r2
 801ad84:	eba3 0309 	sub.w	r3, r3, r9
 801ad88:	4543      	cmp	r3, r8
 801ad8a:	f77f af79 	ble.w	801ac80 <_printf_float+0x250>
 801ad8e:	2301      	movs	r3, #1
 801ad90:	4652      	mov	r2, sl
 801ad92:	4631      	mov	r1, r6
 801ad94:	4628      	mov	r0, r5
 801ad96:	47b8      	blx	r7
 801ad98:	3001      	adds	r0, #1
 801ad9a:	f43f aeaa 	beq.w	801aaf2 <_printf_float+0xc2>
 801ad9e:	f108 0801 	add.w	r8, r8, #1
 801ada2:	e7ec      	b.n	801ad7e <_printf_float+0x34e>
 801ada4:	4613      	mov	r3, r2
 801ada6:	4631      	mov	r1, r6
 801ada8:	4642      	mov	r2, r8
 801adaa:	4628      	mov	r0, r5
 801adac:	47b8      	blx	r7
 801adae:	3001      	adds	r0, #1
 801adb0:	d1c0      	bne.n	801ad34 <_printf_float+0x304>
 801adb2:	e69e      	b.n	801aaf2 <_printf_float+0xc2>
 801adb4:	2301      	movs	r3, #1
 801adb6:	4631      	mov	r1, r6
 801adb8:	4628      	mov	r0, r5
 801adba:	9205      	str	r2, [sp, #20]
 801adbc:	47b8      	blx	r7
 801adbe:	3001      	adds	r0, #1
 801adc0:	f43f ae97 	beq.w	801aaf2 <_printf_float+0xc2>
 801adc4:	9a05      	ldr	r2, [sp, #20]
 801adc6:	f10b 0b01 	add.w	fp, fp, #1
 801adca:	e7b9      	b.n	801ad40 <_printf_float+0x310>
 801adcc:	ee18 3a10 	vmov	r3, s16
 801add0:	4652      	mov	r2, sl
 801add2:	4631      	mov	r1, r6
 801add4:	4628      	mov	r0, r5
 801add6:	47b8      	blx	r7
 801add8:	3001      	adds	r0, #1
 801adda:	d1be      	bne.n	801ad5a <_printf_float+0x32a>
 801addc:	e689      	b.n	801aaf2 <_printf_float+0xc2>
 801adde:	9a05      	ldr	r2, [sp, #20]
 801ade0:	464b      	mov	r3, r9
 801ade2:	4442      	add	r2, r8
 801ade4:	4631      	mov	r1, r6
 801ade6:	4628      	mov	r0, r5
 801ade8:	47b8      	blx	r7
 801adea:	3001      	adds	r0, #1
 801adec:	d1c1      	bne.n	801ad72 <_printf_float+0x342>
 801adee:	e680      	b.n	801aaf2 <_printf_float+0xc2>
 801adf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801adf2:	2a01      	cmp	r2, #1
 801adf4:	dc01      	bgt.n	801adfa <_printf_float+0x3ca>
 801adf6:	07db      	lsls	r3, r3, #31
 801adf8:	d538      	bpl.n	801ae6c <_printf_float+0x43c>
 801adfa:	2301      	movs	r3, #1
 801adfc:	4642      	mov	r2, r8
 801adfe:	4631      	mov	r1, r6
 801ae00:	4628      	mov	r0, r5
 801ae02:	47b8      	blx	r7
 801ae04:	3001      	adds	r0, #1
 801ae06:	f43f ae74 	beq.w	801aaf2 <_printf_float+0xc2>
 801ae0a:	ee18 3a10 	vmov	r3, s16
 801ae0e:	4652      	mov	r2, sl
 801ae10:	4631      	mov	r1, r6
 801ae12:	4628      	mov	r0, r5
 801ae14:	47b8      	blx	r7
 801ae16:	3001      	adds	r0, #1
 801ae18:	f43f ae6b 	beq.w	801aaf2 <_printf_float+0xc2>
 801ae1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801ae20:	2200      	movs	r2, #0
 801ae22:	2300      	movs	r3, #0
 801ae24:	f7e5 fe60 	bl	8000ae8 <__aeabi_dcmpeq>
 801ae28:	b9d8      	cbnz	r0, 801ae62 <_printf_float+0x432>
 801ae2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ae2c:	f108 0201 	add.w	r2, r8, #1
 801ae30:	3b01      	subs	r3, #1
 801ae32:	4631      	mov	r1, r6
 801ae34:	4628      	mov	r0, r5
 801ae36:	47b8      	blx	r7
 801ae38:	3001      	adds	r0, #1
 801ae3a:	d10e      	bne.n	801ae5a <_printf_float+0x42a>
 801ae3c:	e659      	b.n	801aaf2 <_printf_float+0xc2>
 801ae3e:	2301      	movs	r3, #1
 801ae40:	4652      	mov	r2, sl
 801ae42:	4631      	mov	r1, r6
 801ae44:	4628      	mov	r0, r5
 801ae46:	47b8      	blx	r7
 801ae48:	3001      	adds	r0, #1
 801ae4a:	f43f ae52 	beq.w	801aaf2 <_printf_float+0xc2>
 801ae4e:	f108 0801 	add.w	r8, r8, #1
 801ae52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ae54:	3b01      	subs	r3, #1
 801ae56:	4543      	cmp	r3, r8
 801ae58:	dcf1      	bgt.n	801ae3e <_printf_float+0x40e>
 801ae5a:	464b      	mov	r3, r9
 801ae5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801ae60:	e6dc      	b.n	801ac1c <_printf_float+0x1ec>
 801ae62:	f04f 0800 	mov.w	r8, #0
 801ae66:	f104 0a1a 	add.w	sl, r4, #26
 801ae6a:	e7f2      	b.n	801ae52 <_printf_float+0x422>
 801ae6c:	2301      	movs	r3, #1
 801ae6e:	4642      	mov	r2, r8
 801ae70:	e7df      	b.n	801ae32 <_printf_float+0x402>
 801ae72:	2301      	movs	r3, #1
 801ae74:	464a      	mov	r2, r9
 801ae76:	4631      	mov	r1, r6
 801ae78:	4628      	mov	r0, r5
 801ae7a:	47b8      	blx	r7
 801ae7c:	3001      	adds	r0, #1
 801ae7e:	f43f ae38 	beq.w	801aaf2 <_printf_float+0xc2>
 801ae82:	f108 0801 	add.w	r8, r8, #1
 801ae86:	68e3      	ldr	r3, [r4, #12]
 801ae88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ae8a:	1a5b      	subs	r3, r3, r1
 801ae8c:	4543      	cmp	r3, r8
 801ae8e:	dcf0      	bgt.n	801ae72 <_printf_float+0x442>
 801ae90:	e6fa      	b.n	801ac88 <_printf_float+0x258>
 801ae92:	f04f 0800 	mov.w	r8, #0
 801ae96:	f104 0919 	add.w	r9, r4, #25
 801ae9a:	e7f4      	b.n	801ae86 <_printf_float+0x456>

0801ae9c <_printf_common>:
 801ae9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aea0:	4616      	mov	r6, r2
 801aea2:	4699      	mov	r9, r3
 801aea4:	688a      	ldr	r2, [r1, #8]
 801aea6:	690b      	ldr	r3, [r1, #16]
 801aea8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801aeac:	4293      	cmp	r3, r2
 801aeae:	bfb8      	it	lt
 801aeb0:	4613      	movlt	r3, r2
 801aeb2:	6033      	str	r3, [r6, #0]
 801aeb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801aeb8:	4607      	mov	r7, r0
 801aeba:	460c      	mov	r4, r1
 801aebc:	b10a      	cbz	r2, 801aec2 <_printf_common+0x26>
 801aebe:	3301      	adds	r3, #1
 801aec0:	6033      	str	r3, [r6, #0]
 801aec2:	6823      	ldr	r3, [r4, #0]
 801aec4:	0699      	lsls	r1, r3, #26
 801aec6:	bf42      	ittt	mi
 801aec8:	6833      	ldrmi	r3, [r6, #0]
 801aeca:	3302      	addmi	r3, #2
 801aecc:	6033      	strmi	r3, [r6, #0]
 801aece:	6825      	ldr	r5, [r4, #0]
 801aed0:	f015 0506 	ands.w	r5, r5, #6
 801aed4:	d106      	bne.n	801aee4 <_printf_common+0x48>
 801aed6:	f104 0a19 	add.w	sl, r4, #25
 801aeda:	68e3      	ldr	r3, [r4, #12]
 801aedc:	6832      	ldr	r2, [r6, #0]
 801aede:	1a9b      	subs	r3, r3, r2
 801aee0:	42ab      	cmp	r3, r5
 801aee2:	dc26      	bgt.n	801af32 <_printf_common+0x96>
 801aee4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801aee8:	1e13      	subs	r3, r2, #0
 801aeea:	6822      	ldr	r2, [r4, #0]
 801aeec:	bf18      	it	ne
 801aeee:	2301      	movne	r3, #1
 801aef0:	0692      	lsls	r2, r2, #26
 801aef2:	d42b      	bmi.n	801af4c <_printf_common+0xb0>
 801aef4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801aef8:	4649      	mov	r1, r9
 801aefa:	4638      	mov	r0, r7
 801aefc:	47c0      	blx	r8
 801aefe:	3001      	adds	r0, #1
 801af00:	d01e      	beq.n	801af40 <_printf_common+0xa4>
 801af02:	6823      	ldr	r3, [r4, #0]
 801af04:	68e5      	ldr	r5, [r4, #12]
 801af06:	6832      	ldr	r2, [r6, #0]
 801af08:	f003 0306 	and.w	r3, r3, #6
 801af0c:	2b04      	cmp	r3, #4
 801af0e:	bf08      	it	eq
 801af10:	1aad      	subeq	r5, r5, r2
 801af12:	68a3      	ldr	r3, [r4, #8]
 801af14:	6922      	ldr	r2, [r4, #16]
 801af16:	bf0c      	ite	eq
 801af18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801af1c:	2500      	movne	r5, #0
 801af1e:	4293      	cmp	r3, r2
 801af20:	bfc4      	itt	gt
 801af22:	1a9b      	subgt	r3, r3, r2
 801af24:	18ed      	addgt	r5, r5, r3
 801af26:	2600      	movs	r6, #0
 801af28:	341a      	adds	r4, #26
 801af2a:	42b5      	cmp	r5, r6
 801af2c:	d11a      	bne.n	801af64 <_printf_common+0xc8>
 801af2e:	2000      	movs	r0, #0
 801af30:	e008      	b.n	801af44 <_printf_common+0xa8>
 801af32:	2301      	movs	r3, #1
 801af34:	4652      	mov	r2, sl
 801af36:	4649      	mov	r1, r9
 801af38:	4638      	mov	r0, r7
 801af3a:	47c0      	blx	r8
 801af3c:	3001      	adds	r0, #1
 801af3e:	d103      	bne.n	801af48 <_printf_common+0xac>
 801af40:	f04f 30ff 	mov.w	r0, #4294967295
 801af44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801af48:	3501      	adds	r5, #1
 801af4a:	e7c6      	b.n	801aeda <_printf_common+0x3e>
 801af4c:	18e1      	adds	r1, r4, r3
 801af4e:	1c5a      	adds	r2, r3, #1
 801af50:	2030      	movs	r0, #48	; 0x30
 801af52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801af56:	4422      	add	r2, r4
 801af58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801af5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801af60:	3302      	adds	r3, #2
 801af62:	e7c7      	b.n	801aef4 <_printf_common+0x58>
 801af64:	2301      	movs	r3, #1
 801af66:	4622      	mov	r2, r4
 801af68:	4649      	mov	r1, r9
 801af6a:	4638      	mov	r0, r7
 801af6c:	47c0      	blx	r8
 801af6e:	3001      	adds	r0, #1
 801af70:	d0e6      	beq.n	801af40 <_printf_common+0xa4>
 801af72:	3601      	adds	r6, #1
 801af74:	e7d9      	b.n	801af2a <_printf_common+0x8e>
	...

0801af78 <_printf_i>:
 801af78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801af7c:	460c      	mov	r4, r1
 801af7e:	4691      	mov	r9, r2
 801af80:	7e27      	ldrb	r7, [r4, #24]
 801af82:	990c      	ldr	r1, [sp, #48]	; 0x30
 801af84:	2f78      	cmp	r7, #120	; 0x78
 801af86:	4680      	mov	r8, r0
 801af88:	469a      	mov	sl, r3
 801af8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801af8e:	d807      	bhi.n	801afa0 <_printf_i+0x28>
 801af90:	2f62      	cmp	r7, #98	; 0x62
 801af92:	d80a      	bhi.n	801afaa <_printf_i+0x32>
 801af94:	2f00      	cmp	r7, #0
 801af96:	f000 80d8 	beq.w	801b14a <_printf_i+0x1d2>
 801af9a:	2f58      	cmp	r7, #88	; 0x58
 801af9c:	f000 80a3 	beq.w	801b0e6 <_printf_i+0x16e>
 801afa0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801afa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801afa8:	e03a      	b.n	801b020 <_printf_i+0xa8>
 801afaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801afae:	2b15      	cmp	r3, #21
 801afb0:	d8f6      	bhi.n	801afa0 <_printf_i+0x28>
 801afb2:	a001      	add	r0, pc, #4	; (adr r0, 801afb8 <_printf_i+0x40>)
 801afb4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801afb8:	0801b011 	.word	0x0801b011
 801afbc:	0801b025 	.word	0x0801b025
 801afc0:	0801afa1 	.word	0x0801afa1
 801afc4:	0801afa1 	.word	0x0801afa1
 801afc8:	0801afa1 	.word	0x0801afa1
 801afcc:	0801afa1 	.word	0x0801afa1
 801afd0:	0801b025 	.word	0x0801b025
 801afd4:	0801afa1 	.word	0x0801afa1
 801afd8:	0801afa1 	.word	0x0801afa1
 801afdc:	0801afa1 	.word	0x0801afa1
 801afe0:	0801afa1 	.word	0x0801afa1
 801afe4:	0801b131 	.word	0x0801b131
 801afe8:	0801b055 	.word	0x0801b055
 801afec:	0801b113 	.word	0x0801b113
 801aff0:	0801afa1 	.word	0x0801afa1
 801aff4:	0801afa1 	.word	0x0801afa1
 801aff8:	0801b153 	.word	0x0801b153
 801affc:	0801afa1 	.word	0x0801afa1
 801b000:	0801b055 	.word	0x0801b055
 801b004:	0801afa1 	.word	0x0801afa1
 801b008:	0801afa1 	.word	0x0801afa1
 801b00c:	0801b11b 	.word	0x0801b11b
 801b010:	680b      	ldr	r3, [r1, #0]
 801b012:	1d1a      	adds	r2, r3, #4
 801b014:	681b      	ldr	r3, [r3, #0]
 801b016:	600a      	str	r2, [r1, #0]
 801b018:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b01c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b020:	2301      	movs	r3, #1
 801b022:	e0a3      	b.n	801b16c <_printf_i+0x1f4>
 801b024:	6825      	ldr	r5, [r4, #0]
 801b026:	6808      	ldr	r0, [r1, #0]
 801b028:	062e      	lsls	r6, r5, #24
 801b02a:	f100 0304 	add.w	r3, r0, #4
 801b02e:	d50a      	bpl.n	801b046 <_printf_i+0xce>
 801b030:	6805      	ldr	r5, [r0, #0]
 801b032:	600b      	str	r3, [r1, #0]
 801b034:	2d00      	cmp	r5, #0
 801b036:	da03      	bge.n	801b040 <_printf_i+0xc8>
 801b038:	232d      	movs	r3, #45	; 0x2d
 801b03a:	426d      	negs	r5, r5
 801b03c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b040:	485e      	ldr	r0, [pc, #376]	; (801b1bc <_printf_i+0x244>)
 801b042:	230a      	movs	r3, #10
 801b044:	e019      	b.n	801b07a <_printf_i+0x102>
 801b046:	f015 0f40 	tst.w	r5, #64	; 0x40
 801b04a:	6805      	ldr	r5, [r0, #0]
 801b04c:	600b      	str	r3, [r1, #0]
 801b04e:	bf18      	it	ne
 801b050:	b22d      	sxthne	r5, r5
 801b052:	e7ef      	b.n	801b034 <_printf_i+0xbc>
 801b054:	680b      	ldr	r3, [r1, #0]
 801b056:	6825      	ldr	r5, [r4, #0]
 801b058:	1d18      	adds	r0, r3, #4
 801b05a:	6008      	str	r0, [r1, #0]
 801b05c:	0628      	lsls	r0, r5, #24
 801b05e:	d501      	bpl.n	801b064 <_printf_i+0xec>
 801b060:	681d      	ldr	r5, [r3, #0]
 801b062:	e002      	b.n	801b06a <_printf_i+0xf2>
 801b064:	0669      	lsls	r1, r5, #25
 801b066:	d5fb      	bpl.n	801b060 <_printf_i+0xe8>
 801b068:	881d      	ldrh	r5, [r3, #0]
 801b06a:	4854      	ldr	r0, [pc, #336]	; (801b1bc <_printf_i+0x244>)
 801b06c:	2f6f      	cmp	r7, #111	; 0x6f
 801b06e:	bf0c      	ite	eq
 801b070:	2308      	moveq	r3, #8
 801b072:	230a      	movne	r3, #10
 801b074:	2100      	movs	r1, #0
 801b076:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b07a:	6866      	ldr	r6, [r4, #4]
 801b07c:	60a6      	str	r6, [r4, #8]
 801b07e:	2e00      	cmp	r6, #0
 801b080:	bfa2      	ittt	ge
 801b082:	6821      	ldrge	r1, [r4, #0]
 801b084:	f021 0104 	bicge.w	r1, r1, #4
 801b088:	6021      	strge	r1, [r4, #0]
 801b08a:	b90d      	cbnz	r5, 801b090 <_printf_i+0x118>
 801b08c:	2e00      	cmp	r6, #0
 801b08e:	d04d      	beq.n	801b12c <_printf_i+0x1b4>
 801b090:	4616      	mov	r6, r2
 801b092:	fbb5 f1f3 	udiv	r1, r5, r3
 801b096:	fb03 5711 	mls	r7, r3, r1, r5
 801b09a:	5dc7      	ldrb	r7, [r0, r7]
 801b09c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b0a0:	462f      	mov	r7, r5
 801b0a2:	42bb      	cmp	r3, r7
 801b0a4:	460d      	mov	r5, r1
 801b0a6:	d9f4      	bls.n	801b092 <_printf_i+0x11a>
 801b0a8:	2b08      	cmp	r3, #8
 801b0aa:	d10b      	bne.n	801b0c4 <_printf_i+0x14c>
 801b0ac:	6823      	ldr	r3, [r4, #0]
 801b0ae:	07df      	lsls	r7, r3, #31
 801b0b0:	d508      	bpl.n	801b0c4 <_printf_i+0x14c>
 801b0b2:	6923      	ldr	r3, [r4, #16]
 801b0b4:	6861      	ldr	r1, [r4, #4]
 801b0b6:	4299      	cmp	r1, r3
 801b0b8:	bfde      	ittt	le
 801b0ba:	2330      	movle	r3, #48	; 0x30
 801b0bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b0c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b0c4:	1b92      	subs	r2, r2, r6
 801b0c6:	6122      	str	r2, [r4, #16]
 801b0c8:	f8cd a000 	str.w	sl, [sp]
 801b0cc:	464b      	mov	r3, r9
 801b0ce:	aa03      	add	r2, sp, #12
 801b0d0:	4621      	mov	r1, r4
 801b0d2:	4640      	mov	r0, r8
 801b0d4:	f7ff fee2 	bl	801ae9c <_printf_common>
 801b0d8:	3001      	adds	r0, #1
 801b0da:	d14c      	bne.n	801b176 <_printf_i+0x1fe>
 801b0dc:	f04f 30ff 	mov.w	r0, #4294967295
 801b0e0:	b004      	add	sp, #16
 801b0e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b0e6:	4835      	ldr	r0, [pc, #212]	; (801b1bc <_printf_i+0x244>)
 801b0e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b0ec:	6823      	ldr	r3, [r4, #0]
 801b0ee:	680e      	ldr	r6, [r1, #0]
 801b0f0:	061f      	lsls	r7, r3, #24
 801b0f2:	f856 5b04 	ldr.w	r5, [r6], #4
 801b0f6:	600e      	str	r6, [r1, #0]
 801b0f8:	d514      	bpl.n	801b124 <_printf_i+0x1ac>
 801b0fa:	07d9      	lsls	r1, r3, #31
 801b0fc:	bf44      	itt	mi
 801b0fe:	f043 0320 	orrmi.w	r3, r3, #32
 801b102:	6023      	strmi	r3, [r4, #0]
 801b104:	b91d      	cbnz	r5, 801b10e <_printf_i+0x196>
 801b106:	6823      	ldr	r3, [r4, #0]
 801b108:	f023 0320 	bic.w	r3, r3, #32
 801b10c:	6023      	str	r3, [r4, #0]
 801b10e:	2310      	movs	r3, #16
 801b110:	e7b0      	b.n	801b074 <_printf_i+0xfc>
 801b112:	6823      	ldr	r3, [r4, #0]
 801b114:	f043 0320 	orr.w	r3, r3, #32
 801b118:	6023      	str	r3, [r4, #0]
 801b11a:	2378      	movs	r3, #120	; 0x78
 801b11c:	4828      	ldr	r0, [pc, #160]	; (801b1c0 <_printf_i+0x248>)
 801b11e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b122:	e7e3      	b.n	801b0ec <_printf_i+0x174>
 801b124:	065e      	lsls	r6, r3, #25
 801b126:	bf48      	it	mi
 801b128:	b2ad      	uxthmi	r5, r5
 801b12a:	e7e6      	b.n	801b0fa <_printf_i+0x182>
 801b12c:	4616      	mov	r6, r2
 801b12e:	e7bb      	b.n	801b0a8 <_printf_i+0x130>
 801b130:	680b      	ldr	r3, [r1, #0]
 801b132:	6826      	ldr	r6, [r4, #0]
 801b134:	6960      	ldr	r0, [r4, #20]
 801b136:	1d1d      	adds	r5, r3, #4
 801b138:	600d      	str	r5, [r1, #0]
 801b13a:	0635      	lsls	r5, r6, #24
 801b13c:	681b      	ldr	r3, [r3, #0]
 801b13e:	d501      	bpl.n	801b144 <_printf_i+0x1cc>
 801b140:	6018      	str	r0, [r3, #0]
 801b142:	e002      	b.n	801b14a <_printf_i+0x1d2>
 801b144:	0671      	lsls	r1, r6, #25
 801b146:	d5fb      	bpl.n	801b140 <_printf_i+0x1c8>
 801b148:	8018      	strh	r0, [r3, #0]
 801b14a:	2300      	movs	r3, #0
 801b14c:	6123      	str	r3, [r4, #16]
 801b14e:	4616      	mov	r6, r2
 801b150:	e7ba      	b.n	801b0c8 <_printf_i+0x150>
 801b152:	680b      	ldr	r3, [r1, #0]
 801b154:	1d1a      	adds	r2, r3, #4
 801b156:	600a      	str	r2, [r1, #0]
 801b158:	681e      	ldr	r6, [r3, #0]
 801b15a:	6862      	ldr	r2, [r4, #4]
 801b15c:	2100      	movs	r1, #0
 801b15e:	4630      	mov	r0, r6
 801b160:	f7e5 f84e 	bl	8000200 <memchr>
 801b164:	b108      	cbz	r0, 801b16a <_printf_i+0x1f2>
 801b166:	1b80      	subs	r0, r0, r6
 801b168:	6060      	str	r0, [r4, #4]
 801b16a:	6863      	ldr	r3, [r4, #4]
 801b16c:	6123      	str	r3, [r4, #16]
 801b16e:	2300      	movs	r3, #0
 801b170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b174:	e7a8      	b.n	801b0c8 <_printf_i+0x150>
 801b176:	6923      	ldr	r3, [r4, #16]
 801b178:	4632      	mov	r2, r6
 801b17a:	4649      	mov	r1, r9
 801b17c:	4640      	mov	r0, r8
 801b17e:	47d0      	blx	sl
 801b180:	3001      	adds	r0, #1
 801b182:	d0ab      	beq.n	801b0dc <_printf_i+0x164>
 801b184:	6823      	ldr	r3, [r4, #0]
 801b186:	079b      	lsls	r3, r3, #30
 801b188:	d413      	bmi.n	801b1b2 <_printf_i+0x23a>
 801b18a:	68e0      	ldr	r0, [r4, #12]
 801b18c:	9b03      	ldr	r3, [sp, #12]
 801b18e:	4298      	cmp	r0, r3
 801b190:	bfb8      	it	lt
 801b192:	4618      	movlt	r0, r3
 801b194:	e7a4      	b.n	801b0e0 <_printf_i+0x168>
 801b196:	2301      	movs	r3, #1
 801b198:	4632      	mov	r2, r6
 801b19a:	4649      	mov	r1, r9
 801b19c:	4640      	mov	r0, r8
 801b19e:	47d0      	blx	sl
 801b1a0:	3001      	adds	r0, #1
 801b1a2:	d09b      	beq.n	801b0dc <_printf_i+0x164>
 801b1a4:	3501      	adds	r5, #1
 801b1a6:	68e3      	ldr	r3, [r4, #12]
 801b1a8:	9903      	ldr	r1, [sp, #12]
 801b1aa:	1a5b      	subs	r3, r3, r1
 801b1ac:	42ab      	cmp	r3, r5
 801b1ae:	dcf2      	bgt.n	801b196 <_printf_i+0x21e>
 801b1b0:	e7eb      	b.n	801b18a <_printf_i+0x212>
 801b1b2:	2500      	movs	r5, #0
 801b1b4:	f104 0619 	add.w	r6, r4, #25
 801b1b8:	e7f5      	b.n	801b1a6 <_printf_i+0x22e>
 801b1ba:	bf00      	nop
 801b1bc:	080218c0 	.word	0x080218c0
 801b1c0:	080218d1 	.word	0x080218d1

0801b1c4 <_scanf_float>:
 801b1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1c8:	b087      	sub	sp, #28
 801b1ca:	4617      	mov	r7, r2
 801b1cc:	9303      	str	r3, [sp, #12]
 801b1ce:	688b      	ldr	r3, [r1, #8]
 801b1d0:	1e5a      	subs	r2, r3, #1
 801b1d2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801b1d6:	bf83      	ittte	hi
 801b1d8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801b1dc:	195b      	addhi	r3, r3, r5
 801b1de:	9302      	strhi	r3, [sp, #8]
 801b1e0:	2300      	movls	r3, #0
 801b1e2:	bf86      	itte	hi
 801b1e4:	f240 135d 	movwhi	r3, #349	; 0x15d
 801b1e8:	608b      	strhi	r3, [r1, #8]
 801b1ea:	9302      	strls	r3, [sp, #8]
 801b1ec:	680b      	ldr	r3, [r1, #0]
 801b1ee:	468b      	mov	fp, r1
 801b1f0:	2500      	movs	r5, #0
 801b1f2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801b1f6:	f84b 3b1c 	str.w	r3, [fp], #28
 801b1fa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801b1fe:	4680      	mov	r8, r0
 801b200:	460c      	mov	r4, r1
 801b202:	465e      	mov	r6, fp
 801b204:	46aa      	mov	sl, r5
 801b206:	46a9      	mov	r9, r5
 801b208:	9501      	str	r5, [sp, #4]
 801b20a:	68a2      	ldr	r2, [r4, #8]
 801b20c:	b152      	cbz	r2, 801b224 <_scanf_float+0x60>
 801b20e:	683b      	ldr	r3, [r7, #0]
 801b210:	781b      	ldrb	r3, [r3, #0]
 801b212:	2b4e      	cmp	r3, #78	; 0x4e
 801b214:	d864      	bhi.n	801b2e0 <_scanf_float+0x11c>
 801b216:	2b40      	cmp	r3, #64	; 0x40
 801b218:	d83c      	bhi.n	801b294 <_scanf_float+0xd0>
 801b21a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801b21e:	b2c8      	uxtb	r0, r1
 801b220:	280e      	cmp	r0, #14
 801b222:	d93a      	bls.n	801b29a <_scanf_float+0xd6>
 801b224:	f1b9 0f00 	cmp.w	r9, #0
 801b228:	d003      	beq.n	801b232 <_scanf_float+0x6e>
 801b22a:	6823      	ldr	r3, [r4, #0]
 801b22c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b230:	6023      	str	r3, [r4, #0]
 801b232:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b236:	f1ba 0f01 	cmp.w	sl, #1
 801b23a:	f200 8113 	bhi.w	801b464 <_scanf_float+0x2a0>
 801b23e:	455e      	cmp	r6, fp
 801b240:	f200 8105 	bhi.w	801b44e <_scanf_float+0x28a>
 801b244:	2501      	movs	r5, #1
 801b246:	4628      	mov	r0, r5
 801b248:	b007      	add	sp, #28
 801b24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b24e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801b252:	2a0d      	cmp	r2, #13
 801b254:	d8e6      	bhi.n	801b224 <_scanf_float+0x60>
 801b256:	a101      	add	r1, pc, #4	; (adr r1, 801b25c <_scanf_float+0x98>)
 801b258:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801b25c:	0801b39b 	.word	0x0801b39b
 801b260:	0801b225 	.word	0x0801b225
 801b264:	0801b225 	.word	0x0801b225
 801b268:	0801b225 	.word	0x0801b225
 801b26c:	0801b3fb 	.word	0x0801b3fb
 801b270:	0801b3d3 	.word	0x0801b3d3
 801b274:	0801b225 	.word	0x0801b225
 801b278:	0801b225 	.word	0x0801b225
 801b27c:	0801b3a9 	.word	0x0801b3a9
 801b280:	0801b225 	.word	0x0801b225
 801b284:	0801b225 	.word	0x0801b225
 801b288:	0801b225 	.word	0x0801b225
 801b28c:	0801b225 	.word	0x0801b225
 801b290:	0801b361 	.word	0x0801b361
 801b294:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801b298:	e7db      	b.n	801b252 <_scanf_float+0x8e>
 801b29a:	290e      	cmp	r1, #14
 801b29c:	d8c2      	bhi.n	801b224 <_scanf_float+0x60>
 801b29e:	a001      	add	r0, pc, #4	; (adr r0, 801b2a4 <_scanf_float+0xe0>)
 801b2a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801b2a4:	0801b353 	.word	0x0801b353
 801b2a8:	0801b225 	.word	0x0801b225
 801b2ac:	0801b353 	.word	0x0801b353
 801b2b0:	0801b3e7 	.word	0x0801b3e7
 801b2b4:	0801b225 	.word	0x0801b225
 801b2b8:	0801b301 	.word	0x0801b301
 801b2bc:	0801b33d 	.word	0x0801b33d
 801b2c0:	0801b33d 	.word	0x0801b33d
 801b2c4:	0801b33d 	.word	0x0801b33d
 801b2c8:	0801b33d 	.word	0x0801b33d
 801b2cc:	0801b33d 	.word	0x0801b33d
 801b2d0:	0801b33d 	.word	0x0801b33d
 801b2d4:	0801b33d 	.word	0x0801b33d
 801b2d8:	0801b33d 	.word	0x0801b33d
 801b2dc:	0801b33d 	.word	0x0801b33d
 801b2e0:	2b6e      	cmp	r3, #110	; 0x6e
 801b2e2:	d809      	bhi.n	801b2f8 <_scanf_float+0x134>
 801b2e4:	2b60      	cmp	r3, #96	; 0x60
 801b2e6:	d8b2      	bhi.n	801b24e <_scanf_float+0x8a>
 801b2e8:	2b54      	cmp	r3, #84	; 0x54
 801b2ea:	d077      	beq.n	801b3dc <_scanf_float+0x218>
 801b2ec:	2b59      	cmp	r3, #89	; 0x59
 801b2ee:	d199      	bne.n	801b224 <_scanf_float+0x60>
 801b2f0:	2d07      	cmp	r5, #7
 801b2f2:	d197      	bne.n	801b224 <_scanf_float+0x60>
 801b2f4:	2508      	movs	r5, #8
 801b2f6:	e029      	b.n	801b34c <_scanf_float+0x188>
 801b2f8:	2b74      	cmp	r3, #116	; 0x74
 801b2fa:	d06f      	beq.n	801b3dc <_scanf_float+0x218>
 801b2fc:	2b79      	cmp	r3, #121	; 0x79
 801b2fe:	e7f6      	b.n	801b2ee <_scanf_float+0x12a>
 801b300:	6821      	ldr	r1, [r4, #0]
 801b302:	05c8      	lsls	r0, r1, #23
 801b304:	d51a      	bpl.n	801b33c <_scanf_float+0x178>
 801b306:	9b02      	ldr	r3, [sp, #8]
 801b308:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801b30c:	6021      	str	r1, [r4, #0]
 801b30e:	f109 0901 	add.w	r9, r9, #1
 801b312:	b11b      	cbz	r3, 801b31c <_scanf_float+0x158>
 801b314:	3b01      	subs	r3, #1
 801b316:	3201      	adds	r2, #1
 801b318:	9302      	str	r3, [sp, #8]
 801b31a:	60a2      	str	r2, [r4, #8]
 801b31c:	68a3      	ldr	r3, [r4, #8]
 801b31e:	3b01      	subs	r3, #1
 801b320:	60a3      	str	r3, [r4, #8]
 801b322:	6923      	ldr	r3, [r4, #16]
 801b324:	3301      	adds	r3, #1
 801b326:	6123      	str	r3, [r4, #16]
 801b328:	687b      	ldr	r3, [r7, #4]
 801b32a:	3b01      	subs	r3, #1
 801b32c:	2b00      	cmp	r3, #0
 801b32e:	607b      	str	r3, [r7, #4]
 801b330:	f340 8084 	ble.w	801b43c <_scanf_float+0x278>
 801b334:	683b      	ldr	r3, [r7, #0]
 801b336:	3301      	adds	r3, #1
 801b338:	603b      	str	r3, [r7, #0]
 801b33a:	e766      	b.n	801b20a <_scanf_float+0x46>
 801b33c:	eb1a 0f05 	cmn.w	sl, r5
 801b340:	f47f af70 	bne.w	801b224 <_scanf_float+0x60>
 801b344:	6822      	ldr	r2, [r4, #0]
 801b346:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801b34a:	6022      	str	r2, [r4, #0]
 801b34c:	f806 3b01 	strb.w	r3, [r6], #1
 801b350:	e7e4      	b.n	801b31c <_scanf_float+0x158>
 801b352:	6822      	ldr	r2, [r4, #0]
 801b354:	0610      	lsls	r0, r2, #24
 801b356:	f57f af65 	bpl.w	801b224 <_scanf_float+0x60>
 801b35a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801b35e:	e7f4      	b.n	801b34a <_scanf_float+0x186>
 801b360:	f1ba 0f00 	cmp.w	sl, #0
 801b364:	d10e      	bne.n	801b384 <_scanf_float+0x1c0>
 801b366:	f1b9 0f00 	cmp.w	r9, #0
 801b36a:	d10e      	bne.n	801b38a <_scanf_float+0x1c6>
 801b36c:	6822      	ldr	r2, [r4, #0]
 801b36e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b372:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b376:	d108      	bne.n	801b38a <_scanf_float+0x1c6>
 801b378:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b37c:	6022      	str	r2, [r4, #0]
 801b37e:	f04f 0a01 	mov.w	sl, #1
 801b382:	e7e3      	b.n	801b34c <_scanf_float+0x188>
 801b384:	f1ba 0f02 	cmp.w	sl, #2
 801b388:	d055      	beq.n	801b436 <_scanf_float+0x272>
 801b38a:	2d01      	cmp	r5, #1
 801b38c:	d002      	beq.n	801b394 <_scanf_float+0x1d0>
 801b38e:	2d04      	cmp	r5, #4
 801b390:	f47f af48 	bne.w	801b224 <_scanf_float+0x60>
 801b394:	3501      	adds	r5, #1
 801b396:	b2ed      	uxtb	r5, r5
 801b398:	e7d8      	b.n	801b34c <_scanf_float+0x188>
 801b39a:	f1ba 0f01 	cmp.w	sl, #1
 801b39e:	f47f af41 	bne.w	801b224 <_scanf_float+0x60>
 801b3a2:	f04f 0a02 	mov.w	sl, #2
 801b3a6:	e7d1      	b.n	801b34c <_scanf_float+0x188>
 801b3a8:	b97d      	cbnz	r5, 801b3ca <_scanf_float+0x206>
 801b3aa:	f1b9 0f00 	cmp.w	r9, #0
 801b3ae:	f47f af3c 	bne.w	801b22a <_scanf_float+0x66>
 801b3b2:	6822      	ldr	r2, [r4, #0]
 801b3b4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b3b8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b3bc:	f47f af39 	bne.w	801b232 <_scanf_float+0x6e>
 801b3c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b3c4:	6022      	str	r2, [r4, #0]
 801b3c6:	2501      	movs	r5, #1
 801b3c8:	e7c0      	b.n	801b34c <_scanf_float+0x188>
 801b3ca:	2d03      	cmp	r5, #3
 801b3cc:	d0e2      	beq.n	801b394 <_scanf_float+0x1d0>
 801b3ce:	2d05      	cmp	r5, #5
 801b3d0:	e7de      	b.n	801b390 <_scanf_float+0x1cc>
 801b3d2:	2d02      	cmp	r5, #2
 801b3d4:	f47f af26 	bne.w	801b224 <_scanf_float+0x60>
 801b3d8:	2503      	movs	r5, #3
 801b3da:	e7b7      	b.n	801b34c <_scanf_float+0x188>
 801b3dc:	2d06      	cmp	r5, #6
 801b3de:	f47f af21 	bne.w	801b224 <_scanf_float+0x60>
 801b3e2:	2507      	movs	r5, #7
 801b3e4:	e7b2      	b.n	801b34c <_scanf_float+0x188>
 801b3e6:	6822      	ldr	r2, [r4, #0]
 801b3e8:	0591      	lsls	r1, r2, #22
 801b3ea:	f57f af1b 	bpl.w	801b224 <_scanf_float+0x60>
 801b3ee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801b3f2:	6022      	str	r2, [r4, #0]
 801b3f4:	f8cd 9004 	str.w	r9, [sp, #4]
 801b3f8:	e7a8      	b.n	801b34c <_scanf_float+0x188>
 801b3fa:	6822      	ldr	r2, [r4, #0]
 801b3fc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801b400:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801b404:	d006      	beq.n	801b414 <_scanf_float+0x250>
 801b406:	0550      	lsls	r0, r2, #21
 801b408:	f57f af0c 	bpl.w	801b224 <_scanf_float+0x60>
 801b40c:	f1b9 0f00 	cmp.w	r9, #0
 801b410:	f43f af0f 	beq.w	801b232 <_scanf_float+0x6e>
 801b414:	0591      	lsls	r1, r2, #22
 801b416:	bf58      	it	pl
 801b418:	9901      	ldrpl	r1, [sp, #4]
 801b41a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b41e:	bf58      	it	pl
 801b420:	eba9 0101 	subpl.w	r1, r9, r1
 801b424:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801b428:	bf58      	it	pl
 801b42a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801b42e:	6022      	str	r2, [r4, #0]
 801b430:	f04f 0900 	mov.w	r9, #0
 801b434:	e78a      	b.n	801b34c <_scanf_float+0x188>
 801b436:	f04f 0a03 	mov.w	sl, #3
 801b43a:	e787      	b.n	801b34c <_scanf_float+0x188>
 801b43c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801b440:	4639      	mov	r1, r7
 801b442:	4640      	mov	r0, r8
 801b444:	4798      	blx	r3
 801b446:	2800      	cmp	r0, #0
 801b448:	f43f aedf 	beq.w	801b20a <_scanf_float+0x46>
 801b44c:	e6ea      	b.n	801b224 <_scanf_float+0x60>
 801b44e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b452:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b456:	463a      	mov	r2, r7
 801b458:	4640      	mov	r0, r8
 801b45a:	4798      	blx	r3
 801b45c:	6923      	ldr	r3, [r4, #16]
 801b45e:	3b01      	subs	r3, #1
 801b460:	6123      	str	r3, [r4, #16]
 801b462:	e6ec      	b.n	801b23e <_scanf_float+0x7a>
 801b464:	1e6b      	subs	r3, r5, #1
 801b466:	2b06      	cmp	r3, #6
 801b468:	d825      	bhi.n	801b4b6 <_scanf_float+0x2f2>
 801b46a:	2d02      	cmp	r5, #2
 801b46c:	d836      	bhi.n	801b4dc <_scanf_float+0x318>
 801b46e:	455e      	cmp	r6, fp
 801b470:	f67f aee8 	bls.w	801b244 <_scanf_float+0x80>
 801b474:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b478:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b47c:	463a      	mov	r2, r7
 801b47e:	4640      	mov	r0, r8
 801b480:	4798      	blx	r3
 801b482:	6923      	ldr	r3, [r4, #16]
 801b484:	3b01      	subs	r3, #1
 801b486:	6123      	str	r3, [r4, #16]
 801b488:	e7f1      	b.n	801b46e <_scanf_float+0x2aa>
 801b48a:	9802      	ldr	r0, [sp, #8]
 801b48c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b490:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801b494:	9002      	str	r0, [sp, #8]
 801b496:	463a      	mov	r2, r7
 801b498:	4640      	mov	r0, r8
 801b49a:	4798      	blx	r3
 801b49c:	6923      	ldr	r3, [r4, #16]
 801b49e:	3b01      	subs	r3, #1
 801b4a0:	6123      	str	r3, [r4, #16]
 801b4a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b4a6:	fa5f fa8a 	uxtb.w	sl, sl
 801b4aa:	f1ba 0f02 	cmp.w	sl, #2
 801b4ae:	d1ec      	bne.n	801b48a <_scanf_float+0x2c6>
 801b4b0:	3d03      	subs	r5, #3
 801b4b2:	b2ed      	uxtb	r5, r5
 801b4b4:	1b76      	subs	r6, r6, r5
 801b4b6:	6823      	ldr	r3, [r4, #0]
 801b4b8:	05da      	lsls	r2, r3, #23
 801b4ba:	d52f      	bpl.n	801b51c <_scanf_float+0x358>
 801b4bc:	055b      	lsls	r3, r3, #21
 801b4be:	d510      	bpl.n	801b4e2 <_scanf_float+0x31e>
 801b4c0:	455e      	cmp	r6, fp
 801b4c2:	f67f aebf 	bls.w	801b244 <_scanf_float+0x80>
 801b4c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b4ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b4ce:	463a      	mov	r2, r7
 801b4d0:	4640      	mov	r0, r8
 801b4d2:	4798      	blx	r3
 801b4d4:	6923      	ldr	r3, [r4, #16]
 801b4d6:	3b01      	subs	r3, #1
 801b4d8:	6123      	str	r3, [r4, #16]
 801b4da:	e7f1      	b.n	801b4c0 <_scanf_float+0x2fc>
 801b4dc:	46aa      	mov	sl, r5
 801b4de:	9602      	str	r6, [sp, #8]
 801b4e0:	e7df      	b.n	801b4a2 <_scanf_float+0x2de>
 801b4e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801b4e6:	6923      	ldr	r3, [r4, #16]
 801b4e8:	2965      	cmp	r1, #101	; 0x65
 801b4ea:	f103 33ff 	add.w	r3, r3, #4294967295
 801b4ee:	f106 35ff 	add.w	r5, r6, #4294967295
 801b4f2:	6123      	str	r3, [r4, #16]
 801b4f4:	d00c      	beq.n	801b510 <_scanf_float+0x34c>
 801b4f6:	2945      	cmp	r1, #69	; 0x45
 801b4f8:	d00a      	beq.n	801b510 <_scanf_float+0x34c>
 801b4fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b4fe:	463a      	mov	r2, r7
 801b500:	4640      	mov	r0, r8
 801b502:	4798      	blx	r3
 801b504:	6923      	ldr	r3, [r4, #16]
 801b506:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801b50a:	3b01      	subs	r3, #1
 801b50c:	1eb5      	subs	r5, r6, #2
 801b50e:	6123      	str	r3, [r4, #16]
 801b510:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b514:	463a      	mov	r2, r7
 801b516:	4640      	mov	r0, r8
 801b518:	4798      	blx	r3
 801b51a:	462e      	mov	r6, r5
 801b51c:	6825      	ldr	r5, [r4, #0]
 801b51e:	f015 0510 	ands.w	r5, r5, #16
 801b522:	d158      	bne.n	801b5d6 <_scanf_float+0x412>
 801b524:	7035      	strb	r5, [r6, #0]
 801b526:	6823      	ldr	r3, [r4, #0]
 801b528:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801b52c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b530:	d11c      	bne.n	801b56c <_scanf_float+0x3a8>
 801b532:	9b01      	ldr	r3, [sp, #4]
 801b534:	454b      	cmp	r3, r9
 801b536:	eba3 0209 	sub.w	r2, r3, r9
 801b53a:	d124      	bne.n	801b586 <_scanf_float+0x3c2>
 801b53c:	2200      	movs	r2, #0
 801b53e:	4659      	mov	r1, fp
 801b540:	4640      	mov	r0, r8
 801b542:	f001 f873 	bl	801c62c <_strtod_r>
 801b546:	9b03      	ldr	r3, [sp, #12]
 801b548:	6821      	ldr	r1, [r4, #0]
 801b54a:	681b      	ldr	r3, [r3, #0]
 801b54c:	f011 0f02 	tst.w	r1, #2
 801b550:	ec57 6b10 	vmov	r6, r7, d0
 801b554:	f103 0204 	add.w	r2, r3, #4
 801b558:	d020      	beq.n	801b59c <_scanf_float+0x3d8>
 801b55a:	9903      	ldr	r1, [sp, #12]
 801b55c:	600a      	str	r2, [r1, #0]
 801b55e:	681b      	ldr	r3, [r3, #0]
 801b560:	e9c3 6700 	strd	r6, r7, [r3]
 801b564:	68e3      	ldr	r3, [r4, #12]
 801b566:	3301      	adds	r3, #1
 801b568:	60e3      	str	r3, [r4, #12]
 801b56a:	e66c      	b.n	801b246 <_scanf_float+0x82>
 801b56c:	9b04      	ldr	r3, [sp, #16]
 801b56e:	2b00      	cmp	r3, #0
 801b570:	d0e4      	beq.n	801b53c <_scanf_float+0x378>
 801b572:	9905      	ldr	r1, [sp, #20]
 801b574:	230a      	movs	r3, #10
 801b576:	462a      	mov	r2, r5
 801b578:	3101      	adds	r1, #1
 801b57a:	4640      	mov	r0, r8
 801b57c:	f001 f8e0 	bl	801c740 <_strtol_r>
 801b580:	9b04      	ldr	r3, [sp, #16]
 801b582:	9e05      	ldr	r6, [sp, #20]
 801b584:	1ac2      	subs	r2, r0, r3
 801b586:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801b58a:	429e      	cmp	r6, r3
 801b58c:	bf28      	it	cs
 801b58e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801b592:	4912      	ldr	r1, [pc, #72]	; (801b5dc <_scanf_float+0x418>)
 801b594:	4630      	mov	r0, r6
 801b596:	f000 f977 	bl	801b888 <siprintf>
 801b59a:	e7cf      	b.n	801b53c <_scanf_float+0x378>
 801b59c:	f011 0f04 	tst.w	r1, #4
 801b5a0:	9903      	ldr	r1, [sp, #12]
 801b5a2:	600a      	str	r2, [r1, #0]
 801b5a4:	d1db      	bne.n	801b55e <_scanf_float+0x39a>
 801b5a6:	f8d3 8000 	ldr.w	r8, [r3]
 801b5aa:	ee10 2a10 	vmov	r2, s0
 801b5ae:	ee10 0a10 	vmov	r0, s0
 801b5b2:	463b      	mov	r3, r7
 801b5b4:	4639      	mov	r1, r7
 801b5b6:	f7e5 fac9 	bl	8000b4c <__aeabi_dcmpun>
 801b5ba:	b128      	cbz	r0, 801b5c8 <_scanf_float+0x404>
 801b5bc:	4808      	ldr	r0, [pc, #32]	; (801b5e0 <_scanf_float+0x41c>)
 801b5be:	f000 f919 	bl	801b7f4 <nanf>
 801b5c2:	ed88 0a00 	vstr	s0, [r8]
 801b5c6:	e7cd      	b.n	801b564 <_scanf_float+0x3a0>
 801b5c8:	4630      	mov	r0, r6
 801b5ca:	4639      	mov	r1, r7
 801b5cc:	f7e5 fb1c 	bl	8000c08 <__aeabi_d2f>
 801b5d0:	f8c8 0000 	str.w	r0, [r8]
 801b5d4:	e7c6      	b.n	801b564 <_scanf_float+0x3a0>
 801b5d6:	2500      	movs	r5, #0
 801b5d8:	e635      	b.n	801b246 <_scanf_float+0x82>
 801b5da:	bf00      	nop
 801b5dc:	080218e2 	.word	0x080218e2
 801b5e0:	08021973 	.word	0x08021973

0801b5e4 <iprintf>:
 801b5e4:	b40f      	push	{r0, r1, r2, r3}
 801b5e6:	4b0a      	ldr	r3, [pc, #40]	; (801b610 <iprintf+0x2c>)
 801b5e8:	b513      	push	{r0, r1, r4, lr}
 801b5ea:	681c      	ldr	r4, [r3, #0]
 801b5ec:	b124      	cbz	r4, 801b5f8 <iprintf+0x14>
 801b5ee:	69a3      	ldr	r3, [r4, #24]
 801b5f0:	b913      	cbnz	r3, 801b5f8 <iprintf+0x14>
 801b5f2:	4620      	mov	r0, r4
 801b5f4:	f7fe ffd4 	bl	801a5a0 <__sinit>
 801b5f8:	ab05      	add	r3, sp, #20
 801b5fa:	9a04      	ldr	r2, [sp, #16]
 801b5fc:	68a1      	ldr	r1, [r4, #8]
 801b5fe:	9301      	str	r3, [sp, #4]
 801b600:	4620      	mov	r0, r4
 801b602:	f003 fe09 	bl	801f218 <_vfiprintf_r>
 801b606:	b002      	add	sp, #8
 801b608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b60c:	b004      	add	sp, #16
 801b60e:	4770      	bx	lr
 801b610:	200001f8 	.word	0x200001f8

0801b614 <_puts_r>:
 801b614:	b570      	push	{r4, r5, r6, lr}
 801b616:	460e      	mov	r6, r1
 801b618:	4605      	mov	r5, r0
 801b61a:	b118      	cbz	r0, 801b624 <_puts_r+0x10>
 801b61c:	6983      	ldr	r3, [r0, #24]
 801b61e:	b90b      	cbnz	r3, 801b624 <_puts_r+0x10>
 801b620:	f7fe ffbe 	bl	801a5a0 <__sinit>
 801b624:	69ab      	ldr	r3, [r5, #24]
 801b626:	68ac      	ldr	r4, [r5, #8]
 801b628:	b913      	cbnz	r3, 801b630 <_puts_r+0x1c>
 801b62a:	4628      	mov	r0, r5
 801b62c:	f7fe ffb8 	bl	801a5a0 <__sinit>
 801b630:	4b2c      	ldr	r3, [pc, #176]	; (801b6e4 <_puts_r+0xd0>)
 801b632:	429c      	cmp	r4, r3
 801b634:	d120      	bne.n	801b678 <_puts_r+0x64>
 801b636:	686c      	ldr	r4, [r5, #4]
 801b638:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b63a:	07db      	lsls	r3, r3, #31
 801b63c:	d405      	bmi.n	801b64a <_puts_r+0x36>
 801b63e:	89a3      	ldrh	r3, [r4, #12]
 801b640:	0598      	lsls	r0, r3, #22
 801b642:	d402      	bmi.n	801b64a <_puts_r+0x36>
 801b644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b646:	f7ff f86e 	bl	801a726 <__retarget_lock_acquire_recursive>
 801b64a:	89a3      	ldrh	r3, [r4, #12]
 801b64c:	0719      	lsls	r1, r3, #28
 801b64e:	d51d      	bpl.n	801b68c <_puts_r+0x78>
 801b650:	6923      	ldr	r3, [r4, #16]
 801b652:	b1db      	cbz	r3, 801b68c <_puts_r+0x78>
 801b654:	3e01      	subs	r6, #1
 801b656:	68a3      	ldr	r3, [r4, #8]
 801b658:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b65c:	3b01      	subs	r3, #1
 801b65e:	60a3      	str	r3, [r4, #8]
 801b660:	bb39      	cbnz	r1, 801b6b2 <_puts_r+0x9e>
 801b662:	2b00      	cmp	r3, #0
 801b664:	da38      	bge.n	801b6d8 <_puts_r+0xc4>
 801b666:	4622      	mov	r2, r4
 801b668:	210a      	movs	r1, #10
 801b66a:	4628      	mov	r0, r5
 801b66c:	f001 f936 	bl	801c8dc <__swbuf_r>
 801b670:	3001      	adds	r0, #1
 801b672:	d011      	beq.n	801b698 <_puts_r+0x84>
 801b674:	250a      	movs	r5, #10
 801b676:	e011      	b.n	801b69c <_puts_r+0x88>
 801b678:	4b1b      	ldr	r3, [pc, #108]	; (801b6e8 <_puts_r+0xd4>)
 801b67a:	429c      	cmp	r4, r3
 801b67c:	d101      	bne.n	801b682 <_puts_r+0x6e>
 801b67e:	68ac      	ldr	r4, [r5, #8]
 801b680:	e7da      	b.n	801b638 <_puts_r+0x24>
 801b682:	4b1a      	ldr	r3, [pc, #104]	; (801b6ec <_puts_r+0xd8>)
 801b684:	429c      	cmp	r4, r3
 801b686:	bf08      	it	eq
 801b688:	68ec      	ldreq	r4, [r5, #12]
 801b68a:	e7d5      	b.n	801b638 <_puts_r+0x24>
 801b68c:	4621      	mov	r1, r4
 801b68e:	4628      	mov	r0, r5
 801b690:	f001 f988 	bl	801c9a4 <__swsetup_r>
 801b694:	2800      	cmp	r0, #0
 801b696:	d0dd      	beq.n	801b654 <_puts_r+0x40>
 801b698:	f04f 35ff 	mov.w	r5, #4294967295
 801b69c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b69e:	07da      	lsls	r2, r3, #31
 801b6a0:	d405      	bmi.n	801b6ae <_puts_r+0x9a>
 801b6a2:	89a3      	ldrh	r3, [r4, #12]
 801b6a4:	059b      	lsls	r3, r3, #22
 801b6a6:	d402      	bmi.n	801b6ae <_puts_r+0x9a>
 801b6a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b6aa:	f7ff f83d 	bl	801a728 <__retarget_lock_release_recursive>
 801b6ae:	4628      	mov	r0, r5
 801b6b0:	bd70      	pop	{r4, r5, r6, pc}
 801b6b2:	2b00      	cmp	r3, #0
 801b6b4:	da04      	bge.n	801b6c0 <_puts_r+0xac>
 801b6b6:	69a2      	ldr	r2, [r4, #24]
 801b6b8:	429a      	cmp	r2, r3
 801b6ba:	dc06      	bgt.n	801b6ca <_puts_r+0xb6>
 801b6bc:	290a      	cmp	r1, #10
 801b6be:	d004      	beq.n	801b6ca <_puts_r+0xb6>
 801b6c0:	6823      	ldr	r3, [r4, #0]
 801b6c2:	1c5a      	adds	r2, r3, #1
 801b6c4:	6022      	str	r2, [r4, #0]
 801b6c6:	7019      	strb	r1, [r3, #0]
 801b6c8:	e7c5      	b.n	801b656 <_puts_r+0x42>
 801b6ca:	4622      	mov	r2, r4
 801b6cc:	4628      	mov	r0, r5
 801b6ce:	f001 f905 	bl	801c8dc <__swbuf_r>
 801b6d2:	3001      	adds	r0, #1
 801b6d4:	d1bf      	bne.n	801b656 <_puts_r+0x42>
 801b6d6:	e7df      	b.n	801b698 <_puts_r+0x84>
 801b6d8:	6823      	ldr	r3, [r4, #0]
 801b6da:	250a      	movs	r5, #10
 801b6dc:	1c5a      	adds	r2, r3, #1
 801b6de:	6022      	str	r2, [r4, #0]
 801b6e0:	701d      	strb	r5, [r3, #0]
 801b6e2:	e7db      	b.n	801b69c <_puts_r+0x88>
 801b6e4:	0802186c 	.word	0x0802186c
 801b6e8:	0802188c 	.word	0x0802188c
 801b6ec:	0802184c 	.word	0x0802184c

0801b6f0 <puts>:
 801b6f0:	4b02      	ldr	r3, [pc, #8]	; (801b6fc <puts+0xc>)
 801b6f2:	4601      	mov	r1, r0
 801b6f4:	6818      	ldr	r0, [r3, #0]
 801b6f6:	f7ff bf8d 	b.w	801b614 <_puts_r>
 801b6fa:	bf00      	nop
 801b6fc:	200001f8 	.word	0x200001f8

0801b700 <cleanup_glue>:
 801b700:	b538      	push	{r3, r4, r5, lr}
 801b702:	460c      	mov	r4, r1
 801b704:	6809      	ldr	r1, [r1, #0]
 801b706:	4605      	mov	r5, r0
 801b708:	b109      	cbz	r1, 801b70e <cleanup_glue+0xe>
 801b70a:	f7ff fff9 	bl	801b700 <cleanup_glue>
 801b70e:	4621      	mov	r1, r4
 801b710:	4628      	mov	r0, r5
 801b712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b716:	f7ff b841 	b.w	801a79c <_free_r>
	...

0801b71c <_reclaim_reent>:
 801b71c:	4b2c      	ldr	r3, [pc, #176]	; (801b7d0 <_reclaim_reent+0xb4>)
 801b71e:	681b      	ldr	r3, [r3, #0]
 801b720:	4283      	cmp	r3, r0
 801b722:	b570      	push	{r4, r5, r6, lr}
 801b724:	4604      	mov	r4, r0
 801b726:	d051      	beq.n	801b7cc <_reclaim_reent+0xb0>
 801b728:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801b72a:	b143      	cbz	r3, 801b73e <_reclaim_reent+0x22>
 801b72c:	68db      	ldr	r3, [r3, #12]
 801b72e:	2b00      	cmp	r3, #0
 801b730:	d14a      	bne.n	801b7c8 <_reclaim_reent+0xac>
 801b732:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b734:	6819      	ldr	r1, [r3, #0]
 801b736:	b111      	cbz	r1, 801b73e <_reclaim_reent+0x22>
 801b738:	4620      	mov	r0, r4
 801b73a:	f7ff f82f 	bl	801a79c <_free_r>
 801b73e:	6961      	ldr	r1, [r4, #20]
 801b740:	b111      	cbz	r1, 801b748 <_reclaim_reent+0x2c>
 801b742:	4620      	mov	r0, r4
 801b744:	f7ff f82a 	bl	801a79c <_free_r>
 801b748:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b74a:	b111      	cbz	r1, 801b752 <_reclaim_reent+0x36>
 801b74c:	4620      	mov	r0, r4
 801b74e:	f7ff f825 	bl	801a79c <_free_r>
 801b752:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b754:	b111      	cbz	r1, 801b75c <_reclaim_reent+0x40>
 801b756:	4620      	mov	r0, r4
 801b758:	f7ff f820 	bl	801a79c <_free_r>
 801b75c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801b75e:	b111      	cbz	r1, 801b766 <_reclaim_reent+0x4a>
 801b760:	4620      	mov	r0, r4
 801b762:	f7ff f81b 	bl	801a79c <_free_r>
 801b766:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801b768:	b111      	cbz	r1, 801b770 <_reclaim_reent+0x54>
 801b76a:	4620      	mov	r0, r4
 801b76c:	f7ff f816 	bl	801a79c <_free_r>
 801b770:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801b772:	b111      	cbz	r1, 801b77a <_reclaim_reent+0x5e>
 801b774:	4620      	mov	r0, r4
 801b776:	f7ff f811 	bl	801a79c <_free_r>
 801b77a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801b77c:	b111      	cbz	r1, 801b784 <_reclaim_reent+0x68>
 801b77e:	4620      	mov	r0, r4
 801b780:	f7ff f80c 	bl	801a79c <_free_r>
 801b784:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b786:	b111      	cbz	r1, 801b78e <_reclaim_reent+0x72>
 801b788:	4620      	mov	r0, r4
 801b78a:	f7ff f807 	bl	801a79c <_free_r>
 801b78e:	69a3      	ldr	r3, [r4, #24]
 801b790:	b1e3      	cbz	r3, 801b7cc <_reclaim_reent+0xb0>
 801b792:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b794:	4620      	mov	r0, r4
 801b796:	4798      	blx	r3
 801b798:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801b79a:	b1b9      	cbz	r1, 801b7cc <_reclaim_reent+0xb0>
 801b79c:	4620      	mov	r0, r4
 801b79e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b7a2:	f7ff bfad 	b.w	801b700 <cleanup_glue>
 801b7a6:	5949      	ldr	r1, [r1, r5]
 801b7a8:	b941      	cbnz	r1, 801b7bc <_reclaim_reent+0xa0>
 801b7aa:	3504      	adds	r5, #4
 801b7ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b7ae:	2d80      	cmp	r5, #128	; 0x80
 801b7b0:	68d9      	ldr	r1, [r3, #12]
 801b7b2:	d1f8      	bne.n	801b7a6 <_reclaim_reent+0x8a>
 801b7b4:	4620      	mov	r0, r4
 801b7b6:	f7fe fff1 	bl	801a79c <_free_r>
 801b7ba:	e7ba      	b.n	801b732 <_reclaim_reent+0x16>
 801b7bc:	680e      	ldr	r6, [r1, #0]
 801b7be:	4620      	mov	r0, r4
 801b7c0:	f7fe ffec 	bl	801a79c <_free_r>
 801b7c4:	4631      	mov	r1, r6
 801b7c6:	e7ef      	b.n	801b7a8 <_reclaim_reent+0x8c>
 801b7c8:	2500      	movs	r5, #0
 801b7ca:	e7ef      	b.n	801b7ac <_reclaim_reent+0x90>
 801b7cc:	bd70      	pop	{r4, r5, r6, pc}
 801b7ce:	bf00      	nop
 801b7d0:	200001f8 	.word	0x200001f8

0801b7d4 <_sbrk_r>:
 801b7d4:	b538      	push	{r3, r4, r5, lr}
 801b7d6:	4d06      	ldr	r5, [pc, #24]	; (801b7f0 <_sbrk_r+0x1c>)
 801b7d8:	2300      	movs	r3, #0
 801b7da:	4604      	mov	r4, r0
 801b7dc:	4608      	mov	r0, r1
 801b7de:	602b      	str	r3, [r5, #0]
 801b7e0:	f7e7 fd40 	bl	8003264 <_sbrk>
 801b7e4:	1c43      	adds	r3, r0, #1
 801b7e6:	d102      	bne.n	801b7ee <_sbrk_r+0x1a>
 801b7e8:	682b      	ldr	r3, [r5, #0]
 801b7ea:	b103      	cbz	r3, 801b7ee <_sbrk_r+0x1a>
 801b7ec:	6023      	str	r3, [r4, #0]
 801b7ee:	bd38      	pop	{r3, r4, r5, pc}
 801b7f0:	20008fb4 	.word	0x20008fb4

0801b7f4 <nanf>:
 801b7f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b7fc <nanf+0x8>
 801b7f8:	4770      	bx	lr
 801b7fa:	bf00      	nop
 801b7fc:	7fc00000 	.word	0x7fc00000

0801b800 <_raise_r>:
 801b800:	291f      	cmp	r1, #31
 801b802:	b538      	push	{r3, r4, r5, lr}
 801b804:	4604      	mov	r4, r0
 801b806:	460d      	mov	r5, r1
 801b808:	d904      	bls.n	801b814 <_raise_r+0x14>
 801b80a:	2316      	movs	r3, #22
 801b80c:	6003      	str	r3, [r0, #0]
 801b80e:	f04f 30ff 	mov.w	r0, #4294967295
 801b812:	bd38      	pop	{r3, r4, r5, pc}
 801b814:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b816:	b112      	cbz	r2, 801b81e <_raise_r+0x1e>
 801b818:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b81c:	b94b      	cbnz	r3, 801b832 <_raise_r+0x32>
 801b81e:	4620      	mov	r0, r4
 801b820:	f000 f830 	bl	801b884 <_getpid_r>
 801b824:	462a      	mov	r2, r5
 801b826:	4601      	mov	r1, r0
 801b828:	4620      	mov	r0, r4
 801b82a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b82e:	f000 b817 	b.w	801b860 <_kill_r>
 801b832:	2b01      	cmp	r3, #1
 801b834:	d00a      	beq.n	801b84c <_raise_r+0x4c>
 801b836:	1c59      	adds	r1, r3, #1
 801b838:	d103      	bne.n	801b842 <_raise_r+0x42>
 801b83a:	2316      	movs	r3, #22
 801b83c:	6003      	str	r3, [r0, #0]
 801b83e:	2001      	movs	r0, #1
 801b840:	e7e7      	b.n	801b812 <_raise_r+0x12>
 801b842:	2400      	movs	r4, #0
 801b844:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b848:	4628      	mov	r0, r5
 801b84a:	4798      	blx	r3
 801b84c:	2000      	movs	r0, #0
 801b84e:	e7e0      	b.n	801b812 <_raise_r+0x12>

0801b850 <raise>:
 801b850:	4b02      	ldr	r3, [pc, #8]	; (801b85c <raise+0xc>)
 801b852:	4601      	mov	r1, r0
 801b854:	6818      	ldr	r0, [r3, #0]
 801b856:	f7ff bfd3 	b.w	801b800 <_raise_r>
 801b85a:	bf00      	nop
 801b85c:	200001f8 	.word	0x200001f8

0801b860 <_kill_r>:
 801b860:	b538      	push	{r3, r4, r5, lr}
 801b862:	4d07      	ldr	r5, [pc, #28]	; (801b880 <_kill_r+0x20>)
 801b864:	2300      	movs	r3, #0
 801b866:	4604      	mov	r4, r0
 801b868:	4608      	mov	r0, r1
 801b86a:	4611      	mov	r1, r2
 801b86c:	602b      	str	r3, [r5, #0]
 801b86e:	f7e7 fc71 	bl	8003154 <_kill>
 801b872:	1c43      	adds	r3, r0, #1
 801b874:	d102      	bne.n	801b87c <_kill_r+0x1c>
 801b876:	682b      	ldr	r3, [r5, #0]
 801b878:	b103      	cbz	r3, 801b87c <_kill_r+0x1c>
 801b87a:	6023      	str	r3, [r4, #0]
 801b87c:	bd38      	pop	{r3, r4, r5, pc}
 801b87e:	bf00      	nop
 801b880:	20008fb4 	.word	0x20008fb4

0801b884 <_getpid_r>:
 801b884:	f7e7 bc5e 	b.w	8003144 <_getpid>

0801b888 <siprintf>:
 801b888:	b40e      	push	{r1, r2, r3}
 801b88a:	b500      	push	{lr}
 801b88c:	b09c      	sub	sp, #112	; 0x70
 801b88e:	ab1d      	add	r3, sp, #116	; 0x74
 801b890:	9002      	str	r0, [sp, #8]
 801b892:	9006      	str	r0, [sp, #24]
 801b894:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b898:	4809      	ldr	r0, [pc, #36]	; (801b8c0 <siprintf+0x38>)
 801b89a:	9107      	str	r1, [sp, #28]
 801b89c:	9104      	str	r1, [sp, #16]
 801b89e:	4909      	ldr	r1, [pc, #36]	; (801b8c4 <siprintf+0x3c>)
 801b8a0:	f853 2b04 	ldr.w	r2, [r3], #4
 801b8a4:	9105      	str	r1, [sp, #20]
 801b8a6:	6800      	ldr	r0, [r0, #0]
 801b8a8:	9301      	str	r3, [sp, #4]
 801b8aa:	a902      	add	r1, sp, #8
 801b8ac:	f003 f9b8 	bl	801ec20 <_svfiprintf_r>
 801b8b0:	9b02      	ldr	r3, [sp, #8]
 801b8b2:	2200      	movs	r2, #0
 801b8b4:	701a      	strb	r2, [r3, #0]
 801b8b6:	b01c      	add	sp, #112	; 0x70
 801b8b8:	f85d eb04 	ldr.w	lr, [sp], #4
 801b8bc:	b003      	add	sp, #12
 801b8be:	4770      	bx	lr
 801b8c0:	200001f8 	.word	0x200001f8
 801b8c4:	ffff0208 	.word	0xffff0208

0801b8c8 <siscanf>:
 801b8c8:	b40e      	push	{r1, r2, r3}
 801b8ca:	b510      	push	{r4, lr}
 801b8cc:	b09f      	sub	sp, #124	; 0x7c
 801b8ce:	ac21      	add	r4, sp, #132	; 0x84
 801b8d0:	f44f 7101 	mov.w	r1, #516	; 0x204
 801b8d4:	f854 2b04 	ldr.w	r2, [r4], #4
 801b8d8:	9201      	str	r2, [sp, #4]
 801b8da:	f8ad 101c 	strh.w	r1, [sp, #28]
 801b8de:	9004      	str	r0, [sp, #16]
 801b8e0:	9008      	str	r0, [sp, #32]
 801b8e2:	f7e4 fc85 	bl	80001f0 <strlen>
 801b8e6:	4b0c      	ldr	r3, [pc, #48]	; (801b918 <siscanf+0x50>)
 801b8e8:	9005      	str	r0, [sp, #20]
 801b8ea:	9009      	str	r0, [sp, #36]	; 0x24
 801b8ec:	930d      	str	r3, [sp, #52]	; 0x34
 801b8ee:	480b      	ldr	r0, [pc, #44]	; (801b91c <siscanf+0x54>)
 801b8f0:	9a01      	ldr	r2, [sp, #4]
 801b8f2:	6800      	ldr	r0, [r0, #0]
 801b8f4:	9403      	str	r4, [sp, #12]
 801b8f6:	2300      	movs	r3, #0
 801b8f8:	9311      	str	r3, [sp, #68]	; 0x44
 801b8fa:	9316      	str	r3, [sp, #88]	; 0x58
 801b8fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b900:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b904:	a904      	add	r1, sp, #16
 801b906:	4623      	mov	r3, r4
 801b908:	f003 fae4 	bl	801eed4 <__ssvfiscanf_r>
 801b90c:	b01f      	add	sp, #124	; 0x7c
 801b90e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b912:	b003      	add	sp, #12
 801b914:	4770      	bx	lr
 801b916:	bf00      	nop
 801b918:	0801b943 	.word	0x0801b943
 801b91c:	200001f8 	.word	0x200001f8

0801b920 <__sread>:
 801b920:	b510      	push	{r4, lr}
 801b922:	460c      	mov	r4, r1
 801b924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b928:	f003 fef2 	bl	801f710 <_read_r>
 801b92c:	2800      	cmp	r0, #0
 801b92e:	bfab      	itete	ge
 801b930:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b932:	89a3      	ldrhlt	r3, [r4, #12]
 801b934:	181b      	addge	r3, r3, r0
 801b936:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b93a:	bfac      	ite	ge
 801b93c:	6563      	strge	r3, [r4, #84]	; 0x54
 801b93e:	81a3      	strhlt	r3, [r4, #12]
 801b940:	bd10      	pop	{r4, pc}

0801b942 <__seofread>:
 801b942:	2000      	movs	r0, #0
 801b944:	4770      	bx	lr

0801b946 <__swrite>:
 801b946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b94a:	461f      	mov	r7, r3
 801b94c:	898b      	ldrh	r3, [r1, #12]
 801b94e:	05db      	lsls	r3, r3, #23
 801b950:	4605      	mov	r5, r0
 801b952:	460c      	mov	r4, r1
 801b954:	4616      	mov	r6, r2
 801b956:	d505      	bpl.n	801b964 <__swrite+0x1e>
 801b958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b95c:	2302      	movs	r3, #2
 801b95e:	2200      	movs	r2, #0
 801b960:	f002 fb7e 	bl	801e060 <_lseek_r>
 801b964:	89a3      	ldrh	r3, [r4, #12]
 801b966:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b96a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b96e:	81a3      	strh	r3, [r4, #12]
 801b970:	4632      	mov	r2, r6
 801b972:	463b      	mov	r3, r7
 801b974:	4628      	mov	r0, r5
 801b976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b97a:	f001 b801 	b.w	801c980 <_write_r>

0801b97e <__sseek>:
 801b97e:	b510      	push	{r4, lr}
 801b980:	460c      	mov	r4, r1
 801b982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b986:	f002 fb6b 	bl	801e060 <_lseek_r>
 801b98a:	1c43      	adds	r3, r0, #1
 801b98c:	89a3      	ldrh	r3, [r4, #12]
 801b98e:	bf15      	itete	ne
 801b990:	6560      	strne	r0, [r4, #84]	; 0x54
 801b992:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b996:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b99a:	81a3      	strheq	r3, [r4, #12]
 801b99c:	bf18      	it	ne
 801b99e:	81a3      	strhne	r3, [r4, #12]
 801b9a0:	bd10      	pop	{r4, pc}

0801b9a2 <__sclose>:
 801b9a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b9a6:	f001 b889 	b.w	801cabc <_close_r>

0801b9aa <strcpy>:
 801b9aa:	4603      	mov	r3, r0
 801b9ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b9b0:	f803 2b01 	strb.w	r2, [r3], #1
 801b9b4:	2a00      	cmp	r2, #0
 801b9b6:	d1f9      	bne.n	801b9ac <strcpy+0x2>
 801b9b8:	4770      	bx	lr

0801b9ba <strncmp>:
 801b9ba:	b510      	push	{r4, lr}
 801b9bc:	b16a      	cbz	r2, 801b9da <strncmp+0x20>
 801b9be:	3901      	subs	r1, #1
 801b9c0:	1884      	adds	r4, r0, r2
 801b9c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 801b9c6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801b9ca:	4293      	cmp	r3, r2
 801b9cc:	d103      	bne.n	801b9d6 <strncmp+0x1c>
 801b9ce:	42a0      	cmp	r0, r4
 801b9d0:	d001      	beq.n	801b9d6 <strncmp+0x1c>
 801b9d2:	2b00      	cmp	r3, #0
 801b9d4:	d1f5      	bne.n	801b9c2 <strncmp+0x8>
 801b9d6:	1a98      	subs	r0, r3, r2
 801b9d8:	bd10      	pop	{r4, pc}
 801b9da:	4610      	mov	r0, r2
 801b9dc:	e7fc      	b.n	801b9d8 <strncmp+0x1e>

0801b9de <sulp>:
 801b9de:	b570      	push	{r4, r5, r6, lr}
 801b9e0:	4604      	mov	r4, r0
 801b9e2:	460d      	mov	r5, r1
 801b9e4:	ec45 4b10 	vmov	d0, r4, r5
 801b9e8:	4616      	mov	r6, r2
 801b9ea:	f002 ff39 	bl	801e860 <__ulp>
 801b9ee:	ec51 0b10 	vmov	r0, r1, d0
 801b9f2:	b17e      	cbz	r6, 801ba14 <sulp+0x36>
 801b9f4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801b9f8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b9fc:	2b00      	cmp	r3, #0
 801b9fe:	dd09      	ble.n	801ba14 <sulp+0x36>
 801ba00:	051b      	lsls	r3, r3, #20
 801ba02:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801ba06:	2400      	movs	r4, #0
 801ba08:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801ba0c:	4622      	mov	r2, r4
 801ba0e:	462b      	mov	r3, r5
 801ba10:	f7e4 fe02 	bl	8000618 <__aeabi_dmul>
 801ba14:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ba18 <_strtod_l>:
 801ba18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba1c:	b0a3      	sub	sp, #140	; 0x8c
 801ba1e:	461f      	mov	r7, r3
 801ba20:	2300      	movs	r3, #0
 801ba22:	931e      	str	r3, [sp, #120]	; 0x78
 801ba24:	4ba4      	ldr	r3, [pc, #656]	; (801bcb8 <_strtod_l+0x2a0>)
 801ba26:	9219      	str	r2, [sp, #100]	; 0x64
 801ba28:	681b      	ldr	r3, [r3, #0]
 801ba2a:	9307      	str	r3, [sp, #28]
 801ba2c:	4604      	mov	r4, r0
 801ba2e:	4618      	mov	r0, r3
 801ba30:	4688      	mov	r8, r1
 801ba32:	f7e4 fbdd 	bl	80001f0 <strlen>
 801ba36:	f04f 0a00 	mov.w	sl, #0
 801ba3a:	4605      	mov	r5, r0
 801ba3c:	f04f 0b00 	mov.w	fp, #0
 801ba40:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801ba44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ba46:	781a      	ldrb	r2, [r3, #0]
 801ba48:	2a2b      	cmp	r2, #43	; 0x2b
 801ba4a:	d04c      	beq.n	801bae6 <_strtod_l+0xce>
 801ba4c:	d839      	bhi.n	801bac2 <_strtod_l+0xaa>
 801ba4e:	2a0d      	cmp	r2, #13
 801ba50:	d832      	bhi.n	801bab8 <_strtod_l+0xa0>
 801ba52:	2a08      	cmp	r2, #8
 801ba54:	d832      	bhi.n	801babc <_strtod_l+0xa4>
 801ba56:	2a00      	cmp	r2, #0
 801ba58:	d03c      	beq.n	801bad4 <_strtod_l+0xbc>
 801ba5a:	2300      	movs	r3, #0
 801ba5c:	930e      	str	r3, [sp, #56]	; 0x38
 801ba5e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801ba60:	7833      	ldrb	r3, [r6, #0]
 801ba62:	2b30      	cmp	r3, #48	; 0x30
 801ba64:	f040 80b4 	bne.w	801bbd0 <_strtod_l+0x1b8>
 801ba68:	7873      	ldrb	r3, [r6, #1]
 801ba6a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801ba6e:	2b58      	cmp	r3, #88	; 0x58
 801ba70:	d16c      	bne.n	801bb4c <_strtod_l+0x134>
 801ba72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ba74:	9301      	str	r3, [sp, #4]
 801ba76:	ab1e      	add	r3, sp, #120	; 0x78
 801ba78:	9702      	str	r7, [sp, #8]
 801ba7a:	9300      	str	r3, [sp, #0]
 801ba7c:	4a8f      	ldr	r2, [pc, #572]	; (801bcbc <_strtod_l+0x2a4>)
 801ba7e:	ab1f      	add	r3, sp, #124	; 0x7c
 801ba80:	a91d      	add	r1, sp, #116	; 0x74
 801ba82:	4620      	mov	r0, r4
 801ba84:	f001 ffe0 	bl	801da48 <__gethex>
 801ba88:	f010 0707 	ands.w	r7, r0, #7
 801ba8c:	4605      	mov	r5, r0
 801ba8e:	d005      	beq.n	801ba9c <_strtod_l+0x84>
 801ba90:	2f06      	cmp	r7, #6
 801ba92:	d12a      	bne.n	801baea <_strtod_l+0xd2>
 801ba94:	3601      	adds	r6, #1
 801ba96:	2300      	movs	r3, #0
 801ba98:	961d      	str	r6, [sp, #116]	; 0x74
 801ba9a:	930e      	str	r3, [sp, #56]	; 0x38
 801ba9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ba9e:	2b00      	cmp	r3, #0
 801baa0:	f040 8596 	bne.w	801c5d0 <_strtod_l+0xbb8>
 801baa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801baa6:	b1db      	cbz	r3, 801bae0 <_strtod_l+0xc8>
 801baa8:	4652      	mov	r2, sl
 801baaa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801baae:	ec43 2b10 	vmov	d0, r2, r3
 801bab2:	b023      	add	sp, #140	; 0x8c
 801bab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bab8:	2a20      	cmp	r2, #32
 801baba:	d1ce      	bne.n	801ba5a <_strtod_l+0x42>
 801babc:	3301      	adds	r3, #1
 801babe:	931d      	str	r3, [sp, #116]	; 0x74
 801bac0:	e7c0      	b.n	801ba44 <_strtod_l+0x2c>
 801bac2:	2a2d      	cmp	r2, #45	; 0x2d
 801bac4:	d1c9      	bne.n	801ba5a <_strtod_l+0x42>
 801bac6:	2201      	movs	r2, #1
 801bac8:	920e      	str	r2, [sp, #56]	; 0x38
 801baca:	1c5a      	adds	r2, r3, #1
 801bacc:	921d      	str	r2, [sp, #116]	; 0x74
 801bace:	785b      	ldrb	r3, [r3, #1]
 801bad0:	2b00      	cmp	r3, #0
 801bad2:	d1c4      	bne.n	801ba5e <_strtod_l+0x46>
 801bad4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801bad6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801bada:	2b00      	cmp	r3, #0
 801badc:	f040 8576 	bne.w	801c5cc <_strtod_l+0xbb4>
 801bae0:	4652      	mov	r2, sl
 801bae2:	465b      	mov	r3, fp
 801bae4:	e7e3      	b.n	801baae <_strtod_l+0x96>
 801bae6:	2200      	movs	r2, #0
 801bae8:	e7ee      	b.n	801bac8 <_strtod_l+0xb0>
 801baea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801baec:	b13a      	cbz	r2, 801bafe <_strtod_l+0xe6>
 801baee:	2135      	movs	r1, #53	; 0x35
 801baf0:	a820      	add	r0, sp, #128	; 0x80
 801baf2:	f002 ffc0 	bl	801ea76 <__copybits>
 801baf6:	991e      	ldr	r1, [sp, #120]	; 0x78
 801baf8:	4620      	mov	r0, r4
 801bafa:	f002 fb85 	bl	801e208 <_Bfree>
 801bafe:	3f01      	subs	r7, #1
 801bb00:	2f05      	cmp	r7, #5
 801bb02:	d807      	bhi.n	801bb14 <_strtod_l+0xfc>
 801bb04:	e8df f007 	tbb	[pc, r7]
 801bb08:	1d180b0e 	.word	0x1d180b0e
 801bb0c:	030e      	.short	0x030e
 801bb0e:	f04f 0b00 	mov.w	fp, #0
 801bb12:	46da      	mov	sl, fp
 801bb14:	0728      	lsls	r0, r5, #28
 801bb16:	d5c1      	bpl.n	801ba9c <_strtod_l+0x84>
 801bb18:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801bb1c:	e7be      	b.n	801ba9c <_strtod_l+0x84>
 801bb1e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801bb22:	e7f7      	b.n	801bb14 <_strtod_l+0xfc>
 801bb24:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801bb28:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801bb2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801bb2e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801bb32:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801bb36:	e7ed      	b.n	801bb14 <_strtod_l+0xfc>
 801bb38:	f8df b184 	ldr.w	fp, [pc, #388]	; 801bcc0 <_strtod_l+0x2a8>
 801bb3c:	f04f 0a00 	mov.w	sl, #0
 801bb40:	e7e8      	b.n	801bb14 <_strtod_l+0xfc>
 801bb42:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801bb46:	f04f 3aff 	mov.w	sl, #4294967295
 801bb4a:	e7e3      	b.n	801bb14 <_strtod_l+0xfc>
 801bb4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bb4e:	1c5a      	adds	r2, r3, #1
 801bb50:	921d      	str	r2, [sp, #116]	; 0x74
 801bb52:	785b      	ldrb	r3, [r3, #1]
 801bb54:	2b30      	cmp	r3, #48	; 0x30
 801bb56:	d0f9      	beq.n	801bb4c <_strtod_l+0x134>
 801bb58:	2b00      	cmp	r3, #0
 801bb5a:	d09f      	beq.n	801ba9c <_strtod_l+0x84>
 801bb5c:	2301      	movs	r3, #1
 801bb5e:	f04f 0900 	mov.w	r9, #0
 801bb62:	9304      	str	r3, [sp, #16]
 801bb64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bb66:	930a      	str	r3, [sp, #40]	; 0x28
 801bb68:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801bb6c:	464f      	mov	r7, r9
 801bb6e:	220a      	movs	r2, #10
 801bb70:	981d      	ldr	r0, [sp, #116]	; 0x74
 801bb72:	7806      	ldrb	r6, [r0, #0]
 801bb74:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801bb78:	b2d9      	uxtb	r1, r3
 801bb7a:	2909      	cmp	r1, #9
 801bb7c:	d92a      	bls.n	801bbd4 <_strtod_l+0x1bc>
 801bb7e:	9907      	ldr	r1, [sp, #28]
 801bb80:	462a      	mov	r2, r5
 801bb82:	f7ff ff1a 	bl	801b9ba <strncmp>
 801bb86:	b398      	cbz	r0, 801bbf0 <_strtod_l+0x1d8>
 801bb88:	2000      	movs	r0, #0
 801bb8a:	4633      	mov	r3, r6
 801bb8c:	463d      	mov	r5, r7
 801bb8e:	9007      	str	r0, [sp, #28]
 801bb90:	4602      	mov	r2, r0
 801bb92:	2b65      	cmp	r3, #101	; 0x65
 801bb94:	d001      	beq.n	801bb9a <_strtod_l+0x182>
 801bb96:	2b45      	cmp	r3, #69	; 0x45
 801bb98:	d118      	bne.n	801bbcc <_strtod_l+0x1b4>
 801bb9a:	b91d      	cbnz	r5, 801bba4 <_strtod_l+0x18c>
 801bb9c:	9b04      	ldr	r3, [sp, #16]
 801bb9e:	4303      	orrs	r3, r0
 801bba0:	d098      	beq.n	801bad4 <_strtod_l+0xbc>
 801bba2:	2500      	movs	r5, #0
 801bba4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801bba8:	f108 0301 	add.w	r3, r8, #1
 801bbac:	931d      	str	r3, [sp, #116]	; 0x74
 801bbae:	f898 3001 	ldrb.w	r3, [r8, #1]
 801bbb2:	2b2b      	cmp	r3, #43	; 0x2b
 801bbb4:	d075      	beq.n	801bca2 <_strtod_l+0x28a>
 801bbb6:	2b2d      	cmp	r3, #45	; 0x2d
 801bbb8:	d07b      	beq.n	801bcb2 <_strtod_l+0x29a>
 801bbba:	f04f 0c00 	mov.w	ip, #0
 801bbbe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801bbc2:	2909      	cmp	r1, #9
 801bbc4:	f240 8082 	bls.w	801bccc <_strtod_l+0x2b4>
 801bbc8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801bbcc:	2600      	movs	r6, #0
 801bbce:	e09d      	b.n	801bd0c <_strtod_l+0x2f4>
 801bbd0:	2300      	movs	r3, #0
 801bbd2:	e7c4      	b.n	801bb5e <_strtod_l+0x146>
 801bbd4:	2f08      	cmp	r7, #8
 801bbd6:	bfd8      	it	le
 801bbd8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801bbda:	f100 0001 	add.w	r0, r0, #1
 801bbde:	bfda      	itte	le
 801bbe0:	fb02 3301 	mlale	r3, r2, r1, r3
 801bbe4:	9309      	strle	r3, [sp, #36]	; 0x24
 801bbe6:	fb02 3909 	mlagt	r9, r2, r9, r3
 801bbea:	3701      	adds	r7, #1
 801bbec:	901d      	str	r0, [sp, #116]	; 0x74
 801bbee:	e7bf      	b.n	801bb70 <_strtod_l+0x158>
 801bbf0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bbf2:	195a      	adds	r2, r3, r5
 801bbf4:	921d      	str	r2, [sp, #116]	; 0x74
 801bbf6:	5d5b      	ldrb	r3, [r3, r5]
 801bbf8:	2f00      	cmp	r7, #0
 801bbfa:	d037      	beq.n	801bc6c <_strtod_l+0x254>
 801bbfc:	9007      	str	r0, [sp, #28]
 801bbfe:	463d      	mov	r5, r7
 801bc00:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801bc04:	2a09      	cmp	r2, #9
 801bc06:	d912      	bls.n	801bc2e <_strtod_l+0x216>
 801bc08:	2201      	movs	r2, #1
 801bc0a:	e7c2      	b.n	801bb92 <_strtod_l+0x17a>
 801bc0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bc0e:	1c5a      	adds	r2, r3, #1
 801bc10:	921d      	str	r2, [sp, #116]	; 0x74
 801bc12:	785b      	ldrb	r3, [r3, #1]
 801bc14:	3001      	adds	r0, #1
 801bc16:	2b30      	cmp	r3, #48	; 0x30
 801bc18:	d0f8      	beq.n	801bc0c <_strtod_l+0x1f4>
 801bc1a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801bc1e:	2a08      	cmp	r2, #8
 801bc20:	f200 84db 	bhi.w	801c5da <_strtod_l+0xbc2>
 801bc24:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801bc26:	9007      	str	r0, [sp, #28]
 801bc28:	2000      	movs	r0, #0
 801bc2a:	920a      	str	r2, [sp, #40]	; 0x28
 801bc2c:	4605      	mov	r5, r0
 801bc2e:	3b30      	subs	r3, #48	; 0x30
 801bc30:	f100 0201 	add.w	r2, r0, #1
 801bc34:	d014      	beq.n	801bc60 <_strtod_l+0x248>
 801bc36:	9907      	ldr	r1, [sp, #28]
 801bc38:	4411      	add	r1, r2
 801bc3a:	9107      	str	r1, [sp, #28]
 801bc3c:	462a      	mov	r2, r5
 801bc3e:	eb00 0e05 	add.w	lr, r0, r5
 801bc42:	210a      	movs	r1, #10
 801bc44:	4572      	cmp	r2, lr
 801bc46:	d113      	bne.n	801bc70 <_strtod_l+0x258>
 801bc48:	182a      	adds	r2, r5, r0
 801bc4a:	2a08      	cmp	r2, #8
 801bc4c:	f105 0501 	add.w	r5, r5, #1
 801bc50:	4405      	add	r5, r0
 801bc52:	dc1c      	bgt.n	801bc8e <_strtod_l+0x276>
 801bc54:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bc56:	220a      	movs	r2, #10
 801bc58:	fb02 3301 	mla	r3, r2, r1, r3
 801bc5c:	9309      	str	r3, [sp, #36]	; 0x24
 801bc5e:	2200      	movs	r2, #0
 801bc60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bc62:	1c59      	adds	r1, r3, #1
 801bc64:	911d      	str	r1, [sp, #116]	; 0x74
 801bc66:	785b      	ldrb	r3, [r3, #1]
 801bc68:	4610      	mov	r0, r2
 801bc6a:	e7c9      	b.n	801bc00 <_strtod_l+0x1e8>
 801bc6c:	4638      	mov	r0, r7
 801bc6e:	e7d2      	b.n	801bc16 <_strtod_l+0x1fe>
 801bc70:	2a08      	cmp	r2, #8
 801bc72:	dc04      	bgt.n	801bc7e <_strtod_l+0x266>
 801bc74:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801bc76:	434e      	muls	r6, r1
 801bc78:	9609      	str	r6, [sp, #36]	; 0x24
 801bc7a:	3201      	adds	r2, #1
 801bc7c:	e7e2      	b.n	801bc44 <_strtod_l+0x22c>
 801bc7e:	f102 0c01 	add.w	ip, r2, #1
 801bc82:	f1bc 0f10 	cmp.w	ip, #16
 801bc86:	bfd8      	it	le
 801bc88:	fb01 f909 	mulle.w	r9, r1, r9
 801bc8c:	e7f5      	b.n	801bc7a <_strtod_l+0x262>
 801bc8e:	2d10      	cmp	r5, #16
 801bc90:	bfdc      	itt	le
 801bc92:	220a      	movle	r2, #10
 801bc94:	fb02 3909 	mlale	r9, r2, r9, r3
 801bc98:	e7e1      	b.n	801bc5e <_strtod_l+0x246>
 801bc9a:	2300      	movs	r3, #0
 801bc9c:	9307      	str	r3, [sp, #28]
 801bc9e:	2201      	movs	r2, #1
 801bca0:	e77c      	b.n	801bb9c <_strtod_l+0x184>
 801bca2:	f04f 0c00 	mov.w	ip, #0
 801bca6:	f108 0302 	add.w	r3, r8, #2
 801bcaa:	931d      	str	r3, [sp, #116]	; 0x74
 801bcac:	f898 3002 	ldrb.w	r3, [r8, #2]
 801bcb0:	e785      	b.n	801bbbe <_strtod_l+0x1a6>
 801bcb2:	f04f 0c01 	mov.w	ip, #1
 801bcb6:	e7f6      	b.n	801bca6 <_strtod_l+0x28e>
 801bcb8:	08021a74 	.word	0x08021a74
 801bcbc:	080218e8 	.word	0x080218e8
 801bcc0:	7ff00000 	.word	0x7ff00000
 801bcc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bcc6:	1c59      	adds	r1, r3, #1
 801bcc8:	911d      	str	r1, [sp, #116]	; 0x74
 801bcca:	785b      	ldrb	r3, [r3, #1]
 801bccc:	2b30      	cmp	r3, #48	; 0x30
 801bcce:	d0f9      	beq.n	801bcc4 <_strtod_l+0x2ac>
 801bcd0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801bcd4:	2908      	cmp	r1, #8
 801bcd6:	f63f af79 	bhi.w	801bbcc <_strtod_l+0x1b4>
 801bcda:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801bcde:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bce0:	9308      	str	r3, [sp, #32]
 801bce2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bce4:	1c59      	adds	r1, r3, #1
 801bce6:	911d      	str	r1, [sp, #116]	; 0x74
 801bce8:	785b      	ldrb	r3, [r3, #1]
 801bcea:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801bcee:	2e09      	cmp	r6, #9
 801bcf0:	d937      	bls.n	801bd62 <_strtod_l+0x34a>
 801bcf2:	9e08      	ldr	r6, [sp, #32]
 801bcf4:	1b89      	subs	r1, r1, r6
 801bcf6:	2908      	cmp	r1, #8
 801bcf8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801bcfc:	dc02      	bgt.n	801bd04 <_strtod_l+0x2ec>
 801bcfe:	4576      	cmp	r6, lr
 801bd00:	bfa8      	it	ge
 801bd02:	4676      	movge	r6, lr
 801bd04:	f1bc 0f00 	cmp.w	ip, #0
 801bd08:	d000      	beq.n	801bd0c <_strtod_l+0x2f4>
 801bd0a:	4276      	negs	r6, r6
 801bd0c:	2d00      	cmp	r5, #0
 801bd0e:	d14f      	bne.n	801bdb0 <_strtod_l+0x398>
 801bd10:	9904      	ldr	r1, [sp, #16]
 801bd12:	4301      	orrs	r1, r0
 801bd14:	f47f aec2 	bne.w	801ba9c <_strtod_l+0x84>
 801bd18:	2a00      	cmp	r2, #0
 801bd1a:	f47f aedb 	bne.w	801bad4 <_strtod_l+0xbc>
 801bd1e:	2b69      	cmp	r3, #105	; 0x69
 801bd20:	d027      	beq.n	801bd72 <_strtod_l+0x35a>
 801bd22:	dc24      	bgt.n	801bd6e <_strtod_l+0x356>
 801bd24:	2b49      	cmp	r3, #73	; 0x49
 801bd26:	d024      	beq.n	801bd72 <_strtod_l+0x35a>
 801bd28:	2b4e      	cmp	r3, #78	; 0x4e
 801bd2a:	f47f aed3 	bne.w	801bad4 <_strtod_l+0xbc>
 801bd2e:	499e      	ldr	r1, [pc, #632]	; (801bfa8 <_strtod_l+0x590>)
 801bd30:	a81d      	add	r0, sp, #116	; 0x74
 801bd32:	f002 f8e1 	bl	801def8 <__match>
 801bd36:	2800      	cmp	r0, #0
 801bd38:	f43f aecc 	beq.w	801bad4 <_strtod_l+0xbc>
 801bd3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bd3e:	781b      	ldrb	r3, [r3, #0]
 801bd40:	2b28      	cmp	r3, #40	; 0x28
 801bd42:	d12d      	bne.n	801bda0 <_strtod_l+0x388>
 801bd44:	4999      	ldr	r1, [pc, #612]	; (801bfac <_strtod_l+0x594>)
 801bd46:	aa20      	add	r2, sp, #128	; 0x80
 801bd48:	a81d      	add	r0, sp, #116	; 0x74
 801bd4a:	f002 f8e9 	bl	801df20 <__hexnan>
 801bd4e:	2805      	cmp	r0, #5
 801bd50:	d126      	bne.n	801bda0 <_strtod_l+0x388>
 801bd52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bd54:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801bd58:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801bd5c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801bd60:	e69c      	b.n	801ba9c <_strtod_l+0x84>
 801bd62:	210a      	movs	r1, #10
 801bd64:	fb01 3e0e 	mla	lr, r1, lr, r3
 801bd68:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801bd6c:	e7b9      	b.n	801bce2 <_strtod_l+0x2ca>
 801bd6e:	2b6e      	cmp	r3, #110	; 0x6e
 801bd70:	e7db      	b.n	801bd2a <_strtod_l+0x312>
 801bd72:	498f      	ldr	r1, [pc, #572]	; (801bfb0 <_strtod_l+0x598>)
 801bd74:	a81d      	add	r0, sp, #116	; 0x74
 801bd76:	f002 f8bf 	bl	801def8 <__match>
 801bd7a:	2800      	cmp	r0, #0
 801bd7c:	f43f aeaa 	beq.w	801bad4 <_strtod_l+0xbc>
 801bd80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bd82:	498c      	ldr	r1, [pc, #560]	; (801bfb4 <_strtod_l+0x59c>)
 801bd84:	3b01      	subs	r3, #1
 801bd86:	a81d      	add	r0, sp, #116	; 0x74
 801bd88:	931d      	str	r3, [sp, #116]	; 0x74
 801bd8a:	f002 f8b5 	bl	801def8 <__match>
 801bd8e:	b910      	cbnz	r0, 801bd96 <_strtod_l+0x37e>
 801bd90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bd92:	3301      	adds	r3, #1
 801bd94:	931d      	str	r3, [sp, #116]	; 0x74
 801bd96:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801bfc4 <_strtod_l+0x5ac>
 801bd9a:	f04f 0a00 	mov.w	sl, #0
 801bd9e:	e67d      	b.n	801ba9c <_strtod_l+0x84>
 801bda0:	4885      	ldr	r0, [pc, #532]	; (801bfb8 <_strtod_l+0x5a0>)
 801bda2:	f7fe fa7d 	bl	801a2a0 <nan>
 801bda6:	ed8d 0b04 	vstr	d0, [sp, #16]
 801bdaa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801bdae:	e675      	b.n	801ba9c <_strtod_l+0x84>
 801bdb0:	9b07      	ldr	r3, [sp, #28]
 801bdb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bdb4:	1af3      	subs	r3, r6, r3
 801bdb6:	2f00      	cmp	r7, #0
 801bdb8:	bf08      	it	eq
 801bdba:	462f      	moveq	r7, r5
 801bdbc:	2d10      	cmp	r5, #16
 801bdbe:	9308      	str	r3, [sp, #32]
 801bdc0:	46a8      	mov	r8, r5
 801bdc2:	bfa8      	it	ge
 801bdc4:	f04f 0810 	movge.w	r8, #16
 801bdc8:	f7e4 fbac 	bl	8000524 <__aeabi_ui2d>
 801bdcc:	2d09      	cmp	r5, #9
 801bdce:	4682      	mov	sl, r0
 801bdd0:	468b      	mov	fp, r1
 801bdd2:	dd13      	ble.n	801bdfc <_strtod_l+0x3e4>
 801bdd4:	4b79      	ldr	r3, [pc, #484]	; (801bfbc <_strtod_l+0x5a4>)
 801bdd6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801bdda:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801bdde:	f7e4 fc1b 	bl	8000618 <__aeabi_dmul>
 801bde2:	4682      	mov	sl, r0
 801bde4:	4648      	mov	r0, r9
 801bde6:	468b      	mov	fp, r1
 801bde8:	f7e4 fb9c 	bl	8000524 <__aeabi_ui2d>
 801bdec:	4602      	mov	r2, r0
 801bdee:	460b      	mov	r3, r1
 801bdf0:	4650      	mov	r0, sl
 801bdf2:	4659      	mov	r1, fp
 801bdf4:	f7e4 fa5a 	bl	80002ac <__adddf3>
 801bdf8:	4682      	mov	sl, r0
 801bdfa:	468b      	mov	fp, r1
 801bdfc:	2d0f      	cmp	r5, #15
 801bdfe:	dc38      	bgt.n	801be72 <_strtod_l+0x45a>
 801be00:	9b08      	ldr	r3, [sp, #32]
 801be02:	2b00      	cmp	r3, #0
 801be04:	f43f ae4a 	beq.w	801ba9c <_strtod_l+0x84>
 801be08:	dd24      	ble.n	801be54 <_strtod_l+0x43c>
 801be0a:	2b16      	cmp	r3, #22
 801be0c:	dc0b      	bgt.n	801be26 <_strtod_l+0x40e>
 801be0e:	4d6b      	ldr	r5, [pc, #428]	; (801bfbc <_strtod_l+0x5a4>)
 801be10:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801be14:	e9d5 0100 	ldrd	r0, r1, [r5]
 801be18:	4652      	mov	r2, sl
 801be1a:	465b      	mov	r3, fp
 801be1c:	f7e4 fbfc 	bl	8000618 <__aeabi_dmul>
 801be20:	4682      	mov	sl, r0
 801be22:	468b      	mov	fp, r1
 801be24:	e63a      	b.n	801ba9c <_strtod_l+0x84>
 801be26:	9a08      	ldr	r2, [sp, #32]
 801be28:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801be2c:	4293      	cmp	r3, r2
 801be2e:	db20      	blt.n	801be72 <_strtod_l+0x45a>
 801be30:	4c62      	ldr	r4, [pc, #392]	; (801bfbc <_strtod_l+0x5a4>)
 801be32:	f1c5 050f 	rsb	r5, r5, #15
 801be36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801be3a:	4652      	mov	r2, sl
 801be3c:	465b      	mov	r3, fp
 801be3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801be42:	f7e4 fbe9 	bl	8000618 <__aeabi_dmul>
 801be46:	9b08      	ldr	r3, [sp, #32]
 801be48:	1b5d      	subs	r5, r3, r5
 801be4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801be4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801be52:	e7e3      	b.n	801be1c <_strtod_l+0x404>
 801be54:	9b08      	ldr	r3, [sp, #32]
 801be56:	3316      	adds	r3, #22
 801be58:	db0b      	blt.n	801be72 <_strtod_l+0x45a>
 801be5a:	9b07      	ldr	r3, [sp, #28]
 801be5c:	4a57      	ldr	r2, [pc, #348]	; (801bfbc <_strtod_l+0x5a4>)
 801be5e:	1b9e      	subs	r6, r3, r6
 801be60:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801be64:	e9d6 2300 	ldrd	r2, r3, [r6]
 801be68:	4650      	mov	r0, sl
 801be6a:	4659      	mov	r1, fp
 801be6c:	f7e4 fcfe 	bl	800086c <__aeabi_ddiv>
 801be70:	e7d6      	b.n	801be20 <_strtod_l+0x408>
 801be72:	9b08      	ldr	r3, [sp, #32]
 801be74:	eba5 0808 	sub.w	r8, r5, r8
 801be78:	4498      	add	r8, r3
 801be7a:	f1b8 0f00 	cmp.w	r8, #0
 801be7e:	dd71      	ble.n	801bf64 <_strtod_l+0x54c>
 801be80:	f018 030f 	ands.w	r3, r8, #15
 801be84:	d00a      	beq.n	801be9c <_strtod_l+0x484>
 801be86:	494d      	ldr	r1, [pc, #308]	; (801bfbc <_strtod_l+0x5a4>)
 801be88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801be8c:	4652      	mov	r2, sl
 801be8e:	465b      	mov	r3, fp
 801be90:	e9d1 0100 	ldrd	r0, r1, [r1]
 801be94:	f7e4 fbc0 	bl	8000618 <__aeabi_dmul>
 801be98:	4682      	mov	sl, r0
 801be9a:	468b      	mov	fp, r1
 801be9c:	f038 080f 	bics.w	r8, r8, #15
 801bea0:	d04d      	beq.n	801bf3e <_strtod_l+0x526>
 801bea2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801bea6:	dd22      	ble.n	801beee <_strtod_l+0x4d6>
 801bea8:	2500      	movs	r5, #0
 801beaa:	462e      	mov	r6, r5
 801beac:	9509      	str	r5, [sp, #36]	; 0x24
 801beae:	9507      	str	r5, [sp, #28]
 801beb0:	2322      	movs	r3, #34	; 0x22
 801beb2:	f8df b110 	ldr.w	fp, [pc, #272]	; 801bfc4 <_strtod_l+0x5ac>
 801beb6:	6023      	str	r3, [r4, #0]
 801beb8:	f04f 0a00 	mov.w	sl, #0
 801bebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bebe:	2b00      	cmp	r3, #0
 801bec0:	f43f adec 	beq.w	801ba9c <_strtod_l+0x84>
 801bec4:	991e      	ldr	r1, [sp, #120]	; 0x78
 801bec6:	4620      	mov	r0, r4
 801bec8:	f002 f99e 	bl	801e208 <_Bfree>
 801becc:	9907      	ldr	r1, [sp, #28]
 801bece:	4620      	mov	r0, r4
 801bed0:	f002 f99a 	bl	801e208 <_Bfree>
 801bed4:	4631      	mov	r1, r6
 801bed6:	4620      	mov	r0, r4
 801bed8:	f002 f996 	bl	801e208 <_Bfree>
 801bedc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bede:	4620      	mov	r0, r4
 801bee0:	f002 f992 	bl	801e208 <_Bfree>
 801bee4:	4629      	mov	r1, r5
 801bee6:	4620      	mov	r0, r4
 801bee8:	f002 f98e 	bl	801e208 <_Bfree>
 801beec:	e5d6      	b.n	801ba9c <_strtod_l+0x84>
 801beee:	2300      	movs	r3, #0
 801bef0:	ea4f 1828 	mov.w	r8, r8, asr #4
 801bef4:	4650      	mov	r0, sl
 801bef6:	4659      	mov	r1, fp
 801bef8:	4699      	mov	r9, r3
 801befa:	f1b8 0f01 	cmp.w	r8, #1
 801befe:	dc21      	bgt.n	801bf44 <_strtod_l+0x52c>
 801bf00:	b10b      	cbz	r3, 801bf06 <_strtod_l+0x4ee>
 801bf02:	4682      	mov	sl, r0
 801bf04:	468b      	mov	fp, r1
 801bf06:	4b2e      	ldr	r3, [pc, #184]	; (801bfc0 <_strtod_l+0x5a8>)
 801bf08:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801bf0c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801bf10:	4652      	mov	r2, sl
 801bf12:	465b      	mov	r3, fp
 801bf14:	e9d9 0100 	ldrd	r0, r1, [r9]
 801bf18:	f7e4 fb7e 	bl	8000618 <__aeabi_dmul>
 801bf1c:	4b29      	ldr	r3, [pc, #164]	; (801bfc4 <_strtod_l+0x5ac>)
 801bf1e:	460a      	mov	r2, r1
 801bf20:	400b      	ands	r3, r1
 801bf22:	4929      	ldr	r1, [pc, #164]	; (801bfc8 <_strtod_l+0x5b0>)
 801bf24:	428b      	cmp	r3, r1
 801bf26:	4682      	mov	sl, r0
 801bf28:	d8be      	bhi.n	801bea8 <_strtod_l+0x490>
 801bf2a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801bf2e:	428b      	cmp	r3, r1
 801bf30:	bf86      	itte	hi
 801bf32:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801bfcc <_strtod_l+0x5b4>
 801bf36:	f04f 3aff 	movhi.w	sl, #4294967295
 801bf3a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801bf3e:	2300      	movs	r3, #0
 801bf40:	9304      	str	r3, [sp, #16]
 801bf42:	e081      	b.n	801c048 <_strtod_l+0x630>
 801bf44:	f018 0f01 	tst.w	r8, #1
 801bf48:	d007      	beq.n	801bf5a <_strtod_l+0x542>
 801bf4a:	4b1d      	ldr	r3, [pc, #116]	; (801bfc0 <_strtod_l+0x5a8>)
 801bf4c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801bf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf54:	f7e4 fb60 	bl	8000618 <__aeabi_dmul>
 801bf58:	2301      	movs	r3, #1
 801bf5a:	f109 0901 	add.w	r9, r9, #1
 801bf5e:	ea4f 0868 	mov.w	r8, r8, asr #1
 801bf62:	e7ca      	b.n	801befa <_strtod_l+0x4e2>
 801bf64:	d0eb      	beq.n	801bf3e <_strtod_l+0x526>
 801bf66:	f1c8 0800 	rsb	r8, r8, #0
 801bf6a:	f018 020f 	ands.w	r2, r8, #15
 801bf6e:	d00a      	beq.n	801bf86 <_strtod_l+0x56e>
 801bf70:	4b12      	ldr	r3, [pc, #72]	; (801bfbc <_strtod_l+0x5a4>)
 801bf72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bf76:	4650      	mov	r0, sl
 801bf78:	4659      	mov	r1, fp
 801bf7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf7e:	f7e4 fc75 	bl	800086c <__aeabi_ddiv>
 801bf82:	4682      	mov	sl, r0
 801bf84:	468b      	mov	fp, r1
 801bf86:	ea5f 1828 	movs.w	r8, r8, asr #4
 801bf8a:	d0d8      	beq.n	801bf3e <_strtod_l+0x526>
 801bf8c:	f1b8 0f1f 	cmp.w	r8, #31
 801bf90:	dd1e      	ble.n	801bfd0 <_strtod_l+0x5b8>
 801bf92:	2500      	movs	r5, #0
 801bf94:	462e      	mov	r6, r5
 801bf96:	9509      	str	r5, [sp, #36]	; 0x24
 801bf98:	9507      	str	r5, [sp, #28]
 801bf9a:	2322      	movs	r3, #34	; 0x22
 801bf9c:	f04f 0a00 	mov.w	sl, #0
 801bfa0:	f04f 0b00 	mov.w	fp, #0
 801bfa4:	6023      	str	r3, [r4, #0]
 801bfa6:	e789      	b.n	801bebc <_strtod_l+0x4a4>
 801bfa8:	080218bd 	.word	0x080218bd
 801bfac:	080218fc 	.word	0x080218fc
 801bfb0:	080218b5 	.word	0x080218b5
 801bfb4:	08021977 	.word	0x08021977
 801bfb8:	08021973 	.word	0x08021973
 801bfbc:	08021b10 	.word	0x08021b10
 801bfc0:	08021ae8 	.word	0x08021ae8
 801bfc4:	7ff00000 	.word	0x7ff00000
 801bfc8:	7ca00000 	.word	0x7ca00000
 801bfcc:	7fefffff 	.word	0x7fefffff
 801bfd0:	f018 0310 	ands.w	r3, r8, #16
 801bfd4:	bf18      	it	ne
 801bfd6:	236a      	movne	r3, #106	; 0x6a
 801bfd8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801c390 <_strtod_l+0x978>
 801bfdc:	9304      	str	r3, [sp, #16]
 801bfde:	4650      	mov	r0, sl
 801bfe0:	4659      	mov	r1, fp
 801bfe2:	2300      	movs	r3, #0
 801bfe4:	f018 0f01 	tst.w	r8, #1
 801bfe8:	d004      	beq.n	801bff4 <_strtod_l+0x5dc>
 801bfea:	e9d9 2300 	ldrd	r2, r3, [r9]
 801bfee:	f7e4 fb13 	bl	8000618 <__aeabi_dmul>
 801bff2:	2301      	movs	r3, #1
 801bff4:	ea5f 0868 	movs.w	r8, r8, asr #1
 801bff8:	f109 0908 	add.w	r9, r9, #8
 801bffc:	d1f2      	bne.n	801bfe4 <_strtod_l+0x5cc>
 801bffe:	b10b      	cbz	r3, 801c004 <_strtod_l+0x5ec>
 801c000:	4682      	mov	sl, r0
 801c002:	468b      	mov	fp, r1
 801c004:	9b04      	ldr	r3, [sp, #16]
 801c006:	b1bb      	cbz	r3, 801c038 <_strtod_l+0x620>
 801c008:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801c00c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c010:	2b00      	cmp	r3, #0
 801c012:	4659      	mov	r1, fp
 801c014:	dd10      	ble.n	801c038 <_strtod_l+0x620>
 801c016:	2b1f      	cmp	r3, #31
 801c018:	f340 8128 	ble.w	801c26c <_strtod_l+0x854>
 801c01c:	2b34      	cmp	r3, #52	; 0x34
 801c01e:	bfde      	ittt	le
 801c020:	3b20      	suble	r3, #32
 801c022:	f04f 32ff 	movle.w	r2, #4294967295
 801c026:	fa02 f303 	lslle.w	r3, r2, r3
 801c02a:	f04f 0a00 	mov.w	sl, #0
 801c02e:	bfcc      	ite	gt
 801c030:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801c034:	ea03 0b01 	andle.w	fp, r3, r1
 801c038:	2200      	movs	r2, #0
 801c03a:	2300      	movs	r3, #0
 801c03c:	4650      	mov	r0, sl
 801c03e:	4659      	mov	r1, fp
 801c040:	f7e4 fd52 	bl	8000ae8 <__aeabi_dcmpeq>
 801c044:	2800      	cmp	r0, #0
 801c046:	d1a4      	bne.n	801bf92 <_strtod_l+0x57a>
 801c048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c04a:	9300      	str	r3, [sp, #0]
 801c04c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801c04e:	462b      	mov	r3, r5
 801c050:	463a      	mov	r2, r7
 801c052:	4620      	mov	r0, r4
 801c054:	f002 f944 	bl	801e2e0 <__s2b>
 801c058:	9009      	str	r0, [sp, #36]	; 0x24
 801c05a:	2800      	cmp	r0, #0
 801c05c:	f43f af24 	beq.w	801bea8 <_strtod_l+0x490>
 801c060:	9b07      	ldr	r3, [sp, #28]
 801c062:	1b9e      	subs	r6, r3, r6
 801c064:	9b08      	ldr	r3, [sp, #32]
 801c066:	2b00      	cmp	r3, #0
 801c068:	bfb4      	ite	lt
 801c06a:	4633      	movlt	r3, r6
 801c06c:	2300      	movge	r3, #0
 801c06e:	9310      	str	r3, [sp, #64]	; 0x40
 801c070:	9b08      	ldr	r3, [sp, #32]
 801c072:	2500      	movs	r5, #0
 801c074:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c078:	9318      	str	r3, [sp, #96]	; 0x60
 801c07a:	462e      	mov	r6, r5
 801c07c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c07e:	4620      	mov	r0, r4
 801c080:	6859      	ldr	r1, [r3, #4]
 801c082:	f002 f881 	bl	801e188 <_Balloc>
 801c086:	9007      	str	r0, [sp, #28]
 801c088:	2800      	cmp	r0, #0
 801c08a:	f43f af11 	beq.w	801beb0 <_strtod_l+0x498>
 801c08e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c090:	691a      	ldr	r2, [r3, #16]
 801c092:	3202      	adds	r2, #2
 801c094:	f103 010c 	add.w	r1, r3, #12
 801c098:	0092      	lsls	r2, r2, #2
 801c09a:	300c      	adds	r0, #12
 801c09c:	f7fe fb4e 	bl	801a73c <memcpy>
 801c0a0:	ec4b ab10 	vmov	d0, sl, fp
 801c0a4:	aa20      	add	r2, sp, #128	; 0x80
 801c0a6:	a91f      	add	r1, sp, #124	; 0x7c
 801c0a8:	4620      	mov	r0, r4
 801c0aa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801c0ae:	f002 fc53 	bl	801e958 <__d2b>
 801c0b2:	901e      	str	r0, [sp, #120]	; 0x78
 801c0b4:	2800      	cmp	r0, #0
 801c0b6:	f43f aefb 	beq.w	801beb0 <_strtod_l+0x498>
 801c0ba:	2101      	movs	r1, #1
 801c0bc:	4620      	mov	r0, r4
 801c0be:	f002 f9a9 	bl	801e414 <__i2b>
 801c0c2:	4606      	mov	r6, r0
 801c0c4:	2800      	cmp	r0, #0
 801c0c6:	f43f aef3 	beq.w	801beb0 <_strtod_l+0x498>
 801c0ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c0cc:	9904      	ldr	r1, [sp, #16]
 801c0ce:	2b00      	cmp	r3, #0
 801c0d0:	bfab      	itete	ge
 801c0d2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801c0d4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801c0d6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801c0d8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801c0dc:	bfac      	ite	ge
 801c0de:	eb03 0902 	addge.w	r9, r3, r2
 801c0e2:	1ad7      	sublt	r7, r2, r3
 801c0e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c0e6:	eba3 0801 	sub.w	r8, r3, r1
 801c0ea:	4490      	add	r8, r2
 801c0ec:	4ba3      	ldr	r3, [pc, #652]	; (801c37c <_strtod_l+0x964>)
 801c0ee:	f108 38ff 	add.w	r8, r8, #4294967295
 801c0f2:	4598      	cmp	r8, r3
 801c0f4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801c0f8:	f280 80cc 	bge.w	801c294 <_strtod_l+0x87c>
 801c0fc:	eba3 0308 	sub.w	r3, r3, r8
 801c100:	2b1f      	cmp	r3, #31
 801c102:	eba2 0203 	sub.w	r2, r2, r3
 801c106:	f04f 0101 	mov.w	r1, #1
 801c10a:	f300 80b6 	bgt.w	801c27a <_strtod_l+0x862>
 801c10e:	fa01 f303 	lsl.w	r3, r1, r3
 801c112:	9311      	str	r3, [sp, #68]	; 0x44
 801c114:	2300      	movs	r3, #0
 801c116:	930c      	str	r3, [sp, #48]	; 0x30
 801c118:	eb09 0802 	add.w	r8, r9, r2
 801c11c:	9b04      	ldr	r3, [sp, #16]
 801c11e:	45c1      	cmp	r9, r8
 801c120:	4417      	add	r7, r2
 801c122:	441f      	add	r7, r3
 801c124:	464b      	mov	r3, r9
 801c126:	bfa8      	it	ge
 801c128:	4643      	movge	r3, r8
 801c12a:	42bb      	cmp	r3, r7
 801c12c:	bfa8      	it	ge
 801c12e:	463b      	movge	r3, r7
 801c130:	2b00      	cmp	r3, #0
 801c132:	bfc2      	ittt	gt
 801c134:	eba8 0803 	subgt.w	r8, r8, r3
 801c138:	1aff      	subgt	r7, r7, r3
 801c13a:	eba9 0903 	subgt.w	r9, r9, r3
 801c13e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c140:	2b00      	cmp	r3, #0
 801c142:	dd17      	ble.n	801c174 <_strtod_l+0x75c>
 801c144:	4631      	mov	r1, r6
 801c146:	461a      	mov	r2, r3
 801c148:	4620      	mov	r0, r4
 801c14a:	f002 fa1f 	bl	801e58c <__pow5mult>
 801c14e:	4606      	mov	r6, r0
 801c150:	2800      	cmp	r0, #0
 801c152:	f43f aead 	beq.w	801beb0 <_strtod_l+0x498>
 801c156:	4601      	mov	r1, r0
 801c158:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801c15a:	4620      	mov	r0, r4
 801c15c:	f002 f970 	bl	801e440 <__multiply>
 801c160:	900f      	str	r0, [sp, #60]	; 0x3c
 801c162:	2800      	cmp	r0, #0
 801c164:	f43f aea4 	beq.w	801beb0 <_strtod_l+0x498>
 801c168:	991e      	ldr	r1, [sp, #120]	; 0x78
 801c16a:	4620      	mov	r0, r4
 801c16c:	f002 f84c 	bl	801e208 <_Bfree>
 801c170:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c172:	931e      	str	r3, [sp, #120]	; 0x78
 801c174:	f1b8 0f00 	cmp.w	r8, #0
 801c178:	f300 8091 	bgt.w	801c29e <_strtod_l+0x886>
 801c17c:	9b08      	ldr	r3, [sp, #32]
 801c17e:	2b00      	cmp	r3, #0
 801c180:	dd08      	ble.n	801c194 <_strtod_l+0x77c>
 801c182:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c184:	9907      	ldr	r1, [sp, #28]
 801c186:	4620      	mov	r0, r4
 801c188:	f002 fa00 	bl	801e58c <__pow5mult>
 801c18c:	9007      	str	r0, [sp, #28]
 801c18e:	2800      	cmp	r0, #0
 801c190:	f43f ae8e 	beq.w	801beb0 <_strtod_l+0x498>
 801c194:	2f00      	cmp	r7, #0
 801c196:	dd08      	ble.n	801c1aa <_strtod_l+0x792>
 801c198:	9907      	ldr	r1, [sp, #28]
 801c19a:	463a      	mov	r2, r7
 801c19c:	4620      	mov	r0, r4
 801c19e:	f002 fa4f 	bl	801e640 <__lshift>
 801c1a2:	9007      	str	r0, [sp, #28]
 801c1a4:	2800      	cmp	r0, #0
 801c1a6:	f43f ae83 	beq.w	801beb0 <_strtod_l+0x498>
 801c1aa:	f1b9 0f00 	cmp.w	r9, #0
 801c1ae:	dd08      	ble.n	801c1c2 <_strtod_l+0x7aa>
 801c1b0:	4631      	mov	r1, r6
 801c1b2:	464a      	mov	r2, r9
 801c1b4:	4620      	mov	r0, r4
 801c1b6:	f002 fa43 	bl	801e640 <__lshift>
 801c1ba:	4606      	mov	r6, r0
 801c1bc:	2800      	cmp	r0, #0
 801c1be:	f43f ae77 	beq.w	801beb0 <_strtod_l+0x498>
 801c1c2:	9a07      	ldr	r2, [sp, #28]
 801c1c4:	991e      	ldr	r1, [sp, #120]	; 0x78
 801c1c6:	4620      	mov	r0, r4
 801c1c8:	f002 fac2 	bl	801e750 <__mdiff>
 801c1cc:	4605      	mov	r5, r0
 801c1ce:	2800      	cmp	r0, #0
 801c1d0:	f43f ae6e 	beq.w	801beb0 <_strtod_l+0x498>
 801c1d4:	68c3      	ldr	r3, [r0, #12]
 801c1d6:	930f      	str	r3, [sp, #60]	; 0x3c
 801c1d8:	2300      	movs	r3, #0
 801c1da:	60c3      	str	r3, [r0, #12]
 801c1dc:	4631      	mov	r1, r6
 801c1de:	f002 fa9b 	bl	801e718 <__mcmp>
 801c1e2:	2800      	cmp	r0, #0
 801c1e4:	da65      	bge.n	801c2b2 <_strtod_l+0x89a>
 801c1e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c1e8:	ea53 030a 	orrs.w	r3, r3, sl
 801c1ec:	f040 8087 	bne.w	801c2fe <_strtod_l+0x8e6>
 801c1f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c1f4:	2b00      	cmp	r3, #0
 801c1f6:	f040 8082 	bne.w	801c2fe <_strtod_l+0x8e6>
 801c1fa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c1fe:	0d1b      	lsrs	r3, r3, #20
 801c200:	051b      	lsls	r3, r3, #20
 801c202:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801c206:	d97a      	bls.n	801c2fe <_strtod_l+0x8e6>
 801c208:	696b      	ldr	r3, [r5, #20]
 801c20a:	b913      	cbnz	r3, 801c212 <_strtod_l+0x7fa>
 801c20c:	692b      	ldr	r3, [r5, #16]
 801c20e:	2b01      	cmp	r3, #1
 801c210:	dd75      	ble.n	801c2fe <_strtod_l+0x8e6>
 801c212:	4629      	mov	r1, r5
 801c214:	2201      	movs	r2, #1
 801c216:	4620      	mov	r0, r4
 801c218:	f002 fa12 	bl	801e640 <__lshift>
 801c21c:	4631      	mov	r1, r6
 801c21e:	4605      	mov	r5, r0
 801c220:	f002 fa7a 	bl	801e718 <__mcmp>
 801c224:	2800      	cmp	r0, #0
 801c226:	dd6a      	ble.n	801c2fe <_strtod_l+0x8e6>
 801c228:	9904      	ldr	r1, [sp, #16]
 801c22a:	4a55      	ldr	r2, [pc, #340]	; (801c380 <_strtod_l+0x968>)
 801c22c:	465b      	mov	r3, fp
 801c22e:	2900      	cmp	r1, #0
 801c230:	f000 8085 	beq.w	801c33e <_strtod_l+0x926>
 801c234:	ea02 010b 	and.w	r1, r2, fp
 801c238:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801c23c:	dc7f      	bgt.n	801c33e <_strtod_l+0x926>
 801c23e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801c242:	f77f aeaa 	ble.w	801bf9a <_strtod_l+0x582>
 801c246:	4a4f      	ldr	r2, [pc, #316]	; (801c384 <_strtod_l+0x96c>)
 801c248:	2300      	movs	r3, #0
 801c24a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801c24e:	4650      	mov	r0, sl
 801c250:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801c254:	4659      	mov	r1, fp
 801c256:	f7e4 f9df 	bl	8000618 <__aeabi_dmul>
 801c25a:	460b      	mov	r3, r1
 801c25c:	4303      	orrs	r3, r0
 801c25e:	bf08      	it	eq
 801c260:	2322      	moveq	r3, #34	; 0x22
 801c262:	4682      	mov	sl, r0
 801c264:	468b      	mov	fp, r1
 801c266:	bf08      	it	eq
 801c268:	6023      	streq	r3, [r4, #0]
 801c26a:	e62b      	b.n	801bec4 <_strtod_l+0x4ac>
 801c26c:	f04f 32ff 	mov.w	r2, #4294967295
 801c270:	fa02 f303 	lsl.w	r3, r2, r3
 801c274:	ea03 0a0a 	and.w	sl, r3, sl
 801c278:	e6de      	b.n	801c038 <_strtod_l+0x620>
 801c27a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801c27e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801c282:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801c286:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801c28a:	fa01 f308 	lsl.w	r3, r1, r8
 801c28e:	930c      	str	r3, [sp, #48]	; 0x30
 801c290:	9111      	str	r1, [sp, #68]	; 0x44
 801c292:	e741      	b.n	801c118 <_strtod_l+0x700>
 801c294:	2300      	movs	r3, #0
 801c296:	930c      	str	r3, [sp, #48]	; 0x30
 801c298:	2301      	movs	r3, #1
 801c29a:	9311      	str	r3, [sp, #68]	; 0x44
 801c29c:	e73c      	b.n	801c118 <_strtod_l+0x700>
 801c29e:	991e      	ldr	r1, [sp, #120]	; 0x78
 801c2a0:	4642      	mov	r2, r8
 801c2a2:	4620      	mov	r0, r4
 801c2a4:	f002 f9cc 	bl	801e640 <__lshift>
 801c2a8:	901e      	str	r0, [sp, #120]	; 0x78
 801c2aa:	2800      	cmp	r0, #0
 801c2ac:	f47f af66 	bne.w	801c17c <_strtod_l+0x764>
 801c2b0:	e5fe      	b.n	801beb0 <_strtod_l+0x498>
 801c2b2:	465f      	mov	r7, fp
 801c2b4:	d16e      	bne.n	801c394 <_strtod_l+0x97c>
 801c2b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c2b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c2bc:	b342      	cbz	r2, 801c310 <_strtod_l+0x8f8>
 801c2be:	4a32      	ldr	r2, [pc, #200]	; (801c388 <_strtod_l+0x970>)
 801c2c0:	4293      	cmp	r3, r2
 801c2c2:	d128      	bne.n	801c316 <_strtod_l+0x8fe>
 801c2c4:	9b04      	ldr	r3, [sp, #16]
 801c2c6:	4650      	mov	r0, sl
 801c2c8:	b1eb      	cbz	r3, 801c306 <_strtod_l+0x8ee>
 801c2ca:	4a2d      	ldr	r2, [pc, #180]	; (801c380 <_strtod_l+0x968>)
 801c2cc:	403a      	ands	r2, r7
 801c2ce:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801c2d2:	f04f 31ff 	mov.w	r1, #4294967295
 801c2d6:	d819      	bhi.n	801c30c <_strtod_l+0x8f4>
 801c2d8:	0d12      	lsrs	r2, r2, #20
 801c2da:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801c2de:	fa01 f303 	lsl.w	r3, r1, r3
 801c2e2:	4298      	cmp	r0, r3
 801c2e4:	d117      	bne.n	801c316 <_strtod_l+0x8fe>
 801c2e6:	4b29      	ldr	r3, [pc, #164]	; (801c38c <_strtod_l+0x974>)
 801c2e8:	429f      	cmp	r7, r3
 801c2ea:	d102      	bne.n	801c2f2 <_strtod_l+0x8da>
 801c2ec:	3001      	adds	r0, #1
 801c2ee:	f43f addf 	beq.w	801beb0 <_strtod_l+0x498>
 801c2f2:	4b23      	ldr	r3, [pc, #140]	; (801c380 <_strtod_l+0x968>)
 801c2f4:	403b      	ands	r3, r7
 801c2f6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801c2fa:	f04f 0a00 	mov.w	sl, #0
 801c2fe:	9b04      	ldr	r3, [sp, #16]
 801c300:	2b00      	cmp	r3, #0
 801c302:	d1a0      	bne.n	801c246 <_strtod_l+0x82e>
 801c304:	e5de      	b.n	801bec4 <_strtod_l+0x4ac>
 801c306:	f04f 33ff 	mov.w	r3, #4294967295
 801c30a:	e7ea      	b.n	801c2e2 <_strtod_l+0x8ca>
 801c30c:	460b      	mov	r3, r1
 801c30e:	e7e8      	b.n	801c2e2 <_strtod_l+0x8ca>
 801c310:	ea53 030a 	orrs.w	r3, r3, sl
 801c314:	d088      	beq.n	801c228 <_strtod_l+0x810>
 801c316:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c318:	b1db      	cbz	r3, 801c352 <_strtod_l+0x93a>
 801c31a:	423b      	tst	r3, r7
 801c31c:	d0ef      	beq.n	801c2fe <_strtod_l+0x8e6>
 801c31e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c320:	9a04      	ldr	r2, [sp, #16]
 801c322:	4650      	mov	r0, sl
 801c324:	4659      	mov	r1, fp
 801c326:	b1c3      	cbz	r3, 801c35a <_strtod_l+0x942>
 801c328:	f7ff fb59 	bl	801b9de <sulp>
 801c32c:	4602      	mov	r2, r0
 801c32e:	460b      	mov	r3, r1
 801c330:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c334:	f7e3 ffba 	bl	80002ac <__adddf3>
 801c338:	4682      	mov	sl, r0
 801c33a:	468b      	mov	fp, r1
 801c33c:	e7df      	b.n	801c2fe <_strtod_l+0x8e6>
 801c33e:	4013      	ands	r3, r2
 801c340:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801c344:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801c348:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801c34c:	f04f 3aff 	mov.w	sl, #4294967295
 801c350:	e7d5      	b.n	801c2fe <_strtod_l+0x8e6>
 801c352:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c354:	ea13 0f0a 	tst.w	r3, sl
 801c358:	e7e0      	b.n	801c31c <_strtod_l+0x904>
 801c35a:	f7ff fb40 	bl	801b9de <sulp>
 801c35e:	4602      	mov	r2, r0
 801c360:	460b      	mov	r3, r1
 801c362:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c366:	f7e3 ff9f 	bl	80002a8 <__aeabi_dsub>
 801c36a:	2200      	movs	r2, #0
 801c36c:	2300      	movs	r3, #0
 801c36e:	4682      	mov	sl, r0
 801c370:	468b      	mov	fp, r1
 801c372:	f7e4 fbb9 	bl	8000ae8 <__aeabi_dcmpeq>
 801c376:	2800      	cmp	r0, #0
 801c378:	d0c1      	beq.n	801c2fe <_strtod_l+0x8e6>
 801c37a:	e60e      	b.n	801bf9a <_strtod_l+0x582>
 801c37c:	fffffc02 	.word	0xfffffc02
 801c380:	7ff00000 	.word	0x7ff00000
 801c384:	39500000 	.word	0x39500000
 801c388:	000fffff 	.word	0x000fffff
 801c38c:	7fefffff 	.word	0x7fefffff
 801c390:	08021910 	.word	0x08021910
 801c394:	4631      	mov	r1, r6
 801c396:	4628      	mov	r0, r5
 801c398:	f002 fb3a 	bl	801ea10 <__ratio>
 801c39c:	ec59 8b10 	vmov	r8, r9, d0
 801c3a0:	ee10 0a10 	vmov	r0, s0
 801c3a4:	2200      	movs	r2, #0
 801c3a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c3aa:	4649      	mov	r1, r9
 801c3ac:	f7e4 fbb0 	bl	8000b10 <__aeabi_dcmple>
 801c3b0:	2800      	cmp	r0, #0
 801c3b2:	d07c      	beq.n	801c4ae <_strtod_l+0xa96>
 801c3b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c3b6:	2b00      	cmp	r3, #0
 801c3b8:	d04c      	beq.n	801c454 <_strtod_l+0xa3c>
 801c3ba:	4b95      	ldr	r3, [pc, #596]	; (801c610 <_strtod_l+0xbf8>)
 801c3bc:	2200      	movs	r2, #0
 801c3be:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801c3c2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801c610 <_strtod_l+0xbf8>
 801c3c6:	f04f 0800 	mov.w	r8, #0
 801c3ca:	4b92      	ldr	r3, [pc, #584]	; (801c614 <_strtod_l+0xbfc>)
 801c3cc:	403b      	ands	r3, r7
 801c3ce:	9311      	str	r3, [sp, #68]	; 0x44
 801c3d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c3d2:	4b91      	ldr	r3, [pc, #580]	; (801c618 <_strtod_l+0xc00>)
 801c3d4:	429a      	cmp	r2, r3
 801c3d6:	f040 80b2 	bne.w	801c53e <_strtod_l+0xb26>
 801c3da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c3de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c3e2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801c3e6:	ec4b ab10 	vmov	d0, sl, fp
 801c3ea:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801c3ee:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801c3f2:	f002 fa35 	bl	801e860 <__ulp>
 801c3f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c3fa:	ec53 2b10 	vmov	r2, r3, d0
 801c3fe:	f7e4 f90b 	bl	8000618 <__aeabi_dmul>
 801c402:	4652      	mov	r2, sl
 801c404:	465b      	mov	r3, fp
 801c406:	f7e3 ff51 	bl	80002ac <__adddf3>
 801c40a:	460b      	mov	r3, r1
 801c40c:	4981      	ldr	r1, [pc, #516]	; (801c614 <_strtod_l+0xbfc>)
 801c40e:	4a83      	ldr	r2, [pc, #524]	; (801c61c <_strtod_l+0xc04>)
 801c410:	4019      	ands	r1, r3
 801c412:	4291      	cmp	r1, r2
 801c414:	4682      	mov	sl, r0
 801c416:	d95e      	bls.n	801c4d6 <_strtod_l+0xabe>
 801c418:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c41a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801c41e:	4293      	cmp	r3, r2
 801c420:	d103      	bne.n	801c42a <_strtod_l+0xa12>
 801c422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c424:	3301      	adds	r3, #1
 801c426:	f43f ad43 	beq.w	801beb0 <_strtod_l+0x498>
 801c42a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801c628 <_strtod_l+0xc10>
 801c42e:	f04f 3aff 	mov.w	sl, #4294967295
 801c432:	991e      	ldr	r1, [sp, #120]	; 0x78
 801c434:	4620      	mov	r0, r4
 801c436:	f001 fee7 	bl	801e208 <_Bfree>
 801c43a:	9907      	ldr	r1, [sp, #28]
 801c43c:	4620      	mov	r0, r4
 801c43e:	f001 fee3 	bl	801e208 <_Bfree>
 801c442:	4631      	mov	r1, r6
 801c444:	4620      	mov	r0, r4
 801c446:	f001 fedf 	bl	801e208 <_Bfree>
 801c44a:	4629      	mov	r1, r5
 801c44c:	4620      	mov	r0, r4
 801c44e:	f001 fedb 	bl	801e208 <_Bfree>
 801c452:	e613      	b.n	801c07c <_strtod_l+0x664>
 801c454:	f1ba 0f00 	cmp.w	sl, #0
 801c458:	d11b      	bne.n	801c492 <_strtod_l+0xa7a>
 801c45a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c45e:	b9f3      	cbnz	r3, 801c49e <_strtod_l+0xa86>
 801c460:	4b6b      	ldr	r3, [pc, #428]	; (801c610 <_strtod_l+0xbf8>)
 801c462:	2200      	movs	r2, #0
 801c464:	4640      	mov	r0, r8
 801c466:	4649      	mov	r1, r9
 801c468:	f7e4 fb48 	bl	8000afc <__aeabi_dcmplt>
 801c46c:	b9d0      	cbnz	r0, 801c4a4 <_strtod_l+0xa8c>
 801c46e:	4640      	mov	r0, r8
 801c470:	4649      	mov	r1, r9
 801c472:	4b6b      	ldr	r3, [pc, #428]	; (801c620 <_strtod_l+0xc08>)
 801c474:	2200      	movs	r2, #0
 801c476:	f7e4 f8cf 	bl	8000618 <__aeabi_dmul>
 801c47a:	4680      	mov	r8, r0
 801c47c:	4689      	mov	r9, r1
 801c47e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801c482:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801c486:	931b      	str	r3, [sp, #108]	; 0x6c
 801c488:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801c48c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801c490:	e79b      	b.n	801c3ca <_strtod_l+0x9b2>
 801c492:	f1ba 0f01 	cmp.w	sl, #1
 801c496:	d102      	bne.n	801c49e <_strtod_l+0xa86>
 801c498:	2f00      	cmp	r7, #0
 801c49a:	f43f ad7e 	beq.w	801bf9a <_strtod_l+0x582>
 801c49e:	4b61      	ldr	r3, [pc, #388]	; (801c624 <_strtod_l+0xc0c>)
 801c4a0:	2200      	movs	r2, #0
 801c4a2:	e78c      	b.n	801c3be <_strtod_l+0x9a6>
 801c4a4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801c620 <_strtod_l+0xc08>
 801c4a8:	f04f 0800 	mov.w	r8, #0
 801c4ac:	e7e7      	b.n	801c47e <_strtod_l+0xa66>
 801c4ae:	4b5c      	ldr	r3, [pc, #368]	; (801c620 <_strtod_l+0xc08>)
 801c4b0:	4640      	mov	r0, r8
 801c4b2:	4649      	mov	r1, r9
 801c4b4:	2200      	movs	r2, #0
 801c4b6:	f7e4 f8af 	bl	8000618 <__aeabi_dmul>
 801c4ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c4bc:	4680      	mov	r8, r0
 801c4be:	4689      	mov	r9, r1
 801c4c0:	b933      	cbnz	r3, 801c4d0 <_strtod_l+0xab8>
 801c4c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c4c6:	9012      	str	r0, [sp, #72]	; 0x48
 801c4c8:	9313      	str	r3, [sp, #76]	; 0x4c
 801c4ca:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801c4ce:	e7dd      	b.n	801c48c <_strtod_l+0xa74>
 801c4d0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801c4d4:	e7f9      	b.n	801c4ca <_strtod_l+0xab2>
 801c4d6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801c4da:	9b04      	ldr	r3, [sp, #16]
 801c4dc:	2b00      	cmp	r3, #0
 801c4de:	d1a8      	bne.n	801c432 <_strtod_l+0xa1a>
 801c4e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c4e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c4e6:	0d1b      	lsrs	r3, r3, #20
 801c4e8:	051b      	lsls	r3, r3, #20
 801c4ea:	429a      	cmp	r2, r3
 801c4ec:	d1a1      	bne.n	801c432 <_strtod_l+0xa1a>
 801c4ee:	4640      	mov	r0, r8
 801c4f0:	4649      	mov	r1, r9
 801c4f2:	f7e4 fbf1 	bl	8000cd8 <__aeabi_d2lz>
 801c4f6:	f7e4 f861 	bl	80005bc <__aeabi_l2d>
 801c4fa:	4602      	mov	r2, r0
 801c4fc:	460b      	mov	r3, r1
 801c4fe:	4640      	mov	r0, r8
 801c500:	4649      	mov	r1, r9
 801c502:	f7e3 fed1 	bl	80002a8 <__aeabi_dsub>
 801c506:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c508:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c50c:	ea43 030a 	orr.w	r3, r3, sl
 801c510:	4313      	orrs	r3, r2
 801c512:	4680      	mov	r8, r0
 801c514:	4689      	mov	r9, r1
 801c516:	d053      	beq.n	801c5c0 <_strtod_l+0xba8>
 801c518:	a335      	add	r3, pc, #212	; (adr r3, 801c5f0 <_strtod_l+0xbd8>)
 801c51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c51e:	f7e4 faed 	bl	8000afc <__aeabi_dcmplt>
 801c522:	2800      	cmp	r0, #0
 801c524:	f47f acce 	bne.w	801bec4 <_strtod_l+0x4ac>
 801c528:	a333      	add	r3, pc, #204	; (adr r3, 801c5f8 <_strtod_l+0xbe0>)
 801c52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c52e:	4640      	mov	r0, r8
 801c530:	4649      	mov	r1, r9
 801c532:	f7e4 fb01 	bl	8000b38 <__aeabi_dcmpgt>
 801c536:	2800      	cmp	r0, #0
 801c538:	f43f af7b 	beq.w	801c432 <_strtod_l+0xa1a>
 801c53c:	e4c2      	b.n	801bec4 <_strtod_l+0x4ac>
 801c53e:	9b04      	ldr	r3, [sp, #16]
 801c540:	b333      	cbz	r3, 801c590 <_strtod_l+0xb78>
 801c542:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c544:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801c548:	d822      	bhi.n	801c590 <_strtod_l+0xb78>
 801c54a:	a32d      	add	r3, pc, #180	; (adr r3, 801c600 <_strtod_l+0xbe8>)
 801c54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c550:	4640      	mov	r0, r8
 801c552:	4649      	mov	r1, r9
 801c554:	f7e4 fadc 	bl	8000b10 <__aeabi_dcmple>
 801c558:	b1a0      	cbz	r0, 801c584 <_strtod_l+0xb6c>
 801c55a:	4649      	mov	r1, r9
 801c55c:	4640      	mov	r0, r8
 801c55e:	f7e4 fb33 	bl	8000bc8 <__aeabi_d2uiz>
 801c562:	2801      	cmp	r0, #1
 801c564:	bf38      	it	cc
 801c566:	2001      	movcc	r0, #1
 801c568:	f7e3 ffdc 	bl	8000524 <__aeabi_ui2d>
 801c56c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c56e:	4680      	mov	r8, r0
 801c570:	4689      	mov	r9, r1
 801c572:	bb13      	cbnz	r3, 801c5ba <_strtod_l+0xba2>
 801c574:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c578:	9014      	str	r0, [sp, #80]	; 0x50
 801c57a:	9315      	str	r3, [sp, #84]	; 0x54
 801c57c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801c580:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801c584:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c586:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c588:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801c58c:	1a9b      	subs	r3, r3, r2
 801c58e:	930d      	str	r3, [sp, #52]	; 0x34
 801c590:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c594:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801c598:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801c59c:	f002 f960 	bl	801e860 <__ulp>
 801c5a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c5a4:	ec53 2b10 	vmov	r2, r3, d0
 801c5a8:	f7e4 f836 	bl	8000618 <__aeabi_dmul>
 801c5ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c5b0:	f7e3 fe7c 	bl	80002ac <__adddf3>
 801c5b4:	4682      	mov	sl, r0
 801c5b6:	468b      	mov	fp, r1
 801c5b8:	e78f      	b.n	801c4da <_strtod_l+0xac2>
 801c5ba:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801c5be:	e7dd      	b.n	801c57c <_strtod_l+0xb64>
 801c5c0:	a311      	add	r3, pc, #68	; (adr r3, 801c608 <_strtod_l+0xbf0>)
 801c5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5c6:	f7e4 fa99 	bl	8000afc <__aeabi_dcmplt>
 801c5ca:	e7b4      	b.n	801c536 <_strtod_l+0xb1e>
 801c5cc:	2300      	movs	r3, #0
 801c5ce:	930e      	str	r3, [sp, #56]	; 0x38
 801c5d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801c5d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c5d4:	6013      	str	r3, [r2, #0]
 801c5d6:	f7ff ba65 	b.w	801baa4 <_strtod_l+0x8c>
 801c5da:	2b65      	cmp	r3, #101	; 0x65
 801c5dc:	f43f ab5d 	beq.w	801bc9a <_strtod_l+0x282>
 801c5e0:	2b45      	cmp	r3, #69	; 0x45
 801c5e2:	f43f ab5a 	beq.w	801bc9a <_strtod_l+0x282>
 801c5e6:	2201      	movs	r2, #1
 801c5e8:	f7ff bb92 	b.w	801bd10 <_strtod_l+0x2f8>
 801c5ec:	f3af 8000 	nop.w
 801c5f0:	94a03595 	.word	0x94a03595
 801c5f4:	3fdfffff 	.word	0x3fdfffff
 801c5f8:	35afe535 	.word	0x35afe535
 801c5fc:	3fe00000 	.word	0x3fe00000
 801c600:	ffc00000 	.word	0xffc00000
 801c604:	41dfffff 	.word	0x41dfffff
 801c608:	94a03595 	.word	0x94a03595
 801c60c:	3fcfffff 	.word	0x3fcfffff
 801c610:	3ff00000 	.word	0x3ff00000
 801c614:	7ff00000 	.word	0x7ff00000
 801c618:	7fe00000 	.word	0x7fe00000
 801c61c:	7c9fffff 	.word	0x7c9fffff
 801c620:	3fe00000 	.word	0x3fe00000
 801c624:	bff00000 	.word	0xbff00000
 801c628:	7fefffff 	.word	0x7fefffff

0801c62c <_strtod_r>:
 801c62c:	4b01      	ldr	r3, [pc, #4]	; (801c634 <_strtod_r+0x8>)
 801c62e:	f7ff b9f3 	b.w	801ba18 <_strtod_l>
 801c632:	bf00      	nop
 801c634:	20000260 	.word	0x20000260

0801c638 <_strtol_l.isra.0>:
 801c638:	2b01      	cmp	r3, #1
 801c63a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c63e:	d001      	beq.n	801c644 <_strtol_l.isra.0+0xc>
 801c640:	2b24      	cmp	r3, #36	; 0x24
 801c642:	d906      	bls.n	801c652 <_strtol_l.isra.0+0x1a>
 801c644:	f7fd ff4e 	bl	801a4e4 <__errno>
 801c648:	2316      	movs	r3, #22
 801c64a:	6003      	str	r3, [r0, #0]
 801c64c:	2000      	movs	r0, #0
 801c64e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c652:	4f3a      	ldr	r7, [pc, #232]	; (801c73c <_strtol_l.isra.0+0x104>)
 801c654:	468e      	mov	lr, r1
 801c656:	4676      	mov	r6, lr
 801c658:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801c65c:	5de5      	ldrb	r5, [r4, r7]
 801c65e:	f015 0508 	ands.w	r5, r5, #8
 801c662:	d1f8      	bne.n	801c656 <_strtol_l.isra.0+0x1e>
 801c664:	2c2d      	cmp	r4, #45	; 0x2d
 801c666:	d134      	bne.n	801c6d2 <_strtol_l.isra.0+0x9a>
 801c668:	f89e 4000 	ldrb.w	r4, [lr]
 801c66c:	f04f 0801 	mov.w	r8, #1
 801c670:	f106 0e02 	add.w	lr, r6, #2
 801c674:	2b00      	cmp	r3, #0
 801c676:	d05c      	beq.n	801c732 <_strtol_l.isra.0+0xfa>
 801c678:	2b10      	cmp	r3, #16
 801c67a:	d10c      	bne.n	801c696 <_strtol_l.isra.0+0x5e>
 801c67c:	2c30      	cmp	r4, #48	; 0x30
 801c67e:	d10a      	bne.n	801c696 <_strtol_l.isra.0+0x5e>
 801c680:	f89e 4000 	ldrb.w	r4, [lr]
 801c684:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801c688:	2c58      	cmp	r4, #88	; 0x58
 801c68a:	d14d      	bne.n	801c728 <_strtol_l.isra.0+0xf0>
 801c68c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801c690:	2310      	movs	r3, #16
 801c692:	f10e 0e02 	add.w	lr, lr, #2
 801c696:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801c69a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c69e:	2600      	movs	r6, #0
 801c6a0:	fbbc f9f3 	udiv	r9, ip, r3
 801c6a4:	4635      	mov	r5, r6
 801c6a6:	fb03 ca19 	mls	sl, r3, r9, ip
 801c6aa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801c6ae:	2f09      	cmp	r7, #9
 801c6b0:	d818      	bhi.n	801c6e4 <_strtol_l.isra.0+0xac>
 801c6b2:	463c      	mov	r4, r7
 801c6b4:	42a3      	cmp	r3, r4
 801c6b6:	dd24      	ble.n	801c702 <_strtol_l.isra.0+0xca>
 801c6b8:	2e00      	cmp	r6, #0
 801c6ba:	db1f      	blt.n	801c6fc <_strtol_l.isra.0+0xc4>
 801c6bc:	45a9      	cmp	r9, r5
 801c6be:	d31d      	bcc.n	801c6fc <_strtol_l.isra.0+0xc4>
 801c6c0:	d101      	bne.n	801c6c6 <_strtol_l.isra.0+0x8e>
 801c6c2:	45a2      	cmp	sl, r4
 801c6c4:	db1a      	blt.n	801c6fc <_strtol_l.isra.0+0xc4>
 801c6c6:	fb05 4503 	mla	r5, r5, r3, r4
 801c6ca:	2601      	movs	r6, #1
 801c6cc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801c6d0:	e7eb      	b.n	801c6aa <_strtol_l.isra.0+0x72>
 801c6d2:	2c2b      	cmp	r4, #43	; 0x2b
 801c6d4:	bf08      	it	eq
 801c6d6:	f89e 4000 	ldrbeq.w	r4, [lr]
 801c6da:	46a8      	mov	r8, r5
 801c6dc:	bf08      	it	eq
 801c6de:	f106 0e02 	addeq.w	lr, r6, #2
 801c6e2:	e7c7      	b.n	801c674 <_strtol_l.isra.0+0x3c>
 801c6e4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801c6e8:	2f19      	cmp	r7, #25
 801c6ea:	d801      	bhi.n	801c6f0 <_strtol_l.isra.0+0xb8>
 801c6ec:	3c37      	subs	r4, #55	; 0x37
 801c6ee:	e7e1      	b.n	801c6b4 <_strtol_l.isra.0+0x7c>
 801c6f0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801c6f4:	2f19      	cmp	r7, #25
 801c6f6:	d804      	bhi.n	801c702 <_strtol_l.isra.0+0xca>
 801c6f8:	3c57      	subs	r4, #87	; 0x57
 801c6fa:	e7db      	b.n	801c6b4 <_strtol_l.isra.0+0x7c>
 801c6fc:	f04f 36ff 	mov.w	r6, #4294967295
 801c700:	e7e4      	b.n	801c6cc <_strtol_l.isra.0+0x94>
 801c702:	2e00      	cmp	r6, #0
 801c704:	da05      	bge.n	801c712 <_strtol_l.isra.0+0xda>
 801c706:	2322      	movs	r3, #34	; 0x22
 801c708:	6003      	str	r3, [r0, #0]
 801c70a:	4665      	mov	r5, ip
 801c70c:	b942      	cbnz	r2, 801c720 <_strtol_l.isra.0+0xe8>
 801c70e:	4628      	mov	r0, r5
 801c710:	e79d      	b.n	801c64e <_strtol_l.isra.0+0x16>
 801c712:	f1b8 0f00 	cmp.w	r8, #0
 801c716:	d000      	beq.n	801c71a <_strtol_l.isra.0+0xe2>
 801c718:	426d      	negs	r5, r5
 801c71a:	2a00      	cmp	r2, #0
 801c71c:	d0f7      	beq.n	801c70e <_strtol_l.isra.0+0xd6>
 801c71e:	b10e      	cbz	r6, 801c724 <_strtol_l.isra.0+0xec>
 801c720:	f10e 31ff 	add.w	r1, lr, #4294967295
 801c724:	6011      	str	r1, [r2, #0]
 801c726:	e7f2      	b.n	801c70e <_strtol_l.isra.0+0xd6>
 801c728:	2430      	movs	r4, #48	; 0x30
 801c72a:	2b00      	cmp	r3, #0
 801c72c:	d1b3      	bne.n	801c696 <_strtol_l.isra.0+0x5e>
 801c72e:	2308      	movs	r3, #8
 801c730:	e7b1      	b.n	801c696 <_strtol_l.isra.0+0x5e>
 801c732:	2c30      	cmp	r4, #48	; 0x30
 801c734:	d0a4      	beq.n	801c680 <_strtol_l.isra.0+0x48>
 801c736:	230a      	movs	r3, #10
 801c738:	e7ad      	b.n	801c696 <_strtol_l.isra.0+0x5e>
 801c73a:	bf00      	nop
 801c73c:	08021749 	.word	0x08021749

0801c740 <_strtol_r>:
 801c740:	f7ff bf7a 	b.w	801c638 <_strtol_l.isra.0>

0801c744 <strtol>:
 801c744:	4613      	mov	r3, r2
 801c746:	460a      	mov	r2, r1
 801c748:	4601      	mov	r1, r0
 801c74a:	4802      	ldr	r0, [pc, #8]	; (801c754 <strtol+0x10>)
 801c74c:	6800      	ldr	r0, [r0, #0]
 801c74e:	f7ff bf73 	b.w	801c638 <_strtol_l.isra.0>
 801c752:	bf00      	nop
 801c754:	200001f8 	.word	0x200001f8

0801c758 <_strtoul_l.isra.0>:
 801c758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c75c:	4e3b      	ldr	r6, [pc, #236]	; (801c84c <_strtoul_l.isra.0+0xf4>)
 801c75e:	4686      	mov	lr, r0
 801c760:	468c      	mov	ip, r1
 801c762:	4660      	mov	r0, ip
 801c764:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801c768:	5da5      	ldrb	r5, [r4, r6]
 801c76a:	f015 0508 	ands.w	r5, r5, #8
 801c76e:	d1f8      	bne.n	801c762 <_strtoul_l.isra.0+0xa>
 801c770:	2c2d      	cmp	r4, #45	; 0x2d
 801c772:	d134      	bne.n	801c7de <_strtoul_l.isra.0+0x86>
 801c774:	f89c 4000 	ldrb.w	r4, [ip]
 801c778:	f04f 0801 	mov.w	r8, #1
 801c77c:	f100 0c02 	add.w	ip, r0, #2
 801c780:	2b00      	cmp	r3, #0
 801c782:	d05e      	beq.n	801c842 <_strtoul_l.isra.0+0xea>
 801c784:	2b10      	cmp	r3, #16
 801c786:	d10c      	bne.n	801c7a2 <_strtoul_l.isra.0+0x4a>
 801c788:	2c30      	cmp	r4, #48	; 0x30
 801c78a:	d10a      	bne.n	801c7a2 <_strtoul_l.isra.0+0x4a>
 801c78c:	f89c 0000 	ldrb.w	r0, [ip]
 801c790:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801c794:	2858      	cmp	r0, #88	; 0x58
 801c796:	d14f      	bne.n	801c838 <_strtoul_l.isra.0+0xe0>
 801c798:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801c79c:	2310      	movs	r3, #16
 801c79e:	f10c 0c02 	add.w	ip, ip, #2
 801c7a2:	f04f 37ff 	mov.w	r7, #4294967295
 801c7a6:	2500      	movs	r5, #0
 801c7a8:	fbb7 f7f3 	udiv	r7, r7, r3
 801c7ac:	fb03 f907 	mul.w	r9, r3, r7
 801c7b0:	ea6f 0909 	mvn.w	r9, r9
 801c7b4:	4628      	mov	r0, r5
 801c7b6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801c7ba:	2e09      	cmp	r6, #9
 801c7bc:	d818      	bhi.n	801c7f0 <_strtoul_l.isra.0+0x98>
 801c7be:	4634      	mov	r4, r6
 801c7c0:	42a3      	cmp	r3, r4
 801c7c2:	dd24      	ble.n	801c80e <_strtoul_l.isra.0+0xb6>
 801c7c4:	2d00      	cmp	r5, #0
 801c7c6:	db1f      	blt.n	801c808 <_strtoul_l.isra.0+0xb0>
 801c7c8:	4287      	cmp	r7, r0
 801c7ca:	d31d      	bcc.n	801c808 <_strtoul_l.isra.0+0xb0>
 801c7cc:	d101      	bne.n	801c7d2 <_strtoul_l.isra.0+0x7a>
 801c7ce:	45a1      	cmp	r9, r4
 801c7d0:	db1a      	blt.n	801c808 <_strtoul_l.isra.0+0xb0>
 801c7d2:	fb00 4003 	mla	r0, r0, r3, r4
 801c7d6:	2501      	movs	r5, #1
 801c7d8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801c7dc:	e7eb      	b.n	801c7b6 <_strtoul_l.isra.0+0x5e>
 801c7de:	2c2b      	cmp	r4, #43	; 0x2b
 801c7e0:	bf08      	it	eq
 801c7e2:	f89c 4000 	ldrbeq.w	r4, [ip]
 801c7e6:	46a8      	mov	r8, r5
 801c7e8:	bf08      	it	eq
 801c7ea:	f100 0c02 	addeq.w	ip, r0, #2
 801c7ee:	e7c7      	b.n	801c780 <_strtoul_l.isra.0+0x28>
 801c7f0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801c7f4:	2e19      	cmp	r6, #25
 801c7f6:	d801      	bhi.n	801c7fc <_strtoul_l.isra.0+0xa4>
 801c7f8:	3c37      	subs	r4, #55	; 0x37
 801c7fa:	e7e1      	b.n	801c7c0 <_strtoul_l.isra.0+0x68>
 801c7fc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801c800:	2e19      	cmp	r6, #25
 801c802:	d804      	bhi.n	801c80e <_strtoul_l.isra.0+0xb6>
 801c804:	3c57      	subs	r4, #87	; 0x57
 801c806:	e7db      	b.n	801c7c0 <_strtoul_l.isra.0+0x68>
 801c808:	f04f 35ff 	mov.w	r5, #4294967295
 801c80c:	e7e4      	b.n	801c7d8 <_strtoul_l.isra.0+0x80>
 801c80e:	2d00      	cmp	r5, #0
 801c810:	da07      	bge.n	801c822 <_strtoul_l.isra.0+0xca>
 801c812:	2322      	movs	r3, #34	; 0x22
 801c814:	f8ce 3000 	str.w	r3, [lr]
 801c818:	f04f 30ff 	mov.w	r0, #4294967295
 801c81c:	b942      	cbnz	r2, 801c830 <_strtoul_l.isra.0+0xd8>
 801c81e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c822:	f1b8 0f00 	cmp.w	r8, #0
 801c826:	d000      	beq.n	801c82a <_strtoul_l.isra.0+0xd2>
 801c828:	4240      	negs	r0, r0
 801c82a:	2a00      	cmp	r2, #0
 801c82c:	d0f7      	beq.n	801c81e <_strtoul_l.isra.0+0xc6>
 801c82e:	b10d      	cbz	r5, 801c834 <_strtoul_l.isra.0+0xdc>
 801c830:	f10c 31ff 	add.w	r1, ip, #4294967295
 801c834:	6011      	str	r1, [r2, #0]
 801c836:	e7f2      	b.n	801c81e <_strtoul_l.isra.0+0xc6>
 801c838:	2430      	movs	r4, #48	; 0x30
 801c83a:	2b00      	cmp	r3, #0
 801c83c:	d1b1      	bne.n	801c7a2 <_strtoul_l.isra.0+0x4a>
 801c83e:	2308      	movs	r3, #8
 801c840:	e7af      	b.n	801c7a2 <_strtoul_l.isra.0+0x4a>
 801c842:	2c30      	cmp	r4, #48	; 0x30
 801c844:	d0a2      	beq.n	801c78c <_strtoul_l.isra.0+0x34>
 801c846:	230a      	movs	r3, #10
 801c848:	e7ab      	b.n	801c7a2 <_strtoul_l.isra.0+0x4a>
 801c84a:	bf00      	nop
 801c84c:	08021749 	.word	0x08021749

0801c850 <_strtoul_r>:
 801c850:	f7ff bf82 	b.w	801c758 <_strtoul_l.isra.0>

0801c854 <strtoul>:
 801c854:	4613      	mov	r3, r2
 801c856:	460a      	mov	r2, r1
 801c858:	4601      	mov	r1, r0
 801c85a:	4802      	ldr	r0, [pc, #8]	; (801c864 <strtoul+0x10>)
 801c85c:	6800      	ldr	r0, [r0, #0]
 801c85e:	f7ff bf7b 	b.w	801c758 <_strtoul_l.isra.0>
 801c862:	bf00      	nop
 801c864:	200001f8 	.word	0x200001f8

0801c868 <_vsniprintf_r>:
 801c868:	b530      	push	{r4, r5, lr}
 801c86a:	1e14      	subs	r4, r2, #0
 801c86c:	4605      	mov	r5, r0
 801c86e:	b09b      	sub	sp, #108	; 0x6c
 801c870:	4618      	mov	r0, r3
 801c872:	da05      	bge.n	801c880 <_vsniprintf_r+0x18>
 801c874:	238b      	movs	r3, #139	; 0x8b
 801c876:	602b      	str	r3, [r5, #0]
 801c878:	f04f 30ff 	mov.w	r0, #4294967295
 801c87c:	b01b      	add	sp, #108	; 0x6c
 801c87e:	bd30      	pop	{r4, r5, pc}
 801c880:	f44f 7302 	mov.w	r3, #520	; 0x208
 801c884:	f8ad 300c 	strh.w	r3, [sp, #12]
 801c888:	bf14      	ite	ne
 801c88a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801c88e:	4623      	moveq	r3, r4
 801c890:	9302      	str	r3, [sp, #8]
 801c892:	9305      	str	r3, [sp, #20]
 801c894:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c898:	9100      	str	r1, [sp, #0]
 801c89a:	9104      	str	r1, [sp, #16]
 801c89c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c8a0:	4602      	mov	r2, r0
 801c8a2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c8a4:	4669      	mov	r1, sp
 801c8a6:	4628      	mov	r0, r5
 801c8a8:	f002 f9ba 	bl	801ec20 <_svfiprintf_r>
 801c8ac:	1c43      	adds	r3, r0, #1
 801c8ae:	bfbc      	itt	lt
 801c8b0:	238b      	movlt	r3, #139	; 0x8b
 801c8b2:	602b      	strlt	r3, [r5, #0]
 801c8b4:	2c00      	cmp	r4, #0
 801c8b6:	d0e1      	beq.n	801c87c <_vsniprintf_r+0x14>
 801c8b8:	9b00      	ldr	r3, [sp, #0]
 801c8ba:	2200      	movs	r2, #0
 801c8bc:	701a      	strb	r2, [r3, #0]
 801c8be:	e7dd      	b.n	801c87c <_vsniprintf_r+0x14>

0801c8c0 <vsniprintf>:
 801c8c0:	b507      	push	{r0, r1, r2, lr}
 801c8c2:	9300      	str	r3, [sp, #0]
 801c8c4:	4613      	mov	r3, r2
 801c8c6:	460a      	mov	r2, r1
 801c8c8:	4601      	mov	r1, r0
 801c8ca:	4803      	ldr	r0, [pc, #12]	; (801c8d8 <vsniprintf+0x18>)
 801c8cc:	6800      	ldr	r0, [r0, #0]
 801c8ce:	f7ff ffcb 	bl	801c868 <_vsniprintf_r>
 801c8d2:	b003      	add	sp, #12
 801c8d4:	f85d fb04 	ldr.w	pc, [sp], #4
 801c8d8:	200001f8 	.word	0x200001f8

0801c8dc <__swbuf_r>:
 801c8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c8de:	460e      	mov	r6, r1
 801c8e0:	4614      	mov	r4, r2
 801c8e2:	4605      	mov	r5, r0
 801c8e4:	b118      	cbz	r0, 801c8ee <__swbuf_r+0x12>
 801c8e6:	6983      	ldr	r3, [r0, #24]
 801c8e8:	b90b      	cbnz	r3, 801c8ee <__swbuf_r+0x12>
 801c8ea:	f7fd fe59 	bl	801a5a0 <__sinit>
 801c8ee:	4b21      	ldr	r3, [pc, #132]	; (801c974 <__swbuf_r+0x98>)
 801c8f0:	429c      	cmp	r4, r3
 801c8f2:	d12b      	bne.n	801c94c <__swbuf_r+0x70>
 801c8f4:	686c      	ldr	r4, [r5, #4]
 801c8f6:	69a3      	ldr	r3, [r4, #24]
 801c8f8:	60a3      	str	r3, [r4, #8]
 801c8fa:	89a3      	ldrh	r3, [r4, #12]
 801c8fc:	071a      	lsls	r2, r3, #28
 801c8fe:	d52f      	bpl.n	801c960 <__swbuf_r+0x84>
 801c900:	6923      	ldr	r3, [r4, #16]
 801c902:	b36b      	cbz	r3, 801c960 <__swbuf_r+0x84>
 801c904:	6923      	ldr	r3, [r4, #16]
 801c906:	6820      	ldr	r0, [r4, #0]
 801c908:	1ac0      	subs	r0, r0, r3
 801c90a:	6963      	ldr	r3, [r4, #20]
 801c90c:	b2f6      	uxtb	r6, r6
 801c90e:	4283      	cmp	r3, r0
 801c910:	4637      	mov	r7, r6
 801c912:	dc04      	bgt.n	801c91e <__swbuf_r+0x42>
 801c914:	4621      	mov	r1, r4
 801c916:	4628      	mov	r0, r5
 801c918:	f000 ffe0 	bl	801d8dc <_fflush_r>
 801c91c:	bb30      	cbnz	r0, 801c96c <__swbuf_r+0x90>
 801c91e:	68a3      	ldr	r3, [r4, #8]
 801c920:	3b01      	subs	r3, #1
 801c922:	60a3      	str	r3, [r4, #8]
 801c924:	6823      	ldr	r3, [r4, #0]
 801c926:	1c5a      	adds	r2, r3, #1
 801c928:	6022      	str	r2, [r4, #0]
 801c92a:	701e      	strb	r6, [r3, #0]
 801c92c:	6963      	ldr	r3, [r4, #20]
 801c92e:	3001      	adds	r0, #1
 801c930:	4283      	cmp	r3, r0
 801c932:	d004      	beq.n	801c93e <__swbuf_r+0x62>
 801c934:	89a3      	ldrh	r3, [r4, #12]
 801c936:	07db      	lsls	r3, r3, #31
 801c938:	d506      	bpl.n	801c948 <__swbuf_r+0x6c>
 801c93a:	2e0a      	cmp	r6, #10
 801c93c:	d104      	bne.n	801c948 <__swbuf_r+0x6c>
 801c93e:	4621      	mov	r1, r4
 801c940:	4628      	mov	r0, r5
 801c942:	f000 ffcb 	bl	801d8dc <_fflush_r>
 801c946:	b988      	cbnz	r0, 801c96c <__swbuf_r+0x90>
 801c948:	4638      	mov	r0, r7
 801c94a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c94c:	4b0a      	ldr	r3, [pc, #40]	; (801c978 <__swbuf_r+0x9c>)
 801c94e:	429c      	cmp	r4, r3
 801c950:	d101      	bne.n	801c956 <__swbuf_r+0x7a>
 801c952:	68ac      	ldr	r4, [r5, #8]
 801c954:	e7cf      	b.n	801c8f6 <__swbuf_r+0x1a>
 801c956:	4b09      	ldr	r3, [pc, #36]	; (801c97c <__swbuf_r+0xa0>)
 801c958:	429c      	cmp	r4, r3
 801c95a:	bf08      	it	eq
 801c95c:	68ec      	ldreq	r4, [r5, #12]
 801c95e:	e7ca      	b.n	801c8f6 <__swbuf_r+0x1a>
 801c960:	4621      	mov	r1, r4
 801c962:	4628      	mov	r0, r5
 801c964:	f000 f81e 	bl	801c9a4 <__swsetup_r>
 801c968:	2800      	cmp	r0, #0
 801c96a:	d0cb      	beq.n	801c904 <__swbuf_r+0x28>
 801c96c:	f04f 37ff 	mov.w	r7, #4294967295
 801c970:	e7ea      	b.n	801c948 <__swbuf_r+0x6c>
 801c972:	bf00      	nop
 801c974:	0802186c 	.word	0x0802186c
 801c978:	0802188c 	.word	0x0802188c
 801c97c:	0802184c 	.word	0x0802184c

0801c980 <_write_r>:
 801c980:	b538      	push	{r3, r4, r5, lr}
 801c982:	4d07      	ldr	r5, [pc, #28]	; (801c9a0 <_write_r+0x20>)
 801c984:	4604      	mov	r4, r0
 801c986:	4608      	mov	r0, r1
 801c988:	4611      	mov	r1, r2
 801c98a:	2200      	movs	r2, #0
 801c98c:	602a      	str	r2, [r5, #0]
 801c98e:	461a      	mov	r2, r3
 801c990:	f7e6 fc17 	bl	80031c2 <_write>
 801c994:	1c43      	adds	r3, r0, #1
 801c996:	d102      	bne.n	801c99e <_write_r+0x1e>
 801c998:	682b      	ldr	r3, [r5, #0]
 801c99a:	b103      	cbz	r3, 801c99e <_write_r+0x1e>
 801c99c:	6023      	str	r3, [r4, #0]
 801c99e:	bd38      	pop	{r3, r4, r5, pc}
 801c9a0:	20008fb4 	.word	0x20008fb4

0801c9a4 <__swsetup_r>:
 801c9a4:	4b32      	ldr	r3, [pc, #200]	; (801ca70 <__swsetup_r+0xcc>)
 801c9a6:	b570      	push	{r4, r5, r6, lr}
 801c9a8:	681d      	ldr	r5, [r3, #0]
 801c9aa:	4606      	mov	r6, r0
 801c9ac:	460c      	mov	r4, r1
 801c9ae:	b125      	cbz	r5, 801c9ba <__swsetup_r+0x16>
 801c9b0:	69ab      	ldr	r3, [r5, #24]
 801c9b2:	b913      	cbnz	r3, 801c9ba <__swsetup_r+0x16>
 801c9b4:	4628      	mov	r0, r5
 801c9b6:	f7fd fdf3 	bl	801a5a0 <__sinit>
 801c9ba:	4b2e      	ldr	r3, [pc, #184]	; (801ca74 <__swsetup_r+0xd0>)
 801c9bc:	429c      	cmp	r4, r3
 801c9be:	d10f      	bne.n	801c9e0 <__swsetup_r+0x3c>
 801c9c0:	686c      	ldr	r4, [r5, #4]
 801c9c2:	89a3      	ldrh	r3, [r4, #12]
 801c9c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c9c8:	0719      	lsls	r1, r3, #28
 801c9ca:	d42c      	bmi.n	801ca26 <__swsetup_r+0x82>
 801c9cc:	06dd      	lsls	r5, r3, #27
 801c9ce:	d411      	bmi.n	801c9f4 <__swsetup_r+0x50>
 801c9d0:	2309      	movs	r3, #9
 801c9d2:	6033      	str	r3, [r6, #0]
 801c9d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c9d8:	81a3      	strh	r3, [r4, #12]
 801c9da:	f04f 30ff 	mov.w	r0, #4294967295
 801c9de:	e03e      	b.n	801ca5e <__swsetup_r+0xba>
 801c9e0:	4b25      	ldr	r3, [pc, #148]	; (801ca78 <__swsetup_r+0xd4>)
 801c9e2:	429c      	cmp	r4, r3
 801c9e4:	d101      	bne.n	801c9ea <__swsetup_r+0x46>
 801c9e6:	68ac      	ldr	r4, [r5, #8]
 801c9e8:	e7eb      	b.n	801c9c2 <__swsetup_r+0x1e>
 801c9ea:	4b24      	ldr	r3, [pc, #144]	; (801ca7c <__swsetup_r+0xd8>)
 801c9ec:	429c      	cmp	r4, r3
 801c9ee:	bf08      	it	eq
 801c9f0:	68ec      	ldreq	r4, [r5, #12]
 801c9f2:	e7e6      	b.n	801c9c2 <__swsetup_r+0x1e>
 801c9f4:	0758      	lsls	r0, r3, #29
 801c9f6:	d512      	bpl.n	801ca1e <__swsetup_r+0x7a>
 801c9f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c9fa:	b141      	cbz	r1, 801ca0e <__swsetup_r+0x6a>
 801c9fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ca00:	4299      	cmp	r1, r3
 801ca02:	d002      	beq.n	801ca0a <__swsetup_r+0x66>
 801ca04:	4630      	mov	r0, r6
 801ca06:	f7fd fec9 	bl	801a79c <_free_r>
 801ca0a:	2300      	movs	r3, #0
 801ca0c:	6363      	str	r3, [r4, #52]	; 0x34
 801ca0e:	89a3      	ldrh	r3, [r4, #12]
 801ca10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ca14:	81a3      	strh	r3, [r4, #12]
 801ca16:	2300      	movs	r3, #0
 801ca18:	6063      	str	r3, [r4, #4]
 801ca1a:	6923      	ldr	r3, [r4, #16]
 801ca1c:	6023      	str	r3, [r4, #0]
 801ca1e:	89a3      	ldrh	r3, [r4, #12]
 801ca20:	f043 0308 	orr.w	r3, r3, #8
 801ca24:	81a3      	strh	r3, [r4, #12]
 801ca26:	6923      	ldr	r3, [r4, #16]
 801ca28:	b94b      	cbnz	r3, 801ca3e <__swsetup_r+0x9a>
 801ca2a:	89a3      	ldrh	r3, [r4, #12]
 801ca2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ca30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ca34:	d003      	beq.n	801ca3e <__swsetup_r+0x9a>
 801ca36:	4621      	mov	r1, r4
 801ca38:	4630      	mov	r0, r6
 801ca3a:	f001 fb47 	bl	801e0cc <__smakebuf_r>
 801ca3e:	89a0      	ldrh	r0, [r4, #12]
 801ca40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ca44:	f010 0301 	ands.w	r3, r0, #1
 801ca48:	d00a      	beq.n	801ca60 <__swsetup_r+0xbc>
 801ca4a:	2300      	movs	r3, #0
 801ca4c:	60a3      	str	r3, [r4, #8]
 801ca4e:	6963      	ldr	r3, [r4, #20]
 801ca50:	425b      	negs	r3, r3
 801ca52:	61a3      	str	r3, [r4, #24]
 801ca54:	6923      	ldr	r3, [r4, #16]
 801ca56:	b943      	cbnz	r3, 801ca6a <__swsetup_r+0xc6>
 801ca58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ca5c:	d1ba      	bne.n	801c9d4 <__swsetup_r+0x30>
 801ca5e:	bd70      	pop	{r4, r5, r6, pc}
 801ca60:	0781      	lsls	r1, r0, #30
 801ca62:	bf58      	it	pl
 801ca64:	6963      	ldrpl	r3, [r4, #20]
 801ca66:	60a3      	str	r3, [r4, #8]
 801ca68:	e7f4      	b.n	801ca54 <__swsetup_r+0xb0>
 801ca6a:	2000      	movs	r0, #0
 801ca6c:	e7f7      	b.n	801ca5e <__swsetup_r+0xba>
 801ca6e:	bf00      	nop
 801ca70:	200001f8 	.word	0x200001f8
 801ca74:	0802186c 	.word	0x0802186c
 801ca78:	0802188c 	.word	0x0802188c
 801ca7c:	0802184c 	.word	0x0802184c

0801ca80 <__assert_func>:
 801ca80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ca82:	4614      	mov	r4, r2
 801ca84:	461a      	mov	r2, r3
 801ca86:	4b09      	ldr	r3, [pc, #36]	; (801caac <__assert_func+0x2c>)
 801ca88:	681b      	ldr	r3, [r3, #0]
 801ca8a:	4605      	mov	r5, r0
 801ca8c:	68d8      	ldr	r0, [r3, #12]
 801ca8e:	b14c      	cbz	r4, 801caa4 <__assert_func+0x24>
 801ca90:	4b07      	ldr	r3, [pc, #28]	; (801cab0 <__assert_func+0x30>)
 801ca92:	9100      	str	r1, [sp, #0]
 801ca94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ca98:	4906      	ldr	r1, [pc, #24]	; (801cab4 <__assert_func+0x34>)
 801ca9a:	462b      	mov	r3, r5
 801ca9c:	f000 ff5a 	bl	801d954 <fiprintf>
 801caa0:	f7fd fd18 	bl	801a4d4 <abort>
 801caa4:	4b04      	ldr	r3, [pc, #16]	; (801cab8 <__assert_func+0x38>)
 801caa6:	461c      	mov	r4, r3
 801caa8:	e7f3      	b.n	801ca92 <__assert_func+0x12>
 801caaa:	bf00      	nop
 801caac:	200001f8 	.word	0x200001f8
 801cab0:	08021938 	.word	0x08021938
 801cab4:	08021945 	.word	0x08021945
 801cab8:	08021973 	.word	0x08021973

0801cabc <_close_r>:
 801cabc:	b538      	push	{r3, r4, r5, lr}
 801cabe:	4d06      	ldr	r5, [pc, #24]	; (801cad8 <_close_r+0x1c>)
 801cac0:	2300      	movs	r3, #0
 801cac2:	4604      	mov	r4, r0
 801cac4:	4608      	mov	r0, r1
 801cac6:	602b      	str	r3, [r5, #0]
 801cac8:	f7e6 fb97 	bl	80031fa <_close>
 801cacc:	1c43      	adds	r3, r0, #1
 801cace:	d102      	bne.n	801cad6 <_close_r+0x1a>
 801cad0:	682b      	ldr	r3, [r5, #0]
 801cad2:	b103      	cbz	r3, 801cad6 <_close_r+0x1a>
 801cad4:	6023      	str	r3, [r4, #0]
 801cad6:	bd38      	pop	{r3, r4, r5, pc}
 801cad8:	20008fb4 	.word	0x20008fb4

0801cadc <quorem>:
 801cadc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cae0:	6903      	ldr	r3, [r0, #16]
 801cae2:	690c      	ldr	r4, [r1, #16]
 801cae4:	42a3      	cmp	r3, r4
 801cae6:	4607      	mov	r7, r0
 801cae8:	f2c0 8081 	blt.w	801cbee <quorem+0x112>
 801caec:	3c01      	subs	r4, #1
 801caee:	f101 0814 	add.w	r8, r1, #20
 801caf2:	f100 0514 	add.w	r5, r0, #20
 801caf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801cafa:	9301      	str	r3, [sp, #4]
 801cafc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801cb00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801cb04:	3301      	adds	r3, #1
 801cb06:	429a      	cmp	r2, r3
 801cb08:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801cb0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801cb10:	fbb2 f6f3 	udiv	r6, r2, r3
 801cb14:	d331      	bcc.n	801cb7a <quorem+0x9e>
 801cb16:	f04f 0e00 	mov.w	lr, #0
 801cb1a:	4640      	mov	r0, r8
 801cb1c:	46ac      	mov	ip, r5
 801cb1e:	46f2      	mov	sl, lr
 801cb20:	f850 2b04 	ldr.w	r2, [r0], #4
 801cb24:	b293      	uxth	r3, r2
 801cb26:	fb06 e303 	mla	r3, r6, r3, lr
 801cb2a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801cb2e:	b29b      	uxth	r3, r3
 801cb30:	ebaa 0303 	sub.w	r3, sl, r3
 801cb34:	0c12      	lsrs	r2, r2, #16
 801cb36:	f8dc a000 	ldr.w	sl, [ip]
 801cb3a:	fb06 e202 	mla	r2, r6, r2, lr
 801cb3e:	fa13 f38a 	uxtah	r3, r3, sl
 801cb42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801cb46:	fa1f fa82 	uxth.w	sl, r2
 801cb4a:	f8dc 2000 	ldr.w	r2, [ip]
 801cb4e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801cb52:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801cb56:	b29b      	uxth	r3, r3
 801cb58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cb5c:	4581      	cmp	r9, r0
 801cb5e:	f84c 3b04 	str.w	r3, [ip], #4
 801cb62:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801cb66:	d2db      	bcs.n	801cb20 <quorem+0x44>
 801cb68:	f855 300b 	ldr.w	r3, [r5, fp]
 801cb6c:	b92b      	cbnz	r3, 801cb7a <quorem+0x9e>
 801cb6e:	9b01      	ldr	r3, [sp, #4]
 801cb70:	3b04      	subs	r3, #4
 801cb72:	429d      	cmp	r5, r3
 801cb74:	461a      	mov	r2, r3
 801cb76:	d32e      	bcc.n	801cbd6 <quorem+0xfa>
 801cb78:	613c      	str	r4, [r7, #16]
 801cb7a:	4638      	mov	r0, r7
 801cb7c:	f001 fdcc 	bl	801e718 <__mcmp>
 801cb80:	2800      	cmp	r0, #0
 801cb82:	db24      	blt.n	801cbce <quorem+0xf2>
 801cb84:	3601      	adds	r6, #1
 801cb86:	4628      	mov	r0, r5
 801cb88:	f04f 0c00 	mov.w	ip, #0
 801cb8c:	f858 2b04 	ldr.w	r2, [r8], #4
 801cb90:	f8d0 e000 	ldr.w	lr, [r0]
 801cb94:	b293      	uxth	r3, r2
 801cb96:	ebac 0303 	sub.w	r3, ip, r3
 801cb9a:	0c12      	lsrs	r2, r2, #16
 801cb9c:	fa13 f38e 	uxtah	r3, r3, lr
 801cba0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801cba4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801cba8:	b29b      	uxth	r3, r3
 801cbaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cbae:	45c1      	cmp	r9, r8
 801cbb0:	f840 3b04 	str.w	r3, [r0], #4
 801cbb4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801cbb8:	d2e8      	bcs.n	801cb8c <quorem+0xb0>
 801cbba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801cbbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801cbc2:	b922      	cbnz	r2, 801cbce <quorem+0xf2>
 801cbc4:	3b04      	subs	r3, #4
 801cbc6:	429d      	cmp	r5, r3
 801cbc8:	461a      	mov	r2, r3
 801cbca:	d30a      	bcc.n	801cbe2 <quorem+0x106>
 801cbcc:	613c      	str	r4, [r7, #16]
 801cbce:	4630      	mov	r0, r6
 801cbd0:	b003      	add	sp, #12
 801cbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbd6:	6812      	ldr	r2, [r2, #0]
 801cbd8:	3b04      	subs	r3, #4
 801cbda:	2a00      	cmp	r2, #0
 801cbdc:	d1cc      	bne.n	801cb78 <quorem+0x9c>
 801cbde:	3c01      	subs	r4, #1
 801cbe0:	e7c7      	b.n	801cb72 <quorem+0x96>
 801cbe2:	6812      	ldr	r2, [r2, #0]
 801cbe4:	3b04      	subs	r3, #4
 801cbe6:	2a00      	cmp	r2, #0
 801cbe8:	d1f0      	bne.n	801cbcc <quorem+0xf0>
 801cbea:	3c01      	subs	r4, #1
 801cbec:	e7eb      	b.n	801cbc6 <quorem+0xea>
 801cbee:	2000      	movs	r0, #0
 801cbf0:	e7ee      	b.n	801cbd0 <quorem+0xf4>
 801cbf2:	0000      	movs	r0, r0
 801cbf4:	0000      	movs	r0, r0
	...

0801cbf8 <_dtoa_r>:
 801cbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbfc:	ed2d 8b02 	vpush	{d8}
 801cc00:	ec57 6b10 	vmov	r6, r7, d0
 801cc04:	b095      	sub	sp, #84	; 0x54
 801cc06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801cc08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801cc0c:	9105      	str	r1, [sp, #20]
 801cc0e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801cc12:	4604      	mov	r4, r0
 801cc14:	9209      	str	r2, [sp, #36]	; 0x24
 801cc16:	930f      	str	r3, [sp, #60]	; 0x3c
 801cc18:	b975      	cbnz	r5, 801cc38 <_dtoa_r+0x40>
 801cc1a:	2010      	movs	r0, #16
 801cc1c:	f7fd fd86 	bl	801a72c <malloc>
 801cc20:	4602      	mov	r2, r0
 801cc22:	6260      	str	r0, [r4, #36]	; 0x24
 801cc24:	b920      	cbnz	r0, 801cc30 <_dtoa_r+0x38>
 801cc26:	4bb2      	ldr	r3, [pc, #712]	; (801cef0 <_dtoa_r+0x2f8>)
 801cc28:	21ea      	movs	r1, #234	; 0xea
 801cc2a:	48b2      	ldr	r0, [pc, #712]	; (801cef4 <_dtoa_r+0x2fc>)
 801cc2c:	f7ff ff28 	bl	801ca80 <__assert_func>
 801cc30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801cc34:	6005      	str	r5, [r0, #0]
 801cc36:	60c5      	str	r5, [r0, #12]
 801cc38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cc3a:	6819      	ldr	r1, [r3, #0]
 801cc3c:	b151      	cbz	r1, 801cc54 <_dtoa_r+0x5c>
 801cc3e:	685a      	ldr	r2, [r3, #4]
 801cc40:	604a      	str	r2, [r1, #4]
 801cc42:	2301      	movs	r3, #1
 801cc44:	4093      	lsls	r3, r2
 801cc46:	608b      	str	r3, [r1, #8]
 801cc48:	4620      	mov	r0, r4
 801cc4a:	f001 fadd 	bl	801e208 <_Bfree>
 801cc4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cc50:	2200      	movs	r2, #0
 801cc52:	601a      	str	r2, [r3, #0]
 801cc54:	1e3b      	subs	r3, r7, #0
 801cc56:	bfb9      	ittee	lt
 801cc58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801cc5c:	9303      	strlt	r3, [sp, #12]
 801cc5e:	2300      	movge	r3, #0
 801cc60:	f8c8 3000 	strge.w	r3, [r8]
 801cc64:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801cc68:	4ba3      	ldr	r3, [pc, #652]	; (801cef8 <_dtoa_r+0x300>)
 801cc6a:	bfbc      	itt	lt
 801cc6c:	2201      	movlt	r2, #1
 801cc6e:	f8c8 2000 	strlt.w	r2, [r8]
 801cc72:	ea33 0309 	bics.w	r3, r3, r9
 801cc76:	d11b      	bne.n	801ccb0 <_dtoa_r+0xb8>
 801cc78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cc7a:	f242 730f 	movw	r3, #9999	; 0x270f
 801cc7e:	6013      	str	r3, [r2, #0]
 801cc80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801cc84:	4333      	orrs	r3, r6
 801cc86:	f000 857a 	beq.w	801d77e <_dtoa_r+0xb86>
 801cc8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801cc8c:	b963      	cbnz	r3, 801cca8 <_dtoa_r+0xb0>
 801cc8e:	4b9b      	ldr	r3, [pc, #620]	; (801cefc <_dtoa_r+0x304>)
 801cc90:	e024      	b.n	801ccdc <_dtoa_r+0xe4>
 801cc92:	4b9b      	ldr	r3, [pc, #620]	; (801cf00 <_dtoa_r+0x308>)
 801cc94:	9300      	str	r3, [sp, #0]
 801cc96:	3308      	adds	r3, #8
 801cc98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801cc9a:	6013      	str	r3, [r2, #0]
 801cc9c:	9800      	ldr	r0, [sp, #0]
 801cc9e:	b015      	add	sp, #84	; 0x54
 801cca0:	ecbd 8b02 	vpop	{d8}
 801cca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cca8:	4b94      	ldr	r3, [pc, #592]	; (801cefc <_dtoa_r+0x304>)
 801ccaa:	9300      	str	r3, [sp, #0]
 801ccac:	3303      	adds	r3, #3
 801ccae:	e7f3      	b.n	801cc98 <_dtoa_r+0xa0>
 801ccb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ccb4:	2200      	movs	r2, #0
 801ccb6:	ec51 0b17 	vmov	r0, r1, d7
 801ccba:	2300      	movs	r3, #0
 801ccbc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801ccc0:	f7e3 ff12 	bl	8000ae8 <__aeabi_dcmpeq>
 801ccc4:	4680      	mov	r8, r0
 801ccc6:	b158      	cbz	r0, 801cce0 <_dtoa_r+0xe8>
 801ccc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ccca:	2301      	movs	r3, #1
 801cccc:	6013      	str	r3, [r2, #0]
 801ccce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ccd0:	2b00      	cmp	r3, #0
 801ccd2:	f000 8551 	beq.w	801d778 <_dtoa_r+0xb80>
 801ccd6:	488b      	ldr	r0, [pc, #556]	; (801cf04 <_dtoa_r+0x30c>)
 801ccd8:	6018      	str	r0, [r3, #0]
 801ccda:	1e43      	subs	r3, r0, #1
 801ccdc:	9300      	str	r3, [sp, #0]
 801ccde:	e7dd      	b.n	801cc9c <_dtoa_r+0xa4>
 801cce0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801cce4:	aa12      	add	r2, sp, #72	; 0x48
 801cce6:	a913      	add	r1, sp, #76	; 0x4c
 801cce8:	4620      	mov	r0, r4
 801ccea:	f001 fe35 	bl	801e958 <__d2b>
 801ccee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801ccf2:	4683      	mov	fp, r0
 801ccf4:	2d00      	cmp	r5, #0
 801ccf6:	d07c      	beq.n	801cdf2 <_dtoa_r+0x1fa>
 801ccf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ccfa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801ccfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801cd02:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801cd06:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801cd0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801cd0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801cd12:	4b7d      	ldr	r3, [pc, #500]	; (801cf08 <_dtoa_r+0x310>)
 801cd14:	2200      	movs	r2, #0
 801cd16:	4630      	mov	r0, r6
 801cd18:	4639      	mov	r1, r7
 801cd1a:	f7e3 fac5 	bl	80002a8 <__aeabi_dsub>
 801cd1e:	a36e      	add	r3, pc, #440	; (adr r3, 801ced8 <_dtoa_r+0x2e0>)
 801cd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd24:	f7e3 fc78 	bl	8000618 <__aeabi_dmul>
 801cd28:	a36d      	add	r3, pc, #436	; (adr r3, 801cee0 <_dtoa_r+0x2e8>)
 801cd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd2e:	f7e3 fabd 	bl	80002ac <__adddf3>
 801cd32:	4606      	mov	r6, r0
 801cd34:	4628      	mov	r0, r5
 801cd36:	460f      	mov	r7, r1
 801cd38:	f7e3 fc04 	bl	8000544 <__aeabi_i2d>
 801cd3c:	a36a      	add	r3, pc, #424	; (adr r3, 801cee8 <_dtoa_r+0x2f0>)
 801cd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd42:	f7e3 fc69 	bl	8000618 <__aeabi_dmul>
 801cd46:	4602      	mov	r2, r0
 801cd48:	460b      	mov	r3, r1
 801cd4a:	4630      	mov	r0, r6
 801cd4c:	4639      	mov	r1, r7
 801cd4e:	f7e3 faad 	bl	80002ac <__adddf3>
 801cd52:	4606      	mov	r6, r0
 801cd54:	460f      	mov	r7, r1
 801cd56:	f7e3 ff0f 	bl	8000b78 <__aeabi_d2iz>
 801cd5a:	2200      	movs	r2, #0
 801cd5c:	4682      	mov	sl, r0
 801cd5e:	2300      	movs	r3, #0
 801cd60:	4630      	mov	r0, r6
 801cd62:	4639      	mov	r1, r7
 801cd64:	f7e3 feca 	bl	8000afc <__aeabi_dcmplt>
 801cd68:	b148      	cbz	r0, 801cd7e <_dtoa_r+0x186>
 801cd6a:	4650      	mov	r0, sl
 801cd6c:	f7e3 fbea 	bl	8000544 <__aeabi_i2d>
 801cd70:	4632      	mov	r2, r6
 801cd72:	463b      	mov	r3, r7
 801cd74:	f7e3 feb8 	bl	8000ae8 <__aeabi_dcmpeq>
 801cd78:	b908      	cbnz	r0, 801cd7e <_dtoa_r+0x186>
 801cd7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cd7e:	f1ba 0f16 	cmp.w	sl, #22
 801cd82:	d854      	bhi.n	801ce2e <_dtoa_r+0x236>
 801cd84:	4b61      	ldr	r3, [pc, #388]	; (801cf0c <_dtoa_r+0x314>)
 801cd86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801cd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801cd92:	f7e3 feb3 	bl	8000afc <__aeabi_dcmplt>
 801cd96:	2800      	cmp	r0, #0
 801cd98:	d04b      	beq.n	801ce32 <_dtoa_r+0x23a>
 801cd9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cd9e:	2300      	movs	r3, #0
 801cda0:	930e      	str	r3, [sp, #56]	; 0x38
 801cda2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801cda4:	1b5d      	subs	r5, r3, r5
 801cda6:	1e6b      	subs	r3, r5, #1
 801cda8:	9304      	str	r3, [sp, #16]
 801cdaa:	bf43      	ittte	mi
 801cdac:	2300      	movmi	r3, #0
 801cdae:	f1c5 0801 	rsbmi	r8, r5, #1
 801cdb2:	9304      	strmi	r3, [sp, #16]
 801cdb4:	f04f 0800 	movpl.w	r8, #0
 801cdb8:	f1ba 0f00 	cmp.w	sl, #0
 801cdbc:	db3b      	blt.n	801ce36 <_dtoa_r+0x23e>
 801cdbe:	9b04      	ldr	r3, [sp, #16]
 801cdc0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801cdc4:	4453      	add	r3, sl
 801cdc6:	9304      	str	r3, [sp, #16]
 801cdc8:	2300      	movs	r3, #0
 801cdca:	9306      	str	r3, [sp, #24]
 801cdcc:	9b05      	ldr	r3, [sp, #20]
 801cdce:	2b09      	cmp	r3, #9
 801cdd0:	d869      	bhi.n	801cea6 <_dtoa_r+0x2ae>
 801cdd2:	2b05      	cmp	r3, #5
 801cdd4:	bfc4      	itt	gt
 801cdd6:	3b04      	subgt	r3, #4
 801cdd8:	9305      	strgt	r3, [sp, #20]
 801cdda:	9b05      	ldr	r3, [sp, #20]
 801cddc:	f1a3 0302 	sub.w	r3, r3, #2
 801cde0:	bfcc      	ite	gt
 801cde2:	2500      	movgt	r5, #0
 801cde4:	2501      	movle	r5, #1
 801cde6:	2b03      	cmp	r3, #3
 801cde8:	d869      	bhi.n	801cebe <_dtoa_r+0x2c6>
 801cdea:	e8df f003 	tbb	[pc, r3]
 801cdee:	4e2c      	.short	0x4e2c
 801cdf0:	5a4c      	.short	0x5a4c
 801cdf2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801cdf6:	441d      	add	r5, r3
 801cdf8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801cdfc:	2b20      	cmp	r3, #32
 801cdfe:	bfc1      	itttt	gt
 801ce00:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801ce04:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801ce08:	fa09 f303 	lslgt.w	r3, r9, r3
 801ce0c:	fa26 f000 	lsrgt.w	r0, r6, r0
 801ce10:	bfda      	itte	le
 801ce12:	f1c3 0320 	rsble	r3, r3, #32
 801ce16:	fa06 f003 	lslle.w	r0, r6, r3
 801ce1a:	4318      	orrgt	r0, r3
 801ce1c:	f7e3 fb82 	bl	8000524 <__aeabi_ui2d>
 801ce20:	2301      	movs	r3, #1
 801ce22:	4606      	mov	r6, r0
 801ce24:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801ce28:	3d01      	subs	r5, #1
 801ce2a:	9310      	str	r3, [sp, #64]	; 0x40
 801ce2c:	e771      	b.n	801cd12 <_dtoa_r+0x11a>
 801ce2e:	2301      	movs	r3, #1
 801ce30:	e7b6      	b.n	801cda0 <_dtoa_r+0x1a8>
 801ce32:	900e      	str	r0, [sp, #56]	; 0x38
 801ce34:	e7b5      	b.n	801cda2 <_dtoa_r+0x1aa>
 801ce36:	f1ca 0300 	rsb	r3, sl, #0
 801ce3a:	9306      	str	r3, [sp, #24]
 801ce3c:	2300      	movs	r3, #0
 801ce3e:	eba8 080a 	sub.w	r8, r8, sl
 801ce42:	930d      	str	r3, [sp, #52]	; 0x34
 801ce44:	e7c2      	b.n	801cdcc <_dtoa_r+0x1d4>
 801ce46:	2300      	movs	r3, #0
 801ce48:	9308      	str	r3, [sp, #32]
 801ce4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce4c:	2b00      	cmp	r3, #0
 801ce4e:	dc39      	bgt.n	801cec4 <_dtoa_r+0x2cc>
 801ce50:	f04f 0901 	mov.w	r9, #1
 801ce54:	f8cd 9004 	str.w	r9, [sp, #4]
 801ce58:	464b      	mov	r3, r9
 801ce5a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801ce5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801ce60:	2200      	movs	r2, #0
 801ce62:	6042      	str	r2, [r0, #4]
 801ce64:	2204      	movs	r2, #4
 801ce66:	f102 0614 	add.w	r6, r2, #20
 801ce6a:	429e      	cmp	r6, r3
 801ce6c:	6841      	ldr	r1, [r0, #4]
 801ce6e:	d92f      	bls.n	801ced0 <_dtoa_r+0x2d8>
 801ce70:	4620      	mov	r0, r4
 801ce72:	f001 f989 	bl	801e188 <_Balloc>
 801ce76:	9000      	str	r0, [sp, #0]
 801ce78:	2800      	cmp	r0, #0
 801ce7a:	d14b      	bne.n	801cf14 <_dtoa_r+0x31c>
 801ce7c:	4b24      	ldr	r3, [pc, #144]	; (801cf10 <_dtoa_r+0x318>)
 801ce7e:	4602      	mov	r2, r0
 801ce80:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801ce84:	e6d1      	b.n	801cc2a <_dtoa_r+0x32>
 801ce86:	2301      	movs	r3, #1
 801ce88:	e7de      	b.n	801ce48 <_dtoa_r+0x250>
 801ce8a:	2300      	movs	r3, #0
 801ce8c:	9308      	str	r3, [sp, #32]
 801ce8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce90:	eb0a 0903 	add.w	r9, sl, r3
 801ce94:	f109 0301 	add.w	r3, r9, #1
 801ce98:	2b01      	cmp	r3, #1
 801ce9a:	9301      	str	r3, [sp, #4]
 801ce9c:	bfb8      	it	lt
 801ce9e:	2301      	movlt	r3, #1
 801cea0:	e7dd      	b.n	801ce5e <_dtoa_r+0x266>
 801cea2:	2301      	movs	r3, #1
 801cea4:	e7f2      	b.n	801ce8c <_dtoa_r+0x294>
 801cea6:	2501      	movs	r5, #1
 801cea8:	2300      	movs	r3, #0
 801ceaa:	9305      	str	r3, [sp, #20]
 801ceac:	9508      	str	r5, [sp, #32]
 801ceae:	f04f 39ff 	mov.w	r9, #4294967295
 801ceb2:	2200      	movs	r2, #0
 801ceb4:	f8cd 9004 	str.w	r9, [sp, #4]
 801ceb8:	2312      	movs	r3, #18
 801ceba:	9209      	str	r2, [sp, #36]	; 0x24
 801cebc:	e7cf      	b.n	801ce5e <_dtoa_r+0x266>
 801cebe:	2301      	movs	r3, #1
 801cec0:	9308      	str	r3, [sp, #32]
 801cec2:	e7f4      	b.n	801ceae <_dtoa_r+0x2b6>
 801cec4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801cec8:	f8cd 9004 	str.w	r9, [sp, #4]
 801cecc:	464b      	mov	r3, r9
 801cece:	e7c6      	b.n	801ce5e <_dtoa_r+0x266>
 801ced0:	3101      	adds	r1, #1
 801ced2:	6041      	str	r1, [r0, #4]
 801ced4:	0052      	lsls	r2, r2, #1
 801ced6:	e7c6      	b.n	801ce66 <_dtoa_r+0x26e>
 801ced8:	636f4361 	.word	0x636f4361
 801cedc:	3fd287a7 	.word	0x3fd287a7
 801cee0:	8b60c8b3 	.word	0x8b60c8b3
 801cee4:	3fc68a28 	.word	0x3fc68a28
 801cee8:	509f79fb 	.word	0x509f79fb
 801ceec:	3fd34413 	.word	0x3fd34413
 801cef0:	08021981 	.word	0x08021981
 801cef4:	08021998 	.word	0x08021998
 801cef8:	7ff00000 	.word	0x7ff00000
 801cefc:	0802197d 	.word	0x0802197d
 801cf00:	08021974 	.word	0x08021974
 801cf04:	08021bfa 	.word	0x08021bfa
 801cf08:	3ff80000 	.word	0x3ff80000
 801cf0c:	08021b10 	.word	0x08021b10
 801cf10:	080219f7 	.word	0x080219f7
 801cf14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cf16:	9a00      	ldr	r2, [sp, #0]
 801cf18:	601a      	str	r2, [r3, #0]
 801cf1a:	9b01      	ldr	r3, [sp, #4]
 801cf1c:	2b0e      	cmp	r3, #14
 801cf1e:	f200 80ad 	bhi.w	801d07c <_dtoa_r+0x484>
 801cf22:	2d00      	cmp	r5, #0
 801cf24:	f000 80aa 	beq.w	801d07c <_dtoa_r+0x484>
 801cf28:	f1ba 0f00 	cmp.w	sl, #0
 801cf2c:	dd36      	ble.n	801cf9c <_dtoa_r+0x3a4>
 801cf2e:	4ac3      	ldr	r2, [pc, #780]	; (801d23c <_dtoa_r+0x644>)
 801cf30:	f00a 030f 	and.w	r3, sl, #15
 801cf34:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801cf38:	ed93 7b00 	vldr	d7, [r3]
 801cf3c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801cf40:	ea4f 172a 	mov.w	r7, sl, asr #4
 801cf44:	eeb0 8a47 	vmov.f32	s16, s14
 801cf48:	eef0 8a67 	vmov.f32	s17, s15
 801cf4c:	d016      	beq.n	801cf7c <_dtoa_r+0x384>
 801cf4e:	4bbc      	ldr	r3, [pc, #752]	; (801d240 <_dtoa_r+0x648>)
 801cf50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801cf54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801cf58:	f7e3 fc88 	bl	800086c <__aeabi_ddiv>
 801cf5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cf60:	f007 070f 	and.w	r7, r7, #15
 801cf64:	2503      	movs	r5, #3
 801cf66:	4eb6      	ldr	r6, [pc, #728]	; (801d240 <_dtoa_r+0x648>)
 801cf68:	b957      	cbnz	r7, 801cf80 <_dtoa_r+0x388>
 801cf6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cf6e:	ec53 2b18 	vmov	r2, r3, d8
 801cf72:	f7e3 fc7b 	bl	800086c <__aeabi_ddiv>
 801cf76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cf7a:	e029      	b.n	801cfd0 <_dtoa_r+0x3d8>
 801cf7c:	2502      	movs	r5, #2
 801cf7e:	e7f2      	b.n	801cf66 <_dtoa_r+0x36e>
 801cf80:	07f9      	lsls	r1, r7, #31
 801cf82:	d508      	bpl.n	801cf96 <_dtoa_r+0x39e>
 801cf84:	ec51 0b18 	vmov	r0, r1, d8
 801cf88:	e9d6 2300 	ldrd	r2, r3, [r6]
 801cf8c:	f7e3 fb44 	bl	8000618 <__aeabi_dmul>
 801cf90:	ec41 0b18 	vmov	d8, r0, r1
 801cf94:	3501      	adds	r5, #1
 801cf96:	107f      	asrs	r7, r7, #1
 801cf98:	3608      	adds	r6, #8
 801cf9a:	e7e5      	b.n	801cf68 <_dtoa_r+0x370>
 801cf9c:	f000 80a6 	beq.w	801d0ec <_dtoa_r+0x4f4>
 801cfa0:	f1ca 0600 	rsb	r6, sl, #0
 801cfa4:	4ba5      	ldr	r3, [pc, #660]	; (801d23c <_dtoa_r+0x644>)
 801cfa6:	4fa6      	ldr	r7, [pc, #664]	; (801d240 <_dtoa_r+0x648>)
 801cfa8:	f006 020f 	and.w	r2, r6, #15
 801cfac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801cfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfb4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801cfb8:	f7e3 fb2e 	bl	8000618 <__aeabi_dmul>
 801cfbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cfc0:	1136      	asrs	r6, r6, #4
 801cfc2:	2300      	movs	r3, #0
 801cfc4:	2502      	movs	r5, #2
 801cfc6:	2e00      	cmp	r6, #0
 801cfc8:	f040 8085 	bne.w	801d0d6 <_dtoa_r+0x4de>
 801cfcc:	2b00      	cmp	r3, #0
 801cfce:	d1d2      	bne.n	801cf76 <_dtoa_r+0x37e>
 801cfd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cfd2:	2b00      	cmp	r3, #0
 801cfd4:	f000 808c 	beq.w	801d0f0 <_dtoa_r+0x4f8>
 801cfd8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801cfdc:	4b99      	ldr	r3, [pc, #612]	; (801d244 <_dtoa_r+0x64c>)
 801cfde:	2200      	movs	r2, #0
 801cfe0:	4630      	mov	r0, r6
 801cfe2:	4639      	mov	r1, r7
 801cfe4:	f7e3 fd8a 	bl	8000afc <__aeabi_dcmplt>
 801cfe8:	2800      	cmp	r0, #0
 801cfea:	f000 8081 	beq.w	801d0f0 <_dtoa_r+0x4f8>
 801cfee:	9b01      	ldr	r3, [sp, #4]
 801cff0:	2b00      	cmp	r3, #0
 801cff2:	d07d      	beq.n	801d0f0 <_dtoa_r+0x4f8>
 801cff4:	f1b9 0f00 	cmp.w	r9, #0
 801cff8:	dd3c      	ble.n	801d074 <_dtoa_r+0x47c>
 801cffa:	f10a 33ff 	add.w	r3, sl, #4294967295
 801cffe:	9307      	str	r3, [sp, #28]
 801d000:	2200      	movs	r2, #0
 801d002:	4b91      	ldr	r3, [pc, #580]	; (801d248 <_dtoa_r+0x650>)
 801d004:	4630      	mov	r0, r6
 801d006:	4639      	mov	r1, r7
 801d008:	f7e3 fb06 	bl	8000618 <__aeabi_dmul>
 801d00c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d010:	3501      	adds	r5, #1
 801d012:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801d016:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801d01a:	4628      	mov	r0, r5
 801d01c:	f7e3 fa92 	bl	8000544 <__aeabi_i2d>
 801d020:	4632      	mov	r2, r6
 801d022:	463b      	mov	r3, r7
 801d024:	f7e3 faf8 	bl	8000618 <__aeabi_dmul>
 801d028:	4b88      	ldr	r3, [pc, #544]	; (801d24c <_dtoa_r+0x654>)
 801d02a:	2200      	movs	r2, #0
 801d02c:	f7e3 f93e 	bl	80002ac <__adddf3>
 801d030:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801d034:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d038:	9303      	str	r3, [sp, #12]
 801d03a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d03c:	2b00      	cmp	r3, #0
 801d03e:	d15c      	bne.n	801d0fa <_dtoa_r+0x502>
 801d040:	4b83      	ldr	r3, [pc, #524]	; (801d250 <_dtoa_r+0x658>)
 801d042:	2200      	movs	r2, #0
 801d044:	4630      	mov	r0, r6
 801d046:	4639      	mov	r1, r7
 801d048:	f7e3 f92e 	bl	80002a8 <__aeabi_dsub>
 801d04c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d050:	4606      	mov	r6, r0
 801d052:	460f      	mov	r7, r1
 801d054:	f7e3 fd70 	bl	8000b38 <__aeabi_dcmpgt>
 801d058:	2800      	cmp	r0, #0
 801d05a:	f040 8296 	bne.w	801d58a <_dtoa_r+0x992>
 801d05e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801d062:	4630      	mov	r0, r6
 801d064:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d068:	4639      	mov	r1, r7
 801d06a:	f7e3 fd47 	bl	8000afc <__aeabi_dcmplt>
 801d06e:	2800      	cmp	r0, #0
 801d070:	f040 8288 	bne.w	801d584 <_dtoa_r+0x98c>
 801d074:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801d078:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801d07c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d07e:	2b00      	cmp	r3, #0
 801d080:	f2c0 8158 	blt.w	801d334 <_dtoa_r+0x73c>
 801d084:	f1ba 0f0e 	cmp.w	sl, #14
 801d088:	f300 8154 	bgt.w	801d334 <_dtoa_r+0x73c>
 801d08c:	4b6b      	ldr	r3, [pc, #428]	; (801d23c <_dtoa_r+0x644>)
 801d08e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801d092:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d098:	2b00      	cmp	r3, #0
 801d09a:	f280 80e3 	bge.w	801d264 <_dtoa_r+0x66c>
 801d09e:	9b01      	ldr	r3, [sp, #4]
 801d0a0:	2b00      	cmp	r3, #0
 801d0a2:	f300 80df 	bgt.w	801d264 <_dtoa_r+0x66c>
 801d0a6:	f040 826d 	bne.w	801d584 <_dtoa_r+0x98c>
 801d0aa:	4b69      	ldr	r3, [pc, #420]	; (801d250 <_dtoa_r+0x658>)
 801d0ac:	2200      	movs	r2, #0
 801d0ae:	4640      	mov	r0, r8
 801d0b0:	4649      	mov	r1, r9
 801d0b2:	f7e3 fab1 	bl	8000618 <__aeabi_dmul>
 801d0b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d0ba:	f7e3 fd33 	bl	8000b24 <__aeabi_dcmpge>
 801d0be:	9e01      	ldr	r6, [sp, #4]
 801d0c0:	4637      	mov	r7, r6
 801d0c2:	2800      	cmp	r0, #0
 801d0c4:	f040 8243 	bne.w	801d54e <_dtoa_r+0x956>
 801d0c8:	9d00      	ldr	r5, [sp, #0]
 801d0ca:	2331      	movs	r3, #49	; 0x31
 801d0cc:	f805 3b01 	strb.w	r3, [r5], #1
 801d0d0:	f10a 0a01 	add.w	sl, sl, #1
 801d0d4:	e23f      	b.n	801d556 <_dtoa_r+0x95e>
 801d0d6:	07f2      	lsls	r2, r6, #31
 801d0d8:	d505      	bpl.n	801d0e6 <_dtoa_r+0x4ee>
 801d0da:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d0de:	f7e3 fa9b 	bl	8000618 <__aeabi_dmul>
 801d0e2:	3501      	adds	r5, #1
 801d0e4:	2301      	movs	r3, #1
 801d0e6:	1076      	asrs	r6, r6, #1
 801d0e8:	3708      	adds	r7, #8
 801d0ea:	e76c      	b.n	801cfc6 <_dtoa_r+0x3ce>
 801d0ec:	2502      	movs	r5, #2
 801d0ee:	e76f      	b.n	801cfd0 <_dtoa_r+0x3d8>
 801d0f0:	9b01      	ldr	r3, [sp, #4]
 801d0f2:	f8cd a01c 	str.w	sl, [sp, #28]
 801d0f6:	930c      	str	r3, [sp, #48]	; 0x30
 801d0f8:	e78d      	b.n	801d016 <_dtoa_r+0x41e>
 801d0fa:	9900      	ldr	r1, [sp, #0]
 801d0fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d0fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d100:	4b4e      	ldr	r3, [pc, #312]	; (801d23c <_dtoa_r+0x644>)
 801d102:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d106:	4401      	add	r1, r0
 801d108:	9102      	str	r1, [sp, #8]
 801d10a:	9908      	ldr	r1, [sp, #32]
 801d10c:	eeb0 8a47 	vmov.f32	s16, s14
 801d110:	eef0 8a67 	vmov.f32	s17, s15
 801d114:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d118:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d11c:	2900      	cmp	r1, #0
 801d11e:	d045      	beq.n	801d1ac <_dtoa_r+0x5b4>
 801d120:	494c      	ldr	r1, [pc, #304]	; (801d254 <_dtoa_r+0x65c>)
 801d122:	2000      	movs	r0, #0
 801d124:	f7e3 fba2 	bl	800086c <__aeabi_ddiv>
 801d128:	ec53 2b18 	vmov	r2, r3, d8
 801d12c:	f7e3 f8bc 	bl	80002a8 <__aeabi_dsub>
 801d130:	9d00      	ldr	r5, [sp, #0]
 801d132:	ec41 0b18 	vmov	d8, r0, r1
 801d136:	4639      	mov	r1, r7
 801d138:	4630      	mov	r0, r6
 801d13a:	f7e3 fd1d 	bl	8000b78 <__aeabi_d2iz>
 801d13e:	900c      	str	r0, [sp, #48]	; 0x30
 801d140:	f7e3 fa00 	bl	8000544 <__aeabi_i2d>
 801d144:	4602      	mov	r2, r0
 801d146:	460b      	mov	r3, r1
 801d148:	4630      	mov	r0, r6
 801d14a:	4639      	mov	r1, r7
 801d14c:	f7e3 f8ac 	bl	80002a8 <__aeabi_dsub>
 801d150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d152:	3330      	adds	r3, #48	; 0x30
 801d154:	f805 3b01 	strb.w	r3, [r5], #1
 801d158:	ec53 2b18 	vmov	r2, r3, d8
 801d15c:	4606      	mov	r6, r0
 801d15e:	460f      	mov	r7, r1
 801d160:	f7e3 fccc 	bl	8000afc <__aeabi_dcmplt>
 801d164:	2800      	cmp	r0, #0
 801d166:	d165      	bne.n	801d234 <_dtoa_r+0x63c>
 801d168:	4632      	mov	r2, r6
 801d16a:	463b      	mov	r3, r7
 801d16c:	4935      	ldr	r1, [pc, #212]	; (801d244 <_dtoa_r+0x64c>)
 801d16e:	2000      	movs	r0, #0
 801d170:	f7e3 f89a 	bl	80002a8 <__aeabi_dsub>
 801d174:	ec53 2b18 	vmov	r2, r3, d8
 801d178:	f7e3 fcc0 	bl	8000afc <__aeabi_dcmplt>
 801d17c:	2800      	cmp	r0, #0
 801d17e:	f040 80b9 	bne.w	801d2f4 <_dtoa_r+0x6fc>
 801d182:	9b02      	ldr	r3, [sp, #8]
 801d184:	429d      	cmp	r5, r3
 801d186:	f43f af75 	beq.w	801d074 <_dtoa_r+0x47c>
 801d18a:	4b2f      	ldr	r3, [pc, #188]	; (801d248 <_dtoa_r+0x650>)
 801d18c:	ec51 0b18 	vmov	r0, r1, d8
 801d190:	2200      	movs	r2, #0
 801d192:	f7e3 fa41 	bl	8000618 <__aeabi_dmul>
 801d196:	4b2c      	ldr	r3, [pc, #176]	; (801d248 <_dtoa_r+0x650>)
 801d198:	ec41 0b18 	vmov	d8, r0, r1
 801d19c:	2200      	movs	r2, #0
 801d19e:	4630      	mov	r0, r6
 801d1a0:	4639      	mov	r1, r7
 801d1a2:	f7e3 fa39 	bl	8000618 <__aeabi_dmul>
 801d1a6:	4606      	mov	r6, r0
 801d1a8:	460f      	mov	r7, r1
 801d1aa:	e7c4      	b.n	801d136 <_dtoa_r+0x53e>
 801d1ac:	ec51 0b17 	vmov	r0, r1, d7
 801d1b0:	f7e3 fa32 	bl	8000618 <__aeabi_dmul>
 801d1b4:	9b02      	ldr	r3, [sp, #8]
 801d1b6:	9d00      	ldr	r5, [sp, #0]
 801d1b8:	930c      	str	r3, [sp, #48]	; 0x30
 801d1ba:	ec41 0b18 	vmov	d8, r0, r1
 801d1be:	4639      	mov	r1, r7
 801d1c0:	4630      	mov	r0, r6
 801d1c2:	f7e3 fcd9 	bl	8000b78 <__aeabi_d2iz>
 801d1c6:	9011      	str	r0, [sp, #68]	; 0x44
 801d1c8:	f7e3 f9bc 	bl	8000544 <__aeabi_i2d>
 801d1cc:	4602      	mov	r2, r0
 801d1ce:	460b      	mov	r3, r1
 801d1d0:	4630      	mov	r0, r6
 801d1d2:	4639      	mov	r1, r7
 801d1d4:	f7e3 f868 	bl	80002a8 <__aeabi_dsub>
 801d1d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d1da:	3330      	adds	r3, #48	; 0x30
 801d1dc:	f805 3b01 	strb.w	r3, [r5], #1
 801d1e0:	9b02      	ldr	r3, [sp, #8]
 801d1e2:	429d      	cmp	r5, r3
 801d1e4:	4606      	mov	r6, r0
 801d1e6:	460f      	mov	r7, r1
 801d1e8:	f04f 0200 	mov.w	r2, #0
 801d1ec:	d134      	bne.n	801d258 <_dtoa_r+0x660>
 801d1ee:	4b19      	ldr	r3, [pc, #100]	; (801d254 <_dtoa_r+0x65c>)
 801d1f0:	ec51 0b18 	vmov	r0, r1, d8
 801d1f4:	f7e3 f85a 	bl	80002ac <__adddf3>
 801d1f8:	4602      	mov	r2, r0
 801d1fa:	460b      	mov	r3, r1
 801d1fc:	4630      	mov	r0, r6
 801d1fe:	4639      	mov	r1, r7
 801d200:	f7e3 fc9a 	bl	8000b38 <__aeabi_dcmpgt>
 801d204:	2800      	cmp	r0, #0
 801d206:	d175      	bne.n	801d2f4 <_dtoa_r+0x6fc>
 801d208:	ec53 2b18 	vmov	r2, r3, d8
 801d20c:	4911      	ldr	r1, [pc, #68]	; (801d254 <_dtoa_r+0x65c>)
 801d20e:	2000      	movs	r0, #0
 801d210:	f7e3 f84a 	bl	80002a8 <__aeabi_dsub>
 801d214:	4602      	mov	r2, r0
 801d216:	460b      	mov	r3, r1
 801d218:	4630      	mov	r0, r6
 801d21a:	4639      	mov	r1, r7
 801d21c:	f7e3 fc6e 	bl	8000afc <__aeabi_dcmplt>
 801d220:	2800      	cmp	r0, #0
 801d222:	f43f af27 	beq.w	801d074 <_dtoa_r+0x47c>
 801d226:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d228:	1e6b      	subs	r3, r5, #1
 801d22a:	930c      	str	r3, [sp, #48]	; 0x30
 801d22c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801d230:	2b30      	cmp	r3, #48	; 0x30
 801d232:	d0f8      	beq.n	801d226 <_dtoa_r+0x62e>
 801d234:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801d238:	e04a      	b.n	801d2d0 <_dtoa_r+0x6d8>
 801d23a:	bf00      	nop
 801d23c:	08021b10 	.word	0x08021b10
 801d240:	08021ae8 	.word	0x08021ae8
 801d244:	3ff00000 	.word	0x3ff00000
 801d248:	40240000 	.word	0x40240000
 801d24c:	401c0000 	.word	0x401c0000
 801d250:	40140000 	.word	0x40140000
 801d254:	3fe00000 	.word	0x3fe00000
 801d258:	4baf      	ldr	r3, [pc, #700]	; (801d518 <_dtoa_r+0x920>)
 801d25a:	f7e3 f9dd 	bl	8000618 <__aeabi_dmul>
 801d25e:	4606      	mov	r6, r0
 801d260:	460f      	mov	r7, r1
 801d262:	e7ac      	b.n	801d1be <_dtoa_r+0x5c6>
 801d264:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801d268:	9d00      	ldr	r5, [sp, #0]
 801d26a:	4642      	mov	r2, r8
 801d26c:	464b      	mov	r3, r9
 801d26e:	4630      	mov	r0, r6
 801d270:	4639      	mov	r1, r7
 801d272:	f7e3 fafb 	bl	800086c <__aeabi_ddiv>
 801d276:	f7e3 fc7f 	bl	8000b78 <__aeabi_d2iz>
 801d27a:	9002      	str	r0, [sp, #8]
 801d27c:	f7e3 f962 	bl	8000544 <__aeabi_i2d>
 801d280:	4642      	mov	r2, r8
 801d282:	464b      	mov	r3, r9
 801d284:	f7e3 f9c8 	bl	8000618 <__aeabi_dmul>
 801d288:	4602      	mov	r2, r0
 801d28a:	460b      	mov	r3, r1
 801d28c:	4630      	mov	r0, r6
 801d28e:	4639      	mov	r1, r7
 801d290:	f7e3 f80a 	bl	80002a8 <__aeabi_dsub>
 801d294:	9e02      	ldr	r6, [sp, #8]
 801d296:	9f01      	ldr	r7, [sp, #4]
 801d298:	3630      	adds	r6, #48	; 0x30
 801d29a:	f805 6b01 	strb.w	r6, [r5], #1
 801d29e:	9e00      	ldr	r6, [sp, #0]
 801d2a0:	1bae      	subs	r6, r5, r6
 801d2a2:	42b7      	cmp	r7, r6
 801d2a4:	4602      	mov	r2, r0
 801d2a6:	460b      	mov	r3, r1
 801d2a8:	d137      	bne.n	801d31a <_dtoa_r+0x722>
 801d2aa:	f7e2 ffff 	bl	80002ac <__adddf3>
 801d2ae:	4642      	mov	r2, r8
 801d2b0:	464b      	mov	r3, r9
 801d2b2:	4606      	mov	r6, r0
 801d2b4:	460f      	mov	r7, r1
 801d2b6:	f7e3 fc3f 	bl	8000b38 <__aeabi_dcmpgt>
 801d2ba:	b9c8      	cbnz	r0, 801d2f0 <_dtoa_r+0x6f8>
 801d2bc:	4642      	mov	r2, r8
 801d2be:	464b      	mov	r3, r9
 801d2c0:	4630      	mov	r0, r6
 801d2c2:	4639      	mov	r1, r7
 801d2c4:	f7e3 fc10 	bl	8000ae8 <__aeabi_dcmpeq>
 801d2c8:	b110      	cbz	r0, 801d2d0 <_dtoa_r+0x6d8>
 801d2ca:	9b02      	ldr	r3, [sp, #8]
 801d2cc:	07d9      	lsls	r1, r3, #31
 801d2ce:	d40f      	bmi.n	801d2f0 <_dtoa_r+0x6f8>
 801d2d0:	4620      	mov	r0, r4
 801d2d2:	4659      	mov	r1, fp
 801d2d4:	f000 ff98 	bl	801e208 <_Bfree>
 801d2d8:	2300      	movs	r3, #0
 801d2da:	702b      	strb	r3, [r5, #0]
 801d2dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d2de:	f10a 0001 	add.w	r0, sl, #1
 801d2e2:	6018      	str	r0, [r3, #0]
 801d2e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d2e6:	2b00      	cmp	r3, #0
 801d2e8:	f43f acd8 	beq.w	801cc9c <_dtoa_r+0xa4>
 801d2ec:	601d      	str	r5, [r3, #0]
 801d2ee:	e4d5      	b.n	801cc9c <_dtoa_r+0xa4>
 801d2f0:	f8cd a01c 	str.w	sl, [sp, #28]
 801d2f4:	462b      	mov	r3, r5
 801d2f6:	461d      	mov	r5, r3
 801d2f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d2fc:	2a39      	cmp	r2, #57	; 0x39
 801d2fe:	d108      	bne.n	801d312 <_dtoa_r+0x71a>
 801d300:	9a00      	ldr	r2, [sp, #0]
 801d302:	429a      	cmp	r2, r3
 801d304:	d1f7      	bne.n	801d2f6 <_dtoa_r+0x6fe>
 801d306:	9a07      	ldr	r2, [sp, #28]
 801d308:	9900      	ldr	r1, [sp, #0]
 801d30a:	3201      	adds	r2, #1
 801d30c:	9207      	str	r2, [sp, #28]
 801d30e:	2230      	movs	r2, #48	; 0x30
 801d310:	700a      	strb	r2, [r1, #0]
 801d312:	781a      	ldrb	r2, [r3, #0]
 801d314:	3201      	adds	r2, #1
 801d316:	701a      	strb	r2, [r3, #0]
 801d318:	e78c      	b.n	801d234 <_dtoa_r+0x63c>
 801d31a:	4b7f      	ldr	r3, [pc, #508]	; (801d518 <_dtoa_r+0x920>)
 801d31c:	2200      	movs	r2, #0
 801d31e:	f7e3 f97b 	bl	8000618 <__aeabi_dmul>
 801d322:	2200      	movs	r2, #0
 801d324:	2300      	movs	r3, #0
 801d326:	4606      	mov	r6, r0
 801d328:	460f      	mov	r7, r1
 801d32a:	f7e3 fbdd 	bl	8000ae8 <__aeabi_dcmpeq>
 801d32e:	2800      	cmp	r0, #0
 801d330:	d09b      	beq.n	801d26a <_dtoa_r+0x672>
 801d332:	e7cd      	b.n	801d2d0 <_dtoa_r+0x6d8>
 801d334:	9a08      	ldr	r2, [sp, #32]
 801d336:	2a00      	cmp	r2, #0
 801d338:	f000 80c4 	beq.w	801d4c4 <_dtoa_r+0x8cc>
 801d33c:	9a05      	ldr	r2, [sp, #20]
 801d33e:	2a01      	cmp	r2, #1
 801d340:	f300 80a8 	bgt.w	801d494 <_dtoa_r+0x89c>
 801d344:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d346:	2a00      	cmp	r2, #0
 801d348:	f000 80a0 	beq.w	801d48c <_dtoa_r+0x894>
 801d34c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801d350:	9e06      	ldr	r6, [sp, #24]
 801d352:	4645      	mov	r5, r8
 801d354:	9a04      	ldr	r2, [sp, #16]
 801d356:	2101      	movs	r1, #1
 801d358:	441a      	add	r2, r3
 801d35a:	4620      	mov	r0, r4
 801d35c:	4498      	add	r8, r3
 801d35e:	9204      	str	r2, [sp, #16]
 801d360:	f001 f858 	bl	801e414 <__i2b>
 801d364:	4607      	mov	r7, r0
 801d366:	2d00      	cmp	r5, #0
 801d368:	dd0b      	ble.n	801d382 <_dtoa_r+0x78a>
 801d36a:	9b04      	ldr	r3, [sp, #16]
 801d36c:	2b00      	cmp	r3, #0
 801d36e:	dd08      	ble.n	801d382 <_dtoa_r+0x78a>
 801d370:	42ab      	cmp	r3, r5
 801d372:	9a04      	ldr	r2, [sp, #16]
 801d374:	bfa8      	it	ge
 801d376:	462b      	movge	r3, r5
 801d378:	eba8 0803 	sub.w	r8, r8, r3
 801d37c:	1aed      	subs	r5, r5, r3
 801d37e:	1ad3      	subs	r3, r2, r3
 801d380:	9304      	str	r3, [sp, #16]
 801d382:	9b06      	ldr	r3, [sp, #24]
 801d384:	b1fb      	cbz	r3, 801d3c6 <_dtoa_r+0x7ce>
 801d386:	9b08      	ldr	r3, [sp, #32]
 801d388:	2b00      	cmp	r3, #0
 801d38a:	f000 809f 	beq.w	801d4cc <_dtoa_r+0x8d4>
 801d38e:	2e00      	cmp	r6, #0
 801d390:	dd11      	ble.n	801d3b6 <_dtoa_r+0x7be>
 801d392:	4639      	mov	r1, r7
 801d394:	4632      	mov	r2, r6
 801d396:	4620      	mov	r0, r4
 801d398:	f001 f8f8 	bl	801e58c <__pow5mult>
 801d39c:	465a      	mov	r2, fp
 801d39e:	4601      	mov	r1, r0
 801d3a0:	4607      	mov	r7, r0
 801d3a2:	4620      	mov	r0, r4
 801d3a4:	f001 f84c 	bl	801e440 <__multiply>
 801d3a8:	4659      	mov	r1, fp
 801d3aa:	9007      	str	r0, [sp, #28]
 801d3ac:	4620      	mov	r0, r4
 801d3ae:	f000 ff2b 	bl	801e208 <_Bfree>
 801d3b2:	9b07      	ldr	r3, [sp, #28]
 801d3b4:	469b      	mov	fp, r3
 801d3b6:	9b06      	ldr	r3, [sp, #24]
 801d3b8:	1b9a      	subs	r2, r3, r6
 801d3ba:	d004      	beq.n	801d3c6 <_dtoa_r+0x7ce>
 801d3bc:	4659      	mov	r1, fp
 801d3be:	4620      	mov	r0, r4
 801d3c0:	f001 f8e4 	bl	801e58c <__pow5mult>
 801d3c4:	4683      	mov	fp, r0
 801d3c6:	2101      	movs	r1, #1
 801d3c8:	4620      	mov	r0, r4
 801d3ca:	f001 f823 	bl	801e414 <__i2b>
 801d3ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d3d0:	2b00      	cmp	r3, #0
 801d3d2:	4606      	mov	r6, r0
 801d3d4:	dd7c      	ble.n	801d4d0 <_dtoa_r+0x8d8>
 801d3d6:	461a      	mov	r2, r3
 801d3d8:	4601      	mov	r1, r0
 801d3da:	4620      	mov	r0, r4
 801d3dc:	f001 f8d6 	bl	801e58c <__pow5mult>
 801d3e0:	9b05      	ldr	r3, [sp, #20]
 801d3e2:	2b01      	cmp	r3, #1
 801d3e4:	4606      	mov	r6, r0
 801d3e6:	dd76      	ble.n	801d4d6 <_dtoa_r+0x8de>
 801d3e8:	2300      	movs	r3, #0
 801d3ea:	9306      	str	r3, [sp, #24]
 801d3ec:	6933      	ldr	r3, [r6, #16]
 801d3ee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801d3f2:	6918      	ldr	r0, [r3, #16]
 801d3f4:	f000 ffbe 	bl	801e374 <__hi0bits>
 801d3f8:	f1c0 0020 	rsb	r0, r0, #32
 801d3fc:	9b04      	ldr	r3, [sp, #16]
 801d3fe:	4418      	add	r0, r3
 801d400:	f010 001f 	ands.w	r0, r0, #31
 801d404:	f000 8086 	beq.w	801d514 <_dtoa_r+0x91c>
 801d408:	f1c0 0320 	rsb	r3, r0, #32
 801d40c:	2b04      	cmp	r3, #4
 801d40e:	dd7f      	ble.n	801d510 <_dtoa_r+0x918>
 801d410:	f1c0 001c 	rsb	r0, r0, #28
 801d414:	9b04      	ldr	r3, [sp, #16]
 801d416:	4403      	add	r3, r0
 801d418:	4480      	add	r8, r0
 801d41a:	4405      	add	r5, r0
 801d41c:	9304      	str	r3, [sp, #16]
 801d41e:	f1b8 0f00 	cmp.w	r8, #0
 801d422:	dd05      	ble.n	801d430 <_dtoa_r+0x838>
 801d424:	4659      	mov	r1, fp
 801d426:	4642      	mov	r2, r8
 801d428:	4620      	mov	r0, r4
 801d42a:	f001 f909 	bl	801e640 <__lshift>
 801d42e:	4683      	mov	fp, r0
 801d430:	9b04      	ldr	r3, [sp, #16]
 801d432:	2b00      	cmp	r3, #0
 801d434:	dd05      	ble.n	801d442 <_dtoa_r+0x84a>
 801d436:	4631      	mov	r1, r6
 801d438:	461a      	mov	r2, r3
 801d43a:	4620      	mov	r0, r4
 801d43c:	f001 f900 	bl	801e640 <__lshift>
 801d440:	4606      	mov	r6, r0
 801d442:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d444:	2b00      	cmp	r3, #0
 801d446:	d069      	beq.n	801d51c <_dtoa_r+0x924>
 801d448:	4631      	mov	r1, r6
 801d44a:	4658      	mov	r0, fp
 801d44c:	f001 f964 	bl	801e718 <__mcmp>
 801d450:	2800      	cmp	r0, #0
 801d452:	da63      	bge.n	801d51c <_dtoa_r+0x924>
 801d454:	2300      	movs	r3, #0
 801d456:	4659      	mov	r1, fp
 801d458:	220a      	movs	r2, #10
 801d45a:	4620      	mov	r0, r4
 801d45c:	f000 fef6 	bl	801e24c <__multadd>
 801d460:	9b08      	ldr	r3, [sp, #32]
 801d462:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d466:	4683      	mov	fp, r0
 801d468:	2b00      	cmp	r3, #0
 801d46a:	f000 818f 	beq.w	801d78c <_dtoa_r+0xb94>
 801d46e:	4639      	mov	r1, r7
 801d470:	2300      	movs	r3, #0
 801d472:	220a      	movs	r2, #10
 801d474:	4620      	mov	r0, r4
 801d476:	f000 fee9 	bl	801e24c <__multadd>
 801d47a:	f1b9 0f00 	cmp.w	r9, #0
 801d47e:	4607      	mov	r7, r0
 801d480:	f300 808e 	bgt.w	801d5a0 <_dtoa_r+0x9a8>
 801d484:	9b05      	ldr	r3, [sp, #20]
 801d486:	2b02      	cmp	r3, #2
 801d488:	dc50      	bgt.n	801d52c <_dtoa_r+0x934>
 801d48a:	e089      	b.n	801d5a0 <_dtoa_r+0x9a8>
 801d48c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d48e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801d492:	e75d      	b.n	801d350 <_dtoa_r+0x758>
 801d494:	9b01      	ldr	r3, [sp, #4]
 801d496:	1e5e      	subs	r6, r3, #1
 801d498:	9b06      	ldr	r3, [sp, #24]
 801d49a:	42b3      	cmp	r3, r6
 801d49c:	bfbf      	itttt	lt
 801d49e:	9b06      	ldrlt	r3, [sp, #24]
 801d4a0:	9606      	strlt	r6, [sp, #24]
 801d4a2:	1af2      	sublt	r2, r6, r3
 801d4a4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801d4a6:	bfb6      	itet	lt
 801d4a8:	189b      	addlt	r3, r3, r2
 801d4aa:	1b9e      	subge	r6, r3, r6
 801d4ac:	930d      	strlt	r3, [sp, #52]	; 0x34
 801d4ae:	9b01      	ldr	r3, [sp, #4]
 801d4b0:	bfb8      	it	lt
 801d4b2:	2600      	movlt	r6, #0
 801d4b4:	2b00      	cmp	r3, #0
 801d4b6:	bfb5      	itete	lt
 801d4b8:	eba8 0503 	sublt.w	r5, r8, r3
 801d4bc:	9b01      	ldrge	r3, [sp, #4]
 801d4be:	2300      	movlt	r3, #0
 801d4c0:	4645      	movge	r5, r8
 801d4c2:	e747      	b.n	801d354 <_dtoa_r+0x75c>
 801d4c4:	9e06      	ldr	r6, [sp, #24]
 801d4c6:	9f08      	ldr	r7, [sp, #32]
 801d4c8:	4645      	mov	r5, r8
 801d4ca:	e74c      	b.n	801d366 <_dtoa_r+0x76e>
 801d4cc:	9a06      	ldr	r2, [sp, #24]
 801d4ce:	e775      	b.n	801d3bc <_dtoa_r+0x7c4>
 801d4d0:	9b05      	ldr	r3, [sp, #20]
 801d4d2:	2b01      	cmp	r3, #1
 801d4d4:	dc18      	bgt.n	801d508 <_dtoa_r+0x910>
 801d4d6:	9b02      	ldr	r3, [sp, #8]
 801d4d8:	b9b3      	cbnz	r3, 801d508 <_dtoa_r+0x910>
 801d4da:	9b03      	ldr	r3, [sp, #12]
 801d4dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d4e0:	b9a3      	cbnz	r3, 801d50c <_dtoa_r+0x914>
 801d4e2:	9b03      	ldr	r3, [sp, #12]
 801d4e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d4e8:	0d1b      	lsrs	r3, r3, #20
 801d4ea:	051b      	lsls	r3, r3, #20
 801d4ec:	b12b      	cbz	r3, 801d4fa <_dtoa_r+0x902>
 801d4ee:	9b04      	ldr	r3, [sp, #16]
 801d4f0:	3301      	adds	r3, #1
 801d4f2:	9304      	str	r3, [sp, #16]
 801d4f4:	f108 0801 	add.w	r8, r8, #1
 801d4f8:	2301      	movs	r3, #1
 801d4fa:	9306      	str	r3, [sp, #24]
 801d4fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d4fe:	2b00      	cmp	r3, #0
 801d500:	f47f af74 	bne.w	801d3ec <_dtoa_r+0x7f4>
 801d504:	2001      	movs	r0, #1
 801d506:	e779      	b.n	801d3fc <_dtoa_r+0x804>
 801d508:	2300      	movs	r3, #0
 801d50a:	e7f6      	b.n	801d4fa <_dtoa_r+0x902>
 801d50c:	9b02      	ldr	r3, [sp, #8]
 801d50e:	e7f4      	b.n	801d4fa <_dtoa_r+0x902>
 801d510:	d085      	beq.n	801d41e <_dtoa_r+0x826>
 801d512:	4618      	mov	r0, r3
 801d514:	301c      	adds	r0, #28
 801d516:	e77d      	b.n	801d414 <_dtoa_r+0x81c>
 801d518:	40240000 	.word	0x40240000
 801d51c:	9b01      	ldr	r3, [sp, #4]
 801d51e:	2b00      	cmp	r3, #0
 801d520:	dc38      	bgt.n	801d594 <_dtoa_r+0x99c>
 801d522:	9b05      	ldr	r3, [sp, #20]
 801d524:	2b02      	cmp	r3, #2
 801d526:	dd35      	ble.n	801d594 <_dtoa_r+0x99c>
 801d528:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801d52c:	f1b9 0f00 	cmp.w	r9, #0
 801d530:	d10d      	bne.n	801d54e <_dtoa_r+0x956>
 801d532:	4631      	mov	r1, r6
 801d534:	464b      	mov	r3, r9
 801d536:	2205      	movs	r2, #5
 801d538:	4620      	mov	r0, r4
 801d53a:	f000 fe87 	bl	801e24c <__multadd>
 801d53e:	4601      	mov	r1, r0
 801d540:	4606      	mov	r6, r0
 801d542:	4658      	mov	r0, fp
 801d544:	f001 f8e8 	bl	801e718 <__mcmp>
 801d548:	2800      	cmp	r0, #0
 801d54a:	f73f adbd 	bgt.w	801d0c8 <_dtoa_r+0x4d0>
 801d54e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d550:	9d00      	ldr	r5, [sp, #0]
 801d552:	ea6f 0a03 	mvn.w	sl, r3
 801d556:	f04f 0800 	mov.w	r8, #0
 801d55a:	4631      	mov	r1, r6
 801d55c:	4620      	mov	r0, r4
 801d55e:	f000 fe53 	bl	801e208 <_Bfree>
 801d562:	2f00      	cmp	r7, #0
 801d564:	f43f aeb4 	beq.w	801d2d0 <_dtoa_r+0x6d8>
 801d568:	f1b8 0f00 	cmp.w	r8, #0
 801d56c:	d005      	beq.n	801d57a <_dtoa_r+0x982>
 801d56e:	45b8      	cmp	r8, r7
 801d570:	d003      	beq.n	801d57a <_dtoa_r+0x982>
 801d572:	4641      	mov	r1, r8
 801d574:	4620      	mov	r0, r4
 801d576:	f000 fe47 	bl	801e208 <_Bfree>
 801d57a:	4639      	mov	r1, r7
 801d57c:	4620      	mov	r0, r4
 801d57e:	f000 fe43 	bl	801e208 <_Bfree>
 801d582:	e6a5      	b.n	801d2d0 <_dtoa_r+0x6d8>
 801d584:	2600      	movs	r6, #0
 801d586:	4637      	mov	r7, r6
 801d588:	e7e1      	b.n	801d54e <_dtoa_r+0x956>
 801d58a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801d58c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801d590:	4637      	mov	r7, r6
 801d592:	e599      	b.n	801d0c8 <_dtoa_r+0x4d0>
 801d594:	9b08      	ldr	r3, [sp, #32]
 801d596:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801d59a:	2b00      	cmp	r3, #0
 801d59c:	f000 80fd 	beq.w	801d79a <_dtoa_r+0xba2>
 801d5a0:	2d00      	cmp	r5, #0
 801d5a2:	dd05      	ble.n	801d5b0 <_dtoa_r+0x9b8>
 801d5a4:	4639      	mov	r1, r7
 801d5a6:	462a      	mov	r2, r5
 801d5a8:	4620      	mov	r0, r4
 801d5aa:	f001 f849 	bl	801e640 <__lshift>
 801d5ae:	4607      	mov	r7, r0
 801d5b0:	9b06      	ldr	r3, [sp, #24]
 801d5b2:	2b00      	cmp	r3, #0
 801d5b4:	d05c      	beq.n	801d670 <_dtoa_r+0xa78>
 801d5b6:	6879      	ldr	r1, [r7, #4]
 801d5b8:	4620      	mov	r0, r4
 801d5ba:	f000 fde5 	bl	801e188 <_Balloc>
 801d5be:	4605      	mov	r5, r0
 801d5c0:	b928      	cbnz	r0, 801d5ce <_dtoa_r+0x9d6>
 801d5c2:	4b80      	ldr	r3, [pc, #512]	; (801d7c4 <_dtoa_r+0xbcc>)
 801d5c4:	4602      	mov	r2, r0
 801d5c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 801d5ca:	f7ff bb2e 	b.w	801cc2a <_dtoa_r+0x32>
 801d5ce:	693a      	ldr	r2, [r7, #16]
 801d5d0:	3202      	adds	r2, #2
 801d5d2:	0092      	lsls	r2, r2, #2
 801d5d4:	f107 010c 	add.w	r1, r7, #12
 801d5d8:	300c      	adds	r0, #12
 801d5da:	f7fd f8af 	bl	801a73c <memcpy>
 801d5de:	2201      	movs	r2, #1
 801d5e0:	4629      	mov	r1, r5
 801d5e2:	4620      	mov	r0, r4
 801d5e4:	f001 f82c 	bl	801e640 <__lshift>
 801d5e8:	9b00      	ldr	r3, [sp, #0]
 801d5ea:	3301      	adds	r3, #1
 801d5ec:	9301      	str	r3, [sp, #4]
 801d5ee:	9b00      	ldr	r3, [sp, #0]
 801d5f0:	444b      	add	r3, r9
 801d5f2:	9307      	str	r3, [sp, #28]
 801d5f4:	9b02      	ldr	r3, [sp, #8]
 801d5f6:	f003 0301 	and.w	r3, r3, #1
 801d5fa:	46b8      	mov	r8, r7
 801d5fc:	9306      	str	r3, [sp, #24]
 801d5fe:	4607      	mov	r7, r0
 801d600:	9b01      	ldr	r3, [sp, #4]
 801d602:	4631      	mov	r1, r6
 801d604:	3b01      	subs	r3, #1
 801d606:	4658      	mov	r0, fp
 801d608:	9302      	str	r3, [sp, #8]
 801d60a:	f7ff fa67 	bl	801cadc <quorem>
 801d60e:	4603      	mov	r3, r0
 801d610:	3330      	adds	r3, #48	; 0x30
 801d612:	9004      	str	r0, [sp, #16]
 801d614:	4641      	mov	r1, r8
 801d616:	4658      	mov	r0, fp
 801d618:	9308      	str	r3, [sp, #32]
 801d61a:	f001 f87d 	bl	801e718 <__mcmp>
 801d61e:	463a      	mov	r2, r7
 801d620:	4681      	mov	r9, r0
 801d622:	4631      	mov	r1, r6
 801d624:	4620      	mov	r0, r4
 801d626:	f001 f893 	bl	801e750 <__mdiff>
 801d62a:	68c2      	ldr	r2, [r0, #12]
 801d62c:	9b08      	ldr	r3, [sp, #32]
 801d62e:	4605      	mov	r5, r0
 801d630:	bb02      	cbnz	r2, 801d674 <_dtoa_r+0xa7c>
 801d632:	4601      	mov	r1, r0
 801d634:	4658      	mov	r0, fp
 801d636:	f001 f86f 	bl	801e718 <__mcmp>
 801d63a:	9b08      	ldr	r3, [sp, #32]
 801d63c:	4602      	mov	r2, r0
 801d63e:	4629      	mov	r1, r5
 801d640:	4620      	mov	r0, r4
 801d642:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801d646:	f000 fddf 	bl	801e208 <_Bfree>
 801d64a:	9b05      	ldr	r3, [sp, #20]
 801d64c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d64e:	9d01      	ldr	r5, [sp, #4]
 801d650:	ea43 0102 	orr.w	r1, r3, r2
 801d654:	9b06      	ldr	r3, [sp, #24]
 801d656:	430b      	orrs	r3, r1
 801d658:	9b08      	ldr	r3, [sp, #32]
 801d65a:	d10d      	bne.n	801d678 <_dtoa_r+0xa80>
 801d65c:	2b39      	cmp	r3, #57	; 0x39
 801d65e:	d029      	beq.n	801d6b4 <_dtoa_r+0xabc>
 801d660:	f1b9 0f00 	cmp.w	r9, #0
 801d664:	dd01      	ble.n	801d66a <_dtoa_r+0xa72>
 801d666:	9b04      	ldr	r3, [sp, #16]
 801d668:	3331      	adds	r3, #49	; 0x31
 801d66a:	9a02      	ldr	r2, [sp, #8]
 801d66c:	7013      	strb	r3, [r2, #0]
 801d66e:	e774      	b.n	801d55a <_dtoa_r+0x962>
 801d670:	4638      	mov	r0, r7
 801d672:	e7b9      	b.n	801d5e8 <_dtoa_r+0x9f0>
 801d674:	2201      	movs	r2, #1
 801d676:	e7e2      	b.n	801d63e <_dtoa_r+0xa46>
 801d678:	f1b9 0f00 	cmp.w	r9, #0
 801d67c:	db06      	blt.n	801d68c <_dtoa_r+0xa94>
 801d67e:	9905      	ldr	r1, [sp, #20]
 801d680:	ea41 0909 	orr.w	r9, r1, r9
 801d684:	9906      	ldr	r1, [sp, #24]
 801d686:	ea59 0101 	orrs.w	r1, r9, r1
 801d68a:	d120      	bne.n	801d6ce <_dtoa_r+0xad6>
 801d68c:	2a00      	cmp	r2, #0
 801d68e:	ddec      	ble.n	801d66a <_dtoa_r+0xa72>
 801d690:	4659      	mov	r1, fp
 801d692:	2201      	movs	r2, #1
 801d694:	4620      	mov	r0, r4
 801d696:	9301      	str	r3, [sp, #4]
 801d698:	f000 ffd2 	bl	801e640 <__lshift>
 801d69c:	4631      	mov	r1, r6
 801d69e:	4683      	mov	fp, r0
 801d6a0:	f001 f83a 	bl	801e718 <__mcmp>
 801d6a4:	2800      	cmp	r0, #0
 801d6a6:	9b01      	ldr	r3, [sp, #4]
 801d6a8:	dc02      	bgt.n	801d6b0 <_dtoa_r+0xab8>
 801d6aa:	d1de      	bne.n	801d66a <_dtoa_r+0xa72>
 801d6ac:	07da      	lsls	r2, r3, #31
 801d6ae:	d5dc      	bpl.n	801d66a <_dtoa_r+0xa72>
 801d6b0:	2b39      	cmp	r3, #57	; 0x39
 801d6b2:	d1d8      	bne.n	801d666 <_dtoa_r+0xa6e>
 801d6b4:	9a02      	ldr	r2, [sp, #8]
 801d6b6:	2339      	movs	r3, #57	; 0x39
 801d6b8:	7013      	strb	r3, [r2, #0]
 801d6ba:	462b      	mov	r3, r5
 801d6bc:	461d      	mov	r5, r3
 801d6be:	3b01      	subs	r3, #1
 801d6c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801d6c4:	2a39      	cmp	r2, #57	; 0x39
 801d6c6:	d050      	beq.n	801d76a <_dtoa_r+0xb72>
 801d6c8:	3201      	adds	r2, #1
 801d6ca:	701a      	strb	r2, [r3, #0]
 801d6cc:	e745      	b.n	801d55a <_dtoa_r+0x962>
 801d6ce:	2a00      	cmp	r2, #0
 801d6d0:	dd03      	ble.n	801d6da <_dtoa_r+0xae2>
 801d6d2:	2b39      	cmp	r3, #57	; 0x39
 801d6d4:	d0ee      	beq.n	801d6b4 <_dtoa_r+0xabc>
 801d6d6:	3301      	adds	r3, #1
 801d6d8:	e7c7      	b.n	801d66a <_dtoa_r+0xa72>
 801d6da:	9a01      	ldr	r2, [sp, #4]
 801d6dc:	9907      	ldr	r1, [sp, #28]
 801d6de:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d6e2:	428a      	cmp	r2, r1
 801d6e4:	d02a      	beq.n	801d73c <_dtoa_r+0xb44>
 801d6e6:	4659      	mov	r1, fp
 801d6e8:	2300      	movs	r3, #0
 801d6ea:	220a      	movs	r2, #10
 801d6ec:	4620      	mov	r0, r4
 801d6ee:	f000 fdad 	bl	801e24c <__multadd>
 801d6f2:	45b8      	cmp	r8, r7
 801d6f4:	4683      	mov	fp, r0
 801d6f6:	f04f 0300 	mov.w	r3, #0
 801d6fa:	f04f 020a 	mov.w	r2, #10
 801d6fe:	4641      	mov	r1, r8
 801d700:	4620      	mov	r0, r4
 801d702:	d107      	bne.n	801d714 <_dtoa_r+0xb1c>
 801d704:	f000 fda2 	bl	801e24c <__multadd>
 801d708:	4680      	mov	r8, r0
 801d70a:	4607      	mov	r7, r0
 801d70c:	9b01      	ldr	r3, [sp, #4]
 801d70e:	3301      	adds	r3, #1
 801d710:	9301      	str	r3, [sp, #4]
 801d712:	e775      	b.n	801d600 <_dtoa_r+0xa08>
 801d714:	f000 fd9a 	bl	801e24c <__multadd>
 801d718:	4639      	mov	r1, r7
 801d71a:	4680      	mov	r8, r0
 801d71c:	2300      	movs	r3, #0
 801d71e:	220a      	movs	r2, #10
 801d720:	4620      	mov	r0, r4
 801d722:	f000 fd93 	bl	801e24c <__multadd>
 801d726:	4607      	mov	r7, r0
 801d728:	e7f0      	b.n	801d70c <_dtoa_r+0xb14>
 801d72a:	f1b9 0f00 	cmp.w	r9, #0
 801d72e:	9a00      	ldr	r2, [sp, #0]
 801d730:	bfcc      	ite	gt
 801d732:	464d      	movgt	r5, r9
 801d734:	2501      	movle	r5, #1
 801d736:	4415      	add	r5, r2
 801d738:	f04f 0800 	mov.w	r8, #0
 801d73c:	4659      	mov	r1, fp
 801d73e:	2201      	movs	r2, #1
 801d740:	4620      	mov	r0, r4
 801d742:	9301      	str	r3, [sp, #4]
 801d744:	f000 ff7c 	bl	801e640 <__lshift>
 801d748:	4631      	mov	r1, r6
 801d74a:	4683      	mov	fp, r0
 801d74c:	f000 ffe4 	bl	801e718 <__mcmp>
 801d750:	2800      	cmp	r0, #0
 801d752:	dcb2      	bgt.n	801d6ba <_dtoa_r+0xac2>
 801d754:	d102      	bne.n	801d75c <_dtoa_r+0xb64>
 801d756:	9b01      	ldr	r3, [sp, #4]
 801d758:	07db      	lsls	r3, r3, #31
 801d75a:	d4ae      	bmi.n	801d6ba <_dtoa_r+0xac2>
 801d75c:	462b      	mov	r3, r5
 801d75e:	461d      	mov	r5, r3
 801d760:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d764:	2a30      	cmp	r2, #48	; 0x30
 801d766:	d0fa      	beq.n	801d75e <_dtoa_r+0xb66>
 801d768:	e6f7      	b.n	801d55a <_dtoa_r+0x962>
 801d76a:	9a00      	ldr	r2, [sp, #0]
 801d76c:	429a      	cmp	r2, r3
 801d76e:	d1a5      	bne.n	801d6bc <_dtoa_r+0xac4>
 801d770:	f10a 0a01 	add.w	sl, sl, #1
 801d774:	2331      	movs	r3, #49	; 0x31
 801d776:	e779      	b.n	801d66c <_dtoa_r+0xa74>
 801d778:	4b13      	ldr	r3, [pc, #76]	; (801d7c8 <_dtoa_r+0xbd0>)
 801d77a:	f7ff baaf 	b.w	801ccdc <_dtoa_r+0xe4>
 801d77e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d780:	2b00      	cmp	r3, #0
 801d782:	f47f aa86 	bne.w	801cc92 <_dtoa_r+0x9a>
 801d786:	4b11      	ldr	r3, [pc, #68]	; (801d7cc <_dtoa_r+0xbd4>)
 801d788:	f7ff baa8 	b.w	801ccdc <_dtoa_r+0xe4>
 801d78c:	f1b9 0f00 	cmp.w	r9, #0
 801d790:	dc03      	bgt.n	801d79a <_dtoa_r+0xba2>
 801d792:	9b05      	ldr	r3, [sp, #20]
 801d794:	2b02      	cmp	r3, #2
 801d796:	f73f aec9 	bgt.w	801d52c <_dtoa_r+0x934>
 801d79a:	9d00      	ldr	r5, [sp, #0]
 801d79c:	4631      	mov	r1, r6
 801d79e:	4658      	mov	r0, fp
 801d7a0:	f7ff f99c 	bl	801cadc <quorem>
 801d7a4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801d7a8:	f805 3b01 	strb.w	r3, [r5], #1
 801d7ac:	9a00      	ldr	r2, [sp, #0]
 801d7ae:	1aaa      	subs	r2, r5, r2
 801d7b0:	4591      	cmp	r9, r2
 801d7b2:	ddba      	ble.n	801d72a <_dtoa_r+0xb32>
 801d7b4:	4659      	mov	r1, fp
 801d7b6:	2300      	movs	r3, #0
 801d7b8:	220a      	movs	r2, #10
 801d7ba:	4620      	mov	r0, r4
 801d7bc:	f000 fd46 	bl	801e24c <__multadd>
 801d7c0:	4683      	mov	fp, r0
 801d7c2:	e7eb      	b.n	801d79c <_dtoa_r+0xba4>
 801d7c4:	080219f7 	.word	0x080219f7
 801d7c8:	08021bf9 	.word	0x08021bf9
 801d7cc:	08021974 	.word	0x08021974

0801d7d0 <__sflush_r>:
 801d7d0:	898a      	ldrh	r2, [r1, #12]
 801d7d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d7d6:	4605      	mov	r5, r0
 801d7d8:	0710      	lsls	r0, r2, #28
 801d7da:	460c      	mov	r4, r1
 801d7dc:	d458      	bmi.n	801d890 <__sflush_r+0xc0>
 801d7de:	684b      	ldr	r3, [r1, #4]
 801d7e0:	2b00      	cmp	r3, #0
 801d7e2:	dc05      	bgt.n	801d7f0 <__sflush_r+0x20>
 801d7e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d7e6:	2b00      	cmp	r3, #0
 801d7e8:	dc02      	bgt.n	801d7f0 <__sflush_r+0x20>
 801d7ea:	2000      	movs	r0, #0
 801d7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d7f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d7f2:	2e00      	cmp	r6, #0
 801d7f4:	d0f9      	beq.n	801d7ea <__sflush_r+0x1a>
 801d7f6:	2300      	movs	r3, #0
 801d7f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d7fc:	682f      	ldr	r7, [r5, #0]
 801d7fe:	602b      	str	r3, [r5, #0]
 801d800:	d032      	beq.n	801d868 <__sflush_r+0x98>
 801d802:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d804:	89a3      	ldrh	r3, [r4, #12]
 801d806:	075a      	lsls	r2, r3, #29
 801d808:	d505      	bpl.n	801d816 <__sflush_r+0x46>
 801d80a:	6863      	ldr	r3, [r4, #4]
 801d80c:	1ac0      	subs	r0, r0, r3
 801d80e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d810:	b10b      	cbz	r3, 801d816 <__sflush_r+0x46>
 801d812:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d814:	1ac0      	subs	r0, r0, r3
 801d816:	2300      	movs	r3, #0
 801d818:	4602      	mov	r2, r0
 801d81a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d81c:	6a21      	ldr	r1, [r4, #32]
 801d81e:	4628      	mov	r0, r5
 801d820:	47b0      	blx	r6
 801d822:	1c43      	adds	r3, r0, #1
 801d824:	89a3      	ldrh	r3, [r4, #12]
 801d826:	d106      	bne.n	801d836 <__sflush_r+0x66>
 801d828:	6829      	ldr	r1, [r5, #0]
 801d82a:	291d      	cmp	r1, #29
 801d82c:	d82c      	bhi.n	801d888 <__sflush_r+0xb8>
 801d82e:	4a2a      	ldr	r2, [pc, #168]	; (801d8d8 <__sflush_r+0x108>)
 801d830:	40ca      	lsrs	r2, r1
 801d832:	07d6      	lsls	r6, r2, #31
 801d834:	d528      	bpl.n	801d888 <__sflush_r+0xb8>
 801d836:	2200      	movs	r2, #0
 801d838:	6062      	str	r2, [r4, #4]
 801d83a:	04d9      	lsls	r1, r3, #19
 801d83c:	6922      	ldr	r2, [r4, #16]
 801d83e:	6022      	str	r2, [r4, #0]
 801d840:	d504      	bpl.n	801d84c <__sflush_r+0x7c>
 801d842:	1c42      	adds	r2, r0, #1
 801d844:	d101      	bne.n	801d84a <__sflush_r+0x7a>
 801d846:	682b      	ldr	r3, [r5, #0]
 801d848:	b903      	cbnz	r3, 801d84c <__sflush_r+0x7c>
 801d84a:	6560      	str	r0, [r4, #84]	; 0x54
 801d84c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d84e:	602f      	str	r7, [r5, #0]
 801d850:	2900      	cmp	r1, #0
 801d852:	d0ca      	beq.n	801d7ea <__sflush_r+0x1a>
 801d854:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d858:	4299      	cmp	r1, r3
 801d85a:	d002      	beq.n	801d862 <__sflush_r+0x92>
 801d85c:	4628      	mov	r0, r5
 801d85e:	f7fc ff9d 	bl	801a79c <_free_r>
 801d862:	2000      	movs	r0, #0
 801d864:	6360      	str	r0, [r4, #52]	; 0x34
 801d866:	e7c1      	b.n	801d7ec <__sflush_r+0x1c>
 801d868:	6a21      	ldr	r1, [r4, #32]
 801d86a:	2301      	movs	r3, #1
 801d86c:	4628      	mov	r0, r5
 801d86e:	47b0      	blx	r6
 801d870:	1c41      	adds	r1, r0, #1
 801d872:	d1c7      	bne.n	801d804 <__sflush_r+0x34>
 801d874:	682b      	ldr	r3, [r5, #0]
 801d876:	2b00      	cmp	r3, #0
 801d878:	d0c4      	beq.n	801d804 <__sflush_r+0x34>
 801d87a:	2b1d      	cmp	r3, #29
 801d87c:	d001      	beq.n	801d882 <__sflush_r+0xb2>
 801d87e:	2b16      	cmp	r3, #22
 801d880:	d101      	bne.n	801d886 <__sflush_r+0xb6>
 801d882:	602f      	str	r7, [r5, #0]
 801d884:	e7b1      	b.n	801d7ea <__sflush_r+0x1a>
 801d886:	89a3      	ldrh	r3, [r4, #12]
 801d888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d88c:	81a3      	strh	r3, [r4, #12]
 801d88e:	e7ad      	b.n	801d7ec <__sflush_r+0x1c>
 801d890:	690f      	ldr	r7, [r1, #16]
 801d892:	2f00      	cmp	r7, #0
 801d894:	d0a9      	beq.n	801d7ea <__sflush_r+0x1a>
 801d896:	0793      	lsls	r3, r2, #30
 801d898:	680e      	ldr	r6, [r1, #0]
 801d89a:	bf08      	it	eq
 801d89c:	694b      	ldreq	r3, [r1, #20]
 801d89e:	600f      	str	r7, [r1, #0]
 801d8a0:	bf18      	it	ne
 801d8a2:	2300      	movne	r3, #0
 801d8a4:	eba6 0807 	sub.w	r8, r6, r7
 801d8a8:	608b      	str	r3, [r1, #8]
 801d8aa:	f1b8 0f00 	cmp.w	r8, #0
 801d8ae:	dd9c      	ble.n	801d7ea <__sflush_r+0x1a>
 801d8b0:	6a21      	ldr	r1, [r4, #32]
 801d8b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d8b4:	4643      	mov	r3, r8
 801d8b6:	463a      	mov	r2, r7
 801d8b8:	4628      	mov	r0, r5
 801d8ba:	47b0      	blx	r6
 801d8bc:	2800      	cmp	r0, #0
 801d8be:	dc06      	bgt.n	801d8ce <__sflush_r+0xfe>
 801d8c0:	89a3      	ldrh	r3, [r4, #12]
 801d8c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d8c6:	81a3      	strh	r3, [r4, #12]
 801d8c8:	f04f 30ff 	mov.w	r0, #4294967295
 801d8cc:	e78e      	b.n	801d7ec <__sflush_r+0x1c>
 801d8ce:	4407      	add	r7, r0
 801d8d0:	eba8 0800 	sub.w	r8, r8, r0
 801d8d4:	e7e9      	b.n	801d8aa <__sflush_r+0xda>
 801d8d6:	bf00      	nop
 801d8d8:	20400001 	.word	0x20400001

0801d8dc <_fflush_r>:
 801d8dc:	b538      	push	{r3, r4, r5, lr}
 801d8de:	690b      	ldr	r3, [r1, #16]
 801d8e0:	4605      	mov	r5, r0
 801d8e2:	460c      	mov	r4, r1
 801d8e4:	b913      	cbnz	r3, 801d8ec <_fflush_r+0x10>
 801d8e6:	2500      	movs	r5, #0
 801d8e8:	4628      	mov	r0, r5
 801d8ea:	bd38      	pop	{r3, r4, r5, pc}
 801d8ec:	b118      	cbz	r0, 801d8f6 <_fflush_r+0x1a>
 801d8ee:	6983      	ldr	r3, [r0, #24]
 801d8f0:	b90b      	cbnz	r3, 801d8f6 <_fflush_r+0x1a>
 801d8f2:	f7fc fe55 	bl	801a5a0 <__sinit>
 801d8f6:	4b14      	ldr	r3, [pc, #80]	; (801d948 <_fflush_r+0x6c>)
 801d8f8:	429c      	cmp	r4, r3
 801d8fa:	d11b      	bne.n	801d934 <_fflush_r+0x58>
 801d8fc:	686c      	ldr	r4, [r5, #4]
 801d8fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d902:	2b00      	cmp	r3, #0
 801d904:	d0ef      	beq.n	801d8e6 <_fflush_r+0xa>
 801d906:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d908:	07d0      	lsls	r0, r2, #31
 801d90a:	d404      	bmi.n	801d916 <_fflush_r+0x3a>
 801d90c:	0599      	lsls	r1, r3, #22
 801d90e:	d402      	bmi.n	801d916 <_fflush_r+0x3a>
 801d910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d912:	f7fc ff08 	bl	801a726 <__retarget_lock_acquire_recursive>
 801d916:	4628      	mov	r0, r5
 801d918:	4621      	mov	r1, r4
 801d91a:	f7ff ff59 	bl	801d7d0 <__sflush_r>
 801d91e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d920:	07da      	lsls	r2, r3, #31
 801d922:	4605      	mov	r5, r0
 801d924:	d4e0      	bmi.n	801d8e8 <_fflush_r+0xc>
 801d926:	89a3      	ldrh	r3, [r4, #12]
 801d928:	059b      	lsls	r3, r3, #22
 801d92a:	d4dd      	bmi.n	801d8e8 <_fflush_r+0xc>
 801d92c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d92e:	f7fc fefb 	bl	801a728 <__retarget_lock_release_recursive>
 801d932:	e7d9      	b.n	801d8e8 <_fflush_r+0xc>
 801d934:	4b05      	ldr	r3, [pc, #20]	; (801d94c <_fflush_r+0x70>)
 801d936:	429c      	cmp	r4, r3
 801d938:	d101      	bne.n	801d93e <_fflush_r+0x62>
 801d93a:	68ac      	ldr	r4, [r5, #8]
 801d93c:	e7df      	b.n	801d8fe <_fflush_r+0x22>
 801d93e:	4b04      	ldr	r3, [pc, #16]	; (801d950 <_fflush_r+0x74>)
 801d940:	429c      	cmp	r4, r3
 801d942:	bf08      	it	eq
 801d944:	68ec      	ldreq	r4, [r5, #12]
 801d946:	e7da      	b.n	801d8fe <_fflush_r+0x22>
 801d948:	0802186c 	.word	0x0802186c
 801d94c:	0802188c 	.word	0x0802188c
 801d950:	0802184c 	.word	0x0802184c

0801d954 <fiprintf>:
 801d954:	b40e      	push	{r1, r2, r3}
 801d956:	b503      	push	{r0, r1, lr}
 801d958:	4601      	mov	r1, r0
 801d95a:	ab03      	add	r3, sp, #12
 801d95c:	4805      	ldr	r0, [pc, #20]	; (801d974 <fiprintf+0x20>)
 801d95e:	f853 2b04 	ldr.w	r2, [r3], #4
 801d962:	6800      	ldr	r0, [r0, #0]
 801d964:	9301      	str	r3, [sp, #4]
 801d966:	f001 fc57 	bl	801f218 <_vfiprintf_r>
 801d96a:	b002      	add	sp, #8
 801d96c:	f85d eb04 	ldr.w	lr, [sp], #4
 801d970:	b003      	add	sp, #12
 801d972:	4770      	bx	lr
 801d974:	200001f8 	.word	0x200001f8

0801d978 <rshift>:
 801d978:	6903      	ldr	r3, [r0, #16]
 801d97a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801d97e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d982:	ea4f 1261 	mov.w	r2, r1, asr #5
 801d986:	f100 0414 	add.w	r4, r0, #20
 801d98a:	dd45      	ble.n	801da18 <rshift+0xa0>
 801d98c:	f011 011f 	ands.w	r1, r1, #31
 801d990:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801d994:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801d998:	d10c      	bne.n	801d9b4 <rshift+0x3c>
 801d99a:	f100 0710 	add.w	r7, r0, #16
 801d99e:	4629      	mov	r1, r5
 801d9a0:	42b1      	cmp	r1, r6
 801d9a2:	d334      	bcc.n	801da0e <rshift+0x96>
 801d9a4:	1a9b      	subs	r3, r3, r2
 801d9a6:	009b      	lsls	r3, r3, #2
 801d9a8:	1eea      	subs	r2, r5, #3
 801d9aa:	4296      	cmp	r6, r2
 801d9ac:	bf38      	it	cc
 801d9ae:	2300      	movcc	r3, #0
 801d9b0:	4423      	add	r3, r4
 801d9b2:	e015      	b.n	801d9e0 <rshift+0x68>
 801d9b4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801d9b8:	f1c1 0820 	rsb	r8, r1, #32
 801d9bc:	40cf      	lsrs	r7, r1
 801d9be:	f105 0e04 	add.w	lr, r5, #4
 801d9c2:	46a1      	mov	r9, r4
 801d9c4:	4576      	cmp	r6, lr
 801d9c6:	46f4      	mov	ip, lr
 801d9c8:	d815      	bhi.n	801d9f6 <rshift+0x7e>
 801d9ca:	1a9b      	subs	r3, r3, r2
 801d9cc:	009a      	lsls	r2, r3, #2
 801d9ce:	3a04      	subs	r2, #4
 801d9d0:	3501      	adds	r5, #1
 801d9d2:	42ae      	cmp	r6, r5
 801d9d4:	bf38      	it	cc
 801d9d6:	2200      	movcc	r2, #0
 801d9d8:	18a3      	adds	r3, r4, r2
 801d9da:	50a7      	str	r7, [r4, r2]
 801d9dc:	b107      	cbz	r7, 801d9e0 <rshift+0x68>
 801d9de:	3304      	adds	r3, #4
 801d9e0:	1b1a      	subs	r2, r3, r4
 801d9e2:	42a3      	cmp	r3, r4
 801d9e4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801d9e8:	bf08      	it	eq
 801d9ea:	2300      	moveq	r3, #0
 801d9ec:	6102      	str	r2, [r0, #16]
 801d9ee:	bf08      	it	eq
 801d9f0:	6143      	streq	r3, [r0, #20]
 801d9f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d9f6:	f8dc c000 	ldr.w	ip, [ip]
 801d9fa:	fa0c fc08 	lsl.w	ip, ip, r8
 801d9fe:	ea4c 0707 	orr.w	r7, ip, r7
 801da02:	f849 7b04 	str.w	r7, [r9], #4
 801da06:	f85e 7b04 	ldr.w	r7, [lr], #4
 801da0a:	40cf      	lsrs	r7, r1
 801da0c:	e7da      	b.n	801d9c4 <rshift+0x4c>
 801da0e:	f851 cb04 	ldr.w	ip, [r1], #4
 801da12:	f847 cf04 	str.w	ip, [r7, #4]!
 801da16:	e7c3      	b.n	801d9a0 <rshift+0x28>
 801da18:	4623      	mov	r3, r4
 801da1a:	e7e1      	b.n	801d9e0 <rshift+0x68>

0801da1c <__hexdig_fun>:
 801da1c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801da20:	2b09      	cmp	r3, #9
 801da22:	d802      	bhi.n	801da2a <__hexdig_fun+0xe>
 801da24:	3820      	subs	r0, #32
 801da26:	b2c0      	uxtb	r0, r0
 801da28:	4770      	bx	lr
 801da2a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801da2e:	2b05      	cmp	r3, #5
 801da30:	d801      	bhi.n	801da36 <__hexdig_fun+0x1a>
 801da32:	3847      	subs	r0, #71	; 0x47
 801da34:	e7f7      	b.n	801da26 <__hexdig_fun+0xa>
 801da36:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801da3a:	2b05      	cmp	r3, #5
 801da3c:	d801      	bhi.n	801da42 <__hexdig_fun+0x26>
 801da3e:	3827      	subs	r0, #39	; 0x27
 801da40:	e7f1      	b.n	801da26 <__hexdig_fun+0xa>
 801da42:	2000      	movs	r0, #0
 801da44:	4770      	bx	lr
	...

0801da48 <__gethex>:
 801da48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da4c:	ed2d 8b02 	vpush	{d8}
 801da50:	b089      	sub	sp, #36	; 0x24
 801da52:	ee08 0a10 	vmov	s16, r0
 801da56:	9304      	str	r3, [sp, #16]
 801da58:	4bbc      	ldr	r3, [pc, #752]	; (801dd4c <__gethex+0x304>)
 801da5a:	681b      	ldr	r3, [r3, #0]
 801da5c:	9301      	str	r3, [sp, #4]
 801da5e:	4618      	mov	r0, r3
 801da60:	468b      	mov	fp, r1
 801da62:	4690      	mov	r8, r2
 801da64:	f7e2 fbc4 	bl	80001f0 <strlen>
 801da68:	9b01      	ldr	r3, [sp, #4]
 801da6a:	f8db 2000 	ldr.w	r2, [fp]
 801da6e:	4403      	add	r3, r0
 801da70:	4682      	mov	sl, r0
 801da72:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801da76:	9305      	str	r3, [sp, #20]
 801da78:	1c93      	adds	r3, r2, #2
 801da7a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801da7e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801da82:	32fe      	adds	r2, #254	; 0xfe
 801da84:	18d1      	adds	r1, r2, r3
 801da86:	461f      	mov	r7, r3
 801da88:	f813 0b01 	ldrb.w	r0, [r3], #1
 801da8c:	9100      	str	r1, [sp, #0]
 801da8e:	2830      	cmp	r0, #48	; 0x30
 801da90:	d0f8      	beq.n	801da84 <__gethex+0x3c>
 801da92:	f7ff ffc3 	bl	801da1c <__hexdig_fun>
 801da96:	4604      	mov	r4, r0
 801da98:	2800      	cmp	r0, #0
 801da9a:	d13a      	bne.n	801db12 <__gethex+0xca>
 801da9c:	9901      	ldr	r1, [sp, #4]
 801da9e:	4652      	mov	r2, sl
 801daa0:	4638      	mov	r0, r7
 801daa2:	f7fd ff8a 	bl	801b9ba <strncmp>
 801daa6:	4605      	mov	r5, r0
 801daa8:	2800      	cmp	r0, #0
 801daaa:	d168      	bne.n	801db7e <__gethex+0x136>
 801daac:	f817 000a 	ldrb.w	r0, [r7, sl]
 801dab0:	eb07 060a 	add.w	r6, r7, sl
 801dab4:	f7ff ffb2 	bl	801da1c <__hexdig_fun>
 801dab8:	2800      	cmp	r0, #0
 801daba:	d062      	beq.n	801db82 <__gethex+0x13a>
 801dabc:	4633      	mov	r3, r6
 801dabe:	7818      	ldrb	r0, [r3, #0]
 801dac0:	2830      	cmp	r0, #48	; 0x30
 801dac2:	461f      	mov	r7, r3
 801dac4:	f103 0301 	add.w	r3, r3, #1
 801dac8:	d0f9      	beq.n	801dabe <__gethex+0x76>
 801daca:	f7ff ffa7 	bl	801da1c <__hexdig_fun>
 801dace:	2301      	movs	r3, #1
 801dad0:	fab0 f480 	clz	r4, r0
 801dad4:	0964      	lsrs	r4, r4, #5
 801dad6:	4635      	mov	r5, r6
 801dad8:	9300      	str	r3, [sp, #0]
 801dada:	463a      	mov	r2, r7
 801dadc:	4616      	mov	r6, r2
 801dade:	3201      	adds	r2, #1
 801dae0:	7830      	ldrb	r0, [r6, #0]
 801dae2:	f7ff ff9b 	bl	801da1c <__hexdig_fun>
 801dae6:	2800      	cmp	r0, #0
 801dae8:	d1f8      	bne.n	801dadc <__gethex+0x94>
 801daea:	9901      	ldr	r1, [sp, #4]
 801daec:	4652      	mov	r2, sl
 801daee:	4630      	mov	r0, r6
 801daf0:	f7fd ff63 	bl	801b9ba <strncmp>
 801daf4:	b980      	cbnz	r0, 801db18 <__gethex+0xd0>
 801daf6:	b94d      	cbnz	r5, 801db0c <__gethex+0xc4>
 801daf8:	eb06 050a 	add.w	r5, r6, sl
 801dafc:	462a      	mov	r2, r5
 801dafe:	4616      	mov	r6, r2
 801db00:	3201      	adds	r2, #1
 801db02:	7830      	ldrb	r0, [r6, #0]
 801db04:	f7ff ff8a 	bl	801da1c <__hexdig_fun>
 801db08:	2800      	cmp	r0, #0
 801db0a:	d1f8      	bne.n	801dafe <__gethex+0xb6>
 801db0c:	1bad      	subs	r5, r5, r6
 801db0e:	00ad      	lsls	r5, r5, #2
 801db10:	e004      	b.n	801db1c <__gethex+0xd4>
 801db12:	2400      	movs	r4, #0
 801db14:	4625      	mov	r5, r4
 801db16:	e7e0      	b.n	801dada <__gethex+0x92>
 801db18:	2d00      	cmp	r5, #0
 801db1a:	d1f7      	bne.n	801db0c <__gethex+0xc4>
 801db1c:	7833      	ldrb	r3, [r6, #0]
 801db1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801db22:	2b50      	cmp	r3, #80	; 0x50
 801db24:	d13b      	bne.n	801db9e <__gethex+0x156>
 801db26:	7873      	ldrb	r3, [r6, #1]
 801db28:	2b2b      	cmp	r3, #43	; 0x2b
 801db2a:	d02c      	beq.n	801db86 <__gethex+0x13e>
 801db2c:	2b2d      	cmp	r3, #45	; 0x2d
 801db2e:	d02e      	beq.n	801db8e <__gethex+0x146>
 801db30:	1c71      	adds	r1, r6, #1
 801db32:	f04f 0900 	mov.w	r9, #0
 801db36:	7808      	ldrb	r0, [r1, #0]
 801db38:	f7ff ff70 	bl	801da1c <__hexdig_fun>
 801db3c:	1e43      	subs	r3, r0, #1
 801db3e:	b2db      	uxtb	r3, r3
 801db40:	2b18      	cmp	r3, #24
 801db42:	d82c      	bhi.n	801db9e <__gethex+0x156>
 801db44:	f1a0 0210 	sub.w	r2, r0, #16
 801db48:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801db4c:	f7ff ff66 	bl	801da1c <__hexdig_fun>
 801db50:	1e43      	subs	r3, r0, #1
 801db52:	b2db      	uxtb	r3, r3
 801db54:	2b18      	cmp	r3, #24
 801db56:	d91d      	bls.n	801db94 <__gethex+0x14c>
 801db58:	f1b9 0f00 	cmp.w	r9, #0
 801db5c:	d000      	beq.n	801db60 <__gethex+0x118>
 801db5e:	4252      	negs	r2, r2
 801db60:	4415      	add	r5, r2
 801db62:	f8cb 1000 	str.w	r1, [fp]
 801db66:	b1e4      	cbz	r4, 801dba2 <__gethex+0x15a>
 801db68:	9b00      	ldr	r3, [sp, #0]
 801db6a:	2b00      	cmp	r3, #0
 801db6c:	bf14      	ite	ne
 801db6e:	2700      	movne	r7, #0
 801db70:	2706      	moveq	r7, #6
 801db72:	4638      	mov	r0, r7
 801db74:	b009      	add	sp, #36	; 0x24
 801db76:	ecbd 8b02 	vpop	{d8}
 801db7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db7e:	463e      	mov	r6, r7
 801db80:	4625      	mov	r5, r4
 801db82:	2401      	movs	r4, #1
 801db84:	e7ca      	b.n	801db1c <__gethex+0xd4>
 801db86:	f04f 0900 	mov.w	r9, #0
 801db8a:	1cb1      	adds	r1, r6, #2
 801db8c:	e7d3      	b.n	801db36 <__gethex+0xee>
 801db8e:	f04f 0901 	mov.w	r9, #1
 801db92:	e7fa      	b.n	801db8a <__gethex+0x142>
 801db94:	230a      	movs	r3, #10
 801db96:	fb03 0202 	mla	r2, r3, r2, r0
 801db9a:	3a10      	subs	r2, #16
 801db9c:	e7d4      	b.n	801db48 <__gethex+0x100>
 801db9e:	4631      	mov	r1, r6
 801dba0:	e7df      	b.n	801db62 <__gethex+0x11a>
 801dba2:	1bf3      	subs	r3, r6, r7
 801dba4:	3b01      	subs	r3, #1
 801dba6:	4621      	mov	r1, r4
 801dba8:	2b07      	cmp	r3, #7
 801dbaa:	dc0b      	bgt.n	801dbc4 <__gethex+0x17c>
 801dbac:	ee18 0a10 	vmov	r0, s16
 801dbb0:	f000 faea 	bl	801e188 <_Balloc>
 801dbb4:	4604      	mov	r4, r0
 801dbb6:	b940      	cbnz	r0, 801dbca <__gethex+0x182>
 801dbb8:	4b65      	ldr	r3, [pc, #404]	; (801dd50 <__gethex+0x308>)
 801dbba:	4602      	mov	r2, r0
 801dbbc:	21de      	movs	r1, #222	; 0xde
 801dbbe:	4865      	ldr	r0, [pc, #404]	; (801dd54 <__gethex+0x30c>)
 801dbc0:	f7fe ff5e 	bl	801ca80 <__assert_func>
 801dbc4:	3101      	adds	r1, #1
 801dbc6:	105b      	asrs	r3, r3, #1
 801dbc8:	e7ee      	b.n	801dba8 <__gethex+0x160>
 801dbca:	f100 0914 	add.w	r9, r0, #20
 801dbce:	f04f 0b00 	mov.w	fp, #0
 801dbd2:	f1ca 0301 	rsb	r3, sl, #1
 801dbd6:	f8cd 9008 	str.w	r9, [sp, #8]
 801dbda:	f8cd b000 	str.w	fp, [sp]
 801dbde:	9306      	str	r3, [sp, #24]
 801dbe0:	42b7      	cmp	r7, r6
 801dbe2:	d340      	bcc.n	801dc66 <__gethex+0x21e>
 801dbe4:	9802      	ldr	r0, [sp, #8]
 801dbe6:	9b00      	ldr	r3, [sp, #0]
 801dbe8:	f840 3b04 	str.w	r3, [r0], #4
 801dbec:	eba0 0009 	sub.w	r0, r0, r9
 801dbf0:	1080      	asrs	r0, r0, #2
 801dbf2:	0146      	lsls	r6, r0, #5
 801dbf4:	6120      	str	r0, [r4, #16]
 801dbf6:	4618      	mov	r0, r3
 801dbf8:	f000 fbbc 	bl	801e374 <__hi0bits>
 801dbfc:	1a30      	subs	r0, r6, r0
 801dbfe:	f8d8 6000 	ldr.w	r6, [r8]
 801dc02:	42b0      	cmp	r0, r6
 801dc04:	dd63      	ble.n	801dcce <__gethex+0x286>
 801dc06:	1b87      	subs	r7, r0, r6
 801dc08:	4639      	mov	r1, r7
 801dc0a:	4620      	mov	r0, r4
 801dc0c:	f000 ff56 	bl	801eabc <__any_on>
 801dc10:	4682      	mov	sl, r0
 801dc12:	b1a8      	cbz	r0, 801dc40 <__gethex+0x1f8>
 801dc14:	1e7b      	subs	r3, r7, #1
 801dc16:	1159      	asrs	r1, r3, #5
 801dc18:	f003 021f 	and.w	r2, r3, #31
 801dc1c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801dc20:	f04f 0a01 	mov.w	sl, #1
 801dc24:	fa0a f202 	lsl.w	r2, sl, r2
 801dc28:	420a      	tst	r2, r1
 801dc2a:	d009      	beq.n	801dc40 <__gethex+0x1f8>
 801dc2c:	4553      	cmp	r3, sl
 801dc2e:	dd05      	ble.n	801dc3c <__gethex+0x1f4>
 801dc30:	1eb9      	subs	r1, r7, #2
 801dc32:	4620      	mov	r0, r4
 801dc34:	f000 ff42 	bl	801eabc <__any_on>
 801dc38:	2800      	cmp	r0, #0
 801dc3a:	d145      	bne.n	801dcc8 <__gethex+0x280>
 801dc3c:	f04f 0a02 	mov.w	sl, #2
 801dc40:	4639      	mov	r1, r7
 801dc42:	4620      	mov	r0, r4
 801dc44:	f7ff fe98 	bl	801d978 <rshift>
 801dc48:	443d      	add	r5, r7
 801dc4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801dc4e:	42ab      	cmp	r3, r5
 801dc50:	da4c      	bge.n	801dcec <__gethex+0x2a4>
 801dc52:	ee18 0a10 	vmov	r0, s16
 801dc56:	4621      	mov	r1, r4
 801dc58:	f000 fad6 	bl	801e208 <_Bfree>
 801dc5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dc5e:	2300      	movs	r3, #0
 801dc60:	6013      	str	r3, [r2, #0]
 801dc62:	27a3      	movs	r7, #163	; 0xa3
 801dc64:	e785      	b.n	801db72 <__gethex+0x12a>
 801dc66:	1e73      	subs	r3, r6, #1
 801dc68:	9a05      	ldr	r2, [sp, #20]
 801dc6a:	9303      	str	r3, [sp, #12]
 801dc6c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801dc70:	4293      	cmp	r3, r2
 801dc72:	d019      	beq.n	801dca8 <__gethex+0x260>
 801dc74:	f1bb 0f20 	cmp.w	fp, #32
 801dc78:	d107      	bne.n	801dc8a <__gethex+0x242>
 801dc7a:	9b02      	ldr	r3, [sp, #8]
 801dc7c:	9a00      	ldr	r2, [sp, #0]
 801dc7e:	f843 2b04 	str.w	r2, [r3], #4
 801dc82:	9302      	str	r3, [sp, #8]
 801dc84:	2300      	movs	r3, #0
 801dc86:	9300      	str	r3, [sp, #0]
 801dc88:	469b      	mov	fp, r3
 801dc8a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801dc8e:	f7ff fec5 	bl	801da1c <__hexdig_fun>
 801dc92:	9b00      	ldr	r3, [sp, #0]
 801dc94:	f000 000f 	and.w	r0, r0, #15
 801dc98:	fa00 f00b 	lsl.w	r0, r0, fp
 801dc9c:	4303      	orrs	r3, r0
 801dc9e:	9300      	str	r3, [sp, #0]
 801dca0:	f10b 0b04 	add.w	fp, fp, #4
 801dca4:	9b03      	ldr	r3, [sp, #12]
 801dca6:	e00d      	b.n	801dcc4 <__gethex+0x27c>
 801dca8:	9b03      	ldr	r3, [sp, #12]
 801dcaa:	9a06      	ldr	r2, [sp, #24]
 801dcac:	4413      	add	r3, r2
 801dcae:	42bb      	cmp	r3, r7
 801dcb0:	d3e0      	bcc.n	801dc74 <__gethex+0x22c>
 801dcb2:	4618      	mov	r0, r3
 801dcb4:	9901      	ldr	r1, [sp, #4]
 801dcb6:	9307      	str	r3, [sp, #28]
 801dcb8:	4652      	mov	r2, sl
 801dcba:	f7fd fe7e 	bl	801b9ba <strncmp>
 801dcbe:	9b07      	ldr	r3, [sp, #28]
 801dcc0:	2800      	cmp	r0, #0
 801dcc2:	d1d7      	bne.n	801dc74 <__gethex+0x22c>
 801dcc4:	461e      	mov	r6, r3
 801dcc6:	e78b      	b.n	801dbe0 <__gethex+0x198>
 801dcc8:	f04f 0a03 	mov.w	sl, #3
 801dccc:	e7b8      	b.n	801dc40 <__gethex+0x1f8>
 801dcce:	da0a      	bge.n	801dce6 <__gethex+0x29e>
 801dcd0:	1a37      	subs	r7, r6, r0
 801dcd2:	4621      	mov	r1, r4
 801dcd4:	ee18 0a10 	vmov	r0, s16
 801dcd8:	463a      	mov	r2, r7
 801dcda:	f000 fcb1 	bl	801e640 <__lshift>
 801dcde:	1bed      	subs	r5, r5, r7
 801dce0:	4604      	mov	r4, r0
 801dce2:	f100 0914 	add.w	r9, r0, #20
 801dce6:	f04f 0a00 	mov.w	sl, #0
 801dcea:	e7ae      	b.n	801dc4a <__gethex+0x202>
 801dcec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801dcf0:	42a8      	cmp	r0, r5
 801dcf2:	dd72      	ble.n	801ddda <__gethex+0x392>
 801dcf4:	1b45      	subs	r5, r0, r5
 801dcf6:	42ae      	cmp	r6, r5
 801dcf8:	dc36      	bgt.n	801dd68 <__gethex+0x320>
 801dcfa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801dcfe:	2b02      	cmp	r3, #2
 801dd00:	d02a      	beq.n	801dd58 <__gethex+0x310>
 801dd02:	2b03      	cmp	r3, #3
 801dd04:	d02c      	beq.n	801dd60 <__gethex+0x318>
 801dd06:	2b01      	cmp	r3, #1
 801dd08:	d115      	bne.n	801dd36 <__gethex+0x2ee>
 801dd0a:	42ae      	cmp	r6, r5
 801dd0c:	d113      	bne.n	801dd36 <__gethex+0x2ee>
 801dd0e:	2e01      	cmp	r6, #1
 801dd10:	d10b      	bne.n	801dd2a <__gethex+0x2e2>
 801dd12:	9a04      	ldr	r2, [sp, #16]
 801dd14:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801dd18:	6013      	str	r3, [r2, #0]
 801dd1a:	2301      	movs	r3, #1
 801dd1c:	6123      	str	r3, [r4, #16]
 801dd1e:	f8c9 3000 	str.w	r3, [r9]
 801dd22:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801dd24:	2762      	movs	r7, #98	; 0x62
 801dd26:	601c      	str	r4, [r3, #0]
 801dd28:	e723      	b.n	801db72 <__gethex+0x12a>
 801dd2a:	1e71      	subs	r1, r6, #1
 801dd2c:	4620      	mov	r0, r4
 801dd2e:	f000 fec5 	bl	801eabc <__any_on>
 801dd32:	2800      	cmp	r0, #0
 801dd34:	d1ed      	bne.n	801dd12 <__gethex+0x2ca>
 801dd36:	ee18 0a10 	vmov	r0, s16
 801dd3a:	4621      	mov	r1, r4
 801dd3c:	f000 fa64 	bl	801e208 <_Bfree>
 801dd40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dd42:	2300      	movs	r3, #0
 801dd44:	6013      	str	r3, [r2, #0]
 801dd46:	2750      	movs	r7, #80	; 0x50
 801dd48:	e713      	b.n	801db72 <__gethex+0x12a>
 801dd4a:	bf00      	nop
 801dd4c:	08021a74 	.word	0x08021a74
 801dd50:	080219f7 	.word	0x080219f7
 801dd54:	08021a08 	.word	0x08021a08
 801dd58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dd5a:	2b00      	cmp	r3, #0
 801dd5c:	d1eb      	bne.n	801dd36 <__gethex+0x2ee>
 801dd5e:	e7d8      	b.n	801dd12 <__gethex+0x2ca>
 801dd60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dd62:	2b00      	cmp	r3, #0
 801dd64:	d1d5      	bne.n	801dd12 <__gethex+0x2ca>
 801dd66:	e7e6      	b.n	801dd36 <__gethex+0x2ee>
 801dd68:	1e6f      	subs	r7, r5, #1
 801dd6a:	f1ba 0f00 	cmp.w	sl, #0
 801dd6e:	d131      	bne.n	801ddd4 <__gethex+0x38c>
 801dd70:	b127      	cbz	r7, 801dd7c <__gethex+0x334>
 801dd72:	4639      	mov	r1, r7
 801dd74:	4620      	mov	r0, r4
 801dd76:	f000 fea1 	bl	801eabc <__any_on>
 801dd7a:	4682      	mov	sl, r0
 801dd7c:	117b      	asrs	r3, r7, #5
 801dd7e:	2101      	movs	r1, #1
 801dd80:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801dd84:	f007 071f 	and.w	r7, r7, #31
 801dd88:	fa01 f707 	lsl.w	r7, r1, r7
 801dd8c:	421f      	tst	r7, r3
 801dd8e:	4629      	mov	r1, r5
 801dd90:	4620      	mov	r0, r4
 801dd92:	bf18      	it	ne
 801dd94:	f04a 0a02 	orrne.w	sl, sl, #2
 801dd98:	1b76      	subs	r6, r6, r5
 801dd9a:	f7ff fded 	bl	801d978 <rshift>
 801dd9e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801dda2:	2702      	movs	r7, #2
 801dda4:	f1ba 0f00 	cmp.w	sl, #0
 801dda8:	d048      	beq.n	801de3c <__gethex+0x3f4>
 801ddaa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ddae:	2b02      	cmp	r3, #2
 801ddb0:	d015      	beq.n	801ddde <__gethex+0x396>
 801ddb2:	2b03      	cmp	r3, #3
 801ddb4:	d017      	beq.n	801dde6 <__gethex+0x39e>
 801ddb6:	2b01      	cmp	r3, #1
 801ddb8:	d109      	bne.n	801ddce <__gethex+0x386>
 801ddba:	f01a 0f02 	tst.w	sl, #2
 801ddbe:	d006      	beq.n	801ddce <__gethex+0x386>
 801ddc0:	f8d9 0000 	ldr.w	r0, [r9]
 801ddc4:	ea4a 0a00 	orr.w	sl, sl, r0
 801ddc8:	f01a 0f01 	tst.w	sl, #1
 801ddcc:	d10e      	bne.n	801ddec <__gethex+0x3a4>
 801ddce:	f047 0710 	orr.w	r7, r7, #16
 801ddd2:	e033      	b.n	801de3c <__gethex+0x3f4>
 801ddd4:	f04f 0a01 	mov.w	sl, #1
 801ddd8:	e7d0      	b.n	801dd7c <__gethex+0x334>
 801ddda:	2701      	movs	r7, #1
 801dddc:	e7e2      	b.n	801dda4 <__gethex+0x35c>
 801ddde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dde0:	f1c3 0301 	rsb	r3, r3, #1
 801dde4:	9315      	str	r3, [sp, #84]	; 0x54
 801dde6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dde8:	2b00      	cmp	r3, #0
 801ddea:	d0f0      	beq.n	801ddce <__gethex+0x386>
 801ddec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801ddf0:	f104 0314 	add.w	r3, r4, #20
 801ddf4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801ddf8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801ddfc:	f04f 0c00 	mov.w	ip, #0
 801de00:	4618      	mov	r0, r3
 801de02:	f853 2b04 	ldr.w	r2, [r3], #4
 801de06:	f1b2 3fff 	cmp.w	r2, #4294967295
 801de0a:	d01c      	beq.n	801de46 <__gethex+0x3fe>
 801de0c:	3201      	adds	r2, #1
 801de0e:	6002      	str	r2, [r0, #0]
 801de10:	2f02      	cmp	r7, #2
 801de12:	f104 0314 	add.w	r3, r4, #20
 801de16:	d13f      	bne.n	801de98 <__gethex+0x450>
 801de18:	f8d8 2000 	ldr.w	r2, [r8]
 801de1c:	3a01      	subs	r2, #1
 801de1e:	42b2      	cmp	r2, r6
 801de20:	d10a      	bne.n	801de38 <__gethex+0x3f0>
 801de22:	1171      	asrs	r1, r6, #5
 801de24:	2201      	movs	r2, #1
 801de26:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801de2a:	f006 061f 	and.w	r6, r6, #31
 801de2e:	fa02 f606 	lsl.w	r6, r2, r6
 801de32:	421e      	tst	r6, r3
 801de34:	bf18      	it	ne
 801de36:	4617      	movne	r7, r2
 801de38:	f047 0720 	orr.w	r7, r7, #32
 801de3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801de3e:	601c      	str	r4, [r3, #0]
 801de40:	9b04      	ldr	r3, [sp, #16]
 801de42:	601d      	str	r5, [r3, #0]
 801de44:	e695      	b.n	801db72 <__gethex+0x12a>
 801de46:	4299      	cmp	r1, r3
 801de48:	f843 cc04 	str.w	ip, [r3, #-4]
 801de4c:	d8d8      	bhi.n	801de00 <__gethex+0x3b8>
 801de4e:	68a3      	ldr	r3, [r4, #8]
 801de50:	459b      	cmp	fp, r3
 801de52:	db19      	blt.n	801de88 <__gethex+0x440>
 801de54:	6861      	ldr	r1, [r4, #4]
 801de56:	ee18 0a10 	vmov	r0, s16
 801de5a:	3101      	adds	r1, #1
 801de5c:	f000 f994 	bl	801e188 <_Balloc>
 801de60:	4681      	mov	r9, r0
 801de62:	b918      	cbnz	r0, 801de6c <__gethex+0x424>
 801de64:	4b1a      	ldr	r3, [pc, #104]	; (801ded0 <__gethex+0x488>)
 801de66:	4602      	mov	r2, r0
 801de68:	2184      	movs	r1, #132	; 0x84
 801de6a:	e6a8      	b.n	801dbbe <__gethex+0x176>
 801de6c:	6922      	ldr	r2, [r4, #16]
 801de6e:	3202      	adds	r2, #2
 801de70:	f104 010c 	add.w	r1, r4, #12
 801de74:	0092      	lsls	r2, r2, #2
 801de76:	300c      	adds	r0, #12
 801de78:	f7fc fc60 	bl	801a73c <memcpy>
 801de7c:	4621      	mov	r1, r4
 801de7e:	ee18 0a10 	vmov	r0, s16
 801de82:	f000 f9c1 	bl	801e208 <_Bfree>
 801de86:	464c      	mov	r4, r9
 801de88:	6923      	ldr	r3, [r4, #16]
 801de8a:	1c5a      	adds	r2, r3, #1
 801de8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801de90:	6122      	str	r2, [r4, #16]
 801de92:	2201      	movs	r2, #1
 801de94:	615a      	str	r2, [r3, #20]
 801de96:	e7bb      	b.n	801de10 <__gethex+0x3c8>
 801de98:	6922      	ldr	r2, [r4, #16]
 801de9a:	455a      	cmp	r2, fp
 801de9c:	dd0b      	ble.n	801deb6 <__gethex+0x46e>
 801de9e:	2101      	movs	r1, #1
 801dea0:	4620      	mov	r0, r4
 801dea2:	f7ff fd69 	bl	801d978 <rshift>
 801dea6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801deaa:	3501      	adds	r5, #1
 801deac:	42ab      	cmp	r3, r5
 801deae:	f6ff aed0 	blt.w	801dc52 <__gethex+0x20a>
 801deb2:	2701      	movs	r7, #1
 801deb4:	e7c0      	b.n	801de38 <__gethex+0x3f0>
 801deb6:	f016 061f 	ands.w	r6, r6, #31
 801deba:	d0fa      	beq.n	801deb2 <__gethex+0x46a>
 801debc:	449a      	add	sl, r3
 801debe:	f1c6 0620 	rsb	r6, r6, #32
 801dec2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801dec6:	f000 fa55 	bl	801e374 <__hi0bits>
 801deca:	42b0      	cmp	r0, r6
 801decc:	dbe7      	blt.n	801de9e <__gethex+0x456>
 801dece:	e7f0      	b.n	801deb2 <__gethex+0x46a>
 801ded0:	080219f7 	.word	0x080219f7

0801ded4 <L_shift>:
 801ded4:	f1c2 0208 	rsb	r2, r2, #8
 801ded8:	0092      	lsls	r2, r2, #2
 801deda:	b570      	push	{r4, r5, r6, lr}
 801dedc:	f1c2 0620 	rsb	r6, r2, #32
 801dee0:	6843      	ldr	r3, [r0, #4]
 801dee2:	6804      	ldr	r4, [r0, #0]
 801dee4:	fa03 f506 	lsl.w	r5, r3, r6
 801dee8:	432c      	orrs	r4, r5
 801deea:	40d3      	lsrs	r3, r2
 801deec:	6004      	str	r4, [r0, #0]
 801deee:	f840 3f04 	str.w	r3, [r0, #4]!
 801def2:	4288      	cmp	r0, r1
 801def4:	d3f4      	bcc.n	801dee0 <L_shift+0xc>
 801def6:	bd70      	pop	{r4, r5, r6, pc}

0801def8 <__match>:
 801def8:	b530      	push	{r4, r5, lr}
 801defa:	6803      	ldr	r3, [r0, #0]
 801defc:	3301      	adds	r3, #1
 801defe:	f811 4b01 	ldrb.w	r4, [r1], #1
 801df02:	b914      	cbnz	r4, 801df0a <__match+0x12>
 801df04:	6003      	str	r3, [r0, #0]
 801df06:	2001      	movs	r0, #1
 801df08:	bd30      	pop	{r4, r5, pc}
 801df0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801df0e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801df12:	2d19      	cmp	r5, #25
 801df14:	bf98      	it	ls
 801df16:	3220      	addls	r2, #32
 801df18:	42a2      	cmp	r2, r4
 801df1a:	d0f0      	beq.n	801defe <__match+0x6>
 801df1c:	2000      	movs	r0, #0
 801df1e:	e7f3      	b.n	801df08 <__match+0x10>

0801df20 <__hexnan>:
 801df20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df24:	680b      	ldr	r3, [r1, #0]
 801df26:	6801      	ldr	r1, [r0, #0]
 801df28:	115e      	asrs	r6, r3, #5
 801df2a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801df2e:	f013 031f 	ands.w	r3, r3, #31
 801df32:	b087      	sub	sp, #28
 801df34:	bf18      	it	ne
 801df36:	3604      	addne	r6, #4
 801df38:	2500      	movs	r5, #0
 801df3a:	1f37      	subs	r7, r6, #4
 801df3c:	4682      	mov	sl, r0
 801df3e:	4690      	mov	r8, r2
 801df40:	9301      	str	r3, [sp, #4]
 801df42:	f846 5c04 	str.w	r5, [r6, #-4]
 801df46:	46b9      	mov	r9, r7
 801df48:	463c      	mov	r4, r7
 801df4a:	9502      	str	r5, [sp, #8]
 801df4c:	46ab      	mov	fp, r5
 801df4e:	784a      	ldrb	r2, [r1, #1]
 801df50:	1c4b      	adds	r3, r1, #1
 801df52:	9303      	str	r3, [sp, #12]
 801df54:	b342      	cbz	r2, 801dfa8 <__hexnan+0x88>
 801df56:	4610      	mov	r0, r2
 801df58:	9105      	str	r1, [sp, #20]
 801df5a:	9204      	str	r2, [sp, #16]
 801df5c:	f7ff fd5e 	bl	801da1c <__hexdig_fun>
 801df60:	2800      	cmp	r0, #0
 801df62:	d14f      	bne.n	801e004 <__hexnan+0xe4>
 801df64:	9a04      	ldr	r2, [sp, #16]
 801df66:	9905      	ldr	r1, [sp, #20]
 801df68:	2a20      	cmp	r2, #32
 801df6a:	d818      	bhi.n	801df9e <__hexnan+0x7e>
 801df6c:	9b02      	ldr	r3, [sp, #8]
 801df6e:	459b      	cmp	fp, r3
 801df70:	dd13      	ble.n	801df9a <__hexnan+0x7a>
 801df72:	454c      	cmp	r4, r9
 801df74:	d206      	bcs.n	801df84 <__hexnan+0x64>
 801df76:	2d07      	cmp	r5, #7
 801df78:	dc04      	bgt.n	801df84 <__hexnan+0x64>
 801df7a:	462a      	mov	r2, r5
 801df7c:	4649      	mov	r1, r9
 801df7e:	4620      	mov	r0, r4
 801df80:	f7ff ffa8 	bl	801ded4 <L_shift>
 801df84:	4544      	cmp	r4, r8
 801df86:	d950      	bls.n	801e02a <__hexnan+0x10a>
 801df88:	2300      	movs	r3, #0
 801df8a:	f1a4 0904 	sub.w	r9, r4, #4
 801df8e:	f844 3c04 	str.w	r3, [r4, #-4]
 801df92:	f8cd b008 	str.w	fp, [sp, #8]
 801df96:	464c      	mov	r4, r9
 801df98:	461d      	mov	r5, r3
 801df9a:	9903      	ldr	r1, [sp, #12]
 801df9c:	e7d7      	b.n	801df4e <__hexnan+0x2e>
 801df9e:	2a29      	cmp	r2, #41	; 0x29
 801dfa0:	d156      	bne.n	801e050 <__hexnan+0x130>
 801dfa2:	3102      	adds	r1, #2
 801dfa4:	f8ca 1000 	str.w	r1, [sl]
 801dfa8:	f1bb 0f00 	cmp.w	fp, #0
 801dfac:	d050      	beq.n	801e050 <__hexnan+0x130>
 801dfae:	454c      	cmp	r4, r9
 801dfb0:	d206      	bcs.n	801dfc0 <__hexnan+0xa0>
 801dfb2:	2d07      	cmp	r5, #7
 801dfb4:	dc04      	bgt.n	801dfc0 <__hexnan+0xa0>
 801dfb6:	462a      	mov	r2, r5
 801dfb8:	4649      	mov	r1, r9
 801dfba:	4620      	mov	r0, r4
 801dfbc:	f7ff ff8a 	bl	801ded4 <L_shift>
 801dfc0:	4544      	cmp	r4, r8
 801dfc2:	d934      	bls.n	801e02e <__hexnan+0x10e>
 801dfc4:	f1a8 0204 	sub.w	r2, r8, #4
 801dfc8:	4623      	mov	r3, r4
 801dfca:	f853 1b04 	ldr.w	r1, [r3], #4
 801dfce:	f842 1f04 	str.w	r1, [r2, #4]!
 801dfd2:	429f      	cmp	r7, r3
 801dfd4:	d2f9      	bcs.n	801dfca <__hexnan+0xaa>
 801dfd6:	1b3b      	subs	r3, r7, r4
 801dfd8:	f023 0303 	bic.w	r3, r3, #3
 801dfdc:	3304      	adds	r3, #4
 801dfde:	3401      	adds	r4, #1
 801dfe0:	3e03      	subs	r6, #3
 801dfe2:	42b4      	cmp	r4, r6
 801dfe4:	bf88      	it	hi
 801dfe6:	2304      	movhi	r3, #4
 801dfe8:	4443      	add	r3, r8
 801dfea:	2200      	movs	r2, #0
 801dfec:	f843 2b04 	str.w	r2, [r3], #4
 801dff0:	429f      	cmp	r7, r3
 801dff2:	d2fb      	bcs.n	801dfec <__hexnan+0xcc>
 801dff4:	683b      	ldr	r3, [r7, #0]
 801dff6:	b91b      	cbnz	r3, 801e000 <__hexnan+0xe0>
 801dff8:	4547      	cmp	r7, r8
 801dffa:	d127      	bne.n	801e04c <__hexnan+0x12c>
 801dffc:	2301      	movs	r3, #1
 801dffe:	603b      	str	r3, [r7, #0]
 801e000:	2005      	movs	r0, #5
 801e002:	e026      	b.n	801e052 <__hexnan+0x132>
 801e004:	3501      	adds	r5, #1
 801e006:	2d08      	cmp	r5, #8
 801e008:	f10b 0b01 	add.w	fp, fp, #1
 801e00c:	dd06      	ble.n	801e01c <__hexnan+0xfc>
 801e00e:	4544      	cmp	r4, r8
 801e010:	d9c3      	bls.n	801df9a <__hexnan+0x7a>
 801e012:	2300      	movs	r3, #0
 801e014:	f844 3c04 	str.w	r3, [r4, #-4]
 801e018:	2501      	movs	r5, #1
 801e01a:	3c04      	subs	r4, #4
 801e01c:	6822      	ldr	r2, [r4, #0]
 801e01e:	f000 000f 	and.w	r0, r0, #15
 801e022:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801e026:	6022      	str	r2, [r4, #0]
 801e028:	e7b7      	b.n	801df9a <__hexnan+0x7a>
 801e02a:	2508      	movs	r5, #8
 801e02c:	e7b5      	b.n	801df9a <__hexnan+0x7a>
 801e02e:	9b01      	ldr	r3, [sp, #4]
 801e030:	2b00      	cmp	r3, #0
 801e032:	d0df      	beq.n	801dff4 <__hexnan+0xd4>
 801e034:	f04f 32ff 	mov.w	r2, #4294967295
 801e038:	f1c3 0320 	rsb	r3, r3, #32
 801e03c:	fa22 f303 	lsr.w	r3, r2, r3
 801e040:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801e044:	401a      	ands	r2, r3
 801e046:	f846 2c04 	str.w	r2, [r6, #-4]
 801e04a:	e7d3      	b.n	801dff4 <__hexnan+0xd4>
 801e04c:	3f04      	subs	r7, #4
 801e04e:	e7d1      	b.n	801dff4 <__hexnan+0xd4>
 801e050:	2004      	movs	r0, #4
 801e052:	b007      	add	sp, #28
 801e054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e058 <_localeconv_r>:
 801e058:	4800      	ldr	r0, [pc, #0]	; (801e05c <_localeconv_r+0x4>)
 801e05a:	4770      	bx	lr
 801e05c:	20000350 	.word	0x20000350

0801e060 <_lseek_r>:
 801e060:	b538      	push	{r3, r4, r5, lr}
 801e062:	4d07      	ldr	r5, [pc, #28]	; (801e080 <_lseek_r+0x20>)
 801e064:	4604      	mov	r4, r0
 801e066:	4608      	mov	r0, r1
 801e068:	4611      	mov	r1, r2
 801e06a:	2200      	movs	r2, #0
 801e06c:	602a      	str	r2, [r5, #0]
 801e06e:	461a      	mov	r2, r3
 801e070:	f7e5 f8ea 	bl	8003248 <_lseek>
 801e074:	1c43      	adds	r3, r0, #1
 801e076:	d102      	bne.n	801e07e <_lseek_r+0x1e>
 801e078:	682b      	ldr	r3, [r5, #0]
 801e07a:	b103      	cbz	r3, 801e07e <_lseek_r+0x1e>
 801e07c:	6023      	str	r3, [r4, #0]
 801e07e:	bd38      	pop	{r3, r4, r5, pc}
 801e080:	20008fb4 	.word	0x20008fb4

0801e084 <__swhatbuf_r>:
 801e084:	b570      	push	{r4, r5, r6, lr}
 801e086:	460e      	mov	r6, r1
 801e088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e08c:	2900      	cmp	r1, #0
 801e08e:	b096      	sub	sp, #88	; 0x58
 801e090:	4614      	mov	r4, r2
 801e092:	461d      	mov	r5, r3
 801e094:	da07      	bge.n	801e0a6 <__swhatbuf_r+0x22>
 801e096:	2300      	movs	r3, #0
 801e098:	602b      	str	r3, [r5, #0]
 801e09a:	89b3      	ldrh	r3, [r6, #12]
 801e09c:	061a      	lsls	r2, r3, #24
 801e09e:	d410      	bmi.n	801e0c2 <__swhatbuf_r+0x3e>
 801e0a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e0a4:	e00e      	b.n	801e0c4 <__swhatbuf_r+0x40>
 801e0a6:	466a      	mov	r2, sp
 801e0a8:	f001 fbc6 	bl	801f838 <_fstat_r>
 801e0ac:	2800      	cmp	r0, #0
 801e0ae:	dbf2      	blt.n	801e096 <__swhatbuf_r+0x12>
 801e0b0:	9a01      	ldr	r2, [sp, #4]
 801e0b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e0b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e0ba:	425a      	negs	r2, r3
 801e0bc:	415a      	adcs	r2, r3
 801e0be:	602a      	str	r2, [r5, #0]
 801e0c0:	e7ee      	b.n	801e0a0 <__swhatbuf_r+0x1c>
 801e0c2:	2340      	movs	r3, #64	; 0x40
 801e0c4:	2000      	movs	r0, #0
 801e0c6:	6023      	str	r3, [r4, #0]
 801e0c8:	b016      	add	sp, #88	; 0x58
 801e0ca:	bd70      	pop	{r4, r5, r6, pc}

0801e0cc <__smakebuf_r>:
 801e0cc:	898b      	ldrh	r3, [r1, #12]
 801e0ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e0d0:	079d      	lsls	r5, r3, #30
 801e0d2:	4606      	mov	r6, r0
 801e0d4:	460c      	mov	r4, r1
 801e0d6:	d507      	bpl.n	801e0e8 <__smakebuf_r+0x1c>
 801e0d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e0dc:	6023      	str	r3, [r4, #0]
 801e0de:	6123      	str	r3, [r4, #16]
 801e0e0:	2301      	movs	r3, #1
 801e0e2:	6163      	str	r3, [r4, #20]
 801e0e4:	b002      	add	sp, #8
 801e0e6:	bd70      	pop	{r4, r5, r6, pc}
 801e0e8:	ab01      	add	r3, sp, #4
 801e0ea:	466a      	mov	r2, sp
 801e0ec:	f7ff ffca 	bl	801e084 <__swhatbuf_r>
 801e0f0:	9900      	ldr	r1, [sp, #0]
 801e0f2:	4605      	mov	r5, r0
 801e0f4:	4630      	mov	r0, r6
 801e0f6:	f7fc fba1 	bl	801a83c <_malloc_r>
 801e0fa:	b948      	cbnz	r0, 801e110 <__smakebuf_r+0x44>
 801e0fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e100:	059a      	lsls	r2, r3, #22
 801e102:	d4ef      	bmi.n	801e0e4 <__smakebuf_r+0x18>
 801e104:	f023 0303 	bic.w	r3, r3, #3
 801e108:	f043 0302 	orr.w	r3, r3, #2
 801e10c:	81a3      	strh	r3, [r4, #12]
 801e10e:	e7e3      	b.n	801e0d8 <__smakebuf_r+0xc>
 801e110:	4b0d      	ldr	r3, [pc, #52]	; (801e148 <__smakebuf_r+0x7c>)
 801e112:	62b3      	str	r3, [r6, #40]	; 0x28
 801e114:	89a3      	ldrh	r3, [r4, #12]
 801e116:	6020      	str	r0, [r4, #0]
 801e118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e11c:	81a3      	strh	r3, [r4, #12]
 801e11e:	9b00      	ldr	r3, [sp, #0]
 801e120:	6163      	str	r3, [r4, #20]
 801e122:	9b01      	ldr	r3, [sp, #4]
 801e124:	6120      	str	r0, [r4, #16]
 801e126:	b15b      	cbz	r3, 801e140 <__smakebuf_r+0x74>
 801e128:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e12c:	4630      	mov	r0, r6
 801e12e:	f001 fb95 	bl	801f85c <_isatty_r>
 801e132:	b128      	cbz	r0, 801e140 <__smakebuf_r+0x74>
 801e134:	89a3      	ldrh	r3, [r4, #12]
 801e136:	f023 0303 	bic.w	r3, r3, #3
 801e13a:	f043 0301 	orr.w	r3, r3, #1
 801e13e:	81a3      	strh	r3, [r4, #12]
 801e140:	89a0      	ldrh	r0, [r4, #12]
 801e142:	4305      	orrs	r5, r0
 801e144:	81a5      	strh	r5, [r4, #12]
 801e146:	e7cd      	b.n	801e0e4 <__smakebuf_r+0x18>
 801e148:	0801a539 	.word	0x0801a539

0801e14c <__ascii_mbtowc>:
 801e14c:	b082      	sub	sp, #8
 801e14e:	b901      	cbnz	r1, 801e152 <__ascii_mbtowc+0x6>
 801e150:	a901      	add	r1, sp, #4
 801e152:	b142      	cbz	r2, 801e166 <__ascii_mbtowc+0x1a>
 801e154:	b14b      	cbz	r3, 801e16a <__ascii_mbtowc+0x1e>
 801e156:	7813      	ldrb	r3, [r2, #0]
 801e158:	600b      	str	r3, [r1, #0]
 801e15a:	7812      	ldrb	r2, [r2, #0]
 801e15c:	1e10      	subs	r0, r2, #0
 801e15e:	bf18      	it	ne
 801e160:	2001      	movne	r0, #1
 801e162:	b002      	add	sp, #8
 801e164:	4770      	bx	lr
 801e166:	4610      	mov	r0, r2
 801e168:	e7fb      	b.n	801e162 <__ascii_mbtowc+0x16>
 801e16a:	f06f 0001 	mvn.w	r0, #1
 801e16e:	e7f8      	b.n	801e162 <__ascii_mbtowc+0x16>

0801e170 <__malloc_lock>:
 801e170:	4801      	ldr	r0, [pc, #4]	; (801e178 <__malloc_lock+0x8>)
 801e172:	f7fc bad8 	b.w	801a726 <__retarget_lock_acquire_recursive>
 801e176:	bf00      	nop
 801e178:	20008fac 	.word	0x20008fac

0801e17c <__malloc_unlock>:
 801e17c:	4801      	ldr	r0, [pc, #4]	; (801e184 <__malloc_unlock+0x8>)
 801e17e:	f7fc bad3 	b.w	801a728 <__retarget_lock_release_recursive>
 801e182:	bf00      	nop
 801e184:	20008fac 	.word	0x20008fac

0801e188 <_Balloc>:
 801e188:	b570      	push	{r4, r5, r6, lr}
 801e18a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801e18c:	4604      	mov	r4, r0
 801e18e:	460d      	mov	r5, r1
 801e190:	b976      	cbnz	r6, 801e1b0 <_Balloc+0x28>
 801e192:	2010      	movs	r0, #16
 801e194:	f7fc faca 	bl	801a72c <malloc>
 801e198:	4602      	mov	r2, r0
 801e19a:	6260      	str	r0, [r4, #36]	; 0x24
 801e19c:	b920      	cbnz	r0, 801e1a8 <_Balloc+0x20>
 801e19e:	4b18      	ldr	r3, [pc, #96]	; (801e200 <_Balloc+0x78>)
 801e1a0:	4818      	ldr	r0, [pc, #96]	; (801e204 <_Balloc+0x7c>)
 801e1a2:	2166      	movs	r1, #102	; 0x66
 801e1a4:	f7fe fc6c 	bl	801ca80 <__assert_func>
 801e1a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e1ac:	6006      	str	r6, [r0, #0]
 801e1ae:	60c6      	str	r6, [r0, #12]
 801e1b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801e1b2:	68f3      	ldr	r3, [r6, #12]
 801e1b4:	b183      	cbz	r3, 801e1d8 <_Balloc+0x50>
 801e1b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e1b8:	68db      	ldr	r3, [r3, #12]
 801e1ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e1be:	b9b8      	cbnz	r0, 801e1f0 <_Balloc+0x68>
 801e1c0:	2101      	movs	r1, #1
 801e1c2:	fa01 f605 	lsl.w	r6, r1, r5
 801e1c6:	1d72      	adds	r2, r6, #5
 801e1c8:	0092      	lsls	r2, r2, #2
 801e1ca:	4620      	mov	r0, r4
 801e1cc:	f000 fc97 	bl	801eafe <_calloc_r>
 801e1d0:	b160      	cbz	r0, 801e1ec <_Balloc+0x64>
 801e1d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e1d6:	e00e      	b.n	801e1f6 <_Balloc+0x6e>
 801e1d8:	2221      	movs	r2, #33	; 0x21
 801e1da:	2104      	movs	r1, #4
 801e1dc:	4620      	mov	r0, r4
 801e1de:	f000 fc8e 	bl	801eafe <_calloc_r>
 801e1e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e1e4:	60f0      	str	r0, [r6, #12]
 801e1e6:	68db      	ldr	r3, [r3, #12]
 801e1e8:	2b00      	cmp	r3, #0
 801e1ea:	d1e4      	bne.n	801e1b6 <_Balloc+0x2e>
 801e1ec:	2000      	movs	r0, #0
 801e1ee:	bd70      	pop	{r4, r5, r6, pc}
 801e1f0:	6802      	ldr	r2, [r0, #0]
 801e1f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e1f6:	2300      	movs	r3, #0
 801e1f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e1fc:	e7f7      	b.n	801e1ee <_Balloc+0x66>
 801e1fe:	bf00      	nop
 801e200:	08021981 	.word	0x08021981
 801e204:	08021a88 	.word	0x08021a88

0801e208 <_Bfree>:
 801e208:	b570      	push	{r4, r5, r6, lr}
 801e20a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801e20c:	4605      	mov	r5, r0
 801e20e:	460c      	mov	r4, r1
 801e210:	b976      	cbnz	r6, 801e230 <_Bfree+0x28>
 801e212:	2010      	movs	r0, #16
 801e214:	f7fc fa8a 	bl	801a72c <malloc>
 801e218:	4602      	mov	r2, r0
 801e21a:	6268      	str	r0, [r5, #36]	; 0x24
 801e21c:	b920      	cbnz	r0, 801e228 <_Bfree+0x20>
 801e21e:	4b09      	ldr	r3, [pc, #36]	; (801e244 <_Bfree+0x3c>)
 801e220:	4809      	ldr	r0, [pc, #36]	; (801e248 <_Bfree+0x40>)
 801e222:	218a      	movs	r1, #138	; 0x8a
 801e224:	f7fe fc2c 	bl	801ca80 <__assert_func>
 801e228:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e22c:	6006      	str	r6, [r0, #0]
 801e22e:	60c6      	str	r6, [r0, #12]
 801e230:	b13c      	cbz	r4, 801e242 <_Bfree+0x3a>
 801e232:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801e234:	6862      	ldr	r2, [r4, #4]
 801e236:	68db      	ldr	r3, [r3, #12]
 801e238:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e23c:	6021      	str	r1, [r4, #0]
 801e23e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e242:	bd70      	pop	{r4, r5, r6, pc}
 801e244:	08021981 	.word	0x08021981
 801e248:	08021a88 	.word	0x08021a88

0801e24c <__multadd>:
 801e24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e250:	690e      	ldr	r6, [r1, #16]
 801e252:	4607      	mov	r7, r0
 801e254:	4698      	mov	r8, r3
 801e256:	460c      	mov	r4, r1
 801e258:	f101 0014 	add.w	r0, r1, #20
 801e25c:	2300      	movs	r3, #0
 801e25e:	6805      	ldr	r5, [r0, #0]
 801e260:	b2a9      	uxth	r1, r5
 801e262:	fb02 8101 	mla	r1, r2, r1, r8
 801e266:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801e26a:	0c2d      	lsrs	r5, r5, #16
 801e26c:	fb02 c505 	mla	r5, r2, r5, ip
 801e270:	b289      	uxth	r1, r1
 801e272:	3301      	adds	r3, #1
 801e274:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801e278:	429e      	cmp	r6, r3
 801e27a:	f840 1b04 	str.w	r1, [r0], #4
 801e27e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801e282:	dcec      	bgt.n	801e25e <__multadd+0x12>
 801e284:	f1b8 0f00 	cmp.w	r8, #0
 801e288:	d022      	beq.n	801e2d0 <__multadd+0x84>
 801e28a:	68a3      	ldr	r3, [r4, #8]
 801e28c:	42b3      	cmp	r3, r6
 801e28e:	dc19      	bgt.n	801e2c4 <__multadd+0x78>
 801e290:	6861      	ldr	r1, [r4, #4]
 801e292:	4638      	mov	r0, r7
 801e294:	3101      	adds	r1, #1
 801e296:	f7ff ff77 	bl	801e188 <_Balloc>
 801e29a:	4605      	mov	r5, r0
 801e29c:	b928      	cbnz	r0, 801e2aa <__multadd+0x5e>
 801e29e:	4602      	mov	r2, r0
 801e2a0:	4b0d      	ldr	r3, [pc, #52]	; (801e2d8 <__multadd+0x8c>)
 801e2a2:	480e      	ldr	r0, [pc, #56]	; (801e2dc <__multadd+0x90>)
 801e2a4:	21b5      	movs	r1, #181	; 0xb5
 801e2a6:	f7fe fbeb 	bl	801ca80 <__assert_func>
 801e2aa:	6922      	ldr	r2, [r4, #16]
 801e2ac:	3202      	adds	r2, #2
 801e2ae:	f104 010c 	add.w	r1, r4, #12
 801e2b2:	0092      	lsls	r2, r2, #2
 801e2b4:	300c      	adds	r0, #12
 801e2b6:	f7fc fa41 	bl	801a73c <memcpy>
 801e2ba:	4621      	mov	r1, r4
 801e2bc:	4638      	mov	r0, r7
 801e2be:	f7ff ffa3 	bl	801e208 <_Bfree>
 801e2c2:	462c      	mov	r4, r5
 801e2c4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801e2c8:	3601      	adds	r6, #1
 801e2ca:	f8c3 8014 	str.w	r8, [r3, #20]
 801e2ce:	6126      	str	r6, [r4, #16]
 801e2d0:	4620      	mov	r0, r4
 801e2d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e2d6:	bf00      	nop
 801e2d8:	080219f7 	.word	0x080219f7
 801e2dc:	08021a88 	.word	0x08021a88

0801e2e0 <__s2b>:
 801e2e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e2e4:	460c      	mov	r4, r1
 801e2e6:	4615      	mov	r5, r2
 801e2e8:	461f      	mov	r7, r3
 801e2ea:	2209      	movs	r2, #9
 801e2ec:	3308      	adds	r3, #8
 801e2ee:	4606      	mov	r6, r0
 801e2f0:	fb93 f3f2 	sdiv	r3, r3, r2
 801e2f4:	2100      	movs	r1, #0
 801e2f6:	2201      	movs	r2, #1
 801e2f8:	429a      	cmp	r2, r3
 801e2fa:	db09      	blt.n	801e310 <__s2b+0x30>
 801e2fc:	4630      	mov	r0, r6
 801e2fe:	f7ff ff43 	bl	801e188 <_Balloc>
 801e302:	b940      	cbnz	r0, 801e316 <__s2b+0x36>
 801e304:	4602      	mov	r2, r0
 801e306:	4b19      	ldr	r3, [pc, #100]	; (801e36c <__s2b+0x8c>)
 801e308:	4819      	ldr	r0, [pc, #100]	; (801e370 <__s2b+0x90>)
 801e30a:	21ce      	movs	r1, #206	; 0xce
 801e30c:	f7fe fbb8 	bl	801ca80 <__assert_func>
 801e310:	0052      	lsls	r2, r2, #1
 801e312:	3101      	adds	r1, #1
 801e314:	e7f0      	b.n	801e2f8 <__s2b+0x18>
 801e316:	9b08      	ldr	r3, [sp, #32]
 801e318:	6143      	str	r3, [r0, #20]
 801e31a:	2d09      	cmp	r5, #9
 801e31c:	f04f 0301 	mov.w	r3, #1
 801e320:	6103      	str	r3, [r0, #16]
 801e322:	dd16      	ble.n	801e352 <__s2b+0x72>
 801e324:	f104 0909 	add.w	r9, r4, #9
 801e328:	46c8      	mov	r8, r9
 801e32a:	442c      	add	r4, r5
 801e32c:	f818 3b01 	ldrb.w	r3, [r8], #1
 801e330:	4601      	mov	r1, r0
 801e332:	3b30      	subs	r3, #48	; 0x30
 801e334:	220a      	movs	r2, #10
 801e336:	4630      	mov	r0, r6
 801e338:	f7ff ff88 	bl	801e24c <__multadd>
 801e33c:	45a0      	cmp	r8, r4
 801e33e:	d1f5      	bne.n	801e32c <__s2b+0x4c>
 801e340:	f1a5 0408 	sub.w	r4, r5, #8
 801e344:	444c      	add	r4, r9
 801e346:	1b2d      	subs	r5, r5, r4
 801e348:	1963      	adds	r3, r4, r5
 801e34a:	42bb      	cmp	r3, r7
 801e34c:	db04      	blt.n	801e358 <__s2b+0x78>
 801e34e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e352:	340a      	adds	r4, #10
 801e354:	2509      	movs	r5, #9
 801e356:	e7f6      	b.n	801e346 <__s2b+0x66>
 801e358:	f814 3b01 	ldrb.w	r3, [r4], #1
 801e35c:	4601      	mov	r1, r0
 801e35e:	3b30      	subs	r3, #48	; 0x30
 801e360:	220a      	movs	r2, #10
 801e362:	4630      	mov	r0, r6
 801e364:	f7ff ff72 	bl	801e24c <__multadd>
 801e368:	e7ee      	b.n	801e348 <__s2b+0x68>
 801e36a:	bf00      	nop
 801e36c:	080219f7 	.word	0x080219f7
 801e370:	08021a88 	.word	0x08021a88

0801e374 <__hi0bits>:
 801e374:	0c03      	lsrs	r3, r0, #16
 801e376:	041b      	lsls	r3, r3, #16
 801e378:	b9d3      	cbnz	r3, 801e3b0 <__hi0bits+0x3c>
 801e37a:	0400      	lsls	r0, r0, #16
 801e37c:	2310      	movs	r3, #16
 801e37e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801e382:	bf04      	itt	eq
 801e384:	0200      	lsleq	r0, r0, #8
 801e386:	3308      	addeq	r3, #8
 801e388:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801e38c:	bf04      	itt	eq
 801e38e:	0100      	lsleq	r0, r0, #4
 801e390:	3304      	addeq	r3, #4
 801e392:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801e396:	bf04      	itt	eq
 801e398:	0080      	lsleq	r0, r0, #2
 801e39a:	3302      	addeq	r3, #2
 801e39c:	2800      	cmp	r0, #0
 801e39e:	db05      	blt.n	801e3ac <__hi0bits+0x38>
 801e3a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801e3a4:	f103 0301 	add.w	r3, r3, #1
 801e3a8:	bf08      	it	eq
 801e3aa:	2320      	moveq	r3, #32
 801e3ac:	4618      	mov	r0, r3
 801e3ae:	4770      	bx	lr
 801e3b0:	2300      	movs	r3, #0
 801e3b2:	e7e4      	b.n	801e37e <__hi0bits+0xa>

0801e3b4 <__lo0bits>:
 801e3b4:	6803      	ldr	r3, [r0, #0]
 801e3b6:	f013 0207 	ands.w	r2, r3, #7
 801e3ba:	4601      	mov	r1, r0
 801e3bc:	d00b      	beq.n	801e3d6 <__lo0bits+0x22>
 801e3be:	07da      	lsls	r2, r3, #31
 801e3c0:	d424      	bmi.n	801e40c <__lo0bits+0x58>
 801e3c2:	0798      	lsls	r0, r3, #30
 801e3c4:	bf49      	itett	mi
 801e3c6:	085b      	lsrmi	r3, r3, #1
 801e3c8:	089b      	lsrpl	r3, r3, #2
 801e3ca:	2001      	movmi	r0, #1
 801e3cc:	600b      	strmi	r3, [r1, #0]
 801e3ce:	bf5c      	itt	pl
 801e3d0:	600b      	strpl	r3, [r1, #0]
 801e3d2:	2002      	movpl	r0, #2
 801e3d4:	4770      	bx	lr
 801e3d6:	b298      	uxth	r0, r3
 801e3d8:	b9b0      	cbnz	r0, 801e408 <__lo0bits+0x54>
 801e3da:	0c1b      	lsrs	r3, r3, #16
 801e3dc:	2010      	movs	r0, #16
 801e3de:	f013 0fff 	tst.w	r3, #255	; 0xff
 801e3e2:	bf04      	itt	eq
 801e3e4:	0a1b      	lsreq	r3, r3, #8
 801e3e6:	3008      	addeq	r0, #8
 801e3e8:	071a      	lsls	r2, r3, #28
 801e3ea:	bf04      	itt	eq
 801e3ec:	091b      	lsreq	r3, r3, #4
 801e3ee:	3004      	addeq	r0, #4
 801e3f0:	079a      	lsls	r2, r3, #30
 801e3f2:	bf04      	itt	eq
 801e3f4:	089b      	lsreq	r3, r3, #2
 801e3f6:	3002      	addeq	r0, #2
 801e3f8:	07da      	lsls	r2, r3, #31
 801e3fa:	d403      	bmi.n	801e404 <__lo0bits+0x50>
 801e3fc:	085b      	lsrs	r3, r3, #1
 801e3fe:	f100 0001 	add.w	r0, r0, #1
 801e402:	d005      	beq.n	801e410 <__lo0bits+0x5c>
 801e404:	600b      	str	r3, [r1, #0]
 801e406:	4770      	bx	lr
 801e408:	4610      	mov	r0, r2
 801e40a:	e7e8      	b.n	801e3de <__lo0bits+0x2a>
 801e40c:	2000      	movs	r0, #0
 801e40e:	4770      	bx	lr
 801e410:	2020      	movs	r0, #32
 801e412:	4770      	bx	lr

0801e414 <__i2b>:
 801e414:	b510      	push	{r4, lr}
 801e416:	460c      	mov	r4, r1
 801e418:	2101      	movs	r1, #1
 801e41a:	f7ff feb5 	bl	801e188 <_Balloc>
 801e41e:	4602      	mov	r2, r0
 801e420:	b928      	cbnz	r0, 801e42e <__i2b+0x1a>
 801e422:	4b05      	ldr	r3, [pc, #20]	; (801e438 <__i2b+0x24>)
 801e424:	4805      	ldr	r0, [pc, #20]	; (801e43c <__i2b+0x28>)
 801e426:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801e42a:	f7fe fb29 	bl	801ca80 <__assert_func>
 801e42e:	2301      	movs	r3, #1
 801e430:	6144      	str	r4, [r0, #20]
 801e432:	6103      	str	r3, [r0, #16]
 801e434:	bd10      	pop	{r4, pc}
 801e436:	bf00      	nop
 801e438:	080219f7 	.word	0x080219f7
 801e43c:	08021a88 	.word	0x08021a88

0801e440 <__multiply>:
 801e440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e444:	4614      	mov	r4, r2
 801e446:	690a      	ldr	r2, [r1, #16]
 801e448:	6923      	ldr	r3, [r4, #16]
 801e44a:	429a      	cmp	r2, r3
 801e44c:	bfb8      	it	lt
 801e44e:	460b      	movlt	r3, r1
 801e450:	460d      	mov	r5, r1
 801e452:	bfbc      	itt	lt
 801e454:	4625      	movlt	r5, r4
 801e456:	461c      	movlt	r4, r3
 801e458:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801e45c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801e460:	68ab      	ldr	r3, [r5, #8]
 801e462:	6869      	ldr	r1, [r5, #4]
 801e464:	eb0a 0709 	add.w	r7, sl, r9
 801e468:	42bb      	cmp	r3, r7
 801e46a:	b085      	sub	sp, #20
 801e46c:	bfb8      	it	lt
 801e46e:	3101      	addlt	r1, #1
 801e470:	f7ff fe8a 	bl	801e188 <_Balloc>
 801e474:	b930      	cbnz	r0, 801e484 <__multiply+0x44>
 801e476:	4602      	mov	r2, r0
 801e478:	4b42      	ldr	r3, [pc, #264]	; (801e584 <__multiply+0x144>)
 801e47a:	4843      	ldr	r0, [pc, #268]	; (801e588 <__multiply+0x148>)
 801e47c:	f240 115d 	movw	r1, #349	; 0x15d
 801e480:	f7fe fafe 	bl	801ca80 <__assert_func>
 801e484:	f100 0614 	add.w	r6, r0, #20
 801e488:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801e48c:	4633      	mov	r3, r6
 801e48e:	2200      	movs	r2, #0
 801e490:	4543      	cmp	r3, r8
 801e492:	d31e      	bcc.n	801e4d2 <__multiply+0x92>
 801e494:	f105 0c14 	add.w	ip, r5, #20
 801e498:	f104 0314 	add.w	r3, r4, #20
 801e49c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801e4a0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801e4a4:	9202      	str	r2, [sp, #8]
 801e4a6:	ebac 0205 	sub.w	r2, ip, r5
 801e4aa:	3a15      	subs	r2, #21
 801e4ac:	f022 0203 	bic.w	r2, r2, #3
 801e4b0:	3204      	adds	r2, #4
 801e4b2:	f105 0115 	add.w	r1, r5, #21
 801e4b6:	458c      	cmp	ip, r1
 801e4b8:	bf38      	it	cc
 801e4ba:	2204      	movcc	r2, #4
 801e4bc:	9201      	str	r2, [sp, #4]
 801e4be:	9a02      	ldr	r2, [sp, #8]
 801e4c0:	9303      	str	r3, [sp, #12]
 801e4c2:	429a      	cmp	r2, r3
 801e4c4:	d808      	bhi.n	801e4d8 <__multiply+0x98>
 801e4c6:	2f00      	cmp	r7, #0
 801e4c8:	dc55      	bgt.n	801e576 <__multiply+0x136>
 801e4ca:	6107      	str	r7, [r0, #16]
 801e4cc:	b005      	add	sp, #20
 801e4ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4d2:	f843 2b04 	str.w	r2, [r3], #4
 801e4d6:	e7db      	b.n	801e490 <__multiply+0x50>
 801e4d8:	f8b3 a000 	ldrh.w	sl, [r3]
 801e4dc:	f1ba 0f00 	cmp.w	sl, #0
 801e4e0:	d020      	beq.n	801e524 <__multiply+0xe4>
 801e4e2:	f105 0e14 	add.w	lr, r5, #20
 801e4e6:	46b1      	mov	r9, r6
 801e4e8:	2200      	movs	r2, #0
 801e4ea:	f85e 4b04 	ldr.w	r4, [lr], #4
 801e4ee:	f8d9 b000 	ldr.w	fp, [r9]
 801e4f2:	b2a1      	uxth	r1, r4
 801e4f4:	fa1f fb8b 	uxth.w	fp, fp
 801e4f8:	fb0a b101 	mla	r1, sl, r1, fp
 801e4fc:	4411      	add	r1, r2
 801e4fe:	f8d9 2000 	ldr.w	r2, [r9]
 801e502:	0c24      	lsrs	r4, r4, #16
 801e504:	0c12      	lsrs	r2, r2, #16
 801e506:	fb0a 2404 	mla	r4, sl, r4, r2
 801e50a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801e50e:	b289      	uxth	r1, r1
 801e510:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801e514:	45f4      	cmp	ip, lr
 801e516:	f849 1b04 	str.w	r1, [r9], #4
 801e51a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801e51e:	d8e4      	bhi.n	801e4ea <__multiply+0xaa>
 801e520:	9901      	ldr	r1, [sp, #4]
 801e522:	5072      	str	r2, [r6, r1]
 801e524:	9a03      	ldr	r2, [sp, #12]
 801e526:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801e52a:	3304      	adds	r3, #4
 801e52c:	f1b9 0f00 	cmp.w	r9, #0
 801e530:	d01f      	beq.n	801e572 <__multiply+0x132>
 801e532:	6834      	ldr	r4, [r6, #0]
 801e534:	f105 0114 	add.w	r1, r5, #20
 801e538:	46b6      	mov	lr, r6
 801e53a:	f04f 0a00 	mov.w	sl, #0
 801e53e:	880a      	ldrh	r2, [r1, #0]
 801e540:	f8be b002 	ldrh.w	fp, [lr, #2]
 801e544:	fb09 b202 	mla	r2, r9, r2, fp
 801e548:	4492      	add	sl, r2
 801e54a:	b2a4      	uxth	r4, r4
 801e54c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801e550:	f84e 4b04 	str.w	r4, [lr], #4
 801e554:	f851 4b04 	ldr.w	r4, [r1], #4
 801e558:	f8be 2000 	ldrh.w	r2, [lr]
 801e55c:	0c24      	lsrs	r4, r4, #16
 801e55e:	fb09 2404 	mla	r4, r9, r4, r2
 801e562:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801e566:	458c      	cmp	ip, r1
 801e568:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801e56c:	d8e7      	bhi.n	801e53e <__multiply+0xfe>
 801e56e:	9a01      	ldr	r2, [sp, #4]
 801e570:	50b4      	str	r4, [r6, r2]
 801e572:	3604      	adds	r6, #4
 801e574:	e7a3      	b.n	801e4be <__multiply+0x7e>
 801e576:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801e57a:	2b00      	cmp	r3, #0
 801e57c:	d1a5      	bne.n	801e4ca <__multiply+0x8a>
 801e57e:	3f01      	subs	r7, #1
 801e580:	e7a1      	b.n	801e4c6 <__multiply+0x86>
 801e582:	bf00      	nop
 801e584:	080219f7 	.word	0x080219f7
 801e588:	08021a88 	.word	0x08021a88

0801e58c <__pow5mult>:
 801e58c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e590:	4615      	mov	r5, r2
 801e592:	f012 0203 	ands.w	r2, r2, #3
 801e596:	4606      	mov	r6, r0
 801e598:	460f      	mov	r7, r1
 801e59a:	d007      	beq.n	801e5ac <__pow5mult+0x20>
 801e59c:	4c25      	ldr	r4, [pc, #148]	; (801e634 <__pow5mult+0xa8>)
 801e59e:	3a01      	subs	r2, #1
 801e5a0:	2300      	movs	r3, #0
 801e5a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e5a6:	f7ff fe51 	bl	801e24c <__multadd>
 801e5aa:	4607      	mov	r7, r0
 801e5ac:	10ad      	asrs	r5, r5, #2
 801e5ae:	d03d      	beq.n	801e62c <__pow5mult+0xa0>
 801e5b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801e5b2:	b97c      	cbnz	r4, 801e5d4 <__pow5mult+0x48>
 801e5b4:	2010      	movs	r0, #16
 801e5b6:	f7fc f8b9 	bl	801a72c <malloc>
 801e5ba:	4602      	mov	r2, r0
 801e5bc:	6270      	str	r0, [r6, #36]	; 0x24
 801e5be:	b928      	cbnz	r0, 801e5cc <__pow5mult+0x40>
 801e5c0:	4b1d      	ldr	r3, [pc, #116]	; (801e638 <__pow5mult+0xac>)
 801e5c2:	481e      	ldr	r0, [pc, #120]	; (801e63c <__pow5mult+0xb0>)
 801e5c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801e5c8:	f7fe fa5a 	bl	801ca80 <__assert_func>
 801e5cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e5d0:	6004      	str	r4, [r0, #0]
 801e5d2:	60c4      	str	r4, [r0, #12]
 801e5d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801e5d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e5dc:	b94c      	cbnz	r4, 801e5f2 <__pow5mult+0x66>
 801e5de:	f240 2171 	movw	r1, #625	; 0x271
 801e5e2:	4630      	mov	r0, r6
 801e5e4:	f7ff ff16 	bl	801e414 <__i2b>
 801e5e8:	2300      	movs	r3, #0
 801e5ea:	f8c8 0008 	str.w	r0, [r8, #8]
 801e5ee:	4604      	mov	r4, r0
 801e5f0:	6003      	str	r3, [r0, #0]
 801e5f2:	f04f 0900 	mov.w	r9, #0
 801e5f6:	07eb      	lsls	r3, r5, #31
 801e5f8:	d50a      	bpl.n	801e610 <__pow5mult+0x84>
 801e5fa:	4639      	mov	r1, r7
 801e5fc:	4622      	mov	r2, r4
 801e5fe:	4630      	mov	r0, r6
 801e600:	f7ff ff1e 	bl	801e440 <__multiply>
 801e604:	4639      	mov	r1, r7
 801e606:	4680      	mov	r8, r0
 801e608:	4630      	mov	r0, r6
 801e60a:	f7ff fdfd 	bl	801e208 <_Bfree>
 801e60e:	4647      	mov	r7, r8
 801e610:	106d      	asrs	r5, r5, #1
 801e612:	d00b      	beq.n	801e62c <__pow5mult+0xa0>
 801e614:	6820      	ldr	r0, [r4, #0]
 801e616:	b938      	cbnz	r0, 801e628 <__pow5mult+0x9c>
 801e618:	4622      	mov	r2, r4
 801e61a:	4621      	mov	r1, r4
 801e61c:	4630      	mov	r0, r6
 801e61e:	f7ff ff0f 	bl	801e440 <__multiply>
 801e622:	6020      	str	r0, [r4, #0]
 801e624:	f8c0 9000 	str.w	r9, [r0]
 801e628:	4604      	mov	r4, r0
 801e62a:	e7e4      	b.n	801e5f6 <__pow5mult+0x6a>
 801e62c:	4638      	mov	r0, r7
 801e62e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e632:	bf00      	nop
 801e634:	08021bd8 	.word	0x08021bd8
 801e638:	08021981 	.word	0x08021981
 801e63c:	08021a88 	.word	0x08021a88

0801e640 <__lshift>:
 801e640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e644:	460c      	mov	r4, r1
 801e646:	6849      	ldr	r1, [r1, #4]
 801e648:	6923      	ldr	r3, [r4, #16]
 801e64a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801e64e:	68a3      	ldr	r3, [r4, #8]
 801e650:	4607      	mov	r7, r0
 801e652:	4691      	mov	r9, r2
 801e654:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e658:	f108 0601 	add.w	r6, r8, #1
 801e65c:	42b3      	cmp	r3, r6
 801e65e:	db0b      	blt.n	801e678 <__lshift+0x38>
 801e660:	4638      	mov	r0, r7
 801e662:	f7ff fd91 	bl	801e188 <_Balloc>
 801e666:	4605      	mov	r5, r0
 801e668:	b948      	cbnz	r0, 801e67e <__lshift+0x3e>
 801e66a:	4602      	mov	r2, r0
 801e66c:	4b28      	ldr	r3, [pc, #160]	; (801e710 <__lshift+0xd0>)
 801e66e:	4829      	ldr	r0, [pc, #164]	; (801e714 <__lshift+0xd4>)
 801e670:	f240 11d9 	movw	r1, #473	; 0x1d9
 801e674:	f7fe fa04 	bl	801ca80 <__assert_func>
 801e678:	3101      	adds	r1, #1
 801e67a:	005b      	lsls	r3, r3, #1
 801e67c:	e7ee      	b.n	801e65c <__lshift+0x1c>
 801e67e:	2300      	movs	r3, #0
 801e680:	f100 0114 	add.w	r1, r0, #20
 801e684:	f100 0210 	add.w	r2, r0, #16
 801e688:	4618      	mov	r0, r3
 801e68a:	4553      	cmp	r3, sl
 801e68c:	db33      	blt.n	801e6f6 <__lshift+0xb6>
 801e68e:	6920      	ldr	r0, [r4, #16]
 801e690:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e694:	f104 0314 	add.w	r3, r4, #20
 801e698:	f019 091f 	ands.w	r9, r9, #31
 801e69c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e6a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801e6a4:	d02b      	beq.n	801e6fe <__lshift+0xbe>
 801e6a6:	f1c9 0e20 	rsb	lr, r9, #32
 801e6aa:	468a      	mov	sl, r1
 801e6ac:	2200      	movs	r2, #0
 801e6ae:	6818      	ldr	r0, [r3, #0]
 801e6b0:	fa00 f009 	lsl.w	r0, r0, r9
 801e6b4:	4302      	orrs	r2, r0
 801e6b6:	f84a 2b04 	str.w	r2, [sl], #4
 801e6ba:	f853 2b04 	ldr.w	r2, [r3], #4
 801e6be:	459c      	cmp	ip, r3
 801e6c0:	fa22 f20e 	lsr.w	r2, r2, lr
 801e6c4:	d8f3      	bhi.n	801e6ae <__lshift+0x6e>
 801e6c6:	ebac 0304 	sub.w	r3, ip, r4
 801e6ca:	3b15      	subs	r3, #21
 801e6cc:	f023 0303 	bic.w	r3, r3, #3
 801e6d0:	3304      	adds	r3, #4
 801e6d2:	f104 0015 	add.w	r0, r4, #21
 801e6d6:	4584      	cmp	ip, r0
 801e6d8:	bf38      	it	cc
 801e6da:	2304      	movcc	r3, #4
 801e6dc:	50ca      	str	r2, [r1, r3]
 801e6de:	b10a      	cbz	r2, 801e6e4 <__lshift+0xa4>
 801e6e0:	f108 0602 	add.w	r6, r8, #2
 801e6e4:	3e01      	subs	r6, #1
 801e6e6:	4638      	mov	r0, r7
 801e6e8:	612e      	str	r6, [r5, #16]
 801e6ea:	4621      	mov	r1, r4
 801e6ec:	f7ff fd8c 	bl	801e208 <_Bfree>
 801e6f0:	4628      	mov	r0, r5
 801e6f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e6f6:	f842 0f04 	str.w	r0, [r2, #4]!
 801e6fa:	3301      	adds	r3, #1
 801e6fc:	e7c5      	b.n	801e68a <__lshift+0x4a>
 801e6fe:	3904      	subs	r1, #4
 801e700:	f853 2b04 	ldr.w	r2, [r3], #4
 801e704:	f841 2f04 	str.w	r2, [r1, #4]!
 801e708:	459c      	cmp	ip, r3
 801e70a:	d8f9      	bhi.n	801e700 <__lshift+0xc0>
 801e70c:	e7ea      	b.n	801e6e4 <__lshift+0xa4>
 801e70e:	bf00      	nop
 801e710:	080219f7 	.word	0x080219f7
 801e714:	08021a88 	.word	0x08021a88

0801e718 <__mcmp>:
 801e718:	b530      	push	{r4, r5, lr}
 801e71a:	6902      	ldr	r2, [r0, #16]
 801e71c:	690c      	ldr	r4, [r1, #16]
 801e71e:	1b12      	subs	r2, r2, r4
 801e720:	d10e      	bne.n	801e740 <__mcmp+0x28>
 801e722:	f100 0314 	add.w	r3, r0, #20
 801e726:	3114      	adds	r1, #20
 801e728:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801e72c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801e730:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801e734:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801e738:	42a5      	cmp	r5, r4
 801e73a:	d003      	beq.n	801e744 <__mcmp+0x2c>
 801e73c:	d305      	bcc.n	801e74a <__mcmp+0x32>
 801e73e:	2201      	movs	r2, #1
 801e740:	4610      	mov	r0, r2
 801e742:	bd30      	pop	{r4, r5, pc}
 801e744:	4283      	cmp	r3, r0
 801e746:	d3f3      	bcc.n	801e730 <__mcmp+0x18>
 801e748:	e7fa      	b.n	801e740 <__mcmp+0x28>
 801e74a:	f04f 32ff 	mov.w	r2, #4294967295
 801e74e:	e7f7      	b.n	801e740 <__mcmp+0x28>

0801e750 <__mdiff>:
 801e750:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e754:	460c      	mov	r4, r1
 801e756:	4606      	mov	r6, r0
 801e758:	4611      	mov	r1, r2
 801e75a:	4620      	mov	r0, r4
 801e75c:	4617      	mov	r7, r2
 801e75e:	f7ff ffdb 	bl	801e718 <__mcmp>
 801e762:	1e05      	subs	r5, r0, #0
 801e764:	d110      	bne.n	801e788 <__mdiff+0x38>
 801e766:	4629      	mov	r1, r5
 801e768:	4630      	mov	r0, r6
 801e76a:	f7ff fd0d 	bl	801e188 <_Balloc>
 801e76e:	b930      	cbnz	r0, 801e77e <__mdiff+0x2e>
 801e770:	4b39      	ldr	r3, [pc, #228]	; (801e858 <__mdiff+0x108>)
 801e772:	4602      	mov	r2, r0
 801e774:	f240 2132 	movw	r1, #562	; 0x232
 801e778:	4838      	ldr	r0, [pc, #224]	; (801e85c <__mdiff+0x10c>)
 801e77a:	f7fe f981 	bl	801ca80 <__assert_func>
 801e77e:	2301      	movs	r3, #1
 801e780:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801e784:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e788:	bfa4      	itt	ge
 801e78a:	463b      	movge	r3, r7
 801e78c:	4627      	movge	r7, r4
 801e78e:	4630      	mov	r0, r6
 801e790:	6879      	ldr	r1, [r7, #4]
 801e792:	bfa6      	itte	ge
 801e794:	461c      	movge	r4, r3
 801e796:	2500      	movge	r5, #0
 801e798:	2501      	movlt	r5, #1
 801e79a:	f7ff fcf5 	bl	801e188 <_Balloc>
 801e79e:	b920      	cbnz	r0, 801e7aa <__mdiff+0x5a>
 801e7a0:	4b2d      	ldr	r3, [pc, #180]	; (801e858 <__mdiff+0x108>)
 801e7a2:	4602      	mov	r2, r0
 801e7a4:	f44f 7110 	mov.w	r1, #576	; 0x240
 801e7a8:	e7e6      	b.n	801e778 <__mdiff+0x28>
 801e7aa:	693e      	ldr	r6, [r7, #16]
 801e7ac:	60c5      	str	r5, [r0, #12]
 801e7ae:	6925      	ldr	r5, [r4, #16]
 801e7b0:	f107 0114 	add.w	r1, r7, #20
 801e7b4:	f104 0914 	add.w	r9, r4, #20
 801e7b8:	f100 0e14 	add.w	lr, r0, #20
 801e7bc:	f107 0210 	add.w	r2, r7, #16
 801e7c0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801e7c4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801e7c8:	46f2      	mov	sl, lr
 801e7ca:	2700      	movs	r7, #0
 801e7cc:	f859 3b04 	ldr.w	r3, [r9], #4
 801e7d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801e7d4:	fa1f f883 	uxth.w	r8, r3
 801e7d8:	fa17 f78b 	uxtah	r7, r7, fp
 801e7dc:	0c1b      	lsrs	r3, r3, #16
 801e7de:	eba7 0808 	sub.w	r8, r7, r8
 801e7e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801e7e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801e7ea:	fa1f f888 	uxth.w	r8, r8
 801e7ee:	141f      	asrs	r7, r3, #16
 801e7f0:	454d      	cmp	r5, r9
 801e7f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801e7f6:	f84a 3b04 	str.w	r3, [sl], #4
 801e7fa:	d8e7      	bhi.n	801e7cc <__mdiff+0x7c>
 801e7fc:	1b2b      	subs	r3, r5, r4
 801e7fe:	3b15      	subs	r3, #21
 801e800:	f023 0303 	bic.w	r3, r3, #3
 801e804:	3304      	adds	r3, #4
 801e806:	3415      	adds	r4, #21
 801e808:	42a5      	cmp	r5, r4
 801e80a:	bf38      	it	cc
 801e80c:	2304      	movcc	r3, #4
 801e80e:	4419      	add	r1, r3
 801e810:	4473      	add	r3, lr
 801e812:	469e      	mov	lr, r3
 801e814:	460d      	mov	r5, r1
 801e816:	4565      	cmp	r5, ip
 801e818:	d30e      	bcc.n	801e838 <__mdiff+0xe8>
 801e81a:	f10c 0203 	add.w	r2, ip, #3
 801e81e:	1a52      	subs	r2, r2, r1
 801e820:	f022 0203 	bic.w	r2, r2, #3
 801e824:	3903      	subs	r1, #3
 801e826:	458c      	cmp	ip, r1
 801e828:	bf38      	it	cc
 801e82a:	2200      	movcc	r2, #0
 801e82c:	441a      	add	r2, r3
 801e82e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801e832:	b17b      	cbz	r3, 801e854 <__mdiff+0x104>
 801e834:	6106      	str	r6, [r0, #16]
 801e836:	e7a5      	b.n	801e784 <__mdiff+0x34>
 801e838:	f855 8b04 	ldr.w	r8, [r5], #4
 801e83c:	fa17 f488 	uxtah	r4, r7, r8
 801e840:	1422      	asrs	r2, r4, #16
 801e842:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801e846:	b2a4      	uxth	r4, r4
 801e848:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801e84c:	f84e 4b04 	str.w	r4, [lr], #4
 801e850:	1417      	asrs	r7, r2, #16
 801e852:	e7e0      	b.n	801e816 <__mdiff+0xc6>
 801e854:	3e01      	subs	r6, #1
 801e856:	e7ea      	b.n	801e82e <__mdiff+0xde>
 801e858:	080219f7 	.word	0x080219f7
 801e85c:	08021a88 	.word	0x08021a88

0801e860 <__ulp>:
 801e860:	b082      	sub	sp, #8
 801e862:	ed8d 0b00 	vstr	d0, [sp]
 801e866:	9b01      	ldr	r3, [sp, #4]
 801e868:	4912      	ldr	r1, [pc, #72]	; (801e8b4 <__ulp+0x54>)
 801e86a:	4019      	ands	r1, r3
 801e86c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801e870:	2900      	cmp	r1, #0
 801e872:	dd05      	ble.n	801e880 <__ulp+0x20>
 801e874:	2200      	movs	r2, #0
 801e876:	460b      	mov	r3, r1
 801e878:	ec43 2b10 	vmov	d0, r2, r3
 801e87c:	b002      	add	sp, #8
 801e87e:	4770      	bx	lr
 801e880:	4249      	negs	r1, r1
 801e882:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801e886:	ea4f 5021 	mov.w	r0, r1, asr #20
 801e88a:	f04f 0200 	mov.w	r2, #0
 801e88e:	f04f 0300 	mov.w	r3, #0
 801e892:	da04      	bge.n	801e89e <__ulp+0x3e>
 801e894:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801e898:	fa41 f300 	asr.w	r3, r1, r0
 801e89c:	e7ec      	b.n	801e878 <__ulp+0x18>
 801e89e:	f1a0 0114 	sub.w	r1, r0, #20
 801e8a2:	291e      	cmp	r1, #30
 801e8a4:	bfda      	itte	le
 801e8a6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801e8aa:	fa20 f101 	lsrle.w	r1, r0, r1
 801e8ae:	2101      	movgt	r1, #1
 801e8b0:	460a      	mov	r2, r1
 801e8b2:	e7e1      	b.n	801e878 <__ulp+0x18>
 801e8b4:	7ff00000 	.word	0x7ff00000

0801e8b8 <__b2d>:
 801e8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e8ba:	6905      	ldr	r5, [r0, #16]
 801e8bc:	f100 0714 	add.w	r7, r0, #20
 801e8c0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801e8c4:	1f2e      	subs	r6, r5, #4
 801e8c6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801e8ca:	4620      	mov	r0, r4
 801e8cc:	f7ff fd52 	bl	801e374 <__hi0bits>
 801e8d0:	f1c0 0320 	rsb	r3, r0, #32
 801e8d4:	280a      	cmp	r0, #10
 801e8d6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801e954 <__b2d+0x9c>
 801e8da:	600b      	str	r3, [r1, #0]
 801e8dc:	dc14      	bgt.n	801e908 <__b2d+0x50>
 801e8de:	f1c0 0e0b 	rsb	lr, r0, #11
 801e8e2:	fa24 f10e 	lsr.w	r1, r4, lr
 801e8e6:	42b7      	cmp	r7, r6
 801e8e8:	ea41 030c 	orr.w	r3, r1, ip
 801e8ec:	bf34      	ite	cc
 801e8ee:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801e8f2:	2100      	movcs	r1, #0
 801e8f4:	3015      	adds	r0, #21
 801e8f6:	fa04 f000 	lsl.w	r0, r4, r0
 801e8fa:	fa21 f10e 	lsr.w	r1, r1, lr
 801e8fe:	ea40 0201 	orr.w	r2, r0, r1
 801e902:	ec43 2b10 	vmov	d0, r2, r3
 801e906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e908:	42b7      	cmp	r7, r6
 801e90a:	bf3a      	itte	cc
 801e90c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801e910:	f1a5 0608 	subcc.w	r6, r5, #8
 801e914:	2100      	movcs	r1, #0
 801e916:	380b      	subs	r0, #11
 801e918:	d017      	beq.n	801e94a <__b2d+0x92>
 801e91a:	f1c0 0c20 	rsb	ip, r0, #32
 801e91e:	fa04 f500 	lsl.w	r5, r4, r0
 801e922:	42be      	cmp	r6, r7
 801e924:	fa21 f40c 	lsr.w	r4, r1, ip
 801e928:	ea45 0504 	orr.w	r5, r5, r4
 801e92c:	bf8c      	ite	hi
 801e92e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801e932:	2400      	movls	r4, #0
 801e934:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801e938:	fa01 f000 	lsl.w	r0, r1, r0
 801e93c:	fa24 f40c 	lsr.w	r4, r4, ip
 801e940:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801e944:	ea40 0204 	orr.w	r2, r0, r4
 801e948:	e7db      	b.n	801e902 <__b2d+0x4a>
 801e94a:	ea44 030c 	orr.w	r3, r4, ip
 801e94e:	460a      	mov	r2, r1
 801e950:	e7d7      	b.n	801e902 <__b2d+0x4a>
 801e952:	bf00      	nop
 801e954:	3ff00000 	.word	0x3ff00000

0801e958 <__d2b>:
 801e958:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e95c:	4689      	mov	r9, r1
 801e95e:	2101      	movs	r1, #1
 801e960:	ec57 6b10 	vmov	r6, r7, d0
 801e964:	4690      	mov	r8, r2
 801e966:	f7ff fc0f 	bl	801e188 <_Balloc>
 801e96a:	4604      	mov	r4, r0
 801e96c:	b930      	cbnz	r0, 801e97c <__d2b+0x24>
 801e96e:	4602      	mov	r2, r0
 801e970:	4b25      	ldr	r3, [pc, #148]	; (801ea08 <__d2b+0xb0>)
 801e972:	4826      	ldr	r0, [pc, #152]	; (801ea0c <__d2b+0xb4>)
 801e974:	f240 310a 	movw	r1, #778	; 0x30a
 801e978:	f7fe f882 	bl	801ca80 <__assert_func>
 801e97c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801e980:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801e984:	bb35      	cbnz	r5, 801e9d4 <__d2b+0x7c>
 801e986:	2e00      	cmp	r6, #0
 801e988:	9301      	str	r3, [sp, #4]
 801e98a:	d028      	beq.n	801e9de <__d2b+0x86>
 801e98c:	4668      	mov	r0, sp
 801e98e:	9600      	str	r6, [sp, #0]
 801e990:	f7ff fd10 	bl	801e3b4 <__lo0bits>
 801e994:	9900      	ldr	r1, [sp, #0]
 801e996:	b300      	cbz	r0, 801e9da <__d2b+0x82>
 801e998:	9a01      	ldr	r2, [sp, #4]
 801e99a:	f1c0 0320 	rsb	r3, r0, #32
 801e99e:	fa02 f303 	lsl.w	r3, r2, r3
 801e9a2:	430b      	orrs	r3, r1
 801e9a4:	40c2      	lsrs	r2, r0
 801e9a6:	6163      	str	r3, [r4, #20]
 801e9a8:	9201      	str	r2, [sp, #4]
 801e9aa:	9b01      	ldr	r3, [sp, #4]
 801e9ac:	61a3      	str	r3, [r4, #24]
 801e9ae:	2b00      	cmp	r3, #0
 801e9b0:	bf14      	ite	ne
 801e9b2:	2202      	movne	r2, #2
 801e9b4:	2201      	moveq	r2, #1
 801e9b6:	6122      	str	r2, [r4, #16]
 801e9b8:	b1d5      	cbz	r5, 801e9f0 <__d2b+0x98>
 801e9ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801e9be:	4405      	add	r5, r0
 801e9c0:	f8c9 5000 	str.w	r5, [r9]
 801e9c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801e9c8:	f8c8 0000 	str.w	r0, [r8]
 801e9cc:	4620      	mov	r0, r4
 801e9ce:	b003      	add	sp, #12
 801e9d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e9d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801e9d8:	e7d5      	b.n	801e986 <__d2b+0x2e>
 801e9da:	6161      	str	r1, [r4, #20]
 801e9dc:	e7e5      	b.n	801e9aa <__d2b+0x52>
 801e9de:	a801      	add	r0, sp, #4
 801e9e0:	f7ff fce8 	bl	801e3b4 <__lo0bits>
 801e9e4:	9b01      	ldr	r3, [sp, #4]
 801e9e6:	6163      	str	r3, [r4, #20]
 801e9e8:	2201      	movs	r2, #1
 801e9ea:	6122      	str	r2, [r4, #16]
 801e9ec:	3020      	adds	r0, #32
 801e9ee:	e7e3      	b.n	801e9b8 <__d2b+0x60>
 801e9f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e9f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801e9f8:	f8c9 0000 	str.w	r0, [r9]
 801e9fc:	6918      	ldr	r0, [r3, #16]
 801e9fe:	f7ff fcb9 	bl	801e374 <__hi0bits>
 801ea02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ea06:	e7df      	b.n	801e9c8 <__d2b+0x70>
 801ea08:	080219f7 	.word	0x080219f7
 801ea0c:	08021a88 	.word	0x08021a88

0801ea10 <__ratio>:
 801ea10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea14:	4688      	mov	r8, r1
 801ea16:	4669      	mov	r1, sp
 801ea18:	4681      	mov	r9, r0
 801ea1a:	f7ff ff4d 	bl	801e8b8 <__b2d>
 801ea1e:	a901      	add	r1, sp, #4
 801ea20:	4640      	mov	r0, r8
 801ea22:	ec55 4b10 	vmov	r4, r5, d0
 801ea26:	f7ff ff47 	bl	801e8b8 <__b2d>
 801ea2a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ea2e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801ea32:	eba3 0c02 	sub.w	ip, r3, r2
 801ea36:	e9dd 3200 	ldrd	r3, r2, [sp]
 801ea3a:	1a9b      	subs	r3, r3, r2
 801ea3c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801ea40:	ec51 0b10 	vmov	r0, r1, d0
 801ea44:	2b00      	cmp	r3, #0
 801ea46:	bfd6      	itet	le
 801ea48:	460a      	movle	r2, r1
 801ea4a:	462a      	movgt	r2, r5
 801ea4c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801ea50:	468b      	mov	fp, r1
 801ea52:	462f      	mov	r7, r5
 801ea54:	bfd4      	ite	le
 801ea56:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801ea5a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801ea5e:	4620      	mov	r0, r4
 801ea60:	ee10 2a10 	vmov	r2, s0
 801ea64:	465b      	mov	r3, fp
 801ea66:	4639      	mov	r1, r7
 801ea68:	f7e1 ff00 	bl	800086c <__aeabi_ddiv>
 801ea6c:	ec41 0b10 	vmov	d0, r0, r1
 801ea70:	b003      	add	sp, #12
 801ea72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ea76 <__copybits>:
 801ea76:	3901      	subs	r1, #1
 801ea78:	b570      	push	{r4, r5, r6, lr}
 801ea7a:	1149      	asrs	r1, r1, #5
 801ea7c:	6914      	ldr	r4, [r2, #16]
 801ea7e:	3101      	adds	r1, #1
 801ea80:	f102 0314 	add.w	r3, r2, #20
 801ea84:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801ea88:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801ea8c:	1f05      	subs	r5, r0, #4
 801ea8e:	42a3      	cmp	r3, r4
 801ea90:	d30c      	bcc.n	801eaac <__copybits+0x36>
 801ea92:	1aa3      	subs	r3, r4, r2
 801ea94:	3b11      	subs	r3, #17
 801ea96:	f023 0303 	bic.w	r3, r3, #3
 801ea9a:	3211      	adds	r2, #17
 801ea9c:	42a2      	cmp	r2, r4
 801ea9e:	bf88      	it	hi
 801eaa0:	2300      	movhi	r3, #0
 801eaa2:	4418      	add	r0, r3
 801eaa4:	2300      	movs	r3, #0
 801eaa6:	4288      	cmp	r0, r1
 801eaa8:	d305      	bcc.n	801eab6 <__copybits+0x40>
 801eaaa:	bd70      	pop	{r4, r5, r6, pc}
 801eaac:	f853 6b04 	ldr.w	r6, [r3], #4
 801eab0:	f845 6f04 	str.w	r6, [r5, #4]!
 801eab4:	e7eb      	b.n	801ea8e <__copybits+0x18>
 801eab6:	f840 3b04 	str.w	r3, [r0], #4
 801eaba:	e7f4      	b.n	801eaa6 <__copybits+0x30>

0801eabc <__any_on>:
 801eabc:	f100 0214 	add.w	r2, r0, #20
 801eac0:	6900      	ldr	r0, [r0, #16]
 801eac2:	114b      	asrs	r3, r1, #5
 801eac4:	4298      	cmp	r0, r3
 801eac6:	b510      	push	{r4, lr}
 801eac8:	db11      	blt.n	801eaee <__any_on+0x32>
 801eaca:	dd0a      	ble.n	801eae2 <__any_on+0x26>
 801eacc:	f011 011f 	ands.w	r1, r1, #31
 801ead0:	d007      	beq.n	801eae2 <__any_on+0x26>
 801ead2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801ead6:	fa24 f001 	lsr.w	r0, r4, r1
 801eada:	fa00 f101 	lsl.w	r1, r0, r1
 801eade:	428c      	cmp	r4, r1
 801eae0:	d10b      	bne.n	801eafa <__any_on+0x3e>
 801eae2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801eae6:	4293      	cmp	r3, r2
 801eae8:	d803      	bhi.n	801eaf2 <__any_on+0x36>
 801eaea:	2000      	movs	r0, #0
 801eaec:	bd10      	pop	{r4, pc}
 801eaee:	4603      	mov	r3, r0
 801eaf0:	e7f7      	b.n	801eae2 <__any_on+0x26>
 801eaf2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801eaf6:	2900      	cmp	r1, #0
 801eaf8:	d0f5      	beq.n	801eae6 <__any_on+0x2a>
 801eafa:	2001      	movs	r0, #1
 801eafc:	e7f6      	b.n	801eaec <__any_on+0x30>

0801eafe <_calloc_r>:
 801eafe:	b513      	push	{r0, r1, r4, lr}
 801eb00:	434a      	muls	r2, r1
 801eb02:	4611      	mov	r1, r2
 801eb04:	9201      	str	r2, [sp, #4]
 801eb06:	f7fb fe99 	bl	801a83c <_malloc_r>
 801eb0a:	4604      	mov	r4, r0
 801eb0c:	b118      	cbz	r0, 801eb16 <_calloc_r+0x18>
 801eb0e:	9a01      	ldr	r2, [sp, #4]
 801eb10:	2100      	movs	r1, #0
 801eb12:	f7fb fe3b 	bl	801a78c <memset>
 801eb16:	4620      	mov	r0, r4
 801eb18:	b002      	add	sp, #8
 801eb1a:	bd10      	pop	{r4, pc}

0801eb1c <_realloc_r>:
 801eb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb1e:	4607      	mov	r7, r0
 801eb20:	4614      	mov	r4, r2
 801eb22:	460e      	mov	r6, r1
 801eb24:	b921      	cbnz	r1, 801eb30 <_realloc_r+0x14>
 801eb26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801eb2a:	4611      	mov	r1, r2
 801eb2c:	f7fb be86 	b.w	801a83c <_malloc_r>
 801eb30:	b922      	cbnz	r2, 801eb3c <_realloc_r+0x20>
 801eb32:	f7fb fe33 	bl	801a79c <_free_r>
 801eb36:	4625      	mov	r5, r4
 801eb38:	4628      	mov	r0, r5
 801eb3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eb3c:	f000 fe9e 	bl	801f87c <_malloc_usable_size_r>
 801eb40:	42a0      	cmp	r0, r4
 801eb42:	d20f      	bcs.n	801eb64 <_realloc_r+0x48>
 801eb44:	4621      	mov	r1, r4
 801eb46:	4638      	mov	r0, r7
 801eb48:	f7fb fe78 	bl	801a83c <_malloc_r>
 801eb4c:	4605      	mov	r5, r0
 801eb4e:	2800      	cmp	r0, #0
 801eb50:	d0f2      	beq.n	801eb38 <_realloc_r+0x1c>
 801eb52:	4631      	mov	r1, r6
 801eb54:	4622      	mov	r2, r4
 801eb56:	f7fb fdf1 	bl	801a73c <memcpy>
 801eb5a:	4631      	mov	r1, r6
 801eb5c:	4638      	mov	r0, r7
 801eb5e:	f7fb fe1d 	bl	801a79c <_free_r>
 801eb62:	e7e9      	b.n	801eb38 <_realloc_r+0x1c>
 801eb64:	4635      	mov	r5, r6
 801eb66:	e7e7      	b.n	801eb38 <_realloc_r+0x1c>

0801eb68 <__ssputs_r>:
 801eb68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eb6c:	688e      	ldr	r6, [r1, #8]
 801eb6e:	429e      	cmp	r6, r3
 801eb70:	4682      	mov	sl, r0
 801eb72:	460c      	mov	r4, r1
 801eb74:	4690      	mov	r8, r2
 801eb76:	461f      	mov	r7, r3
 801eb78:	d838      	bhi.n	801ebec <__ssputs_r+0x84>
 801eb7a:	898a      	ldrh	r2, [r1, #12]
 801eb7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801eb80:	d032      	beq.n	801ebe8 <__ssputs_r+0x80>
 801eb82:	6825      	ldr	r5, [r4, #0]
 801eb84:	6909      	ldr	r1, [r1, #16]
 801eb86:	eba5 0901 	sub.w	r9, r5, r1
 801eb8a:	6965      	ldr	r5, [r4, #20]
 801eb8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801eb90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801eb94:	3301      	adds	r3, #1
 801eb96:	444b      	add	r3, r9
 801eb98:	106d      	asrs	r5, r5, #1
 801eb9a:	429d      	cmp	r5, r3
 801eb9c:	bf38      	it	cc
 801eb9e:	461d      	movcc	r5, r3
 801eba0:	0553      	lsls	r3, r2, #21
 801eba2:	d531      	bpl.n	801ec08 <__ssputs_r+0xa0>
 801eba4:	4629      	mov	r1, r5
 801eba6:	f7fb fe49 	bl	801a83c <_malloc_r>
 801ebaa:	4606      	mov	r6, r0
 801ebac:	b950      	cbnz	r0, 801ebc4 <__ssputs_r+0x5c>
 801ebae:	230c      	movs	r3, #12
 801ebb0:	f8ca 3000 	str.w	r3, [sl]
 801ebb4:	89a3      	ldrh	r3, [r4, #12]
 801ebb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ebba:	81a3      	strh	r3, [r4, #12]
 801ebbc:	f04f 30ff 	mov.w	r0, #4294967295
 801ebc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ebc4:	6921      	ldr	r1, [r4, #16]
 801ebc6:	464a      	mov	r2, r9
 801ebc8:	f7fb fdb8 	bl	801a73c <memcpy>
 801ebcc:	89a3      	ldrh	r3, [r4, #12]
 801ebce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ebd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ebd6:	81a3      	strh	r3, [r4, #12]
 801ebd8:	6126      	str	r6, [r4, #16]
 801ebda:	6165      	str	r5, [r4, #20]
 801ebdc:	444e      	add	r6, r9
 801ebde:	eba5 0509 	sub.w	r5, r5, r9
 801ebe2:	6026      	str	r6, [r4, #0]
 801ebe4:	60a5      	str	r5, [r4, #8]
 801ebe6:	463e      	mov	r6, r7
 801ebe8:	42be      	cmp	r6, r7
 801ebea:	d900      	bls.n	801ebee <__ssputs_r+0x86>
 801ebec:	463e      	mov	r6, r7
 801ebee:	4632      	mov	r2, r6
 801ebf0:	6820      	ldr	r0, [r4, #0]
 801ebf2:	4641      	mov	r1, r8
 801ebf4:	f7fb fdb0 	bl	801a758 <memmove>
 801ebf8:	68a3      	ldr	r3, [r4, #8]
 801ebfa:	6822      	ldr	r2, [r4, #0]
 801ebfc:	1b9b      	subs	r3, r3, r6
 801ebfe:	4432      	add	r2, r6
 801ec00:	60a3      	str	r3, [r4, #8]
 801ec02:	6022      	str	r2, [r4, #0]
 801ec04:	2000      	movs	r0, #0
 801ec06:	e7db      	b.n	801ebc0 <__ssputs_r+0x58>
 801ec08:	462a      	mov	r2, r5
 801ec0a:	f7ff ff87 	bl	801eb1c <_realloc_r>
 801ec0e:	4606      	mov	r6, r0
 801ec10:	2800      	cmp	r0, #0
 801ec12:	d1e1      	bne.n	801ebd8 <__ssputs_r+0x70>
 801ec14:	6921      	ldr	r1, [r4, #16]
 801ec16:	4650      	mov	r0, sl
 801ec18:	f7fb fdc0 	bl	801a79c <_free_r>
 801ec1c:	e7c7      	b.n	801ebae <__ssputs_r+0x46>
	...

0801ec20 <_svfiprintf_r>:
 801ec20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec24:	4698      	mov	r8, r3
 801ec26:	898b      	ldrh	r3, [r1, #12]
 801ec28:	061b      	lsls	r3, r3, #24
 801ec2a:	b09d      	sub	sp, #116	; 0x74
 801ec2c:	4607      	mov	r7, r0
 801ec2e:	460d      	mov	r5, r1
 801ec30:	4614      	mov	r4, r2
 801ec32:	d50e      	bpl.n	801ec52 <_svfiprintf_r+0x32>
 801ec34:	690b      	ldr	r3, [r1, #16]
 801ec36:	b963      	cbnz	r3, 801ec52 <_svfiprintf_r+0x32>
 801ec38:	2140      	movs	r1, #64	; 0x40
 801ec3a:	f7fb fdff 	bl	801a83c <_malloc_r>
 801ec3e:	6028      	str	r0, [r5, #0]
 801ec40:	6128      	str	r0, [r5, #16]
 801ec42:	b920      	cbnz	r0, 801ec4e <_svfiprintf_r+0x2e>
 801ec44:	230c      	movs	r3, #12
 801ec46:	603b      	str	r3, [r7, #0]
 801ec48:	f04f 30ff 	mov.w	r0, #4294967295
 801ec4c:	e0d1      	b.n	801edf2 <_svfiprintf_r+0x1d2>
 801ec4e:	2340      	movs	r3, #64	; 0x40
 801ec50:	616b      	str	r3, [r5, #20]
 801ec52:	2300      	movs	r3, #0
 801ec54:	9309      	str	r3, [sp, #36]	; 0x24
 801ec56:	2320      	movs	r3, #32
 801ec58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ec5c:	f8cd 800c 	str.w	r8, [sp, #12]
 801ec60:	2330      	movs	r3, #48	; 0x30
 801ec62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801ee0c <_svfiprintf_r+0x1ec>
 801ec66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ec6a:	f04f 0901 	mov.w	r9, #1
 801ec6e:	4623      	mov	r3, r4
 801ec70:	469a      	mov	sl, r3
 801ec72:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ec76:	b10a      	cbz	r2, 801ec7c <_svfiprintf_r+0x5c>
 801ec78:	2a25      	cmp	r2, #37	; 0x25
 801ec7a:	d1f9      	bne.n	801ec70 <_svfiprintf_r+0x50>
 801ec7c:	ebba 0b04 	subs.w	fp, sl, r4
 801ec80:	d00b      	beq.n	801ec9a <_svfiprintf_r+0x7a>
 801ec82:	465b      	mov	r3, fp
 801ec84:	4622      	mov	r2, r4
 801ec86:	4629      	mov	r1, r5
 801ec88:	4638      	mov	r0, r7
 801ec8a:	f7ff ff6d 	bl	801eb68 <__ssputs_r>
 801ec8e:	3001      	adds	r0, #1
 801ec90:	f000 80aa 	beq.w	801ede8 <_svfiprintf_r+0x1c8>
 801ec94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ec96:	445a      	add	r2, fp
 801ec98:	9209      	str	r2, [sp, #36]	; 0x24
 801ec9a:	f89a 3000 	ldrb.w	r3, [sl]
 801ec9e:	2b00      	cmp	r3, #0
 801eca0:	f000 80a2 	beq.w	801ede8 <_svfiprintf_r+0x1c8>
 801eca4:	2300      	movs	r3, #0
 801eca6:	f04f 32ff 	mov.w	r2, #4294967295
 801ecaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ecae:	f10a 0a01 	add.w	sl, sl, #1
 801ecb2:	9304      	str	r3, [sp, #16]
 801ecb4:	9307      	str	r3, [sp, #28]
 801ecb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ecba:	931a      	str	r3, [sp, #104]	; 0x68
 801ecbc:	4654      	mov	r4, sl
 801ecbe:	2205      	movs	r2, #5
 801ecc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ecc4:	4851      	ldr	r0, [pc, #324]	; (801ee0c <_svfiprintf_r+0x1ec>)
 801ecc6:	f7e1 fa9b 	bl	8000200 <memchr>
 801ecca:	9a04      	ldr	r2, [sp, #16]
 801eccc:	b9d8      	cbnz	r0, 801ed06 <_svfiprintf_r+0xe6>
 801ecce:	06d0      	lsls	r0, r2, #27
 801ecd0:	bf44      	itt	mi
 801ecd2:	2320      	movmi	r3, #32
 801ecd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ecd8:	0711      	lsls	r1, r2, #28
 801ecda:	bf44      	itt	mi
 801ecdc:	232b      	movmi	r3, #43	; 0x2b
 801ecde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ece2:	f89a 3000 	ldrb.w	r3, [sl]
 801ece6:	2b2a      	cmp	r3, #42	; 0x2a
 801ece8:	d015      	beq.n	801ed16 <_svfiprintf_r+0xf6>
 801ecea:	9a07      	ldr	r2, [sp, #28]
 801ecec:	4654      	mov	r4, sl
 801ecee:	2000      	movs	r0, #0
 801ecf0:	f04f 0c0a 	mov.w	ip, #10
 801ecf4:	4621      	mov	r1, r4
 801ecf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ecfa:	3b30      	subs	r3, #48	; 0x30
 801ecfc:	2b09      	cmp	r3, #9
 801ecfe:	d94e      	bls.n	801ed9e <_svfiprintf_r+0x17e>
 801ed00:	b1b0      	cbz	r0, 801ed30 <_svfiprintf_r+0x110>
 801ed02:	9207      	str	r2, [sp, #28]
 801ed04:	e014      	b.n	801ed30 <_svfiprintf_r+0x110>
 801ed06:	eba0 0308 	sub.w	r3, r0, r8
 801ed0a:	fa09 f303 	lsl.w	r3, r9, r3
 801ed0e:	4313      	orrs	r3, r2
 801ed10:	9304      	str	r3, [sp, #16]
 801ed12:	46a2      	mov	sl, r4
 801ed14:	e7d2      	b.n	801ecbc <_svfiprintf_r+0x9c>
 801ed16:	9b03      	ldr	r3, [sp, #12]
 801ed18:	1d19      	adds	r1, r3, #4
 801ed1a:	681b      	ldr	r3, [r3, #0]
 801ed1c:	9103      	str	r1, [sp, #12]
 801ed1e:	2b00      	cmp	r3, #0
 801ed20:	bfbb      	ittet	lt
 801ed22:	425b      	neglt	r3, r3
 801ed24:	f042 0202 	orrlt.w	r2, r2, #2
 801ed28:	9307      	strge	r3, [sp, #28]
 801ed2a:	9307      	strlt	r3, [sp, #28]
 801ed2c:	bfb8      	it	lt
 801ed2e:	9204      	strlt	r2, [sp, #16]
 801ed30:	7823      	ldrb	r3, [r4, #0]
 801ed32:	2b2e      	cmp	r3, #46	; 0x2e
 801ed34:	d10c      	bne.n	801ed50 <_svfiprintf_r+0x130>
 801ed36:	7863      	ldrb	r3, [r4, #1]
 801ed38:	2b2a      	cmp	r3, #42	; 0x2a
 801ed3a:	d135      	bne.n	801eda8 <_svfiprintf_r+0x188>
 801ed3c:	9b03      	ldr	r3, [sp, #12]
 801ed3e:	1d1a      	adds	r2, r3, #4
 801ed40:	681b      	ldr	r3, [r3, #0]
 801ed42:	9203      	str	r2, [sp, #12]
 801ed44:	2b00      	cmp	r3, #0
 801ed46:	bfb8      	it	lt
 801ed48:	f04f 33ff 	movlt.w	r3, #4294967295
 801ed4c:	3402      	adds	r4, #2
 801ed4e:	9305      	str	r3, [sp, #20]
 801ed50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801ee1c <_svfiprintf_r+0x1fc>
 801ed54:	7821      	ldrb	r1, [r4, #0]
 801ed56:	2203      	movs	r2, #3
 801ed58:	4650      	mov	r0, sl
 801ed5a:	f7e1 fa51 	bl	8000200 <memchr>
 801ed5e:	b140      	cbz	r0, 801ed72 <_svfiprintf_r+0x152>
 801ed60:	2340      	movs	r3, #64	; 0x40
 801ed62:	eba0 000a 	sub.w	r0, r0, sl
 801ed66:	fa03 f000 	lsl.w	r0, r3, r0
 801ed6a:	9b04      	ldr	r3, [sp, #16]
 801ed6c:	4303      	orrs	r3, r0
 801ed6e:	3401      	adds	r4, #1
 801ed70:	9304      	str	r3, [sp, #16]
 801ed72:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ed76:	4826      	ldr	r0, [pc, #152]	; (801ee10 <_svfiprintf_r+0x1f0>)
 801ed78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ed7c:	2206      	movs	r2, #6
 801ed7e:	f7e1 fa3f 	bl	8000200 <memchr>
 801ed82:	2800      	cmp	r0, #0
 801ed84:	d038      	beq.n	801edf8 <_svfiprintf_r+0x1d8>
 801ed86:	4b23      	ldr	r3, [pc, #140]	; (801ee14 <_svfiprintf_r+0x1f4>)
 801ed88:	bb1b      	cbnz	r3, 801edd2 <_svfiprintf_r+0x1b2>
 801ed8a:	9b03      	ldr	r3, [sp, #12]
 801ed8c:	3307      	adds	r3, #7
 801ed8e:	f023 0307 	bic.w	r3, r3, #7
 801ed92:	3308      	adds	r3, #8
 801ed94:	9303      	str	r3, [sp, #12]
 801ed96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ed98:	4433      	add	r3, r6
 801ed9a:	9309      	str	r3, [sp, #36]	; 0x24
 801ed9c:	e767      	b.n	801ec6e <_svfiprintf_r+0x4e>
 801ed9e:	fb0c 3202 	mla	r2, ip, r2, r3
 801eda2:	460c      	mov	r4, r1
 801eda4:	2001      	movs	r0, #1
 801eda6:	e7a5      	b.n	801ecf4 <_svfiprintf_r+0xd4>
 801eda8:	2300      	movs	r3, #0
 801edaa:	3401      	adds	r4, #1
 801edac:	9305      	str	r3, [sp, #20]
 801edae:	4619      	mov	r1, r3
 801edb0:	f04f 0c0a 	mov.w	ip, #10
 801edb4:	4620      	mov	r0, r4
 801edb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801edba:	3a30      	subs	r2, #48	; 0x30
 801edbc:	2a09      	cmp	r2, #9
 801edbe:	d903      	bls.n	801edc8 <_svfiprintf_r+0x1a8>
 801edc0:	2b00      	cmp	r3, #0
 801edc2:	d0c5      	beq.n	801ed50 <_svfiprintf_r+0x130>
 801edc4:	9105      	str	r1, [sp, #20]
 801edc6:	e7c3      	b.n	801ed50 <_svfiprintf_r+0x130>
 801edc8:	fb0c 2101 	mla	r1, ip, r1, r2
 801edcc:	4604      	mov	r4, r0
 801edce:	2301      	movs	r3, #1
 801edd0:	e7f0      	b.n	801edb4 <_svfiprintf_r+0x194>
 801edd2:	ab03      	add	r3, sp, #12
 801edd4:	9300      	str	r3, [sp, #0]
 801edd6:	462a      	mov	r2, r5
 801edd8:	4b0f      	ldr	r3, [pc, #60]	; (801ee18 <_svfiprintf_r+0x1f8>)
 801edda:	a904      	add	r1, sp, #16
 801eddc:	4638      	mov	r0, r7
 801edde:	f7fb fe27 	bl	801aa30 <_printf_float>
 801ede2:	1c42      	adds	r2, r0, #1
 801ede4:	4606      	mov	r6, r0
 801ede6:	d1d6      	bne.n	801ed96 <_svfiprintf_r+0x176>
 801ede8:	89ab      	ldrh	r3, [r5, #12]
 801edea:	065b      	lsls	r3, r3, #25
 801edec:	f53f af2c 	bmi.w	801ec48 <_svfiprintf_r+0x28>
 801edf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801edf2:	b01d      	add	sp, #116	; 0x74
 801edf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edf8:	ab03      	add	r3, sp, #12
 801edfa:	9300      	str	r3, [sp, #0]
 801edfc:	462a      	mov	r2, r5
 801edfe:	4b06      	ldr	r3, [pc, #24]	; (801ee18 <_svfiprintf_r+0x1f8>)
 801ee00:	a904      	add	r1, sp, #16
 801ee02:	4638      	mov	r0, r7
 801ee04:	f7fc f8b8 	bl	801af78 <_printf_i>
 801ee08:	e7eb      	b.n	801ede2 <_svfiprintf_r+0x1c2>
 801ee0a:	bf00      	nop
 801ee0c:	08021be4 	.word	0x08021be4
 801ee10:	08021bee 	.word	0x08021bee
 801ee14:	0801aa31 	.word	0x0801aa31
 801ee18:	0801eb69 	.word	0x0801eb69
 801ee1c:	08021bea 	.word	0x08021bea

0801ee20 <_sungetc_r>:
 801ee20:	b538      	push	{r3, r4, r5, lr}
 801ee22:	1c4b      	adds	r3, r1, #1
 801ee24:	4614      	mov	r4, r2
 801ee26:	d103      	bne.n	801ee30 <_sungetc_r+0x10>
 801ee28:	f04f 35ff 	mov.w	r5, #4294967295
 801ee2c:	4628      	mov	r0, r5
 801ee2e:	bd38      	pop	{r3, r4, r5, pc}
 801ee30:	8993      	ldrh	r3, [r2, #12]
 801ee32:	f023 0320 	bic.w	r3, r3, #32
 801ee36:	8193      	strh	r3, [r2, #12]
 801ee38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ee3a:	6852      	ldr	r2, [r2, #4]
 801ee3c:	b2cd      	uxtb	r5, r1
 801ee3e:	b18b      	cbz	r3, 801ee64 <_sungetc_r+0x44>
 801ee40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ee42:	4293      	cmp	r3, r2
 801ee44:	dd08      	ble.n	801ee58 <_sungetc_r+0x38>
 801ee46:	6823      	ldr	r3, [r4, #0]
 801ee48:	1e5a      	subs	r2, r3, #1
 801ee4a:	6022      	str	r2, [r4, #0]
 801ee4c:	f803 5c01 	strb.w	r5, [r3, #-1]
 801ee50:	6863      	ldr	r3, [r4, #4]
 801ee52:	3301      	adds	r3, #1
 801ee54:	6063      	str	r3, [r4, #4]
 801ee56:	e7e9      	b.n	801ee2c <_sungetc_r+0xc>
 801ee58:	4621      	mov	r1, r4
 801ee5a:	f000 fca5 	bl	801f7a8 <__submore>
 801ee5e:	2800      	cmp	r0, #0
 801ee60:	d0f1      	beq.n	801ee46 <_sungetc_r+0x26>
 801ee62:	e7e1      	b.n	801ee28 <_sungetc_r+0x8>
 801ee64:	6921      	ldr	r1, [r4, #16]
 801ee66:	6823      	ldr	r3, [r4, #0]
 801ee68:	b151      	cbz	r1, 801ee80 <_sungetc_r+0x60>
 801ee6a:	4299      	cmp	r1, r3
 801ee6c:	d208      	bcs.n	801ee80 <_sungetc_r+0x60>
 801ee6e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801ee72:	42a9      	cmp	r1, r5
 801ee74:	d104      	bne.n	801ee80 <_sungetc_r+0x60>
 801ee76:	3b01      	subs	r3, #1
 801ee78:	3201      	adds	r2, #1
 801ee7a:	6023      	str	r3, [r4, #0]
 801ee7c:	6062      	str	r2, [r4, #4]
 801ee7e:	e7d5      	b.n	801ee2c <_sungetc_r+0xc>
 801ee80:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801ee84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ee88:	6363      	str	r3, [r4, #52]	; 0x34
 801ee8a:	2303      	movs	r3, #3
 801ee8c:	63a3      	str	r3, [r4, #56]	; 0x38
 801ee8e:	4623      	mov	r3, r4
 801ee90:	f803 5f46 	strb.w	r5, [r3, #70]!
 801ee94:	6023      	str	r3, [r4, #0]
 801ee96:	2301      	movs	r3, #1
 801ee98:	e7dc      	b.n	801ee54 <_sungetc_r+0x34>

0801ee9a <__ssrefill_r>:
 801ee9a:	b510      	push	{r4, lr}
 801ee9c:	460c      	mov	r4, r1
 801ee9e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801eea0:	b169      	cbz	r1, 801eebe <__ssrefill_r+0x24>
 801eea2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801eea6:	4299      	cmp	r1, r3
 801eea8:	d001      	beq.n	801eeae <__ssrefill_r+0x14>
 801eeaa:	f7fb fc77 	bl	801a79c <_free_r>
 801eeae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801eeb0:	6063      	str	r3, [r4, #4]
 801eeb2:	2000      	movs	r0, #0
 801eeb4:	6360      	str	r0, [r4, #52]	; 0x34
 801eeb6:	b113      	cbz	r3, 801eebe <__ssrefill_r+0x24>
 801eeb8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801eeba:	6023      	str	r3, [r4, #0]
 801eebc:	bd10      	pop	{r4, pc}
 801eebe:	6923      	ldr	r3, [r4, #16]
 801eec0:	6023      	str	r3, [r4, #0]
 801eec2:	2300      	movs	r3, #0
 801eec4:	6063      	str	r3, [r4, #4]
 801eec6:	89a3      	ldrh	r3, [r4, #12]
 801eec8:	f043 0320 	orr.w	r3, r3, #32
 801eecc:	81a3      	strh	r3, [r4, #12]
 801eece:	f04f 30ff 	mov.w	r0, #4294967295
 801eed2:	e7f3      	b.n	801eebc <__ssrefill_r+0x22>

0801eed4 <__ssvfiscanf_r>:
 801eed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eed8:	460c      	mov	r4, r1
 801eeda:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801eede:	2100      	movs	r1, #0
 801eee0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801eee4:	49b2      	ldr	r1, [pc, #712]	; (801f1b0 <__ssvfiscanf_r+0x2dc>)
 801eee6:	91a0      	str	r1, [sp, #640]	; 0x280
 801eee8:	f10d 0804 	add.w	r8, sp, #4
 801eeec:	49b1      	ldr	r1, [pc, #708]	; (801f1b4 <__ssvfiscanf_r+0x2e0>)
 801eeee:	4fb2      	ldr	r7, [pc, #712]	; (801f1b8 <__ssvfiscanf_r+0x2e4>)
 801eef0:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801f1bc <__ssvfiscanf_r+0x2e8>
 801eef4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801eef8:	4606      	mov	r6, r0
 801eefa:	91a1      	str	r1, [sp, #644]	; 0x284
 801eefc:	9300      	str	r3, [sp, #0]
 801eefe:	f892 a000 	ldrb.w	sl, [r2]
 801ef02:	f1ba 0f00 	cmp.w	sl, #0
 801ef06:	f000 8151 	beq.w	801f1ac <__ssvfiscanf_r+0x2d8>
 801ef0a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801ef0e:	f013 0308 	ands.w	r3, r3, #8
 801ef12:	f102 0501 	add.w	r5, r2, #1
 801ef16:	d019      	beq.n	801ef4c <__ssvfiscanf_r+0x78>
 801ef18:	6863      	ldr	r3, [r4, #4]
 801ef1a:	2b00      	cmp	r3, #0
 801ef1c:	dd0f      	ble.n	801ef3e <__ssvfiscanf_r+0x6a>
 801ef1e:	6823      	ldr	r3, [r4, #0]
 801ef20:	781a      	ldrb	r2, [r3, #0]
 801ef22:	5cba      	ldrb	r2, [r7, r2]
 801ef24:	0712      	lsls	r2, r2, #28
 801ef26:	d401      	bmi.n	801ef2c <__ssvfiscanf_r+0x58>
 801ef28:	462a      	mov	r2, r5
 801ef2a:	e7e8      	b.n	801eefe <__ssvfiscanf_r+0x2a>
 801ef2c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801ef2e:	3201      	adds	r2, #1
 801ef30:	9245      	str	r2, [sp, #276]	; 0x114
 801ef32:	6862      	ldr	r2, [r4, #4]
 801ef34:	3301      	adds	r3, #1
 801ef36:	3a01      	subs	r2, #1
 801ef38:	6062      	str	r2, [r4, #4]
 801ef3a:	6023      	str	r3, [r4, #0]
 801ef3c:	e7ec      	b.n	801ef18 <__ssvfiscanf_r+0x44>
 801ef3e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ef40:	4621      	mov	r1, r4
 801ef42:	4630      	mov	r0, r6
 801ef44:	4798      	blx	r3
 801ef46:	2800      	cmp	r0, #0
 801ef48:	d0e9      	beq.n	801ef1e <__ssvfiscanf_r+0x4a>
 801ef4a:	e7ed      	b.n	801ef28 <__ssvfiscanf_r+0x54>
 801ef4c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 801ef50:	f040 8083 	bne.w	801f05a <__ssvfiscanf_r+0x186>
 801ef54:	9341      	str	r3, [sp, #260]	; 0x104
 801ef56:	9343      	str	r3, [sp, #268]	; 0x10c
 801ef58:	7853      	ldrb	r3, [r2, #1]
 801ef5a:	2b2a      	cmp	r3, #42	; 0x2a
 801ef5c:	bf02      	ittt	eq
 801ef5e:	2310      	moveq	r3, #16
 801ef60:	1c95      	addeq	r5, r2, #2
 801ef62:	9341      	streq	r3, [sp, #260]	; 0x104
 801ef64:	220a      	movs	r2, #10
 801ef66:	46ab      	mov	fp, r5
 801ef68:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801ef6c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801ef70:	2b09      	cmp	r3, #9
 801ef72:	d91d      	bls.n	801efb0 <__ssvfiscanf_r+0xdc>
 801ef74:	4891      	ldr	r0, [pc, #580]	; (801f1bc <__ssvfiscanf_r+0x2e8>)
 801ef76:	2203      	movs	r2, #3
 801ef78:	f7e1 f942 	bl	8000200 <memchr>
 801ef7c:	b140      	cbz	r0, 801ef90 <__ssvfiscanf_r+0xbc>
 801ef7e:	2301      	movs	r3, #1
 801ef80:	eba0 0009 	sub.w	r0, r0, r9
 801ef84:	fa03 f000 	lsl.w	r0, r3, r0
 801ef88:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801ef8a:	4318      	orrs	r0, r3
 801ef8c:	9041      	str	r0, [sp, #260]	; 0x104
 801ef8e:	465d      	mov	r5, fp
 801ef90:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ef94:	2b78      	cmp	r3, #120	; 0x78
 801ef96:	d806      	bhi.n	801efa6 <__ssvfiscanf_r+0xd2>
 801ef98:	2b57      	cmp	r3, #87	; 0x57
 801ef9a:	d810      	bhi.n	801efbe <__ssvfiscanf_r+0xea>
 801ef9c:	2b25      	cmp	r3, #37	; 0x25
 801ef9e:	d05c      	beq.n	801f05a <__ssvfiscanf_r+0x186>
 801efa0:	d856      	bhi.n	801f050 <__ssvfiscanf_r+0x17c>
 801efa2:	2b00      	cmp	r3, #0
 801efa4:	d074      	beq.n	801f090 <__ssvfiscanf_r+0x1bc>
 801efa6:	2303      	movs	r3, #3
 801efa8:	9347      	str	r3, [sp, #284]	; 0x11c
 801efaa:	230a      	movs	r3, #10
 801efac:	9342      	str	r3, [sp, #264]	; 0x108
 801efae:	e081      	b.n	801f0b4 <__ssvfiscanf_r+0x1e0>
 801efb0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801efb2:	fb02 1303 	mla	r3, r2, r3, r1
 801efb6:	3b30      	subs	r3, #48	; 0x30
 801efb8:	9343      	str	r3, [sp, #268]	; 0x10c
 801efba:	465d      	mov	r5, fp
 801efbc:	e7d3      	b.n	801ef66 <__ssvfiscanf_r+0x92>
 801efbe:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801efc2:	2a20      	cmp	r2, #32
 801efc4:	d8ef      	bhi.n	801efa6 <__ssvfiscanf_r+0xd2>
 801efc6:	a101      	add	r1, pc, #4	; (adr r1, 801efcc <__ssvfiscanf_r+0xf8>)
 801efc8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801efcc:	0801f09f 	.word	0x0801f09f
 801efd0:	0801efa7 	.word	0x0801efa7
 801efd4:	0801efa7 	.word	0x0801efa7
 801efd8:	0801f0fd 	.word	0x0801f0fd
 801efdc:	0801efa7 	.word	0x0801efa7
 801efe0:	0801efa7 	.word	0x0801efa7
 801efe4:	0801efa7 	.word	0x0801efa7
 801efe8:	0801efa7 	.word	0x0801efa7
 801efec:	0801efa7 	.word	0x0801efa7
 801eff0:	0801efa7 	.word	0x0801efa7
 801eff4:	0801efa7 	.word	0x0801efa7
 801eff8:	0801f113 	.word	0x0801f113
 801effc:	0801f0e9 	.word	0x0801f0e9
 801f000:	0801f057 	.word	0x0801f057
 801f004:	0801f057 	.word	0x0801f057
 801f008:	0801f057 	.word	0x0801f057
 801f00c:	0801efa7 	.word	0x0801efa7
 801f010:	0801f0ed 	.word	0x0801f0ed
 801f014:	0801efa7 	.word	0x0801efa7
 801f018:	0801efa7 	.word	0x0801efa7
 801f01c:	0801efa7 	.word	0x0801efa7
 801f020:	0801efa7 	.word	0x0801efa7
 801f024:	0801f123 	.word	0x0801f123
 801f028:	0801f0f5 	.word	0x0801f0f5
 801f02c:	0801f097 	.word	0x0801f097
 801f030:	0801efa7 	.word	0x0801efa7
 801f034:	0801efa7 	.word	0x0801efa7
 801f038:	0801f11f 	.word	0x0801f11f
 801f03c:	0801efa7 	.word	0x0801efa7
 801f040:	0801f0e9 	.word	0x0801f0e9
 801f044:	0801efa7 	.word	0x0801efa7
 801f048:	0801efa7 	.word	0x0801efa7
 801f04c:	0801f09f 	.word	0x0801f09f
 801f050:	3b45      	subs	r3, #69	; 0x45
 801f052:	2b02      	cmp	r3, #2
 801f054:	d8a7      	bhi.n	801efa6 <__ssvfiscanf_r+0xd2>
 801f056:	2305      	movs	r3, #5
 801f058:	e02b      	b.n	801f0b2 <__ssvfiscanf_r+0x1de>
 801f05a:	6863      	ldr	r3, [r4, #4]
 801f05c:	2b00      	cmp	r3, #0
 801f05e:	dd0d      	ble.n	801f07c <__ssvfiscanf_r+0x1a8>
 801f060:	6823      	ldr	r3, [r4, #0]
 801f062:	781a      	ldrb	r2, [r3, #0]
 801f064:	4552      	cmp	r2, sl
 801f066:	f040 80a1 	bne.w	801f1ac <__ssvfiscanf_r+0x2d8>
 801f06a:	3301      	adds	r3, #1
 801f06c:	6862      	ldr	r2, [r4, #4]
 801f06e:	6023      	str	r3, [r4, #0]
 801f070:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801f072:	3a01      	subs	r2, #1
 801f074:	3301      	adds	r3, #1
 801f076:	6062      	str	r2, [r4, #4]
 801f078:	9345      	str	r3, [sp, #276]	; 0x114
 801f07a:	e755      	b.n	801ef28 <__ssvfiscanf_r+0x54>
 801f07c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801f07e:	4621      	mov	r1, r4
 801f080:	4630      	mov	r0, r6
 801f082:	4798      	blx	r3
 801f084:	2800      	cmp	r0, #0
 801f086:	d0eb      	beq.n	801f060 <__ssvfiscanf_r+0x18c>
 801f088:	9844      	ldr	r0, [sp, #272]	; 0x110
 801f08a:	2800      	cmp	r0, #0
 801f08c:	f040 8084 	bne.w	801f198 <__ssvfiscanf_r+0x2c4>
 801f090:	f04f 30ff 	mov.w	r0, #4294967295
 801f094:	e086      	b.n	801f1a4 <__ssvfiscanf_r+0x2d0>
 801f096:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801f098:	f042 0220 	orr.w	r2, r2, #32
 801f09c:	9241      	str	r2, [sp, #260]	; 0x104
 801f09e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801f0a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f0a4:	9241      	str	r2, [sp, #260]	; 0x104
 801f0a6:	2210      	movs	r2, #16
 801f0a8:	2b6f      	cmp	r3, #111	; 0x6f
 801f0aa:	9242      	str	r2, [sp, #264]	; 0x108
 801f0ac:	bf34      	ite	cc
 801f0ae:	2303      	movcc	r3, #3
 801f0b0:	2304      	movcs	r3, #4
 801f0b2:	9347      	str	r3, [sp, #284]	; 0x11c
 801f0b4:	6863      	ldr	r3, [r4, #4]
 801f0b6:	2b00      	cmp	r3, #0
 801f0b8:	dd41      	ble.n	801f13e <__ssvfiscanf_r+0x26a>
 801f0ba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801f0bc:	0659      	lsls	r1, r3, #25
 801f0be:	d404      	bmi.n	801f0ca <__ssvfiscanf_r+0x1f6>
 801f0c0:	6823      	ldr	r3, [r4, #0]
 801f0c2:	781a      	ldrb	r2, [r3, #0]
 801f0c4:	5cba      	ldrb	r2, [r7, r2]
 801f0c6:	0712      	lsls	r2, r2, #28
 801f0c8:	d440      	bmi.n	801f14c <__ssvfiscanf_r+0x278>
 801f0ca:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801f0cc:	2b02      	cmp	r3, #2
 801f0ce:	dc4f      	bgt.n	801f170 <__ssvfiscanf_r+0x29c>
 801f0d0:	466b      	mov	r3, sp
 801f0d2:	4622      	mov	r2, r4
 801f0d4:	a941      	add	r1, sp, #260	; 0x104
 801f0d6:	4630      	mov	r0, r6
 801f0d8:	f000 f9ce 	bl	801f478 <_scanf_chars>
 801f0dc:	2801      	cmp	r0, #1
 801f0de:	d065      	beq.n	801f1ac <__ssvfiscanf_r+0x2d8>
 801f0e0:	2802      	cmp	r0, #2
 801f0e2:	f47f af21 	bne.w	801ef28 <__ssvfiscanf_r+0x54>
 801f0e6:	e7cf      	b.n	801f088 <__ssvfiscanf_r+0x1b4>
 801f0e8:	220a      	movs	r2, #10
 801f0ea:	e7dd      	b.n	801f0a8 <__ssvfiscanf_r+0x1d4>
 801f0ec:	2300      	movs	r3, #0
 801f0ee:	9342      	str	r3, [sp, #264]	; 0x108
 801f0f0:	2303      	movs	r3, #3
 801f0f2:	e7de      	b.n	801f0b2 <__ssvfiscanf_r+0x1de>
 801f0f4:	2308      	movs	r3, #8
 801f0f6:	9342      	str	r3, [sp, #264]	; 0x108
 801f0f8:	2304      	movs	r3, #4
 801f0fa:	e7da      	b.n	801f0b2 <__ssvfiscanf_r+0x1de>
 801f0fc:	4629      	mov	r1, r5
 801f0fe:	4640      	mov	r0, r8
 801f100:	f000 fb18 	bl	801f734 <__sccl>
 801f104:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801f106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f10a:	9341      	str	r3, [sp, #260]	; 0x104
 801f10c:	4605      	mov	r5, r0
 801f10e:	2301      	movs	r3, #1
 801f110:	e7cf      	b.n	801f0b2 <__ssvfiscanf_r+0x1de>
 801f112:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801f114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f118:	9341      	str	r3, [sp, #260]	; 0x104
 801f11a:	2300      	movs	r3, #0
 801f11c:	e7c9      	b.n	801f0b2 <__ssvfiscanf_r+0x1de>
 801f11e:	2302      	movs	r3, #2
 801f120:	e7c7      	b.n	801f0b2 <__ssvfiscanf_r+0x1de>
 801f122:	9841      	ldr	r0, [sp, #260]	; 0x104
 801f124:	06c3      	lsls	r3, r0, #27
 801f126:	f53f aeff 	bmi.w	801ef28 <__ssvfiscanf_r+0x54>
 801f12a:	9b00      	ldr	r3, [sp, #0]
 801f12c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801f12e:	1d19      	adds	r1, r3, #4
 801f130:	9100      	str	r1, [sp, #0]
 801f132:	681b      	ldr	r3, [r3, #0]
 801f134:	07c0      	lsls	r0, r0, #31
 801f136:	bf4c      	ite	mi
 801f138:	801a      	strhmi	r2, [r3, #0]
 801f13a:	601a      	strpl	r2, [r3, #0]
 801f13c:	e6f4      	b.n	801ef28 <__ssvfiscanf_r+0x54>
 801f13e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801f140:	4621      	mov	r1, r4
 801f142:	4630      	mov	r0, r6
 801f144:	4798      	blx	r3
 801f146:	2800      	cmp	r0, #0
 801f148:	d0b7      	beq.n	801f0ba <__ssvfiscanf_r+0x1e6>
 801f14a:	e79d      	b.n	801f088 <__ssvfiscanf_r+0x1b4>
 801f14c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801f14e:	3201      	adds	r2, #1
 801f150:	9245      	str	r2, [sp, #276]	; 0x114
 801f152:	6862      	ldr	r2, [r4, #4]
 801f154:	3a01      	subs	r2, #1
 801f156:	2a00      	cmp	r2, #0
 801f158:	6062      	str	r2, [r4, #4]
 801f15a:	dd02      	ble.n	801f162 <__ssvfiscanf_r+0x28e>
 801f15c:	3301      	adds	r3, #1
 801f15e:	6023      	str	r3, [r4, #0]
 801f160:	e7ae      	b.n	801f0c0 <__ssvfiscanf_r+0x1ec>
 801f162:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801f164:	4621      	mov	r1, r4
 801f166:	4630      	mov	r0, r6
 801f168:	4798      	blx	r3
 801f16a:	2800      	cmp	r0, #0
 801f16c:	d0a8      	beq.n	801f0c0 <__ssvfiscanf_r+0x1ec>
 801f16e:	e78b      	b.n	801f088 <__ssvfiscanf_r+0x1b4>
 801f170:	2b04      	cmp	r3, #4
 801f172:	dc06      	bgt.n	801f182 <__ssvfiscanf_r+0x2ae>
 801f174:	466b      	mov	r3, sp
 801f176:	4622      	mov	r2, r4
 801f178:	a941      	add	r1, sp, #260	; 0x104
 801f17a:	4630      	mov	r0, r6
 801f17c:	f000 f9d4 	bl	801f528 <_scanf_i>
 801f180:	e7ac      	b.n	801f0dc <__ssvfiscanf_r+0x208>
 801f182:	4b0f      	ldr	r3, [pc, #60]	; (801f1c0 <__ssvfiscanf_r+0x2ec>)
 801f184:	2b00      	cmp	r3, #0
 801f186:	f43f aecf 	beq.w	801ef28 <__ssvfiscanf_r+0x54>
 801f18a:	466b      	mov	r3, sp
 801f18c:	4622      	mov	r2, r4
 801f18e:	a941      	add	r1, sp, #260	; 0x104
 801f190:	4630      	mov	r0, r6
 801f192:	f7fc f817 	bl	801b1c4 <_scanf_float>
 801f196:	e7a1      	b.n	801f0dc <__ssvfiscanf_r+0x208>
 801f198:	89a3      	ldrh	r3, [r4, #12]
 801f19a:	f013 0f40 	tst.w	r3, #64	; 0x40
 801f19e:	bf18      	it	ne
 801f1a0:	f04f 30ff 	movne.w	r0, #4294967295
 801f1a4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801f1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1ac:	9844      	ldr	r0, [sp, #272]	; 0x110
 801f1ae:	e7f9      	b.n	801f1a4 <__ssvfiscanf_r+0x2d0>
 801f1b0:	0801ee21 	.word	0x0801ee21
 801f1b4:	0801ee9b 	.word	0x0801ee9b
 801f1b8:	08021749 	.word	0x08021749
 801f1bc:	08021bea 	.word	0x08021bea
 801f1c0:	0801b1c5 	.word	0x0801b1c5

0801f1c4 <__sfputc_r>:
 801f1c4:	6893      	ldr	r3, [r2, #8]
 801f1c6:	3b01      	subs	r3, #1
 801f1c8:	2b00      	cmp	r3, #0
 801f1ca:	b410      	push	{r4}
 801f1cc:	6093      	str	r3, [r2, #8]
 801f1ce:	da08      	bge.n	801f1e2 <__sfputc_r+0x1e>
 801f1d0:	6994      	ldr	r4, [r2, #24]
 801f1d2:	42a3      	cmp	r3, r4
 801f1d4:	db01      	blt.n	801f1da <__sfputc_r+0x16>
 801f1d6:	290a      	cmp	r1, #10
 801f1d8:	d103      	bne.n	801f1e2 <__sfputc_r+0x1e>
 801f1da:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f1de:	f7fd bb7d 	b.w	801c8dc <__swbuf_r>
 801f1e2:	6813      	ldr	r3, [r2, #0]
 801f1e4:	1c58      	adds	r0, r3, #1
 801f1e6:	6010      	str	r0, [r2, #0]
 801f1e8:	7019      	strb	r1, [r3, #0]
 801f1ea:	4608      	mov	r0, r1
 801f1ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f1f0:	4770      	bx	lr

0801f1f2 <__sfputs_r>:
 801f1f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f1f4:	4606      	mov	r6, r0
 801f1f6:	460f      	mov	r7, r1
 801f1f8:	4614      	mov	r4, r2
 801f1fa:	18d5      	adds	r5, r2, r3
 801f1fc:	42ac      	cmp	r4, r5
 801f1fe:	d101      	bne.n	801f204 <__sfputs_r+0x12>
 801f200:	2000      	movs	r0, #0
 801f202:	e007      	b.n	801f214 <__sfputs_r+0x22>
 801f204:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f208:	463a      	mov	r2, r7
 801f20a:	4630      	mov	r0, r6
 801f20c:	f7ff ffda 	bl	801f1c4 <__sfputc_r>
 801f210:	1c43      	adds	r3, r0, #1
 801f212:	d1f3      	bne.n	801f1fc <__sfputs_r+0xa>
 801f214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f218 <_vfiprintf_r>:
 801f218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f21c:	460d      	mov	r5, r1
 801f21e:	b09d      	sub	sp, #116	; 0x74
 801f220:	4614      	mov	r4, r2
 801f222:	4698      	mov	r8, r3
 801f224:	4606      	mov	r6, r0
 801f226:	b118      	cbz	r0, 801f230 <_vfiprintf_r+0x18>
 801f228:	6983      	ldr	r3, [r0, #24]
 801f22a:	b90b      	cbnz	r3, 801f230 <_vfiprintf_r+0x18>
 801f22c:	f7fb f9b8 	bl	801a5a0 <__sinit>
 801f230:	4b89      	ldr	r3, [pc, #548]	; (801f458 <_vfiprintf_r+0x240>)
 801f232:	429d      	cmp	r5, r3
 801f234:	d11b      	bne.n	801f26e <_vfiprintf_r+0x56>
 801f236:	6875      	ldr	r5, [r6, #4]
 801f238:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f23a:	07d9      	lsls	r1, r3, #31
 801f23c:	d405      	bmi.n	801f24a <_vfiprintf_r+0x32>
 801f23e:	89ab      	ldrh	r3, [r5, #12]
 801f240:	059a      	lsls	r2, r3, #22
 801f242:	d402      	bmi.n	801f24a <_vfiprintf_r+0x32>
 801f244:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f246:	f7fb fa6e 	bl	801a726 <__retarget_lock_acquire_recursive>
 801f24a:	89ab      	ldrh	r3, [r5, #12]
 801f24c:	071b      	lsls	r3, r3, #28
 801f24e:	d501      	bpl.n	801f254 <_vfiprintf_r+0x3c>
 801f250:	692b      	ldr	r3, [r5, #16]
 801f252:	b9eb      	cbnz	r3, 801f290 <_vfiprintf_r+0x78>
 801f254:	4629      	mov	r1, r5
 801f256:	4630      	mov	r0, r6
 801f258:	f7fd fba4 	bl	801c9a4 <__swsetup_r>
 801f25c:	b1c0      	cbz	r0, 801f290 <_vfiprintf_r+0x78>
 801f25e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f260:	07dc      	lsls	r4, r3, #31
 801f262:	d50e      	bpl.n	801f282 <_vfiprintf_r+0x6a>
 801f264:	f04f 30ff 	mov.w	r0, #4294967295
 801f268:	b01d      	add	sp, #116	; 0x74
 801f26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f26e:	4b7b      	ldr	r3, [pc, #492]	; (801f45c <_vfiprintf_r+0x244>)
 801f270:	429d      	cmp	r5, r3
 801f272:	d101      	bne.n	801f278 <_vfiprintf_r+0x60>
 801f274:	68b5      	ldr	r5, [r6, #8]
 801f276:	e7df      	b.n	801f238 <_vfiprintf_r+0x20>
 801f278:	4b79      	ldr	r3, [pc, #484]	; (801f460 <_vfiprintf_r+0x248>)
 801f27a:	429d      	cmp	r5, r3
 801f27c:	bf08      	it	eq
 801f27e:	68f5      	ldreq	r5, [r6, #12]
 801f280:	e7da      	b.n	801f238 <_vfiprintf_r+0x20>
 801f282:	89ab      	ldrh	r3, [r5, #12]
 801f284:	0598      	lsls	r0, r3, #22
 801f286:	d4ed      	bmi.n	801f264 <_vfiprintf_r+0x4c>
 801f288:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f28a:	f7fb fa4d 	bl	801a728 <__retarget_lock_release_recursive>
 801f28e:	e7e9      	b.n	801f264 <_vfiprintf_r+0x4c>
 801f290:	2300      	movs	r3, #0
 801f292:	9309      	str	r3, [sp, #36]	; 0x24
 801f294:	2320      	movs	r3, #32
 801f296:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f29a:	f8cd 800c 	str.w	r8, [sp, #12]
 801f29e:	2330      	movs	r3, #48	; 0x30
 801f2a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801f464 <_vfiprintf_r+0x24c>
 801f2a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f2a8:	f04f 0901 	mov.w	r9, #1
 801f2ac:	4623      	mov	r3, r4
 801f2ae:	469a      	mov	sl, r3
 801f2b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f2b4:	b10a      	cbz	r2, 801f2ba <_vfiprintf_r+0xa2>
 801f2b6:	2a25      	cmp	r2, #37	; 0x25
 801f2b8:	d1f9      	bne.n	801f2ae <_vfiprintf_r+0x96>
 801f2ba:	ebba 0b04 	subs.w	fp, sl, r4
 801f2be:	d00b      	beq.n	801f2d8 <_vfiprintf_r+0xc0>
 801f2c0:	465b      	mov	r3, fp
 801f2c2:	4622      	mov	r2, r4
 801f2c4:	4629      	mov	r1, r5
 801f2c6:	4630      	mov	r0, r6
 801f2c8:	f7ff ff93 	bl	801f1f2 <__sfputs_r>
 801f2cc:	3001      	adds	r0, #1
 801f2ce:	f000 80aa 	beq.w	801f426 <_vfiprintf_r+0x20e>
 801f2d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f2d4:	445a      	add	r2, fp
 801f2d6:	9209      	str	r2, [sp, #36]	; 0x24
 801f2d8:	f89a 3000 	ldrb.w	r3, [sl]
 801f2dc:	2b00      	cmp	r3, #0
 801f2de:	f000 80a2 	beq.w	801f426 <_vfiprintf_r+0x20e>
 801f2e2:	2300      	movs	r3, #0
 801f2e4:	f04f 32ff 	mov.w	r2, #4294967295
 801f2e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f2ec:	f10a 0a01 	add.w	sl, sl, #1
 801f2f0:	9304      	str	r3, [sp, #16]
 801f2f2:	9307      	str	r3, [sp, #28]
 801f2f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f2f8:	931a      	str	r3, [sp, #104]	; 0x68
 801f2fa:	4654      	mov	r4, sl
 801f2fc:	2205      	movs	r2, #5
 801f2fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f302:	4858      	ldr	r0, [pc, #352]	; (801f464 <_vfiprintf_r+0x24c>)
 801f304:	f7e0 ff7c 	bl	8000200 <memchr>
 801f308:	9a04      	ldr	r2, [sp, #16]
 801f30a:	b9d8      	cbnz	r0, 801f344 <_vfiprintf_r+0x12c>
 801f30c:	06d1      	lsls	r1, r2, #27
 801f30e:	bf44      	itt	mi
 801f310:	2320      	movmi	r3, #32
 801f312:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f316:	0713      	lsls	r3, r2, #28
 801f318:	bf44      	itt	mi
 801f31a:	232b      	movmi	r3, #43	; 0x2b
 801f31c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f320:	f89a 3000 	ldrb.w	r3, [sl]
 801f324:	2b2a      	cmp	r3, #42	; 0x2a
 801f326:	d015      	beq.n	801f354 <_vfiprintf_r+0x13c>
 801f328:	9a07      	ldr	r2, [sp, #28]
 801f32a:	4654      	mov	r4, sl
 801f32c:	2000      	movs	r0, #0
 801f32e:	f04f 0c0a 	mov.w	ip, #10
 801f332:	4621      	mov	r1, r4
 801f334:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f338:	3b30      	subs	r3, #48	; 0x30
 801f33a:	2b09      	cmp	r3, #9
 801f33c:	d94e      	bls.n	801f3dc <_vfiprintf_r+0x1c4>
 801f33e:	b1b0      	cbz	r0, 801f36e <_vfiprintf_r+0x156>
 801f340:	9207      	str	r2, [sp, #28]
 801f342:	e014      	b.n	801f36e <_vfiprintf_r+0x156>
 801f344:	eba0 0308 	sub.w	r3, r0, r8
 801f348:	fa09 f303 	lsl.w	r3, r9, r3
 801f34c:	4313      	orrs	r3, r2
 801f34e:	9304      	str	r3, [sp, #16]
 801f350:	46a2      	mov	sl, r4
 801f352:	e7d2      	b.n	801f2fa <_vfiprintf_r+0xe2>
 801f354:	9b03      	ldr	r3, [sp, #12]
 801f356:	1d19      	adds	r1, r3, #4
 801f358:	681b      	ldr	r3, [r3, #0]
 801f35a:	9103      	str	r1, [sp, #12]
 801f35c:	2b00      	cmp	r3, #0
 801f35e:	bfbb      	ittet	lt
 801f360:	425b      	neglt	r3, r3
 801f362:	f042 0202 	orrlt.w	r2, r2, #2
 801f366:	9307      	strge	r3, [sp, #28]
 801f368:	9307      	strlt	r3, [sp, #28]
 801f36a:	bfb8      	it	lt
 801f36c:	9204      	strlt	r2, [sp, #16]
 801f36e:	7823      	ldrb	r3, [r4, #0]
 801f370:	2b2e      	cmp	r3, #46	; 0x2e
 801f372:	d10c      	bne.n	801f38e <_vfiprintf_r+0x176>
 801f374:	7863      	ldrb	r3, [r4, #1]
 801f376:	2b2a      	cmp	r3, #42	; 0x2a
 801f378:	d135      	bne.n	801f3e6 <_vfiprintf_r+0x1ce>
 801f37a:	9b03      	ldr	r3, [sp, #12]
 801f37c:	1d1a      	adds	r2, r3, #4
 801f37e:	681b      	ldr	r3, [r3, #0]
 801f380:	9203      	str	r2, [sp, #12]
 801f382:	2b00      	cmp	r3, #0
 801f384:	bfb8      	it	lt
 801f386:	f04f 33ff 	movlt.w	r3, #4294967295
 801f38a:	3402      	adds	r4, #2
 801f38c:	9305      	str	r3, [sp, #20]
 801f38e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801f474 <_vfiprintf_r+0x25c>
 801f392:	7821      	ldrb	r1, [r4, #0]
 801f394:	2203      	movs	r2, #3
 801f396:	4650      	mov	r0, sl
 801f398:	f7e0 ff32 	bl	8000200 <memchr>
 801f39c:	b140      	cbz	r0, 801f3b0 <_vfiprintf_r+0x198>
 801f39e:	2340      	movs	r3, #64	; 0x40
 801f3a0:	eba0 000a 	sub.w	r0, r0, sl
 801f3a4:	fa03 f000 	lsl.w	r0, r3, r0
 801f3a8:	9b04      	ldr	r3, [sp, #16]
 801f3aa:	4303      	orrs	r3, r0
 801f3ac:	3401      	adds	r4, #1
 801f3ae:	9304      	str	r3, [sp, #16]
 801f3b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f3b4:	482c      	ldr	r0, [pc, #176]	; (801f468 <_vfiprintf_r+0x250>)
 801f3b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f3ba:	2206      	movs	r2, #6
 801f3bc:	f7e0 ff20 	bl	8000200 <memchr>
 801f3c0:	2800      	cmp	r0, #0
 801f3c2:	d03f      	beq.n	801f444 <_vfiprintf_r+0x22c>
 801f3c4:	4b29      	ldr	r3, [pc, #164]	; (801f46c <_vfiprintf_r+0x254>)
 801f3c6:	bb1b      	cbnz	r3, 801f410 <_vfiprintf_r+0x1f8>
 801f3c8:	9b03      	ldr	r3, [sp, #12]
 801f3ca:	3307      	adds	r3, #7
 801f3cc:	f023 0307 	bic.w	r3, r3, #7
 801f3d0:	3308      	adds	r3, #8
 801f3d2:	9303      	str	r3, [sp, #12]
 801f3d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f3d6:	443b      	add	r3, r7
 801f3d8:	9309      	str	r3, [sp, #36]	; 0x24
 801f3da:	e767      	b.n	801f2ac <_vfiprintf_r+0x94>
 801f3dc:	fb0c 3202 	mla	r2, ip, r2, r3
 801f3e0:	460c      	mov	r4, r1
 801f3e2:	2001      	movs	r0, #1
 801f3e4:	e7a5      	b.n	801f332 <_vfiprintf_r+0x11a>
 801f3e6:	2300      	movs	r3, #0
 801f3e8:	3401      	adds	r4, #1
 801f3ea:	9305      	str	r3, [sp, #20]
 801f3ec:	4619      	mov	r1, r3
 801f3ee:	f04f 0c0a 	mov.w	ip, #10
 801f3f2:	4620      	mov	r0, r4
 801f3f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f3f8:	3a30      	subs	r2, #48	; 0x30
 801f3fa:	2a09      	cmp	r2, #9
 801f3fc:	d903      	bls.n	801f406 <_vfiprintf_r+0x1ee>
 801f3fe:	2b00      	cmp	r3, #0
 801f400:	d0c5      	beq.n	801f38e <_vfiprintf_r+0x176>
 801f402:	9105      	str	r1, [sp, #20]
 801f404:	e7c3      	b.n	801f38e <_vfiprintf_r+0x176>
 801f406:	fb0c 2101 	mla	r1, ip, r1, r2
 801f40a:	4604      	mov	r4, r0
 801f40c:	2301      	movs	r3, #1
 801f40e:	e7f0      	b.n	801f3f2 <_vfiprintf_r+0x1da>
 801f410:	ab03      	add	r3, sp, #12
 801f412:	9300      	str	r3, [sp, #0]
 801f414:	462a      	mov	r2, r5
 801f416:	4b16      	ldr	r3, [pc, #88]	; (801f470 <_vfiprintf_r+0x258>)
 801f418:	a904      	add	r1, sp, #16
 801f41a:	4630      	mov	r0, r6
 801f41c:	f7fb fb08 	bl	801aa30 <_printf_float>
 801f420:	4607      	mov	r7, r0
 801f422:	1c78      	adds	r0, r7, #1
 801f424:	d1d6      	bne.n	801f3d4 <_vfiprintf_r+0x1bc>
 801f426:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f428:	07d9      	lsls	r1, r3, #31
 801f42a:	d405      	bmi.n	801f438 <_vfiprintf_r+0x220>
 801f42c:	89ab      	ldrh	r3, [r5, #12]
 801f42e:	059a      	lsls	r2, r3, #22
 801f430:	d402      	bmi.n	801f438 <_vfiprintf_r+0x220>
 801f432:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f434:	f7fb f978 	bl	801a728 <__retarget_lock_release_recursive>
 801f438:	89ab      	ldrh	r3, [r5, #12]
 801f43a:	065b      	lsls	r3, r3, #25
 801f43c:	f53f af12 	bmi.w	801f264 <_vfiprintf_r+0x4c>
 801f440:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f442:	e711      	b.n	801f268 <_vfiprintf_r+0x50>
 801f444:	ab03      	add	r3, sp, #12
 801f446:	9300      	str	r3, [sp, #0]
 801f448:	462a      	mov	r2, r5
 801f44a:	4b09      	ldr	r3, [pc, #36]	; (801f470 <_vfiprintf_r+0x258>)
 801f44c:	a904      	add	r1, sp, #16
 801f44e:	4630      	mov	r0, r6
 801f450:	f7fb fd92 	bl	801af78 <_printf_i>
 801f454:	e7e4      	b.n	801f420 <_vfiprintf_r+0x208>
 801f456:	bf00      	nop
 801f458:	0802186c 	.word	0x0802186c
 801f45c:	0802188c 	.word	0x0802188c
 801f460:	0802184c 	.word	0x0802184c
 801f464:	08021be4 	.word	0x08021be4
 801f468:	08021bee 	.word	0x08021bee
 801f46c:	0801aa31 	.word	0x0801aa31
 801f470:	0801f1f3 	.word	0x0801f1f3
 801f474:	08021bea 	.word	0x08021bea

0801f478 <_scanf_chars>:
 801f478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f47c:	4615      	mov	r5, r2
 801f47e:	688a      	ldr	r2, [r1, #8]
 801f480:	4680      	mov	r8, r0
 801f482:	460c      	mov	r4, r1
 801f484:	b932      	cbnz	r2, 801f494 <_scanf_chars+0x1c>
 801f486:	698a      	ldr	r2, [r1, #24]
 801f488:	2a00      	cmp	r2, #0
 801f48a:	bf0c      	ite	eq
 801f48c:	2201      	moveq	r2, #1
 801f48e:	f04f 32ff 	movne.w	r2, #4294967295
 801f492:	608a      	str	r2, [r1, #8]
 801f494:	6822      	ldr	r2, [r4, #0]
 801f496:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801f524 <_scanf_chars+0xac>
 801f49a:	06d1      	lsls	r1, r2, #27
 801f49c:	bf5f      	itttt	pl
 801f49e:	681a      	ldrpl	r2, [r3, #0]
 801f4a0:	1d11      	addpl	r1, r2, #4
 801f4a2:	6019      	strpl	r1, [r3, #0]
 801f4a4:	6816      	ldrpl	r6, [r2, #0]
 801f4a6:	2700      	movs	r7, #0
 801f4a8:	69a0      	ldr	r0, [r4, #24]
 801f4aa:	b188      	cbz	r0, 801f4d0 <_scanf_chars+0x58>
 801f4ac:	2801      	cmp	r0, #1
 801f4ae:	d107      	bne.n	801f4c0 <_scanf_chars+0x48>
 801f4b0:	682b      	ldr	r3, [r5, #0]
 801f4b2:	781a      	ldrb	r2, [r3, #0]
 801f4b4:	6963      	ldr	r3, [r4, #20]
 801f4b6:	5c9b      	ldrb	r3, [r3, r2]
 801f4b8:	b953      	cbnz	r3, 801f4d0 <_scanf_chars+0x58>
 801f4ba:	bb27      	cbnz	r7, 801f506 <_scanf_chars+0x8e>
 801f4bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f4c0:	2802      	cmp	r0, #2
 801f4c2:	d120      	bne.n	801f506 <_scanf_chars+0x8e>
 801f4c4:	682b      	ldr	r3, [r5, #0]
 801f4c6:	781b      	ldrb	r3, [r3, #0]
 801f4c8:	f813 3009 	ldrb.w	r3, [r3, r9]
 801f4cc:	071b      	lsls	r3, r3, #28
 801f4ce:	d41a      	bmi.n	801f506 <_scanf_chars+0x8e>
 801f4d0:	6823      	ldr	r3, [r4, #0]
 801f4d2:	06da      	lsls	r2, r3, #27
 801f4d4:	bf5e      	ittt	pl
 801f4d6:	682b      	ldrpl	r3, [r5, #0]
 801f4d8:	781b      	ldrbpl	r3, [r3, #0]
 801f4da:	f806 3b01 	strbpl.w	r3, [r6], #1
 801f4de:	682a      	ldr	r2, [r5, #0]
 801f4e0:	686b      	ldr	r3, [r5, #4]
 801f4e2:	3201      	adds	r2, #1
 801f4e4:	602a      	str	r2, [r5, #0]
 801f4e6:	68a2      	ldr	r2, [r4, #8]
 801f4e8:	3b01      	subs	r3, #1
 801f4ea:	3a01      	subs	r2, #1
 801f4ec:	606b      	str	r3, [r5, #4]
 801f4ee:	3701      	adds	r7, #1
 801f4f0:	60a2      	str	r2, [r4, #8]
 801f4f2:	b142      	cbz	r2, 801f506 <_scanf_chars+0x8e>
 801f4f4:	2b00      	cmp	r3, #0
 801f4f6:	dcd7      	bgt.n	801f4a8 <_scanf_chars+0x30>
 801f4f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801f4fc:	4629      	mov	r1, r5
 801f4fe:	4640      	mov	r0, r8
 801f500:	4798      	blx	r3
 801f502:	2800      	cmp	r0, #0
 801f504:	d0d0      	beq.n	801f4a8 <_scanf_chars+0x30>
 801f506:	6823      	ldr	r3, [r4, #0]
 801f508:	f013 0310 	ands.w	r3, r3, #16
 801f50c:	d105      	bne.n	801f51a <_scanf_chars+0xa2>
 801f50e:	68e2      	ldr	r2, [r4, #12]
 801f510:	3201      	adds	r2, #1
 801f512:	60e2      	str	r2, [r4, #12]
 801f514:	69a2      	ldr	r2, [r4, #24]
 801f516:	b102      	cbz	r2, 801f51a <_scanf_chars+0xa2>
 801f518:	7033      	strb	r3, [r6, #0]
 801f51a:	6923      	ldr	r3, [r4, #16]
 801f51c:	441f      	add	r7, r3
 801f51e:	6127      	str	r7, [r4, #16]
 801f520:	2000      	movs	r0, #0
 801f522:	e7cb      	b.n	801f4bc <_scanf_chars+0x44>
 801f524:	08021749 	.word	0x08021749

0801f528 <_scanf_i>:
 801f528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f52c:	4698      	mov	r8, r3
 801f52e:	4b74      	ldr	r3, [pc, #464]	; (801f700 <_scanf_i+0x1d8>)
 801f530:	460c      	mov	r4, r1
 801f532:	4682      	mov	sl, r0
 801f534:	4616      	mov	r6, r2
 801f536:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801f53a:	b087      	sub	sp, #28
 801f53c:	ab03      	add	r3, sp, #12
 801f53e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801f542:	4b70      	ldr	r3, [pc, #448]	; (801f704 <_scanf_i+0x1dc>)
 801f544:	69a1      	ldr	r1, [r4, #24]
 801f546:	4a70      	ldr	r2, [pc, #448]	; (801f708 <_scanf_i+0x1e0>)
 801f548:	2903      	cmp	r1, #3
 801f54a:	bf18      	it	ne
 801f54c:	461a      	movne	r2, r3
 801f54e:	68a3      	ldr	r3, [r4, #8]
 801f550:	9201      	str	r2, [sp, #4]
 801f552:	1e5a      	subs	r2, r3, #1
 801f554:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801f558:	bf88      	it	hi
 801f55a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801f55e:	4627      	mov	r7, r4
 801f560:	bf82      	ittt	hi
 801f562:	eb03 0905 	addhi.w	r9, r3, r5
 801f566:	f240 135d 	movwhi	r3, #349	; 0x15d
 801f56a:	60a3      	strhi	r3, [r4, #8]
 801f56c:	f857 3b1c 	ldr.w	r3, [r7], #28
 801f570:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801f574:	bf98      	it	ls
 801f576:	f04f 0900 	movls.w	r9, #0
 801f57a:	6023      	str	r3, [r4, #0]
 801f57c:	463d      	mov	r5, r7
 801f57e:	f04f 0b00 	mov.w	fp, #0
 801f582:	6831      	ldr	r1, [r6, #0]
 801f584:	ab03      	add	r3, sp, #12
 801f586:	7809      	ldrb	r1, [r1, #0]
 801f588:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801f58c:	2202      	movs	r2, #2
 801f58e:	f7e0 fe37 	bl	8000200 <memchr>
 801f592:	b328      	cbz	r0, 801f5e0 <_scanf_i+0xb8>
 801f594:	f1bb 0f01 	cmp.w	fp, #1
 801f598:	d159      	bne.n	801f64e <_scanf_i+0x126>
 801f59a:	6862      	ldr	r2, [r4, #4]
 801f59c:	b92a      	cbnz	r2, 801f5aa <_scanf_i+0x82>
 801f59e:	6822      	ldr	r2, [r4, #0]
 801f5a0:	2308      	movs	r3, #8
 801f5a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f5a6:	6063      	str	r3, [r4, #4]
 801f5a8:	6022      	str	r2, [r4, #0]
 801f5aa:	6822      	ldr	r2, [r4, #0]
 801f5ac:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801f5b0:	6022      	str	r2, [r4, #0]
 801f5b2:	68a2      	ldr	r2, [r4, #8]
 801f5b4:	1e51      	subs	r1, r2, #1
 801f5b6:	60a1      	str	r1, [r4, #8]
 801f5b8:	b192      	cbz	r2, 801f5e0 <_scanf_i+0xb8>
 801f5ba:	6832      	ldr	r2, [r6, #0]
 801f5bc:	1c51      	adds	r1, r2, #1
 801f5be:	6031      	str	r1, [r6, #0]
 801f5c0:	7812      	ldrb	r2, [r2, #0]
 801f5c2:	f805 2b01 	strb.w	r2, [r5], #1
 801f5c6:	6872      	ldr	r2, [r6, #4]
 801f5c8:	3a01      	subs	r2, #1
 801f5ca:	2a00      	cmp	r2, #0
 801f5cc:	6072      	str	r2, [r6, #4]
 801f5ce:	dc07      	bgt.n	801f5e0 <_scanf_i+0xb8>
 801f5d0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801f5d4:	4631      	mov	r1, r6
 801f5d6:	4650      	mov	r0, sl
 801f5d8:	4790      	blx	r2
 801f5da:	2800      	cmp	r0, #0
 801f5dc:	f040 8085 	bne.w	801f6ea <_scanf_i+0x1c2>
 801f5e0:	f10b 0b01 	add.w	fp, fp, #1
 801f5e4:	f1bb 0f03 	cmp.w	fp, #3
 801f5e8:	d1cb      	bne.n	801f582 <_scanf_i+0x5a>
 801f5ea:	6863      	ldr	r3, [r4, #4]
 801f5ec:	b90b      	cbnz	r3, 801f5f2 <_scanf_i+0xca>
 801f5ee:	230a      	movs	r3, #10
 801f5f0:	6063      	str	r3, [r4, #4]
 801f5f2:	6863      	ldr	r3, [r4, #4]
 801f5f4:	4945      	ldr	r1, [pc, #276]	; (801f70c <_scanf_i+0x1e4>)
 801f5f6:	6960      	ldr	r0, [r4, #20]
 801f5f8:	1ac9      	subs	r1, r1, r3
 801f5fa:	f000 f89b 	bl	801f734 <__sccl>
 801f5fe:	f04f 0b00 	mov.w	fp, #0
 801f602:	68a3      	ldr	r3, [r4, #8]
 801f604:	6822      	ldr	r2, [r4, #0]
 801f606:	2b00      	cmp	r3, #0
 801f608:	d03d      	beq.n	801f686 <_scanf_i+0x15e>
 801f60a:	6831      	ldr	r1, [r6, #0]
 801f60c:	6960      	ldr	r0, [r4, #20]
 801f60e:	f891 c000 	ldrb.w	ip, [r1]
 801f612:	f810 000c 	ldrb.w	r0, [r0, ip]
 801f616:	2800      	cmp	r0, #0
 801f618:	d035      	beq.n	801f686 <_scanf_i+0x15e>
 801f61a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801f61e:	d124      	bne.n	801f66a <_scanf_i+0x142>
 801f620:	0510      	lsls	r0, r2, #20
 801f622:	d522      	bpl.n	801f66a <_scanf_i+0x142>
 801f624:	f10b 0b01 	add.w	fp, fp, #1
 801f628:	f1b9 0f00 	cmp.w	r9, #0
 801f62c:	d003      	beq.n	801f636 <_scanf_i+0x10e>
 801f62e:	3301      	adds	r3, #1
 801f630:	f109 39ff 	add.w	r9, r9, #4294967295
 801f634:	60a3      	str	r3, [r4, #8]
 801f636:	6873      	ldr	r3, [r6, #4]
 801f638:	3b01      	subs	r3, #1
 801f63a:	2b00      	cmp	r3, #0
 801f63c:	6073      	str	r3, [r6, #4]
 801f63e:	dd1b      	ble.n	801f678 <_scanf_i+0x150>
 801f640:	6833      	ldr	r3, [r6, #0]
 801f642:	3301      	adds	r3, #1
 801f644:	6033      	str	r3, [r6, #0]
 801f646:	68a3      	ldr	r3, [r4, #8]
 801f648:	3b01      	subs	r3, #1
 801f64a:	60a3      	str	r3, [r4, #8]
 801f64c:	e7d9      	b.n	801f602 <_scanf_i+0xda>
 801f64e:	f1bb 0f02 	cmp.w	fp, #2
 801f652:	d1ae      	bne.n	801f5b2 <_scanf_i+0x8a>
 801f654:	6822      	ldr	r2, [r4, #0]
 801f656:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801f65a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801f65e:	d1bf      	bne.n	801f5e0 <_scanf_i+0xb8>
 801f660:	2310      	movs	r3, #16
 801f662:	6063      	str	r3, [r4, #4]
 801f664:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801f668:	e7a2      	b.n	801f5b0 <_scanf_i+0x88>
 801f66a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801f66e:	6022      	str	r2, [r4, #0]
 801f670:	780b      	ldrb	r3, [r1, #0]
 801f672:	f805 3b01 	strb.w	r3, [r5], #1
 801f676:	e7de      	b.n	801f636 <_scanf_i+0x10e>
 801f678:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801f67c:	4631      	mov	r1, r6
 801f67e:	4650      	mov	r0, sl
 801f680:	4798      	blx	r3
 801f682:	2800      	cmp	r0, #0
 801f684:	d0df      	beq.n	801f646 <_scanf_i+0x11e>
 801f686:	6823      	ldr	r3, [r4, #0]
 801f688:	05d9      	lsls	r1, r3, #23
 801f68a:	d50d      	bpl.n	801f6a8 <_scanf_i+0x180>
 801f68c:	42bd      	cmp	r5, r7
 801f68e:	d909      	bls.n	801f6a4 <_scanf_i+0x17c>
 801f690:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801f694:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f698:	4632      	mov	r2, r6
 801f69a:	4650      	mov	r0, sl
 801f69c:	4798      	blx	r3
 801f69e:	f105 39ff 	add.w	r9, r5, #4294967295
 801f6a2:	464d      	mov	r5, r9
 801f6a4:	42bd      	cmp	r5, r7
 801f6a6:	d028      	beq.n	801f6fa <_scanf_i+0x1d2>
 801f6a8:	6822      	ldr	r2, [r4, #0]
 801f6aa:	f012 0210 	ands.w	r2, r2, #16
 801f6ae:	d113      	bne.n	801f6d8 <_scanf_i+0x1b0>
 801f6b0:	702a      	strb	r2, [r5, #0]
 801f6b2:	6863      	ldr	r3, [r4, #4]
 801f6b4:	9e01      	ldr	r6, [sp, #4]
 801f6b6:	4639      	mov	r1, r7
 801f6b8:	4650      	mov	r0, sl
 801f6ba:	47b0      	blx	r6
 801f6bc:	f8d8 3000 	ldr.w	r3, [r8]
 801f6c0:	6821      	ldr	r1, [r4, #0]
 801f6c2:	1d1a      	adds	r2, r3, #4
 801f6c4:	f8c8 2000 	str.w	r2, [r8]
 801f6c8:	f011 0f20 	tst.w	r1, #32
 801f6cc:	681b      	ldr	r3, [r3, #0]
 801f6ce:	d00f      	beq.n	801f6f0 <_scanf_i+0x1c8>
 801f6d0:	6018      	str	r0, [r3, #0]
 801f6d2:	68e3      	ldr	r3, [r4, #12]
 801f6d4:	3301      	adds	r3, #1
 801f6d6:	60e3      	str	r3, [r4, #12]
 801f6d8:	1bed      	subs	r5, r5, r7
 801f6da:	44ab      	add	fp, r5
 801f6dc:	6925      	ldr	r5, [r4, #16]
 801f6de:	445d      	add	r5, fp
 801f6e0:	6125      	str	r5, [r4, #16]
 801f6e2:	2000      	movs	r0, #0
 801f6e4:	b007      	add	sp, #28
 801f6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6ea:	f04f 0b00 	mov.w	fp, #0
 801f6ee:	e7ca      	b.n	801f686 <_scanf_i+0x15e>
 801f6f0:	07ca      	lsls	r2, r1, #31
 801f6f2:	bf4c      	ite	mi
 801f6f4:	8018      	strhmi	r0, [r3, #0]
 801f6f6:	6018      	strpl	r0, [r3, #0]
 801f6f8:	e7eb      	b.n	801f6d2 <_scanf_i+0x1aa>
 801f6fa:	2001      	movs	r0, #1
 801f6fc:	e7f2      	b.n	801f6e4 <_scanf_i+0x1bc>
 801f6fe:	bf00      	nop
 801f700:	0802150c 	.word	0x0802150c
 801f704:	0801c851 	.word	0x0801c851
 801f708:	0801c741 	.word	0x0801c741
 801f70c:	08021c0e 	.word	0x08021c0e

0801f710 <_read_r>:
 801f710:	b538      	push	{r3, r4, r5, lr}
 801f712:	4d07      	ldr	r5, [pc, #28]	; (801f730 <_read_r+0x20>)
 801f714:	4604      	mov	r4, r0
 801f716:	4608      	mov	r0, r1
 801f718:	4611      	mov	r1, r2
 801f71a:	2200      	movs	r2, #0
 801f71c:	602a      	str	r2, [r5, #0]
 801f71e:	461a      	mov	r2, r3
 801f720:	f7e3 fd32 	bl	8003188 <_read>
 801f724:	1c43      	adds	r3, r0, #1
 801f726:	d102      	bne.n	801f72e <_read_r+0x1e>
 801f728:	682b      	ldr	r3, [r5, #0]
 801f72a:	b103      	cbz	r3, 801f72e <_read_r+0x1e>
 801f72c:	6023      	str	r3, [r4, #0]
 801f72e:	bd38      	pop	{r3, r4, r5, pc}
 801f730:	20008fb4 	.word	0x20008fb4

0801f734 <__sccl>:
 801f734:	b570      	push	{r4, r5, r6, lr}
 801f736:	780b      	ldrb	r3, [r1, #0]
 801f738:	4604      	mov	r4, r0
 801f73a:	2b5e      	cmp	r3, #94	; 0x5e
 801f73c:	bf0b      	itete	eq
 801f73e:	784b      	ldrbeq	r3, [r1, #1]
 801f740:	1c48      	addne	r0, r1, #1
 801f742:	1c88      	addeq	r0, r1, #2
 801f744:	2200      	movne	r2, #0
 801f746:	bf08      	it	eq
 801f748:	2201      	moveq	r2, #1
 801f74a:	1e61      	subs	r1, r4, #1
 801f74c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801f750:	f801 2f01 	strb.w	r2, [r1, #1]!
 801f754:	42a9      	cmp	r1, r5
 801f756:	d1fb      	bne.n	801f750 <__sccl+0x1c>
 801f758:	b90b      	cbnz	r3, 801f75e <__sccl+0x2a>
 801f75a:	3801      	subs	r0, #1
 801f75c:	bd70      	pop	{r4, r5, r6, pc}
 801f75e:	f082 0101 	eor.w	r1, r2, #1
 801f762:	54e1      	strb	r1, [r4, r3]
 801f764:	1c42      	adds	r2, r0, #1
 801f766:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801f76a:	2d2d      	cmp	r5, #45	; 0x2d
 801f76c:	f102 36ff 	add.w	r6, r2, #4294967295
 801f770:	4610      	mov	r0, r2
 801f772:	d006      	beq.n	801f782 <__sccl+0x4e>
 801f774:	2d5d      	cmp	r5, #93	; 0x5d
 801f776:	d0f1      	beq.n	801f75c <__sccl+0x28>
 801f778:	b90d      	cbnz	r5, 801f77e <__sccl+0x4a>
 801f77a:	4630      	mov	r0, r6
 801f77c:	e7ee      	b.n	801f75c <__sccl+0x28>
 801f77e:	462b      	mov	r3, r5
 801f780:	e7ef      	b.n	801f762 <__sccl+0x2e>
 801f782:	7816      	ldrb	r6, [r2, #0]
 801f784:	2e5d      	cmp	r6, #93	; 0x5d
 801f786:	d0fa      	beq.n	801f77e <__sccl+0x4a>
 801f788:	42b3      	cmp	r3, r6
 801f78a:	dcf8      	bgt.n	801f77e <__sccl+0x4a>
 801f78c:	4618      	mov	r0, r3
 801f78e:	3001      	adds	r0, #1
 801f790:	4286      	cmp	r6, r0
 801f792:	5421      	strb	r1, [r4, r0]
 801f794:	dcfb      	bgt.n	801f78e <__sccl+0x5a>
 801f796:	43d8      	mvns	r0, r3
 801f798:	4430      	add	r0, r6
 801f79a:	1c5d      	adds	r5, r3, #1
 801f79c:	42b3      	cmp	r3, r6
 801f79e:	bfa8      	it	ge
 801f7a0:	2000      	movge	r0, #0
 801f7a2:	182b      	adds	r3, r5, r0
 801f7a4:	3202      	adds	r2, #2
 801f7a6:	e7de      	b.n	801f766 <__sccl+0x32>

0801f7a8 <__submore>:
 801f7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f7ac:	460c      	mov	r4, r1
 801f7ae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801f7b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f7b4:	4299      	cmp	r1, r3
 801f7b6:	d11d      	bne.n	801f7f4 <__submore+0x4c>
 801f7b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801f7bc:	f7fb f83e 	bl	801a83c <_malloc_r>
 801f7c0:	b918      	cbnz	r0, 801f7ca <__submore+0x22>
 801f7c2:	f04f 30ff 	mov.w	r0, #4294967295
 801f7c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f7ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f7ce:	63a3      	str	r3, [r4, #56]	; 0x38
 801f7d0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801f7d4:	6360      	str	r0, [r4, #52]	; 0x34
 801f7d6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801f7da:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801f7de:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801f7e2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801f7e6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801f7ea:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801f7ee:	6020      	str	r0, [r4, #0]
 801f7f0:	2000      	movs	r0, #0
 801f7f2:	e7e8      	b.n	801f7c6 <__submore+0x1e>
 801f7f4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801f7f6:	0077      	lsls	r7, r6, #1
 801f7f8:	463a      	mov	r2, r7
 801f7fa:	f7ff f98f 	bl	801eb1c <_realloc_r>
 801f7fe:	4605      	mov	r5, r0
 801f800:	2800      	cmp	r0, #0
 801f802:	d0de      	beq.n	801f7c2 <__submore+0x1a>
 801f804:	eb00 0806 	add.w	r8, r0, r6
 801f808:	4601      	mov	r1, r0
 801f80a:	4632      	mov	r2, r6
 801f80c:	4640      	mov	r0, r8
 801f80e:	f7fa ff95 	bl	801a73c <memcpy>
 801f812:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801f816:	f8c4 8000 	str.w	r8, [r4]
 801f81a:	e7e9      	b.n	801f7f0 <__submore+0x48>

0801f81c <__ascii_wctomb>:
 801f81c:	b149      	cbz	r1, 801f832 <__ascii_wctomb+0x16>
 801f81e:	2aff      	cmp	r2, #255	; 0xff
 801f820:	bf85      	ittet	hi
 801f822:	238a      	movhi	r3, #138	; 0x8a
 801f824:	6003      	strhi	r3, [r0, #0]
 801f826:	700a      	strbls	r2, [r1, #0]
 801f828:	f04f 30ff 	movhi.w	r0, #4294967295
 801f82c:	bf98      	it	ls
 801f82e:	2001      	movls	r0, #1
 801f830:	4770      	bx	lr
 801f832:	4608      	mov	r0, r1
 801f834:	4770      	bx	lr
	...

0801f838 <_fstat_r>:
 801f838:	b538      	push	{r3, r4, r5, lr}
 801f83a:	4d07      	ldr	r5, [pc, #28]	; (801f858 <_fstat_r+0x20>)
 801f83c:	2300      	movs	r3, #0
 801f83e:	4604      	mov	r4, r0
 801f840:	4608      	mov	r0, r1
 801f842:	4611      	mov	r1, r2
 801f844:	602b      	str	r3, [r5, #0]
 801f846:	f7e3 fce4 	bl	8003212 <_fstat>
 801f84a:	1c43      	adds	r3, r0, #1
 801f84c:	d102      	bne.n	801f854 <_fstat_r+0x1c>
 801f84e:	682b      	ldr	r3, [r5, #0]
 801f850:	b103      	cbz	r3, 801f854 <_fstat_r+0x1c>
 801f852:	6023      	str	r3, [r4, #0]
 801f854:	bd38      	pop	{r3, r4, r5, pc}
 801f856:	bf00      	nop
 801f858:	20008fb4 	.word	0x20008fb4

0801f85c <_isatty_r>:
 801f85c:	b538      	push	{r3, r4, r5, lr}
 801f85e:	4d06      	ldr	r5, [pc, #24]	; (801f878 <_isatty_r+0x1c>)
 801f860:	2300      	movs	r3, #0
 801f862:	4604      	mov	r4, r0
 801f864:	4608      	mov	r0, r1
 801f866:	602b      	str	r3, [r5, #0]
 801f868:	f7e3 fce3 	bl	8003232 <_isatty>
 801f86c:	1c43      	adds	r3, r0, #1
 801f86e:	d102      	bne.n	801f876 <_isatty_r+0x1a>
 801f870:	682b      	ldr	r3, [r5, #0]
 801f872:	b103      	cbz	r3, 801f876 <_isatty_r+0x1a>
 801f874:	6023      	str	r3, [r4, #0]
 801f876:	bd38      	pop	{r3, r4, r5, pc}
 801f878:	20008fb4 	.word	0x20008fb4

0801f87c <_malloc_usable_size_r>:
 801f87c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f880:	1f18      	subs	r0, r3, #4
 801f882:	2b00      	cmp	r3, #0
 801f884:	bfbc      	itt	lt
 801f886:	580b      	ldrlt	r3, [r1, r0]
 801f888:	18c0      	addlt	r0, r0, r3
 801f88a:	4770      	bx	lr

0801f88c <_init>:
 801f88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f88e:	bf00      	nop
 801f890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f892:	bc08      	pop	{r3}
 801f894:	469e      	mov	lr, r3
 801f896:	4770      	bx	lr

0801f898 <_fini>:
 801f898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f89a:	bf00      	nop
 801f89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f89e:	bc08      	pop	{r3}
 801f8a0:	469e      	mov	lr, r3
 801f8a2:	4770      	bx	lr
