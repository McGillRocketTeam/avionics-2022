
FC_v2.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020ff0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002450  080211a0  080211a0  000311a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080235f0  080235f0  00040430  2**0
                  CONTENTS
  4 .ARM          00000008  080235f0  080235f0  000335f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080235f8  080235f8  00040430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080235f8  080235f8  000335f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023600  08023600  00033600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000430  20000000  08023604  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040430  2**0
                  CONTENTS
 10 .bss          00008ba4  20000430  20000430  00040430  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  20008fd4  20008fd4  00040430  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040430  2**0
                  CONTENTS, READONLY
 13 .debug_info   00070c02  00000000  00000000  00040460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000ab17  00000000  00000000  000b1062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003f08  00000000  00000000  000bbb80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038243  00000000  00000000  000bfa88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00048c65  00000000  00000000  000f7ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001167aa  00000000  00000000  00140930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002570da  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00003c00  00000000  00000000  00257130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00012b3c  00000000  00000000  0025ad30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000430 	.word	0x20000430
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08021188 	.word	0x08021188

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000434 	.word	0x20000434
 80001ec:	08021188 	.word	0x08021188

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9ef 	b.w	80010c8 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a4 	b.w	80010c8 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	468c      	mov	ip, r1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8083 	bne.w	8000f1a <__udivmoddi4+0x116>
 8000e14:	428a      	cmp	r2, r1
 8000e16:	4617      	mov	r7, r2
 8000e18:	d947      	bls.n	8000eaa <__udivmoddi4+0xa6>
 8000e1a:	fab2 f282 	clz	r2, r2
 8000e1e:	b142      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e20:	f1c2 0020 	rsb	r0, r2, #32
 8000e24:	fa24 f000 	lsr.w	r0, r4, r0
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4097      	lsls	r7, r2
 8000e2c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e30:	4094      	lsls	r4, r2
 8000e32:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e36:	0c23      	lsrs	r3, r4, #16
 8000e38:	fbbc f6f8 	udiv	r6, ip, r8
 8000e3c:	fa1f fe87 	uxth.w	lr, r7
 8000e40:	fb08 c116 	mls	r1, r8, r6, ip
 8000e44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e48:	fb06 f10e 	mul.w	r1, r6, lr
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x60>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e56:	f080 8119 	bcs.w	800108c <__udivmoddi4+0x288>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 8116 	bls.w	800108c <__udivmoddi4+0x288>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e78:	45a6      	cmp	lr, r4
 8000e7a:	d909      	bls.n	8000e90 <__udivmoddi4+0x8c>
 8000e7c:	193c      	adds	r4, r7, r4
 8000e7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e82:	f080 8105 	bcs.w	8001090 <__udivmoddi4+0x28c>
 8000e86:	45a6      	cmp	lr, r4
 8000e88:	f240 8102 	bls.w	8001090 <__udivmoddi4+0x28c>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	443c      	add	r4, r7
 8000e90:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e94:	eba4 040e 	sub.w	r4, r4, lr
 8000e98:	2600      	movs	r6, #0
 8000e9a:	b11d      	cbz	r5, 8000ea4 <__udivmoddi4+0xa0>
 8000e9c:	40d4      	lsrs	r4, r2
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	b902      	cbnz	r2, 8000eae <__udivmoddi4+0xaa>
 8000eac:	deff      	udf	#255	; 0xff
 8000eae:	fab2 f282 	clz	r2, r2
 8000eb2:	2a00      	cmp	r2, #0
 8000eb4:	d150      	bne.n	8000f58 <__udivmoddi4+0x154>
 8000eb6:	1bcb      	subs	r3, r1, r7
 8000eb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ebc:	fa1f f887 	uxth.w	r8, r7
 8000ec0:	2601      	movs	r6, #1
 8000ec2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ec6:	0c21      	lsrs	r1, r4, #16
 8000ec8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0xe4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0xe2>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	f200 80e9 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000ee6:	4684      	mov	ip, r0
 8000ee8:	1ac9      	subs	r1, r1, r3
 8000eea:	b2a3      	uxth	r3, r4
 8000eec:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ef8:	fb08 f800 	mul.w	r8, r8, r0
 8000efc:	45a0      	cmp	r8, r4
 8000efe:	d907      	bls.n	8000f10 <__udivmoddi4+0x10c>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f06:	d202      	bcs.n	8000f0e <__udivmoddi4+0x10a>
 8000f08:	45a0      	cmp	r8, r4
 8000f0a:	f200 80d9 	bhi.w	80010c0 <__udivmoddi4+0x2bc>
 8000f0e:	4618      	mov	r0, r3
 8000f10:	eba4 0408 	sub.w	r4, r4, r8
 8000f14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f18:	e7bf      	b.n	8000e9a <__udivmoddi4+0x96>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d909      	bls.n	8000f32 <__udivmoddi4+0x12e>
 8000f1e:	2d00      	cmp	r5, #0
 8000f20:	f000 80b1 	beq.w	8001086 <__udivmoddi4+0x282>
 8000f24:	2600      	movs	r6, #0
 8000f26:	e9c5 0100 	strd	r0, r1, [r5]
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	4631      	mov	r1, r6
 8000f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f32:	fab3 f683 	clz	r6, r3
 8000f36:	2e00      	cmp	r6, #0
 8000f38:	d14a      	bne.n	8000fd0 <__udivmoddi4+0x1cc>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d302      	bcc.n	8000f44 <__udivmoddi4+0x140>
 8000f3e:	4282      	cmp	r2, r0
 8000f40:	f200 80b8 	bhi.w	80010b4 <__udivmoddi4+0x2b0>
 8000f44:	1a84      	subs	r4, r0, r2
 8000f46:	eb61 0103 	sbc.w	r1, r1, r3
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	468c      	mov	ip, r1
 8000f4e:	2d00      	cmp	r5, #0
 8000f50:	d0a8      	beq.n	8000ea4 <__udivmoddi4+0xa0>
 8000f52:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f56:	e7a5      	b.n	8000ea4 <__udivmoddi4+0xa0>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f60:	4097      	lsls	r7, r2
 8000f62:	fa01 f002 	lsl.w	r0, r1, r2
 8000f66:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6a:	40d9      	lsrs	r1, r3
 8000f6c:	4330      	orrs	r0, r6
 8000f6e:	0c03      	lsrs	r3, r0, #16
 8000f70:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f74:	fa1f f887 	uxth.w	r8, r7
 8000f78:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f80:	fb06 f108 	mul.w	r1, r6, r8
 8000f84:	4299      	cmp	r1, r3
 8000f86:	fa04 f402 	lsl.w	r4, r4, r2
 8000f8a:	d909      	bls.n	8000fa0 <__udivmoddi4+0x19c>
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f92:	f080 808d 	bcs.w	80010b0 <__udivmoddi4+0x2ac>
 8000f96:	4299      	cmp	r1, r3
 8000f98:	f240 808a 	bls.w	80010b0 <__udivmoddi4+0x2ac>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	443b      	add	r3, r7
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b281      	uxth	r1, r0
 8000fa4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fa8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb0:	fb00 f308 	mul.w	r3, r0, r8
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	d907      	bls.n	8000fc8 <__udivmoddi4+0x1c4>
 8000fb8:	1879      	adds	r1, r7, r1
 8000fba:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fbe:	d273      	bcs.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc0:	428b      	cmp	r3, r1
 8000fc2:	d971      	bls.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	4439      	add	r1, r7
 8000fc8:	1acb      	subs	r3, r1, r3
 8000fca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fce:	e778      	b.n	8000ec2 <__udivmoddi4+0xbe>
 8000fd0:	f1c6 0c20 	rsb	ip, r6, #32
 8000fd4:	fa03 f406 	lsl.w	r4, r3, r6
 8000fd8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fdc:	431c      	orrs	r4, r3
 8000fde:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fe2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fe6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fea:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fee:	431f      	orrs	r7, r3
 8000ff0:	0c3b      	lsrs	r3, r7, #16
 8000ff2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff6:	fa1f f884 	uxth.w	r8, r4
 8000ffa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001002:	fb09 fa08 	mul.w	sl, r9, r8
 8001006:	458a      	cmp	sl, r1
 8001008:	fa02 f206 	lsl.w	r2, r2, r6
 800100c:	fa00 f306 	lsl.w	r3, r0, r6
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x220>
 8001012:	1861      	adds	r1, r4, r1
 8001014:	f109 30ff 	add.w	r0, r9, #4294967295
 8001018:	d248      	bcs.n	80010ac <__udivmoddi4+0x2a8>
 800101a:	458a      	cmp	sl, r1
 800101c:	d946      	bls.n	80010ac <__udivmoddi4+0x2a8>
 800101e:	f1a9 0902 	sub.w	r9, r9, #2
 8001022:	4421      	add	r1, r4
 8001024:	eba1 010a 	sub.w	r1, r1, sl
 8001028:	b2bf      	uxth	r7, r7
 800102a:	fbb1 f0fe 	udiv	r0, r1, lr
 800102e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001032:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001036:	fb00 f808 	mul.w	r8, r0, r8
 800103a:	45b8      	cmp	r8, r7
 800103c:	d907      	bls.n	800104e <__udivmoddi4+0x24a>
 800103e:	19e7      	adds	r7, r4, r7
 8001040:	f100 31ff 	add.w	r1, r0, #4294967295
 8001044:	d22e      	bcs.n	80010a4 <__udivmoddi4+0x2a0>
 8001046:	45b8      	cmp	r8, r7
 8001048:	d92c      	bls.n	80010a4 <__udivmoddi4+0x2a0>
 800104a:	3802      	subs	r0, #2
 800104c:	4427      	add	r7, r4
 800104e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001052:	eba7 0708 	sub.w	r7, r7, r8
 8001056:	fba0 8902 	umull	r8, r9, r0, r2
 800105a:	454f      	cmp	r7, r9
 800105c:	46c6      	mov	lr, r8
 800105e:	4649      	mov	r1, r9
 8001060:	d31a      	bcc.n	8001098 <__udivmoddi4+0x294>
 8001062:	d017      	beq.n	8001094 <__udivmoddi4+0x290>
 8001064:	b15d      	cbz	r5, 800107e <__udivmoddi4+0x27a>
 8001066:	ebb3 020e 	subs.w	r2, r3, lr
 800106a:	eb67 0701 	sbc.w	r7, r7, r1
 800106e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001072:	40f2      	lsrs	r2, r6
 8001074:	ea4c 0202 	orr.w	r2, ip, r2
 8001078:	40f7      	lsrs	r7, r6
 800107a:	e9c5 2700 	strd	r2, r7, [r5]
 800107e:	2600      	movs	r6, #0
 8001080:	4631      	mov	r1, r6
 8001082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e70b      	b.n	8000ea4 <__udivmoddi4+0xa0>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e9      	b.n	8000e64 <__udivmoddi4+0x60>
 8001090:	4618      	mov	r0, r3
 8001092:	e6fd      	b.n	8000e90 <__udivmoddi4+0x8c>
 8001094:	4543      	cmp	r3, r8
 8001096:	d2e5      	bcs.n	8001064 <__udivmoddi4+0x260>
 8001098:	ebb8 0e02 	subs.w	lr, r8, r2
 800109c:	eb69 0104 	sbc.w	r1, r9, r4
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7df      	b.n	8001064 <__udivmoddi4+0x260>
 80010a4:	4608      	mov	r0, r1
 80010a6:	e7d2      	b.n	800104e <__udivmoddi4+0x24a>
 80010a8:	4660      	mov	r0, ip
 80010aa:	e78d      	b.n	8000fc8 <__udivmoddi4+0x1c4>
 80010ac:	4681      	mov	r9, r0
 80010ae:	e7b9      	b.n	8001024 <__udivmoddi4+0x220>
 80010b0:	4666      	mov	r6, ip
 80010b2:	e775      	b.n	8000fa0 <__udivmoddi4+0x19c>
 80010b4:	4630      	mov	r0, r6
 80010b6:	e74a      	b.n	8000f4e <__udivmoddi4+0x14a>
 80010b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80010bc:	4439      	add	r1, r7
 80010be:	e713      	b.n	8000ee8 <__udivmoddi4+0xe4>
 80010c0:	3802      	subs	r0, #2
 80010c2:	443c      	add	r4, r7
 80010c4:	e724      	b.n	8000f10 <__udivmoddi4+0x10c>
 80010c6:	bf00      	nop

080010c8 <__aeabi_idiv0>:
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <lsm_write>:
/*
 * LSM6DSR
 */

static int32_t lsm_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af04      	add	r7, sp, #16
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	461a      	mov	r2, r3
 80010d8:	460b      	mov	r3, r1
 80010da:	72fb      	strb	r3, [r7, #11]
 80010dc:	4613      	mov	r3, r2
 80010de:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 80010e0:	7afb      	ldrb	r3, [r7, #11]
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e8:	9302      	str	r3, [sp, #8]
 80010ea:	893b      	ldrh	r3, [r7, #8]
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2301      	movs	r3, #1
 80010f4:	21d5      	movs	r1, #213	; 0xd5
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f008 fcfc 	bl	8009af4 <HAL_I2C_Mem_Write>
  return 0;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <lsm_read>:

static int32_t lsm_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b088      	sub	sp, #32
 800110a:	af04      	add	r7, sp, #16
 800110c:	60f8      	str	r0, [r7, #12]
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	461a      	mov	r2, r3
 8001112:	460b      	mov	r3, r1
 8001114:	72fb      	strb	r3, [r7, #11]
 8001116:	4613      	mov	r3, r2
 8001118:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSR_I2C_ADD_L, reg,
 800111a:	7afb      	ldrb	r3, [r7, #11]
 800111c:	b29a      	uxth	r2, r3
 800111e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001122:	9302      	str	r3, [sp, #8]
 8001124:	893b      	ldrh	r3, [r7, #8]
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2301      	movs	r3, #1
 800112e:	21d5      	movs	r1, #213	; 0xd5
 8001130:	68f8      	ldr	r0, [r7, #12]
 8001132:	f008 fdd9 	bl	8009ce8 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <MRT_LSM6DSR_Setup>:




stmdev_ctx_t  MRT_LSM6DSR_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 8001140:	b590      	push	{r4, r7, lr}
 8001142:	b08b      	sub	sp, #44	; 0x2c
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
	  Guart = uart;
 800114c:	4a53      	ldr	r2, [pc, #332]	; (800129c <MRT_LSM6DSR_Setup+0x15c>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LSM6DSR Setup Starts\n\r", 22, HAL_MAX_DELAY);
 8001152:	4b52      	ldr	r3, [pc, #328]	; (800129c <MRT_LSM6DSR_Setup+0x15c>)
 8001154:	6818      	ldr	r0, [r3, #0]
 8001156:	f04f 33ff 	mov.w	r3, #4294967295
 800115a:	2216      	movs	r2, #22
 800115c:	4950      	ldr	r1, [pc, #320]	; (80012a0 <MRT_LSM6DSR_Setup+0x160>)
 800115e:	f00d fe1e 	bl	800ed9e <HAL_UART_Transmit>


	  stmdev_ctx_t lsm_ctx;

	  /* Initialize mems driver interface */
	  lsm_ctx.write_reg = lsm_write;
 8001162:	4b50      	ldr	r3, [pc, #320]	; (80012a4 <MRT_LSM6DSR_Setup+0x164>)
 8001164:	61fb      	str	r3, [r7, #28]
	  lsm_ctx.read_reg = lsm_read;
 8001166:	4b50      	ldr	r3, [pc, #320]	; (80012a8 <MRT_LSM6DSR_Setup+0x168>)
 8001168:	623b      	str	r3, [r7, #32]
	  lsm_ctx.handle = SENSOR_BUS;
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 800116e:	2064      	movs	r0, #100	; 0x64
 8001170:	f007 fc3e 	bl	80089f0 <HAL_Delay>
	  /* Check device ID */
	  lsm6dsr_device_id_get(&lsm_ctx, &lsm_whoamI);
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	494c      	ldr	r1, [pc, #304]	; (80012ac <MRT_LSM6DSR_Setup+0x16c>)
 800117a:	4618      	mov	r0, r3
 800117c:	f006 fe76 	bl	8007e6c <lsm6dsr_device_id_get>

	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 21, HAL_MAX_DELAY);
 8001180:	4b46      	ldr	r3, [pc, #280]	; (800129c <MRT_LSM6DSR_Setup+0x15c>)
 8001182:	6818      	ldr	r0, [r3, #0]
 8001184:	f04f 33ff 	mov.w	r3, #4294967295
 8001188:	2215      	movs	r2, #21
 800118a:	4949      	ldr	r1, [pc, #292]	; (80012b0 <MRT_LSM6DSR_Setup+0x170>)
 800118c:	f00d fe07 	bl	800ed9e <HAL_UART_Transmit>


	  if (lsm_whoamI != LSM6DSR_ID){
 8001190:	4b46      	ldr	r3, [pc, #280]	; (80012ac <MRT_LSM6DSR_Setup+0x16c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b6a      	cmp	r3, #106	; 0x6a
 8001196:	d032      	beq.n	80011fe <MRT_LSM6DSR_Setup+0xbe>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 8001198:	4b40      	ldr	r3, [pc, #256]	; (800129c <MRT_LSM6DSR_Setup+0x15c>)
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	f04f 33ff 	mov.w	r3, #4294967295
 80011a0:	2208      	movs	r2, #8
 80011a2:	4944      	ldr	r1, [pc, #272]	; (80012b4 <MRT_LSM6DSR_Setup+0x174>)
 80011a4:	f00d fdfb 	bl	800ed9e <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80011a8:	4b3c      	ldr	r3, [pc, #240]	; (800129c <MRT_LSM6DSR_Setup+0x15c>)
 80011aa:	6818      	ldr	r0, [r3, #0]
 80011ac:	f04f 33ff 	mov.w	r3, #4294967295
 80011b0:	2210      	movs	r2, #16
 80011b2:	4941      	ldr	r1, [pc, #260]	; (80012b8 <MRT_LSM6DSR_Setup+0x178>)
 80011b4:	f00d fdf3 	bl	800ed9e <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lsm_whoamI);
 80011b8:	4b3c      	ldr	r3, [pc, #240]	; (80012ac <MRT_LSM6DSR_Setup+0x16c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	f107 0310 	add.w	r3, r7, #16
 80011c2:	493e      	ldr	r1, [pc, #248]	; (80012bc <MRT_LSM6DSR_Setup+0x17c>)
 80011c4:	4618      	mov	r0, r3
 80011c6:	f01b fc93 	bl	801caf0 <siprintf>

			__BKPT();
 80011ca:	be00      	bkpt	0x0000

		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 80011cc:	4b33      	ldr	r3, [pc, #204]	; (800129c <MRT_LSM6DSR_Setup+0x15c>)
 80011ce:	681c      	ldr	r4, [r3, #0]
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff f815 	bl	8000204 <strlen>
 80011da:	4603      	mov	r3, r0
 80011dc:	b29a      	uxth	r2, r3
 80011de:	f107 0110 	add.w	r1, r7, #16
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
 80011e6:	4620      	mov	r0, r4
 80011e8:	f00d fdd9 	bl	800ed9e <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 80011ec:	4b2b      	ldr	r3, [pc, #172]	; (800129c <MRT_LSM6DSR_Setup+0x15c>)
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	f04f 33ff 	mov.w	r3, #4294967295
 80011f4:	2216      	movs	r2, #22
 80011f6:	4932      	ldr	r1, [pc, #200]	; (80012c0 <MRT_LSM6DSR_Setup+0x180>)
 80011f8:	f00d fdd1 	bl	800ed9e <HAL_UART_Transmit>
		  while(1);
 80011fc:	e7fe      	b.n	80011fc <MRT_LSM6DSR_Setup+0xbc>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 6, HAL_MAX_DELAY);
 80011fe:	4b27      	ldr	r3, [pc, #156]	; (800129c <MRT_LSM6DSR_Setup+0x15c>)
 8001200:	6818      	ldr	r0, [r3, #0]
 8001202:	f04f 33ff 	mov.w	r3, #4294967295
 8001206:	2206      	movs	r2, #6
 8001208:	492e      	ldr	r1, [pc, #184]	; (80012c4 <MRT_LSM6DSR_Setup+0x184>)
 800120a:	f00d fdc8 	bl	800ed9e <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lsm6dsr_reset_set(&lsm_ctx, PROPERTY_ENABLE);
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	2101      	movs	r1, #1
 8001214:	4618      	mov	r0, r3
 8001216:	f006 fe3a 	bl	8007e8e <lsm6dsr_reset_set>


	  HAL_Delay(1000);
 800121a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800121e:	f007 fbe7 	bl	80089f0 <HAL_Delay>

	  do {
	    lsm6dsr_reset_get(&lsm_ctx, &lsm_rst);
 8001222:	f107 031c 	add.w	r3, r7, #28
 8001226:	4928      	ldr	r1, [pc, #160]	; (80012c8 <MRT_LSM6DSR_Setup+0x188>)
 8001228:	4618      	mov	r0, r3
 800122a:	f006 fe56 	bl	8007eda <lsm6dsr_reset_get>
	  } while (lsm_rst);
 800122e:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <MRT_LSM6DSR_Setup+0x188>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f5      	bne.n	8001222 <MRT_LSM6DSR_Setup+0xe2>

	  /* Disable I3C interface */
	  //TODO JASPER lsm6dsr_i3c_disable_set(&lsm_ctx, LSM6DSR_I3C_DISABLE);

	  /* Enable Block Data Update */
	  lsm6dsr_block_data_update_set(&lsm_ctx, PROPERTY_ENABLE);
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	2101      	movs	r1, #1
 800123c:	4618      	mov	r0, r3
 800123e:	f006 fcc5 	bl	8007bcc <lsm6dsr_block_data_update_set>
	  /* Set Output Data Rate */
	  lsm6dsr_xl_data_rate_set(&lsm_ctx, LSM6DSR_XL_ODR_12Hz5);
 8001242:	f107 031c 	add.w	r3, r7, #28
 8001246:	2101      	movs	r1, #1
 8001248:	4618      	mov	r0, r3
 800124a:	f006 faa1 	bl	8007790 <lsm6dsr_xl_data_rate_set>
	  lsm6dsr_gy_data_rate_set(&lsm_ctx, LSM6DSR_GY_ODR_12Hz5);
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	2101      	movs	r1, #1
 8001254:	4618      	mov	r0, r3
 8001256:	f006 fbbd 	bl	80079d4 <lsm6dsr_gy_data_rate_set>
	  /* Set full scale */
	  lsm6dsr_xl_full_scale_set(&lsm_ctx, LSM6DSR_2g);
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f006 fa6f 	bl	8007744 <lsm6dsr_xl_full_scale_set>
	  lsm6dsr_gy_full_scale_set(&lsm_ctx, LSM6DSR_2000dps);
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	210c      	movs	r1, #12
 800126c:	4618      	mov	r0, r3
 800126e:	f006 fb8b 	bl	8007988 <lsm6dsr_gy_full_scale_set>
	  /* Configure filtering chain(No aux interface)
	   * Accelerometer - LPF1 + LPF2 path
	   */
	  //TODO JASPER lsm6dsr_xl_hp_path_on_out_set(&lsm_ctx, LSM6DSR_LP_ODR_DIV_100);
	  //TODO JASPER lsm6dsr_xl_filter_lp2_set(&lsm_ctx, PROPERTY_ENABLE);
	  HAL_UART_Transmit(Guart,"LLSM6DSR Setup Ends\n\r", 25, HAL_MAX_DELAY);
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <MRT_LSM6DSR_Setup+0x15c>)
 8001274:	6818      	ldr	r0, [r3, #0]
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	2219      	movs	r2, #25
 800127c:	4913      	ldr	r1, [pc, #76]	; (80012cc <MRT_LSM6DSR_Setup+0x18c>)
 800127e:	f00d fd8e 	bl	800ed9e <HAL_UART_Transmit>

	  return lsm_ctx;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	461c      	mov	r4, r3
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800128e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	372c      	adds	r7, #44	; 0x2c
 8001296:	46bd      	mov	sp, r7
 8001298:	bd90      	pop	{r4, r7, pc}
 800129a:	bf00      	nop
 800129c:	20005f1c 	.word	0x20005f1c
 80012a0:	080211a0 	.word	0x080211a0
 80012a4:	080010cd 	.word	0x080010cd
 80012a8:	08001107 	.word	0x08001107
 80012ac:	2000045c 	.word	0x2000045c
 80012b0:	080211b8 	.word	0x080211b8
 80012b4:	080211d0 	.word	0x080211d0
 80012b8:	080211dc 	.word	0x080211dc
 80012bc:	080211f0 	.word	0x080211f0
 80012c0:	080211f8 	.word	0x080211f8
 80012c4:	08021210 	.word	0x08021210
 80012c8:	2000045d 	.word	0x2000045d
 80012cc:	08021218 	.word	0x08021218

080012d0 <MRT_LSM6DSR_getAcceleration>:


/*
 * Get acceleration values
 */
void MRT_LSM6DSR_getAcceleration(stmdev_ctx_t lsm_ctx,float acceleration_mg[3]){
 80012d0:	b590      	push	{r4, r7, lr}
 80012d2:	b087      	sub	sp, #28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	1d3c      	adds	r4, r7, #4
 80012d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012dc:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_xl_flag_data_ready_get(&lsm_ctx, &reg);
 80012de:	f107 0217 	add.w	r2, r7, #23
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	4611      	mov	r1, r2
 80012e6:	4618      	mov	r0, r3
 80012e8:	f006 fc96 	bl	8007c18 <lsm6dsr_xl_flag_data_ready_get>

		//if (reg.status_reg.gda) {
	    if(reg){
 80012ec:	7dfb      	ldrb	r3, [r7, #23]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d02d      	beq.n	800134e <MRT_LSM6DSR_getAcceleration+0x7e>
		/* Read magnetic field data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 80012f2:	2206      	movs	r2, #6
 80012f4:	2100      	movs	r1, #0
 80012f6:	4818      	ldr	r0, [pc, #96]	; (8001358 <MRT_LSM6DSR_getAcceleration+0x88>)
 80012f8:	f01a f8fe 	bl	801b4f8 <memset>
        lsm6dsr_acceleration_raw_get(&lsm_ctx, data_raw_acceleration);
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	4916      	ldr	r1, [pc, #88]	; (8001358 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001300:	4618      	mov	r0, r3
 8001302:	f006 fd42 	bl	8007d8a <lsm6dsr_acceleration_raw_get>
        acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(
 8001306:	4b14      	ldr	r3, [pc, #80]	; (8001358 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001308:	f9b3 3000 	ldrsh.w	r3, [r3]
 800130c:	4618      	mov	r0, r3
 800130e:	f006 f9cd 	bl	80076ac <lsm6dsr_from_fs2g_to_mg>
 8001312:	eef0 7a40 	vmov.f32	s15, s0
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	edc3 7a00 	vstr	s15, [r3]
                               data_raw_acceleration[0]);
        acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MRT_LSM6DSR_getAcceleration+0x88>)
 800131e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	1d1c      	adds	r4, r3, #4
 8001326:	4610      	mov	r0, r2
 8001328:	f006 f9c0 	bl	80076ac <lsm6dsr_from_fs2g_to_mg>
 800132c:	eef0 7a40 	vmov.f32	s15, s0
 8001330:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[1]);
        acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001336:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	f103 0408 	add.w	r4, r3, #8
 8001340:	4610      	mov	r0, r2
 8001342:	f006 f9b3 	bl	80076ac <lsm6dsr_from_fs2g_to_mg>
 8001346:	eef0 7a40 	vmov.f32	s15, s0
 800134a:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[2]);
      }
}
 800134e:	bf00      	nop
 8001350:	371c      	adds	r7, #28
 8001352:	46bd      	mov	sp, r7
 8001354:	bd90      	pop	{r4, r7, pc}
 8001356:	bf00      	nop
 8001358:	2000044c 	.word	0x2000044c

0800135c <MRT_LSM6DSR_getTemperature>:


/*
 * Get temperature value
 */
void MRT_LSM6DSR_getTemperature(stmdev_ctx_t lsm_ctx,float* temperature_degC){
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b087      	sub	sp, #28
 8001360:	af00      	add	r7, sp, #0
 8001362:	1d3c      	adds	r4, r7, #4
 8001364:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001368:	603b      	str	r3, [r7, #0]
	//lsm6dsr_reg_t reg;
	//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    uint8_t reg;
    lsm6dsr_temp_flag_data_ready_get(&lsm_ctx, &reg);
 800136a:	f107 0217 	add.w	r2, r7, #23
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	4611      	mov	r1, r2
 8001372:	4618      	mov	r0, r3
 8001374:	f006 fc82 	bl	8007c7c <lsm6dsr_temp_flag_data_ready_get>

	//if (reg.status_reg.tda) {
    if(reg){
 8001378:	7dfb      	ldrb	r3, [r7, #23]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d012      	beq.n	80013a4 <MRT_LSM6DSR_getTemperature+0x48>
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <MRT_LSM6DSR_getTemperature+0x50>)
 8001380:	2200      	movs	r2, #0
 8001382:	801a      	strh	r2, [r3, #0]
		//Read temperature data
		memset(&lsm_data_raw_temperature, 0x00, sizeof(int16_t));
		lsm6dsr_temperature_raw_get(&lsm_ctx, &lsm_data_raw_temperature);
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	4909      	ldr	r1, [pc, #36]	; (80013ac <MRT_LSM6DSR_getTemperature+0x50>)
 8001388:	4618      	mov	r0, r3
 800138a:	f006 fc90 	bl	8007cae <lsm6dsr_temperature_raw_get>
		*temperature_degC = lsm6dsr_from_lsb_to_celsius(lsm_data_raw_temperature);
 800138e:	4b07      	ldr	r3, [pc, #28]	; (80013ac <MRT_LSM6DSR_getTemperature+0x50>)
 8001390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001394:	4618      	mov	r0, r3
 8001396:	f006 f9b9 	bl	800770c <lsm6dsr_from_lsb_to_celsius>
 800139a:	eef0 7a40 	vmov.f32	s15, s0
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	edc3 7a00 	vstr	s15, [r3]

	}
}
 80013a4:	bf00      	nop
 80013a6:	371c      	adds	r7, #28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd90      	pop	{r4, r7, pc}
 80013ac:	2000045a 	.word	0x2000045a

080013b0 <MRT_LSM6DSR_getAngularRate>:


/*
 * Get angular rate values
 */
void MRT_LSM6DSR_getAngularRate(stmdev_ctx_t lsm_ctx,float angular_rate_mdps[3]){
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b087      	sub	sp, #28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	1d3c      	adds	r4, r7, #4
 80013b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80013bc:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_gy_flag_data_ready_get(&lsm_ctx, &reg);
 80013be:	f107 0217 	add.w	r2, r7, #23
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	4611      	mov	r1, r2
 80013c6:	4618      	mov	r0, r3
 80013c8:	f006 fc3f 	bl	8007c4a <lsm6dsr_gy_flag_data_ready_get>

		//if (reg.status_reg.xlda) {
	    if(reg){
 80013cc:	7dfb      	ldrb	r3, [r7, #23]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d02d      	beq.n	800142e <MRT_LSM6DSR_getAngularRate+0x7e>
		/* Read magnetic field data */
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 80013d2:	2206      	movs	r2, #6
 80013d4:	2100      	movs	r1, #0
 80013d6:	4818      	ldr	r0, [pc, #96]	; (8001438 <MRT_LSM6DSR_getAngularRate+0x88>)
 80013d8:	f01a f88e 	bl	801b4f8 <memset>
		lsm6dsr_angular_rate_raw_get(&lsm_ctx, data_raw_angular_rate);
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	4916      	ldr	r1, [pc, #88]	; (8001438 <MRT_LSM6DSR_getAngularRate+0x88>)
 80013e0:	4618      	mov	r0, r3
 80013e2:	f006 fc87 	bl	8007cf4 <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 80013e6:	4b14      	ldr	r3, [pc, #80]	; (8001438 <MRT_LSM6DSR_getAngularRate+0x88>)
 80013e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f006 f975 	bl	80076dc <lsm6dsr_from_fs2000dps_to_mdps>
 80013f2:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[0] =
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	edc3 7a00 	vstr	s15, [r3]
		angular_rate_mdps[1] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 80013fc:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <MRT_LSM6DSR_getAngularRate+0x88>)
 80013fe:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
		angular_rate_mdps[1] =
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	1d1c      	adds	r4, r3, #4
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001406:	4610      	mov	r0, r2
 8001408:	f006 f968 	bl	80076dc <lsm6dsr_from_fs2000dps_to_mdps>
 800140c:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[1] =
 8001410:	edc4 7a00 	vstr	s15, [r4]
		angular_rate_mdps[2] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001416:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		angular_rate_mdps[2] =
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	f103 0408 	add.w	r4, r3, #8
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001420:	4610      	mov	r0, r2
 8001422:	f006 f95b 	bl	80076dc <lsm6dsr_from_fs2000dps_to_mdps>
 8001426:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[2] =
 800142a:	edc4 7a00 	vstr	s15, [r4]
		fs2000dps_to_mdps
		*/

		}

}
 800142e:	bf00      	nop
 8001430:	371c      	adds	r7, #28
 8001432:	46bd      	mov	sp, r7
 8001434:	bd90      	pop	{r4, r7, pc}
 8001436:	bf00      	nop
 8001438:	20000454 	.word	0x20000454

0800143c <MRT_LPS22HH_Setup>:
 * LPS22HH
 */


stmdev_ctx_t  MRT_LPS22HH_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 800143c:	b590      	push	{r4, r7, lr}
 800143e:	b08d      	sub	sp, #52	; 0x34
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]

	  Guart = uart;
 8001448:	4a4b      	ldr	r2, [pc, #300]	; (8001578 <MRT_LPS22HH_Setup+0x13c>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Starts\n\r", 22, HAL_MAX_DELAY);
 800144e:	4b4a      	ldr	r3, [pc, #296]	; (8001578 <MRT_LPS22HH_Setup+0x13c>)
 8001450:	6818      	ldr	r0, [r3, #0]
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
 8001456:	2216      	movs	r2, #22
 8001458:	4948      	ldr	r1, [pc, #288]	; (800157c <MRT_LPS22HH_Setup+0x140>)
 800145a:	f00d fca0 	bl	800ed9e <HAL_UART_Transmit>

	  stmdev_ctx_t lps_ctx;

	  lps22hh_reg_t reg;
	  /* Initialize mems driver interface */
	  lps_ctx.write_reg = lps_write;
 800145e:	4b48      	ldr	r3, [pc, #288]	; (8001580 <MRT_LPS22HH_Setup+0x144>)
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
	  lps_ctx.read_reg = lps_read;
 8001462:	4b48      	ldr	r3, [pc, #288]	; (8001584 <MRT_LPS22HH_Setup+0x148>)
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
	  lps_ctx.handle = SENSOR_BUS;
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	62fb      	str	r3, [r7, #44]	; 0x2c
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 800146a:	2064      	movs	r0, #100	; 0x64
 800146c:	f007 fac0 	bl	80089f0 <HAL_Delay>
	  /* Check device ID */
	  lps_whoamI = 0;
 8001470:	4b45      	ldr	r3, [pc, #276]	; (8001588 <MRT_LPS22HH_Setup+0x14c>)
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
	  lps22hh_device_id_get(&lps_ctx, &lps_whoamI);
 8001476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147a:	4943      	ldr	r1, [pc, #268]	; (8001588 <MRT_LPS22HH_Setup+0x14c>)
 800147c:	4618      	mov	r0, r3
 800147e:	f006 f894 	bl	80075aa <lps22hh_device_id_get>



  	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 22, HAL_MAX_DELAY);
 8001482:	4b3d      	ldr	r3, [pc, #244]	; (8001578 <MRT_LPS22HH_Setup+0x13c>)
 8001484:	6818      	ldr	r0, [r3, #0]
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	2216      	movs	r2, #22
 800148c:	493f      	ldr	r1, [pc, #252]	; (800158c <MRT_LPS22HH_Setup+0x150>)
 800148e:	f00d fc86 	bl	800ed9e <HAL_UART_Transmit>
	  if ( lps_whoamI != LPS22HH_ID ){
 8001492:	4b3d      	ldr	r3, [pc, #244]	; (8001588 <MRT_LPS22HH_Setup+0x14c>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2bb3      	cmp	r3, #179	; 0xb3
 8001498:	d031      	beq.n	80014fe <MRT_LPS22HH_Setup+0xc2>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 800149a:	4b37      	ldr	r3, [pc, #220]	; (8001578 <MRT_LPS22HH_Setup+0x13c>)
 800149c:	6818      	ldr	r0, [r3, #0]
 800149e:	f04f 33ff 	mov.w	r3, #4294967295
 80014a2:	2208      	movs	r2, #8
 80014a4:	493a      	ldr	r1, [pc, #232]	; (8001590 <MRT_LPS22HH_Setup+0x154>)
 80014a6:	f00d fc7a 	bl	800ed9e <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80014aa:	4b33      	ldr	r3, [pc, #204]	; (8001578 <MRT_LPS22HH_Setup+0x13c>)
 80014ac:	6818      	ldr	r0, [r3, #0]
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
 80014b2:	2210      	movs	r2, #16
 80014b4:	4937      	ldr	r1, [pc, #220]	; (8001594 <MRT_LPS22HH_Setup+0x158>)
 80014b6:	f00d fc72 	bl	800ed9e <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lps_whoamI);
 80014ba:	4b33      	ldr	r3, [pc, #204]	; (8001588 <MRT_LPS22HH_Setup+0x14c>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4934      	ldr	r1, [pc, #208]	; (8001598 <MRT_LPS22HH_Setup+0x15c>)
 80014c6:	4618      	mov	r0, r3
 80014c8:	f01b fb12 	bl	801caf0 <siprintf>
		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 80014cc:	4b2a      	ldr	r3, [pc, #168]	; (8001578 <MRT_LPS22HH_Setup+0x13c>)
 80014ce:	681c      	ldr	r4, [r3, #0]
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7fe fe95 	bl	8000204 <strlen>
 80014da:	4603      	mov	r3, r0
 80014dc:	b29a      	uxth	r2, r3
 80014de:	f107 0114 	add.w	r1, r7, #20
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295
 80014e6:	4620      	mov	r0, r4
 80014e8:	f00d fc59 	bl	800ed9e <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 80014ec:	4b22      	ldr	r3, [pc, #136]	; (8001578 <MRT_LPS22HH_Setup+0x13c>)
 80014ee:	6818      	ldr	r0, [r3, #0]
 80014f0:	f04f 33ff 	mov.w	r3, #4294967295
 80014f4:	2216      	movs	r2, #22
 80014f6:	4929      	ldr	r1, [pc, #164]	; (800159c <MRT_LPS22HH_Setup+0x160>)
 80014f8:	f00d fc51 	bl	800ed9e <HAL_UART_Transmit>
		  while(1);
 80014fc:	e7fe      	b.n	80014fc <MRT_LPS22HH_Setup+0xc0>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 4, HAL_MAX_DELAY);
 80014fe:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <MRT_LPS22HH_Setup+0x13c>)
 8001500:	6818      	ldr	r0, [r3, #0]
 8001502:	f04f 33ff 	mov.w	r3, #4294967295
 8001506:	2204      	movs	r2, #4
 8001508:	4925      	ldr	r1, [pc, #148]	; (80015a0 <MRT_LPS22HH_Setup+0x164>)
 800150a:	f00d fc48 	bl	800ed9e <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lps22hh_reset_set(&lps_ctx, PROPERTY_ENABLE);
 800150e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001512:	2101      	movs	r1, #1
 8001514:	4618      	mov	r0, r3
 8001516:	f006 f859 	bl	80075cc <lps22hh_reset_set>

	  HAL_Delay(1000);
 800151a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800151e:	f007 fa67 	bl	80089f0 <HAL_Delay>

	  do {
	    lps22hh_reset_get(&lps_ctx, &lps_rst);
 8001522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001526:	491f      	ldr	r1, [pc, #124]	; (80015a4 <MRT_LPS22HH_Setup+0x168>)
 8001528:	4618      	mov	r0, r3
 800152a:	f006 f875 	bl	8007618 <lps22hh_reset_get>
	  } while (lps_rst);
 800152e:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <MRT_LPS22HH_Setup+0x168>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f5      	bne.n	8001522 <MRT_LPS22HH_Setup+0xe6>


	  /* Enable Block Data Update */
	  lps22hh_block_data_update_set(&lps_ctx, PROPERTY_ENABLE);
 8001536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153a:	2101      	movs	r1, #1
 800153c:	4618      	mov	r0, r3
 800153e:	f005 ff5b 	bl	80073f8 <lps22hh_block_data_update_set>
	  /* Set Output Data Rate */
	  lps22hh_data_rate_set(&lps_ctx, LPS22HH_75_Hz_LOW_NOISE);
 8001542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001546:	2115      	movs	r1, #21
 8001548:	4618      	mov	r0, r3
 800154a:	f005 ff7b 	bl	8007444 <lps22hh_data_rate_set>
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Ends\n\r", 24, HAL_MAX_DELAY);
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <MRT_LPS22HH_Setup+0x13c>)
 8001550:	6818      	ldr	r0, [r3, #0]
 8001552:	f04f 33ff 	mov.w	r3, #4294967295
 8001556:	2218      	movs	r2, #24
 8001558:	4913      	ldr	r1, [pc, #76]	; (80015a8 <MRT_LPS22HH_Setup+0x16c>)
 800155a:	f00d fc20 	bl	800ed9e <HAL_UART_Transmit>

	  return lps_ctx;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	461c      	mov	r4, r3
 8001562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001566:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800156a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	}
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	3734      	adds	r7, #52	; 0x34
 8001572:	46bd      	mov	sp, r7
 8001574:	bd90      	pop	{r4, r7, pc}
 8001576:	bf00      	nop
 8001578:	20005f1c 	.word	0x20005f1c
 800157c:	08021230 	.word	0x08021230
 8001580:	08001659 	.word	0x08001659
 8001584:	08001693 	.word	0x08001693
 8001588:	20000466 	.word	0x20000466
 800158c:	080211b8 	.word	0x080211b8
 8001590:	080211d0 	.word	0x080211d0
 8001594:	080211dc 	.word	0x080211dc
 8001598:	080211f0 	.word	0x080211f0
 800159c:	080211f8 	.word	0x080211f8
 80015a0:	08021210 	.word	0x08021210
 80015a4:	20000467 	.word	0x20000467
 80015a8:	08021248 	.word	0x08021248

080015ac <MRT_LPS22HH_getPressure>:



void MRT_LPS22HH_getPressure(stmdev_ctx_t lps_ctx,float* pressure){
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b087      	sub	sp, #28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	1d3c      	adds	r4, r7, #4
 80015b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80015b8:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 80015ba:	f107 0214 	add.w	r2, r7, #20
 80015be:	1d38      	adds	r0, r7, #4
 80015c0:	2301      	movs	r3, #1
 80015c2:	2127      	movs	r1, #39	; 0x27
 80015c4:	f005 feb6 	bl	8007334 <lps22hh_read_reg>

	//uint8_t reg;
	//lps22hh_press_flag_data_ready_get(&lps_ctx, &reg);

	if (reg.status.p_da) {
 80015c8:	7d3b      	ldrb	r3, [r7, #20]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d011      	beq.n	80015f8 <MRT_LPS22HH_getPressure+0x4c>
 80015d4:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <MRT_LPS22HH_getPressure+0x54>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
	//if (reg) {
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t)); //TODO CAN CAUSE AN HARDFAULT
	  lps22hh_pressure_raw_get(&lps_ctx, &data_raw_pressure);
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	4908      	ldr	r1, [pc, #32]	; (8001600 <MRT_LPS22HH_getPressure+0x54>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f005 ff97 	bl	8007512 <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <MRT_LPS22HH_getPressure+0x54>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f005 fed3 	bl	8007394 <lps22hh_from_lsb_to_hpa>
 80015ee:	eef0 7a40 	vmov.f32	s15, s0
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80015f8:	bf00      	nop
 80015fa:	371c      	adds	r7, #28
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd90      	pop	{r4, r7, pc}
 8001600:	20000460 	.word	0x20000460

08001604 <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(stmdev_ctx_t lps_ctx,float* temperature_degC){
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b087      	sub	sp, #28
 8001608:	af00      	add	r7, sp, #0
 800160a:	1d3c      	adds	r4, r7, #4
 800160c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001610:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	//lps22hh_reg_t reg;
	//lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);

	uint8_t reg;
	lps22hh_temp_flag_data_ready_get(&lps_ctx, &reg);
 8001612:	f107 0217 	add.w	r2, r7, #23
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	4611      	mov	r1, r2
 800161a:	4618      	mov	r0, r3
 800161c:	f005 ff60 	bl	80074e0 <lps22hh_temp_flag_data_ready_get>

	//if (reg.status.t_da) {
	if (reg) {
 8001620:	7dfb      	ldrb	r3, [r7, #23]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d012      	beq.n	800164c <MRT_LPS22HH_getTemperature+0x48>
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <MRT_LPS22HH_getTemperature+0x50>)
 8001628:	2200      	movs	r2, #0
 800162a:	801a      	strh	r2, [r3, #0]
	  memset(&lps_data_raw_temperature, 0x00, sizeof(int16_t));
	  lps22hh_temperature_raw_get(&lps_ctx, &lps_data_raw_temperature);
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	4909      	ldr	r1, [pc, #36]	; (8001654 <MRT_LPS22HH_getTemperature+0x50>)
 8001630:	4618      	mov	r0, r3
 8001632:	f005 ff97 	bl	8007564 <lps22hh_temperature_raw_get>
	  *temperature_degC = lps22hh_from_lsb_to_celsius(lps_data_raw_temperature);
 8001636:	4b07      	ldr	r3, [pc, #28]	; (8001654 <MRT_LPS22HH_getTemperature+0x50>)
 8001638:	f9b3 3000 	ldrsh.w	r3, [r3]
 800163c:	4618      	mov	r0, r3
 800163e:	f005 fec1 	bl	80073c4 <lps22hh_from_lsb_to_celsius>
 8001642:	eef0 7a40 	vmov.f32	s15, s0
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800164c:	bf00      	nop
 800164e:	371c      	adds	r7, #28
 8001650:	46bd      	mov	sp, r7
 8001652:	bd90      	pop	{r4, r7, pc}
 8001654:	20000464 	.word	0x20000464

08001658 <lps_write>:




static int32_t lps_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af04      	add	r7, sp, #16
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	607a      	str	r2, [r7, #4]
 8001662:	461a      	mov	r2, r3
 8001664:	460b      	mov	r3, r1
 8001666:	72fb      	strb	r3, [r7, #11]
 8001668:	4613      	mov	r3, r2
 800166a:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 800166c:	7afb      	ldrb	r3, [r7, #11]
 800166e:	b29a      	uxth	r2, r3
 8001670:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001674:	9302      	str	r3, [sp, #8]
 8001676:	893b      	ldrh	r3, [r7, #8]
 8001678:	9301      	str	r3, [sp, #4]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	2301      	movs	r3, #1
 8001680:	21b9      	movs	r1, #185	; 0xb9
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f008 fa36 	bl	8009af4 <HAL_I2C_Mem_Write>
  return 0;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <lps_read>:

static int32_t lps_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b088      	sub	sp, #32
 8001696:	af04      	add	r7, sp, #16
 8001698:	60f8      	str	r0, [r7, #12]
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	461a      	mov	r2, r3
 800169e:	460b      	mov	r3, r1
 80016a0:	72fb      	strb	r3, [r7, #11]
 80016a2:	4613      	mov	r3, r2
 80016a4:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80016a6:	7afb      	ldrb	r3, [r7, #11]
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ae:	9302      	str	r3, [sp, #8]
 80016b0:	893b      	ldrh	r3, [r7, #8]
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2301      	movs	r3, #1
 80016ba:	21b9      	movs	r1, #185	; 0xb9
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f008 fb13 	bl	8009ce8 <HAL_I2C_Mem_Read>
  return 0;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016d0:	f3bf 8f4f 	dsb	sy
}
 80016d4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <__NVIC_SystemReset+0x24>)
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80016de:	4904      	ldr	r1, [pc, #16]	; (80016f0 <__NVIC_SystemReset+0x24>)
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <__NVIC_SystemReset+0x28>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80016e6:	f3bf 8f4f 	dsb	sy
}
 80016ea:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <__NVIC_SystemReset+0x20>
 80016f0:	e000ed00 	.word	0xe000ed00
 80016f4:	05fa0004 	.word	0x05fa0004

080016f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016fa:	b097      	sub	sp, #92	; 0x5c
 80016fc:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016fe:	f007 f935 	bl	800896c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001702:	f000 f985 	bl	8001a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001706:	f000 fd1f 	bl	8002148 <MX_GPIO_Init>
  MX_ADC1_Init();
 800170a:	f000 f9ed 	bl	8001ae8 <MX_ADC1_Init>
  MX_I2C1_Init();
 800170e:	f000 fa3d 	bl	8001b8c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001712:	f000 fa7b 	bl	8001c0c <MX_I2C2_Init>
  MX_I2C3_Init();
 8001716:	f000 fab9 	bl	8001c8c <MX_I2C3_Init>
  MX_SPI2_Init();
 800171a:	f000 fb9d 	bl	8001e58 <MX_SPI2_Init>
  MX_SPI4_Init();
 800171e:	f000 fbd1 	bl	8001ec4 <MX_SPI4_Init>
  MX_SPI5_Init();
 8001722:	f000 fc05 	bl	8001f30 <MX_SPI5_Init>
  MX_TIM2_Init();
 8001726:	f000 fc39 	bl	8001f9c <MX_TIM2_Init>
  MX_UART8_Init();
 800172a:	f000 fc8f 	bl	800204c <MX_UART8_Init>
  MX_USART3_UART_Init();
 800172e:	f000 fcb7 	bl	80020a0 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001732:	f000 fcdf 	bl	80020f4 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8001736:	f000 fb03 	bl	8001d40 <MX_RTC_Init>
  //MX_IWDG_Init(); TODO remove
  MX_FATFS_Init();
 800173a:	f00f fa15 	bl	8010b68 <MX_FATFS_Init>
  /*
   * Reinitialize all peripherals
   */

  // reset LEDs
  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	2102      	movs	r1, #2
 8001742:	488d      	ldr	r0, [pc, #564]	; (8001978 <main+0x280>)
 8001744:	f008 f860 	bl	8009808 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001748:	2200      	movs	r2, #0
 800174a:	2104      	movs	r1, #4
 800174c:	488a      	ldr	r0, [pc, #552]	; (8001978 <main+0x280>)
 800174e:	f008 f85b 	bl	8009808 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8001752:	2200      	movs	r2, #0
 8001754:	2108      	movs	r1, #8
 8001756:	4888      	ldr	r0, [pc, #544]	; (8001978 <main+0x280>)
 8001758:	f008 f856 	bl	8009808 <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 800175c:	2201      	movs	r2, #1
 800175e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001762:	4886      	ldr	r0, [pc, #536]	; (800197c <main+0x284>)
 8001764:	f008 f850 	bl	8009808 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 8001768:	2200      	movs	r2, #0
 800176a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800176e:	4883      	ldr	r0, [pc, #524]	; (800197c <main+0x284>)
 8001770:	f008 f84a 	bl	8009808 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 8001774:	2200      	movs	r2, #0
 8001776:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800177a:	4880      	ldr	r0, [pc, #512]	; (800197c <main+0x284>)
 800177c:	f008 f844 	bl	8009808 <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET); //PG1 ARMING_PROP
 8001780:	2201      	movs	r2, #1
 8001782:	2102      	movs	r1, #2
 8001784:	487d      	ldr	r0, [pc, #500]	; (800197c <main+0x284>)
 8001786:	f008 f83f 	bl	8009808 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 800178a:	2200      	movs	r2, #0
 800178c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001790:	487b      	ldr	r0, [pc, #492]	; (8001980 <main+0x288>)
 8001792:	f008 f839 	bl	8009808 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 8001796:	2200      	movs	r2, #0
 8001798:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800179c:	4878      	ldr	r0, [pc, #480]	; (8001980 <main+0x288>)
 800179e:	f008 f833 	bl	8009808 <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 80017a2:	2200      	movs	r2, #0
 80017a4:	2104      	movs	r1, #4
 80017a6:	4877      	ldr	r0, [pc, #476]	; (8001984 <main+0x28c>)
 80017a8:	f008 f82e 	bl	8009808 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


  // reset payload EN signal
  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 80017ac:	2200      	movs	r2, #0
 80017ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017b2:	4874      	ldr	r0, [pc, #464]	; (8001984 <main+0x28c>)
 80017b4:	f008 f828 	bl	8009808 <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high
  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

  // set power off for VR
  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 80017b8:	2200      	movs	r2, #0
 80017ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017be:	486f      	ldr	r0, [pc, #444]	; (800197c <main+0x284>)
 80017c0:	f008 f822 	bl	8009808 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 80017c4:	2200      	movs	r2, #0
 80017c6:	2180      	movs	r1, #128	; 0x80
 80017c8:	486f      	ldr	r0, [pc, #444]	; (8001988 <main+0x290>)
 80017ca:	f008 f81d 	bl	8009808 <HAL_GPIO_WritePin>

  // FLASH set CS, WP and IO3 pins high
  HAL_GPIO_WritePin(OUT_FLASH_CS_GPIO_Port, OUT_FLASH_CS_Pin, SET);
 80017ce:	2201      	movs	r2, #1
 80017d0:	2140      	movs	r1, #64	; 0x40
 80017d2:	486d      	ldr	r0, [pc, #436]	; (8001988 <main+0x290>)
 80017d4:	f008 f818 	bl	8009808 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_FLASH_WP_GPIO_Port, OUT_FLASH_WP_Pin, SET);
 80017d8:	2201      	movs	r2, #1
 80017da:	2120      	movs	r1, #32
 80017dc:	486a      	ldr	r0, [pc, #424]	; (8001988 <main+0x290>)
 80017de:	f008 f813 	bl	8009808 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_FLASH_IO3_GPIO_Port, OUT_FLASH_IO3_Pin, SET);
 80017e2:	2201      	movs	r2, #1
 80017e4:	2110      	movs	r1, #16
 80017e6:	4868      	ldr	r0, [pc, #416]	; (8001988 <main+0x290>)
 80017e8:	f008 f80e 	bl	8009808 <HAL_GPIO_WritePin>
   *-Activate freeRTOS
   *-Change SysTic to any other timer (done in .ioc)
   *-Include the path to all includes folders of the drivers (for C and C++ linkers)
   */

  HAL_UART_Transmit(&DEBUG_UART,"\r\n\r\nStarting FC\r\n\r\n",19,HAL_MAX_DELAY);
 80017ec:	f04f 33ff 	mov.w	r3, #4294967295
 80017f0:	2213      	movs	r2, #19
 80017f2:	4966      	ldr	r1, [pc, #408]	; (800198c <main+0x294>)
 80017f4:	4866      	ldr	r0, [pc, #408]	; (8001990 <main+0x298>)
 80017f6:	f00d fad2 	bl	800ed9e <HAL_UART_Transmit>

  /*
   * For external FLASH memory
   *-Put before RTOS setup because you need the external flash in its setup
   */
    MRT_SetupRTOS(&hrtc, DEBUG_UART, SLEEP_TIME); //Put here so we can pass the uart value to the setup
 80017fa:	4e65      	ldr	r6, [pc, #404]	; (8001990 <main+0x298>)
 80017fc:	23a0      	movs	r3, #160	; 0xa0
 80017fe:	930e      	str	r3, [sp, #56]	; 0x38
 8001800:	466d      	mov	r5, sp
 8001802:	f106 040c 	add.w	r4, r6, #12
 8001806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001808:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800180a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800180c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800180e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001810:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001812:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001816:	e885 0003 	stmia.w	r5, {r0, r1}
 800181a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800181e:	485d      	ldr	r0, [pc, #372]	; (8001994 <main+0x29c>)
 8001820:	f006 fc00 	bl	8008024 <MRT_SetupRTOS>
	MRT_externalFlashSetup(&DEBUG_UART);
 8001824:	485a      	ldr	r0, [pc, #360]	; (8001990 <main+0x298>)
 8001826:	f002 f957 	bl	8003ad8 <MRT_externalFlashSetup>
	   * Watch dog
	   * -Remove the MX_IWDG_Init() that is auto-generated and add it just before the osKernelStart
	   * -Need to be put after RTOS setup
	   */
	#if IWDG_ACTIVE
	MX_IWDG_Init();
 800182a:	f000 fa6f 	bl	8001d0c <MX_IWDG_Init>
	#endif

  //RTC
  MRT_setRTC(prev_hours,prev_min,prev_sec);
 800182e:	4b5a      	ldr	r3, [pc, #360]	; (8001998 <main+0x2a0>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	4a5a      	ldr	r2, [pc, #360]	; (800199c <main+0x2a4>)
 8001834:	7811      	ldrb	r1, [r2, #0]
 8001836:	4a5a      	ldr	r2, [pc, #360]	; (80019a0 <main+0x2a8>)
 8001838:	7812      	ldrb	r2, [r2, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f006 fd70 	bl	8008320 <MRT_setRTC>
  HAL_Delay(2000); //To make sure that when you set the Alarm it doesn't go off automatically
 8001840:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001844:	f007 f8d4 	bl	80089f0 <HAL_Delay>
  #if ALARM_A_ACTIVE
    if (wu_flag == 0){
 8001848:	4b56      	ldr	r3, [pc, #344]	; (80019a4 <main+0x2ac>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d105      	bne.n	800185c <main+0x164>
    	MRT_setAlarmA(PRE_WHEN_SLEEP_TIME_HOURS, PRE_WHEN_SLEEP_TIME_MIN, PRE_WHEN_SLEEP_TIME_SEC);
 8001850:	2200      	movs	r2, #0
 8001852:	211e      	movs	r1, #30
 8001854:	2004      	movs	r0, #4
 8001856:	f006 fd1b 	bl	8008290 <MRT_setAlarmA>
 800185a:	e004      	b.n	8001866 <main+0x16e>
    }
    else{
    	MRT_setAlarmA(POST_WHEN_SLEEP_TIME_HOURS, POST_WHEN_SLEEP_TIME_MIN, POST_WHEN_SLEEP_TIME_SEC);
 800185c:	2200      	movs	r2, #0
 800185e:	2100      	movs	r1, #0
 8001860:	200e      	movs	r0, #14
 8001862:	f006 fd15 	bl	8008290 <MRT_setAlarmA>

	  //**************************************************//
	  //MEMORY THREAD
#if MEMORY_THREAD
	  #if IWDG_ACTIVE
	    HAL_IWDG_Refresh(&hiwdg);
 8001866:	4850      	ldr	r0, [pc, #320]	; (80019a8 <main+0x2b0>)
 8001868:	f009 f8b2 	bl	800a9d0 <HAL_IWDG_Refresh>
	  #endif

		//SD card
		sd_init_dynamic_filename("FC", "", filename);
 800186c:	4a4f      	ldr	r2, [pc, #316]	; (80019ac <main+0x2b4>)
 800186e:	4950      	ldr	r1, [pc, #320]	; (80019b0 <main+0x2b8>)
 8001870:	4850      	ldr	r0, [pc, #320]	; (80019b4 <main+0x2bc>)
 8001872:	f006 fe55 	bl	8008520 <sd_init_dynamic_filename>
	 * -6 DOF IMU (LSM6DSR): 0x6A
	 * -LPS22HH: 0x5C
	 */

	  #if IWDG_ACTIVE
		HAL_IWDG_Refresh(&hiwdg);
 8001876:	484c      	ldr	r0, [pc, #304]	; (80019a8 <main+0x2b0>)
 8001878:	f009 f8aa 	bl	800a9d0 <HAL_IWDG_Refresh>
	  #endif
	  lsm_ctx = MRT_LSM6DSR_Setup(&LSM_I2C, &DEBUG_UART);
 800187c:	4c4e      	ldr	r4, [pc, #312]	; (80019b8 <main+0x2c0>)
 800187e:	463b      	mov	r3, r7
 8001880:	4a43      	ldr	r2, [pc, #268]	; (8001990 <main+0x298>)
 8001882:	494e      	ldr	r1, [pc, #312]	; (80019bc <main+0x2c4>)
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fc5b 	bl	8001140 <MRT_LSM6DSR_Setup>
 800188a:	463b      	mov	r3, r7
 800188c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001890:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	  #if IWDG_ACTIVE
	    HAL_IWDG_Refresh(&hiwdg);
 8001894:	4844      	ldr	r0, [pc, #272]	; (80019a8 <main+0x2b0>)
 8001896:	f009 f89b 	bl	800a9d0 <HAL_IWDG_Refresh>
	  #endif
	  lps_ctx = MRT_LPS22HH_Setup(&LPS_I2C, &DEBUG_UART);
 800189a:	4c49      	ldr	r4, [pc, #292]	; (80019c0 <main+0x2c8>)
 800189c:	463b      	mov	r3, r7
 800189e:	4a3c      	ldr	r2, [pc, #240]	; (8001990 <main+0x298>)
 80018a0:	4946      	ldr	r1, [pc, #280]	; (80019bc <main+0x2c4>)
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fdca 	bl	800143c <MRT_LPS22HH_Setup>
 80018a8:	463b      	mov	r3, r7
 80018aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80018ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	  GPS_init(&GPS_UART, &DEBUG_UART);
 80018b2:	4937      	ldr	r1, [pc, #220]	; (8001990 <main+0x298>)
 80018b4:	4843      	ldr	r0, [pc, #268]	; (80019c4 <main+0x2cc>)
 80018b6:	f002 f8db 	bl	8003a70 <GPS_init>

	  //**************************************************//
	  //TELEMETRY_THREAD
#if TELEMETRY_THREAD
	  #if IWDG_ACTIVE
		HAL_IWDG_Refresh(&hiwdg);
 80018ba:	483b      	ldr	r0, [pc, #236]	; (80019a8 <main+0x2b0>)
 80018bc:	f009 f888 	bl	800a9d0 <HAL_IWDG_Refresh>
   	  #endif

	  #if XTEND_
	   HAL_GPIO_WritePin(XTend_CTS_Pin, GPIO_PIN_10, GPIO_PIN_RESET); //TODO is it necessary?
 80018c0:	2200      	movs	r2, #0
 80018c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018c6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80018ca:	f007 ff9d 	bl	8009808 <HAL_GPIO_WritePin>
	  set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
	  Tx_setup();
	  #endif

	  #if IWDG_ACTIVE
		HAL_IWDG_Refresh(&hiwdg);
 80018ce:	4836      	ldr	r0, [pc, #216]	; (80019a8 <main+0x2b0>)
 80018d0:	f009 f87e 	bl	800a9d0 <HAL_IWDG_Refresh>
	  #endif

	  #if IRIDIUM_
	  HAL_GPIO_WritePin(Iridium_RST_GPIO_Port, Iridium_RST_Pin, SET);
 80018d4:	2201      	movs	r2, #1
 80018d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018da:	482a      	ldr	r0, [pc, #168]	; (8001984 <main+0x28c>)
 80018dc:	f007 ff94 	bl	8009808 <HAL_GPIO_WritePin>
	  uint8_t lol = MRT_Static_Iridium_Setup(DEBUG_UART, IRIDIUM_TIMEOUT, IRIDIUM_I2C); //TODO remove lol?
 80018e0:	4e2b      	ldr	r6, [pc, #172]	; (8001990 <main+0x298>)
 80018e2:	2302      	movs	r3, #2
 80018e4:	930e      	str	r3, [sp, #56]	; 0x38
 80018e6:	2305      	movs	r3, #5
 80018e8:	930d      	str	r3, [sp, #52]	; 0x34
 80018ea:	466d      	mov	r5, sp
 80018ec:	f106 0410 	add.w	r4, r6, #16
 80018f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018fc:	6823      	ldr	r3, [r4, #0]
 80018fe:	602b      	str	r3, [r5, #0]
 8001900:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001904:	f004 ff64 	bl	80067d0 <MRT_Static_Iridium_Setup>
 8001908:	4603      	mov	r3, r0
 800190a:	75fb      	strb	r3, [r7, #23]


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800190c:	f014 f9ca 	bl	8015ca4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 8001910:	4a2d      	ldr	r2, [pc, #180]	; (80019c8 <main+0x2d0>)
 8001912:	2100      	movs	r1, #0
 8001914:	482d      	ldr	r0, [pc, #180]	; (80019cc <main+0x2d4>)
 8001916:	f014 fa0f 	bl	8015d38 <osThreadNew>
 800191a:	4603      	mov	r3, r0
 800191c:	4a2c      	ldr	r2, [pc, #176]	; (80019d0 <main+0x2d8>)
 800191e:	6013      	str	r3, [r2, #0]

  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 8001920:	4a2c      	ldr	r2, [pc, #176]	; (80019d4 <main+0x2dc>)
 8001922:	2100      	movs	r1, #0
 8001924:	482c      	ldr	r0, [pc, #176]	; (80019d8 <main+0x2e0>)
 8001926:	f014 fa07 	bl	8015d38 <osThreadNew>
 800192a:	4603      	mov	r3, r0
 800192c:	4a2b      	ldr	r2, [pc, #172]	; (80019dc <main+0x2e4>)
 800192e:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 8001930:	4a2b      	ldr	r2, [pc, #172]	; (80019e0 <main+0x2e8>)
 8001932:	2100      	movs	r1, #0
 8001934:	482b      	ldr	r0, [pc, #172]	; (80019e4 <main+0x2ec>)
 8001936:	f014 f9ff 	bl	8015d38 <osThreadNew>
 800193a:	4603      	mov	r3, r0
 800193c:	4a2a      	ldr	r2, [pc, #168]	; (80019e8 <main+0x2f0>)
 800193e:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 8001940:	4a2a      	ldr	r2, [pc, #168]	; (80019ec <main+0x2f4>)
 8001942:	2100      	movs	r1, #0
 8001944:	482a      	ldr	r0, [pc, #168]	; (80019f0 <main+0x2f8>)
 8001946:	f014 f9f7 	bl	8015d38 <osThreadNew>
 800194a:	4603      	mov	r3, r0
 800194c:	4a29      	ldr	r2, [pc, #164]	; (80019f4 <main+0x2fc>)
 800194e:	6013      	str	r3, [r2, #0]

  /* creation of Printing */
  PrintingHandle = osThreadNew(StartPrinting, NULL, &Printing_attributes);
 8001950:	4a29      	ldr	r2, [pc, #164]	; (80019f8 <main+0x300>)
 8001952:	2100      	movs	r1, #0
 8001954:	4829      	ldr	r0, [pc, #164]	; (80019fc <main+0x304>)
 8001956:	f014 f9ef 	bl	8015d38 <osThreadNew>
 800195a:	4603      	mov	r3, r0
 800195c:	4a28      	ldr	r2, [pc, #160]	; (8001a00 <main+0x308>)
 800195e:	6013      	str	r3, [r2, #0]

  /* creation of WatchDog */
  WatchDogHandle = osThreadNew(StartWatchDog, NULL, &WatchDog_attributes);
 8001960:	4a28      	ldr	r2, [pc, #160]	; (8001a04 <main+0x30c>)
 8001962:	2100      	movs	r1, #0
 8001964:	4828      	ldr	r0, [pc, #160]	; (8001a08 <main+0x310>)
 8001966:	f014 f9e7 	bl	8015d38 <osThreadNew>
 800196a:	4603      	mov	r3, r0
 800196c:	4a27      	ldr	r2, [pc, #156]	; (8001a0c <main+0x314>)
 800196e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001970:	f014 f9bc 	bl	8015cec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001974:	e7fe      	b.n	8001974 <main+0x27c>
 8001976:	bf00      	nop
 8001978:	40020800 	.word	0x40020800
 800197c:	40021800 	.word	0x40021800
 8001980:	40021400 	.word	0x40021400
 8001984:	40021000 	.word	0x40021000
 8001988:	40020c00 	.word	0x40020c00
 800198c:	080212a4 	.word	0x080212a4
 8001990:	20005ed8 	.word	0x20005ed8
 8001994:	2000693c 	.word	0x2000693c
 8001998:	2000049c 	.word	0x2000049c
 800199c:	2000049d 	.word	0x2000049d
 80019a0:	2000049e 	.word	0x2000049e
 80019a4:	20000711 	.word	0x20000711
 80019a8:	20006308 	.word	0x20006308
 80019ac:	20006388 	.word	0x20006388
 80019b0:	080212b8 	.word	0x080212b8
 80019b4:	080212bc 	.word	0x080212bc
 80019b8:	20006a80 	.word	0x20006a80
 80019bc:	20005f20 	.word	0x20005f20
 80019c0:	20006a70 	.word	0x20006a70
 80019c4:	200069d8 	.word	0x200069d8
 80019c8:	08022dbc 	.word	0x08022dbc
 80019cc:	08002499 	.word	0x08002499
 80019d0:	20006380 	.word	0x20006380
 80019d4:	08022de0 	.word	0x08022de0
 80019d8:	0800255d 	.word	0x0800255d
 80019dc:	200069d0 	.word	0x200069d0
 80019e0:	08022e04 	.word	0x08022e04
 80019e4:	08002579 	.word	0x08002579
 80019e8:	200069d4 	.word	0x200069d4
 80019ec:	08022e28 	.word	0x08022e28
 80019f0:	0800290d 	.word	0x0800290d
 80019f4:	20006a6c 	.word	0x20006a6c
 80019f8:	08022e4c 	.word	0x08022e4c
 80019fc:	080029f5 	.word	0x080029f5
 8001a00:	20006960 	.word	0x20006960
 8001a04:	08022e70 	.word	0x08022e70
 8001a08:	08002a05 	.word	0x08002a05
 8001a0c:	2000636c 	.word	0x2000636c

08001a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b094      	sub	sp, #80	; 0x50
 8001a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a16:	f107 0320 	add.w	r3, r7, #32
 8001a1a:	2230      	movs	r2, #48	; 0x30
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f019 fd6a 	bl	801b4f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a24:	f107 030c 	add.w	r3, r7, #12
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a34:	2300      	movs	r3, #0
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <SystemClock_Config+0xd0>)
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	4a28      	ldr	r2, [pc, #160]	; (8001ae0 <SystemClock_Config+0xd0>)
 8001a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a42:	6413      	str	r3, [r2, #64]	; 0x40
 8001a44:	4b26      	ldr	r3, [pc, #152]	; (8001ae0 <SystemClock_Config+0xd0>)
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a50:	2300      	movs	r3, #0
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	4b23      	ldr	r3, [pc, #140]	; (8001ae4 <SystemClock_Config+0xd4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a5c:	4a21      	ldr	r2, [pc, #132]	; (8001ae4 <SystemClock_Config+0xd4>)
 8001a5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	4b1f      	ldr	r3, [pc, #124]	; (8001ae4 <SystemClock_Config+0xd4>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a6c:	607b      	str	r3, [r7, #4]
 8001a6e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001a70:	2309      	movs	r3, #9
 8001a72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a88:	2308      	movs	r3, #8
 8001a8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001a8c:	2348      	movs	r3, #72	; 0x48
 8001a8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a90:	2302      	movs	r3, #2
 8001a92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001a94:	2303      	movs	r3, #3
 8001a96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a98:	f107 0320 	add.w	r3, r7, #32
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f00a f969 	bl	800bd74 <HAL_RCC_OscConfig>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001aa8:	f001 f89e 	bl	8002be8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aac:	230f      	movs	r3, #15
 8001aae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001abc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ac2:	f107 030c 	add.w	r3, r7, #12
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f00a fbcb 	bl	800c264 <HAL_RCC_ClockConfig>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001ad4:	f001 f888 	bl	8002be8 <Error_Handler>
  }
}
 8001ad8:	bf00      	nop
 8001ada:	3750      	adds	r7, #80	; 0x50
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	40007000 	.word	0x40007000

08001ae8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001aee:	463b      	mov	r3, r7
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001afa:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <MX_ADC1_Init+0x98>)
 8001afc:	4a21      	ldr	r2, [pc, #132]	; (8001b84 <MX_ADC1_Init+0x9c>)
 8001afe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001b00:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <MX_ADC1_Init+0x98>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b06:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <MX_ADC1_Init+0x98>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001b0c:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <MX_ADC1_Init+0x98>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b12:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <MX_ADC1_Init+0x98>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b18:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <MX_ADC1_Init+0x98>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b20:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <MX_ADC1_Init+0x98>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b26:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <MX_ADC1_Init+0x98>)
 8001b28:	4a17      	ldr	r2, [pc, #92]	; (8001b88 <MX_ADC1_Init+0xa0>)
 8001b2a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b2c:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <MX_ADC1_Init+0x98>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b32:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <MX_ADC1_Init+0x98>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b38:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <MX_ADC1_Init+0x98>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <MX_ADC1_Init+0x98>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b46:	480e      	ldr	r0, [pc, #56]	; (8001b80 <MX_ADC1_Init+0x98>)
 8001b48:	f006 ff76 	bl	8008a38 <HAL_ADC_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001b52:	f001 f849 	bl	8002be8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001b56:	2306      	movs	r3, #6
 8001b58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b62:	463b      	mov	r3, r7
 8001b64:	4619      	mov	r1, r3
 8001b66:	4806      	ldr	r0, [pc, #24]	; (8001b80 <MX_ADC1_Init+0x98>)
 8001b68:	f007 f948 	bl	8008dfc <HAL_ADC_ConfigChannel>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001b72:	f001 f839 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20006784 	.word	0x20006784
 8001b84:	40012000 	.word	0x40012000
 8001b88:	0f000001 	.word	0x0f000001

08001b8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b90:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <MX_I2C1_Init+0x74>)
 8001b92:	4a1c      	ldr	r2, [pc, #112]	; (8001c04 <MX_I2C1_Init+0x78>)
 8001b94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b96:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <MX_I2C1_Init+0x74>)
 8001b98:	4a1b      	ldr	r2, [pc, #108]	; (8001c08 <MX_I2C1_Init+0x7c>)
 8001b9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b9c:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <MX_I2C1_Init+0x74>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ba2:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <MX_I2C1_Init+0x74>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ba8:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <MX_I2C1_Init+0x74>)
 8001baa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bb0:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <MX_I2C1_Init+0x74>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bb6:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <MX_I2C1_Init+0x74>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bbc:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <MX_I2C1_Init+0x74>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bc2:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <MX_I2C1_Init+0x74>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bc8:	480d      	ldr	r0, [pc, #52]	; (8001c00 <MX_I2C1_Init+0x74>)
 8001bca:	f007 fe4f 	bl	800986c <HAL_I2C_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bd4:	f001 f808 	bl	8002be8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4809      	ldr	r0, [pc, #36]	; (8001c00 <MX_I2C1_Init+0x74>)
 8001bdc:	f008 fe3b 	bl	800a856 <HAL_I2CEx_ConfigAnalogFilter>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001be6:	f000 ffff 	bl	8002be8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001bea:	2100      	movs	r1, #0
 8001bec:	4804      	ldr	r0, [pc, #16]	; (8001c00 <MX_I2C1_Init+0x74>)
 8001bee:	f008 fe6e 	bl	800a8ce <HAL_I2CEx_ConfigDigitalFilter>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001bf8:	f000 fff6 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	200062b4 	.word	0x200062b4
 8001c04:	40005400 	.word	0x40005400
 8001c08:	000186a0 	.word	0x000186a0

08001c0c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c10:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <MX_I2C2_Init+0x74>)
 8001c12:	4a1c      	ldr	r2, [pc, #112]	; (8001c84 <MX_I2C2_Init+0x78>)
 8001c14:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001c16:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <MX_I2C2_Init+0x74>)
 8001c18:	4a1b      	ldr	r2, [pc, #108]	; (8001c88 <MX_I2C2_Init+0x7c>)
 8001c1a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c1c:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <MX_I2C2_Init+0x74>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001c22:	4b17      	ldr	r3, [pc, #92]	; (8001c80 <MX_I2C2_Init+0x74>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c28:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <MX_I2C2_Init+0x74>)
 8001c2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c2e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c30:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <MX_I2C2_Init+0x74>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <MX_I2C2_Init+0x74>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c3c:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <MX_I2C2_Init+0x74>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c42:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <MX_I2C2_Init+0x74>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c48:	480d      	ldr	r0, [pc, #52]	; (8001c80 <MX_I2C2_Init+0x74>)
 8001c4a:	f007 fe0f 	bl	800986c <HAL_I2C_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c54:	f000 ffc8 	bl	8002be8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4809      	ldr	r0, [pc, #36]	; (8001c80 <MX_I2C2_Init+0x74>)
 8001c5c:	f008 fdfb 	bl	800a856 <HAL_I2CEx_ConfigAnalogFilter>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001c66:	f000 ffbf 	bl	8002be8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4804      	ldr	r0, [pc, #16]	; (8001c80 <MX_I2C2_Init+0x74>)
 8001c6e:	f008 fe2e 	bl	800a8ce <HAL_I2CEx_ConfigDigitalFilter>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001c78:	f000 ffb6 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20006314 	.word	0x20006314
 8001c84:	40005800 	.word	0x40005800
 8001c88:	000186a0 	.word	0x000186a0

08001c8c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001c90:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <MX_I2C3_Init+0x74>)
 8001c92:	4a1c      	ldr	r2, [pc, #112]	; (8001d04 <MX_I2C3_Init+0x78>)
 8001c94:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001c96:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <MX_I2C3_Init+0x74>)
 8001c98:	4a1b      	ldr	r2, [pc, #108]	; (8001d08 <MX_I2C3_Init+0x7c>)
 8001c9a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c9c:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <MX_I2C3_Init+0x74>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001ca2:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <MX_I2C3_Init+0x74>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ca8:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <MX_I2C3_Init+0x74>)
 8001caa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cae:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cb0:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <MX_I2C3_Init+0x74>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001cb6:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <MX_I2C3_Init+0x74>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cbc:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <MX_I2C3_Init+0x74>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <MX_I2C3_Init+0x74>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001cc8:	480d      	ldr	r0, [pc, #52]	; (8001d00 <MX_I2C3_Init+0x74>)
 8001cca:	f007 fdcf 	bl	800986c <HAL_I2C_Init>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001cd4:	f000 ff88 	bl	8002be8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cd8:	2100      	movs	r1, #0
 8001cda:	4809      	ldr	r0, [pc, #36]	; (8001d00 <MX_I2C3_Init+0x74>)
 8001cdc:	f008 fdbb 	bl	800a856 <HAL_I2CEx_ConfigAnalogFilter>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001ce6:	f000 ff7f 	bl	8002be8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001cea:	2100      	movs	r1, #0
 8001cec:	4804      	ldr	r0, [pc, #16]	; (8001d00 <MX_I2C3_Init+0x74>)
 8001cee:	f008 fdee 	bl	800a8ce <HAL_I2CEx_ConfigDigitalFilter>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001cf8:	f000 ff76 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20005f20 	.word	0x20005f20
 8001d04:	40005c00 	.word	0x40005c00
 8001d08:	000186a0 	.word	0x000186a0

08001d0c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <MX_IWDG_Init+0x2c>)
 8001d12:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <MX_IWDG_Init+0x30>)
 8001d14:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001d16:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <MX_IWDG_Init+0x2c>)
 8001d18:	2204      	movs	r2, #4
 8001d1a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2499;
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <MX_IWDG_Init+0x2c>)
 8001d1e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001d22:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001d24:	4804      	ldr	r0, [pc, #16]	; (8001d38 <MX_IWDG_Init+0x2c>)
 8001d26:	f008 fe11 	bl	800a94c <HAL_IWDG_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001d30:	f000 ff5a 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20006308 	.word	0x20006308
 8001d3c:	40003000 	.word	0x40003000

08001d40 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b090      	sub	sp, #64	; 0x40
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001d46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
 8001d54:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001d56:	2300      	movs	r3, #0
 8001d58:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001d5a:	463b      	mov	r3, r7
 8001d5c:	2228      	movs	r2, #40	; 0x28
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4618      	mov	r0, r3
 8001d62:	f019 fbc9 	bl	801b4f8 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d66:	4b3a      	ldr	r3, [pc, #232]	; (8001e50 <MX_RTC_Init+0x110>)
 8001d68:	4a3a      	ldr	r2, [pc, #232]	; (8001e54 <MX_RTC_Init+0x114>)
 8001d6a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001d6c:	4b38      	ldr	r3, [pc, #224]	; (8001e50 <MX_RTC_Init+0x110>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001d72:	4b37      	ldr	r3, [pc, #220]	; (8001e50 <MX_RTC_Init+0x110>)
 8001d74:	227f      	movs	r2, #127	; 0x7f
 8001d76:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001d78:	4b35      	ldr	r3, [pc, #212]	; (8001e50 <MX_RTC_Init+0x110>)
 8001d7a:	22ff      	movs	r2, #255	; 0xff
 8001d7c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d7e:	4b34      	ldr	r3, [pc, #208]	; (8001e50 <MX_RTC_Init+0x110>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d84:	4b32      	ldr	r3, [pc, #200]	; (8001e50 <MX_RTC_Init+0x110>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d8a:	4b31      	ldr	r3, [pc, #196]	; (8001e50 <MX_RTC_Init+0x110>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d90:	482f      	ldr	r0, [pc, #188]	; (8001e50 <MX_RTC_Init+0x110>)
 8001d92:	f00a fe51 	bl	800ca38 <HAL_RTC_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001d9c:	f000 ff24 	bl	8002be8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001db2:	2300      	movs	r3, #0
 8001db4:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001db6:	2300      	movs	r3, #0
 8001db8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001dba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4823      	ldr	r0, [pc, #140]	; (8001e50 <MX_RTC_Init+0x110>)
 8001dc4:	f00a fec9 	bl	800cb5a <HAL_RTC_SetTime>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001dce:	f000 ff0b 	bl	8002be8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001dde:	2301      	movs	r3, #1
 8001de0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001dea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dee:	2201      	movs	r2, #1
 8001df0:	4619      	mov	r1, r3
 8001df2:	4817      	ldr	r0, [pc, #92]	; (8001e50 <MX_RTC_Init+0x110>)
 8001df4:	f00a ffcc 	bl	800cd90 <HAL_RTC_SetDate>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001dfe:	f000 fef3 	bl	8002be8 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001e06:	2301      	movs	r3, #1
 8001e08:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e16:	2300      	movs	r3, #0
 8001e18:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001e26:	2301      	movs	r3, #1
 8001e28:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001e2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001e32:	463b      	mov	r3, r7
 8001e34:	2201      	movs	r2, #1
 8001e36:	4619      	mov	r1, r3
 8001e38:	4805      	ldr	r0, [pc, #20]	; (8001e50 <MX_RTC_Init+0x110>)
 8001e3a:	f00b f89f 	bl	800cf7c <HAL_RTC_SetAlarm_IT>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001e44:	f000 fed0 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e48:	bf00      	nop
 8001e4a:	3740      	adds	r7, #64	; 0x40
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	2000693c 	.word	0x2000693c
 8001e54:	40002800 	.word	0x40002800

08001e58 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001e5c:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <MX_SPI2_Init+0x64>)
 8001e5e:	4a18      	ldr	r2, [pc, #96]	; (8001ec0 <MX_SPI2_Init+0x68>)
 8001e60:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e62:	4b16      	ldr	r3, [pc, #88]	; (8001ebc <MX_SPI2_Init+0x64>)
 8001e64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e68:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e6a:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <MX_SPI2_Init+0x64>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e70:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <MX_SPI2_Init+0x64>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e76:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <MX_SPI2_Init+0x64>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <MX_SPI2_Init+0x64>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e82:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <MX_SPI2_Init+0x64>)
 8001e84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e88:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <MX_SPI2_Init+0x64>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e90:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <MX_SPI2_Init+0x64>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e96:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <MX_SPI2_Init+0x64>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e9c:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <MX_SPI2_Init+0x64>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001ea2:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <MX_SPI2_Init+0x64>)
 8001ea4:	220a      	movs	r2, #10
 8001ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ea8:	4804      	ldr	r0, [pc, #16]	; (8001ebc <MX_SPI2_Init+0x64>)
 8001eaa:	f00b fb97 	bl	800d5dc <HAL_SPI_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001eb4:	f000 fe98 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001eb8:	bf00      	nop
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20005f74 	.word	0x20005f74
 8001ec0:	40003800 	.word	0x40003800

08001ec4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001ec8:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <MX_SPI4_Init+0x64>)
 8001eca:	4a18      	ldr	r2, [pc, #96]	; (8001f2c <MX_SPI4_Init+0x68>)
 8001ecc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001ece:	4b16      	ldr	r3, [pc, #88]	; (8001f28 <MX_SPI4_Init+0x64>)
 8001ed0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ed4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001ed6:	4b14      	ldr	r3, [pc, #80]	; (8001f28 <MX_SPI4_Init+0x64>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001edc:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <MX_SPI4_Init+0x64>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ee2:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <MX_SPI4_Init+0x64>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ee8:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <MX_SPI4_Init+0x64>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001eee:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <MX_SPI4_Init+0x64>)
 8001ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ef4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <MX_SPI4_Init+0x64>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001efc:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <MX_SPI4_Init+0x64>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <MX_SPI4_Init+0x64>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f08:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <MX_SPI4_Init+0x64>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <MX_SPI4_Init+0x64>)
 8001f10:	220a      	movs	r2, #10
 8001f12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001f14:	4804      	ldr	r0, [pc, #16]	; (8001f28 <MX_SPI4_Init+0x64>)
 8001f16:	f00b fb61 	bl	800d5dc <HAL_SPI_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001f20:	f000 fe62 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	200068e0 	.word	0x200068e0
 8001f2c:	40013400 	.word	0x40013400

08001f30 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001f34:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <MX_SPI5_Init+0x64>)
 8001f36:	4a18      	ldr	r2, [pc, #96]	; (8001f98 <MX_SPI5_Init+0x68>)
 8001f38:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001f3a:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <MX_SPI5_Init+0x64>)
 8001f3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f40:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001f42:	4b14      	ldr	r3, [pc, #80]	; (8001f94 <MX_SPI5_Init+0x64>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f48:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <MX_SPI5_Init+0x64>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f4e:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <MX_SPI5_Init+0x64>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f54:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <MX_SPI5_Init+0x64>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <MX_SPI5_Init+0x64>)
 8001f5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f60:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f62:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <MX_SPI5_Init+0x64>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f68:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <MX_SPI5_Init+0x64>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <MX_SPI5_Init+0x64>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f74:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <MX_SPI5_Init+0x64>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <MX_SPI5_Init+0x64>)
 8001f7c:	220a      	movs	r2, #10
 8001f7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001f80:	4804      	ldr	r0, [pc, #16]	; (8001f94 <MX_SPI5_Init+0x64>)
 8001f82:	f00b fb2b 	bl	800d5dc <HAL_SPI_Init>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001f8c:	f000 fe2c 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001f90:	bf00      	nop
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20005fd0 	.word	0x20005fd0
 8001f98:	40015000 	.word	0x40015000

08001f9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08a      	sub	sp, #40	; 0x28
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa2:	f107 0320 	add.w	r3, r7, #32
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
 8001fb6:	60da      	str	r2, [r3, #12]
 8001fb8:	611a      	str	r2, [r3, #16]
 8001fba:	615a      	str	r2, [r3, #20]
 8001fbc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fbe:	4b22      	ldr	r3, [pc, #136]	; (8002048 <MX_TIM2_Init+0xac>)
 8001fc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fc4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001fc6:	4b20      	ldr	r3, [pc, #128]	; (8002048 <MX_TIM2_Init+0xac>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fcc:	4b1e      	ldr	r3, [pc, #120]	; (8002048 <MX_TIM2_Init+0xac>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001fd2:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <MX_TIM2_Init+0xac>)
 8001fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fda:	4b1b      	ldr	r3, [pc, #108]	; (8002048 <MX_TIM2_Init+0xac>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe0:	4b19      	ldr	r3, [pc, #100]	; (8002048 <MX_TIM2_Init+0xac>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001fe6:	4818      	ldr	r0, [pc, #96]	; (8002048 <MX_TIM2_Init+0xac>)
 8001fe8:	f00c f96a 	bl	800e2c0 <HAL_TIM_PWM_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001ff2:	f000 fdf9 	bl	8002be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ffe:	f107 0320 	add.w	r3, r7, #32
 8002002:	4619      	mov	r1, r3
 8002004:	4810      	ldr	r0, [pc, #64]	; (8002048 <MX_TIM2_Init+0xac>)
 8002006:	f00c fded 	bl	800ebe4 <HAL_TIMEx_MasterConfigSynchronization>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002010:	f000 fdea 	bl	8002be8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002014:	2360      	movs	r3, #96	; 0x60
 8002016:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800201c:	2300      	movs	r3, #0
 800201e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002024:	1d3b      	adds	r3, r7, #4
 8002026:	2208      	movs	r2, #8
 8002028:	4619      	mov	r1, r3
 800202a:	4807      	ldr	r0, [pc, #28]	; (8002048 <MX_TIM2_Init+0xac>)
 800202c:	f00c faa0 	bl	800e570 <HAL_TIM_PWM_ConfigChannel>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002036:	f000 fdd7 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800203a:	4803      	ldr	r0, [pc, #12]	; (8002048 <MX_TIM2_Init+0xac>)
 800203c:	f001 f82a 	bl	8003094 <HAL_TIM_MspPostInit>

}
 8002040:	bf00      	nop
 8002042:	3728      	adds	r7, #40	; 0x28
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20006a24 	.word	0x20006a24

0800204c <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002050:	4b11      	ldr	r3, [pc, #68]	; (8002098 <MX_UART8_Init+0x4c>)
 8002052:	4a12      	ldr	r2, [pc, #72]	; (800209c <MX_UART8_Init+0x50>)
 8002054:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8002056:	4b10      	ldr	r3, [pc, #64]	; (8002098 <MX_UART8_Init+0x4c>)
 8002058:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800205c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800205e:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <MX_UART8_Init+0x4c>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002064:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <MX_UART8_Init+0x4c>)
 8002066:	2200      	movs	r2, #0
 8002068:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800206a:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <MX_UART8_Init+0x4c>)
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002070:	4b09      	ldr	r3, [pc, #36]	; (8002098 <MX_UART8_Init+0x4c>)
 8002072:	220c      	movs	r2, #12
 8002074:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002076:	4b08      	ldr	r3, [pc, #32]	; (8002098 <MX_UART8_Init+0x4c>)
 8002078:	2200      	movs	r2, #0
 800207a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800207c:	4b06      	ldr	r3, [pc, #24]	; (8002098 <MX_UART8_Init+0x4c>)
 800207e:	2200      	movs	r2, #0
 8002080:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002082:	4805      	ldr	r0, [pc, #20]	; (8002098 <MX_UART8_Init+0x4c>)
 8002084:	f00c fe3e 	bl	800ed04 <HAL_UART_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 800208e:	f000 fdab 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20005ed8 	.word	0x20005ed8
 800209c:	40007c00 	.word	0x40007c00

080020a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020a4:	4b11      	ldr	r3, [pc, #68]	; (80020ec <MX_USART3_UART_Init+0x4c>)
 80020a6:	4a12      	ldr	r2, [pc, #72]	; (80020f0 <MX_USART3_UART_Init+0x50>)
 80020a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <MX_USART3_UART_Init+0x4c>)
 80020ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80020b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020b2:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <MX_USART3_UART_Init+0x4c>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020b8:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <MX_USART3_UART_Init+0x4c>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020be:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <MX_USART3_UART_Init+0x4c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020c4:	4b09      	ldr	r3, [pc, #36]	; (80020ec <MX_USART3_UART_Init+0x4c>)
 80020c6:	220c      	movs	r2, #12
 80020c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ca:	4b08      	ldr	r3, [pc, #32]	; (80020ec <MX_USART3_UART_Init+0x4c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <MX_USART3_UART_Init+0x4c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020d6:	4805      	ldr	r0, [pc, #20]	; (80020ec <MX_USART3_UART_Init+0x4c>)
 80020d8:	f00c fe14 	bl	800ed04 <HAL_UART_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80020e2:	f000 fd81 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20006028 	.word	0x20006028
 80020f0:	40004800 	.word	0x40004800

080020f4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80020f8:	4b11      	ldr	r3, [pc, #68]	; (8002140 <MX_USART6_UART_Init+0x4c>)
 80020fa:	4a12      	ldr	r2, [pc, #72]	; (8002144 <MX_USART6_UART_Init+0x50>)
 80020fc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80020fe:	4b10      	ldr	r3, [pc, #64]	; (8002140 <MX_USART6_UART_Init+0x4c>)
 8002100:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002104:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002106:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <MX_USART6_UART_Init+0x4c>)
 8002108:	2200      	movs	r2, #0
 800210a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800210c:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <MX_USART6_UART_Init+0x4c>)
 800210e:	2200      	movs	r2, #0
 8002110:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002112:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <MX_USART6_UART_Init+0x4c>)
 8002114:	2200      	movs	r2, #0
 8002116:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002118:	4b09      	ldr	r3, [pc, #36]	; (8002140 <MX_USART6_UART_Init+0x4c>)
 800211a:	220c      	movs	r2, #12
 800211c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800211e:	4b08      	ldr	r3, [pc, #32]	; (8002140 <MX_USART6_UART_Init+0x4c>)
 8002120:	2200      	movs	r2, #0
 8002122:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <MX_USART6_UART_Init+0x4c>)
 8002126:	2200      	movs	r2, #0
 8002128:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800212a:	4805      	ldr	r0, [pc, #20]	; (8002140 <MX_USART6_UART_Init+0x4c>)
 800212c:	f00c fdea 	bl	800ed04 <HAL_UART_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002136:	f000 fd57 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200069d8 	.word	0x200069d8
 8002144:	40011400 	.word	0x40011400

08002148 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08e      	sub	sp, #56	; 0x38
 800214c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]
 8002158:	609a      	str	r2, [r3, #8]
 800215a:	60da      	str	r2, [r3, #12]
 800215c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	623b      	str	r3, [r7, #32]
 8002162:	4bb5      	ldr	r3, [pc, #724]	; (8002438 <MX_GPIO_Init+0x2f0>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	4ab4      	ldr	r2, [pc, #720]	; (8002438 <MX_GPIO_Init+0x2f0>)
 8002168:	f043 0310 	orr.w	r3, r3, #16
 800216c:	6313      	str	r3, [r2, #48]	; 0x30
 800216e:	4bb2      	ldr	r3, [pc, #712]	; (8002438 <MX_GPIO_Init+0x2f0>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f003 0310 	and.w	r3, r3, #16
 8002176:	623b      	str	r3, [r7, #32]
 8002178:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
 800217e:	4bae      	ldr	r3, [pc, #696]	; (8002438 <MX_GPIO_Init+0x2f0>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	4aad      	ldr	r2, [pc, #692]	; (8002438 <MX_GPIO_Init+0x2f0>)
 8002184:	f043 0304 	orr.w	r3, r3, #4
 8002188:	6313      	str	r3, [r2, #48]	; 0x30
 800218a:	4bab      	ldr	r3, [pc, #684]	; (8002438 <MX_GPIO_Init+0x2f0>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	61fb      	str	r3, [r7, #28]
 8002194:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	61bb      	str	r3, [r7, #24]
 800219a:	4ba7      	ldr	r3, [pc, #668]	; (8002438 <MX_GPIO_Init+0x2f0>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	4aa6      	ldr	r2, [pc, #664]	; (8002438 <MX_GPIO_Init+0x2f0>)
 80021a0:	f043 0320 	orr.w	r3, r3, #32
 80021a4:	6313      	str	r3, [r2, #48]	; 0x30
 80021a6:	4ba4      	ldr	r3, [pc, #656]	; (8002438 <MX_GPIO_Init+0x2f0>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f003 0320 	and.w	r3, r3, #32
 80021ae:	61bb      	str	r3, [r7, #24]
 80021b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	4ba0      	ldr	r3, [pc, #640]	; (8002438 <MX_GPIO_Init+0x2f0>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	4a9f      	ldr	r2, [pc, #636]	; (8002438 <MX_GPIO_Init+0x2f0>)
 80021bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021c0:	6313      	str	r3, [r2, #48]	; 0x30
 80021c2:	4b9d      	ldr	r3, [pc, #628]	; (8002438 <MX_GPIO_Init+0x2f0>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	4b99      	ldr	r3, [pc, #612]	; (8002438 <MX_GPIO_Init+0x2f0>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	4a98      	ldr	r2, [pc, #608]	; (8002438 <MX_GPIO_Init+0x2f0>)
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	6313      	str	r3, [r2, #48]	; 0x30
 80021de:	4b96      	ldr	r3, [pc, #600]	; (8002438 <MX_GPIO_Init+0x2f0>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	613b      	str	r3, [r7, #16]
 80021e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	4b92      	ldr	r3, [pc, #584]	; (8002438 <MX_GPIO_Init+0x2f0>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	4a91      	ldr	r2, [pc, #580]	; (8002438 <MX_GPIO_Init+0x2f0>)
 80021f4:	f043 0302 	orr.w	r3, r3, #2
 80021f8:	6313      	str	r3, [r2, #48]	; 0x30
 80021fa:	4b8f      	ldr	r3, [pc, #572]	; (8002438 <MX_GPIO_Init+0x2f0>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	4b8b      	ldr	r3, [pc, #556]	; (8002438 <MX_GPIO_Init+0x2f0>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a8a      	ldr	r2, [pc, #552]	; (8002438 <MX_GPIO_Init+0x2f0>)
 8002210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b88      	ldr	r3, [pc, #544]	; (8002438 <MX_GPIO_Init+0x2f0>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	607b      	str	r3, [r7, #4]
 8002226:	4b84      	ldr	r3, [pc, #528]	; (8002438 <MX_GPIO_Init+0x2f0>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	4a83      	ldr	r2, [pc, #524]	; (8002438 <MX_GPIO_Init+0x2f0>)
 800222c:	f043 0308 	orr.w	r3, r3, #8
 8002230:	6313      	str	r3, [r2, #48]	; 0x30
 8002232:	4b81      	ldr	r3, [pc, #516]	; (8002438 <MX_GPIO_Init+0x2f0>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	607b      	str	r3, [r7, #4]
 800223c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 800223e:	2200      	movs	r2, #0
 8002240:	f248 4184 	movw	r1, #33924	; 0x8484
 8002244:	487d      	ldr	r0, [pc, #500]	; (800243c <MX_GPIO_Init+0x2f4>)
 8002246:	f007 fadf 	bl	8009808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 800224a:	2200      	movs	r2, #0
 800224c:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8002250:	487b      	ldr	r0, [pc, #492]	; (8002440 <MX_GPIO_Init+0x2f8>)
 8002252:	f007 fad9 	bl	8009808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 8002256:	2200      	movs	r2, #0
 8002258:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800225c:	4879      	ldr	r0, [pc, #484]	; (8002444 <MX_GPIO_Init+0x2fc>)
 800225e:	f007 fad3 	bl	8009808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 8002262:	2200      	movs	r2, #0
 8002264:	2108      	movs	r1, #8
 8002266:	4878      	ldr	r0, [pc, #480]	; (8002448 <MX_GPIO_Init+0x300>)
 8002268:	f007 face 	bl	8009808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 800226c:	2200      	movs	r2, #0
 800226e:	f645 2126 	movw	r1, #23078	; 0x5a26
 8002272:	4876      	ldr	r0, [pc, #472]	; (800244c <MX_GPIO_Init+0x304>)
 8002274:	f007 fac8 	bl	8009808 <HAL_GPIO_WritePin>
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin, GPIO_PIN_RESET);
 8002278:	2200      	movs	r2, #0
 800227a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800227e:	4874      	ldr	r0, [pc, #464]	; (8002450 <MX_GPIO_Init+0x308>)
 8002280:	f007 fac2 	bl	8009808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8002284:	2200      	movs	r2, #0
 8002286:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 800228a:	4872      	ldr	r0, [pc, #456]	; (8002454 <MX_GPIO_Init+0x30c>)
 800228c:	f007 fabc 	bl	8009808 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_12V_Buck_Pin OUT_Prop_ActuatedVent_Gate_Pin SPI4_CS_Thermocouple_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 8002290:	f248 4384 	movw	r3, #33924	; 0x8484
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002296:	2301      	movs	r3, #1
 8002298:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229e:	2300      	movs	r3, #0
 80022a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a6:	4619      	mov	r1, r3
 80022a8:	4864      	ldr	r0, [pc, #400]	; (800243c <MX_GPIO_Init+0x2f4>)
 80022aa:	f007 f8e9 	bl	8009480 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin OUT_PyroValve_Gate_2_Pin OUT_PyroValve_Gate_1_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 80022ae:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b4:	2301      	movs	r3, #1
 80022b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022bc:	2300      	movs	r3, #0
 80022be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c4:	4619      	mov	r1, r3
 80022c6:	485e      	ldr	r0, [pc, #376]	; (8002440 <MX_GPIO_Init+0x2f8>)
 80022c8:	f007 f8da 	bl	8009480 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 80022cc:	2301      	movs	r3, #1
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80022d0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 80022da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022de:	4619      	mov	r1, r3
 80022e0:	4858      	ldr	r0, [pc, #352]	; (8002444 <MX_GPIO_Init+0x2fc>)
 80022e2:	f007 f8cd 	bl	8009480 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LED1_Pin OUT_LED2_Pin OUT_LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 80022e6:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80022ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ec:	2301      	movs	r3, #1
 80022ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f4:	2300      	movs	r3, #0
 80022f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022fc:	4619      	mov	r1, r3
 80022fe:	4851      	ldr	r0, [pc, #324]	; (8002444 <MX_GPIO_Init+0x2fc>)
 8002300:	f007 f8be 	bl	8009480 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LEDF_Pin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 8002304:	2308      	movs	r3, #8
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002308:	2301      	movs	r3, #1
 800230a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002310:	2300      	movs	r3, #0
 8002312:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 8002314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002318:	4619      	mov	r1, r3
 800231a:	484b      	ldr	r0, [pc, #300]	; (8002448 <MX_GPIO_Init+0x300>)
 800231c:	f007 f8b0 	bl	8009480 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_Prop_PyroTurboValve_LimitSwitch_Pin IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8002320:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002326:	2300      	movs	r3, #0
 8002328:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800232e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002332:	4619      	mov	r1, r3
 8002334:	4843      	ldr	r0, [pc, #268]	; (8002444 <MX_GPIO_Init+0x2fc>)
 8002336:	f007 f8a3 	bl	8009480 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 800233a:	2302      	movs	r3, #2
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800233e:	2300      	movs	r3, #0
 8002340:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 8002346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800234a:	4619      	mov	r1, r3
 800234c:	4840      	ldr	r0, [pc, #256]	; (8002450 <MX_GPIO_Init+0x308>)
 800234e:	f007 f897 	bl	8009480 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_PyroValve_Cont_2_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 8002352:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002358:	2300      	movs	r3, #0
 800235a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 8002360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002364:	4619      	mov	r1, r3
 8002366:	4836      	ldr	r0, [pc, #216]	; (8002440 <MX_GPIO_Init+0x2f8>)
 8002368:	f007 f88a 	bl	8009480 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_PyroValve_Cont_1_Pin SX_BUSY_Pin SX_DIO_Pin IN_EJ_Main_Cont_Pin
                           IN_EJ_Drogue_Cont_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|IN_EJ_Main_Cont_Pin
 800236c:	f242 4319 	movw	r3, #9241	; 0x2419
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
                          |IN_EJ_Drogue_Cont_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002372:	2300      	movs	r3, #0
 8002374:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800237a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800237e:	4619      	mov	r1, r3
 8002380:	4832      	ldr	r0, [pc, #200]	; (800244c <MX_GPIO_Init+0x304>)
 8002382:	f007 f87d 	bl	8009480 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_PyroValve_Arming_Pin SX_RST_Pin SX_RF_SW_Pin OUT_VR_PWR_Pin
                           OUT_EJ_Main_Gate_Pin OUT_EJ_Drogue_Gate_Pin OUT_EJ_Arming_Pin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 8002386:	f645 2326 	movw	r3, #23078	; 0x5a26
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800238c:	2301      	movs	r3, #1
 800238e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002394:	2300      	movs	r3, #0
 8002396:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800239c:	4619      	mov	r1, r3
 800239e:	482b      	ldr	r0, [pc, #172]	; (800244c <MX_GPIO_Init+0x304>)
 80023a0:	f007 f86e 	bl	8009480 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAYLOAD_I2C_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 80023a4:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023aa:	2300      	movs	r3, #0
 80023ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023b6:	4619      	mov	r1, r3
 80023b8:	4820      	ldr	r0, [pc, #128]	; (800243c <MX_GPIO_Init+0x2f4>)
 80023ba:	f007 f861 	bl	8009480 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SX_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin;
 80023be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023c4:	2301      	movs	r3, #1
 80023c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023cc:	2300      	movs	r3, #0
 80023ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_SX_CS_GPIO_Port, &GPIO_InitStruct);
 80023d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d4:	4619      	mov	r1, r3
 80023d6:	481e      	ldr	r0, [pc, #120]	; (8002450 <MX_GPIO_Init+0x308>)
 80023d8:	f007 f852 	bl	8009480 <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin OUT_FLASH_IO3_Pin OUT_FLASH_WP_Pin OUT_FLASH_CS_Pin
                           OUT_VR_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80023dc:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023e2:	2301      	movs	r3, #1
 80023e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ea:	2300      	movs	r3, #0
 80023ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f2:	4619      	mov	r1, r3
 80023f4:	4817      	ldr	r0, [pc, #92]	; (8002454 <MX_GPIO_Init+0x30c>)
 80023f6:	f007 f843 	bl	8009480 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 80023fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002400:	2300      	movs	r3, #0
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8002408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800240c:	4619      	mov	r1, r3
 800240e:	4811      	ldr	r0, [pc, #68]	; (8002454 <MX_GPIO_Init+0x30c>)
 8002410:	f007 f836 	bl	8009480 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_LSM6DSR_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 8002414:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800241a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800241e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002428:	4619      	mov	r1, r3
 800242a:	4808      	ldr	r0, [pc, #32]	; (800244c <MX_GPIO_Init+0x304>)
 800242c:	f007 f828 	bl	8009480 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002430:	2200      	movs	r2, #0
 8002432:	2105      	movs	r1, #5
 8002434:	2006      	movs	r0, #6
 8002436:	e00f      	b.n	8002458 <MX_GPIO_Init+0x310>
 8002438:	40023800 	.word	0x40023800
 800243c:	40021000 	.word	0x40021000
 8002440:	40021400 	.word	0x40021400
 8002444:	40020800 	.word	0x40020800
 8002448:	40020000 	.word	0x40020000
 800244c:	40021800 	.word	0x40021800
 8002450:	40020400 	.word	0x40020400
 8002454:	40020c00 	.word	0x40020c00
 8002458:	f006 ffda 	bl	8009410 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800245c:	2006      	movs	r0, #6
 800245e:	f006 fff3 	bl	8009448 <HAL_NVIC_EnableIRQ>

}
 8002462:	bf00      	nop
 8002464:	3738      	adds	r7, #56	; 0x38
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop

0800246c <XTend_Transmit>:

/**
 * @brief   Function to transmit message to XTend
 * @param  Msg : char array (range 1-800)
 */
static void XTend_Transmit(char* Msg){
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&XTEND_UART, Msg, strlen(Msg), HAL_Delay);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7fd fec5 	bl	8000204 <strlen>
 800247a:	4603      	mov	r3, r0
 800247c:	b29a      	uxth	r2, r3
 800247e:	4b04      	ldr	r3, [pc, #16]	; (8002490 <XTend_Transmit+0x24>)
 8002480:	6879      	ldr	r1, [r7, #4]
 8002482:	4804      	ldr	r0, [pc, #16]	; (8002494 <XTend_Transmit+0x28>)
 8002484:	f00c fc8b 	bl	800ed9e <HAL_UART_Transmit>
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	080089f1 	.word	0x080089f1
 8002494:	20006028 	.word	0x20006028

08002498 <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 8002498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800249c:	b08a      	sub	sp, #40	; 0x28
 800249e:	af06      	add	r7, sp, #24
 80024a0:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80024a2:	f017 f8c3 	bl	801962c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */

	//Add thread id to the list
	threadID[0]=osThreadGetId();
 80024a6:	f013 fcd9 	bl	8015e5c <osThreadGetId>
 80024aa:	4603      	mov	r3, r0
 80024ac:	4a22      	ldr	r2, [pc, #136]	; (8002538 <StartMemory0+0xa0>)
 80024ae:	6013      	str	r3, [r2, #0]

	#if !MEMORY_THREAD
    osThreadExit();
	#endif

	uint8_t counter = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	73fb      	strb	r3, [r7, #15]

	  /* Infinite loop */
	  for(;;)
	  {
		  //Write data to sd and flash
		  if(counter==0) sd_open_file(&filename);
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d102      	bne.n	80024c0 <StartMemory0+0x28>
 80024ba:	4820      	ldr	r0, [pc, #128]	; (800253c <StartMemory0+0xa4>)
 80024bc:	f006 f8ae 	bl	800861c <sd_open_file>
		  sprintf((char*)writeBuf, "Data: %f, %f, %f, %f\r\n", PRESSURE, MIN, SEC, SUBSEC);
 80024c0:	4b1f      	ldr	r3, [pc, #124]	; (8002540 <StartMemory0+0xa8>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fe f85f 	bl	8000588 <__aeabi_f2d>
 80024ca:	4682      	mov	sl, r0
 80024cc:	468b      	mov	fp, r1
 80024ce:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <StartMemory0+0xac>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe f858 	bl	8000588 <__aeabi_f2d>
 80024d8:	4604      	mov	r4, r0
 80024da:	460d      	mov	r5, r1
 80024dc:	4b1a      	ldr	r3, [pc, #104]	; (8002548 <StartMemory0+0xb0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fe f851 	bl	8000588 <__aeabi_f2d>
 80024e6:	4680      	mov	r8, r0
 80024e8:	4689      	mov	r9, r1
 80024ea:	4b18      	ldr	r3, [pc, #96]	; (800254c <StartMemory0+0xb4>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe f84a 	bl	8000588 <__aeabi_f2d>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80024fc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002500:	e9cd 4500 	strd	r4, r5, [sp]
 8002504:	4652      	mov	r2, sl
 8002506:	465b      	mov	r3, fp
 8002508:	4911      	ldr	r1, [pc, #68]	; (8002550 <StartMemory0+0xb8>)
 800250a:	4812      	ldr	r0, [pc, #72]	; (8002554 <StartMemory0+0xbc>)
 800250c:	f01a faf0 	bl	801caf0 <siprintf>
		  sd_write(&fil, writeBuf);
 8002510:	4910      	ldr	r1, [pc, #64]	; (8002554 <StartMemory0+0xbc>)
 8002512:	4811      	ldr	r0, [pc, #68]	; (8002558 <StartMemory0+0xc0>)
 8002514:	f006 f89a 	bl	800864c <sd_write>
		  if (counter == 50) {
 8002518:	7bfb      	ldrb	r3, [r7, #15]
 800251a:	2b32      	cmp	r3, #50	; 0x32
 800251c:	d104      	bne.n	8002528 <StartMemory0+0x90>
			  f_close(&fil);
 800251e:	480e      	ldr	r0, [pc, #56]	; (8002558 <StartMemory0+0xc0>)
 8002520:	f012 ff70 	bl	8015404 <f_close>
			  counter = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	73fb      	strb	r3, [r7, #15]
		  }
		  counter++;
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	3301      	adds	r3, #1
 800252c:	73fb      	strb	r3, [r7, #15]

		  osDelay(1000/DATA_FREQ);
 800252e:	2064      	movs	r0, #100	; 0x64
 8002530:	f013 fd03 	bl	8015f3a <osDelay>
	  {
 8002534:	e7be      	b.n	80024b4 <StartMemory0+0x1c>
 8002536:	bf00      	nop
 8002538:	20006070 	.word	0x20006070
 800253c:	20006388 	.word	0x20006388
 8002540:	20006374 	.word	0x20006374
 8002544:	20006cc4 	.word	0x20006cc4
 8002548:	2000637c 	.word	0x2000637c
 800254c:	20006cc0 	.word	0x20006cc0
 8002550:	080212c0 	.word	0x080212c0
 8002554:	2000639c 	.word	0x2000639c
 8002558:	20006a90 	.word	0x20006a90

0800255c <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b0c2      	sub	sp, #264	; 0x108
 8002560:	af00      	add	r7, sp, #0
 8002562:	1d3b      	adds	r3, r7, #4
 8002564:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartEjection1 */

	//Add thread id to the list
	threadID[1]=osThreadGetId();
 8002566:	f013 fc79 	bl	8015e5c <osThreadGetId>
 800256a:	4603      	mov	r3, r0
 800256c:	4a01      	ldr	r2, [pc, #4]	; (8002574 <StartEjection1+0x18>)
 800256e:	6053      	str	r3, [r2, #4]

	#if !EJECTION_THREAD
	osThreadExit();
 8002570:	f013 fcdd 	bl	8015f2e <osThreadExit>
 8002574:	20006070 	.word	0x20006070

08002578 <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 8002578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800257c:	b0b0      	sub	sp, #192	; 0xc0
 800257e:	af1a      	add	r7, sp, #104	; 0x68
 8002580:	64f8      	str	r0, [r7, #76]	; 0x4c
  /* USER CODE BEGIN StartTelemetry2 */

	//Add thread id to the list
	threadID[2]=osThreadGetId();
 8002582:	f013 fc6b 	bl	8015e5c <osThreadGetId>
 8002586:	4603      	mov	r3, r0
 8002588:	4ab0      	ldr	r2, [pc, #704]	; (800284c <StartTelemetry2+0x2d4>)
 800258a:	6093      	str	r3, [r2, #8]

	#if !TELEMETRY_THREAD
	osThreadExit();
	#endif

	uint8_t counter = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	osDelay(1000);
 8002592:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002596:	f013 fcd0 	bl	8015f3a <osDelay>

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 800259a:	2201      	movs	r2, #1
 800259c:	2108      	movs	r1, #8
 800259e:	48ac      	ldr	r0, [pc, #688]	; (8002850 <StartTelemetry2+0x2d8>)
 80025a0:	f007 f932 	bl	8009808 <HAL_GPIO_WritePin>

	  //Get propulsion data TODO
	  TANK_PRESSURE = transducer_pressure;
 80025a4:	4bab      	ldr	r3, [pc, #684]	; (8002854 <StartTelemetry2+0x2dc>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4aab      	ldr	r2, [pc, #684]	; (8002858 <StartTelemetry2+0x2e0>)
 80025aa:	6013      	str	r3, [r2, #0]
	  THERMO_TEMPERATURE = THERMO_TEMP;
 80025ac:	4bab      	ldr	r3, [pc, #684]	; (800285c <StartTelemetry2+0x2e4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4aab      	ldr	r2, [pc, #684]	; (8002860 <StartTelemetry2+0x2e8>)
 80025b2:	6013      	str	r3, [r2, #0]
	  VALVE_STATUS = 0;
 80025b4:	4bab      	ldr	r3, [pc, #684]	; (8002864 <StartTelemetry2+0x2ec>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]

	  //Send propulsion data
	  #if XTEND_ //Xtend send
  		memset(xtend_tx_buffer, 0, XTEND_BUFFER_SIZE);
 80025ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025be:	2100      	movs	r1, #0
 80025c0:	48a9      	ldr	r0, [pc, #676]	; (8002868 <StartTelemetry2+0x2f0>)
 80025c2:	f018 ff99 	bl	801b4f8 <memset>
  		sprintf(xtend_tx_buffer,"P,%.2f,%.2f, %i,E",TANK_PRESSURE,THERMO_TEMPERATURE,VALVE_STATUS);
 80025c6:	4ba4      	ldr	r3, [pc, #656]	; (8002858 <StartTelemetry2+0x2e0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fd ffdc 	bl	8000588 <__aeabi_f2d>
 80025d0:	4604      	mov	r4, r0
 80025d2:	460d      	mov	r5, r1
 80025d4:	4ba2      	ldr	r3, [pc, #648]	; (8002860 <StartTelemetry2+0x2e8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fd ffd5 	bl	8000588 <__aeabi_f2d>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	49a0      	ldr	r1, [pc, #640]	; (8002864 <StartTelemetry2+0x2ec>)
 80025e4:	7809      	ldrb	r1, [r1, #0]
 80025e6:	9102      	str	r1, [sp, #8]
 80025e8:	e9cd 2300 	strd	r2, r3, [sp]
 80025ec:	4622      	mov	r2, r4
 80025ee:	462b      	mov	r3, r5
 80025f0:	499e      	ldr	r1, [pc, #632]	; (800286c <StartTelemetry2+0x2f4>)
 80025f2:	489d      	ldr	r0, [pc, #628]	; (8002868 <StartTelemetry2+0x2f0>)
 80025f4:	f01a fa7c 	bl	801caf0 <siprintf>
  		XTend_Transmit(xtend_tx_buffer);
 80025f8:	489b      	ldr	r0, [pc, #620]	; (8002868 <StartTelemetry2+0x2f0>)
 80025fa:	f7ff ff37 	bl	800246c <XTend_Transmit>
    	sprintf(sradio_tx_buffer,"P,%.2f,%.2f, %i,E",TANK_PRESSURE,THERMO_TEMPERATURE,VALVE_STATUS);
    	TxProtocol(sradio_tx_buffer, strlen(sradio_tx_buffer));
	  #endif


	  if (counter == 5){
 80025fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002602:	2b05      	cmp	r3, #5
 8002604:	f040 816d 	bne.w	80028e2 <StartTelemetry2+0x36a>
		  counter = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		  //Get sensors data
		  //TODO Need to verify these six to make sure they are in the right order
	  	  ACCx = acceleration_mg[0];
 800260e:	4b98      	ldr	r3, [pc, #608]	; (8002870 <StartTelemetry2+0x2f8>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a98      	ldr	r2, [pc, #608]	; (8002874 <StartTelemetry2+0x2fc>)
 8002614:	6013      	str	r3, [r2, #0]
	  	  ACCy = acceleration_mg[1];
 8002616:	4b96      	ldr	r3, [pc, #600]	; (8002870 <StartTelemetry2+0x2f8>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	4a97      	ldr	r2, [pc, #604]	; (8002878 <StartTelemetry2+0x300>)
 800261c:	6013      	str	r3, [r2, #0]
	  	  ACCz = acceleration_mg[2];
 800261e:	4b94      	ldr	r3, [pc, #592]	; (8002870 <StartTelemetry2+0x2f8>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	4a96      	ldr	r2, [pc, #600]	; (800287c <StartTelemetry2+0x304>)
 8002624:	6013      	str	r3, [r2, #0]
	  	  GYROx = angular_rate_mdps[0];
 8002626:	4b96      	ldr	r3, [pc, #600]	; (8002880 <StartTelemetry2+0x308>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a96      	ldr	r2, [pc, #600]	; (8002884 <StartTelemetry2+0x30c>)
 800262c:	6013      	str	r3, [r2, #0]
	  	  GYROy = angular_rate_mdps[1];
 800262e:	4b94      	ldr	r3, [pc, #592]	; (8002880 <StartTelemetry2+0x308>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	4a95      	ldr	r2, [pc, #596]	; (8002888 <StartTelemetry2+0x310>)
 8002634:	6013      	str	r3, [r2, #0]
	  	  GYROz = angular_rate_mdps[2];
 8002636:	4b92      	ldr	r3, [pc, #584]	; (8002880 <StartTelemetry2+0x308>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	4a94      	ldr	r2, [pc, #592]	; (800288c <StartTelemetry2+0x314>)
 800263c:	6013      	str	r3, [r2, #0]
	  	  PRESSURE = pressure_hPa;
 800263e:	4b94      	ldr	r3, [pc, #592]	; (8002890 <StartTelemetry2+0x318>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a94      	ldr	r2, [pc, #592]	; (8002894 <StartTelemetry2+0x31c>)
 8002644:	6013      	str	r3, [r2, #0]
		  MIN = t.tm_min;
		  SEC = t.tm_sec;
		  */

		  //From the GPS time value
		  MIN = ((uint8_t) time % 3600) / 60.0; sprintf(&MIN, "%.0f",MIN);
 8002646:	4b94      	ldr	r3, [pc, #592]	; (8002898 <StartTelemetry2+0x320>)
 8002648:	edd3 7a00 	vldr	s15, [r3]
 800264c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002650:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8002654:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002658:	b2db      	uxtb	r3, r3
 800265a:	4a90      	ldr	r2, [pc, #576]	; (800289c <StartTelemetry2+0x324>)
 800265c:	fb82 1203 	smull	r1, r2, r2, r3
 8002660:	441a      	add	r2, r3
 8002662:	12d1      	asrs	r1, r2, #11
 8002664:	17da      	asrs	r2, r3, #31
 8002666:	1a8a      	subs	r2, r1, r2
 8002668:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800266c:	fb01 f202 	mul.w	r2, r1, r2
 8002670:	1a9a      	subs	r2, r3, r2
 8002672:	4610      	mov	r0, r2
 8002674:	f7fd ff76 	bl	8000564 <__aeabi_i2d>
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	4b88      	ldr	r3, [pc, #544]	; (80028a0 <StartTelemetry2+0x328>)
 800267e:	f7fe f905 	bl	800088c <__aeabi_ddiv>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4610      	mov	r0, r2
 8002688:	4619      	mov	r1, r3
 800268a:	f7fe facd 	bl	8000c28 <__aeabi_d2f>
 800268e:	4603      	mov	r3, r0
 8002690:	4a84      	ldr	r2, [pc, #528]	; (80028a4 <StartTelemetry2+0x32c>)
 8002692:	6013      	str	r3, [r2, #0]
 8002694:	4b83      	ldr	r3, [pc, #524]	; (80028a4 <StartTelemetry2+0x32c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7fd ff75 	bl	8000588 <__aeabi_f2d>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	4981      	ldr	r1, [pc, #516]	; (80028a8 <StartTelemetry2+0x330>)
 80026a4:	487f      	ldr	r0, [pc, #508]	; (80028a4 <StartTelemetry2+0x32c>)
 80026a6:	f01a fa23 	bl	801caf0 <siprintf>
		  SEC = (uint8_t) time % 60; sprintf(&SEC,"%.0f",SEC);
 80026aa:	4b7b      	ldr	r3, [pc, #492]	; (8002898 <StartTelemetry2+0x320>)
 80026ac:	edd3 7a00 	vldr	s15, [r3]
 80026b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026b4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 80026b8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	4b7b      	ldr	r3, [pc, #492]	; (80028ac <StartTelemetry2+0x334>)
 80026c0:	fba3 1302 	umull	r1, r3, r3, r2
 80026c4:	0959      	lsrs	r1, r3, #5
 80026c6:	460b      	mov	r3, r1
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	1a5b      	subs	r3, r3, r1
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	ee07 3a90 	vmov	s15, r3
 80026d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026da:	4b75      	ldr	r3, [pc, #468]	; (80028b0 <StartTelemetry2+0x338>)
 80026dc:	edc3 7a00 	vstr	s15, [r3]
 80026e0:	4b73      	ldr	r3, [pc, #460]	; (80028b0 <StartTelemetry2+0x338>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fd ff4f 	bl	8000588 <__aeabi_f2d>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	496e      	ldr	r1, [pc, #440]	; (80028a8 <StartTelemetry2+0x330>)
 80026f0:	486f      	ldr	r0, [pc, #444]	; (80028b0 <StartTelemetry2+0x338>)
 80026f2:	f01a f9fd 	bl	801caf0 <siprintf>
		  SUBSEC = time / 3600.0; sprintf(&SUBSEC,"%.0f",SUBSEC);
 80026f6:	4b68      	ldr	r3, [pc, #416]	; (8002898 <StartTelemetry2+0x320>)
 80026f8:	ed93 7a00 	vldr	s14, [r3]
 80026fc:	eddf 6a6d 	vldr	s13, [pc, #436]	; 80028b4 <StartTelemetry2+0x33c>
 8002700:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002704:	4b6c      	ldr	r3, [pc, #432]	; (80028b8 <StartTelemetry2+0x340>)
 8002706:	edc3 7a00 	vstr	s15, [r3]
 800270a:	4b6b      	ldr	r3, [pc, #428]	; (80028b8 <StartTelemetry2+0x340>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f7fd ff3a 	bl	8000588 <__aeabi_f2d>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4963      	ldr	r1, [pc, #396]	; (80028a8 <StartTelemetry2+0x330>)
 800271a:	4867      	ldr	r0, [pc, #412]	; (80028b8 <StartTelemetry2+0x340>)
 800271c:	f01a f9e8 	bl	801caf0 <siprintf>
	  	  STATE = 0; //TODO not the right value
 8002720:	4b66      	ldr	r3, [pc, #408]	; (80028bc <StartTelemetry2+0x344>)
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
	  	  CONT = MRT_getContinuity();
 8002728:	f001 fc26 	bl	8003f78 <MRT_getContinuity>
 800272c:	4603      	mov	r3, r0
 800272e:	461a      	mov	r2, r3
 8002730:	4b63      	ldr	r3, [pc, #396]	; (80028c0 <StartTelemetry2+0x348>)
 8002732:	701a      	strb	r2, [r3, #0]

	  	  //Send sensors data
		  #if XTEND_ //Xtend send
			memset(xtend_tx_buffer, 0, XTEND_BUFFER_SIZE);
 8002734:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002738:	2100      	movs	r1, #0
 800273a:	484b      	ldr	r0, [pc, #300]	; (8002868 <StartTelemetry2+0x2f0>)
 800273c:	f018 fedc 	bl	801b4f8 <memset>
			sprintf(xtend_tx_buffer,"S,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.7f,%.7f,%.1f,%.1f,%.1f,%.2f,%i,E",
 8002740:	4b4c      	ldr	r3, [pc, #304]	; (8002874 <StartTelemetry2+0x2fc>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f7fd ff1f 	bl	8000588 <__aeabi_f2d>
 800274a:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 800274e:	4b4a      	ldr	r3, [pc, #296]	; (8002878 <StartTelemetry2+0x300>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7fd ff18 	bl	8000588 <__aeabi_f2d>
 8002758:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 800275c:	4b47      	ldr	r3, [pc, #284]	; (800287c <StartTelemetry2+0x304>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f7fd ff11 	bl	8000588 <__aeabi_f2d>
 8002766:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 800276a:	4b46      	ldr	r3, [pc, #280]	; (8002884 <StartTelemetry2+0x30c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f7fd ff0a 	bl	8000588 <__aeabi_f2d>
 8002774:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8002778:	4b43      	ldr	r3, [pc, #268]	; (8002888 <StartTelemetry2+0x310>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f7fd ff03 	bl	8000588 <__aeabi_f2d>
 8002782:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8002786:	4b41      	ldr	r3, [pc, #260]	; (800288c <StartTelemetry2+0x314>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f7fd fefc 	bl	8000588 <__aeabi_f2d>
 8002790:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002794:	4b3f      	ldr	r3, [pc, #252]	; (8002894 <StartTelemetry2+0x31c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f7fd fef5 	bl	8000588 <__aeabi_f2d>
 800279e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80027a2:	4b48      	ldr	r3, [pc, #288]	; (80028c4 <StartTelemetry2+0x34c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fd feee 	bl	8000588 <__aeabi_f2d>
 80027ac:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80027b0:	4b45      	ldr	r3, [pc, #276]	; (80028c8 <StartTelemetry2+0x350>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fd fee7 	bl	8000588 <__aeabi_f2d>
 80027ba:	e9c7 0100 	strd	r0, r1, [r7]
 80027be:	4b39      	ldr	r3, [pc, #228]	; (80028a4 <StartTelemetry2+0x32c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fd fee0 	bl	8000588 <__aeabi_f2d>
 80027c8:	4682      	mov	sl, r0
 80027ca:	468b      	mov	fp, r1
 80027cc:	4b38      	ldr	r3, [pc, #224]	; (80028b0 <StartTelemetry2+0x338>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fd fed9 	bl	8000588 <__aeabi_f2d>
 80027d6:	4680      	mov	r8, r0
 80027d8:	4689      	mov	r9, r1
 80027da:	4b37      	ldr	r3, [pc, #220]	; (80028b8 <StartTelemetry2+0x340>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fd fed2 	bl	8000588 <__aeabi_f2d>
 80027e4:	4604      	mov	r4, r0
 80027e6:	460d      	mov	r5, r1
 80027e8:	4b34      	ldr	r3, [pc, #208]	; (80028bc <StartTelemetry2+0x344>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fd fecb 	bl	8000588 <__aeabi_f2d>
 80027f2:	4b33      	ldr	r3, [pc, #204]	; (80028c0 <StartTelemetry2+0x348>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	9318      	str	r3, [sp, #96]	; 0x60
 80027f8:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 80027fc:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
 8002800:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8002804:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 8002808:	ed97 7b00 	vldr	d7, [r7]
 800280c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8002810:	ed97 7b02 	vldr	d7, [r7, #8]
 8002814:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8002818:	ed97 7b04 	vldr	d7, [r7, #16]
 800281c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8002820:	ed97 7b06 	vldr	d7, [r7, #24]
 8002824:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002828:	ed97 7b08 	vldr	d7, [r7, #32]
 800282c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002830:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002834:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002838:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800283c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002840:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002844:	ed8d 7b00 	vstr	d7, [sp]
 8002848:	e040      	b.n	80028cc <StartTelemetry2+0x354>
 800284a:	bf00      	nop
 800284c:	20006070 	.word	0x20006070
 8002850:	40020800 	.word	0x40020800
 8002854:	2000695c 	.word	0x2000695c
 8002858:	20006384 	.word	0x20006384
 800285c:	20006a20 	.word	0x20006a20
 8002860:	200068d8 	.word	0x200068d8
 8002864:	20006368 	.word	0x20006368
 8002868:	200067d8 	.word	0x200067d8
 800286c:	080212d8 	.word	0x080212d8
 8002870:	20000470 	.word	0x20000470
 8002874:	200069cc 	.word	0x200069cc
 8002878:	20006a1c 	.word	0x20006a1c
 800287c:	20006398 	.word	0x20006398
 8002880:	2000047c 	.word	0x2000047c
 8002884:	20006378 	.word	0x20006378
 8002888:	20006370 	.word	0x20006370
 800288c:	200067d4 	.word	0x200067d4
 8002890:	20000468 	.word	0x20000468
 8002894:	20006374 	.word	0x20006374
 8002898:	200069c8 	.word	0x200069c8
 800289c:	91a2b3c5 	.word	0x91a2b3c5
 80028a0:	404e0000 	.word	0x404e0000
 80028a4:	20006cc4 	.word	0x20006cc4
 80028a8:	080212ec 	.word	0x080212ec
 80028ac:	88888889 	.word	0x88888889
 80028b0:	2000637c 	.word	0x2000637c
 80028b4:	45610000 	.word	0x45610000
 80028b8:	20006cc0 	.word	0x20006cc0
 80028bc:	200068dc 	.word	0x200068dc
 80028c0:	20006a8c 	.word	0x20006a8c
 80028c4:	20006938 	.word	0x20006938
 80028c8:	200067cc 	.word	0x200067cc
 80028cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80028d0:	490b      	ldr	r1, [pc, #44]	; (8002900 <StartTelemetry2+0x388>)
 80028d2:	480c      	ldr	r0, [pc, #48]	; (8002904 <StartTelemetry2+0x38c>)
 80028d4:	f01a f90c 	bl	801caf0 <siprintf>
										ACCx,ACCy,ACCz,GYROx,GYROy,GYROz,PRESSURE,LATITUDE,LONGITUDE,MIN,SEC,SUBSEC,STATE,CONT);
			XTend_Transmit(xtend_tx_buffer);
 80028d8:	480a      	ldr	r0, [pc, #40]	; (8002904 <StartTelemetry2+0x38c>)
 80028da:	f7ff fdc7 	bl	800246c <XTend_Transmit>
		  #endif


		  #if IRIDIUM_ //Iridium send
		    //TODO Can get stuck for some time (SHOULD CHANGE TIMEOUT)
		    MRT_Static_Iridium_getTime(); //TODO doesn't cost anything
 80028de:	f003 ffbf 	bl	8006860 <MRT_Static_Iridium_getTime>
		    //MRT_Static_Iridium_sendMessage(msg); TODO IT COSTS CREDITS WATCH OUT
		  #endif
	  }
	  counter++;
 80028e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80028e6:	3301      	adds	r3, #1
 80028e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57


	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 80028ec:	2200      	movs	r2, #0
 80028ee:	2108      	movs	r1, #8
 80028f0:	4805      	ldr	r0, [pc, #20]	; (8002908 <StartTelemetry2+0x390>)
 80028f2:	f006 ff89 	bl	8009808 <HAL_GPIO_WritePin>


      osDelay(1000/SEND_FREQ);
 80028f6:	2014      	movs	r0, #20
 80028f8:	f013 fb1f 	bl	8015f3a <osDelay>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 80028fc:	e64d      	b.n	800259a <StartTelemetry2+0x22>
 80028fe:	bf00      	nop
 8002900:	080212f4 	.word	0x080212f4
 8002904:	200067d8 	.word	0x200067d8
 8002908:	40020800 	.word	0x40020800

0800290c <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	//Add thread id to the list
	threadID[3]=osThreadGetId();
 8002914:	f013 faa2 	bl	8015e5c <osThreadGetId>
 8002918:	4603      	mov	r3, r0
 800291a:	4a27      	ldr	r2, [pc, #156]	; (80029b8 <StartSensors3+0xac>)
 800291c:	60d3      	str	r3, [r2, #12]

	#if !SENSORS_THREAD
	osThreadExit();
	#endif

	uint8_t counter = 0;
 800291e:	2300      	movs	r3, #0
 8002920:	73fb      	strb	r3, [r7, #15]

  for(;;)
  {

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8002922:	2201      	movs	r2, #1
 8002924:	2102      	movs	r1, #2
 8002926:	4825      	ldr	r0, [pc, #148]	; (80029bc <StartSensors3+0xb0>)
 8002928:	f006 ff6e 	bl	8009808 <HAL_GPIO_WritePin>

	  if (counter == 10){
 800292c:	7bfb      	ldrb	r3, [r7, #15]
 800292e:	2b0a      	cmp	r3, #10
 8002930:	d12b      	bne.n	800298a <StartSensors3+0x7e>
		  counter=0;
 8002932:	2300      	movs	r3, #0
 8002934:	73fb      	strb	r3, [r7, #15]

		  //GPS
		  GPS_Poll(&LATITUDE, &LONGITUDE, &time);
 8002936:	4a22      	ldr	r2, [pc, #136]	; (80029c0 <StartSensors3+0xb4>)
 8002938:	4922      	ldr	r1, [pc, #136]	; (80029c4 <StartSensors3+0xb8>)
 800293a:	4823      	ldr	r0, [pc, #140]	; (80029c8 <StartSensors3+0xbc>)
 800293c:	f000 fe36 	bl	80035ac <GPS_Poll>

	  	  //LSM6DSR
	  	  MRT_LSM6DSR_getAcceleration(lsm_ctx,acceleration_mg);
 8002940:	4a22      	ldr	r2, [pc, #136]	; (80029cc <StartSensors3+0xc0>)
 8002942:	4b23      	ldr	r3, [pc, #140]	; (80029d0 <StartSensors3+0xc4>)
 8002944:	ca07      	ldmia	r2, {r0, r1, r2}
 8002946:	f7fe fcc3 	bl	80012d0 <MRT_LSM6DSR_getAcceleration>
	  	  MRT_LSM6DSR_getAngularRate(lsm_ctx,angular_rate_mdps);
 800294a:	4a20      	ldr	r2, [pc, #128]	; (80029cc <StartSensors3+0xc0>)
 800294c:	4b21      	ldr	r3, [pc, #132]	; (80029d4 <StartSensors3+0xc8>)
 800294e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002950:	f7fe fd2e 	bl	80013b0 <MRT_LSM6DSR_getAngularRate>
		  MRT_LSM6DSR_getTemperature(lsm_ctx,&lsm_temperature_degC);
 8002954:	4a1d      	ldr	r2, [pc, #116]	; (80029cc <StartSensors3+0xc0>)
 8002956:	4b20      	ldr	r3, [pc, #128]	; (80029d8 <StartSensors3+0xcc>)
 8002958:	ca07      	ldmia	r2, {r0, r1, r2}
 800295a:	f7fe fcff 	bl	800135c <MRT_LSM6DSR_getTemperature>

		  //LPS22HH
		  MRT_LPS22HH_getTemperature(lps_ctx,&lps_temperature_degC);
 800295e:	4a1f      	ldr	r2, [pc, #124]	; (80029dc <StartSensors3+0xd0>)
 8002960:	4b1f      	ldr	r3, [pc, #124]	; (80029e0 <StartSensors3+0xd4>)
 8002962:	ca07      	ldmia	r2, {r0, r1, r2}
 8002964:	f7fe fe4e 	bl	8001604 <MRT_LPS22HH_getTemperature>
		  MRT_LPS22HH_getPressure(lps_ctx,&pressure_hPa);
 8002968:	4a1c      	ldr	r2, [pc, #112]	; (80029dc <StartSensors3+0xd0>)
 800296a:	4b1e      	ldr	r3, [pc, #120]	; (80029e4 <StartSensors3+0xd8>)
 800296c:	ca07      	ldmia	r2, {r0, r1, r2}
 800296e:	f7fe fe1d 	bl	80015ac <MRT_LPS22HH_getPressure>
		  altitude_m = MRT_getAltitude(pressure_hPa); //Update altitude
 8002972:	4b1c      	ldr	r3, [pc, #112]	; (80029e4 <StartSensors3+0xd8>)
 8002974:	edd3 7a00 	vldr	s15, [r3]
 8002978:	eeb0 0a67 	vmov.f32	s0, s15
 800297c:	f001 fb74 	bl	8004068 <MRT_getAltitude>
 8002980:	eef0 7a40 	vmov.f32	s15, s0
 8002984:	4b18      	ldr	r3, [pc, #96]	; (80029e8 <StartSensors3+0xdc>)
 8002986:	edc3 7a00 	vstr	s15, [r3]
	  }
	  counter++;
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	3301      	adds	r3, #1
 800298e:	73fb      	strb	r3, [r7, #15]


	  //Poll propulsion sensors

	  //Thermocouple
	  Max31855_Read_Temp();
 8002990:	f005 fd0e 	bl	80083b0 <Max31855_Read_Temp>

	  //Pressure tank
	  transducer_pressure = MRT_prop_poll_pressure_transducer(&hadc1);
 8002994:	4815      	ldr	r0, [pc, #84]	; (80029ec <StartSensors3+0xe0>)
 8002996:	f001 fb23 	bl	8003fe0 <MRT_prop_poll_pressure_transducer>
 800299a:	eef0 7a40 	vmov.f32	s15, s0
 800299e:	4b14      	ldr	r3, [pc, #80]	; (80029f0 <StartSensors3+0xe4>)
 80029a0:	edc3 7a00 	vstr	s15, [r3]


	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 80029a4:	2200      	movs	r2, #0
 80029a6:	2102      	movs	r1, #2
 80029a8:	4804      	ldr	r0, [pc, #16]	; (80029bc <StartSensors3+0xb0>)
 80029aa:	f006 ff2d 	bl	8009808 <HAL_GPIO_WritePin>

	  osDelay(1000/POLL_FREQ);
 80029ae:	2014      	movs	r0, #20
 80029b0:	f013 fac3 	bl	8015f3a <osDelay>
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 80029b4:	e7b5      	b.n	8002922 <StartSensors3+0x16>
 80029b6:	bf00      	nop
 80029b8:	20006070 	.word	0x20006070
 80029bc:	40020800 	.word	0x40020800
 80029c0:	200069c8 	.word	0x200069c8
 80029c4:	200067cc 	.word	0x200067cc
 80029c8:	20006938 	.word	0x20006938
 80029cc:	20006a80 	.word	0x20006a80
 80029d0:	20000470 	.word	0x20000470
 80029d4:	2000047c 	.word	0x2000047c
 80029d8:	20000488 	.word	0x20000488
 80029dc:	20006a70 	.word	0x20006a70
 80029e0:	2000046c 	.word	0x2000046c
 80029e4:	20000468 	.word	0x20000468
 80029e8:	2000048c 	.word	0x2000048c
 80029ec:	20006784 	.word	0x20006784
 80029f0:	2000695c 	.word	0x2000695c

080029f4 <StartPrinting>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrinting */
void StartPrinting(void *argument)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b0c2      	sub	sp, #264	; 0x108
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	1d3b      	adds	r3, r7, #4
 80029fc:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartPrinting */

	#if !PRINTING_THREAD
	osThreadExit();
 80029fe:	f013 fa96 	bl	8015f2e <osThreadExit>
	...

08002a04 <StartWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchDog */
void StartWatchDog(void *argument)
{
 8002a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a06:	b0cb      	sub	sp, #300	; 0x12c
 8002a08:	af04      	add	r7, sp, #16
 8002a0a:	1d3b      	adds	r3, r7, #4
 8002a0c:	6018      	str	r0, [r3, #0]
	osThreadState_t thread_state;

  /* Infinite loop */
  for(;;)
  {
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8002a0e:	2201      	movs	r2, #1
 8002a10:	2104      	movs	r1, #4
 8002a12:	485d      	ldr	r0, [pc, #372]	; (8002b88 <StartWatchDog+0x184>)
 8002a14:	f006 fef8 	bl	8009808 <HAL_GPIO_WritePin>

	#if IWDG_ACTIVE
	HAL_IWDG_Refresh(&hiwdg);
 8002a18:	485c      	ldr	r0, [pc, #368]	; (8002b8c <StartWatchDog+0x188>)
 8002a1a:	f007 ffd9 	bl	800a9d0 <HAL_IWDG_Refresh>
	#endif

	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002a1e:	2200      	movs	r2, #0
 8002a20:	495b      	ldr	r1, [pc, #364]	; (8002b90 <StartWatchDog+0x18c>)
 8002a22:	485c      	ldr	r0, [pc, #368]	; (8002b94 <StartWatchDog+0x190>)
 8002a24:	f00a f956 	bl	800ccd4 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	495b      	ldr	r1, [pc, #364]	; (8002b98 <StartWatchDog+0x194>)
 8002a2c:	4859      	ldr	r0, [pc, #356]	; (8002b94 <StartWatchDog+0x190>)
 8002a2e:	f00a fa56 	bl	800cede <HAL_RTC_GetDate>

	 prev_hours = sTime.Hours;
 8002a32:	4b57      	ldr	r3, [pc, #348]	; (8002b90 <StartWatchDog+0x18c>)
 8002a34:	781a      	ldrb	r2, [r3, #0]
 8002a36:	4b59      	ldr	r3, [pc, #356]	; (8002b9c <StartWatchDog+0x198>)
 8002a38:	701a      	strb	r2, [r3, #0]
	 prev_min = sTime.Minutes;
 8002a3a:	4b55      	ldr	r3, [pc, #340]	; (8002b90 <StartWatchDog+0x18c>)
 8002a3c:	785a      	ldrb	r2, [r3, #1]
 8002a3e:	4b58      	ldr	r3, [pc, #352]	; (8002ba0 <StartWatchDog+0x19c>)
 8002a40:	701a      	strb	r2, [r3, #0]
	 prev_sec = sTime.Seconds;
 8002a42:	4b53      	ldr	r3, [pc, #332]	; (8002b90 <StartWatchDog+0x18c>)
 8002a44:	789a      	ldrb	r2, [r3, #2]
 8002a46:	4b57      	ldr	r3, [pc, #348]	; (8002ba4 <StartWatchDog+0x1a0>)
 8002a48:	701a      	strb	r2, [r3, #0]

	 memset(buffer, 0, TX_BUF_DIM);
 8002a4a:	f107 030c 	add.w	r3, r7, #12
 8002a4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a52:	2100      	movs	r1, #0
 8002a54:	4618      	mov	r0, r3
 8002a56:	f018 fd4f 	bl	801b4f8 <memset>
	 sprintf(buffer, "Time: %i:%i:%i	Date: \r\n %f\r\n", prev_hours,prev_min,prev_sec, altitude_m);
 8002a5a:	4b50      	ldr	r3, [pc, #320]	; (8002b9c <StartWatchDog+0x198>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	461d      	mov	r5, r3
 8002a60:	4b4f      	ldr	r3, [pc, #316]	; (8002ba0 <StartWatchDog+0x19c>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	461e      	mov	r6, r3
 8002a66:	4b4f      	ldr	r3, [pc, #316]	; (8002ba4 <StartWatchDog+0x1a0>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	461c      	mov	r4, r3
 8002a6c:	4b4e      	ldr	r3, [pc, #312]	; (8002ba8 <StartWatchDog+0x1a4>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fd fd89 	bl	8000588 <__aeabi_f2d>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	f107 000c 	add.w	r0, r7, #12
 8002a7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002a82:	9400      	str	r4, [sp, #0]
 8002a84:	4633      	mov	r3, r6
 8002a86:	462a      	mov	r2, r5
 8002a88:	4948      	ldr	r1, [pc, #288]	; (8002bac <StartWatchDog+0x1a8>)
 8002a8a:	f01a f831 	bl	801caf0 <siprintf>
	 HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 8002a8e:	f107 030c 	add.w	r3, r7, #12
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fd fbb6 	bl	8000204 <strlen>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	f107 010c 	add.w	r1, r7, #12
 8002aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa4:	4842      	ldr	r0, [pc, #264]	; (8002bb0 <StartWatchDog+0x1ac>)
 8002aa6:	f00c f97a 	bl	800ed9e <HAL_UART_Transmit>
	   * does it at the same time or it's a hardfault crash
	   *
	   * Moved the other code where we write to external flash to this thread (when going to sleep)
	   */
	  //Save the time
	  MRT_saveRTCTime();
 8002aaa:	f001 fa53 	bl	8003f54 <MRT_saveRTCTime>

	  //Check if it's sleep time
	  if (flagA==1){
 8002aae:	4b41      	ldr	r3, [pc, #260]	; (8002bb4 <StartWatchDog+0x1b0>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d111      	bne.n	8002ada <StartWatchDog+0xd6>
		//Update iwdg_flag
		iwdg_flag = 1;
 8002ab6:	4b40      	ldr	r3, [pc, #256]	; (8002bb8 <StartWatchDog+0x1b4>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8002abc:	4b3e      	ldr	r3, [pc, #248]	; (8002bb8 <StartWatchDog+0x1b4>)
 8002abe:	781a      	ldrb	r2, [r3, #0]
 8002ac0:	4b3e      	ldr	r3, [pc, #248]	; (8002bbc <StartWatchDog+0x1b8>)
 8002ac2:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(1);
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	f001 fd77 	bl	80045b8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002aca:	2303      	movs	r3, #3
 8002acc:	2200      	movs	r2, #0
 8002ace:	2101      	movs	r1, #1
 8002ad0:	483a      	ldr	r0, [pc, #232]	; (8002bbc <StartWatchDog+0x1b8>)
 8002ad2:	f001 febb 	bl	800484c <W25qxx_WriteSector>

		//Reset to deactivate IWDG
		NVIC_SystemReset();
 8002ad6:	f7fe fdf9 	bl	80016cc <__NVIC_SystemReset>
	  }


	  //Check each thread state
	  for (int i=0; i < NUMBER_OF_THREADS;i++){
 8002ada:	2300      	movs	r3, #0
 8002adc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002ae0:	e043      	b.n	8002b6a <StartWatchDog+0x166>
		  thread_state = osThreadGetState(threadID[i]);
 8002ae2:	4a37      	ldr	r2, [pc, #220]	; (8002bc0 <StartWatchDog+0x1bc>)
 8002ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f013 f9c1 	bl	8015e74 <osThreadGetState>
 8002af2:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

		  if (thread_state == osThreadInactive ||
 8002af6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d007      	beq.n	8002b0e <StartWatchDog+0x10a>
 8002afe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002b02:	2b03      	cmp	r3, #3
 8002b04:	d003      	beq.n	8002b0e <StartWatchDog+0x10a>
		      thread_state == osThreadBlocked  ||
 8002b06:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d120      	bne.n	8002b50 <StartWatchDog+0x14c>
		      thread_state == osThreadTerminated){
			  uint8_t ejection_stage = 5; //TODO invented a random variable with a random value
 8002b0e:	2305      	movs	r3, #5
 8002b10:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			  if (i==1 && ejection_stage < 5){
 8002b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d10c      	bne.n	8002b36 <StartWatchDog+0x132>
 8002b1c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d808      	bhi.n	8002b36 <StartWatchDog+0x132>
				 osThreadResume(threadID[i]);
 8002b24:	4a26      	ldr	r2, [pc, #152]	; (8002bc0 <StartWatchDog+0x1bc>)
 8002b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f013 f9dc 	bl	8015eec <osThreadResume>
		      thread_state == osThreadTerminated){
 8002b34:	e013      	b.n	8002b5e <StartWatchDog+0x15a>
			  }
			  else if (i!=1){
 8002b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d00f      	beq.n	8002b5e <StartWatchDog+0x15a>
				 osThreadResume(threadID[i]);
 8002b3e:	4a20      	ldr	r2, [pc, #128]	; (8002bc0 <StartWatchDog+0x1bc>)
 8002b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f013 f9cf 	bl	8015eec <osThreadResume>
		      thread_state == osThreadTerminated){
 8002b4e:	e006      	b.n	8002b5e <StartWatchDog+0x15a>
			  }
		  }

		  else if (thread_state == osThreadError){
 8002b50:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b58:	d102      	bne.n	8002b60 <StartWatchDog+0x15c>
			  NVIC_SystemReset();
 8002b5a:	f7fe fdb7 	bl	80016cc <__NVIC_SystemReset>
		      thread_state == osThreadTerminated){
 8002b5e:	bf00      	nop
	  for (int i=0; i < NUMBER_OF_THREADS;i++){
 8002b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b64:	3301      	adds	r3, #1
 8002b66:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	ddb7      	ble.n	8002ae2 <StartWatchDog+0xde>
		  else if (thread_state == osThreadReserved){ TODO not sure what is this state
		  }
		  */
	  }

	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8002b72:	2200      	movs	r2, #0
 8002b74:	2104      	movs	r1, #4
 8002b76:	4804      	ldr	r0, [pc, #16]	; (8002b88 <StartWatchDog+0x184>)
 8002b78:	f006 fe46 	bl	8009808 <HAL_GPIO_WritePin>

	  osDelay(1000/WD_FREQ);
 8002b7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b80:	f013 f9db 	bl	8015f3a <osDelay>
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8002b84:	e743      	b.n	8002a0e <StartWatchDog+0xa>
 8002b86:	bf00      	nop
 8002b88:	40020800 	.word	0x40020800
 8002b8c:	20006308 	.word	0x20006308
 8002b90:	200006d0 	.word	0x200006d0
 8002b94:	2000693c 	.word	0x2000693c
 8002b98:	200006e4 	.word	0x200006e4
 8002b9c:	2000049c 	.word	0x2000049c
 8002ba0:	2000049d 	.word	0x2000049d
 8002ba4:	2000049e 	.word	0x2000049e
 8002ba8:	2000048c 	.word	0x2000048c
 8002bac:	0802133c 	.word	0x0802133c
 8002bb0:	20005ed8 	.word	0x20005ed8
 8002bb4:	20000710 	.word	0x20000710
 8002bb8:	2000049b 	.word	0x2000049b
 8002bbc:	2000606c 	.word	0x2000606c
 8002bc0:	20006070 	.word	0x20006070

08002bc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a04      	ldr	r2, [pc, #16]	; (8002be4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d101      	bne.n	8002bda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002bd6:	f005 feeb 	bl	80089b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40001000 	.word	0x40001000

08002be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
	...

08002bf8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	607b      	str	r3, [r7, #4]
 8002c02:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <HAL_MspInit+0x54>)
 8002c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c06:	4a11      	ldr	r2, [pc, #68]	; (8002c4c <HAL_MspInit+0x54>)
 8002c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c0e:	4b0f      	ldr	r3, [pc, #60]	; (8002c4c <HAL_MspInit+0x54>)
 8002c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c16:	607b      	str	r3, [r7, #4]
 8002c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	603b      	str	r3, [r7, #0]
 8002c1e:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <HAL_MspInit+0x54>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	4a0a      	ldr	r2, [pc, #40]	; (8002c4c <HAL_MspInit+0x54>)
 8002c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c28:	6413      	str	r3, [r2, #64]	; 0x40
 8002c2a:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <HAL_MspInit+0x54>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c32:	603b      	str	r3, [r7, #0]
 8002c34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c36:	2200      	movs	r2, #0
 8002c38:	210f      	movs	r1, #15
 8002c3a:	f06f 0001 	mvn.w	r0, #1
 8002c3e:	f006 fbe7 	bl	8009410 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40023800 	.word	0x40023800

08002c50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08a      	sub	sp, #40	; 0x28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c58:	f107 0314 	add.w	r3, r7, #20
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a17      	ldr	r2, [pc, #92]	; (8002ccc <HAL_ADC_MspInit+0x7c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d127      	bne.n	8002cc2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	613b      	str	r3, [r7, #16]
 8002c76:	4b16      	ldr	r3, [pc, #88]	; (8002cd0 <HAL_ADC_MspInit+0x80>)
 8002c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7a:	4a15      	ldr	r2, [pc, #84]	; (8002cd0 <HAL_ADC_MspInit+0x80>)
 8002c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c80:	6453      	str	r3, [r2, #68]	; 0x44
 8002c82:	4b13      	ldr	r3, [pc, #76]	; (8002cd0 <HAL_ADC_MspInit+0x80>)
 8002c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8a:	613b      	str	r3, [r7, #16]
 8002c8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	4b0f      	ldr	r3, [pc, #60]	; (8002cd0 <HAL_ADC_MspInit+0x80>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	4a0e      	ldr	r2, [pc, #56]	; (8002cd0 <HAL_ADC_MspInit+0x80>)
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9e:	4b0c      	ldr	r3, [pc, #48]	; (8002cd0 <HAL_ADC_MspInit+0x80>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 8002caa:	2340      	movs	r3, #64	; 0x40
 8002cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 8002cb6:	f107 0314 	add.w	r3, r7, #20
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4805      	ldr	r0, [pc, #20]	; (8002cd4 <HAL_ADC_MspInit+0x84>)
 8002cbe:	f006 fbdf 	bl	8009480 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002cc2:	bf00      	nop
 8002cc4:	3728      	adds	r7, #40	; 0x28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40012000 	.word	0x40012000
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	40020000 	.word	0x40020000

08002cd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08e      	sub	sp, #56	; 0x38
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	60da      	str	r2, [r3, #12]
 8002cee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a5c      	ldr	r2, [pc, #368]	; (8002e68 <HAL_I2C_MspInit+0x190>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d12d      	bne.n	8002d56 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	623b      	str	r3, [r7, #32]
 8002cfe:	4b5b      	ldr	r3, [pc, #364]	; (8002e6c <HAL_I2C_MspInit+0x194>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	4a5a      	ldr	r2, [pc, #360]	; (8002e6c <HAL_I2C_MspInit+0x194>)
 8002d04:	f043 0302 	orr.w	r3, r3, #2
 8002d08:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0a:	4b58      	ldr	r3, [pc, #352]	; (8002e6c <HAL_I2C_MspInit+0x194>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	623b      	str	r3, [r7, #32]
 8002d14:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d1c:	2312      	movs	r3, #18
 8002d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d20:	2301      	movs	r3, #1
 8002d22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d24:	2303      	movs	r3, #3
 8002d26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d28:	2304      	movs	r3, #4
 8002d2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d30:	4619      	mov	r1, r3
 8002d32:	484f      	ldr	r0, [pc, #316]	; (8002e70 <HAL_I2C_MspInit+0x198>)
 8002d34:	f006 fba4 	bl	8009480 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d38:	2300      	movs	r3, #0
 8002d3a:	61fb      	str	r3, [r7, #28]
 8002d3c:	4b4b      	ldr	r3, [pc, #300]	; (8002e6c <HAL_I2C_MspInit+0x194>)
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	4a4a      	ldr	r2, [pc, #296]	; (8002e6c <HAL_I2C_MspInit+0x194>)
 8002d42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d46:	6413      	str	r3, [r2, #64]	; 0x40
 8002d48:	4b48      	ldr	r3, [pc, #288]	; (8002e6c <HAL_I2C_MspInit+0x194>)
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d50:	61fb      	str	r3, [r7, #28]
 8002d52:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002d54:	e083      	b.n	8002e5e <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a46      	ldr	r2, [pc, #280]	; (8002e74 <HAL_I2C_MspInit+0x19c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d12d      	bne.n	8002dbc <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d60:	2300      	movs	r3, #0
 8002d62:	61bb      	str	r3, [r7, #24]
 8002d64:	4b41      	ldr	r3, [pc, #260]	; (8002e6c <HAL_I2C_MspInit+0x194>)
 8002d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d68:	4a40      	ldr	r2, [pc, #256]	; (8002e6c <HAL_I2C_MspInit+0x194>)
 8002d6a:	f043 0302 	orr.w	r3, r3, #2
 8002d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d70:	4b3e      	ldr	r3, [pc, #248]	; (8002e6c <HAL_I2C_MspInit+0x194>)
 8002d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	61bb      	str	r3, [r7, #24]
 8002d7a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002d7c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d82:	2312      	movs	r3, #18
 8002d84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d86:	2301      	movs	r3, #1
 8002d88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002d8e:	2304      	movs	r3, #4
 8002d90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d96:	4619      	mov	r1, r3
 8002d98:	4835      	ldr	r0, [pc, #212]	; (8002e70 <HAL_I2C_MspInit+0x198>)
 8002d9a:	f006 fb71 	bl	8009480 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	4b32      	ldr	r3, [pc, #200]	; (8002e6c <HAL_I2C_MspInit+0x194>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	4a31      	ldr	r2, [pc, #196]	; (8002e6c <HAL_I2C_MspInit+0x194>)
 8002da8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dac:	6413      	str	r3, [r2, #64]	; 0x40
 8002dae:	4b2f      	ldr	r3, [pc, #188]	; (8002e6c <HAL_I2C_MspInit+0x194>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	697b      	ldr	r3, [r7, #20]
}
 8002dba:	e050      	b.n	8002e5e <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a2d      	ldr	r2, [pc, #180]	; (8002e78 <HAL_I2C_MspInit+0x1a0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d14b      	bne.n	8002e5e <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	4b28      	ldr	r3, [pc, #160]	; (8002e6c <HAL_I2C_MspInit+0x194>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	4a27      	ldr	r2, [pc, #156]	; (8002e6c <HAL_I2C_MspInit+0x194>)
 8002dd0:	f043 0304 	orr.w	r3, r3, #4
 8002dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd6:	4b25      	ldr	r3, [pc, #148]	; (8002e6c <HAL_I2C_MspInit+0x194>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	f003 0304 	and.w	r3, r3, #4
 8002dde:	613b      	str	r3, [r7, #16]
 8002de0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de2:	2300      	movs	r3, #0
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	4b21      	ldr	r3, [pc, #132]	; (8002e6c <HAL_I2C_MspInit+0x194>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	4a20      	ldr	r2, [pc, #128]	; (8002e6c <HAL_I2C_MspInit+0x194>)
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	6313      	str	r3, [r2, #48]	; 0x30
 8002df2:	4b1e      	ldr	r3, [pc, #120]	; (8002e6c <HAL_I2C_MspInit+0x194>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002dfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e04:	2312      	movs	r3, #18
 8002e06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e10:	2304      	movs	r3, #4
 8002e12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4818      	ldr	r0, [pc, #96]	; (8002e7c <HAL_I2C_MspInit+0x1a4>)
 8002e1c:	f006 fb30 	bl	8009480 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e26:	2312      	movs	r3, #18
 8002e28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e32:	2304      	movs	r3, #4
 8002e34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4810      	ldr	r0, [pc, #64]	; (8002e80 <HAL_I2C_MspInit+0x1a8>)
 8002e3e:	f006 fb1f 	bl	8009480 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	60bb      	str	r3, [r7, #8]
 8002e46:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <HAL_I2C_MspInit+0x194>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	4a08      	ldr	r2, [pc, #32]	; (8002e6c <HAL_I2C_MspInit+0x194>)
 8002e4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e50:	6413      	str	r3, [r2, #64]	; 0x40
 8002e52:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <HAL_I2C_MspInit+0x194>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e5a:	60bb      	str	r3, [r7, #8]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
}
 8002e5e:	bf00      	nop
 8002e60:	3738      	adds	r7, #56	; 0x38
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40005400 	.word	0x40005400
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	40020400 	.word	0x40020400
 8002e74:	40005800 	.word	0x40005800
 8002e78:	40005c00 	.word	0x40005c00
 8002e7c:	40020800 	.word	0x40020800
 8002e80:	40020000 	.word	0x40020000

08002e84 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08e      	sub	sp, #56	; 0x38
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e8c:	f107 0308 	add.w	r3, r7, #8
 8002e90:	2230      	movs	r2, #48	; 0x30
 8002e92:	2100      	movs	r1, #0
 8002e94:	4618      	mov	r0, r3
 8002e96:	f018 fb2f 	bl	801b4f8 <memset>
  if(hrtc->Instance==RTC)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a10      	ldr	r2, [pc, #64]	; (8002ee0 <HAL_RTC_MspInit+0x5c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d119      	bne.n	8002ed8 <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002ea4:	2320      	movs	r3, #32
 8002ea6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eac:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002eae:	f107 0308 	add.w	r3, r7, #8
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f009 fc02 	bl	800c6bc <HAL_RCCEx_PeriphCLKConfig>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002ebe:	f7ff fe93 	bl	8002be8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ec2:	4b08      	ldr	r3, [pc, #32]	; (8002ee4 <HAL_RTC_MspInit+0x60>)
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8002ec8:	2200      	movs	r2, #0
 8002eca:	2105      	movs	r1, #5
 8002ecc:	2029      	movs	r0, #41	; 0x29
 8002ece:	f006 fa9f 	bl	8009410 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002ed2:	2029      	movs	r0, #41	; 0x29
 8002ed4:	f006 fab8 	bl	8009448 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002ed8:	bf00      	nop
 8002eda:	3738      	adds	r7, #56	; 0x38
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40002800 	.word	0x40002800
 8002ee4:	42470e3c 	.word	0x42470e3c

08002ee8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08e      	sub	sp, #56	; 0x38
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a4c      	ldr	r2, [pc, #304]	; (8003038 <HAL_SPI_MspInit+0x150>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d12d      	bne.n	8002f66 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	623b      	str	r3, [r7, #32]
 8002f0e:	4b4b      	ldr	r3, [pc, #300]	; (800303c <HAL_SPI_MspInit+0x154>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	4a4a      	ldr	r2, [pc, #296]	; (800303c <HAL_SPI_MspInit+0x154>)
 8002f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f18:	6413      	str	r3, [r2, #64]	; 0x40
 8002f1a:	4b48      	ldr	r3, [pc, #288]	; (800303c <HAL_SPI_MspInit+0x154>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f22:	623b      	str	r3, [r7, #32]
 8002f24:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]
 8002f2a:	4b44      	ldr	r3, [pc, #272]	; (800303c <HAL_SPI_MspInit+0x154>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	4a43      	ldr	r2, [pc, #268]	; (800303c <HAL_SPI_MspInit+0x154>)
 8002f30:	f043 0302 	orr.w	r3, r3, #2
 8002f34:	6313      	str	r3, [r2, #48]	; 0x30
 8002f36:	4b41      	ldr	r3, [pc, #260]	; (800303c <HAL_SPI_MspInit+0x154>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	61fb      	str	r3, [r7, #28]
 8002f40:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002f42:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f50:	2303      	movs	r3, #3
 8002f52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f54:	2305      	movs	r3, #5
 8002f56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4838      	ldr	r0, [pc, #224]	; (8003040 <HAL_SPI_MspInit+0x158>)
 8002f60:	f006 fa8e 	bl	8009480 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002f64:	e064      	b.n	8003030 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a36      	ldr	r2, [pc, #216]	; (8003044 <HAL_SPI_MspInit+0x15c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d12d      	bne.n	8002fcc <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002f70:	2300      	movs	r3, #0
 8002f72:	61bb      	str	r3, [r7, #24]
 8002f74:	4b31      	ldr	r3, [pc, #196]	; (800303c <HAL_SPI_MspInit+0x154>)
 8002f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f78:	4a30      	ldr	r2, [pc, #192]	; (800303c <HAL_SPI_MspInit+0x154>)
 8002f7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f7e:	6453      	str	r3, [r2, #68]	; 0x44
 8002f80:	4b2e      	ldr	r3, [pc, #184]	; (800303c <HAL_SPI_MspInit+0x154>)
 8002f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f88:	61bb      	str	r3, [r7, #24]
 8002f8a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	4b2a      	ldr	r3, [pc, #168]	; (800303c <HAL_SPI_MspInit+0x154>)
 8002f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f94:	4a29      	ldr	r2, [pc, #164]	; (800303c <HAL_SPI_MspInit+0x154>)
 8002f96:	f043 0310 	orr.w	r3, r3, #16
 8002f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9c:	4b27      	ldr	r3, [pc, #156]	; (800303c <HAL_SPI_MspInit+0x154>)
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	f003 0310 	and.w	r3, r3, #16
 8002fa4:	617b      	str	r3, [r7, #20]
 8002fa6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002fa8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002fba:	2305      	movs	r3, #5
 8002fbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4820      	ldr	r0, [pc, #128]	; (8003048 <HAL_SPI_MspInit+0x160>)
 8002fc6:	f006 fa5b 	bl	8009480 <HAL_GPIO_Init>
}
 8002fca:	e031      	b.n	8003030 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a1e      	ldr	r2, [pc, #120]	; (800304c <HAL_SPI_MspInit+0x164>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d12c      	bne.n	8003030 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	4b18      	ldr	r3, [pc, #96]	; (800303c <HAL_SPI_MspInit+0x154>)
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fde:	4a17      	ldr	r2, [pc, #92]	; (800303c <HAL_SPI_MspInit+0x154>)
 8002fe0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fe6:	4b15      	ldr	r3, [pc, #84]	; (800303c <HAL_SPI_MspInit+0x154>)
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	4b11      	ldr	r3, [pc, #68]	; (800303c <HAL_SPI_MspInit+0x154>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	4a10      	ldr	r2, [pc, #64]	; (800303c <HAL_SPI_MspInit+0x154>)
 8002ffc:	f043 0320 	orr.w	r3, r3, #32
 8003000:	6313      	str	r3, [r2, #48]	; 0x30
 8003002:	4b0e      	ldr	r3, [pc, #56]	; (800303c <HAL_SPI_MspInit+0x154>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	f003 0320 	and.w	r3, r3, #32
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800300e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003014:	2302      	movs	r3, #2
 8003016:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003018:	2300      	movs	r3, #0
 800301a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800301c:	2303      	movs	r3, #3
 800301e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003020:	2305      	movs	r3, #5
 8003022:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003028:	4619      	mov	r1, r3
 800302a:	4809      	ldr	r0, [pc, #36]	; (8003050 <HAL_SPI_MspInit+0x168>)
 800302c:	f006 fa28 	bl	8009480 <HAL_GPIO_Init>
}
 8003030:	bf00      	nop
 8003032:	3738      	adds	r7, #56	; 0x38
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40003800 	.word	0x40003800
 800303c:	40023800 	.word	0x40023800
 8003040:	40020400 	.word	0x40020400
 8003044:	40013400 	.word	0x40013400
 8003048:	40021000 	.word	0x40021000
 800304c:	40015000 	.word	0x40015000
 8003050:	40021400 	.word	0x40021400

08003054 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003064:	d10d      	bne.n	8003082 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003066:	2300      	movs	r3, #0
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	4b09      	ldr	r3, [pc, #36]	; (8003090 <HAL_TIM_PWM_MspInit+0x3c>)
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	4a08      	ldr	r2, [pc, #32]	; (8003090 <HAL_TIM_PWM_MspInit+0x3c>)
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	6413      	str	r3, [r2, #64]	; 0x40
 8003076:	4b06      	ldr	r3, [pc, #24]	; (8003090 <HAL_TIM_PWM_MspInit+0x3c>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003082:	bf00      	nop
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	40023800 	.word	0x40023800

08003094 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b088      	sub	sp, #32
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800309c:	f107 030c 	add.w	r3, r7, #12
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	60da      	str	r2, [r3, #12]
 80030aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b4:	d11d      	bne.n	80030f2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	4b10      	ldr	r3, [pc, #64]	; (80030fc <HAL_TIM_MspPostInit+0x68>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	4a0f      	ldr	r2, [pc, #60]	; (80030fc <HAL_TIM_MspPostInit+0x68>)
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	6313      	str	r3, [r2, #48]	; 0x30
 80030c6:	4b0d      	ldr	r3, [pc, #52]	; (80030fc <HAL_TIM_MspPostInit+0x68>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	60bb      	str	r3, [r7, #8]
 80030d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 80030d2:	2304      	movs	r3, #4
 80030d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d6:	2302      	movs	r3, #2
 80030d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030da:	2300      	movs	r3, #0
 80030dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030de:	2300      	movs	r3, #0
 80030e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030e2:	2301      	movs	r3, #1
 80030e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80030e6:	f107 030c 	add.w	r3, r7, #12
 80030ea:	4619      	mov	r1, r3
 80030ec:	4804      	ldr	r0, [pc, #16]	; (8003100 <HAL_TIM_MspPostInit+0x6c>)
 80030ee:	f006 f9c7 	bl	8009480 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80030f2:	bf00      	nop
 80030f4:	3720      	adds	r7, #32
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40023800 	.word	0x40023800
 8003100:	40020000 	.word	0x40020000

08003104 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08e      	sub	sp, #56	; 0x38
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800310c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	605a      	str	r2, [r3, #4]
 8003116:	609a      	str	r2, [r3, #8]
 8003118:	60da      	str	r2, [r3, #12]
 800311a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a4b      	ldr	r2, [pc, #300]	; (8003250 <HAL_UART_MspInit+0x14c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d12c      	bne.n	8003180 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	623b      	str	r3, [r7, #32]
 800312a:	4b4a      	ldr	r3, [pc, #296]	; (8003254 <HAL_UART_MspInit+0x150>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	4a49      	ldr	r2, [pc, #292]	; (8003254 <HAL_UART_MspInit+0x150>)
 8003130:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003134:	6413      	str	r3, [r2, #64]	; 0x40
 8003136:	4b47      	ldr	r3, [pc, #284]	; (8003254 <HAL_UART_MspInit+0x150>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800313e:	623b      	str	r3, [r7, #32]
 8003140:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003142:	2300      	movs	r3, #0
 8003144:	61fb      	str	r3, [r7, #28]
 8003146:	4b43      	ldr	r3, [pc, #268]	; (8003254 <HAL_UART_MspInit+0x150>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	4a42      	ldr	r2, [pc, #264]	; (8003254 <HAL_UART_MspInit+0x150>)
 800314c:	f043 0310 	orr.w	r3, r3, #16
 8003150:	6313      	str	r3, [r2, #48]	; 0x30
 8003152:	4b40      	ldr	r3, [pc, #256]	; (8003254 <HAL_UART_MspInit+0x150>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	f003 0310 	and.w	r3, r3, #16
 800315a:	61fb      	str	r3, [r7, #28]
 800315c:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 800315e:	2303      	movs	r3, #3
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003162:	2302      	movs	r3, #2
 8003164:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003166:	2300      	movs	r3, #0
 8003168:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800316a:	2303      	movs	r3, #3
 800316c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800316e:	2308      	movs	r3, #8
 8003170:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003176:	4619      	mov	r1, r3
 8003178:	4837      	ldr	r0, [pc, #220]	; (8003258 <HAL_UART_MspInit+0x154>)
 800317a:	f006 f981 	bl	8009480 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800317e:	e063      	b.n	8003248 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a35      	ldr	r2, [pc, #212]	; (800325c <HAL_UART_MspInit+0x158>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d12d      	bne.n	80031e6 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800318a:	2300      	movs	r3, #0
 800318c:	61bb      	str	r3, [r7, #24]
 800318e:	4b31      	ldr	r3, [pc, #196]	; (8003254 <HAL_UART_MspInit+0x150>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	4a30      	ldr	r2, [pc, #192]	; (8003254 <HAL_UART_MspInit+0x150>)
 8003194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003198:	6413      	str	r3, [r2, #64]	; 0x40
 800319a:	4b2e      	ldr	r3, [pc, #184]	; (8003254 <HAL_UART_MspInit+0x150>)
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031a2:	61bb      	str	r3, [r7, #24]
 80031a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031a6:	2300      	movs	r3, #0
 80031a8:	617b      	str	r3, [r7, #20]
 80031aa:	4b2a      	ldr	r3, [pc, #168]	; (8003254 <HAL_UART_MspInit+0x150>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	4a29      	ldr	r2, [pc, #164]	; (8003254 <HAL_UART_MspInit+0x150>)
 80031b0:	f043 0308 	orr.w	r3, r3, #8
 80031b4:	6313      	str	r3, [r2, #48]	; 0x30
 80031b6:	4b27      	ldr	r3, [pc, #156]	; (8003254 <HAL_UART_MspInit+0x150>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 80031c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c8:	2302      	movs	r3, #2
 80031ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d0:	2303      	movs	r3, #3
 80031d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80031d4:	2307      	movs	r3, #7
 80031d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031dc:	4619      	mov	r1, r3
 80031de:	4820      	ldr	r0, [pc, #128]	; (8003260 <HAL_UART_MspInit+0x15c>)
 80031e0:	f006 f94e 	bl	8009480 <HAL_GPIO_Init>
}
 80031e4:	e030      	b.n	8003248 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a1e      	ldr	r2, [pc, #120]	; (8003264 <HAL_UART_MspInit+0x160>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d12b      	bne.n	8003248 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 80031f0:	2300      	movs	r3, #0
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	4b17      	ldr	r3, [pc, #92]	; (8003254 <HAL_UART_MspInit+0x150>)
 80031f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f8:	4a16      	ldr	r2, [pc, #88]	; (8003254 <HAL_UART_MspInit+0x150>)
 80031fa:	f043 0320 	orr.w	r3, r3, #32
 80031fe:	6453      	str	r3, [r2, #68]	; 0x44
 8003200:	4b14      	ldr	r3, [pc, #80]	; (8003254 <HAL_UART_MspInit+0x150>)
 8003202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003204:	f003 0320 	and.w	r3, r3, #32
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800320c:	2300      	movs	r3, #0
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	4b10      	ldr	r3, [pc, #64]	; (8003254 <HAL_UART_MspInit+0x150>)
 8003212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003214:	4a0f      	ldr	r2, [pc, #60]	; (8003254 <HAL_UART_MspInit+0x150>)
 8003216:	f043 0304 	orr.w	r3, r3, #4
 800321a:	6313      	str	r3, [r2, #48]	; 0x30
 800321c:	4b0d      	ldr	r3, [pc, #52]	; (8003254 <HAL_UART_MspInit+0x150>)
 800321e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8003228:	23c0      	movs	r3, #192	; 0xc0
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800322c:	2302      	movs	r3, #2
 800322e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003230:	2300      	movs	r3, #0
 8003232:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003234:	2303      	movs	r3, #3
 8003236:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003238:	2308      	movs	r3, #8
 800323a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800323c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003240:	4619      	mov	r1, r3
 8003242:	4809      	ldr	r0, [pc, #36]	; (8003268 <HAL_UART_MspInit+0x164>)
 8003244:	f006 f91c 	bl	8009480 <HAL_GPIO_Init>
}
 8003248:	bf00      	nop
 800324a:	3738      	adds	r7, #56	; 0x38
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40007c00 	.word	0x40007c00
 8003254:	40023800 	.word	0x40023800
 8003258:	40021000 	.word	0x40021000
 800325c:	40004800 	.word	0x40004800
 8003260:	40020c00 	.word	0x40020c00
 8003264:	40011400 	.word	0x40011400
 8003268:	40020800 	.word	0x40020800

0800326c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08c      	sub	sp, #48	; 0x30
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003274:	2300      	movs	r3, #0
 8003276:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800327c:	2200      	movs	r2, #0
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	2036      	movs	r0, #54	; 0x36
 8003282:	f006 f8c5 	bl	8009410 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003286:	2036      	movs	r0, #54	; 0x36
 8003288:	f006 f8de 	bl	8009448 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800328c:	2300      	movs	r3, #0
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	4b1f      	ldr	r3, [pc, #124]	; (8003310 <HAL_InitTick+0xa4>)
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	4a1e      	ldr	r2, [pc, #120]	; (8003310 <HAL_InitTick+0xa4>)
 8003296:	f043 0310 	orr.w	r3, r3, #16
 800329a:	6413      	str	r3, [r2, #64]	; 0x40
 800329c:	4b1c      	ldr	r3, [pc, #112]	; (8003310 <HAL_InitTick+0xa4>)
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	f003 0310 	and.w	r3, r3, #16
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80032a8:	f107 0210 	add.w	r2, r7, #16
 80032ac:	f107 0314 	add.w	r3, r7, #20
 80032b0:	4611      	mov	r1, r2
 80032b2:	4618      	mov	r0, r3
 80032b4:	f009 f9d0 	bl	800c658 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80032b8:	f009 f9a6 	bl	800c608 <HAL_RCC_GetPCLK1Freq>
 80032bc:	4603      	mov	r3, r0
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80032c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c4:	4a13      	ldr	r2, [pc, #76]	; (8003314 <HAL_InitTick+0xa8>)
 80032c6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ca:	0c9b      	lsrs	r3, r3, #18
 80032cc:	3b01      	subs	r3, #1
 80032ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80032d0:	4b11      	ldr	r3, [pc, #68]	; (8003318 <HAL_InitTick+0xac>)
 80032d2:	4a12      	ldr	r2, [pc, #72]	; (800331c <HAL_InitTick+0xb0>)
 80032d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80032d6:	4b10      	ldr	r3, [pc, #64]	; (8003318 <HAL_InitTick+0xac>)
 80032d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80032dc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80032de:	4a0e      	ldr	r2, [pc, #56]	; (8003318 <HAL_InitTick+0xac>)
 80032e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80032e4:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <HAL_InitTick+0xac>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ea:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <HAL_InitTick+0xac>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80032f0:	4809      	ldr	r0, [pc, #36]	; (8003318 <HAL_InitTick+0xac>)
 80032f2:	f00a ff1b 	bl	800e12c <HAL_TIM_Base_Init>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d104      	bne.n	8003306 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80032fc:	4806      	ldr	r0, [pc, #24]	; (8003318 <HAL_InitTick+0xac>)
 80032fe:	f00a ff6f 	bl	800e1e0 <HAL_TIM_Base_Start_IT>
 8003302:	4603      	mov	r3, r0
 8003304:	e000      	b.n	8003308 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
}
 8003308:	4618      	mov	r0, r3
 800330a:	3730      	adds	r7, #48	; 0x30
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40023800 	.word	0x40023800
 8003314:	431bde83 	.word	0x431bde83
 8003318:	20006cc8 	.word	0x20006cc8
 800331c:	40001000 	.word	0x40001000

08003320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003324:	bf00      	nop
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800332e:	b480      	push	{r7}
 8003330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003332:	e7fe      	b.n	8003332 <HardFault_Handler+0x4>

08003334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003338:	e7fe      	b.n	8003338 <MemManage_Handler+0x4>

0800333a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800333a:	b480      	push	{r7}
 800333c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800333e:	e7fe      	b.n	800333e <BusFault_Handler+0x4>

08003340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003344:	e7fe      	b.n	8003344 <UsageFault_Handler+0x4>

08003346 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003346:	b480      	push	{r7}
 8003348:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800334a:	bf00      	nop
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003358:	2001      	movs	r0, #1
 800335a:	f006 fa6f 	bl	800983c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800335e:	bf00      	nop
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003368:	4802      	ldr	r0, [pc, #8]	; (8003374 <RTC_Alarm_IRQHandler+0x10>)
 800336a:	f009 ff3f 	bl	800d1ec <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800336e:	bf00      	nop
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	2000693c 	.word	0x2000693c

08003378 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800337c:	4802      	ldr	r0, [pc, #8]	; (8003388 <TIM6_DAC_IRQHandler+0x10>)
 800337e:	f00a ffee 	bl	800e35e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	20006cc8 	.word	0x20006cc8

0800338c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003390:	4802      	ldr	r0, [pc, #8]	; (800339c <OTG_FS_IRQHandler+0x10>)
 8003392:	f007 fc7d 	bl	800ac90 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003396:	bf00      	nop
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20008bbc 	.word	0x20008bbc

080033a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
	return 1;
 80033a4:	2301      	movs	r3, #1
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <_kill>:

int _kill(int pid, int sig)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80033ba:	f017 fe23 	bl	801b004 <__errno>
 80033be:	4603      	mov	r3, r0
 80033c0:	2216      	movs	r2, #22
 80033c2:	601a      	str	r2, [r3, #0]
	return -1;
 80033c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <_exit>:

void _exit (int status)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80033d8:	f04f 31ff 	mov.w	r1, #4294967295
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7ff ffe7 	bl	80033b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80033e2:	e7fe      	b.n	80033e2 <_exit+0x12>

080033e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	e00a      	b.n	800340c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80033f6:	f3af 8000 	nop.w
 80033fa:	4601      	mov	r1, r0
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	60ba      	str	r2, [r7, #8]
 8003402:	b2ca      	uxtb	r2, r1
 8003404:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	3301      	adds	r3, #1
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	429a      	cmp	r2, r3
 8003412:	dbf0      	blt.n	80033f6 <_read+0x12>
	}

return len;
 8003414:	687b      	ldr	r3, [r7, #4]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b086      	sub	sp, #24
 8003422:	af00      	add	r7, sp, #0
 8003424:	60f8      	str	r0, [r7, #12]
 8003426:	60b9      	str	r1, [r7, #8]
 8003428:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800342a:	2300      	movs	r3, #0
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	e009      	b.n	8003444 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	1c5a      	adds	r2, r3, #1
 8003434:	60ba      	str	r2, [r7, #8]
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	3301      	adds	r3, #1
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	429a      	cmp	r2, r3
 800344a:	dbf1      	blt.n	8003430 <_write+0x12>
	}
	return len;
 800344c:	687b      	ldr	r3, [r7, #4]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <_close>:

int _close(int file)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
	return -1;
 800345e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003462:	4618      	mov	r0, r3
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800346e:	b480      	push	{r7}
 8003470:	b083      	sub	sp, #12
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
 8003476:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800347e:	605a      	str	r2, [r3, #4]
	return 0;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <_isatty>:

int _isatty(int file)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
	return 1;
 8003496:	2301      	movs	r3, #1
}
 8003498:	4618      	mov	r0, r3
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
	return 0;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
	...

080034c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034c8:	4a14      	ldr	r2, [pc, #80]	; (800351c <_sbrk+0x5c>)
 80034ca:	4b15      	ldr	r3, [pc, #84]	; (8003520 <_sbrk+0x60>)
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034d4:	4b13      	ldr	r3, [pc, #76]	; (8003524 <_sbrk+0x64>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d102      	bne.n	80034e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034dc:	4b11      	ldr	r3, [pc, #68]	; (8003524 <_sbrk+0x64>)
 80034de:	4a12      	ldr	r2, [pc, #72]	; (8003528 <_sbrk+0x68>)
 80034e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034e2:	4b10      	ldr	r3, [pc, #64]	; (8003524 <_sbrk+0x64>)
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4413      	add	r3, r2
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d207      	bcs.n	8003500 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034f0:	f017 fd88 	bl	801b004 <__errno>
 80034f4:	4603      	mov	r3, r0
 80034f6:	220c      	movs	r2, #12
 80034f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034fa:	f04f 33ff 	mov.w	r3, #4294967295
 80034fe:	e009      	b.n	8003514 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003500:	4b08      	ldr	r3, [pc, #32]	; (8003524 <_sbrk+0x64>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003506:	4b07      	ldr	r3, [pc, #28]	; (8003524 <_sbrk+0x64>)
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4413      	add	r3, r2
 800350e:	4a05      	ldr	r2, [pc, #20]	; (8003524 <_sbrk+0x64>)
 8003510:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003512:	68fb      	ldr	r3, [r7, #12]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	20030000 	.word	0x20030000
 8003520:	00000400 	.word	0x00000400
 8003524:	20000494 	.word	0x20000494
 8003528:	20008fd8 	.word	0x20008fd8

0800352c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003530:	4b08      	ldr	r3, [pc, #32]	; (8003554 <SystemInit+0x28>)
 8003532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003536:	4a07      	ldr	r2, [pc, #28]	; (8003554 <SystemInit+0x28>)
 8003538:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800353c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003540:	4b04      	ldr	r3, [pc, #16]	; (8003554 <SystemInit+0x28>)
 8003542:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003546:	609a      	str	r2, [r3, #8]
#endif
}
 8003548:	bf00      	nop
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	e000ed00 	.word	0xe000ed00

08003558 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003558:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003590 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800355c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800355e:	e003      	b.n	8003568 <LoopCopyDataInit>

08003560 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003560:	4b0c      	ldr	r3, [pc, #48]	; (8003594 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003562:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003564:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003566:	3104      	adds	r1, #4

08003568 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003568:	480b      	ldr	r0, [pc, #44]	; (8003598 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800356a:	4b0c      	ldr	r3, [pc, #48]	; (800359c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800356c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800356e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003570:	d3f6      	bcc.n	8003560 <CopyDataInit>
  ldr  r2, =_sbss
 8003572:	4a0b      	ldr	r2, [pc, #44]	; (80035a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003574:	e002      	b.n	800357c <LoopFillZerobss>

08003576 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003576:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003578:	f842 3b04 	str.w	r3, [r2], #4

0800357c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800357c:	4b09      	ldr	r3, [pc, #36]	; (80035a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800357e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003580:	d3f9      	bcc.n	8003576 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003582:	f7ff ffd3 	bl	800352c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003586:	f017 fe39 	bl	801b1fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800358a:	f7fe f8b5 	bl	80016f8 <main>
  bx  lr    
 800358e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003590:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003594:	08023604 	.word	0x08023604
  ldr  r0, =_sdata
 8003598:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800359c:	20000430 	.word	0x20000430
  ldr  r2, =_sbss
 80035a0:	20000430 	.word	0x20000430
  ldr  r3, = _ebss
 80035a4:	20008fd4 	.word	0x20008fd4

080035a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035a8:	e7fe      	b.n	80035a8 <ADC_IRQHandler>
	...

080035ac <GPS_Poll>:
UART_HandleTypeDef* SERIAL_USART;



void GPS_Poll(float *latitude, float *longitude, float *time)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b08c      	sub	sp, #48	; 0x30
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 80035b8:	2364      	movs	r3, #100	; 0x64
 80035ba:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 80035bc:	2300      	movs	r3, #0
 80035be:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 80035c0:	2300      	movs	r3, #0
 80035c2:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 80035c4:	e073      	b.n	80036ae <GPS_Poll+0x102>
		HAL_UART_Receive(GPS_USART, (uint8_t*)&rx_current, 1, 100);
 80035c6:	4b3f      	ldr	r3, [pc, #252]	; (80036c4 <GPS_Poll+0x118>)
 80035c8:	6818      	ldr	r0, [r3, #0]
 80035ca:	2364      	movs	r3, #100	; 0x64
 80035cc:	2201      	movs	r2, #1
 80035ce:	493e      	ldr	r1, [pc, #248]	; (80036c8 <GPS_Poll+0x11c>)
 80035d0:	f00b fc77 	bl	800eec2 <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 80035d4:	4b3c      	ldr	r3, [pc, #240]	; (80036c8 <GPS_Poll+0x11c>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b0a      	cmp	r3, #10
 80035da:	d00f      	beq.n	80035fc <GPS_Poll+0x50>
 80035dc:	4b3b      	ldr	r3, [pc, #236]	; (80036cc <GPS_Poll+0x120>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2b63      	cmp	r3, #99	; 0x63
 80035e2:	d80b      	bhi.n	80035fc <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 80035e4:	4b39      	ldr	r3, [pc, #228]	; (80036cc <GPS_Poll+0x120>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	b2d1      	uxtb	r1, r2
 80035ec:	4a37      	ldr	r2, [pc, #220]	; (80036cc <GPS_Poll+0x120>)
 80035ee:	7011      	strb	r1, [r2, #0]
 80035f0:	461a      	mov	r2, r3
 80035f2:	4b35      	ldr	r3, [pc, #212]	; (80036c8 <GPS_Poll+0x11c>)
 80035f4:	7819      	ldrb	r1, [r3, #0]
 80035f6:	4b36      	ldr	r3, [pc, #216]	; (80036d0 <GPS_Poll+0x124>)
 80035f8:	5499      	strb	r1, [r3, r2]
 80035fa:	e021      	b.n	8003640 <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 80035fc:	4834      	ldr	r0, [pc, #208]	; (80036d0 <GPS_Poll+0x124>)
 80035fe:	f000 f86b 	bl	80036d8 <GPS_validate>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d013      	beq.n	8003630 <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 8003608:	4831      	ldr	r0, [pc, #196]	; (80036d0 <GPS_Poll+0x124>)
 800360a:	f000 f8c7 	bl	800379c <GPS_parse>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00d      	beq.n	8003630 <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 8003614:	4b2f      	ldr	r3, [pc, #188]	; (80036d4 <GPS_Poll+0x128>)
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 800361c:	4b2d      	ldr	r3, [pc, #180]	; (80036d4 <GPS_Poll+0x128>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 8003624:	4b2b      	ldr	r3, [pc, #172]	; (80036d4 <GPS_Poll+0x128>)
 8003626:	695a      	ldr	r2, [r3, #20]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	601a      	str	r2, [r3, #0]
					done = 1;
 800362c:	2301      	movs	r3, #1
 800362e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 8003630:	4b26      	ldr	r3, [pc, #152]	; (80036cc <GPS_Poll+0x120>)
 8003632:	2200      	movs	r2, #0
 8003634:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 8003636:	2264      	movs	r2, #100	; 0x64
 8003638:	2100      	movs	r1, #0
 800363a:	4825      	ldr	r0, [pc, #148]	; (80036d0 <GPS_Poll+0x124>)
 800363c:	f017 ff5c 	bl	801b4f8 <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS_USART);
 8003640:	2300      	movs	r3, #0
 8003642:	623b      	str	r3, [r7, #32]
 8003644:	4b1f      	ldr	r3, [pc, #124]	; (80036c4 <GPS_Poll+0x118>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	623b      	str	r3, [r7, #32]
 800364e:	4b1d      	ldr	r3, [pc, #116]	; (80036c4 <GPS_Poll+0x118>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	623b      	str	r3, [r7, #32]
 8003658:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS_USART);
 800365a:	2300      	movs	r3, #0
 800365c:	61fb      	str	r3, [r7, #28]
 800365e:	4b19      	ldr	r3, [pc, #100]	; (80036c4 <GPS_Poll+0x118>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	61fb      	str	r3, [r7, #28]
 8003668:	4b16      	ldr	r3, [pc, #88]	; (80036c4 <GPS_Poll+0x118>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	61fb      	str	r3, [r7, #28]
 8003672:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS_USART);
 8003674:	2300      	movs	r3, #0
 8003676:	61bb      	str	r3, [r7, #24]
 8003678:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <GPS_Poll+0x118>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	61bb      	str	r3, [r7, #24]
 8003682:	4b10      	ldr	r3, [pc, #64]	; (80036c4 <GPS_Poll+0x118>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	61bb      	str	r3, [r7, #24]
 800368c:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS_USART);
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <GPS_Poll+0x118>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <GPS_Poll+0x118>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	617b      	str	r3, [r7, #20]
 80036a6:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 80036a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80036aa:	3301      	adds	r3, #1
 80036ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 80036ae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80036b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d202      	bcs.n	80036bc <GPS_Poll+0x110>
 80036b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d084      	beq.n	80035c6 <GPS_Poll+0x1a>
	}
}
 80036bc:	bf00      	nop
 80036be:	3730      	adds	r7, #48	; 0x30
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	20005fcc 	.word	0x20005fcc
 80036c8:	20000498 	.word	0x20000498
 80036cc:	20000499 	.word	0x20000499
 80036d0:	20006d68 	.word	0x20006d68
 80036d4:	20006d10 	.word	0x20006d10

080036d8 <GPS_validate>:

int GPS_validate(char *nmeastr){
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	4413      	add	r3, r2
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b24      	cmp	r3, #36	; 0x24
 80036f2:	d103      	bne.n	80036fc <GPS_validate+0x24>
        i++;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	3301      	adds	r3, #1
 80036f8:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80036fa:	e00c      	b.n	8003716 <GPS_validate+0x3e>
        return 0;
 80036fc:	2300      	movs	r3, #0
 80036fe:	e047      	b.n	8003790 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	4413      	add	r3, r2
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	461a      	mov	r2, r3
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	4053      	eors	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        i++;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	3301      	adds	r3, #1
 8003714:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	4413      	add	r3, r2
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d008      	beq.n	8003734 <GPS_validate+0x5c>
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	4413      	add	r3, r2
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2b2a      	cmp	r3, #42	; 0x2a
 800372c:	d002      	beq.n	8003734 <GPS_validate+0x5c>
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2b4a      	cmp	r3, #74	; 0x4a
 8003732:	dde5      	ble.n	8003700 <GPS_validate+0x28>
    }

    if(i >= 75){
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	2b4a      	cmp	r3, #74	; 0x4a
 8003738:	dd01      	ble.n	800373e <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 800373a:	2300      	movs	r3, #0
 800373c:	e028      	b.n	8003790 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	4413      	add	r3, r2
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b2a      	cmp	r3, #42	; 0x2a
 8003748:	d119      	bne.n	800377e <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	3301      	adds	r3, #1
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	4413      	add	r3, r2
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	3302      	adds	r3, #2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	4413      	add	r3, r2
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8003762:	2300      	movs	r3, #0
 8003764:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8003766:	f107 0308 	add.w	r3, r7, #8
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	490a      	ldr	r1, [pc, #40]	; (8003798 <GPS_validate+0xc0>)
 800376e:	4618      	mov	r0, r3
 8003770:	f019 f9be 	bl	801caf0 <siprintf>
    return((checkcalcstr[0] == check[0])
 8003774:	7a3a      	ldrb	r2, [r7, #8]
 8003776:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8003778:	429a      	cmp	r2, r3
 800377a:	d108      	bne.n	800378e <GPS_validate+0xb6>
 800377c:	e001      	b.n	8003782 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 800377e:	2300      	movs	r3, #0
 8003780:	e006      	b.n	8003790 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8003782:	7a7a      	ldrb	r2, [r7, #9]
 8003784:	7b7b      	ldrb	r3, [r7, #13]
 8003786:	429a      	cmp	r2, r3
 8003788:	d101      	bne.n	800378e <GPS_validate+0xb6>
 800378a:	2301      	movs	r3, #1
 800378c:	e000      	b.n	8003790 <GPS_validate+0xb8>
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	0802135c 	.word	0x0802135c

0800379c <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 800379c:	b580      	push	{r7, lr}
 800379e:	b08a      	sub	sp, #40	; 0x28
 80037a0:	af08      	add	r7, sp, #32
 80037a2:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 80037a4:	2206      	movs	r2, #6
 80037a6:	496d      	ldr	r1, [pc, #436]	; (800395c <GPS_parse+0x1c0>)
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f019 fa3a 	bl	801cc22 <strncmp>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d139      	bne.n	8003828 <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 80037b4:	4b6a      	ldr	r3, [pc, #424]	; (8003960 <GPS_parse+0x1c4>)
 80037b6:	9307      	str	r3, [sp, #28]
 80037b8:	4b6a      	ldr	r3, [pc, #424]	; (8003964 <GPS_parse+0x1c8>)
 80037ba:	9306      	str	r3, [sp, #24]
 80037bc:	4b6a      	ldr	r3, [pc, #424]	; (8003968 <GPS_parse+0x1cc>)
 80037be:	9305      	str	r3, [sp, #20]
 80037c0:	4b6a      	ldr	r3, [pc, #424]	; (800396c <GPS_parse+0x1d0>)
 80037c2:	9304      	str	r3, [sp, #16]
 80037c4:	4b6a      	ldr	r3, [pc, #424]	; (8003970 <GPS_parse+0x1d4>)
 80037c6:	9303      	str	r3, [sp, #12]
 80037c8:	4b6a      	ldr	r3, [pc, #424]	; (8003974 <GPS_parse+0x1d8>)
 80037ca:	9302      	str	r3, [sp, #8]
 80037cc:	4b6a      	ldr	r3, [pc, #424]	; (8003978 <GPS_parse+0x1dc>)
 80037ce:	9301      	str	r3, [sp, #4]
 80037d0:	4b6a      	ldr	r3, [pc, #424]	; (800397c <GPS_parse+0x1e0>)
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	4b6a      	ldr	r3, [pc, #424]	; (8003980 <GPS_parse+0x1e4>)
 80037d6:	4a6b      	ldr	r2, [pc, #428]	; (8003984 <GPS_parse+0x1e8>)
 80037d8:	496b      	ldr	r1, [pc, #428]	; (8003988 <GPS_parse+0x1ec>)
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f019 f9a8 	bl	801cb30 <siscanf>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f340 80b5 	ble.w	8003952 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80037e8:	4b68      	ldr	r3, [pc, #416]	; (800398c <GPS_parse+0x1f0>)
 80037ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80037ee:	4b67      	ldr	r3, [pc, #412]	; (800398c <GPS_parse+0x1f0>)
 80037f0:	7e1b      	ldrb	r3, [r3, #24]
 80037f2:	4618      	mov	r0, r3
 80037f4:	eeb0 0a67 	vmov.f32	s0, s15
 80037f8:	f000 f8ec 	bl	80039d4 <GPS_nmea_to_dec>
 80037fc:	eef0 7a40 	vmov.f32	s15, s0
 8003800:	4b62      	ldr	r3, [pc, #392]	; (800398c <GPS_parse+0x1f0>)
 8003802:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8003806:	4b61      	ldr	r3, [pc, #388]	; (800398c <GPS_parse+0x1f0>)
 8003808:	edd3 7a03 	vldr	s15, [r3, #12]
 800380c:	4b5f      	ldr	r3, [pc, #380]	; (800398c <GPS_parse+0x1f0>)
 800380e:	7e5b      	ldrb	r3, [r3, #25]
 8003810:	4618      	mov	r0, r3
 8003812:	eeb0 0a67 	vmov.f32	s0, s15
 8003816:	f000 f8dd 	bl	80039d4 <GPS_nmea_to_dec>
 800381a:	eef0 7a40 	vmov.f32	s15, s0
 800381e:	4b5b      	ldr	r3, [pc, #364]	; (800398c <GPS_parse+0x1f0>)
 8003820:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8003824:	2301      	movs	r3, #1
 8003826:	e095      	b.n	8003954 <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 8003828:	2206      	movs	r2, #6
 800382a:	4959      	ldr	r1, [pc, #356]	; (8003990 <GPS_parse+0x1f4>)
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f019 f9f8 	bl	801cc22 <strncmp>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d134      	bne.n	80038a2 <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 8003838:	4b56      	ldr	r3, [pc, #344]	; (8003994 <GPS_parse+0x1f8>)
 800383a:	9305      	str	r3, [sp, #20]
 800383c:	4b56      	ldr	r3, [pc, #344]	; (8003998 <GPS_parse+0x1fc>)
 800383e:	9304      	str	r3, [sp, #16]
 8003840:	4b56      	ldr	r3, [pc, #344]	; (800399c <GPS_parse+0x200>)
 8003842:	9303      	str	r3, [sp, #12]
 8003844:	4b4b      	ldr	r3, [pc, #300]	; (8003974 <GPS_parse+0x1d8>)
 8003846:	9302      	str	r3, [sp, #8]
 8003848:	4b4b      	ldr	r3, [pc, #300]	; (8003978 <GPS_parse+0x1dc>)
 800384a:	9301      	str	r3, [sp, #4]
 800384c:	4b4b      	ldr	r3, [pc, #300]	; (800397c <GPS_parse+0x1e0>)
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	4b4b      	ldr	r3, [pc, #300]	; (8003980 <GPS_parse+0x1e4>)
 8003852:	4a4c      	ldr	r2, [pc, #304]	; (8003984 <GPS_parse+0x1e8>)
 8003854:	4952      	ldr	r1, [pc, #328]	; (80039a0 <GPS_parse+0x204>)
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f019 f96a 	bl	801cb30 <siscanf>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	dd77      	ble.n	8003952 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8003862:	4b4a      	ldr	r3, [pc, #296]	; (800398c <GPS_parse+0x1f0>)
 8003864:	edd3 7a04 	vldr	s15, [r3, #16]
 8003868:	4b48      	ldr	r3, [pc, #288]	; (800398c <GPS_parse+0x1f0>)
 800386a:	7e1b      	ldrb	r3, [r3, #24]
 800386c:	4618      	mov	r0, r3
 800386e:	eeb0 0a67 	vmov.f32	s0, s15
 8003872:	f000 f8af 	bl	80039d4 <GPS_nmea_to_dec>
 8003876:	eef0 7a40 	vmov.f32	s15, s0
 800387a:	4b44      	ldr	r3, [pc, #272]	; (800398c <GPS_parse+0x1f0>)
 800387c:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8003880:	4b42      	ldr	r3, [pc, #264]	; (800398c <GPS_parse+0x1f0>)
 8003882:	edd3 7a03 	vldr	s15, [r3, #12]
 8003886:	4b41      	ldr	r3, [pc, #260]	; (800398c <GPS_parse+0x1f0>)
 8003888:	7e5b      	ldrb	r3, [r3, #25]
 800388a:	4618      	mov	r0, r3
 800388c:	eeb0 0a67 	vmov.f32	s0, s15
 8003890:	f000 f8a0 	bl	80039d4 <GPS_nmea_to_dec>
 8003894:	eef0 7a40 	vmov.f32	s15, s0
 8003898:	4b3c      	ldr	r3, [pc, #240]	; (800398c <GPS_parse+0x1f0>)
 800389a:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 800389e:	2301      	movs	r3, #1
 80038a0:	e058      	b.n	8003954 <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 80038a2:	2206      	movs	r2, #6
 80038a4:	493f      	ldr	r1, [pc, #252]	; (80039a4 <GPS_parse+0x208>)
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f019 f9bb 	bl	801cc22 <strncmp>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d130      	bne.n	8003914 <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 80038b2:	4b3d      	ldr	r3, [pc, #244]	; (80039a8 <GPS_parse+0x20c>)
 80038b4:	9303      	str	r3, [sp, #12]
 80038b6:	4b33      	ldr	r3, [pc, #204]	; (8003984 <GPS_parse+0x1e8>)
 80038b8:	9302      	str	r3, [sp, #8]
 80038ba:	4b2e      	ldr	r3, [pc, #184]	; (8003974 <GPS_parse+0x1d8>)
 80038bc:	9301      	str	r3, [sp, #4]
 80038be:	4b2e      	ldr	r3, [pc, #184]	; (8003978 <GPS_parse+0x1dc>)
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	4b2e      	ldr	r3, [pc, #184]	; (800397c <GPS_parse+0x1e0>)
 80038c4:	4a2e      	ldr	r2, [pc, #184]	; (8003980 <GPS_parse+0x1e4>)
 80038c6:	4939      	ldr	r1, [pc, #228]	; (80039ac <GPS_parse+0x210>)
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f019 f931 	bl	801cb30 <siscanf>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	dd3e      	ble.n	8003952 <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80038d4:	4b2d      	ldr	r3, [pc, #180]	; (800398c <GPS_parse+0x1f0>)
 80038d6:	edd3 7a04 	vldr	s15, [r3, #16]
 80038da:	4b2c      	ldr	r3, [pc, #176]	; (800398c <GPS_parse+0x1f0>)
 80038dc:	7e1b      	ldrb	r3, [r3, #24]
 80038de:	4618      	mov	r0, r3
 80038e0:	eeb0 0a67 	vmov.f32	s0, s15
 80038e4:	f000 f876 	bl	80039d4 <GPS_nmea_to_dec>
 80038e8:	eef0 7a40 	vmov.f32	s15, s0
 80038ec:	4b27      	ldr	r3, [pc, #156]	; (800398c <GPS_parse+0x1f0>)
 80038ee:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80038f2:	4b26      	ldr	r3, [pc, #152]	; (800398c <GPS_parse+0x1f0>)
 80038f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80038f8:	4b24      	ldr	r3, [pc, #144]	; (800398c <GPS_parse+0x1f0>)
 80038fa:	7e5b      	ldrb	r3, [r3, #25]
 80038fc:	4618      	mov	r0, r3
 80038fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003902:	f000 f867 	bl	80039d4 <GPS_nmea_to_dec>
 8003906:	eef0 7a40 	vmov.f32	s15, s0
 800390a:	4b20      	ldr	r3, [pc, #128]	; (800398c <GPS_parse+0x1f0>)
 800390c:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 8003910:	2301      	movs	r3, #1
 8003912:	e01f      	b.n	8003954 <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 8003914:	2206      	movs	r2, #6
 8003916:	4926      	ldr	r1, [pc, #152]	; (80039b0 <GPS_parse+0x214>)
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f019 f982 	bl	801cc22 <strncmp>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d116      	bne.n	8003952 <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8003924:	4b23      	ldr	r3, [pc, #140]	; (80039b4 <GPS_parse+0x218>)
 8003926:	9305      	str	r3, [sp, #20]
 8003928:	4b23      	ldr	r3, [pc, #140]	; (80039b8 <GPS_parse+0x21c>)
 800392a:	9304      	str	r3, [sp, #16]
 800392c:	4b23      	ldr	r3, [pc, #140]	; (80039bc <GPS_parse+0x220>)
 800392e:	9303      	str	r3, [sp, #12]
 8003930:	4b1a      	ldr	r3, [pc, #104]	; (800399c <GPS_parse+0x200>)
 8003932:	9302      	str	r3, [sp, #8]
 8003934:	4b22      	ldr	r3, [pc, #136]	; (80039c0 <GPS_parse+0x224>)
 8003936:	9301      	str	r3, [sp, #4]
 8003938:	4b22      	ldr	r3, [pc, #136]	; (80039c4 <GPS_parse+0x228>)
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	4b22      	ldr	r3, [pc, #136]	; (80039c8 <GPS_parse+0x22c>)
 800393e:	4a23      	ldr	r2, [pc, #140]	; (80039cc <GPS_parse+0x230>)
 8003940:	4923      	ldr	r1, [pc, #140]	; (80039d0 <GPS_parse+0x234>)
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f019 f8f4 	bl	801cb30 <siscanf>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	dd01      	ble.n	8003952 <GPS_parse+0x1b6>
            return 0;
 800394e:	2300      	movs	r3, #0
 8003950:	e000      	b.n	8003954 <GPS_parse+0x1b8>
    }
    return 0;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	08021364 	.word	0x08021364
 8003960:	20006d3c 	.word	0x20006d3c
 8003964:	20006d38 	.word	0x20006d38
 8003968:	20006d34 	.word	0x20006d34
 800396c:	20006d30 	.word	0x20006d30
 8003970:	20006d2c 	.word	0x20006d2c
 8003974:	20006d29 	.word	0x20006d29
 8003978:	20006d1c 	.word	0x20006d1c
 800397c:	20006d28 	.word	0x20006d28
 8003980:	20006d20 	.word	0x20006d20
 8003984:	20006d24 	.word	0x20006d24
 8003988:	0802136c 	.word	0x0802136c
 800398c:	20006d10 	.word	0x20006d10
 8003990:	08021394 	.word	0x08021394
 8003994:	20006d48 	.word	0x20006d48
 8003998:	20006d44 	.word	0x20006d44
 800399c:	20006d40 	.word	0x20006d40
 80039a0:	0802139c 	.word	0x0802139c
 80039a4:	080213bc 	.word	0x080213bc
 80039a8:	20006d4c 	.word	0x20006d4c
 80039ac:	080213c4 	.word	0x080213c4
 80039b0:	080213e0 	.word	0x080213e0
 80039b4:	20006d64 	.word	0x20006d64
 80039b8:	20006d60 	.word	0x20006d60
 80039bc:	20006d5d 	.word	0x20006d5d
 80039c0:	20006d5c 	.word	0x20006d5c
 80039c4:	20006d58 	.word	0x20006d58
 80039c8:	20006d54 	.word	0x20006d54
 80039cc:	20006d50 	.word	0x20006d50
 80039d0:	080213e8 	.word	0x080213e8

080039d4 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	ed87 0a01 	vstr	s0, [r7, #4]
 80039de:	4603      	mov	r3, r0
 80039e0:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 80039e2:	ed97 7a01 	vldr	s14, [r7, #4]
 80039e6:	eddf 6a20 	vldr	s13, [pc, #128]	; 8003a68 <GPS_nmea_to_dec+0x94>
 80039ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039f2:	ee17 3a90 	vmov	r3, s15
 80039f6:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	2264      	movs	r2, #100	; 0x64
 80039fc:	fb02 f303 	mul.w	r3, r2, r3
 8003a00:	ee07 3a90 	vmov	s15, r3
 8003a04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a08:	ed97 7a01 	vldr	s14, [r7, #4]
 8003a0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a10:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8003a14:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a18:	eddf 6a14 	vldr	s13, [pc, #80]	; 8003a6c <GPS_nmea_to_dec+0x98>
 8003a1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a20:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	ee07 3a90 	vmov	s15, r3
 8003a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a2e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a36:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8003a3a:	78fb      	ldrb	r3, [r7, #3]
 8003a3c:	2b53      	cmp	r3, #83	; 0x53
 8003a3e:	d002      	beq.n	8003a46 <GPS_nmea_to_dec+0x72>
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	2b57      	cmp	r3, #87	; 0x57
 8003a44:	d105      	bne.n	8003a52 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8003a46:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a4a:	eef1 7a67 	vneg.f32	s15, s15
 8003a4e:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	ee07 3a90 	vmov	s15, r3
}
 8003a58:	eeb0 0a67 	vmov.f32	s0, s15
 8003a5c:	371c      	adds	r7, #28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	42c80000 	.word	0x42c80000
 8003a6c:	42700000 	.word	0x42700000

08003a70 <GPS_init>:

/*
 * TODO MRT code
 */

void GPS_init(UART_HandleTypeDef* data_uart, UART_HandleTypeDef* transmit_uart){
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
	GPS_USART = data_uart;
 8003a7a:	4a09      	ldr	r2, [pc, #36]	; (8003aa0 <GPS_init+0x30>)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6013      	str	r3, [r2, #0]
	SERIAL_USART = transmit_uart;
 8003a80:	4a08      	ldr	r2, [pc, #32]	; (8003aa4 <GPS_init+0x34>)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(SERIAL_USART,"\r\n\r\nGPS Init\r\n\r\n",16,HAL_MAX_DELAY);
 8003a86:	4b07      	ldr	r3, [pc, #28]	; (8003aa4 <GPS_init+0x34>)
 8003a88:	6818      	ldr	r0, [r3, #0]
 8003a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a8e:	2210      	movs	r2, #16
 8003a90:	4905      	ldr	r1, [pc, #20]	; (8003aa8 <GPS_init+0x38>)
 8003a92:	f00b f984 	bl	800ed9e <HAL_UART_Transmit>
}
 8003a96:	bf00      	nop
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	20005fcc 	.word	0x20005fcc
 8003aa4:	20006dcc 	.word	0x20006dcc
 8003aa8:	08021408 	.word	0x08021408

08003aac <__NVIC_SystemReset>:
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003ab0:	f3bf 8f4f 	dsb	sy
}
 8003ab4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003ab6:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <__NVIC_SystemReset+0x24>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003abe:	4904      	ldr	r1, [pc, #16]	; (8003ad0 <__NVIC_SystemReset+0x24>)
 8003ac0:	4b04      	ldr	r3, [pc, #16]	; (8003ad4 <__NVIC_SystemReset+0x28>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003ac6:	f3bf 8f4f 	dsb	sy
}
 8003aca:	bf00      	nop
    __NOP();
 8003acc:	bf00      	nop
 8003ace:	e7fd      	b.n	8003acc <__NVIC_SystemReset+0x20>
 8003ad0:	e000ed00 	.word	0xe000ed00
 8003ad4:	05fa0004 	.word	0x05fa0004

08003ad8 <MRT_externalFlashSetup>:


/*
 * User functions
 */
void MRT_externalFlashSetup(UART_HandleTypeDef* uart){
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	e007      	b.n	8003af6 <MRT_externalFlashSetup+0x1e>
		FLAGS_NULL_BUFFER[i] = 0; //Setup the flags null buffer for the correct number of values
 8003ae6:	4a10      	ldr	r2, [pc, #64]	; (8003b28 <MRT_externalFlashSetup+0x50>)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4413      	add	r3, r2
 8003aec:	2200      	movs	r2, #0
 8003aee:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	3301      	adds	r3, #1
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	ddf4      	ble.n	8003ae6 <MRT_externalFlashSetup+0xe>
	}

	if (!W25qxx_Init()) {
 8003afc:	f000 fc0a 	bl	8004314 <W25qxx_Init>
 8003b00:	4603      	mov	r3, r0
 8003b02:	f083 0301 	eor.w	r3, r3, #1
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <MRT_externalFlashSetup+0x38>
		Error_Handler(); // hangs and blinks LEDF
 8003b0c:	f7ff f86c 	bl	8002be8 <Error_Handler>
	}
	MRT_WUProcedure(); //Needs to be called before getFlags() and after the W25xx_Init()
 8003b10:	f004 fab6 	bl	8008080 <MRT_WUProcedure>
	MRT_getFlags();
 8003b14:	f000 f86c 	bl	8003bf0 <MRT_getFlags>
	MRT_resetInfo(uart);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f94f 	bl	8003dbc <MRT_resetInfo>
}
 8003b1e:	bf00      	nop
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	20006dd0 	.word	0x20006dd0

08003b2c <HAL_GPIO_EXTI_Callback>:


/*
 * Helper functions
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == IN_Button_Pin){
 8003b36:	88fb      	ldrh	r3, [r7, #6]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <HAL_GPIO_EXTI_Callback+0x14>
		//Manual reset from external button
		MRT_resetFromStart();
 8003b3c:	f000 f804 	bl	8003b48 <MRT_resetFromStart>
	}

}
 8003b40:	bf00      	nop
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <MRT_resetFromStart>:


void MRT_resetFromStart(void){
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
	//Clear wakeup and reset flags
	W25qxx_EraseSector(1);
 8003b4c:	2001      	movs	r0, #1
 8003b4e:	f000 fd33 	bl	80045b8 <W25qxx_EraseSector>
	W25qxx_WriteSector(FLAGS_NULL_BUFFER, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003b52:	2303      	movs	r3, #3
 8003b54:	2200      	movs	r2, #0
 8003b56:	2101      	movs	r1, #1
 8003b58:	4807      	ldr	r0, [pc, #28]	; (8003b78 <MRT_resetFromStart+0x30>)
 8003b5a:	f000 fe77 	bl	800484c <W25qxx_WriteSector>

	//Clear RTC time (last recorded)
	W25qxx_EraseSector(2);
 8003b5e:	2002      	movs	r0, #2
 8003b60:	f000 fd2a 	bl	80045b8 <W25qxx_EraseSector>
	W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, 2, RTC_TIME_OFFSET, 3);
 8003b64:	2303      	movs	r3, #3
 8003b66:	2200      	movs	r2, #0
 8003b68:	2102      	movs	r1, #2
 8003b6a:	4804      	ldr	r0, [pc, #16]	; (8003b7c <MRT_resetFromStart+0x34>)
 8003b6c:	f000 fe6e 	bl	800484c <W25qxx_WriteSector>

	//Clear all saved data of ejection stages
	//TODO

	//Shutdown Iridium
	MRT_Static_Iridium_Shutdown();
 8003b70:	f002 fe5e 	bl	8006830 <MRT_Static_Iridium_Shutdown>

	//Reset function
	NVIC_SystemReset();
 8003b74:	f7ff ff9a 	bl	8003aac <__NVIC_SystemReset>
 8003b78:	20006dd0 	.word	0x20006dd0
 8003b7c:	200004a0 	.word	0x200004a0

08003b80 <MRT_updateExternalFlashBuffers>:
}


void MRT_updateExternalFlashBuffers(void){
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003b86:	2300      	movs	r3, #0
 8003b88:	607b      	str	r3, [r7, #4]
 8003b8a:	e00c      	b.n	8003ba6 <MRT_updateExternalFlashBuffers+0x26>
		flash_flags_buffer[i] = *flash_flags[i];
 8003b8c:	4a14      	ldr	r2, [pc, #80]	; (8003be0 <MRT_updateExternalFlashBuffers+0x60>)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b94:	7819      	ldrb	r1, [r3, #0]
 8003b96:	4a13      	ldr	r2, [pc, #76]	; (8003be4 <MRT_updateExternalFlashBuffers+0x64>)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	460a      	mov	r2, r1
 8003b9e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	607b      	str	r3, [r7, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	ddef      	ble.n	8003b8c <MRT_updateExternalFlashBuffers+0xc>
	}
	for (int i = 0; i < 3; i++){
 8003bac:	2300      	movs	r3, #0
 8003bae:	603b      	str	r3, [r7, #0]
 8003bb0:	e00c      	b.n	8003bcc <MRT_updateExternalFlashBuffers+0x4c>
		flash_time_buffer[i] = *flash_time[i];
 8003bb2:	4a0d      	ldr	r2, [pc, #52]	; (8003be8 <MRT_updateExternalFlashBuffers+0x68>)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bba:	7819      	ldrb	r1, [r3, #0]
 8003bbc:	4a0b      	ldr	r2, [pc, #44]	; (8003bec <MRT_updateExternalFlashBuffers+0x6c>)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	460a      	mov	r2, r1
 8003bc4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++){
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	ddef      	ble.n	8003bb2 <MRT_updateExternalFlashBuffers+0x32>
	}
}
 8003bd2:	bf00      	nop
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	20000008 	.word	0x20000008
 8003be4:	2000606c 	.word	0x2000606c
 8003be8:	20000014 	.word	0x20000014
 8003bec:	200067d0 	.word	0x200067d0

08003bf0 <MRT_getFlags>:


void MRT_getFlags(void){
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0

	//Retrieve flags
	W25qxx_ReadSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	4865      	ldr	r0, [pc, #404]	; (8003d94 <MRT_getFlags+0x1a4>)
 8003bfe:	f000 ff63 	bl	8004ac8 <W25qxx_ReadSector>

	//Retrieve RTC time (last recorded)
	W25qxx_ReadSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003c02:	2303      	movs	r3, #3
 8003c04:	2200      	movs	r2, #0
 8003c06:	2102      	movs	r1, #2
 8003c08:	4863      	ldr	r0, [pc, #396]	; (8003d98 <MRT_getFlags+0x1a8>)
 8003c0a:	f000 ff5d 	bl	8004ac8 <W25qxx_ReadSector>

	//If RTC detected a wake up, update the flash memory
	if (wu_flag == 1){
 8003c0e:	4b63      	ldr	r3, [pc, #396]	; (8003d9c <MRT_getFlags+0x1ac>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d10e      	bne.n	8003c34 <MRT_getFlags+0x44>
		//Write the new number of wake up to external flash
		flash_flags_buffer[WU_FLAG_OFFSET] = flash_flags_buffer[WU_FLAG_OFFSET] + 1; //Update number of wake up
 8003c16:	4b5f      	ldr	r3, [pc, #380]	; (8003d94 <MRT_getFlags+0x1a4>)
 8003c18:	785b      	ldrb	r3, [r3, #1]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	4b5d      	ldr	r3, [pc, #372]	; (8003d94 <MRT_getFlags+0x1a4>)
 8003c20:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 8003c22:	2001      	movs	r0, #1
 8003c24:	f000 fcc8 	bl	80045b8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003c28:	2303      	movs	r3, #3
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	4859      	ldr	r0, [pc, #356]	; (8003d94 <MRT_getFlags+0x1a4>)
 8003c30:	f000 fe0c 	bl	800484c <W25qxx_WriteSector>
	}

	//Assign each value read to their variable
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003c34:	2300      	movs	r3, #0
 8003c36:	607b      	str	r3, [r7, #4]
 8003c38:	e00b      	b.n	8003c52 <MRT_getFlags+0x62>
		*flash_flags[i] = flash_flags_buffer[i];
 8003c3a:	4a59      	ldr	r2, [pc, #356]	; (8003da0 <MRT_getFlags+0x1b0>)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c42:	4954      	ldr	r1, [pc, #336]	; (8003d94 <MRT_getFlags+0x1a4>)
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	440a      	add	r2, r1
 8003c48:	7812      	ldrb	r2, [r2, #0]
 8003c4a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	607b      	str	r3, [r7, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	ddf0      	ble.n	8003c3a <MRT_getFlags+0x4a>
	}
	for (int i = 0; i < 3; i++){
 8003c58:	2300      	movs	r3, #0
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	e00b      	b.n	8003c76 <MRT_getFlags+0x86>
		*flash_time[i] = flash_time_buffer[i];
 8003c5e:	4a51      	ldr	r2, [pc, #324]	; (8003da4 <MRT_getFlags+0x1b4>)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c66:	494c      	ldr	r1, [pc, #304]	; (8003d98 <MRT_getFlags+0x1a8>)
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	440a      	add	r2, r1
 8003c6c:	7812      	ldrb	r2, [r2, #0]
 8003c6e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++){
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	3301      	adds	r3, #1
 8003c74:	603b      	str	r3, [r7, #0]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	ddf0      	ble.n	8003c5e <MRT_getFlags+0x6e>
	}


	//Check flags values
	//Reset flag
	if (reset_flag != 0 && reset_flag !=1){ //If random value (none was written)
 8003c7c:	4b4a      	ldr	r3, [pc, #296]	; (8003da8 <MRT_getFlags+0x1b8>)
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d013      	beq.n	8003cac <MRT_getFlags+0xbc>
 8003c84:	4b48      	ldr	r3, [pc, #288]	; (8003da8 <MRT_getFlags+0x1b8>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d00f      	beq.n	8003cac <MRT_getFlags+0xbc>
		reset_flag = 0;
 8003c8c:	4b46      	ldr	r3, [pc, #280]	; (8003da8 <MRT_getFlags+0x1b8>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 8003c92:	4b45      	ldr	r3, [pc, #276]	; (8003da8 <MRT_getFlags+0x1b8>)
 8003c94:	781a      	ldrb	r2, [r3, #0]
 8003c96:	4b3f      	ldr	r3, [pc, #252]	; (8003d94 <MRT_getFlags+0x1a4>)
 8003c98:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(1);
 8003c9a:	2001      	movs	r0, #1
 8003c9c:	f000 fc8c 	bl	80045b8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	483b      	ldr	r0, [pc, #236]	; (8003d94 <MRT_getFlags+0x1a4>)
 8003ca8:	f000 fdd0 	bl	800484c <W25qxx_WriteSector>
	}

	//Wake up flag
	if (wu_flag != 0 && wu_flag !=1 && wu_flag !=2){ //If random value (none was written)
 8003cac:	4b3b      	ldr	r3, [pc, #236]	; (8003d9c <MRT_getFlags+0x1ac>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d017      	beq.n	8003ce4 <MRT_getFlags+0xf4>
 8003cb4:	4b39      	ldr	r3, [pc, #228]	; (8003d9c <MRT_getFlags+0x1ac>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d013      	beq.n	8003ce4 <MRT_getFlags+0xf4>
 8003cbc:	4b37      	ldr	r3, [pc, #220]	; (8003d9c <MRT_getFlags+0x1ac>)
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d00f      	beq.n	8003ce4 <MRT_getFlags+0xf4>
		wu_flag = 0;
 8003cc4:	4b35      	ldr	r3, [pc, #212]	; (8003d9c <MRT_getFlags+0x1ac>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[WU_FLAG_OFFSET] = wu_flag;
 8003cca:	4b34      	ldr	r3, [pc, #208]	; (8003d9c <MRT_getFlags+0x1ac>)
 8003ccc:	781a      	ldrb	r2, [r3, #0]
 8003cce:	4b31      	ldr	r3, [pc, #196]	; (8003d94 <MRT_getFlags+0x1a4>)
 8003cd0:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 8003cd2:	2001      	movs	r0, #1
 8003cd4:	f000 fc70 	bl	80045b8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003cd8:	2303      	movs	r3, #3
 8003cda:	2200      	movs	r2, #0
 8003cdc:	2101      	movs	r1, #1
 8003cde:	482d      	ldr	r0, [pc, #180]	; (8003d94 <MRT_getFlags+0x1a4>)
 8003ce0:	f000 fdb4 	bl	800484c <W25qxx_WriteSector>
	}

	//IWDG flag
	if (iwdg_flag != 0 && iwdg_flag !=1){ //If random value (none was written)
 8003ce4:	4b31      	ldr	r3, [pc, #196]	; (8003dac <MRT_getFlags+0x1bc>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d013      	beq.n	8003d14 <MRT_getFlags+0x124>
 8003cec:	4b2f      	ldr	r3, [pc, #188]	; (8003dac <MRT_getFlags+0x1bc>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d00f      	beq.n	8003d14 <MRT_getFlags+0x124>
		iwdg_flag = 0;
 8003cf4:	4b2d      	ldr	r3, [pc, #180]	; (8003dac <MRT_getFlags+0x1bc>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8003cfa:	4b2c      	ldr	r3, [pc, #176]	; (8003dac <MRT_getFlags+0x1bc>)
 8003cfc:	781a      	ldrb	r2, [r3, #0]
 8003cfe:	4b25      	ldr	r3, [pc, #148]	; (8003d94 <MRT_getFlags+0x1a4>)
 8003d00:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(1);
 8003d02:	2001      	movs	r0, #1
 8003d04:	f000 fc58 	bl	80045b8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003d08:	2303      	movs	r3, #3
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	4821      	ldr	r0, [pc, #132]	; (8003d94 <MRT_getFlags+0x1a4>)
 8003d10:	f000 fd9c 	bl	800484c <W25qxx_WriteSector>
	}


	//Check RTC time values
	//Hours
	if (!(prev_hours >= 0 && prev_hours < 24)){ //If random value (none was written)
 8003d14:	4b26      	ldr	r3, [pc, #152]	; (8003db0 <MRT_getFlags+0x1c0>)
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2b17      	cmp	r3, #23
 8003d1a:	d90f      	bls.n	8003d3c <MRT_getFlags+0x14c>
		prev_hours = 0;
 8003d1c:	4b24      	ldr	r3, [pc, #144]	; (8003db0 <MRT_getFlags+0x1c0>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_HOURS_OFFSET] = prev_hours;
 8003d22:	4b23      	ldr	r3, [pc, #140]	; (8003db0 <MRT_getFlags+0x1c0>)
 8003d24:	781a      	ldrb	r2, [r3, #0]
 8003d26:	4b1c      	ldr	r3, [pc, #112]	; (8003d98 <MRT_getFlags+0x1a8>)
 8003d28:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(2);
 8003d2a:	2002      	movs	r0, #2
 8003d2c:	f000 fc44 	bl	80045b8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003d30:	2303      	movs	r3, #3
 8003d32:	2200      	movs	r2, #0
 8003d34:	2102      	movs	r1, #2
 8003d36:	4818      	ldr	r0, [pc, #96]	; (8003d98 <MRT_getFlags+0x1a8>)
 8003d38:	f000 fd88 	bl	800484c <W25qxx_WriteSector>
	}

	//Minutes
	if (!(prev_min >= 0 && prev_min < 60)){ //If random value (none was written)
 8003d3c:	4b1d      	ldr	r3, [pc, #116]	; (8003db4 <MRT_getFlags+0x1c4>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	2b3b      	cmp	r3, #59	; 0x3b
 8003d42:	d90f      	bls.n	8003d64 <MRT_getFlags+0x174>
		prev_min = 0;
 8003d44:	4b1b      	ldr	r3, [pc, #108]	; (8003db4 <MRT_getFlags+0x1c4>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_MIN_OFFSET] = prev_min;
 8003d4a:	4b1a      	ldr	r3, [pc, #104]	; (8003db4 <MRT_getFlags+0x1c4>)
 8003d4c:	781a      	ldrb	r2, [r3, #0]
 8003d4e:	4b12      	ldr	r3, [pc, #72]	; (8003d98 <MRT_getFlags+0x1a8>)
 8003d50:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(2);
 8003d52:	2002      	movs	r0, #2
 8003d54:	f000 fc30 	bl	80045b8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003d58:	2303      	movs	r3, #3
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	2102      	movs	r1, #2
 8003d5e:	480e      	ldr	r0, [pc, #56]	; (8003d98 <MRT_getFlags+0x1a8>)
 8003d60:	f000 fd74 	bl	800484c <W25qxx_WriteSector>
	}

	//Seconds
	if (!(prev_sec >= 0 && prev_sec < 60)){ //If random value (none was written)
 8003d64:	4b14      	ldr	r3, [pc, #80]	; (8003db8 <MRT_getFlags+0x1c8>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2b3b      	cmp	r3, #59	; 0x3b
 8003d6a:	d90f      	bls.n	8003d8c <MRT_getFlags+0x19c>
		prev_sec = 0;
 8003d6c:	4b12      	ldr	r3, [pc, #72]	; (8003db8 <MRT_getFlags+0x1c8>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_SEC_OFFSET] = prev_sec;
 8003d72:	4b11      	ldr	r3, [pc, #68]	; (8003db8 <MRT_getFlags+0x1c8>)
 8003d74:	781a      	ldrb	r2, [r3, #0]
 8003d76:	4b08      	ldr	r3, [pc, #32]	; (8003d98 <MRT_getFlags+0x1a8>)
 8003d78:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(2);
 8003d7a:	2002      	movs	r0, #2
 8003d7c:	f000 fc1c 	bl	80045b8 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003d80:	2303      	movs	r3, #3
 8003d82:	2200      	movs	r2, #0
 8003d84:	2102      	movs	r1, #2
 8003d86:	4804      	ldr	r0, [pc, #16]	; (8003d98 <MRT_getFlags+0x1a8>)
 8003d88:	f000 fd60 	bl	800484c <W25qxx_WriteSector>
	}
}
 8003d8c:	bf00      	nop
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	2000606c 	.word	0x2000606c
 8003d98:	200067d0 	.word	0x200067d0
 8003d9c:	20000711 	.word	0x20000711
 8003da0:	20000008 	.word	0x20000008
 8003da4:	20000014 	.word	0x20000014
 8003da8:	2000049a 	.word	0x2000049a
 8003dac:	2000049b 	.word	0x2000049b
 8003db0:	2000049c 	.word	0x2000049c
 8003db4:	2000049d 	.word	0x2000049d
 8003db8:	2000049e 	.word	0x2000049e

08003dbc <MRT_resetInfo>:


void MRT_resetInfo(UART_HandleTypeDef* uart){
 8003dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dbe:	b0a7      	sub	sp, #156	; 0x9c
 8003dc0:	af04      	add	r7, sp, #16
 8003dc2:	6078      	str	r0, [r7, #4]

	  char buffer[100];
	  sprintf(buffer,"Reset: %i,  WU: %i,  IWDG: %i\r\nPrevious RTC time: %i:%i:%i\r\n",reset_flag, wu_flag, iwdg_flag, prev_hours, prev_min, prev_sec);
 8003dc4:	4b55      	ldr	r3, [pc, #340]	; (8003f1c <MRT_resetInfo+0x160>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	461d      	mov	r5, r3
 8003dca:	4b55      	ldr	r3, [pc, #340]	; (8003f20 <MRT_resetInfo+0x164>)
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	461e      	mov	r6, r3
 8003dd0:	4b54      	ldr	r3, [pc, #336]	; (8003f24 <MRT_resetInfo+0x168>)
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	4b54      	ldr	r3, [pc, #336]	; (8003f28 <MRT_resetInfo+0x16c>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	4619      	mov	r1, r3
 8003ddc:	4b53      	ldr	r3, [pc, #332]	; (8003f2c <MRT_resetInfo+0x170>)
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	461c      	mov	r4, r3
 8003de2:	4b53      	ldr	r3, [pc, #332]	; (8003f30 <MRT_resetInfo+0x174>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	f107 0020 	add.w	r0, r7, #32
 8003dea:	9303      	str	r3, [sp, #12]
 8003dec:	9402      	str	r4, [sp, #8]
 8003dee:	9101      	str	r1, [sp, #4]
 8003df0:	9200      	str	r2, [sp, #0]
 8003df2:	4633      	mov	r3, r6
 8003df4:	462a      	mov	r2, r5
 8003df6:	494f      	ldr	r1, [pc, #316]	; (8003f34 <MRT_resetInfo+0x178>)
 8003df8:	f018 fe7a 	bl	801caf0 <siprintf>
	  HAL_UART_Transmit(uart, buffer, strlen(buffer), HAL_MAX_DELAY);
 8003dfc:	f107 0320 	add.w	r3, r7, #32
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fc f9ff 	bl	8000204 <strlen>
 8003e06:	4603      	mov	r3, r0
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	f107 0120 	add.w	r1, r7, #32
 8003e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f00a ffc3 	bl	800ed9e <HAL_UART_Transmit>

	  //Check if IWDG is being deactivated
	  if (iwdg_flag==1){
 8003e18:	4b42      	ldr	r3, [pc, #264]	; (8003f24 <MRT_resetInfo+0x168>)
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d11e      	bne.n	8003e5e <MRT_resetInfo+0xa2>
		  HAL_UART_Transmit(uart, "Deactivating IWDG\r\n", 19, HAL_MAX_DELAY);
 8003e20:	f04f 33ff 	mov.w	r3, #4294967295
 8003e24:	2213      	movs	r2, #19
 8003e26:	4944      	ldr	r1, [pc, #272]	; (8003f38 <MRT_resetInfo+0x17c>)
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f00a ffb8 	bl	800ed9e <HAL_UART_Transmit>

		  iwdg_flag = 0; //Flip flag
 8003e2e:	4b3d      	ldr	r3, [pc, #244]	; (8003f24 <MRT_resetInfo+0x168>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
		  flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8003e34:	4b3b      	ldr	r3, [pc, #236]	; (8003f24 <MRT_resetInfo+0x168>)
 8003e36:	781a      	ldrb	r2, [r3, #0]
 8003e38:	4b40      	ldr	r3, [pc, #256]	; (8003f3c <MRT_resetInfo+0x180>)
 8003e3a:	709a      	strb	r2, [r3, #2]
		  W25qxx_EraseSector(1);
 8003e3c:	2001      	movs	r0, #1
 8003e3e:	f000 fbbb 	bl	80045b8 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003e42:	2303      	movs	r3, #3
 8003e44:	2200      	movs	r2, #0
 8003e46:	2101      	movs	r1, #1
 8003e48:	483c      	ldr	r0, [pc, #240]	; (8003f3c <MRT_resetInfo+0x180>)
 8003e4a:	f000 fcff 	bl	800484c <W25qxx_WriteSector>

		  HAL_Delay(1000);
 8003e4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e52:	f004 fdcd 	bl	80089f0 <HAL_Delay>

		  //Go to sleep
		  MRT_StandByMode(SLEEP_TIME);
 8003e56:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 8003e5a:	f004 f9cf 	bl	80081fc <MRT_StandByMode>
	  }


	  //Check if we are after waking up (and at which wake up we are at)
	  if (wu_flag>0){
 8003e5e:	4b30      	ldr	r3, [pc, #192]	; (8003f20 <MRT_resetInfo+0x164>)
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d03a      	beq.n	8003edc <MRT_resetInfo+0x120>
		  char buf[20];
		  sprintf(buf, "FC wake up %i\r\n", wu_flag);
 8003e66:	4b2e      	ldr	r3, [pc, #184]	; (8003f20 <MRT_resetInfo+0x164>)
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	f107 030c 	add.w	r3, r7, #12
 8003e70:	4933      	ldr	r1, [pc, #204]	; (8003f40 <MRT_resetInfo+0x184>)
 8003e72:	4618      	mov	r0, r3
 8003e74:	f018 fe3c 	bl	801caf0 <siprintf>
		  HAL_UART_Transmit(uart, buf, strlen(buf), HAL_MAX_DELAY);
 8003e78:	f107 030c 	add.w	r3, r7, #12
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fc f9c1 	bl	8000204 <strlen>
 8003e82:	4603      	mov	r3, r0
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	f107 010c 	add.w	r1, r7, #12
 8003e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f00a ff85 	bl	800ed9e <HAL_UART_Transmit>

		  HAL_UART_Transmit(uart, "Resetting RTC time\r\n", 20, HAL_MAX_DELAY);
 8003e94:	f04f 33ff 	mov.w	r3, #4294967295
 8003e98:	2214      	movs	r2, #20
 8003e9a:	492a      	ldr	r1, [pc, #168]	; (8003f44 <MRT_resetInfo+0x188>)
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f00a ff7e 	bl	800ed9e <HAL_UART_Transmit>


		  //Clear RTC time (last recorded)
		  W25qxx_EraseSector(2);
 8003ea2:	2002      	movs	r0, #2
 8003ea4:	f000 fb88 	bl	80045b8 <W25qxx_EraseSector>
		  W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, 2, RTC_TIME_OFFSET, 3);
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	2200      	movs	r2, #0
 8003eac:	2102      	movs	r1, #2
 8003eae:	4826      	ldr	r0, [pc, #152]	; (8003f48 <MRT_resetInfo+0x18c>)
 8003eb0:	f000 fccc 	bl	800484c <W25qxx_WriteSector>

		  //Update variables (to 0)
		  for (int i = 0; i < 3; i++){
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003eba:	e00b      	b.n	8003ed4 <MRT_resetInfo+0x118>
			  *flash_time[i] = 0x0;
 8003ebc:	4a23      	ldr	r2, [pc, #140]	; (8003f4c <MRT_resetInfo+0x190>)
 8003ebe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 3; i++){
 8003eca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ece:	3301      	adds	r3, #1
 8003ed0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ed4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	ddef      	ble.n	8003ebc <MRT_resetInfo+0x100>

	  }


	  //Check if we start from the beginning
	  if (reset_flag==0){
 8003edc:	4b0f      	ldr	r3, [pc, #60]	; (8003f1c <MRT_resetInfo+0x160>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d116      	bne.n	8003f12 <MRT_resetInfo+0x156>
		  HAL_UART_Transmit(uart, "FC restarted\r\n", 14, HAL_MAX_DELAY);
 8003ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee8:	220e      	movs	r2, #14
 8003eea:	4919      	ldr	r1, [pc, #100]	; (8003f50 <MRT_resetInfo+0x194>)
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f00a ff56 	bl	800ed9e <HAL_UART_Transmit>

		  reset_flag = 1; //Flip flag
 8003ef2:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <MRT_resetInfo+0x160>)
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
	      flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 8003ef8:	4b08      	ldr	r3, [pc, #32]	; (8003f1c <MRT_resetInfo+0x160>)
 8003efa:	781a      	ldrb	r2, [r3, #0]
 8003efc:	4b0f      	ldr	r3, [pc, #60]	; (8003f3c <MRT_resetInfo+0x180>)
 8003efe:	701a      	strb	r2, [r3, #0]
		  W25qxx_EraseSector(1);
 8003f00:	2001      	movs	r0, #1
 8003f02:	f000 fb59 	bl	80045b8 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003f06:	2303      	movs	r3, #3
 8003f08:	2200      	movs	r2, #0
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	480b      	ldr	r0, [pc, #44]	; (8003f3c <MRT_resetInfo+0x180>)
 8003f0e:	f000 fc9d 	bl	800484c <W25qxx_WriteSector>
	  }
}
 8003f12:	bf00      	nop
 8003f14:	378c      	adds	r7, #140	; 0x8c
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	2000049a 	.word	0x2000049a
 8003f20:	20000711 	.word	0x20000711
 8003f24:	2000049b 	.word	0x2000049b
 8003f28:	2000049c 	.word	0x2000049c
 8003f2c:	2000049d 	.word	0x2000049d
 8003f30:	2000049e 	.word	0x2000049e
 8003f34:	0802144c 	.word	0x0802144c
 8003f38:	0802148c 	.word	0x0802148c
 8003f3c:	2000606c 	.word	0x2000606c
 8003f40:	080214a0 	.word	0x080214a0
 8003f44:	080214b0 	.word	0x080214b0
 8003f48:	200004a0 	.word	0x200004a0
 8003f4c:	20000014 	.word	0x20000014
 8003f50:	080214c8 	.word	0x080214c8

08003f54 <MRT_saveRTCTime>:


/*
 * Update and save the RTC time in external flash memory
 */
void MRT_saveRTCTime(void){
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
	MRT_updateExternalFlashBuffers();
 8003f58:	f7ff fe12 	bl	8003b80 <MRT_updateExternalFlashBuffers>

	//Write new RTC time to flash memory
	W25qxx_EraseSector(2);
 8003f5c:	2002      	movs	r0, #2
 8003f5e:	f000 fb2b 	bl	80045b8 <W25qxx_EraseSector>
	W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003f62:	2303      	movs	r3, #3
 8003f64:	2200      	movs	r2, #0
 8003f66:	2102      	movs	r1, #2
 8003f68:	4802      	ldr	r0, [pc, #8]	; (8003f74 <MRT_saveRTCTime+0x20>)
 8003f6a:	f000 fc6f 	bl	800484c <W25qxx_WriteSector>
}
 8003f6e:	bf00      	nop
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	200067d0 	.word	0x200067d0

08003f78 <MRT_getContinuity>:
 * Checks the continuity of the gates
 *
 * returns a binary number in its decimal form. Each bit is the state of a gate.
 * bit3 bit2 bit1 bit0 = drogue1 drogue2 prop1 prop2
 */
uint8_t MRT_getContinuity(void){
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
	uint8_t drogue1 = HAL_GPIO_ReadPin(IN_EJ_Drogue_Cont_GPIO_Port, IN_EJ_Drogue_Cont_Pin);
 8003f7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f82:	4815      	ldr	r0, [pc, #84]	; (8003fd8 <MRT_getContinuity+0x60>)
 8003f84:	f005 fc28 	bl	80097d8 <HAL_GPIO_ReadPin>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	71fb      	strb	r3, [r7, #7]
	uint8_t drogue2 = HAL_GPIO_ReadPin(IN_EJ_Main_Cont_GPIO_Port, IN_EJ_Main_Cont_Pin);
 8003f8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f90:	4811      	ldr	r0, [pc, #68]	; (8003fd8 <MRT_getContinuity+0x60>)
 8003f92:	f005 fc21 	bl	80097d8 <HAL_GPIO_ReadPin>
 8003f96:	4603      	mov	r3, r0
 8003f98:	71bb      	strb	r3, [r7, #6]
	uint8_t prop1 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_1_GPIO_Port, IN_PyroValve_Cont_1_Pin);
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	480e      	ldr	r0, [pc, #56]	; (8003fd8 <MRT_getContinuity+0x60>)
 8003f9e:	f005 fc1b 	bl	80097d8 <HAL_GPIO_ReadPin>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	717b      	strb	r3, [r7, #5]
	uint8_t prop2 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_2_GPIO_Port, IN_PyroValve_Cont_2_Pin);
 8003fa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003faa:	480c      	ldr	r0, [pc, #48]	; (8003fdc <MRT_getContinuity+0x64>)
 8003fac:	f005 fc14 	bl	80097d8 <HAL_GPIO_ReadPin>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	713b      	strb	r3, [r7, #4]
	uint8_t continuity = 8*drogue1 + 4*drogue2 + 2*prop1 + prop2;
 8003fb4:	79fb      	ldrb	r3, [r7, #7]
 8003fb6:	005a      	lsls	r2, r3, #1
 8003fb8:	79bb      	ldrb	r3, [r7, #6]
 8003fba:	4413      	add	r3, r2
 8003fbc:	005a      	lsls	r2, r3, #1
 8003fbe:	797b      	ldrb	r3, [r7, #5]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	793b      	ldrb	r3, [r7, #4]
 8003fca:	4413      	add	r3, r2
 8003fcc:	70fb      	strb	r3, [r7, #3]
	return continuity;
 8003fce:	78fb      	ldrb	r3, [r7, #3]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40021800 	.word	0x40021800
 8003fdc:	40021400 	.word	0x40021400

08003fe0 <MRT_prop_poll_pressure_transducer>:


/*
 * Get the pressure transducer voltage (poll ADC)
 */
float MRT_prop_poll_pressure_transducer(ADC_HandleTypeDef* hadc) {
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
	// reading adc
	HAL_ADC_Start(hadc);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f004 fd69 	bl	8008ac0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 1000);
 8003fee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f004 fe69 	bl	8008cca <HAL_ADC_PollForConversion>
	uint32_t pressure_sensor_raw = HAL_ADC_GetValue(hadc);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f004 fef1 	bl	8008de0 <HAL_ADC_GetValue>
 8003ffe:	60f8      	str	r0, [r7, #12]
	HAL_ADC_Stop(hadc);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f004 fe2f 	bl	8008c64 <HAL_ADC_Stop>

	float voltage = (float) (pressure_sensor_raw / 4095.0) * 3.3; // assuming 12 bits
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f7fc fa9c 	bl	8000544 <__aeabi_ui2d>
 800400c:	a312      	add	r3, pc, #72	; (adr r3, 8004058 <MRT_prop_poll_pressure_transducer+0x78>)
 800400e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004012:	f7fc fc3b 	bl	800088c <__aeabi_ddiv>
 8004016:	4602      	mov	r2, r0
 8004018:	460b      	mov	r3, r1
 800401a:	4610      	mov	r0, r2
 800401c:	4619      	mov	r1, r3
 800401e:	f7fc fe03 	bl	8000c28 <__aeabi_d2f>
 8004022:	4603      	mov	r3, r0
 8004024:	4618      	mov	r0, r3
 8004026:	f7fc faaf 	bl	8000588 <__aeabi_f2d>
 800402a:	a30d      	add	r3, pc, #52	; (adr r3, 8004060 <MRT_prop_poll_pressure_transducer+0x80>)
 800402c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004030:	f7fc fb02 	bl	8000638 <__aeabi_dmul>
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	4610      	mov	r0, r2
 800403a:	4619      	mov	r1, r3
 800403c:	f7fc fdf4 	bl	8000c28 <__aeabi_d2f>
 8004040:	4603      	mov	r3, r0
 8004042:	60bb      	str	r3, [r7, #8]

	// convert using transfer function
	// TODO

	return voltage;
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	ee07 3a90 	vmov	s15, r3
}
 800404a:	eeb0 0a67 	vmov.f32	s0, s15
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	f3af 8000 	nop.w
 8004058:	00000000 	.word	0x00000000
 800405c:	40affe00 	.word	0x40affe00
 8004060:	66666666 	.word	0x66666666
 8004064:	400a6666 	.word	0x400a6666

08004068 <MRT_getAltitude>:

/*
 * Gets the altitude using temperature, pressure and sea-level pressure
 *https://www.mide.com/air-pressure-at-altitude-calculator
 */
float MRT_getAltitude(float pressure){
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	ed87 0a01 	vstr	s0, [r7, #4]
	return BASE_HEIGHT+(SEA_LEVEL_TEMPERATURE/-0.0065)*(pow(pressure/SEA_LEVEL_PRESSURE,(-R*-0.0065/(go*M)))-1);
 8004072:	edd7 7a01 	vldr	s15, [r7, #4]
 8004076:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80040f8 <MRT_getAltitude+0x90>
 800407a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800407e:	ee16 0a90 	vmov	r0, s13
 8004082:	f7fc fa81 	bl	8000588 <__aeabi_f2d>
 8004086:	4602      	mov	r2, r0
 8004088:	460b      	mov	r3, r1
 800408a:	ed9f 1b17 	vldr	d1, [pc, #92]	; 80040e8 <MRT_getAltitude+0x80>
 800408e:	ec43 2b10 	vmov	d0, r2, r3
 8004092:	f015 fffb 	bl	801a08c <pow>
 8004096:	ec51 0b10 	vmov	r0, r1, d0
 800409a:	f04f 0200 	mov.w	r2, #0
 800409e:	4b17      	ldr	r3, [pc, #92]	; (80040fc <MRT_getAltitude+0x94>)
 80040a0:	f7fc f912 	bl	80002c8 <__aeabi_dsub>
 80040a4:	4602      	mov	r2, r0
 80040a6:	460b      	mov	r3, r1
 80040a8:	4610      	mov	r0, r2
 80040aa:	4619      	mov	r1, r3
 80040ac:	a310      	add	r3, pc, #64	; (adr r3, 80040f0 <MRT_getAltitude+0x88>)
 80040ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b2:	f7fc fac1 	bl	8000638 <__aeabi_dmul>
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	4610      	mov	r0, r2
 80040bc:	4619      	mov	r1, r3
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	4b0f      	ldr	r3, [pc, #60]	; (8004100 <MRT_getAltitude+0x98>)
 80040c4:	f7fc f902 	bl	80002cc <__adddf3>
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	4610      	mov	r0, r2
 80040ce:	4619      	mov	r1, r3
 80040d0:	f7fc fdaa 	bl	8000c28 <__aeabi_d2f>
 80040d4:	4603      	mov	r3, r0
 80040d6:	ee07 3a90 	vmov	s15, r3
}
 80040da:	eeb0 0a67 	vmov.f32	s0, s15
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	f3af 8000 	nop.w
 80040e8:	b537afba 	.word	0xb537afba
 80040ec:	3fc85a8b 	.word	0x3fc85a8b
 80040f0:	76276276 	.word	0x76276276
 80040f4:	c0e481c2 	.word	0xc0e481c2
 80040f8:	447d8000 	.word	0x447d8000
 80040fc:	3ff00000 	.word	0x3ff00000
 8004100:	40590000 	.word	0x40590000

08004104 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af02      	add	r7, sp, #8
 800410a:	4603      	mov	r3, r0
 800410c:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 800410e:	f107 020f 	add.w	r2, r7, #15
 8004112:	1df9      	adds	r1, r7, #7
 8004114:	2364      	movs	r3, #100	; 0x64
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	2301      	movs	r3, #1
 800411a:	4804      	ldr	r0, [pc, #16]	; (800412c <W25qxx_Spi+0x28>)
 800411c:	f009 fd34 	bl	800db88 <HAL_SPI_TransmitReceive>
	return ret;
 8004120:	7bfb      	ldrb	r3, [r7, #15]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	20005fd0 	.word	0x20005fd0

08004130 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8004136:	2300      	movs	r3, #0
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	2300      	movs	r3, #0
 800413c:	60bb      	str	r3, [r7, #8]
 800413e:	2300      	movs	r3, #0
 8004140:	607b      	str	r3, [r7, #4]
 8004142:	2300      	movs	r3, #0
 8004144:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004146:	2200      	movs	r2, #0
 8004148:	2140      	movs	r1, #64	; 0x40
 800414a:	4813      	ldr	r0, [pc, #76]	; (8004198 <W25qxx_ReadID+0x68>)
 800414c:	f005 fb5c 	bl	8009808 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8004150:	209f      	movs	r0, #159	; 0x9f
 8004152:	f7ff ffd7 	bl	8004104 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004156:	20a5      	movs	r0, #165	; 0xa5
 8004158:	f7ff ffd4 	bl	8004104 <W25qxx_Spi>
 800415c:	4603      	mov	r3, r0
 800415e:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004160:	20a5      	movs	r0, #165	; 0xa5
 8004162:	f7ff ffcf 	bl	8004104 <W25qxx_Spi>
 8004166:	4603      	mov	r3, r0
 8004168:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800416a:	20a5      	movs	r0, #165	; 0xa5
 800416c:	f7ff ffca 	bl	8004104 <W25qxx_Spi>
 8004170:	4603      	mov	r3, r0
 8004172:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004174:	2201      	movs	r2, #1
 8004176:	2140      	movs	r1, #64	; 0x40
 8004178:	4807      	ldr	r0, [pc, #28]	; (8004198 <W25qxx_ReadID+0x68>)
 800417a:	f005 fb45 	bl	8009808 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	041a      	lsls	r2, r3, #16
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	021b      	lsls	r3, r3, #8
 8004186:	4313      	orrs	r3, r2
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]
	return Temp;
 800418e:	68fb      	ldr	r3, [r7, #12]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40020c00 	.word	0x40020c00

0800419c <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 800419c:	b590      	push	{r4, r7, lr}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80041a2:	2200      	movs	r2, #0
 80041a4:	2140      	movs	r1, #64	; 0x40
 80041a6:	4816      	ldr	r0, [pc, #88]	; (8004200 <W25qxx_ReadUniqID+0x64>)
 80041a8:	f005 fb2e 	bl	8009808 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 80041ac:	204b      	movs	r0, #75	; 0x4b
 80041ae:	f7ff ffa9 	bl	8004104 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80041b2:	2300      	movs	r3, #0
 80041b4:	71fb      	strb	r3, [r7, #7]
 80041b6:	e005      	b.n	80041c4 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80041b8:	20a5      	movs	r0, #165	; 0xa5
 80041ba:	f7ff ffa3 	bl	8004104 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80041be:	79fb      	ldrb	r3, [r7, #7]
 80041c0:	3301      	adds	r3, #1
 80041c2:	71fb      	strb	r3, [r7, #7]
 80041c4:	79fb      	ldrb	r3, [r7, #7]
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	d9f6      	bls.n	80041b8 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 80041ca:	2300      	movs	r3, #0
 80041cc:	71bb      	strb	r3, [r7, #6]
 80041ce:	e00b      	b.n	80041e8 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80041d0:	79bc      	ldrb	r4, [r7, #6]
 80041d2:	20a5      	movs	r0, #165	; 0xa5
 80041d4:	f7ff ff96 	bl	8004104 <W25qxx_Spi>
 80041d8:	4603      	mov	r3, r0
 80041da:	461a      	mov	r2, r3
 80041dc:	4b09      	ldr	r3, [pc, #36]	; (8004204 <W25qxx_ReadUniqID+0x68>)
 80041de:	4423      	add	r3, r4
 80041e0:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 80041e2:	79bb      	ldrb	r3, [r7, #6]
 80041e4:	3301      	adds	r3, #1
 80041e6:	71bb      	strb	r3, [r7, #6]
 80041e8:	79bb      	ldrb	r3, [r7, #6]
 80041ea:	2b07      	cmp	r3, #7
 80041ec:	d9f0      	bls.n	80041d0 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80041ee:	2201      	movs	r2, #1
 80041f0:	2140      	movs	r1, #64	; 0x40
 80041f2:	4803      	ldr	r0, [pc, #12]	; (8004200 <W25qxx_ReadUniqID+0x64>)
 80041f4:	f005 fb08 	bl	8009808 <HAL_GPIO_WritePin>
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd90      	pop	{r4, r7, pc}
 8004200:	40020c00 	.word	0x40020c00
 8004204:	20006dd4 	.word	0x20006dd4

08004208 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800420c:	2200      	movs	r2, #0
 800420e:	2140      	movs	r1, #64	; 0x40
 8004210:	4807      	ldr	r0, [pc, #28]	; (8004230 <W25qxx_WriteEnable+0x28>)
 8004212:	f005 faf9 	bl	8009808 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8004216:	2006      	movs	r0, #6
 8004218:	f7ff ff74 	bl	8004104 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800421c:	2201      	movs	r2, #1
 800421e:	2140      	movs	r1, #64	; 0x40
 8004220:	4803      	ldr	r0, [pc, #12]	; (8004230 <W25qxx_WriteEnable+0x28>)
 8004222:	f005 faf1 	bl	8009808 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8004226:	2001      	movs	r0, #1
 8004228:	f011 fe87 	bl	8015f3a <osDelay>
}
 800422c:	bf00      	nop
 800422e:	bd80      	pop	{r7, pc}
 8004230:	40020c00 	.word	0x40020c00

08004234 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	4603      	mov	r3, r0
 800423c:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 800423e:	2300      	movs	r3, #0
 8004240:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004242:	2200      	movs	r2, #0
 8004244:	2140      	movs	r1, #64	; 0x40
 8004246:	481c      	ldr	r0, [pc, #112]	; (80042b8 <W25qxx_ReadStatusRegister+0x84>)
 8004248:	f005 fade 	bl	8009808 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 800424c:	79fb      	ldrb	r3, [r7, #7]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d10c      	bne.n	800426c <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8004252:	2005      	movs	r0, #5
 8004254:	f7ff ff56 	bl	8004104 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004258:	20a5      	movs	r0, #165	; 0xa5
 800425a:	f7ff ff53 	bl	8004104 <W25qxx_Spi>
 800425e:	4603      	mov	r3, r0
 8004260:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8004262:	4a16      	ldr	r2, [pc, #88]	; (80042bc <W25qxx_ReadStatusRegister+0x88>)
 8004264:	7bfb      	ldrb	r3, [r7, #15]
 8004266:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800426a:	e01b      	b.n	80042a4 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 800426c:	79fb      	ldrb	r3, [r7, #7]
 800426e:	2b02      	cmp	r3, #2
 8004270:	d10c      	bne.n	800428c <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8004272:	2035      	movs	r0, #53	; 0x35
 8004274:	f7ff ff46 	bl	8004104 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004278:	20a5      	movs	r0, #165	; 0xa5
 800427a:	f7ff ff43 	bl	8004104 <W25qxx_Spi>
 800427e:	4603      	mov	r3, r0
 8004280:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8004282:	4a0e      	ldr	r2, [pc, #56]	; (80042bc <W25qxx_ReadStatusRegister+0x88>)
 8004284:	7bfb      	ldrb	r3, [r7, #15]
 8004286:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 800428a:	e00b      	b.n	80042a4 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 800428c:	2015      	movs	r0, #21
 800428e:	f7ff ff39 	bl	8004104 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004292:	20a5      	movs	r0, #165	; 0xa5
 8004294:	f7ff ff36 	bl	8004104 <W25qxx_Spi>
 8004298:	4603      	mov	r3, r0
 800429a:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 800429c:	4a07      	ldr	r2, [pc, #28]	; (80042bc <W25qxx_ReadStatusRegister+0x88>)
 800429e:	7bfb      	ldrb	r3, [r7, #15]
 80042a0:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80042a4:	2201      	movs	r2, #1
 80042a6:	2140      	movs	r1, #64	; 0x40
 80042a8:	4803      	ldr	r0, [pc, #12]	; (80042b8 <W25qxx_ReadStatusRegister+0x84>)
 80042aa:	f005 faad 	bl	8009808 <HAL_GPIO_WritePin>
	return status;
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40020c00 	.word	0x40020c00
 80042bc:	20006dd4 	.word	0x20006dd4

080042c0 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 80042c4:	2001      	movs	r0, #1
 80042c6:	f011 fe38 	bl	8015f3a <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80042ca:	2200      	movs	r2, #0
 80042cc:	2140      	movs	r1, #64	; 0x40
 80042ce:	480f      	ldr	r0, [pc, #60]	; (800430c <W25qxx_WaitForWriteEnd+0x4c>)
 80042d0:	f005 fa9a 	bl	8009808 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 80042d4:	2005      	movs	r0, #5
 80042d6:	f7ff ff15 	bl	8004104 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80042da:	20a5      	movs	r0, #165	; 0xa5
 80042dc:	f7ff ff12 	bl	8004104 <W25qxx_Spi>
 80042e0:	4603      	mov	r3, r0
 80042e2:	461a      	mov	r2, r3
 80042e4:	4b0a      	ldr	r3, [pc, #40]	; (8004310 <W25qxx_WaitForWriteEnd+0x50>)
 80042e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 80042ea:	2001      	movs	r0, #1
 80042ec:	f011 fe25 	bl	8015f3a <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80042f0:	4b07      	ldr	r3, [pc, #28]	; (8004310 <W25qxx_WaitForWriteEnd+0x50>)
 80042f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1ed      	bne.n	80042da <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80042fe:	2201      	movs	r2, #1
 8004300:	2140      	movs	r1, #64	; 0x40
 8004302:	4802      	ldr	r0, [pc, #8]	; (800430c <W25qxx_WaitForWriteEnd+0x4c>)
 8004304:	f005 fa80 	bl	8009808 <HAL_GPIO_WritePin>
}
 8004308:	bf00      	nop
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40020c00 	.word	0x40020c00
 8004310:	20006dd4 	.word	0x20006dd4

08004314 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 800431a:	4b90      	ldr	r3, [pc, #576]	; (800455c <W25qxx_Init+0x248>)
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8004322:	e002      	b.n	800432a <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8004324:	2001      	movs	r0, #1
 8004326:	f011 fe08 	bl	8015f3a <osDelay>
	while (HAL_GetTick() < 100)
 800432a:	f004 fb55 	bl	80089d8 <HAL_GetTick>
 800432e:	4603      	mov	r3, r0
 8004330:	2b63      	cmp	r3, #99	; 0x63
 8004332:	d9f7      	bls.n	8004324 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004334:	2201      	movs	r2, #1
 8004336:	2140      	movs	r1, #64	; 0x40
 8004338:	4889      	ldr	r0, [pc, #548]	; (8004560 <W25qxx_Init+0x24c>)
 800433a:	f005 fa65 	bl	8009808 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 800433e:	2064      	movs	r0, #100	; 0x64
 8004340:	f011 fdfb 	bl	8015f3a <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 8004344:	4887      	ldr	r0, [pc, #540]	; (8004564 <W25qxx_Init+0x250>)
 8004346:	f018 fb07 	bl	801c958 <puts>
#endif
	id = W25qxx_ReadID();
 800434a:	f7ff fef1 	bl	8004130 <W25qxx_ReadID>
 800434e:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	4885      	ldr	r0, [pc, #532]	; (8004568 <W25qxx_Init+0x254>)
 8004354:	f018 fa7a 	bl	801c84c <iprintf>
#endif
	switch (id & 0x000000FF)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	b2db      	uxtb	r3, r3
 800435c:	3b11      	subs	r3, #17
 800435e:	2b0f      	cmp	r3, #15
 8004360:	f200 808b 	bhi.w	800447a <W25qxx_Init+0x166>
 8004364:	a201      	add	r2, pc, #4	; (adr r2, 800436c <W25qxx_Init+0x58>)
 8004366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436a:	bf00      	nop
 800436c:	08004467 	.word	0x08004467
 8004370:	08004453 	.word	0x08004453
 8004374:	0800443f 	.word	0x0800443f
 8004378:	0800442b 	.word	0x0800442b
 800437c:	08004417 	.word	0x08004417
 8004380:	08004403 	.word	0x08004403
 8004384:	080043ef 	.word	0x080043ef
 8004388:	080043d9 	.word	0x080043d9
 800438c:	080043c3 	.word	0x080043c3
 8004390:	0800447b 	.word	0x0800447b
 8004394:	0800447b 	.word	0x0800447b
 8004398:	0800447b 	.word	0x0800447b
 800439c:	0800447b 	.word	0x0800447b
 80043a0:	0800447b 	.word	0x0800447b
 80043a4:	0800447b 	.word	0x0800447b
 80043a8:	080043ad 	.word	0x080043ad
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 80043ac:	4b6b      	ldr	r3, [pc, #428]	; (800455c <W25qxx_Init+0x248>)
 80043ae:	220a      	movs	r2, #10
 80043b0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 80043b2:	4b6a      	ldr	r3, [pc, #424]	; (800455c <W25qxx_Init+0x248>)
 80043b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043b8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 80043ba:	486c      	ldr	r0, [pc, #432]	; (800456c <W25qxx_Init+0x258>)
 80043bc:	f018 facc 	bl	801c958 <puts>
#endif
		break;
 80043c0:	e064      	b.n	800448c <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 80043c2:	4b66      	ldr	r3, [pc, #408]	; (800455c <W25qxx_Init+0x248>)
 80043c4:	2209      	movs	r2, #9
 80043c6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 80043c8:	4b64      	ldr	r3, [pc, #400]	; (800455c <W25qxx_Init+0x248>)
 80043ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043ce:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 80043d0:	4867      	ldr	r0, [pc, #412]	; (8004570 <W25qxx_Init+0x25c>)
 80043d2:	f018 fac1 	bl	801c958 <puts>
#endif
		break;
 80043d6:	e059      	b.n	800448c <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 80043d8:	4b60      	ldr	r3, [pc, #384]	; (800455c <W25qxx_Init+0x248>)
 80043da:	2208      	movs	r2, #8
 80043dc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 80043de:	4b5f      	ldr	r3, [pc, #380]	; (800455c <W25qxx_Init+0x248>)
 80043e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043e4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 80043e6:	4863      	ldr	r0, [pc, #396]	; (8004574 <W25qxx_Init+0x260>)
 80043e8:	f018 fab6 	bl	801c958 <puts>
#endif
		break;
 80043ec:	e04e      	b.n	800448c <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 80043ee:	4b5b      	ldr	r3, [pc, #364]	; (800455c <W25qxx_Init+0x248>)
 80043f0:	2207      	movs	r2, #7
 80043f2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 80043f4:	4b59      	ldr	r3, [pc, #356]	; (800455c <W25qxx_Init+0x248>)
 80043f6:	2280      	movs	r2, #128	; 0x80
 80043f8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 80043fa:	485f      	ldr	r0, [pc, #380]	; (8004578 <W25qxx_Init+0x264>)
 80043fc:	f018 faac 	bl	801c958 <puts>
#endif
		break;
 8004400:	e044      	b.n	800448c <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8004402:	4b56      	ldr	r3, [pc, #344]	; (800455c <W25qxx_Init+0x248>)
 8004404:	2206      	movs	r2, #6
 8004406:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8004408:	4b54      	ldr	r3, [pc, #336]	; (800455c <W25qxx_Init+0x248>)
 800440a:	2240      	movs	r2, #64	; 0x40
 800440c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 800440e:	485b      	ldr	r0, [pc, #364]	; (800457c <W25qxx_Init+0x268>)
 8004410:	f018 faa2 	bl	801c958 <puts>
#endif
		break;
 8004414:	e03a      	b.n	800448c <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8004416:	4b51      	ldr	r3, [pc, #324]	; (800455c <W25qxx_Init+0x248>)
 8004418:	2205      	movs	r2, #5
 800441a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 800441c:	4b4f      	ldr	r3, [pc, #316]	; (800455c <W25qxx_Init+0x248>)
 800441e:	2220      	movs	r2, #32
 8004420:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 8004422:	4857      	ldr	r0, [pc, #348]	; (8004580 <W25qxx_Init+0x26c>)
 8004424:	f018 fa98 	bl	801c958 <puts>
#endif
		break;
 8004428:	e030      	b.n	800448c <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 800442a:	4b4c      	ldr	r3, [pc, #304]	; (800455c <W25qxx_Init+0x248>)
 800442c:	2204      	movs	r2, #4
 800442e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8004430:	4b4a      	ldr	r3, [pc, #296]	; (800455c <W25qxx_Init+0x248>)
 8004432:	2210      	movs	r2, #16
 8004434:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 8004436:	4853      	ldr	r0, [pc, #332]	; (8004584 <W25qxx_Init+0x270>)
 8004438:	f018 fa8e 	bl	801c958 <puts>
#endif
		break;
 800443c:	e026      	b.n	800448c <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 800443e:	4b47      	ldr	r3, [pc, #284]	; (800455c <W25qxx_Init+0x248>)
 8004440:	2203      	movs	r2, #3
 8004442:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8004444:	4b45      	ldr	r3, [pc, #276]	; (800455c <W25qxx_Init+0x248>)
 8004446:	2208      	movs	r2, #8
 8004448:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 800444a:	484f      	ldr	r0, [pc, #316]	; (8004588 <W25qxx_Init+0x274>)
 800444c:	f018 fa84 	bl	801c958 <puts>
#endif
		break;
 8004450:	e01c      	b.n	800448c <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8004452:	4b42      	ldr	r3, [pc, #264]	; (800455c <W25qxx_Init+0x248>)
 8004454:	2202      	movs	r2, #2
 8004456:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8004458:	4b40      	ldr	r3, [pc, #256]	; (800455c <W25qxx_Init+0x248>)
 800445a:	2204      	movs	r2, #4
 800445c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 800445e:	484b      	ldr	r0, [pc, #300]	; (800458c <W25qxx_Init+0x278>)
 8004460:	f018 fa7a 	bl	801c958 <puts>
#endif
		break;
 8004464:	e012      	b.n	800448c <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8004466:	4b3d      	ldr	r3, [pc, #244]	; (800455c <W25qxx_Init+0x248>)
 8004468:	2201      	movs	r2, #1
 800446a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 800446c:	4b3b      	ldr	r3, [pc, #236]	; (800455c <W25qxx_Init+0x248>)
 800446e:	2202      	movs	r2, #2
 8004470:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 8004472:	4847      	ldr	r0, [pc, #284]	; (8004590 <W25qxx_Init+0x27c>)
 8004474:	f018 fa70 	bl	801c958 <puts>
#endif
		break;
 8004478:	e008      	b.n	800448c <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 800447a:	4846      	ldr	r0, [pc, #280]	; (8004594 <W25qxx_Init+0x280>)
 800447c:	f018 fa6c 	bl	801c958 <puts>
#endif
		w25qxx.Lock = 0;
 8004480:	4b36      	ldr	r3, [pc, #216]	; (800455c <W25qxx_Init+0x248>)
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8004488:	2300      	movs	r3, #0
 800448a:	e063      	b.n	8004554 <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 800448c:	4b33      	ldr	r3, [pc, #204]	; (800455c <W25qxx_Init+0x248>)
 800448e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004492:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8004494:	4b31      	ldr	r3, [pc, #196]	; (800455c <W25qxx_Init+0x248>)
 8004496:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800449a:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 800449c:	4b2f      	ldr	r3, [pc, #188]	; (800455c <W25qxx_Init+0x248>)
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	4a2e      	ldr	r2, [pc, #184]	; (800455c <W25qxx_Init+0x248>)
 80044a4:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 80044a6:	4b2d      	ldr	r3, [pc, #180]	; (800455c <W25qxx_Init+0x248>)
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	4a2c      	ldr	r2, [pc, #176]	; (800455c <W25qxx_Init+0x248>)
 80044ac:	6912      	ldr	r2, [r2, #16]
 80044ae:	fb02 f303 	mul.w	r3, r2, r3
 80044b2:	4a2a      	ldr	r2, [pc, #168]	; (800455c <W25qxx_Init+0x248>)
 80044b4:	8952      	ldrh	r2, [r2, #10]
 80044b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80044ba:	4a28      	ldr	r2, [pc, #160]	; (800455c <W25qxx_Init+0x248>)
 80044bc:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80044be:	4b27      	ldr	r3, [pc, #156]	; (800455c <W25qxx_Init+0x248>)
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	4a25      	ldr	r2, [pc, #148]	; (800455c <W25qxx_Init+0x248>)
 80044c6:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80044c8:	4b24      	ldr	r3, [pc, #144]	; (800455c <W25qxx_Init+0x248>)
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	4a23      	ldr	r2, [pc, #140]	; (800455c <W25qxx_Init+0x248>)
 80044ce:	6912      	ldr	r2, [r2, #16]
 80044d0:	fb02 f303 	mul.w	r3, r2, r3
 80044d4:	0a9b      	lsrs	r3, r3, #10
 80044d6:	4a21      	ldr	r2, [pc, #132]	; (800455c <W25qxx_Init+0x248>)
 80044d8:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80044da:	f7ff fe5f 	bl	800419c <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80044de:	2001      	movs	r0, #1
 80044e0:	f7ff fea8 	bl	8004234 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80044e4:	2002      	movs	r0, #2
 80044e6:	f7ff fea5 	bl	8004234 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80044ea:	2003      	movs	r0, #3
 80044ec:	f7ff fea2 	bl	8004234 <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 80044f0:	4b1a      	ldr	r3, [pc, #104]	; (800455c <W25qxx_Init+0x248>)
 80044f2:	895b      	ldrh	r3, [r3, #10]
 80044f4:	4619      	mov	r1, r3
 80044f6:	4828      	ldr	r0, [pc, #160]	; (8004598 <W25qxx_Init+0x284>)
 80044f8:	f018 f9a8 	bl	801c84c <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 80044fc:	4b17      	ldr	r3, [pc, #92]	; (800455c <W25qxx_Init+0x248>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	4619      	mov	r1, r3
 8004502:	4826      	ldr	r0, [pc, #152]	; (800459c <W25qxx_Init+0x288>)
 8004504:	f018 f9a2 	bl	801c84c <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 8004508:	4b14      	ldr	r3, [pc, #80]	; (800455c <W25qxx_Init+0x248>)
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	4619      	mov	r1, r3
 800450e:	4824      	ldr	r0, [pc, #144]	; (80045a0 <W25qxx_Init+0x28c>)
 8004510:	f018 f99c 	bl	801c84c <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 8004514:	4b11      	ldr	r3, [pc, #68]	; (800455c <W25qxx_Init+0x248>)
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	4619      	mov	r1, r3
 800451a:	4822      	ldr	r0, [pc, #136]	; (80045a4 <W25qxx_Init+0x290>)
 800451c:	f018 f996 	bl	801c84c <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 8004520:	4b0e      	ldr	r3, [pc, #56]	; (800455c <W25qxx_Init+0x248>)
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	4619      	mov	r1, r3
 8004526:	4820      	ldr	r0, [pc, #128]	; (80045a8 <W25qxx_Init+0x294>)
 8004528:	f018 f990 	bl	801c84c <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 800452c:	4b0b      	ldr	r3, [pc, #44]	; (800455c <W25qxx_Init+0x248>)
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	4619      	mov	r1, r3
 8004532:	481e      	ldr	r0, [pc, #120]	; (80045ac <W25qxx_Init+0x298>)
 8004534:	f018 f98a 	bl	801c84c <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 8004538:	4b08      	ldr	r3, [pc, #32]	; (800455c <W25qxx_Init+0x248>)
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	4619      	mov	r1, r3
 800453e:	481c      	ldr	r0, [pc, #112]	; (80045b0 <W25qxx_Init+0x29c>)
 8004540:	f018 f984 	bl	801c84c <iprintf>
	printf("w25qxx Init Done\r\n");
 8004544:	481b      	ldr	r0, [pc, #108]	; (80045b4 <W25qxx_Init+0x2a0>)
 8004546:	f018 fa07 	bl	801c958 <puts>
#endif
	w25qxx.Lock = 0;
 800454a:	4b04      	ldr	r3, [pc, #16]	; (800455c <W25qxx_Init+0x248>)
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8004552:	2301      	movs	r3, #1
}
 8004554:	4618      	mov	r0, r3
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	20006dd4 	.word	0x20006dd4
 8004560:	40020c00 	.word	0x40020c00
 8004564:	080214d8 	.word	0x080214d8
 8004568:	080214f0 	.word	0x080214f0
 800456c:	08021504 	.word	0x08021504
 8004570:	0802151c 	.word	0x0802151c
 8004574:	08021534 	.word	0x08021534
 8004578:	0802154c 	.word	0x0802154c
 800457c:	08021564 	.word	0x08021564
 8004580:	0802157c 	.word	0x0802157c
 8004584:	08021594 	.word	0x08021594
 8004588:	080215ac 	.word	0x080215ac
 800458c:	080215c4 	.word	0x080215c4
 8004590:	080215dc 	.word	0x080215dc
 8004594:	080215f4 	.word	0x080215f4
 8004598:	08021608 	.word	0x08021608
 800459c:	08021628 	.word	0x08021628
 80045a0:	08021640 	.word	0x08021640
 80045a4:	08021660 	.word	0x08021660
 80045a8:	0802167c 	.word	0x0802167c
 80045ac:	0802169c 	.word	0x0802169c
 80045b0:	080216b8 	.word	0x080216b8
 80045b4:	080216d8 	.word	0x080216d8

080045b8 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 80045c0:	e002      	b.n	80045c8 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 80045c2:	2001      	movs	r0, #1
 80045c4:	f011 fcb9 	bl	8015f3a <osDelay>
	while (w25qxx.Lock == 1)
 80045c8:	4b2d      	ldr	r3, [pc, #180]	; (8004680 <W25qxx_EraseSector+0xc8>)
 80045ca:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d0f7      	beq.n	80045c2 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 80045d2:	4b2b      	ldr	r3, [pc, #172]	; (8004680 <W25qxx_EraseSector+0xc8>)
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 80045da:	f004 f9fd 	bl	80089d8 <HAL_GetTick>
 80045de:	60f8      	str	r0, [r7, #12]
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	4828      	ldr	r0, [pc, #160]	; (8004684 <W25qxx_EraseSector+0xcc>)
 80045e4:	f018 f932 	bl	801c84c <iprintf>
#endif
	W25qxx_WaitForWriteEnd();
 80045e8:	f7ff fe6a 	bl	80042c0 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 80045ec:	4b24      	ldr	r3, [pc, #144]	; (8004680 <W25qxx_EraseSector+0xc8>)
 80045ee:	691a      	ldr	r2, [r3, #16]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	fb02 f303 	mul.w	r3, r2, r3
 80045f6:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 80045f8:	f7ff fe06 	bl	8004208 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80045fc:	2200      	movs	r2, #0
 80045fe:	2140      	movs	r1, #64	; 0x40
 8004600:	4821      	ldr	r0, [pc, #132]	; (8004688 <W25qxx_EraseSector+0xd0>)
 8004602:	f005 f901 	bl	8009808 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004606:	4b1e      	ldr	r3, [pc, #120]	; (8004680 <W25qxx_EraseSector+0xc8>)
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	2b08      	cmp	r3, #8
 800460c:	d909      	bls.n	8004622 <W25qxx_EraseSector+0x6a>
	{
		W25qxx_Spi(0x21);
 800460e:	2021      	movs	r0, #33	; 0x21
 8004610:	f7ff fd78 	bl	8004104 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	0e1b      	lsrs	r3, r3, #24
 8004618:	b2db      	uxtb	r3, r3
 800461a:	4618      	mov	r0, r3
 800461c:	f7ff fd72 	bl	8004104 <W25qxx_Spi>
 8004620:	e002      	b.n	8004628 <W25qxx_EraseSector+0x70>
	}
	else
	{
		W25qxx_Spi(0x20);
 8004622:	2020      	movs	r0, #32
 8004624:	f7ff fd6e 	bl	8004104 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	0c1b      	lsrs	r3, r3, #16
 800462c:	b2db      	uxtb	r3, r3
 800462e:	4618      	mov	r0, r3
 8004630:	f7ff fd68 	bl	8004104 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	0a1b      	lsrs	r3, r3, #8
 8004638:	b2db      	uxtb	r3, r3
 800463a:	4618      	mov	r0, r3
 800463c:	f7ff fd62 	bl	8004104 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	b2db      	uxtb	r3, r3
 8004644:	4618      	mov	r0, r3
 8004646:	f7ff fd5d 	bl	8004104 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800464a:	2201      	movs	r2, #1
 800464c:	2140      	movs	r1, #64	; 0x40
 800464e:	480e      	ldr	r0, [pc, #56]	; (8004688 <W25qxx_EraseSector+0xd0>)
 8004650:	f005 f8da 	bl	8009808 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004654:	f7ff fe34 	bl	80042c0 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
 8004658:	f004 f9be 	bl	80089d8 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	4619      	mov	r1, r3
 8004664:	4809      	ldr	r0, [pc, #36]	; (800468c <W25qxx_EraseSector+0xd4>)
 8004666:	f018 f8f1 	bl	801c84c <iprintf>
#endif
	W25qxx_Delay(1);
 800466a:	2001      	movs	r0, #1
 800466c:	f011 fc65 	bl	8015f3a <osDelay>
	w25qxx.Lock = 0;
 8004670:	4b03      	ldr	r3, [pc, #12]	; (8004680 <W25qxx_EraseSector+0xc8>)
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004678:	bf00      	nop
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	20006dd4 	.word	0x20006dd4
 8004684:	08021730 	.word	0x08021730
 8004688:	40020c00 	.word	0x40020c00
 800468c:	08021754 	.word	0x08021754

08004690 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8004698:	4b07      	ldr	r3, [pc, #28]	; (80046b8 <W25qxx_SectorToPage+0x28>)
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	fb02 f303 	mul.w	r3, r2, r3
 80046a2:	4a05      	ldr	r2, [pc, #20]	; (80046b8 <W25qxx_SectorToPage+0x28>)
 80046a4:	8952      	ldrh	r2, [r2, #10]
 80046a6:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	20006dd4 	.word	0x20006dd4

080046bc <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
 80046c8:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80046ca:	e002      	b.n	80046d2 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 80046cc:	2001      	movs	r0, #1
 80046ce:	f011 fc34 	bl	8015f3a <osDelay>
	while (w25qxx.Lock == 1)
 80046d2:	4b57      	ldr	r3, [pc, #348]	; (8004830 <W25qxx_WritePage+0x174>)
 80046d4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d0f7      	beq.n	80046cc <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 80046dc:	4b54      	ldr	r3, [pc, #336]	; (8004830 <W25qxx_WritePage+0x174>)
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4413      	add	r3, r2
 80046ea:	4a51      	ldr	r2, [pc, #324]	; (8004830 <W25qxx_WritePage+0x174>)
 80046ec:	8952      	ldrh	r2, [r2, #10]
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d802      	bhi.n	80046f8 <W25qxx_WritePage+0x3c>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d105      	bne.n	8004704 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80046f8:	4b4d      	ldr	r3, [pc, #308]	; (8004830 <W25qxx_WritePage+0x174>)
 80046fa:	895b      	ldrh	r3, [r3, #10]
 80046fc:	461a      	mov	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	4413      	add	r3, r2
 800470a:	4a49      	ldr	r2, [pc, #292]	; (8004830 <W25qxx_WritePage+0x174>)
 800470c:	8952      	ldrh	r2, [r2, #10]
 800470e:	4293      	cmp	r3, r2
 8004710:	d905      	bls.n	800471e <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004712:	4b47      	ldr	r3, [pc, #284]	; (8004830 <W25qxx_WritePage+0x174>)
 8004714:	895b      	ldrh	r3, [r3, #10]
 8004716:	461a      	mov	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	68b9      	ldr	r1, [r7, #8]
 8004724:	4843      	ldr	r0, [pc, #268]	; (8004834 <W25qxx_WritePage+0x178>)
 8004726:	f018 f891 	bl	801c84c <iprintf>
	W25qxx_Delay(100);
 800472a:	2064      	movs	r0, #100	; 0x64
 800472c:	f011 fc05 	bl	8015f3a <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8004730:	f004 f952 	bl	80089d8 <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 8004736:	f7ff fdc3 	bl	80042c0 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 800473a:	f7ff fd65 	bl	8004208 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800473e:	2200      	movs	r2, #0
 8004740:	2140      	movs	r1, #64	; 0x40
 8004742:	483d      	ldr	r0, [pc, #244]	; (8004838 <W25qxx_WritePage+0x17c>)
 8004744:	f005 f860 	bl	8009808 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8004748:	4b39      	ldr	r3, [pc, #228]	; (8004830 <W25qxx_WritePage+0x174>)
 800474a:	895b      	ldrh	r3, [r3, #10]
 800474c:	461a      	mov	r2, r3
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	fb03 f302 	mul.w	r3, r3, r2
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	4413      	add	r3, r2
 8004758:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 800475a:	4b35      	ldr	r3, [pc, #212]	; (8004830 <W25qxx_WritePage+0x174>)
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	2b08      	cmp	r3, #8
 8004760:	d909      	bls.n	8004776 <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 8004762:	2012      	movs	r0, #18
 8004764:	f7ff fcce 	bl	8004104 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	0e1b      	lsrs	r3, r3, #24
 800476c:	b2db      	uxtb	r3, r3
 800476e:	4618      	mov	r0, r3
 8004770:	f7ff fcc8 	bl	8004104 <W25qxx_Spi>
 8004774:	e002      	b.n	800477c <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 8004776:	2002      	movs	r0, #2
 8004778:	f7ff fcc4 	bl	8004104 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	0c1b      	lsrs	r3, r3, #16
 8004780:	b2db      	uxtb	r3, r3
 8004782:	4618      	mov	r0, r3
 8004784:	f7ff fcbe 	bl	8004104 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	0a1b      	lsrs	r3, r3, #8
 800478c:	b2db      	uxtb	r3, r3
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff fcb8 	bl	8004104 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	b2db      	uxtb	r3, r3
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff fcb3 	bl	8004104 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	2364      	movs	r3, #100	; 0x64
 80047a4:	68f9      	ldr	r1, [r7, #12]
 80047a6:	4825      	ldr	r0, [pc, #148]	; (800483c <W25qxx_WritePage+0x180>)
 80047a8:	f008 ffa1 	bl	800d6ee <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80047ac:	2201      	movs	r2, #1
 80047ae:	2140      	movs	r1, #64	; 0x40
 80047b0:	4821      	ldr	r0, [pc, #132]	; (8004838 <W25qxx_WritePage+0x17c>)
 80047b2:	f005 f829 	bl	8009808 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80047b6:	f7ff fd83 	bl	80042c0 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 80047ba:	f004 f90d 	bl	80089d8 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 80047c6:	2300      	movs	r3, #0
 80047c8:	617b      	str	r3, [r7, #20]
 80047ca:	e018      	b.n	80047fe <W25qxx_WritePage+0x142>
	{
		if ((i % 8 == 0) && (i > 2))
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d108      	bne.n	80047e8 <W25qxx_WritePage+0x12c>
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d905      	bls.n	80047e8 <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 80047dc:	4818      	ldr	r0, [pc, #96]	; (8004840 <W25qxx_WritePage+0x184>)
 80047de:	f018 f8bb 	bl	801c958 <puts>
			W25qxx_Delay(10);
 80047e2:	200a      	movs	r0, #10
 80047e4:	f011 fba9 	bl	8015f3a <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	4413      	add	r3, r2
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	4619      	mov	r1, r3
 80047f2:	4814      	ldr	r0, [pc, #80]	; (8004844 <W25qxx_WritePage+0x188>)
 80047f4:	f018 f82a 	bl	801c84c <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	3301      	adds	r3, #1
 80047fc:	617b      	str	r3, [r7, #20]
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	429a      	cmp	r2, r3
 8004804:	d3e2      	bcc.n	80047cc <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 8004806:	480e      	ldr	r0, [pc, #56]	; (8004840 <W25qxx_WritePage+0x184>)
 8004808:	f018 f8a6 	bl	801c958 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 800480c:	6939      	ldr	r1, [r7, #16]
 800480e:	480e      	ldr	r0, [pc, #56]	; (8004848 <W25qxx_WritePage+0x18c>)
 8004810:	f018 f81c 	bl	801c84c <iprintf>
	W25qxx_Delay(100);
 8004814:	2064      	movs	r0, #100	; 0x64
 8004816:	f011 fb90 	bl	8015f3a <osDelay>
#endif
	W25qxx_Delay(1);
 800481a:	2001      	movs	r0, #1
 800481c:	f011 fb8d 	bl	8015f3a <osDelay>
	w25qxx.Lock = 0;
 8004820:	4b03      	ldr	r3, [pc, #12]	; (8004830 <W25qxx_WritePage+0x174>)
 8004822:	2200      	movs	r2, #0
 8004824:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004828:	bf00      	nop
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	20006dd4 	.word	0x20006dd4
 8004834:	080219b8 	.word	0x080219b8
 8004838:	40020c00 	.word	0x40020c00
 800483c:	20005fd0 	.word	0x20005fd0
 8004840:	080219f4 	.word	0x080219f4
 8004844:	080219f8 	.word	0x080219f8
 8004848:	08021a00 	.word	0x08021a00

0800484c <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b088      	sub	sp, #32
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
 8004858:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 800485a:	4b36      	ldr	r3, [pc, #216]	; (8004934 <W25qxx_WriteSector+0xe8>)
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d802      	bhi.n	800486a <W25qxx_WriteSector+0x1e>
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d102      	bne.n	8004870 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 800486a:	4b32      	ldr	r3, [pc, #200]	; (8004934 <W25qxx_WriteSector+0xe8>)
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	68b9      	ldr	r1, [r7, #8]
 8004876:	4830      	ldr	r0, [pc, #192]	; (8004938 <W25qxx_WriteSector+0xec>)
 8004878:	f017 ffe8 	bl	801c84c <iprintf>
	W25qxx_Delay(100);
 800487c:	2064      	movs	r0, #100	; 0x64
 800487e:	f011 fb5c 	bl	8015f3a <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004882:	4b2c      	ldr	r3, [pc, #176]	; (8004934 <W25qxx_WriteSector+0xe8>)
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	429a      	cmp	r2, r3
 800488a:	d306      	bcc.n	800489a <W25qxx_WriteSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
 800488c:	482b      	ldr	r0, [pc, #172]	; (800493c <W25qxx_WriteSector+0xf0>)
 800488e:	f018 f863 	bl	801c958 <puts>
		W25qxx_Delay(100);
 8004892:	2064      	movs	r0, #100	; 0x64
 8004894:	f011 fb51 	bl	8015f3a <osDelay>
#endif
		return;
 8004898:	e048      	b.n	800492c <W25qxx_WriteSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	441a      	add	r2, r3
 80048a0:	4b24      	ldr	r3, [pc, #144]	; (8004934 <W25qxx_WriteSector+0xe8>)
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d905      	bls.n	80048b4 <W25qxx_WriteSector+0x68>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 80048a8:	4b22      	ldr	r3, [pc, #136]	; (8004934 <W25qxx_WriteSector+0xe8>)
 80048aa:	691a      	ldr	r2, [r3, #16]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	61bb      	str	r3, [r7, #24]
 80048b2:	e001      	b.n	80048b8 <W25qxx_WriteSector+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80048b8:	68b8      	ldr	r0, [r7, #8]
 80048ba:	f7ff fee9 	bl	8004690 <W25qxx_SectorToPage>
 80048be:	4602      	mov	r2, r0
 80048c0:	4b1c      	ldr	r3, [pc, #112]	; (8004934 <W25qxx_WriteSector+0xe8>)
 80048c2:	895b      	ldrh	r3, [r3, #10]
 80048c4:	4619      	mov	r1, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80048cc:	4413      	add	r3, r2
 80048ce:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80048d0:	4b18      	ldr	r3, [pc, #96]	; (8004934 <W25qxx_WriteSector+0xe8>)
 80048d2:	895b      	ldrh	r3, [r3, #10]
 80048d4:	461a      	mov	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80048dc:	fb02 f201 	mul.w	r2, r2, r1
 80048e0:	1a9b      	subs	r3, r3, r2
 80048e2:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	69f9      	ldr	r1, [r7, #28]
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f7ff fee6 	bl	80046bc <W25qxx_WritePage>
		StartPage++;
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	3301      	adds	r3, #1
 80048f4:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 80048f6:	4b0f      	ldr	r3, [pc, #60]	; (8004934 <W25qxx_WriteSector+0xe8>)
 80048f8:	895b      	ldrh	r3, [r3, #10]
 80048fa:	461a      	mov	r2, r3
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	1a9a      	subs	r2, r3, r2
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	4413      	add	r3, r2
 8004904:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8004906:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <W25qxx_WriteSector+0xe8>)
 8004908:	895b      	ldrh	r3, [r3, #10]
 800490a:	461a      	mov	r2, r3
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	4413      	add	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8004916:	2300      	movs	r3, #0
 8004918:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	2b00      	cmp	r3, #0
 800491e:	dce1      	bgt.n	80048e4 <W25qxx_WriteSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
 8004920:	4807      	ldr	r0, [pc, #28]	; (8004940 <W25qxx_WriteSector+0xf4>)
 8004922:	f018 f819 	bl	801c958 <puts>
	W25qxx_Delay(100);
 8004926:	2064      	movs	r0, #100	; 0x64
 8004928:	f011 fb07 	bl	8015f3a <osDelay>
#endif
}
 800492c:	3720      	adds	r7, #32
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	20006dd4 	.word	0x20006dd4
 8004938:	08021a24 	.word	0x08021a24
 800493c:	08021a64 	.word	0x08021a64
 8004940:	08021a84 	.word	0x08021a84

08004944 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
 8004950:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8004952:	e002      	b.n	800495a <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8004954:	2001      	movs	r0, #1
 8004956:	f011 faf0 	bl	8015f3a <osDelay>
	while (w25qxx.Lock == 1)
 800495a:	4b54      	ldr	r3, [pc, #336]	; (8004aac <W25qxx_ReadPage+0x168>)
 800495c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004960:	2b01      	cmp	r3, #1
 8004962:	d0f7      	beq.n	8004954 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8004964:	4b51      	ldr	r3, [pc, #324]	; (8004aac <W25qxx_ReadPage+0x168>)
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 800496c:	4b4f      	ldr	r3, [pc, #316]	; (8004aac <W25qxx_ReadPage+0x168>)
 800496e:	895b      	ldrh	r3, [r3, #10]
 8004970:	461a      	mov	r2, r3
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	4293      	cmp	r3, r2
 8004976:	d802      	bhi.n	800497e <W25qxx_ReadPage+0x3a>
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d102      	bne.n	8004984 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 800497e:	4b4b      	ldr	r3, [pc, #300]	; (8004aac <W25qxx_ReadPage+0x168>)
 8004980:	895b      	ldrh	r3, [r3, #10]
 8004982:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	4413      	add	r3, r2
 800498a:	4a48      	ldr	r2, [pc, #288]	; (8004aac <W25qxx_ReadPage+0x168>)
 800498c:	8952      	ldrh	r2, [r2, #10]
 800498e:	4293      	cmp	r3, r2
 8004990:	d905      	bls.n	800499e <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004992:	4b46      	ldr	r3, [pc, #280]	; (8004aac <W25qxx_ReadPage+0x168>)
 8004994:	895b      	ldrh	r3, [r3, #10]
 8004996:	461a      	mov	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	68b9      	ldr	r1, [r7, #8]
 80049a4:	4842      	ldr	r0, [pc, #264]	; (8004ab0 <W25qxx_ReadPage+0x16c>)
 80049a6:	f017 ff51 	bl	801c84c <iprintf>
	W25qxx_Delay(100);
 80049aa:	2064      	movs	r0, #100	; 0x64
 80049ac:	f011 fac5 	bl	8015f3a <osDelay>
	uint32_t StartTime = HAL_GetTick();
 80049b0:	f004 f812 	bl	80089d8 <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 80049b6:	4b3d      	ldr	r3, [pc, #244]	; (8004aac <W25qxx_ReadPage+0x168>)
 80049b8:	895b      	ldrh	r3, [r3, #10]
 80049ba:	461a      	mov	r2, r3
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	fb03 f302 	mul.w	r3, r3, r2
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	4413      	add	r3, r2
 80049c6:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80049c8:	2200      	movs	r2, #0
 80049ca:	2140      	movs	r1, #64	; 0x40
 80049cc:	4839      	ldr	r0, [pc, #228]	; (8004ab4 <W25qxx_ReadPage+0x170>)
 80049ce:	f004 ff1b 	bl	8009808 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80049d2:	4b36      	ldr	r3, [pc, #216]	; (8004aac <W25qxx_ReadPage+0x168>)
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	2b08      	cmp	r3, #8
 80049d8:	d909      	bls.n	80049ee <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 80049da:	200c      	movs	r0, #12
 80049dc:	f7ff fb92 	bl	8004104 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	0e1b      	lsrs	r3, r3, #24
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7ff fb8c 	bl	8004104 <W25qxx_Spi>
 80049ec:	e002      	b.n	80049f4 <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 80049ee:	200b      	movs	r0, #11
 80049f0:	f7ff fb88 	bl	8004104 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	0c1b      	lsrs	r3, r3, #16
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7ff fb82 	bl	8004104 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	0a1b      	lsrs	r3, r3, #8
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff fb7c 	bl	8004104 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7ff fb77 	bl	8004104 <W25qxx_Spi>
	W25qxx_Spi(0);
 8004a16:	2000      	movs	r0, #0
 8004a18:	f7ff fb74 	bl	8004104 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	2364      	movs	r3, #100	; 0x64
 8004a22:	68f9      	ldr	r1, [r7, #12]
 8004a24:	4824      	ldr	r0, [pc, #144]	; (8004ab8 <W25qxx_ReadPage+0x174>)
 8004a26:	f008 ff9e 	bl	800d966 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	2140      	movs	r1, #64	; 0x40
 8004a2e:	4821      	ldr	r0, [pc, #132]	; (8004ab4 <W25qxx_ReadPage+0x170>)
 8004a30:	f004 feea 	bl	8009808 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8004a34:	f003 ffd0 	bl	80089d8 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8004a40:	2300      	movs	r3, #0
 8004a42:	617b      	str	r3, [r7, #20]
 8004a44:	e018      	b.n	8004a78 <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d108      	bne.n	8004a62 <W25qxx_ReadPage+0x11e>
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d905      	bls.n	8004a62 <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 8004a56:	4819      	ldr	r0, [pc, #100]	; (8004abc <W25qxx_ReadPage+0x178>)
 8004a58:	f017 ff7e 	bl	801c958 <puts>
			W25qxx_Delay(10);
 8004a5c:	200a      	movs	r0, #10
 8004a5e:	f011 fa6c 	bl	8015f3a <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	4413      	add	r3, r2
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	4814      	ldr	r0, [pc, #80]	; (8004ac0 <W25qxx_ReadPage+0x17c>)
 8004a6e:	f017 feed 	bl	801c84c <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	3301      	adds	r3, #1
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d3e2      	bcc.n	8004a46 <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 8004a80:	480e      	ldr	r0, [pc, #56]	; (8004abc <W25qxx_ReadPage+0x178>)
 8004a82:	f017 ff69 	bl	801c958 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 8004a86:	6939      	ldr	r1, [r7, #16]
 8004a88:	480e      	ldr	r0, [pc, #56]	; (8004ac4 <W25qxx_ReadPage+0x180>)
 8004a8a:	f017 fedf 	bl	801c84c <iprintf>
	W25qxx_Delay(100);
 8004a8e:	2064      	movs	r0, #100	; 0x64
 8004a90:	f011 fa53 	bl	8015f3a <osDelay>
#endif
	W25qxx_Delay(1);
 8004a94:	2001      	movs	r0, #1
 8004a96:	f011 fa50 	bl	8015f3a <osDelay>
	w25qxx.Lock = 0;
 8004a9a:	4b04      	ldr	r3, [pc, #16]	; (8004aac <W25qxx_ReadPage+0x168>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004aa2:	bf00      	nop
 8004aa4:	3718      	adds	r7, #24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	20006dd4 	.word	0x20006dd4
 8004ab0:	08021bd0 	.word	0x08021bd0
 8004ab4:	40020c00 	.word	0x40020c00
 8004ab8:	20005fd0 	.word	0x20005fd0
 8004abc:	080219f4 	.word	0x080219f4
 8004ac0:	080219f8 	.word	0x080219f8
 8004ac4:	08021c0c 	.word	0x08021c0c

08004ac8 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b088      	sub	sp, #32
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8004ad6:	4b36      	ldr	r3, [pc, #216]	; (8004bb0 <W25qxx_ReadSector+0xe8>)
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d802      	bhi.n	8004ae6 <W25qxx_ReadSector+0x1e>
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d102      	bne.n	8004aec <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8004ae6:	4b32      	ldr	r3, [pc, #200]	; (8004bb0 <W25qxx_ReadSector+0xe8>)
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	68b9      	ldr	r1, [r7, #8]
 8004af2:	4830      	ldr	r0, [pc, #192]	; (8004bb4 <W25qxx_ReadSector+0xec>)
 8004af4:	f017 feaa 	bl	801c84c <iprintf>
	W25qxx_Delay(100);
 8004af8:	2064      	movs	r0, #100	; 0x64
 8004afa:	f011 fa1e 	bl	8015f3a <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004afe:	4b2c      	ldr	r3, [pc, #176]	; (8004bb0 <W25qxx_ReadSector+0xe8>)
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d306      	bcc.n	8004b16 <W25qxx_ReadSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
 8004b08:	482b      	ldr	r0, [pc, #172]	; (8004bb8 <W25qxx_ReadSector+0xf0>)
 8004b0a:	f017 ff25 	bl	801c958 <puts>
		W25qxx_Delay(100);
 8004b0e:	2064      	movs	r0, #100	; 0x64
 8004b10:	f011 fa13 	bl	8015f3a <osDelay>
#endif
		return;
 8004b14:	e048      	b.n	8004ba8 <W25qxx_ReadSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	441a      	add	r2, r3
 8004b1c:	4b24      	ldr	r3, [pc, #144]	; (8004bb0 <W25qxx_ReadSector+0xe8>)
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d905      	bls.n	8004b30 <W25qxx_ReadSector+0x68>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8004b24:	4b22      	ldr	r3, [pc, #136]	; (8004bb0 <W25qxx_ReadSector+0xe8>)
 8004b26:	691a      	ldr	r2, [r3, #16]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	61bb      	str	r3, [r7, #24]
 8004b2e:	e001      	b.n	8004b34 <W25qxx_ReadSector+0x6c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004b34:	68b8      	ldr	r0, [r7, #8]
 8004b36:	f7ff fdab 	bl	8004690 <W25qxx_SectorToPage>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	4b1c      	ldr	r3, [pc, #112]	; (8004bb0 <W25qxx_ReadSector+0xe8>)
 8004b3e:	895b      	ldrh	r3, [r3, #10]
 8004b40:	4619      	mov	r1, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b48:	4413      	add	r3, r2
 8004b4a:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004b4c:	4b18      	ldr	r3, [pc, #96]	; (8004bb0 <W25qxx_ReadSector+0xe8>)
 8004b4e:	895b      	ldrh	r3, [r3, #10]
 8004b50:	461a      	mov	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b58:	fb02 f201 	mul.w	r2, r2, r1
 8004b5c:	1a9b      	subs	r3, r3, r2
 8004b5e:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	69f9      	ldr	r1, [r7, #28]
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f7ff feec 	bl	8004944 <W25qxx_ReadPage>
		StartPage++;
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8004b72:	4b0f      	ldr	r3, [pc, #60]	; (8004bb0 <W25qxx_ReadSector+0xe8>)
 8004b74:	895b      	ldrh	r3, [r3, #10]
 8004b76:	461a      	mov	r2, r3
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	1a9a      	subs	r2, r3, r2
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	4413      	add	r3, r2
 8004b80:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8004b82:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <W25qxx_ReadSector+0xe8>)
 8004b84:	895b      	ldrh	r3, [r3, #10]
 8004b86:	461a      	mov	r2, r3
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	4413      	add	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8004b92:	2300      	movs	r3, #0
 8004b94:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	dce1      	bgt.n	8004b60 <W25qxx_ReadSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
 8004b9c:	4807      	ldr	r0, [pc, #28]	; (8004bbc <W25qxx_ReadSector+0xf4>)
 8004b9e:	f017 fedb 	bl	801c958 <puts>
	W25qxx_Delay(100);
 8004ba2:	2064      	movs	r0, #100	; 0x64
 8004ba4:	f011 f9c9 	bl	8015f3a <osDelay>
#endif
}
 8004ba8:	3720      	adds	r7, #32
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	20006dd4 	.word	0x20006dd4
 8004bb4:	08021c30 	.word	0x08021c30
 8004bb8:	08021c70 	.word	0x08021c70
 8004bbc:	08021c90 	.word	0x08021c90

08004bc0 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	b2d2      	uxtb	r2, r2
 8004bd4:	4611      	mov	r1, r2
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	4798      	blx	r3
 8004bda:	4603      	mov	r3, r0
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <_Z12ISBDCallbackv>:

bool ISBDCallback() __attribute__((weak));
void ISBDConsoleCallback(IridiumSBD *device, char c) __attribute__((weak));
void ISBDDiagsCallback(IridiumSBD *device, char c) __attribute__((weak));

bool ISBDCallback() { return true; }
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	2301      	movs	r3, #1
 8004bea:	4618      	mov	r0, r3
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <_Z19ISBDConsoleCallbackP10IridiumSBDc>:
void ISBDConsoleCallback(IridiumSBD *device, char c) { }
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	70fb      	strb	r3, [r7, #3]
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <_Z17ISBDDiagsCallbackP10IridiumSBDc>:
void ISBDDiagsCallback(IridiumSBD *device, char c) { }
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	460b      	mov	r3, r1
 8004c16:	70fb      	strb	r3, [r7, #3]
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <_ZN10IridiumSBD5beginEv>:



// Power on the RockBLOCK or return from sleep
int IridiumSBD::begin()
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <_ZN10IridiumSBD5beginEv+0x16>
      return ISBD_REENTRANT;
 8004c36:	2309      	movs	r3, #9
 8004c38:	e01b      	b.n	8004c72 <_ZN10IridiumSBD5beginEv+0x4e>

   this->reentrant = true;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   int ret = internalBegin();
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fa84 	bl	8005150 <_ZN10IridiumSBD13internalBeginEv>
 8004c48:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

   // Absent a successful startup, keep the device turned off
   if (ret != ISBD_SUCCESS)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00b      	beq.n	8004c70 <_ZN10IridiumSBD5beginEv+0x4c>
   {
      if (this->useSerial)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <_ZN10IridiumSBD5beginEv+0x44>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 fdba 	bl	80057dc <_ZN10IridiumSBD13endSerialPortEv>
      power(false);
 8004c68:	2100      	movs	r1, #0
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fd04 	bl	8005678 <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 8004c70:	68fb      	ldr	r3, [r7, #12]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <_ZN10IridiumSBD5sleepEv>:
   return ret;
}

// Gracefully put device to lower power mode (if sleep pin provided)
int IridiumSBD::sleep()
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b084      	sub	sp, #16
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <_ZN10IridiumSBD5sleepEv+0x16>
      return ISBD_REENTRANT;
 8004c8c:	2309      	movs	r3, #9
 8004c8e:	e028      	b.n	8004ce2 <_ZN10IridiumSBD5sleepEv+0x68>

   if (this->useSerial && (this->sleepPin == -1))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d007      	beq.n	8004caa <_ZN10IridiumSBD5sleepEv+0x30>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca4:	d101      	bne.n	8004caa <_ZN10IridiumSBD5sleepEv+0x30>
      return ISBD_NO_SLEEP_PIN;
 8004ca6:	230b      	movs	r3, #11
 8004ca8:	e01b      	b.n	8004ce2 <_ZN10IridiumSBD5sleepEv+0x68>

   this->reentrant = true;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   int ret = internalSleep();
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 fbd6 	bl	8005464 <_ZN10IridiumSBD13internalSleepEv>
 8004cb8:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

   if (ret == ISBD_SUCCESS)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10b      	bne.n	8004ce0 <_ZN10IridiumSBD5sleepEv+0x66>
   {
      if (this->useSerial)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <_ZN10IridiumSBD5sleepEv+0x5e>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 fd82 	bl	80057dc <_ZN10IridiumSBD13endSerialPortEv>
      power(false); // power off
 8004cd8:	2100      	movs	r1, #0
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fccc 	bl	8005678 <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <_ZN10IridiumSBD15adjustATTimeoutEi>:
   }
}

// Tweak AT timeout
void IridiumSBD::adjustATTimeout(int seconds)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
 8004cf2:	6039      	str	r1, [r7, #0]
   this->atTimeout = seconds;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <_ZN10IridiumSBD16enableRingAlertsEb>:
{
   this->msstmWorkaroundRequested = useWorkAround;
}

void IridiumSBD::enableRingAlerts(bool enable) // true to enable SBDRING alerts and RING signal pin
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	460b      	mov	r3, r1
 8004d12:	70fb      	strb	r3, [r7, #3]
   this->ringAlertsEnabled = enable;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	78fa      	ldrb	r2, [r7, #3]
 8004d18:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
   if (enable)
 8004d1c:	78fb      	ldrb	r3, [r7, #3]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00e      	beq.n	8004d40 <_ZN10IridiumSBD16enableRingAlertsEb+0x38>
   {
      this->ringAsserted = false;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
      if (!this->useSerial) // If we are using I2C, clear the ring indicator flag
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d30:	f083 0301 	eor.w	r3, r3, #1
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d002      	beq.n	8004d40 <_ZN10IridiumSBD16enableRingAlertsEb+0x38>
      {
        clearRingIndicator();
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f9b2 	bl	80050a4 <_ZN10IridiumSBD18clearRingIndicatorEv>
      }
   }
}
 8004d40:	bf00      	nop
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <_ZN10IridiumSBD13getSystemTimeER2tm>:

   return ret;
}

int IridiumSBD::getSystemTime(struct tm &tm)
{
 8004d48:	b5b0      	push	{r4, r5, r7, lr}
 8004d4a:	b09c      	sub	sp, #112	; 0x70
 8004d4c:	af02      	add	r7, sp, #8
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
   char msstmResponseBuf[24];

   send(F("AT-MSSTM\r"));
 8004d52:	2301      	movs	r3, #1
 8004d54:	2201      	movs	r2, #1
 8004d56:	493f      	ldr	r1, [pc, #252]	; (8004e54 <_ZN10IridiumSBD13getSystemTimeER2tm+0x10c>)
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 fd4d 	bl	80057f8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(msstmResponseBuf, sizeof(msstmResponseBuf), "-MSSTM: "))
 8004d5e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004d62:	4b3d      	ldr	r3, [pc, #244]	; (8004e58 <_ZN10IridiumSBD13getSystemTimeER2tm+0x110>)
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	4b3d      	ldr	r3, [pc, #244]	; (8004e5c <_ZN10IridiumSBD13getSystemTimeER2tm+0x114>)
 8004d68:	2218      	movs	r2, #24
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fb8c 	bl	8005488 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8004d70:	4603      	mov	r3, r0
 8004d72:	f083 0301 	eor.w	r3, r3, #1
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d009      	beq.n	8004d90 <_ZN10IridiumSBD13getSystemTimeER2tm+0x48>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 fc49 	bl	8005614 <_ZN10IridiumSBD9cancelledEv>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <_ZN10IridiumSBD13getSystemTimeER2tm+0x44>
 8004d88:	2304      	movs	r3, #4
 8004d8a:	e05e      	b.n	8004e4a <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e05c      	b.n	8004e4a <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>

   if (!isxdigit(msstmResponseBuf[0]))
 8004d90:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004d94:	4618      	mov	r0, r3
 8004d96:	f016 fa55 	bl	801b244 <isxdigit>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <_ZN10IridiumSBD13getSystemTimeER2tm+0x5c>
      return ISBD_NO_NETWORK;
 8004da0:	230c      	movs	r3, #12
 8004da2:	e052      	b.n	8004e4a <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>

   // Latest epoch began at May 11, 2014, at 14:23:55 UTC.
   struct tm epoch_start;
   epoch_start.tm_year = 2014 - 1900;
 8004da4:	2372      	movs	r3, #114	; 0x72
 8004da6:	62bb      	str	r3, [r7, #40]	; 0x28
   epoch_start.tm_mon = 5 - 1;
 8004da8:	2304      	movs	r3, #4
 8004daa:	627b      	str	r3, [r7, #36]	; 0x24
   epoch_start.tm_mday = 11;
 8004dac:	230b      	movs	r3, #11
 8004dae:	623b      	str	r3, [r7, #32]
   epoch_start.tm_hour = 14;
 8004db0:	230e      	movs	r3, #14
 8004db2:	61fb      	str	r3, [r7, #28]
   epoch_start.tm_min = 23;
 8004db4:	2317      	movs	r3, #23
 8004db6:	61bb      	str	r3, [r7, #24]
   epoch_start.tm_sec = 55;
 8004db8:	2337      	movs	r3, #55	; 0x37
 8004dba:	617b      	str	r3, [r7, #20]

   unsigned long ticks_since_epoch = strtoul(msstmResponseBuf, NULL, 16);
 8004dbc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004dc0:	2210      	movs	r2, #16
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f018 fe79 	bl	801dabc <strtoul>
 8004dca:	6678      	str	r0, [r7, #100]	; 0x64
      seconds less than the equivalent ticks_since_epoch. Subtract that away and
      we'll be left with a small number that won't overflow when we scale by 90/1000.

      Many thanks to Scott Weldon for this suggestion.
   */
   unsigned long secs_since_epoch = (ticks_since_epoch / 1000) * 90;
 8004dcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dce:	4a24      	ldr	r2, [pc, #144]	; (8004e60 <_ZN10IridiumSBD13getSystemTimeER2tm+0x118>)
 8004dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd4:	099b      	lsrs	r3, r3, #6
 8004dd6:	225a      	movs	r2, #90	; 0x5a
 8004dd8:	fb02 f303 	mul.w	r3, r2, r3
 8004ddc:	663b      	str	r3, [r7, #96]	; 0x60
   unsigned long small_ticks = ticks_since_epoch - (secs_since_epoch / 90) * 1000;
 8004dde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004de0:	085b      	lsrs	r3, r3, #1
 8004de2:	4a20      	ldr	r2, [pc, #128]	; (8004e64 <_ZN10IridiumSBD13getSystemTimeER2tm+0x11c>)
 8004de4:	fba2 2303 	umull	r2, r3, r2, r3
 8004de8:	095b      	lsrs	r3, r3, #5
 8004dea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004dee:	fb02 f303 	mul.w	r3, r2, r3
 8004df2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	65fb      	str	r3, [r7, #92]	; 0x5c
   secs_since_epoch += small_ticks * 90 / 1000;
 8004df8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dfa:	225a      	movs	r2, #90	; 0x5a
 8004dfc:	fb02 f303 	mul.w	r3, r2, r3
 8004e00:	4a17      	ldr	r2, [pc, #92]	; (8004e60 <_ZN10IridiumSBD13getSystemTimeER2tm+0x118>)
 8004e02:	fba2 2303 	umull	r2, r3, r2, r3
 8004e06:	099b      	lsrs	r3, r3, #6
 8004e08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e0a:	4413      	add	r3, r2
 8004e0c:	663b      	str	r3, [r7, #96]	; 0x60

   time_t epoch_time = mktime(&epoch_start);
 8004e0e:	f107 0314 	add.w	r3, r7, #20
 8004e12:	4618      	mov	r0, r3
 8004e14:	f016 fc50 	bl	801b6b8 <mktime>
 8004e18:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
   time_t now = epoch_time + secs_since_epoch;
 8004e1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f04f 0100 	mov.w	r1, #0
 8004e24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e28:	1884      	adds	r4, r0, r2
 8004e2a:	eb41 0503 	adc.w	r5, r1, r3
 8004e2e:	e9c7 4502 	strd	r4, r5, [r7, #8]
   memcpy(&tm, localtime(&now), sizeof tm);
 8004e32:	f107 0308 	add.w	r3, r7, #8
 8004e36:	4618      	mov	r0, r3
 8004e38:	f016 fa0c 	bl	801b254 <localtime>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2224      	movs	r2, #36	; 0x24
 8004e40:	4619      	mov	r1, r3
 8004e42:	6838      	ldr	r0, [r7, #0]
 8004e44:	f016 fb30 	bl	801b4a8 <memcpy>
   return ISBD_SUCCESS;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3768      	adds	r7, #104	; 0x68
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bdb0      	pop	{r4, r5, r7, pc}
 8004e52:	bf00      	nop
 8004e54:	08021d4c 	.word	0x08021d4c
 8004e58:	08021d64 	.word	0x08021d64
 8004e5c:	08021d58 	.word	0x08021d58
 8004e60:	10624dd3 	.word	0x10624dd3
 8004e64:	b60b60b7 	.word	0xb60b60b7

08004e68 <_ZN10IridiumSBD18getFirmwareVersionEPcj>:

int IridiumSBD::getFirmwareVersion(char *version, size_t bufferSize)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af02      	add	r7, sp, #8
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
   if (bufferSize < 8)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b07      	cmp	r3, #7
 8004e78:	d801      	bhi.n	8004e7e <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x16>
      return ISBD_RX_OVERFLOW;
 8004e7a:	2308      	movs	r3, #8
 8004e7c:	e01e      	b.n	8004ebc <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   send(F("AT+CGMR\r"));
 8004e7e:	2301      	movs	r3, #1
 8004e80:	2201      	movs	r2, #1
 8004e82:	4910      	ldr	r1, [pc, #64]	; (8004ec4 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x5c>)
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 fcb7 	bl	80057f8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(version, bufferSize, "Call Processor Version: "))
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	4b0e      	ldr	r3, [pc, #56]	; (8004ec8 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x60>)
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	4b0e      	ldr	r3, [pc, #56]	; (8004ecc <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x64>)
 8004e92:	68b9      	ldr	r1, [r7, #8]
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f000 faf7 	bl	8005488 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	f083 0301 	eor.w	r3, r3, #1
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d009      	beq.n	8004eba <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x52>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 fbb4 	bl	8005614 <_ZN10IridiumSBD9cancelledEv>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x4e>
 8004eb2:	2304      	movs	r3, #4
 8004eb4:	e002      	b.n	8004ebc <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e000      	b.n	8004ebc <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   return ISBD_SUCCESS;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	08021d6c 	.word	0x08021d6c
 8004ec8:	08021d64 	.word	0x08021d64
 8004ecc:	08021d78 	.word	0x08021d78

08004ed0 <_ZN10IridiumSBD21enableSuperCapChargerEb>:

void IridiumSBD::enableSuperCapCharger(bool enable)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	460b      	mov	r3, r1
 8004eda:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the charger manually)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d004      	beq.n	8004ef0 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x20>
  {
    diagprint(F("enableSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004ee6:	4918      	ldr	r1, [pc, #96]	; (8004f48 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x78>)
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 fd2d 	bl	8005948 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8004eee:	e028      	b.n	8004f42 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x72>
  }

  // Enable/disable the supercapacitor charger by pulling its SHDN pin high/low
  check9603pins(); // Update IO_REGISTER
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f001 f80b 	bl	8005f0c <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8004ef6:	78fb      	ldrb	r3, [r7, #3]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00b      	beq.n	8004f14 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x44>
  {
    IO_REGISTER |= IO_SHDN; // Set the SHDN bit
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004f12:	e00f      	b.n	8004f34 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_SHDN; // Clear the SHDN bit
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004f1a:	b25a      	sxtb	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8004f22:	b25b      	sxtb	r3, r3
 8004f24:	43db      	mvns	r3, r3
 8004f26:	b25b      	sxtb	r3, r3
 8004f28:	4013      	ands	r3, r2
 8004f2a:	b25b      	sxtb	r3, r3
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f001 f820 	bl	8005f82 <_ZN10IridiumSBD11set9603pinsEh>
}
 8004f42:	3708      	adds	r7, #8
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	08021d94 	.word	0x08021d94

08004f4c <_ZN10IridiumSBD20checkSuperCapChargerEv>:

bool IridiumSBD::checkSuperCapCharger()
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial (the user will have to check PGOOD manually)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d005      	beq.n	8004f6a <_ZN10IridiumSBD20checkSuperCapChargerEv+0x1e>
  {
    diagprint(F("checkSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004f5e:	4912      	ldr	r1, [pc, #72]	; (8004fa8 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x5c>)
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 fcf1 	bl	8005948 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return(false);
 8004f66:	2300      	movs	r3, #0
 8004f68:	e01a      	b.n	8004fa0 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x54>
  }

  // Check the status of the supercapacitor charger PGOOD pin
  check9603pins(); // Update IO_REGISTER
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 ffce 	bl	8005f0c <_ZN10IridiumSBD13check9603pinsEv>
  if (IO_REGISTER &= IO_PGOOD) // If the PGOOD bit is set, return true
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	b2da      	uxtb	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	bf14      	ite	ne
 8004f90:	2301      	movne	r3, #1
 8004f92:	2300      	moveq	r3, #0
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <_ZN10IridiumSBD20checkSuperCapChargerEv+0x52>
  {
    return(true);
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e000      	b.n	8004fa0 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x54>
  }
  else
  {
    return(false);
 8004f9e:	2300      	movs	r3, #0
  }
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	08021de0 	.word	0x08021de0

08004fac <_ZN10IridiumSBD16enable9603NpowerEb>:

void IridiumSBD::enable9603Npower(bool enable)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N power manually)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d004      	beq.n	8004fcc <_ZN10IridiumSBD16enable9603NpowerEb+0x20>
  {
    diagprint(F("enable9603Npower is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004fc2:	4918      	ldr	r1, [pc, #96]	; (8005024 <_ZN10IridiumSBD16enable9603NpowerEb+0x78>)
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 fcbf 	bl	8005948 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8004fca:	e028      	b.n	800501e <_ZN10IridiumSBD16enable9603NpowerEb+0x72>
  }

  // Enable/disable power to the 9603N by pulling PWR_EN high/low
  check9603pins(); // Update IO_REGISTER
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 ff9d 	bl	8005f0c <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8004fd2:	78fb      	ldrb	r3, [r7, #3]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00b      	beq.n	8004ff0 <_ZN10IridiumSBD16enable9603NpowerEb+0x44>
  {
    IO_REGISTER |= IO_PWR_EN; // Set the PWR_EN bit
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004fee:	e00f      	b.n	8005010 <_ZN10IridiumSBD16enable9603NpowerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_PWR_EN; // Clear the PWR_EN bit
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004ff6:	b25a      	sxtb	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8004ffe:	b25b      	sxtb	r3, r3
 8005000:	43db      	mvns	r3, r3
 8005002:	b25b      	sxtb	r3, r3
 8005004:	4013      	ands	r3, r2
 8005006:	b25b      	sxtb	r3, r3
 8005008:	b2da      	uxtb	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005016:	4619      	mov	r1, r3
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 ffb2 	bl	8005f82 <_ZN10IridiumSBD11set9603pinsEh>
}
 800501e:	3708      	adds	r7, #8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	08021e2c 	.word	0x08021e2c

08005028 <_ZN10IridiumSBD10enable9603Eb>:

void IridiumSBD::enable9603(bool enable)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	460b      	mov	r3, r1
 8005032:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N manually)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800503a:	2b00      	cmp	r3, #0
 800503c:	d004      	beq.n	8005048 <_ZN10IridiumSBD10enable9603Eb+0x20>
  {
    diagprint(F("enable9603 is only valid when using I2C on the Qwiic Iridium\r\n"));
 800503e:	4918      	ldr	r1, [pc, #96]	; (80050a0 <_ZN10IridiumSBD10enable9603Eb+0x78>)
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 fc81 	bl	8005948 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8005046:	e028      	b.n	800509a <_ZN10IridiumSBD10enable9603Eb+0x72>
  }

  // Enable/disable the 9603 by pulling ON_OFF high/low
  check9603pins(); // Update IO_REGISTER
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 ff5f 	bl	8005f0c <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 800504e:	78fb      	ldrb	r3, [r7, #3]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00b      	beq.n	800506c <_ZN10IridiumSBD10enable9603Eb+0x44>
  {
    IO_REGISTER |= IO_ON_OFF; // Set the ON_OFF bit
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8005060:	4313      	orrs	r3, r2
 8005062:	b2da      	uxtb	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 800506a:	e00f      	b.n	800508c <_ZN10IridiumSBD10enable9603Eb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_ON_OFF; // Clear the ON_OFF bit
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005072:	b25a      	sxtb	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 800507a:	b25b      	sxtb	r3, r3
 800507c:	43db      	mvns	r3, r3
 800507e:	b25b      	sxtb	r3, r3
 8005080:	4013      	ands	r3, r2
 8005082:	b25b      	sxtb	r3, r3
 8005084:	b2da      	uxtb	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005092:	4619      	mov	r1, r3
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 ff74 	bl	8005f82 <_ZN10IridiumSBD11set9603pinsEh>
}
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	08021e74 	.word	0x08021e74

080050a4 <_ZN10IridiumSBD18clearRingIndicatorEv>:
    return(false);
  }
}

void IridiumSBD::clearRingIndicator()
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d004      	beq.n	80050c0 <_ZN10IridiumSBD18clearRingIndicatorEv+0x1c>
  {
    diagprint(F("clearRingIndicator is only valid when using I2C on the Qwiic Iridium\r\n"));
 80050b6:	4913      	ldr	r1, [pc, #76]	; (8005104 <_ZN10IridiumSBD18clearRingIndicatorEv+0x60>)
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 fc45 	bl	8005948 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 80050be:	e01d      	b.n	80050fc <_ZN10IridiumSBD18clearRingIndicatorEv+0x58>
  }

  // Clear the 9603 RI flag
  check9603pins(); // Update IO_REGISTER
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 ff23 	bl	8005f0c <_ZN10IridiumSBD13check9603pinsEv>
  IO_REGISTER &= ~IO_RI; // Clear the RI bit
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80050cc:	b25a      	sxtb	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80050d4:	b25b      	sxtb	r3, r3
 80050d6:	43db      	mvns	r3, r3
 80050d8:	b25b      	sxtb	r3, r3
 80050da:	4013      	ands	r3, r2
 80050dc:	b25b      	sxtb	r3, r3
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  set9603pins(IO_REGISTER); // Update the pins
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80050ec:	4619      	mov	r1, r3
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 ff47 	bl	8005f82 <_ZN10IridiumSBD11set9603pinsEh>
  this->ringAsserted = false; // Also clear the ringAsserted flag
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
}
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	08021f44 	.word	0x08021f44

08005108 <_ZN10IridiumSBD11isConnectedEv>:

//Returns true if the I2C device is connected
//Always returns true for serial
//boolean IridiumSBD::isConnected() TODO
bool IridiumSBD::isConnected()
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
   if (this->useSerial) // If we are using Serial
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <_ZN10IridiumSBD11isConnectedEv+0x16>
   {
		return true;
 800511a:	2301      	movs	r3, #1
 800511c:	e013      	b.n	8005146 <_ZN10IridiumSBD11isConnectedEv+0x3e>
   }
   else
   {
		wireport->beginTransmission((uint8_t)deviceaddress);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005128:	4619      	mov	r1, r3
 800512a:	4610      	mov	r0, r2
 800512c:	f001 fcb8 	bl	8006aa0 <_ZN7TwoWire17beginTransmissionEh>
		return (wireport->endTransmission() == 0); // Check that the device ack's
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005134:	4618      	mov	r0, r3
 8005136:	f001 fcfd 	bl	8006b34 <_ZN7TwoWire15endTransmissionEv>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	bf0c      	ite	eq
 8005140:	2301      	moveq	r3, #1
 8005142:	2300      	movne	r3, #0
 8005144:	b2db      	uxtb	r3, r3
   }
}
 8005146:	4618      	mov	r0, r3
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
	...

08005150 <_ZN10IridiumSBD13internalBeginEv>:
/*
Private interface
*/

int IridiumSBD::internalBegin()
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b090      	sub	sp, #64	; 0x40
 8005154:	af02      	add	r7, sp, #8
 8005156:	6078      	str	r0, [r7, #4]
   diagprint(F("Calling internalBegin\r\n"));
 8005158:	49b1      	ldr	r1, [pc, #708]	; (8005420 <_ZN10IridiumSBD13internalBeginEv+0x2d0>)
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fbf4 	bl	8005948 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (!this->asleep)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8005166:	f083 0301 	eor.w	r3, r3, #1
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	d001      	beq.n	8005174 <_ZN10IridiumSBD13internalBeginEv+0x24>
      return ISBD_ALREADY_AWAKE;
 8005170:	2301      	movs	r3, #1
 8005172:	e150      	b.n	8005416 <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   if (!this->useSerial) // If we are using I2C
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800517a:	f083 0301 	eor.w	r3, r3, #1
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d005      	beq.n	8005190 <_ZN10IridiumSBD13internalBeginEv+0x40>
   {
      check9603pins(); // Update IO_REGISTER with the status of the 9603 pins
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 fec1 	bl	8005f0c <_ZN10IridiumSBD13check9603pinsEv>
      check9603data(); // Get any waiting 9603 serial data
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 fde6 	bl	8005d5c <_ZN10IridiumSBD13check9603dataEv>
   }

   power(true); // power on
 8005190:	2101      	movs	r1, #1
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 fa70 	bl	8005678 <_ZN10IridiumSBD5powerEb>

   bool modemAlive = false;
 8005198:	2300      	movs	r3, #0
 800519a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

   unsigned long startupTime = 500; //ms
 800519e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80051a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   for (unsigned long start = millis(); millis() - start < startupTime;)
 80051a4:	f003 fc18 	bl	80089d8 <HAL_GetTick>
 80051a8:	62b8      	str	r0, [r7, #40]	; 0x28
 80051aa:	f003 fc15 	bl	80089d8 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051b6:	429a      	cmp	r2, r3
 80051b8:	bf8c      	ite	hi
 80051ba:	2301      	movhi	r3, #1
 80051bc:	2300      	movls	r3, #0
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d007      	beq.n	80051d4 <_ZN10IridiumSBD13internalBeginEv+0x84>
      if (cancelled())
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 fa25 	bl	8005614 <_ZN10IridiumSBD9cancelledEv>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0ec      	beq.n	80051aa <_ZN10IridiumSBD13internalBeginEv+0x5a>
         return ISBD_CANCELLED;
 80051d0:	2304      	movs	r3, #4
 80051d2:	e120      	b.n	8005416 <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   if (this->useSerial) // If we are using Serial
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d002      	beq.n	80051e4 <_ZN10IridiumSBD13internalBeginEv+0x94>
      beginSerialPort(); // Apollo3 v2.1 Serial fix - begin the Serial port 500ms after power(true)
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 faee 	bl	80057c0 <_ZN10IridiumSBD15beginSerialPortEv>

   // Turn on modem and wait for a response from "AT" command to begin
   for (unsigned long start = millis(); !modemAlive && millis() - start < 1000UL * this->startupTimeout;)
 80051e4:	f003 fbf8 	bl	80089d8 <HAL_GetTick>
 80051e8:	6278      	str	r0, [r7, #36]	; 0x24
 80051ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80051ee:	f083 0301 	eor.w	r3, r3, #1
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d010      	beq.n	800521a <_ZN10IridiumSBD13internalBeginEv+0xca>
 80051f8:	f003 fbee 	bl	80089d8 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	1ad2      	subs	r2, r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005208:	4619      	mov	r1, r3
 800520a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800520e:	fb03 f301 	mul.w	r3, r3, r1
 8005212:	429a      	cmp	r2, r3
 8005214:	d201      	bcs.n	800521a <_ZN10IridiumSBD13internalBeginEv+0xca>
 8005216:	2301      	movs	r3, #1
 8005218:	e000      	b.n	800521c <_ZN10IridiumSBD13internalBeginEv+0xcc>
 800521a:	2300      	movs	r3, #0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d018      	beq.n	8005252 <_ZN10IridiumSBD13internalBeginEv+0x102>
   {
      send(F("AT\r"));
 8005220:	2301      	movs	r3, #1
 8005222:	2201      	movs	r2, #1
 8005224:	497f      	ldr	r1, [pc, #508]	; (8005424 <_ZN10IridiumSBD13internalBeginEv+0x2d4>)
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 fae6 	bl	80057f8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      modemAlive = waitForATResponse();
 800522c:	4b7e      	ldr	r3, [pc, #504]	; (8005428 <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	2300      	movs	r3, #0
 8005232:	2200      	movs	r2, #0
 8005234:	2100      	movs	r1, #0
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f926 	bl	8005488 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 800523c:	4603      	mov	r3, r0
 800523e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (cancelled())
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f9e6 	bl	8005614 <_ZN10IridiumSBD9cancelledEv>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d0cd      	beq.n	80051ea <_ZN10IridiumSBD13internalBeginEv+0x9a>
         return ISBD_CANCELLED;
 800524e:	2304      	movs	r3, #4
 8005250:	e0e1      	b.n	8005416 <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   }

   if (!modemAlive)
 8005252:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005256:	f083 0301 	eor.w	r3, r3, #1
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	d005      	beq.n	800526c <_ZN10IridiumSBD13internalBeginEv+0x11c>
   {
      diagprint(F("No modem detected.\r\n"));
 8005260:	4972      	ldr	r1, [pc, #456]	; (800542c <_ZN10IridiumSBD13internalBeginEv+0x2dc>)
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 fb70 	bl	8005948 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      return ISBD_NO_MODEM_DETECTED;
 8005268:	2305      	movs	r3, #5
 800526a:	e0d4      	b.n	8005416 <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   }

   // The usual initialization sequence
   const char *strings[3] = { "ATE1\r", "AT&D0\r", "AT&K0\r" };
 800526c:	4a70      	ldr	r2, [pc, #448]	; (8005430 <_ZN10IridiumSBD13internalBeginEv+0x2e0>)
 800526e:	f107 0310 	add.w	r3, r7, #16
 8005272:	ca07      	ldmia	r2, {r0, r1, r2}
 8005274:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   for (int i=0; i<3; ++i)
 8005278:	2300      	movs	r3, #0
 800527a:	633b      	str	r3, [r7, #48]	; 0x30
 800527c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527e:	2b02      	cmp	r3, #2
 8005280:	dc26      	bgt.n	80052d0 <_ZN10IridiumSBD13internalBeginEv+0x180>
   {
      send(strings[i]);
 8005282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800528a:	4413      	add	r3, r2
 800528c:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8005290:	4619      	mov	r1, r3
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 fb0a 	bl	80058ac <_ZN10IridiumSBD4sendEPKc>
      if (!waitForATResponse())
 8005298:	4b63      	ldr	r3, [pc, #396]	; (8005428 <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	2300      	movs	r3, #0
 800529e:	2200      	movs	r2, #0
 80052a0:	2100      	movs	r1, #0
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f8f0 	bl	8005488 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80052a8:	4603      	mov	r3, r0
 80052aa:	f083 0301 	eor.w	r3, r3, #1
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d009      	beq.n	80052c8 <_ZN10IridiumSBD13internalBeginEv+0x178>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f9ad 	bl	8005614 <_ZN10IridiumSBD9cancelledEv>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d001      	beq.n	80052c4 <_ZN10IridiumSBD13internalBeginEv+0x174>
 80052c0:	2304      	movs	r3, #4
 80052c2:	e0a8      	b.n	8005416 <_ZN10IridiumSBD13internalBeginEv+0x2c6>
 80052c4:	2303      	movs	r3, #3
 80052c6:	e0a6      	b.n	8005416 <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   for (int i=0; i<3; ++i)
 80052c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ca:	3301      	adds	r3, #1
 80052cc:	633b      	str	r3, [r7, #48]	; 0x30
 80052ce:	e7d5      	b.n	800527c <_ZN10IridiumSBD13internalBeginEv+0x12c>
   }

   // Enable or disable RING alerts as requested by user
   // By default they are on if a RING pin was supplied on constructor
   diagprint(F("Ring alerts are")); diagprint(ringAlertsEnabled ? F("") : F(" NOT")); diagprint(F(" enabled.\r\n"));
 80052d0:	4958      	ldr	r1, [pc, #352]	; (8005434 <_ZN10IridiumSBD13internalBeginEv+0x2e4>)
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 fb38 	bl	8005948 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <_ZN10IridiumSBD13internalBeginEv+0x196>
 80052e2:	4b55      	ldr	r3, [pc, #340]	; (8005438 <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 80052e4:	e000      	b.n	80052e8 <_ZN10IridiumSBD13internalBeginEv+0x198>
 80052e6:	4b55      	ldr	r3, [pc, #340]	; (800543c <_ZN10IridiumSBD13internalBeginEv+0x2ec>)
 80052e8:	4619      	mov	r1, r3
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 fb2c 	bl	8005948 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 80052f0:	4953      	ldr	r1, [pc, #332]	; (8005440 <_ZN10IridiumSBD13internalBeginEv+0x2f0>)
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 fb28 	bl	8005948 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (ringAlertsEnabled) enableRingAlerts(true); // This will clear ringAsserted and the Ring Indicator flag
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d004      	beq.n	800530c <_ZN10IridiumSBD13internalBeginEv+0x1bc>
 8005302:	2101      	movs	r1, #1
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f7ff fcff 	bl	8004d08 <_ZN10IridiumSBD16enableRingAlertsEb>
 800530a:	e00a      	b.n	8005322 <_ZN10IridiumSBD13internalBeginEv+0x1d2>
   else {
	   if (!this->useSerial) clearRingIndicator(); // If ring alerts are not enabled and using I2C, make sure the Ring Indicator flag is clear
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005312:	f083 0301 	eor.w	r3, r3, #1
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	d002      	beq.n	8005322 <_ZN10IridiumSBD13internalBeginEv+0x1d2>
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7ff fec1 	bl	80050a4 <_ZN10IridiumSBD18clearRingIndicatorEv>
   }

   send(ringAlertsEnabled ? F("AT+SBDMTA=1\r") : F("AT+SBDMTA=0\r"));
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <_ZN10IridiumSBD13internalBeginEv+0x1e0>
 800532c:	4945      	ldr	r1, [pc, #276]	; (8005444 <_ZN10IridiumSBD13internalBeginEv+0x2f4>)
 800532e:	e000      	b.n	8005332 <_ZN10IridiumSBD13internalBeginEv+0x1e2>
 8005330:	4945      	ldr	r1, [pc, #276]	; (8005448 <_ZN10IridiumSBD13internalBeginEv+0x2f8>)
 8005332:	2301      	movs	r3, #1
 8005334:	2201      	movs	r2, #1
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 fa5e 	bl	80057f8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse())
 800533c:	4b3a      	ldr	r3, [pc, #232]	; (8005428 <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	2300      	movs	r3, #0
 8005342:	2200      	movs	r2, #0
 8005344:	2100      	movs	r1, #0
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f89e 	bl	8005488 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 800534c:	4603      	mov	r3, r0
 800534e:	f083 0301 	eor.w	r3, r3, #1
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d009      	beq.n	800536c <_ZN10IridiumSBD13internalBeginEv+0x21c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f95b 	bl	8005614 <_ZN10IridiumSBD9cancelledEv>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <_ZN10IridiumSBD13internalBeginEv+0x218>
 8005364:	2304      	movs	r3, #4
 8005366:	e056      	b.n	8005416 <_ZN10IridiumSBD13internalBeginEv+0x2c6>
 8005368:	2303      	movs	r3, #3
 800536a:	e054      	b.n	8005416 <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   // Decide whether the internal MSSTM workaround should be enforced on TX/RX
   // By default it is unless the firmware rev is >= TA13001
   char version[8];
   int ret = getFirmwareVersion(version, sizeof(version));
 800536c:	f107 0308 	add.w	r3, r7, #8
 8005370:	2208      	movs	r2, #8
 8005372:	4619      	mov	r1, r3
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7ff fd77 	bl	8004e68 <_ZN10IridiumSBD18getFirmwareVersionEPcj>
 800537a:	6238      	str	r0, [r7, #32]
   if (ret != ISBD_SUCCESS)
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d008      	beq.n	8005394 <_ZN10IridiumSBD13internalBeginEv+0x244>
   {
      diagprint(F("Unknown FW version\r\n"));
 8005382:	4932      	ldr	r1, [pc, #200]	; (800544c <_ZN10IridiumSBD13internalBeginEv+0x2fc>)
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 fadf 	bl	8005948 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      msstmWorkaroundRequested = true;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8005392:	e027      	b.n	80053e4 <_ZN10IridiumSBD13internalBeginEv+0x294>
   }
   else
   {
      diagprint(F("Firmware version is ")); diagprint(version); diagprint(F("\r\n"));
 8005394:	492e      	ldr	r1, [pc, #184]	; (8005450 <_ZN10IridiumSBD13internalBeginEv+0x300>)
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 fad6 	bl	8005948 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 800539c:	f107 0308 	add.w	r3, r7, #8
 80053a0:	4619      	mov	r1, r3
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 faf6 	bl	8005994 <_ZN10IridiumSBD9diagprintEPKc>
 80053a8:	492a      	ldr	r1, [pc, #168]	; (8005454 <_ZN10IridiumSBD13internalBeginEv+0x304>)
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 facc 	bl	8005948 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (version[0] == 'T' && version[1] == 'A')
 80053b0:	7a3b      	ldrb	r3, [r7, #8]
 80053b2:	2b54      	cmp	r3, #84	; 0x54
 80053b4:	d116      	bne.n	80053e4 <_ZN10IridiumSBD13internalBeginEv+0x294>
 80053b6:	7a7b      	ldrb	r3, [r7, #9]
 80053b8:	2b41      	cmp	r3, #65	; 0x41
 80053ba:	d113      	bne.n	80053e4 <_ZN10IridiumSBD13internalBeginEv+0x294>
      {
         unsigned long ver = strtoul(version + 2, NULL, 10);
 80053bc:	f107 0308 	add.w	r3, r7, #8
 80053c0:	3302      	adds	r3, #2
 80053c2:	220a      	movs	r2, #10
 80053c4:	2100      	movs	r1, #0
 80053c6:	4618      	mov	r0, r3
 80053c8:	f018 fb78 	bl	801dabc <strtoul>
 80053cc:	61f8      	str	r0, [r7, #28]
         msstmWorkaroundRequested = ver < ISBD_MSSTM_WORKAROUND_FW_VER;
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80053d4:	4293      	cmp	r3, r2
 80053d6:	bf94      	ite	ls
 80053d8:	2301      	movls	r3, #1
 80053da:	2300      	movhi	r3, #0
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
      }
   }
   diagprint(F("MSSTM workaround is")); diagprint(msstmWorkaroundRequested ? F("") : F(" NOT")); diagprint(F(" enforced.\r\n"));
 80053e4:	491c      	ldr	r1, [pc, #112]	; (8005458 <_ZN10IridiumSBD13internalBeginEv+0x308>)
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 faae 	bl	8005948 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <_ZN10IridiumSBD13internalBeginEv+0x2aa>
 80053f6:	4b10      	ldr	r3, [pc, #64]	; (8005438 <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 80053f8:	e000      	b.n	80053fc <_ZN10IridiumSBD13internalBeginEv+0x2ac>
 80053fa:	4b10      	ldr	r3, [pc, #64]	; (800543c <_ZN10IridiumSBD13internalBeginEv+0x2ec>)
 80053fc:	4619      	mov	r1, r3
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 faa2 	bl	8005948 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8005404:	4915      	ldr	r1, [pc, #84]	; (800545c <_ZN10IridiumSBD13internalBeginEv+0x30c>)
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fa9e 	bl	8005948 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   // Done!
   diagprint(F("InternalBegin: success!\r\n"));
 800540c:	4914      	ldr	r1, [pc, #80]	; (8005460 <_ZN10IridiumSBD13internalBeginEv+0x310>)
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 fa9a 	bl	8005948 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   return ISBD_SUCCESS;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3738      	adds	r7, #56	; 0x38
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	08022064 	.word	0x08022064
 8005424:	0802207c 	.word	0x0802207c
 8005428:	08021d64 	.word	0x08021d64
 800542c:	08022080 	.word	0x08022080
 8005430:	08022154 	.word	0x08022154
 8005434:	08022098 	.word	0x08022098
 8005438:	080220a8 	.word	0x080220a8
 800543c:	080220ac 	.word	0x080220ac
 8005440:	080220b4 	.word	0x080220b4
 8005444:	080220c0 	.word	0x080220c0
 8005448:	080220d0 	.word	0x080220d0
 800544c:	080220e0 	.word	0x080220e0
 8005450:	080220f8 	.word	0x080220f8
 8005454:	08022110 	.word	0x08022110
 8005458:	08022114 	.word	0x08022114
 800545c:	08022128 	.word	0x08022128
 8005460:	08022138 	.word	0x08022138

08005464 <_ZN10IridiumSBD13internalSleepEv>:
   okToProceed = isxdigit(msstmResponseBuf[0]);
   return ISBD_SUCCESS;
}

int IridiumSBD::internalSleep()
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
   if (this->asleep)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <_ZN10IridiumSBD13internalSleepEv+0x16>
      return ISBD_IS_ASLEEP;
 8005476:	230a      	movs	r3, #10
 8005478:	e000      	b.n	800547c <_ZN10IridiumSBD13internalSleepEv+0x18>

   if (!waitForATResponse())
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
#endif

   return ISBD_SUCCESS;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>:

// Wait for response from previous AT command.  This process terminates when "terminator" string is seen or upon timeout.
// If "prompt" string is provided (example "+CSQ:"), then all characters following prompt up to the next CRLF are
// stored in response buffer for later parsing by caller.
bool IridiumSBD::waitForATResponse(char *response, int responseSize, const char *prompt, const char *terminator)
{
 8005488:	b590      	push	{r4, r7, lr}
 800548a:	b08b      	sub	sp, #44	; 0x2c
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
 8005494:	603b      	str	r3, [r7, #0]
   diagprint(F("Waiting for response "));
 8005496:	495d      	ldr	r1, [pc, #372]	; (800560c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x184>)
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f000 fa55 	bl	8005948 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   diagprint(terminator);
 800549e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f000 fa77 	bl	8005994 <_ZN10IridiumSBD9diagprintEPKc>
   HAL_UART_Transmit(&(this->uart),(uint8_t*) terminator, strlen(terminator), HAL_MAX_DELAY); //TODO doesn't print otherwise
 80054a6:	68fc      	ldr	r4, [r7, #12]
 80054a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80054aa:	f7fa feab 	bl	8000204 <strlen>
 80054ae:	4603      	mov	r3, r0
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	f04f 33ff 	mov.w	r3, #4294967295
 80054b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054b8:	4620      	mov	r0, r4
 80054ba:	f009 fc70 	bl	800ed9e <HAL_UART_Transmit>
   diagprint(F("\r\n"));
 80054be:	4954      	ldr	r1, [pc, #336]	; (8005610 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x188>)
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f000 fa41 	bl	8005948 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (response)
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d005      	beq.n	80054d8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x50>
      memset(response, 0, responseSize);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	461a      	mov	r2, r3
 80054d0:	2100      	movs	r1, #0
 80054d2:	68b8      	ldr	r0, [r7, #8]
 80054d4:	f016 f810 	bl	801b4f8 <memset>

   int matchPromptPos = 0; // Matches chars in prompt
 80054d8:	2300      	movs	r3, #0
 80054da:	627b      	str	r3, [r7, #36]	; 0x24
   int matchTerminatorPos = 0; // Matches chars in terminator
 80054dc:	2300      	movs	r3, #0
 80054de:	623b      	str	r3, [r7, #32]
   enum {LOOKING_FOR_PROMPT, GATHERING_RESPONSE, LOOKING_FOR_TERMINATOR};
   int promptState = prompt ? LOOKING_FOR_PROMPT : LOOKING_FOR_TERMINATOR;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x62>
 80054e6:	2300      	movs	r3, #0
 80054e8:	e000      	b.n	80054ec <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x64>
 80054ea:	2302      	movs	r3, #2
 80054ec:	61fb      	str	r3, [r7, #28]
   //consoleprint(F("<< ")); //TODO If we comment out this it looks cleaner in the serial

   for (unsigned long start=millis(); millis() - start < 1000UL * atTimeout;)
 80054ee:	f003 fa73 	bl	80089d8 <HAL_GetTick>
 80054f2:	61b8      	str	r0, [r7, #24]
 80054f4:	f003 fa70 	bl	80089d8 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	1ad2      	subs	r2, r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005504:	4619      	mov	r1, r3
 8005506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800550a:	fb03 f301 	mul.w	r3, r3, r1
 800550e:	429a      	cmp	r2, r3
 8005510:	bf34      	ite	cc
 8005512:	2301      	movcc	r3, #1
 8005514:	2300      	movcs	r3, #0
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b00      	cmp	r3, #0
 800551a:	d072      	beq.n	8005602 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x17a>
   {
      if (cancelled())
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 f879 	bl	8005614 <_ZN10IridiumSBD9cancelledEv>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d001      	beq.n	800552c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xa4>
         return false;
 8005528:	2300      	movs	r3, #0
 800552a:	e06b      	b.n	8005604 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x17c>

      while (filteredavailable() > 0)
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 fbb3 	bl	8005c98 <_ZN10IridiumSBD17filteredavailableEv>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	bfcc      	ite	gt
 8005538:	2301      	movgt	r3, #1
 800553a:	2300      	movle	r3, #0
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0d8      	beq.n	80054f4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x6c>
      {
         char c = filteredread();
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f000 fbc4 	bl	8005cd0 <_ZN10IridiumSBD12filteredreadEv>
 8005548:	4603      	mov	r3, r0
 800554a:	75fb      	strb	r3, [r7, #23]
         if (prompt)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d03b      	beq.n	80055ca <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x142>
         {
            switch (promptState)
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xd8>
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d01d      	beq.n	800559a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x112>
 800555e:	e034      	b.n	80055ca <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x142>
            {
            case LOOKING_FOR_PROMPT:
               if (c == prompt[matchPromptPos])
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	4413      	add	r3, r2
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	7dfa      	ldrb	r2, [r7, #23]
 800556a:	429a      	cmp	r2, r3
 800556c:	d10b      	bne.n	8005586 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xfe>
               {
                  ++matchPromptPos;
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	3301      	adds	r3, #1
 8005572:	627b      	str	r3, [r7, #36]	; 0x24
                  if (prompt[matchPromptPos] == '\0')
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	4413      	add	r3, r2
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d121      	bne.n	80055c4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x13c>
                     promptState = GATHERING_RESPONSE;
 8005580:	2301      	movs	r3, #1
 8005582:	61fb      	str	r3, [r7, #28]
               else
               {
                  matchPromptPos = c == prompt[0] ? 1 : 0;
               }

               break;
 8005584:	e01e      	b.n	80055c4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x13c>
                  matchPromptPos = c == prompt[0] ? 1 : 0;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	7dfa      	ldrb	r2, [r7, #23]
 800558c:	429a      	cmp	r2, r3
 800558e:	d101      	bne.n	8005594 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x10c>
 8005590:	2301      	movs	r3, #1
 8005592:	e000      	b.n	8005596 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x10e>
 8005594:	2300      	movs	r3, #0
 8005596:	627b      	str	r3, [r7, #36]	; 0x24
               break;
 8005598:	e014      	b.n	80055c4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x13c>
            case GATHERING_RESPONSE: // gathering response from end of prompt to first \r
               if (response)
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d013      	beq.n	80055c8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x140>
               {
                  if (c == '\r' || responseSize < 2)
 80055a0:	7dfb      	ldrb	r3, [r7, #23]
 80055a2:	2b0d      	cmp	r3, #13
 80055a4:	d002      	beq.n	80055ac <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x124>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	dc02      	bgt.n	80055b2 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
                  {
                     promptState = LOOKING_FOR_TERMINATOR;
 80055ac:	2302      	movs	r3, #2
 80055ae:	61fb      	str	r3, [r7, #28]
                  {
                     *response++ = c;
                     responseSize--;
                  }
               }
               break;
 80055b0:	e00a      	b.n	80055c8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x140>
                     *response++ = c;
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	1c5a      	adds	r2, r3, #1
 80055b6:	60ba      	str	r2, [r7, #8]
 80055b8:	7dfa      	ldrb	r2, [r7, #23]
 80055ba:	701a      	strb	r2, [r3, #0]
                     responseSize--;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3b01      	subs	r3, #1
 80055c0:	607b      	str	r3, [r7, #4]
               break;
 80055c2:	e001      	b.n	80055c8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x140>
               break;
 80055c4:	bf00      	nop
 80055c6:	e000      	b.n	80055ca <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x142>
               break;
 80055c8:	bf00      	nop
            }
         }

         if (c == terminator[matchTerminatorPos])
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055ce:	4413      	add	r3, r2
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	7dfa      	ldrb	r2, [r7, #23]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d10a      	bne.n	80055ee <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x166>
         {
            ++matchTerminatorPos;
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	3301      	adds	r3, #1
 80055dc:	623b      	str	r3, [r7, #32]
            if (terminator[matchTerminatorPos] == '\0')
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055e2:	4413      	add	r3, r2
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1a0      	bne.n	800552c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xa4>
               return true;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e00a      	b.n	8005604 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x17c>
         }
         else
         {
            matchTerminatorPos = c == terminator[0] ? 1 : 0;
 80055ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	7dfa      	ldrb	r2, [r7, #23]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d101      	bne.n	80055fc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x174>
 80055f8:	2301      	movs	r3, #1
 80055fa:	e000      	b.n	80055fe <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x176>
 80055fc:	2300      	movs	r3, #0
 80055fe:	623b      	str	r3, [r7, #32]
      while (filteredavailable() > 0)
 8005600:	e794      	b.n	800552c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xa4>
         }
      } // while (filteredavailable() > 0)
   } // timer loop
   return false;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	372c      	adds	r7, #44	; 0x2c
 8005608:	46bd      	mov	sp, r7
 800560a:	bd90      	pop	{r4, r7, pc}
 800560c:	08022298 	.word	0x08022298
 8005610:	08022110 	.word	0x08022110

08005614 <_ZN10IridiumSBD9cancelledEv>:

bool IridiumSBD::cancelled()
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
   if (this->useSerial)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005622:	2b00      	cmp	r3, #0
 8005624:	d019      	beq.n	800565a <_ZN10IridiumSBD9cancelledEv+0x46>
   {
	   //TODO For some reason when using digitalRead here it didn't work so simply replaced with HAL function
	   //if ((ringPin != -1) && digitalRead(ringPin) == LOW)
	     if ((ringPin != -1) && HAL_GPIO_ReadPin(ringPin_GPIO_Port,ringPin_Pin) == LOW)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800562c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005630:	d008      	beq.n	8005644 <_ZN10IridiumSBD9cancelledEv+0x30>
 8005632:	2110      	movs	r1, #16
 8005634:	480e      	ldr	r0, [pc, #56]	; (8005670 <_ZN10IridiumSBD9cancelledEv+0x5c>)
 8005636:	f004 f8cf 	bl	80097d8 <HAL_GPIO_ReadPin>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d101      	bne.n	8005644 <_ZN10IridiumSBD9cancelledEv+0x30>
 8005640:	2301      	movs	r3, #1
 8005642:	e000      	b.n	8005646 <_ZN10IridiumSBD9cancelledEv+0x32>
 8005644:	2300      	movs	r3, #0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d007      	beq.n	800565a <_ZN10IridiumSBD9cancelledEv+0x46>
	  {
         ringAsserted = true;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
		 diagprint(F("ringPin seen!\r\n"));
 8005652:	4908      	ldr	r1, [pc, #32]	; (8005674 <_ZN10IridiumSBD9cancelledEv+0x60>)
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f977 	bl	8005948 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
	  }
   }

   return !ISBDCallback();
 800565a:	f7ff fac3 	bl	8004be4 <_Z12ISBDCallbackv>
 800565e:	4603      	mov	r3, r0
 8005660:	f083 0301 	eor.w	r3, r3, #1
 8005664:	b2db      	uxtb	r3, r3
}
 8005666:	4618      	mov	r0, r3
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	40020800 	.word	0x40020800
 8005674:	080222b0 	.word	0x080222b0

08005678 <_ZN10IridiumSBD5powerEb>:

   return rxOverflow ? ISBD_RX_OVERFLOW : ISBD_SUCCESS;
}

void IridiumSBD::power(bool on)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	460b      	mov	r3, r1
 8005682:	70fb      	strb	r3, [r7, #3]
   this->asleep = !on;
 8005684:	78fb      	ldrb	r3, [r7, #3]
 8005686:	f083 0301 	eor.w	r3, r3, #1
 800568a:	b2da      	uxtb	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

   if (this->useSerial)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005698:	2b00      	cmp	r3, #0
 800569a:	d011      	beq.n	80056c0 <_ZN10IridiumSBD5powerEb+0x48>
   {
      if (this->sleepPin == -1)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80056a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a6:	d04c      	beq.n	8005742 <_ZN10IridiumSBD5powerEb+0xca>
      {
         return;
      }
      else
      {
          if (this->sleepPinConfigured == false)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d106      	bne.n	80056c0 <_ZN10IridiumSBD5powerEb+0x48>
          {
             configureSleepPin();
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f84e 	bl	8005754 <_ZN10IridiumSBD17configureSleepPinEv>
             this->sleepPinConfigured = true;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
          }
      }
   }

   if (on)
 80056c0:	78fb      	ldrb	r3, [r7, #3]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d018      	beq.n	80056f8 <_ZN10IridiumSBD5powerEb+0x80>
   {
      diagprint(F("Powering on modem...\r\n"));
 80056c6:	4921      	ldr	r1, [pc, #132]	; (800574c <_ZN10IridiumSBD5powerEb+0xd4>)
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 f93d 	bl	8005948 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d004      	beq.n	80056e2 <_ZN10IridiumSBD5powerEb+0x6a>
      {
         setSleepPin(HIGH); // HIGH = awake
 80056d8:	2101      	movs	r1, #1
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f848 	bl	8005770 <_ZN10IridiumSBD11setSleepPinEh>
 80056e0:	e003      	b.n	80056ea <_ZN10IridiumSBD5powerEb+0x72>
      }
      else
      {
         enable9603(true);
 80056e2:	2101      	movs	r1, #1
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7ff fc9f 	bl	8005028 <_ZN10IridiumSBD10enable9603Eb>
      }
      lastPowerOnTime = millis();
 80056ea:	f003 f975 	bl	80089d8 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 80056f6:	e025      	b.n	8005744 <_ZN10IridiumSBD5powerEb+0xcc>
   }
   else
   {
      // Best Practices Guide suggests waiting at least 2 seconds
      // before powering off again
      unsigned long elapsed = millis() - lastPowerOnTime;
 80056f8:	f003 f96e 	bl	80089d8 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	60fb      	str	r3, [r7, #12]
      if (elapsed < 2000UL)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800570e:	d205      	bcs.n	800571c <_ZN10IridiumSBD5powerEb+0xa4>
         //delay(2000UL - elapsed); TODO
    	  HAL_Delay(2000UL - elapsed);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 8005716:	4618      	mov	r0, r3
 8005718:	f003 f96a 	bl	80089f0 <HAL_Delay>

      diagprint(F("Powering off modem...\r\n"));
 800571c:	490c      	ldr	r1, [pc, #48]	; (8005750 <_ZN10IridiumSBD5powerEb+0xd8>)
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f912 	bl	8005948 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800572a:	2b00      	cmp	r3, #0
 800572c:	d004      	beq.n	8005738 <_ZN10IridiumSBD5powerEb+0xc0>
      {
         setSleepPin(LOW); // LOW = asleep
 800572e:	2100      	movs	r1, #0
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f81d 	bl	8005770 <_ZN10IridiumSBD11setSleepPinEh>
 8005736:	e005      	b.n	8005744 <_ZN10IridiumSBD5powerEb+0xcc>
      }
      else
      {
         enable9603(false);
 8005738:	2100      	movs	r1, #0
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7ff fc74 	bl	8005028 <_ZN10IridiumSBD10enable9603Eb>
 8005740:	e000      	b.n	8005744 <_ZN10IridiumSBD5powerEb+0xcc>
         return;
 8005742:	bf00      	nop
      }
   }
}
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	08022304 	.word	0x08022304
 8005750:	0802231c 	.word	0x0802231c

08005754 <_ZN10IridiumSBD17configureSleepPinEv>:

void IridiumSBD::configureSleepPin()
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
	//pinMode(sleepPin, OUTPUT); // Make the sleep pin an output TODO (doesnt work with this)
   //pinMode(sleepPin, OUTPUT_PP); // Make the sleep pin an output
   diagprint(F("configureSleepPin: sleepPin configured\r\n"));
 800575c:	4903      	ldr	r1, [pc, #12]	; (800576c <_ZN10IridiumSBD17configureSleepPinEv+0x18>)
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f8f2 	bl	8005948 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8005764:	bf00      	nop
 8005766:	3708      	adds	r7, #8
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	08022334 	.word	0x08022334

08005770 <_ZN10IridiumSBD11setSleepPinEh>:

void IridiumSBD::setSleepPin(uint8_t enable)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	460b      	mov	r3, r1
 800577a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(sleepPin_GPIO_Port,sleepPin_Pin,GPIO_PIN_SET);
 800577c:	2201      	movs	r2, #1
 800577e:	2108      	movs	r1, #8
 8005780:	480b      	ldr	r0, [pc, #44]	; (80057b0 <_ZN10IridiumSBD11setSleepPinEh+0x40>)
 8005782:	f004 f841 	bl	8009808 <HAL_GPIO_WritePin>
   //digitalWrite(this->sleepPin, enable); // HIGH = awake, LOW = asleep TODO
   diagprint(F("setSleepPin: sleepPin set "));
 8005786:	490b      	ldr	r1, [pc, #44]	; (80057b4 <_ZN10IridiumSBD11setSleepPinEh+0x44>)
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f8dd 	bl	8005948 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   if (enable == HIGH)
 800578e:	78fb      	ldrb	r3, [r7, #3]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d104      	bne.n	800579e <_ZN10IridiumSBD11setSleepPinEh+0x2e>
      diagprint(F("HIGH\r\n"));
 8005794:	4908      	ldr	r1, [pc, #32]	; (80057b8 <_ZN10IridiumSBD11setSleepPinEh+0x48>)
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f8d6 	bl	8005948 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   else
      diagprint(F("LOW\r\n"));
}
 800579c:	e003      	b.n	80057a6 <_ZN10IridiumSBD11setSleepPinEh+0x36>
      diagprint(F("LOW\r\n"));
 800579e:	4907      	ldr	r1, [pc, #28]	; (80057bc <_ZN10IridiumSBD11setSleepPinEh+0x4c>)
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f8d1 	bl	8005948 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80057a6:	bf00      	nop
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	40020800 	.word	0x40020800
 80057b4:	08022360 	.word	0x08022360
 80057b8:	0802237c 	.word	0x0802237c
 80057bc:	08022384 	.word	0x08022384

080057c0 <_ZN10IridiumSBD15beginSerialPortEv>:

void IridiumSBD::beginSerialPort()
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::beginSerialPort\r\n"));
 80057c8:	4903      	ldr	r1, [pc, #12]	; (80057d8 <_ZN10IridiumSBD15beginSerialPortEv+0x18>)
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f8bc 	bl	8005948 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80057d0:	bf00      	nop
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	0802238c 	.word	0x0802238c

080057dc <_ZN10IridiumSBD13endSerialPortEv>:

void IridiumSBD::endSerialPort()
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::endSerialPort\r\n"));
 80057e4:	4903      	ldr	r1, [pc, #12]	; (80057f4 <_ZN10IridiumSBD13endSerialPortEv+0x18>)
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f8ae 	bl	8005948 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80057ec:	bf00      	nop
 80057ee:	3708      	adds	r7, #8
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	080223ac 	.word	0x080223ac

080057f8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>:

void IridiumSBD::send(FlashString str, bool beginLine, bool endLine)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	4611      	mov	r1, r2
 8005804:	461a      	mov	r2, r3
 8005806:	460b      	mov	r3, r1
 8005808:	71fb      	strb	r3, [r7, #7]
 800580a:	4613      	mov	r3, r2
 800580c:	71bb      	strb	r3, [r7, #6]
   if (beginLine)
 800580e:	79fb      	ldrb	r3, [r7, #7]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x24>
      consoleprint(F(">> "));
 8005814:	4922      	ldr	r1, [pc, #136]	; (80058a0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xa8>)
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f000 f8de 	bl	80059d8 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 800581c:	68b9      	ldr	r1, [r7, #8]
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 f8da 	bl	80059d8 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (endLine)
 8005824:	79bb      	ldrb	r3, [r7, #6]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x3a>
      consoleprint(F("\r\n"));
 800582a:	491e      	ldr	r1, [pc, #120]	; (80058a4 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xac>)
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f000 f8d3 	bl	80059d8 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005838:	2b00      	cmp	r3, #0
 800583a:	d006      	beq.n	800584a <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x52>
   {
      stream->print(str);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005840:	68b9      	ldr	r1, [r7, #8]
 8005842:	4618      	mov	r0, r3
 8005844:	f001 f860 	bl	8006908 <_ZN5Print5printEPK19__FlashStringHelper>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8005848:	e025      	b.n	8005896 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x9e>
      wireport->beginTransmission((uint8_t)deviceaddress);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005854:	4619      	mov	r1, r3
 8005856:	4610      	mov	r0, r2
 8005858:	f001 f922 	bl	8006aa0 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005860:	21ff      	movs	r1, #255	; 0xff
 8005862:	4618      	mov	r0, r3
 8005864:	f7ff f9ac 	bl	8004bc0 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800586c:	68b9      	ldr	r1, [r7, #8]
 800586e:	4618      	mov	r0, r3
 8005870:	f001 f84a 	bl	8006908 <_ZN5Print5printEPK19__FlashStringHelper>
      if (wireport->endTransmission() != 0) //Release bus
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005878:	4618      	mov	r0, r3
 800587a:	f001 f95b 	bl	8006b34 <_ZN7TwoWire15endTransmissionEv>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	bf14      	ite	ne
 8005884:	2301      	movne	r3, #1
 8005886:	2300      	moveq	r3, #0
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x9e>
         diagprint(F("I2C write was not successful!\r\n"));
 800588e:	4906      	ldr	r1, [pc, #24]	; (80058a8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xb0>)
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f000 f859 	bl	8005948 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8005896:	bf00      	nop
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	080223c8 	.word	0x080223c8
 80058a4:	08022110 	.word	0x08022110
 80058a8:	08022190 	.word	0x08022190

080058ac <_ZN10IridiumSBD4sendEPKc>:

void IridiumSBD::send(const char *str)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
   consoleprint(F(">> "));
 80058b6:	4921      	ldr	r1, [pc, #132]	; (800593c <_ZN10IridiumSBD4sendEPKc+0x90>)
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 f88d 	bl	80059d8 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 80058be:	6839      	ldr	r1, [r7, #0]
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f8af 	bl	8005a24 <_ZN10IridiumSBD12consoleprintEPKc>
   consoleprint(F("\r\n"));
 80058c6:	491e      	ldr	r1, [pc, #120]	; (8005940 <_ZN10IridiumSBD4sendEPKc+0x94>)
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f885 	bl	80059d8 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d006      	beq.n	80058e6 <_ZN10IridiumSBD4sendEPKc+0x3a>
   {
      stream->print(str);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058dc:	6839      	ldr	r1, [r7, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	f001 f820 	bl	8006924 <_ZN5Print5printEPKc>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 80058e4:	e025      	b.n	8005932 <_ZN10IridiumSBD4sendEPKc+0x86>
      wireport->beginTransmission((uint8_t)deviceaddress);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058f0:	4619      	mov	r1, r3
 80058f2:	4610      	mov	r0, r2
 80058f4:	f001 f8d4 	bl	8006aa0 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058fc:	21ff      	movs	r1, #255	; 0xff
 80058fe:	4618      	mov	r0, r3
 8005900:	f7ff f95e 	bl	8004bc0 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005908:	6839      	ldr	r1, [r7, #0]
 800590a:	4618      	mov	r0, r3
 800590c:	f001 f80a 	bl	8006924 <_ZN5Print5printEPKc>
      if (wireport->endTransmission() != 0) //Release bus
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005914:	4618      	mov	r0, r3
 8005916:	f001 f90d 	bl	8006b34 <_ZN7TwoWire15endTransmissionEv>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	bf14      	ite	ne
 8005920:	2301      	movne	r3, #1
 8005922:	2300      	moveq	r3, #0
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d003      	beq.n	8005932 <_ZN10IridiumSBD4sendEPKc+0x86>
         diagprint(F("I2C write was not successful!\r\n"));
 800592a:	4906      	ldr	r1, [pc, #24]	; (8005944 <_ZN10IridiumSBD4sendEPKc+0x98>)
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f80b 	bl	8005948 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8005932:	bf00      	nop
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	080223c8 	.word	0x080223c8
 8005940:	08022110 	.word	0x08022110
 8005944:	08022190 	.word	0x08022190

08005948 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>:
         diagprint(F("I2C write was not successful!\r\n"));
   }
}

void IridiumSBD::diagprint(FlashString str)
{
 8005948:	b590      	push	{r4, r7, lr}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	60fa      	str	r2, [r7, #12]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 8005960:	7afb      	ldrb	r3, [r7, #11]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d005      	beq.n	8005972 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0x2a>
      ISBDDiagsCallback(this, c);
 8005966:	7afb      	ldrb	r3, [r7, #11]
 8005968:	4619      	mov	r1, r3
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f7ff f94e 	bl	8004c0c <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   }
 8005970:	e7f1      	b.n	8005956 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 8005972:	bf00      	nop

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen((const char*)str), HAL_MAX_DELAY);
 8005974:	687c      	ldr	r4, [r7, #4]
 8005976:	6838      	ldr	r0, [r7, #0]
 8005978:	f7fa fc44 	bl	8000204 <strlen>
 800597c:	4603      	mov	r3, r0
 800597e:	b29a      	uxth	r2, r3
 8005980:	f04f 33ff 	mov.w	r3, #4294967295
 8005984:	6839      	ldr	r1, [r7, #0]
 8005986:	4620      	mov	r0, r4
 8005988:	f009 fa09 	bl	800ed9e <HAL_UART_Transmit>
}
 800598c:	bf00      	nop
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	bd90      	pop	{r4, r7, pc}

08005994 <_ZN10IridiumSBD9diagprintEPKc>:

void IridiumSBD::diagprint(const char *str)
{
 8005994:	b590      	push	{r4, r7, lr}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
   while (*str)
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d008      	beq.n	80059b8 <_ZN10IridiumSBD9diagprintEPKc+0x24>
      ISBDDiagsCallback(this, *str++);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	1c5a      	adds	r2, r3, #1
 80059aa:	603a      	str	r2, [r7, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	4619      	mov	r1, r3
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f7ff f92b 	bl	8004c0c <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   while (*str)
 80059b6:	e7f2      	b.n	800599e <_ZN10IridiumSBD9diagprintEPKc+0xa>

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 80059b8:	687c      	ldr	r4, [r7, #4]
 80059ba:	6838      	ldr	r0, [r7, #0]
 80059bc:	f7fa fc22 	bl	8000204 <strlen>
 80059c0:	4603      	mov	r3, r0
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	f04f 33ff 	mov.w	r3, #4294967295
 80059c8:	6839      	ldr	r1, [r7, #0]
 80059ca:	4620      	mov	r0, r4
 80059cc:	f009 f9e7 	bl	800ed9e <HAL_UART_Transmit>
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd90      	pop	{r4, r7, pc}

080059d8 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>:
   diagprint(str); //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
}

void IridiumSBD::consoleprint(FlashString str)
{
 80059d8:	b590      	push	{r4, r7, lr}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	60fa      	str	r2, [r7, #12]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 80059f0:	7afb      	ldrb	r3, [r7, #11]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d005      	beq.n	8005a02 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0x2a>
      ISBDConsoleCallback(this, c);
 80059f6:	7afb      	ldrb	r3, [r7, #11]
 80059f8:	4619      	mov	r1, r3
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7ff f8fa 	bl	8004bf4 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   }
 8005a00:	e7f1      	b.n	80059e6 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 8005a02:	bf00      	nop

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen((const char*) str), HAL_MAX_DELAY);
 8005a04:	687c      	ldr	r4, [r7, #4]
 8005a06:	6838      	ldr	r0, [r7, #0]
 8005a08:	f7fa fbfc 	bl	8000204 <strlen>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	f04f 33ff 	mov.w	r3, #4294967295
 8005a14:	6839      	ldr	r1, [r7, #0]
 8005a16:	4620      	mov	r0, r4
 8005a18:	f009 f9c1 	bl	800ed9e <HAL_UART_Transmit>
}
 8005a1c:	bf00      	nop
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd90      	pop	{r4, r7, pc}

08005a24 <_ZN10IridiumSBD12consoleprintEPKc>:

void IridiumSBD::consoleprint(const char *str)
{
 8005a24:	b590      	push	{r4, r7, lr}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
   while (*str)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d008      	beq.n	8005a48 <_ZN10IridiumSBD12consoleprintEPKc+0x24>
      ISBDConsoleCallback(this, *str++);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	1c5a      	adds	r2, r3, #1
 8005a3a:	603a      	str	r2, [r7, #0]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	4619      	mov	r1, r3
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f7ff f8d7 	bl	8004bf4 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   while (*str)
 8005a46:	e7f2      	b.n	8005a2e <_ZN10IridiumSBD12consoleprintEPKc+0xa>

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8005a48:	687c      	ldr	r4, [r7, #4]
 8005a4a:	6838      	ldr	r0, [r7, #0]
 8005a4c:	f7fa fbda 	bl	8000204 <strlen>
 8005a50:	4603      	mov	r3, r0
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	f04f 33ff 	mov.w	r3, #4294967295
 8005a58:	6839      	ldr	r1, [r7, #0]
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	f009 f99f 	bl	800ed9e <HAL_UART_Transmit>
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd90      	pop	{r4, r7, pc}

08005a68 <_ZN10IridiumSBD12consoleprintEc>:
   //consoleprint((const char*) str);
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
}

void IridiumSBD::consoleprint(char c)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	460b      	mov	r3, r1
 8005a72:	70fb      	strb	r3, [r7, #3]
   ISBDConsoleCallback(this, c);
 8005a74:	78fb      	ldrb	r3, [r7, #3]
 8005a76:	4619      	mov	r1, r3
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f7ff f8bb 	bl	8004bf4 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
}
 8005a7e:	bf00      	nop
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
	...

08005a88 <_ZN10IridiumSBD11SBDRINGSeenEv>:

void IridiumSBD::SBDRINGSeen()
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
   ringAsserted = true;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
   diagprint(F("SBDRING alert seen!\r\n"));
 8005a98:	4903      	ldr	r1, [pc, #12]	; (8005aa8 <_ZN10IridiumSBD11SBDRINGSeenEv+0x20>)
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7ff ff54 	bl	8005948 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8005aa0:	bf00      	nop
 8005aa2:	3708      	adds	r7, #8
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	080223d0 	.word	0x080223d0

08005aac <_ZN10IridiumSBD13filterSBDRINGEv>:
// Read characters until we find one that doesn't match SBDRING
// If nextChar is -1 it means we are still entertaining a possible
// match with SBDRING\r\n.  Once we find a mismatch, stuff it into
// nextChar.
void IridiumSBD::filterSBDRING()
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
   if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005aba:	f083 0301 	eor.w	r3, r3, #1
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d002      	beq.n	8005aca <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 f949 	bl	8005d5c <_ZN10IridiumSBD13check9603dataEv>
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00b      	beq.n	8005aec <_ZN10IridiumSBD13filterSBDRINGEv+0x40>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	3308      	adds	r3, #8
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4610      	mov	r0, r2
 8005ae4:	4798      	blx	r3
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	dc0d      	bgt.n	8005b08 <_ZN10IridiumSBD13filterSBDRINGEv+0x5c>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005af2:	f083 0301 	eor.w	r3, r3, #1
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00d      	beq.n	8005b18 <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 fa67 	bl	8005fd0 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	dd07      	ble.n	8005b18 <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b12:	d101      	bne.n	8005b18 <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 8005b14:	2301      	movs	r3, #1
 8005b16:	e000      	b.n	8005b1a <_ZN10IridiumSBD13filterSBDRINGEv+0x6e>
 8005b18:	2300      	movs	r3, #0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f000 80b6 	beq.w	8005c8c <_ZN10IridiumSBD13filterSBDRINGEv+0x1e0>
   {
      char c;
      if (this->useSerial)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00b      	beq.n	8005b42 <_ZN10IridiumSBD13filterSBDRINGEv+0x96>
      {
         c = stream->read();
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	330c      	adds	r3, #12
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4610      	mov	r0, r2
 8005b3a:	4798      	blx	r3
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	73fb      	strb	r3, [r7, #15]
 8005b40:	e004      	b.n	8005b4c <_ZN10IridiumSBD13filterSBDRINGEv+0xa0>
      }
      else
      {
         c = i2cSerRead();
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fa5e 	bl	8006004 <_ZN10IridiumSBD10i2cSerReadEv>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	73fb      	strb	r3, [r7, #15]
      }
      consoleprint(c);
 8005b4c:	7bfb      	ldrb	r3, [r7, #15]
 8005b4e:	4619      	mov	r1, r3
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f7ff ff89 	bl	8005a68 <_ZN10IridiumSBD12consoleprintEc>
      if (*head != 0 && c == *head)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f000 808d 	beq.w	8005c7e <_ZN10IridiumSBD13filterSBDRINGEv+0x1d2>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	7bfa      	ldrb	r2, [r7, #15]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	f040 8085 	bne.w	8005c7e <_ZN10IridiumSBD13filterSBDRINGEv+0x1d2>
      {
         ++head;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
         if (*head == 0)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10d      	bne.n	8005baa <_ZN10IridiumSBD13filterSBDRINGEv+0xfe>
         {
            SBDRINGSeen();
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7ff ff7a 	bl	8005a88 <_ZN10IridiumSBD11SBDRINGSeenEv>
            head = tail = SBDRING;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a3f      	ldr	r2, [pc, #252]	; (8005c94 <_ZN10IridiumSBD13filterSBDRINGEv+0x1e8>)
 8005b98:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
            {
               --head;
               nextChar = c;
            }
         }
 8005ba8:	e06e      	b.n	8005c88 <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
            for (unsigned long start = millis(); ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) && millis() - start < FILTERTIMEOUT; );
 8005baa:	f002 ff15 	bl	80089d8 <HAL_GetTick>
 8005bae:	60b8      	str	r0, [r7, #8]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00b      	beq.n	8005bd2 <_ZN10IridiumSBD13filterSBDRINGEv+0x126>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	3308      	adds	r3, #8
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4610      	mov	r0, r2
 8005bca:	4798      	blx	r3
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00d      	beq.n	8005bee <_ZN10IridiumSBD13filterSBDRINGEv+0x142>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bd8:	f083 0301 	eor.w	r3, r3, #1
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00e      	beq.n	8005c00 <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f9f4 	bl	8005fd0 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d108      	bne.n	8005c00 <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 8005bee:	f002 fef3 	bl	80089d8 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b09      	cmp	r3, #9
 8005bfa:	d801      	bhi.n	8005c00 <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e000      	b.n	8005c02 <_ZN10IridiumSBD13filterSBDRINGEv+0x156>
 8005c00:	2300      	movs	r3, #0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d000      	beq.n	8005c08 <_ZN10IridiumSBD13filterSBDRINGEv+0x15c>
 8005c06:	e7d3      	b.n	8005bb0 <_ZN10IridiumSBD13filterSBDRINGEv+0x104>
            if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c0e:	f083 0301 	eor.w	r3, r3, #1
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d002      	beq.n	8005c1e <_ZN10IridiumSBD13filterSBDRINGEv+0x172>
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 f89f 	bl	8005d5c <_ZN10IridiumSBD13check9603dataEv>
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00b      	beq.n	8005c40 <_ZN10IridiumSBD13filterSBDRINGEv+0x194>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	3308      	adds	r3, #8
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4610      	mov	r0, r2
 8005c38:	4798      	blx	r3
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00d      	beq.n	8005c5c <_ZN10IridiumSBD13filterSBDRINGEv+0x1b0>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c46:	f083 0301 	eor.w	r3, r3, #1
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d007      	beq.n	8005c60 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b4>
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 f9bd 	bl	8005fd0 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b4>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e000      	b.n	8005c62 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b6>
 8005c60:	2300      	movs	r3, #0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d010      	beq.n	8005c88 <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
               --head;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005c6c:	1e5a      	subs	r2, r3, #1
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
               nextChar = c;
 8005c74:	7bfa      	ldrb	r2, [r7, #15]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
         }
 8005c7c:	e004      	b.n	8005c88 <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
      }
      else
      {
         nextChar = c;
 8005c7e:	7bfa      	ldrb	r2, [r7, #15]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8005c86:	e720      	b.n	8005aca <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
         }
 8005c88:	bf00      	nop
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 8005c8a:	e71e      	b.n	8005aca <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
      }
   }
}
 8005c8c:	bf00      	nop
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	08022eac 	.word	0x08022eac

08005c98 <_ZN10IridiumSBD17filteredavailableEv>:

const char IridiumSBD::SBDRING[] = "SBDRING\r\n";

int IridiumSBD::filteredavailable()
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7ff ff03 	bl	8005aac <_ZN10IridiumSBD13filterSBDRINGEv>
   return head - tail + (nextChar != -1 ? 1 : 0);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	f8d2 20d8 	ldr.w	r2, [r2, #216]	; 0xd8
 8005cba:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005cbe:	d001      	beq.n	8005cc4 <_ZN10IridiumSBD17filteredavailableEv+0x2c>
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	e000      	b.n	8005cc6 <_ZN10IridiumSBD17filteredavailableEv+0x2e>
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	4413      	add	r3, r2
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <_ZN10IridiumSBD12filteredreadEv>:

int IridiumSBD::filteredread()
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f7ff fee7 	bl	8005aac <_ZN10IridiumSBD13filterSBDRINGEv>

   // Use up the queue first
   if (head > tail)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d91c      	bls.n	8005d28 <_ZN10IridiumSBD12filteredreadEv+0x58>
   {
      char c = *tail++;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005cf4:	1c59      	adds	r1, r3, #1
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	f8c2 10d4 	str.w	r1, [r2, #212]	; 0xd4
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	73bb      	strb	r3, [r7, #14]
      if (head == tail)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d109      	bne.n	8005d24 <_ZN10IridiumSBD12filteredreadEv+0x54>
         head = tail = SBDRING;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a11      	ldr	r2, [pc, #68]	; (8005d58 <_ZN10IridiumSBD12filteredreadEv+0x88>)
 8005d14:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
      return c;
 8005d24:	7bbb      	ldrb	r3, [r7, #14]
 8005d26:	e012      	b.n	8005d4e <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   // Then the "extra" char
   else if (nextChar != -1)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d32:	d00a      	beq.n	8005d4a <_ZN10IridiumSBD12filteredreadEv+0x7a>
   {
      char c = (char)nextChar;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005d3a:	73fb      	strb	r3, [r7, #15]
      nextChar = -1;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d42:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
      return c;
 8005d46:	7bfb      	ldrb	r3, [r7, #15]
 8005d48:	e001      	b.n	8005d4e <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   return -1;
 8005d4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	08022eac 	.word	0x08022eac

08005d5c <_ZN10IridiumSBD13check9603dataEv>:

//Checks the number of available serial bytes
//Reads the available serial bytes (if any) and stores them in i2c_ser_buffer
void IridiumSBD::check9603data()
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  if (millis() - lastCheck >= I2C_POLLING_WAIT_MS)
 8005d64:	f002 fe38 	bl	80089d8 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	bf2c      	ite	cs
 8005d7c:	2301      	movcs	r3, #1
 8005d7e:	2300      	movcc	r3, #0
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f000 80be 	beq.w	8005f04 <_ZN10IridiumSBD13check9603dataEv+0x1a8>
  {
    //Check how many serial bytes are waiting to be read
    uint16_t bytesAvailable = 0;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	81fb      	strh	r3, [r7, #14]
    wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d96:	4619      	mov	r1, r3
 8005d98:	4610      	mov	r0, r2
 8005d9a:	f000 fe81 	bl	8006aa0 <_ZN7TwoWire17beginTransmissionEh>
    wireport->write(LEN_REG); // Point to the serial buffer length
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005da2:	21fd      	movs	r1, #253	; 0xfd
 8005da4:	4618      	mov	r0, r3
 8005da6:	f7fe ff0b 	bl	8004bc0 <_ZN7TwoWire5writeEi>
    wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 fec0 	bl	8006b34 <_ZN7TwoWire15endTransmissionEv>
    if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)2) == 2) // Request two bytes
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	f000 fe5a 	bl	8006a7a <_ZN7TwoWire11requestFromEhh>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	bf0c      	ite	eq
 8005dcc:	2301      	moveq	r3, #1
 8005dce:	2300      	movne	r3, #0
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d01d      	beq.n	8005e12 <_ZN10IridiumSBD13check9603dataEv+0xb6>
    {
      uint8_t msb = wireport->read();
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	330c      	adds	r3, #12
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4610      	mov	r0, r2
 8005de6:	4798      	blx	r3
 8005de8:	4603      	mov	r3, r0
 8005dea:	737b      	strb	r3, [r7, #13]
      uint8_t lsb = wireport->read();
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	330c      	adds	r3, #12
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4610      	mov	r0, r2
 8005dfc:	4798      	blx	r3
 8005dfe:	4603      	mov	r3, r0
 8005e00:	733b      	strb	r3, [r7, #12]
      bytesAvailable = (((uint16_t)msb) << 8) | lsb;
 8005e02:	7b7b      	ldrb	r3, [r7, #13]
 8005e04:	021b      	lsls	r3, r3, #8
 8005e06:	b21a      	sxth	r2, r3
 8005e08:	7b3b      	ldrb	r3, [r7, #12]
 8005e0a:	b21b      	sxth	r3, r3
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	b21b      	sxth	r3, r3
 8005e10:	81fb      	strh	r3, [r7, #14]
    }

    //Now read the serial bytes (if any)
    if (bytesAvailable > 0)
 8005e12:	89fb      	ldrh	r3, [r7, #14]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d06f      	beq.n	8005ef8 <_ZN10IridiumSBD13check9603dataEv+0x19c>
    {
      // Request the bytes
      // Poke them into the i2c_serial buffer
      // Release the bus afterwards
      wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e22:	4619      	mov	r1, r3
 8005e24:	4610      	mov	r0, r2
 8005e26:	f000 fe3b 	bl	8006aa0 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the serial buffer
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e2e:	21ff      	movs	r1, #255	; 0xff
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7fe fec5 	bl	8004bc0 <_ZN7TwoWire5writeEi>
      wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f000 fe7a 	bl	8006b34 <_ZN7TwoWire15endTransmissionEv>
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 8005e40:	89fb      	ldrh	r3, [r7, #14]
 8005e42:	2b08      	cmp	r3, #8
 8005e44:	d92d      	bls.n	8005ea2 <_ZN10IridiumSBD13check9603dataEv+0x146>
      {
        wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)SER_PACKET_SIZE, (uint8_t)false); // Request SER_PACKET_SIZE bytes, don't release the bus
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8005e50:	2300      	movs	r3, #0
 8005e52:	2208      	movs	r2, #8
 8005e54:	f000 fdd6 	bl	8006a04 <_ZN7TwoWire11requestFromEhhh>
        while (wireport->available())
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	3308      	adds	r3, #8
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4610      	mov	r0, r2
 8005e68:	4798      	blx	r3
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	bf14      	ite	ne
 8005e70:	2301      	movne	r3, #1
 8005e72:	2300      	moveq	r3, #0
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00f      	beq.n	8005e9a <_ZN10IridiumSBD13check9603dataEv+0x13e>
        {
          i2cSerPoke(wireport->read()); // Read and store each byte
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	330c      	adds	r3, #12
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4610      	mov	r0, r2
 8005e8a:	4798      	blx	r3
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	4619      	mov	r1, r3
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f8e2 	bl	800605c <_ZN10IridiumSBD10i2cSerPokeEc>
        while (wireport->available())
 8005e98:	e7de      	b.n	8005e58 <_ZN10IridiumSBD13check9603dataEv+0xfc>
        }
        bytesAvailable -= SER_PACKET_SIZE; // Decrease the number of bytes available by SER_PACKET_SIZE
 8005e9a:	89fb      	ldrh	r3, [r7, #14]
 8005e9c:	3b08      	subs	r3, #8
 8005e9e:	81fb      	strh	r3, [r7, #14]
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 8005ea0:	e7ce      	b.n	8005e40 <_ZN10IridiumSBD13check9603dataEv+0xe4>
      }
      wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)bytesAvailable); // Request remaining bytes, release the bus
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005eac:	89fa      	ldrh	r2, [r7, #14]
 8005eae:	b2d2      	uxtb	r2, r2
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	f000 fde2 	bl	8006a7a <_ZN7TwoWire11requestFromEhh>
      while (wireport->available())
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	3308      	adds	r3, #8
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4610      	mov	r0, r2
 8005ec6:	4798      	blx	r3
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	bf14      	ite	ne
 8005ece:	2301      	movne	r3, #1
 8005ed0:	2300      	moveq	r3, #0
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00f      	beq.n	8005ef8 <_ZN10IridiumSBD13check9603dataEv+0x19c>
      {
        i2cSerPoke(wireport->read()); // Read and store each byte
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	330c      	adds	r3, #12
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4610      	mov	r0, r2
 8005ee8:	4798      	blx	r3
 8005eea:	4603      	mov	r3, r0
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	4619      	mov	r1, r3
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f8b3 	bl	800605c <_ZN10IridiumSBD10i2cSerPokeEc>
      while (wireport->available())
 8005ef6:	e7de      	b.n	8005eb6 <_ZN10IridiumSBD13check9603dataEv+0x15a>
      }
    }

    lastCheck = millis(); //Put off checking to avoid excessive I2C bus traffic
 8005ef8:	f002 fd6e 	bl	80089d8 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  }
}
 8005f04:	bf00      	nop
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <_ZN10IridiumSBD13check9603pinsEv>:

//Reads the IO pins and update IO_REGISTER
void IridiumSBD::check9603pins()
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  //Read the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f1e:	4619      	mov	r1, r3
 8005f20:	4610      	mov	r0, r2
 8005f22:	f000 fdbd 	bl	8006aa0 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f2a:	2110      	movs	r1, #16
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7fe fe47 	bl	8004bc0 <_ZN7TwoWire5writeEi>
  wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 fdfc 	bl	8006b34 <_ZN7TwoWire15endTransmissionEv>
  if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)1) == 1) // Request one byte from the IO register
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f46:	2201      	movs	r2, #1
 8005f48:	4619      	mov	r1, r3
 8005f4a:	f000 fd96 	bl	8006a7a <_ZN7TwoWire11requestFromEhh>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	bf0c      	ite	eq
 8005f54:	2301      	moveq	r3, #1
 8005f56:	2300      	movne	r3, #0
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00d      	beq.n	8005f7a <_ZN10IridiumSBD13check9603pinsEv+0x6e>
  {
    IO_REGISTER = wireport->read(); // Read the IO register
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	330c      	adds	r3, #12
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4610      	mov	r0, r2
 8005f6e:	4798      	blx	r3
 8005f70:	4603      	mov	r3, r0
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
}
 8005f7a:	bf00      	nop
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <_ZN10IridiumSBD11set9603pinsEh>:

//Set the IO pins
void IridiumSBD::set9603pins(uint8_t pins)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b082      	sub	sp, #8
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	70fb      	strb	r3, [r7, #3]
  //Write to the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f98:	4619      	mov	r1, r3
 8005f9a:	4610      	mov	r0, r2
 8005f9c:	f000 fd80 	bl	8006aa0 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fa4:	2110      	movs	r1, #16
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fe fe0a 	bl	8004bc0 <_ZN7TwoWire5writeEi>
  wireport->write(pins); // Set the pins
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	78f9      	ldrb	r1, [r7, #3]
 8005fba:	4610      	mov	r0, r2
 8005fbc:	4798      	blx	r3
  wireport->endTransmission(); // Send data and surrender the bus
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 fdb6 	bl	8006b34 <_ZN7TwoWire15endTransmissionEv>
}
 8005fc8:	bf00      	nop
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <_ZN10IridiumSBD15i2cSerAvailableEv>:
    return(ISBD_SUCCESS);
}

// I2C_SER functions
int IridiumSBD::i2cSerAvailable()
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  return (i2c_ser_buffer_tail + I2C_SER_MAX_BUFF - i2c_ser_buffer_head) % I2C_SER_MAX_BUFF;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fde:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	425a      	negs	r2, r3
 8005fec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ff0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005ff4:	bf58      	it	pl
 8005ff6:	4253      	negpl	r3, r2
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <_ZN10IridiumSBD10i2cSerReadEv>:

int IridiumSBD::i2cSerRead()
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  // Empty buffer?
  if (i2c_ser_buffer_head == i2c_ser_buffer_tail)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006018:	429a      	cmp	r2, r3
 800601a:	d102      	bne.n	8006022 <_ZN10IridiumSBD10i2cSerReadEv+0x1e>
    return -1;
 800601c:	f04f 33ff 	mov.w	r3, #4294967295
 8006020:	e016      	b.n	8006050 <_ZN10IridiumSBD10i2cSerReadEv+0x4c>

  // Read from "head"
  uint8_t d = i2c_ser_buffer[i2c_ser_buffer_head]; // grab next byte
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	4413      	add	r3, r2
 800602c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006030:	73fb      	strb	r3, [r7, #15]
  i2c_ser_buffer_head = (i2c_ser_buffer_head + 1) % I2C_SER_MAX_BUFF; // update head
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006038:	3301      	adds	r3, #1
 800603a:	425a      	negs	r2, r3
 800603c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006040:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8006044:	bf58      	it	pl
 8006046:	4253      	negpl	r3, r2
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  return d;
 800604e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006050:	4618      	mov	r0, r3
 8006052:	3714      	adds	r7, #20
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <_ZN10IridiumSBD10i2cSerPokeEc>:

void IridiumSBD::i2cSerPoke(char serChar)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	460b      	mov	r3, r1
 8006066:	70fb      	strb	r3, [r7, #3]
  // Calculate the new value for the tail
  int next = (i2c_ser_buffer_tail + 1) % I2C_SER_MAX_BUFF;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800606e:	3301      	adds	r3, #1
 8006070:	425a      	negs	r2, r3
 8006072:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006076:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800607a:	bf58      	it	pl
 800607c:	4253      	negpl	r3, r2
 800607e:	60fb      	str	r3, [r7, #12]
  // If the buffer is not full (i.e. we are not about to overwrite the head byte)
  // If the buffer is full, the byte is lost
  if (next != i2c_ser_buffer_head)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	429a      	cmp	r2, r3
 800608a:	d00b      	beq.n	80060a4 <_ZN10IridiumSBD10i2cSerPokeEc+0x48>
  {
    // save new data in buffer: tail points to where byte goes
    i2c_ser_buffer[i2c_ser_buffer_tail] = serChar; // save new byte
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	4413      	add	r3, r2
 8006096:	78fa      	ldrb	r2, [r7, #3]
 8006098:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    i2c_ser_buffer_tail = next;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }
}
 80060a4:	bf00      	nop
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh>:
	#endif
}


//uint8_t IridiumSBD::MRT_Iridium_setup(UART_HandleTypeDef huart,POWERPROFILE profile){ TODO??
uint8_t IridiumSBD::MRT_Iridium_setup(UART_HandleTypeDef huart, uint8_t timeout, uint8_t i2c_bus){
 80060b0:	b084      	sub	sp, #16
 80060b2:	b590      	push	{r4, r7, lr}
 80060b4:	b08d      	sub	sp, #52	; 0x34
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80060be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->uart = huart;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80060ca:	2244      	movs	r2, #68	; 0x44
 80060cc:	4619      	mov	r1, r3
 80060ce:	f015 f9eb 	bl	801b4a8 <memcpy>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nSetting up the Iridium 9603N\r\n", 32, HAL_MAX_DELAY);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f04f 33ff 	mov.w	r3, #4294967295
 80060d8:	2220      	movs	r2, #32
 80060da:	4986      	ldr	r1, [pc, #536]	; (80062f4 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x244>)
 80060dc:	f008 fe5f 	bl	800ed9e <HAL_UART_Transmit>

	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Setting I2C bus...", 18, HAL_MAX_DELAY);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f04f 33ff 	mov.w	r3, #4294967295
 80060e6:	2212      	movs	r2, #18
 80060e8:	4983      	ldr	r1, [pc, #524]	; (80062f8 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x248>)
 80060ea:	f008 fe58 	bl	800ed9e <HAL_UART_Transmit>
	if (i2c_bus == 1){
 80060ee:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d103      	bne.n	80060fe <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x4e>
		this->wireport = &Wire;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a80      	ldr	r2, [pc, #512]	; (80062fc <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x24c>)
 80060fa:	64da      	str	r2, [r3, #76]	; 0x4c
 80060fc:	e00e      	b.n	800611c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x6c>
	}
	else if (i2c_bus == 2){
 80060fe:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8006102:	2b02      	cmp	r3, #2
 8006104:	d103      	bne.n	800610e <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x5e>
		this->wireport = &Wire1;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a7d      	ldr	r2, [pc, #500]	; (8006300 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x250>)
 800610a:	64da      	str	r2, [r3, #76]	; 0x4c
 800610c:	e006      	b.n	800611c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x6c>
	}
	else if (i2c_bus == 3){
 800610e:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8006112:	2b03      	cmp	r3, #3
 8006114:	d102      	bne.n	800611c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x6c>
		this->wireport = &Wire2;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a7a      	ldr	r2, [pc, #488]	; (8006304 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x254>)
 800611a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f04f 33ff 	mov.w	r3, #4294967295
 8006122:	2206      	movs	r2, #6
 8006124:	4978      	ldr	r1, [pc, #480]	; (8006308 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x258>)
 8006126:	f008 fe3a 	bl	800ed9e <HAL_UART_Transmit>


	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Checking for the device...", 28, HAL_MAX_DELAY);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f04f 33ff 	mov.w	r3, #4294967295
 8006130:	221c      	movs	r2, #28
 8006132:	4976      	ldr	r1, [pc, #472]	; (800630c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x25c>)
 8006134:	f008 fe33 	bl	800ed9e <HAL_UART_Transmit>
	while(!this->isConnected()){
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f7fe ffe5 	bl	8005108 <_ZN10IridiumSBD11isConnectedEv>
 800613e:	4603      	mov	r3, r0
 8006140:	f083 0301 	eor.w	r3, r3, #1
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d02c      	beq.n	80061a4 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0xf4>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Check if the device is connected. Trying again in\r\n", 53, HAL_MAX_DELAY);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f04f 33ff 	mov.w	r3, #4294967295
 8006150:	2235      	movs	r2, #53	; 0x35
 8006152:	496f      	ldr	r1, [pc, #444]	; (8006310 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x260>)
 8006154:	f008 fe23 	bl	800ed9e <HAL_UART_Transmit>
		HAL_Delay(500);
 8006158:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800615c:	f002 fc48 	bl	80089f0 <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r3", 3, HAL_MAX_DELAY);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f04f 33ff 	mov.w	r3, #4294967295
 8006166:	2203      	movs	r2, #3
 8006168:	496a      	ldr	r1, [pc, #424]	; (8006314 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x264>)
 800616a:	f008 fe18 	bl	800ed9e <HAL_UART_Transmit>
		HAL_Delay(1000);
 800616e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006172:	f002 fc3d 	bl	80089f0 <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r2", 3, HAL_MAX_DELAY);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f04f 33ff 	mov.w	r3, #4294967295
 800617c:	2203      	movs	r2, #3
 800617e:	4966      	ldr	r1, [pc, #408]	; (8006318 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x268>)
 8006180:	f008 fe0d 	bl	800ed9e <HAL_UART_Transmit>
		HAL_Delay(1000);
 8006184:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006188:	f002 fc32 	bl	80089f0 <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r1\r\n", 7, HAL_MAX_DELAY);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f04f 33ff 	mov.w	r3, #4294967295
 8006192:	2207      	movs	r2, #7
 8006194:	4961      	ldr	r1, [pc, #388]	; (800631c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x26c>)
 8006196:	f008 fe02 	bl	800ed9e <HAL_UART_Transmit>
		HAL_Delay(1000);
 800619a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800619e:	f002 fc27 	bl	80089f0 <HAL_Delay>
	while(!this->isConnected()){
 80061a2:	e7c9      	b.n	8006138 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x88>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f04f 33ff 	mov.w	r3, #4294967295
 80061aa:	2206      	movs	r2, #6
 80061ac:	4956      	ldr	r1, [pc, #344]	; (8006308 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x258>)
 80061ae:	f008 fdf6 	bl	800ed9e <HAL_UART_Transmit>

	//Activate the superchargers
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Activating the superchargers...", 31, HAL_MAX_DELAY);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f04f 33ff 	mov.w	r3, #4294967295
 80061b8:	221f      	movs	r2, #31
 80061ba:	4959      	ldr	r1, [pc, #356]	; (8006320 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x270>)
 80061bc:	f008 fdef 	bl	800ed9e <HAL_UART_Transmit>
	this->enableSuperCapCharger(true);
 80061c0:	2101      	movs	r1, #1
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7fe fe84 	bl	8004ed0 <_ZN10IridiumSBD21enableSuperCapChargerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f04f 33ff 	mov.w	r3, #4294967295
 80061ce:	2206      	movs	r2, #6
 80061d0:	494d      	ldr	r1, [pc, #308]	; (8006308 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x258>)
 80061d2:	f008 fde4 	bl	800ed9e <HAL_UART_Transmit>


	//Wait for the supercapacitors to charge
	//int start=millis();
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Waiting for the supercapacitors to charge...", 44, HAL_MAX_DELAY);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f04f 33ff 	mov.w	r3, #4294967295
 80061dc:	222c      	movs	r2, #44	; 0x2c
 80061de:	4951      	ldr	r1, [pc, #324]	; (8006324 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x274>)
 80061e0:	f008 fddd 	bl	800ed9e <HAL_UART_Transmit>
	while (!this->checkSuperCapCharger()){
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7fe feb1 	bl	8004f4c <_ZN10IridiumSBD20checkSuperCapChargerEv>
 80061ea:	4603      	mov	r3, r0
 80061ec:	f083 0301 	eor.w	r3, r3, #1
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d004      	beq.n	8006200 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x150>
		HAL_Delay(333);
 80061f6:	f240 104d 	movw	r0, #333	; 0x14d
 80061fa:	f002 fbf9 	bl	80089f0 <HAL_Delay>
	while (!this->checkSuperCapCharger()){
 80061fe:	e7f1      	b.n	80061e4 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x134>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f04f 33ff 	mov.w	r3, #4294967295
 8006206:	2206      	movs	r2, #6
 8006208:	493f      	ldr	r1, [pc, #252]	; (8006308 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x258>)
 800620a:	f008 fdc8 	bl	800ed9e <HAL_UART_Transmit>


	//Enable power for the 9603N
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Enabling 9603N power...", 23, HAL_MAX_DELAY);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f04f 33ff 	mov.w	r3, #4294967295
 8006214:	2217      	movs	r2, #23
 8006216:	4944      	ldr	r1, [pc, #272]	; (8006328 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x278>)
 8006218:	f008 fdc1 	bl	800ed9e <HAL_UART_Transmit>
	this->enable9603Npower(true);
 800621c:	2101      	movs	r1, #1
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7fe fec4 	bl	8004fac <_ZN10IridiumSBD16enable9603NpowerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f04f 33ff 	mov.w	r3, #4294967295
 800622a:	2206      	movs	r2, #6
 800622c:	4936      	ldr	r1, [pc, #216]	; (8006308 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x258>)
 800622e:	f008 fdb6 	bl	800ed9e <HAL_UART_Transmit>
	/*
	 * Begin satellite modem operation
	 */

	//Power on the rockblock
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Starting Modem...", 17, HAL_MAX_DELAY);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f04f 33ff 	mov.w	r3, #4294967295
 8006238:	2211      	movs	r2, #17
 800623a:	493c      	ldr	r1, [pc, #240]	; (800632c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x27c>)
 800623c:	f008 fdaf 	bl	800ed9e <HAL_UART_Transmit>
	//this->setPowerProfile(profile);
	int err = this->begin();
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f7fe fcef 	bl	8004c24 <_ZN10IridiumSBD5beginEv>
 8006246:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (err != ISBD_SUCCESS)
 8006248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624a:	2b00      	cmp	r3, #0
 800624c:	d015      	beq.n	800627a <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x1ca>
	  {
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Failed: ", 8, HAL_MAX_DELAY);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f04f 33ff 	mov.w	r3, #4294967295
 8006254:	2208      	movs	r2, #8
 8006256:	4936      	ldr	r1, [pc, #216]	; (8006330 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x280>)
 8006258:	f008 fda1 	bl	800ed9e <HAL_UART_Transmit>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) err, 4, HAL_MAX_DELAY);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006260:	f04f 33ff 	mov.w	r3, #4294967295
 8006264:	2204      	movs	r2, #4
 8006266:	f008 fd9a 	bl	800ed9e <HAL_UART_Transmit>
		this->MRT_Iridium_ErrorMessage(err);
 800626a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626c:	b2db      	uxtb	r3, r3
 800626e:	4619      	mov	r1, r3
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f8db 	bl	800642c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>

	    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e035      	b.n	80062e6 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x236>
	  }
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f04f 33ff 	mov.w	r3, #4294967295
 8006280:	2204      	movs	r2, #4
 8006282:	4921      	ldr	r1, [pc, #132]	; (8006308 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x258>)
 8006284:	f008 fd8b 	bl	800ed9e <HAL_UART_Transmit>

	//Setup default IMEI to 000000000000000 (no IMEI)
	IMEI="000000000000000";
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a2a      	ldr	r2, [pc, #168]	; (8006334 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x284>)
 800628c:	645a      	str	r2, [r3, #68]	; 0x44

	char str[30];
	sprintf(str, "Setting timeout of %i seconds...", timeout);
 800628e:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8006292:	f107 030c 	add.w	r3, r7, #12
 8006296:	4928      	ldr	r1, [pc, #160]	; (8006338 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x288>)
 8006298:	4618      	mov	r0, r3
 800629a:	f016 fc29 	bl	801caf0 <siprintf>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 800629e:	687c      	ldr	r4, [r7, #4]
 80062a0:	f107 030c 	add.w	r3, r7, #12
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7f9 ffad 	bl	8000204 <strlen>
 80062aa:	4603      	mov	r3, r0
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	f107 010c 	add.w	r1, r7, #12
 80062b2:	f04f 33ff 	mov.w	r3, #4294967295
 80062b6:	4620      	mov	r0, r4
 80062b8:	f008 fd71 	bl	800ed9e <HAL_UART_Transmit>
	adjustATTimeout(timeout);
 80062bc:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80062c0:	4619      	mov	r1, r3
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7fe fd11 	bl	8004cea <_ZN10IridiumSBD15adjustATTimeoutEi>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f04f 33ff 	mov.w	r3, #4294967295
 80062ce:	2204      	movs	r2, #4
 80062d0:	490d      	ldr	r1, [pc, #52]	; (8006308 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x258>)
 80062d2:	f008 fd64 	bl	800ed9e <HAL_UART_Transmit>


	HAL_UART_Transmit(&(this->uart),(uint8_t*) "End of setup\r\n\r\n", 16, HAL_MAX_DELAY);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f04f 33ff 	mov.w	r3, #4294967295
 80062dc:	2210      	movs	r2, #16
 80062de:	4917      	ldr	r1, [pc, #92]	; (800633c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh+0x28c>)
 80062e0:	f008 fd5d 	bl	800ed9e <HAL_UART_Transmit>

	return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3734      	adds	r7, #52	; 0x34
 80062ea:	46bd      	mov	sp, r7
 80062ec:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80062f0:	b004      	add	sp, #16
 80062f2:	4770      	bx	lr
 80062f4:	08022450 	.word	0x08022450
 80062f8:	08022474 	.word	0x08022474
 80062fc:	200004a8 	.word	0x200004a8
 8006300:	20000560 	.word	0x20000560
 8006304:	20000618 	.word	0x20000618
 8006308:	08021d64 	.word	0x08021d64
 800630c:	08022488 	.word	0x08022488
 8006310:	080224a4 	.word	0x080224a4
 8006314:	080224d8 	.word	0x080224d8
 8006318:	080224dc 	.word	0x080224dc
 800631c:	080224e0 	.word	0x080224e0
 8006320:	080224e8 	.word	0x080224e8
 8006324:	08022508 	.word	0x08022508
 8006328:	08022538 	.word	0x08022538
 800632c:	08022550 	.word	0x08022550
 8006330:	08022564 	.word	0x08022564
 8006334:	08022570 	.word	0x08022570
 8006338:	08022580 	.word	0x08022580
 800633c:	080225a4 	.word	0x080225a4

08006340 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>:


boolean IridiumSBD::MRT_Iridium_shutdown(void){
 8006340:	b590      	push	{r4, r7, lr}
 8006342:	b08b      	sub	sp, #44	; 0x2c
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nShutting down the Iridium\r\n", 29, HAL_MAX_DELAY);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f04f 33ff 	mov.w	r3, #4294967295
 800634e:	221d      	movs	r2, #29
 8006350:	492f      	ldr	r1, [pc, #188]	; (8006410 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd0>)
 8006352:	f008 fd24 	bl	800ed9e <HAL_UART_Transmit>

	// Power down the modem
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Putting the 9603N to sleep...", 29, HAL_MAX_DELAY);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f04f 33ff 	mov.w	r3, #4294967295
 800635c:	221d      	movs	r2, #29
 800635e:	492d      	ldr	r1, [pc, #180]	; (8006414 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd4>)
 8006360:	f008 fd1d 	bl	800ed9e <HAL_UART_Transmit>
	int err = this->sleep();
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f7fe fc88 	bl	8004c7a <_ZN10IridiumSBD5sleepEv>
 800636a:	6278      	str	r0, [r7, #36]	; 0x24
	if (err != ISBD_SUCCESS)
 800636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636e:	2b00      	cmp	r3, #0
 8006370:	d017      	beq.n	80063a2 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x62>
	{
		char str[24+sizeof(int)];
		sprintf(str, "sleep failed: error  %i\r\n", err);
 8006372:	f107 0308 	add.w	r3, r7, #8
 8006376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006378:	4927      	ldr	r1, [pc, #156]	; (8006418 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd8>)
 800637a:	4618      	mov	r0, r3
 800637c:	f016 fbb8 	bl	801caf0 <siprintf>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8006380:	687c      	ldr	r4, [r7, #4]
 8006382:	f107 0308 	add.w	r3, r7, #8
 8006386:	4618      	mov	r0, r3
 8006388:	f7f9 ff3c 	bl	8000204 <strlen>
 800638c:	4603      	mov	r3, r0
 800638e:	b29a      	uxth	r2, r3
 8006390:	f107 0108 	add.w	r1, r7, #8
 8006394:	f04f 33ff 	mov.w	r3, #4294967295
 8006398:	4620      	mov	r0, r4
 800639a:	f008 fd00 	bl	800ed9e <HAL_UART_Transmit>
		return false;
 800639e:	2300      	movs	r3, #0
 80063a0:	e032      	b.n	8006408 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xc8>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f04f 33ff 	mov.w	r3, #4294967295
 80063a8:	2204      	movs	r2, #4
 80063aa:	491c      	ldr	r1, [pc, #112]	; (800641c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 80063ac:	f008 fcf7 	bl	800ed9e <HAL_UART_Transmit>

	// Disable 9603N power
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Disabling 9603N power...", 24, HAL_MAX_DELAY);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f04f 33ff 	mov.w	r3, #4294967295
 80063b6:	2218      	movs	r2, #24
 80063b8:	4919      	ldr	r1, [pc, #100]	; (8006420 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe0>)
 80063ba:	f008 fcf0 	bl	800ed9e <HAL_UART_Transmit>
	this->enable9603Npower(false);
 80063be:	2100      	movs	r1, #0
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f7fe fdf3 	bl	8004fac <_ZN10IridiumSBD16enable9603NpowerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f04f 33ff 	mov.w	r3, #4294967295
 80063cc:	2204      	movs	r2, #4
 80063ce:	4913      	ldr	r1, [pc, #76]	; (800641c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 80063d0:	f008 fce5 	bl	800ed9e <HAL_UART_Transmit>

	// Disable the supercapacitor charger
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Disabling the supercapacitor charger...", 39, HAL_MAX_DELAY);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f04f 33ff 	mov.w	r3, #4294967295
 80063da:	2227      	movs	r2, #39	; 0x27
 80063dc:	4911      	ldr	r1, [pc, #68]	; (8006424 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe4>)
 80063de:	f008 fcde 	bl	800ed9e <HAL_UART_Transmit>
	this->enableSuperCapCharger(false);
 80063e2:	2100      	movs	r1, #0
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f7fe fd73 	bl	8004ed0 <_ZN10IridiumSBD21enableSuperCapChargerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f04f 33ff 	mov.w	r3, #4294967295
 80063f0:	2204      	movs	r2, #4
 80063f2:	490a      	ldr	r1, [pc, #40]	; (800641c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 80063f4:	f008 fcd3 	bl	800ed9e <HAL_UART_Transmit>

	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Iridium successfully shutdown\r\n", 32, HAL_MAX_DELAY);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f04f 33ff 	mov.w	r3, #4294967295
 80063fe:	2220      	movs	r2, #32
 8006400:	4909      	ldr	r1, [pc, #36]	; (8006428 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe8>)
 8006402:	f008 fccc 	bl	800ed9e <HAL_UART_Transmit>
	return true;
 8006406:	2301      	movs	r3, #1
}
 8006408:	4618      	mov	r0, r3
 800640a:	372c      	adds	r7, #44	; 0x2c
 800640c:	46bd      	mov	sp, r7
 800640e:	bd90      	pop	{r4, r7, pc}
 8006410:	080225b8 	.word	0x080225b8
 8006414:	080225d8 	.word	0x080225d8
 8006418:	080225f8 	.word	0x080225f8
 800641c:	08021d64 	.word	0x08021d64
 8006420:	08022614 	.word	0x08022614
 8006424:	08022630 	.word	0x08022630
 8006428:	08022658 	.word	0x08022658

0800642c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>:



void IridiumSBD::MRT_Iridium_ErrorMessage(uint8_t error){
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	460b      	mov	r3, r1
 8006436:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nError:\t", 12, HAL_MAX_DELAY);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f04f 33ff 	mov.w	r3, #4294967295
 800643e:	220c      	movs	r2, #12
 8006440:	4948      	ldr	r1, [pc, #288]	; (8006564 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x138>)
 8006442:	f008 fcac 	bl	800ed9e <HAL_UART_Transmit>
	if (error == ISBD_ALREADY_AWAKE){
 8006446:	78fb      	ldrb	r3, [r7, #3]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d107      	bne.n	800645c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x30>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Already Awake\r\n", 17, HAL_MAX_DELAY);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f04f 33ff 	mov.w	r3, #4294967295
 8006452:	2211      	movs	r2, #17
 8006454:	4944      	ldr	r1, [pc, #272]	; (8006568 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x13c>)
 8006456:	f008 fca2 	bl	800ed9e <HAL_UART_Transmit>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "DEBUG LINE REACHED\r\n", 22, HAL_MAX_DELAY);
	}
	else{
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "UNKNOWN\r\n", 11, HAL_MAX_DELAY);
	}
}
 800645a:	e07f      	b.n	800655c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_SERIAL_FAILURE){
 800645c:	78fb      	ldrb	r3, [r7, #3]
 800645e:	2b02      	cmp	r3, #2
 8006460:	d107      	bne.n	8006472 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x46>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Serial Failure\r\n", 18, HAL_MAX_DELAY);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f04f 33ff 	mov.w	r3, #4294967295
 8006468:	2212      	movs	r2, #18
 800646a:	4940      	ldr	r1, [pc, #256]	; (800656c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x140>)
 800646c:	f008 fc97 	bl	800ed9e <HAL_UART_Transmit>
}
 8006470:	e074      	b.n	800655c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_PROTOCOL_ERROR){
 8006472:	78fb      	ldrb	r3, [r7, #3]
 8006474:	2b03      	cmp	r3, #3
 8006476:	d107      	bne.n	8006488 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x5c>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Protocol Error\r\n", 18, HAL_MAX_DELAY);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f04f 33ff 	mov.w	r3, #4294967295
 800647e:	2212      	movs	r2, #18
 8006480:	493b      	ldr	r1, [pc, #236]	; (8006570 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x144>)
 8006482:	f008 fc8c 	bl	800ed9e <HAL_UART_Transmit>
}
 8006486:	e069      	b.n	800655c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_CANCELLED){
 8006488:	78fb      	ldrb	r3, [r7, #3]
 800648a:	2b04      	cmp	r3, #4
 800648c:	d107      	bne.n	800649e <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x72>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nCancelled", 13, HAL_MAX_DELAY);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f04f 33ff 	mov.w	r3, #4294967295
 8006494:	220d      	movs	r2, #13
 8006496:	4937      	ldr	r1, [pc, #220]	; (8006574 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x148>)
 8006498:	f008 fc81 	bl	800ed9e <HAL_UART_Transmit>
}
 800649c:	e05e      	b.n	800655c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_NO_MODEM_DETECTED){
 800649e:	78fb      	ldrb	r3, [r7, #3]
 80064a0:	2b05      	cmp	r3, #5
 80064a2:	d107      	bne.n	80064b4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x88>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nNo modem detected: check wiring.", 36, HAL_MAX_DELAY);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f04f 33ff 	mov.w	r3, #4294967295
 80064aa:	2224      	movs	r2, #36	; 0x24
 80064ac:	4932      	ldr	r1, [pc, #200]	; (8006578 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x14c>)
 80064ae:	f008 fc76 	bl	800ed9e <HAL_UART_Transmit>
}
 80064b2:	e053      	b.n	800655c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_SBDIX_FATAL_ERROR){
 80064b4:	78fb      	ldrb	r3, [r7, #3]
 80064b6:	2b06      	cmp	r3, #6
 80064b8:	d107      	bne.n	80064ca <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x9e>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "SDBIX Fatal Error\r\n", 21, HAL_MAX_DELAY);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f04f 33ff 	mov.w	r3, #4294967295
 80064c0:	2215      	movs	r2, #21
 80064c2:	492e      	ldr	r1, [pc, #184]	; (800657c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x150>)
 80064c4:	f008 fc6b 	bl	800ed9e <HAL_UART_Transmit>
}
 80064c8:	e048      	b.n	800655c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_SENDRECEIVE_TIMEOUT){
 80064ca:	78fb      	ldrb	r3, [r7, #3]
 80064cc:	2b07      	cmp	r3, #7
 80064ce:	d107      	bne.n	80064e0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xb4>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Send-Receive Timeout\r\n", 24, HAL_MAX_DELAY);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f04f 33ff 	mov.w	r3, #4294967295
 80064d6:	2218      	movs	r2, #24
 80064d8:	4929      	ldr	r1, [pc, #164]	; (8006580 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x154>)
 80064da:	f008 fc60 	bl	800ed9e <HAL_UART_Transmit>
}
 80064de:	e03d      	b.n	800655c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_RX_OVERFLOW){
 80064e0:	78fb      	ldrb	r3, [r7, #3]
 80064e2:	2b08      	cmp	r3, #8
 80064e4:	d107      	bne.n	80064f6 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xca>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "RX Overflow\r\n", 15, HAL_MAX_DELAY);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f04f 33ff 	mov.w	r3, #4294967295
 80064ec:	220f      	movs	r2, #15
 80064ee:	4925      	ldr	r1, [pc, #148]	; (8006584 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x158>)
 80064f0:	f008 fc55 	bl	800ed9e <HAL_UART_Transmit>
}
 80064f4:	e032      	b.n	800655c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_REENTRANT){
 80064f6:	78fb      	ldrb	r3, [r7, #3]
 80064f8:	2b09      	cmp	r3, #9
 80064fa:	d107      	bne.n	800650c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xe0>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "REENTRANT\r\n", 13, HAL_MAX_DELAY);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006502:	220d      	movs	r2, #13
 8006504:	4920      	ldr	r1, [pc, #128]	; (8006588 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x15c>)
 8006506:	f008 fc4a 	bl	800ed9e <HAL_UART_Transmit>
}
 800650a:	e027      	b.n	800655c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_IS_ASLEEP){
 800650c:	78fb      	ldrb	r3, [r7, #3]
 800650e:	2b0a      	cmp	r3, #10
 8006510:	d107      	bne.n	8006522 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf6>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Is Asleep\r\n", 13, HAL_MAX_DELAY);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f04f 33ff 	mov.w	r3, #4294967295
 8006518:	220d      	movs	r2, #13
 800651a:	491c      	ldr	r1, [pc, #112]	; (800658c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x160>)
 800651c:	f008 fc3f 	bl	800ed9e <HAL_UART_Transmit>
}
 8006520:	e01c      	b.n	800655c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_NO_SLEEP_PIN){
 8006522:	78fb      	ldrb	r3, [r7, #3]
 8006524:	2b0b      	cmp	r3, #11
 8006526:	d107      	bne.n	8006538 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x10c>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "No Sleep Pin\r\n", 16, HAL_MAX_DELAY);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f04f 33ff 	mov.w	r3, #4294967295
 800652e:	2210      	movs	r2, #16
 8006530:	4917      	ldr	r1, [pc, #92]	; (8006590 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x164>)
 8006532:	f008 fc34 	bl	800ed9e <HAL_UART_Transmit>
}
 8006536:	e011      	b.n	800655c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if(error == 20){
 8006538:	78fb      	ldrb	r3, [r7, #3]
 800653a:	2b14      	cmp	r3, #20
 800653c:	d107      	bne.n	800654e <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x122>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "DEBUG LINE REACHED\r\n", 22, HAL_MAX_DELAY);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f04f 33ff 	mov.w	r3, #4294967295
 8006544:	2216      	movs	r2, #22
 8006546:	4913      	ldr	r1, [pc, #76]	; (8006594 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x168>)
 8006548:	f008 fc29 	bl	800ed9e <HAL_UART_Transmit>
}
 800654c:	e006      	b.n	800655c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "UNKNOWN\r\n", 11, HAL_MAX_DELAY);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f04f 33ff 	mov.w	r3, #4294967295
 8006554:	220b      	movs	r2, #11
 8006556:	4910      	ldr	r1, [pc, #64]	; (8006598 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x16c>)
 8006558:	f008 fc21 	bl	800ed9e <HAL_UART_Transmit>
}
 800655c:	bf00      	nop
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	08022678 	.word	0x08022678
 8006568:	08022684 	.word	0x08022684
 800656c:	08022694 	.word	0x08022694
 8006570:	080226a8 	.word	0x080226a8
 8006574:	080226bc 	.word	0x080226bc
 8006578:	080226c8 	.word	0x080226c8
 800657c:	080226ec 	.word	0x080226ec
 8006580:	08022700 	.word	0x08022700
 8006584:	08022718 	.word	0x08022718
 8006588:	08022728 	.word	0x08022728
 800658c:	08022734 	.word	0x08022734
 8006590:	08022740 	.word	0x08022740
 8006594:	08022750 	.word	0x08022750
 8006598:	08022768 	.word	0x08022768

0800659c <_ZN10IridiumSBD19MRT_Iridium_getTimeEv>:


/*
 * This function requests the time
 */
boolean IridiumSBD::MRT_Iridium_getTime(void){
 800659c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800659e:	b0a1      	sub	sp, #132	; 0x84
 80065a0:	af04      	add	r7, sp, #16
 80065a2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nRetrieving time\r\n", 20, HAL_MAX_DELAY);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f04f 33ff 	mov.w	r3, #4294967295
 80065aa:	2214      	movs	r2, #20
 80065ac:	4928      	ldr	r1, [pc, #160]	; (8006650 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xb4>)
 80065ae:	f008 fbf6 	bl	800ed9e <HAL_UART_Transmit>
	struct tm t; // struct tm is defined in time.h
	int err = this->getSystemTime(t); // Ask the 9603N for the system time
 80065b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80065b6:	4619      	mov	r1, r3
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f7fe fbc5 	bl	8004d48 <_ZN10IridiumSBD13getSystemTimeER2tm>
 80065be:	66f8      	str	r0, [r7, #108]	; 0x6c
	if (err == ISBD_SUCCESS) // Was it successful?
 80065c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d125      	bne.n	8006612 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x76>
	    {
		char buf[61];
		sprintf(buf, "\r\n<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
				t.tm_year + 1900, t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);
 80065c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
		sprintf(buf, "\r\n<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
 80065c8:	f203 756c 	addw	r5, r3, #1900	; 0x76c
				t.tm_year + 1900, t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);
 80065cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		sprintf(buf, "\r\n<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
 80065ce:	1c5e      	adds	r6, r3, #1
 80065d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80065d4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80065d6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80065d8:	f107 0408 	add.w	r4, r7, #8
 80065dc:	9003      	str	r0, [sp, #12]
 80065de:	9102      	str	r1, [sp, #8]
 80065e0:	9201      	str	r2, [sp, #4]
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	4633      	mov	r3, r6
 80065e6:	462a      	mov	r2, r5
 80065e8:	491a      	ldr	r1, [pc, #104]	; (8006654 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xb8>)
 80065ea:	4620      	mov	r0, r4
 80065ec:	f016 fa80 	bl	801caf0 <siprintf>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) buf, strlen(buf), HAL_MAX_DELAY);
 80065f0:	687c      	ldr	r4, [r7, #4]
 80065f2:	f107 0308 	add.w	r3, r7, #8
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7f9 fe04 	bl	8000204 <strlen>
 80065fc:	4603      	mov	r3, r0
 80065fe:	b29a      	uxth	r2, r3
 8006600:	f107 0108 	add.w	r1, r7, #8
 8006604:	f04f 33ff 	mov.w	r3, #4294967295
 8006608:	4620      	mov	r0, r4
 800660a:	f008 fbc8 	bl	800ed9e <HAL_UART_Transmit>
		return true;
 800660e:	2301      	movs	r3, #1
 8006610:	e019      	b.n	8006646 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xaa>
	}

	else if (err == ISBD_NO_NETWORK) // Did it fail because the 9603N has not yet seen the network?
 8006612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006614:	2b0c      	cmp	r3, #12
 8006616:	d108      	bne.n	800662a <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x8e>
	     {
	  	 HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nNo network detected.\r\n", 28, HAL_MAX_DELAY);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f04f 33ff 	mov.w	r3, #4294967295
 800661e:	221c      	movs	r2, #28
 8006620:	490d      	ldr	r1, [pc, #52]	; (8006658 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xbc>)
 8006622:	f008 fbbc 	bl	800ed9e <HAL_UART_Transmit>
	   	 return false;
 8006626:	2300      	movs	r3, #0
 8006628:	e00d      	b.n	8006646 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xaa>
	}

	else
	    {
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nUnexpected Error ", 21, HAL_MAX_DELAY);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f04f 33ff 	mov.w	r3, #4294967295
 8006630:	2215      	movs	r2, #21
 8006632:	490a      	ldr	r1, [pc, #40]	; (800665c <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xc0>)
 8006634:	f008 fbb3 	bl	800ed9e <HAL_UART_Transmit>
		this->MRT_Iridium_ErrorMessage(err);
 8006638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800663a:	b2db      	uxtb	r3, r3
 800663c:	4619      	mov	r1, r3
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f7ff fef4 	bl	800642c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
		return false;
 8006644:	2300      	movs	r3, #0
	}
}
 8006646:	4618      	mov	r0, r3
 8006648:	3774      	adds	r7, #116	; 0x74
 800664a:	46bd      	mov	sp, r7
 800664c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800664e:	bf00      	nop
 8006650:	08022888 	.word	0x08022888
 8006654:	0802289c 	.word	0x0802289c
 8006658:	080228d4 	.word	0x080228d4
 800665c:	080228f0 	.word	0x080228f0

08006660 <_ZN10IridiumSBDC1ER7TwoWireh>:
      if (ringPin != -1)
         pinMode(ringPin, INPUT);
   }
   */

IridiumSBD(TwoWire &wirePort = IRIDIUM_I2C, uint8_t deviceAddress = 0x63)
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	4613      	mov	r3, r2
 800666c:	71fb      	strb	r3, [r7, #7]
   {
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2205      	movs	r2, #5
 800667a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2202      	movs	r2, #2
 800668a:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2204      	movs	r2, #4
 8006692:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2208      	movs	r2, #8
 800669a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2210      	movs	r2, #16
 80066a2:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2220      	movs	r2, #32
 80066aa:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2240      	movs	r2, #64	; 0x40
 80066b2:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
      useSerial = false;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      wireport = &wirePort;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	64da      	str	r2, [r3, #76]	; 0x4c
      deviceaddress = deviceAddress;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	79fa      	ldrb	r2, [r7, #7]
 80066c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      sbdixInterval = ISBD_USB_SBDIX_INTERVAL;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	221e      	movs	r2, #30
 80066d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      atTimeout = ISBD_DEFAULT_AT_TIMEOUT;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	221e      	movs	r2, #30
 80066d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      sendReceiveTimeout = ISBD_DEFAULT_SENDRECEIVE_TIME;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80066e2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
      startupTimeout = ISBD_STARTUP_MAX_TIME;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	22f0      	movs	r2, #240	; 0xf0
 80066ea:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
      remainingMessages = -1;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f04f 32ff 	mov.w	r2, #4294967295
 80066f4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
      asleep = true;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
      reentrant = false;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
      sleepPin = -1;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f04f 32ff 	mov.w	r2, #4294967295
 800670e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
      sleepPinConfigured = false;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
      ringPin = -1;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f04f 32ff 	mov.w	r2, #4294967295
 8006720:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
      msstmWorkaroundRequested = false;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
      ringAlertsEnabled = true;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
      ringAsserted = false;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
      lastPowerOnTime = 0UL;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
      head = SBDRING;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	4a0d      	ldr	r2, [pc, #52]	; (800677c <_ZN10IridiumSBDC1ER7TwoWireh+0x11c>)
 8006748:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
      tail = SBDRING;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	4a0b      	ldr	r2, [pc, #44]	; (800677c <_ZN10IridiumSBDC1ER7TwoWireh+0x11c>)
 8006750:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
      nextChar = -1;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f04f 32ff 	mov.w	r2, #4294967295
 800675a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
      i2c_ser_buffer_tail = 0;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      i2c_ser_buffer_head = 0;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   }
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	4618      	mov	r0, r3
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	08022eac 	.word	0x08022eac

08006780 <MRT_Static_Iridium_Constructor>:
#endif

static IridiumSBD *E_T = NULL;


void MRT_Static_Iridium_Constructor(){
 8006780:	b598      	push	{r3, r4, r7, lr}
 8006782:	af00      	add	r7, sp, #0
	if (E_T==NULL){
 8006784:	4b08      	ldr	r3, [pc, #32]	; (80067a8 <MRT_Static_Iridium_Constructor+0x28>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10b      	bne.n	80067a4 <MRT_Static_Iridium_Constructor+0x24>
		E_T = new IridiumSBD();
 800678c:	20e4      	movs	r0, #228	; 0xe4
 800678e:	f013 fc4f 	bl	801a030 <_Znwj>
 8006792:	4603      	mov	r3, r0
 8006794:	461c      	mov	r4, r3
 8006796:	2263      	movs	r2, #99	; 0x63
 8006798:	4904      	ldr	r1, [pc, #16]	; (80067ac <MRT_Static_Iridium_Constructor+0x2c>)
 800679a:	4620      	mov	r0, r4
 800679c:	f7ff ff60 	bl	8006660 <_ZN10IridiumSBDC1ER7TwoWireh>
 80067a0:	4b01      	ldr	r3, [pc, #4]	; (80067a8 <MRT_Static_Iridium_Constructor+0x28>)
 80067a2:	601c      	str	r4, [r3, #0]
	}
}
 80067a4:	bf00      	nop
 80067a6:	bd98      	pop	{r3, r4, r7, pc}
 80067a8:	200004a4 	.word	0x200004a4
 80067ac:	200004a8 	.word	0x200004a8

080067b0 <MRT_Static_Iridium_Destructor>:

void MRT_Static_Iridium_Destructor(){
 80067b0:	b480      	push	{r7}
 80067b2:	af00      	add	r7, sp, #0
	if (E_T!=NULL){
 80067b4:	4b05      	ldr	r3, [pc, #20]	; (80067cc <MRT_Static_Iridium_Destructor+0x1c>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d002      	beq.n	80067c2 <MRT_Static_Iridium_Destructor+0x12>
		E_T = NULL;
 80067bc:	4b03      	ldr	r3, [pc, #12]	; (80067cc <MRT_Static_Iridium_Destructor+0x1c>)
 80067be:	2200      	movs	r2, #0
 80067c0:	601a      	str	r2, [r3, #0]
	}
}
 80067c2:	bf00      	nop
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr
 80067cc:	200004a4 	.word	0x200004a4

080067d0 <MRT_Static_Iridium_Setup>:


uint8_t MRT_Static_Iridium_Setup(UART_HandleTypeDef huart, uint8_t timeout, uint8_t i2c_bus){
 80067d0:	b084      	sub	sp, #16
 80067d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067d4:	b091      	sub	sp, #68	; 0x44
 80067d6:	af10      	add	r7, sp, #64	; 0x40
 80067d8:	f107 0418 	add.w	r4, r7, #24
 80067dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MRT_Static_Iridium_Constructor();
 80067e0:	f7ff ffce 	bl	8006780 <MRT_Static_Iridium_Constructor>
	return E_T->MRT_Iridium_setup(huart,timeout, i2c_bus);
 80067e4:	4b11      	ldr	r3, [pc, #68]	; (800682c <MRT_Static_Iridium_Setup+0x5c>)
 80067e6:	681e      	ldr	r6, [r3, #0]
 80067e8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80067ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80067ee:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80067f2:	930e      	str	r3, [sp, #56]	; 0x38
 80067f4:	466d      	mov	r5, sp
 80067f6:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80067fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006800:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006802:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006804:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006806:	e894 0003 	ldmia.w	r4, {r0, r1}
 800680a:	e885 0003 	stmia.w	r5, {r0, r1}
 800680e:	f107 0318 	add.w	r3, r7, #24
 8006812:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006814:	4630      	mov	r0, r6
 8006816:	f7ff fc4b 	bl	80060b0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDefhh>
 800681a:	4603      	mov	r3, r0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3704      	adds	r7, #4
 8006820:	46bd      	mov	sp, r7
 8006822:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006826:	b004      	add	sp, #16
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	200004a4 	.word	0x200004a4

08006830 <MRT_Static_Iridium_Shutdown>:

bool MRT_Static_Iridium_Shutdown(void){
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
	bool b = E_T->MRT_Iridium_shutdown();
 8006836:	4b09      	ldr	r3, [pc, #36]	; (800685c <MRT_Static_Iridium_Shutdown+0x2c>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4618      	mov	r0, r3
 800683c:	f7ff fd80 	bl	8006340 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	bf14      	ite	ne
 8006846:	2301      	movne	r3, #1
 8006848:	2300      	moveq	r3, #0
 800684a:	71fb      	strb	r3, [r7, #7]
	MRT_Static_Iridium_Destructor();
 800684c:	f7ff ffb0 	bl	80067b0 <MRT_Static_Iridium_Destructor>
	return b;
 8006850:	79fb      	ldrb	r3, [r7, #7]
}
 8006852:	4618      	mov	r0, r3
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	200004a4 	.word	0x200004a4

08006860 <MRT_Static_Iridium_getTime>:
bool MRT_Static_Iridium_NetworkAvailability(){
	return E_T->MRT_Iridium_NetworkAvailability();
}


bool MRT_Static_Iridium_getTime(void){
 8006860:	b580      	push	{r7, lr}
 8006862:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_getTime();
 8006864:	4b06      	ldr	r3, [pc, #24]	; (8006880 <MRT_Static_Iridium_getTime+0x20>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4618      	mov	r0, r3
 800686a:	f7ff fe97 	bl	800659c <_ZN10IridiumSBD19MRT_Iridium_getTimeEv>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	bf14      	ite	ne
 8006874:	2301      	movne	r3, #1
 8006876:	2300      	moveq	r3, #0
 8006878:	b2db      	uxtb	r3, r3
}
 800687a:	4618      	mov	r0, r3
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	200004a4 	.word	0x200004a4

08006884 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8006884:	b590      	push	{r4, r7, lr}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <_ZN5Print5writeEPKc+0x14>
 8006894:	2300      	movs	r3, #0
 8006896:	e00d      	b.n	80068b4 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	3304      	adds	r3, #4
 800689e:	681c      	ldr	r4, [r3, #0]
 80068a0:	6838      	ldr	r0, [r7, #0]
 80068a2:	f7f9 fcaf 	bl	8000204 <strlen>
 80068a6:	4603      	mov	r3, r0
 80068a8:	461a      	mov	r2, r3
 80068aa:	6839      	ldr	r1, [r7, #0]
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	47a0      	blx	r4
 80068b0:	4603      	mov	r3, r0
 80068b2:	bf00      	nop
    }
 80068b4:	4618      	mov	r0, r3
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd90      	pop	{r4, r7, pc}

080068bc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 80068c8:	2300      	movs	r3, #0
 80068ca:	617b      	str	r3, [r7, #20]
  while (size--) {
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	1e5a      	subs	r2, r3, #1
 80068d0:	607a      	str	r2, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	bf14      	ite	ne
 80068d6:	2301      	movne	r3, #1
 80068d8:	2300      	moveq	r3, #0
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00e      	beq.n	80068fe <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	1c59      	adds	r1, r3, #1
 80068ea:	60b9      	str	r1, [r7, #8]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	4619      	mov	r1, r3
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	4790      	blx	r2
 80068f4:	4602      	mov	r2, r0
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	4413      	add	r3, r2
 80068fa:	617b      	str	r3, [r7, #20]
  while (size--) {
 80068fc:	e7e6      	b.n	80068cc <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 80068fe:	697b      	ldr	r3, [r7, #20]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3718      	adds	r7, #24
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 8006912:	6839      	ldr	r1, [r7, #0]
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 f805 	bl	8006924 <_ZN5Print5printEPKc>
 800691a:	4603      	mov	r3, r0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3708      	adds	r7, #8
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  return write(str);
 800692e:	6839      	ldr	r1, [r7, #0]
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f7ff ffa7 	bl	8006884 <_ZN5Print5writeEPKc>
 8006936:	4603      	mov	r3, r0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3708      	adds	r7, #8
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	4a06      	ldr	r2, [pc, #24]	; (8006964 <_ZN5PrintC1Ev+0x24>)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	601a      	str	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	605a      	str	r2, [r3, #4]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4618      	mov	r0, r3
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	08022ec0 	.word	0x08022ec0

08006968 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4618      	mov	r0, r3
 8006974:	f7ff ffe4 	bl	8006940 <_ZN5PrintC1Ev>
 8006978:	4a05      	ldr	r2, [pc, #20]	; (8006990 <_ZN6StreamC1Ev+0x28>)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	601a      	str	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006984:	609a      	str	r2, [r3, #8]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4618      	mov	r0, r3
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	08022ef0 	.word	0x08022ef0

08006994 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7ff ffe1 	bl	8006968 <_ZN6StreamC1Ev>
 80069a6:	4a16      	ldr	r2, [pc, #88]	; (8006a00 <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	683a      	ldr	r2, [r7, #0]
 80069b0:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	3390      	adds	r3, #144	; 0x90
 80069b6:	2220      	movs	r2, #32
 80069b8:	2100      	movs	r1, #0
 80069ba:	4618      	mov	r0, r3
 80069bc:	f014 fd9c 	bl	801b4f8 <memset>
  rxBufferIndex = 0;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4618      	mov	r0, r3
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	08022ed0 	.word	0x08022ed0

08006a04 <_ZN7TwoWire11requestFromEhhh>:
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  HAL_I2C_Init(&I2cHandle);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af02      	add	r7, sp, #8
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	4608      	mov	r0, r1
 8006a0e:	4611      	mov	r1, r2
 8006a10:	461a      	mov	r2, r3
 8006a12:	4603      	mov	r3, r0
 8006a14:	70fb      	strb	r3, [r7, #3]
 8006a16:	460b      	mov	r3, r1
 8006a18:	70bb      	strb	r3, [r7, #2]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	707b      	strb	r3, [r7, #1]
  uint8_t ret_val;

  disableInterrupt();
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 fc24 	bl	800726c <_ZN7TwoWire16disableInterruptEv>

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
 8006a24:	78bb      	ldrb	r3, [r7, #2]
 8006a26:	2b20      	cmp	r3, #32
 8006a28:	d901      	bls.n	8006a2e <_ZN7TwoWire11requestFromEhhh+0x2a>
    quantity = BUFFER_LENGTH;
 8006a2a:	2320      	movs	r3, #32
 8006a2c:	70bb      	strb	r3, [r7, #2]
  }
  // perform blocking read into buffer
  int read = i2c_master_read((address << 1), (char *)rxBuffer, quantity, sendStop);
 8006a2e:	78fb      	ldrb	r3, [r7, #3]
 8006a30:	005b      	lsls	r3, r3, #1
 8006a32:	b2d9      	uxtb	r1, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8006a3a:	78b8      	ldrb	r0, [r7, #2]
 8006a3c:	787b      	ldrb	r3, [r7, #1]
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	4603      	mov	r3, r0
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f9cf 	bl	8006de6 <_ZN7TwoWire15i2c_master_readEhPchh>
 8006a48:	60b8      	str	r0, [r7, #8]

  if(read < 0)
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	da02      	bge.n	8006a56 <_ZN7TwoWire11requestFromEhhh+0x52>
  {
    ret_val = 0;
 8006a50:	2300      	movs	r3, #0
 8006a52:	73fb      	strb	r3, [r7, #15]
 8006a54:	e001      	b.n	8006a5a <_ZN7TwoWire11requestFromEhhh+0x56>
  }else
  {
    ret_val = read;
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	73fb      	strb	r3, [r7, #15]
  }

  // set rx buffer iterator vars
  rxBufferIndex = 0;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = ret_val;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	7bfa      	ldrb	r2, [r7, #15]
 8006a66:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

  enableInterrupt();
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fbcc 	bl	8007208 <_ZN7TwoWire15enableInterruptEv>

  return ret_val;
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b082      	sub	sp, #8
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	460b      	mov	r3, r1
 8006a84:	70fb      	strb	r3, [r7, #3]
 8006a86:	4613      	mov	r3, r2
 8006a88:	70bb      	strb	r3, [r7, #2]
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 8006a8a:	78ba      	ldrb	r2, [r7, #2]
 8006a8c:	78f9      	ldrb	r1, [r7, #3]
 8006a8e:	2301      	movs	r3, #1
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f7ff ffb7 	bl	8006a04 <_ZN7TwoWire11requestFromEhhh>
 8006a96:	4603      	mov	r3, r0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <_ZN7TwoWire17beginTransmissionEh>:
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	70fb      	strb	r3, [r7, #3]
  // indicate that we are transmitting
  transmitting = 1;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  // set address of targeted slave
  txAddress = address;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	78fa      	ldrb	r2, [r7, #3]
 8006ab8:	741a      	strb	r2, [r3, #16]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8006aca:	bf00      	nop
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <_ZN7TwoWire15endTransmissionEh>:
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b086      	sub	sp, #24
 8006ada:	af02      	add	r7, sp, #8
 8006adc:	6078      	str	r0, [r7, #4]
 8006ade:	460b      	mov	r3, r1
 8006ae0:	70fb      	strb	r3, [r7, #3]
  // transmit buffer (blocking)
  disableInterrupt();
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 fbc2 	bl	800726c <_ZN7TwoWire16disableInterruptEv>

  int8_t ret = i2c_master_write((txAddress << 1), (const char *)txBuffer, txBufferLength, sendStop);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	7c1b      	ldrb	r3, [r3, #16]
 8006aec:	0059      	lsls	r1, r3, #1
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f103 0211 	add.w	r2, r3, #17
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006afa:	4618      	mov	r0, r3
 8006afc:	78fb      	ldrb	r3, [r7, #3]
 8006afe:	9300      	str	r3, [sp, #0]
 8006b00:	4603      	mov	r3, r0
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 fa00 	bl	8006f08 <_ZN7TwoWire16i2c_master_writeEiPKcii>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	73fb      	strb	r3, [r7, #15]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  // indicate that we are done transmitting
  transmitting = 0;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  enableInterrupt();
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 fb6f 	bl	8007208 <_ZN7TwoWire15enableInterruptEv>

  return ret;
 8006b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <_ZN7TwoWire15endTransmissionEv>:

//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  return endTransmission(true);
 8006b3c:	2101      	movs	r1, #1
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7ff ffc9 	bl	8006ad6 <_ZN7TwoWire15endTransmissionEh>
 8006b44:	4603      	mov	r3, r0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b082      	sub	sp, #8
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
 8006b56:	460b      	mov	r3, r1
 8006b58:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d01d      	beq.n	8006ba0 <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006b6a:	2b1f      	cmp	r3, #31
 8006b6c:	d901      	bls.n	8006b72 <_ZN7TwoWire5writeEh+0x24>
      return 0;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	e028      	b.n	8006bc4 <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006b78:	4619      	mov	r1, r3
 8006b7a:	78fa      	ldrb	r2, [r7, #3]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	440b      	add	r3, r1
 8006b80:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006b88:	3301      	adds	r3, #1
 8006b8a:	b2da      	uxtb	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8006b9e:	e010      	b.n	8006bc2 <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fb63 	bl	800726c <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 8006ba6:	1cfb      	adds	r3, r7, #3
 8006ba8:	2201      	movs	r2, #1
 8006baa:	4619      	mov	r1, r3
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 fa95 	bl	80070dc <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fb28 	bl	8007208 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	333c      	adds	r3, #60	; 0x3c
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f003 fab9 	bl	800a134 <HAL_I2C_EnableListen_IT>
  }
  return 1;
 8006bc2:	2301      	movs	r3, #1
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3708      	adds	r7, #8
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
  if(transmitting){
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d013      	beq.n	8006c0a <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 8006be2:	2300      	movs	r3, #0
 8006be4:	617b      	str	r3, [r7, #20]
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d21e      	bcs.n	8006c2c <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68b9      	ldr	r1, [r7, #8]
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	440a      	add	r2, r1
 8006bfa:	7812      	ldrb	r2, [r2, #0]
 8006bfc:	4611      	mov	r1, r2
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	3301      	adds	r3, #1
 8006c06:	617b      	str	r3, [r7, #20]
 8006c08:	e7ed      	b.n	8006be6 <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 fb2e 	bl	800726c <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	461a      	mov	r2, r3
 8006c14:	68b9      	ldr	r1, [r7, #8]
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f000 fa60 	bl	80070dc <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f000 faf3 	bl	8007208 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	333c      	adds	r3, #60	; 0x3c
 8006c26:	4618      	mov	r0, r3
 8006c28:	f003 fa84 	bl	800a134 <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 8006c2c:	687b      	ldr	r3, [r7, #4]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3718      	adds	r7, #24
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b083      	sub	sp, #12
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	461a      	mov	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	1ad3      	subs	r3, r2, r3
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b085      	sub	sp, #20
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  int value = -1;
 8006c66:	f04f 33ff 	mov.w	r3, #4294967295
 8006c6a:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006c72:	b2da      	uxtb	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	bf34      	ite	cc
 8006c80:	2301      	movcc	r3, #1
 8006c82:	2300      	movcs	r3, #0
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d012      	beq.n	8006cb0 <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	461a      	mov	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4413      	add	r3, r2
 8006c98:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8006c9c:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	b2da      	uxtb	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3714      	adds	r7, #20
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr

08006cbe <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b085      	sub	sp, #20
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
  int value = -1;
 8006cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8006cca:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006cd2:	b2da      	uxtb	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	bf34      	ite	cc
 8006ce0:	2301      	movcc	r3, #1
 8006ce2:	2300      	movcs	r3, #0
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d009      	beq.n	8006cfe <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8006cfc:	60fb      	str	r3, [r7, #12]
  }

  return value;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3714      	adds	r7, #20
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <_ZN7TwoWire16i2c_master_startEv>:
{
  user_onRequest = function;
}

int TwoWire::i2c_master_start()
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d2c:	60bb      	str	r3, [r7, #8]

    int timeout;

    // Clear Acknowledge failure flag
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d36:	615a      	str	r2, [r3, #20]

    // Wait the STOP condition has been previously correctly sent
  // This timeout can be avoid in some specific cases by simply clearing the STOP bit
    timeout = FLAG_TIMEOUT;
 8006d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d3c:	60fb      	str	r3, [r7, #12]
    while ((i2c->CR1 & I2C_CR1_STOP) == I2C_CR1_STOP) {
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d4a:	bf0c      	ite	eq
 8006d4c:	2301      	moveq	r3, #1
 8006d4e:	2300      	movne	r3, #0
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00b      	beq.n	8006d6e <_ZN7TwoWire16i2c_master_startEv+0x4e>
        if ((timeout--) == 0) {
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	1e5a      	subs	r2, r3, #1
 8006d5a:	60fa      	str	r2, [r7, #12]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	bf0c      	ite	eq
 8006d60:	2301      	moveq	r3, #1
 8006d62:	2300      	movne	r3, #0
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d0e9      	beq.n	8006d3e <_ZN7TwoWire16i2c_master_startEv+0x1e>
            return 1;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e021      	b.n	8006db2 <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    // Generate the START condition
    i2c->CR1 |= I2C_CR1_START;
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	601a      	str	r2, [r3, #0]

    // Wait the START condition has been correctly sent
    timeout = FLAG_TIMEOUT;
 8006d7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d7e:	60fb      	str	r3, [r7, #12]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	f003 0301 	and.w	r3, r3, #1
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	bf14      	ite	ne
 8006d8e:	2301      	movne	r3, #1
 8006d90:	2300      	moveq	r3, #0
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00b      	beq.n	8006db0 <_ZN7TwoWire16i2c_master_startEv+0x90>
        if ((timeout--) == 0) {
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	1e5a      	subs	r2, r3, #1
 8006d9c:	60fa      	str	r2, [r7, #12]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	bf0c      	ite	eq
 8006da2:	2301      	moveq	r3, #1
 8006da4:	2300      	movne	r3, #0
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d0e9      	beq.n	8006d80 <_ZN7TwoWire16i2c_master_startEv+0x60>
            return 1;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e000      	b.n	8006db2 <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    return 0;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3714      	adds	r7, #20
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <_ZN7TwoWire15i2c_master_stopEv>:

int TwoWire::i2c_master_stop()
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b085      	sub	sp, #20
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dca:	60fb      	str	r3, [r7, #12]

    // Generate the STOP condition
    i2c->CR1 |= I2C_CR1_STOP;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	601a      	str	r2, [r3, #0]

    return 0;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <_ZN7TwoWire15i2c_master_readEhPchh>:

int TwoWire::i2c_master_read(uint8_t address, char *data, uint8_t length, uint8_t stop)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b08a      	sub	sp, #40	; 0x28
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	60f8      	str	r0, [r7, #12]
 8006dee:	607a      	str	r2, [r7, #4]
 8006df0:	461a      	mov	r2, r3
 8006df2:	460b      	mov	r3, r1
 8006df4:	72fb      	strb	r3, [r7, #11]
 8006df6:	4613      	mov	r3, r2
 8006df8:	72bb      	strb	r3, [r7, #10]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dfe:	61fb      	str	r3, [r7, #28]
    int timeout;
    int count;
    int value;
    int ret;

    i2c_master_start();
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f7ff ff8d 	bl	8006d20 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 8006e06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e0a:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	bf14      	ite	ne
 8006e1a:	2301      	movne	r3, #1
 8006e1c:	2300      	moveq	r3, #0
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d008      	beq.n	8006e36 <_ZN7TwoWire15i2c_master_readEhPchh+0x50>
        timeout--;
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	3b01      	subs	r3, #1
 8006e28:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1ed      	bne.n	8006e0c <_ZN7TwoWire15i2c_master_readEhPchh+0x26>
            return -1;
 8006e30:	f04f 33ff 	mov.w	r3, #4294967295
 8006e34:	e064      	b.n	8006f00 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_READ(address);
 8006e36:	7afb      	ldrb	r3, [r7, #11]
 8006e38:	f043 0301 	orr.w	r3, r3, #1
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	461a      	mov	r2, r3
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 8006e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e48:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e4e:	695b      	ldr	r3, [r3, #20]
 8006e50:	f003 0302 	and.w	r3, r3, #2
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	bf14      	ite	ne
 8006e58:	2301      	movne	r3, #1
 8006e5a:	2300      	moveq	r3, #0
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d008      	beq.n	8006e74 <_ZN7TwoWire15i2c_master_readEhPchh+0x8e>
        timeout--;
 8006e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e64:	3b01      	subs	r3, #1
 8006e66:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 8006e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1ed      	bne.n	8006e4a <_ZN7TwoWire15i2c_master_readEhPchh+0x64>
            return -1;
 8006e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e72:	e045      	b.n	8006f00 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 8006e74:	2300      	movs	r3, #0
 8006e76:	613b      	str	r3, [r7, #16]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e7c:	695b      	ldr	r3, [r3, #20]
 8006e7e:	613b      	str	r3, [r7, #16]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	613b      	str	r3, [r7, #16]
 8006e88:	693b      	ldr	r3, [r7, #16]

    // Read all bytes except last one
    for (count = 0; count < (length - 1); count++) {
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	623b      	str	r3, [r7, #32]
 8006e8e:	7abb      	ldrb	r3, [r7, #10]
 8006e90:	3b01      	subs	r3, #1
 8006e92:	6a3a      	ldr	r2, [r7, #32]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	da17      	bge.n	8006ec8 <_ZN7TwoWire15i2c_master_readEhPchh+0xe2>
        ret = i2c_master_byte_read(&value, 0);
 8006e98:	f107 0314 	add.w	r3, r7, #20
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f000 f8a4 	bl	8006fee <_ZN7TwoWire20i2c_master_byte_readEPii>
 8006ea6:	61b8      	str	r0, [r7, #24]
        if(ret)
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d002      	beq.n	8006eb4 <_ZN7TwoWire15i2c_master_readEhPchh+0xce>
        {
          return -1;
 8006eae:	f04f 33ff 	mov.w	r3, #4294967295
 8006eb2:	e025      	b.n	8006f00 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
        data[count] = (char)value;
 8006eb4:	6979      	ldr	r1, [r7, #20]
 8006eb6:	6a3b      	ldr	r3, [r7, #32]
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	4413      	add	r3, r2
 8006ebc:	b2ca      	uxtb	r2, r1
 8006ebe:	701a      	strb	r2, [r3, #0]
    for (count = 0; count < (length - 1); count++) {
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	623b      	str	r3, [r7, #32]
 8006ec6:	e7e2      	b.n	8006e8e <_ZN7TwoWire15i2c_master_readEhPchh+0xa8>
    }

    // If not repeated start, send stop.
    // Warning: must be done BEFORE the data is read.
    if (stop) {
 8006ec8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d002      	beq.n	8006ed6 <_ZN7TwoWire15i2c_master_readEhPchh+0xf0>
        i2c_master_stop();
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f7ff ff74 	bl	8006dbe <_ZN7TwoWire15i2c_master_stopEv>
    }

    // Read the last byte
    ret = i2c_master_byte_read(&value, 1);
 8006ed6:	f107 0314 	add.w	r3, r7, #20
 8006eda:	2201      	movs	r2, #1
 8006edc:	4619      	mov	r1, r3
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f000 f885 	bl	8006fee <_ZN7TwoWire20i2c_master_byte_readEPii>
 8006ee4:	61b8      	str	r0, [r7, #24]
    if(ret)
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d002      	beq.n	8006ef2 <_ZN7TwoWire15i2c_master_readEhPchh+0x10c>
    {
      return -1;
 8006eec:	f04f 33ff 	mov.w	r3, #4294967295
 8006ef0:	e006      	b.n	8006f00 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
    }
    data[count] = (char)value;
 8006ef2:	6979      	ldr	r1, [r7, #20]
 8006ef4:	6a3b      	ldr	r3, [r7, #32]
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	4413      	add	r3, r2
 8006efa:	b2ca      	uxtb	r2, r1
 8006efc:	701a      	strb	r2, [r3, #0]

    return length;
 8006efe:	7abb      	ldrb	r3, [r7, #10]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3728      	adds	r7, #40	; 0x28
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <_ZN7TwoWire16i2c_master_writeEiPKcii>:

int TwoWire::i2c_master_write(int address, const char *data, int length, int stop)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b088      	sub	sp, #32
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
 8006f14:	603b      	str	r3, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f1a:	617b      	str	r3, [r7, #20]
    int timeout;
    int count;

    i2c_master_start();
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f7ff feff 	bl	8006d20 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 8006f22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f26:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	f003 0301 	and.w	r3, r3, #1
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	bf14      	ite	ne
 8006f36:	2301      	movne	r3, #1
 8006f38:	2300      	moveq	r3, #0
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d007      	beq.n	8006f50 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x48>
        timeout--;
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	3b01      	subs	r3, #1
 8006f44:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1ed      	bne.n	8006f28 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x20>
            return 4;
 8006f4c:	2304      	movs	r3, #4
 8006f4e:	e04a      	b.n	8006fe6 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_WRITE(address);
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 8006f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f60:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f66:	695b      	ldr	r3, [r3, #20]
 8006f68:	f003 0302 	and.w	r3, r3, #2
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	bf14      	ite	ne
 8006f70:	2301      	movne	r3, #1
 8006f72:	2300      	moveq	r3, #0
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d007      	beq.n	8006f8a <_ZN7TwoWire16i2c_master_writeEiPKcii+0x82>
        timeout--;
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1ed      	bne.n	8006f62 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x5a>
            return 2;
 8006f86:	2302      	movs	r3, #2
 8006f88:	e02d      	b.n	8006fe6 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	613b      	str	r3, [r7, #16]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f92:	695b      	ldr	r3, [r3, #20]
 8006f94:	613b      	str	r3, [r7, #16]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	613b      	str	r3, [r7, #16]
 8006f9e:	693b      	ldr	r3, [r7, #16]

    for (count = 0; count < length; count++) {
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	61bb      	str	r3, [r7, #24]
 8006fa4:	69ba      	ldr	r2, [r7, #24]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	da15      	bge.n	8006fd8 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xd0>
        if (i2c_master_byte_write(data[count]) != 1) {
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f000 f85a 	bl	8007070 <_ZN7TwoWire21i2c_master_byte_writeEi>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	bf14      	ite	ne
 8006fc2:	2301      	movne	r3, #1
 8006fc4:	2300      	moveq	r3, #0
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d001      	beq.n	8006fd0 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xc8>
            return 3;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e00a      	b.n	8006fe6 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
    for (count = 0; count < length; count++) {
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	61bb      	str	r3, [r7, #24]
 8006fd6:	e7e5      	b.n	8006fa4 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x9c>
        }
    }

    // If not repeated start, send stop.
    if (stop) {
 8006fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d002      	beq.n	8006fe4 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xdc>
        i2c_master_stop();
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f7ff feed 	bl	8006dbe <_ZN7TwoWire15i2c_master_stopEv>
    }

    return 0;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3720      	adds	r7, #32
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <_ZN7TwoWire20i2c_master_byte_readEPii>:

int TwoWire::i2c_master_byte_read(int *value, int last)
{
 8006fee:	b480      	push	{r7}
 8006ff0:	b087      	sub	sp, #28
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	60f8      	str	r0, [r7, #12]
 8006ff6:	60b9      	str	r1, [r7, #8]
 8006ff8:	607a      	str	r2, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffe:	613b      	str	r3, [r7, #16]
    int timeout;

    if (last) {
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d006      	beq.n	8007014 <_ZN7TwoWire20i2c_master_byte_readEPii+0x26>
        // Don't acknowledge the last byte
        i2c->CR1 &= ~I2C_CR1_ACK;
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	601a      	str	r2, [r3, #0]
 8007012:	e005      	b.n	8007020 <_ZN7TwoWire20i2c_master_byte_readEPii+0x32>
    } else {
        // Acknowledge the byte
        i2c->CR1 |= I2C_CR1_ACK;
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	601a      	str	r2, [r3, #0]
    }

    // Wait until the byte is received
    timeout = FLAG_TIMEOUT;
 8007020:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007024:	617b      	str	r3, [r7, #20]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_RXNE) == RESET) {
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800702a:	695b      	ldr	r3, [r3, #20]
 800702c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007030:	2b40      	cmp	r3, #64	; 0x40
 8007032:	bf14      	ite	ne
 8007034:	2301      	movne	r3, #1
 8007036:	2300      	moveq	r3, #0
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00c      	beq.n	8007058 <_ZN7TwoWire20i2c_master_byte_readEPii+0x6a>
        if ((timeout--) == 0) {
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	1e5a      	subs	r2, r3, #1
 8007042:	617a      	str	r2, [r7, #20]
 8007044:	2b00      	cmp	r3, #0
 8007046:	bf0c      	ite	eq
 8007048:	2301      	moveq	r3, #1
 800704a:	2300      	movne	r3, #0
 800704c:	b2db      	uxtb	r3, r3
 800704e:	2b00      	cmp	r3, #0
 8007050:	d0e9      	beq.n	8007026 <_ZN7TwoWire20i2c_master_byte_readEPii+0x38>
            return -1;
 8007052:	f04f 33ff 	mov.w	r3, #4294967295
 8007056:	e005      	b.n	8007064 <_ZN7TwoWire20i2c_master_byte_readEPii+0x76>
        }
    }

    *value = (int)i2c->DR;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	461a      	mov	r2, r3
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	601a      	str	r2, [r3, #0]

    return 0;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	371c      	adds	r7, #28
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <_ZN7TwoWire21i2c_master_byte_writeEi>:

int TwoWire::i2c_master_byte_write(int data)
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800707e:	60bb      	str	r3, [r7, #8]
    int timeout;

    i2c->DR = (uint8_t)data;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	b2db      	uxtb	r3, r3
 8007084:	461a      	mov	r2, r3
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	611a      	str	r2, [r3, #16]

    // Wait until the byte is transmitted
    timeout = FLAG_TIMEOUT;
 800708a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800708e:	60fb      	str	r3, [r7, #12]
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800709a:	2b80      	cmp	r3, #128	; 0x80
 800709c:	d008      	beq.n	80070b0 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
            (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == RESET)) {
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a2:	695b      	ldr	r3, [r3, #20]
 80070a4:	f003 0304 	and.w	r3, r3, #4
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 80070a8:	2b04      	cmp	r3, #4
 80070aa:	d001      	beq.n	80070b0 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
 80070ac:	2301      	movs	r3, #1
 80070ae:	e000      	b.n	80070b2 <_ZN7TwoWire21i2c_master_byte_writeEi+0x42>
 80070b0:	2300      	movs	r3, #0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00b      	beq.n	80070ce <_ZN7TwoWire21i2c_master_byte_writeEi+0x5e>
        if ((timeout--) == 0) {
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	1e5a      	subs	r2, r3, #1
 80070ba:	60fa      	str	r2, [r7, #12]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	bf0c      	ite	eq
 80070c0:	2301      	moveq	r3, #1
 80070c2:	2300      	movne	r3, #0
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d0e2      	beq.n	8007090 <_ZN7TwoWire21i2c_master_byte_writeEi+0x20>
            return 0;
 80070ca:	2300      	movs	r3, #0
 80070cc:	e000      	b.n	80070d0 <_ZN7TwoWire21i2c_master_byte_writeEi+0x60>
        }
    }

    return 1;
 80070ce:	2301      	movs	r3, #1
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <_ZN7TwoWire15i2c_slave_writeEPKci>:

int TwoWire::i2c_slave_write(const char *data, int length)
{
 80070dc:	b480      	push	{r7}
 80070de:	b089      	sub	sp, #36	; 0x24
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 80070e8:	2300      	movs	r3, #0
 80070ea:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f0:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	dd41      	ble.n	800717c <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 80070f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070fc:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007102:	695b      	ldr	r3, [r3, #20]
 8007104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007108:	2b80      	cmp	r3, #128	; 0x80
 800710a:	bf14      	ite	ne
 800710c:	2301      	movne	r3, #1
 800710e:	2300      	moveq	r3, #0
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b00      	cmp	r3, #0
 8007114:	d008      	beq.n	8007128 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	3b01      	subs	r3, #1
 800711a:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1ed      	bne.n	80070fe <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 8007122:	f04f 33ff 	mov.w	r3, #4294967295
 8007126:	e068      	b.n	80071fa <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	1c5a      	adds	r2, r3, #1
 800712c:	60ba      	str	r2, [r7, #8]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	461a      	mov	r2, r3
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	611a      	str	r2, [r3, #16]
        length--;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	3b01      	subs	r3, #1
 800713a:	607b      	str	r3, [r7, #4]
        size++;
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	3301      	adds	r3, #1
 8007140:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007146:	695b      	ldr	r3, [r3, #20]
 8007148:	f003 0304 	and.w	r3, r3, #4
 800714c:	2b04      	cmp	r3, #4
 800714e:	d104      	bne.n	800715a <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d001      	beq.n	800715a <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8007156:	2301      	movs	r3, #1
 8007158:	e000      	b.n	800715c <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 800715a:	2300      	movs	r3, #0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d0c8      	beq.n	80070f2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	1c5a      	adds	r2, r3, #1
 8007164:	60ba      	str	r2, [r7, #8]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	461a      	mov	r2, r3
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	611a      	str	r2, [r3, #16]
            length--;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	3b01      	subs	r3, #1
 8007172:	607b      	str	r3, [r7, #4]
            size++;
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	3301      	adds	r3, #1
 8007178:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 800717a:	e7ba      	b.n	80070f2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 800717c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007180:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007186:	695b      	ldr	r3, [r3, #20]
 8007188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800718c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007190:	bf14      	ite	ne
 8007192:	2301      	movne	r3, #1
 8007194:	2300      	moveq	r3, #0
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b00      	cmp	r3, #0
 800719a:	d008      	beq.n	80071ae <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	3b01      	subs	r3, #1
 80071a0:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1ec      	bne.n	8007182 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 80071a8:	f04f 33ff 	mov.w	r3, #4294967295
 80071ac:	e025      	b.n	80071fa <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80071b6:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 80071b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071bc:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	f003 0302 	and.w	r3, r3, #2
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	bf0c      	ite	eq
 80071cc:	2301      	moveq	r3, #1
 80071ce:	2300      	movne	r3, #0
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d008      	beq.n	80071e8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	3b01      	subs	r3, #1
 80071da:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1ed      	bne.n	80071be <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 80071e2:	f04f 33ff 	mov.w	r3, #4294967295
 80071e6:	e008      	b.n	80071fa <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2220      	movs	r2, #32
 80071ec:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 80071f8:	69bb      	ldr	r3, [r7, #24]
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3724      	adds	r7, #36	; 0x24
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
	...

08007208 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007214:	4a12      	ldr	r2, [pc, #72]	; (8007260 <_ZN7TwoWire15enableInterruptEv+0x58>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d106      	bne.n	8007228 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 800721a:	2049      	movs	r0, #73	; 0x49
 800721c:	f002 f914 	bl	8009448 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8007220:	2048      	movs	r0, #72	; 0x48
 8007222:	f002 f911 	bl	8009448 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8007226:	e016      	b.n	8007256 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800722c:	4a0d      	ldr	r2, [pc, #52]	; (8007264 <_ZN7TwoWire15enableInterruptEv+0x5c>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d106      	bne.n	8007240 <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8007232:	2022      	movs	r0, #34	; 0x22
 8007234:	f002 f908 	bl	8009448 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8007238:	2021      	movs	r0, #33	; 0x21
 800723a:	f002 f905 	bl	8009448 <HAL_NVIC_EnableIRQ>
}
 800723e:	e00a      	b.n	8007256 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007244:	4a08      	ldr	r2, [pc, #32]	; (8007268 <_ZN7TwoWire15enableInterruptEv+0x60>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d105      	bne.n	8007256 <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800724a:	2020      	movs	r0, #32
 800724c:	f002 f8fc 	bl	8009448 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8007250:	201f      	movs	r0, #31
 8007252:	f002 f8f9 	bl	8009448 <HAL_NVIC_EnableIRQ>
}
 8007256:	bf00      	nop
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	40005c00 	.word	0x40005c00
 8007264:	40005800 	.word	0x40005800
 8007268:	40005400 	.word	0x40005400

0800726c <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007278:	4a12      	ldr	r2, [pc, #72]	; (80072c4 <_ZN7TwoWire16disableInterruptEv+0x58>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d106      	bne.n	800728c <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 800727e:	2049      	movs	r0, #73	; 0x49
 8007280:	f002 f8f0 	bl	8009464 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8007284:	2048      	movs	r0, #72	; 0x48
 8007286:	f002 f8ed 	bl	8009464 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 800728a:	e016      	b.n	80072ba <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007290:	4a0d      	ldr	r2, [pc, #52]	; (80072c8 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d106      	bne.n	80072a4 <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8007296:	2022      	movs	r0, #34	; 0x22
 8007298:	f002 f8e4 	bl	8009464 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 800729c:	2021      	movs	r0, #33	; 0x21
 800729e:	f002 f8e1 	bl	8009464 <HAL_NVIC_DisableIRQ>
}
 80072a2:	e00a      	b.n	80072ba <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a8:	4a08      	ldr	r2, [pc, #32]	; (80072cc <_ZN7TwoWire16disableInterruptEv+0x60>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d105      	bne.n	80072ba <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 80072ae:	2020      	movs	r0, #32
 80072b0:	f002 f8d8 	bl	8009464 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 80072b4:	201f      	movs	r0, #31
 80072b6:	f002 f8d5 	bl	8009464 <HAL_NVIC_DisableIRQ>
}
 80072ba:	bf00      	nop
 80072bc:	3708      	adds	r7, #8
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	40005c00 	.word	0x40005c00
 80072c8:	40005800 	.word	0x40005800
 80072cc:	40005400 	.word	0x40005400

080072d0 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d110      	bne.n	8007302 <_Z41__static_initialization_and_destruction_0ii+0x32>
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d10b      	bne.n	8007302 <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 80072ea:	4908      	ldr	r1, [pc, #32]	; (800730c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80072ec:	4808      	ldr	r0, [pc, #32]	; (8007310 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80072ee:	f7ff fb51 	bl	8006994 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 80072f2:	4908      	ldr	r1, [pc, #32]	; (8007314 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80072f4:	4808      	ldr	r0, [pc, #32]	; (8007318 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80072f6:	f7ff fb4d 	bl	8006994 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 80072fa:	4908      	ldr	r1, [pc, #32]	; (800731c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80072fc:	4808      	ldr	r0, [pc, #32]	; (8007320 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80072fe:	f7ff fb49 	bl	8006994 <_ZN7TwoWireC1EP11I2C_TypeDef>
 8007302:	bf00      	nop
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	40005400 	.word	0x40005400
 8007310:	200004a8 	.word	0x200004a8
 8007314:	40005800 	.word	0x40005800
 8007318:	20000560 	.word	0x20000560
 800731c:	40005c00 	.word	0x40005c00
 8007320:	20000618 	.word	0x20000618

08007324 <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 8007324:	b580      	push	{r7, lr}
 8007326:	af00      	add	r7, sp, #0
 8007328:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800732c:	2001      	movs	r0, #1
 800732e:	f7ff ffcf 	bl	80072d0 <_Z41__static_initialization_and_destruction_0ii>
 8007332:	bd80      	pop	{r7, pc}

08007334 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8007334:	b590      	push	{r4, r7, lr}
 8007336:	b087      	sub	sp, #28
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	607a      	str	r2, [r7, #4]
 800733e:	461a      	mov	r2, r3
 8007340:	460b      	mov	r3, r1
 8007342:	72fb      	strb	r3, [r7, #11]
 8007344:	4613      	mov	r3, r2
 8007346:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	685c      	ldr	r4, [r3, #4]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6898      	ldr	r0, [r3, #8]
 8007350:	893b      	ldrh	r3, [r7, #8]
 8007352:	7af9      	ldrb	r1, [r7, #11]
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	47a0      	blx	r4
 8007358:	6178      	str	r0, [r7, #20]

  return ret;
 800735a:	697b      	ldr	r3, [r7, #20]
}
 800735c:	4618      	mov	r0, r3
 800735e:	371c      	adds	r7, #28
 8007360:	46bd      	mov	sp, r7
 8007362:	bd90      	pop	{r4, r7, pc}

08007364 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8007364:	b590      	push	{r4, r7, lr}
 8007366:	b087      	sub	sp, #28
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	607a      	str	r2, [r7, #4]
 800736e:	461a      	mov	r2, r3
 8007370:	460b      	mov	r3, r1
 8007372:	72fb      	strb	r3, [r7, #11]
 8007374:	4613      	mov	r3, r2
 8007376:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681c      	ldr	r4, [r3, #0]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6898      	ldr	r0, [r3, #8]
 8007380:	893b      	ldrh	r3, [r7, #8]
 8007382:	7af9      	ldrb	r1, [r7, #11]
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	47a0      	blx	r4
 8007388:	6178      	str	r0, [r7, #20]

  return ret;
 800738a:	697b      	ldr	r3, [r7, #20]
}
 800738c:	4618      	mov	r0, r3
 800738e:	371c      	adds	r7, #28
 8007390:	46bd      	mov	sp, r7
 8007392:	bd90      	pop	{r4, r7, pc}

08007394 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	ee07 3a90 	vmov	s15, r3
 80073a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80073c0 <lps22hh_from_lsb_to_hpa+0x2c>
 80073aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80073ae:	eef0 7a66 	vmov.f32	s15, s13
}
 80073b2:	eeb0 0a67 	vmov.f32	s0, s15
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	49800000 	.word	0x49800000

080073c4 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	4603      	mov	r3, r0
 80073cc:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 80073ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073d2:	ee07 3a90 	vmov	s15, r3
 80073d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073da:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80073f4 <lps22hh_from_lsb_to_celsius+0x30>
 80073de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80073e2:	eef0 7a66 	vmov.f32	s15, s13
}
 80073e6:	eeb0 0a67 	vmov.f32	s0, s15
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr
 80073f4:	42c80000 	.word	0x42c80000

080073f8 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	460b      	mov	r3, r1
 8007402:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8007404:	f107 0208 	add.w	r2, r7, #8
 8007408:	2301      	movs	r3, #1
 800740a:	2110      	movs	r1, #16
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f7ff ff91 	bl	8007334 <lps22hh_read_reg>
 8007412:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10f      	bne.n	800743a <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800741a:	78fb      	ldrb	r3, [r7, #3]
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	b2da      	uxtb	r2, r3
 8007422:	7a3b      	ldrb	r3, [r7, #8]
 8007424:	f362 0341 	bfi	r3, r2, #1, #1
 8007428:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800742a:	f107 0208 	add.w	r2, r7, #8
 800742e:	2301      	movs	r3, #1
 8007430:	2110      	movs	r1, #16
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7ff ff96 	bl	8007364 <lps22hh_write_reg>
 8007438:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800743a:	68fb      	ldr	r3, [r7, #12]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	460b      	mov	r3, r1
 800744e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8007450:	f107 0210 	add.w	r2, r7, #16
 8007454:	2301      	movs	r3, #1
 8007456:	2110      	movs	r1, #16
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f7ff ff6b 	bl	8007334 <lps22hh_read_reg>
 800745e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d107      	bne.n	8007476 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8007466:	f107 020c 	add.w	r2, r7, #12
 800746a:	2301      	movs	r3, #1
 800746c:	2111      	movs	r1, #17
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f7ff ff60 	bl	8007334 <lps22hh_read_reg>
 8007474:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10f      	bne.n	800749c <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 800747c:	78fb      	ldrb	r3, [r7, #3]
 800747e:	f003 0307 	and.w	r3, r3, #7
 8007482:	b2da      	uxtb	r2, r3
 8007484:	7c3b      	ldrb	r3, [r7, #16]
 8007486:	f362 1306 	bfi	r3, r2, #4, #3
 800748a:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800748c:	f107 0210 	add.w	r2, r7, #16
 8007490:	2301      	movs	r3, #1
 8007492:	2110      	movs	r1, #16
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f7ff ff65 	bl	8007364 <lps22hh_write_reg>
 800749a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d119      	bne.n	80074d6 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 80074a2:	78fb      	ldrb	r3, [r7, #3]
 80074a4:	091b      	lsrs	r3, r3, #4
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	b2da      	uxtb	r2, r3
 80074ac:	7b3b      	ldrb	r3, [r7, #12]
 80074ae:	f362 0341 	bfi	r3, r2, #1, #1
 80074b2:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 80074b4:	78fb      	ldrb	r3, [r7, #3]
 80074b6:	08db      	lsrs	r3, r3, #3
 80074b8:	f003 0301 	and.w	r3, r3, #1
 80074bc:	b2da      	uxtb	r2, r3
 80074be:	7b3b      	ldrb	r3, [r7, #12]
 80074c0:	f362 0300 	bfi	r3, r2, #0, #1
 80074c4:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80074c6:	f107 020c 	add.w	r2, r7, #12
 80074ca:	2301      	movs	r3, #1
 80074cc:	2111      	movs	r1, #17
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f7ff ff48 	bl	8007364 <lps22hh_write_reg>
 80074d4:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80074d6:	697b      	ldr	r3, [r7, #20]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3718      	adds	r7, #24
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 80074ea:	f107 0208 	add.w	r2, r7, #8
 80074ee:	2301      	movs	r3, #1
 80074f0:	2127      	movs	r1, #39	; 0x27
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7ff ff1e 	bl	8007334 <lps22hh_read_reg>
 80074f8:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 80074fa:	7a3b      	ldrb	r3, [r7, #8]
 80074fc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007500:	b2db      	uxtb	r3, r3
 8007502:	461a      	mov	r2, r3
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	701a      	strb	r2, [r3, #0]

  return ret;
 8007508:	68fb      	ldr	r3, [r7, #12]
}
 800750a:	4618      	mov	r0, r3
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b084      	sub	sp, #16
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
 800751a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 800751c:	f107 0208 	add.w	r2, r7, #8
 8007520:	2303      	movs	r3, #3
 8007522:	2128      	movs	r1, #40	; 0x28
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f7ff ff05 	bl	8007334 <lps22hh_read_reg>
 800752a:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 800752c:	7abb      	ldrb	r3, [r7, #10]
 800752e:	461a      	mov	r2, r3
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	021b      	lsls	r3, r3, #8
 800753a:	7a7a      	ldrb	r2, [r7, #9]
 800753c:	441a      	add	r2, r3
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	021b      	lsls	r3, r3, #8
 8007548:	7a3a      	ldrb	r2, [r7, #8]
 800754a:	441a      	add	r2, r3
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	021a      	lsls	r2, r3, #8
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	601a      	str	r2, [r3, #0]

  return ret;
 800755a:	68fb      	ldr	r3, [r7, #12]
}
 800755c:	4618      	mov	r0, r3
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 800756e:	f107 0208 	add.w	r2, r7, #8
 8007572:	2302      	movs	r3, #2
 8007574:	212b      	movs	r1, #43	; 0x2b
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f7ff fedc 	bl	8007334 <lps22hh_read_reg>
 800757c:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 800757e:	7a7b      	ldrb	r3, [r7, #9]
 8007580:	b21a      	sxth	r2, r3
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	f9b3 3000 	ldrsh.w	r3, [r3]
 800758c:	b29b      	uxth	r3, r3
 800758e:	021b      	lsls	r3, r3, #8
 8007590:	b29a      	uxth	r2, r3
 8007592:	7a3b      	ldrb	r3, [r7, #8]
 8007594:	b29b      	uxth	r3, r3
 8007596:	4413      	add	r3, r2
 8007598:	b29b      	uxth	r3, r3
 800759a:	b21a      	sxth	r2, r3
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	801a      	strh	r2, [r3, #0]

  return ret;
 80075a0:	68fb      	ldr	r3, [r7, #12]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b084      	sub	sp, #16
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
 80075b2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 80075b4:	2301      	movs	r3, #1
 80075b6:	683a      	ldr	r2, [r7, #0]
 80075b8:	210f      	movs	r1, #15
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7ff feba 	bl	8007334 <lps22hh_read_reg>
 80075c0:	60f8      	str	r0, [r7, #12]

  return ret;
 80075c2:	68fb      	ldr	r3, [r7, #12]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	460b      	mov	r3, r1
 80075d6:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80075d8:	f107 0208 	add.w	r2, r7, #8
 80075dc:	2301      	movs	r3, #1
 80075de:	2111      	movs	r1, #17
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f7ff fea7 	bl	8007334 <lps22hh_read_reg>
 80075e6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d10f      	bne.n	800760e <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 80075ee:	78fb      	ldrb	r3, [r7, #3]
 80075f0:	f003 0301 	and.w	r3, r3, #1
 80075f4:	b2da      	uxtb	r2, r3
 80075f6:	7a3b      	ldrb	r3, [r7, #8]
 80075f8:	f362 0382 	bfi	r3, r2, #2, #1
 80075fc:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80075fe:	f107 0208 	add.w	r2, r7, #8
 8007602:	2301      	movs	r3, #1
 8007604:	2111      	movs	r1, #17
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7ff feac 	bl	8007364 <lps22hh_write_reg>
 800760c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800760e:	68fb      	ldr	r3, [r7, #12]
}
 8007610:	4618      	mov	r0, r3
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8007622:	f107 0208 	add.w	r2, r7, #8
 8007626:	2301      	movs	r3, #1
 8007628:	2111      	movs	r1, #17
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f7ff fe82 	bl	8007334 <lps22hh_read_reg>
 8007630:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8007632:	7a3b      	ldrb	r3, [r7, #8]
 8007634:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007638:	b2db      	uxtb	r3, r3
 800763a:	461a      	mov	r2, r3
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	701a      	strb	r2, [r3, #0]

  return ret;
 8007640:	68fb      	ldr	r3, [r7, #12]
}
 8007642:	4618      	mov	r0, r3
 8007644:	3710      	adds	r7, #16
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800764a:	b590      	push	{r4, r7, lr}
 800764c:	b087      	sub	sp, #28
 800764e:	af00      	add	r7, sp, #0
 8007650:	60f8      	str	r0, [r7, #12]
 8007652:	607a      	str	r2, [r7, #4]
 8007654:	461a      	mov	r2, r3
 8007656:	460b      	mov	r3, r1
 8007658:	72fb      	strb	r3, [r7, #11]
 800765a:	4613      	mov	r3, r2
 800765c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	685c      	ldr	r4, [r3, #4]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6898      	ldr	r0, [r3, #8]
 8007666:	893b      	ldrh	r3, [r7, #8]
 8007668:	7af9      	ldrb	r1, [r7, #11]
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	47a0      	blx	r4
 800766e:	6178      	str	r0, [r7, #20]

  return ret;
 8007670:	697b      	ldr	r3, [r7, #20]
}
 8007672:	4618      	mov	r0, r3
 8007674:	371c      	adds	r7, #28
 8007676:	46bd      	mov	sp, r7
 8007678:	bd90      	pop	{r4, r7, pc}

0800767a <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800767a:	b590      	push	{r4, r7, lr}
 800767c:	b087      	sub	sp, #28
 800767e:	af00      	add	r7, sp, #0
 8007680:	60f8      	str	r0, [r7, #12]
 8007682:	607a      	str	r2, [r7, #4]
 8007684:	461a      	mov	r2, r3
 8007686:	460b      	mov	r3, r1
 8007688:	72fb      	strb	r3, [r7, #11]
 800768a:	4613      	mov	r3, r2
 800768c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681c      	ldr	r4, [r3, #0]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6898      	ldr	r0, [r3, #8]
 8007696:	893b      	ldrh	r3, [r7, #8]
 8007698:	7af9      	ldrb	r1, [r7, #11]
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	47a0      	blx	r4
 800769e:	6178      	str	r0, [r7, #20]

  return ret;
 80076a0:	697b      	ldr	r3, [r7, #20]
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	371c      	adds	r7, #28
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd90      	pop	{r4, r7, pc}
	...

080076ac <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	4603      	mov	r3, r0
 80076b4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 80076b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80076ba:	ee07 3a90 	vmov	s15, r3
 80076be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076c2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80076d8 <lsm6dsr_from_fs2g_to_mg+0x2c>
 80076c6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80076ca:	eeb0 0a67 	vmov.f32	s0, s15
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr
 80076d8:	3d79db23 	.word	0x3d79db23

080076dc <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	4603      	mov	r3, r0
 80076e4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 80076e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80076ea:	ee07 3a90 	vmov	s15, r3
 80076ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076f2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8007708 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 80076f6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80076fa:	eeb0 0a67 	vmov.f32	s0, s15
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr
 8007708:	428c0000 	.word	0x428c0000

0800770c <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	4603      	mov	r3, r0
 8007714:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8007716:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800771a:	ee07 3a90 	vmov	s15, r3
 800771e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007722:	eddf 6a07 	vldr	s13, [pc, #28]	; 8007740 <lsm6dsr_from_lsb_to_celsius+0x34>
 8007726:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800772a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800772e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8007732:	eeb0 0a67 	vmov.f32	s0, s15
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr
 8007740:	43800000 	.word	0x43800000

08007744 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	460b      	mov	r3, r1
 800774e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8007750:	f107 0208 	add.w	r2, r7, #8
 8007754:	2301      	movs	r3, #1
 8007756:	2110      	movs	r1, #16
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f7ff ff76 	bl	800764a <lsm6dsr_read_reg>
 800775e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10f      	bne.n	8007786 <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8007766:	78fb      	ldrb	r3, [r7, #3]
 8007768:	f003 0303 	and.w	r3, r3, #3
 800776c:	b2da      	uxtb	r2, r3
 800776e:	7a3b      	ldrb	r3, [r7, #8]
 8007770:	f362 0383 	bfi	r3, r2, #2, #2
 8007774:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8007776:	f107 0208 	add.w	r2, r7, #8
 800777a:	2301      	movs	r3, #1
 800777c:	2110      	movs	r1, #16
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f7ff ff7b 	bl	800767a <lsm6dsr_write_reg>
 8007784:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8007786:	68fb      	ldr	r3, [r7, #12]
}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	460b      	mov	r3, r1
 800779a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 800779c:	78fb      	ldrb	r3, [r7, #3]
 800779e:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 80077a0:	f107 030c 	add.w	r3, r7, #12
 80077a4:	4619      	mov	r1, r3
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fbb0 	bl	8007f0c <lsm6dsr_fsm_enable_get>
 80077ac:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f040 80c4 	bne.w	800793e <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80077b6:	7b3b      	ldrb	r3, [r7, #12]
 80077b8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80077bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80077be:	7b3b      	ldrb	r3, [r7, #12]
 80077c0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80077c4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80077c6:	4313      	orrs	r3, r2
 80077c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80077ca:	7b3b      	ldrb	r3, [r7, #12]
 80077cc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80077d0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80077d2:	4313      	orrs	r3, r2
 80077d4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80077d6:	7b3b      	ldrb	r3, [r7, #12]
 80077d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80077dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80077de:	4313      	orrs	r3, r2
 80077e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80077e2:	7b3b      	ldrb	r3, [r7, #12]
 80077e4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80077e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80077ea:	4313      	orrs	r3, r2
 80077ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80077ee:	7b3b      	ldrb	r3, [r7, #12]
 80077f0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80077f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80077f6:	4313      	orrs	r3, r2
 80077f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80077fa:	7b3b      	ldrb	r3, [r7, #12]
 80077fc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007800:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8007802:	4313      	orrs	r3, r2
 8007804:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8007806:	7b3b      	ldrb	r3, [r7, #12]
 8007808:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800780c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800780e:	4313      	orrs	r3, r2
 8007810:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8007812:	7b7b      	ldrb	r3, [r7, #13]
 8007814:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007818:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800781a:	4313      	orrs	r3, r2
 800781c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800781e:	7b7b      	ldrb	r3, [r7, #13]
 8007820:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007824:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8007826:	4313      	orrs	r3, r2
 8007828:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800782a:	7b7b      	ldrb	r3, [r7, #13]
 800782c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007830:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8007832:	4313      	orrs	r3, r2
 8007834:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8007836:	7b7b      	ldrb	r3, [r7, #13]
 8007838:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800783c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800783e:	4313      	orrs	r3, r2
 8007840:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8007842:	7b7b      	ldrb	r3, [r7, #13]
 8007844:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007848:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800784a:	4313      	orrs	r3, r2
 800784c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800784e:	7b7b      	ldrb	r3, [r7, #13]
 8007850:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007854:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8007856:	4313      	orrs	r3, r2
 8007858:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800785a:	7b7b      	ldrb	r3, [r7, #13]
 800785c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007860:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8007862:	4313      	orrs	r3, r2
 8007864:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8007866:	7b7b      	ldrb	r3, [r7, #13]
 8007868:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800786c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800786e:	4313      	orrs	r3, r2
 8007870:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007872:	2b01      	cmp	r3, #1
 8007874:	d163      	bne.n	800793e <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8007876:	f107 030b 	add.w	r3, r7, #11
 800787a:	4619      	mov	r1, r3
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fb71 	bl	8007f64 <lsm6dsr_fsm_data_rate_get>
 8007882:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d159      	bne.n	800793e <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800788a:	7afb      	ldrb	r3, [r7, #11]
 800788c:	2b03      	cmp	r3, #3
 800788e:	d853      	bhi.n	8007938 <lsm6dsr_xl_data_rate_set+0x1a8>
 8007890:	a201      	add	r2, pc, #4	; (adr r2, 8007898 <lsm6dsr_xl_data_rate_set+0x108>)
 8007892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007896:	bf00      	nop
 8007898:	080078a9 	.word	0x080078a9
 800789c:	080078bb 	.word	0x080078bb
 80078a0:	080078d9 	.word	0x080078d9
 80078a4:	08007903 	.word	0x08007903
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 80078a8:	78fb      	ldrb	r3, [r7, #3]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d102      	bne.n	80078b4 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 80078ae:	2301      	movs	r3, #1
 80078b0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80078b2:	e045      	b.n	8007940 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80078b4:	78fb      	ldrb	r3, [r7, #3]
 80078b6:	75fb      	strb	r3, [r7, #23]
            break;
 80078b8:	e042      	b.n	8007940 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80078ba:	78fb      	ldrb	r3, [r7, #3]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d102      	bne.n	80078c6 <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 80078c0:	2302      	movs	r3, #2
 80078c2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80078c4:	e03c      	b.n	8007940 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80078c6:	78fb      	ldrb	r3, [r7, #3]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d102      	bne.n	80078d2 <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 80078cc:	2302      	movs	r3, #2
 80078ce:	75fb      	strb	r3, [r7, #23]
            break;
 80078d0:	e036      	b.n	8007940 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80078d2:	78fb      	ldrb	r3, [r7, #3]
 80078d4:	75fb      	strb	r3, [r7, #23]
            break;
 80078d6:	e033      	b.n	8007940 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80078d8:	78fb      	ldrb	r3, [r7, #3]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d102      	bne.n	80078e4 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80078de:	2303      	movs	r3, #3
 80078e0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80078e2:	e02d      	b.n	8007940 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80078e4:	78fb      	ldrb	r3, [r7, #3]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d102      	bne.n	80078f0 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80078ea:	2303      	movs	r3, #3
 80078ec:	75fb      	strb	r3, [r7, #23]
            break;
 80078ee:	e027      	b.n	8007940 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 80078f0:	78fb      	ldrb	r3, [r7, #3]
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d102      	bne.n	80078fc <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80078f6:	2303      	movs	r3, #3
 80078f8:	75fb      	strb	r3, [r7, #23]
            break;
 80078fa:	e021      	b.n	8007940 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80078fc:	78fb      	ldrb	r3, [r7, #3]
 80078fe:	75fb      	strb	r3, [r7, #23]
            break;
 8007900:	e01e      	b.n	8007940 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8007902:	78fb      	ldrb	r3, [r7, #3]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d102      	bne.n	800790e <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8007908:	2304      	movs	r3, #4
 800790a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800790c:	e018      	b.n	8007940 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 800790e:	78fb      	ldrb	r3, [r7, #3]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d102      	bne.n	800791a <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8007914:	2304      	movs	r3, #4
 8007916:	75fb      	strb	r3, [r7, #23]
            break;
 8007918:	e012      	b.n	8007940 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 800791a:	78fb      	ldrb	r3, [r7, #3]
 800791c:	2b02      	cmp	r3, #2
 800791e:	d102      	bne.n	8007926 <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8007920:	2304      	movs	r3, #4
 8007922:	75fb      	strb	r3, [r7, #23]
            break;
 8007924:	e00c      	b.n	8007940 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 8007926:	78fb      	ldrb	r3, [r7, #3]
 8007928:	2b03      	cmp	r3, #3
 800792a:	d102      	bne.n	8007932 <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 800792c:	2304      	movs	r3, #4
 800792e:	75fb      	strb	r3, [r7, #23]
            break;
 8007930:	e006      	b.n	8007940 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8007932:	78fb      	ldrb	r3, [r7, #3]
 8007934:	75fb      	strb	r3, [r7, #23]
            break;
 8007936:	e003      	b.n	8007940 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8007938:	78fb      	ldrb	r3, [r7, #3]
 800793a:	75fb      	strb	r3, [r7, #23]
            break;
 800793c:	e000      	b.n	8007940 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 800793e:	bf00      	nop
    }
  }

  if (ret == 0)
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d107      	bne.n	8007956 <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8007946:	f107 0208 	add.w	r2, r7, #8
 800794a:	2301      	movs	r3, #1
 800794c:	2110      	movs	r1, #16
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7ff fe7b 	bl	800764a <lsm6dsr_read_reg>
 8007954:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10f      	bne.n	800797c <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 800795c:	7dfb      	ldrb	r3, [r7, #23]
 800795e:	f003 030f 	and.w	r3, r3, #15
 8007962:	b2da      	uxtb	r2, r3
 8007964:	7a3b      	ldrb	r3, [r7, #8]
 8007966:	f362 1307 	bfi	r3, r2, #4, #4
 800796a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 800796c:	f107 0208 	add.w	r2, r7, #8
 8007970:	2301      	movs	r3, #1
 8007972:	2110      	movs	r1, #16
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f7ff fe80 	bl	800767a <lsm6dsr_write_reg>
 800797a:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800797c:	693b      	ldr	r3, [r7, #16]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3718      	adds	r7, #24
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop

08007988 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	460b      	mov	r3, r1
 8007992:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007994:	f107 0208 	add.w	r2, r7, #8
 8007998:	2301      	movs	r3, #1
 800799a:	2111      	movs	r1, #17
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f7ff fe54 	bl	800764a <lsm6dsr_read_reg>
 80079a2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10f      	bne.n	80079ca <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 80079aa:	78fb      	ldrb	r3, [r7, #3]
 80079ac:	f003 030f 	and.w	r3, r3, #15
 80079b0:	b2da      	uxtb	r2, r3
 80079b2:	7a3b      	ldrb	r3, [r7, #8]
 80079b4:	f362 0303 	bfi	r3, r2, #0, #4
 80079b8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80079ba:	f107 0208 	add.w	r2, r7, #8
 80079be:	2301      	movs	r3, #1
 80079c0:	2111      	movs	r1, #17
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7ff fe59 	bl	800767a <lsm6dsr_write_reg>
 80079c8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80079ca:	68fb      	ldr	r3, [r7, #12]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	460b      	mov	r3, r1
 80079de:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 80079e0:	78fb      	ldrb	r3, [r7, #3]
 80079e2:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 80079e4:	f107 030c 	add.w	r3, r7, #12
 80079e8:	4619      	mov	r1, r3
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fa8e 	bl	8007f0c <lsm6dsr_fsm_enable_get>
 80079f0:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f040 80c4 	bne.w	8007b82 <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80079fa:	7b3b      	ldrb	r3, [r7, #12]
 80079fc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007a00:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8007a02:	7b3b      	ldrb	r3, [r7, #12]
 8007a04:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007a08:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8007a0e:	7b3b      	ldrb	r3, [r7, #12]
 8007a10:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007a14:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8007a16:	4313      	orrs	r3, r2
 8007a18:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8007a1a:	7b3b      	ldrb	r3, [r7, #12]
 8007a1c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007a20:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8007a22:	4313      	orrs	r3, r2
 8007a24:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8007a26:	7b3b      	ldrb	r3, [r7, #12]
 8007a28:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007a2c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8007a32:	7b3b      	ldrb	r3, [r7, #12]
 8007a34:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007a38:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8007a3e:	7b3b      	ldrb	r3, [r7, #12]
 8007a40:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007a44:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8007a46:	4313      	orrs	r3, r2
 8007a48:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8007a4a:	7b3b      	ldrb	r3, [r7, #12]
 8007a4c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007a50:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8007a52:	4313      	orrs	r3, r2
 8007a54:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8007a56:	7b7b      	ldrb	r3, [r7, #13]
 8007a58:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007a5c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8007a62:	7b7b      	ldrb	r3, [r7, #13]
 8007a64:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007a68:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8007a6e:	7b7b      	ldrb	r3, [r7, #13]
 8007a70:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007a74:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8007a76:	4313      	orrs	r3, r2
 8007a78:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8007a7a:	7b7b      	ldrb	r3, [r7, #13]
 8007a7c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007a80:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8007a82:	4313      	orrs	r3, r2
 8007a84:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8007a86:	7b7b      	ldrb	r3, [r7, #13]
 8007a88:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007a8c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8007a92:	7b7b      	ldrb	r3, [r7, #13]
 8007a94:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007a98:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8007a9e:	7b7b      	ldrb	r3, [r7, #13]
 8007aa0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007aa4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8007aaa:	7b7b      	ldrb	r3, [r7, #13]
 8007aac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007ab0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d163      	bne.n	8007b82 <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8007aba:	f107 030b 	add.w	r3, r7, #11
 8007abe:	4619      	mov	r1, r3
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 fa4f 	bl	8007f64 <lsm6dsr_fsm_data_rate_get>
 8007ac6:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d159      	bne.n	8007b82 <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8007ace:	7afb      	ldrb	r3, [r7, #11]
 8007ad0:	2b03      	cmp	r3, #3
 8007ad2:	d853      	bhi.n	8007b7c <lsm6dsr_gy_data_rate_set+0x1a8>
 8007ad4:	a201      	add	r2, pc, #4	; (adr r2, 8007adc <lsm6dsr_gy_data_rate_set+0x108>)
 8007ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ada:	bf00      	nop
 8007adc:	08007aed 	.word	0x08007aed
 8007ae0:	08007aff 	.word	0x08007aff
 8007ae4:	08007b1d 	.word	0x08007b1d
 8007ae8:	08007b47 	.word	0x08007b47
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 8007aec:	78fb      	ldrb	r3, [r7, #3]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d102      	bne.n	8007af8 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 8007af2:	2301      	movs	r3, #1
 8007af4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8007af6:	e045      	b.n	8007b84 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8007af8:	78fb      	ldrb	r3, [r7, #3]
 8007afa:	75fb      	strb	r3, [r7, #23]
            break;
 8007afc:	e042      	b.n	8007b84 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8007afe:	78fb      	ldrb	r3, [r7, #3]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d102      	bne.n	8007b0a <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8007b04:	2302      	movs	r3, #2
 8007b06:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8007b08:	e03c      	b.n	8007b84 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8007b0a:	78fb      	ldrb	r3, [r7, #3]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d102      	bne.n	8007b16 <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8007b10:	2302      	movs	r3, #2
 8007b12:	75fb      	strb	r3, [r7, #23]
            break;
 8007b14:	e036      	b.n	8007b84 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8007b16:	78fb      	ldrb	r3, [r7, #3]
 8007b18:	75fb      	strb	r3, [r7, #23]
            break;
 8007b1a:	e033      	b.n	8007b84 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8007b1c:	78fb      	ldrb	r3, [r7, #3]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d102      	bne.n	8007b28 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8007b22:	2303      	movs	r3, #3
 8007b24:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8007b26:	e02d      	b.n	8007b84 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8007b28:	78fb      	ldrb	r3, [r7, #3]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d102      	bne.n	8007b34 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	75fb      	strb	r3, [r7, #23]
            break;
 8007b32:	e027      	b.n	8007b84 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8007b34:	78fb      	ldrb	r3, [r7, #3]
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d102      	bne.n	8007b40 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	75fb      	strb	r3, [r7, #23]
            break;
 8007b3e:	e021      	b.n	8007b84 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8007b40:	78fb      	ldrb	r3, [r7, #3]
 8007b42:	75fb      	strb	r3, [r7, #23]
            break;
 8007b44:	e01e      	b.n	8007b84 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8007b46:	78fb      	ldrb	r3, [r7, #3]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d102      	bne.n	8007b52 <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8007b4c:	2304      	movs	r3, #4
 8007b4e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8007b50:	e018      	b.n	8007b84 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8007b52:	78fb      	ldrb	r3, [r7, #3]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d102      	bne.n	8007b5e <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8007b58:	2304      	movs	r3, #4
 8007b5a:	75fb      	strb	r3, [r7, #23]
            break;
 8007b5c:	e012      	b.n	8007b84 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8007b5e:	78fb      	ldrb	r3, [r7, #3]
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d102      	bne.n	8007b6a <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8007b64:	2304      	movs	r3, #4
 8007b66:	75fb      	strb	r3, [r7, #23]
            break;
 8007b68:	e00c      	b.n	8007b84 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 8007b6a:	78fb      	ldrb	r3, [r7, #3]
 8007b6c:	2b03      	cmp	r3, #3
 8007b6e:	d102      	bne.n	8007b76 <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8007b70:	2304      	movs	r3, #4
 8007b72:	75fb      	strb	r3, [r7, #23]
            break;
 8007b74:	e006      	b.n	8007b84 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8007b76:	78fb      	ldrb	r3, [r7, #3]
 8007b78:	75fb      	strb	r3, [r7, #23]
            break;
 8007b7a:	e003      	b.n	8007b84 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8007b7c:	78fb      	ldrb	r3, [r7, #3]
 8007b7e:	75fb      	strb	r3, [r7, #23]
            break;
 8007b80:	e000      	b.n	8007b84 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 8007b82:	bf00      	nop
    }
  }

  if (ret == 0)
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d107      	bne.n	8007b9a <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007b8a:	f107 0208 	add.w	r2, r7, #8
 8007b8e:	2301      	movs	r3, #1
 8007b90:	2111      	movs	r1, #17
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f7ff fd59 	bl	800764a <lsm6dsr_read_reg>
 8007b98:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10f      	bne.n	8007bc0 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8007ba0:	7dfb      	ldrb	r3, [r7, #23]
 8007ba2:	f003 030f 	and.w	r3, r3, #15
 8007ba6:	b2da      	uxtb	r2, r3
 8007ba8:	7a3b      	ldrb	r3, [r7, #8]
 8007baa:	f362 1307 	bfi	r3, r2, #4, #4
 8007bae:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007bb0:	f107 0208 	add.w	r2, r7, #8
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	2111      	movs	r1, #17
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7ff fd5e 	bl	800767a <lsm6dsr_write_reg>
 8007bbe:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8007bc0:	693b      	ldr	r3, [r7, #16]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3718      	adds	r7, #24
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop

08007bcc <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007bd8:	f107 0208 	add.w	r2, r7, #8
 8007bdc:	2301      	movs	r3, #1
 8007bde:	2112      	movs	r1, #18
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f7ff fd32 	bl	800764a <lsm6dsr_read_reg>
 8007be6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d10f      	bne.n	8007c0e <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 8007bee:	78fb      	ldrb	r3, [r7, #3]
 8007bf0:	f003 0301 	and.w	r3, r3, #1
 8007bf4:	b2da      	uxtb	r2, r3
 8007bf6:	7a3b      	ldrb	r3, [r7, #8]
 8007bf8:	f362 1386 	bfi	r3, r2, #6, #1
 8007bfc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007bfe:	f107 0208 	add.w	r2, r7, #8
 8007c02:	2301      	movs	r3, #1
 8007c04:	2112      	movs	r1, #18
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f7ff fd37 	bl	800767a <lsm6dsr_write_reg>
 8007c0c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8007c22:	f107 0208 	add.w	r2, r7, #8
 8007c26:	2301      	movs	r3, #1
 8007c28:	211e      	movs	r1, #30
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f7ff fd0d 	bl	800764a <lsm6dsr_read_reg>
 8007c30:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 8007c32:	7a3b      	ldrb	r3, [r7, #8]
 8007c34:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	701a      	strb	r2, [r3, #0]

  return ret;
 8007c40:	68fb      	ldr	r3, [r7, #12]
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b084      	sub	sp, #16
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
 8007c52:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8007c54:	f107 0208 	add.w	r2, r7, #8
 8007c58:	2301      	movs	r3, #1
 8007c5a:	211e      	movs	r1, #30
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f7ff fcf4 	bl	800764a <lsm6dsr_read_reg>
 8007c62:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8007c64:	7a3b      	ldrb	r3, [r7, #8]
 8007c66:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	701a      	strb	r2, [r3, #0]

  return ret;
 8007c72:	68fb      	ldr	r3, [r7, #12]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8007c86:	f107 0208 	add.w	r2, r7, #8
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	211e      	movs	r1, #30
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f7ff fcdb 	bl	800764a <lsm6dsr_read_reg>
 8007c94:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 8007c96:	7a3b      	ldrb	r3, [r7, #8]
 8007c98:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	701a      	strb	r2, [r3, #0]

  return ret;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b084      	sub	sp, #16
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
 8007cb6:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 8007cb8:	f107 0208 	add.w	r2, r7, #8
 8007cbc:	2302      	movs	r3, #2
 8007cbe:	2120      	movs	r1, #32
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7ff fcc2 	bl	800764a <lsm6dsr_read_reg>
 8007cc6:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 8007cc8:	7a7b      	ldrb	r3, [r7, #9]
 8007cca:	b21a      	sxth	r2, r3
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	021b      	lsls	r3, r3, #8
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	7a3b      	ldrb	r3, [r7, #8]
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	4413      	add	r3, r2
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	b21a      	sxth	r2, r3
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	801a      	strh	r2, [r3, #0]

  return ret;
 8007cea:	68fb      	ldr	r3, [r7, #12]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b086      	sub	sp, #24
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 8007cfe:	f107 020c 	add.w	r2, r7, #12
 8007d02:	2306      	movs	r3, #6
 8007d04:	2122      	movs	r1, #34	; 0x22
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f7ff fc9f 	bl	800764a <lsm6dsr_read_reg>
 8007d0c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007d0e:	7b7b      	ldrb	r3, [r7, #13]
 8007d10:	b21a      	sxth	r2, r3
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	021b      	lsls	r3, r3, #8
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	7b3b      	ldrb	r3, [r7, #12]
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	4413      	add	r3, r2
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	b21a      	sxth	r2, r3
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007d30:	7bfa      	ldrb	r2, [r7, #15]
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	3302      	adds	r3, #2
 8007d36:	b212      	sxth	r2, r2
 8007d38:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	3302      	adds	r3, #2
 8007d3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	021b      	lsls	r3, r3, #8
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	7bbb      	ldrb	r3, [r7, #14]
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	4413      	add	r3, r2
 8007d4e:	b29a      	uxth	r2, r3
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	3302      	adds	r3, #2
 8007d54:	b212      	sxth	r2, r2
 8007d56:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007d58:	7c7a      	ldrb	r2, [r7, #17]
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	3304      	adds	r3, #4
 8007d5e:	b212      	sxth	r2, r2
 8007d60:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	3304      	adds	r3, #4
 8007d66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	021b      	lsls	r3, r3, #8
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	7c3b      	ldrb	r3, [r7, #16]
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	4413      	add	r3, r2
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	b212      	sxth	r2, r2
 8007d7e:	801a      	strh	r2, [r3, #0]

  return ret;
 8007d80:	697b      	ldr	r3, [r7, #20]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3718      	adds	r7, #24
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b086      	sub	sp, #24
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 8007d94:	f107 020c 	add.w	r2, r7, #12
 8007d98:	2306      	movs	r3, #6
 8007d9a:	2128      	movs	r1, #40	; 0x28
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f7ff fc54 	bl	800764a <lsm6dsr_read_reg>
 8007da2:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007da4:	7b7b      	ldrb	r3, [r7, #13]
 8007da6:	b21a      	sxth	r2, r3
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	021b      	lsls	r3, r3, #8
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	7b3b      	ldrb	r3, [r7, #12]
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	4413      	add	r3, r2
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	b21a      	sxth	r2, r3
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007dc6:	7bfa      	ldrb	r2, [r7, #15]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	3302      	adds	r3, #2
 8007dcc:	b212      	sxth	r2, r2
 8007dce:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	3302      	adds	r3, #2
 8007dd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	021b      	lsls	r3, r3, #8
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	7bbb      	ldrb	r3, [r7, #14]
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	4413      	add	r3, r2
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	3302      	adds	r3, #2
 8007dea:	b212      	sxth	r2, r2
 8007dec:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007dee:	7c7a      	ldrb	r2, [r7, #17]
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	3304      	adds	r3, #4
 8007df4:	b212      	sxth	r2, r2
 8007df6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	3304      	adds	r3, #4
 8007dfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	021b      	lsls	r3, r3, #8
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	7c3b      	ldrb	r3, [r7, #16]
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	4413      	add	r3, r2
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	3304      	adds	r3, #4
 8007e12:	b212      	sxth	r2, r2
 8007e14:	801a      	strh	r2, [r3, #0]

  return ret;
 8007e16:	697b      	ldr	r3, [r7, #20]
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3718      	adds	r7, #24
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	460b      	mov	r3, r1
 8007e2a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8007e2c:	f107 0208 	add.w	r2, r7, #8
 8007e30:	2301      	movs	r3, #1
 8007e32:	2101      	movs	r1, #1
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f7ff fc08 	bl	800764a <lsm6dsr_read_reg>
 8007e3a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10f      	bne.n	8007e62 <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 8007e42:	78fb      	ldrb	r3, [r7, #3]
 8007e44:	f003 0303 	and.w	r3, r3, #3
 8007e48:	b2da      	uxtb	r2, r3
 8007e4a:	7a3b      	ldrb	r3, [r7, #8]
 8007e4c:	f362 1387 	bfi	r3, r2, #6, #2
 8007e50:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8007e52:	f107 0208 	add.w	r2, r7, #8
 8007e56:	2301      	movs	r3, #1
 8007e58:	2101      	movs	r1, #1
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f7ff fc0d 	bl	800767a <lsm6dsr_write_reg>
 8007e60:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8007e62:	68fb      	ldr	r3, [r7, #12]
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 8007e76:	2301      	movs	r3, #1
 8007e78:	683a      	ldr	r2, [r7, #0]
 8007e7a:	210f      	movs	r1, #15
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f7ff fbe4 	bl	800764a <lsm6dsr_read_reg>
 8007e82:	60f8      	str	r0, [r7, #12]

  return ret;
 8007e84:	68fb      	ldr	r3, [r7, #12]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b084      	sub	sp, #16
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
 8007e96:	460b      	mov	r3, r1
 8007e98:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007e9a:	f107 0208 	add.w	r2, r7, #8
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	2112      	movs	r1, #18
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7ff fbd1 	bl	800764a <lsm6dsr_read_reg>
 8007ea8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10f      	bne.n	8007ed0 <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8007eb0:	78fb      	ldrb	r3, [r7, #3]
 8007eb2:	f003 0301 	and.w	r3, r3, #1
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	7a3b      	ldrb	r3, [r7, #8]
 8007eba:	f362 0300 	bfi	r3, r2, #0, #1
 8007ebe:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007ec0:	f107 0208 	add.w	r2, r7, #8
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	2112      	movs	r1, #18
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f7ff fbd6 	bl	800767a <lsm6dsr_write_reg>
 8007ece:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b084      	sub	sp, #16
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
 8007ee2:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007ee4:	f107 0208 	add.w	r2, r7, #8
 8007ee8:	2301      	movs	r3, #1
 8007eea:	2112      	movs	r1, #18
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f7ff fbac 	bl	800764a <lsm6dsr_read_reg>
 8007ef2:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8007ef4:	7a3b      	ldrb	r3, [r7, #8]
 8007ef6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	461a      	mov	r2, r3
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	701a      	strb	r2, [r3, #0]

  return ret;
 8007f02:	68fb      	ldr	r3, [r7, #12]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8007f16:	2102      	movs	r1, #2
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f7ff ff81 	bl	8007e20 <lsm6dsr_mem_bank_set>
 8007f1e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d106      	bne.n	8007f34 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 8007f26:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 8007f28:	2301      	movs	r3, #1
 8007f2a:	2146      	movs	r1, #70	; 0x46
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f7ff fb8c 	bl	800764a <lsm6dsr_read_reg>
 8007f32:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d107      	bne.n	8007f4a <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 8007f3e:	2301      	movs	r3, #1
 8007f40:	2147      	movs	r1, #71	; 0x47
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7ff fb81 	bl	800764a <lsm6dsr_read_reg>
 8007f48:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d104      	bne.n	8007f5a <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8007f50:	2100      	movs	r1, #0
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f7ff ff64 	bl	8007e20 <lsm6dsr_mem_bank_set>
 8007f58:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8007f6e:	2102      	movs	r1, #2
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f7ff ff55 	bl	8007e20 <lsm6dsr_mem_bank_set>
 8007f76:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d107      	bne.n	8007f8e <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 8007f7e:	f107 0208 	add.w	r2, r7, #8
 8007f82:	2301      	movs	r3, #1
 8007f84:	215f      	movs	r1, #95	; 0x5f
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f7ff fb5f 	bl	800764a <lsm6dsr_read_reg>
 8007f8c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d104      	bne.n	8007f9e <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8007f94:	2100      	movs	r1, #0
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f7ff ff42 	bl	8007e20 <lsm6dsr_mem_bank_set>
 8007f9c:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8007f9e:	7a3b      	ldrb	r3, [r7, #8]
 8007fa0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b03      	cmp	r3, #3
 8007fa8:	d81a      	bhi.n	8007fe0 <lsm6dsr_fsm_data_rate_get+0x7c>
 8007faa:	a201      	add	r2, pc, #4	; (adr r2, 8007fb0 <lsm6dsr_fsm_data_rate_get+0x4c>)
 8007fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb0:	08007fc1 	.word	0x08007fc1
 8007fb4:	08007fc9 	.word	0x08007fc9
 8007fb8:	08007fd1 	.word	0x08007fd1
 8007fbc:	08007fd9 	.word	0x08007fd9
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	701a      	strb	r2, [r3, #0]
      break;
 8007fc6:	e00f      	b.n	8007fe8 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	701a      	strb	r2, [r3, #0]
      break;
 8007fce:	e00b      	b.n	8007fe8 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	2202      	movs	r2, #2
 8007fd4:	701a      	strb	r2, [r3, #0]
      break;
 8007fd6:	e007      	b.n	8007fe8 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	2203      	movs	r2, #3
 8007fdc:	701a      	strb	r2, [r3, #0]
      break;
 8007fde:	e003      	b.n	8007fe8 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	701a      	strb	r2, [r3, #0]
      break;
 8007fe6:	bf00      	nop
  }

  return ret;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop

08007ff4 <HAL_RTC_AlarmAEventCallback>:
								0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
								0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
								0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59};

/*You cannot put these in the user callbacks section and I don't know why (can put in user begin 4)*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),(uint8_t*)"AlarmA\r\n", 8, HAL_MAX_DELAY);
 8007ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8008000:	2208      	movs	r2, #8
 8008002:	4905      	ldr	r1, [pc, #20]	; (8008018 <HAL_RTC_AlarmAEventCallback+0x24>)
 8008004:	4805      	ldr	r0, [pc, #20]	; (800801c <HAL_RTC_AlarmAEventCallback+0x28>)
 8008006:	f006 feca 	bl	800ed9e <HAL_UART_Transmit>
	flagA = 1;
 800800a:	4b05      	ldr	r3, [pc, #20]	; (8008020 <HAL_RTC_AlarmAEventCallback+0x2c>)
 800800c:	2201      	movs	r2, #1
 800800e:	701a      	strb	r2, [r3, #0]
}
 8008010:	bf00      	nop
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	08022b6c 	.word	0x08022b6c
 800801c:	20006dfc 	.word	0x20006dfc
 8008020:	20000710 	.word	0x20000710

08008024 <MRT_SetupRTOS>:
}




void MRT_SetupRTOS(RTC_HandleTypeDef* hrtc, UART_HandleTypeDef uart,uint8_t sleepT){
 8008024:	b084      	sub	sp, #16
 8008026:	b580      	push	{r7, lr}
 8008028:	b082      	sub	sp, #8
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
 800802e:	f107 0014 	add.w	r0, r7, #20
 8008032:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	rtc = hrtc;
 8008036:	4a0f      	ldr	r2, [pc, #60]	; (8008074 <MRT_SetupRTOS+0x50>)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6013      	str	r3, [r2, #0]
	rtos.huart = uart;
 800803c:	4b0e      	ldr	r3, [pc, #56]	; (8008078 <MRT_SetupRTOS+0x54>)
 800803e:	4618      	mov	r0, r3
 8008040:	f107 0314 	add.w	r3, r7, #20
 8008044:	2244      	movs	r2, #68	; 0x44
 8008046:	4619      	mov	r1, r3
 8008048:	f013 fa2e 	bl	801b4a8 <memcpy>
	rtos.sleepTime = sleepT;
 800804c:	4a0a      	ldr	r2, [pc, #40]	; (8008078 <MRT_SetupRTOS+0x54>)
 800804e:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8008052:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTOS\r\n", 17, HAL_MAX_DELAY);
 8008056:	f04f 33ff 	mov.w	r3, #4294967295
 800805a:	2211      	movs	r2, #17
 800805c:	4907      	ldr	r1, [pc, #28]	; (800807c <MRT_SetupRTOS+0x58>)
 800805e:	4806      	ldr	r0, [pc, #24]	; (8008078 <MRT_SetupRTOS+0x54>)
 8008060:	f006 fe9d 	bl	800ed9e <HAL_UART_Transmit>
}
 8008064:	bf00      	nop
 8008066:	3708      	adds	r7, #8
 8008068:	46bd      	mov	sp, r7
 800806a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800806e:	b004      	add	sp, #16
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	20006e44 	.word	0x20006e44
 8008078:	20006dfc 	.word	0x20006dfc
 800807c:	08022b84 	.word	0x08022b84

08008080 <MRT_WUProcedure>:



void MRT_WUProcedure(void){
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8008086:	4b15      	ldr	r3, [pc, #84]	; (80080dc <MRT_WUProcedure+0x5c>)
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	f003 0302 	and.w	r3, r3, #2
 800808e:	2b02      	cmp	r3, #2
 8008090:	d11e      	bne.n	80080d0 <MRT_WUProcedure+0x50>
	{

		wu_flag = 1;
 8008092:	4b13      	ldr	r3, [pc, #76]	; (80080e0 <MRT_WUProcedure+0x60>)
 8008094:	2201      	movs	r2, #1
 8008096:	701a      	strb	r2, [r3, #0]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8008098:	4b10      	ldr	r3, [pc, #64]	; (80080dc <MRT_WUProcedure+0x5c>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a0f      	ldr	r2, [pc, #60]	; (80080dc <MRT_WUProcedure+0x5c>)
 800809e:	f043 0308 	orr.w	r3, r3, #8
 80080a2:	6013      	str	r3, [r2, #0]

		/** display  the string **/
		char *str = "Wakeup from the STANDBY MODE\r\n";
 80080a4:	4b0f      	ldr	r3, [pc, #60]	; (80080e4 <MRT_WUProcedure+0x64>)
 80080a6:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit(&(rtos.huart), (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f7f8 f8ab 	bl	8000204 <strlen>
 80080ae:	4603      	mov	r3, r0
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	f04f 33ff 	mov.w	r3, #4294967295
 80080b6:	6879      	ldr	r1, [r7, #4]
 80080b8:	480b      	ldr	r0, [pc, #44]	; (80080e8 <MRT_WUProcedure+0x68>)
 80080ba:	f006 fe70 	bl	800ed9e <HAL_UART_Transmit>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 80080be:	f44f 7080 	mov.w	r0, #256	; 0x100
 80080c2:	f003 fe2b 	bl	800bd1c <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(rtc);
 80080c6:	4b09      	ldr	r3, [pc, #36]	; (80080ec <MRT_WUProcedure+0x6c>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f005 fa24 	bl	800d518 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_ClearFlags();
 80080d0:	f000 f80e 	bl	80080f0 <MRT_ClearFlags>
}
 80080d4:	bf00      	nop
 80080d6:	3708      	adds	r7, #8
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	40007000 	.word	0x40007000
 80080e0:	20000711 	.word	0x20000711
 80080e4:	08022b98 	.word	0x08022b98
 80080e8:	20006dfc 	.word	0x20006dfc
 80080ec:	20006e44 	.word	0x20006e44

080080f0 <MRT_ClearFlags>:


void MRT_ClearFlags(void){
 80080f0:	b580      	push	{r7, lr}
 80080f2:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	HAL_UART_Transmit(&(rtos.huart),"Clearing the flags\r\n", 20, HAL_MAX_DELAY);
 80080f4:	f04f 33ff 	mov.w	r3, #4294967295
 80080f8:	2214      	movs	r2, #20
 80080fa:	4939      	ldr	r1, [pc, #228]	; (80081e0 <MRT_ClearFlags+0xf0>)
 80080fc:	4839      	ldr	r0, [pc, #228]	; (80081e4 <MRT_ClearFlags+0xf4>)
 80080fe:	f006 fe4e 	bl	800ed9e <HAL_UART_Transmit>
	  	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(rtc);
 8008102:	4b39      	ldr	r3, [pc, #228]	; (80081e8 <MRT_ClearFlags+0xf8>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	22ca      	movs	r2, #202	; 0xca
 800810a:	625a      	str	r2, [r3, #36]	; 0x24
 800810c:	4b36      	ldr	r3, [pc, #216]	; (80081e8 <MRT_ClearFlags+0xf8>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2253      	movs	r2, #83	; 0x53
 8008114:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRAF) != RESET){
 8008116:	e011      	b.n	800813c <MRT_ClearFlags+0x4c>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm A flag\r\n", 23, HAL_MAX_DELAY);
 8008118:	f04f 33ff 	mov.w	r3, #4294967295
 800811c:	2217      	movs	r2, #23
 800811e:	4933      	ldr	r1, [pc, #204]	; (80081ec <MRT_ClearFlags+0xfc>)
 8008120:	4830      	ldr	r0, [pc, #192]	; (80081e4 <MRT_ClearFlags+0xf4>)
 8008122:	f006 fe3c 	bl	800ed9e <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(rtc, RTC_FLAG_ALRAF);
 8008126:	4b30      	ldr	r3, [pc, #192]	; (80081e8 <MRT_ClearFlags+0xf8>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	b2da      	uxtb	r2, r3
 8008130:	4b2d      	ldr	r3, [pc, #180]	; (80081e8 <MRT_ClearFlags+0xf8>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800813a:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRAF) != RESET){
 800813c:	4b2a      	ldr	r3, [pc, #168]	; (80081e8 <MRT_ClearFlags+0xf8>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1e5      	bne.n	8008118 <MRT_ClearFlags+0x28>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(rtc);
 800814c:	4b26      	ldr	r3, [pc, #152]	; (80081e8 <MRT_ClearFlags+0xf8>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	22ff      	movs	r2, #255	; 0xff
 8008154:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8008156:	4b26      	ldr	r3, [pc, #152]	; (80081f0 <MRT_ClearFlags+0x100>)
 8008158:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800815c:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(rtc);
 800815e:	4b22      	ldr	r3, [pc, #136]	; (80081e8 <MRT_ClearFlags+0xf8>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	22ca      	movs	r2, #202	; 0xca
 8008166:	625a      	str	r2, [r3, #36]	; 0x24
 8008168:	4b1f      	ldr	r3, [pc, #124]	; (80081e8 <MRT_ClearFlags+0xf8>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2253      	movs	r2, #83	; 0x53
 8008170:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRBF) != RESET){
 8008172:	e011      	b.n	8008198 <MRT_ClearFlags+0xa8>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm B flag\r\n", 23, HAL_MAX_DELAY);
 8008174:	f04f 33ff 	mov.w	r3, #4294967295
 8008178:	2217      	movs	r2, #23
 800817a:	491e      	ldr	r1, [pc, #120]	; (80081f4 <MRT_ClearFlags+0x104>)
 800817c:	4819      	ldr	r0, [pc, #100]	; (80081e4 <MRT_ClearFlags+0xf4>)
 800817e:	f006 fe0e 	bl	800ed9e <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(rtc, RTC_FLAG_ALRBF);
 8008182:	4b19      	ldr	r3, [pc, #100]	; (80081e8 <MRT_ClearFlags+0xf8>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	b2da      	uxtb	r2, r3
 800818c:	4b16      	ldr	r3, [pc, #88]	; (80081e8 <MRT_ClearFlags+0xf8>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008196:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRBF) != RESET){
 8008198:	4b13      	ldr	r3, [pc, #76]	; (80081e8 <MRT_ClearFlags+0xf8>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1e5      	bne.n	8008174 <MRT_ClearFlags+0x84>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(rtc);
 80081a8:	4b0f      	ldr	r3, [pc, #60]	; (80081e8 <MRT_ClearFlags+0xf8>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	22ff      	movs	r2, #255	; 0xff
 80081b0:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80081b2:	4b0f      	ldr	r3, [pc, #60]	; (80081f0 <MRT_ClearFlags+0x100>)
 80081b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80081b8:	615a      	str	r2, [r3, #20]


	/* Clear the WU FLAG */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing WU flag\r\n", 18, HAL_MAX_DELAY);
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80081ba:	4b0f      	ldr	r3, [pc, #60]	; (80081f8 <MRT_ClearFlags+0x108>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a0e      	ldr	r2, [pc, #56]	; (80081f8 <MRT_ClearFlags+0x108>)
 80081c0:	f043 0304 	orr.w	r3, r3, #4
 80081c4:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing RTC WU flag\r\n", 22, HAL_MAX_DELAY);
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(rtc, RTC_FLAG_WUTF);
 80081c6:	4b08      	ldr	r3, [pc, #32]	; (80081e8 <MRT_ClearFlags+0xf8>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	b2da      	uxtb	r2, r3
 80081d0:	4b05      	ldr	r3, [pc, #20]	; (80081e8 <MRT_ClearFlags+0xf8>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80081da:	60da      	str	r2, [r3, #12]
}
 80081dc:	bf00      	nop
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	08022bb8 	.word	0x08022bb8
 80081e4:	20006dfc 	.word	0x20006dfc
 80081e8:	20006e44 	.word	0x20006e44
 80081ec:	08022bd0 	.word	0x08022bd0
 80081f0:	40013c00 	.word	0x40013c00
 80081f4:	08022be8 	.word	0x08022be8
 80081f8:	40007000 	.word	0x40007000

080081fc <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode( uint32_t seconds){
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b0a4      	sub	sp, #144	; 0x90
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),"\r\nStandByMode\r\n", 15, HAL_MAX_DELAY);
 8008204:	f04f 33ff 	mov.w	r3, #4294967295
 8008208:	220f      	movs	r2, #15
 800820a:	491c      	ldr	r1, [pc, #112]	; (800827c <MRT_StandByMode+0x80>)
 800820c:	481c      	ldr	r0, [pc, #112]	; (8008280 <MRT_StandByMode+0x84>)
 800820e:	f006 fdc6 	bl	800ed9e <HAL_UART_Transmit>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8008212:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008216:	f003 fd6f 	bl	800bcf8 <HAL_PWR_EnableWakeUpPin>

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_ClearFlags();
 800821a:	f7ff ff69 	bl	80080f0 <MRT_ClearFlags>

	//Setup RTC wake up timer
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTCW\r\n", 17, HAL_MAX_DELAY);
 800821e:	f04f 33ff 	mov.w	r3, #4294967295
 8008222:	2211      	movs	r2, #17
 8008224:	4917      	ldr	r1, [pc, #92]	; (8008284 <MRT_StandByMode+0x88>)
 8008226:	4816      	ldr	r0, [pc, #88]	; (8008280 <MRT_StandByMode+0x84>)
 8008228:	f006 fdb9 	bl	800ed9e <HAL_UART_Transmit>
	  Error_Handler();
	}
	*/

	char* msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds\r\n",seconds);
 800822c:	f107 0308 	add.w	r3, r7, #8
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	4915      	ldr	r1, [pc, #84]	; (8008288 <MRT_StandByMode+0x8c>)
 8008234:	4618      	mov	r0, r3
 8008236:	f014 fc5b 	bl	801caf0 <siprintf>
	HAL_UART_Transmit(&(rtos.huart), msg,strlen(msg),HAL_MAX_DELAY);
 800823a:	f107 0308 	add.w	r3, r7, #8
 800823e:	4618      	mov	r0, r3
 8008240:	f7f7 ffe0 	bl	8000204 <strlen>
 8008244:	4603      	mov	r3, r0
 8008246:	b29a      	uxth	r2, r3
 8008248:	f107 0108 	add.w	r1, r7, #8
 800824c:	f04f 33ff 	mov.w	r3, #4294967295
 8008250:	480b      	ldr	r0, [pc, #44]	; (8008280 <MRT_StandByMode+0x84>)
 8008252:	f006 fda4 	bl	800ed9e <HAL_UART_Transmit>

	if (HAL_RTCEx_SetWakeUpTimer_IT(rtc,seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8008256:	4b0d      	ldr	r3, [pc, #52]	; (800828c <MRT_StandByMode+0x90>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2204      	movs	r2, #4
 800825c:	6879      	ldr	r1, [r7, #4]
 800825e:	4618      	mov	r0, r3
 8008260:	f005 f89a 	bl	800d398 <HAL_RTCEx_SetWakeUpTimer_IT>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d001      	beq.n	800826e <MRT_StandByMode+0x72>
	{
	  Error_Handler();
 800826a:	f7fa fcbd 	bl	8002be8 <Error_Handler>
	}

	HAL_PWR_EnterSTANDBYMode();
 800826e:	f003 fd69 	bl	800bd44 <HAL_PWR_EnterSTANDBYMode>
}
 8008272:	bf00      	nop
 8008274:	3790      	adds	r7, #144	; 0x90
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	08022c00 	.word	0x08022c00
 8008280:	20006dfc 	.word	0x20006dfc
 8008284:	08022c10 	.word	0x08022c10
 8008288:	08022c24 	.word	0x08022c24
 800828c:	20006e44 	.word	0x20006e44

08008290 <MRT_setAlarmA>:


void MRT_setAlarmA(uint8_t h, uint8_t m, uint8_t s){
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	4603      	mov	r3, r0
 8008298:	71fb      	strb	r3, [r7, #7]
 800829a:	460b      	mov	r3, r1
 800829c:	71bb      	strb	r3, [r7, #6]
 800829e:	4613      	mov	r3, r2
 80082a0:	717b      	strb	r3, [r7, #5]
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = int_to_hex_table[h];
 80082a2:	79fb      	ldrb	r3, [r7, #7]
 80082a4:	4a1b      	ldr	r2, [pc, #108]	; (8008314 <MRT_setAlarmA+0x84>)
 80082a6:	5cd2      	ldrb	r2, [r2, r3]
 80082a8:	4b1b      	ldr	r3, [pc, #108]	; (8008318 <MRT_setAlarmA+0x88>)
 80082aa:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = int_to_hex_table[m];
 80082ac:	79bb      	ldrb	r3, [r7, #6]
 80082ae:	4a19      	ldr	r2, [pc, #100]	; (8008314 <MRT_setAlarmA+0x84>)
 80082b0:	5cd2      	ldrb	r2, [r2, r3]
 80082b2:	4b19      	ldr	r3, [pc, #100]	; (8008318 <MRT_setAlarmA+0x88>)
 80082b4:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = int_to_hex_table[s];
 80082b6:	797b      	ldrb	r3, [r7, #5]
 80082b8:	4a16      	ldr	r2, [pc, #88]	; (8008314 <MRT_setAlarmA+0x84>)
 80082ba:	5cd2      	ldrb	r2, [r2, r3]
 80082bc:	4b16      	ldr	r3, [pc, #88]	; (8008318 <MRT_setAlarmA+0x88>)
 80082be:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 80082c0:	4b15      	ldr	r3, [pc, #84]	; (8008318 <MRT_setAlarmA+0x88>)
 80082c2:	2200      	movs	r2, #0
 80082c4:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80082c6:	4b14      	ldr	r3, [pc, #80]	; (8008318 <MRT_setAlarmA+0x88>)
 80082c8:	2200      	movs	r2, #0
 80082ca:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80082cc:	4b12      	ldr	r3, [pc, #72]	; (8008318 <MRT_setAlarmA+0x88>)
 80082ce:	2200      	movs	r2, #0
 80082d0:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80082d2:	4b11      	ldr	r3, [pc, #68]	; (8008318 <MRT_setAlarmA+0x88>)
 80082d4:	2200      	movs	r2, #0
 80082d6:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80082d8:	4b0f      	ldr	r3, [pc, #60]	; (8008318 <MRT_setAlarmA+0x88>)
 80082da:	2200      	movs	r2, #0
 80082dc:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80082de:	4b0e      	ldr	r3, [pc, #56]	; (8008318 <MRT_setAlarmA+0x88>)
 80082e0:	2200      	movs	r2, #0
 80082e2:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 80082e4:	4b0c      	ldr	r3, [pc, #48]	; (8008318 <MRT_setAlarmA+0x88>)
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 80082ec:	4b0a      	ldr	r3, [pc, #40]	; (8008318 <MRT_setAlarmA+0x88>)
 80082ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082f2:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(rtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80082f4:	4b09      	ldr	r3, [pc, #36]	; (800831c <MRT_setAlarmA+0x8c>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2201      	movs	r2, #1
 80082fa:	4907      	ldr	r1, [pc, #28]	; (8008318 <MRT_setAlarmA+0x88>)
 80082fc:	4618      	mov	r0, r3
 80082fe:	f004 fe3d 	bl	800cf7c <HAL_RTC_SetAlarm_IT>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d001      	beq.n	800830c <MRT_setAlarmA+0x7c>
	  {
	    Error_Handler();
 8008308:	f7fa fc6e 	bl	8002be8 <Error_Handler>
	  }
}
 800830c:	bf00      	nop
 800830e:	3708      	adds	r7, #8
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}
 8008314:	20000020 	.word	0x20000020
 8008318:	200006e8 	.word	0x200006e8
 800831c:	20006e44 	.word	0x20006e44

08008320 <MRT_setRTC>:


void MRT_setRTC(uint8_t h, uint8_t m, uint8_t s){
 8008320:	b580      	push	{r7, lr}
 8008322:	b088      	sub	sp, #32
 8008324:	af00      	add	r7, sp, #0
 8008326:	4603      	mov	r3, r0
 8008328:	71fb      	strb	r3, [r7, #7]
 800832a:	460b      	mov	r3, r1
 800832c:	71bb      	strb	r3, [r7, #6]
 800832e:	4613      	mov	r3, r2
 8008330:	717b      	strb	r3, [r7, #5]
	  /** Initialize RTC and set the Time and Date
	  */
	  RTC_TimeTypeDef sTime;

	  sTime.Hours = int_to_hex_table[h];
 8008332:	79fb      	ldrb	r3, [r7, #7]
 8008334:	4a1b      	ldr	r2, [pc, #108]	; (80083a4 <MRT_setRTC+0x84>)
 8008336:	5cd3      	ldrb	r3, [r2, r3]
 8008338:	733b      	strb	r3, [r7, #12]
	  sTime.Minutes = int_to_hex_table[m];
 800833a:	79bb      	ldrb	r3, [r7, #6]
 800833c:	4a19      	ldr	r2, [pc, #100]	; (80083a4 <MRT_setRTC+0x84>)
 800833e:	5cd3      	ldrb	r3, [r2, r3]
 8008340:	737b      	strb	r3, [r7, #13]
	  sTime.Seconds = int_to_hex_table[s];
 8008342:	797b      	ldrb	r3, [r7, #5]
 8008344:	4a17      	ldr	r2, [pc, #92]	; (80083a4 <MRT_setRTC+0x84>)
 8008346:	5cd3      	ldrb	r3, [r2, r3]
 8008348:	73bb      	strb	r3, [r7, #14]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800834a:	2300      	movs	r3, #0
 800834c:	61bb      	str	r3, [r7, #24]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800834e:	2300      	movs	r3, #0
 8008350:	61fb      	str	r3, [r7, #28]
	  if (HAL_RTC_SetTime(rtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8008352:	4b15      	ldr	r3, [pc, #84]	; (80083a8 <MRT_setRTC+0x88>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f107 010c 	add.w	r1, r7, #12
 800835a:	2201      	movs	r2, #1
 800835c:	4618      	mov	r0, r3
 800835e:	f004 fbfc 	bl	800cb5a <HAL_RTC_SetTime>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d001      	beq.n	800836c <MRT_setRTC+0x4c>
	  {
	    Error_Handler();
 8008368:	f7fa fc3e 	bl	8002be8 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800836c:	4b0f      	ldr	r3, [pc, #60]	; (80083ac <MRT_setRTC+0x8c>)
 800836e:	2201      	movs	r2, #1
 8008370:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 8008372:	4b0e      	ldr	r3, [pc, #56]	; (80083ac <MRT_setRTC+0x8c>)
 8008374:	2201      	movs	r2, #1
 8008376:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 8008378:	4b0c      	ldr	r3, [pc, #48]	; (80083ac <MRT_setRTC+0x8c>)
 800837a:	2201      	movs	r2, #1
 800837c:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 800837e:	4b0b      	ldr	r3, [pc, #44]	; (80083ac <MRT_setRTC+0x8c>)
 8008380:	2200      	movs	r2, #0
 8008382:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(rtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8008384:	4b08      	ldr	r3, [pc, #32]	; (80083a8 <MRT_setRTC+0x88>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	2201      	movs	r2, #1
 800838a:	4908      	ldr	r1, [pc, #32]	; (80083ac <MRT_setRTC+0x8c>)
 800838c:	4618      	mov	r0, r3
 800838e:	f004 fcff 	bl	800cd90 <HAL_RTC_SetDate>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d001      	beq.n	800839c <MRT_setRTC+0x7c>
	  {
	    Error_Handler();
 8008398:	f7fa fc26 	bl	8002be8 <Error_Handler>
	  }
}
 800839c:	bf00      	nop
 800839e:	3720      	adds	r7, #32
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	20000020 	.word	0x20000020
 80083a8:	20006e44 	.word	0x20006e44
 80083ac:	200006e4 	.word	0x200006e4

080083b0 <Max31855_Read_Temp>:
uint32_t sign=0;									  // Sign bit
uint8_t DATARX[4];                                    // Raw Data from MAX6675
//uint8_t DATATX = {0xFF, 0xFF, 0xFF, 0xFF};                                    // Raw Data from MAX6675

// ------------------- Functions ----------------
void Max31855_Read_Temp(void) {
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
	int Temp = 0;                                        // Temperature Variable
 80083b6:	2300      	movs	r3, #0
 80083b8:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); // Low State for SPI Communication
 80083ba:	2200      	movs	r2, #0
 80083bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80083c0:	483f      	ldr	r0, [pc, #252]	; (80084c0 <Max31855_Read_Temp+0x110>)
 80083c2:	f001 fa21 	bl	8009808 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, DATARX, 4, 1000);                // DATA Transfer
 80083c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80083ca:	2204      	movs	r2, #4
 80083cc:	493d      	ldr	r1, [pc, #244]	; (80084c4 <Max31855_Read_Temp+0x114>)
 80083ce:	483e      	ldr	r0, [pc, #248]	; (80084c8 <Max31855_Read_Temp+0x118>)
 80083d0:	f005 fac9 	bl	800d966 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET); // High State for SPI Communication
 80083d4:	2201      	movs	r2, #1
 80083d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80083da:	4839      	ldr	r0, [pc, #228]	; (80084c0 <Max31855_Read_Temp+0x110>)
 80083dc:	f001 fa14 	bl	8009808 <HAL_GPIO_WritePin>


	uint32_t v = DATARX[3] | (DATARX[2] << 8) | (DATARX[1] << 16) | (DATARX[0] << 24);
 80083e0:	4b38      	ldr	r3, [pc, #224]	; (80084c4 <Max31855_Read_Temp+0x114>)
 80083e2:	78db      	ldrb	r3, [r3, #3]
 80083e4:	461a      	mov	r2, r3
 80083e6:	4b37      	ldr	r3, [pc, #220]	; (80084c4 <Max31855_Read_Temp+0x114>)
 80083e8:	789b      	ldrb	r3, [r3, #2]
 80083ea:	021b      	lsls	r3, r3, #8
 80083ec:	431a      	orrs	r2, r3
 80083ee:	4b35      	ldr	r3, [pc, #212]	; (80084c4 <Max31855_Read_Temp+0x114>)
 80083f0:	785b      	ldrb	r3, [r3, #1]
 80083f2:	041b      	lsls	r3, r3, #16
 80083f4:	431a      	orrs	r2, r3
 80083f6:	4b33      	ldr	r3, [pc, #204]	; (80084c4 <Max31855_Read_Temp+0x114>)
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	061b      	lsls	r3, r3, #24
 80083fc:	4313      	orrs	r3, r2
 80083fe:	603b      	str	r3, [r7, #0]

	Error = v & 0x07;								  // Error Detection
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	b2db      	uxtb	r3, r3
 8008404:	f003 0307 	and.w	r3, r3, #7
 8008408:	b2da      	uxtb	r2, r3
 800840a:	4b30      	ldr	r3, [pc, #192]	; (80084cc <Max31855_Read_Temp+0x11c>)
 800840c:	701a      	strb	r2, [r3, #0]



		sign = (DATARX[0] & (0x80)) >> 7;					// Sign Bit calculation
 800840e:	4b2d      	ldr	r3, [pc, #180]	; (80084c4 <Max31855_Read_Temp+0x114>)
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	09db      	lsrs	r3, r3, #7
 8008414:	b2db      	uxtb	r3, r3
 8008416:	461a      	mov	r2, r3
 8008418:	4b2d      	ldr	r3, [pc, #180]	; (80084d0 <Max31855_Read_Temp+0x120>)
 800841a:	601a      	str	r2, [r3, #0]

		if (DATARX[3] & 0x07)								 // Returns Error Number
 800841c:	4b29      	ldr	r3, [pc, #164]	; (80084c4 <Max31855_Read_Temp+0x114>)
 800841e:	78db      	ldrb	r3, [r3, #3]
 8008420:	f003 0307 	and.w	r3, r3, #7
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00c      	beq.n	8008442 <Max31855_Read_Temp+0x92>
			THERMO_TEMP = (-1 * (DATARX[3] & 0x07));
 8008428:	4b26      	ldr	r3, [pc, #152]	; (80084c4 <Max31855_Read_Temp+0x114>)
 800842a:	78db      	ldrb	r3, [r3, #3]
 800842c:	f003 0307 	and.w	r3, r3, #7
 8008430:	425b      	negs	r3, r3
 8008432:	ee07 3a90 	vmov	s15, r3
 8008436:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800843a:	4b26      	ldr	r3, [pc, #152]	; (80084d4 <Max31855_Read_Temp+0x124>)
 800843c:	edc3 7a00 	vstr	s15, [r3]

	// LSB = 0.25 degrees C
	centigrade *= 0.25;
	return centigrade;
	*/
}
 8008440:	e039      	b.n	80084b6 <Max31855_Read_Temp+0x106>
		else if (sign == 1) {								// Negative Temperature
 8008442:	4b23      	ldr	r3, [pc, #140]	; (80084d0 <Max31855_Read_Temp+0x120>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	2b01      	cmp	r3, #1
 8008448:	d120      	bne.n	800848c <Max31855_Read_Temp+0xdc>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 800844a:	4b1e      	ldr	r3, [pc, #120]	; (80084c4 <Max31855_Read_Temp+0x114>)
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	019b      	lsls	r3, r3, #6
 8008450:	4a1c      	ldr	r2, [pc, #112]	; (80084c4 <Max31855_Read_Temp+0x114>)
 8008452:	7852      	ldrb	r2, [r2, #1]
 8008454:	0892      	lsrs	r2, r2, #2
 8008456:	b2d2      	uxtb	r2, r2
 8008458:	4313      	orrs	r3, r2
 800845a:	607b      	str	r3, [r7, #4]
			Temp &= 0b01111111111111;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008462:	607b      	str	r3, [r7, #4]
			Temp ^= 0b01111111111111;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f483 53ff 	eor.w	r3, r3, #8160	; 0x1fe0
 800846a:	f083 031f 	eor.w	r3, r3, #31
 800846e:	607b      	str	r3, [r7, #4]
			THERMO_TEMP = ((float) -Temp / 4);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	425b      	negs	r3, r3
 8008474:	ee07 3a90 	vmov	s15, r3
 8008478:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800847c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8008480:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008484:	4b13      	ldr	r3, [pc, #76]	; (80084d4 <Max31855_Read_Temp+0x124>)
 8008486:	edc3 7a00 	vstr	s15, [r3]
}
 800848a:	e014      	b.n	80084b6 <Max31855_Read_Temp+0x106>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 800848c:	4b0d      	ldr	r3, [pc, #52]	; (80084c4 <Max31855_Read_Temp+0x114>)
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	019b      	lsls	r3, r3, #6
 8008492:	4a0c      	ldr	r2, [pc, #48]	; (80084c4 <Max31855_Read_Temp+0x114>)
 8008494:	7852      	ldrb	r2, [r2, #1]
 8008496:	0892      	lsrs	r2, r2, #2
 8008498:	b2d2      	uxtb	r2, r2
 800849a:	4313      	orrs	r3, r2
 800849c:	607b      	str	r3, [r7, #4]
			THERMO_TEMP = ((float) Temp / 4.0);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	ee07 3a90 	vmov	s15, r3
 80084a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80084a8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80084ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80084b0:	4b08      	ldr	r3, [pc, #32]	; (80084d4 <Max31855_Read_Temp+0x124>)
 80084b2:	edc3 7a00 	vstr	s15, [r3]
}
 80084b6:	bf00      	nop
 80084b8:	3708      	adds	r7, #8
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	40021000 	.word	0x40021000
 80084c4:	20006e48 	.word	0x20006e48
 80084c8:	200068e0 	.word	0x200068e0
 80084cc:	20000712 	.word	0x20000712
 80084d0:	20000714 	.word	0x20000714
 80084d4:	20006a20 	.word	0x20006a20

080084d8 <myprintf>:


uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value);
void str2upper(char* string, char* upper);

void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 80084d8:	b40f      	push	{r0, r1, r2, r3}
 80084da:	b580      	push	{r7, lr}
 80084dc:	b082      	sub	sp, #8
 80084de:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80084e0:	f107 0314 	add.w	r3, r7, #20
 80084e4:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	693a      	ldr	r2, [r7, #16]
 80084ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80084ee:	480a      	ldr	r0, [pc, #40]	; (8008518 <myprintf+0x40>)
 80084f0:	f015 fd50 	bl	801df94 <vsniprintf>
  va_end(args);

  //CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
  HAL_UART_Transmit(&DEBUG_UART, (uint8_t*)buffer, strlen(buffer), -1);
 80084f4:	4808      	ldr	r0, [pc, #32]	; (8008518 <myprintf+0x40>)
 80084f6:	f7f7 fe85 	bl	8000204 <strlen>
 80084fa:	4603      	mov	r3, r0
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008502:	4905      	ldr	r1, [pc, #20]	; (8008518 <myprintf+0x40>)
 8008504:	4805      	ldr	r0, [pc, #20]	; (800851c <myprintf+0x44>)
 8008506:	f006 fc4a 	bl	800ed9e <HAL_UART_Transmit>

}
 800850a:	bf00      	nop
 800850c:	3708      	adds	r7, #8
 800850e:	46bd      	mov	sp, r7
 8008510:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008514:	b004      	add	sp, #16
 8008516:	4770      	bx	lr
 8008518:	20000718 	.word	0x20000718
 800851c:	20005ed8 	.word	0x20005ed8

08008520 <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b08a      	sub	sp, #40	; 0x28
 8008524:	af00      	add	r7, sp, #0
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 800852c:	2201      	movs	r2, #1
 800852e:	4932      	ldr	r1, [pc, #200]	; (80085f8 <sd_init_dynamic_filename+0xd8>)
 8008530:	4832      	ldr	r0, [pc, #200]	; (80085fc <sd_init_dynamic_filename+0xdc>)
 8008532:	f00c fb11 	bl	8014b58 <f_mount>
 8008536:	4603      	mov	r3, r0
 8008538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 800853c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008540:	2b00      	cmp	r3, #0
 8008542:	d008      	beq.n	8008556 <sd_init_dynamic_filename+0x36>
		myprintf("f_mount error (%i)\r\n", fres);
 8008544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008548:	4619      	mov	r1, r3
 800854a:	482d      	ldr	r0, [pc, #180]	; (8008600 <sd_init_dynamic_filename+0xe0>)
 800854c:	f7ff ffc4 	bl	80084d8 <myprintf>
		return fres;
 8008550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008554:	e04b      	b.n	80085ee <sd_init_dynamic_filename+0xce>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 8008556:	2300      	movs	r3, #0
 8008558:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 800855a:	f107 0320 	add.w	r3, r7, #32
 800855e:	461a      	mov	r2, r3
 8008560:	68f9      	ldr	r1, [r7, #12]
 8008562:	4825      	ldr	r0, [pc, #148]	; (80085f8 <sd_init_dynamic_filename+0xd8>)
 8008564:	f000 f89c 	bl	80086a0 <scan_files>
 8008568:	4603      	mov	r3, r0
 800856a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "fc%06lu.txt", max_used_value + 1);
 800856e:	6a3b      	ldr	r3, [r7, #32]
 8008570:	1c5a      	adds	r2, r3, #1
 8008572:	f107 0310 	add.w	r3, r7, #16
 8008576:	4923      	ldr	r1, [pc, #140]	; (8008604 <sd_init_dynamic_filename+0xe4>)
 8008578:	4618      	mov	r0, r3
 800857a:	f014 fab9 	bl	801caf0 <siprintf>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 800857e:	f107 0310 	add.w	r3, r7, #16
 8008582:	4619      	mov	r1, r3
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f014 fb44 	bl	801cc12 <strcpy>
 800858a:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 800858c:	f107 0310 	add.w	r3, r7, #16
 8008590:	221a      	movs	r2, #26
 8008592:	4619      	mov	r1, r3
 8008594:	481c      	ldr	r0, [pc, #112]	; (8008608 <sd_init_dynamic_filename+0xe8>)
 8008596:	f00c fb43 	bl	8014c20 <f_open>
 800859a:	4603      	mov	r3, r0
 800859c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 80085a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d11a      	bne.n	80085de <sd_init_dynamic_filename+0xbe>
		myprintf("I was able to open filename.txt for writing\r\n");
 80085a8:	4818      	ldr	r0, [pc, #96]	; (800860c <sd_init_dynamic_filename+0xec>)
 80085aa:	f7ff ff95 	bl	80084d8 <myprintf>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 80085ae:	4b16      	ldr	r3, [pc, #88]	; (8008608 <sd_init_dynamic_filename+0xe8>)
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	4619      	mov	r1, r3
 80085b4:	4814      	ldr	r0, [pc, #80]	; (8008608 <sd_init_dynamic_filename+0xe8>)
 80085b6:	f00c ff54 	bl	8015462 <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 80085ba:	4915      	ldr	r1, [pc, #84]	; (8008610 <sd_init_dynamic_filename+0xf0>)
 80085bc:	4815      	ldr	r0, [pc, #84]	; (8008614 <sd_init_dynamic_filename+0xf4>)
 80085be:	f014 fa97 	bl	801caf0 <siprintf>
	sd_write(&fil, msg_buffer);
 80085c2:	4914      	ldr	r1, [pc, #80]	; (8008614 <sd_init_dynamic_filename+0xf4>)
 80085c4:	4810      	ldr	r0, [pc, #64]	; (8008608 <sd_init_dynamic_filename+0xe8>)
 80085c6:	f000 f841 	bl	800864c <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 80085ca:	68b9      	ldr	r1, [r7, #8]
 80085cc:	480e      	ldr	r0, [pc, #56]	; (8008608 <sd_init_dynamic_filename+0xe8>)
 80085ce:	f000 f83d 	bl	800864c <sd_write>
	f_close(&fil);
 80085d2:	480d      	ldr	r0, [pc, #52]	; (8008608 <sd_init_dynamic_filename+0xe8>)
 80085d4:	f00c ff16 	bl	8015404 <f_close>

	return fres;
 80085d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085dc:	e007      	b.n	80085ee <sd_init_dynamic_filename+0xce>
		myprintf("f_open error (%i)\r\n", fres);
 80085de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085e2:	4619      	mov	r1, r3
 80085e4:	480c      	ldr	r0, [pc, #48]	; (8008618 <sd_init_dynamic_filename+0xf8>)
 80085e6:	f7ff ff77 	bl	80084d8 <myprintf>
		return fres;
 80085ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3728      	adds	r7, #40	; 0x28
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	08022c44 	.word	0x08022c44
 80085fc:	20006080 	.word	0x20006080
 8008600:	08022c48 	.word	0x08022c48
 8008604:	08022cc4 	.word	0x08022cc4
 8008608:	20006a90 	.word	0x20006a90
 800860c:	08022c60 	.word	0x08022c60
 8008610:	08022ca4 	.word	0x08022ca4
 8008614:	20006e4c 	.word	0x20006e4c
 8008618:	08022c90 	.word	0x08022c90

0800861c <sd_open_file>:

/*
 * always open in mode FA_WRITE | FA_OPEN_ALWAYS and then appends.
 */
FRESULT sd_open_file(char *filename)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
	// write start to SD card
	FRESULT fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS);
 8008624:	2212      	movs	r2, #18
 8008626:	6879      	ldr	r1, [r7, #4]
 8008628:	4807      	ldr	r0, [pc, #28]	; (8008648 <sd_open_file+0x2c>)
 800862a:	f00c faf9 	bl	8014c20 <f_open>
 800862e:	4603      	mov	r3, r0
 8008630:	73fb      	strb	r3, [r7, #15]

	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8008632:	4b05      	ldr	r3, [pc, #20]	; (8008648 <sd_open_file+0x2c>)
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	4619      	mov	r1, r3
 8008638:	4803      	ldr	r0, [pc, #12]	; (8008648 <sd_open_file+0x2c>)
 800863a:	f00c ff12 	bl	8015462 <f_lseek>

	return fres;
 800863e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008640:	4618      	mov	r0, r3
 8008642:	3710      	adds	r7, #16
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	20006a90 	.word	0x20006a90

0800864c <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 8008656:	6838      	ldr	r0, [r7, #0]
 8008658:	f7f7 fdd4 	bl	8000204 <strlen>
 800865c:	4602      	mov	r2, r0
 800865e:	f107 0308 	add.w	r3, r7, #8
 8008662:	6839      	ldr	r1, [r7, #0]
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f00c fca0 	bl	8014faa <f_write>
 800866a:	4603      	mov	r3, r0
 800866c:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 800866e:	7bfb      	ldrb	r3, [r7, #15]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d107      	bne.n	8008684 <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	4619      	mov	r1, r3
 8008678:	4807      	ldr	r0, [pc, #28]	; (8008698 <sd_write+0x4c>)
 800867a:	f7ff ff2d 	bl	80084d8 <myprintf>
		return bytesWrote;
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	b25b      	sxtb	r3, r3
 8008682:	e004      	b.n	800868e <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 8008684:	4805      	ldr	r0, [pc, #20]	; (800869c <sd_write+0x50>)
 8008686:	f7ff ff27 	bl	80084d8 <myprintf>
		return -1;
 800868a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	08022cd0 	.word	0x08022cd0
 800869c:	08022cf4 	.word	0x08022cf4

080086a0 <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 80086a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086a2:	b099      	sub	sp, #100	; 0x64
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	607a      	str	r2, [r7, #4]
 80086ac:	466b      	mov	r3, sp
 80086ae:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 80086b0:	68b8      	ldr	r0, [r7, #8]
 80086b2:	f7f7 fda7 	bl	8000204 <strlen>
 80086b6:	4603      	mov	r3, r0
 80086b8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 80086bc:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 80086c0:	4623      	mov	r3, r4
 80086c2:	3b01      	subs	r3, #1
 80086c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80086c6:	b2e0      	uxtb	r0, r4
 80086c8:	f04f 0100 	mov.w	r1, #0
 80086cc:	f04f 0200 	mov.w	r2, #0
 80086d0:	f04f 0300 	mov.w	r3, #0
 80086d4:	00cb      	lsls	r3, r1, #3
 80086d6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80086da:	00c2      	lsls	r2, r0, #3
 80086dc:	b2e0      	uxtb	r0, r4
 80086de:	f04f 0100 	mov.w	r1, #0
 80086e2:	f04f 0200 	mov.w	r2, #0
 80086e6:	f04f 0300 	mov.w	r3, #0
 80086ea:	00cb      	lsls	r3, r1, #3
 80086ec:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80086f0:	00c2      	lsls	r2, r0, #3
 80086f2:	4623      	mov	r3, r4
 80086f4:	3307      	adds	r3, #7
 80086f6:	08db      	lsrs	r3, r3, #3
 80086f8:	00db      	lsls	r3, r3, #3
 80086fa:	ebad 0d03 	sub.w	sp, sp, r3
 80086fe:	466b      	mov	r3, sp
 8008700:	3300      	adds	r3, #0
 8008702:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 8008704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008706:	4619      	mov	r1, r3
 8008708:	68b8      	ldr	r0, [r7, #8]
 800870a:	f000 f8ff 	bl	800890c <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 8008714:	2300      	movs	r3, #0
 8008716:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 8008718:	f107 0318 	add.w	r3, r7, #24
 800871c:	68f9      	ldr	r1, [r7, #12]
 800871e:	4618      	mov	r0, r3
 8008720:	f00d f8f2 	bl	8015908 <f_opendir>
 8008724:	4603      	mov	r3, r0
 8008726:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 800872a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800872e:	2b00      	cmp	r3, #0
 8008730:	d16c      	bne.n	800880c <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8008732:	f107 0318 	add.w	r3, r7, #24
 8008736:	4939      	ldr	r1, [pc, #228]	; (800881c <scan_files+0x17c>)
 8008738:	4618      	mov	r0, r3
 800873a:	f00d f989 	bl	8015a50 <f_readdir>
 800873e:	4603      	mov	r3, r0
 8008740:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8008744:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008748:	2b00      	cmp	r3, #0
 800874a:	d15a      	bne.n	8008802 <scan_files+0x162>
 800874c:	4b33      	ldr	r3, [pc, #204]	; (800881c <scan_files+0x17c>)
 800874e:	7a5b      	ldrb	r3, [r3, #9]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d056      	beq.n	8008802 <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8008754:	4b31      	ldr	r3, [pc, #196]	; (800881c <scan_files+0x17c>)
 8008756:	7a1b      	ldrb	r3, [r3, #8]
 8008758:	f003 0310 	and.w	r3, r3, #16
 800875c:	2b00      	cmp	r3, #0
 800875e:	d14e      	bne.n	80087fe <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 8008760:	466b      	mov	r3, sp
 8008762:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 8008764:	482e      	ldr	r0, [pc, #184]	; (8008820 <scan_files+0x180>)
 8008766:	f7f7 fd4d 	bl	8000204 <strlen>
 800876a:	4604      	mov	r4, r0
 800876c:	4623      	mov	r3, r4
 800876e:	3b01      	subs	r3, #1
 8008770:	653b      	str	r3, [r7, #80]	; 0x50
 8008772:	4620      	mov	r0, r4
 8008774:	f04f 0100 	mov.w	r1, #0
 8008778:	f04f 0200 	mov.w	r2, #0
 800877c:	f04f 0300 	mov.w	r3, #0
 8008780:	00cb      	lsls	r3, r1, #3
 8008782:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8008786:	00c2      	lsls	r2, r0, #3
 8008788:	4620      	mov	r0, r4
 800878a:	f04f 0100 	mov.w	r1, #0
 800878e:	f04f 0200 	mov.w	r2, #0
 8008792:	f04f 0300 	mov.w	r3, #0
 8008796:	00cb      	lsls	r3, r1, #3
 8008798:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800879c:	00c2      	lsls	r2, r0, #3
 800879e:	1de3      	adds	r3, r4, #7
 80087a0:	08db      	lsrs	r3, r3, #3
 80087a2:	00db      	lsls	r3, r3, #3
 80087a4:	ebad 0d03 	sub.w	sp, sp, r3
 80087a8:	466b      	mov	r3, sp
 80087aa:	3300      	adds	r3, #0
 80087ac:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 80087ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087b0:	4619      	mov	r1, r3
 80087b2:	481b      	ldr	r0, [pc, #108]	; (8008820 <scan_files+0x180>)
 80087b4:	f000 f8aa 	bl	800890c <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 80087b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087ba:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80087be:	4619      	mov	r1, r3
 80087c0:	4817      	ldr	r0, [pc, #92]	; (8008820 <scan_files+0x180>)
 80087c2:	f014 fa2e 	bl	801cc22 <strncmp>
 80087c6:	4603      	mov	r3, r0
 80087c8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 80087cc:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d112      	bne.n	80087fa <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 80087d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087d6:	f107 0214 	add.w	r2, r7, #20
 80087da:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 80087de:	4618      	mov	r0, r3
 80087e0:	f000 f820 	bl	8008824 <extract_filename_suffix>
 80087e4:	4603      	mov	r3, r0
 80087e6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d202      	bcs.n	80087fa <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 80087f4:	697a      	ldr	r2, [r7, #20]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	601a      	str	r2, [r3, #0]
 80087fa:	46b5      	mov	sp, r6
 80087fc:	e799      	b.n	8008732 <scan_files+0x92>
            	continue; // don't enter directory
 80087fe:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8008800:	e797      	b.n	8008732 <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 8008802:	f107 0318 	add.w	r3, r7, #24
 8008806:	4618      	mov	r0, r3
 8008808:	f00d f8f7 	bl	80159fa <f_closedir>
    }

    return res;
 800880c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008810:	46ad      	mov	sp, r5
}
 8008812:	4618      	mov	r0, r3
 8008814:	3764      	adds	r7, #100	; 0x64
 8008816:	46bd      	mov	sp, r7
 8008818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800881a:	bf00      	nop
 800881c:	20000818 	.word	0x20000818
 8008820:	20000821 	.word	0x20000821

08008824 <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 8008824:	b5b0      	push	{r4, r5, r7, lr}
 8008826:	b088      	sub	sp, #32
 8008828:	af00      	add	r7, sp, #0
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	460b      	mov	r3, r1
 800882e:	607a      	str	r2, [r7, #4]
 8008830:	72fb      	strb	r3, [r7, #11]
 8008832:	466b      	mov	r3, sp
 8008834:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f7f7 fce4 	bl	8000204 <strlen>
 800883c:	4603      	mov	r3, r0
 800883e:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 8008840:	2308      	movs	r3, #8
 8008842:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 8008844:	7f7c      	ldrb	r4, [r7, #29]
 8008846:	4623      	mov	r3, r4
 8008848:	3b01      	subs	r3, #1
 800884a:	61bb      	str	r3, [r7, #24]
 800884c:	b2e0      	uxtb	r0, r4
 800884e:	f04f 0100 	mov.w	r1, #0
 8008852:	f04f 0200 	mov.w	r2, #0
 8008856:	f04f 0300 	mov.w	r3, #0
 800885a:	00cb      	lsls	r3, r1, #3
 800885c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8008860:	00c2      	lsls	r2, r0, #3
 8008862:	b2e0      	uxtb	r0, r4
 8008864:	f04f 0100 	mov.w	r1, #0
 8008868:	f04f 0200 	mov.w	r2, #0
 800886c:	f04f 0300 	mov.w	r3, #0
 8008870:	00cb      	lsls	r3, r1, #3
 8008872:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8008876:	00c2      	lsls	r2, r0, #3
 8008878:	4623      	mov	r3, r4
 800887a:	3307      	adds	r3, #7
 800887c:	08db      	lsrs	r3, r3, #3
 800887e:	00db      	lsls	r3, r3, #3
 8008880:	ebad 0d03 	sub.w	sp, sp, r3
 8008884:	466b      	mov	r3, sp
 8008886:	3300      	adds	r3, #0
 8008888:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 800888a:	2300      	movs	r3, #0
 800888c:	77fb      	strb	r3, [r7, #31]
 800888e:	e014      	b.n	80088ba <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 8008890:	7afb      	ldrb	r3, [r7, #11]
 8008892:	1e5a      	subs	r2, r3, #1
 8008894:	7ffb      	ldrb	r3, [r7, #31]
 8008896:	441a      	add	r2, r3
 8008898:	7fbb      	ldrb	r3, [r7, #30]
 800889a:	3b01      	subs	r3, #1
 800889c:	429a      	cmp	r2, r3
 800889e:	da11      	bge.n	80088c4 <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 80088a0:	7afa      	ldrb	r2, [r7, #11]
 80088a2:	7ffb      	ldrb	r3, [r7, #31]
 80088a4:	4413      	add	r3, r2
 80088a6:	461a      	mov	r2, r3
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	441a      	add	r2, r3
 80088ac:	7ffb      	ldrb	r3, [r7, #31]
 80088ae:	7811      	ldrb	r1, [r2, #0]
 80088b0:	697a      	ldr	r2, [r7, #20]
 80088b2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 80088b4:	7ffb      	ldrb	r3, [r7, #31]
 80088b6:	3301      	adds	r3, #1
 80088b8:	77fb      	strb	r3, [r7, #31]
 80088ba:	7ffa      	ldrb	r2, [r7, #31]
 80088bc:	7f7b      	ldrb	r3, [r7, #29]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d3e6      	bcc.n	8008890 <extract_filename_suffix+0x6c>
 80088c2:	e000      	b.n	80088c6 <extract_filename_suffix+0xa2>
		}
		else break;
 80088c4:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	f107 0110 	add.w	r1, r7, #16
 80088cc:	220a      	movs	r2, #10
 80088ce:	4618      	mov	r0, r3
 80088d0:	f015 f86c 	bl	801d9ac <strtol>
 80088d4:	4603      	mov	r3, r0
 80088d6:	461a      	mov	r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 80088dc:	697a      	ldr	r2, [r7, #20]
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d00a      	beq.n	80088fa <extract_filename_suffix+0xd6>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088ec:	d005      	beq.n	80088fa <extract_filename_suffix+0xd6>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d101      	bne.n	80088fe <extract_filename_suffix+0xda>
	{
		return 1;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e000      	b.n	8008900 <extract_filename_suffix+0xdc>
	}

	return 0;
 80088fe:	2300      	movs	r3, #0
 8008900:	46ad      	mov	sp, r5
}
 8008902:	4618      	mov	r0, r3
 8008904:	3720      	adds	r7, #32
 8008906:	46bd      	mov	sp, r7
 8008908:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800890c <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 800890c:	b590      	push	{r4, r7, lr}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8008916:	2300      	movs	r3, #0
 8008918:	73fb      	strb	r3, [r7, #15]
 800891a:	e019      	b.n	8008950 <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 800891c:	7bfb      	ldrb	r3, [r7, #15]
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	4413      	add	r3, r2
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	73bb      	strb	r3, [r7, #14]
 8008926:	7bbb      	ldrb	r3, [r7, #14]
 8008928:	3301      	adds	r3, #1
 800892a:	4a0f      	ldr	r2, [pc, #60]	; (8008968 <str2upper+0x5c>)
 800892c:	4413      	add	r3, r2
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	f003 0303 	and.w	r3, r3, #3
 8008934:	2b02      	cmp	r3, #2
 8008936:	d102      	bne.n	800893e <str2upper+0x32>
 8008938:	7bbb      	ldrb	r3, [r7, #14]
 800893a:	3b20      	subs	r3, #32
 800893c:	e000      	b.n	8008940 <str2upper+0x34>
 800893e:	7bbb      	ldrb	r3, [r7, #14]
 8008940:	7bfa      	ldrb	r2, [r7, #15]
 8008942:	6839      	ldr	r1, [r7, #0]
 8008944:	440a      	add	r2, r1
 8008946:	b2db      	uxtb	r3, r3
 8008948:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 800894a:	7bfb      	ldrb	r3, [r7, #15]
 800894c:	3301      	adds	r3, #1
 800894e:	73fb      	strb	r3, [r7, #15]
 8008950:	7bfc      	ldrb	r4, [r7, #15]
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f7f7 fc56 	bl	8000204 <strlen>
 8008958:	4603      	mov	r3, r0
 800895a:	429c      	cmp	r4, r3
 800895c:	d3de      	bcc.n	800891c <str2upper+0x10>
	}
}
 800895e:	bf00      	nop
 8008960:	bf00      	nop
 8008962:	3714      	adds	r7, #20
 8008964:	46bd      	mov	sp, r7
 8008966:	bd90      	pop	{r4, r7, pc}
 8008968:	08022fc8 	.word	0x08022fc8

0800896c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008970:	4b0e      	ldr	r3, [pc, #56]	; (80089ac <HAL_Init+0x40>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a0d      	ldr	r2, [pc, #52]	; (80089ac <HAL_Init+0x40>)
 8008976:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800897a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800897c:	4b0b      	ldr	r3, [pc, #44]	; (80089ac <HAL_Init+0x40>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a0a      	ldr	r2, [pc, #40]	; (80089ac <HAL_Init+0x40>)
 8008982:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008986:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008988:	4b08      	ldr	r3, [pc, #32]	; (80089ac <HAL_Init+0x40>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a07      	ldr	r2, [pc, #28]	; (80089ac <HAL_Init+0x40>)
 800898e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008992:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008994:	2003      	movs	r0, #3
 8008996:	f000 fd30 	bl	80093fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800899a:	2000      	movs	r0, #0
 800899c:	f7fa fc66 	bl	800326c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80089a0:	f7fa f92a 	bl	8002bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	40023c00 	.word	0x40023c00

080089b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80089b0:	b480      	push	{r7}
 80089b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80089b4:	4b06      	ldr	r3, [pc, #24]	; (80089d0 <HAL_IncTick+0x20>)
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	461a      	mov	r2, r3
 80089ba:	4b06      	ldr	r3, [pc, #24]	; (80089d4 <HAL_IncTick+0x24>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4413      	add	r3, r2
 80089c0:	4a04      	ldr	r2, [pc, #16]	; (80089d4 <HAL_IncTick+0x24>)
 80089c2:	6013      	str	r3, [r2, #0]
}
 80089c4:	bf00      	nop
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	20000060 	.word	0x20000060
 80089d4:	20007234 	.word	0x20007234

080089d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80089d8:	b480      	push	{r7}
 80089da:	af00      	add	r7, sp, #0
  return uwTick;
 80089dc:	4b03      	ldr	r3, [pc, #12]	; (80089ec <HAL_GetTick+0x14>)
 80089de:	681b      	ldr	r3, [r3, #0]
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	20007234 	.word	0x20007234

080089f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80089f8:	f7ff ffee 	bl	80089d8 <HAL_GetTick>
 80089fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a08:	d005      	beq.n	8008a16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008a0a:	4b0a      	ldr	r3, [pc, #40]	; (8008a34 <HAL_Delay+0x44>)
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	461a      	mov	r2, r3
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	4413      	add	r3, r2
 8008a14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008a16:	bf00      	nop
 8008a18:	f7ff ffde 	bl	80089d8 <HAL_GetTick>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d8f7      	bhi.n	8008a18 <HAL_Delay+0x28>
  {
  }
}
 8008a28:	bf00      	nop
 8008a2a:	bf00      	nop
 8008a2c:	3710      	adds	r7, #16
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	20000060 	.word	0x20000060

08008a38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008a40:	2300      	movs	r3, #0
 8008a42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d101      	bne.n	8008a4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e033      	b.n	8008ab6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d109      	bne.n	8008a6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f7fa f8fa 	bl	8002c50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6e:	f003 0310 	and.w	r3, r3, #16
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d118      	bne.n	8008aa8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008a7e:	f023 0302 	bic.w	r3, r3, #2
 8008a82:	f043 0202 	orr.w	r2, r3, #2
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 fae8 	bl	8009060 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9a:	f023 0303 	bic.w	r3, r3, #3
 8008a9e:	f043 0201 	orr.w	r2, r3, #1
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	641a      	str	r2, [r3, #64]	; 0x40
 8008aa6:	e001      	b.n	8008aac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
	...

08008ac0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d101      	bne.n	8008ada <HAL_ADC_Start+0x1a>
 8008ad6:	2302      	movs	r3, #2
 8008ad8:	e0b2      	b.n	8008c40 <HAL_ADC_Start+0x180>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2201      	movs	r2, #1
 8008ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	f003 0301 	and.w	r3, r3, #1
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d018      	beq.n	8008b22 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	689a      	ldr	r2, [r3, #8]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f042 0201 	orr.w	r2, r2, #1
 8008afe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008b00:	4b52      	ldr	r3, [pc, #328]	; (8008c4c <HAL_ADC_Start+0x18c>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a52      	ldr	r2, [pc, #328]	; (8008c50 <HAL_ADC_Start+0x190>)
 8008b06:	fba2 2303 	umull	r2, r3, r2, r3
 8008b0a:	0c9a      	lsrs	r2, r3, #18
 8008b0c:	4613      	mov	r3, r2
 8008b0e:	005b      	lsls	r3, r3, #1
 8008b10:	4413      	add	r3, r2
 8008b12:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8008b14:	e002      	b.n	8008b1c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1f9      	bne.n	8008b16 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	f003 0301 	and.w	r3, r3, #1
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d17a      	bne.n	8008c26 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b34:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008b38:	f023 0301 	bic.w	r3, r3, #1
 8008b3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d007      	beq.n	8008b62 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b56:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008b5a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b6e:	d106      	bne.n	8008b7e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b74:	f023 0206 	bic.w	r2, r3, #6
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	645a      	str	r2, [r3, #68]	; 0x44
 8008b7c:	e002      	b.n	8008b84 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008b8c:	4b31      	ldr	r3, [pc, #196]	; (8008c54 <HAL_ADC_Start+0x194>)
 8008b8e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8008b98:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	f003 031f 	and.w	r3, r3, #31
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d12a      	bne.n	8008bfc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a2b      	ldr	r2, [pc, #172]	; (8008c58 <HAL_ADC_Start+0x198>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d015      	beq.n	8008bdc <HAL_ADC_Start+0x11c>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a29      	ldr	r2, [pc, #164]	; (8008c5c <HAL_ADC_Start+0x19c>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d105      	bne.n	8008bc6 <HAL_ADC_Start+0x106>
 8008bba:	4b26      	ldr	r3, [pc, #152]	; (8008c54 <HAL_ADC_Start+0x194>)
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	f003 031f 	and.w	r3, r3, #31
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d00a      	beq.n	8008bdc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a25      	ldr	r2, [pc, #148]	; (8008c60 <HAL_ADC_Start+0x1a0>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d136      	bne.n	8008c3e <HAL_ADC_Start+0x17e>
 8008bd0:	4b20      	ldr	r3, [pc, #128]	; (8008c54 <HAL_ADC_Start+0x194>)
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	f003 0310 	and.w	r3, r3, #16
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d130      	bne.n	8008c3e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d129      	bne.n	8008c3e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	689a      	ldr	r2, [r3, #8]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008bf8:	609a      	str	r2, [r3, #8]
 8008bfa:	e020      	b.n	8008c3e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a15      	ldr	r2, [pc, #84]	; (8008c58 <HAL_ADC_Start+0x198>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d11b      	bne.n	8008c3e <HAL_ADC_Start+0x17e>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d114      	bne.n	8008c3e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	689a      	ldr	r2, [r3, #8]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008c22:	609a      	str	r2, [r3, #8]
 8008c24:	e00b      	b.n	8008c3e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c2a:	f043 0210 	orr.w	r2, r3, #16
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c36:	f043 0201 	orr.w	r2, r3, #1
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3714      	adds	r7, #20
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr
 8008c4c:	20000004 	.word	0x20000004
 8008c50:	431bde83 	.word	0x431bde83
 8008c54:	40012300 	.word	0x40012300
 8008c58:	40012000 	.word	0x40012000
 8008c5c:	40012100 	.word	0x40012100
 8008c60:	40012200 	.word	0x40012200

08008c64 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d101      	bne.n	8008c7a <HAL_ADC_Stop+0x16>
 8008c76:	2302      	movs	r3, #2
 8008c78:	e021      	b.n	8008cbe <HAL_ADC_Stop+0x5a>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	689a      	ldr	r2, [r3, #8]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f022 0201 	bic.w	r2, r2, #1
 8008c90:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	f003 0301 	and.w	r3, r3, #1
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d109      	bne.n	8008cb4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008ca8:	f023 0301 	bic.w	r3, r3, #1
 8008cac:	f043 0201 	orr.w	r2, r3, #1
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	370c      	adds	r7, #12
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr

08008cca <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b084      	sub	sp, #16
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ce6:	d113      	bne.n	8008d10 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8008cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cf6:	d10b      	bne.n	8008d10 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfc:	f043 0220 	orr.w	r2, r3, #32
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e063      	b.n	8008dd8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8008d10:	f7ff fe62 	bl	80089d8 <HAL_GetTick>
 8008d14:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8008d16:	e021      	b.n	8008d5c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d1e:	d01d      	beq.n	8008d5c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d007      	beq.n	8008d36 <HAL_ADC_PollForConversion+0x6c>
 8008d26:	f7ff fe57 	bl	80089d8 <HAL_GetTick>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	1ad3      	subs	r3, r2, r3
 8008d30:	683a      	ldr	r2, [r7, #0]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d212      	bcs.n	8008d5c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 0302 	and.w	r3, r3, #2
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d00b      	beq.n	8008d5c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d48:	f043 0204 	orr.w	r2, r3, #4
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8008d58:	2303      	movs	r3, #3
 8008d5a:	e03d      	b.n	8008dd8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f003 0302 	and.w	r3, r3, #2
 8008d66:	2b02      	cmp	r3, #2
 8008d68:	d1d6      	bne.n	8008d18 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f06f 0212 	mvn.w	r2, #18
 8008d72:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d78:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d123      	bne.n	8008dd6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d11f      	bne.n	8008dd6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d9c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d006      	beq.n	8008db2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d111      	bne.n	8008dd6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d105      	bne.n	8008dd6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dce:	f043 0201 	orr.w	r2, r3, #1
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3710      	adds	r7, #16
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8008de0:	b480      	push	{r7}
 8008de2:	b083      	sub	sp, #12
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	370c      	adds	r7, #12
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr
	...

08008dfc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008e06:	2300      	movs	r3, #0
 8008e08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d101      	bne.n	8008e18 <HAL_ADC_ConfigChannel+0x1c>
 8008e14:	2302      	movs	r3, #2
 8008e16:	e113      	b.n	8009040 <HAL_ADC_ConfigChannel+0x244>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2b09      	cmp	r3, #9
 8008e26:	d925      	bls.n	8008e74 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	68d9      	ldr	r1, [r3, #12]
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	461a      	mov	r2, r3
 8008e36:	4613      	mov	r3, r2
 8008e38:	005b      	lsls	r3, r3, #1
 8008e3a:	4413      	add	r3, r2
 8008e3c:	3b1e      	subs	r3, #30
 8008e3e:	2207      	movs	r2, #7
 8008e40:	fa02 f303 	lsl.w	r3, r2, r3
 8008e44:	43da      	mvns	r2, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	400a      	ands	r2, r1
 8008e4c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68d9      	ldr	r1, [r3, #12]
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	689a      	ldr	r2, [r3, #8]
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	4618      	mov	r0, r3
 8008e60:	4603      	mov	r3, r0
 8008e62:	005b      	lsls	r3, r3, #1
 8008e64:	4403      	add	r3, r0
 8008e66:	3b1e      	subs	r3, #30
 8008e68:	409a      	lsls	r2, r3
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	430a      	orrs	r2, r1
 8008e70:	60da      	str	r2, [r3, #12]
 8008e72:	e022      	b.n	8008eba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	6919      	ldr	r1, [r3, #16]
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	461a      	mov	r2, r3
 8008e82:	4613      	mov	r3, r2
 8008e84:	005b      	lsls	r3, r3, #1
 8008e86:	4413      	add	r3, r2
 8008e88:	2207      	movs	r2, #7
 8008e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e8e:	43da      	mvns	r2, r3
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	400a      	ands	r2, r1
 8008e96:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	6919      	ldr	r1, [r3, #16]
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	689a      	ldr	r2, [r3, #8]
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	4603      	mov	r3, r0
 8008eac:	005b      	lsls	r3, r3, #1
 8008eae:	4403      	add	r3, r0
 8008eb0:	409a      	lsls	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	430a      	orrs	r2, r1
 8008eb8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	2b06      	cmp	r3, #6
 8008ec0:	d824      	bhi.n	8008f0c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	685a      	ldr	r2, [r3, #4]
 8008ecc:	4613      	mov	r3, r2
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	4413      	add	r3, r2
 8008ed2:	3b05      	subs	r3, #5
 8008ed4:	221f      	movs	r2, #31
 8008ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eda:	43da      	mvns	r2, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	400a      	ands	r2, r1
 8008ee2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	685a      	ldr	r2, [r3, #4]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	4413      	add	r3, r2
 8008efc:	3b05      	subs	r3, #5
 8008efe:	fa00 f203 	lsl.w	r2, r0, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	430a      	orrs	r2, r1
 8008f08:	635a      	str	r2, [r3, #52]	; 0x34
 8008f0a:	e04c      	b.n	8008fa6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	2b0c      	cmp	r3, #12
 8008f12:	d824      	bhi.n	8008f5e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	685a      	ldr	r2, [r3, #4]
 8008f1e:	4613      	mov	r3, r2
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	4413      	add	r3, r2
 8008f24:	3b23      	subs	r3, #35	; 0x23
 8008f26:	221f      	movs	r2, #31
 8008f28:	fa02 f303 	lsl.w	r3, r2, r3
 8008f2c:	43da      	mvns	r2, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	400a      	ands	r2, r1
 8008f34:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	4618      	mov	r0, r3
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	685a      	ldr	r2, [r3, #4]
 8008f48:	4613      	mov	r3, r2
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	4413      	add	r3, r2
 8008f4e:	3b23      	subs	r3, #35	; 0x23
 8008f50:	fa00 f203 	lsl.w	r2, r0, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	430a      	orrs	r2, r1
 8008f5a:	631a      	str	r2, [r3, #48]	; 0x30
 8008f5c:	e023      	b.n	8008fa6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	685a      	ldr	r2, [r3, #4]
 8008f68:	4613      	mov	r3, r2
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	4413      	add	r3, r2
 8008f6e:	3b41      	subs	r3, #65	; 0x41
 8008f70:	221f      	movs	r2, #31
 8008f72:	fa02 f303 	lsl.w	r3, r2, r3
 8008f76:	43da      	mvns	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	400a      	ands	r2, r1
 8008f7e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	685a      	ldr	r2, [r3, #4]
 8008f92:	4613      	mov	r3, r2
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	4413      	add	r3, r2
 8008f98:	3b41      	subs	r3, #65	; 0x41
 8008f9a:	fa00 f203 	lsl.w	r2, r0, r3
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	430a      	orrs	r2, r1
 8008fa4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008fa6:	4b29      	ldr	r3, [pc, #164]	; (800904c <HAL_ADC_ConfigChannel+0x250>)
 8008fa8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a28      	ldr	r2, [pc, #160]	; (8009050 <HAL_ADC_ConfigChannel+0x254>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d10f      	bne.n	8008fd4 <HAL_ADC_ConfigChannel+0x1d8>
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2b12      	cmp	r3, #18
 8008fba:	d10b      	bne.n	8008fd4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a1d      	ldr	r2, [pc, #116]	; (8009050 <HAL_ADC_ConfigChannel+0x254>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d12b      	bne.n	8009036 <HAL_ADC_ConfigChannel+0x23a>
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a1c      	ldr	r2, [pc, #112]	; (8009054 <HAL_ADC_ConfigChannel+0x258>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d003      	beq.n	8008ff0 <HAL_ADC_ConfigChannel+0x1f4>
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2b11      	cmp	r3, #17
 8008fee:	d122      	bne.n	8009036 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a11      	ldr	r2, [pc, #68]	; (8009054 <HAL_ADC_ConfigChannel+0x258>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d111      	bne.n	8009036 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009012:	4b11      	ldr	r3, [pc, #68]	; (8009058 <HAL_ADC_ConfigChannel+0x25c>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a11      	ldr	r2, [pc, #68]	; (800905c <HAL_ADC_ConfigChannel+0x260>)
 8009018:	fba2 2303 	umull	r2, r3, r2, r3
 800901c:	0c9a      	lsrs	r2, r3, #18
 800901e:	4613      	mov	r3, r2
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	4413      	add	r3, r2
 8009024:	005b      	lsls	r3, r3, #1
 8009026:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009028:	e002      	b.n	8009030 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	3b01      	subs	r3, #1
 800902e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1f9      	bne.n	800902a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	3714      	adds	r7, #20
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr
 800904c:	40012300 	.word	0x40012300
 8009050:	40012000 	.word	0x40012000
 8009054:	10000012 	.word	0x10000012
 8009058:	20000004 	.word	0x20000004
 800905c:	431bde83 	.word	0x431bde83

08009060 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009060:	b480      	push	{r7}
 8009062:	b085      	sub	sp, #20
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009068:	4b79      	ldr	r3, [pc, #484]	; (8009250 <ADC_Init+0x1f0>)
 800906a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	685a      	ldr	r2, [r3, #4]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	431a      	orrs	r2, r3
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	685a      	ldr	r2, [r3, #4]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009094:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	6859      	ldr	r1, [r3, #4]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	021a      	lsls	r2, r3, #8
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	430a      	orrs	r2, r1
 80090a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	685a      	ldr	r2, [r3, #4]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80090b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	6859      	ldr	r1, [r3, #4]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	689a      	ldr	r2, [r3, #8]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	430a      	orrs	r2, r1
 80090ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	689a      	ldr	r2, [r3, #8]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80090da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	6899      	ldr	r1, [r3, #8]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	68da      	ldr	r2, [r3, #12]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	430a      	orrs	r2, r1
 80090ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f2:	4a58      	ldr	r2, [pc, #352]	; (8009254 <ADC_Init+0x1f4>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d022      	beq.n	800913e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	689a      	ldr	r2, [r3, #8]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009106:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	6899      	ldr	r1, [r3, #8]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	430a      	orrs	r2, r1
 8009118:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	689a      	ldr	r2, [r3, #8]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009128:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	6899      	ldr	r1, [r3, #8]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	430a      	orrs	r2, r1
 800913a:	609a      	str	r2, [r3, #8]
 800913c:	e00f      	b.n	800915e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	689a      	ldr	r2, [r3, #8]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800914c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	689a      	ldr	r2, [r3, #8]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800915c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	689a      	ldr	r2, [r3, #8]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f022 0202 	bic.w	r2, r2, #2
 800916c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	6899      	ldr	r1, [r3, #8]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	7e1b      	ldrb	r3, [r3, #24]
 8009178:	005a      	lsls	r2, r3, #1
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	430a      	orrs	r2, r1
 8009180:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d01b      	beq.n	80091c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	685a      	ldr	r2, [r3, #4]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800919a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	685a      	ldr	r2, [r3, #4]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80091aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	6859      	ldr	r1, [r3, #4]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b6:	3b01      	subs	r3, #1
 80091b8:	035a      	lsls	r2, r3, #13
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	430a      	orrs	r2, r1
 80091c0:	605a      	str	r2, [r3, #4]
 80091c2:	e007      	b.n	80091d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	685a      	ldr	r2, [r3, #4]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80091d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80091e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	69db      	ldr	r3, [r3, #28]
 80091ee:	3b01      	subs	r3, #1
 80091f0:	051a      	lsls	r2, r3, #20
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	430a      	orrs	r2, r1
 80091f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	689a      	ldr	r2, [r3, #8]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009208:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	6899      	ldr	r1, [r3, #8]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009216:	025a      	lsls	r2, r3, #9
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	430a      	orrs	r2, r1
 800921e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	689a      	ldr	r2, [r3, #8]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800922e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	6899      	ldr	r1, [r3, #8]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	695b      	ldr	r3, [r3, #20]
 800923a:	029a      	lsls	r2, r3, #10
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	430a      	orrs	r2, r1
 8009242:	609a      	str	r2, [r3, #8]
}
 8009244:	bf00      	nop
 8009246:	3714      	adds	r7, #20
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr
 8009250:	40012300 	.word	0x40012300
 8009254:	0f000001 	.word	0x0f000001

08009258 <__NVIC_SetPriorityGrouping>:
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f003 0307 	and.w	r3, r3, #7
 8009266:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009268:	4b0c      	ldr	r3, [pc, #48]	; (800929c <__NVIC_SetPriorityGrouping+0x44>)
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009274:	4013      	ands	r3, r2
 8009276:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009280:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800928a:	4a04      	ldr	r2, [pc, #16]	; (800929c <__NVIC_SetPriorityGrouping+0x44>)
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	60d3      	str	r3, [r2, #12]
}
 8009290:	bf00      	nop
 8009292:	3714      	adds	r7, #20
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr
 800929c:	e000ed00 	.word	0xe000ed00

080092a0 <__NVIC_GetPriorityGrouping>:
{
 80092a0:	b480      	push	{r7}
 80092a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80092a4:	4b04      	ldr	r3, [pc, #16]	; (80092b8 <__NVIC_GetPriorityGrouping+0x18>)
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	0a1b      	lsrs	r3, r3, #8
 80092aa:	f003 0307 	and.w	r3, r3, #7
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr
 80092b8:	e000ed00 	.word	0xe000ed00

080092bc <__NVIC_EnableIRQ>:
{
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	4603      	mov	r3, r0
 80092c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80092c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	db0b      	blt.n	80092e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80092ce:	79fb      	ldrb	r3, [r7, #7]
 80092d0:	f003 021f 	and.w	r2, r3, #31
 80092d4:	4907      	ldr	r1, [pc, #28]	; (80092f4 <__NVIC_EnableIRQ+0x38>)
 80092d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092da:	095b      	lsrs	r3, r3, #5
 80092dc:	2001      	movs	r0, #1
 80092de:	fa00 f202 	lsl.w	r2, r0, r2
 80092e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80092e6:	bf00      	nop
 80092e8:	370c      	adds	r7, #12
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop
 80092f4:	e000e100 	.word	0xe000e100

080092f8 <__NVIC_DisableIRQ>:
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	4603      	mov	r3, r0
 8009300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009306:	2b00      	cmp	r3, #0
 8009308:	db12      	blt.n	8009330 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800930a:	79fb      	ldrb	r3, [r7, #7]
 800930c:	f003 021f 	and.w	r2, r3, #31
 8009310:	490a      	ldr	r1, [pc, #40]	; (800933c <__NVIC_DisableIRQ+0x44>)
 8009312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009316:	095b      	lsrs	r3, r3, #5
 8009318:	2001      	movs	r0, #1
 800931a:	fa00 f202 	lsl.w	r2, r0, r2
 800931e:	3320      	adds	r3, #32
 8009320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8009324:	f3bf 8f4f 	dsb	sy
}
 8009328:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800932a:	f3bf 8f6f 	isb	sy
}
 800932e:	bf00      	nop
}
 8009330:	bf00      	nop
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr
 800933c:	e000e100 	.word	0xe000e100

08009340 <__NVIC_SetPriority>:
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	4603      	mov	r3, r0
 8009348:	6039      	str	r1, [r7, #0]
 800934a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800934c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009350:	2b00      	cmp	r3, #0
 8009352:	db0a      	blt.n	800936a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	b2da      	uxtb	r2, r3
 8009358:	490c      	ldr	r1, [pc, #48]	; (800938c <__NVIC_SetPriority+0x4c>)
 800935a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800935e:	0112      	lsls	r2, r2, #4
 8009360:	b2d2      	uxtb	r2, r2
 8009362:	440b      	add	r3, r1
 8009364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009368:	e00a      	b.n	8009380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	b2da      	uxtb	r2, r3
 800936e:	4908      	ldr	r1, [pc, #32]	; (8009390 <__NVIC_SetPriority+0x50>)
 8009370:	79fb      	ldrb	r3, [r7, #7]
 8009372:	f003 030f 	and.w	r3, r3, #15
 8009376:	3b04      	subs	r3, #4
 8009378:	0112      	lsls	r2, r2, #4
 800937a:	b2d2      	uxtb	r2, r2
 800937c:	440b      	add	r3, r1
 800937e:	761a      	strb	r2, [r3, #24]
}
 8009380:	bf00      	nop
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr
 800938c:	e000e100 	.word	0xe000e100
 8009390:	e000ed00 	.word	0xe000ed00

08009394 <NVIC_EncodePriority>:
{
 8009394:	b480      	push	{r7}
 8009396:	b089      	sub	sp, #36	; 0x24
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f003 0307 	and.w	r3, r3, #7
 80093a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80093a8:	69fb      	ldr	r3, [r7, #28]
 80093aa:	f1c3 0307 	rsb	r3, r3, #7
 80093ae:	2b04      	cmp	r3, #4
 80093b0:	bf28      	it	cs
 80093b2:	2304      	movcs	r3, #4
 80093b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	3304      	adds	r3, #4
 80093ba:	2b06      	cmp	r3, #6
 80093bc:	d902      	bls.n	80093c4 <NVIC_EncodePriority+0x30>
 80093be:	69fb      	ldr	r3, [r7, #28]
 80093c0:	3b03      	subs	r3, #3
 80093c2:	e000      	b.n	80093c6 <NVIC_EncodePriority+0x32>
 80093c4:	2300      	movs	r3, #0
 80093c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80093c8:	f04f 32ff 	mov.w	r2, #4294967295
 80093cc:	69bb      	ldr	r3, [r7, #24]
 80093ce:	fa02 f303 	lsl.w	r3, r2, r3
 80093d2:	43da      	mvns	r2, r3
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	401a      	ands	r2, r3
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80093dc:	f04f 31ff 	mov.w	r1, #4294967295
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	fa01 f303 	lsl.w	r3, r1, r3
 80093e6:	43d9      	mvns	r1, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80093ec:	4313      	orrs	r3, r2
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3724      	adds	r7, #36	; 0x24
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr

080093fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b082      	sub	sp, #8
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f7ff ff28 	bl	8009258 <__NVIC_SetPriorityGrouping>
}
 8009408:	bf00      	nop
 800940a:	3708      	adds	r7, #8
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009410:	b580      	push	{r7, lr}
 8009412:	b086      	sub	sp, #24
 8009414:	af00      	add	r7, sp, #0
 8009416:	4603      	mov	r3, r0
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	607a      	str	r2, [r7, #4]
 800941c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800941e:	2300      	movs	r3, #0
 8009420:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009422:	f7ff ff3d 	bl	80092a0 <__NVIC_GetPriorityGrouping>
 8009426:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	68b9      	ldr	r1, [r7, #8]
 800942c:	6978      	ldr	r0, [r7, #20]
 800942e:	f7ff ffb1 	bl	8009394 <NVIC_EncodePriority>
 8009432:	4602      	mov	r2, r0
 8009434:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009438:	4611      	mov	r1, r2
 800943a:	4618      	mov	r0, r3
 800943c:	f7ff ff80 	bl	8009340 <__NVIC_SetPriority>
}
 8009440:	bf00      	nop
 8009442:	3718      	adds	r7, #24
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	4603      	mov	r3, r0
 8009450:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009456:	4618      	mov	r0, r3
 8009458:	f7ff ff30 	bl	80092bc <__NVIC_EnableIRQ>
}
 800945c:	bf00      	nop
 800945e:	3708      	adds	r7, #8
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	4603      	mov	r3, r0
 800946c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800946e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009472:	4618      	mov	r0, r3
 8009474:	f7ff ff40 	bl	80092f8 <__NVIC_DisableIRQ>
}
 8009478:	bf00      	nop
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009480:	b480      	push	{r7}
 8009482:	b089      	sub	sp, #36	; 0x24
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800948a:	2300      	movs	r3, #0
 800948c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800948e:	2300      	movs	r3, #0
 8009490:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009492:	2300      	movs	r3, #0
 8009494:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009496:	2300      	movs	r3, #0
 8009498:	61fb      	str	r3, [r7, #28]
 800949a:	e177      	b.n	800978c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800949c:	2201      	movs	r2, #1
 800949e:	69fb      	ldr	r3, [r7, #28]
 80094a0:	fa02 f303 	lsl.w	r3, r2, r3
 80094a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	697a      	ldr	r2, [r7, #20]
 80094ac:	4013      	ands	r3, r2
 80094ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80094b0:	693a      	ldr	r2, [r7, #16]
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	f040 8166 	bne.w	8009786 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	f003 0303 	and.w	r3, r3, #3
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d005      	beq.n	80094d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80094ce:	2b02      	cmp	r3, #2
 80094d0:	d130      	bne.n	8009534 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	005b      	lsls	r3, r3, #1
 80094dc:	2203      	movs	r2, #3
 80094de:	fa02 f303 	lsl.w	r3, r2, r3
 80094e2:	43db      	mvns	r3, r3
 80094e4:	69ba      	ldr	r2, [r7, #24]
 80094e6:	4013      	ands	r3, r2
 80094e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	68da      	ldr	r2, [r3, #12]
 80094ee:	69fb      	ldr	r3, [r7, #28]
 80094f0:	005b      	lsls	r3, r3, #1
 80094f2:	fa02 f303 	lsl.w	r3, r2, r3
 80094f6:	69ba      	ldr	r2, [r7, #24]
 80094f8:	4313      	orrs	r3, r2
 80094fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	69ba      	ldr	r2, [r7, #24]
 8009500:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009508:	2201      	movs	r2, #1
 800950a:	69fb      	ldr	r3, [r7, #28]
 800950c:	fa02 f303 	lsl.w	r3, r2, r3
 8009510:	43db      	mvns	r3, r3
 8009512:	69ba      	ldr	r2, [r7, #24]
 8009514:	4013      	ands	r3, r2
 8009516:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	091b      	lsrs	r3, r3, #4
 800951e:	f003 0201 	and.w	r2, r3, #1
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	fa02 f303 	lsl.w	r3, r2, r3
 8009528:	69ba      	ldr	r2, [r7, #24]
 800952a:	4313      	orrs	r3, r2
 800952c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	69ba      	ldr	r2, [r7, #24]
 8009532:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	f003 0303 	and.w	r3, r3, #3
 800953c:	2b03      	cmp	r3, #3
 800953e:	d017      	beq.n	8009570 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009546:	69fb      	ldr	r3, [r7, #28]
 8009548:	005b      	lsls	r3, r3, #1
 800954a:	2203      	movs	r2, #3
 800954c:	fa02 f303 	lsl.w	r3, r2, r3
 8009550:	43db      	mvns	r3, r3
 8009552:	69ba      	ldr	r2, [r7, #24]
 8009554:	4013      	ands	r3, r2
 8009556:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	689a      	ldr	r2, [r3, #8]
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	005b      	lsls	r3, r3, #1
 8009560:	fa02 f303 	lsl.w	r3, r2, r3
 8009564:	69ba      	ldr	r2, [r7, #24]
 8009566:	4313      	orrs	r3, r2
 8009568:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	69ba      	ldr	r2, [r7, #24]
 800956e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	f003 0303 	and.w	r3, r3, #3
 8009578:	2b02      	cmp	r3, #2
 800957a:	d123      	bne.n	80095c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	08da      	lsrs	r2, r3, #3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	3208      	adds	r2, #8
 8009584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009588:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800958a:	69fb      	ldr	r3, [r7, #28]
 800958c:	f003 0307 	and.w	r3, r3, #7
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	220f      	movs	r2, #15
 8009594:	fa02 f303 	lsl.w	r3, r2, r3
 8009598:	43db      	mvns	r3, r3
 800959a:	69ba      	ldr	r2, [r7, #24]
 800959c:	4013      	ands	r3, r2
 800959e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	691a      	ldr	r2, [r3, #16]
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	f003 0307 	and.w	r3, r3, #7
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	fa02 f303 	lsl.w	r3, r2, r3
 80095b0:	69ba      	ldr	r2, [r7, #24]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	08da      	lsrs	r2, r3, #3
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	3208      	adds	r2, #8
 80095be:	69b9      	ldr	r1, [r7, #24]
 80095c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	005b      	lsls	r3, r3, #1
 80095ce:	2203      	movs	r2, #3
 80095d0:	fa02 f303 	lsl.w	r3, r2, r3
 80095d4:	43db      	mvns	r3, r3
 80095d6:	69ba      	ldr	r2, [r7, #24]
 80095d8:	4013      	ands	r3, r2
 80095da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	f003 0203 	and.w	r2, r3, #3
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	005b      	lsls	r3, r3, #1
 80095e8:	fa02 f303 	lsl.w	r3, r2, r3
 80095ec:	69ba      	ldr	r2, [r7, #24]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	69ba      	ldr	r2, [r7, #24]
 80095f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009600:	2b00      	cmp	r3, #0
 8009602:	f000 80c0 	beq.w	8009786 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009606:	2300      	movs	r3, #0
 8009608:	60fb      	str	r3, [r7, #12]
 800960a:	4b66      	ldr	r3, [pc, #408]	; (80097a4 <HAL_GPIO_Init+0x324>)
 800960c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800960e:	4a65      	ldr	r2, [pc, #404]	; (80097a4 <HAL_GPIO_Init+0x324>)
 8009610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009614:	6453      	str	r3, [r2, #68]	; 0x44
 8009616:	4b63      	ldr	r3, [pc, #396]	; (80097a4 <HAL_GPIO_Init+0x324>)
 8009618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800961a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800961e:	60fb      	str	r3, [r7, #12]
 8009620:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009622:	4a61      	ldr	r2, [pc, #388]	; (80097a8 <HAL_GPIO_Init+0x328>)
 8009624:	69fb      	ldr	r3, [r7, #28]
 8009626:	089b      	lsrs	r3, r3, #2
 8009628:	3302      	adds	r3, #2
 800962a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800962e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	f003 0303 	and.w	r3, r3, #3
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	220f      	movs	r2, #15
 800963a:	fa02 f303 	lsl.w	r3, r2, r3
 800963e:	43db      	mvns	r3, r3
 8009640:	69ba      	ldr	r2, [r7, #24]
 8009642:	4013      	ands	r3, r2
 8009644:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4a58      	ldr	r2, [pc, #352]	; (80097ac <HAL_GPIO_Init+0x32c>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d037      	beq.n	80096be <HAL_GPIO_Init+0x23e>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4a57      	ldr	r2, [pc, #348]	; (80097b0 <HAL_GPIO_Init+0x330>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d031      	beq.n	80096ba <HAL_GPIO_Init+0x23a>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	4a56      	ldr	r2, [pc, #344]	; (80097b4 <HAL_GPIO_Init+0x334>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d02b      	beq.n	80096b6 <HAL_GPIO_Init+0x236>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4a55      	ldr	r2, [pc, #340]	; (80097b8 <HAL_GPIO_Init+0x338>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d025      	beq.n	80096b2 <HAL_GPIO_Init+0x232>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a54      	ldr	r2, [pc, #336]	; (80097bc <HAL_GPIO_Init+0x33c>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d01f      	beq.n	80096ae <HAL_GPIO_Init+0x22e>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4a53      	ldr	r2, [pc, #332]	; (80097c0 <HAL_GPIO_Init+0x340>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d019      	beq.n	80096aa <HAL_GPIO_Init+0x22a>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4a52      	ldr	r2, [pc, #328]	; (80097c4 <HAL_GPIO_Init+0x344>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d013      	beq.n	80096a6 <HAL_GPIO_Init+0x226>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4a51      	ldr	r2, [pc, #324]	; (80097c8 <HAL_GPIO_Init+0x348>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d00d      	beq.n	80096a2 <HAL_GPIO_Init+0x222>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4a50      	ldr	r2, [pc, #320]	; (80097cc <HAL_GPIO_Init+0x34c>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d007      	beq.n	800969e <HAL_GPIO_Init+0x21e>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	4a4f      	ldr	r2, [pc, #316]	; (80097d0 <HAL_GPIO_Init+0x350>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d101      	bne.n	800969a <HAL_GPIO_Init+0x21a>
 8009696:	2309      	movs	r3, #9
 8009698:	e012      	b.n	80096c0 <HAL_GPIO_Init+0x240>
 800969a:	230a      	movs	r3, #10
 800969c:	e010      	b.n	80096c0 <HAL_GPIO_Init+0x240>
 800969e:	2308      	movs	r3, #8
 80096a0:	e00e      	b.n	80096c0 <HAL_GPIO_Init+0x240>
 80096a2:	2307      	movs	r3, #7
 80096a4:	e00c      	b.n	80096c0 <HAL_GPIO_Init+0x240>
 80096a6:	2306      	movs	r3, #6
 80096a8:	e00a      	b.n	80096c0 <HAL_GPIO_Init+0x240>
 80096aa:	2305      	movs	r3, #5
 80096ac:	e008      	b.n	80096c0 <HAL_GPIO_Init+0x240>
 80096ae:	2304      	movs	r3, #4
 80096b0:	e006      	b.n	80096c0 <HAL_GPIO_Init+0x240>
 80096b2:	2303      	movs	r3, #3
 80096b4:	e004      	b.n	80096c0 <HAL_GPIO_Init+0x240>
 80096b6:	2302      	movs	r3, #2
 80096b8:	e002      	b.n	80096c0 <HAL_GPIO_Init+0x240>
 80096ba:	2301      	movs	r3, #1
 80096bc:	e000      	b.n	80096c0 <HAL_GPIO_Init+0x240>
 80096be:	2300      	movs	r3, #0
 80096c0:	69fa      	ldr	r2, [r7, #28]
 80096c2:	f002 0203 	and.w	r2, r2, #3
 80096c6:	0092      	lsls	r2, r2, #2
 80096c8:	4093      	lsls	r3, r2
 80096ca:	69ba      	ldr	r2, [r7, #24]
 80096cc:	4313      	orrs	r3, r2
 80096ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80096d0:	4935      	ldr	r1, [pc, #212]	; (80097a8 <HAL_GPIO_Init+0x328>)
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	089b      	lsrs	r3, r3, #2
 80096d6:	3302      	adds	r3, #2
 80096d8:	69ba      	ldr	r2, [r7, #24]
 80096da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80096de:	4b3d      	ldr	r3, [pc, #244]	; (80097d4 <HAL_GPIO_Init+0x354>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	43db      	mvns	r3, r3
 80096e8:	69ba      	ldr	r2, [r7, #24]
 80096ea:	4013      	ands	r3, r2
 80096ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d003      	beq.n	8009702 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80096fa:	69ba      	ldr	r2, [r7, #24]
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	4313      	orrs	r3, r2
 8009700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009702:	4a34      	ldr	r2, [pc, #208]	; (80097d4 <HAL_GPIO_Init+0x354>)
 8009704:	69bb      	ldr	r3, [r7, #24]
 8009706:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009708:	4b32      	ldr	r3, [pc, #200]	; (80097d4 <HAL_GPIO_Init+0x354>)
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	43db      	mvns	r3, r3
 8009712:	69ba      	ldr	r2, [r7, #24]
 8009714:	4013      	ands	r3, r2
 8009716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009720:	2b00      	cmp	r3, #0
 8009722:	d003      	beq.n	800972c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009724:	69ba      	ldr	r2, [r7, #24]
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	4313      	orrs	r3, r2
 800972a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800972c:	4a29      	ldr	r2, [pc, #164]	; (80097d4 <HAL_GPIO_Init+0x354>)
 800972e:	69bb      	ldr	r3, [r7, #24]
 8009730:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009732:	4b28      	ldr	r3, [pc, #160]	; (80097d4 <HAL_GPIO_Init+0x354>)
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	43db      	mvns	r3, r3
 800973c:	69ba      	ldr	r2, [r7, #24]
 800973e:	4013      	ands	r3, r2
 8009740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800974a:	2b00      	cmp	r3, #0
 800974c:	d003      	beq.n	8009756 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800974e:	69ba      	ldr	r2, [r7, #24]
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	4313      	orrs	r3, r2
 8009754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009756:	4a1f      	ldr	r2, [pc, #124]	; (80097d4 <HAL_GPIO_Init+0x354>)
 8009758:	69bb      	ldr	r3, [r7, #24]
 800975a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800975c:	4b1d      	ldr	r3, [pc, #116]	; (80097d4 <HAL_GPIO_Init+0x354>)
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	43db      	mvns	r3, r3
 8009766:	69ba      	ldr	r2, [r7, #24]
 8009768:	4013      	ands	r3, r2
 800976a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009774:	2b00      	cmp	r3, #0
 8009776:	d003      	beq.n	8009780 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009778:	69ba      	ldr	r2, [r7, #24]
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	4313      	orrs	r3, r2
 800977e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009780:	4a14      	ldr	r2, [pc, #80]	; (80097d4 <HAL_GPIO_Init+0x354>)
 8009782:	69bb      	ldr	r3, [r7, #24]
 8009784:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	3301      	adds	r3, #1
 800978a:	61fb      	str	r3, [r7, #28]
 800978c:	69fb      	ldr	r3, [r7, #28]
 800978e:	2b0f      	cmp	r3, #15
 8009790:	f67f ae84 	bls.w	800949c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009794:	bf00      	nop
 8009796:	bf00      	nop
 8009798:	3724      	adds	r7, #36	; 0x24
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	40023800 	.word	0x40023800
 80097a8:	40013800 	.word	0x40013800
 80097ac:	40020000 	.word	0x40020000
 80097b0:	40020400 	.word	0x40020400
 80097b4:	40020800 	.word	0x40020800
 80097b8:	40020c00 	.word	0x40020c00
 80097bc:	40021000 	.word	0x40021000
 80097c0:	40021400 	.word	0x40021400
 80097c4:	40021800 	.word	0x40021800
 80097c8:	40021c00 	.word	0x40021c00
 80097cc:	40022000 	.word	0x40022000
 80097d0:	40022400 	.word	0x40022400
 80097d4:	40013c00 	.word	0x40013c00

080097d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80097d8:	b480      	push	{r7}
 80097da:	b085      	sub	sp, #20
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	460b      	mov	r3, r1
 80097e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	691a      	ldr	r2, [r3, #16]
 80097e8:	887b      	ldrh	r3, [r7, #2]
 80097ea:	4013      	ands	r3, r2
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d002      	beq.n	80097f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80097f0:	2301      	movs	r3, #1
 80097f2:	73fb      	strb	r3, [r7, #15]
 80097f4:	e001      	b.n	80097fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80097f6:	2300      	movs	r3, #0
 80097f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80097fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3714      	adds	r7, #20
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	460b      	mov	r3, r1
 8009812:	807b      	strh	r3, [r7, #2]
 8009814:	4613      	mov	r3, r2
 8009816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009818:	787b      	ldrb	r3, [r7, #1]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d003      	beq.n	8009826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800981e:	887a      	ldrh	r2, [r7, #2]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009824:	e003      	b.n	800982e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009826:	887b      	ldrh	r3, [r7, #2]
 8009828:	041a      	lsls	r2, r3, #16
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	619a      	str	r2, [r3, #24]
}
 800982e:	bf00      	nop
 8009830:	370c      	adds	r7, #12
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr
	...

0800983c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	4603      	mov	r3, r0
 8009844:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009846:	4b08      	ldr	r3, [pc, #32]	; (8009868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009848:	695a      	ldr	r2, [r3, #20]
 800984a:	88fb      	ldrh	r3, [r7, #6]
 800984c:	4013      	ands	r3, r2
 800984e:	2b00      	cmp	r3, #0
 8009850:	d006      	beq.n	8009860 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009852:	4a05      	ldr	r2, [pc, #20]	; (8009868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009854:	88fb      	ldrh	r3, [r7, #6]
 8009856:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009858:	88fb      	ldrh	r3, [r7, #6]
 800985a:	4618      	mov	r0, r3
 800985c:	f7fa f966 	bl	8003b2c <HAL_GPIO_EXTI_Callback>
  }
}
 8009860:	bf00      	nop
 8009862:	3708      	adds	r7, #8
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	40013c00 	.word	0x40013c00

0800986c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d101      	bne.n	800987e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	e12b      	b.n	8009ad6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009884:	b2db      	uxtb	r3, r3
 8009886:	2b00      	cmp	r3, #0
 8009888:	d106      	bne.n	8009898 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f7f9 fa20 	bl	8002cd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2224      	movs	r2, #36	; 0x24
 800989c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f022 0201 	bic.w	r2, r2, #1
 80098ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80098be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80098ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80098d0:	f002 fe9a 	bl	800c608 <HAL_RCC_GetPCLK1Freq>
 80098d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	4a81      	ldr	r2, [pc, #516]	; (8009ae0 <HAL_I2C_Init+0x274>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d807      	bhi.n	80098f0 <HAL_I2C_Init+0x84>
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	4a80      	ldr	r2, [pc, #512]	; (8009ae4 <HAL_I2C_Init+0x278>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	bf94      	ite	ls
 80098e8:	2301      	movls	r3, #1
 80098ea:	2300      	movhi	r3, #0
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	e006      	b.n	80098fe <HAL_I2C_Init+0x92>
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	4a7d      	ldr	r2, [pc, #500]	; (8009ae8 <HAL_I2C_Init+0x27c>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	bf94      	ite	ls
 80098f8:	2301      	movls	r3, #1
 80098fa:	2300      	movhi	r3, #0
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d001      	beq.n	8009906 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	e0e7      	b.n	8009ad6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	4a78      	ldr	r2, [pc, #480]	; (8009aec <HAL_I2C_Init+0x280>)
 800990a:	fba2 2303 	umull	r2, r3, r2, r3
 800990e:	0c9b      	lsrs	r3, r3, #18
 8009910:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	68ba      	ldr	r2, [r7, #8]
 8009922:	430a      	orrs	r2, r1
 8009924:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	6a1b      	ldr	r3, [r3, #32]
 800992c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	4a6a      	ldr	r2, [pc, #424]	; (8009ae0 <HAL_I2C_Init+0x274>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d802      	bhi.n	8009940 <HAL_I2C_Init+0xd4>
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	3301      	adds	r3, #1
 800993e:	e009      	b.n	8009954 <HAL_I2C_Init+0xe8>
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009946:	fb02 f303 	mul.w	r3, r2, r3
 800994a:	4a69      	ldr	r2, [pc, #420]	; (8009af0 <HAL_I2C_Init+0x284>)
 800994c:	fba2 2303 	umull	r2, r3, r2, r3
 8009950:	099b      	lsrs	r3, r3, #6
 8009952:	3301      	adds	r3, #1
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	6812      	ldr	r2, [r2, #0]
 8009958:	430b      	orrs	r3, r1
 800995a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	69db      	ldr	r3, [r3, #28]
 8009962:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009966:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	495c      	ldr	r1, [pc, #368]	; (8009ae0 <HAL_I2C_Init+0x274>)
 8009970:	428b      	cmp	r3, r1
 8009972:	d819      	bhi.n	80099a8 <HAL_I2C_Init+0x13c>
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	1e59      	subs	r1, r3, #1
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	005b      	lsls	r3, r3, #1
 800997e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009982:	1c59      	adds	r1, r3, #1
 8009984:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009988:	400b      	ands	r3, r1
 800998a:	2b00      	cmp	r3, #0
 800998c:	d00a      	beq.n	80099a4 <HAL_I2C_Init+0x138>
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	1e59      	subs	r1, r3, #1
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	005b      	lsls	r3, r3, #1
 8009998:	fbb1 f3f3 	udiv	r3, r1, r3
 800999c:	3301      	adds	r3, #1
 800999e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099a2:	e051      	b.n	8009a48 <HAL_I2C_Init+0x1dc>
 80099a4:	2304      	movs	r3, #4
 80099a6:	e04f      	b.n	8009a48 <HAL_I2C_Init+0x1dc>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d111      	bne.n	80099d4 <HAL_I2C_Init+0x168>
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	1e58      	subs	r0, r3, #1
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6859      	ldr	r1, [r3, #4]
 80099b8:	460b      	mov	r3, r1
 80099ba:	005b      	lsls	r3, r3, #1
 80099bc:	440b      	add	r3, r1
 80099be:	fbb0 f3f3 	udiv	r3, r0, r3
 80099c2:	3301      	adds	r3, #1
 80099c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	bf0c      	ite	eq
 80099cc:	2301      	moveq	r3, #1
 80099ce:	2300      	movne	r3, #0
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	e012      	b.n	80099fa <HAL_I2C_Init+0x18e>
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	1e58      	subs	r0, r3, #1
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6859      	ldr	r1, [r3, #4]
 80099dc:	460b      	mov	r3, r1
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	440b      	add	r3, r1
 80099e2:	0099      	lsls	r1, r3, #2
 80099e4:	440b      	add	r3, r1
 80099e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80099ea:	3301      	adds	r3, #1
 80099ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	bf0c      	ite	eq
 80099f4:	2301      	moveq	r3, #1
 80099f6:	2300      	movne	r3, #0
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d001      	beq.n	8009a02 <HAL_I2C_Init+0x196>
 80099fe:	2301      	movs	r3, #1
 8009a00:	e022      	b.n	8009a48 <HAL_I2C_Init+0x1dc>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	689b      	ldr	r3, [r3, #8]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d10e      	bne.n	8009a28 <HAL_I2C_Init+0x1bc>
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	1e58      	subs	r0, r3, #1
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6859      	ldr	r1, [r3, #4]
 8009a12:	460b      	mov	r3, r1
 8009a14:	005b      	lsls	r3, r3, #1
 8009a16:	440b      	add	r3, r1
 8009a18:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a26:	e00f      	b.n	8009a48 <HAL_I2C_Init+0x1dc>
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	1e58      	subs	r0, r3, #1
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6859      	ldr	r1, [r3, #4]
 8009a30:	460b      	mov	r3, r1
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	440b      	add	r3, r1
 8009a36:	0099      	lsls	r1, r3, #2
 8009a38:	440b      	add	r3, r1
 8009a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a3e:	3301      	adds	r3, #1
 8009a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a48:	6879      	ldr	r1, [r7, #4]
 8009a4a:	6809      	ldr	r1, [r1, #0]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	69da      	ldr	r2, [r3, #28]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6a1b      	ldr	r3, [r3, #32]
 8009a62:	431a      	orrs	r2, r3
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	430a      	orrs	r2, r1
 8009a6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009a76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	6911      	ldr	r1, [r2, #16]
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	68d2      	ldr	r2, [r2, #12]
 8009a82:	4311      	orrs	r1, r2
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	6812      	ldr	r2, [r2, #0]
 8009a88:	430b      	orrs	r3, r1
 8009a8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	695a      	ldr	r2, [r3, #20]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	699b      	ldr	r3, [r3, #24]
 8009a9e:	431a      	orrs	r2, r3
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	430a      	orrs	r2, r1
 8009aa6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f042 0201 	orr.w	r2, r2, #1
 8009ab6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2200      	movs	r2, #0
 8009abc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2220      	movs	r2, #32
 8009ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	000186a0 	.word	0x000186a0
 8009ae4:	001e847f 	.word	0x001e847f
 8009ae8:	003d08ff 	.word	0x003d08ff
 8009aec:	431bde83 	.word	0x431bde83
 8009af0:	10624dd3 	.word	0x10624dd3

08009af4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b088      	sub	sp, #32
 8009af8:	af02      	add	r7, sp, #8
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	4608      	mov	r0, r1
 8009afe:	4611      	mov	r1, r2
 8009b00:	461a      	mov	r2, r3
 8009b02:	4603      	mov	r3, r0
 8009b04:	817b      	strh	r3, [r7, #10]
 8009b06:	460b      	mov	r3, r1
 8009b08:	813b      	strh	r3, [r7, #8]
 8009b0a:	4613      	mov	r3, r2
 8009b0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009b0e:	f7fe ff63 	bl	80089d8 <HAL_GetTick>
 8009b12:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	2b20      	cmp	r3, #32
 8009b1e:	f040 80d9 	bne.w	8009cd4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	9300      	str	r3, [sp, #0]
 8009b26:	2319      	movs	r3, #25
 8009b28:	2201      	movs	r2, #1
 8009b2a:	496d      	ldr	r1, [pc, #436]	; (8009ce0 <HAL_I2C_Mem_Write+0x1ec>)
 8009b2c:	68f8      	ldr	r0, [r7, #12]
 8009b2e:	f000 fcb5 	bl	800a49c <I2C_WaitOnFlagUntilTimeout>
 8009b32:	4603      	mov	r3, r0
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d001      	beq.n	8009b3c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009b38:	2302      	movs	r3, #2
 8009b3a:	e0cc      	b.n	8009cd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d101      	bne.n	8009b4a <HAL_I2C_Mem_Write+0x56>
 8009b46:	2302      	movs	r3, #2
 8009b48:	e0c5      	b.n	8009cd6 <HAL_I2C_Mem_Write+0x1e2>
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f003 0301 	and.w	r3, r3, #1
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d007      	beq.n	8009b70 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f042 0201 	orr.w	r2, r2, #1
 8009b6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	681a      	ldr	r2, [r3, #0]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2221      	movs	r2, #33	; 0x21
 8009b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2240      	movs	r2, #64	; 0x40
 8009b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2200      	movs	r2, #0
 8009b94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6a3a      	ldr	r2, [r7, #32]
 8009b9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ba6:	b29a      	uxth	r2, r3
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	4a4d      	ldr	r2, [pc, #308]	; (8009ce4 <HAL_I2C_Mem_Write+0x1f0>)
 8009bb0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009bb2:	88f8      	ldrh	r0, [r7, #6]
 8009bb4:	893a      	ldrh	r2, [r7, #8]
 8009bb6:	8979      	ldrh	r1, [r7, #10]
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	9301      	str	r3, [sp, #4]
 8009bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bbe:	9300      	str	r3, [sp, #0]
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	68f8      	ldr	r0, [r7, #12]
 8009bc4:	f000 faec 	bl	800a1a0 <I2C_RequestMemoryWrite>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d052      	beq.n	8009c74 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e081      	b.n	8009cd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009bd2:	697a      	ldr	r2, [r7, #20]
 8009bd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	f000 fd36 	bl	800a648 <I2C_WaitOnTXEFlagUntilTimeout>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d00d      	beq.n	8009bfe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009be6:	2b04      	cmp	r3, #4
 8009be8:	d107      	bne.n	8009bfa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bf8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e06b      	b.n	8009cd6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c02:	781a      	ldrb	r2, [r3, #0]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c0e:	1c5a      	adds	r2, r3, #1
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c18:	3b01      	subs	r3, #1
 8009c1a:	b29a      	uxth	r2, r3
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	3b01      	subs	r3, #1
 8009c28:	b29a      	uxth	r2, r3
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	695b      	ldr	r3, [r3, #20]
 8009c34:	f003 0304 	and.w	r3, r3, #4
 8009c38:	2b04      	cmp	r3, #4
 8009c3a:	d11b      	bne.n	8009c74 <HAL_I2C_Mem_Write+0x180>
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d017      	beq.n	8009c74 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c48:	781a      	ldrb	r2, [r3, #0]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c54:	1c5a      	adds	r2, r3, #1
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c5e:	3b01      	subs	r3, #1
 8009c60:	b29a      	uxth	r2, r3
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	3b01      	subs	r3, #1
 8009c6e:	b29a      	uxth	r2, r3
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d1aa      	bne.n	8009bd2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c7c:	697a      	ldr	r2, [r7, #20]
 8009c7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c80:	68f8      	ldr	r0, [r7, #12]
 8009c82:	f000 fd22 	bl	800a6ca <I2C_WaitOnBTFFlagUntilTimeout>
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d00d      	beq.n	8009ca8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c90:	2b04      	cmp	r3, #4
 8009c92:	d107      	bne.n	8009ca4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ca2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e016      	b.n	8009cd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2220      	movs	r2, #32
 8009cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	e000      	b.n	8009cd6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009cd4:	2302      	movs	r3, #2
  }
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3718      	adds	r7, #24
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	bf00      	nop
 8009ce0:	00100002 	.word	0x00100002
 8009ce4:	ffff0000 	.word	0xffff0000

08009ce8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b08c      	sub	sp, #48	; 0x30
 8009cec:	af02      	add	r7, sp, #8
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	4608      	mov	r0, r1
 8009cf2:	4611      	mov	r1, r2
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	817b      	strh	r3, [r7, #10]
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	813b      	strh	r3, [r7, #8]
 8009cfe:	4613      	mov	r3, r2
 8009d00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009d02:	f7fe fe69 	bl	80089d8 <HAL_GetTick>
 8009d06:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	2b20      	cmp	r3, #32
 8009d12:	f040 8208 	bne.w	800a126 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d18:	9300      	str	r3, [sp, #0]
 8009d1a:	2319      	movs	r3, #25
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	497b      	ldr	r1, [pc, #492]	; (8009f0c <HAL_I2C_Mem_Read+0x224>)
 8009d20:	68f8      	ldr	r0, [r7, #12]
 8009d22:	f000 fbbb 	bl	800a49c <I2C_WaitOnFlagUntilTimeout>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d001      	beq.n	8009d30 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009d2c:	2302      	movs	r3, #2
 8009d2e:	e1fb      	b.n	800a128 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d101      	bne.n	8009d3e <HAL_I2C_Mem_Read+0x56>
 8009d3a:	2302      	movs	r3, #2
 8009d3c:	e1f4      	b.n	800a128 <HAL_I2C_Mem_Read+0x440>
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2201      	movs	r2, #1
 8009d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f003 0301 	and.w	r3, r3, #1
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d007      	beq.n	8009d64 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f042 0201 	orr.w	r2, r2, #1
 8009d62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2222      	movs	r2, #34	; 0x22
 8009d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2240      	movs	r2, #64	; 0x40
 8009d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2200      	movs	r2, #0
 8009d88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009d94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d9a:	b29a      	uxth	r2, r3
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	4a5b      	ldr	r2, [pc, #364]	; (8009f10 <HAL_I2C_Mem_Read+0x228>)
 8009da4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009da6:	88f8      	ldrh	r0, [r7, #6]
 8009da8:	893a      	ldrh	r2, [r7, #8]
 8009daa:	8979      	ldrh	r1, [r7, #10]
 8009dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dae:	9301      	str	r3, [sp, #4]
 8009db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db2:	9300      	str	r3, [sp, #0]
 8009db4:	4603      	mov	r3, r0
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f000 fa88 	bl	800a2cc <I2C_RequestMemoryRead>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d001      	beq.n	8009dc6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e1b0      	b.n	800a128 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d113      	bne.n	8009df6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009dce:	2300      	movs	r3, #0
 8009dd0:	623b      	str	r3, [r7, #32]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	695b      	ldr	r3, [r3, #20]
 8009dd8:	623b      	str	r3, [r7, #32]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	699b      	ldr	r3, [r3, #24]
 8009de0:	623b      	str	r3, [r7, #32]
 8009de2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009df2:	601a      	str	r2, [r3, #0]
 8009df4:	e184      	b.n	800a100 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d11b      	bne.n	8009e36 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e0e:	2300      	movs	r3, #0
 8009e10:	61fb      	str	r3, [r7, #28]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	695b      	ldr	r3, [r3, #20]
 8009e18:	61fb      	str	r3, [r7, #28]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	699b      	ldr	r3, [r3, #24]
 8009e20:	61fb      	str	r3, [r7, #28]
 8009e22:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e32:	601a      	str	r2, [r3, #0]
 8009e34:	e164      	b.n	800a100 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e3a:	2b02      	cmp	r3, #2
 8009e3c:	d11b      	bne.n	8009e76 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e4c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e5e:	2300      	movs	r3, #0
 8009e60:	61bb      	str	r3, [r7, #24]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	695b      	ldr	r3, [r3, #20]
 8009e68:	61bb      	str	r3, [r7, #24]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	699b      	ldr	r3, [r3, #24]
 8009e70:	61bb      	str	r3, [r7, #24]
 8009e72:	69bb      	ldr	r3, [r7, #24]
 8009e74:	e144      	b.n	800a100 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e76:	2300      	movs	r3, #0
 8009e78:	617b      	str	r3, [r7, #20]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	695b      	ldr	r3, [r3, #20]
 8009e80:	617b      	str	r3, [r7, #20]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	699b      	ldr	r3, [r3, #24]
 8009e88:	617b      	str	r3, [r7, #20]
 8009e8a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009e8c:	e138      	b.n	800a100 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e92:	2b03      	cmp	r3, #3
 8009e94:	f200 80f1 	bhi.w	800a07a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d123      	bne.n	8009ee8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ea2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	f000 fc51 	bl	800a74c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d001      	beq.n	8009eb4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	e139      	b.n	800a128 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	691a      	ldr	r2, [r3, #16]
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ebe:	b2d2      	uxtb	r2, r2
 8009ec0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec6:	1c5a      	adds	r2, r3, #1
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ed0:	3b01      	subs	r3, #1
 8009ed2:	b29a      	uxth	r2, r3
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	3b01      	subs	r3, #1
 8009ee0:	b29a      	uxth	r2, r3
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009ee6:	e10b      	b.n	800a100 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009eec:	2b02      	cmp	r3, #2
 8009eee:	d14e      	bne.n	8009f8e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef2:	9300      	str	r3, [sp, #0]
 8009ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	4906      	ldr	r1, [pc, #24]	; (8009f14 <HAL_I2C_Mem_Read+0x22c>)
 8009efa:	68f8      	ldr	r0, [r7, #12]
 8009efc:	f000 face 	bl	800a49c <I2C_WaitOnFlagUntilTimeout>
 8009f00:	4603      	mov	r3, r0
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d008      	beq.n	8009f18 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	e10e      	b.n	800a128 <HAL_I2C_Mem_Read+0x440>
 8009f0a:	bf00      	nop
 8009f0c:	00100002 	.word	0x00100002
 8009f10:	ffff0000 	.word	0xffff0000
 8009f14:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	691a      	ldr	r2, [r3, #16]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f32:	b2d2      	uxtb	r2, r2
 8009f34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3a:	1c5a      	adds	r2, r3, #1
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f44:	3b01      	subs	r3, #1
 8009f46:	b29a      	uxth	r2, r3
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	3b01      	subs	r3, #1
 8009f54:	b29a      	uxth	r2, r3
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	691a      	ldr	r2, [r3, #16]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f64:	b2d2      	uxtb	r2, r2
 8009f66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6c:	1c5a      	adds	r2, r3, #1
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f76:	3b01      	subs	r3, #1
 8009f78:	b29a      	uxth	r2, r3
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	3b01      	subs	r3, #1
 8009f86:	b29a      	uxth	r2, r3
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f8c:	e0b8      	b.n	800a100 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f90:	9300      	str	r3, [sp, #0]
 8009f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f94:	2200      	movs	r2, #0
 8009f96:	4966      	ldr	r1, [pc, #408]	; (800a130 <HAL_I2C_Mem_Read+0x448>)
 8009f98:	68f8      	ldr	r0, [r7, #12]
 8009f9a:	f000 fa7f 	bl	800a49c <I2C_WaitOnFlagUntilTimeout>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d001      	beq.n	8009fa8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	e0bf      	b.n	800a128 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009fb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	691a      	ldr	r2, [r3, #16]
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc2:	b2d2      	uxtb	r2, r2
 8009fc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fca:	1c5a      	adds	r2, r3, #1
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	b29a      	uxth	r2, r3
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	b29a      	uxth	r2, r3
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fec:	9300      	str	r3, [sp, #0]
 8009fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	494f      	ldr	r1, [pc, #316]	; (800a130 <HAL_I2C_Mem_Read+0x448>)
 8009ff4:	68f8      	ldr	r0, [r7, #12]
 8009ff6:	f000 fa51 	bl	800a49c <I2C_WaitOnFlagUntilTimeout>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d001      	beq.n	800a004 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800a000:	2301      	movs	r3, #1
 800a002:	e091      	b.n	800a128 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a012:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	691a      	ldr	r2, [r3, #16]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a01e:	b2d2      	uxtb	r2, r2
 800a020:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a026:	1c5a      	adds	r2, r3, #1
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a030:	3b01      	subs	r3, #1
 800a032:	b29a      	uxth	r2, r3
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	3b01      	subs	r3, #1
 800a040:	b29a      	uxth	r2, r3
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	691a      	ldr	r2, [r3, #16]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a050:	b2d2      	uxtb	r2, r2
 800a052:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a058:	1c5a      	adds	r2, r3, #1
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a062:	3b01      	subs	r3, #1
 800a064:	b29a      	uxth	r2, r3
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a06e:	b29b      	uxth	r3, r3
 800a070:	3b01      	subs	r3, #1
 800a072:	b29a      	uxth	r2, r3
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a078:	e042      	b.n	800a100 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a07a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a07c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a07e:	68f8      	ldr	r0, [r7, #12]
 800a080:	f000 fb64 	bl	800a74c <I2C_WaitOnRXNEFlagUntilTimeout>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d001      	beq.n	800a08e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a08a:	2301      	movs	r3, #1
 800a08c:	e04c      	b.n	800a128 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	691a      	ldr	r2, [r3, #16]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a098:	b2d2      	uxtb	r2, r2
 800a09a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a0:	1c5a      	adds	r2, r3, #1
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0aa:	3b01      	subs	r3, #1
 800a0ac:	b29a      	uxth	r2, r3
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	3b01      	subs	r3, #1
 800a0ba:	b29a      	uxth	r2, r3
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	695b      	ldr	r3, [r3, #20]
 800a0c6:	f003 0304 	and.w	r3, r3, #4
 800a0ca:	2b04      	cmp	r3, #4
 800a0cc:	d118      	bne.n	800a100 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	691a      	ldr	r2, [r3, #16]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d8:	b2d2      	uxtb	r2, r2
 800a0da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e0:	1c5a      	adds	r2, r3, #1
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0ea:	3b01      	subs	r3, #1
 800a0ec:	b29a      	uxth	r2, r3
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	3b01      	subs	r3, #1
 800a0fa:	b29a      	uxth	r2, r3
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a104:	2b00      	cmp	r3, #0
 800a106:	f47f aec2 	bne.w	8009e8e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2220      	movs	r2, #32
 800a10e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2200      	movs	r2, #0
 800a116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2200      	movs	r2, #0
 800a11e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a122:	2300      	movs	r3, #0
 800a124:	e000      	b.n	800a128 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a126:	2302      	movs	r3, #2
  }
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3728      	adds	r7, #40	; 0x28
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}
 800a130:	00010004 	.word	0x00010004

0800a134 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a142:	b2db      	uxtb	r3, r3
 800a144:	2b20      	cmp	r3, #32
 800a146:	d124      	bne.n	800a192 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2228      	movs	r2, #40	; 0x28
 800a14c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f003 0301 	and.w	r3, r3, #1
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d007      	beq.n	800a16e <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f042 0201 	orr.w	r2, r2, #1
 800a16c:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a17c:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	685a      	ldr	r2, [r3, #4]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800a18c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800a18e:	2300      	movs	r3, #0
 800a190:	e000      	b.n	800a194 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800a192:	2302      	movs	r3, #2
  }
}
 800a194:	4618      	mov	r0, r3
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b088      	sub	sp, #32
 800a1a4:	af02      	add	r7, sp, #8
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	4608      	mov	r0, r1
 800a1aa:	4611      	mov	r1, r2
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	817b      	strh	r3, [r7, #10]
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	813b      	strh	r3, [r7, #8]
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1cc:	9300      	str	r3, [sp, #0]
 800a1ce:	6a3b      	ldr	r3, [r7, #32]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a1d6:	68f8      	ldr	r0, [r7, #12]
 800a1d8:	f000 f960 	bl	800a49c <I2C_WaitOnFlagUntilTimeout>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d00d      	beq.n	800a1fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1f0:	d103      	bne.n	800a1fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a1fa:	2303      	movs	r3, #3
 800a1fc:	e05f      	b.n	800a2be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a1fe:	897b      	ldrh	r3, [r7, #10]
 800a200:	b2db      	uxtb	r3, r3
 800a202:	461a      	mov	r2, r3
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a20c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a210:	6a3a      	ldr	r2, [r7, #32]
 800a212:	492d      	ldr	r1, [pc, #180]	; (800a2c8 <I2C_RequestMemoryWrite+0x128>)
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f000 f998 	bl	800a54a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d001      	beq.n	800a224 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a220:	2301      	movs	r3, #1
 800a222:	e04c      	b.n	800a2be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a224:	2300      	movs	r3, #0
 800a226:	617b      	str	r3, [r7, #20]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	695b      	ldr	r3, [r3, #20]
 800a22e:	617b      	str	r3, [r7, #20]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	699b      	ldr	r3, [r3, #24]
 800a236:	617b      	str	r3, [r7, #20]
 800a238:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a23a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a23c:	6a39      	ldr	r1, [r7, #32]
 800a23e:	68f8      	ldr	r0, [r7, #12]
 800a240:	f000 fa02 	bl	800a648 <I2C_WaitOnTXEFlagUntilTimeout>
 800a244:	4603      	mov	r3, r0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d00d      	beq.n	800a266 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a24e:	2b04      	cmp	r3, #4
 800a250:	d107      	bne.n	800a262 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a260:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a262:	2301      	movs	r3, #1
 800a264:	e02b      	b.n	800a2be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a266:	88fb      	ldrh	r3, [r7, #6]
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d105      	bne.n	800a278 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a26c:	893b      	ldrh	r3, [r7, #8]
 800a26e:	b2da      	uxtb	r2, r3
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	611a      	str	r2, [r3, #16]
 800a276:	e021      	b.n	800a2bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a278:	893b      	ldrh	r3, [r7, #8]
 800a27a:	0a1b      	lsrs	r3, r3, #8
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	b2da      	uxtb	r2, r3
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a288:	6a39      	ldr	r1, [r7, #32]
 800a28a:	68f8      	ldr	r0, [r7, #12]
 800a28c:	f000 f9dc 	bl	800a648 <I2C_WaitOnTXEFlagUntilTimeout>
 800a290:	4603      	mov	r3, r0
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00d      	beq.n	800a2b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a29a:	2b04      	cmp	r3, #4
 800a29c:	d107      	bne.n	800a2ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e005      	b.n	800a2be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a2b2:	893b      	ldrh	r3, [r7, #8]
 800a2b4:	b2da      	uxtb	r2, r3
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a2bc:	2300      	movs	r3, #0
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3718      	adds	r7, #24
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
 800a2c6:	bf00      	nop
 800a2c8:	00010002 	.word	0x00010002

0800a2cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b088      	sub	sp, #32
 800a2d0:	af02      	add	r7, sp, #8
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	4608      	mov	r0, r1
 800a2d6:	4611      	mov	r1, r2
 800a2d8:	461a      	mov	r2, r3
 800a2da:	4603      	mov	r3, r0
 800a2dc:	817b      	strh	r3, [r7, #10]
 800a2de:	460b      	mov	r3, r1
 800a2e0:	813b      	strh	r3, [r7, #8]
 800a2e2:	4613      	mov	r3, r2
 800a2e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a2f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a304:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a308:	9300      	str	r3, [sp, #0]
 800a30a:	6a3b      	ldr	r3, [r7, #32]
 800a30c:	2200      	movs	r2, #0
 800a30e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f000 f8c2 	bl	800a49c <I2C_WaitOnFlagUntilTimeout>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d00d      	beq.n	800a33a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a32c:	d103      	bne.n	800a336 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a334:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a336:	2303      	movs	r3, #3
 800a338:	e0aa      	b.n	800a490 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a33a:	897b      	ldrh	r3, [r7, #10]
 800a33c:	b2db      	uxtb	r3, r3
 800a33e:	461a      	mov	r2, r3
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a348:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34c:	6a3a      	ldr	r2, [r7, #32]
 800a34e:	4952      	ldr	r1, [pc, #328]	; (800a498 <I2C_RequestMemoryRead+0x1cc>)
 800a350:	68f8      	ldr	r0, [r7, #12]
 800a352:	f000 f8fa 	bl	800a54a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a356:	4603      	mov	r3, r0
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d001      	beq.n	800a360 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a35c:	2301      	movs	r3, #1
 800a35e:	e097      	b.n	800a490 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a360:	2300      	movs	r3, #0
 800a362:	617b      	str	r3, [r7, #20]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	695b      	ldr	r3, [r3, #20]
 800a36a:	617b      	str	r3, [r7, #20]
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	699b      	ldr	r3, [r3, #24]
 800a372:	617b      	str	r3, [r7, #20]
 800a374:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a378:	6a39      	ldr	r1, [r7, #32]
 800a37a:	68f8      	ldr	r0, [r7, #12]
 800a37c:	f000 f964 	bl	800a648 <I2C_WaitOnTXEFlagUntilTimeout>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d00d      	beq.n	800a3a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38a:	2b04      	cmp	r3, #4
 800a38c:	d107      	bne.n	800a39e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a39c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	e076      	b.n	800a490 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a3a2:	88fb      	ldrh	r3, [r7, #6]
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d105      	bne.n	800a3b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a3a8:	893b      	ldrh	r3, [r7, #8]
 800a3aa:	b2da      	uxtb	r2, r3
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	611a      	str	r2, [r3, #16]
 800a3b2:	e021      	b.n	800a3f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a3b4:	893b      	ldrh	r3, [r7, #8]
 800a3b6:	0a1b      	lsrs	r3, r3, #8
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	b2da      	uxtb	r2, r3
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a3c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3c4:	6a39      	ldr	r1, [r7, #32]
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f000 f93e 	bl	800a648 <I2C_WaitOnTXEFlagUntilTimeout>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d00d      	beq.n	800a3ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d6:	2b04      	cmp	r3, #4
 800a3d8:	d107      	bne.n	800a3ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	e050      	b.n	800a490 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a3ee:	893b      	ldrh	r3, [r7, #8]
 800a3f0:	b2da      	uxtb	r2, r3
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a3f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3fa:	6a39      	ldr	r1, [r7, #32]
 800a3fc:	68f8      	ldr	r0, [r7, #12]
 800a3fe:	f000 f923 	bl	800a648 <I2C_WaitOnTXEFlagUntilTimeout>
 800a402:	4603      	mov	r3, r0
 800a404:	2b00      	cmp	r3, #0
 800a406:	d00d      	beq.n	800a424 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a40c:	2b04      	cmp	r3, #4
 800a40e:	d107      	bne.n	800a420 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a41e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	e035      	b.n	800a490 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a432:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a436:	9300      	str	r3, [sp, #0]
 800a438:	6a3b      	ldr	r3, [r7, #32]
 800a43a:	2200      	movs	r2, #0
 800a43c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a440:	68f8      	ldr	r0, [r7, #12]
 800a442:	f000 f82b 	bl	800a49c <I2C_WaitOnFlagUntilTimeout>
 800a446:	4603      	mov	r3, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d00d      	beq.n	800a468 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a45a:	d103      	bne.n	800a464 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a462:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a464:	2303      	movs	r3, #3
 800a466:	e013      	b.n	800a490 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a468:	897b      	ldrh	r3, [r7, #10]
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	f043 0301 	orr.w	r3, r3, #1
 800a470:	b2da      	uxtb	r2, r3
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47a:	6a3a      	ldr	r2, [r7, #32]
 800a47c:	4906      	ldr	r1, [pc, #24]	; (800a498 <I2C_RequestMemoryRead+0x1cc>)
 800a47e:	68f8      	ldr	r0, [r7, #12]
 800a480:	f000 f863 	bl	800a54a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d001      	beq.n	800a48e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a48a:	2301      	movs	r3, #1
 800a48c:	e000      	b.n	800a490 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a48e:	2300      	movs	r3, #0
}
 800a490:	4618      	mov	r0, r3
 800a492:	3718      	adds	r7, #24
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}
 800a498:	00010002 	.word	0x00010002

0800a49c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	60b9      	str	r1, [r7, #8]
 800a4a6:	603b      	str	r3, [r7, #0]
 800a4a8:	4613      	mov	r3, r2
 800a4aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a4ac:	e025      	b.n	800a4fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4b4:	d021      	beq.n	800a4fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4b6:	f7fe fa8f 	bl	80089d8 <HAL_GetTick>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	1ad3      	subs	r3, r2, r3
 800a4c0:	683a      	ldr	r2, [r7, #0]
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d302      	bcc.n	800a4cc <I2C_WaitOnFlagUntilTimeout+0x30>
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d116      	bne.n	800a4fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2220      	movs	r2, #32
 800a4d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e6:	f043 0220 	orr.w	r2, r3, #32
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e023      	b.n	800a542 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	0c1b      	lsrs	r3, r3, #16
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	2b01      	cmp	r3, #1
 800a502:	d10d      	bne.n	800a520 <I2C_WaitOnFlagUntilTimeout+0x84>
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	695b      	ldr	r3, [r3, #20]
 800a50a:	43da      	mvns	r2, r3
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	4013      	ands	r3, r2
 800a510:	b29b      	uxth	r3, r3
 800a512:	2b00      	cmp	r3, #0
 800a514:	bf0c      	ite	eq
 800a516:	2301      	moveq	r3, #1
 800a518:	2300      	movne	r3, #0
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	461a      	mov	r2, r3
 800a51e:	e00c      	b.n	800a53a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	699b      	ldr	r3, [r3, #24]
 800a526:	43da      	mvns	r2, r3
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	4013      	ands	r3, r2
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	2b00      	cmp	r3, #0
 800a530:	bf0c      	ite	eq
 800a532:	2301      	moveq	r3, #1
 800a534:	2300      	movne	r3, #0
 800a536:	b2db      	uxtb	r3, r3
 800a538:	461a      	mov	r2, r3
 800a53a:	79fb      	ldrb	r3, [r7, #7]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d0b6      	beq.n	800a4ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b084      	sub	sp, #16
 800a54e:	af00      	add	r7, sp, #0
 800a550:	60f8      	str	r0, [r7, #12]
 800a552:	60b9      	str	r1, [r7, #8]
 800a554:	607a      	str	r2, [r7, #4]
 800a556:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a558:	e051      	b.n	800a5fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	695b      	ldr	r3, [r3, #20]
 800a560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a568:	d123      	bne.n	800a5b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a578:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a582:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2200      	movs	r2, #0
 800a588:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2220      	movs	r2, #32
 800a58e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2200      	movs	r2, #0
 800a596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a59e:	f043 0204 	orr.w	r2, r3, #4
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	e046      	b.n	800a640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5b8:	d021      	beq.n	800a5fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5ba:	f7fe fa0d 	bl	80089d8 <HAL_GetTick>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	1ad3      	subs	r3, r2, r3
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d302      	bcc.n	800a5d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d116      	bne.n	800a5fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2220      	movs	r2, #32
 800a5da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ea:	f043 0220 	orr.w	r2, r3, #32
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	e020      	b.n	800a640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	0c1b      	lsrs	r3, r3, #16
 800a602:	b2db      	uxtb	r3, r3
 800a604:	2b01      	cmp	r3, #1
 800a606:	d10c      	bne.n	800a622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	695b      	ldr	r3, [r3, #20]
 800a60e:	43da      	mvns	r2, r3
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	4013      	ands	r3, r2
 800a614:	b29b      	uxth	r3, r3
 800a616:	2b00      	cmp	r3, #0
 800a618:	bf14      	ite	ne
 800a61a:	2301      	movne	r3, #1
 800a61c:	2300      	moveq	r3, #0
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	e00b      	b.n	800a63a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	699b      	ldr	r3, [r3, #24]
 800a628:	43da      	mvns	r2, r3
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	4013      	ands	r3, r2
 800a62e:	b29b      	uxth	r3, r3
 800a630:	2b00      	cmp	r3, #0
 800a632:	bf14      	ite	ne
 800a634:	2301      	movne	r3, #1
 800a636:	2300      	moveq	r3, #0
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d18d      	bne.n	800a55a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a63e:	2300      	movs	r3, #0
}
 800a640:	4618      	mov	r0, r3
 800a642:	3710      	adds	r7, #16
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b084      	sub	sp, #16
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a654:	e02d      	b.n	800a6b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a656:	68f8      	ldr	r0, [r7, #12]
 800a658:	f000 f8ce 	bl	800a7f8 <I2C_IsAcknowledgeFailed>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d001      	beq.n	800a666 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a662:	2301      	movs	r3, #1
 800a664:	e02d      	b.n	800a6c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a66c:	d021      	beq.n	800a6b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a66e:	f7fe f9b3 	bl	80089d8 <HAL_GetTick>
 800a672:	4602      	mov	r2, r0
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	1ad3      	subs	r3, r2, r3
 800a678:	68ba      	ldr	r2, [r7, #8]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d302      	bcc.n	800a684 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d116      	bne.n	800a6b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2200      	movs	r2, #0
 800a688:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2220      	movs	r2, #32
 800a68e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2200      	movs	r2, #0
 800a696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a69e:	f043 0220 	orr.w	r2, r3, #32
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e007      	b.n	800a6c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	695b      	ldr	r3, [r3, #20]
 800a6b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6bc:	2b80      	cmp	r3, #128	; 0x80
 800a6be:	d1ca      	bne.n	800a656 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a6c0:	2300      	movs	r3, #0
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b084      	sub	sp, #16
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	60f8      	str	r0, [r7, #12]
 800a6d2:	60b9      	str	r1, [r7, #8]
 800a6d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a6d6:	e02d      	b.n	800a734 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f000 f88d 	bl	800a7f8 <I2C_IsAcknowledgeFailed>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d001      	beq.n	800a6e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	e02d      	b.n	800a744 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ee:	d021      	beq.n	800a734 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6f0:	f7fe f972 	bl	80089d8 <HAL_GetTick>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	1ad3      	subs	r3, r2, r3
 800a6fa:	68ba      	ldr	r2, [r7, #8]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d302      	bcc.n	800a706 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d116      	bne.n	800a734 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2200      	movs	r2, #0
 800a70a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2220      	movs	r2, #32
 800a710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2200      	movs	r2, #0
 800a718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a720:	f043 0220 	orr.w	r2, r3, #32
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a730:	2301      	movs	r3, #1
 800a732:	e007      	b.n	800a744 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	695b      	ldr	r3, [r3, #20]
 800a73a:	f003 0304 	and.w	r3, r3, #4
 800a73e:	2b04      	cmp	r3, #4
 800a740:	d1ca      	bne.n	800a6d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a742:	2300      	movs	r3, #0
}
 800a744:	4618      	mov	r0, r3
 800a746:	3710      	adds	r7, #16
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b084      	sub	sp, #16
 800a750:	af00      	add	r7, sp, #0
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a758:	e042      	b.n	800a7e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	695b      	ldr	r3, [r3, #20]
 800a760:	f003 0310 	and.w	r3, r3, #16
 800a764:	2b10      	cmp	r3, #16
 800a766:	d119      	bne.n	800a79c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f06f 0210 	mvn.w	r2, #16
 800a770:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2200      	movs	r2, #0
 800a776:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2220      	movs	r2, #32
 800a77c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2200      	movs	r2, #0
 800a784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a798:	2301      	movs	r3, #1
 800a79a:	e029      	b.n	800a7f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a79c:	f7fe f91c 	bl	80089d8 <HAL_GetTick>
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	1ad3      	subs	r3, r2, r3
 800a7a6:	68ba      	ldr	r2, [r7, #8]
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d302      	bcc.n	800a7b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d116      	bne.n	800a7e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	2220      	movs	r2, #32
 800a7bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7cc:	f043 0220 	orr.w	r2, r3, #32
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	e007      	b.n	800a7f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	695b      	ldr	r3, [r3, #20]
 800a7e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ea:	2b40      	cmp	r3, #64	; 0x40
 800a7ec:	d1b5      	bne.n	800a75a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a7ee:	2300      	movs	r3, #0
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3710      	adds	r7, #16
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	695b      	ldr	r3, [r3, #20]
 800a806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a80a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a80e:	d11b      	bne.n	800a848 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a818:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2220      	movs	r2, #32
 800a824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a834:	f043 0204 	orr.w	r2, r3, #4
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a844:	2301      	movs	r3, #1
 800a846:	e000      	b.n	800a84a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a848:	2300      	movs	r3, #0
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	370c      	adds	r7, #12
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr

0800a856 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a856:	b480      	push	{r7}
 800a858:	b083      	sub	sp, #12
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
 800a85e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a866:	b2db      	uxtb	r3, r3
 800a868:	2b20      	cmp	r3, #32
 800a86a:	d129      	bne.n	800a8c0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2224      	movs	r2, #36	; 0x24
 800a870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	681a      	ldr	r2, [r3, #0]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f022 0201 	bic.w	r2, r2, #1
 800a882:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f022 0210 	bic.w	r2, r2, #16
 800a892:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	683a      	ldr	r2, [r7, #0]
 800a8a0:	430a      	orrs	r2, r1
 800a8a2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f042 0201 	orr.w	r2, r2, #1
 800a8b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2220      	movs	r2, #32
 800a8b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	e000      	b.n	800a8c2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800a8c0:	2302      	movs	r3, #2
  }
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	370c      	adds	r7, #12
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr

0800a8ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a8ce:	b480      	push	{r7}
 800a8d0:	b085      	sub	sp, #20
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
 800a8d6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	2b20      	cmp	r3, #32
 800a8e6:	d12a      	bne.n	800a93e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2224      	movs	r2, #36	; 0x24
 800a8ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	681a      	ldr	r2, [r3, #0]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f022 0201 	bic.w	r2, r2, #1
 800a8fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a906:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800a908:	89fb      	ldrh	r3, [r7, #14]
 800a90a:	f023 030f 	bic.w	r3, r3, #15
 800a90e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	b29a      	uxth	r2, r3
 800a914:	89fb      	ldrh	r3, [r7, #14]
 800a916:	4313      	orrs	r3, r2
 800a918:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	89fa      	ldrh	r2, [r7, #14]
 800a920:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f042 0201 	orr.w	r2, r2, #1
 800a930:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2220      	movs	r2, #32
 800a936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a93a:	2300      	movs	r3, #0
 800a93c:	e000      	b.n	800a940 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800a93e:	2302      	movs	r3, #2
  }
}
 800a940:	4618      	mov	r0, r3
 800a942:	3714      	adds	r7, #20
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr

0800a94c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b084      	sub	sp, #16
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d101      	bne.n	800a95e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800a95a:	2301      	movs	r3, #1
 800a95c:	e034      	b.n	800a9c8 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800a966:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f245 5255 	movw	r2, #21845	; 0x5555
 800a970:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	6852      	ldr	r2, [r2, #4]
 800a97a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	6892      	ldr	r2, [r2, #8]
 800a984:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800a986:	f7fe f827 	bl	80089d8 <HAL_GetTick>
 800a98a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a98c:	e00f      	b.n	800a9ae <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800a98e:	f7fe f823 	bl	80089d8 <HAL_GetTick>
 800a992:	4602      	mov	r2, r0
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	1ad3      	subs	r3, r2, r3
 800a998:	2b31      	cmp	r3, #49	; 0x31
 800a99a:	d908      	bls.n	800a9ae <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	68db      	ldr	r3, [r3, #12]
 800a9a2:	f003 0303 	and.w	r3, r3, #3
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d001      	beq.n	800a9ae <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800a9aa:	2303      	movs	r3, #3
 800a9ac:	e00c      	b.n	800a9c8 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	68db      	ldr	r3, [r3, #12]
 800a9b4:	f003 0303 	and.w	r3, r3, #3
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d1e8      	bne.n	800a98e <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a9c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a9c6:	2300      	movs	r3, #0
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3710      	adds	r7, #16
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b083      	sub	sp, #12
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a9e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a9e2:	2300      	movs	r3, #0
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	370c      	adds	r7, #12
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9f2:	b08f      	sub	sp, #60	; 0x3c
 800a9f4:	af0a      	add	r7, sp, #40	; 0x28
 800a9f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d101      	bne.n	800aa02 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e10f      	b.n	800ac22 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d106      	bne.n	800aa22 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f00e ffe5 	bl	80199ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2203      	movs	r2, #3
 800aa26:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d102      	bne.n	800aa3c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4618      	mov	r0, r3
 800aa42:	f004 fe2c 	bl	800f69e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	603b      	str	r3, [r7, #0]
 800aa4c:	687e      	ldr	r6, [r7, #4]
 800aa4e:	466d      	mov	r5, sp
 800aa50:	f106 0410 	add.w	r4, r6, #16
 800aa54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aa58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aa5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800aa60:	e885 0003 	stmia.w	r5, {r0, r1}
 800aa64:	1d33      	adds	r3, r6, #4
 800aa66:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aa68:	6838      	ldr	r0, [r7, #0]
 800aa6a:	f004 fd03 	bl	800f474 <USB_CoreInit>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d005      	beq.n	800aa80 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2202      	movs	r2, #2
 800aa78:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	e0d0      	b.n	800ac22 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	2100      	movs	r1, #0
 800aa86:	4618      	mov	r0, r3
 800aa88:	f004 fe1a 	bl	800f6c0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	73fb      	strb	r3, [r7, #15]
 800aa90:	e04a      	b.n	800ab28 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800aa92:	7bfa      	ldrb	r2, [r7, #15]
 800aa94:	6879      	ldr	r1, [r7, #4]
 800aa96:	4613      	mov	r3, r2
 800aa98:	00db      	lsls	r3, r3, #3
 800aa9a:	1a9b      	subs	r3, r3, r2
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	440b      	add	r3, r1
 800aaa0:	333d      	adds	r3, #61	; 0x3d
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800aaa6:	7bfa      	ldrb	r2, [r7, #15]
 800aaa8:	6879      	ldr	r1, [r7, #4]
 800aaaa:	4613      	mov	r3, r2
 800aaac:	00db      	lsls	r3, r3, #3
 800aaae:	1a9b      	subs	r3, r3, r2
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	440b      	add	r3, r1
 800aab4:	333c      	adds	r3, #60	; 0x3c
 800aab6:	7bfa      	ldrb	r2, [r7, #15]
 800aab8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800aaba:	7bfa      	ldrb	r2, [r7, #15]
 800aabc:	7bfb      	ldrb	r3, [r7, #15]
 800aabe:	b298      	uxth	r0, r3
 800aac0:	6879      	ldr	r1, [r7, #4]
 800aac2:	4613      	mov	r3, r2
 800aac4:	00db      	lsls	r3, r3, #3
 800aac6:	1a9b      	subs	r3, r3, r2
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	440b      	add	r3, r1
 800aacc:	3342      	adds	r3, #66	; 0x42
 800aace:	4602      	mov	r2, r0
 800aad0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800aad2:	7bfa      	ldrb	r2, [r7, #15]
 800aad4:	6879      	ldr	r1, [r7, #4]
 800aad6:	4613      	mov	r3, r2
 800aad8:	00db      	lsls	r3, r3, #3
 800aada:	1a9b      	subs	r3, r3, r2
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	440b      	add	r3, r1
 800aae0:	333f      	adds	r3, #63	; 0x3f
 800aae2:	2200      	movs	r2, #0
 800aae4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800aae6:	7bfa      	ldrb	r2, [r7, #15]
 800aae8:	6879      	ldr	r1, [r7, #4]
 800aaea:	4613      	mov	r3, r2
 800aaec:	00db      	lsls	r3, r3, #3
 800aaee:	1a9b      	subs	r3, r3, r2
 800aaf0:	009b      	lsls	r3, r3, #2
 800aaf2:	440b      	add	r3, r1
 800aaf4:	3344      	adds	r3, #68	; 0x44
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800aafa:	7bfa      	ldrb	r2, [r7, #15]
 800aafc:	6879      	ldr	r1, [r7, #4]
 800aafe:	4613      	mov	r3, r2
 800ab00:	00db      	lsls	r3, r3, #3
 800ab02:	1a9b      	subs	r3, r3, r2
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	440b      	add	r3, r1
 800ab08:	3348      	adds	r3, #72	; 0x48
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ab0e:	7bfa      	ldrb	r2, [r7, #15]
 800ab10:	6879      	ldr	r1, [r7, #4]
 800ab12:	4613      	mov	r3, r2
 800ab14:	00db      	lsls	r3, r3, #3
 800ab16:	1a9b      	subs	r3, r3, r2
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	440b      	add	r3, r1
 800ab1c:	3350      	adds	r3, #80	; 0x50
 800ab1e:	2200      	movs	r2, #0
 800ab20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ab22:	7bfb      	ldrb	r3, [r7, #15]
 800ab24:	3301      	adds	r3, #1
 800ab26:	73fb      	strb	r3, [r7, #15]
 800ab28:	7bfa      	ldrb	r2, [r7, #15]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d3af      	bcc.n	800aa92 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ab32:	2300      	movs	r3, #0
 800ab34:	73fb      	strb	r3, [r7, #15]
 800ab36:	e044      	b.n	800abc2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ab38:	7bfa      	ldrb	r2, [r7, #15]
 800ab3a:	6879      	ldr	r1, [r7, #4]
 800ab3c:	4613      	mov	r3, r2
 800ab3e:	00db      	lsls	r3, r3, #3
 800ab40:	1a9b      	subs	r3, r3, r2
 800ab42:	009b      	lsls	r3, r3, #2
 800ab44:	440b      	add	r3, r1
 800ab46:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ab4e:	7bfa      	ldrb	r2, [r7, #15]
 800ab50:	6879      	ldr	r1, [r7, #4]
 800ab52:	4613      	mov	r3, r2
 800ab54:	00db      	lsls	r3, r3, #3
 800ab56:	1a9b      	subs	r3, r3, r2
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	440b      	add	r3, r1
 800ab5c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800ab60:	7bfa      	ldrb	r2, [r7, #15]
 800ab62:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ab64:	7bfa      	ldrb	r2, [r7, #15]
 800ab66:	6879      	ldr	r1, [r7, #4]
 800ab68:	4613      	mov	r3, r2
 800ab6a:	00db      	lsls	r3, r3, #3
 800ab6c:	1a9b      	subs	r3, r3, r2
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	440b      	add	r3, r1
 800ab72:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ab76:	2200      	movs	r2, #0
 800ab78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ab7a:	7bfa      	ldrb	r2, [r7, #15]
 800ab7c:	6879      	ldr	r1, [r7, #4]
 800ab7e:	4613      	mov	r3, r2
 800ab80:	00db      	lsls	r3, r3, #3
 800ab82:	1a9b      	subs	r3, r3, r2
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	440b      	add	r3, r1
 800ab88:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ab90:	7bfa      	ldrb	r2, [r7, #15]
 800ab92:	6879      	ldr	r1, [r7, #4]
 800ab94:	4613      	mov	r3, r2
 800ab96:	00db      	lsls	r3, r3, #3
 800ab98:	1a9b      	subs	r3, r3, r2
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	440b      	add	r3, r1
 800ab9e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800aba2:	2200      	movs	r2, #0
 800aba4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800aba6:	7bfa      	ldrb	r2, [r7, #15]
 800aba8:	6879      	ldr	r1, [r7, #4]
 800abaa:	4613      	mov	r3, r2
 800abac:	00db      	lsls	r3, r3, #3
 800abae:	1a9b      	subs	r3, r3, r2
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	440b      	add	r3, r1
 800abb4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800abb8:	2200      	movs	r2, #0
 800abba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800abbc:	7bfb      	ldrb	r3, [r7, #15]
 800abbe:	3301      	adds	r3, #1
 800abc0:	73fb      	strb	r3, [r7, #15]
 800abc2:	7bfa      	ldrb	r2, [r7, #15]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	685b      	ldr	r3, [r3, #4]
 800abc8:	429a      	cmp	r2, r3
 800abca:	d3b5      	bcc.n	800ab38 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	603b      	str	r3, [r7, #0]
 800abd2:	687e      	ldr	r6, [r7, #4]
 800abd4:	466d      	mov	r5, sp
 800abd6:	f106 0410 	add.w	r4, r6, #16
 800abda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800abdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800abde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800abe0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800abe2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800abe6:	e885 0003 	stmia.w	r5, {r0, r1}
 800abea:	1d33      	adds	r3, r6, #4
 800abec:	cb0e      	ldmia	r3, {r1, r2, r3}
 800abee:	6838      	ldr	r0, [r7, #0]
 800abf0:	f004 fdb2 	bl	800f758 <USB_DevInit>
 800abf4:	4603      	mov	r3, r0
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d005      	beq.n	800ac06 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2202      	movs	r2, #2
 800abfe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800ac02:	2301      	movs	r3, #1
 800ac04:	e00d      	b.n	800ac22 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2201      	movs	r2, #1
 800ac12:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f005 fe2e 	bl	801087c <USB_DevDisconnect>

  return HAL_OK;
 800ac20:	2300      	movs	r3, #0
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3714      	adds	r7, #20
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac2a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800ac2a:	b580      	push	{r7, lr}
 800ac2c:	b084      	sub	sp, #16
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ac3e:	2b01      	cmp	r3, #1
 800ac40:	d101      	bne.n	800ac46 <HAL_PCD_Start+0x1c>
 800ac42:	2302      	movs	r3, #2
 800ac44:	e020      	b.n	800ac88 <HAL_PCD_Start+0x5e>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2201      	movs	r2, #1
 800ac4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d109      	bne.n	800ac6a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d005      	beq.n	800ac6a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f004 fd04 	bl	800f67c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f005 fdde 	bl	801083a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2200      	movs	r2, #0
 800ac82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ac86:	2300      	movs	r3, #0
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3710      	adds	r7, #16
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800ac90:	b590      	push	{r4, r7, lr}
 800ac92:	b08d      	sub	sp, #52	; 0x34
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac9e:	6a3b      	ldr	r3, [r7, #32]
 800aca0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4618      	mov	r0, r3
 800aca8:	f005 fe9c 	bl	80109e4 <USB_GetMode>
 800acac:	4603      	mov	r3, r0
 800acae:	2b00      	cmp	r3, #0
 800acb0:	f040 839d 	bne.w	800b3ee <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4618      	mov	r0, r3
 800acba:	f005 fe00 	bl	80108be <USB_ReadInterrupts>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	f000 8393 	beq.w	800b3ec <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4618      	mov	r0, r3
 800accc:	f005 fdf7 	bl	80108be <USB_ReadInterrupts>
 800acd0:	4603      	mov	r3, r0
 800acd2:	f003 0302 	and.w	r3, r3, #2
 800acd6:	2b02      	cmp	r3, #2
 800acd8:	d107      	bne.n	800acea <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	695a      	ldr	r2, [r3, #20]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f002 0202 	and.w	r2, r2, #2
 800ace8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4618      	mov	r0, r3
 800acf0:	f005 fde5 	bl	80108be <USB_ReadInterrupts>
 800acf4:	4603      	mov	r3, r0
 800acf6:	f003 0310 	and.w	r3, r3, #16
 800acfa:	2b10      	cmp	r3, #16
 800acfc:	d161      	bne.n	800adc2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	699a      	ldr	r2, [r3, #24]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f022 0210 	bic.w	r2, r2, #16
 800ad0c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800ad0e:	6a3b      	ldr	r3, [r7, #32]
 800ad10:	6a1b      	ldr	r3, [r3, #32]
 800ad12:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800ad14:	69bb      	ldr	r3, [r7, #24]
 800ad16:	f003 020f 	and.w	r2, r3, #15
 800ad1a:	4613      	mov	r3, r2
 800ad1c:	00db      	lsls	r3, r3, #3
 800ad1e:	1a9b      	subs	r3, r3, r2
 800ad20:	009b      	lsls	r3, r3, #2
 800ad22:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	4413      	add	r3, r2
 800ad2a:	3304      	adds	r3, #4
 800ad2c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	0c5b      	lsrs	r3, r3, #17
 800ad32:	f003 030f 	and.w	r3, r3, #15
 800ad36:	2b02      	cmp	r3, #2
 800ad38:	d124      	bne.n	800ad84 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800ad3a:	69ba      	ldr	r2, [r7, #24]
 800ad3c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800ad40:	4013      	ands	r3, r2
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d035      	beq.n	800adb2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800ad4a:	69bb      	ldr	r3, [r7, #24]
 800ad4c:	091b      	lsrs	r3, r3, #4
 800ad4e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800ad50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	461a      	mov	r2, r3
 800ad58:	6a38      	ldr	r0, [r7, #32]
 800ad5a:	f005 fc1c 	bl	8010596 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	68da      	ldr	r2, [r3, #12]
 800ad62:	69bb      	ldr	r3, [r7, #24]
 800ad64:	091b      	lsrs	r3, r3, #4
 800ad66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ad6a:	441a      	add	r2, r3
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	699a      	ldr	r2, [r3, #24]
 800ad74:	69bb      	ldr	r3, [r7, #24]
 800ad76:	091b      	lsrs	r3, r3, #4
 800ad78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ad7c:	441a      	add	r2, r3
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	619a      	str	r2, [r3, #24]
 800ad82:	e016      	b.n	800adb2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800ad84:	69bb      	ldr	r3, [r7, #24]
 800ad86:	0c5b      	lsrs	r3, r3, #17
 800ad88:	f003 030f 	and.w	r3, r3, #15
 800ad8c:	2b06      	cmp	r3, #6
 800ad8e:	d110      	bne.n	800adb2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ad96:	2208      	movs	r2, #8
 800ad98:	4619      	mov	r1, r3
 800ad9a:	6a38      	ldr	r0, [r7, #32]
 800ad9c:	f005 fbfb 	bl	8010596 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	699a      	ldr	r2, [r3, #24]
 800ada4:	69bb      	ldr	r3, [r7, #24]
 800ada6:	091b      	lsrs	r3, r3, #4
 800ada8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800adac:	441a      	add	r2, r3
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	699a      	ldr	r2, [r3, #24]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f042 0210 	orr.w	r2, r2, #16
 800adc0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4618      	mov	r0, r3
 800adc8:	f005 fd79 	bl	80108be <USB_ReadInterrupts>
 800adcc:	4603      	mov	r3, r0
 800adce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800add2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800add6:	d16e      	bne.n	800aeb6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800add8:	2300      	movs	r3, #0
 800adda:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4618      	mov	r0, r3
 800ade2:	f005 fd7f 	bl	80108e4 <USB_ReadDevAllOutEpInterrupt>
 800ade6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800ade8:	e062      	b.n	800aeb0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800adea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adec:	f003 0301 	and.w	r3, r3, #1
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d057      	beq.n	800aea4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adfa:	b2d2      	uxtb	r2, r2
 800adfc:	4611      	mov	r1, r2
 800adfe:	4618      	mov	r0, r3
 800ae00:	f005 fda4 	bl	801094c <USB_ReadDevOutEPInterrupt>
 800ae04:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	f003 0301 	and.w	r3, r3, #1
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d00c      	beq.n	800ae2a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800ae10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae12:	015a      	lsls	r2, r3, #5
 800ae14:	69fb      	ldr	r3, [r7, #28]
 800ae16:	4413      	add	r3, r2
 800ae18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	2301      	movs	r3, #1
 800ae20:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800ae22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f000 fdb1 	bl	800b98c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	f003 0308 	and.w	r3, r3, #8
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d00c      	beq.n	800ae4e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800ae34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae36:	015a      	lsls	r2, r3, #5
 800ae38:	69fb      	ldr	r3, [r7, #28]
 800ae3a:	4413      	add	r3, r2
 800ae3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae40:	461a      	mov	r2, r3
 800ae42:	2308      	movs	r3, #8
 800ae44:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800ae46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f000 feab 	bl	800bba4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	f003 0310 	and.w	r3, r3, #16
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d008      	beq.n	800ae6a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800ae58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5a:	015a      	lsls	r2, r3, #5
 800ae5c:	69fb      	ldr	r3, [r7, #28]
 800ae5e:	4413      	add	r3, r2
 800ae60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae64:	461a      	mov	r2, r3
 800ae66:	2310      	movs	r3, #16
 800ae68:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	f003 0320 	and.w	r3, r3, #32
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d008      	beq.n	800ae86 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ae74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae76:	015a      	lsls	r2, r3, #5
 800ae78:	69fb      	ldr	r3, [r7, #28]
 800ae7a:	4413      	add	r3, r2
 800ae7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae80:	461a      	mov	r2, r3
 800ae82:	2320      	movs	r3, #32
 800ae84:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d009      	beq.n	800aea4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800ae90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae92:	015a      	lsls	r2, r3, #5
 800ae94:	69fb      	ldr	r3, [r7, #28]
 800ae96:	4413      	add	r3, r2
 800ae98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aea2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800aea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea6:	3301      	adds	r3, #1
 800aea8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800aeaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeac:	085b      	lsrs	r3, r3, #1
 800aeae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800aeb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d199      	bne.n	800adea <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4618      	mov	r0, r3
 800aebc:	f005 fcff 	bl	80108be <USB_ReadInterrupts>
 800aec0:	4603      	mov	r3, r0
 800aec2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aec6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aeca:	f040 80c0 	bne.w	800b04e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4618      	mov	r0, r3
 800aed4:	f005 fd20 	bl	8010918 <USB_ReadDevAllInEpInterrupt>
 800aed8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800aeda:	2300      	movs	r3, #0
 800aedc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800aede:	e0b2      	b.n	800b046 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800aee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee2:	f003 0301 	and.w	r3, r3, #1
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	f000 80a7 	beq.w	800b03a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aef2:	b2d2      	uxtb	r2, r2
 800aef4:	4611      	mov	r1, r2
 800aef6:	4618      	mov	r0, r3
 800aef8:	f005 fd46 	bl	8010988 <USB_ReadDevInEPInterrupt>
 800aefc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	f003 0301 	and.w	r3, r3, #1
 800af04:	2b00      	cmp	r3, #0
 800af06:	d057      	beq.n	800afb8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800af08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0a:	f003 030f 	and.w	r3, r3, #15
 800af0e:	2201      	movs	r2, #1
 800af10:	fa02 f303 	lsl.w	r3, r2, r3
 800af14:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	43db      	mvns	r3, r3
 800af22:	69f9      	ldr	r1, [r7, #28]
 800af24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af28:	4013      	ands	r3, r2
 800af2a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800af2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2e:	015a      	lsls	r2, r3, #5
 800af30:	69fb      	ldr	r3, [r7, #28]
 800af32:	4413      	add	r3, r2
 800af34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af38:	461a      	mov	r2, r3
 800af3a:	2301      	movs	r3, #1
 800af3c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	691b      	ldr	r3, [r3, #16]
 800af42:	2b01      	cmp	r3, #1
 800af44:	d132      	bne.n	800afac <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800af46:	6879      	ldr	r1, [r7, #4]
 800af48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af4a:	4613      	mov	r3, r2
 800af4c:	00db      	lsls	r3, r3, #3
 800af4e:	1a9b      	subs	r3, r3, r2
 800af50:	009b      	lsls	r3, r3, #2
 800af52:	440b      	add	r3, r1
 800af54:	3348      	adds	r3, #72	; 0x48
 800af56:	6819      	ldr	r1, [r3, #0]
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af5c:	4613      	mov	r3, r2
 800af5e:	00db      	lsls	r3, r3, #3
 800af60:	1a9b      	subs	r3, r3, r2
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	4403      	add	r3, r0
 800af66:	3344      	adds	r3, #68	; 0x44
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4419      	add	r1, r3
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af70:	4613      	mov	r3, r2
 800af72:	00db      	lsls	r3, r3, #3
 800af74:	1a9b      	subs	r3, r3, r2
 800af76:	009b      	lsls	r3, r3, #2
 800af78:	4403      	add	r3, r0
 800af7a:	3348      	adds	r3, #72	; 0x48
 800af7c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800af7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af80:	2b00      	cmp	r3, #0
 800af82:	d113      	bne.n	800afac <HAL_PCD_IRQHandler+0x31c>
 800af84:	6879      	ldr	r1, [r7, #4]
 800af86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af88:	4613      	mov	r3, r2
 800af8a:	00db      	lsls	r3, r3, #3
 800af8c:	1a9b      	subs	r3, r3, r2
 800af8e:	009b      	lsls	r3, r3, #2
 800af90:	440b      	add	r3, r1
 800af92:	3350      	adds	r3, #80	; 0x50
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d108      	bne.n	800afac <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6818      	ldr	r0, [r3, #0]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800afa4:	461a      	mov	r2, r3
 800afa6:	2101      	movs	r1, #1
 800afa8:	f005 fd4e 	bl	8010a48 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800afac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afae:	b2db      	uxtb	r3, r3
 800afb0:	4619      	mov	r1, r3
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f00e fda9 	bl	8019b0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	f003 0308 	and.w	r3, r3, #8
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d008      	beq.n	800afd4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800afc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc4:	015a      	lsls	r2, r3, #5
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	4413      	add	r3, r2
 800afca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afce:	461a      	mov	r2, r3
 800afd0:	2308      	movs	r3, #8
 800afd2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	f003 0310 	and.w	r3, r3, #16
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d008      	beq.n	800aff0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800afde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe0:	015a      	lsls	r2, r3, #5
 800afe2:	69fb      	ldr	r3, [r7, #28]
 800afe4:	4413      	add	r3, r2
 800afe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afea:	461a      	mov	r2, r3
 800afec:	2310      	movs	r3, #16
 800afee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d008      	beq.n	800b00c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800affa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affc:	015a      	lsls	r2, r3, #5
 800affe:	69fb      	ldr	r3, [r7, #28]
 800b000:	4413      	add	r3, r2
 800b002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b006:	461a      	mov	r2, r3
 800b008:	2340      	movs	r3, #64	; 0x40
 800b00a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	f003 0302 	and.w	r3, r3, #2
 800b012:	2b00      	cmp	r3, #0
 800b014:	d008      	beq.n	800b028 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b018:	015a      	lsls	r2, r3, #5
 800b01a:	69fb      	ldr	r3, [r7, #28]
 800b01c:	4413      	add	r3, r2
 800b01e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b022:	461a      	mov	r2, r3
 800b024:	2302      	movs	r3, #2
 800b026:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d003      	beq.n	800b03a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b032:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 fc1b 	bl	800b870 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03c:	3301      	adds	r3, #1
 800b03e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b042:	085b      	lsrs	r3, r3, #1
 800b044:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b048:	2b00      	cmp	r3, #0
 800b04a:	f47f af49 	bne.w	800aee0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4618      	mov	r0, r3
 800b054:	f005 fc33 	bl	80108be <USB_ReadInterrupts>
 800b058:	4603      	mov	r3, r0
 800b05a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b05e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b062:	d122      	bne.n	800b0aa <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b064:	69fb      	ldr	r3, [r7, #28]
 800b066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	69fa      	ldr	r2, [r7, #28]
 800b06e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b072:	f023 0301 	bic.w	r3, r3, #1
 800b076:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800b07e:	2b01      	cmp	r3, #1
 800b080:	d108      	bne.n	800b094 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2200      	movs	r2, #0
 800b086:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b08a:	2100      	movs	r1, #0
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 fe27 	bl	800bce0 <HAL_PCDEx_LPM_Callback>
 800b092:	e002      	b.n	800b09a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f00e fdaf 	bl	8019bf8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	695a      	ldr	r2, [r3, #20]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b0a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f005 fc05 	bl	80108be <USB_ReadInterrupts>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b0be:	d112      	bne.n	800b0e6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b0c0:	69fb      	ldr	r3, [r7, #28]
 800b0c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0c6:	689b      	ldr	r3, [r3, #8]
 800b0c8:	f003 0301 	and.w	r3, r3, #1
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	d102      	bne.n	800b0d6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f00e fd6b 	bl	8019bac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	695a      	ldr	r2, [r3, #20]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800b0e4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f005 fbe7 	bl	80108be <USB_ReadInterrupts>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b0f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0fa:	f040 80c7 	bne.w	800b28c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b0fe:	69fb      	ldr	r3, [r7, #28]
 800b100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	69fa      	ldr	r2, [r7, #28]
 800b108:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b10c:	f023 0301 	bic.w	r3, r3, #1
 800b110:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	2110      	movs	r1, #16
 800b118:	4618      	mov	r0, r3
 800b11a:	f004 fc81 	bl	800fa20 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b11e:	2300      	movs	r3, #0
 800b120:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b122:	e056      	b.n	800b1d2 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b126:	015a      	lsls	r2, r3, #5
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	4413      	add	r3, r2
 800b12c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b130:	461a      	mov	r2, r3
 800b132:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b136:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b13a:	015a      	lsls	r2, r3, #5
 800b13c:	69fb      	ldr	r3, [r7, #28]
 800b13e:	4413      	add	r3, r2
 800b140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b148:	0151      	lsls	r1, r2, #5
 800b14a:	69fa      	ldr	r2, [r7, #28]
 800b14c:	440a      	add	r2, r1
 800b14e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b152:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b156:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b15a:	015a      	lsls	r2, r3, #5
 800b15c:	69fb      	ldr	r3, [r7, #28]
 800b15e:	4413      	add	r3, r2
 800b160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b168:	0151      	lsls	r1, r2, #5
 800b16a:	69fa      	ldr	r2, [r7, #28]
 800b16c:	440a      	add	r2, r1
 800b16e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b172:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b176:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b17a:	015a      	lsls	r2, r3, #5
 800b17c:	69fb      	ldr	r3, [r7, #28]
 800b17e:	4413      	add	r3, r2
 800b180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b184:	461a      	mov	r2, r3
 800b186:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b18a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b18e:	015a      	lsls	r2, r3, #5
 800b190:	69fb      	ldr	r3, [r7, #28]
 800b192:	4413      	add	r3, r2
 800b194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b19c:	0151      	lsls	r1, r2, #5
 800b19e:	69fa      	ldr	r2, [r7, #28]
 800b1a0:	440a      	add	r2, r1
 800b1a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b1aa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ae:	015a      	lsls	r2, r3, #5
 800b1b0:	69fb      	ldr	r3, [r7, #28]
 800b1b2:	4413      	add	r3, r2
 800b1b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1bc:	0151      	lsls	r1, r2, #5
 800b1be:	69fa      	ldr	r2, [r7, #28]
 800b1c0:	440a      	add	r2, r1
 800b1c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b1ca:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d3a3      	bcc.n	800b124 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b1dc:	69fb      	ldr	r3, [r7, #28]
 800b1de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1e2:	69db      	ldr	r3, [r3, #28]
 800b1e4:	69fa      	ldr	r2, [r7, #28]
 800b1e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b1ea:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800b1ee:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d016      	beq.n	800b226 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b1f8:	69fb      	ldr	r3, [r7, #28]
 800b1fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b202:	69fa      	ldr	r2, [r7, #28]
 800b204:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b208:	f043 030b 	orr.w	r3, r3, #11
 800b20c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b210:	69fb      	ldr	r3, [r7, #28]
 800b212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b218:	69fa      	ldr	r2, [r7, #28]
 800b21a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b21e:	f043 030b 	orr.w	r3, r3, #11
 800b222:	6453      	str	r3, [r2, #68]	; 0x44
 800b224:	e015      	b.n	800b252 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b226:	69fb      	ldr	r3, [r7, #28]
 800b228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b22c:	695b      	ldr	r3, [r3, #20]
 800b22e:	69fa      	ldr	r2, [r7, #28]
 800b230:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b234:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b238:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800b23c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b23e:	69fb      	ldr	r3, [r7, #28]
 800b240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b244:	691b      	ldr	r3, [r3, #16]
 800b246:	69fa      	ldr	r2, [r7, #28]
 800b248:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b24c:	f043 030b 	orr.w	r3, r3, #11
 800b250:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b252:	69fb      	ldr	r3, [r7, #28]
 800b254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	69fa      	ldr	r2, [r7, #28]
 800b25c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b260:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b264:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6818      	ldr	r0, [r3, #0]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	691b      	ldr	r3, [r3, #16]
 800b26e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b276:	461a      	mov	r2, r3
 800b278:	f005 fbe6 	bl	8010a48 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	695a      	ldr	r2, [r3, #20]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800b28a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4618      	mov	r0, r3
 800b292:	f005 fb14 	bl	80108be <USB_ReadInterrupts>
 800b296:	4603      	mov	r3, r0
 800b298:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b29c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2a0:	d124      	bne.n	800b2ec <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f005 fbaa 	bl	8010a00 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f004 fc12 	bl	800fada <USB_GetDevSpeed>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681c      	ldr	r4, [r3, #0]
 800b2c2:	f001 f995 	bl	800c5f0 <HAL_RCC_GetHCLKFreq>
 800b2c6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b2cc:	b2db      	uxtb	r3, r3
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	f004 f931 	bl	800f538 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f00e fc3f 	bl	8019b5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	695a      	ldr	r2, [r3, #20]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800b2ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f005 fae4 	bl	80108be <USB_ReadInterrupts>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	f003 0308 	and.w	r3, r3, #8
 800b2fc:	2b08      	cmp	r3, #8
 800b2fe:	d10a      	bne.n	800b316 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f00e fc1c 	bl	8019b3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	695a      	ldr	r2, [r3, #20]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f002 0208 	and.w	r2, r2, #8
 800b314:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4618      	mov	r0, r3
 800b31c:	f005 facf 	bl	80108be <USB_ReadInterrupts>
 800b320:	4603      	mov	r3, r0
 800b322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b326:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b32a:	d10f      	bne.n	800b34c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800b32c:	2300      	movs	r3, #0
 800b32e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b332:	b2db      	uxtb	r3, r3
 800b334:	4619      	mov	r1, r3
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f00e fc7e 	bl	8019c38 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	695a      	ldr	r2, [r3, #20]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800b34a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4618      	mov	r0, r3
 800b352:	f005 fab4 	bl	80108be <USB_ReadInterrupts>
 800b356:	4603      	mov	r3, r0
 800b358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b35c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b360:	d10f      	bne.n	800b382 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800b362:	2300      	movs	r3, #0
 800b364:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b368:	b2db      	uxtb	r3, r3
 800b36a:	4619      	mov	r1, r3
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f00e fc51 	bl	8019c14 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	695a      	ldr	r2, [r3, #20]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800b380:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4618      	mov	r0, r3
 800b388:	f005 fa99 	bl	80108be <USB_ReadInterrupts>
 800b38c:	4603      	mov	r3, r0
 800b38e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b396:	d10a      	bne.n	800b3ae <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f00e fc5f 	bl	8019c5c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	695a      	ldr	r2, [r3, #20]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800b3ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f005 fa83 	bl	80108be <USB_ReadInterrupts>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	f003 0304 	and.w	r3, r3, #4
 800b3be:	2b04      	cmp	r3, #4
 800b3c0:	d115      	bne.n	800b3ee <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b3ca:	69bb      	ldr	r3, [r7, #24]
 800b3cc:	f003 0304 	and.w	r3, r3, #4
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d002      	beq.n	800b3da <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f00e fc4f 	bl	8019c78 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	6859      	ldr	r1, [r3, #4]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	69ba      	ldr	r2, [r7, #24]
 800b3e6:	430a      	orrs	r2, r1
 800b3e8:	605a      	str	r2, [r3, #4]
 800b3ea:	e000      	b.n	800b3ee <HAL_PCD_IRQHandler+0x75e>
      return;
 800b3ec:	bf00      	nop
    }
  }
}
 800b3ee:	3734      	adds	r7, #52	; 0x34
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd90      	pop	{r4, r7, pc}

0800b3f4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b406:	2b01      	cmp	r3, #1
 800b408:	d101      	bne.n	800b40e <HAL_PCD_SetAddress+0x1a>
 800b40a:	2302      	movs	r3, #2
 800b40c:	e013      	b.n	800b436 <HAL_PCD_SetAddress+0x42>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2201      	movs	r2, #1
 800b412:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	78fa      	ldrb	r2, [r7, #3]
 800b41a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	78fa      	ldrb	r2, [r7, #3]
 800b424:	4611      	mov	r1, r2
 800b426:	4618      	mov	r0, r3
 800b428:	f005 f9e1 	bl	80107ee <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2200      	movs	r2, #0
 800b430:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b434:	2300      	movs	r3, #0
}
 800b436:	4618      	mov	r0, r3
 800b438:	3708      	adds	r7, #8
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}

0800b43e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b43e:	b580      	push	{r7, lr}
 800b440:	b084      	sub	sp, #16
 800b442:	af00      	add	r7, sp, #0
 800b444:	6078      	str	r0, [r7, #4]
 800b446:	4608      	mov	r0, r1
 800b448:	4611      	mov	r1, r2
 800b44a:	461a      	mov	r2, r3
 800b44c:	4603      	mov	r3, r0
 800b44e:	70fb      	strb	r3, [r7, #3]
 800b450:	460b      	mov	r3, r1
 800b452:	803b      	strh	r3, [r7, #0]
 800b454:	4613      	mov	r3, r2
 800b456:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b458:	2300      	movs	r3, #0
 800b45a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b45c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b460:	2b00      	cmp	r3, #0
 800b462:	da0f      	bge.n	800b484 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b464:	78fb      	ldrb	r3, [r7, #3]
 800b466:	f003 020f 	and.w	r2, r3, #15
 800b46a:	4613      	mov	r3, r2
 800b46c:	00db      	lsls	r3, r3, #3
 800b46e:	1a9b      	subs	r3, r3, r2
 800b470:	009b      	lsls	r3, r3, #2
 800b472:	3338      	adds	r3, #56	; 0x38
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	4413      	add	r3, r2
 800b478:	3304      	adds	r3, #4
 800b47a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	2201      	movs	r2, #1
 800b480:	705a      	strb	r2, [r3, #1]
 800b482:	e00f      	b.n	800b4a4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b484:	78fb      	ldrb	r3, [r7, #3]
 800b486:	f003 020f 	and.w	r2, r3, #15
 800b48a:	4613      	mov	r3, r2
 800b48c:	00db      	lsls	r3, r3, #3
 800b48e:	1a9b      	subs	r3, r3, r2
 800b490:	009b      	lsls	r3, r3, #2
 800b492:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b496:	687a      	ldr	r2, [r7, #4]
 800b498:	4413      	add	r3, r2
 800b49a:	3304      	adds	r3, #4
 800b49c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b4a4:	78fb      	ldrb	r3, [r7, #3]
 800b4a6:	f003 030f 	and.w	r3, r3, #15
 800b4aa:	b2da      	uxtb	r2, r3
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b4b0:	883a      	ldrh	r2, [r7, #0]
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	78ba      	ldrb	r2, [r7, #2]
 800b4ba:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	785b      	ldrb	r3, [r3, #1]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d004      	beq.n	800b4ce <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	b29a      	uxth	r2, r3
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b4ce:	78bb      	ldrb	r3, [r7, #2]
 800b4d0:	2b02      	cmp	r3, #2
 800b4d2:	d102      	bne.n	800b4da <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d101      	bne.n	800b4e8 <HAL_PCD_EP_Open+0xaa>
 800b4e4:	2302      	movs	r3, #2
 800b4e6:	e00e      	b.n	800b506 <HAL_PCD_EP_Open+0xc8>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	68f9      	ldr	r1, [r7, #12]
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f004 fb14 	bl	800fb24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800b504:	7afb      	ldrb	r3, [r7, #11]
}
 800b506:	4618      	mov	r0, r3
 800b508:	3710      	adds	r7, #16
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}

0800b50e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b50e:	b580      	push	{r7, lr}
 800b510:	b084      	sub	sp, #16
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
 800b516:	460b      	mov	r3, r1
 800b518:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b51a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	da0f      	bge.n	800b542 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b522:	78fb      	ldrb	r3, [r7, #3]
 800b524:	f003 020f 	and.w	r2, r3, #15
 800b528:	4613      	mov	r3, r2
 800b52a:	00db      	lsls	r3, r3, #3
 800b52c:	1a9b      	subs	r3, r3, r2
 800b52e:	009b      	lsls	r3, r3, #2
 800b530:	3338      	adds	r3, #56	; 0x38
 800b532:	687a      	ldr	r2, [r7, #4]
 800b534:	4413      	add	r3, r2
 800b536:	3304      	adds	r3, #4
 800b538:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2201      	movs	r2, #1
 800b53e:	705a      	strb	r2, [r3, #1]
 800b540:	e00f      	b.n	800b562 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b542:	78fb      	ldrb	r3, [r7, #3]
 800b544:	f003 020f 	and.w	r2, r3, #15
 800b548:	4613      	mov	r3, r2
 800b54a:	00db      	lsls	r3, r3, #3
 800b54c:	1a9b      	subs	r3, r3, r2
 800b54e:	009b      	lsls	r3, r3, #2
 800b550:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b554:	687a      	ldr	r2, [r7, #4]
 800b556:	4413      	add	r3, r2
 800b558:	3304      	adds	r3, #4
 800b55a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2200      	movs	r2, #0
 800b560:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800b562:	78fb      	ldrb	r3, [r7, #3]
 800b564:	f003 030f 	and.w	r3, r3, #15
 800b568:	b2da      	uxtb	r2, r3
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b574:	2b01      	cmp	r3, #1
 800b576:	d101      	bne.n	800b57c <HAL_PCD_EP_Close+0x6e>
 800b578:	2302      	movs	r3, #2
 800b57a:	e00e      	b.n	800b59a <HAL_PCD_EP_Close+0x8c>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2201      	movs	r2, #1
 800b580:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	68f9      	ldr	r1, [r7, #12]
 800b58a:	4618      	mov	r0, r3
 800b58c:	f004 fb52 	bl	800fc34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2200      	movs	r2, #0
 800b594:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800b598:	2300      	movs	r3, #0
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3710      	adds	r7, #16
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b5a2:	b580      	push	{r7, lr}
 800b5a4:	b086      	sub	sp, #24
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	60f8      	str	r0, [r7, #12]
 800b5aa:	607a      	str	r2, [r7, #4]
 800b5ac:	603b      	str	r3, [r7, #0]
 800b5ae:	460b      	mov	r3, r1
 800b5b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b5b2:	7afb      	ldrb	r3, [r7, #11]
 800b5b4:	f003 020f 	and.w	r2, r3, #15
 800b5b8:	4613      	mov	r3, r2
 800b5ba:	00db      	lsls	r3, r3, #3
 800b5bc:	1a9b      	subs	r3, r3, r2
 800b5be:	009b      	lsls	r3, r3, #2
 800b5c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b5c4:	68fa      	ldr	r2, [r7, #12]
 800b5c6:	4413      	add	r3, r2
 800b5c8:	3304      	adds	r3, #4
 800b5ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	687a      	ldr	r2, [r7, #4]
 800b5d0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	683a      	ldr	r2, [r7, #0]
 800b5d6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b5e4:	7afb      	ldrb	r3, [r7, #11]
 800b5e6:	f003 030f 	and.w	r3, r3, #15
 800b5ea:	b2da      	uxtb	r2, r3
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	691b      	ldr	r3, [r3, #16]
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d102      	bne.n	800b5fe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b5fe:	7afb      	ldrb	r3, [r7, #11]
 800b600:	f003 030f 	and.w	r3, r3, #15
 800b604:	2b00      	cmp	r3, #0
 800b606:	d109      	bne.n	800b61c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	6818      	ldr	r0, [r3, #0]
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	691b      	ldr	r3, [r3, #16]
 800b610:	b2db      	uxtb	r3, r3
 800b612:	461a      	mov	r2, r3
 800b614:	6979      	ldr	r1, [r7, #20]
 800b616:	f004 fe2d 	bl	8010274 <USB_EP0StartXfer>
 800b61a:	e008      	b.n	800b62e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	6818      	ldr	r0, [r3, #0]
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	691b      	ldr	r3, [r3, #16]
 800b624:	b2db      	uxtb	r3, r3
 800b626:	461a      	mov	r2, r3
 800b628:	6979      	ldr	r1, [r7, #20]
 800b62a:	f004 fbdf 	bl	800fdec <USB_EPStartXfer>
  }

  return HAL_OK;
 800b62e:	2300      	movs	r3, #0
}
 800b630:	4618      	mov	r0, r3
 800b632:	3718      	adds	r7, #24
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}

0800b638 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b638:	b480      	push	{r7}
 800b63a:	b083      	sub	sp, #12
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	460b      	mov	r3, r1
 800b642:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b644:	78fb      	ldrb	r3, [r7, #3]
 800b646:	f003 020f 	and.w	r2, r3, #15
 800b64a:	6879      	ldr	r1, [r7, #4]
 800b64c:	4613      	mov	r3, r2
 800b64e:	00db      	lsls	r3, r3, #3
 800b650:	1a9b      	subs	r3, r3, r2
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	440b      	add	r3, r1
 800b656:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800b65a:	681b      	ldr	r3, [r3, #0]
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	370c      	adds	r7, #12
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr

0800b668 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b086      	sub	sp, #24
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	607a      	str	r2, [r7, #4]
 800b672:	603b      	str	r3, [r7, #0]
 800b674:	460b      	mov	r3, r1
 800b676:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b678:	7afb      	ldrb	r3, [r7, #11]
 800b67a:	f003 020f 	and.w	r2, r3, #15
 800b67e:	4613      	mov	r3, r2
 800b680:	00db      	lsls	r3, r3, #3
 800b682:	1a9b      	subs	r3, r3, r2
 800b684:	009b      	lsls	r3, r3, #2
 800b686:	3338      	adds	r3, #56	; 0x38
 800b688:	68fa      	ldr	r2, [r7, #12]
 800b68a:	4413      	add	r3, r2
 800b68c:	3304      	adds	r3, #4
 800b68e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	683a      	ldr	r2, [r7, #0]
 800b69a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b6a8:	7afb      	ldrb	r3, [r7, #11]
 800b6aa:	f003 030f 	and.w	r3, r3, #15
 800b6ae:	b2da      	uxtb	r2, r3
 800b6b0:	697b      	ldr	r3, [r7, #20]
 800b6b2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	691b      	ldr	r3, [r3, #16]
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d102      	bne.n	800b6c2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b6bc:	687a      	ldr	r2, [r7, #4]
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b6c2:	7afb      	ldrb	r3, [r7, #11]
 800b6c4:	f003 030f 	and.w	r3, r3, #15
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d109      	bne.n	800b6e0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	6818      	ldr	r0, [r3, #0]
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	691b      	ldr	r3, [r3, #16]
 800b6d4:	b2db      	uxtb	r3, r3
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	6979      	ldr	r1, [r7, #20]
 800b6da:	f004 fdcb 	bl	8010274 <USB_EP0StartXfer>
 800b6de:	e008      	b.n	800b6f2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	6818      	ldr	r0, [r3, #0]
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	691b      	ldr	r3, [r3, #16]
 800b6e8:	b2db      	uxtb	r3, r3
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	6979      	ldr	r1, [r7, #20]
 800b6ee:	f004 fb7d 	bl	800fdec <USB_EPStartXfer>
  }

  return HAL_OK;
 800b6f2:	2300      	movs	r3, #0
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3718      	adds	r7, #24
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	460b      	mov	r3, r1
 800b706:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b708:	78fb      	ldrb	r3, [r7, #3]
 800b70a:	f003 020f 	and.w	r2, r3, #15
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	429a      	cmp	r2, r3
 800b714:	d901      	bls.n	800b71a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b716:	2301      	movs	r3, #1
 800b718:	e050      	b.n	800b7bc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b71a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	da0f      	bge.n	800b742 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b722:	78fb      	ldrb	r3, [r7, #3]
 800b724:	f003 020f 	and.w	r2, r3, #15
 800b728:	4613      	mov	r3, r2
 800b72a:	00db      	lsls	r3, r3, #3
 800b72c:	1a9b      	subs	r3, r3, r2
 800b72e:	009b      	lsls	r3, r3, #2
 800b730:	3338      	adds	r3, #56	; 0x38
 800b732:	687a      	ldr	r2, [r7, #4]
 800b734:	4413      	add	r3, r2
 800b736:	3304      	adds	r3, #4
 800b738:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2201      	movs	r2, #1
 800b73e:	705a      	strb	r2, [r3, #1]
 800b740:	e00d      	b.n	800b75e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b742:	78fa      	ldrb	r2, [r7, #3]
 800b744:	4613      	mov	r3, r2
 800b746:	00db      	lsls	r3, r3, #3
 800b748:	1a9b      	subs	r3, r3, r2
 800b74a:	009b      	lsls	r3, r3, #2
 800b74c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b750:	687a      	ldr	r2, [r7, #4]
 800b752:	4413      	add	r3, r2
 800b754:	3304      	adds	r3, #4
 800b756:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2200      	movs	r2, #0
 800b75c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2201      	movs	r2, #1
 800b762:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b764:	78fb      	ldrb	r3, [r7, #3]
 800b766:	f003 030f 	and.w	r3, r3, #15
 800b76a:	b2da      	uxtb	r2, r3
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b776:	2b01      	cmp	r3, #1
 800b778:	d101      	bne.n	800b77e <HAL_PCD_EP_SetStall+0x82>
 800b77a:	2302      	movs	r3, #2
 800b77c:	e01e      	b.n	800b7bc <HAL_PCD_EP_SetStall+0xc0>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2201      	movs	r2, #1
 800b782:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	68f9      	ldr	r1, [r7, #12]
 800b78c:	4618      	mov	r0, r3
 800b78e:	f004 ff5a 	bl	8010646 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b792:	78fb      	ldrb	r3, [r7, #3]
 800b794:	f003 030f 	and.w	r3, r3, #15
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d10a      	bne.n	800b7b2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6818      	ldr	r0, [r3, #0]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	691b      	ldr	r3, [r3, #16]
 800b7a4:	b2d9      	uxtb	r1, r3
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	f005 f94b 	bl	8010a48 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b7ba:	2300      	movs	r3, #0
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3710      	adds	r7, #16
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b084      	sub	sp, #16
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	460b      	mov	r3, r1
 800b7ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b7d0:	78fb      	ldrb	r3, [r7, #3]
 800b7d2:	f003 020f 	and.w	r2, r3, #15
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	d901      	bls.n	800b7e2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b7de:	2301      	movs	r3, #1
 800b7e0:	e042      	b.n	800b868 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b7e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	da0f      	bge.n	800b80a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b7ea:	78fb      	ldrb	r3, [r7, #3]
 800b7ec:	f003 020f 	and.w	r2, r3, #15
 800b7f0:	4613      	mov	r3, r2
 800b7f2:	00db      	lsls	r3, r3, #3
 800b7f4:	1a9b      	subs	r3, r3, r2
 800b7f6:	009b      	lsls	r3, r3, #2
 800b7f8:	3338      	adds	r3, #56	; 0x38
 800b7fa:	687a      	ldr	r2, [r7, #4]
 800b7fc:	4413      	add	r3, r2
 800b7fe:	3304      	adds	r3, #4
 800b800:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	2201      	movs	r2, #1
 800b806:	705a      	strb	r2, [r3, #1]
 800b808:	e00f      	b.n	800b82a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b80a:	78fb      	ldrb	r3, [r7, #3]
 800b80c:	f003 020f 	and.w	r2, r3, #15
 800b810:	4613      	mov	r3, r2
 800b812:	00db      	lsls	r3, r3, #3
 800b814:	1a9b      	subs	r3, r3, r2
 800b816:	009b      	lsls	r3, r3, #2
 800b818:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	4413      	add	r3, r2
 800b820:	3304      	adds	r3, #4
 800b822:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2200      	movs	r2, #0
 800b828:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	2200      	movs	r2, #0
 800b82e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b830:	78fb      	ldrb	r3, [r7, #3]
 800b832:	f003 030f 	and.w	r3, r3, #15
 800b836:	b2da      	uxtb	r2, r3
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b842:	2b01      	cmp	r3, #1
 800b844:	d101      	bne.n	800b84a <HAL_PCD_EP_ClrStall+0x86>
 800b846:	2302      	movs	r3, #2
 800b848:	e00e      	b.n	800b868 <HAL_PCD_EP_ClrStall+0xa4>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2201      	movs	r2, #1
 800b84e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	68f9      	ldr	r1, [r7, #12]
 800b858:	4618      	mov	r0, r3
 800b85a:	f004 ff62 	bl	8010722 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2200      	movs	r2, #0
 800b862:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b866:	2300      	movs	r3, #0
}
 800b868:	4618      	mov	r0, r3
 800b86a:	3710      	adds	r7, #16
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b08a      	sub	sp, #40	; 0x28
 800b874:	af02      	add	r7, sp, #8
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800b884:	683a      	ldr	r2, [r7, #0]
 800b886:	4613      	mov	r3, r2
 800b888:	00db      	lsls	r3, r3, #3
 800b88a:	1a9b      	subs	r3, r3, r2
 800b88c:	009b      	lsls	r3, r3, #2
 800b88e:	3338      	adds	r3, #56	; 0x38
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	4413      	add	r3, r2
 800b894:	3304      	adds	r3, #4
 800b896:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	699a      	ldr	r2, [r3, #24]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	695b      	ldr	r3, [r3, #20]
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	d901      	bls.n	800b8a8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	e06c      	b.n	800b982 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	695a      	ldr	r2, [r3, #20]
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	699b      	ldr	r3, [r3, #24]
 800b8b0:	1ad3      	subs	r3, r2, r3
 800b8b2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	689b      	ldr	r3, [r3, #8]
 800b8b8:	69fa      	ldr	r2, [r7, #28]
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d902      	bls.n	800b8c4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	689b      	ldr	r3, [r3, #8]
 800b8c2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800b8c4:	69fb      	ldr	r3, [r7, #28]
 800b8c6:	3303      	adds	r3, #3
 800b8c8:	089b      	lsrs	r3, r3, #2
 800b8ca:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b8cc:	e02b      	b.n	800b926 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	695a      	ldr	r2, [r3, #20]
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	699b      	ldr	r3, [r3, #24]
 800b8d6:	1ad3      	subs	r3, r2, r3
 800b8d8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	689b      	ldr	r3, [r3, #8]
 800b8de:	69fa      	ldr	r2, [r7, #28]
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d902      	bls.n	800b8ea <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800b8ea:	69fb      	ldr	r3, [r7, #28]
 800b8ec:	3303      	adds	r3, #3
 800b8ee:	089b      	lsrs	r3, r3, #2
 800b8f0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	68d9      	ldr	r1, [r3, #12]
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	b2da      	uxtb	r2, r3
 800b8fa:	69fb      	ldr	r3, [r7, #28]
 800b8fc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b902:	b2db      	uxtb	r3, r3
 800b904:	9300      	str	r3, [sp, #0]
 800b906:	4603      	mov	r3, r0
 800b908:	6978      	ldr	r0, [r7, #20]
 800b90a:	f004 fe06 	bl	801051a <USB_WritePacket>

    ep->xfer_buff  += len;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	68da      	ldr	r2, [r3, #12]
 800b912:	69fb      	ldr	r3, [r7, #28]
 800b914:	441a      	add	r2, r3
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	699a      	ldr	r2, [r3, #24]
 800b91e:	69fb      	ldr	r3, [r7, #28]
 800b920:	441a      	add	r2, r3
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	015a      	lsls	r2, r3, #5
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	4413      	add	r3, r2
 800b92e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b932:	699b      	ldr	r3, [r3, #24]
 800b934:	b29b      	uxth	r3, r3
 800b936:	69ba      	ldr	r2, [r7, #24]
 800b938:	429a      	cmp	r2, r3
 800b93a:	d809      	bhi.n	800b950 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	699a      	ldr	r2, [r3, #24]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b944:	429a      	cmp	r2, r3
 800b946:	d203      	bcs.n	800b950 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	695b      	ldr	r3, [r3, #20]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d1be      	bne.n	800b8ce <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	695a      	ldr	r2, [r3, #20]
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	699b      	ldr	r3, [r3, #24]
 800b958:	429a      	cmp	r2, r3
 800b95a:	d811      	bhi.n	800b980 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	f003 030f 	and.w	r3, r3, #15
 800b962:	2201      	movs	r2, #1
 800b964:	fa02 f303 	lsl.w	r3, r2, r3
 800b968:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b970:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	43db      	mvns	r3, r3
 800b976:	6939      	ldr	r1, [r7, #16]
 800b978:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b97c:	4013      	ands	r3, r2
 800b97e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800b980:	2300      	movs	r3, #0
}
 800b982:	4618      	mov	r0, r3
 800b984:	3720      	adds	r7, #32
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
	...

0800b98c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b086      	sub	sp, #24
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	333c      	adds	r3, #60	; 0x3c
 800b9a4:	3304      	adds	r3, #4
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	015a      	lsls	r2, r3, #5
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	4413      	add	r3, r2
 800b9b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9b6:	689b      	ldr	r3, [r3, #8]
 800b9b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	691b      	ldr	r3, [r3, #16]
 800b9be:	2b01      	cmp	r3, #1
 800b9c0:	f040 80a0 	bne.w	800bb04 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	f003 0308 	and.w	r3, r3, #8
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d015      	beq.n	800b9fa <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	4a72      	ldr	r2, [pc, #456]	; (800bb9c <PCD_EP_OutXfrComplete_int+0x210>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	f240 80dd 	bls.w	800bb92 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	f000 80d7 	beq.w	800bb92 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	015a      	lsls	r2, r3, #5
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	4413      	add	r3, r2
 800b9ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b9f6:	6093      	str	r3, [r2, #8]
 800b9f8:	e0cb      	b.n	800bb92 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	f003 0320 	and.w	r3, r3, #32
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d009      	beq.n	800ba18 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	015a      	lsls	r2, r3, #5
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	4413      	add	r3, r2
 800ba0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba10:	461a      	mov	r2, r3
 800ba12:	2320      	movs	r3, #32
 800ba14:	6093      	str	r3, [r2, #8]
 800ba16:	e0bc      	b.n	800bb92 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	f040 80b7 	bne.w	800bb92 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	4a5d      	ldr	r2, [pc, #372]	; (800bb9c <PCD_EP_OutXfrComplete_int+0x210>)
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d90f      	bls.n	800ba4c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d00a      	beq.n	800ba4c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	015a      	lsls	r2, r3, #5
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	4413      	add	r3, r2
 800ba3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba42:	461a      	mov	r2, r3
 800ba44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba48:	6093      	str	r3, [r2, #8]
 800ba4a:	e0a2      	b.n	800bb92 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800ba4c:	6879      	ldr	r1, [r7, #4]
 800ba4e:	683a      	ldr	r2, [r7, #0]
 800ba50:	4613      	mov	r3, r2
 800ba52:	00db      	lsls	r3, r3, #3
 800ba54:	1a9b      	subs	r3, r3, r2
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	440b      	add	r3, r1
 800ba5a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800ba5e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	0159      	lsls	r1, r3, #5
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	440b      	add	r3, r1
 800ba68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba6c:	691b      	ldr	r3, [r3, #16]
 800ba6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800ba72:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	683a      	ldr	r2, [r7, #0]
 800ba78:	4613      	mov	r3, r2
 800ba7a:	00db      	lsls	r3, r3, #3
 800ba7c:	1a9b      	subs	r3, r3, r2
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	4403      	add	r3, r0
 800ba82:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800ba86:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800ba88:	6879      	ldr	r1, [r7, #4]
 800ba8a:	683a      	ldr	r2, [r7, #0]
 800ba8c:	4613      	mov	r3, r2
 800ba8e:	00db      	lsls	r3, r3, #3
 800ba90:	1a9b      	subs	r3, r3, r2
 800ba92:	009b      	lsls	r3, r3, #2
 800ba94:	440b      	add	r3, r1
 800ba96:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ba9a:	6819      	ldr	r1, [r3, #0]
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	683a      	ldr	r2, [r7, #0]
 800baa0:	4613      	mov	r3, r2
 800baa2:	00db      	lsls	r3, r3, #3
 800baa4:	1a9b      	subs	r3, r3, r2
 800baa6:	009b      	lsls	r3, r3, #2
 800baa8:	4403      	add	r3, r0
 800baaa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	4419      	add	r1, r3
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	683a      	ldr	r2, [r7, #0]
 800bab6:	4613      	mov	r3, r2
 800bab8:	00db      	lsls	r3, r3, #3
 800baba:	1a9b      	subs	r3, r3, r2
 800babc:	009b      	lsls	r3, r3, #2
 800babe:	4403      	add	r3, r0
 800bac0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bac4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d114      	bne.n	800baf6 <PCD_EP_OutXfrComplete_int+0x16a>
 800bacc:	6879      	ldr	r1, [r7, #4]
 800bace:	683a      	ldr	r2, [r7, #0]
 800bad0:	4613      	mov	r3, r2
 800bad2:	00db      	lsls	r3, r3, #3
 800bad4:	1a9b      	subs	r3, r3, r2
 800bad6:	009b      	lsls	r3, r3, #2
 800bad8:	440b      	add	r3, r1
 800bada:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d108      	bne.n	800baf6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6818      	ldr	r0, [r3, #0]
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800baee:	461a      	mov	r2, r3
 800baf0:	2101      	movs	r1, #1
 800baf2:	f004 ffa9 	bl	8010a48 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	b2db      	uxtb	r3, r3
 800bafa:	4619      	mov	r1, r3
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f00d ffe9 	bl	8019ad4 <HAL_PCD_DataOutStageCallback>
 800bb02:	e046      	b.n	800bb92 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	4a26      	ldr	r2, [pc, #152]	; (800bba0 <PCD_EP_OutXfrComplete_int+0x214>)
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d124      	bne.n	800bb56 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d00a      	beq.n	800bb2c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	015a      	lsls	r2, r3, #5
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	4413      	add	r3, r2
 800bb1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb22:	461a      	mov	r2, r3
 800bb24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb28:	6093      	str	r3, [r2, #8]
 800bb2a:	e032      	b.n	800bb92 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	f003 0320 	and.w	r3, r3, #32
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d008      	beq.n	800bb48 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	015a      	lsls	r2, r3, #5
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	4413      	add	r3, r2
 800bb3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb42:	461a      	mov	r2, r3
 800bb44:	2320      	movs	r3, #32
 800bb46:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	b2db      	uxtb	r3, r3
 800bb4c:	4619      	mov	r1, r3
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f00d ffc0 	bl	8019ad4 <HAL_PCD_DataOutStageCallback>
 800bb54:	e01d      	b.n	800bb92 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d114      	bne.n	800bb86 <PCD_EP_OutXfrComplete_int+0x1fa>
 800bb5c:	6879      	ldr	r1, [r7, #4]
 800bb5e:	683a      	ldr	r2, [r7, #0]
 800bb60:	4613      	mov	r3, r2
 800bb62:	00db      	lsls	r3, r3, #3
 800bb64:	1a9b      	subs	r3, r3, r2
 800bb66:	009b      	lsls	r3, r3, #2
 800bb68:	440b      	add	r3, r1
 800bb6a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d108      	bne.n	800bb86 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6818      	ldr	r0, [r3, #0]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bb7e:	461a      	mov	r2, r3
 800bb80:	2100      	movs	r1, #0
 800bb82:	f004 ff61 	bl	8010a48 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	4619      	mov	r1, r3
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f00d ffa1 	bl	8019ad4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800bb92:	2300      	movs	r3, #0
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3718      	adds	r7, #24
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}
 800bb9c:	4f54300a 	.word	0x4f54300a
 800bba0:	4f54310a 	.word	0x4f54310a

0800bba4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b086      	sub	sp, #24
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	333c      	adds	r3, #60	; 0x3c
 800bbbc:	3304      	adds	r3, #4
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	015a      	lsls	r2, r3, #5
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	4413      	add	r3, r2
 800bbca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	4a15      	ldr	r2, [pc, #84]	; (800bc2c <PCD_EP_OutSetupPacket_int+0x88>)
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d90e      	bls.n	800bbf8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d009      	beq.n	800bbf8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	015a      	lsls	r2, r3, #5
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	4413      	add	r3, r2
 800bbec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbf0:	461a      	mov	r2, r3
 800bbf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbf6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f00d ff59 	bl	8019ab0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	4a0a      	ldr	r2, [pc, #40]	; (800bc2c <PCD_EP_OutSetupPacket_int+0x88>)
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d90c      	bls.n	800bc20 <PCD_EP_OutSetupPacket_int+0x7c>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	691b      	ldr	r3, [r3, #16]
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	d108      	bne.n	800bc20 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6818      	ldr	r0, [r3, #0]
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bc18:	461a      	mov	r2, r3
 800bc1a:	2101      	movs	r1, #1
 800bc1c:	f004 ff14 	bl	8010a48 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800bc20:	2300      	movs	r3, #0
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3718      	adds	r7, #24
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	4f54300a 	.word	0x4f54300a

0800bc30 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b085      	sub	sp, #20
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	460b      	mov	r3, r1
 800bc3a:	70fb      	strb	r3, [r7, #3]
 800bc3c:	4613      	mov	r3, r2
 800bc3e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc46:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800bc48:	78fb      	ldrb	r3, [r7, #3]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d107      	bne.n	800bc5e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800bc4e:	883b      	ldrh	r3, [r7, #0]
 800bc50:	0419      	lsls	r1, r3, #16
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	68ba      	ldr	r2, [r7, #8]
 800bc58:	430a      	orrs	r2, r1
 800bc5a:	629a      	str	r2, [r3, #40]	; 0x28
 800bc5c:	e028      	b.n	800bcb0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc64:	0c1b      	lsrs	r3, r3, #16
 800bc66:	68ba      	ldr	r2, [r7, #8]
 800bc68:	4413      	add	r3, r2
 800bc6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	73fb      	strb	r3, [r7, #15]
 800bc70:	e00d      	b.n	800bc8e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681a      	ldr	r2, [r3, #0]
 800bc76:	7bfb      	ldrb	r3, [r7, #15]
 800bc78:	3340      	adds	r3, #64	; 0x40
 800bc7a:	009b      	lsls	r3, r3, #2
 800bc7c:	4413      	add	r3, r2
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	0c1b      	lsrs	r3, r3, #16
 800bc82:	68ba      	ldr	r2, [r7, #8]
 800bc84:	4413      	add	r3, r2
 800bc86:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bc88:	7bfb      	ldrb	r3, [r7, #15]
 800bc8a:	3301      	adds	r3, #1
 800bc8c:	73fb      	strb	r3, [r7, #15]
 800bc8e:	7bfa      	ldrb	r2, [r7, #15]
 800bc90:	78fb      	ldrb	r3, [r7, #3]
 800bc92:	3b01      	subs	r3, #1
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d3ec      	bcc.n	800bc72 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800bc98:	883b      	ldrh	r3, [r7, #0]
 800bc9a:	0418      	lsls	r0, r3, #16
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6819      	ldr	r1, [r3, #0]
 800bca0:	78fb      	ldrb	r3, [r7, #3]
 800bca2:	3b01      	subs	r3, #1
 800bca4:	68ba      	ldr	r2, [r7, #8]
 800bca6:	4302      	orrs	r2, r0
 800bca8:	3340      	adds	r3, #64	; 0x40
 800bcaa:	009b      	lsls	r3, r3, #2
 800bcac:	440b      	add	r3, r1
 800bcae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800bcb0:	2300      	movs	r3, #0
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3714      	adds	r7, #20
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr

0800bcbe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800bcbe:	b480      	push	{r7}
 800bcc0:	b083      	sub	sp, #12
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	887a      	ldrh	r2, [r7, #2]
 800bcd0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800bcd2:	2300      	movs	r3, #0
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	370c      	adds	r7, #12
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr

0800bce0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b083      	sub	sp, #12
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	460b      	mov	r3, r1
 800bcea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800bcec:	bf00      	nop
 800bcee:	370c      	adds	r7, #12
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b083      	sub	sp, #12
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 800bd00:	4b05      	ldr	r3, [pc, #20]	; (800bd18 <HAL_PWR_EnableWakeUpPin+0x20>)
 800bd02:	685a      	ldr	r2, [r3, #4]
 800bd04:	4904      	ldr	r1, [pc, #16]	; (800bd18 <HAL_PWR_EnableWakeUpPin+0x20>)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	604b      	str	r3, [r1, #4]
}
 800bd0c:	bf00      	nop
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr
 800bd18:	40007000 	.word	0x40007000

0800bd1c <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b083      	sub	sp, #12
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 800bd24:	4b06      	ldr	r3, [pc, #24]	; (800bd40 <HAL_PWR_DisableWakeUpPin+0x24>)
 800bd26:	685a      	ldr	r2, [r3, #4]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	43db      	mvns	r3, r3
 800bd2c:	4904      	ldr	r1, [pc, #16]	; (800bd40 <HAL_PWR_DisableWakeUpPin+0x24>)
 800bd2e:	4013      	ands	r3, r2
 800bd30:	604b      	str	r3, [r1, #4]
}
 800bd32:	bf00      	nop
 800bd34:	370c      	adds	r7, #12
 800bd36:	46bd      	mov	sp, r7
 800bd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3c:	4770      	bx	lr
 800bd3e:	bf00      	nop
 800bd40:	40007000 	.word	0x40007000

0800bd44 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800bd44:	b480      	push	{r7}
 800bd46:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800bd48:	4b08      	ldr	r3, [pc, #32]	; (800bd6c <HAL_PWR_EnterSTANDBYMode+0x28>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	4a07      	ldr	r2, [pc, #28]	; (800bd6c <HAL_PWR_EnterSTANDBYMode+0x28>)
 800bd4e:	f043 0302 	orr.w	r3, r3, #2
 800bd52:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800bd54:	4b06      	ldr	r3, [pc, #24]	; (800bd70 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800bd56:	691b      	ldr	r3, [r3, #16]
 800bd58:	4a05      	ldr	r2, [pc, #20]	; (800bd70 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800bd5a:	f043 0304 	orr.w	r3, r3, #4
 800bd5e:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800bd60:	bf30      	wfi
}
 800bd62:	bf00      	nop
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr
 800bd6c:	40007000 	.word	0x40007000
 800bd70:	e000ed00 	.word	0xe000ed00

0800bd74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b086      	sub	sp, #24
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d101      	bne.n	800bd86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bd82:	2301      	movs	r3, #1
 800bd84:	e264      	b.n	800c250 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f003 0301 	and.w	r3, r3, #1
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d075      	beq.n	800be7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bd92:	4ba3      	ldr	r3, [pc, #652]	; (800c020 <HAL_RCC_OscConfig+0x2ac>)
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	f003 030c 	and.w	r3, r3, #12
 800bd9a:	2b04      	cmp	r3, #4
 800bd9c:	d00c      	beq.n	800bdb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bd9e:	4ba0      	ldr	r3, [pc, #640]	; (800c020 <HAL_RCC_OscConfig+0x2ac>)
 800bda0:	689b      	ldr	r3, [r3, #8]
 800bda2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bda6:	2b08      	cmp	r3, #8
 800bda8:	d112      	bne.n	800bdd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bdaa:	4b9d      	ldr	r3, [pc, #628]	; (800c020 <HAL_RCC_OscConfig+0x2ac>)
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bdb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bdb6:	d10b      	bne.n	800bdd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bdb8:	4b99      	ldr	r3, [pc, #612]	; (800c020 <HAL_RCC_OscConfig+0x2ac>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d05b      	beq.n	800be7c <HAL_RCC_OscConfig+0x108>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d157      	bne.n	800be7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800bdcc:	2301      	movs	r3, #1
 800bdce:	e23f      	b.n	800c250 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdd8:	d106      	bne.n	800bde8 <HAL_RCC_OscConfig+0x74>
 800bdda:	4b91      	ldr	r3, [pc, #580]	; (800c020 <HAL_RCC_OscConfig+0x2ac>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	4a90      	ldr	r2, [pc, #576]	; (800c020 <HAL_RCC_OscConfig+0x2ac>)
 800bde0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bde4:	6013      	str	r3, [r2, #0]
 800bde6:	e01d      	b.n	800be24 <HAL_RCC_OscConfig+0xb0>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bdf0:	d10c      	bne.n	800be0c <HAL_RCC_OscConfig+0x98>
 800bdf2:	4b8b      	ldr	r3, [pc, #556]	; (800c020 <HAL_RCC_OscConfig+0x2ac>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	4a8a      	ldr	r2, [pc, #552]	; (800c020 <HAL_RCC_OscConfig+0x2ac>)
 800bdf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bdfc:	6013      	str	r3, [r2, #0]
 800bdfe:	4b88      	ldr	r3, [pc, #544]	; (800c020 <HAL_RCC_OscConfig+0x2ac>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	4a87      	ldr	r2, [pc, #540]	; (800c020 <HAL_RCC_OscConfig+0x2ac>)
 800be04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be08:	6013      	str	r3, [r2, #0]
 800be0a:	e00b      	b.n	800be24 <HAL_RCC_OscConfig+0xb0>
 800be0c:	4b84      	ldr	r3, [pc, #528]	; (800c020 <HAL_RCC_OscConfig+0x2ac>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	4a83      	ldr	r2, [pc, #524]	; (800c020 <HAL_RCC_OscConfig+0x2ac>)
 800be12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be16:	6013      	str	r3, [r2, #0]
 800be18:	4b81      	ldr	r3, [pc, #516]	; (800c020 <HAL_RCC_OscConfig+0x2ac>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	4a80      	ldr	r2, [pc, #512]	; (800c020 <HAL_RCC_OscConfig+0x2ac>)
 800be1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800be22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d013      	beq.n	800be54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be2c:	f7fc fdd4 	bl	80089d8 <HAL_GetTick>
 800be30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800be32:	e008      	b.n	800be46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800be34:	f7fc fdd0 	bl	80089d8 <HAL_GetTick>
 800be38:	4602      	mov	r2, r0
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	1ad3      	subs	r3, r2, r3
 800be3e:	2b64      	cmp	r3, #100	; 0x64
 800be40:	d901      	bls.n	800be46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800be42:	2303      	movs	r3, #3
 800be44:	e204      	b.n	800c250 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800be46:	4b76      	ldr	r3, [pc, #472]	; (800c020 <HAL_RCC_OscConfig+0x2ac>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d0f0      	beq.n	800be34 <HAL_RCC_OscConfig+0xc0>
 800be52:	e014      	b.n	800be7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be54:	f7fc fdc0 	bl	80089d8 <HAL_GetTick>
 800be58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800be5a:	e008      	b.n	800be6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800be5c:	f7fc fdbc 	bl	80089d8 <HAL_GetTick>
 800be60:	4602      	mov	r2, r0
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	1ad3      	subs	r3, r2, r3
 800be66:	2b64      	cmp	r3, #100	; 0x64
 800be68:	d901      	bls.n	800be6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800be6a:	2303      	movs	r3, #3
 800be6c:	e1f0      	b.n	800c250 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800be6e:	4b6c      	ldr	r3, [pc, #432]	; (800c020 <HAL_RCC_OscConfig+0x2ac>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be76:	2b00      	cmp	r3, #0
 800be78:	d1f0      	bne.n	800be5c <HAL_RCC_OscConfig+0xe8>
 800be7a:	e000      	b.n	800be7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800be7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f003 0302 	and.w	r3, r3, #2
 800be86:	2b00      	cmp	r3, #0
 800be88:	d063      	beq.n	800bf52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800be8a:	4b65      	ldr	r3, [pc, #404]	; (800c020 <HAL_RCC_OscConfig+0x2ac>)
 800be8c:	689b      	ldr	r3, [r3, #8]
 800be8e:	f003 030c 	and.w	r3, r3, #12
 800be92:	2b00      	cmp	r3, #0
 800be94:	d00b      	beq.n	800beae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800be96:	4b62      	ldr	r3, [pc, #392]	; (800c020 <HAL_RCC_OscConfig+0x2ac>)
 800be98:	689b      	ldr	r3, [r3, #8]
 800be9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800be9e:	2b08      	cmp	r3, #8
 800bea0:	d11c      	bne.n	800bedc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bea2:	4b5f      	ldr	r3, [pc, #380]	; (800c020 <HAL_RCC_OscConfig+0x2ac>)
 800bea4:	685b      	ldr	r3, [r3, #4]
 800bea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d116      	bne.n	800bedc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800beae:	4b5c      	ldr	r3, [pc, #368]	; (800c020 <HAL_RCC_OscConfig+0x2ac>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f003 0302 	and.w	r3, r3, #2
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d005      	beq.n	800bec6 <HAL_RCC_OscConfig+0x152>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	68db      	ldr	r3, [r3, #12]
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d001      	beq.n	800bec6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800bec2:	2301      	movs	r3, #1
 800bec4:	e1c4      	b.n	800c250 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bec6:	4b56      	ldr	r3, [pc, #344]	; (800c020 <HAL_RCC_OscConfig+0x2ac>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	691b      	ldr	r3, [r3, #16]
 800bed2:	00db      	lsls	r3, r3, #3
 800bed4:	4952      	ldr	r1, [pc, #328]	; (800c020 <HAL_RCC_OscConfig+0x2ac>)
 800bed6:	4313      	orrs	r3, r2
 800bed8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800beda:	e03a      	b.n	800bf52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	68db      	ldr	r3, [r3, #12]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d020      	beq.n	800bf26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bee4:	4b4f      	ldr	r3, [pc, #316]	; (800c024 <HAL_RCC_OscConfig+0x2b0>)
 800bee6:	2201      	movs	r2, #1
 800bee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800beea:	f7fc fd75 	bl	80089d8 <HAL_GetTick>
 800beee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bef0:	e008      	b.n	800bf04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bef2:	f7fc fd71 	bl	80089d8 <HAL_GetTick>
 800bef6:	4602      	mov	r2, r0
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	1ad3      	subs	r3, r2, r3
 800befc:	2b02      	cmp	r3, #2
 800befe:	d901      	bls.n	800bf04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800bf00:	2303      	movs	r3, #3
 800bf02:	e1a5      	b.n	800c250 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bf04:	4b46      	ldr	r3, [pc, #280]	; (800c020 <HAL_RCC_OscConfig+0x2ac>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f003 0302 	and.w	r3, r3, #2
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d0f0      	beq.n	800bef2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bf10:	4b43      	ldr	r3, [pc, #268]	; (800c020 <HAL_RCC_OscConfig+0x2ac>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	691b      	ldr	r3, [r3, #16]
 800bf1c:	00db      	lsls	r3, r3, #3
 800bf1e:	4940      	ldr	r1, [pc, #256]	; (800c020 <HAL_RCC_OscConfig+0x2ac>)
 800bf20:	4313      	orrs	r3, r2
 800bf22:	600b      	str	r3, [r1, #0]
 800bf24:	e015      	b.n	800bf52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bf26:	4b3f      	ldr	r3, [pc, #252]	; (800c024 <HAL_RCC_OscConfig+0x2b0>)
 800bf28:	2200      	movs	r2, #0
 800bf2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf2c:	f7fc fd54 	bl	80089d8 <HAL_GetTick>
 800bf30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bf32:	e008      	b.n	800bf46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bf34:	f7fc fd50 	bl	80089d8 <HAL_GetTick>
 800bf38:	4602      	mov	r2, r0
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	1ad3      	subs	r3, r2, r3
 800bf3e:	2b02      	cmp	r3, #2
 800bf40:	d901      	bls.n	800bf46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800bf42:	2303      	movs	r3, #3
 800bf44:	e184      	b.n	800c250 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bf46:	4b36      	ldr	r3, [pc, #216]	; (800c020 <HAL_RCC_OscConfig+0x2ac>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f003 0302 	and.w	r3, r3, #2
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d1f0      	bne.n	800bf34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f003 0308 	and.w	r3, r3, #8
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d030      	beq.n	800bfc0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	695b      	ldr	r3, [r3, #20]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d016      	beq.n	800bf94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bf66:	4b30      	ldr	r3, [pc, #192]	; (800c028 <HAL_RCC_OscConfig+0x2b4>)
 800bf68:	2201      	movs	r2, #1
 800bf6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf6c:	f7fc fd34 	bl	80089d8 <HAL_GetTick>
 800bf70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bf72:	e008      	b.n	800bf86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bf74:	f7fc fd30 	bl	80089d8 <HAL_GetTick>
 800bf78:	4602      	mov	r2, r0
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	1ad3      	subs	r3, r2, r3
 800bf7e:	2b02      	cmp	r3, #2
 800bf80:	d901      	bls.n	800bf86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800bf82:	2303      	movs	r3, #3
 800bf84:	e164      	b.n	800c250 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bf86:	4b26      	ldr	r3, [pc, #152]	; (800c020 <HAL_RCC_OscConfig+0x2ac>)
 800bf88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf8a:	f003 0302 	and.w	r3, r3, #2
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d0f0      	beq.n	800bf74 <HAL_RCC_OscConfig+0x200>
 800bf92:	e015      	b.n	800bfc0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bf94:	4b24      	ldr	r3, [pc, #144]	; (800c028 <HAL_RCC_OscConfig+0x2b4>)
 800bf96:	2200      	movs	r2, #0
 800bf98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bf9a:	f7fc fd1d 	bl	80089d8 <HAL_GetTick>
 800bf9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bfa0:	e008      	b.n	800bfb4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bfa2:	f7fc fd19 	bl	80089d8 <HAL_GetTick>
 800bfa6:	4602      	mov	r2, r0
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	1ad3      	subs	r3, r2, r3
 800bfac:	2b02      	cmp	r3, #2
 800bfae:	d901      	bls.n	800bfb4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800bfb0:	2303      	movs	r3, #3
 800bfb2:	e14d      	b.n	800c250 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bfb4:	4b1a      	ldr	r3, [pc, #104]	; (800c020 <HAL_RCC_OscConfig+0x2ac>)
 800bfb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfb8:	f003 0302 	and.w	r3, r3, #2
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d1f0      	bne.n	800bfa2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f003 0304 	and.w	r3, r3, #4
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	f000 80a0 	beq.w	800c10e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bfd2:	4b13      	ldr	r3, [pc, #76]	; (800c020 <HAL_RCC_OscConfig+0x2ac>)
 800bfd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d10f      	bne.n	800bffe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bfde:	2300      	movs	r3, #0
 800bfe0:	60bb      	str	r3, [r7, #8]
 800bfe2:	4b0f      	ldr	r3, [pc, #60]	; (800c020 <HAL_RCC_OscConfig+0x2ac>)
 800bfe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfe6:	4a0e      	ldr	r2, [pc, #56]	; (800c020 <HAL_RCC_OscConfig+0x2ac>)
 800bfe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bfec:	6413      	str	r3, [r2, #64]	; 0x40
 800bfee:	4b0c      	ldr	r3, [pc, #48]	; (800c020 <HAL_RCC_OscConfig+0x2ac>)
 800bff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bff6:	60bb      	str	r3, [r7, #8]
 800bff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bffa:	2301      	movs	r3, #1
 800bffc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bffe:	4b0b      	ldr	r3, [pc, #44]	; (800c02c <HAL_RCC_OscConfig+0x2b8>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c006:	2b00      	cmp	r3, #0
 800c008:	d121      	bne.n	800c04e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c00a:	4b08      	ldr	r3, [pc, #32]	; (800c02c <HAL_RCC_OscConfig+0x2b8>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	4a07      	ldr	r2, [pc, #28]	; (800c02c <HAL_RCC_OscConfig+0x2b8>)
 800c010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c016:	f7fc fcdf 	bl	80089d8 <HAL_GetTick>
 800c01a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c01c:	e011      	b.n	800c042 <HAL_RCC_OscConfig+0x2ce>
 800c01e:	bf00      	nop
 800c020:	40023800 	.word	0x40023800
 800c024:	42470000 	.word	0x42470000
 800c028:	42470e80 	.word	0x42470e80
 800c02c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c030:	f7fc fcd2 	bl	80089d8 <HAL_GetTick>
 800c034:	4602      	mov	r2, r0
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	1ad3      	subs	r3, r2, r3
 800c03a:	2b02      	cmp	r3, #2
 800c03c:	d901      	bls.n	800c042 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800c03e:	2303      	movs	r3, #3
 800c040:	e106      	b.n	800c250 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c042:	4b85      	ldr	r3, [pc, #532]	; (800c258 <HAL_RCC_OscConfig+0x4e4>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d0f0      	beq.n	800c030 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	689b      	ldr	r3, [r3, #8]
 800c052:	2b01      	cmp	r3, #1
 800c054:	d106      	bne.n	800c064 <HAL_RCC_OscConfig+0x2f0>
 800c056:	4b81      	ldr	r3, [pc, #516]	; (800c25c <HAL_RCC_OscConfig+0x4e8>)
 800c058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c05a:	4a80      	ldr	r2, [pc, #512]	; (800c25c <HAL_RCC_OscConfig+0x4e8>)
 800c05c:	f043 0301 	orr.w	r3, r3, #1
 800c060:	6713      	str	r3, [r2, #112]	; 0x70
 800c062:	e01c      	b.n	800c09e <HAL_RCC_OscConfig+0x32a>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	689b      	ldr	r3, [r3, #8]
 800c068:	2b05      	cmp	r3, #5
 800c06a:	d10c      	bne.n	800c086 <HAL_RCC_OscConfig+0x312>
 800c06c:	4b7b      	ldr	r3, [pc, #492]	; (800c25c <HAL_RCC_OscConfig+0x4e8>)
 800c06e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c070:	4a7a      	ldr	r2, [pc, #488]	; (800c25c <HAL_RCC_OscConfig+0x4e8>)
 800c072:	f043 0304 	orr.w	r3, r3, #4
 800c076:	6713      	str	r3, [r2, #112]	; 0x70
 800c078:	4b78      	ldr	r3, [pc, #480]	; (800c25c <HAL_RCC_OscConfig+0x4e8>)
 800c07a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c07c:	4a77      	ldr	r2, [pc, #476]	; (800c25c <HAL_RCC_OscConfig+0x4e8>)
 800c07e:	f043 0301 	orr.w	r3, r3, #1
 800c082:	6713      	str	r3, [r2, #112]	; 0x70
 800c084:	e00b      	b.n	800c09e <HAL_RCC_OscConfig+0x32a>
 800c086:	4b75      	ldr	r3, [pc, #468]	; (800c25c <HAL_RCC_OscConfig+0x4e8>)
 800c088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c08a:	4a74      	ldr	r2, [pc, #464]	; (800c25c <HAL_RCC_OscConfig+0x4e8>)
 800c08c:	f023 0301 	bic.w	r3, r3, #1
 800c090:	6713      	str	r3, [r2, #112]	; 0x70
 800c092:	4b72      	ldr	r3, [pc, #456]	; (800c25c <HAL_RCC_OscConfig+0x4e8>)
 800c094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c096:	4a71      	ldr	r2, [pc, #452]	; (800c25c <HAL_RCC_OscConfig+0x4e8>)
 800c098:	f023 0304 	bic.w	r3, r3, #4
 800c09c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	689b      	ldr	r3, [r3, #8]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d015      	beq.n	800c0d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c0a6:	f7fc fc97 	bl	80089d8 <HAL_GetTick>
 800c0aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c0ac:	e00a      	b.n	800c0c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c0ae:	f7fc fc93 	bl	80089d8 <HAL_GetTick>
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	1ad3      	subs	r3, r2, r3
 800c0b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d901      	bls.n	800c0c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800c0c0:	2303      	movs	r3, #3
 800c0c2:	e0c5      	b.n	800c250 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c0c4:	4b65      	ldr	r3, [pc, #404]	; (800c25c <HAL_RCC_OscConfig+0x4e8>)
 800c0c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0c8:	f003 0302 	and.w	r3, r3, #2
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d0ee      	beq.n	800c0ae <HAL_RCC_OscConfig+0x33a>
 800c0d0:	e014      	b.n	800c0fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c0d2:	f7fc fc81 	bl	80089d8 <HAL_GetTick>
 800c0d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c0d8:	e00a      	b.n	800c0f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c0da:	f7fc fc7d 	bl	80089d8 <HAL_GetTick>
 800c0de:	4602      	mov	r2, r0
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	1ad3      	subs	r3, r2, r3
 800c0e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d901      	bls.n	800c0f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800c0ec:	2303      	movs	r3, #3
 800c0ee:	e0af      	b.n	800c250 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c0f0:	4b5a      	ldr	r3, [pc, #360]	; (800c25c <HAL_RCC_OscConfig+0x4e8>)
 800c0f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0f4:	f003 0302 	and.w	r3, r3, #2
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d1ee      	bne.n	800c0da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c0fc:	7dfb      	ldrb	r3, [r7, #23]
 800c0fe:	2b01      	cmp	r3, #1
 800c100:	d105      	bne.n	800c10e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c102:	4b56      	ldr	r3, [pc, #344]	; (800c25c <HAL_RCC_OscConfig+0x4e8>)
 800c104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c106:	4a55      	ldr	r2, [pc, #340]	; (800c25c <HAL_RCC_OscConfig+0x4e8>)
 800c108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c10c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	699b      	ldr	r3, [r3, #24]
 800c112:	2b00      	cmp	r3, #0
 800c114:	f000 809b 	beq.w	800c24e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c118:	4b50      	ldr	r3, [pc, #320]	; (800c25c <HAL_RCC_OscConfig+0x4e8>)
 800c11a:	689b      	ldr	r3, [r3, #8]
 800c11c:	f003 030c 	and.w	r3, r3, #12
 800c120:	2b08      	cmp	r3, #8
 800c122:	d05c      	beq.n	800c1de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	699b      	ldr	r3, [r3, #24]
 800c128:	2b02      	cmp	r3, #2
 800c12a:	d141      	bne.n	800c1b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c12c:	4b4c      	ldr	r3, [pc, #304]	; (800c260 <HAL_RCC_OscConfig+0x4ec>)
 800c12e:	2200      	movs	r2, #0
 800c130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c132:	f7fc fc51 	bl	80089d8 <HAL_GetTick>
 800c136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c138:	e008      	b.n	800c14c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c13a:	f7fc fc4d 	bl	80089d8 <HAL_GetTick>
 800c13e:	4602      	mov	r2, r0
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	1ad3      	subs	r3, r2, r3
 800c144:	2b02      	cmp	r3, #2
 800c146:	d901      	bls.n	800c14c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800c148:	2303      	movs	r3, #3
 800c14a:	e081      	b.n	800c250 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c14c:	4b43      	ldr	r3, [pc, #268]	; (800c25c <HAL_RCC_OscConfig+0x4e8>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c154:	2b00      	cmp	r3, #0
 800c156:	d1f0      	bne.n	800c13a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	69da      	ldr	r2, [r3, #28]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6a1b      	ldr	r3, [r3, #32]
 800c160:	431a      	orrs	r2, r3
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c166:	019b      	lsls	r3, r3, #6
 800c168:	431a      	orrs	r2, r3
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c16e:	085b      	lsrs	r3, r3, #1
 800c170:	3b01      	subs	r3, #1
 800c172:	041b      	lsls	r3, r3, #16
 800c174:	431a      	orrs	r2, r3
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c17a:	061b      	lsls	r3, r3, #24
 800c17c:	4937      	ldr	r1, [pc, #220]	; (800c25c <HAL_RCC_OscConfig+0x4e8>)
 800c17e:	4313      	orrs	r3, r2
 800c180:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c182:	4b37      	ldr	r3, [pc, #220]	; (800c260 <HAL_RCC_OscConfig+0x4ec>)
 800c184:	2201      	movs	r2, #1
 800c186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c188:	f7fc fc26 	bl	80089d8 <HAL_GetTick>
 800c18c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c18e:	e008      	b.n	800c1a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c190:	f7fc fc22 	bl	80089d8 <HAL_GetTick>
 800c194:	4602      	mov	r2, r0
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	1ad3      	subs	r3, r2, r3
 800c19a:	2b02      	cmp	r3, #2
 800c19c:	d901      	bls.n	800c1a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800c19e:	2303      	movs	r3, #3
 800c1a0:	e056      	b.n	800c250 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c1a2:	4b2e      	ldr	r3, [pc, #184]	; (800c25c <HAL_RCC_OscConfig+0x4e8>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d0f0      	beq.n	800c190 <HAL_RCC_OscConfig+0x41c>
 800c1ae:	e04e      	b.n	800c24e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c1b0:	4b2b      	ldr	r3, [pc, #172]	; (800c260 <HAL_RCC_OscConfig+0x4ec>)
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c1b6:	f7fc fc0f 	bl	80089d8 <HAL_GetTick>
 800c1ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c1bc:	e008      	b.n	800c1d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c1be:	f7fc fc0b 	bl	80089d8 <HAL_GetTick>
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	1ad3      	subs	r3, r2, r3
 800c1c8:	2b02      	cmp	r3, #2
 800c1ca:	d901      	bls.n	800c1d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800c1cc:	2303      	movs	r3, #3
 800c1ce:	e03f      	b.n	800c250 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c1d0:	4b22      	ldr	r3, [pc, #136]	; (800c25c <HAL_RCC_OscConfig+0x4e8>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d1f0      	bne.n	800c1be <HAL_RCC_OscConfig+0x44a>
 800c1dc:	e037      	b.n	800c24e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	699b      	ldr	r3, [r3, #24]
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d101      	bne.n	800c1ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	e032      	b.n	800c250 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c1ea:	4b1c      	ldr	r3, [pc, #112]	; (800c25c <HAL_RCC_OscConfig+0x4e8>)
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	699b      	ldr	r3, [r3, #24]
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	d028      	beq.n	800c24a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c202:	429a      	cmp	r2, r3
 800c204:	d121      	bne.n	800c24a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c210:	429a      	cmp	r2, r3
 800c212:	d11a      	bne.n	800c24a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c214:	68fa      	ldr	r2, [r7, #12]
 800c216:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c21a:	4013      	ands	r3, r2
 800c21c:	687a      	ldr	r2, [r7, #4]
 800c21e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c220:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c222:	4293      	cmp	r3, r2
 800c224:	d111      	bne.n	800c24a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c230:	085b      	lsrs	r3, r3, #1
 800c232:	3b01      	subs	r3, #1
 800c234:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c236:	429a      	cmp	r2, r3
 800c238:	d107      	bne.n	800c24a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c244:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c246:	429a      	cmp	r2, r3
 800c248:	d001      	beq.n	800c24e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800c24a:	2301      	movs	r3, #1
 800c24c:	e000      	b.n	800c250 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800c24e:	2300      	movs	r3, #0
}
 800c250:	4618      	mov	r0, r3
 800c252:	3718      	adds	r7, #24
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}
 800c258:	40007000 	.word	0x40007000
 800c25c:	40023800 	.word	0x40023800
 800c260:	42470060 	.word	0x42470060

0800c264 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b084      	sub	sp, #16
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d101      	bne.n	800c278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c274:	2301      	movs	r3, #1
 800c276:	e0cc      	b.n	800c412 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c278:	4b68      	ldr	r3, [pc, #416]	; (800c41c <HAL_RCC_ClockConfig+0x1b8>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f003 030f 	and.w	r3, r3, #15
 800c280:	683a      	ldr	r2, [r7, #0]
 800c282:	429a      	cmp	r2, r3
 800c284:	d90c      	bls.n	800c2a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c286:	4b65      	ldr	r3, [pc, #404]	; (800c41c <HAL_RCC_ClockConfig+0x1b8>)
 800c288:	683a      	ldr	r2, [r7, #0]
 800c28a:	b2d2      	uxtb	r2, r2
 800c28c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c28e:	4b63      	ldr	r3, [pc, #396]	; (800c41c <HAL_RCC_ClockConfig+0x1b8>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f003 030f 	and.w	r3, r3, #15
 800c296:	683a      	ldr	r2, [r7, #0]
 800c298:	429a      	cmp	r2, r3
 800c29a:	d001      	beq.n	800c2a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c29c:	2301      	movs	r3, #1
 800c29e:	e0b8      	b.n	800c412 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f003 0302 	and.w	r3, r3, #2
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d020      	beq.n	800c2ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f003 0304 	and.w	r3, r3, #4
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d005      	beq.n	800c2c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c2b8:	4b59      	ldr	r3, [pc, #356]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c2ba:	689b      	ldr	r3, [r3, #8]
 800c2bc:	4a58      	ldr	r2, [pc, #352]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c2be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c2c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f003 0308 	and.w	r3, r3, #8
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d005      	beq.n	800c2dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c2d0:	4b53      	ldr	r3, [pc, #332]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c2d2:	689b      	ldr	r3, [r3, #8]
 800c2d4:	4a52      	ldr	r2, [pc, #328]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c2d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c2da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c2dc:	4b50      	ldr	r3, [pc, #320]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c2de:	689b      	ldr	r3, [r3, #8]
 800c2e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	689b      	ldr	r3, [r3, #8]
 800c2e8:	494d      	ldr	r1, [pc, #308]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f003 0301 	and.w	r3, r3, #1
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d044      	beq.n	800c384 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	2b01      	cmp	r3, #1
 800c300:	d107      	bne.n	800c312 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c302:	4b47      	ldr	r3, [pc, #284]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d119      	bne.n	800c342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c30e:	2301      	movs	r3, #1
 800c310:	e07f      	b.n	800c412 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	685b      	ldr	r3, [r3, #4]
 800c316:	2b02      	cmp	r3, #2
 800c318:	d003      	beq.n	800c322 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c31e:	2b03      	cmp	r3, #3
 800c320:	d107      	bne.n	800c332 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c322:	4b3f      	ldr	r3, [pc, #252]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d109      	bne.n	800c342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c32e:	2301      	movs	r3, #1
 800c330:	e06f      	b.n	800c412 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c332:	4b3b      	ldr	r3, [pc, #236]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f003 0302 	and.w	r3, r3, #2
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d101      	bne.n	800c342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c33e:	2301      	movs	r3, #1
 800c340:	e067      	b.n	800c412 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c342:	4b37      	ldr	r3, [pc, #220]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c344:	689b      	ldr	r3, [r3, #8]
 800c346:	f023 0203 	bic.w	r2, r3, #3
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	4934      	ldr	r1, [pc, #208]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c350:	4313      	orrs	r3, r2
 800c352:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c354:	f7fc fb40 	bl	80089d8 <HAL_GetTick>
 800c358:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c35a:	e00a      	b.n	800c372 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c35c:	f7fc fb3c 	bl	80089d8 <HAL_GetTick>
 800c360:	4602      	mov	r2, r0
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	1ad3      	subs	r3, r2, r3
 800c366:	f241 3288 	movw	r2, #5000	; 0x1388
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d901      	bls.n	800c372 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c36e:	2303      	movs	r3, #3
 800c370:	e04f      	b.n	800c412 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c372:	4b2b      	ldr	r3, [pc, #172]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c374:	689b      	ldr	r3, [r3, #8]
 800c376:	f003 020c 	and.w	r2, r3, #12
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	685b      	ldr	r3, [r3, #4]
 800c37e:	009b      	lsls	r3, r3, #2
 800c380:	429a      	cmp	r2, r3
 800c382:	d1eb      	bne.n	800c35c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c384:	4b25      	ldr	r3, [pc, #148]	; (800c41c <HAL_RCC_ClockConfig+0x1b8>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f003 030f 	and.w	r3, r3, #15
 800c38c:	683a      	ldr	r2, [r7, #0]
 800c38e:	429a      	cmp	r2, r3
 800c390:	d20c      	bcs.n	800c3ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c392:	4b22      	ldr	r3, [pc, #136]	; (800c41c <HAL_RCC_ClockConfig+0x1b8>)
 800c394:	683a      	ldr	r2, [r7, #0]
 800c396:	b2d2      	uxtb	r2, r2
 800c398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c39a:	4b20      	ldr	r3, [pc, #128]	; (800c41c <HAL_RCC_ClockConfig+0x1b8>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f003 030f 	and.w	r3, r3, #15
 800c3a2:	683a      	ldr	r2, [r7, #0]
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d001      	beq.n	800c3ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	e032      	b.n	800c412 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f003 0304 	and.w	r3, r3, #4
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d008      	beq.n	800c3ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c3b8:	4b19      	ldr	r3, [pc, #100]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c3ba:	689b      	ldr	r3, [r3, #8]
 800c3bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	68db      	ldr	r3, [r3, #12]
 800c3c4:	4916      	ldr	r1, [pc, #88]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f003 0308 	and.w	r3, r3, #8
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d009      	beq.n	800c3ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c3d6:	4b12      	ldr	r3, [pc, #72]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c3d8:	689b      	ldr	r3, [r3, #8]
 800c3da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	691b      	ldr	r3, [r3, #16]
 800c3e2:	00db      	lsls	r3, r3, #3
 800c3e4:	490e      	ldr	r1, [pc, #56]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c3e6:	4313      	orrs	r3, r2
 800c3e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c3ea:	f000 f821 	bl	800c430 <HAL_RCC_GetSysClockFreq>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	4b0b      	ldr	r3, [pc, #44]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c3f2:	689b      	ldr	r3, [r3, #8]
 800c3f4:	091b      	lsrs	r3, r3, #4
 800c3f6:	f003 030f 	and.w	r3, r3, #15
 800c3fa:	490a      	ldr	r1, [pc, #40]	; (800c424 <HAL_RCC_ClockConfig+0x1c0>)
 800c3fc:	5ccb      	ldrb	r3, [r1, r3]
 800c3fe:	fa22 f303 	lsr.w	r3, r2, r3
 800c402:	4a09      	ldr	r2, [pc, #36]	; (800c428 <HAL_RCC_ClockConfig+0x1c4>)
 800c404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c406:	4b09      	ldr	r3, [pc, #36]	; (800c42c <HAL_RCC_ClockConfig+0x1c8>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4618      	mov	r0, r3
 800c40c:	f7f6 ff2e 	bl	800326c <HAL_InitTick>

  return HAL_OK;
 800c410:	2300      	movs	r3, #0
}
 800c412:	4618      	mov	r0, r3
 800c414:	3710      	adds	r7, #16
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
 800c41a:	bf00      	nop
 800c41c:	40023c00 	.word	0x40023c00
 800c420:	40023800 	.word	0x40023800
 800c424:	08022e94 	.word	0x08022e94
 800c428:	20000004 	.word	0x20000004
 800c42c:	2000005c 	.word	0x2000005c

0800c430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c430:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c434:	b084      	sub	sp, #16
 800c436:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c438:	2300      	movs	r3, #0
 800c43a:	607b      	str	r3, [r7, #4]
 800c43c:	2300      	movs	r3, #0
 800c43e:	60fb      	str	r3, [r7, #12]
 800c440:	2300      	movs	r3, #0
 800c442:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c444:	2300      	movs	r3, #0
 800c446:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c448:	4b67      	ldr	r3, [pc, #412]	; (800c5e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c44a:	689b      	ldr	r3, [r3, #8]
 800c44c:	f003 030c 	and.w	r3, r3, #12
 800c450:	2b08      	cmp	r3, #8
 800c452:	d00d      	beq.n	800c470 <HAL_RCC_GetSysClockFreq+0x40>
 800c454:	2b08      	cmp	r3, #8
 800c456:	f200 80bd 	bhi.w	800c5d4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d002      	beq.n	800c464 <HAL_RCC_GetSysClockFreq+0x34>
 800c45e:	2b04      	cmp	r3, #4
 800c460:	d003      	beq.n	800c46a <HAL_RCC_GetSysClockFreq+0x3a>
 800c462:	e0b7      	b.n	800c5d4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c464:	4b61      	ldr	r3, [pc, #388]	; (800c5ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c466:	60bb      	str	r3, [r7, #8]
       break;
 800c468:	e0b7      	b.n	800c5da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c46a:	4b60      	ldr	r3, [pc, #384]	; (800c5ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c46c:	60bb      	str	r3, [r7, #8]
      break;
 800c46e:	e0b4      	b.n	800c5da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c470:	4b5d      	ldr	r3, [pc, #372]	; (800c5e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c472:	685b      	ldr	r3, [r3, #4]
 800c474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c478:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c47a:	4b5b      	ldr	r3, [pc, #364]	; (800c5e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c47c:	685b      	ldr	r3, [r3, #4]
 800c47e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c482:	2b00      	cmp	r3, #0
 800c484:	d04d      	beq.n	800c522 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c486:	4b58      	ldr	r3, [pc, #352]	; (800c5e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	099b      	lsrs	r3, r3, #6
 800c48c:	461a      	mov	r2, r3
 800c48e:	f04f 0300 	mov.w	r3, #0
 800c492:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c496:	f04f 0100 	mov.w	r1, #0
 800c49a:	ea02 0800 	and.w	r8, r2, r0
 800c49e:	ea03 0901 	and.w	r9, r3, r1
 800c4a2:	4640      	mov	r0, r8
 800c4a4:	4649      	mov	r1, r9
 800c4a6:	f04f 0200 	mov.w	r2, #0
 800c4aa:	f04f 0300 	mov.w	r3, #0
 800c4ae:	014b      	lsls	r3, r1, #5
 800c4b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c4b4:	0142      	lsls	r2, r0, #5
 800c4b6:	4610      	mov	r0, r2
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	ebb0 0008 	subs.w	r0, r0, r8
 800c4be:	eb61 0109 	sbc.w	r1, r1, r9
 800c4c2:	f04f 0200 	mov.w	r2, #0
 800c4c6:	f04f 0300 	mov.w	r3, #0
 800c4ca:	018b      	lsls	r3, r1, #6
 800c4cc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c4d0:	0182      	lsls	r2, r0, #6
 800c4d2:	1a12      	subs	r2, r2, r0
 800c4d4:	eb63 0301 	sbc.w	r3, r3, r1
 800c4d8:	f04f 0000 	mov.w	r0, #0
 800c4dc:	f04f 0100 	mov.w	r1, #0
 800c4e0:	00d9      	lsls	r1, r3, #3
 800c4e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c4e6:	00d0      	lsls	r0, r2, #3
 800c4e8:	4602      	mov	r2, r0
 800c4ea:	460b      	mov	r3, r1
 800c4ec:	eb12 0208 	adds.w	r2, r2, r8
 800c4f0:	eb43 0309 	adc.w	r3, r3, r9
 800c4f4:	f04f 0000 	mov.w	r0, #0
 800c4f8:	f04f 0100 	mov.w	r1, #0
 800c4fc:	0299      	lsls	r1, r3, #10
 800c4fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800c502:	0290      	lsls	r0, r2, #10
 800c504:	4602      	mov	r2, r0
 800c506:	460b      	mov	r3, r1
 800c508:	4610      	mov	r0, r2
 800c50a:	4619      	mov	r1, r3
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	461a      	mov	r2, r3
 800c510:	f04f 0300 	mov.w	r3, #0
 800c514:	f7f4 fc28 	bl	8000d68 <__aeabi_uldivmod>
 800c518:	4602      	mov	r2, r0
 800c51a:	460b      	mov	r3, r1
 800c51c:	4613      	mov	r3, r2
 800c51e:	60fb      	str	r3, [r7, #12]
 800c520:	e04a      	b.n	800c5b8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c522:	4b31      	ldr	r3, [pc, #196]	; (800c5e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c524:	685b      	ldr	r3, [r3, #4]
 800c526:	099b      	lsrs	r3, r3, #6
 800c528:	461a      	mov	r2, r3
 800c52a:	f04f 0300 	mov.w	r3, #0
 800c52e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c532:	f04f 0100 	mov.w	r1, #0
 800c536:	ea02 0400 	and.w	r4, r2, r0
 800c53a:	ea03 0501 	and.w	r5, r3, r1
 800c53e:	4620      	mov	r0, r4
 800c540:	4629      	mov	r1, r5
 800c542:	f04f 0200 	mov.w	r2, #0
 800c546:	f04f 0300 	mov.w	r3, #0
 800c54a:	014b      	lsls	r3, r1, #5
 800c54c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c550:	0142      	lsls	r2, r0, #5
 800c552:	4610      	mov	r0, r2
 800c554:	4619      	mov	r1, r3
 800c556:	1b00      	subs	r0, r0, r4
 800c558:	eb61 0105 	sbc.w	r1, r1, r5
 800c55c:	f04f 0200 	mov.w	r2, #0
 800c560:	f04f 0300 	mov.w	r3, #0
 800c564:	018b      	lsls	r3, r1, #6
 800c566:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c56a:	0182      	lsls	r2, r0, #6
 800c56c:	1a12      	subs	r2, r2, r0
 800c56e:	eb63 0301 	sbc.w	r3, r3, r1
 800c572:	f04f 0000 	mov.w	r0, #0
 800c576:	f04f 0100 	mov.w	r1, #0
 800c57a:	00d9      	lsls	r1, r3, #3
 800c57c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c580:	00d0      	lsls	r0, r2, #3
 800c582:	4602      	mov	r2, r0
 800c584:	460b      	mov	r3, r1
 800c586:	1912      	adds	r2, r2, r4
 800c588:	eb45 0303 	adc.w	r3, r5, r3
 800c58c:	f04f 0000 	mov.w	r0, #0
 800c590:	f04f 0100 	mov.w	r1, #0
 800c594:	0299      	lsls	r1, r3, #10
 800c596:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800c59a:	0290      	lsls	r0, r2, #10
 800c59c:	4602      	mov	r2, r0
 800c59e:	460b      	mov	r3, r1
 800c5a0:	4610      	mov	r0, r2
 800c5a2:	4619      	mov	r1, r3
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	f04f 0300 	mov.w	r3, #0
 800c5ac:	f7f4 fbdc 	bl	8000d68 <__aeabi_uldivmod>
 800c5b0:	4602      	mov	r2, r0
 800c5b2:	460b      	mov	r3, r1
 800c5b4:	4613      	mov	r3, r2
 800c5b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c5b8:	4b0b      	ldr	r3, [pc, #44]	; (800c5e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c5ba:	685b      	ldr	r3, [r3, #4]
 800c5bc:	0c1b      	lsrs	r3, r3, #16
 800c5be:	f003 0303 	and.w	r3, r3, #3
 800c5c2:	3301      	adds	r3, #1
 800c5c4:	005b      	lsls	r3, r3, #1
 800c5c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c5c8:	68fa      	ldr	r2, [r7, #12]
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5d0:	60bb      	str	r3, [r7, #8]
      break;
 800c5d2:	e002      	b.n	800c5da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c5d4:	4b05      	ldr	r3, [pc, #20]	; (800c5ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c5d6:	60bb      	str	r3, [r7, #8]
      break;
 800c5d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c5da:	68bb      	ldr	r3, [r7, #8]
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3710      	adds	r7, #16
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c5e6:	bf00      	nop
 800c5e8:	40023800 	.word	0x40023800
 800c5ec:	00f42400 	.word	0x00f42400

0800c5f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c5f4:	4b03      	ldr	r3, [pc, #12]	; (800c604 <HAL_RCC_GetHCLKFreq+0x14>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c600:	4770      	bx	lr
 800c602:	bf00      	nop
 800c604:	20000004 	.word	0x20000004

0800c608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c60c:	f7ff fff0 	bl	800c5f0 <HAL_RCC_GetHCLKFreq>
 800c610:	4602      	mov	r2, r0
 800c612:	4b05      	ldr	r3, [pc, #20]	; (800c628 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c614:	689b      	ldr	r3, [r3, #8]
 800c616:	0a9b      	lsrs	r3, r3, #10
 800c618:	f003 0307 	and.w	r3, r3, #7
 800c61c:	4903      	ldr	r1, [pc, #12]	; (800c62c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c61e:	5ccb      	ldrb	r3, [r1, r3]
 800c620:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c624:	4618      	mov	r0, r3
 800c626:	bd80      	pop	{r7, pc}
 800c628:	40023800 	.word	0x40023800
 800c62c:	08022ea4 	.word	0x08022ea4

0800c630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c634:	f7ff ffdc 	bl	800c5f0 <HAL_RCC_GetHCLKFreq>
 800c638:	4602      	mov	r2, r0
 800c63a:	4b05      	ldr	r3, [pc, #20]	; (800c650 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c63c:	689b      	ldr	r3, [r3, #8]
 800c63e:	0b5b      	lsrs	r3, r3, #13
 800c640:	f003 0307 	and.w	r3, r3, #7
 800c644:	4903      	ldr	r1, [pc, #12]	; (800c654 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c646:	5ccb      	ldrb	r3, [r1, r3]
 800c648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	bd80      	pop	{r7, pc}
 800c650:	40023800 	.word	0x40023800
 800c654:	08022ea4 	.word	0x08022ea4

0800c658 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c658:	b480      	push	{r7}
 800c65a:	b083      	sub	sp, #12
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	220f      	movs	r2, #15
 800c666:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c668:	4b12      	ldr	r3, [pc, #72]	; (800c6b4 <HAL_RCC_GetClockConfig+0x5c>)
 800c66a:	689b      	ldr	r3, [r3, #8]
 800c66c:	f003 0203 	and.w	r2, r3, #3
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800c674:	4b0f      	ldr	r3, [pc, #60]	; (800c6b4 <HAL_RCC_GetClockConfig+0x5c>)
 800c676:	689b      	ldr	r3, [r3, #8]
 800c678:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800c680:	4b0c      	ldr	r3, [pc, #48]	; (800c6b4 <HAL_RCC_GetClockConfig+0x5c>)
 800c682:	689b      	ldr	r3, [r3, #8]
 800c684:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800c68c:	4b09      	ldr	r3, [pc, #36]	; (800c6b4 <HAL_RCC_GetClockConfig+0x5c>)
 800c68e:	689b      	ldr	r3, [r3, #8]
 800c690:	08db      	lsrs	r3, r3, #3
 800c692:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c69a:	4b07      	ldr	r3, [pc, #28]	; (800c6b8 <HAL_RCC_GetClockConfig+0x60>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f003 020f 	and.w	r2, r3, #15
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	601a      	str	r2, [r3, #0]
}
 800c6a6:	bf00      	nop
 800c6a8:	370c      	adds	r7, #12
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b0:	4770      	bx	lr
 800c6b2:	bf00      	nop
 800c6b4:	40023800 	.word	0x40023800
 800c6b8:	40023c00 	.word	0x40023c00

0800c6bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b086      	sub	sp, #24
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	f003 0301 	and.w	r3, r3, #1
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d10b      	bne.n	800c6f0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d105      	bne.n	800c6f0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d075      	beq.n	800c7dc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c6f0:	4bad      	ldr	r3, [pc, #692]	; (800c9a8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c6f6:	f7fc f96f 	bl	80089d8 <HAL_GetTick>
 800c6fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c6fc:	e008      	b.n	800c710 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c6fe:	f7fc f96b 	bl	80089d8 <HAL_GetTick>
 800c702:	4602      	mov	r2, r0
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	1ad3      	subs	r3, r2, r3
 800c708:	2b02      	cmp	r3, #2
 800c70a:	d901      	bls.n	800c710 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c70c:	2303      	movs	r3, #3
 800c70e:	e18b      	b.n	800ca28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c710:	4ba6      	ldr	r3, [pc, #664]	; (800c9ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d1f0      	bne.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f003 0301 	and.w	r3, r3, #1
 800c724:	2b00      	cmp	r3, #0
 800c726:	d009      	beq.n	800c73c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	019a      	lsls	r2, r3, #6
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	689b      	ldr	r3, [r3, #8]
 800c732:	071b      	lsls	r3, r3, #28
 800c734:	499d      	ldr	r1, [pc, #628]	; (800c9ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c736:	4313      	orrs	r3, r2
 800c738:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f003 0302 	and.w	r3, r3, #2
 800c744:	2b00      	cmp	r3, #0
 800c746:	d01f      	beq.n	800c788 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c748:	4b98      	ldr	r3, [pc, #608]	; (800c9ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c74a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c74e:	0f1b      	lsrs	r3, r3, #28
 800c750:	f003 0307 	and.w	r3, r3, #7
 800c754:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	685b      	ldr	r3, [r3, #4]
 800c75a:	019a      	lsls	r2, r3, #6
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	68db      	ldr	r3, [r3, #12]
 800c760:	061b      	lsls	r3, r3, #24
 800c762:	431a      	orrs	r2, r3
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	071b      	lsls	r3, r3, #28
 800c768:	4990      	ldr	r1, [pc, #576]	; (800c9ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c76a:	4313      	orrs	r3, r2
 800c76c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c770:	4b8e      	ldr	r3, [pc, #568]	; (800c9ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c776:	f023 021f 	bic.w	r2, r3, #31
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	69db      	ldr	r3, [r3, #28]
 800c77e:	3b01      	subs	r3, #1
 800c780:	498a      	ldr	r1, [pc, #552]	; (800c9ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c782:	4313      	orrs	r3, r2
 800c784:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c790:	2b00      	cmp	r3, #0
 800c792:	d00d      	beq.n	800c7b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	019a      	lsls	r2, r3, #6
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	68db      	ldr	r3, [r3, #12]
 800c79e:	061b      	lsls	r3, r3, #24
 800c7a0:	431a      	orrs	r2, r3
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	689b      	ldr	r3, [r3, #8]
 800c7a6:	071b      	lsls	r3, r3, #28
 800c7a8:	4980      	ldr	r1, [pc, #512]	; (800c9ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c7aa:	4313      	orrs	r3, r2
 800c7ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c7b0:	4b7d      	ldr	r3, [pc, #500]	; (800c9a8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c7b6:	f7fc f90f 	bl	80089d8 <HAL_GetTick>
 800c7ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c7bc:	e008      	b.n	800c7d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c7be:	f7fc f90b 	bl	80089d8 <HAL_GetTick>
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	1ad3      	subs	r3, r2, r3
 800c7c8:	2b02      	cmp	r3, #2
 800c7ca:	d901      	bls.n	800c7d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c7cc:	2303      	movs	r3, #3
 800c7ce:	e12b      	b.n	800ca28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c7d0:	4b76      	ldr	r3, [pc, #472]	; (800c9ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d0f0      	beq.n	800c7be <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f003 0304 	and.w	r3, r3, #4
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d105      	bne.n	800c7f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d079      	beq.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c7f4:	4b6e      	ldr	r3, [pc, #440]	; (800c9b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c7fa:	f7fc f8ed 	bl	80089d8 <HAL_GetTick>
 800c7fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c800:	e008      	b.n	800c814 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c802:	f7fc f8e9 	bl	80089d8 <HAL_GetTick>
 800c806:	4602      	mov	r2, r0
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	1ad3      	subs	r3, r2, r3
 800c80c:	2b02      	cmp	r3, #2
 800c80e:	d901      	bls.n	800c814 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c810:	2303      	movs	r3, #3
 800c812:	e109      	b.n	800ca28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c814:	4b65      	ldr	r3, [pc, #404]	; (800c9ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c81c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c820:	d0ef      	beq.n	800c802 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f003 0304 	and.w	r3, r3, #4
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d020      	beq.n	800c870 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c82e:	4b5f      	ldr	r3, [pc, #380]	; (800c9ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c834:	0f1b      	lsrs	r3, r3, #28
 800c836:	f003 0307 	and.w	r3, r3, #7
 800c83a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	691b      	ldr	r3, [r3, #16]
 800c840:	019a      	lsls	r2, r3, #6
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	695b      	ldr	r3, [r3, #20]
 800c846:	061b      	lsls	r3, r3, #24
 800c848:	431a      	orrs	r2, r3
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	071b      	lsls	r3, r3, #28
 800c84e:	4957      	ldr	r1, [pc, #348]	; (800c9ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c850:	4313      	orrs	r3, r2
 800c852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c856:	4b55      	ldr	r3, [pc, #340]	; (800c9ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c85c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6a1b      	ldr	r3, [r3, #32]
 800c864:	3b01      	subs	r3, #1
 800c866:	021b      	lsls	r3, r3, #8
 800c868:	4950      	ldr	r1, [pc, #320]	; (800c9ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c86a:	4313      	orrs	r3, r2
 800c86c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	f003 0308 	and.w	r3, r3, #8
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d01e      	beq.n	800c8ba <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c87c:	4b4b      	ldr	r3, [pc, #300]	; (800c9ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c87e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c882:	0e1b      	lsrs	r3, r3, #24
 800c884:	f003 030f 	and.w	r3, r3, #15
 800c888:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	691b      	ldr	r3, [r3, #16]
 800c88e:	019a      	lsls	r2, r3, #6
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	061b      	lsls	r3, r3, #24
 800c894:	431a      	orrs	r2, r3
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	699b      	ldr	r3, [r3, #24]
 800c89a:	071b      	lsls	r3, r3, #28
 800c89c:	4943      	ldr	r1, [pc, #268]	; (800c9ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c8a4:	4b41      	ldr	r3, [pc, #260]	; (800c9ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c8a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8b2:	493e      	ldr	r1, [pc, #248]	; (800c9ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c8b4:	4313      	orrs	r3, r2
 800c8b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c8ba:	4b3d      	ldr	r3, [pc, #244]	; (800c9b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c8bc:	2201      	movs	r2, #1
 800c8be:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c8c0:	f7fc f88a 	bl	80089d8 <HAL_GetTick>
 800c8c4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c8c6:	e008      	b.n	800c8da <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c8c8:	f7fc f886 	bl	80089d8 <HAL_GetTick>
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	1ad3      	subs	r3, r2, r3
 800c8d2:	2b02      	cmp	r3, #2
 800c8d4:	d901      	bls.n	800c8da <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c8d6:	2303      	movs	r3, #3
 800c8d8:	e0a6      	b.n	800ca28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c8da:	4b34      	ldr	r3, [pc, #208]	; (800c9ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c8e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8e6:	d1ef      	bne.n	800c8c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f003 0320 	and.w	r3, r3, #32
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	f000 808d 	beq.w	800ca10 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	60fb      	str	r3, [r7, #12]
 800c8fa:	4b2c      	ldr	r3, [pc, #176]	; (800c9ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8fe:	4a2b      	ldr	r2, [pc, #172]	; (800c9ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c904:	6413      	str	r3, [r2, #64]	; 0x40
 800c906:	4b29      	ldr	r3, [pc, #164]	; (800c9ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c90a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c90e:	60fb      	str	r3, [r7, #12]
 800c910:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c912:	4b28      	ldr	r3, [pc, #160]	; (800c9b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	4a27      	ldr	r2, [pc, #156]	; (800c9b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800c918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c91c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c91e:	f7fc f85b 	bl	80089d8 <HAL_GetTick>
 800c922:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c924:	e008      	b.n	800c938 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c926:	f7fc f857 	bl	80089d8 <HAL_GetTick>
 800c92a:	4602      	mov	r2, r0
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	1ad3      	subs	r3, r2, r3
 800c930:	2b02      	cmp	r3, #2
 800c932:	d901      	bls.n	800c938 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800c934:	2303      	movs	r3, #3
 800c936:	e077      	b.n	800ca28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c938:	4b1e      	ldr	r3, [pc, #120]	; (800c9b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c940:	2b00      	cmp	r3, #0
 800c942:	d0f0      	beq.n	800c926 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c944:	4b19      	ldr	r3, [pc, #100]	; (800c9ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c948:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c94c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d039      	beq.n	800c9c8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c958:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c95c:	693a      	ldr	r2, [r7, #16]
 800c95e:	429a      	cmp	r2, r3
 800c960:	d032      	beq.n	800c9c8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c962:	4b12      	ldr	r3, [pc, #72]	; (800c9ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c96a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c96c:	4b12      	ldr	r3, [pc, #72]	; (800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800c96e:	2201      	movs	r2, #1
 800c970:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c972:	4b11      	ldr	r3, [pc, #68]	; (800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800c974:	2200      	movs	r2, #0
 800c976:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c978:	4a0c      	ldr	r2, [pc, #48]	; (800c9ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c97e:	4b0b      	ldr	r3, [pc, #44]	; (800c9ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c982:	f003 0301 	and.w	r3, r3, #1
 800c986:	2b01      	cmp	r3, #1
 800c988:	d11e      	bne.n	800c9c8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c98a:	f7fc f825 	bl	80089d8 <HAL_GetTick>
 800c98e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c990:	e014      	b.n	800c9bc <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c992:	f7fc f821 	bl	80089d8 <HAL_GetTick>
 800c996:	4602      	mov	r2, r0
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	1ad3      	subs	r3, r2, r3
 800c99c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	d90b      	bls.n	800c9bc <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800c9a4:	2303      	movs	r3, #3
 800c9a6:	e03f      	b.n	800ca28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800c9a8:	42470068 	.word	0x42470068
 800c9ac:	40023800 	.word	0x40023800
 800c9b0:	42470070 	.word	0x42470070
 800c9b4:	40007000 	.word	0x40007000
 800c9b8:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c9bc:	4b1c      	ldr	r3, [pc, #112]	; (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c9be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9c0:	f003 0302 	and.w	r3, r3, #2
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d0e4      	beq.n	800c992 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c9d4:	d10d      	bne.n	800c9f2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800c9d6:	4b16      	ldr	r3, [pc, #88]	; (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c9d8:	689b      	ldr	r3, [r3, #8]
 800c9da:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c9e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9ea:	4911      	ldr	r1, [pc, #68]	; (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c9ec:	4313      	orrs	r3, r2
 800c9ee:	608b      	str	r3, [r1, #8]
 800c9f0:	e005      	b.n	800c9fe <HAL_RCCEx_PeriphCLKConfig+0x342>
 800c9f2:	4b0f      	ldr	r3, [pc, #60]	; (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c9f4:	689b      	ldr	r3, [r3, #8]
 800c9f6:	4a0e      	ldr	r2, [pc, #56]	; (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c9f8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c9fc:	6093      	str	r3, [r2, #8]
 800c9fe:	4b0c      	ldr	r3, [pc, #48]	; (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ca00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ca0a:	4909      	ldr	r1, [pc, #36]	; (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800ca0c:	4313      	orrs	r3, r2
 800ca0e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	f003 0310 	and.w	r3, r3, #16
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d004      	beq.n	800ca26 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800ca22:	4b04      	ldr	r3, [pc, #16]	; (800ca34 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800ca24:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800ca26:	2300      	movs	r3, #0
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3718      	adds	r7, #24
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}
 800ca30:	40023800 	.word	0x40023800
 800ca34:	424711e0 	.word	0x424711e0

0800ca38 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b082      	sub	sp, #8
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d101      	bne.n	800ca4a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800ca46:	2301      	movs	r3, #1
 800ca48:	e083      	b.n	800cb52 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	7f5b      	ldrb	r3, [r3, #29]
 800ca4e:	b2db      	uxtb	r3, r3
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d105      	bne.n	800ca60 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2200      	movs	r2, #0
 800ca58:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f7f6 fa12 	bl	8002e84 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2202      	movs	r2, #2
 800ca64:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	22ca      	movs	r2, #202	; 0xca
 800ca6c:	625a      	str	r2, [r3, #36]	; 0x24
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	2253      	movs	r2, #83	; 0x53
 800ca74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f000 fc26 	bl	800d2c8 <RTC_EnterInitMode>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d008      	beq.n	800ca94 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	22ff      	movs	r2, #255	; 0xff
 800ca88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2204      	movs	r2, #4
 800ca8e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800ca90:	2301      	movs	r3, #1
 800ca92:	e05e      	b.n	800cb52 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	689b      	ldr	r3, [r3, #8]
 800ca9a:	687a      	ldr	r2, [r7, #4]
 800ca9c:	6812      	ldr	r2, [r2, #0]
 800ca9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800caa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800caa6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	6899      	ldr	r1, [r3, #8]
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	685a      	ldr	r2, [r3, #4]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	691b      	ldr	r3, [r3, #16]
 800cab6:	431a      	orrs	r2, r3
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	695b      	ldr	r3, [r3, #20]
 800cabc:	431a      	orrs	r2, r3
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	430a      	orrs	r2, r1
 800cac4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	687a      	ldr	r2, [r7, #4]
 800cacc:	68d2      	ldr	r2, [r2, #12]
 800cace:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	6919      	ldr	r1, [r3, #16]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	689b      	ldr	r3, [r3, #8]
 800cada:	041a      	lsls	r2, r3, #16
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	430a      	orrs	r2, r1
 800cae2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	68da      	ldr	r2, [r3, #12]
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800caf2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	689b      	ldr	r3, [r3, #8]
 800cafa:	f003 0320 	and.w	r3, r3, #32
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d10e      	bne.n	800cb20 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f000 fbb8 	bl	800d278 <HAL_RTC_WaitForSynchro>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d008      	beq.n	800cb20 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	22ff      	movs	r2, #255	; 0xff
 800cb14:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2204      	movs	r2, #4
 800cb1a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	e018      	b.n	800cb52 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cb2e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	699a      	ldr	r2, [r3, #24]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	430a      	orrs	r2, r1
 800cb40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	22ff      	movs	r2, #255	; 0xff
 800cb48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2201      	movs	r2, #1
 800cb4e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800cb50:	2300      	movs	r3, #0
  }
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3708      	adds	r7, #8
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}

0800cb5a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800cb5a:	b590      	push	{r4, r7, lr}
 800cb5c:	b087      	sub	sp, #28
 800cb5e:	af00      	add	r7, sp, #0
 800cb60:	60f8      	str	r0, [r7, #12]
 800cb62:	60b9      	str	r1, [r7, #8]
 800cb64:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800cb66:	2300      	movs	r3, #0
 800cb68:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	7f1b      	ldrb	r3, [r3, #28]
 800cb6e:	2b01      	cmp	r3, #1
 800cb70:	d101      	bne.n	800cb76 <HAL_RTC_SetTime+0x1c>
 800cb72:	2302      	movs	r3, #2
 800cb74:	e0aa      	b.n	800cccc <HAL_RTC_SetTime+0x172>
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2201      	movs	r2, #1
 800cb7a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	2202      	movs	r2, #2
 800cb80:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d126      	bne.n	800cbd6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	689b      	ldr	r3, [r3, #8]
 800cb8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d102      	bne.n	800cb9c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800cb96:	68bb      	ldr	r3, [r7, #8]
 800cb98:	2200      	movs	r2, #0
 800cb9a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	781b      	ldrb	r3, [r3, #0]
 800cba0:	4618      	mov	r0, r3
 800cba2:	f000 fbbd 	bl	800d320 <RTC_ByteToBcd2>
 800cba6:	4603      	mov	r3, r0
 800cba8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	785b      	ldrb	r3, [r3, #1]
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f000 fbb6 	bl	800d320 <RTC_ByteToBcd2>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800cbb8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	789b      	ldrb	r3, [r3, #2]
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f000 fbae 	bl	800d320 <RTC_ByteToBcd2>
 800cbc4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800cbc6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	78db      	ldrb	r3, [r3, #3]
 800cbce:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800cbd0:	4313      	orrs	r3, r2
 800cbd2:	617b      	str	r3, [r7, #20]
 800cbd4:	e018      	b.n	800cc08 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	689b      	ldr	r3, [r3, #8]
 800cbdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d102      	bne.n	800cbea <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	781b      	ldrb	r3, [r3, #0]
 800cbee:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	785b      	ldrb	r3, [r3, #1]
 800cbf4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800cbf6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800cbf8:	68ba      	ldr	r2, [r7, #8]
 800cbfa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800cbfc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	78db      	ldrb	r3, [r3, #3]
 800cc02:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800cc04:	4313      	orrs	r3, r2
 800cc06:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	22ca      	movs	r2, #202	; 0xca
 800cc0e:	625a      	str	r2, [r3, #36]	; 0x24
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	2253      	movs	r2, #83	; 0x53
 800cc16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800cc18:	68f8      	ldr	r0, [r7, #12]
 800cc1a:	f000 fb55 	bl	800d2c8 <RTC_EnterInitMode>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d00b      	beq.n	800cc3c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	22ff      	movs	r2, #255	; 0xff
 800cc2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2204      	movs	r2, #4
 800cc30:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	2200      	movs	r2, #0
 800cc36:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800cc38:	2301      	movs	r3, #1
 800cc3a:	e047      	b.n	800cccc <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	681a      	ldr	r2, [r3, #0]
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800cc46:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800cc4a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	689a      	ldr	r2, [r3, #8]
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cc5a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	6899      	ldr	r1, [r3, #8]
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	68da      	ldr	r2, [r3, #12]
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	691b      	ldr	r3, [r3, #16]
 800cc6a:	431a      	orrs	r2, r3
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	430a      	orrs	r2, r1
 800cc72:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	68da      	ldr	r2, [r3, #12]
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cc82:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	689b      	ldr	r3, [r3, #8]
 800cc8a:	f003 0320 	and.w	r3, r3, #32
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d111      	bne.n	800ccb6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cc92:	68f8      	ldr	r0, [r7, #12]
 800cc94:	f000 faf0 	bl	800d278 <HAL_RTC_WaitForSynchro>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d00b      	beq.n	800ccb6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	22ff      	movs	r2, #255	; 0xff
 800cca4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	2204      	movs	r2, #4
 800ccaa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	e00a      	b.n	800cccc <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	22ff      	movs	r2, #255	; 0xff
 800ccbc:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	2201      	movs	r2, #1
 800ccc2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800ccca:	2300      	movs	r3, #0
  }
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	371c      	adds	r7, #28
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd90      	pop	{r4, r7, pc}

0800ccd4 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b086      	sub	sp, #24
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	60f8      	str	r0, [r7, #12]
 800ccdc:	60b9      	str	r1, [r7, #8]
 800ccde:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800cce0:	2300      	movs	r3, #0
 800cce2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	691b      	ldr	r3, [r3, #16]
 800ccf4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800cd06:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800cd0a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	0c1b      	lsrs	r3, r3, #16
 800cd10:	b2db      	uxtb	r3, r3
 800cd12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd16:	b2da      	uxtb	r2, r3
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	0a1b      	lsrs	r3, r3, #8
 800cd20:	b2db      	uxtb	r3, r3
 800cd22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd26:	b2da      	uxtb	r2, r3
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	b2db      	uxtb	r3, r3
 800cd30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd34:	b2da      	uxtb	r2, r3
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	0c1b      	lsrs	r3, r3, #16
 800cd3e:	b2db      	uxtb	r3, r3
 800cd40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd44:	b2da      	uxtb	r2, r3
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d11a      	bne.n	800cd86 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	781b      	ldrb	r3, [r3, #0]
 800cd54:	4618      	mov	r0, r3
 800cd56:	f000 fb01 	bl	800d35c <RTC_Bcd2ToByte>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	461a      	mov	r2, r3
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	785b      	ldrb	r3, [r3, #1]
 800cd66:	4618      	mov	r0, r3
 800cd68:	f000 faf8 	bl	800d35c <RTC_Bcd2ToByte>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	461a      	mov	r2, r3
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	789b      	ldrb	r3, [r3, #2]
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f000 faef 	bl	800d35c <RTC_Bcd2ToByte>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	461a      	mov	r2, r3
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800cd86:	2300      	movs	r3, #0
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3718      	adds	r7, #24
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}

0800cd90 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cd90:	b590      	push	{r4, r7, lr}
 800cd92:	b087      	sub	sp, #28
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	60f8      	str	r0, [r7, #12]
 800cd98:	60b9      	str	r1, [r7, #8]
 800cd9a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	7f1b      	ldrb	r3, [r3, #28]
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d101      	bne.n	800cdac <HAL_RTC_SetDate+0x1c>
 800cda8:	2302      	movs	r3, #2
 800cdaa:	e094      	b.n	800ced6 <HAL_RTC_SetDate+0x146>
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2201      	movs	r2, #1
 800cdb0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	2202      	movs	r2, #2
 800cdb6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d10e      	bne.n	800cddc <HAL_RTC_SetDate+0x4c>
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	785b      	ldrb	r3, [r3, #1]
 800cdc2:	f003 0310 	and.w	r3, r3, #16
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d008      	beq.n	800cddc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	785b      	ldrb	r3, [r3, #1]
 800cdce:	f023 0310 	bic.w	r3, r3, #16
 800cdd2:	b2db      	uxtb	r3, r3
 800cdd4:	330a      	adds	r3, #10
 800cdd6:	b2da      	uxtb	r2, r3
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d11c      	bne.n	800ce1c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	78db      	ldrb	r3, [r3, #3]
 800cde6:	4618      	mov	r0, r3
 800cde8:	f000 fa9a 	bl	800d320 <RTC_ByteToBcd2>
 800cdec:	4603      	mov	r3, r0
 800cdee:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	785b      	ldrb	r3, [r3, #1]
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f000 fa93 	bl	800d320 <RTC_ByteToBcd2>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800cdfe:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	789b      	ldrb	r3, [r3, #2]
 800ce04:	4618      	mov	r0, r3
 800ce06:	f000 fa8b 	bl	800d320 <RTC_ByteToBcd2>
 800ce0a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800ce0c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	781b      	ldrb	r3, [r3, #0]
 800ce14:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800ce16:	4313      	orrs	r3, r2
 800ce18:	617b      	str	r3, [r7, #20]
 800ce1a:	e00e      	b.n	800ce3a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	78db      	ldrb	r3, [r3, #3]
 800ce20:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	785b      	ldrb	r3, [r3, #1]
 800ce26:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800ce28:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800ce2a:	68ba      	ldr	r2, [r7, #8]
 800ce2c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800ce2e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	781b      	ldrb	r3, [r3, #0]
 800ce34:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800ce36:	4313      	orrs	r3, r2
 800ce38:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	22ca      	movs	r2, #202	; 0xca
 800ce40:	625a      	str	r2, [r3, #36]	; 0x24
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	2253      	movs	r2, #83	; 0x53
 800ce48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ce4a:	68f8      	ldr	r0, [r7, #12]
 800ce4c:	f000 fa3c 	bl	800d2c8 <RTC_EnterInitMode>
 800ce50:	4603      	mov	r3, r0
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d00b      	beq.n	800ce6e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	22ff      	movs	r2, #255	; 0xff
 800ce5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	2204      	movs	r2, #4
 800ce62:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2200      	movs	r2, #0
 800ce68:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	e033      	b.n	800ced6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	681a      	ldr	r2, [r3, #0]
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ce78:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ce7c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	68da      	ldr	r2, [r3, #12]
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ce8c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	689b      	ldr	r3, [r3, #8]
 800ce94:	f003 0320 	and.w	r3, r3, #32
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d111      	bne.n	800cec0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ce9c:	68f8      	ldr	r0, [r7, #12]
 800ce9e:	f000 f9eb 	bl	800d278 <HAL_RTC_WaitForSynchro>
 800cea2:	4603      	mov	r3, r0
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d00b      	beq.n	800cec0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	22ff      	movs	r2, #255	; 0xff
 800ceae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	2204      	movs	r2, #4
 800ceb4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800cebc:	2301      	movs	r3, #1
 800cebe:	e00a      	b.n	800ced6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	22ff      	movs	r2, #255	; 0xff
 800cec6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	2201      	movs	r2, #1
 800cecc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2200      	movs	r2, #0
 800ced2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800ced4:	2300      	movs	r3, #0
  }
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	371c      	adds	r7, #28
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd90      	pop	{r4, r7, pc}

0800cede <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cede:	b580      	push	{r7, lr}
 800cee0:	b086      	sub	sp, #24
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	60f8      	str	r0, [r7, #12]
 800cee6:	60b9      	str	r1, [r7, #8]
 800cee8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800ceea:	2300      	movs	r3, #0
 800ceec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	685b      	ldr	r3, [r3, #4]
 800cef4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cef8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cefc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	0c1b      	lsrs	r3, r3, #16
 800cf02:	b2da      	uxtb	r2, r3
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	0a1b      	lsrs	r3, r3, #8
 800cf0c:	b2db      	uxtb	r3, r3
 800cf0e:	f003 031f 	and.w	r3, r3, #31
 800cf12:	b2da      	uxtb	r2, r3
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	b2db      	uxtb	r3, r3
 800cf1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf20:	b2da      	uxtb	r2, r3
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	0b5b      	lsrs	r3, r3, #13
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	f003 0307 	and.w	r3, r3, #7
 800cf30:	b2da      	uxtb	r2, r3
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d11a      	bne.n	800cf72 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	78db      	ldrb	r3, [r3, #3]
 800cf40:	4618      	mov	r0, r3
 800cf42:	f000 fa0b 	bl	800d35c <RTC_Bcd2ToByte>
 800cf46:	4603      	mov	r3, r0
 800cf48:	461a      	mov	r2, r3
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	785b      	ldrb	r3, [r3, #1]
 800cf52:	4618      	mov	r0, r3
 800cf54:	f000 fa02 	bl	800d35c <RTC_Bcd2ToByte>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	461a      	mov	r2, r3
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	789b      	ldrb	r3, [r3, #2]
 800cf64:	4618      	mov	r0, r3
 800cf66:	f000 f9f9 	bl	800d35c <RTC_Bcd2ToByte>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	461a      	mov	r2, r3
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800cf72:	2300      	movs	r3, #0
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3718      	adds	r7, #24
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}

0800cf7c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800cf7c:	b590      	push	{r4, r7, lr}
 800cf7e:	b089      	sub	sp, #36	; 0x24
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	60f8      	str	r0, [r7, #12]
 800cf84:	60b9      	str	r1, [r7, #8]
 800cf86:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	61fb      	str	r3, [r7, #28]
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800cf90:	4b93      	ldr	r3, [pc, #588]	; (800d1e0 <HAL_RTC_SetAlarm_IT+0x264>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	4a93      	ldr	r2, [pc, #588]	; (800d1e4 <HAL_RTC_SetAlarm_IT+0x268>)
 800cf96:	fba2 2303 	umull	r2, r3, r2, r3
 800cf9a:	0adb      	lsrs	r3, r3, #11
 800cf9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cfa0:	fb02 f303 	mul.w	r3, r2, r3
 800cfa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	7f1b      	ldrb	r3, [r3, #28]
 800cfaa:	2b01      	cmp	r3, #1
 800cfac:	d101      	bne.n	800cfb2 <HAL_RTC_SetAlarm_IT+0x36>
 800cfae:	2302      	movs	r3, #2
 800cfb0:	e111      	b.n	800d1d6 <HAL_RTC_SetAlarm_IT+0x25a>
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	2202      	movs	r2, #2
 800cfbc:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d137      	bne.n	800d034 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	689b      	ldr	r3, [r3, #8]
 800cfca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d102      	bne.n	800cfd8 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	781b      	ldrb	r3, [r3, #0]
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f000 f99f 	bl	800d320 <RTC_ByteToBcd2>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	785b      	ldrb	r3, [r3, #1]
 800cfea:	4618      	mov	r0, r3
 800cfec:	f000 f998 	bl	800d320 <RTC_ByteToBcd2>
 800cff0:	4603      	mov	r3, r0
 800cff2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800cff4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	789b      	ldrb	r3, [r3, #2]
 800cffa:	4618      	mov	r0, r3
 800cffc:	f000 f990 	bl	800d320 <RTC_ByteToBcd2>
 800d000:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800d002:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	78db      	ldrb	r3, [r3, #3]
 800d00a:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800d00c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800d010:	68bb      	ldr	r3, [r7, #8]
 800d012:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d016:	4618      	mov	r0, r3
 800d018:	f000 f982 	bl	800d320 <RTC_ByteToBcd2>
 800d01c:	4603      	mov	r3, r0
 800d01e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800d020:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800d028:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800d02e:	4313      	orrs	r3, r2
 800d030:	61fb      	str	r3, [r7, #28]
 800d032:	e023      	b.n	800d07c <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	689b      	ldr	r3, [r3, #8]
 800d03a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d102      	bne.n	800d048 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	2200      	movs	r2, #0
 800d046:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	785b      	ldrb	r3, [r3, #1]
 800d052:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800d054:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800d056:	68ba      	ldr	r2, [r7, #8]
 800d058:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800d05a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	78db      	ldrb	r3, [r3, #3]
 800d060:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800d062:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d06a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800d06c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800d072:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800d078:	4313      	orrs	r3, r2
 800d07a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	685a      	ldr	r2, [r3, #4]
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	699b      	ldr	r3, [r3, #24]
 800d084:	4313      	orrs	r3, r2
 800d086:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	22ca      	movs	r2, #202	; 0xca
 800d08e:	625a      	str	r2, [r3, #36]	; 0x24
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	2253      	movs	r2, #83	; 0x53
 800d096:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d09c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d0a0:	d141      	bne.n	800d126 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	689a      	ldr	r2, [r3, #8]
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d0b0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	68db      	ldr	r3, [r3, #12]
 800d0b8:	b2da      	uxtb	r2, r3
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800d0c2:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	1e5a      	subs	r2, r3, #1
 800d0c8:	617a      	str	r2, [r7, #20]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d10b      	bne.n	800d0e6 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	22ff      	movs	r2, #255	; 0xff
 800d0d4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	2203      	movs	r2, #3
 800d0da:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800d0e2:	2303      	movs	r3, #3
 800d0e4:	e077      	b.n	800d1d6 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	68db      	ldr	r3, [r3, #12]
 800d0ec:	f003 0301 	and.w	r3, r3, #1
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d0e7      	beq.n	800d0c4 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	69fa      	ldr	r2, [r7, #28]
 800d0fa:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	69ba      	ldr	r2, [r7, #24]
 800d102:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	689a      	ldr	r2, [r3, #8]
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d112:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	689a      	ldr	r2, [r3, #8]
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d122:	609a      	str	r2, [r3, #8]
 800d124:	e040      	b.n	800d1a8 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	689a      	ldr	r2, [r3, #8]
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d134:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	68db      	ldr	r3, [r3, #12]
 800d13c:	b2da      	uxtb	r2, r3
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	f462 7220 	orn	r2, r2, #640	; 0x280
 800d146:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	1e5a      	subs	r2, r3, #1
 800d14c:	617a      	str	r2, [r7, #20]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d10b      	bne.n	800d16a <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	22ff      	movs	r2, #255	; 0xff
 800d158:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	2203      	movs	r2, #3
 800d15e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	2200      	movs	r2, #0
 800d164:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800d166:	2303      	movs	r3, #3
 800d168:	e035      	b.n	800d1d6 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	68db      	ldr	r3, [r3, #12]
 800d170:	f003 0302 	and.w	r3, r3, #2
 800d174:	2b00      	cmp	r3, #0
 800d176:	d0e7      	beq.n	800d148 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	69fa      	ldr	r2, [r7, #28]
 800d17e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	69ba      	ldr	r2, [r7, #24]
 800d186:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	689a      	ldr	r2, [r3, #8]
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d196:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	689a      	ldr	r2, [r3, #8]
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d1a6:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800d1a8:	4b0f      	ldr	r3, [pc, #60]	; (800d1e8 <HAL_RTC_SetAlarm_IT+0x26c>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4a0e      	ldr	r2, [pc, #56]	; (800d1e8 <HAL_RTC_SetAlarm_IT+0x26c>)
 800d1ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d1b2:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800d1b4:	4b0c      	ldr	r3, [pc, #48]	; (800d1e8 <HAL_RTC_SetAlarm_IT+0x26c>)
 800d1b6:	689b      	ldr	r3, [r3, #8]
 800d1b8:	4a0b      	ldr	r2, [pc, #44]	; (800d1e8 <HAL_RTC_SetAlarm_IT+0x26c>)
 800d1ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d1be:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	22ff      	movs	r2, #255	; 0xff
 800d1c6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	2201      	movs	r2, #1
 800d1cc:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d1d4:	2300      	movs	r3, #0
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3724      	adds	r7, #36	; 0x24
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd90      	pop	{r4, r7, pc}
 800d1de:	bf00      	nop
 800d1e0:	20000004 	.word	0x20000004
 800d1e4:	10624dd3 	.word	0x10624dd3
 800d1e8:	40013c00 	.word	0x40013c00

0800d1ec <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b082      	sub	sp, #8
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	689b      	ldr	r3, [r3, #8]
 800d1fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d012      	beq.n	800d228 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	68db      	ldr	r3, [r3, #12]
 800d208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d00b      	beq.n	800d228 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f7fa feef 	bl	8007ff4 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	68db      	ldr	r3, [r3, #12]
 800d21c:	b2da      	uxtb	r2, r3
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800d226:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	689b      	ldr	r3, [r3, #8]
 800d22e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d232:	2b00      	cmp	r3, #0
 800d234:	d012      	beq.n	800d25c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	68db      	ldr	r3, [r3, #12]
 800d23c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d240:	2b00      	cmp	r3, #0
 800d242:	d00b      	beq.n	800d25c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f000 f9bf 	bl	800d5c8 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	68db      	ldr	r3, [r3, #12]
 800d250:	b2da      	uxtb	r2, r3
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	f462 7220 	orn	r2, r2, #640	; 0x280
 800d25a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800d25c:	4b05      	ldr	r3, [pc, #20]	; (800d274 <HAL_RTC_AlarmIRQHandler+0x88>)
 800d25e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d262:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2201      	movs	r2, #1
 800d268:	775a      	strb	r2, [r3, #29]
}
 800d26a:	bf00      	nop
 800d26c:	3708      	adds	r7, #8
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}
 800d272:	bf00      	nop
 800d274:	40013c00 	.word	0x40013c00

0800d278 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b084      	sub	sp, #16
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d280:	2300      	movs	r3, #0
 800d282:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	68da      	ldr	r2, [r3, #12]
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d292:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d294:	f7fb fba0 	bl	80089d8 <HAL_GetTick>
 800d298:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d29a:	e009      	b.n	800d2b0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d29c:	f7fb fb9c 	bl	80089d8 <HAL_GetTick>
 800d2a0:	4602      	mov	r2, r0
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	1ad3      	subs	r3, r2, r3
 800d2a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d2aa:	d901      	bls.n	800d2b0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800d2ac:	2303      	movs	r3, #3
 800d2ae:	e007      	b.n	800d2c0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	68db      	ldr	r3, [r3, #12]
 800d2b6:	f003 0320 	and.w	r3, r3, #32
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d0ee      	beq.n	800d29c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800d2be:	2300      	movs	r3, #0
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3710      	adds	r7, #16
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}

0800d2c8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b084      	sub	sp, #16
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	68db      	ldr	r3, [r3, #12]
 800d2da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d119      	bne.n	800d316 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f04f 32ff 	mov.w	r2, #4294967295
 800d2ea:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d2ec:	f7fb fb74 	bl	80089d8 <HAL_GetTick>
 800d2f0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d2f2:	e009      	b.n	800d308 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d2f4:	f7fb fb70 	bl	80089d8 <HAL_GetTick>
 800d2f8:	4602      	mov	r2, r0
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	1ad3      	subs	r3, r2, r3
 800d2fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d302:	d901      	bls.n	800d308 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800d304:	2303      	movs	r3, #3
 800d306:	e007      	b.n	800d318 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	68db      	ldr	r3, [r3, #12]
 800d30e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d312:	2b00      	cmp	r3, #0
 800d314:	d0ee      	beq.n	800d2f4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800d316:	2300      	movs	r3, #0
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3710      	adds	r7, #16
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}

0800d320 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d320:	b480      	push	{r7}
 800d322:	b085      	sub	sp, #20
 800d324:	af00      	add	r7, sp, #0
 800d326:	4603      	mov	r3, r0
 800d328:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d32a:	2300      	movs	r3, #0
 800d32c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800d32e:	e005      	b.n	800d33c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	3301      	adds	r3, #1
 800d334:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800d336:	79fb      	ldrb	r3, [r7, #7]
 800d338:	3b0a      	subs	r3, #10
 800d33a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800d33c:	79fb      	ldrb	r3, [r7, #7]
 800d33e:	2b09      	cmp	r3, #9
 800d340:	d8f6      	bhi.n	800d330 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	b2db      	uxtb	r3, r3
 800d346:	011b      	lsls	r3, r3, #4
 800d348:	b2da      	uxtb	r2, r3
 800d34a:	79fb      	ldrb	r3, [r7, #7]
 800d34c:	4313      	orrs	r3, r2
 800d34e:	b2db      	uxtb	r3, r3
}
 800d350:	4618      	mov	r0, r3
 800d352:	3714      	adds	r7, #20
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr

0800d35c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800d35c:	b480      	push	{r7}
 800d35e:	b085      	sub	sp, #20
 800d360:	af00      	add	r7, sp, #0
 800d362:	4603      	mov	r3, r0
 800d364:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800d366:	2300      	movs	r3, #0
 800d368:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800d36a:	79fb      	ldrb	r3, [r7, #7]
 800d36c:	091b      	lsrs	r3, r3, #4
 800d36e:	b2db      	uxtb	r3, r3
 800d370:	461a      	mov	r2, r3
 800d372:	4613      	mov	r3, r2
 800d374:	009b      	lsls	r3, r3, #2
 800d376:	4413      	add	r3, r2
 800d378:	005b      	lsls	r3, r3, #1
 800d37a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800d37c:	79fb      	ldrb	r3, [r7, #7]
 800d37e:	f003 030f 	and.w	r3, r3, #15
 800d382:	b2da      	uxtb	r2, r3
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	b2db      	uxtb	r3, r3
 800d388:	4413      	add	r3, r2
 800d38a:	b2db      	uxtb	r3, r3
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3714      	adds	r7, #20
 800d390:	46bd      	mov	sp, r7
 800d392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d396:	4770      	bx	lr

0800d398 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800d398:	b480      	push	{r7}
 800d39a:	b087      	sub	sp, #28
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	60f8      	str	r0, [r7, #12]
 800d3a0:	60b9      	str	r1, [r7, #8]
 800d3a2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	7f1b      	ldrb	r3, [r3, #28]
 800d3a8:	2b01      	cmp	r3, #1
 800d3aa:	d101      	bne.n	800d3b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 800d3ac:	2302      	movs	r3, #2
 800d3ae:	e0a6      	b.n	800d4fe <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	2201      	movs	r2, #1
 800d3b4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	2202      	movs	r2, #2
 800d3ba:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	22ca      	movs	r2, #202	; 0xca
 800d3c2:	625a      	str	r2, [r3, #36]	; 0x24
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	2253      	movs	r2, #83	; 0x53
 800d3ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	689b      	ldr	r3, [r3, #8]
 800d3d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d022      	beq.n	800d420 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800d3da:	4b4c      	ldr	r3, [pc, #304]	; (800d50c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	4a4c      	ldr	r2, [pc, #304]	; (800d510 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800d3e0:	fba2 2303 	umull	r2, r3, r2, r3
 800d3e4:	0adb      	lsrs	r3, r3, #11
 800d3e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d3ea:	fb02 f303 	mul.w	r3, r2, r3
 800d3ee:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 800d3f0:	697b      	ldr	r3, [r7, #20]
 800d3f2:	1e5a      	subs	r2, r3, #1
 800d3f4:	617a      	str	r2, [r7, #20]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d10b      	bne.n	800d412 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	22ff      	movs	r2, #255	; 0xff
 800d400:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	2203      	movs	r2, #3
 800d406:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2200      	movs	r2, #0
 800d40c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800d40e:	2303      	movs	r3, #3
 800d410:	e075      	b.n	800d4fe <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	68db      	ldr	r3, [r3, #12]
 800d418:	f003 0304 	and.w	r3, r3, #4
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d1e7      	bne.n	800d3f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	689a      	ldr	r2, [r3, #8]
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d42e:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800d430:	4b36      	ldr	r3, [pc, #216]	; (800d50c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	4a36      	ldr	r2, [pc, #216]	; (800d510 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800d436:	fba2 2303 	umull	r2, r3, r2, r3
 800d43a:	0adb      	lsrs	r3, r3, #11
 800d43c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d440:	fb02 f303 	mul.w	r3, r2, r3
 800d444:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	1e5a      	subs	r2, r3, #1
 800d44a:	617a      	str	r2, [r7, #20]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d10b      	bne.n	800d468 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	22ff      	movs	r2, #255	; 0xff
 800d456:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	2203      	movs	r2, #3
 800d45c:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	2200      	movs	r2, #0
 800d462:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800d464:	2303      	movs	r3, #3
 800d466:	e04a      	b.n	800d4fe <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	68db      	ldr	r3, [r3, #12]
 800d46e:	f003 0304 	and.w	r3, r3, #4
 800d472:	2b00      	cmp	r3, #0
 800d474:	d0e7      	beq.n	800d446 <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	68ba      	ldr	r2, [r7, #8]
 800d47c:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	689a      	ldr	r2, [r3, #8]
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	f022 0207 	bic.w	r2, r2, #7
 800d48c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	6899      	ldr	r1, [r3, #8]
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	687a      	ldr	r2, [r7, #4]
 800d49a:	430a      	orrs	r2, r1
 800d49c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800d49e:	4b1d      	ldr	r3, [pc, #116]	; (800d514 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	4a1c      	ldr	r2, [pc, #112]	; (800d514 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800d4a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d4a8:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800d4aa:	4b1a      	ldr	r3, [pc, #104]	; (800d514 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800d4ac:	689b      	ldr	r3, [r3, #8]
 800d4ae:	4a19      	ldr	r2, [pc, #100]	; (800d514 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800d4b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d4b4:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	68db      	ldr	r3, [r3, #12]
 800d4bc:	b2da      	uxtb	r2, r3
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800d4c6:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	689a      	ldr	r2, [r3, #8]
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d4d6:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	689a      	ldr	r2, [r3, #8]
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d4e6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	22ff      	movs	r2, #255	; 0xff
 800d4ee:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	2201      	movs	r2, #1
 800d4f4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d4fc:	2300      	movs	r3, #0
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	371c      	adds	r7, #28
 800d502:	46bd      	mov	sp, r7
 800d504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d508:	4770      	bx	lr
 800d50a:	bf00      	nop
 800d50c:	20000004 	.word	0x20000004
 800d510:	10624dd3 	.word	0x10624dd3
 800d514:	40013c00 	.word	0x40013c00

0800d518 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b084      	sub	sp, #16
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d520:	2300      	movs	r3, #0
 800d522:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	7f1b      	ldrb	r3, [r3, #28]
 800d528:	2b01      	cmp	r3, #1
 800d52a:	d101      	bne.n	800d530 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 800d52c:	2302      	movs	r3, #2
 800d52e:	e047      	b.n	800d5c0 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2201      	movs	r2, #1
 800d534:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2202      	movs	r2, #2
 800d53a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	22ca      	movs	r2, #202	; 0xca
 800d542:	625a      	str	r2, [r3, #36]	; 0x24
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	2253      	movs	r2, #83	; 0x53
 800d54a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	689a      	ldr	r2, [r3, #8]
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d55a:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	689a      	ldr	r2, [r3, #8]
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d56a:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d56c:	f7fb fa34 	bl	80089d8 <HAL_GetTick>
 800d570:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800d572:	e013      	b.n	800d59c <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d574:	f7fb fa30 	bl	80089d8 <HAL_GetTick>
 800d578:	4602      	mov	r2, r0
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	1ad3      	subs	r3, r2, r3
 800d57e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d582:	d90b      	bls.n	800d59c <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	22ff      	movs	r2, #255	; 0xff
 800d58a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2203      	movs	r2, #3
 800d590:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2200      	movs	r2, #0
 800d596:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800d598:	2303      	movs	r3, #3
 800d59a:	e011      	b.n	800d5c0 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	68db      	ldr	r3, [r3, #12]
 800d5a2:	f003 0304 	and.w	r3, r3, #4
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d0e4      	beq.n	800d574 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	22ff      	movs	r2, #255	; 0xff
 800d5b0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2201      	movs	r2, #1
 800d5b6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d5be:	2300      	movs	r3, #0
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3710      	adds	r7, #16
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b083      	sub	sp, #12
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 800d5d0:	bf00      	nop
 800d5d2:	370c      	adds	r7, #12
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5da:	4770      	bx	lr

0800d5dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b082      	sub	sp, #8
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d101      	bne.n	800d5ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	e07b      	b.n	800d6e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d108      	bne.n	800d608 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	685b      	ldr	r3, [r3, #4]
 800d5fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d5fe:	d009      	beq.n	800d614 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2200      	movs	r2, #0
 800d604:	61da      	str	r2, [r3, #28]
 800d606:	e005      	b.n	800d614 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2200      	movs	r2, #0
 800d60c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2200      	movs	r2, #0
 800d612:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2200      	movs	r2, #0
 800d618:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d620:	b2db      	uxtb	r3, r3
 800d622:	2b00      	cmp	r3, #0
 800d624:	d106      	bne.n	800d634 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2200      	movs	r2, #0
 800d62a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f7f5 fc5a 	bl	8002ee8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2202      	movs	r2, #2
 800d638:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	681a      	ldr	r2, [r3, #0]
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d64a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	685b      	ldr	r3, [r3, #4]
 800d650:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	689b      	ldr	r3, [r3, #8]
 800d658:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d65c:	431a      	orrs	r2, r3
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	68db      	ldr	r3, [r3, #12]
 800d662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d666:	431a      	orrs	r2, r3
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	691b      	ldr	r3, [r3, #16]
 800d66c:	f003 0302 	and.w	r3, r3, #2
 800d670:	431a      	orrs	r2, r3
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	695b      	ldr	r3, [r3, #20]
 800d676:	f003 0301 	and.w	r3, r3, #1
 800d67a:	431a      	orrs	r2, r3
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	699b      	ldr	r3, [r3, #24]
 800d680:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d684:	431a      	orrs	r2, r3
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	69db      	ldr	r3, [r3, #28]
 800d68a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d68e:	431a      	orrs	r2, r3
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6a1b      	ldr	r3, [r3, #32]
 800d694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d698:	ea42 0103 	orr.w	r1, r2, r3
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	430a      	orrs	r2, r1
 800d6aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	699b      	ldr	r3, [r3, #24]
 800d6b0:	0c1b      	lsrs	r3, r3, #16
 800d6b2:	f003 0104 	and.w	r1, r3, #4
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ba:	f003 0210 	and.w	r2, r3, #16
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	430a      	orrs	r2, r1
 800d6c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	69da      	ldr	r2, [r3, #28]
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d6d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2200      	movs	r2, #0
 800d6da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2201      	movs	r2, #1
 800d6e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800d6e4:	2300      	movs	r3, #0
}
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	3708      	adds	r7, #8
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}

0800d6ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d6ee:	b580      	push	{r7, lr}
 800d6f0:	b088      	sub	sp, #32
 800d6f2:	af00      	add	r7, sp, #0
 800d6f4:	60f8      	str	r0, [r7, #12]
 800d6f6:	60b9      	str	r1, [r7, #8]
 800d6f8:	603b      	str	r3, [r7, #0]
 800d6fa:	4613      	mov	r3, r2
 800d6fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d6fe:	2300      	movs	r3, #0
 800d700:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d708:	2b01      	cmp	r3, #1
 800d70a:	d101      	bne.n	800d710 <HAL_SPI_Transmit+0x22>
 800d70c:	2302      	movs	r3, #2
 800d70e:	e126      	b.n	800d95e <HAL_SPI_Transmit+0x270>
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	2201      	movs	r2, #1
 800d714:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d718:	f7fb f95e 	bl	80089d8 <HAL_GetTick>
 800d71c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d71e:	88fb      	ldrh	r3, [r7, #6]
 800d720:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d728:	b2db      	uxtb	r3, r3
 800d72a:	2b01      	cmp	r3, #1
 800d72c:	d002      	beq.n	800d734 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d72e:	2302      	movs	r3, #2
 800d730:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d732:	e10b      	b.n	800d94c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d002      	beq.n	800d740 <HAL_SPI_Transmit+0x52>
 800d73a:	88fb      	ldrh	r3, [r7, #6]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d102      	bne.n	800d746 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d740:	2301      	movs	r3, #1
 800d742:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d744:	e102      	b.n	800d94c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	2203      	movs	r2, #3
 800d74a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	2200      	movs	r2, #0
 800d752:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	68ba      	ldr	r2, [r7, #8]
 800d758:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	88fa      	ldrh	r2, [r7, #6]
 800d75e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	88fa      	ldrh	r2, [r7, #6]
 800d764:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2200      	movs	r2, #0
 800d76a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	2200      	movs	r2, #0
 800d770:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	2200      	movs	r2, #0
 800d776:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2200      	movs	r2, #0
 800d77c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	2200      	movs	r2, #0
 800d782:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	689b      	ldr	r3, [r3, #8]
 800d788:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d78c:	d10f      	bne.n	800d7ae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	681a      	ldr	r2, [r3, #0]
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d79c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	681a      	ldr	r2, [r3, #0]
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d7ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7b8:	2b40      	cmp	r3, #64	; 0x40
 800d7ba:	d007      	beq.n	800d7cc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	681a      	ldr	r2, [r3, #0]
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d7ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	68db      	ldr	r3, [r3, #12]
 800d7d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d7d4:	d14b      	bne.n	800d86e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	685b      	ldr	r3, [r3, #4]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d002      	beq.n	800d7e4 <HAL_SPI_Transmit+0xf6>
 800d7de:	8afb      	ldrh	r3, [r7, #22]
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	d13e      	bne.n	800d862 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7e8:	881a      	ldrh	r2, [r3, #0]
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7f4:	1c9a      	adds	r2, r3, #2
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d7fe:	b29b      	uxth	r3, r3
 800d800:	3b01      	subs	r3, #1
 800d802:	b29a      	uxth	r2, r3
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d808:	e02b      	b.n	800d862 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	689b      	ldr	r3, [r3, #8]
 800d810:	f003 0302 	and.w	r3, r3, #2
 800d814:	2b02      	cmp	r3, #2
 800d816:	d112      	bne.n	800d83e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d81c:	881a      	ldrh	r2, [r3, #0]
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d828:	1c9a      	adds	r2, r3, #2
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d832:	b29b      	uxth	r3, r3
 800d834:	3b01      	subs	r3, #1
 800d836:	b29a      	uxth	r2, r3
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	86da      	strh	r2, [r3, #54]	; 0x36
 800d83c:	e011      	b.n	800d862 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d83e:	f7fb f8cb 	bl	80089d8 <HAL_GetTick>
 800d842:	4602      	mov	r2, r0
 800d844:	69bb      	ldr	r3, [r7, #24]
 800d846:	1ad3      	subs	r3, r2, r3
 800d848:	683a      	ldr	r2, [r7, #0]
 800d84a:	429a      	cmp	r2, r3
 800d84c:	d803      	bhi.n	800d856 <HAL_SPI_Transmit+0x168>
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d854:	d102      	bne.n	800d85c <HAL_SPI_Transmit+0x16e>
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d102      	bne.n	800d862 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800d85c:	2303      	movs	r3, #3
 800d85e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d860:	e074      	b.n	800d94c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d866:	b29b      	uxth	r3, r3
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d1ce      	bne.n	800d80a <HAL_SPI_Transmit+0x11c>
 800d86c:	e04c      	b.n	800d908 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	685b      	ldr	r3, [r3, #4]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d002      	beq.n	800d87c <HAL_SPI_Transmit+0x18e>
 800d876:	8afb      	ldrh	r3, [r7, #22]
 800d878:	2b01      	cmp	r3, #1
 800d87a:	d140      	bne.n	800d8fe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	330c      	adds	r3, #12
 800d886:	7812      	ldrb	r2, [r2, #0]
 800d888:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d88e:	1c5a      	adds	r2, r3, #1
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d898:	b29b      	uxth	r3, r3
 800d89a:	3b01      	subs	r3, #1
 800d89c:	b29a      	uxth	r2, r3
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800d8a2:	e02c      	b.n	800d8fe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	689b      	ldr	r3, [r3, #8]
 800d8aa:	f003 0302 	and.w	r3, r3, #2
 800d8ae:	2b02      	cmp	r3, #2
 800d8b0:	d113      	bne.n	800d8da <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	330c      	adds	r3, #12
 800d8bc:	7812      	ldrb	r2, [r2, #0]
 800d8be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8c4:	1c5a      	adds	r2, r3, #1
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d8ce:	b29b      	uxth	r3, r3
 800d8d0:	3b01      	subs	r3, #1
 800d8d2:	b29a      	uxth	r2, r3
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	86da      	strh	r2, [r3, #54]	; 0x36
 800d8d8:	e011      	b.n	800d8fe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d8da:	f7fb f87d 	bl	80089d8 <HAL_GetTick>
 800d8de:	4602      	mov	r2, r0
 800d8e0:	69bb      	ldr	r3, [r7, #24]
 800d8e2:	1ad3      	subs	r3, r2, r3
 800d8e4:	683a      	ldr	r2, [r7, #0]
 800d8e6:	429a      	cmp	r2, r3
 800d8e8:	d803      	bhi.n	800d8f2 <HAL_SPI_Transmit+0x204>
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8f0:	d102      	bne.n	800d8f8 <HAL_SPI_Transmit+0x20a>
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d102      	bne.n	800d8fe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800d8f8:	2303      	movs	r3, #3
 800d8fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d8fc:	e026      	b.n	800d94c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d902:	b29b      	uxth	r3, r3
 800d904:	2b00      	cmp	r3, #0
 800d906:	d1cd      	bne.n	800d8a4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d908:	69ba      	ldr	r2, [r7, #24]
 800d90a:	6839      	ldr	r1, [r7, #0]
 800d90c:	68f8      	ldr	r0, [r7, #12]
 800d90e:	f000 fbcb 	bl	800e0a8 <SPI_EndRxTxTransaction>
 800d912:	4603      	mov	r3, r0
 800d914:	2b00      	cmp	r3, #0
 800d916:	d002      	beq.n	800d91e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	2220      	movs	r2, #32
 800d91c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	689b      	ldr	r3, [r3, #8]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d10a      	bne.n	800d93c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d926:	2300      	movs	r3, #0
 800d928:	613b      	str	r3, [r7, #16]
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	68db      	ldr	r3, [r3, #12]
 800d930:	613b      	str	r3, [r7, #16]
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	689b      	ldr	r3, [r3, #8]
 800d938:	613b      	str	r3, [r7, #16]
 800d93a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d940:	2b00      	cmp	r3, #0
 800d942:	d002      	beq.n	800d94a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800d944:	2301      	movs	r3, #1
 800d946:	77fb      	strb	r3, [r7, #31]
 800d948:	e000      	b.n	800d94c <HAL_SPI_Transmit+0x25e>
  }

error:
 800d94a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	2201      	movs	r2, #1
 800d950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	2200      	movs	r2, #0
 800d958:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d95c:	7ffb      	ldrb	r3, [r7, #31]
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3720      	adds	r7, #32
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}

0800d966 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d966:	b580      	push	{r7, lr}
 800d968:	b088      	sub	sp, #32
 800d96a:	af02      	add	r7, sp, #8
 800d96c:	60f8      	str	r0, [r7, #12]
 800d96e:	60b9      	str	r1, [r7, #8]
 800d970:	603b      	str	r3, [r7, #0]
 800d972:	4613      	mov	r3, r2
 800d974:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d976:	2300      	movs	r3, #0
 800d978:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	685b      	ldr	r3, [r3, #4]
 800d97e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d982:	d112      	bne.n	800d9aa <HAL_SPI_Receive+0x44>
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	689b      	ldr	r3, [r3, #8]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d10e      	bne.n	800d9aa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	2204      	movs	r2, #4
 800d990:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d994:	88fa      	ldrh	r2, [r7, #6]
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	9300      	str	r3, [sp, #0]
 800d99a:	4613      	mov	r3, r2
 800d99c:	68ba      	ldr	r2, [r7, #8]
 800d99e:	68b9      	ldr	r1, [r7, #8]
 800d9a0:	68f8      	ldr	r0, [r7, #12]
 800d9a2:	f000 f8f1 	bl	800db88 <HAL_SPI_TransmitReceive>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	e0ea      	b.n	800db80 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d9b0:	2b01      	cmp	r3, #1
 800d9b2:	d101      	bne.n	800d9b8 <HAL_SPI_Receive+0x52>
 800d9b4:	2302      	movs	r3, #2
 800d9b6:	e0e3      	b.n	800db80 <HAL_SPI_Receive+0x21a>
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2201      	movs	r2, #1
 800d9bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d9c0:	f7fb f80a 	bl	80089d8 <HAL_GetTick>
 800d9c4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d9cc:	b2db      	uxtb	r3, r3
 800d9ce:	2b01      	cmp	r3, #1
 800d9d0:	d002      	beq.n	800d9d8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800d9d2:	2302      	movs	r3, #2
 800d9d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d9d6:	e0ca      	b.n	800db6e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d002      	beq.n	800d9e4 <HAL_SPI_Receive+0x7e>
 800d9de:	88fb      	ldrh	r3, [r7, #6]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d102      	bne.n	800d9ea <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d9e8:	e0c1      	b.n	800db6e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	2204      	movs	r2, #4
 800d9ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	68ba      	ldr	r2, [r7, #8]
 800d9fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	88fa      	ldrh	r2, [r7, #6]
 800da02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	88fa      	ldrh	r2, [r7, #6]
 800da08:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	2200      	movs	r2, #0
 800da0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	2200      	movs	r2, #0
 800da14:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	2200      	movs	r2, #0
 800da1a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	2200      	movs	r2, #0
 800da20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	2200      	movs	r2, #0
 800da26:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	689b      	ldr	r3, [r3, #8]
 800da2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800da30:	d10f      	bne.n	800da52 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	681a      	ldr	r2, [r3, #0]
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800da40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	681a      	ldr	r2, [r3, #0]
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800da50:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da5c:	2b40      	cmp	r3, #64	; 0x40
 800da5e:	d007      	beq.n	800da70 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	681a      	ldr	r2, [r3, #0]
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800da6e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	68db      	ldr	r3, [r3, #12]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d162      	bne.n	800db3e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800da78:	e02e      	b.n	800dad8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	689b      	ldr	r3, [r3, #8]
 800da80:	f003 0301 	and.w	r3, r3, #1
 800da84:	2b01      	cmp	r3, #1
 800da86:	d115      	bne.n	800dab4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	f103 020c 	add.w	r2, r3, #12
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da94:	7812      	ldrb	r2, [r2, #0]
 800da96:	b2d2      	uxtb	r2, r2
 800da98:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da9e:	1c5a      	adds	r2, r3, #1
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800daa8:	b29b      	uxth	r3, r3
 800daaa:	3b01      	subs	r3, #1
 800daac:	b29a      	uxth	r2, r3
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dab2:	e011      	b.n	800dad8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dab4:	f7fa ff90 	bl	80089d8 <HAL_GetTick>
 800dab8:	4602      	mov	r2, r0
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	1ad3      	subs	r3, r2, r3
 800dabe:	683a      	ldr	r2, [r7, #0]
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d803      	bhi.n	800dacc <HAL_SPI_Receive+0x166>
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daca:	d102      	bne.n	800dad2 <HAL_SPI_Receive+0x16c>
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d102      	bne.n	800dad8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800dad2:	2303      	movs	r3, #3
 800dad4:	75fb      	strb	r3, [r7, #23]
          goto error;
 800dad6:	e04a      	b.n	800db6e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dadc:	b29b      	uxth	r3, r3
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d1cb      	bne.n	800da7a <HAL_SPI_Receive+0x114>
 800dae2:	e031      	b.n	800db48 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	689b      	ldr	r3, [r3, #8]
 800daea:	f003 0301 	and.w	r3, r3, #1
 800daee:	2b01      	cmp	r3, #1
 800daf0:	d113      	bne.n	800db1a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	68da      	ldr	r2, [r3, #12]
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dafc:	b292      	uxth	r2, r2
 800dafe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db04:	1c9a      	adds	r2, r3, #2
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800db0e:	b29b      	uxth	r3, r3
 800db10:	3b01      	subs	r3, #1
 800db12:	b29a      	uxth	r2, r3
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	87da      	strh	r2, [r3, #62]	; 0x3e
 800db18:	e011      	b.n	800db3e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800db1a:	f7fa ff5d 	bl	80089d8 <HAL_GetTick>
 800db1e:	4602      	mov	r2, r0
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	1ad3      	subs	r3, r2, r3
 800db24:	683a      	ldr	r2, [r7, #0]
 800db26:	429a      	cmp	r2, r3
 800db28:	d803      	bhi.n	800db32 <HAL_SPI_Receive+0x1cc>
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db30:	d102      	bne.n	800db38 <HAL_SPI_Receive+0x1d2>
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d102      	bne.n	800db3e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800db38:	2303      	movs	r3, #3
 800db3a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800db3c:	e017      	b.n	800db6e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800db42:	b29b      	uxth	r3, r3
 800db44:	2b00      	cmp	r3, #0
 800db46:	d1cd      	bne.n	800dae4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800db48:	693a      	ldr	r2, [r7, #16]
 800db4a:	6839      	ldr	r1, [r7, #0]
 800db4c:	68f8      	ldr	r0, [r7, #12]
 800db4e:	f000 fa45 	bl	800dfdc <SPI_EndRxTransaction>
 800db52:	4603      	mov	r3, r0
 800db54:	2b00      	cmp	r3, #0
 800db56:	d002      	beq.n	800db5e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	2220      	movs	r2, #32
 800db5c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db62:	2b00      	cmp	r3, #0
 800db64:	d002      	beq.n	800db6c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800db66:	2301      	movs	r3, #1
 800db68:	75fb      	strb	r3, [r7, #23]
 800db6a:	e000      	b.n	800db6e <HAL_SPI_Receive+0x208>
  }

error :
 800db6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	2201      	movs	r2, #1
 800db72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	2200      	movs	r2, #0
 800db7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800db7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800db80:	4618      	mov	r0, r3
 800db82:	3718      	adds	r7, #24
 800db84:	46bd      	mov	sp, r7
 800db86:	bd80      	pop	{r7, pc}

0800db88 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b08c      	sub	sp, #48	; 0x30
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	60f8      	str	r0, [r7, #12]
 800db90:	60b9      	str	r1, [r7, #8]
 800db92:	607a      	str	r2, [r7, #4]
 800db94:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800db96:	2301      	movs	r3, #1
 800db98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800db9a:	2300      	movs	r3, #0
 800db9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dba6:	2b01      	cmp	r3, #1
 800dba8:	d101      	bne.n	800dbae <HAL_SPI_TransmitReceive+0x26>
 800dbaa:	2302      	movs	r3, #2
 800dbac:	e18a      	b.n	800dec4 <HAL_SPI_TransmitReceive+0x33c>
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	2201      	movs	r2, #1
 800dbb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dbb6:	f7fa ff0f 	bl	80089d8 <HAL_GetTick>
 800dbba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dbc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	685b      	ldr	r3, [r3, #4]
 800dbca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800dbcc:	887b      	ldrh	r3, [r7, #2]
 800dbce:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800dbd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dbd4:	2b01      	cmp	r3, #1
 800dbd6:	d00f      	beq.n	800dbf8 <HAL_SPI_TransmitReceive+0x70>
 800dbd8:	69fb      	ldr	r3, [r7, #28]
 800dbda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dbde:	d107      	bne.n	800dbf0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	689b      	ldr	r3, [r3, #8]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d103      	bne.n	800dbf0 <HAL_SPI_TransmitReceive+0x68>
 800dbe8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dbec:	2b04      	cmp	r3, #4
 800dbee:	d003      	beq.n	800dbf8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800dbf0:	2302      	movs	r3, #2
 800dbf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800dbf6:	e15b      	b.n	800deb0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d005      	beq.n	800dc0a <HAL_SPI_TransmitReceive+0x82>
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d002      	beq.n	800dc0a <HAL_SPI_TransmitReceive+0x82>
 800dc04:	887b      	ldrh	r3, [r7, #2]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d103      	bne.n	800dc12 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800dc10:	e14e      	b.n	800deb0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dc18:	b2db      	uxtb	r3, r3
 800dc1a:	2b04      	cmp	r3, #4
 800dc1c:	d003      	beq.n	800dc26 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	2205      	movs	r2, #5
 800dc22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2200      	movs	r2, #0
 800dc2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	687a      	ldr	r2, [r7, #4]
 800dc30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	887a      	ldrh	r2, [r7, #2]
 800dc36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	887a      	ldrh	r2, [r7, #2]
 800dc3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	68ba      	ldr	r2, [r7, #8]
 800dc42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	887a      	ldrh	r2, [r7, #2]
 800dc48:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	887a      	ldrh	r2, [r7, #2]
 800dc4e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	2200      	movs	r2, #0
 800dc54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	2200      	movs	r2, #0
 800dc5a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc66:	2b40      	cmp	r3, #64	; 0x40
 800dc68:	d007      	beq.n	800dc7a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	681a      	ldr	r2, [r3, #0]
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dc78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	68db      	ldr	r3, [r3, #12]
 800dc7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc82:	d178      	bne.n	800dd76 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	685b      	ldr	r3, [r3, #4]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d002      	beq.n	800dc92 <HAL_SPI_TransmitReceive+0x10a>
 800dc8c:	8b7b      	ldrh	r3, [r7, #26]
 800dc8e:	2b01      	cmp	r3, #1
 800dc90:	d166      	bne.n	800dd60 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc96:	881a      	ldrh	r2, [r3, #0]
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dca2:	1c9a      	adds	r2, r3, #2
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dcac:	b29b      	uxth	r3, r3
 800dcae:	3b01      	subs	r3, #1
 800dcb0:	b29a      	uxth	r2, r3
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dcb6:	e053      	b.n	800dd60 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	689b      	ldr	r3, [r3, #8]
 800dcbe:	f003 0302 	and.w	r3, r3, #2
 800dcc2:	2b02      	cmp	r3, #2
 800dcc4:	d11b      	bne.n	800dcfe <HAL_SPI_TransmitReceive+0x176>
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dcca:	b29b      	uxth	r3, r3
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d016      	beq.n	800dcfe <HAL_SPI_TransmitReceive+0x176>
 800dcd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcd2:	2b01      	cmp	r3, #1
 800dcd4:	d113      	bne.n	800dcfe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcda:	881a      	ldrh	r2, [r3, #0]
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dce6:	1c9a      	adds	r2, r3, #2
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dcf0:	b29b      	uxth	r3, r3
 800dcf2:	3b01      	subs	r3, #1
 800dcf4:	b29a      	uxth	r2, r3
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	689b      	ldr	r3, [r3, #8]
 800dd04:	f003 0301 	and.w	r3, r3, #1
 800dd08:	2b01      	cmp	r3, #1
 800dd0a:	d119      	bne.n	800dd40 <HAL_SPI_TransmitReceive+0x1b8>
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd10:	b29b      	uxth	r3, r3
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d014      	beq.n	800dd40 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	68da      	ldr	r2, [r3, #12]
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd20:	b292      	uxth	r2, r2
 800dd22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd28:	1c9a      	adds	r2, r3, #2
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd32:	b29b      	uxth	r3, r3
 800dd34:	3b01      	subs	r3, #1
 800dd36:	b29a      	uxth	r2, r3
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800dd40:	f7fa fe4a 	bl	80089d8 <HAL_GetTick>
 800dd44:	4602      	mov	r2, r0
 800dd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd48:	1ad3      	subs	r3, r2, r3
 800dd4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	d807      	bhi.n	800dd60 <HAL_SPI_TransmitReceive+0x1d8>
 800dd50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd56:	d003      	beq.n	800dd60 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800dd58:	2303      	movs	r3, #3
 800dd5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800dd5e:	e0a7      	b.n	800deb0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dd64:	b29b      	uxth	r3, r3
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d1a6      	bne.n	800dcb8 <HAL_SPI_TransmitReceive+0x130>
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd6e:	b29b      	uxth	r3, r3
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d1a1      	bne.n	800dcb8 <HAL_SPI_TransmitReceive+0x130>
 800dd74:	e07c      	b.n	800de70 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	685b      	ldr	r3, [r3, #4]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d002      	beq.n	800dd84 <HAL_SPI_TransmitReceive+0x1fc>
 800dd7e:	8b7b      	ldrh	r3, [r7, #26]
 800dd80:	2b01      	cmp	r3, #1
 800dd82:	d16b      	bne.n	800de5c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	330c      	adds	r3, #12
 800dd8e:	7812      	ldrb	r2, [r2, #0]
 800dd90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd96:	1c5a      	adds	r2, r3, #1
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dda0:	b29b      	uxth	r3, r3
 800dda2:	3b01      	subs	r3, #1
 800dda4:	b29a      	uxth	r2, r3
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ddaa:	e057      	b.n	800de5c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	689b      	ldr	r3, [r3, #8]
 800ddb2:	f003 0302 	and.w	r3, r3, #2
 800ddb6:	2b02      	cmp	r3, #2
 800ddb8:	d11c      	bne.n	800ddf4 <HAL_SPI_TransmitReceive+0x26c>
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ddbe:	b29b      	uxth	r3, r3
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d017      	beq.n	800ddf4 <HAL_SPI_TransmitReceive+0x26c>
 800ddc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddc6:	2b01      	cmp	r3, #1
 800ddc8:	d114      	bne.n	800ddf4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	330c      	adds	r3, #12
 800ddd4:	7812      	ldrb	r2, [r2, #0]
 800ddd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dddc:	1c5a      	adds	r2, r3, #1
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dde6:	b29b      	uxth	r3, r3
 800dde8:	3b01      	subs	r3, #1
 800ddea:	b29a      	uxth	r2, r3
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	689b      	ldr	r3, [r3, #8]
 800ddfa:	f003 0301 	and.w	r3, r3, #1
 800ddfe:	2b01      	cmp	r3, #1
 800de00:	d119      	bne.n	800de36 <HAL_SPI_TransmitReceive+0x2ae>
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de06:	b29b      	uxth	r3, r3
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d014      	beq.n	800de36 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	68da      	ldr	r2, [r3, #12]
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de16:	b2d2      	uxtb	r2, r2
 800de18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de1e:	1c5a      	adds	r2, r3, #1
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de28:	b29b      	uxth	r3, r3
 800de2a:	3b01      	subs	r3, #1
 800de2c:	b29a      	uxth	r2, r3
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800de32:	2301      	movs	r3, #1
 800de34:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800de36:	f7fa fdcf 	bl	80089d8 <HAL_GetTick>
 800de3a:	4602      	mov	r2, r0
 800de3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de3e:	1ad3      	subs	r3, r2, r3
 800de40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de42:	429a      	cmp	r2, r3
 800de44:	d803      	bhi.n	800de4e <HAL_SPI_TransmitReceive+0x2c6>
 800de46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de4c:	d102      	bne.n	800de54 <HAL_SPI_TransmitReceive+0x2cc>
 800de4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de50:	2b00      	cmp	r3, #0
 800de52:	d103      	bne.n	800de5c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800de54:	2303      	movs	r3, #3
 800de56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800de5a:	e029      	b.n	800deb0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800de60:	b29b      	uxth	r3, r3
 800de62:	2b00      	cmp	r3, #0
 800de64:	d1a2      	bne.n	800ddac <HAL_SPI_TransmitReceive+0x224>
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de6a:	b29b      	uxth	r3, r3
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d19d      	bne.n	800ddac <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800de70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800de74:	68f8      	ldr	r0, [r7, #12]
 800de76:	f000 f917 	bl	800e0a8 <SPI_EndRxTxTransaction>
 800de7a:	4603      	mov	r3, r0
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d006      	beq.n	800de8e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800de80:	2301      	movs	r3, #1
 800de82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	2220      	movs	r2, #32
 800de8a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800de8c:	e010      	b.n	800deb0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	689b      	ldr	r3, [r3, #8]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d10b      	bne.n	800deae <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800de96:	2300      	movs	r3, #0
 800de98:	617b      	str	r3, [r7, #20]
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	68db      	ldr	r3, [r3, #12]
 800dea0:	617b      	str	r3, [r7, #20]
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	689b      	ldr	r3, [r3, #8]
 800dea8:	617b      	str	r3, [r7, #20]
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	e000      	b.n	800deb0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800deae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	2201      	movs	r2, #1
 800deb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	2200      	movs	r2, #0
 800debc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800dec0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800dec4:	4618      	mov	r0, r3
 800dec6:	3730      	adds	r7, #48	; 0x30
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}

0800decc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b088      	sub	sp, #32
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	60f8      	str	r0, [r7, #12]
 800ded4:	60b9      	str	r1, [r7, #8]
 800ded6:	603b      	str	r3, [r7, #0]
 800ded8:	4613      	mov	r3, r2
 800deda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800dedc:	f7fa fd7c 	bl	80089d8 <HAL_GetTick>
 800dee0:	4602      	mov	r2, r0
 800dee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee4:	1a9b      	subs	r3, r3, r2
 800dee6:	683a      	ldr	r2, [r7, #0]
 800dee8:	4413      	add	r3, r2
 800deea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800deec:	f7fa fd74 	bl	80089d8 <HAL_GetTick>
 800def0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800def2:	4b39      	ldr	r3, [pc, #228]	; (800dfd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	015b      	lsls	r3, r3, #5
 800def8:	0d1b      	lsrs	r3, r3, #20
 800defa:	69fa      	ldr	r2, [r7, #28]
 800defc:	fb02 f303 	mul.w	r3, r2, r3
 800df00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800df02:	e054      	b.n	800dfae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df0a:	d050      	beq.n	800dfae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800df0c:	f7fa fd64 	bl	80089d8 <HAL_GetTick>
 800df10:	4602      	mov	r2, r0
 800df12:	69bb      	ldr	r3, [r7, #24]
 800df14:	1ad3      	subs	r3, r2, r3
 800df16:	69fa      	ldr	r2, [r7, #28]
 800df18:	429a      	cmp	r2, r3
 800df1a:	d902      	bls.n	800df22 <SPI_WaitFlagStateUntilTimeout+0x56>
 800df1c:	69fb      	ldr	r3, [r7, #28]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d13d      	bne.n	800df9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	685a      	ldr	r2, [r3, #4]
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800df30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	685b      	ldr	r3, [r3, #4]
 800df36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800df3a:	d111      	bne.n	800df60 <SPI_WaitFlagStateUntilTimeout+0x94>
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	689b      	ldr	r3, [r3, #8]
 800df40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df44:	d004      	beq.n	800df50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	689b      	ldr	r3, [r3, #8]
 800df4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df4e:	d107      	bne.n	800df60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	681a      	ldr	r2, [r3, #0]
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800df5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800df68:	d10f      	bne.n	800df8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	681a      	ldr	r2, [r3, #0]
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800df78:	601a      	str	r2, [r3, #0]
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	681a      	ldr	r2, [r3, #0]
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800df88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	2201      	movs	r2, #1
 800df8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	2200      	movs	r2, #0
 800df96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800df9a:	2303      	movs	r3, #3
 800df9c:	e017      	b.n	800dfce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d101      	bne.n	800dfa8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800dfa8:	697b      	ldr	r3, [r7, #20]
 800dfaa:	3b01      	subs	r3, #1
 800dfac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	689a      	ldr	r2, [r3, #8]
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	4013      	ands	r3, r2
 800dfb8:	68ba      	ldr	r2, [r7, #8]
 800dfba:	429a      	cmp	r2, r3
 800dfbc:	bf0c      	ite	eq
 800dfbe:	2301      	moveq	r3, #1
 800dfc0:	2300      	movne	r3, #0
 800dfc2:	b2db      	uxtb	r3, r3
 800dfc4:	461a      	mov	r2, r3
 800dfc6:	79fb      	ldrb	r3, [r7, #7]
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	d19b      	bne.n	800df04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800dfcc:	2300      	movs	r3, #0
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3720      	adds	r7, #32
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
 800dfd6:	bf00      	nop
 800dfd8:	20000004 	.word	0x20000004

0800dfdc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b086      	sub	sp, #24
 800dfe0:	af02      	add	r7, sp, #8
 800dfe2:	60f8      	str	r0, [r7, #12]
 800dfe4:	60b9      	str	r1, [r7, #8]
 800dfe6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	685b      	ldr	r3, [r3, #4]
 800dfec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dff0:	d111      	bne.n	800e016 <SPI_EndRxTransaction+0x3a>
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	689b      	ldr	r3, [r3, #8]
 800dff6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dffa:	d004      	beq.n	800e006 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	689b      	ldr	r3, [r3, #8]
 800e000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e004:	d107      	bne.n	800e016 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	681a      	ldr	r2, [r3, #0]
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e014:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	685b      	ldr	r3, [r3, #4]
 800e01a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e01e:	d12a      	bne.n	800e076 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	689b      	ldr	r3, [r3, #8]
 800e024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e028:	d012      	beq.n	800e050 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	9300      	str	r3, [sp, #0]
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	2200      	movs	r2, #0
 800e032:	2180      	movs	r1, #128	; 0x80
 800e034:	68f8      	ldr	r0, [r7, #12]
 800e036:	f7ff ff49 	bl	800decc <SPI_WaitFlagStateUntilTimeout>
 800e03a:	4603      	mov	r3, r0
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d02d      	beq.n	800e09c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e044:	f043 0220 	orr.w	r2, r3, #32
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e04c:	2303      	movs	r3, #3
 800e04e:	e026      	b.n	800e09e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	9300      	str	r3, [sp, #0]
 800e054:	68bb      	ldr	r3, [r7, #8]
 800e056:	2200      	movs	r2, #0
 800e058:	2101      	movs	r1, #1
 800e05a:	68f8      	ldr	r0, [r7, #12]
 800e05c:	f7ff ff36 	bl	800decc <SPI_WaitFlagStateUntilTimeout>
 800e060:	4603      	mov	r3, r0
 800e062:	2b00      	cmp	r3, #0
 800e064:	d01a      	beq.n	800e09c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e06a:	f043 0220 	orr.w	r2, r3, #32
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e072:	2303      	movs	r3, #3
 800e074:	e013      	b.n	800e09e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	9300      	str	r3, [sp, #0]
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	2200      	movs	r2, #0
 800e07e:	2101      	movs	r1, #1
 800e080:	68f8      	ldr	r0, [r7, #12]
 800e082:	f7ff ff23 	bl	800decc <SPI_WaitFlagStateUntilTimeout>
 800e086:	4603      	mov	r3, r0
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d007      	beq.n	800e09c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e090:	f043 0220 	orr.w	r2, r3, #32
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e098:	2303      	movs	r3, #3
 800e09a:	e000      	b.n	800e09e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800e09c:	2300      	movs	r3, #0
}
 800e09e:	4618      	mov	r0, r3
 800e0a0:	3710      	adds	r7, #16
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}
	...

0800e0a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b088      	sub	sp, #32
 800e0ac:	af02      	add	r7, sp, #8
 800e0ae:	60f8      	str	r0, [r7, #12]
 800e0b0:	60b9      	str	r1, [r7, #8]
 800e0b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e0b4:	4b1b      	ldr	r3, [pc, #108]	; (800e124 <SPI_EndRxTxTransaction+0x7c>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	4a1b      	ldr	r2, [pc, #108]	; (800e128 <SPI_EndRxTxTransaction+0x80>)
 800e0ba:	fba2 2303 	umull	r2, r3, r2, r3
 800e0be:	0d5b      	lsrs	r3, r3, #21
 800e0c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e0c4:	fb02 f303 	mul.w	r3, r2, r3
 800e0c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	685b      	ldr	r3, [r3, #4]
 800e0ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e0d2:	d112      	bne.n	800e0fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	9300      	str	r3, [sp, #0]
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	2180      	movs	r1, #128	; 0x80
 800e0de:	68f8      	ldr	r0, [r7, #12]
 800e0e0:	f7ff fef4 	bl	800decc <SPI_WaitFlagStateUntilTimeout>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d016      	beq.n	800e118 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0ee:	f043 0220 	orr.w	r2, r3, #32
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e0f6:	2303      	movs	r3, #3
 800e0f8:	e00f      	b.n	800e11a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d00a      	beq.n	800e116 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800e100:	697b      	ldr	r3, [r7, #20]
 800e102:	3b01      	subs	r3, #1
 800e104:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	689b      	ldr	r3, [r3, #8]
 800e10c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e110:	2b80      	cmp	r3, #128	; 0x80
 800e112:	d0f2      	beq.n	800e0fa <SPI_EndRxTxTransaction+0x52>
 800e114:	e000      	b.n	800e118 <SPI_EndRxTxTransaction+0x70>
        break;
 800e116:	bf00      	nop
  }

  return HAL_OK;
 800e118:	2300      	movs	r3, #0
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	3718      	adds	r7, #24
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}
 800e122:	bf00      	nop
 800e124:	20000004 	.word	0x20000004
 800e128:	165e9f81 	.word	0x165e9f81

0800e12c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b082      	sub	sp, #8
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d101      	bne.n	800e13e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e13a:	2301      	movs	r3, #1
 800e13c:	e041      	b.n	800e1c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e144:	b2db      	uxtb	r3, r3
 800e146:	2b00      	cmp	r3, #0
 800e148:	d106      	bne.n	800e158 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	2200      	movs	r2, #0
 800e14e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f000 f839 	bl	800e1ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2202      	movs	r2, #2
 800e15c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681a      	ldr	r2, [r3, #0]
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	3304      	adds	r3, #4
 800e168:	4619      	mov	r1, r3
 800e16a:	4610      	mov	r0, r2
 800e16c:	f000 faea 	bl	800e744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2201      	movs	r2, #1
 800e174:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2201      	movs	r2, #1
 800e17c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2201      	movs	r2, #1
 800e184:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2201      	movs	r2, #1
 800e18c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2201      	movs	r2, #1
 800e194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2201      	movs	r2, #1
 800e19c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2201      	movs	r2, #1
 800e1a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2201      	movs	r2, #1
 800e1ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2201      	movs	r2, #1
 800e1bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e1c0:	2300      	movs	r3, #0
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3708      	adds	r7, #8
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}

0800e1ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800e1ca:	b480      	push	{r7}
 800e1cc:	b083      	sub	sp, #12
 800e1ce:	af00      	add	r7, sp, #0
 800e1d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800e1d2:	bf00      	nop
 800e1d4:	370c      	adds	r7, #12
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1dc:	4770      	bx	lr
	...

0800e1e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e1e0:	b480      	push	{r7}
 800e1e2:	b085      	sub	sp, #20
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1ee:	b2db      	uxtb	r3, r3
 800e1f0:	2b01      	cmp	r3, #1
 800e1f2:	d001      	beq.n	800e1f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e1f4:	2301      	movs	r3, #1
 800e1f6:	e04e      	b.n	800e296 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2202      	movs	r2, #2
 800e1fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	68da      	ldr	r2, [r3, #12]
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	f042 0201 	orr.w	r2, r2, #1
 800e20e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	4a23      	ldr	r2, [pc, #140]	; (800e2a4 <HAL_TIM_Base_Start_IT+0xc4>)
 800e216:	4293      	cmp	r3, r2
 800e218:	d022      	beq.n	800e260 <HAL_TIM_Base_Start_IT+0x80>
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e222:	d01d      	beq.n	800e260 <HAL_TIM_Base_Start_IT+0x80>
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	4a1f      	ldr	r2, [pc, #124]	; (800e2a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800e22a:	4293      	cmp	r3, r2
 800e22c:	d018      	beq.n	800e260 <HAL_TIM_Base_Start_IT+0x80>
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	4a1e      	ldr	r2, [pc, #120]	; (800e2ac <HAL_TIM_Base_Start_IT+0xcc>)
 800e234:	4293      	cmp	r3, r2
 800e236:	d013      	beq.n	800e260 <HAL_TIM_Base_Start_IT+0x80>
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	4a1c      	ldr	r2, [pc, #112]	; (800e2b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800e23e:	4293      	cmp	r3, r2
 800e240:	d00e      	beq.n	800e260 <HAL_TIM_Base_Start_IT+0x80>
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	4a1b      	ldr	r2, [pc, #108]	; (800e2b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800e248:	4293      	cmp	r3, r2
 800e24a:	d009      	beq.n	800e260 <HAL_TIM_Base_Start_IT+0x80>
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	4a19      	ldr	r2, [pc, #100]	; (800e2b8 <HAL_TIM_Base_Start_IT+0xd8>)
 800e252:	4293      	cmp	r3, r2
 800e254:	d004      	beq.n	800e260 <HAL_TIM_Base_Start_IT+0x80>
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	4a18      	ldr	r2, [pc, #96]	; (800e2bc <HAL_TIM_Base_Start_IT+0xdc>)
 800e25c:	4293      	cmp	r3, r2
 800e25e:	d111      	bne.n	800e284 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	689b      	ldr	r3, [r3, #8]
 800e266:	f003 0307 	and.w	r3, r3, #7
 800e26a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	2b06      	cmp	r3, #6
 800e270:	d010      	beq.n	800e294 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	681a      	ldr	r2, [r3, #0]
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	f042 0201 	orr.w	r2, r2, #1
 800e280:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e282:	e007      	b.n	800e294 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	681a      	ldr	r2, [r3, #0]
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	f042 0201 	orr.w	r2, r2, #1
 800e292:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e294:	2300      	movs	r3, #0
}
 800e296:	4618      	mov	r0, r3
 800e298:	3714      	adds	r7, #20
 800e29a:	46bd      	mov	sp, r7
 800e29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a0:	4770      	bx	lr
 800e2a2:	bf00      	nop
 800e2a4:	40010000 	.word	0x40010000
 800e2a8:	40000400 	.word	0x40000400
 800e2ac:	40000800 	.word	0x40000800
 800e2b0:	40000c00 	.word	0x40000c00
 800e2b4:	40010400 	.word	0x40010400
 800e2b8:	40014000 	.word	0x40014000
 800e2bc:	40001800 	.word	0x40001800

0800e2c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b082      	sub	sp, #8
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d101      	bne.n	800e2d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e2ce:	2301      	movs	r3, #1
 800e2d0:	e041      	b.n	800e356 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e2d8:	b2db      	uxtb	r3, r3
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d106      	bne.n	800e2ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f7f4 feb4 	bl	8003054 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	2202      	movs	r2, #2
 800e2f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681a      	ldr	r2, [r3, #0]
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	3304      	adds	r3, #4
 800e2fc:	4619      	mov	r1, r3
 800e2fe:	4610      	mov	r0, r2
 800e300:	f000 fa20 	bl	800e744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2201      	movs	r2, #1
 800e308:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2201      	movs	r2, #1
 800e310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2201      	movs	r2, #1
 800e318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2201      	movs	r2, #1
 800e320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2201      	movs	r2, #1
 800e328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2201      	movs	r2, #1
 800e330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2201      	movs	r2, #1
 800e338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2201      	movs	r2, #1
 800e340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2201      	movs	r2, #1
 800e348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2201      	movs	r2, #1
 800e350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e354:	2300      	movs	r3, #0
}
 800e356:	4618      	mov	r0, r3
 800e358:	3708      	adds	r7, #8
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}

0800e35e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e35e:	b580      	push	{r7, lr}
 800e360:	b082      	sub	sp, #8
 800e362:	af00      	add	r7, sp, #0
 800e364:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	691b      	ldr	r3, [r3, #16]
 800e36c:	f003 0302 	and.w	r3, r3, #2
 800e370:	2b02      	cmp	r3, #2
 800e372:	d122      	bne.n	800e3ba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	68db      	ldr	r3, [r3, #12]
 800e37a:	f003 0302 	and.w	r3, r3, #2
 800e37e:	2b02      	cmp	r3, #2
 800e380:	d11b      	bne.n	800e3ba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	f06f 0202 	mvn.w	r2, #2
 800e38a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2201      	movs	r2, #1
 800e390:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	699b      	ldr	r3, [r3, #24]
 800e398:	f003 0303 	and.w	r3, r3, #3
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d003      	beq.n	800e3a8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f000 f9b1 	bl	800e708 <HAL_TIM_IC_CaptureCallback>
 800e3a6:	e005      	b.n	800e3b4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f000 f9a3 	bl	800e6f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e3ae:	6878      	ldr	r0, [r7, #4]
 800e3b0:	f000 f9b4 	bl	800e71c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	691b      	ldr	r3, [r3, #16]
 800e3c0:	f003 0304 	and.w	r3, r3, #4
 800e3c4:	2b04      	cmp	r3, #4
 800e3c6:	d122      	bne.n	800e40e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	68db      	ldr	r3, [r3, #12]
 800e3ce:	f003 0304 	and.w	r3, r3, #4
 800e3d2:	2b04      	cmp	r3, #4
 800e3d4:	d11b      	bne.n	800e40e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	f06f 0204 	mvn.w	r2, #4
 800e3de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2202      	movs	r2, #2
 800e3e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	699b      	ldr	r3, [r3, #24]
 800e3ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d003      	beq.n	800e3fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f000 f987 	bl	800e708 <HAL_TIM_IC_CaptureCallback>
 800e3fa:	e005      	b.n	800e408 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f000 f979 	bl	800e6f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f000 f98a 	bl	800e71c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2200      	movs	r2, #0
 800e40c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	691b      	ldr	r3, [r3, #16]
 800e414:	f003 0308 	and.w	r3, r3, #8
 800e418:	2b08      	cmp	r3, #8
 800e41a:	d122      	bne.n	800e462 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	68db      	ldr	r3, [r3, #12]
 800e422:	f003 0308 	and.w	r3, r3, #8
 800e426:	2b08      	cmp	r3, #8
 800e428:	d11b      	bne.n	800e462 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	f06f 0208 	mvn.w	r2, #8
 800e432:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2204      	movs	r2, #4
 800e438:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	69db      	ldr	r3, [r3, #28]
 800e440:	f003 0303 	and.w	r3, r3, #3
 800e444:	2b00      	cmp	r3, #0
 800e446:	d003      	beq.n	800e450 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f000 f95d 	bl	800e708 <HAL_TIM_IC_CaptureCallback>
 800e44e:	e005      	b.n	800e45c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f000 f94f 	bl	800e6f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	f000 f960 	bl	800e71c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2200      	movs	r2, #0
 800e460:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	691b      	ldr	r3, [r3, #16]
 800e468:	f003 0310 	and.w	r3, r3, #16
 800e46c:	2b10      	cmp	r3, #16
 800e46e:	d122      	bne.n	800e4b6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	68db      	ldr	r3, [r3, #12]
 800e476:	f003 0310 	and.w	r3, r3, #16
 800e47a:	2b10      	cmp	r3, #16
 800e47c:	d11b      	bne.n	800e4b6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	f06f 0210 	mvn.w	r2, #16
 800e486:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2208      	movs	r2, #8
 800e48c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	69db      	ldr	r3, [r3, #28]
 800e494:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d003      	beq.n	800e4a4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e49c:	6878      	ldr	r0, [r7, #4]
 800e49e:	f000 f933 	bl	800e708 <HAL_TIM_IC_CaptureCallback>
 800e4a2:	e005      	b.n	800e4b0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	f000 f925 	bl	800e6f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f000 f936 	bl	800e71c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	691b      	ldr	r3, [r3, #16]
 800e4bc:	f003 0301 	and.w	r3, r3, #1
 800e4c0:	2b01      	cmp	r3, #1
 800e4c2:	d10e      	bne.n	800e4e2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	68db      	ldr	r3, [r3, #12]
 800e4ca:	f003 0301 	and.w	r3, r3, #1
 800e4ce:	2b01      	cmp	r3, #1
 800e4d0:	d107      	bne.n	800e4e2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	f06f 0201 	mvn.w	r2, #1
 800e4da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f7f4 fb71 	bl	8002bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	691b      	ldr	r3, [r3, #16]
 800e4e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4ec:	2b80      	cmp	r3, #128	; 0x80
 800e4ee:	d10e      	bne.n	800e50e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	68db      	ldr	r3, [r3, #12]
 800e4f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4fa:	2b80      	cmp	r3, #128	; 0x80
 800e4fc:	d107      	bne.n	800e50e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e508:	6878      	ldr	r0, [r7, #4]
 800e50a:	f000 fbf1 	bl	800ecf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	691b      	ldr	r3, [r3, #16]
 800e514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e518:	2b40      	cmp	r3, #64	; 0x40
 800e51a:	d10e      	bne.n	800e53a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	68db      	ldr	r3, [r3, #12]
 800e522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e526:	2b40      	cmp	r3, #64	; 0x40
 800e528:	d107      	bne.n	800e53a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f000 f8fb 	bl	800e730 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	691b      	ldr	r3, [r3, #16]
 800e540:	f003 0320 	and.w	r3, r3, #32
 800e544:	2b20      	cmp	r3, #32
 800e546:	d10e      	bne.n	800e566 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	68db      	ldr	r3, [r3, #12]
 800e54e:	f003 0320 	and.w	r3, r3, #32
 800e552:	2b20      	cmp	r3, #32
 800e554:	d107      	bne.n	800e566 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	f06f 0220 	mvn.w	r2, #32
 800e55e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f000 fbbb 	bl	800ecdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e566:	bf00      	nop
 800e568:	3708      	adds	r7, #8
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}
	...

0800e570 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b086      	sub	sp, #24
 800e574:	af00      	add	r7, sp, #0
 800e576:	60f8      	str	r0, [r7, #12]
 800e578:	60b9      	str	r1, [r7, #8]
 800e57a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e57c:	2300      	movs	r3, #0
 800e57e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e586:	2b01      	cmp	r3, #1
 800e588:	d101      	bne.n	800e58e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e58a:	2302      	movs	r3, #2
 800e58c:	e0ae      	b.n	800e6ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	2201      	movs	r2, #1
 800e592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2b0c      	cmp	r3, #12
 800e59a:	f200 809f 	bhi.w	800e6dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800e59e:	a201      	add	r2, pc, #4	; (adr r2, 800e5a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5a4:	0800e5d9 	.word	0x0800e5d9
 800e5a8:	0800e6dd 	.word	0x0800e6dd
 800e5ac:	0800e6dd 	.word	0x0800e6dd
 800e5b0:	0800e6dd 	.word	0x0800e6dd
 800e5b4:	0800e619 	.word	0x0800e619
 800e5b8:	0800e6dd 	.word	0x0800e6dd
 800e5bc:	0800e6dd 	.word	0x0800e6dd
 800e5c0:	0800e6dd 	.word	0x0800e6dd
 800e5c4:	0800e65b 	.word	0x0800e65b
 800e5c8:	0800e6dd 	.word	0x0800e6dd
 800e5cc:	0800e6dd 	.word	0x0800e6dd
 800e5d0:	0800e6dd 	.word	0x0800e6dd
 800e5d4:	0800e69b 	.word	0x0800e69b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	68b9      	ldr	r1, [r7, #8]
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f000 f950 	bl	800e884 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	699a      	ldr	r2, [r3, #24]
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	f042 0208 	orr.w	r2, r2, #8
 800e5f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	699a      	ldr	r2, [r3, #24]
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	f022 0204 	bic.w	r2, r2, #4
 800e602:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	6999      	ldr	r1, [r3, #24]
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	691a      	ldr	r2, [r3, #16]
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	430a      	orrs	r2, r1
 800e614:	619a      	str	r2, [r3, #24]
      break;
 800e616:	e064      	b.n	800e6e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	68b9      	ldr	r1, [r7, #8]
 800e61e:	4618      	mov	r0, r3
 800e620:	f000 f9a0 	bl	800e964 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	699a      	ldr	r2, [r3, #24]
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e632:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	699a      	ldr	r2, [r3, #24]
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e642:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	6999      	ldr	r1, [r3, #24]
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	691b      	ldr	r3, [r3, #16]
 800e64e:	021a      	lsls	r2, r3, #8
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	430a      	orrs	r2, r1
 800e656:	619a      	str	r2, [r3, #24]
      break;
 800e658:	e043      	b.n	800e6e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	68b9      	ldr	r1, [r7, #8]
 800e660:	4618      	mov	r0, r3
 800e662:	f000 f9f5 	bl	800ea50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	69da      	ldr	r2, [r3, #28]
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	f042 0208 	orr.w	r2, r2, #8
 800e674:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	69da      	ldr	r2, [r3, #28]
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	f022 0204 	bic.w	r2, r2, #4
 800e684:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	69d9      	ldr	r1, [r3, #28]
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	691a      	ldr	r2, [r3, #16]
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	430a      	orrs	r2, r1
 800e696:	61da      	str	r2, [r3, #28]
      break;
 800e698:	e023      	b.n	800e6e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	68b9      	ldr	r1, [r7, #8]
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f000 fa49 	bl	800eb38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	69da      	ldr	r2, [r3, #28]
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e6b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	69da      	ldr	r2, [r3, #28]
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e6c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	69d9      	ldr	r1, [r3, #28]
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	691b      	ldr	r3, [r3, #16]
 800e6d0:	021a      	lsls	r2, r3, #8
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	430a      	orrs	r2, r1
 800e6d8:	61da      	str	r2, [r3, #28]
      break;
 800e6da:	e002      	b.n	800e6e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800e6dc:	2301      	movs	r3, #1
 800e6de:	75fb      	strb	r3, [r7, #23]
      break;
 800e6e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e6ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	3718      	adds	r7, #24
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}

0800e6f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e6f4:	b480      	push	{r7}
 800e6f6:	b083      	sub	sp, #12
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e6fc:	bf00      	nop
 800e6fe:	370c      	adds	r7, #12
 800e700:	46bd      	mov	sp, r7
 800e702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e706:	4770      	bx	lr

0800e708 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e708:	b480      	push	{r7}
 800e70a:	b083      	sub	sp, #12
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e710:	bf00      	nop
 800e712:	370c      	adds	r7, #12
 800e714:	46bd      	mov	sp, r7
 800e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71a:	4770      	bx	lr

0800e71c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e71c:	b480      	push	{r7}
 800e71e:	b083      	sub	sp, #12
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e724:	bf00      	nop
 800e726:	370c      	adds	r7, #12
 800e728:	46bd      	mov	sp, r7
 800e72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72e:	4770      	bx	lr

0800e730 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e730:	b480      	push	{r7}
 800e732:	b083      	sub	sp, #12
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e738:	bf00      	nop
 800e73a:	370c      	adds	r7, #12
 800e73c:	46bd      	mov	sp, r7
 800e73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e742:	4770      	bx	lr

0800e744 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e744:	b480      	push	{r7}
 800e746:	b085      	sub	sp, #20
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
 800e74c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	4a40      	ldr	r2, [pc, #256]	; (800e858 <TIM_Base_SetConfig+0x114>)
 800e758:	4293      	cmp	r3, r2
 800e75a:	d013      	beq.n	800e784 <TIM_Base_SetConfig+0x40>
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e762:	d00f      	beq.n	800e784 <TIM_Base_SetConfig+0x40>
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	4a3d      	ldr	r2, [pc, #244]	; (800e85c <TIM_Base_SetConfig+0x118>)
 800e768:	4293      	cmp	r3, r2
 800e76a:	d00b      	beq.n	800e784 <TIM_Base_SetConfig+0x40>
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	4a3c      	ldr	r2, [pc, #240]	; (800e860 <TIM_Base_SetConfig+0x11c>)
 800e770:	4293      	cmp	r3, r2
 800e772:	d007      	beq.n	800e784 <TIM_Base_SetConfig+0x40>
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	4a3b      	ldr	r2, [pc, #236]	; (800e864 <TIM_Base_SetConfig+0x120>)
 800e778:	4293      	cmp	r3, r2
 800e77a:	d003      	beq.n	800e784 <TIM_Base_SetConfig+0x40>
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	4a3a      	ldr	r2, [pc, #232]	; (800e868 <TIM_Base_SetConfig+0x124>)
 800e780:	4293      	cmp	r3, r2
 800e782:	d108      	bne.n	800e796 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e78a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	685b      	ldr	r3, [r3, #4]
 800e790:	68fa      	ldr	r2, [r7, #12]
 800e792:	4313      	orrs	r3, r2
 800e794:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	4a2f      	ldr	r2, [pc, #188]	; (800e858 <TIM_Base_SetConfig+0x114>)
 800e79a:	4293      	cmp	r3, r2
 800e79c:	d02b      	beq.n	800e7f6 <TIM_Base_SetConfig+0xb2>
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e7a4:	d027      	beq.n	800e7f6 <TIM_Base_SetConfig+0xb2>
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	4a2c      	ldr	r2, [pc, #176]	; (800e85c <TIM_Base_SetConfig+0x118>)
 800e7aa:	4293      	cmp	r3, r2
 800e7ac:	d023      	beq.n	800e7f6 <TIM_Base_SetConfig+0xb2>
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	4a2b      	ldr	r2, [pc, #172]	; (800e860 <TIM_Base_SetConfig+0x11c>)
 800e7b2:	4293      	cmp	r3, r2
 800e7b4:	d01f      	beq.n	800e7f6 <TIM_Base_SetConfig+0xb2>
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	4a2a      	ldr	r2, [pc, #168]	; (800e864 <TIM_Base_SetConfig+0x120>)
 800e7ba:	4293      	cmp	r3, r2
 800e7bc:	d01b      	beq.n	800e7f6 <TIM_Base_SetConfig+0xb2>
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	4a29      	ldr	r2, [pc, #164]	; (800e868 <TIM_Base_SetConfig+0x124>)
 800e7c2:	4293      	cmp	r3, r2
 800e7c4:	d017      	beq.n	800e7f6 <TIM_Base_SetConfig+0xb2>
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	4a28      	ldr	r2, [pc, #160]	; (800e86c <TIM_Base_SetConfig+0x128>)
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	d013      	beq.n	800e7f6 <TIM_Base_SetConfig+0xb2>
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	4a27      	ldr	r2, [pc, #156]	; (800e870 <TIM_Base_SetConfig+0x12c>)
 800e7d2:	4293      	cmp	r3, r2
 800e7d4:	d00f      	beq.n	800e7f6 <TIM_Base_SetConfig+0xb2>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	4a26      	ldr	r2, [pc, #152]	; (800e874 <TIM_Base_SetConfig+0x130>)
 800e7da:	4293      	cmp	r3, r2
 800e7dc:	d00b      	beq.n	800e7f6 <TIM_Base_SetConfig+0xb2>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	4a25      	ldr	r2, [pc, #148]	; (800e878 <TIM_Base_SetConfig+0x134>)
 800e7e2:	4293      	cmp	r3, r2
 800e7e4:	d007      	beq.n	800e7f6 <TIM_Base_SetConfig+0xb2>
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	4a24      	ldr	r2, [pc, #144]	; (800e87c <TIM_Base_SetConfig+0x138>)
 800e7ea:	4293      	cmp	r3, r2
 800e7ec:	d003      	beq.n	800e7f6 <TIM_Base_SetConfig+0xb2>
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	4a23      	ldr	r2, [pc, #140]	; (800e880 <TIM_Base_SetConfig+0x13c>)
 800e7f2:	4293      	cmp	r3, r2
 800e7f4:	d108      	bne.n	800e808 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e7fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	68db      	ldr	r3, [r3, #12]
 800e802:	68fa      	ldr	r2, [r7, #12]
 800e804:	4313      	orrs	r3, r2
 800e806:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	695b      	ldr	r3, [r3, #20]
 800e812:	4313      	orrs	r3, r2
 800e814:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	68fa      	ldr	r2, [r7, #12]
 800e81a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	689a      	ldr	r2, [r3, #8]
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	681a      	ldr	r2, [r3, #0]
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	4a0a      	ldr	r2, [pc, #40]	; (800e858 <TIM_Base_SetConfig+0x114>)
 800e830:	4293      	cmp	r3, r2
 800e832:	d003      	beq.n	800e83c <TIM_Base_SetConfig+0xf8>
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	4a0c      	ldr	r2, [pc, #48]	; (800e868 <TIM_Base_SetConfig+0x124>)
 800e838:	4293      	cmp	r3, r2
 800e83a:	d103      	bne.n	800e844 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	691a      	ldr	r2, [r3, #16]
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2201      	movs	r2, #1
 800e848:	615a      	str	r2, [r3, #20]
}
 800e84a:	bf00      	nop
 800e84c:	3714      	adds	r7, #20
 800e84e:	46bd      	mov	sp, r7
 800e850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e854:	4770      	bx	lr
 800e856:	bf00      	nop
 800e858:	40010000 	.word	0x40010000
 800e85c:	40000400 	.word	0x40000400
 800e860:	40000800 	.word	0x40000800
 800e864:	40000c00 	.word	0x40000c00
 800e868:	40010400 	.word	0x40010400
 800e86c:	40014000 	.word	0x40014000
 800e870:	40014400 	.word	0x40014400
 800e874:	40014800 	.word	0x40014800
 800e878:	40001800 	.word	0x40001800
 800e87c:	40001c00 	.word	0x40001c00
 800e880:	40002000 	.word	0x40002000

0800e884 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e884:	b480      	push	{r7}
 800e886:	b087      	sub	sp, #28
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
 800e88c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6a1b      	ldr	r3, [r3, #32]
 800e892:	f023 0201 	bic.w	r2, r3, #1
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	6a1b      	ldr	r3, [r3, #32]
 800e89e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	685b      	ldr	r3, [r3, #4]
 800e8a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	699b      	ldr	r3, [r3, #24]
 800e8aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e8b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	f023 0303 	bic.w	r3, r3, #3
 800e8ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	68fa      	ldr	r2, [r7, #12]
 800e8c2:	4313      	orrs	r3, r2
 800e8c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	f023 0302 	bic.w	r3, r3, #2
 800e8cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	689b      	ldr	r3, [r3, #8]
 800e8d2:	697a      	ldr	r2, [r7, #20]
 800e8d4:	4313      	orrs	r3, r2
 800e8d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	4a20      	ldr	r2, [pc, #128]	; (800e95c <TIM_OC1_SetConfig+0xd8>)
 800e8dc:	4293      	cmp	r3, r2
 800e8de:	d003      	beq.n	800e8e8 <TIM_OC1_SetConfig+0x64>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	4a1f      	ldr	r2, [pc, #124]	; (800e960 <TIM_OC1_SetConfig+0xdc>)
 800e8e4:	4293      	cmp	r3, r2
 800e8e6:	d10c      	bne.n	800e902 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	f023 0308 	bic.w	r3, r3, #8
 800e8ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	68db      	ldr	r3, [r3, #12]
 800e8f4:	697a      	ldr	r2, [r7, #20]
 800e8f6:	4313      	orrs	r3, r2
 800e8f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e8fa:	697b      	ldr	r3, [r7, #20]
 800e8fc:	f023 0304 	bic.w	r3, r3, #4
 800e900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	4a15      	ldr	r2, [pc, #84]	; (800e95c <TIM_OC1_SetConfig+0xd8>)
 800e906:	4293      	cmp	r3, r2
 800e908:	d003      	beq.n	800e912 <TIM_OC1_SetConfig+0x8e>
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	4a14      	ldr	r2, [pc, #80]	; (800e960 <TIM_OC1_SetConfig+0xdc>)
 800e90e:	4293      	cmp	r3, r2
 800e910:	d111      	bne.n	800e936 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e918:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e91a:	693b      	ldr	r3, [r7, #16]
 800e91c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e920:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	695b      	ldr	r3, [r3, #20]
 800e926:	693a      	ldr	r2, [r7, #16]
 800e928:	4313      	orrs	r3, r2
 800e92a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	699b      	ldr	r3, [r3, #24]
 800e930:	693a      	ldr	r2, [r7, #16]
 800e932:	4313      	orrs	r3, r2
 800e934:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	693a      	ldr	r2, [r7, #16]
 800e93a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	68fa      	ldr	r2, [r7, #12]
 800e940:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	685a      	ldr	r2, [r3, #4]
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	697a      	ldr	r2, [r7, #20]
 800e94e:	621a      	str	r2, [r3, #32]
}
 800e950:	bf00      	nop
 800e952:	371c      	adds	r7, #28
 800e954:	46bd      	mov	sp, r7
 800e956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95a:	4770      	bx	lr
 800e95c:	40010000 	.word	0x40010000
 800e960:	40010400 	.word	0x40010400

0800e964 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e964:	b480      	push	{r7}
 800e966:	b087      	sub	sp, #28
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
 800e96c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6a1b      	ldr	r3, [r3, #32]
 800e972:	f023 0210 	bic.w	r2, r3, #16
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6a1b      	ldr	r3, [r3, #32]
 800e97e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	685b      	ldr	r3, [r3, #4]
 800e984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	699b      	ldr	r3, [r3, #24]
 800e98a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e99a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	021b      	lsls	r3, r3, #8
 800e9a2:	68fa      	ldr	r2, [r7, #12]
 800e9a4:	4313      	orrs	r3, r2
 800e9a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e9a8:	697b      	ldr	r3, [r7, #20]
 800e9aa:	f023 0320 	bic.w	r3, r3, #32
 800e9ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	689b      	ldr	r3, [r3, #8]
 800e9b4:	011b      	lsls	r3, r3, #4
 800e9b6:	697a      	ldr	r2, [r7, #20]
 800e9b8:	4313      	orrs	r3, r2
 800e9ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	4a22      	ldr	r2, [pc, #136]	; (800ea48 <TIM_OC2_SetConfig+0xe4>)
 800e9c0:	4293      	cmp	r3, r2
 800e9c2:	d003      	beq.n	800e9cc <TIM_OC2_SetConfig+0x68>
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	4a21      	ldr	r2, [pc, #132]	; (800ea4c <TIM_OC2_SetConfig+0xe8>)
 800e9c8:	4293      	cmp	r3, r2
 800e9ca:	d10d      	bne.n	800e9e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e9cc:	697b      	ldr	r3, [r7, #20]
 800e9ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e9d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	68db      	ldr	r3, [r3, #12]
 800e9d8:	011b      	lsls	r3, r3, #4
 800e9da:	697a      	ldr	r2, [r7, #20]
 800e9dc:	4313      	orrs	r3, r2
 800e9de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e9e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	4a17      	ldr	r2, [pc, #92]	; (800ea48 <TIM_OC2_SetConfig+0xe4>)
 800e9ec:	4293      	cmp	r3, r2
 800e9ee:	d003      	beq.n	800e9f8 <TIM_OC2_SetConfig+0x94>
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	4a16      	ldr	r2, [pc, #88]	; (800ea4c <TIM_OC2_SetConfig+0xe8>)
 800e9f4:	4293      	cmp	r3, r2
 800e9f6:	d113      	bne.n	800ea20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e9f8:	693b      	ldr	r3, [r7, #16]
 800e9fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e9fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ea06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	695b      	ldr	r3, [r3, #20]
 800ea0c:	009b      	lsls	r3, r3, #2
 800ea0e:	693a      	ldr	r2, [r7, #16]
 800ea10:	4313      	orrs	r3, r2
 800ea12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	699b      	ldr	r3, [r3, #24]
 800ea18:	009b      	lsls	r3, r3, #2
 800ea1a:	693a      	ldr	r2, [r7, #16]
 800ea1c:	4313      	orrs	r3, r2
 800ea1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	693a      	ldr	r2, [r7, #16]
 800ea24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	68fa      	ldr	r2, [r7, #12]
 800ea2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	685a      	ldr	r2, [r3, #4]
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	697a      	ldr	r2, [r7, #20]
 800ea38:	621a      	str	r2, [r3, #32]
}
 800ea3a:	bf00      	nop
 800ea3c:	371c      	adds	r7, #28
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea44:	4770      	bx	lr
 800ea46:	bf00      	nop
 800ea48:	40010000 	.word	0x40010000
 800ea4c:	40010400 	.word	0x40010400

0800ea50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ea50:	b480      	push	{r7}
 800ea52:	b087      	sub	sp, #28
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
 800ea58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6a1b      	ldr	r3, [r3, #32]
 800ea5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	6a1b      	ldr	r3, [r3, #32]
 800ea6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	685b      	ldr	r3, [r3, #4]
 800ea70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	69db      	ldr	r3, [r3, #28]
 800ea76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	f023 0303 	bic.w	r3, r3, #3
 800ea86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	68fa      	ldr	r2, [r7, #12]
 800ea8e:	4313      	orrs	r3, r2
 800ea90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ea92:	697b      	ldr	r3, [r7, #20]
 800ea94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ea98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	689b      	ldr	r3, [r3, #8]
 800ea9e:	021b      	lsls	r3, r3, #8
 800eaa0:	697a      	ldr	r2, [r7, #20]
 800eaa2:	4313      	orrs	r3, r2
 800eaa4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	4a21      	ldr	r2, [pc, #132]	; (800eb30 <TIM_OC3_SetConfig+0xe0>)
 800eaaa:	4293      	cmp	r3, r2
 800eaac:	d003      	beq.n	800eab6 <TIM_OC3_SetConfig+0x66>
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	4a20      	ldr	r2, [pc, #128]	; (800eb34 <TIM_OC3_SetConfig+0xe4>)
 800eab2:	4293      	cmp	r3, r2
 800eab4:	d10d      	bne.n	800ead2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800eab6:	697b      	ldr	r3, [r7, #20]
 800eab8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eabc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	68db      	ldr	r3, [r3, #12]
 800eac2:	021b      	lsls	r3, r3, #8
 800eac4:	697a      	ldr	r2, [r7, #20]
 800eac6:	4313      	orrs	r3, r2
 800eac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ead0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	4a16      	ldr	r2, [pc, #88]	; (800eb30 <TIM_OC3_SetConfig+0xe0>)
 800ead6:	4293      	cmp	r3, r2
 800ead8:	d003      	beq.n	800eae2 <TIM_OC3_SetConfig+0x92>
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	4a15      	ldr	r2, [pc, #84]	; (800eb34 <TIM_OC3_SetConfig+0xe4>)
 800eade:	4293      	cmp	r3, r2
 800eae0:	d113      	bne.n	800eb0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eae8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800eaea:	693b      	ldr	r3, [r7, #16]
 800eaec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eaf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800eaf2:	683b      	ldr	r3, [r7, #0]
 800eaf4:	695b      	ldr	r3, [r3, #20]
 800eaf6:	011b      	lsls	r3, r3, #4
 800eaf8:	693a      	ldr	r2, [r7, #16]
 800eafa:	4313      	orrs	r3, r2
 800eafc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	699b      	ldr	r3, [r3, #24]
 800eb02:	011b      	lsls	r3, r3, #4
 800eb04:	693a      	ldr	r2, [r7, #16]
 800eb06:	4313      	orrs	r3, r2
 800eb08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	693a      	ldr	r2, [r7, #16]
 800eb0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	68fa      	ldr	r2, [r7, #12]
 800eb14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	685a      	ldr	r2, [r3, #4]
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	697a      	ldr	r2, [r7, #20]
 800eb22:	621a      	str	r2, [r3, #32]
}
 800eb24:	bf00      	nop
 800eb26:	371c      	adds	r7, #28
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2e:	4770      	bx	lr
 800eb30:	40010000 	.word	0x40010000
 800eb34:	40010400 	.word	0x40010400

0800eb38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eb38:	b480      	push	{r7}
 800eb3a:	b087      	sub	sp, #28
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
 800eb40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6a1b      	ldr	r3, [r3, #32]
 800eb46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	6a1b      	ldr	r3, [r3, #32]
 800eb52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	685b      	ldr	r3, [r3, #4]
 800eb58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	69db      	ldr	r3, [r3, #28]
 800eb5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eb66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eb6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	021b      	lsls	r3, r3, #8
 800eb76:	68fa      	ldr	r2, [r7, #12]
 800eb78:	4313      	orrs	r3, r2
 800eb7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800eb7c:	693b      	ldr	r3, [r7, #16]
 800eb7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eb82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	689b      	ldr	r3, [r3, #8]
 800eb88:	031b      	lsls	r3, r3, #12
 800eb8a:	693a      	ldr	r2, [r7, #16]
 800eb8c:	4313      	orrs	r3, r2
 800eb8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	4a12      	ldr	r2, [pc, #72]	; (800ebdc <TIM_OC4_SetConfig+0xa4>)
 800eb94:	4293      	cmp	r3, r2
 800eb96:	d003      	beq.n	800eba0 <TIM_OC4_SetConfig+0x68>
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	4a11      	ldr	r2, [pc, #68]	; (800ebe0 <TIM_OC4_SetConfig+0xa8>)
 800eb9c:	4293      	cmp	r3, r2
 800eb9e:	d109      	bne.n	800ebb4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800eba0:	697b      	ldr	r3, [r7, #20]
 800eba2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eba6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	695b      	ldr	r3, [r3, #20]
 800ebac:	019b      	lsls	r3, r3, #6
 800ebae:	697a      	ldr	r2, [r7, #20]
 800ebb0:	4313      	orrs	r3, r2
 800ebb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	697a      	ldr	r2, [r7, #20]
 800ebb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	68fa      	ldr	r2, [r7, #12]
 800ebbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	685a      	ldr	r2, [r3, #4]
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	693a      	ldr	r2, [r7, #16]
 800ebcc:	621a      	str	r2, [r3, #32]
}
 800ebce:	bf00      	nop
 800ebd0:	371c      	adds	r7, #28
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd8:	4770      	bx	lr
 800ebda:	bf00      	nop
 800ebdc:	40010000 	.word	0x40010000
 800ebe0:	40010400 	.word	0x40010400

0800ebe4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ebe4:	b480      	push	{r7}
 800ebe6:	b085      	sub	sp, #20
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
 800ebec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ebf4:	2b01      	cmp	r3, #1
 800ebf6:	d101      	bne.n	800ebfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ebf8:	2302      	movs	r3, #2
 800ebfa:	e05a      	b.n	800ecb2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2201      	movs	r2, #1
 800ec00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2202      	movs	r2, #2
 800ec08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	685b      	ldr	r3, [r3, #4]
 800ec12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	689b      	ldr	r3, [r3, #8]
 800ec1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	68fa      	ldr	r2, [r7, #12]
 800ec2a:	4313      	orrs	r3, r2
 800ec2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	68fa      	ldr	r2, [r7, #12]
 800ec34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	4a21      	ldr	r2, [pc, #132]	; (800ecc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ec3c:	4293      	cmp	r3, r2
 800ec3e:	d022      	beq.n	800ec86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec48:	d01d      	beq.n	800ec86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	4a1d      	ldr	r2, [pc, #116]	; (800ecc4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ec50:	4293      	cmp	r3, r2
 800ec52:	d018      	beq.n	800ec86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	4a1b      	ldr	r2, [pc, #108]	; (800ecc8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ec5a:	4293      	cmp	r3, r2
 800ec5c:	d013      	beq.n	800ec86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	4a1a      	ldr	r2, [pc, #104]	; (800eccc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ec64:	4293      	cmp	r3, r2
 800ec66:	d00e      	beq.n	800ec86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	4a18      	ldr	r2, [pc, #96]	; (800ecd0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ec6e:	4293      	cmp	r3, r2
 800ec70:	d009      	beq.n	800ec86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	4a17      	ldr	r2, [pc, #92]	; (800ecd4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ec78:	4293      	cmp	r3, r2
 800ec7a:	d004      	beq.n	800ec86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	4a15      	ldr	r2, [pc, #84]	; (800ecd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d10c      	bne.n	800eca0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	685b      	ldr	r3, [r3, #4]
 800ec92:	68ba      	ldr	r2, [r7, #8]
 800ec94:	4313      	orrs	r3, r2
 800ec96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	68ba      	ldr	r2, [r7, #8]
 800ec9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2201      	movs	r2, #1
 800eca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ecb0:	2300      	movs	r3, #0
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	3714      	adds	r7, #20
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbc:	4770      	bx	lr
 800ecbe:	bf00      	nop
 800ecc0:	40010000 	.word	0x40010000
 800ecc4:	40000400 	.word	0x40000400
 800ecc8:	40000800 	.word	0x40000800
 800eccc:	40000c00 	.word	0x40000c00
 800ecd0:	40010400 	.word	0x40010400
 800ecd4:	40014000 	.word	0x40014000
 800ecd8:	40001800 	.word	0x40001800

0800ecdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ecdc:	b480      	push	{r7}
 800ecde:	b083      	sub	sp, #12
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ece4:	bf00      	nop
 800ece6:	370c      	adds	r7, #12
 800ece8:	46bd      	mov	sp, r7
 800ecea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecee:	4770      	bx	lr

0800ecf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ecf0:	b480      	push	{r7}
 800ecf2:	b083      	sub	sp, #12
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ecf8:	bf00      	nop
 800ecfa:	370c      	adds	r7, #12
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed02:	4770      	bx	lr

0800ed04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b082      	sub	sp, #8
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d101      	bne.n	800ed16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ed12:	2301      	movs	r3, #1
 800ed14:	e03f      	b.n	800ed96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed1c:	b2db      	uxtb	r3, r3
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d106      	bne.n	800ed30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	2200      	movs	r2, #0
 800ed26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f7f4 f9ea 	bl	8003104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2224      	movs	r2, #36	; 0x24
 800ed34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	68da      	ldr	r2, [r3, #12]
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ed46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ed48:	6878      	ldr	r0, [r7, #4]
 800ed4a:	f000 f9cb 	bl	800f0e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	691a      	ldr	r2, [r3, #16]
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ed5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	695a      	ldr	r2, [r3, #20]
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ed6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	68da      	ldr	r2, [r3, #12]
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ed7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2200      	movs	r2, #0
 800ed82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2220      	movs	r2, #32
 800ed88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	2220      	movs	r2, #32
 800ed90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ed94:	2300      	movs	r3, #0
}
 800ed96:	4618      	mov	r0, r3
 800ed98:	3708      	adds	r7, #8
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}

0800ed9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ed9e:	b580      	push	{r7, lr}
 800eda0:	b08a      	sub	sp, #40	; 0x28
 800eda2:	af02      	add	r7, sp, #8
 800eda4:	60f8      	str	r0, [r7, #12]
 800eda6:	60b9      	str	r1, [r7, #8]
 800eda8:	603b      	str	r3, [r7, #0]
 800edaa:	4613      	mov	r3, r2
 800edac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800edae:	2300      	movs	r3, #0
 800edb0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800edb8:	b2db      	uxtb	r3, r3
 800edba:	2b20      	cmp	r3, #32
 800edbc:	d17c      	bne.n	800eeb8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d002      	beq.n	800edca <HAL_UART_Transmit+0x2c>
 800edc4:	88fb      	ldrh	r3, [r7, #6]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d101      	bne.n	800edce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800edca:	2301      	movs	r3, #1
 800edcc:	e075      	b.n	800eeba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800edd4:	2b01      	cmp	r3, #1
 800edd6:	d101      	bne.n	800eddc <HAL_UART_Transmit+0x3e>
 800edd8:	2302      	movs	r3, #2
 800edda:	e06e      	b.n	800eeba <HAL_UART_Transmit+0x11c>
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	2201      	movs	r2, #1
 800ede0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	2200      	movs	r2, #0
 800ede8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	2221      	movs	r2, #33	; 0x21
 800edee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800edf2:	f7f9 fdf1 	bl	80089d8 <HAL_GetTick>
 800edf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	88fa      	ldrh	r2, [r7, #6]
 800edfc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	88fa      	ldrh	r2, [r7, #6]
 800ee02:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	689b      	ldr	r3, [r3, #8]
 800ee08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee0c:	d108      	bne.n	800ee20 <HAL_UART_Transmit+0x82>
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	691b      	ldr	r3, [r3, #16]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d104      	bne.n	800ee20 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800ee16:	2300      	movs	r3, #0
 800ee18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ee1a:	68bb      	ldr	r3, [r7, #8]
 800ee1c:	61bb      	str	r3, [r7, #24]
 800ee1e:	e003      	b.n	800ee28 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ee24:	2300      	movs	r3, #0
 800ee26:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800ee30:	e02a      	b.n	800ee88 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ee32:	683b      	ldr	r3, [r7, #0]
 800ee34:	9300      	str	r3, [sp, #0]
 800ee36:	697b      	ldr	r3, [r7, #20]
 800ee38:	2200      	movs	r2, #0
 800ee3a:	2180      	movs	r1, #128	; 0x80
 800ee3c:	68f8      	ldr	r0, [r7, #12]
 800ee3e:	f000 f8e2 	bl	800f006 <UART_WaitOnFlagUntilTimeout>
 800ee42:	4603      	mov	r3, r0
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d001      	beq.n	800ee4c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800ee48:	2303      	movs	r3, #3
 800ee4a:	e036      	b.n	800eeba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800ee4c:	69fb      	ldr	r3, [r7, #28]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d10b      	bne.n	800ee6a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ee52:	69bb      	ldr	r3, [r7, #24]
 800ee54:	881b      	ldrh	r3, [r3, #0]
 800ee56:	461a      	mov	r2, r3
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ee60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ee62:	69bb      	ldr	r3, [r7, #24]
 800ee64:	3302      	adds	r3, #2
 800ee66:	61bb      	str	r3, [r7, #24]
 800ee68:	e007      	b.n	800ee7a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ee6a:	69fb      	ldr	r3, [r7, #28]
 800ee6c:	781a      	ldrb	r2, [r3, #0]
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ee74:	69fb      	ldr	r3, [r7, #28]
 800ee76:	3301      	adds	r3, #1
 800ee78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ee7e:	b29b      	uxth	r3, r3
 800ee80:	3b01      	subs	r3, #1
 800ee82:	b29a      	uxth	r2, r3
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ee8c:	b29b      	uxth	r3, r3
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d1cf      	bne.n	800ee32 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	9300      	str	r3, [sp, #0]
 800ee96:	697b      	ldr	r3, [r7, #20]
 800ee98:	2200      	movs	r2, #0
 800ee9a:	2140      	movs	r1, #64	; 0x40
 800ee9c:	68f8      	ldr	r0, [r7, #12]
 800ee9e:	f000 f8b2 	bl	800f006 <UART_WaitOnFlagUntilTimeout>
 800eea2:	4603      	mov	r3, r0
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d001      	beq.n	800eeac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800eea8:	2303      	movs	r3, #3
 800eeaa:	e006      	b.n	800eeba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	2220      	movs	r2, #32
 800eeb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	e000      	b.n	800eeba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800eeb8:	2302      	movs	r3, #2
  }
}
 800eeba:	4618      	mov	r0, r3
 800eebc:	3720      	adds	r7, #32
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd80      	pop	{r7, pc}

0800eec2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eec2:	b580      	push	{r7, lr}
 800eec4:	b08a      	sub	sp, #40	; 0x28
 800eec6:	af02      	add	r7, sp, #8
 800eec8:	60f8      	str	r0, [r7, #12]
 800eeca:	60b9      	str	r1, [r7, #8]
 800eecc:	603b      	str	r3, [r7, #0]
 800eece:	4613      	mov	r3, r2
 800eed0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800eed2:	2300      	movs	r3, #0
 800eed4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800eedc:	b2db      	uxtb	r3, r3
 800eede:	2b20      	cmp	r3, #32
 800eee0:	f040 808c 	bne.w	800effc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d002      	beq.n	800eef0 <HAL_UART_Receive+0x2e>
 800eeea:	88fb      	ldrh	r3, [r7, #6]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d101      	bne.n	800eef4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800eef0:	2301      	movs	r3, #1
 800eef2:	e084      	b.n	800effe <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eefa:	2b01      	cmp	r3, #1
 800eefc:	d101      	bne.n	800ef02 <HAL_UART_Receive+0x40>
 800eefe:	2302      	movs	r3, #2
 800ef00:	e07d      	b.n	800effe <HAL_UART_Receive+0x13c>
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	2201      	movs	r2, #1
 800ef06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	2222      	movs	r2, #34	; 0x22
 800ef14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ef1e:	f7f9 fd5b 	bl	80089d8 <HAL_GetTick>
 800ef22:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	88fa      	ldrh	r2, [r7, #6]
 800ef28:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	88fa      	ldrh	r2, [r7, #6]
 800ef2e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	689b      	ldr	r3, [r3, #8]
 800ef34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef38:	d108      	bne.n	800ef4c <HAL_UART_Receive+0x8a>
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	691b      	ldr	r3, [r3, #16]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d104      	bne.n	800ef4c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800ef42:	2300      	movs	r3, #0
 800ef44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	61bb      	str	r3, [r7, #24]
 800ef4a:	e003      	b.n	800ef54 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800ef4c:	68bb      	ldr	r3, [r7, #8]
 800ef4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ef50:	2300      	movs	r3, #0
 800ef52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	2200      	movs	r2, #0
 800ef58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800ef5c:	e043      	b.n	800efe6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	9300      	str	r3, [sp, #0]
 800ef62:	697b      	ldr	r3, [r7, #20]
 800ef64:	2200      	movs	r2, #0
 800ef66:	2120      	movs	r1, #32
 800ef68:	68f8      	ldr	r0, [r7, #12]
 800ef6a:	f000 f84c 	bl	800f006 <UART_WaitOnFlagUntilTimeout>
 800ef6e:	4603      	mov	r3, r0
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d001      	beq.n	800ef78 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800ef74:	2303      	movs	r3, #3
 800ef76:	e042      	b.n	800effe <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800ef78:	69fb      	ldr	r3, [r7, #28]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d10c      	bne.n	800ef98 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	685b      	ldr	r3, [r3, #4]
 800ef84:	b29b      	uxth	r3, r3
 800ef86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef8a:	b29a      	uxth	r2, r3
 800ef8c:	69bb      	ldr	r3, [r7, #24]
 800ef8e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800ef90:	69bb      	ldr	r3, [r7, #24]
 800ef92:	3302      	adds	r3, #2
 800ef94:	61bb      	str	r3, [r7, #24]
 800ef96:	e01f      	b.n	800efd8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	689b      	ldr	r3, [r3, #8]
 800ef9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800efa0:	d007      	beq.n	800efb2 <HAL_UART_Receive+0xf0>
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	689b      	ldr	r3, [r3, #8]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d10a      	bne.n	800efc0 <HAL_UART_Receive+0xfe>
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	691b      	ldr	r3, [r3, #16]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d106      	bne.n	800efc0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	685b      	ldr	r3, [r3, #4]
 800efb8:	b2da      	uxtb	r2, r3
 800efba:	69fb      	ldr	r3, [r7, #28]
 800efbc:	701a      	strb	r2, [r3, #0]
 800efbe:	e008      	b.n	800efd2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	685b      	ldr	r3, [r3, #4]
 800efc6:	b2db      	uxtb	r3, r3
 800efc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800efcc:	b2da      	uxtb	r2, r3
 800efce:	69fb      	ldr	r3, [r7, #28]
 800efd0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800efd2:	69fb      	ldr	r3, [r7, #28]
 800efd4:	3301      	adds	r3, #1
 800efd6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800efdc:	b29b      	uxth	r3, r3
 800efde:	3b01      	subs	r3, #1
 800efe0:	b29a      	uxth	r2, r3
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800efea:	b29b      	uxth	r3, r3
 800efec:	2b00      	cmp	r3, #0
 800efee:	d1b6      	bne.n	800ef5e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	2220      	movs	r2, #32
 800eff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800eff8:	2300      	movs	r3, #0
 800effa:	e000      	b.n	800effe <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800effc:	2302      	movs	r3, #2
  }
}
 800effe:	4618      	mov	r0, r3
 800f000:	3720      	adds	r7, #32
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}

0800f006 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800f006:	b580      	push	{r7, lr}
 800f008:	b090      	sub	sp, #64	; 0x40
 800f00a:	af00      	add	r7, sp, #0
 800f00c:	60f8      	str	r0, [r7, #12]
 800f00e:	60b9      	str	r1, [r7, #8]
 800f010:	603b      	str	r3, [r7, #0]
 800f012:	4613      	mov	r3, r2
 800f014:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f016:	e050      	b.n	800f0ba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f01a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f01e:	d04c      	beq.n	800f0ba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800f020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f022:	2b00      	cmp	r3, #0
 800f024:	d007      	beq.n	800f036 <UART_WaitOnFlagUntilTimeout+0x30>
 800f026:	f7f9 fcd7 	bl	80089d8 <HAL_GetTick>
 800f02a:	4602      	mov	r2, r0
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	1ad3      	subs	r3, r2, r3
 800f030:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f032:	429a      	cmp	r2, r3
 800f034:	d241      	bcs.n	800f0ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	330c      	adds	r3, #12
 800f03c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f040:	e853 3f00 	ldrex	r3, [r3]
 800f044:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f048:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f04c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	330c      	adds	r3, #12
 800f054:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f056:	637a      	str	r2, [r7, #52]	; 0x34
 800f058:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f05a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f05c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f05e:	e841 2300 	strex	r3, r2, [r1]
 800f062:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f066:	2b00      	cmp	r3, #0
 800f068:	d1e5      	bne.n	800f036 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	3314      	adds	r3, #20
 800f070:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f072:	697b      	ldr	r3, [r7, #20]
 800f074:	e853 3f00 	ldrex	r3, [r3]
 800f078:	613b      	str	r3, [r7, #16]
   return(result);
 800f07a:	693b      	ldr	r3, [r7, #16]
 800f07c:	f023 0301 	bic.w	r3, r3, #1
 800f080:	63bb      	str	r3, [r7, #56]	; 0x38
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	3314      	adds	r3, #20
 800f088:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f08a:	623a      	str	r2, [r7, #32]
 800f08c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f08e:	69f9      	ldr	r1, [r7, #28]
 800f090:	6a3a      	ldr	r2, [r7, #32]
 800f092:	e841 2300 	strex	r3, r2, [r1]
 800f096:	61bb      	str	r3, [r7, #24]
   return(result);
 800f098:	69bb      	ldr	r3, [r7, #24]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d1e5      	bne.n	800f06a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	2220      	movs	r2, #32
 800f0a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	2220      	movs	r2, #32
 800f0aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800f0b6:	2303      	movs	r3, #3
 800f0b8:	e00f      	b.n	800f0da <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	681a      	ldr	r2, [r3, #0]
 800f0c0:	68bb      	ldr	r3, [r7, #8]
 800f0c2:	4013      	ands	r3, r2
 800f0c4:	68ba      	ldr	r2, [r7, #8]
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	bf0c      	ite	eq
 800f0ca:	2301      	moveq	r3, #1
 800f0cc:	2300      	movne	r3, #0
 800f0ce:	b2db      	uxtb	r3, r3
 800f0d0:	461a      	mov	r2, r3
 800f0d2:	79fb      	ldrb	r3, [r7, #7]
 800f0d4:	429a      	cmp	r2, r3
 800f0d6:	d09f      	beq.n	800f018 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f0d8:	2300      	movs	r3, #0
}
 800f0da:	4618      	mov	r0, r3
 800f0dc:	3740      	adds	r7, #64	; 0x40
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	bd80      	pop	{r7, pc}
	...

0800f0e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0e8:	b09f      	sub	sp, #124	; 0x7c
 800f0ea:	af00      	add	r7, sp, #0
 800f0ec:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f0ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	691b      	ldr	r3, [r3, #16]
 800f0f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800f0f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0fa:	68d9      	ldr	r1, [r3, #12]
 800f0fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0fe:	681a      	ldr	r2, [r3, #0]
 800f100:	ea40 0301 	orr.w	r3, r0, r1
 800f104:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f108:	689a      	ldr	r2, [r3, #8]
 800f10a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f10c:	691b      	ldr	r3, [r3, #16]
 800f10e:	431a      	orrs	r2, r3
 800f110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f112:	695b      	ldr	r3, [r3, #20]
 800f114:	431a      	orrs	r2, r3
 800f116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f118:	69db      	ldr	r3, [r3, #28]
 800f11a:	4313      	orrs	r3, r2
 800f11c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800f11e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	68db      	ldr	r3, [r3, #12]
 800f124:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800f128:	f021 010c 	bic.w	r1, r1, #12
 800f12c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f12e:	681a      	ldr	r2, [r3, #0]
 800f130:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f132:	430b      	orrs	r3, r1
 800f134:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	695b      	ldr	r3, [r3, #20]
 800f13c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800f140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f142:	6999      	ldr	r1, [r3, #24]
 800f144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f146:	681a      	ldr	r2, [r3, #0]
 800f148:	ea40 0301 	orr.w	r3, r0, r1
 800f14c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f14e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f150:	681a      	ldr	r2, [r3, #0]
 800f152:	4bc5      	ldr	r3, [pc, #788]	; (800f468 <UART_SetConfig+0x384>)
 800f154:	429a      	cmp	r2, r3
 800f156:	d004      	beq.n	800f162 <UART_SetConfig+0x7e>
 800f158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f15a:	681a      	ldr	r2, [r3, #0]
 800f15c:	4bc3      	ldr	r3, [pc, #780]	; (800f46c <UART_SetConfig+0x388>)
 800f15e:	429a      	cmp	r2, r3
 800f160:	d103      	bne.n	800f16a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f162:	f7fd fa65 	bl	800c630 <HAL_RCC_GetPCLK2Freq>
 800f166:	6778      	str	r0, [r7, #116]	; 0x74
 800f168:	e002      	b.n	800f170 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f16a:	f7fd fa4d 	bl	800c608 <HAL_RCC_GetPCLK1Freq>
 800f16e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f172:	69db      	ldr	r3, [r3, #28]
 800f174:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f178:	f040 80b6 	bne.w	800f2e8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f17c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f17e:	461c      	mov	r4, r3
 800f180:	f04f 0500 	mov.w	r5, #0
 800f184:	4622      	mov	r2, r4
 800f186:	462b      	mov	r3, r5
 800f188:	1891      	adds	r1, r2, r2
 800f18a:	6439      	str	r1, [r7, #64]	; 0x40
 800f18c:	415b      	adcs	r3, r3
 800f18e:	647b      	str	r3, [r7, #68]	; 0x44
 800f190:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f194:	1912      	adds	r2, r2, r4
 800f196:	eb45 0303 	adc.w	r3, r5, r3
 800f19a:	f04f 0000 	mov.w	r0, #0
 800f19e:	f04f 0100 	mov.w	r1, #0
 800f1a2:	00d9      	lsls	r1, r3, #3
 800f1a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f1a8:	00d0      	lsls	r0, r2, #3
 800f1aa:	4602      	mov	r2, r0
 800f1ac:	460b      	mov	r3, r1
 800f1ae:	1911      	adds	r1, r2, r4
 800f1b0:	6639      	str	r1, [r7, #96]	; 0x60
 800f1b2:	416b      	adcs	r3, r5
 800f1b4:	667b      	str	r3, [r7, #100]	; 0x64
 800f1b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f1b8:	685b      	ldr	r3, [r3, #4]
 800f1ba:	461a      	mov	r2, r3
 800f1bc:	f04f 0300 	mov.w	r3, #0
 800f1c0:	1891      	adds	r1, r2, r2
 800f1c2:	63b9      	str	r1, [r7, #56]	; 0x38
 800f1c4:	415b      	adcs	r3, r3
 800f1c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f1c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800f1cc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800f1d0:	f7f1 fdca 	bl	8000d68 <__aeabi_uldivmod>
 800f1d4:	4602      	mov	r2, r0
 800f1d6:	460b      	mov	r3, r1
 800f1d8:	4ba5      	ldr	r3, [pc, #660]	; (800f470 <UART_SetConfig+0x38c>)
 800f1da:	fba3 2302 	umull	r2, r3, r3, r2
 800f1de:	095b      	lsrs	r3, r3, #5
 800f1e0:	011e      	lsls	r6, r3, #4
 800f1e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f1e4:	461c      	mov	r4, r3
 800f1e6:	f04f 0500 	mov.w	r5, #0
 800f1ea:	4622      	mov	r2, r4
 800f1ec:	462b      	mov	r3, r5
 800f1ee:	1891      	adds	r1, r2, r2
 800f1f0:	6339      	str	r1, [r7, #48]	; 0x30
 800f1f2:	415b      	adcs	r3, r3
 800f1f4:	637b      	str	r3, [r7, #52]	; 0x34
 800f1f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f1fa:	1912      	adds	r2, r2, r4
 800f1fc:	eb45 0303 	adc.w	r3, r5, r3
 800f200:	f04f 0000 	mov.w	r0, #0
 800f204:	f04f 0100 	mov.w	r1, #0
 800f208:	00d9      	lsls	r1, r3, #3
 800f20a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f20e:	00d0      	lsls	r0, r2, #3
 800f210:	4602      	mov	r2, r0
 800f212:	460b      	mov	r3, r1
 800f214:	1911      	adds	r1, r2, r4
 800f216:	65b9      	str	r1, [r7, #88]	; 0x58
 800f218:	416b      	adcs	r3, r5
 800f21a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f21c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f21e:	685b      	ldr	r3, [r3, #4]
 800f220:	461a      	mov	r2, r3
 800f222:	f04f 0300 	mov.w	r3, #0
 800f226:	1891      	adds	r1, r2, r2
 800f228:	62b9      	str	r1, [r7, #40]	; 0x28
 800f22a:	415b      	adcs	r3, r3
 800f22c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f22e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f232:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800f236:	f7f1 fd97 	bl	8000d68 <__aeabi_uldivmod>
 800f23a:	4602      	mov	r2, r0
 800f23c:	460b      	mov	r3, r1
 800f23e:	4b8c      	ldr	r3, [pc, #560]	; (800f470 <UART_SetConfig+0x38c>)
 800f240:	fba3 1302 	umull	r1, r3, r3, r2
 800f244:	095b      	lsrs	r3, r3, #5
 800f246:	2164      	movs	r1, #100	; 0x64
 800f248:	fb01 f303 	mul.w	r3, r1, r3
 800f24c:	1ad3      	subs	r3, r2, r3
 800f24e:	00db      	lsls	r3, r3, #3
 800f250:	3332      	adds	r3, #50	; 0x32
 800f252:	4a87      	ldr	r2, [pc, #540]	; (800f470 <UART_SetConfig+0x38c>)
 800f254:	fba2 2303 	umull	r2, r3, r2, r3
 800f258:	095b      	lsrs	r3, r3, #5
 800f25a:	005b      	lsls	r3, r3, #1
 800f25c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f260:	441e      	add	r6, r3
 800f262:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f264:	4618      	mov	r0, r3
 800f266:	f04f 0100 	mov.w	r1, #0
 800f26a:	4602      	mov	r2, r0
 800f26c:	460b      	mov	r3, r1
 800f26e:	1894      	adds	r4, r2, r2
 800f270:	623c      	str	r4, [r7, #32]
 800f272:	415b      	adcs	r3, r3
 800f274:	627b      	str	r3, [r7, #36]	; 0x24
 800f276:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f27a:	1812      	adds	r2, r2, r0
 800f27c:	eb41 0303 	adc.w	r3, r1, r3
 800f280:	f04f 0400 	mov.w	r4, #0
 800f284:	f04f 0500 	mov.w	r5, #0
 800f288:	00dd      	lsls	r5, r3, #3
 800f28a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f28e:	00d4      	lsls	r4, r2, #3
 800f290:	4622      	mov	r2, r4
 800f292:	462b      	mov	r3, r5
 800f294:	1814      	adds	r4, r2, r0
 800f296:	653c      	str	r4, [r7, #80]	; 0x50
 800f298:	414b      	adcs	r3, r1
 800f29a:	657b      	str	r3, [r7, #84]	; 0x54
 800f29c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f29e:	685b      	ldr	r3, [r3, #4]
 800f2a0:	461a      	mov	r2, r3
 800f2a2:	f04f 0300 	mov.w	r3, #0
 800f2a6:	1891      	adds	r1, r2, r2
 800f2a8:	61b9      	str	r1, [r7, #24]
 800f2aa:	415b      	adcs	r3, r3
 800f2ac:	61fb      	str	r3, [r7, #28]
 800f2ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f2b2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800f2b6:	f7f1 fd57 	bl	8000d68 <__aeabi_uldivmod>
 800f2ba:	4602      	mov	r2, r0
 800f2bc:	460b      	mov	r3, r1
 800f2be:	4b6c      	ldr	r3, [pc, #432]	; (800f470 <UART_SetConfig+0x38c>)
 800f2c0:	fba3 1302 	umull	r1, r3, r3, r2
 800f2c4:	095b      	lsrs	r3, r3, #5
 800f2c6:	2164      	movs	r1, #100	; 0x64
 800f2c8:	fb01 f303 	mul.w	r3, r1, r3
 800f2cc:	1ad3      	subs	r3, r2, r3
 800f2ce:	00db      	lsls	r3, r3, #3
 800f2d0:	3332      	adds	r3, #50	; 0x32
 800f2d2:	4a67      	ldr	r2, [pc, #412]	; (800f470 <UART_SetConfig+0x38c>)
 800f2d4:	fba2 2303 	umull	r2, r3, r2, r3
 800f2d8:	095b      	lsrs	r3, r3, #5
 800f2da:	f003 0207 	and.w	r2, r3, #7
 800f2de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	4432      	add	r2, r6
 800f2e4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800f2e6:	e0b9      	b.n	800f45c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f2e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f2ea:	461c      	mov	r4, r3
 800f2ec:	f04f 0500 	mov.w	r5, #0
 800f2f0:	4622      	mov	r2, r4
 800f2f2:	462b      	mov	r3, r5
 800f2f4:	1891      	adds	r1, r2, r2
 800f2f6:	6139      	str	r1, [r7, #16]
 800f2f8:	415b      	adcs	r3, r3
 800f2fa:	617b      	str	r3, [r7, #20]
 800f2fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f300:	1912      	adds	r2, r2, r4
 800f302:	eb45 0303 	adc.w	r3, r5, r3
 800f306:	f04f 0000 	mov.w	r0, #0
 800f30a:	f04f 0100 	mov.w	r1, #0
 800f30e:	00d9      	lsls	r1, r3, #3
 800f310:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f314:	00d0      	lsls	r0, r2, #3
 800f316:	4602      	mov	r2, r0
 800f318:	460b      	mov	r3, r1
 800f31a:	eb12 0804 	adds.w	r8, r2, r4
 800f31e:	eb43 0905 	adc.w	r9, r3, r5
 800f322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f324:	685b      	ldr	r3, [r3, #4]
 800f326:	4618      	mov	r0, r3
 800f328:	f04f 0100 	mov.w	r1, #0
 800f32c:	f04f 0200 	mov.w	r2, #0
 800f330:	f04f 0300 	mov.w	r3, #0
 800f334:	008b      	lsls	r3, r1, #2
 800f336:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f33a:	0082      	lsls	r2, r0, #2
 800f33c:	4640      	mov	r0, r8
 800f33e:	4649      	mov	r1, r9
 800f340:	f7f1 fd12 	bl	8000d68 <__aeabi_uldivmod>
 800f344:	4602      	mov	r2, r0
 800f346:	460b      	mov	r3, r1
 800f348:	4b49      	ldr	r3, [pc, #292]	; (800f470 <UART_SetConfig+0x38c>)
 800f34a:	fba3 2302 	umull	r2, r3, r3, r2
 800f34e:	095b      	lsrs	r3, r3, #5
 800f350:	011e      	lsls	r6, r3, #4
 800f352:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f354:	4618      	mov	r0, r3
 800f356:	f04f 0100 	mov.w	r1, #0
 800f35a:	4602      	mov	r2, r0
 800f35c:	460b      	mov	r3, r1
 800f35e:	1894      	adds	r4, r2, r2
 800f360:	60bc      	str	r4, [r7, #8]
 800f362:	415b      	adcs	r3, r3
 800f364:	60fb      	str	r3, [r7, #12]
 800f366:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f36a:	1812      	adds	r2, r2, r0
 800f36c:	eb41 0303 	adc.w	r3, r1, r3
 800f370:	f04f 0400 	mov.w	r4, #0
 800f374:	f04f 0500 	mov.w	r5, #0
 800f378:	00dd      	lsls	r5, r3, #3
 800f37a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f37e:	00d4      	lsls	r4, r2, #3
 800f380:	4622      	mov	r2, r4
 800f382:	462b      	mov	r3, r5
 800f384:	1814      	adds	r4, r2, r0
 800f386:	64bc      	str	r4, [r7, #72]	; 0x48
 800f388:	414b      	adcs	r3, r1
 800f38a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f38c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f38e:	685b      	ldr	r3, [r3, #4]
 800f390:	4618      	mov	r0, r3
 800f392:	f04f 0100 	mov.w	r1, #0
 800f396:	f04f 0200 	mov.w	r2, #0
 800f39a:	f04f 0300 	mov.w	r3, #0
 800f39e:	008b      	lsls	r3, r1, #2
 800f3a0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f3a4:	0082      	lsls	r2, r0, #2
 800f3a6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800f3aa:	f7f1 fcdd 	bl	8000d68 <__aeabi_uldivmod>
 800f3ae:	4602      	mov	r2, r0
 800f3b0:	460b      	mov	r3, r1
 800f3b2:	4b2f      	ldr	r3, [pc, #188]	; (800f470 <UART_SetConfig+0x38c>)
 800f3b4:	fba3 1302 	umull	r1, r3, r3, r2
 800f3b8:	095b      	lsrs	r3, r3, #5
 800f3ba:	2164      	movs	r1, #100	; 0x64
 800f3bc:	fb01 f303 	mul.w	r3, r1, r3
 800f3c0:	1ad3      	subs	r3, r2, r3
 800f3c2:	011b      	lsls	r3, r3, #4
 800f3c4:	3332      	adds	r3, #50	; 0x32
 800f3c6:	4a2a      	ldr	r2, [pc, #168]	; (800f470 <UART_SetConfig+0x38c>)
 800f3c8:	fba2 2303 	umull	r2, r3, r2, r3
 800f3cc:	095b      	lsrs	r3, r3, #5
 800f3ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f3d2:	441e      	add	r6, r3
 800f3d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f04f 0100 	mov.w	r1, #0
 800f3dc:	4602      	mov	r2, r0
 800f3de:	460b      	mov	r3, r1
 800f3e0:	1894      	adds	r4, r2, r2
 800f3e2:	603c      	str	r4, [r7, #0]
 800f3e4:	415b      	adcs	r3, r3
 800f3e6:	607b      	str	r3, [r7, #4]
 800f3e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f3ec:	1812      	adds	r2, r2, r0
 800f3ee:	eb41 0303 	adc.w	r3, r1, r3
 800f3f2:	f04f 0400 	mov.w	r4, #0
 800f3f6:	f04f 0500 	mov.w	r5, #0
 800f3fa:	00dd      	lsls	r5, r3, #3
 800f3fc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f400:	00d4      	lsls	r4, r2, #3
 800f402:	4622      	mov	r2, r4
 800f404:	462b      	mov	r3, r5
 800f406:	eb12 0a00 	adds.w	sl, r2, r0
 800f40a:	eb43 0b01 	adc.w	fp, r3, r1
 800f40e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f410:	685b      	ldr	r3, [r3, #4]
 800f412:	4618      	mov	r0, r3
 800f414:	f04f 0100 	mov.w	r1, #0
 800f418:	f04f 0200 	mov.w	r2, #0
 800f41c:	f04f 0300 	mov.w	r3, #0
 800f420:	008b      	lsls	r3, r1, #2
 800f422:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800f426:	0082      	lsls	r2, r0, #2
 800f428:	4650      	mov	r0, sl
 800f42a:	4659      	mov	r1, fp
 800f42c:	f7f1 fc9c 	bl	8000d68 <__aeabi_uldivmod>
 800f430:	4602      	mov	r2, r0
 800f432:	460b      	mov	r3, r1
 800f434:	4b0e      	ldr	r3, [pc, #56]	; (800f470 <UART_SetConfig+0x38c>)
 800f436:	fba3 1302 	umull	r1, r3, r3, r2
 800f43a:	095b      	lsrs	r3, r3, #5
 800f43c:	2164      	movs	r1, #100	; 0x64
 800f43e:	fb01 f303 	mul.w	r3, r1, r3
 800f442:	1ad3      	subs	r3, r2, r3
 800f444:	011b      	lsls	r3, r3, #4
 800f446:	3332      	adds	r3, #50	; 0x32
 800f448:	4a09      	ldr	r2, [pc, #36]	; (800f470 <UART_SetConfig+0x38c>)
 800f44a:	fba2 2303 	umull	r2, r3, r2, r3
 800f44e:	095b      	lsrs	r3, r3, #5
 800f450:	f003 020f 	and.w	r2, r3, #15
 800f454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	4432      	add	r2, r6
 800f45a:	609a      	str	r2, [r3, #8]
}
 800f45c:	bf00      	nop
 800f45e:	377c      	adds	r7, #124	; 0x7c
 800f460:	46bd      	mov	sp, r7
 800f462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f466:	bf00      	nop
 800f468:	40011000 	.word	0x40011000
 800f46c:	40011400 	.word	0x40011400
 800f470:	51eb851f 	.word	0x51eb851f

0800f474 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f474:	b084      	sub	sp, #16
 800f476:	b580      	push	{r7, lr}
 800f478:	b084      	sub	sp, #16
 800f47a:	af00      	add	r7, sp, #0
 800f47c:	6078      	str	r0, [r7, #4]
 800f47e:	f107 001c 	add.w	r0, r7, #28
 800f482:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f488:	2b01      	cmp	r3, #1
 800f48a:	d122      	bne.n	800f4d2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f490:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	68db      	ldr	r3, [r3, #12]
 800f49c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800f4a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f4a4:	687a      	ldr	r2, [r7, #4]
 800f4a6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	68db      	ldr	r3, [r3, #12]
 800f4ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f4b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4b6:	2b01      	cmp	r3, #1
 800f4b8:	d105      	bne.n	800f4c6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	68db      	ldr	r3, [r3, #12]
 800f4be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f4c6:	6878      	ldr	r0, [r7, #4]
 800f4c8:	f001 fb1c 	bl	8010b04 <USB_CoreReset>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	73fb      	strb	r3, [r7, #15]
 800f4d0:	e01a      	b.n	800f508 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	68db      	ldr	r3, [r3, #12]
 800f4d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f4de:	6878      	ldr	r0, [r7, #4]
 800f4e0:	f001 fb10 	bl	8010b04 <USB_CoreReset>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f4e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d106      	bne.n	800f4fc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	639a      	str	r2, [r3, #56]	; 0x38
 800f4fa:	e005      	b.n	800f508 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f500:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f50a:	2b01      	cmp	r3, #1
 800f50c:	d10b      	bne.n	800f526 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	689b      	ldr	r3, [r3, #8]
 800f512:	f043 0206 	orr.w	r2, r3, #6
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	689b      	ldr	r3, [r3, #8]
 800f51e:	f043 0220 	orr.w	r2, r3, #32
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f526:	7bfb      	ldrb	r3, [r7, #15]
}
 800f528:	4618      	mov	r0, r3
 800f52a:	3710      	adds	r7, #16
 800f52c:	46bd      	mov	sp, r7
 800f52e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f532:	b004      	add	sp, #16
 800f534:	4770      	bx	lr
	...

0800f538 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f538:	b480      	push	{r7}
 800f53a:	b087      	sub	sp, #28
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	60f8      	str	r0, [r7, #12]
 800f540:	60b9      	str	r1, [r7, #8]
 800f542:	4613      	mov	r3, r2
 800f544:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f546:	79fb      	ldrb	r3, [r7, #7]
 800f548:	2b02      	cmp	r3, #2
 800f54a:	d165      	bne.n	800f618 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	4a41      	ldr	r2, [pc, #260]	; (800f654 <USB_SetTurnaroundTime+0x11c>)
 800f550:	4293      	cmp	r3, r2
 800f552:	d906      	bls.n	800f562 <USB_SetTurnaroundTime+0x2a>
 800f554:	68bb      	ldr	r3, [r7, #8]
 800f556:	4a40      	ldr	r2, [pc, #256]	; (800f658 <USB_SetTurnaroundTime+0x120>)
 800f558:	4293      	cmp	r3, r2
 800f55a:	d202      	bcs.n	800f562 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f55c:	230f      	movs	r3, #15
 800f55e:	617b      	str	r3, [r7, #20]
 800f560:	e062      	b.n	800f628 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	4a3c      	ldr	r2, [pc, #240]	; (800f658 <USB_SetTurnaroundTime+0x120>)
 800f566:	4293      	cmp	r3, r2
 800f568:	d306      	bcc.n	800f578 <USB_SetTurnaroundTime+0x40>
 800f56a:	68bb      	ldr	r3, [r7, #8]
 800f56c:	4a3b      	ldr	r2, [pc, #236]	; (800f65c <USB_SetTurnaroundTime+0x124>)
 800f56e:	4293      	cmp	r3, r2
 800f570:	d202      	bcs.n	800f578 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f572:	230e      	movs	r3, #14
 800f574:	617b      	str	r3, [r7, #20]
 800f576:	e057      	b.n	800f628 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f578:	68bb      	ldr	r3, [r7, #8]
 800f57a:	4a38      	ldr	r2, [pc, #224]	; (800f65c <USB_SetTurnaroundTime+0x124>)
 800f57c:	4293      	cmp	r3, r2
 800f57e:	d306      	bcc.n	800f58e <USB_SetTurnaroundTime+0x56>
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	4a37      	ldr	r2, [pc, #220]	; (800f660 <USB_SetTurnaroundTime+0x128>)
 800f584:	4293      	cmp	r3, r2
 800f586:	d202      	bcs.n	800f58e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f588:	230d      	movs	r3, #13
 800f58a:	617b      	str	r3, [r7, #20]
 800f58c:	e04c      	b.n	800f628 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f58e:	68bb      	ldr	r3, [r7, #8]
 800f590:	4a33      	ldr	r2, [pc, #204]	; (800f660 <USB_SetTurnaroundTime+0x128>)
 800f592:	4293      	cmp	r3, r2
 800f594:	d306      	bcc.n	800f5a4 <USB_SetTurnaroundTime+0x6c>
 800f596:	68bb      	ldr	r3, [r7, #8]
 800f598:	4a32      	ldr	r2, [pc, #200]	; (800f664 <USB_SetTurnaroundTime+0x12c>)
 800f59a:	4293      	cmp	r3, r2
 800f59c:	d802      	bhi.n	800f5a4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f59e:	230c      	movs	r3, #12
 800f5a0:	617b      	str	r3, [r7, #20]
 800f5a2:	e041      	b.n	800f628 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f5a4:	68bb      	ldr	r3, [r7, #8]
 800f5a6:	4a2f      	ldr	r2, [pc, #188]	; (800f664 <USB_SetTurnaroundTime+0x12c>)
 800f5a8:	4293      	cmp	r3, r2
 800f5aa:	d906      	bls.n	800f5ba <USB_SetTurnaroundTime+0x82>
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	4a2e      	ldr	r2, [pc, #184]	; (800f668 <USB_SetTurnaroundTime+0x130>)
 800f5b0:	4293      	cmp	r3, r2
 800f5b2:	d802      	bhi.n	800f5ba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f5b4:	230b      	movs	r3, #11
 800f5b6:	617b      	str	r3, [r7, #20]
 800f5b8:	e036      	b.n	800f628 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	4a2a      	ldr	r2, [pc, #168]	; (800f668 <USB_SetTurnaroundTime+0x130>)
 800f5be:	4293      	cmp	r3, r2
 800f5c0:	d906      	bls.n	800f5d0 <USB_SetTurnaroundTime+0x98>
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	4a29      	ldr	r2, [pc, #164]	; (800f66c <USB_SetTurnaroundTime+0x134>)
 800f5c6:	4293      	cmp	r3, r2
 800f5c8:	d802      	bhi.n	800f5d0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f5ca:	230a      	movs	r3, #10
 800f5cc:	617b      	str	r3, [r7, #20]
 800f5ce:	e02b      	b.n	800f628 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f5d0:	68bb      	ldr	r3, [r7, #8]
 800f5d2:	4a26      	ldr	r2, [pc, #152]	; (800f66c <USB_SetTurnaroundTime+0x134>)
 800f5d4:	4293      	cmp	r3, r2
 800f5d6:	d906      	bls.n	800f5e6 <USB_SetTurnaroundTime+0xae>
 800f5d8:	68bb      	ldr	r3, [r7, #8]
 800f5da:	4a25      	ldr	r2, [pc, #148]	; (800f670 <USB_SetTurnaroundTime+0x138>)
 800f5dc:	4293      	cmp	r3, r2
 800f5de:	d202      	bcs.n	800f5e6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f5e0:	2309      	movs	r3, #9
 800f5e2:	617b      	str	r3, [r7, #20]
 800f5e4:	e020      	b.n	800f628 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	4a21      	ldr	r2, [pc, #132]	; (800f670 <USB_SetTurnaroundTime+0x138>)
 800f5ea:	4293      	cmp	r3, r2
 800f5ec:	d306      	bcc.n	800f5fc <USB_SetTurnaroundTime+0xc4>
 800f5ee:	68bb      	ldr	r3, [r7, #8]
 800f5f0:	4a20      	ldr	r2, [pc, #128]	; (800f674 <USB_SetTurnaroundTime+0x13c>)
 800f5f2:	4293      	cmp	r3, r2
 800f5f4:	d802      	bhi.n	800f5fc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f5f6:	2308      	movs	r3, #8
 800f5f8:	617b      	str	r3, [r7, #20]
 800f5fa:	e015      	b.n	800f628 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	4a1d      	ldr	r2, [pc, #116]	; (800f674 <USB_SetTurnaroundTime+0x13c>)
 800f600:	4293      	cmp	r3, r2
 800f602:	d906      	bls.n	800f612 <USB_SetTurnaroundTime+0xda>
 800f604:	68bb      	ldr	r3, [r7, #8]
 800f606:	4a1c      	ldr	r2, [pc, #112]	; (800f678 <USB_SetTurnaroundTime+0x140>)
 800f608:	4293      	cmp	r3, r2
 800f60a:	d202      	bcs.n	800f612 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f60c:	2307      	movs	r3, #7
 800f60e:	617b      	str	r3, [r7, #20]
 800f610:	e00a      	b.n	800f628 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f612:	2306      	movs	r3, #6
 800f614:	617b      	str	r3, [r7, #20]
 800f616:	e007      	b.n	800f628 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f618:	79fb      	ldrb	r3, [r7, #7]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d102      	bne.n	800f624 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f61e:	2309      	movs	r3, #9
 800f620:	617b      	str	r3, [r7, #20]
 800f622:	e001      	b.n	800f628 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f624:	2309      	movs	r3, #9
 800f626:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	68db      	ldr	r3, [r3, #12]
 800f62c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	68da      	ldr	r2, [r3, #12]
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	029b      	lsls	r3, r3, #10
 800f63c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f640:	431a      	orrs	r2, r3
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f646:	2300      	movs	r3, #0
}
 800f648:	4618      	mov	r0, r3
 800f64a:	371c      	adds	r7, #28
 800f64c:	46bd      	mov	sp, r7
 800f64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f652:	4770      	bx	lr
 800f654:	00d8acbf 	.word	0x00d8acbf
 800f658:	00e4e1c0 	.word	0x00e4e1c0
 800f65c:	00f42400 	.word	0x00f42400
 800f660:	01067380 	.word	0x01067380
 800f664:	011a499f 	.word	0x011a499f
 800f668:	01312cff 	.word	0x01312cff
 800f66c:	014ca43f 	.word	0x014ca43f
 800f670:	016e3600 	.word	0x016e3600
 800f674:	01a6ab1f 	.word	0x01a6ab1f
 800f678:	01e84800 	.word	0x01e84800

0800f67c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f67c:	b480      	push	{r7}
 800f67e:	b083      	sub	sp, #12
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	689b      	ldr	r3, [r3, #8]
 800f688:	f043 0201 	orr.w	r2, r3, #1
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f690:	2300      	movs	r3, #0
}
 800f692:	4618      	mov	r0, r3
 800f694:	370c      	adds	r7, #12
 800f696:	46bd      	mov	sp, r7
 800f698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69c:	4770      	bx	lr

0800f69e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f69e:	b480      	push	{r7}
 800f6a0:	b083      	sub	sp, #12
 800f6a2:	af00      	add	r7, sp, #0
 800f6a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	689b      	ldr	r3, [r3, #8]
 800f6aa:	f023 0201 	bic.w	r2, r3, #1
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f6b2:	2300      	movs	r3, #0
}
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	370c      	adds	r7, #12
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6be:	4770      	bx	lr

0800f6c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b084      	sub	sp, #16
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
 800f6c8:	460b      	mov	r3, r1
 800f6ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	68db      	ldr	r3, [r3, #12]
 800f6d4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f6dc:	78fb      	ldrb	r3, [r7, #3]
 800f6de:	2b01      	cmp	r3, #1
 800f6e0:	d115      	bne.n	800f70e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	68db      	ldr	r3, [r3, #12]
 800f6e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f6ee:	2001      	movs	r0, #1
 800f6f0:	f7f9 f97e 	bl	80089f0 <HAL_Delay>
      ms++;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	3301      	adds	r3, #1
 800f6f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800f6fa:	6878      	ldr	r0, [r7, #4]
 800f6fc:	f001 f972 	bl	80109e4 <USB_GetMode>
 800f700:	4603      	mov	r3, r0
 800f702:	2b01      	cmp	r3, #1
 800f704:	d01e      	beq.n	800f744 <USB_SetCurrentMode+0x84>
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	2b31      	cmp	r3, #49	; 0x31
 800f70a:	d9f0      	bls.n	800f6ee <USB_SetCurrentMode+0x2e>
 800f70c:	e01a      	b.n	800f744 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f70e:	78fb      	ldrb	r3, [r7, #3]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d115      	bne.n	800f740 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	68db      	ldr	r3, [r3, #12]
 800f718:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f720:	2001      	movs	r0, #1
 800f722:	f7f9 f965 	bl	80089f0 <HAL_Delay>
      ms++;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	3301      	adds	r3, #1
 800f72a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800f72c:	6878      	ldr	r0, [r7, #4]
 800f72e:	f001 f959 	bl	80109e4 <USB_GetMode>
 800f732:	4603      	mov	r3, r0
 800f734:	2b00      	cmp	r3, #0
 800f736:	d005      	beq.n	800f744 <USB_SetCurrentMode+0x84>
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	2b31      	cmp	r3, #49	; 0x31
 800f73c:	d9f0      	bls.n	800f720 <USB_SetCurrentMode+0x60>
 800f73e:	e001      	b.n	800f744 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f740:	2301      	movs	r3, #1
 800f742:	e005      	b.n	800f750 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	2b32      	cmp	r3, #50	; 0x32
 800f748:	d101      	bne.n	800f74e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f74a:	2301      	movs	r3, #1
 800f74c:	e000      	b.n	800f750 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f74e:	2300      	movs	r3, #0
}
 800f750:	4618      	mov	r0, r3
 800f752:	3710      	adds	r7, #16
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}

0800f758 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f758:	b084      	sub	sp, #16
 800f75a:	b580      	push	{r7, lr}
 800f75c:	b086      	sub	sp, #24
 800f75e:	af00      	add	r7, sp, #0
 800f760:	6078      	str	r0, [r7, #4]
 800f762:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f766:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f76a:	2300      	movs	r3, #0
 800f76c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f772:	2300      	movs	r3, #0
 800f774:	613b      	str	r3, [r7, #16]
 800f776:	e009      	b.n	800f78c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f778:	687a      	ldr	r2, [r7, #4]
 800f77a:	693b      	ldr	r3, [r7, #16]
 800f77c:	3340      	adds	r3, #64	; 0x40
 800f77e:	009b      	lsls	r3, r3, #2
 800f780:	4413      	add	r3, r2
 800f782:	2200      	movs	r2, #0
 800f784:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f786:	693b      	ldr	r3, [r7, #16]
 800f788:	3301      	adds	r3, #1
 800f78a:	613b      	str	r3, [r7, #16]
 800f78c:	693b      	ldr	r3, [r7, #16]
 800f78e:	2b0e      	cmp	r3, #14
 800f790:	d9f2      	bls.n	800f778 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f794:	2b00      	cmp	r3, #0
 800f796:	d11c      	bne.n	800f7d2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f79e:	685b      	ldr	r3, [r3, #4]
 800f7a0:	68fa      	ldr	r2, [r7, #12]
 800f7a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f7a6:	f043 0302 	orr.w	r3, r3, #2
 800f7aa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7b0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7bc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7c8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	639a      	str	r2, [r3, #56]	; 0x38
 800f7d0:	e00b      	b.n	800f7ea <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7d6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7e2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f7f0:	461a      	mov	r2, r3
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7fc:	4619      	mov	r1, r3
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f804:	461a      	mov	r2, r3
 800f806:	680b      	ldr	r3, [r1, #0]
 800f808:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f80c:	2b01      	cmp	r3, #1
 800f80e:	d10c      	bne.n	800f82a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f812:	2b00      	cmp	r3, #0
 800f814:	d104      	bne.n	800f820 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f816:	2100      	movs	r1, #0
 800f818:	6878      	ldr	r0, [r7, #4]
 800f81a:	f000 f945 	bl	800faa8 <USB_SetDevSpeed>
 800f81e:	e008      	b.n	800f832 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f820:	2101      	movs	r1, #1
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	f000 f940 	bl	800faa8 <USB_SetDevSpeed>
 800f828:	e003      	b.n	800f832 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f82a:	2103      	movs	r1, #3
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f000 f93b 	bl	800faa8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f832:	2110      	movs	r1, #16
 800f834:	6878      	ldr	r0, [r7, #4]
 800f836:	f000 f8f3 	bl	800fa20 <USB_FlushTxFifo>
 800f83a:	4603      	mov	r3, r0
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d001      	beq.n	800f844 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800f840:	2301      	movs	r3, #1
 800f842:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f844:	6878      	ldr	r0, [r7, #4]
 800f846:	f000 f90f 	bl	800fa68 <USB_FlushRxFifo>
 800f84a:	4603      	mov	r3, r0
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d001      	beq.n	800f854 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800f850:	2301      	movs	r3, #1
 800f852:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f85a:	461a      	mov	r2, r3
 800f85c:	2300      	movs	r3, #0
 800f85e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f866:	461a      	mov	r2, r3
 800f868:	2300      	movs	r3, #0
 800f86a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f872:	461a      	mov	r2, r3
 800f874:	2300      	movs	r3, #0
 800f876:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f878:	2300      	movs	r3, #0
 800f87a:	613b      	str	r3, [r7, #16]
 800f87c:	e043      	b.n	800f906 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f87e:	693b      	ldr	r3, [r7, #16]
 800f880:	015a      	lsls	r2, r3, #5
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	4413      	add	r3, r2
 800f886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f890:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f894:	d118      	bne.n	800f8c8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800f896:	693b      	ldr	r3, [r7, #16]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d10a      	bne.n	800f8b2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f89c:	693b      	ldr	r3, [r7, #16]
 800f89e:	015a      	lsls	r2, r3, #5
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	4413      	add	r3, r2
 800f8a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8a8:	461a      	mov	r2, r3
 800f8aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f8ae:	6013      	str	r3, [r2, #0]
 800f8b0:	e013      	b.n	800f8da <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f8b2:	693b      	ldr	r3, [r7, #16]
 800f8b4:	015a      	lsls	r2, r3, #5
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	4413      	add	r3, r2
 800f8ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8be:	461a      	mov	r2, r3
 800f8c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f8c4:	6013      	str	r3, [r2, #0]
 800f8c6:	e008      	b.n	800f8da <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f8c8:	693b      	ldr	r3, [r7, #16]
 800f8ca:	015a      	lsls	r2, r3, #5
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	4413      	add	r3, r2
 800f8d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8d4:	461a      	mov	r2, r3
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f8da:	693b      	ldr	r3, [r7, #16]
 800f8dc:	015a      	lsls	r2, r3, #5
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	4413      	add	r3, r2
 800f8e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8e6:	461a      	mov	r2, r3
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f8ec:	693b      	ldr	r3, [r7, #16]
 800f8ee:	015a      	lsls	r2, r3, #5
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	4413      	add	r3, r2
 800f8f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8f8:	461a      	mov	r2, r3
 800f8fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f8fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f900:	693b      	ldr	r3, [r7, #16]
 800f902:	3301      	adds	r3, #1
 800f904:	613b      	str	r3, [r7, #16]
 800f906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f908:	693a      	ldr	r2, [r7, #16]
 800f90a:	429a      	cmp	r2, r3
 800f90c:	d3b7      	bcc.n	800f87e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f90e:	2300      	movs	r3, #0
 800f910:	613b      	str	r3, [r7, #16]
 800f912:	e043      	b.n	800f99c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f914:	693b      	ldr	r3, [r7, #16]
 800f916:	015a      	lsls	r2, r3, #5
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	4413      	add	r3, r2
 800f91c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f926:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f92a:	d118      	bne.n	800f95e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800f92c:	693b      	ldr	r3, [r7, #16]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d10a      	bne.n	800f948 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f932:	693b      	ldr	r3, [r7, #16]
 800f934:	015a      	lsls	r2, r3, #5
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	4413      	add	r3, r2
 800f93a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f93e:	461a      	mov	r2, r3
 800f940:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f944:	6013      	str	r3, [r2, #0]
 800f946:	e013      	b.n	800f970 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f948:	693b      	ldr	r3, [r7, #16]
 800f94a:	015a      	lsls	r2, r3, #5
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	4413      	add	r3, r2
 800f950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f954:	461a      	mov	r2, r3
 800f956:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f95a:	6013      	str	r3, [r2, #0]
 800f95c:	e008      	b.n	800f970 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f95e:	693b      	ldr	r3, [r7, #16]
 800f960:	015a      	lsls	r2, r3, #5
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	4413      	add	r3, r2
 800f966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f96a:	461a      	mov	r2, r3
 800f96c:	2300      	movs	r3, #0
 800f96e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f970:	693b      	ldr	r3, [r7, #16]
 800f972:	015a      	lsls	r2, r3, #5
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	4413      	add	r3, r2
 800f978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f97c:	461a      	mov	r2, r3
 800f97e:	2300      	movs	r3, #0
 800f980:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f982:	693b      	ldr	r3, [r7, #16]
 800f984:	015a      	lsls	r2, r3, #5
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	4413      	add	r3, r2
 800f98a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f98e:	461a      	mov	r2, r3
 800f990:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f994:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f996:	693b      	ldr	r3, [r7, #16]
 800f998:	3301      	adds	r3, #1
 800f99a:	613b      	str	r3, [r7, #16]
 800f99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f99e:	693a      	ldr	r2, [r7, #16]
 800f9a0:	429a      	cmp	r2, r3
 800f9a2:	d3b7      	bcc.n	800f914 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9aa:	691b      	ldr	r3, [r3, #16]
 800f9ac:	68fa      	ldr	r2, [r7, #12]
 800f9ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f9b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f9b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f9c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d105      	bne.n	800f9d8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	699b      	ldr	r3, [r3, #24]
 800f9d0:	f043 0210 	orr.w	r2, r3, #16
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	699a      	ldr	r2, [r3, #24]
 800f9dc:	4b0f      	ldr	r3, [pc, #60]	; (800fa1c <USB_DevInit+0x2c4>)
 800f9de:	4313      	orrs	r3, r2
 800f9e0:	687a      	ldr	r2, [r7, #4]
 800f9e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f9e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d005      	beq.n	800f9f6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	699b      	ldr	r3, [r3, #24]
 800f9ee:	f043 0208 	orr.w	r2, r3, #8
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f9f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9f8:	2b01      	cmp	r3, #1
 800f9fa:	d107      	bne.n	800fa0c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	699b      	ldr	r3, [r3, #24]
 800fa00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fa04:	f043 0304 	orr.w	r3, r3, #4
 800fa08:	687a      	ldr	r2, [r7, #4]
 800fa0a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fa0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3718      	adds	r7, #24
 800fa12:	46bd      	mov	sp, r7
 800fa14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fa18:	b004      	add	sp, #16
 800fa1a:	4770      	bx	lr
 800fa1c:	803c3800 	.word	0x803c3800

0800fa20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fa20:	b480      	push	{r7}
 800fa22:	b085      	sub	sp, #20
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
 800fa28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	019b      	lsls	r3, r3, #6
 800fa32:	f043 0220 	orr.w	r2, r3, #32
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	3301      	adds	r3, #1
 800fa3e:	60fb      	str	r3, [r7, #12]
 800fa40:	4a08      	ldr	r2, [pc, #32]	; (800fa64 <USB_FlushTxFifo+0x44>)
 800fa42:	4293      	cmp	r3, r2
 800fa44:	d901      	bls.n	800fa4a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800fa46:	2303      	movs	r3, #3
 800fa48:	e006      	b.n	800fa58 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	691b      	ldr	r3, [r3, #16]
 800fa4e:	f003 0320 	and.w	r3, r3, #32
 800fa52:	2b20      	cmp	r3, #32
 800fa54:	d0f1      	beq.n	800fa3a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800fa56:	2300      	movs	r3, #0
}
 800fa58:	4618      	mov	r0, r3
 800fa5a:	3714      	adds	r7, #20
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa62:	4770      	bx	lr
 800fa64:	00030d40 	.word	0x00030d40

0800fa68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fa68:	b480      	push	{r7}
 800fa6a:	b085      	sub	sp, #20
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fa70:	2300      	movs	r3, #0
 800fa72:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2210      	movs	r2, #16
 800fa78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	3301      	adds	r3, #1
 800fa7e:	60fb      	str	r3, [r7, #12]
 800fa80:	4a08      	ldr	r2, [pc, #32]	; (800faa4 <USB_FlushRxFifo+0x3c>)
 800fa82:	4293      	cmp	r3, r2
 800fa84:	d901      	bls.n	800fa8a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800fa86:	2303      	movs	r3, #3
 800fa88:	e006      	b.n	800fa98 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	691b      	ldr	r3, [r3, #16]
 800fa8e:	f003 0310 	and.w	r3, r3, #16
 800fa92:	2b10      	cmp	r3, #16
 800fa94:	d0f1      	beq.n	800fa7a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800fa96:	2300      	movs	r3, #0
}
 800fa98:	4618      	mov	r0, r3
 800fa9a:	3714      	adds	r7, #20
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa2:	4770      	bx	lr
 800faa4:	00030d40 	.word	0x00030d40

0800faa8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800faa8:	b480      	push	{r7}
 800faaa:	b085      	sub	sp, #20
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
 800fab0:	460b      	mov	r3, r1
 800fab2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fabe:	681a      	ldr	r2, [r3, #0]
 800fac0:	78fb      	ldrb	r3, [r7, #3]
 800fac2:	68f9      	ldr	r1, [r7, #12]
 800fac4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fac8:	4313      	orrs	r3, r2
 800faca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800facc:	2300      	movs	r3, #0
}
 800face:	4618      	mov	r0, r3
 800fad0:	3714      	adds	r7, #20
 800fad2:	46bd      	mov	sp, r7
 800fad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad8:	4770      	bx	lr

0800fada <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800fada:	b480      	push	{r7}
 800fadc:	b087      	sub	sp, #28
 800fade:	af00      	add	r7, sp, #0
 800fae0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800fae6:	693b      	ldr	r3, [r7, #16]
 800fae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800faec:	689b      	ldr	r3, [r3, #8]
 800faee:	f003 0306 	and.w	r3, r3, #6
 800faf2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d102      	bne.n	800fb00 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800fafa:	2300      	movs	r3, #0
 800fafc:	75fb      	strb	r3, [r7, #23]
 800fafe:	e00a      	b.n	800fb16 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	2b02      	cmp	r3, #2
 800fb04:	d002      	beq.n	800fb0c <USB_GetDevSpeed+0x32>
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	2b06      	cmp	r3, #6
 800fb0a:	d102      	bne.n	800fb12 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800fb0c:	2302      	movs	r3, #2
 800fb0e:	75fb      	strb	r3, [r7, #23]
 800fb10:	e001      	b.n	800fb16 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800fb12:	230f      	movs	r3, #15
 800fb14:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800fb16:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb18:	4618      	mov	r0, r3
 800fb1a:	371c      	adds	r7, #28
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb22:	4770      	bx	lr

0800fb24 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fb24:	b480      	push	{r7}
 800fb26:	b085      	sub	sp, #20
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
 800fb2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	785b      	ldrb	r3, [r3, #1]
 800fb3c:	2b01      	cmp	r3, #1
 800fb3e:	d13a      	bne.n	800fbb6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb46:	69da      	ldr	r2, [r3, #28]
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	781b      	ldrb	r3, [r3, #0]
 800fb4c:	f003 030f 	and.w	r3, r3, #15
 800fb50:	2101      	movs	r1, #1
 800fb52:	fa01 f303 	lsl.w	r3, r1, r3
 800fb56:	b29b      	uxth	r3, r3
 800fb58:	68f9      	ldr	r1, [r7, #12]
 800fb5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fb5e:	4313      	orrs	r3, r2
 800fb60:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800fb62:	68bb      	ldr	r3, [r7, #8]
 800fb64:	015a      	lsls	r2, r3, #5
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	4413      	add	r3, r2
 800fb6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d155      	bne.n	800fc24 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fb78:	68bb      	ldr	r3, [r7, #8]
 800fb7a:	015a      	lsls	r2, r3, #5
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	4413      	add	r3, r2
 800fb80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb84:	681a      	ldr	r2, [r3, #0]
 800fb86:	683b      	ldr	r3, [r7, #0]
 800fb88:	689b      	ldr	r3, [r3, #8]
 800fb8a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fb8e:	683b      	ldr	r3, [r7, #0]
 800fb90:	78db      	ldrb	r3, [r3, #3]
 800fb92:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fb94:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fb96:	68bb      	ldr	r3, [r7, #8]
 800fb98:	059b      	lsls	r3, r3, #22
 800fb9a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fb9c:	4313      	orrs	r3, r2
 800fb9e:	68ba      	ldr	r2, [r7, #8]
 800fba0:	0151      	lsls	r1, r2, #5
 800fba2:	68fa      	ldr	r2, [r7, #12]
 800fba4:	440a      	add	r2, r1
 800fba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fbaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fbae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fbb2:	6013      	str	r3, [r2, #0]
 800fbb4:	e036      	b.n	800fc24 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbbc:	69da      	ldr	r2, [r3, #28]
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	781b      	ldrb	r3, [r3, #0]
 800fbc2:	f003 030f 	and.w	r3, r3, #15
 800fbc6:	2101      	movs	r1, #1
 800fbc8:	fa01 f303 	lsl.w	r3, r1, r3
 800fbcc:	041b      	lsls	r3, r3, #16
 800fbce:	68f9      	ldr	r1, [r7, #12]
 800fbd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fbd4:	4313      	orrs	r3, r2
 800fbd6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800fbd8:	68bb      	ldr	r3, [r7, #8]
 800fbda:	015a      	lsls	r2, r3, #5
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	4413      	add	r3, r2
 800fbe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d11a      	bne.n	800fc24 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fbee:	68bb      	ldr	r3, [r7, #8]
 800fbf0:	015a      	lsls	r2, r3, #5
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	4413      	add	r3, r2
 800fbf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbfa:	681a      	ldr	r2, [r3, #0]
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	689b      	ldr	r3, [r3, #8]
 800fc00:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800fc04:	683b      	ldr	r3, [r7, #0]
 800fc06:	78db      	ldrb	r3, [r3, #3]
 800fc08:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fc0a:	430b      	orrs	r3, r1
 800fc0c:	4313      	orrs	r3, r2
 800fc0e:	68ba      	ldr	r2, [r7, #8]
 800fc10:	0151      	lsls	r1, r2, #5
 800fc12:	68fa      	ldr	r2, [r7, #12]
 800fc14:	440a      	add	r2, r1
 800fc16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fc1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fc22:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800fc24:	2300      	movs	r3, #0
}
 800fc26:	4618      	mov	r0, r3
 800fc28:	3714      	adds	r7, #20
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc30:	4770      	bx	lr
	...

0800fc34 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fc34:	b480      	push	{r7}
 800fc36:	b085      	sub	sp, #20
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
 800fc3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	781b      	ldrb	r3, [r3, #0]
 800fc46:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800fc48:	683b      	ldr	r3, [r7, #0]
 800fc4a:	785b      	ldrb	r3, [r3, #1]
 800fc4c:	2b01      	cmp	r3, #1
 800fc4e:	d161      	bne.n	800fd14 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fc50:	68bb      	ldr	r3, [r7, #8]
 800fc52:	015a      	lsls	r2, r3, #5
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	4413      	add	r3, r2
 800fc58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fc62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fc66:	d11f      	bne.n	800fca8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800fc68:	68bb      	ldr	r3, [r7, #8]
 800fc6a:	015a      	lsls	r2, r3, #5
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	4413      	add	r3, r2
 800fc70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	68ba      	ldr	r2, [r7, #8]
 800fc78:	0151      	lsls	r1, r2, #5
 800fc7a:	68fa      	ldr	r2, [r7, #12]
 800fc7c:	440a      	add	r2, r1
 800fc7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fc86:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800fc88:	68bb      	ldr	r3, [r7, #8]
 800fc8a:	015a      	lsls	r2, r3, #5
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	4413      	add	r3, r2
 800fc90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	68ba      	ldr	r2, [r7, #8]
 800fc98:	0151      	lsls	r1, r2, #5
 800fc9a:	68fa      	ldr	r2, [r7, #12]
 800fc9c:	440a      	add	r2, r1
 800fc9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fca2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fca6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	781b      	ldrb	r3, [r3, #0]
 800fcb4:	f003 030f 	and.w	r3, r3, #15
 800fcb8:	2101      	movs	r1, #1
 800fcba:	fa01 f303 	lsl.w	r3, r1, r3
 800fcbe:	b29b      	uxth	r3, r3
 800fcc0:	43db      	mvns	r3, r3
 800fcc2:	68f9      	ldr	r1, [r7, #12]
 800fcc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fcc8:	4013      	ands	r3, r2
 800fcca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcd2:	69da      	ldr	r2, [r3, #28]
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	781b      	ldrb	r3, [r3, #0]
 800fcd8:	f003 030f 	and.w	r3, r3, #15
 800fcdc:	2101      	movs	r1, #1
 800fcde:	fa01 f303 	lsl.w	r3, r1, r3
 800fce2:	b29b      	uxth	r3, r3
 800fce4:	43db      	mvns	r3, r3
 800fce6:	68f9      	ldr	r1, [r7, #12]
 800fce8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fcec:	4013      	ands	r3, r2
 800fcee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800fcf0:	68bb      	ldr	r3, [r7, #8]
 800fcf2:	015a      	lsls	r2, r3, #5
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	4413      	add	r3, r2
 800fcf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcfc:	681a      	ldr	r2, [r3, #0]
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	0159      	lsls	r1, r3, #5
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	440b      	add	r3, r1
 800fd06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd0a:	4619      	mov	r1, r3
 800fd0c:	4b35      	ldr	r3, [pc, #212]	; (800fde4 <USB_DeactivateEndpoint+0x1b0>)
 800fd0e:	4013      	ands	r3, r2
 800fd10:	600b      	str	r3, [r1, #0]
 800fd12:	e060      	b.n	800fdd6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fd14:	68bb      	ldr	r3, [r7, #8]
 800fd16:	015a      	lsls	r2, r3, #5
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	4413      	add	r3, r2
 800fd1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fd26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fd2a:	d11f      	bne.n	800fd6c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	015a      	lsls	r2, r3, #5
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	4413      	add	r3, r2
 800fd34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	68ba      	ldr	r2, [r7, #8]
 800fd3c:	0151      	lsls	r1, r2, #5
 800fd3e:	68fa      	ldr	r2, [r7, #12]
 800fd40:	440a      	add	r2, r1
 800fd42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fd4a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800fd4c:	68bb      	ldr	r3, [r7, #8]
 800fd4e:	015a      	lsls	r2, r3, #5
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	4413      	add	r3, r2
 800fd54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	68ba      	ldr	r2, [r7, #8]
 800fd5c:	0151      	lsls	r1, r2, #5
 800fd5e:	68fa      	ldr	r2, [r7, #12]
 800fd60:	440a      	add	r2, r1
 800fd62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fd6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fd74:	683b      	ldr	r3, [r7, #0]
 800fd76:	781b      	ldrb	r3, [r3, #0]
 800fd78:	f003 030f 	and.w	r3, r3, #15
 800fd7c:	2101      	movs	r1, #1
 800fd7e:	fa01 f303 	lsl.w	r3, r1, r3
 800fd82:	041b      	lsls	r3, r3, #16
 800fd84:	43db      	mvns	r3, r3
 800fd86:	68f9      	ldr	r1, [r7, #12]
 800fd88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fd8c:	4013      	ands	r3, r2
 800fd8e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd96:	69da      	ldr	r2, [r3, #28]
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	781b      	ldrb	r3, [r3, #0]
 800fd9c:	f003 030f 	and.w	r3, r3, #15
 800fda0:	2101      	movs	r1, #1
 800fda2:	fa01 f303 	lsl.w	r3, r1, r3
 800fda6:	041b      	lsls	r3, r3, #16
 800fda8:	43db      	mvns	r3, r3
 800fdaa:	68f9      	ldr	r1, [r7, #12]
 800fdac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fdb0:	4013      	ands	r3, r2
 800fdb2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800fdb4:	68bb      	ldr	r3, [r7, #8]
 800fdb6:	015a      	lsls	r2, r3, #5
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	4413      	add	r3, r2
 800fdbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdc0:	681a      	ldr	r2, [r3, #0]
 800fdc2:	68bb      	ldr	r3, [r7, #8]
 800fdc4:	0159      	lsls	r1, r3, #5
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	440b      	add	r3, r1
 800fdca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdce:	4619      	mov	r1, r3
 800fdd0:	4b05      	ldr	r3, [pc, #20]	; (800fde8 <USB_DeactivateEndpoint+0x1b4>)
 800fdd2:	4013      	ands	r3, r2
 800fdd4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800fdd6:	2300      	movs	r3, #0
}
 800fdd8:	4618      	mov	r0, r3
 800fdda:	3714      	adds	r7, #20
 800fddc:	46bd      	mov	sp, r7
 800fdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde2:	4770      	bx	lr
 800fde4:	ec337800 	.word	0xec337800
 800fde8:	eff37800 	.word	0xeff37800

0800fdec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b08a      	sub	sp, #40	; 0x28
 800fdf0:	af02      	add	r7, sp, #8
 800fdf2:	60f8      	str	r0, [r7, #12]
 800fdf4:	60b9      	str	r1, [r7, #8]
 800fdf6:	4613      	mov	r3, r2
 800fdf8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800fdfe:	68bb      	ldr	r3, [r7, #8]
 800fe00:	781b      	ldrb	r3, [r3, #0]
 800fe02:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fe04:	68bb      	ldr	r3, [r7, #8]
 800fe06:	785b      	ldrb	r3, [r3, #1]
 800fe08:	2b01      	cmp	r3, #1
 800fe0a:	f040 815c 	bne.w	80100c6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fe0e:	68bb      	ldr	r3, [r7, #8]
 800fe10:	695b      	ldr	r3, [r3, #20]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d132      	bne.n	800fe7c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fe16:	69bb      	ldr	r3, [r7, #24]
 800fe18:	015a      	lsls	r2, r3, #5
 800fe1a:	69fb      	ldr	r3, [r7, #28]
 800fe1c:	4413      	add	r3, r2
 800fe1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe22:	691b      	ldr	r3, [r3, #16]
 800fe24:	69ba      	ldr	r2, [r7, #24]
 800fe26:	0151      	lsls	r1, r2, #5
 800fe28:	69fa      	ldr	r2, [r7, #28]
 800fe2a:	440a      	add	r2, r1
 800fe2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fe34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fe38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fe3a:	69bb      	ldr	r3, [r7, #24]
 800fe3c:	015a      	lsls	r2, r3, #5
 800fe3e:	69fb      	ldr	r3, [r7, #28]
 800fe40:	4413      	add	r3, r2
 800fe42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe46:	691b      	ldr	r3, [r3, #16]
 800fe48:	69ba      	ldr	r2, [r7, #24]
 800fe4a:	0151      	lsls	r1, r2, #5
 800fe4c:	69fa      	ldr	r2, [r7, #28]
 800fe4e:	440a      	add	r2, r1
 800fe50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fe58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fe5a:	69bb      	ldr	r3, [r7, #24]
 800fe5c:	015a      	lsls	r2, r3, #5
 800fe5e:	69fb      	ldr	r3, [r7, #28]
 800fe60:	4413      	add	r3, r2
 800fe62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe66:	691b      	ldr	r3, [r3, #16]
 800fe68:	69ba      	ldr	r2, [r7, #24]
 800fe6a:	0151      	lsls	r1, r2, #5
 800fe6c:	69fa      	ldr	r2, [r7, #28]
 800fe6e:	440a      	add	r2, r1
 800fe70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe74:	0cdb      	lsrs	r3, r3, #19
 800fe76:	04db      	lsls	r3, r3, #19
 800fe78:	6113      	str	r3, [r2, #16]
 800fe7a:	e074      	b.n	800ff66 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fe7c:	69bb      	ldr	r3, [r7, #24]
 800fe7e:	015a      	lsls	r2, r3, #5
 800fe80:	69fb      	ldr	r3, [r7, #28]
 800fe82:	4413      	add	r3, r2
 800fe84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe88:	691b      	ldr	r3, [r3, #16]
 800fe8a:	69ba      	ldr	r2, [r7, #24]
 800fe8c:	0151      	lsls	r1, r2, #5
 800fe8e:	69fa      	ldr	r2, [r7, #28]
 800fe90:	440a      	add	r2, r1
 800fe92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe96:	0cdb      	lsrs	r3, r3, #19
 800fe98:	04db      	lsls	r3, r3, #19
 800fe9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fe9c:	69bb      	ldr	r3, [r7, #24]
 800fe9e:	015a      	lsls	r2, r3, #5
 800fea0:	69fb      	ldr	r3, [r7, #28]
 800fea2:	4413      	add	r3, r2
 800fea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fea8:	691b      	ldr	r3, [r3, #16]
 800feaa:	69ba      	ldr	r2, [r7, #24]
 800feac:	0151      	lsls	r1, r2, #5
 800feae:	69fa      	ldr	r2, [r7, #28]
 800feb0:	440a      	add	r2, r1
 800feb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800feb6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800feba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800febe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800fec0:	69bb      	ldr	r3, [r7, #24]
 800fec2:	015a      	lsls	r2, r3, #5
 800fec4:	69fb      	ldr	r3, [r7, #28]
 800fec6:	4413      	add	r3, r2
 800fec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fecc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800fece:	68bb      	ldr	r3, [r7, #8]
 800fed0:	6959      	ldr	r1, [r3, #20]
 800fed2:	68bb      	ldr	r3, [r7, #8]
 800fed4:	689b      	ldr	r3, [r3, #8]
 800fed6:	440b      	add	r3, r1
 800fed8:	1e59      	subs	r1, r3, #1
 800feda:	68bb      	ldr	r3, [r7, #8]
 800fedc:	689b      	ldr	r3, [r3, #8]
 800fede:	fbb1 f3f3 	udiv	r3, r1, r3
 800fee2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800fee4:	4b9d      	ldr	r3, [pc, #628]	; (801015c <USB_EPStartXfer+0x370>)
 800fee6:	400b      	ands	r3, r1
 800fee8:	69b9      	ldr	r1, [r7, #24]
 800feea:	0148      	lsls	r0, r1, #5
 800feec:	69f9      	ldr	r1, [r7, #28]
 800feee:	4401      	add	r1, r0
 800fef0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fef4:	4313      	orrs	r3, r2
 800fef6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fef8:	69bb      	ldr	r3, [r7, #24]
 800fefa:	015a      	lsls	r2, r3, #5
 800fefc:	69fb      	ldr	r3, [r7, #28]
 800fefe:	4413      	add	r3, r2
 800ff00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff04:	691a      	ldr	r2, [r3, #16]
 800ff06:	68bb      	ldr	r3, [r7, #8]
 800ff08:	695b      	ldr	r3, [r3, #20]
 800ff0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ff0e:	69b9      	ldr	r1, [r7, #24]
 800ff10:	0148      	lsls	r0, r1, #5
 800ff12:	69f9      	ldr	r1, [r7, #28]
 800ff14:	4401      	add	r1, r0
 800ff16:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ff1a:	4313      	orrs	r3, r2
 800ff1c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ff1e:	68bb      	ldr	r3, [r7, #8]
 800ff20:	78db      	ldrb	r3, [r3, #3]
 800ff22:	2b01      	cmp	r3, #1
 800ff24:	d11f      	bne.n	800ff66 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ff26:	69bb      	ldr	r3, [r7, #24]
 800ff28:	015a      	lsls	r2, r3, #5
 800ff2a:	69fb      	ldr	r3, [r7, #28]
 800ff2c:	4413      	add	r3, r2
 800ff2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff32:	691b      	ldr	r3, [r3, #16]
 800ff34:	69ba      	ldr	r2, [r7, #24]
 800ff36:	0151      	lsls	r1, r2, #5
 800ff38:	69fa      	ldr	r2, [r7, #28]
 800ff3a:	440a      	add	r2, r1
 800ff3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff40:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ff44:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ff46:	69bb      	ldr	r3, [r7, #24]
 800ff48:	015a      	lsls	r2, r3, #5
 800ff4a:	69fb      	ldr	r3, [r7, #28]
 800ff4c:	4413      	add	r3, r2
 800ff4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff52:	691b      	ldr	r3, [r3, #16]
 800ff54:	69ba      	ldr	r2, [r7, #24]
 800ff56:	0151      	lsls	r1, r2, #5
 800ff58:	69fa      	ldr	r2, [r7, #28]
 800ff5a:	440a      	add	r2, r1
 800ff5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ff64:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ff66:	79fb      	ldrb	r3, [r7, #7]
 800ff68:	2b01      	cmp	r3, #1
 800ff6a:	d14b      	bne.n	8010004 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	691b      	ldr	r3, [r3, #16]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d009      	beq.n	800ff88 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ff74:	69bb      	ldr	r3, [r7, #24]
 800ff76:	015a      	lsls	r2, r3, #5
 800ff78:	69fb      	ldr	r3, [r7, #28]
 800ff7a:	4413      	add	r3, r2
 800ff7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff80:	461a      	mov	r2, r3
 800ff82:	68bb      	ldr	r3, [r7, #8]
 800ff84:	691b      	ldr	r3, [r3, #16]
 800ff86:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ff88:	68bb      	ldr	r3, [r7, #8]
 800ff8a:	78db      	ldrb	r3, [r3, #3]
 800ff8c:	2b01      	cmp	r3, #1
 800ff8e:	d128      	bne.n	800ffe2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ff90:	69fb      	ldr	r3, [r7, #28]
 800ff92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff96:	689b      	ldr	r3, [r3, #8]
 800ff98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d110      	bne.n	800ffc2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ffa0:	69bb      	ldr	r3, [r7, #24]
 800ffa2:	015a      	lsls	r2, r3, #5
 800ffa4:	69fb      	ldr	r3, [r7, #28]
 800ffa6:	4413      	add	r3, r2
 800ffa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	69ba      	ldr	r2, [r7, #24]
 800ffb0:	0151      	lsls	r1, r2, #5
 800ffb2:	69fa      	ldr	r2, [r7, #28]
 800ffb4:	440a      	add	r2, r1
 800ffb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ffbe:	6013      	str	r3, [r2, #0]
 800ffc0:	e00f      	b.n	800ffe2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ffc2:	69bb      	ldr	r3, [r7, #24]
 800ffc4:	015a      	lsls	r2, r3, #5
 800ffc6:	69fb      	ldr	r3, [r7, #28]
 800ffc8:	4413      	add	r3, r2
 800ffca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	69ba      	ldr	r2, [r7, #24]
 800ffd2:	0151      	lsls	r1, r2, #5
 800ffd4:	69fa      	ldr	r2, [r7, #28]
 800ffd6:	440a      	add	r2, r1
 800ffd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ffe0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ffe2:	69bb      	ldr	r3, [r7, #24]
 800ffe4:	015a      	lsls	r2, r3, #5
 800ffe6:	69fb      	ldr	r3, [r7, #28]
 800ffe8:	4413      	add	r3, r2
 800ffea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	69ba      	ldr	r2, [r7, #24]
 800fff2:	0151      	lsls	r1, r2, #5
 800fff4:	69fa      	ldr	r2, [r7, #28]
 800fff6:	440a      	add	r2, r1
 800fff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fffc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010000:	6013      	str	r3, [r2, #0]
 8010002:	e12f      	b.n	8010264 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010004:	69bb      	ldr	r3, [r7, #24]
 8010006:	015a      	lsls	r2, r3, #5
 8010008:	69fb      	ldr	r3, [r7, #28]
 801000a:	4413      	add	r3, r2
 801000c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	69ba      	ldr	r2, [r7, #24]
 8010014:	0151      	lsls	r1, r2, #5
 8010016:	69fa      	ldr	r2, [r7, #28]
 8010018:	440a      	add	r2, r1
 801001a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801001e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010022:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010024:	68bb      	ldr	r3, [r7, #8]
 8010026:	78db      	ldrb	r3, [r3, #3]
 8010028:	2b01      	cmp	r3, #1
 801002a:	d015      	beq.n	8010058 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	695b      	ldr	r3, [r3, #20]
 8010030:	2b00      	cmp	r3, #0
 8010032:	f000 8117 	beq.w	8010264 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010036:	69fb      	ldr	r3, [r7, #28]
 8010038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801003c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	781b      	ldrb	r3, [r3, #0]
 8010042:	f003 030f 	and.w	r3, r3, #15
 8010046:	2101      	movs	r1, #1
 8010048:	fa01 f303 	lsl.w	r3, r1, r3
 801004c:	69f9      	ldr	r1, [r7, #28]
 801004e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010052:	4313      	orrs	r3, r2
 8010054:	634b      	str	r3, [r1, #52]	; 0x34
 8010056:	e105      	b.n	8010264 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010058:	69fb      	ldr	r3, [r7, #28]
 801005a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801005e:	689b      	ldr	r3, [r3, #8]
 8010060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010064:	2b00      	cmp	r3, #0
 8010066:	d110      	bne.n	801008a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010068:	69bb      	ldr	r3, [r7, #24]
 801006a:	015a      	lsls	r2, r3, #5
 801006c:	69fb      	ldr	r3, [r7, #28]
 801006e:	4413      	add	r3, r2
 8010070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	69ba      	ldr	r2, [r7, #24]
 8010078:	0151      	lsls	r1, r2, #5
 801007a:	69fa      	ldr	r2, [r7, #28]
 801007c:	440a      	add	r2, r1
 801007e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010082:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010086:	6013      	str	r3, [r2, #0]
 8010088:	e00f      	b.n	80100aa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801008a:	69bb      	ldr	r3, [r7, #24]
 801008c:	015a      	lsls	r2, r3, #5
 801008e:	69fb      	ldr	r3, [r7, #28]
 8010090:	4413      	add	r3, r2
 8010092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	69ba      	ldr	r2, [r7, #24]
 801009a:	0151      	lsls	r1, r2, #5
 801009c:	69fa      	ldr	r2, [r7, #28]
 801009e:	440a      	add	r2, r1
 80100a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80100a8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80100aa:	68bb      	ldr	r3, [r7, #8]
 80100ac:	68d9      	ldr	r1, [r3, #12]
 80100ae:	68bb      	ldr	r3, [r7, #8]
 80100b0:	781a      	ldrb	r2, [r3, #0]
 80100b2:	68bb      	ldr	r3, [r7, #8]
 80100b4:	695b      	ldr	r3, [r3, #20]
 80100b6:	b298      	uxth	r0, r3
 80100b8:	79fb      	ldrb	r3, [r7, #7]
 80100ba:	9300      	str	r3, [sp, #0]
 80100bc:	4603      	mov	r3, r0
 80100be:	68f8      	ldr	r0, [r7, #12]
 80100c0:	f000 fa2b 	bl	801051a <USB_WritePacket>
 80100c4:	e0ce      	b.n	8010264 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80100c6:	69bb      	ldr	r3, [r7, #24]
 80100c8:	015a      	lsls	r2, r3, #5
 80100ca:	69fb      	ldr	r3, [r7, #28]
 80100cc:	4413      	add	r3, r2
 80100ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100d2:	691b      	ldr	r3, [r3, #16]
 80100d4:	69ba      	ldr	r2, [r7, #24]
 80100d6:	0151      	lsls	r1, r2, #5
 80100d8:	69fa      	ldr	r2, [r7, #28]
 80100da:	440a      	add	r2, r1
 80100dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80100e0:	0cdb      	lsrs	r3, r3, #19
 80100e2:	04db      	lsls	r3, r3, #19
 80100e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80100e6:	69bb      	ldr	r3, [r7, #24]
 80100e8:	015a      	lsls	r2, r3, #5
 80100ea:	69fb      	ldr	r3, [r7, #28]
 80100ec:	4413      	add	r3, r2
 80100ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100f2:	691b      	ldr	r3, [r3, #16]
 80100f4:	69ba      	ldr	r2, [r7, #24]
 80100f6:	0151      	lsls	r1, r2, #5
 80100f8:	69fa      	ldr	r2, [r7, #28]
 80100fa:	440a      	add	r2, r1
 80100fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010100:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010104:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010108:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801010a:	68bb      	ldr	r3, [r7, #8]
 801010c:	695b      	ldr	r3, [r3, #20]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d126      	bne.n	8010160 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010112:	69bb      	ldr	r3, [r7, #24]
 8010114:	015a      	lsls	r2, r3, #5
 8010116:	69fb      	ldr	r3, [r7, #28]
 8010118:	4413      	add	r3, r2
 801011a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801011e:	691a      	ldr	r2, [r3, #16]
 8010120:	68bb      	ldr	r3, [r7, #8]
 8010122:	689b      	ldr	r3, [r3, #8]
 8010124:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010128:	69b9      	ldr	r1, [r7, #24]
 801012a:	0148      	lsls	r0, r1, #5
 801012c:	69f9      	ldr	r1, [r7, #28]
 801012e:	4401      	add	r1, r0
 8010130:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010134:	4313      	orrs	r3, r2
 8010136:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010138:	69bb      	ldr	r3, [r7, #24]
 801013a:	015a      	lsls	r2, r3, #5
 801013c:	69fb      	ldr	r3, [r7, #28]
 801013e:	4413      	add	r3, r2
 8010140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010144:	691b      	ldr	r3, [r3, #16]
 8010146:	69ba      	ldr	r2, [r7, #24]
 8010148:	0151      	lsls	r1, r2, #5
 801014a:	69fa      	ldr	r2, [r7, #28]
 801014c:	440a      	add	r2, r1
 801014e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010152:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010156:	6113      	str	r3, [r2, #16]
 8010158:	e036      	b.n	80101c8 <USB_EPStartXfer+0x3dc>
 801015a:	bf00      	nop
 801015c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010160:	68bb      	ldr	r3, [r7, #8]
 8010162:	695a      	ldr	r2, [r3, #20]
 8010164:	68bb      	ldr	r3, [r7, #8]
 8010166:	689b      	ldr	r3, [r3, #8]
 8010168:	4413      	add	r3, r2
 801016a:	1e5a      	subs	r2, r3, #1
 801016c:	68bb      	ldr	r3, [r7, #8]
 801016e:	689b      	ldr	r3, [r3, #8]
 8010170:	fbb2 f3f3 	udiv	r3, r2, r3
 8010174:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010176:	69bb      	ldr	r3, [r7, #24]
 8010178:	015a      	lsls	r2, r3, #5
 801017a:	69fb      	ldr	r3, [r7, #28]
 801017c:	4413      	add	r3, r2
 801017e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010182:	691a      	ldr	r2, [r3, #16]
 8010184:	8afb      	ldrh	r3, [r7, #22]
 8010186:	04d9      	lsls	r1, r3, #19
 8010188:	4b39      	ldr	r3, [pc, #228]	; (8010270 <USB_EPStartXfer+0x484>)
 801018a:	400b      	ands	r3, r1
 801018c:	69b9      	ldr	r1, [r7, #24]
 801018e:	0148      	lsls	r0, r1, #5
 8010190:	69f9      	ldr	r1, [r7, #28]
 8010192:	4401      	add	r1, r0
 8010194:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010198:	4313      	orrs	r3, r2
 801019a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801019c:	69bb      	ldr	r3, [r7, #24]
 801019e:	015a      	lsls	r2, r3, #5
 80101a0:	69fb      	ldr	r3, [r7, #28]
 80101a2:	4413      	add	r3, r2
 80101a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101a8:	691a      	ldr	r2, [r3, #16]
 80101aa:	68bb      	ldr	r3, [r7, #8]
 80101ac:	689b      	ldr	r3, [r3, #8]
 80101ae:	8af9      	ldrh	r1, [r7, #22]
 80101b0:	fb01 f303 	mul.w	r3, r1, r3
 80101b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80101b8:	69b9      	ldr	r1, [r7, #24]
 80101ba:	0148      	lsls	r0, r1, #5
 80101bc:	69f9      	ldr	r1, [r7, #28]
 80101be:	4401      	add	r1, r0
 80101c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80101c4:	4313      	orrs	r3, r2
 80101c6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80101c8:	79fb      	ldrb	r3, [r7, #7]
 80101ca:	2b01      	cmp	r3, #1
 80101cc:	d10d      	bne.n	80101ea <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80101ce:	68bb      	ldr	r3, [r7, #8]
 80101d0:	68db      	ldr	r3, [r3, #12]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d009      	beq.n	80101ea <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80101d6:	68bb      	ldr	r3, [r7, #8]
 80101d8:	68d9      	ldr	r1, [r3, #12]
 80101da:	69bb      	ldr	r3, [r7, #24]
 80101dc:	015a      	lsls	r2, r3, #5
 80101de:	69fb      	ldr	r3, [r7, #28]
 80101e0:	4413      	add	r3, r2
 80101e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101e6:	460a      	mov	r2, r1
 80101e8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80101ea:	68bb      	ldr	r3, [r7, #8]
 80101ec:	78db      	ldrb	r3, [r3, #3]
 80101ee:	2b01      	cmp	r3, #1
 80101f0:	d128      	bne.n	8010244 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80101f2:	69fb      	ldr	r3, [r7, #28]
 80101f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101f8:	689b      	ldr	r3, [r3, #8]
 80101fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d110      	bne.n	8010224 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010202:	69bb      	ldr	r3, [r7, #24]
 8010204:	015a      	lsls	r2, r3, #5
 8010206:	69fb      	ldr	r3, [r7, #28]
 8010208:	4413      	add	r3, r2
 801020a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	69ba      	ldr	r2, [r7, #24]
 8010212:	0151      	lsls	r1, r2, #5
 8010214:	69fa      	ldr	r2, [r7, #28]
 8010216:	440a      	add	r2, r1
 8010218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801021c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010220:	6013      	str	r3, [r2, #0]
 8010222:	e00f      	b.n	8010244 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010224:	69bb      	ldr	r3, [r7, #24]
 8010226:	015a      	lsls	r2, r3, #5
 8010228:	69fb      	ldr	r3, [r7, #28]
 801022a:	4413      	add	r3, r2
 801022c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	69ba      	ldr	r2, [r7, #24]
 8010234:	0151      	lsls	r1, r2, #5
 8010236:	69fa      	ldr	r2, [r7, #28]
 8010238:	440a      	add	r2, r1
 801023a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801023e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010242:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010244:	69bb      	ldr	r3, [r7, #24]
 8010246:	015a      	lsls	r2, r3, #5
 8010248:	69fb      	ldr	r3, [r7, #28]
 801024a:	4413      	add	r3, r2
 801024c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	69ba      	ldr	r2, [r7, #24]
 8010254:	0151      	lsls	r1, r2, #5
 8010256:	69fa      	ldr	r2, [r7, #28]
 8010258:	440a      	add	r2, r1
 801025a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801025e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010262:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010264:	2300      	movs	r3, #0
}
 8010266:	4618      	mov	r0, r3
 8010268:	3720      	adds	r7, #32
 801026a:	46bd      	mov	sp, r7
 801026c:	bd80      	pop	{r7, pc}
 801026e:	bf00      	nop
 8010270:	1ff80000 	.word	0x1ff80000

08010274 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010274:	b480      	push	{r7}
 8010276:	b087      	sub	sp, #28
 8010278:	af00      	add	r7, sp, #0
 801027a:	60f8      	str	r0, [r7, #12]
 801027c:	60b9      	str	r1, [r7, #8]
 801027e:	4613      	mov	r3, r2
 8010280:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8010286:	68bb      	ldr	r3, [r7, #8]
 8010288:	781b      	ldrb	r3, [r3, #0]
 801028a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	785b      	ldrb	r3, [r3, #1]
 8010290:	2b01      	cmp	r3, #1
 8010292:	f040 80cd 	bne.w	8010430 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010296:	68bb      	ldr	r3, [r7, #8]
 8010298:	695b      	ldr	r3, [r3, #20]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d132      	bne.n	8010304 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801029e:	693b      	ldr	r3, [r7, #16]
 80102a0:	015a      	lsls	r2, r3, #5
 80102a2:	697b      	ldr	r3, [r7, #20]
 80102a4:	4413      	add	r3, r2
 80102a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102aa:	691b      	ldr	r3, [r3, #16]
 80102ac:	693a      	ldr	r2, [r7, #16]
 80102ae:	0151      	lsls	r1, r2, #5
 80102b0:	697a      	ldr	r2, [r7, #20]
 80102b2:	440a      	add	r2, r1
 80102b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80102bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80102c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80102c2:	693b      	ldr	r3, [r7, #16]
 80102c4:	015a      	lsls	r2, r3, #5
 80102c6:	697b      	ldr	r3, [r7, #20]
 80102c8:	4413      	add	r3, r2
 80102ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102ce:	691b      	ldr	r3, [r3, #16]
 80102d0:	693a      	ldr	r2, [r7, #16]
 80102d2:	0151      	lsls	r1, r2, #5
 80102d4:	697a      	ldr	r2, [r7, #20]
 80102d6:	440a      	add	r2, r1
 80102d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80102e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80102e2:	693b      	ldr	r3, [r7, #16]
 80102e4:	015a      	lsls	r2, r3, #5
 80102e6:	697b      	ldr	r3, [r7, #20]
 80102e8:	4413      	add	r3, r2
 80102ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102ee:	691b      	ldr	r3, [r3, #16]
 80102f0:	693a      	ldr	r2, [r7, #16]
 80102f2:	0151      	lsls	r1, r2, #5
 80102f4:	697a      	ldr	r2, [r7, #20]
 80102f6:	440a      	add	r2, r1
 80102f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102fc:	0cdb      	lsrs	r3, r3, #19
 80102fe:	04db      	lsls	r3, r3, #19
 8010300:	6113      	str	r3, [r2, #16]
 8010302:	e04e      	b.n	80103a2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010304:	693b      	ldr	r3, [r7, #16]
 8010306:	015a      	lsls	r2, r3, #5
 8010308:	697b      	ldr	r3, [r7, #20]
 801030a:	4413      	add	r3, r2
 801030c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010310:	691b      	ldr	r3, [r3, #16]
 8010312:	693a      	ldr	r2, [r7, #16]
 8010314:	0151      	lsls	r1, r2, #5
 8010316:	697a      	ldr	r2, [r7, #20]
 8010318:	440a      	add	r2, r1
 801031a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801031e:	0cdb      	lsrs	r3, r3, #19
 8010320:	04db      	lsls	r3, r3, #19
 8010322:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010324:	693b      	ldr	r3, [r7, #16]
 8010326:	015a      	lsls	r2, r3, #5
 8010328:	697b      	ldr	r3, [r7, #20]
 801032a:	4413      	add	r3, r2
 801032c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010330:	691b      	ldr	r3, [r3, #16]
 8010332:	693a      	ldr	r2, [r7, #16]
 8010334:	0151      	lsls	r1, r2, #5
 8010336:	697a      	ldr	r2, [r7, #20]
 8010338:	440a      	add	r2, r1
 801033a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801033e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010342:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010346:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	695a      	ldr	r2, [r3, #20]
 801034c:	68bb      	ldr	r3, [r7, #8]
 801034e:	689b      	ldr	r3, [r3, #8]
 8010350:	429a      	cmp	r2, r3
 8010352:	d903      	bls.n	801035c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8010354:	68bb      	ldr	r3, [r7, #8]
 8010356:	689a      	ldr	r2, [r3, #8]
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801035c:	693b      	ldr	r3, [r7, #16]
 801035e:	015a      	lsls	r2, r3, #5
 8010360:	697b      	ldr	r3, [r7, #20]
 8010362:	4413      	add	r3, r2
 8010364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010368:	691b      	ldr	r3, [r3, #16]
 801036a:	693a      	ldr	r2, [r7, #16]
 801036c:	0151      	lsls	r1, r2, #5
 801036e:	697a      	ldr	r2, [r7, #20]
 8010370:	440a      	add	r2, r1
 8010372:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010376:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801037a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801037c:	693b      	ldr	r3, [r7, #16]
 801037e:	015a      	lsls	r2, r3, #5
 8010380:	697b      	ldr	r3, [r7, #20]
 8010382:	4413      	add	r3, r2
 8010384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010388:	691a      	ldr	r2, [r3, #16]
 801038a:	68bb      	ldr	r3, [r7, #8]
 801038c:	695b      	ldr	r3, [r3, #20]
 801038e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010392:	6939      	ldr	r1, [r7, #16]
 8010394:	0148      	lsls	r0, r1, #5
 8010396:	6979      	ldr	r1, [r7, #20]
 8010398:	4401      	add	r1, r0
 801039a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801039e:	4313      	orrs	r3, r2
 80103a0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80103a2:	79fb      	ldrb	r3, [r7, #7]
 80103a4:	2b01      	cmp	r3, #1
 80103a6:	d11e      	bne.n	80103e6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80103a8:	68bb      	ldr	r3, [r7, #8]
 80103aa:	691b      	ldr	r3, [r3, #16]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d009      	beq.n	80103c4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80103b0:	693b      	ldr	r3, [r7, #16]
 80103b2:	015a      	lsls	r2, r3, #5
 80103b4:	697b      	ldr	r3, [r7, #20]
 80103b6:	4413      	add	r3, r2
 80103b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103bc:	461a      	mov	r2, r3
 80103be:	68bb      	ldr	r3, [r7, #8]
 80103c0:	691b      	ldr	r3, [r3, #16]
 80103c2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80103c4:	693b      	ldr	r3, [r7, #16]
 80103c6:	015a      	lsls	r2, r3, #5
 80103c8:	697b      	ldr	r3, [r7, #20]
 80103ca:	4413      	add	r3, r2
 80103cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	693a      	ldr	r2, [r7, #16]
 80103d4:	0151      	lsls	r1, r2, #5
 80103d6:	697a      	ldr	r2, [r7, #20]
 80103d8:	440a      	add	r2, r1
 80103da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80103e2:	6013      	str	r3, [r2, #0]
 80103e4:	e092      	b.n	801050c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80103e6:	693b      	ldr	r3, [r7, #16]
 80103e8:	015a      	lsls	r2, r3, #5
 80103ea:	697b      	ldr	r3, [r7, #20]
 80103ec:	4413      	add	r3, r2
 80103ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	693a      	ldr	r2, [r7, #16]
 80103f6:	0151      	lsls	r1, r2, #5
 80103f8:	697a      	ldr	r2, [r7, #20]
 80103fa:	440a      	add	r2, r1
 80103fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010400:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010404:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8010406:	68bb      	ldr	r3, [r7, #8]
 8010408:	695b      	ldr	r3, [r3, #20]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d07e      	beq.n	801050c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801040e:	697b      	ldr	r3, [r7, #20]
 8010410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010414:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	781b      	ldrb	r3, [r3, #0]
 801041a:	f003 030f 	and.w	r3, r3, #15
 801041e:	2101      	movs	r1, #1
 8010420:	fa01 f303 	lsl.w	r3, r1, r3
 8010424:	6979      	ldr	r1, [r7, #20]
 8010426:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801042a:	4313      	orrs	r3, r2
 801042c:	634b      	str	r3, [r1, #52]	; 0x34
 801042e:	e06d      	b.n	801050c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010430:	693b      	ldr	r3, [r7, #16]
 8010432:	015a      	lsls	r2, r3, #5
 8010434:	697b      	ldr	r3, [r7, #20]
 8010436:	4413      	add	r3, r2
 8010438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801043c:	691b      	ldr	r3, [r3, #16]
 801043e:	693a      	ldr	r2, [r7, #16]
 8010440:	0151      	lsls	r1, r2, #5
 8010442:	697a      	ldr	r2, [r7, #20]
 8010444:	440a      	add	r2, r1
 8010446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801044a:	0cdb      	lsrs	r3, r3, #19
 801044c:	04db      	lsls	r3, r3, #19
 801044e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010450:	693b      	ldr	r3, [r7, #16]
 8010452:	015a      	lsls	r2, r3, #5
 8010454:	697b      	ldr	r3, [r7, #20]
 8010456:	4413      	add	r3, r2
 8010458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801045c:	691b      	ldr	r3, [r3, #16]
 801045e:	693a      	ldr	r2, [r7, #16]
 8010460:	0151      	lsls	r1, r2, #5
 8010462:	697a      	ldr	r2, [r7, #20]
 8010464:	440a      	add	r2, r1
 8010466:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801046a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801046e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010472:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8010474:	68bb      	ldr	r3, [r7, #8]
 8010476:	695b      	ldr	r3, [r3, #20]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d003      	beq.n	8010484 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 801047c:	68bb      	ldr	r3, [r7, #8]
 801047e:	689a      	ldr	r2, [r3, #8]
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010484:	693b      	ldr	r3, [r7, #16]
 8010486:	015a      	lsls	r2, r3, #5
 8010488:	697b      	ldr	r3, [r7, #20]
 801048a:	4413      	add	r3, r2
 801048c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010490:	691b      	ldr	r3, [r3, #16]
 8010492:	693a      	ldr	r2, [r7, #16]
 8010494:	0151      	lsls	r1, r2, #5
 8010496:	697a      	ldr	r2, [r7, #20]
 8010498:	440a      	add	r2, r1
 801049a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801049e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80104a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80104a4:	693b      	ldr	r3, [r7, #16]
 80104a6:	015a      	lsls	r2, r3, #5
 80104a8:	697b      	ldr	r3, [r7, #20]
 80104aa:	4413      	add	r3, r2
 80104ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104b0:	691a      	ldr	r2, [r3, #16]
 80104b2:	68bb      	ldr	r3, [r7, #8]
 80104b4:	689b      	ldr	r3, [r3, #8]
 80104b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80104ba:	6939      	ldr	r1, [r7, #16]
 80104bc:	0148      	lsls	r0, r1, #5
 80104be:	6979      	ldr	r1, [r7, #20]
 80104c0:	4401      	add	r1, r0
 80104c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80104c6:	4313      	orrs	r3, r2
 80104c8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80104ca:	79fb      	ldrb	r3, [r7, #7]
 80104cc:	2b01      	cmp	r3, #1
 80104ce:	d10d      	bne.n	80104ec <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80104d0:	68bb      	ldr	r3, [r7, #8]
 80104d2:	68db      	ldr	r3, [r3, #12]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d009      	beq.n	80104ec <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80104d8:	68bb      	ldr	r3, [r7, #8]
 80104da:	68d9      	ldr	r1, [r3, #12]
 80104dc:	693b      	ldr	r3, [r7, #16]
 80104de:	015a      	lsls	r2, r3, #5
 80104e0:	697b      	ldr	r3, [r7, #20]
 80104e2:	4413      	add	r3, r2
 80104e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104e8:	460a      	mov	r2, r1
 80104ea:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80104ec:	693b      	ldr	r3, [r7, #16]
 80104ee:	015a      	lsls	r2, r3, #5
 80104f0:	697b      	ldr	r3, [r7, #20]
 80104f2:	4413      	add	r3, r2
 80104f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	693a      	ldr	r2, [r7, #16]
 80104fc:	0151      	lsls	r1, r2, #5
 80104fe:	697a      	ldr	r2, [r7, #20]
 8010500:	440a      	add	r2, r1
 8010502:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010506:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801050a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801050c:	2300      	movs	r3, #0
}
 801050e:	4618      	mov	r0, r3
 8010510:	371c      	adds	r7, #28
 8010512:	46bd      	mov	sp, r7
 8010514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010518:	4770      	bx	lr

0801051a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801051a:	b480      	push	{r7}
 801051c:	b089      	sub	sp, #36	; 0x24
 801051e:	af00      	add	r7, sp, #0
 8010520:	60f8      	str	r0, [r7, #12]
 8010522:	60b9      	str	r1, [r7, #8]
 8010524:	4611      	mov	r1, r2
 8010526:	461a      	mov	r2, r3
 8010528:	460b      	mov	r3, r1
 801052a:	71fb      	strb	r3, [r7, #7]
 801052c:	4613      	mov	r3, r2
 801052e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8010534:	68bb      	ldr	r3, [r7, #8]
 8010536:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8010538:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801053c:	2b00      	cmp	r3, #0
 801053e:	d123      	bne.n	8010588 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010540:	88bb      	ldrh	r3, [r7, #4]
 8010542:	3303      	adds	r3, #3
 8010544:	089b      	lsrs	r3, r3, #2
 8010546:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010548:	2300      	movs	r3, #0
 801054a:	61bb      	str	r3, [r7, #24]
 801054c:	e018      	b.n	8010580 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801054e:	79fb      	ldrb	r3, [r7, #7]
 8010550:	031a      	lsls	r2, r3, #12
 8010552:	697b      	ldr	r3, [r7, #20]
 8010554:	4413      	add	r3, r2
 8010556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801055a:	461a      	mov	r2, r3
 801055c:	69fb      	ldr	r3, [r7, #28]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010562:	69fb      	ldr	r3, [r7, #28]
 8010564:	3301      	adds	r3, #1
 8010566:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010568:	69fb      	ldr	r3, [r7, #28]
 801056a:	3301      	adds	r3, #1
 801056c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801056e:	69fb      	ldr	r3, [r7, #28]
 8010570:	3301      	adds	r3, #1
 8010572:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010574:	69fb      	ldr	r3, [r7, #28]
 8010576:	3301      	adds	r3, #1
 8010578:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801057a:	69bb      	ldr	r3, [r7, #24]
 801057c:	3301      	adds	r3, #1
 801057e:	61bb      	str	r3, [r7, #24]
 8010580:	69ba      	ldr	r2, [r7, #24]
 8010582:	693b      	ldr	r3, [r7, #16]
 8010584:	429a      	cmp	r2, r3
 8010586:	d3e2      	bcc.n	801054e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010588:	2300      	movs	r3, #0
}
 801058a:	4618      	mov	r0, r3
 801058c:	3724      	adds	r7, #36	; 0x24
 801058e:	46bd      	mov	sp, r7
 8010590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010594:	4770      	bx	lr

08010596 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010596:	b480      	push	{r7}
 8010598:	b08b      	sub	sp, #44	; 0x2c
 801059a:	af00      	add	r7, sp, #0
 801059c:	60f8      	str	r0, [r7, #12]
 801059e:	60b9      	str	r1, [r7, #8]
 80105a0:	4613      	mov	r3, r2
 80105a2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80105a8:	68bb      	ldr	r3, [r7, #8]
 80105aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80105ac:	88fb      	ldrh	r3, [r7, #6]
 80105ae:	089b      	lsrs	r3, r3, #2
 80105b0:	b29b      	uxth	r3, r3
 80105b2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80105b4:	88fb      	ldrh	r3, [r7, #6]
 80105b6:	f003 0303 	and.w	r3, r3, #3
 80105ba:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80105bc:	2300      	movs	r3, #0
 80105be:	623b      	str	r3, [r7, #32]
 80105c0:	e014      	b.n	80105ec <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80105c2:	69bb      	ldr	r3, [r7, #24]
 80105c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80105c8:	681a      	ldr	r2, [r3, #0]
 80105ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105cc:	601a      	str	r2, [r3, #0]
    pDest++;
 80105ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105d0:	3301      	adds	r3, #1
 80105d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80105d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105d6:	3301      	adds	r3, #1
 80105d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80105da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105dc:	3301      	adds	r3, #1
 80105de:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80105e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105e2:	3301      	adds	r3, #1
 80105e4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80105e6:	6a3b      	ldr	r3, [r7, #32]
 80105e8:	3301      	adds	r3, #1
 80105ea:	623b      	str	r3, [r7, #32]
 80105ec:	6a3a      	ldr	r2, [r7, #32]
 80105ee:	697b      	ldr	r3, [r7, #20]
 80105f0:	429a      	cmp	r2, r3
 80105f2:	d3e6      	bcc.n	80105c2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80105f4:	8bfb      	ldrh	r3, [r7, #30]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d01e      	beq.n	8010638 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80105fa:	2300      	movs	r3, #0
 80105fc:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80105fe:	69bb      	ldr	r3, [r7, #24]
 8010600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010604:	461a      	mov	r2, r3
 8010606:	f107 0310 	add.w	r3, r7, #16
 801060a:	6812      	ldr	r2, [r2, #0]
 801060c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801060e:	693a      	ldr	r2, [r7, #16]
 8010610:	6a3b      	ldr	r3, [r7, #32]
 8010612:	b2db      	uxtb	r3, r3
 8010614:	00db      	lsls	r3, r3, #3
 8010616:	fa22 f303 	lsr.w	r3, r2, r3
 801061a:	b2da      	uxtb	r2, r3
 801061c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801061e:	701a      	strb	r2, [r3, #0]
      i++;
 8010620:	6a3b      	ldr	r3, [r7, #32]
 8010622:	3301      	adds	r3, #1
 8010624:	623b      	str	r3, [r7, #32]
      pDest++;
 8010626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010628:	3301      	adds	r3, #1
 801062a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801062c:	8bfb      	ldrh	r3, [r7, #30]
 801062e:	3b01      	subs	r3, #1
 8010630:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8010632:	8bfb      	ldrh	r3, [r7, #30]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d1ea      	bne.n	801060e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8010638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801063a:	4618      	mov	r0, r3
 801063c:	372c      	adds	r7, #44	; 0x2c
 801063e:	46bd      	mov	sp, r7
 8010640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010644:	4770      	bx	lr

08010646 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010646:	b480      	push	{r7}
 8010648:	b085      	sub	sp, #20
 801064a:	af00      	add	r7, sp, #0
 801064c:	6078      	str	r0, [r7, #4]
 801064e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	781b      	ldrb	r3, [r3, #0]
 8010658:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801065a:	683b      	ldr	r3, [r7, #0]
 801065c:	785b      	ldrb	r3, [r3, #1]
 801065e:	2b01      	cmp	r3, #1
 8010660:	d12c      	bne.n	80106bc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010662:	68bb      	ldr	r3, [r7, #8]
 8010664:	015a      	lsls	r2, r3, #5
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	4413      	add	r3, r2
 801066a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	2b00      	cmp	r3, #0
 8010672:	db12      	blt.n	801069a <USB_EPSetStall+0x54>
 8010674:	68bb      	ldr	r3, [r7, #8]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d00f      	beq.n	801069a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801067a:	68bb      	ldr	r3, [r7, #8]
 801067c:	015a      	lsls	r2, r3, #5
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	4413      	add	r3, r2
 8010682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	68ba      	ldr	r2, [r7, #8]
 801068a:	0151      	lsls	r1, r2, #5
 801068c:	68fa      	ldr	r2, [r7, #12]
 801068e:	440a      	add	r2, r1
 8010690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010694:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010698:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801069a:	68bb      	ldr	r3, [r7, #8]
 801069c:	015a      	lsls	r2, r3, #5
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	4413      	add	r3, r2
 80106a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	68ba      	ldr	r2, [r7, #8]
 80106aa:	0151      	lsls	r1, r2, #5
 80106ac:	68fa      	ldr	r2, [r7, #12]
 80106ae:	440a      	add	r2, r1
 80106b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80106b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80106b8:	6013      	str	r3, [r2, #0]
 80106ba:	e02b      	b.n	8010714 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80106bc:	68bb      	ldr	r3, [r7, #8]
 80106be:	015a      	lsls	r2, r3, #5
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	4413      	add	r3, r2
 80106c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	db12      	blt.n	80106f4 <USB_EPSetStall+0xae>
 80106ce:	68bb      	ldr	r3, [r7, #8]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d00f      	beq.n	80106f4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80106d4:	68bb      	ldr	r3, [r7, #8]
 80106d6:	015a      	lsls	r2, r3, #5
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	4413      	add	r3, r2
 80106dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	68ba      	ldr	r2, [r7, #8]
 80106e4:	0151      	lsls	r1, r2, #5
 80106e6:	68fa      	ldr	r2, [r7, #12]
 80106e8:	440a      	add	r2, r1
 80106ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80106ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80106f2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80106f4:	68bb      	ldr	r3, [r7, #8]
 80106f6:	015a      	lsls	r2, r3, #5
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	4413      	add	r3, r2
 80106fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	68ba      	ldr	r2, [r7, #8]
 8010704:	0151      	lsls	r1, r2, #5
 8010706:	68fa      	ldr	r2, [r7, #12]
 8010708:	440a      	add	r2, r1
 801070a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801070e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010712:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010714:	2300      	movs	r3, #0
}
 8010716:	4618      	mov	r0, r3
 8010718:	3714      	adds	r7, #20
 801071a:	46bd      	mov	sp, r7
 801071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010720:	4770      	bx	lr

08010722 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010722:	b480      	push	{r7}
 8010724:	b085      	sub	sp, #20
 8010726:	af00      	add	r7, sp, #0
 8010728:	6078      	str	r0, [r7, #4]
 801072a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010730:	683b      	ldr	r3, [r7, #0]
 8010732:	781b      	ldrb	r3, [r3, #0]
 8010734:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010736:	683b      	ldr	r3, [r7, #0]
 8010738:	785b      	ldrb	r3, [r3, #1]
 801073a:	2b01      	cmp	r3, #1
 801073c:	d128      	bne.n	8010790 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801073e:	68bb      	ldr	r3, [r7, #8]
 8010740:	015a      	lsls	r2, r3, #5
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	4413      	add	r3, r2
 8010746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	68ba      	ldr	r2, [r7, #8]
 801074e:	0151      	lsls	r1, r2, #5
 8010750:	68fa      	ldr	r2, [r7, #12]
 8010752:	440a      	add	r2, r1
 8010754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010758:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801075c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	78db      	ldrb	r3, [r3, #3]
 8010762:	2b03      	cmp	r3, #3
 8010764:	d003      	beq.n	801076e <USB_EPClearStall+0x4c>
 8010766:	683b      	ldr	r3, [r7, #0]
 8010768:	78db      	ldrb	r3, [r3, #3]
 801076a:	2b02      	cmp	r3, #2
 801076c:	d138      	bne.n	80107e0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801076e:	68bb      	ldr	r3, [r7, #8]
 8010770:	015a      	lsls	r2, r3, #5
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	4413      	add	r3, r2
 8010776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	68ba      	ldr	r2, [r7, #8]
 801077e:	0151      	lsls	r1, r2, #5
 8010780:	68fa      	ldr	r2, [r7, #12]
 8010782:	440a      	add	r2, r1
 8010784:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801078c:	6013      	str	r3, [r2, #0]
 801078e:	e027      	b.n	80107e0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010790:	68bb      	ldr	r3, [r7, #8]
 8010792:	015a      	lsls	r2, r3, #5
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	4413      	add	r3, r2
 8010798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	68ba      	ldr	r2, [r7, #8]
 80107a0:	0151      	lsls	r1, r2, #5
 80107a2:	68fa      	ldr	r2, [r7, #12]
 80107a4:	440a      	add	r2, r1
 80107a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80107aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80107ae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80107b0:	683b      	ldr	r3, [r7, #0]
 80107b2:	78db      	ldrb	r3, [r3, #3]
 80107b4:	2b03      	cmp	r3, #3
 80107b6:	d003      	beq.n	80107c0 <USB_EPClearStall+0x9e>
 80107b8:	683b      	ldr	r3, [r7, #0]
 80107ba:	78db      	ldrb	r3, [r3, #3]
 80107bc:	2b02      	cmp	r3, #2
 80107be:	d10f      	bne.n	80107e0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80107c0:	68bb      	ldr	r3, [r7, #8]
 80107c2:	015a      	lsls	r2, r3, #5
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	4413      	add	r3, r2
 80107c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	68ba      	ldr	r2, [r7, #8]
 80107d0:	0151      	lsls	r1, r2, #5
 80107d2:	68fa      	ldr	r2, [r7, #12]
 80107d4:	440a      	add	r2, r1
 80107d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80107da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80107de:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80107e0:	2300      	movs	r3, #0
}
 80107e2:	4618      	mov	r0, r3
 80107e4:	3714      	adds	r7, #20
 80107e6:	46bd      	mov	sp, r7
 80107e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ec:	4770      	bx	lr

080107ee <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80107ee:	b480      	push	{r7}
 80107f0:	b085      	sub	sp, #20
 80107f2:	af00      	add	r7, sp, #0
 80107f4:	6078      	str	r0, [r7, #4]
 80107f6:	460b      	mov	r3, r1
 80107f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	68fa      	ldr	r2, [r7, #12]
 8010808:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801080c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010810:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010818:	681a      	ldr	r2, [r3, #0]
 801081a:	78fb      	ldrb	r3, [r7, #3]
 801081c:	011b      	lsls	r3, r3, #4
 801081e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010822:	68f9      	ldr	r1, [r7, #12]
 8010824:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010828:	4313      	orrs	r3, r2
 801082a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801082c:	2300      	movs	r3, #0
}
 801082e:	4618      	mov	r0, r3
 8010830:	3714      	adds	r7, #20
 8010832:	46bd      	mov	sp, r7
 8010834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010838:	4770      	bx	lr

0801083a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801083a:	b480      	push	{r7}
 801083c:	b085      	sub	sp, #20
 801083e:	af00      	add	r7, sp, #0
 8010840:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	68fa      	ldr	r2, [r7, #12]
 8010850:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010854:	f023 0303 	bic.w	r3, r3, #3
 8010858:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010860:	685b      	ldr	r3, [r3, #4]
 8010862:	68fa      	ldr	r2, [r7, #12]
 8010864:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010868:	f023 0302 	bic.w	r3, r3, #2
 801086c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801086e:	2300      	movs	r3, #0
}
 8010870:	4618      	mov	r0, r3
 8010872:	3714      	adds	r7, #20
 8010874:	46bd      	mov	sp, r7
 8010876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087a:	4770      	bx	lr

0801087c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801087c:	b480      	push	{r7}
 801087e:	b085      	sub	sp, #20
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	68fa      	ldr	r2, [r7, #12]
 8010892:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010896:	f023 0303 	bic.w	r3, r3, #3
 801089a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80108a2:	685b      	ldr	r3, [r3, #4]
 80108a4:	68fa      	ldr	r2, [r7, #12]
 80108a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80108aa:	f043 0302 	orr.w	r3, r3, #2
 80108ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80108b0:	2300      	movs	r3, #0
}
 80108b2:	4618      	mov	r0, r3
 80108b4:	3714      	adds	r7, #20
 80108b6:	46bd      	mov	sp, r7
 80108b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108bc:	4770      	bx	lr

080108be <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80108be:	b480      	push	{r7}
 80108c0:	b085      	sub	sp, #20
 80108c2:	af00      	add	r7, sp, #0
 80108c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	695b      	ldr	r3, [r3, #20]
 80108ca:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	699b      	ldr	r3, [r3, #24]
 80108d0:	68fa      	ldr	r2, [r7, #12]
 80108d2:	4013      	ands	r3, r2
 80108d4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80108d6:	68fb      	ldr	r3, [r7, #12]
}
 80108d8:	4618      	mov	r0, r3
 80108da:	3714      	adds	r7, #20
 80108dc:	46bd      	mov	sp, r7
 80108de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e2:	4770      	bx	lr

080108e4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80108e4:	b480      	push	{r7}
 80108e6:	b085      	sub	sp, #20
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80108f6:	699b      	ldr	r3, [r3, #24]
 80108f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010900:	69db      	ldr	r3, [r3, #28]
 8010902:	68ba      	ldr	r2, [r7, #8]
 8010904:	4013      	ands	r3, r2
 8010906:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010908:	68bb      	ldr	r3, [r7, #8]
 801090a:	0c1b      	lsrs	r3, r3, #16
}
 801090c:	4618      	mov	r0, r3
 801090e:	3714      	adds	r7, #20
 8010910:	46bd      	mov	sp, r7
 8010912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010916:	4770      	bx	lr

08010918 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010918:	b480      	push	{r7}
 801091a:	b085      	sub	sp, #20
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801092a:	699b      	ldr	r3, [r3, #24]
 801092c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010934:	69db      	ldr	r3, [r3, #28]
 8010936:	68ba      	ldr	r2, [r7, #8]
 8010938:	4013      	ands	r3, r2
 801093a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	b29b      	uxth	r3, r3
}
 8010940:	4618      	mov	r0, r3
 8010942:	3714      	adds	r7, #20
 8010944:	46bd      	mov	sp, r7
 8010946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094a:	4770      	bx	lr

0801094c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801094c:	b480      	push	{r7}
 801094e:	b085      	sub	sp, #20
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
 8010954:	460b      	mov	r3, r1
 8010956:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801095c:	78fb      	ldrb	r3, [r7, #3]
 801095e:	015a      	lsls	r2, r3, #5
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	4413      	add	r3, r2
 8010964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010968:	689b      	ldr	r3, [r3, #8]
 801096a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010972:	695b      	ldr	r3, [r3, #20]
 8010974:	68ba      	ldr	r2, [r7, #8]
 8010976:	4013      	ands	r3, r2
 8010978:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801097a:	68bb      	ldr	r3, [r7, #8]
}
 801097c:	4618      	mov	r0, r3
 801097e:	3714      	adds	r7, #20
 8010980:	46bd      	mov	sp, r7
 8010982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010986:	4770      	bx	lr

08010988 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010988:	b480      	push	{r7}
 801098a:	b087      	sub	sp, #28
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
 8010990:	460b      	mov	r3, r1
 8010992:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010998:	697b      	ldr	r3, [r7, #20]
 801099a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801099e:	691b      	ldr	r3, [r3, #16]
 80109a0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80109a2:	697b      	ldr	r3, [r7, #20]
 80109a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80109a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109aa:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80109ac:	78fb      	ldrb	r3, [r7, #3]
 80109ae:	f003 030f 	and.w	r3, r3, #15
 80109b2:	68fa      	ldr	r2, [r7, #12]
 80109b4:	fa22 f303 	lsr.w	r3, r2, r3
 80109b8:	01db      	lsls	r3, r3, #7
 80109ba:	b2db      	uxtb	r3, r3
 80109bc:	693a      	ldr	r2, [r7, #16]
 80109be:	4313      	orrs	r3, r2
 80109c0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80109c2:	78fb      	ldrb	r3, [r7, #3]
 80109c4:	015a      	lsls	r2, r3, #5
 80109c6:	697b      	ldr	r3, [r7, #20]
 80109c8:	4413      	add	r3, r2
 80109ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109ce:	689b      	ldr	r3, [r3, #8]
 80109d0:	693a      	ldr	r2, [r7, #16]
 80109d2:	4013      	ands	r3, r2
 80109d4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80109d6:	68bb      	ldr	r3, [r7, #8]
}
 80109d8:	4618      	mov	r0, r3
 80109da:	371c      	adds	r7, #28
 80109dc:	46bd      	mov	sp, r7
 80109de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e2:	4770      	bx	lr

080109e4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80109e4:	b480      	push	{r7}
 80109e6:	b083      	sub	sp, #12
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	695b      	ldr	r3, [r3, #20]
 80109f0:	f003 0301 	and.w	r3, r3, #1
}
 80109f4:	4618      	mov	r0, r3
 80109f6:	370c      	adds	r7, #12
 80109f8:	46bd      	mov	sp, r7
 80109fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109fe:	4770      	bx	lr

08010a00 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010a00:	b480      	push	{r7}
 8010a02:	b085      	sub	sp, #20
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	68fa      	ldr	r2, [r7, #12]
 8010a16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a1a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010a1e:	f023 0307 	bic.w	r3, r3, #7
 8010a22:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a2a:	685b      	ldr	r3, [r3, #4]
 8010a2c:	68fa      	ldr	r2, [r7, #12]
 8010a2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010a36:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010a38:	2300      	movs	r3, #0
}
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	3714      	adds	r7, #20
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a44:	4770      	bx	lr
	...

08010a48 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010a48:	b480      	push	{r7}
 8010a4a:	b087      	sub	sp, #28
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	60f8      	str	r0, [r7, #12]
 8010a50:	460b      	mov	r3, r1
 8010a52:	607a      	str	r2, [r7, #4]
 8010a54:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	333c      	adds	r3, #60	; 0x3c
 8010a5e:	3304      	adds	r3, #4
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010a64:	693b      	ldr	r3, [r7, #16]
 8010a66:	4a26      	ldr	r2, [pc, #152]	; (8010b00 <USB_EP0_OutStart+0xb8>)
 8010a68:	4293      	cmp	r3, r2
 8010a6a:	d90a      	bls.n	8010a82 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010a6c:	697b      	ldr	r3, [r7, #20]
 8010a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010a78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010a7c:	d101      	bne.n	8010a82 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010a7e:	2300      	movs	r3, #0
 8010a80:	e037      	b.n	8010af2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010a82:	697b      	ldr	r3, [r7, #20]
 8010a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a88:	461a      	mov	r2, r3
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010a8e:	697b      	ldr	r3, [r7, #20]
 8010a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a94:	691b      	ldr	r3, [r3, #16]
 8010a96:	697a      	ldr	r2, [r7, #20]
 8010a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010aa0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010aa2:	697b      	ldr	r3, [r7, #20]
 8010aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010aa8:	691b      	ldr	r3, [r3, #16]
 8010aaa:	697a      	ldr	r2, [r7, #20]
 8010aac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ab0:	f043 0318 	orr.w	r3, r3, #24
 8010ab4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010ab6:	697b      	ldr	r3, [r7, #20]
 8010ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010abc:	691b      	ldr	r3, [r3, #16]
 8010abe:	697a      	ldr	r2, [r7, #20]
 8010ac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ac4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010ac8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010aca:	7afb      	ldrb	r3, [r7, #11]
 8010acc:	2b01      	cmp	r3, #1
 8010ace:	d10f      	bne.n	8010af0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010ad0:	697b      	ldr	r3, [r7, #20]
 8010ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ad6:	461a      	mov	r2, r3
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010adc:	697b      	ldr	r3, [r7, #20]
 8010ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	697a      	ldr	r2, [r7, #20]
 8010ae6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010aea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010aee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010af0:	2300      	movs	r3, #0
}
 8010af2:	4618      	mov	r0, r3
 8010af4:	371c      	adds	r7, #28
 8010af6:	46bd      	mov	sp, r7
 8010af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afc:	4770      	bx	lr
 8010afe:	bf00      	nop
 8010b00:	4f54300a 	.word	0x4f54300a

08010b04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010b04:	b480      	push	{r7}
 8010b06:	b085      	sub	sp, #20
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	3301      	adds	r3, #1
 8010b14:	60fb      	str	r3, [r7, #12]
 8010b16:	4a13      	ldr	r2, [pc, #76]	; (8010b64 <USB_CoreReset+0x60>)
 8010b18:	4293      	cmp	r3, r2
 8010b1a:	d901      	bls.n	8010b20 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8010b1c:	2303      	movs	r3, #3
 8010b1e:	e01a      	b.n	8010b56 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	691b      	ldr	r3, [r3, #16]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	daf3      	bge.n	8010b10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010b28:	2300      	movs	r3, #0
 8010b2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	691b      	ldr	r3, [r3, #16]
 8010b30:	f043 0201 	orr.w	r2, r3, #1
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	3301      	adds	r3, #1
 8010b3c:	60fb      	str	r3, [r7, #12]
 8010b3e:	4a09      	ldr	r2, [pc, #36]	; (8010b64 <USB_CoreReset+0x60>)
 8010b40:	4293      	cmp	r3, r2
 8010b42:	d901      	bls.n	8010b48 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8010b44:	2303      	movs	r3, #3
 8010b46:	e006      	b.n	8010b56 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	691b      	ldr	r3, [r3, #16]
 8010b4c:	f003 0301 	and.w	r3, r3, #1
 8010b50:	2b01      	cmp	r3, #1
 8010b52:	d0f1      	beq.n	8010b38 <USB_CoreReset+0x34>

  return HAL_OK;
 8010b54:	2300      	movs	r3, #0
}
 8010b56:	4618      	mov	r0, r3
 8010b58:	3714      	adds	r7, #20
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b60:	4770      	bx	lr
 8010b62:	bf00      	nop
 8010b64:	00030d40 	.word	0x00030d40

08010b68 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8010b6c:	4904      	ldr	r1, [pc, #16]	; (8010b80 <MX_FATFS_Init+0x18>)
 8010b6e:	4805      	ldr	r0, [pc, #20]	; (8010b84 <MX_FATFS_Init+0x1c>)
 8010b70:	f004 fffe 	bl	8015b70 <FATFS_LinkDriver>
 8010b74:	4603      	mov	r3, r0
 8010b76:	461a      	mov	r2, r3
 8010b78:	4b03      	ldr	r3, [pc, #12]	; (8010b88 <MX_FATFS_Init+0x20>)
 8010b7a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010b7c:	bf00      	nop
 8010b7e:	bd80      	pop	{r7, pc}
 8010b80:	20007238 	.word	0x20007238
 8010b84:	20000064 	.word	0x20000064
 8010b88:	2000723c 	.word	0x2000723c

08010b8c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010b8c:	b480      	push	{r7}
 8010b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8010b90:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8010b92:	4618      	mov	r0, r3
 8010b94:	46bd      	mov	sp, r7
 8010b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9a:	4770      	bx	lr

08010b9c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b082      	sub	sp, #8
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	4603      	mov	r3, r0
 8010ba4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8010ba6:	79fb      	ldrb	r3, [r7, #7]
 8010ba8:	4618      	mov	r0, r3
 8010baa:	f000 f9dd 	bl	8010f68 <USER_SPI_initialize>
 8010bae:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	3708      	adds	r7, #8
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd80      	pop	{r7, pc}

08010bb8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b082      	sub	sp, #8
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8010bc2:	79fb      	ldrb	r3, [r7, #7]
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	f000 fab9 	bl	801113c <USER_SPI_status>
 8010bca:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8010bcc:	4618      	mov	r0, r3
 8010bce:	3708      	adds	r7, #8
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	bd80      	pop	{r7, pc}

08010bd4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b084      	sub	sp, #16
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	60b9      	str	r1, [r7, #8]
 8010bdc:	607a      	str	r2, [r7, #4]
 8010bde:	603b      	str	r3, [r7, #0]
 8010be0:	4603      	mov	r3, r0
 8010be2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8010be4:	7bf8      	ldrb	r0, [r7, #15]
 8010be6:	683b      	ldr	r3, [r7, #0]
 8010be8:	687a      	ldr	r2, [r7, #4]
 8010bea:	68b9      	ldr	r1, [r7, #8]
 8010bec:	f000 fabc 	bl	8011168 <USER_SPI_read>
 8010bf0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	3710      	adds	r7, #16
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	bd80      	pop	{r7, pc}

08010bfa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8010bfa:	b580      	push	{r7, lr}
 8010bfc:	b084      	sub	sp, #16
 8010bfe:	af00      	add	r7, sp, #0
 8010c00:	60b9      	str	r1, [r7, #8]
 8010c02:	607a      	str	r2, [r7, #4]
 8010c04:	603b      	str	r3, [r7, #0]
 8010c06:	4603      	mov	r3, r0
 8010c08:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8010c0a:	7bf8      	ldrb	r0, [r7, #15]
 8010c0c:	683b      	ldr	r3, [r7, #0]
 8010c0e:	687a      	ldr	r2, [r7, #4]
 8010c10:	68b9      	ldr	r1, [r7, #8]
 8010c12:	f000 fb0f 	bl	8011234 <USER_SPI_write>
 8010c16:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8010c18:	4618      	mov	r0, r3
 8010c1a:	3710      	adds	r7, #16
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	bd80      	pop	{r7, pc}

08010c20 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b082      	sub	sp, #8
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	4603      	mov	r3, r0
 8010c28:	603a      	str	r2, [r7, #0]
 8010c2a:	71fb      	strb	r3, [r7, #7]
 8010c2c:	460b      	mov	r3, r1
 8010c2e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8010c30:	79b9      	ldrb	r1, [r7, #6]
 8010c32:	79fb      	ldrb	r3, [r7, #7]
 8010c34:	683a      	ldr	r2, [r7, #0]
 8010c36:	4618      	mov	r0, r3
 8010c38:	f000 fb78 	bl	801132c <USER_SPI_ioctl>
 8010c3c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8010c3e:	4618      	mov	r0, r3
 8010c40:	3708      	adds	r7, #8
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}
	...

08010c48 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b082      	sub	sp, #8
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8010c50:	f7f7 fec2 	bl	80089d8 <HAL_GetTick>
 8010c54:	4603      	mov	r3, r0
 8010c56:	4a04      	ldr	r2, [pc, #16]	; (8010c68 <SPI_Timer_On+0x20>)
 8010c58:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8010c5a:	4a04      	ldr	r2, [pc, #16]	; (8010c6c <SPI_Timer_On+0x24>)
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	6013      	str	r3, [r2, #0]
}
 8010c60:	bf00      	nop
 8010c62:	3708      	adds	r7, #8
 8010c64:	46bd      	mov	sp, r7
 8010c66:	bd80      	pop	{r7, pc}
 8010c68:	200076a4 	.word	0x200076a4
 8010c6c:	200076a8 	.word	0x200076a8

08010c70 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8010c70:	b580      	push	{r7, lr}
 8010c72:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8010c74:	f7f7 feb0 	bl	80089d8 <HAL_GetTick>
 8010c78:	4602      	mov	r2, r0
 8010c7a:	4b06      	ldr	r3, [pc, #24]	; (8010c94 <SPI_Timer_Status+0x24>)
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	1ad2      	subs	r2, r2, r3
 8010c80:	4b05      	ldr	r3, [pc, #20]	; (8010c98 <SPI_Timer_Status+0x28>)
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	429a      	cmp	r2, r3
 8010c86:	bf34      	ite	cc
 8010c88:	2301      	movcc	r3, #1
 8010c8a:	2300      	movcs	r3, #0
 8010c8c:	b2db      	uxtb	r3, r3
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	bd80      	pop	{r7, pc}
 8010c92:	bf00      	nop
 8010c94:	200076a4 	.word	0x200076a4
 8010c98:	200076a8 	.word	0x200076a8

08010c9c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b086      	sub	sp, #24
 8010ca0:	af02      	add	r7, sp, #8
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8010ca6:	f107 020f 	add.w	r2, r7, #15
 8010caa:	1df9      	adds	r1, r7, #7
 8010cac:	2332      	movs	r3, #50	; 0x32
 8010cae:	9300      	str	r3, [sp, #0]
 8010cb0:	2301      	movs	r3, #1
 8010cb2:	4804      	ldr	r0, [pc, #16]	; (8010cc4 <xchg_spi+0x28>)
 8010cb4:	f7fc ff68 	bl	800db88 <HAL_SPI_TransmitReceive>
    return rxDat;
 8010cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cba:	4618      	mov	r0, r3
 8010cbc:	3710      	adds	r7, #16
 8010cbe:	46bd      	mov	sp, r7
 8010cc0:	bd80      	pop	{r7, pc}
 8010cc2:	bf00      	nop
 8010cc4:	20005fd0 	.word	0x20005fd0

08010cc8 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8010cc8:	b590      	push	{r4, r7, lr}
 8010cca:	b085      	sub	sp, #20
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
 8010cd0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	60fb      	str	r3, [r7, #12]
 8010cd6:	e00a      	b.n	8010cee <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8010cd8:	687a      	ldr	r2, [r7, #4]
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	18d4      	adds	r4, r2, r3
 8010cde:	20ff      	movs	r0, #255	; 0xff
 8010ce0:	f7ff ffdc 	bl	8010c9c <xchg_spi>
 8010ce4:	4603      	mov	r3, r0
 8010ce6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	3301      	adds	r3, #1
 8010cec:	60fb      	str	r3, [r7, #12]
 8010cee:	68fa      	ldr	r2, [r7, #12]
 8010cf0:	683b      	ldr	r3, [r7, #0]
 8010cf2:	429a      	cmp	r2, r3
 8010cf4:	d3f0      	bcc.n	8010cd8 <rcvr_spi_multi+0x10>
	}
}
 8010cf6:	bf00      	nop
 8010cf8:	bf00      	nop
 8010cfa:	3714      	adds	r7, #20
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	bd90      	pop	{r4, r7, pc}

08010d00 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b084      	sub	sp, #16
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
 8010d08:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	60fb      	str	r3, [r7, #12]
 8010d0e:	e009      	b.n	8010d24 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8010d10:	687a      	ldr	r2, [r7, #4]
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	4413      	add	r3, r2
 8010d16:	781b      	ldrb	r3, [r3, #0]
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f7ff ffbf 	bl	8010c9c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	3301      	adds	r3, #1
 8010d22:	60fb      	str	r3, [r7, #12]
 8010d24:	68fa      	ldr	r2, [r7, #12]
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	429a      	cmp	r2, r3
 8010d2a:	d3f1      	bcc.n	8010d10 <xmit_spi_multi+0x10>
	}
}
 8010d2c:	bf00      	nop
 8010d2e:	bf00      	nop
 8010d30:	3710      	adds	r7, #16
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}

08010d36 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8010d36:	b580      	push	{r7, lr}
 8010d38:	b086      	sub	sp, #24
 8010d3a:	af00      	add	r7, sp, #0
 8010d3c:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8010d3e:	f7f7 fe4b 	bl	80089d8 <HAL_GetTick>
 8010d42:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8010d48:	20ff      	movs	r0, #255	; 0xff
 8010d4a:	f7ff ffa7 	bl	8010c9c <xchg_spi>
 8010d4e:	4603      	mov	r3, r0
 8010d50:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8010d52:	7bfb      	ldrb	r3, [r7, #15]
 8010d54:	2bff      	cmp	r3, #255	; 0xff
 8010d56:	d007      	beq.n	8010d68 <wait_ready+0x32>
 8010d58:	f7f7 fe3e 	bl	80089d8 <HAL_GetTick>
 8010d5c:	4602      	mov	r2, r0
 8010d5e:	697b      	ldr	r3, [r7, #20]
 8010d60:	1ad3      	subs	r3, r2, r3
 8010d62:	693a      	ldr	r2, [r7, #16]
 8010d64:	429a      	cmp	r2, r3
 8010d66:	d8ef      	bhi.n	8010d48 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8010d68:	7bfb      	ldrb	r3, [r7, #15]
 8010d6a:	2bff      	cmp	r3, #255	; 0xff
 8010d6c:	bf0c      	ite	eq
 8010d6e:	2301      	moveq	r3, #1
 8010d70:	2300      	movne	r3, #0
 8010d72:	b2db      	uxtb	r3, r3
}
 8010d74:	4618      	mov	r0, r3
 8010d76:	3718      	adds	r7, #24
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	bd80      	pop	{r7, pc}

08010d7c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8010d80:	2201      	movs	r2, #1
 8010d82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010d86:	4804      	ldr	r0, [pc, #16]	; (8010d98 <despiselect+0x1c>)
 8010d88:	f7f8 fd3e 	bl	8009808 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8010d8c:	20ff      	movs	r0, #255	; 0xff
 8010d8e:	f7ff ff85 	bl	8010c9c <xchg_spi>

}
 8010d92:	bf00      	nop
 8010d94:	bd80      	pop	{r7, pc}
 8010d96:	bf00      	nop
 8010d98:	40021400 	.word	0x40021400

08010d9c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8010d9c:	b580      	push	{r7, lr}
 8010d9e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8010da0:	2200      	movs	r2, #0
 8010da2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010da6:	480a      	ldr	r0, [pc, #40]	; (8010dd0 <spiselect+0x34>)
 8010da8:	f7f8 fd2e 	bl	8009808 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8010dac:	20ff      	movs	r0, #255	; 0xff
 8010dae:	f7ff ff75 	bl	8010c9c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8010db2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8010db6:	f7ff ffbe 	bl	8010d36 <wait_ready>
 8010dba:	4603      	mov	r3, r0
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d001      	beq.n	8010dc4 <spiselect+0x28>
 8010dc0:	2301      	movs	r3, #1
 8010dc2:	e002      	b.n	8010dca <spiselect+0x2e>

	despiselect();
 8010dc4:	f7ff ffda 	bl	8010d7c <despiselect>
	return 0;	/* Timeout */
 8010dc8:	2300      	movs	r3, #0
}
 8010dca:	4618      	mov	r0, r3
 8010dcc:	bd80      	pop	{r7, pc}
 8010dce:	bf00      	nop
 8010dd0:	40021400 	.word	0x40021400

08010dd4 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	b084      	sub	sp, #16
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
 8010ddc:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8010dde:	20c8      	movs	r0, #200	; 0xc8
 8010de0:	f7ff ff32 	bl	8010c48 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8010de4:	20ff      	movs	r0, #255	; 0xff
 8010de6:	f7ff ff59 	bl	8010c9c <xchg_spi>
 8010dea:	4603      	mov	r3, r0
 8010dec:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8010dee:	7bfb      	ldrb	r3, [r7, #15]
 8010df0:	2bff      	cmp	r3, #255	; 0xff
 8010df2:	d104      	bne.n	8010dfe <rcvr_datablock+0x2a>
 8010df4:	f7ff ff3c 	bl	8010c70 <SPI_Timer_Status>
 8010df8:	4603      	mov	r3, r0
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d1f2      	bne.n	8010de4 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8010dfe:	7bfb      	ldrb	r3, [r7, #15]
 8010e00:	2bfe      	cmp	r3, #254	; 0xfe
 8010e02:	d001      	beq.n	8010e08 <rcvr_datablock+0x34>
 8010e04:	2300      	movs	r3, #0
 8010e06:	e00a      	b.n	8010e1e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8010e08:	6839      	ldr	r1, [r7, #0]
 8010e0a:	6878      	ldr	r0, [r7, #4]
 8010e0c:	f7ff ff5c 	bl	8010cc8 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8010e10:	20ff      	movs	r0, #255	; 0xff
 8010e12:	f7ff ff43 	bl	8010c9c <xchg_spi>
 8010e16:	20ff      	movs	r0, #255	; 0xff
 8010e18:	f7ff ff40 	bl	8010c9c <xchg_spi>

	return 1;						/* Function succeeded */
 8010e1c:	2301      	movs	r3, #1
}
 8010e1e:	4618      	mov	r0, r3
 8010e20:	3710      	adds	r7, #16
 8010e22:	46bd      	mov	sp, r7
 8010e24:	bd80      	pop	{r7, pc}

08010e26 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8010e26:	b580      	push	{r7, lr}
 8010e28:	b084      	sub	sp, #16
 8010e2a:	af00      	add	r7, sp, #0
 8010e2c:	6078      	str	r0, [r7, #4]
 8010e2e:	460b      	mov	r3, r1
 8010e30:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8010e32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8010e36:	f7ff ff7e 	bl	8010d36 <wait_ready>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d101      	bne.n	8010e44 <xmit_datablock+0x1e>
 8010e40:	2300      	movs	r3, #0
 8010e42:	e01e      	b.n	8010e82 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8010e44:	78fb      	ldrb	r3, [r7, #3]
 8010e46:	4618      	mov	r0, r3
 8010e48:	f7ff ff28 	bl	8010c9c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8010e4c:	78fb      	ldrb	r3, [r7, #3]
 8010e4e:	2bfd      	cmp	r3, #253	; 0xfd
 8010e50:	d016      	beq.n	8010e80 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8010e52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010e56:	6878      	ldr	r0, [r7, #4]
 8010e58:	f7ff ff52 	bl	8010d00 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8010e5c:	20ff      	movs	r0, #255	; 0xff
 8010e5e:	f7ff ff1d 	bl	8010c9c <xchg_spi>
 8010e62:	20ff      	movs	r0, #255	; 0xff
 8010e64:	f7ff ff1a 	bl	8010c9c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8010e68:	20ff      	movs	r0, #255	; 0xff
 8010e6a:	f7ff ff17 	bl	8010c9c <xchg_spi>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8010e72:	7bfb      	ldrb	r3, [r7, #15]
 8010e74:	f003 031f 	and.w	r3, r3, #31
 8010e78:	2b05      	cmp	r3, #5
 8010e7a:	d001      	beq.n	8010e80 <xmit_datablock+0x5a>
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	e000      	b.n	8010e82 <xmit_datablock+0x5c>
	}
	return 1;
 8010e80:	2301      	movs	r3, #1
}
 8010e82:	4618      	mov	r0, r3
 8010e84:	3710      	adds	r7, #16
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}

08010e8a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8010e8a:	b580      	push	{r7, lr}
 8010e8c:	b084      	sub	sp, #16
 8010e8e:	af00      	add	r7, sp, #0
 8010e90:	4603      	mov	r3, r0
 8010e92:	6039      	str	r1, [r7, #0]
 8010e94:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8010e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	da0e      	bge.n	8010ebc <send_cmd+0x32>
		cmd &= 0x7F;
 8010e9e:	79fb      	ldrb	r3, [r7, #7]
 8010ea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ea4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8010ea6:	2100      	movs	r1, #0
 8010ea8:	2037      	movs	r0, #55	; 0x37
 8010eaa:	f7ff ffee 	bl	8010e8a <send_cmd>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8010eb2:	7bbb      	ldrb	r3, [r7, #14]
 8010eb4:	2b01      	cmp	r3, #1
 8010eb6:	d901      	bls.n	8010ebc <send_cmd+0x32>
 8010eb8:	7bbb      	ldrb	r3, [r7, #14]
 8010eba:	e051      	b.n	8010f60 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8010ebc:	79fb      	ldrb	r3, [r7, #7]
 8010ebe:	2b0c      	cmp	r3, #12
 8010ec0:	d008      	beq.n	8010ed4 <send_cmd+0x4a>
		despiselect();
 8010ec2:	f7ff ff5b 	bl	8010d7c <despiselect>
		if (!spiselect()) return 0xFF;
 8010ec6:	f7ff ff69 	bl	8010d9c <spiselect>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d101      	bne.n	8010ed4 <send_cmd+0x4a>
 8010ed0:	23ff      	movs	r3, #255	; 0xff
 8010ed2:	e045      	b.n	8010f60 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8010ed4:	79fb      	ldrb	r3, [r7, #7]
 8010ed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010eda:	b2db      	uxtb	r3, r3
 8010edc:	4618      	mov	r0, r3
 8010ede:	f7ff fedd 	bl	8010c9c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8010ee2:	683b      	ldr	r3, [r7, #0]
 8010ee4:	0e1b      	lsrs	r3, r3, #24
 8010ee6:	b2db      	uxtb	r3, r3
 8010ee8:	4618      	mov	r0, r3
 8010eea:	f7ff fed7 	bl	8010c9c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8010eee:	683b      	ldr	r3, [r7, #0]
 8010ef0:	0c1b      	lsrs	r3, r3, #16
 8010ef2:	b2db      	uxtb	r3, r3
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f7ff fed1 	bl	8010c9c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	0a1b      	lsrs	r3, r3, #8
 8010efe:	b2db      	uxtb	r3, r3
 8010f00:	4618      	mov	r0, r3
 8010f02:	f7ff fecb 	bl	8010c9c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8010f06:	683b      	ldr	r3, [r7, #0]
 8010f08:	b2db      	uxtb	r3, r3
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	f7ff fec6 	bl	8010c9c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8010f10:	2301      	movs	r3, #1
 8010f12:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8010f14:	79fb      	ldrb	r3, [r7, #7]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d101      	bne.n	8010f1e <send_cmd+0x94>
 8010f1a:	2395      	movs	r3, #149	; 0x95
 8010f1c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8010f1e:	79fb      	ldrb	r3, [r7, #7]
 8010f20:	2b08      	cmp	r3, #8
 8010f22:	d101      	bne.n	8010f28 <send_cmd+0x9e>
 8010f24:	2387      	movs	r3, #135	; 0x87
 8010f26:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8010f28:	7bfb      	ldrb	r3, [r7, #15]
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f7ff feb6 	bl	8010c9c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8010f30:	79fb      	ldrb	r3, [r7, #7]
 8010f32:	2b0c      	cmp	r3, #12
 8010f34:	d102      	bne.n	8010f3c <send_cmd+0xb2>
 8010f36:	20ff      	movs	r0, #255	; 0xff
 8010f38:	f7ff feb0 	bl	8010c9c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8010f3c:	230a      	movs	r3, #10
 8010f3e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8010f40:	20ff      	movs	r0, #255	; 0xff
 8010f42:	f7ff feab 	bl	8010c9c <xchg_spi>
 8010f46:	4603      	mov	r3, r0
 8010f48:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8010f4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	da05      	bge.n	8010f5e <send_cmd+0xd4>
 8010f52:	7bfb      	ldrb	r3, [r7, #15]
 8010f54:	3b01      	subs	r3, #1
 8010f56:	73fb      	strb	r3, [r7, #15]
 8010f58:	7bfb      	ldrb	r3, [r7, #15]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d1f0      	bne.n	8010f40 <send_cmd+0xb6>

	return res;							/* Return received response */
 8010f5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f60:	4618      	mov	r0, r3
 8010f62:	3710      	adds	r7, #16
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bd80      	pop	{r7, pc}

08010f68 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8010f68:	b590      	push	{r4, r7, lr}
 8010f6a:	b085      	sub	sp, #20
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	4603      	mov	r3, r0
 8010f70:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8010f72:	79fb      	ldrb	r3, [r7, #7]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d001      	beq.n	8010f7c <USER_SPI_initialize+0x14>
 8010f78:	2301      	movs	r3, #1
 8010f7a:	e0d4      	b.n	8011126 <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8010f7c:	4b6c      	ldr	r3, [pc, #432]	; (8011130 <USER_SPI_initialize+0x1c8>)
 8010f7e:	781b      	ldrb	r3, [r3, #0]
 8010f80:	b2db      	uxtb	r3, r3
 8010f82:	f003 0302 	and.w	r3, r3, #2
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d003      	beq.n	8010f92 <USER_SPI_initialize+0x2a>
 8010f8a:	4b69      	ldr	r3, [pc, #420]	; (8011130 <USER_SPI_initialize+0x1c8>)
 8010f8c:	781b      	ldrb	r3, [r3, #0]
 8010f8e:	b2db      	uxtb	r3, r3
 8010f90:	e0c9      	b.n	8011126 <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 8010f92:	4b68      	ldr	r3, [pc, #416]	; (8011134 <USER_SPI_initialize+0x1cc>)
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	681a      	ldr	r2, [r3, #0]
 8010f98:	4b66      	ldr	r3, [pc, #408]	; (8011134 <USER_SPI_initialize+0x1cc>)
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8010fa0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8010fa2:	230a      	movs	r3, #10
 8010fa4:	73fb      	strb	r3, [r7, #15]
 8010fa6:	e005      	b.n	8010fb4 <USER_SPI_initialize+0x4c>
 8010fa8:	20ff      	movs	r0, #255	; 0xff
 8010faa:	f7ff fe77 	bl	8010c9c <xchg_spi>
 8010fae:	7bfb      	ldrb	r3, [r7, #15]
 8010fb0:	3b01      	subs	r3, #1
 8010fb2:	73fb      	strb	r3, [r7, #15]
 8010fb4:	7bfb      	ldrb	r3, [r7, #15]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d1f6      	bne.n	8010fa8 <USER_SPI_initialize+0x40>

	ty = 0;
 8010fba:	2300      	movs	r3, #0
 8010fbc:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8010fbe:	2100      	movs	r1, #0
 8010fc0:	2000      	movs	r0, #0
 8010fc2:	f7ff ff62 	bl	8010e8a <send_cmd>
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	2b01      	cmp	r3, #1
 8010fca:	f040 808b 	bne.w	80110e4 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8010fce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010fd2:	f7ff fe39 	bl	8010c48 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8010fd6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010fda:	2008      	movs	r0, #8
 8010fdc:	f7ff ff55 	bl	8010e8a <send_cmd>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	2b01      	cmp	r3, #1
 8010fe4:	d151      	bne.n	801108a <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	73fb      	strb	r3, [r7, #15]
 8010fea:	e00d      	b.n	8011008 <USER_SPI_initialize+0xa0>
 8010fec:	7bfc      	ldrb	r4, [r7, #15]
 8010fee:	20ff      	movs	r0, #255	; 0xff
 8010ff0:	f7ff fe54 	bl	8010c9c <xchg_spi>
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	461a      	mov	r2, r3
 8010ff8:	f107 0310 	add.w	r3, r7, #16
 8010ffc:	4423      	add	r3, r4
 8010ffe:	f803 2c08 	strb.w	r2, [r3, #-8]
 8011002:	7bfb      	ldrb	r3, [r7, #15]
 8011004:	3301      	adds	r3, #1
 8011006:	73fb      	strb	r3, [r7, #15]
 8011008:	7bfb      	ldrb	r3, [r7, #15]
 801100a:	2b03      	cmp	r3, #3
 801100c:	d9ee      	bls.n	8010fec <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 801100e:	7abb      	ldrb	r3, [r7, #10]
 8011010:	2b01      	cmp	r3, #1
 8011012:	d167      	bne.n	80110e4 <USER_SPI_initialize+0x17c>
 8011014:	7afb      	ldrb	r3, [r7, #11]
 8011016:	2baa      	cmp	r3, #170	; 0xaa
 8011018:	d164      	bne.n	80110e4 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 801101a:	bf00      	nop
 801101c:	f7ff fe28 	bl	8010c70 <SPI_Timer_Status>
 8011020:	4603      	mov	r3, r0
 8011022:	2b00      	cmp	r3, #0
 8011024:	d007      	beq.n	8011036 <USER_SPI_initialize+0xce>
 8011026:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 801102a:	20a9      	movs	r0, #169	; 0xa9
 801102c:	f7ff ff2d 	bl	8010e8a <send_cmd>
 8011030:	4603      	mov	r3, r0
 8011032:	2b00      	cmp	r3, #0
 8011034:	d1f2      	bne.n	801101c <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8011036:	f7ff fe1b 	bl	8010c70 <SPI_Timer_Status>
 801103a:	4603      	mov	r3, r0
 801103c:	2b00      	cmp	r3, #0
 801103e:	d051      	beq.n	80110e4 <USER_SPI_initialize+0x17c>
 8011040:	2100      	movs	r1, #0
 8011042:	203a      	movs	r0, #58	; 0x3a
 8011044:	f7ff ff21 	bl	8010e8a <send_cmd>
 8011048:	4603      	mov	r3, r0
 801104a:	2b00      	cmp	r3, #0
 801104c:	d14a      	bne.n	80110e4 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 801104e:	2300      	movs	r3, #0
 8011050:	73fb      	strb	r3, [r7, #15]
 8011052:	e00d      	b.n	8011070 <USER_SPI_initialize+0x108>
 8011054:	7bfc      	ldrb	r4, [r7, #15]
 8011056:	20ff      	movs	r0, #255	; 0xff
 8011058:	f7ff fe20 	bl	8010c9c <xchg_spi>
 801105c:	4603      	mov	r3, r0
 801105e:	461a      	mov	r2, r3
 8011060:	f107 0310 	add.w	r3, r7, #16
 8011064:	4423      	add	r3, r4
 8011066:	f803 2c08 	strb.w	r2, [r3, #-8]
 801106a:	7bfb      	ldrb	r3, [r7, #15]
 801106c:	3301      	adds	r3, #1
 801106e:	73fb      	strb	r3, [r7, #15]
 8011070:	7bfb      	ldrb	r3, [r7, #15]
 8011072:	2b03      	cmp	r3, #3
 8011074:	d9ee      	bls.n	8011054 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8011076:	7a3b      	ldrb	r3, [r7, #8]
 8011078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801107c:	2b00      	cmp	r3, #0
 801107e:	d001      	beq.n	8011084 <USER_SPI_initialize+0x11c>
 8011080:	230c      	movs	r3, #12
 8011082:	e000      	b.n	8011086 <USER_SPI_initialize+0x11e>
 8011084:	2304      	movs	r3, #4
 8011086:	737b      	strb	r3, [r7, #13]
 8011088:	e02c      	b.n	80110e4 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 801108a:	2100      	movs	r1, #0
 801108c:	20a9      	movs	r0, #169	; 0xa9
 801108e:	f7ff fefc 	bl	8010e8a <send_cmd>
 8011092:	4603      	mov	r3, r0
 8011094:	2b01      	cmp	r3, #1
 8011096:	d804      	bhi.n	80110a2 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8011098:	2302      	movs	r3, #2
 801109a:	737b      	strb	r3, [r7, #13]
 801109c:	23a9      	movs	r3, #169	; 0xa9
 801109e:	73bb      	strb	r3, [r7, #14]
 80110a0:	e003      	b.n	80110aa <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80110a2:	2301      	movs	r3, #1
 80110a4:	737b      	strb	r3, [r7, #13]
 80110a6:	2301      	movs	r3, #1
 80110a8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80110aa:	bf00      	nop
 80110ac:	f7ff fde0 	bl	8010c70 <SPI_Timer_Status>
 80110b0:	4603      	mov	r3, r0
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d007      	beq.n	80110c6 <USER_SPI_initialize+0x15e>
 80110b6:	7bbb      	ldrb	r3, [r7, #14]
 80110b8:	2100      	movs	r1, #0
 80110ba:	4618      	mov	r0, r3
 80110bc:	f7ff fee5 	bl	8010e8a <send_cmd>
 80110c0:	4603      	mov	r3, r0
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d1f2      	bne.n	80110ac <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80110c6:	f7ff fdd3 	bl	8010c70 <SPI_Timer_Status>
 80110ca:	4603      	mov	r3, r0
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d007      	beq.n	80110e0 <USER_SPI_initialize+0x178>
 80110d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80110d4:	2010      	movs	r0, #16
 80110d6:	f7ff fed8 	bl	8010e8a <send_cmd>
 80110da:	4603      	mov	r3, r0
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d001      	beq.n	80110e4 <USER_SPI_initialize+0x17c>
				ty = 0;
 80110e0:	2300      	movs	r3, #0
 80110e2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80110e4:	4a14      	ldr	r2, [pc, #80]	; (8011138 <USER_SPI_initialize+0x1d0>)
 80110e6:	7b7b      	ldrb	r3, [r7, #13]
 80110e8:	7013      	strb	r3, [r2, #0]
	despiselect();
 80110ea:	f7ff fe47 	bl	8010d7c <despiselect>

	if (ty) {			/* OK */
 80110ee:	7b7b      	ldrb	r3, [r7, #13]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d012      	beq.n	801111a <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 80110f4:	4b0f      	ldr	r3, [pc, #60]	; (8011134 <USER_SPI_initialize+0x1cc>)
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80110fe:	4b0d      	ldr	r3, [pc, #52]	; (8011134 <USER_SPI_initialize+0x1cc>)
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	f042 0218 	orr.w	r2, r2, #24
 8011106:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8011108:	4b09      	ldr	r3, [pc, #36]	; (8011130 <USER_SPI_initialize+0x1c8>)
 801110a:	781b      	ldrb	r3, [r3, #0]
 801110c:	b2db      	uxtb	r3, r3
 801110e:	f023 0301 	bic.w	r3, r3, #1
 8011112:	b2da      	uxtb	r2, r3
 8011114:	4b06      	ldr	r3, [pc, #24]	; (8011130 <USER_SPI_initialize+0x1c8>)
 8011116:	701a      	strb	r2, [r3, #0]
 8011118:	e002      	b.n	8011120 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 801111a:	4b05      	ldr	r3, [pc, #20]	; (8011130 <USER_SPI_initialize+0x1c8>)
 801111c:	2201      	movs	r2, #1
 801111e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8011120:	4b03      	ldr	r3, [pc, #12]	; (8011130 <USER_SPI_initialize+0x1c8>)
 8011122:	781b      	ldrb	r3, [r3, #0]
 8011124:	b2db      	uxtb	r3, r3
}
 8011126:	4618      	mov	r0, r3
 8011128:	3714      	adds	r7, #20
 801112a:	46bd      	mov	sp, r7
 801112c:	bd90      	pop	{r4, r7, pc}
 801112e:	bf00      	nop
 8011130:	20000078 	.word	0x20000078
 8011134:	20005fd0 	.word	0x20005fd0
 8011138:	20000830 	.word	0x20000830

0801113c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 801113c:	b480      	push	{r7}
 801113e:	b083      	sub	sp, #12
 8011140:	af00      	add	r7, sp, #0
 8011142:	4603      	mov	r3, r0
 8011144:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8011146:	79fb      	ldrb	r3, [r7, #7]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d001      	beq.n	8011150 <USER_SPI_status+0x14>
 801114c:	2301      	movs	r3, #1
 801114e:	e002      	b.n	8011156 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8011150:	4b04      	ldr	r3, [pc, #16]	; (8011164 <USER_SPI_status+0x28>)
 8011152:	781b      	ldrb	r3, [r3, #0]
 8011154:	b2db      	uxtb	r3, r3
}
 8011156:	4618      	mov	r0, r3
 8011158:	370c      	adds	r7, #12
 801115a:	46bd      	mov	sp, r7
 801115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011160:	4770      	bx	lr
 8011162:	bf00      	nop
 8011164:	20000078 	.word	0x20000078

08011168 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b084      	sub	sp, #16
 801116c:	af00      	add	r7, sp, #0
 801116e:	60b9      	str	r1, [r7, #8]
 8011170:	607a      	str	r2, [r7, #4]
 8011172:	603b      	str	r3, [r7, #0]
 8011174:	4603      	mov	r3, r0
 8011176:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8011178:	7bfb      	ldrb	r3, [r7, #15]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d102      	bne.n	8011184 <USER_SPI_read+0x1c>
 801117e:	683b      	ldr	r3, [r7, #0]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d101      	bne.n	8011188 <USER_SPI_read+0x20>
 8011184:	2304      	movs	r3, #4
 8011186:	e04d      	b.n	8011224 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8011188:	4b28      	ldr	r3, [pc, #160]	; (801122c <USER_SPI_read+0xc4>)
 801118a:	781b      	ldrb	r3, [r3, #0]
 801118c:	b2db      	uxtb	r3, r3
 801118e:	f003 0301 	and.w	r3, r3, #1
 8011192:	2b00      	cmp	r3, #0
 8011194:	d001      	beq.n	801119a <USER_SPI_read+0x32>
 8011196:	2303      	movs	r3, #3
 8011198:	e044      	b.n	8011224 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 801119a:	4b25      	ldr	r3, [pc, #148]	; (8011230 <USER_SPI_read+0xc8>)
 801119c:	781b      	ldrb	r3, [r3, #0]
 801119e:	f003 0308 	and.w	r3, r3, #8
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d102      	bne.n	80111ac <USER_SPI_read+0x44>
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	025b      	lsls	r3, r3, #9
 80111aa:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80111ac:	683b      	ldr	r3, [r7, #0]
 80111ae:	2b01      	cmp	r3, #1
 80111b0:	d111      	bne.n	80111d6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80111b2:	6879      	ldr	r1, [r7, #4]
 80111b4:	2011      	movs	r0, #17
 80111b6:	f7ff fe68 	bl	8010e8a <send_cmd>
 80111ba:	4603      	mov	r3, r0
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d129      	bne.n	8011214 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80111c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80111c4:	68b8      	ldr	r0, [r7, #8]
 80111c6:	f7ff fe05 	bl	8010dd4 <rcvr_datablock>
 80111ca:	4603      	mov	r3, r0
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d021      	beq.n	8011214 <USER_SPI_read+0xac>
			count = 0;
 80111d0:	2300      	movs	r3, #0
 80111d2:	603b      	str	r3, [r7, #0]
 80111d4:	e01e      	b.n	8011214 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80111d6:	6879      	ldr	r1, [r7, #4]
 80111d8:	2012      	movs	r0, #18
 80111da:	f7ff fe56 	bl	8010e8a <send_cmd>
 80111de:	4603      	mov	r3, r0
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d117      	bne.n	8011214 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80111e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80111e8:	68b8      	ldr	r0, [r7, #8]
 80111ea:	f7ff fdf3 	bl	8010dd4 <rcvr_datablock>
 80111ee:	4603      	mov	r3, r0
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d00a      	beq.n	801120a <USER_SPI_read+0xa2>
				buff += 512;
 80111f4:	68bb      	ldr	r3, [r7, #8]
 80111f6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80111fa:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80111fc:	683b      	ldr	r3, [r7, #0]
 80111fe:	3b01      	subs	r3, #1
 8011200:	603b      	str	r3, [r7, #0]
 8011202:	683b      	ldr	r3, [r7, #0]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d1ed      	bne.n	80111e4 <USER_SPI_read+0x7c>
 8011208:	e000      	b.n	801120c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 801120a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 801120c:	2100      	movs	r1, #0
 801120e:	200c      	movs	r0, #12
 8011210:	f7ff fe3b 	bl	8010e8a <send_cmd>
		}
	}
	despiselect();
 8011214:	f7ff fdb2 	bl	8010d7c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8011218:	683b      	ldr	r3, [r7, #0]
 801121a:	2b00      	cmp	r3, #0
 801121c:	bf14      	ite	ne
 801121e:	2301      	movne	r3, #1
 8011220:	2300      	moveq	r3, #0
 8011222:	b2db      	uxtb	r3, r3
}
 8011224:	4618      	mov	r0, r3
 8011226:	3710      	adds	r7, #16
 8011228:	46bd      	mov	sp, r7
 801122a:	bd80      	pop	{r7, pc}
 801122c:	20000078 	.word	0x20000078
 8011230:	20000830 	.word	0x20000830

08011234 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8011234:	b580      	push	{r7, lr}
 8011236:	b084      	sub	sp, #16
 8011238:	af00      	add	r7, sp, #0
 801123a:	60b9      	str	r1, [r7, #8]
 801123c:	607a      	str	r2, [r7, #4]
 801123e:	603b      	str	r3, [r7, #0]
 8011240:	4603      	mov	r3, r0
 8011242:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8011244:	7bfb      	ldrb	r3, [r7, #15]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d102      	bne.n	8011250 <USER_SPI_write+0x1c>
 801124a:	683b      	ldr	r3, [r7, #0]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d101      	bne.n	8011254 <USER_SPI_write+0x20>
 8011250:	2304      	movs	r3, #4
 8011252:	e063      	b.n	801131c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8011254:	4b33      	ldr	r3, [pc, #204]	; (8011324 <USER_SPI_write+0xf0>)
 8011256:	781b      	ldrb	r3, [r3, #0]
 8011258:	b2db      	uxtb	r3, r3
 801125a:	f003 0301 	and.w	r3, r3, #1
 801125e:	2b00      	cmp	r3, #0
 8011260:	d001      	beq.n	8011266 <USER_SPI_write+0x32>
 8011262:	2303      	movs	r3, #3
 8011264:	e05a      	b.n	801131c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8011266:	4b2f      	ldr	r3, [pc, #188]	; (8011324 <USER_SPI_write+0xf0>)
 8011268:	781b      	ldrb	r3, [r3, #0]
 801126a:	b2db      	uxtb	r3, r3
 801126c:	f003 0304 	and.w	r3, r3, #4
 8011270:	2b00      	cmp	r3, #0
 8011272:	d001      	beq.n	8011278 <USER_SPI_write+0x44>
 8011274:	2302      	movs	r3, #2
 8011276:	e051      	b.n	801131c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8011278:	4b2b      	ldr	r3, [pc, #172]	; (8011328 <USER_SPI_write+0xf4>)
 801127a:	781b      	ldrb	r3, [r3, #0]
 801127c:	f003 0308 	and.w	r3, r3, #8
 8011280:	2b00      	cmp	r3, #0
 8011282:	d102      	bne.n	801128a <USER_SPI_write+0x56>
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	025b      	lsls	r3, r3, #9
 8011288:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 801128a:	683b      	ldr	r3, [r7, #0]
 801128c:	2b01      	cmp	r3, #1
 801128e:	d110      	bne.n	80112b2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8011290:	6879      	ldr	r1, [r7, #4]
 8011292:	2018      	movs	r0, #24
 8011294:	f7ff fdf9 	bl	8010e8a <send_cmd>
 8011298:	4603      	mov	r3, r0
 801129a:	2b00      	cmp	r3, #0
 801129c:	d136      	bne.n	801130c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 801129e:	21fe      	movs	r1, #254	; 0xfe
 80112a0:	68b8      	ldr	r0, [r7, #8]
 80112a2:	f7ff fdc0 	bl	8010e26 <xmit_datablock>
 80112a6:	4603      	mov	r3, r0
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d02f      	beq.n	801130c <USER_SPI_write+0xd8>
			count = 0;
 80112ac:	2300      	movs	r3, #0
 80112ae:	603b      	str	r3, [r7, #0]
 80112b0:	e02c      	b.n	801130c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80112b2:	4b1d      	ldr	r3, [pc, #116]	; (8011328 <USER_SPI_write+0xf4>)
 80112b4:	781b      	ldrb	r3, [r3, #0]
 80112b6:	f003 0306 	and.w	r3, r3, #6
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d003      	beq.n	80112c6 <USER_SPI_write+0x92>
 80112be:	6839      	ldr	r1, [r7, #0]
 80112c0:	2097      	movs	r0, #151	; 0x97
 80112c2:	f7ff fde2 	bl	8010e8a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80112c6:	6879      	ldr	r1, [r7, #4]
 80112c8:	2019      	movs	r0, #25
 80112ca:	f7ff fdde 	bl	8010e8a <send_cmd>
 80112ce:	4603      	mov	r3, r0
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d11b      	bne.n	801130c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80112d4:	21fc      	movs	r1, #252	; 0xfc
 80112d6:	68b8      	ldr	r0, [r7, #8]
 80112d8:	f7ff fda5 	bl	8010e26 <xmit_datablock>
 80112dc:	4603      	mov	r3, r0
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d00a      	beq.n	80112f8 <USER_SPI_write+0xc4>
				buff += 512;
 80112e2:	68bb      	ldr	r3, [r7, #8]
 80112e4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80112e8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80112ea:	683b      	ldr	r3, [r7, #0]
 80112ec:	3b01      	subs	r3, #1
 80112ee:	603b      	str	r3, [r7, #0]
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d1ee      	bne.n	80112d4 <USER_SPI_write+0xa0>
 80112f6:	e000      	b.n	80112fa <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80112f8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80112fa:	21fd      	movs	r1, #253	; 0xfd
 80112fc:	2000      	movs	r0, #0
 80112fe:	f7ff fd92 	bl	8010e26 <xmit_datablock>
 8011302:	4603      	mov	r3, r0
 8011304:	2b00      	cmp	r3, #0
 8011306:	d101      	bne.n	801130c <USER_SPI_write+0xd8>
 8011308:	2301      	movs	r3, #1
 801130a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 801130c:	f7ff fd36 	bl	8010d7c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8011310:	683b      	ldr	r3, [r7, #0]
 8011312:	2b00      	cmp	r3, #0
 8011314:	bf14      	ite	ne
 8011316:	2301      	movne	r3, #1
 8011318:	2300      	moveq	r3, #0
 801131a:	b2db      	uxtb	r3, r3
}
 801131c:	4618      	mov	r0, r3
 801131e:	3710      	adds	r7, #16
 8011320:	46bd      	mov	sp, r7
 8011322:	bd80      	pop	{r7, pc}
 8011324:	20000078 	.word	0x20000078
 8011328:	20000830 	.word	0x20000830

0801132c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 801132c:	b580      	push	{r7, lr}
 801132e:	b08c      	sub	sp, #48	; 0x30
 8011330:	af00      	add	r7, sp, #0
 8011332:	4603      	mov	r3, r0
 8011334:	603a      	str	r2, [r7, #0]
 8011336:	71fb      	strb	r3, [r7, #7]
 8011338:	460b      	mov	r3, r1
 801133a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 801133c:	79fb      	ldrb	r3, [r7, #7]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d001      	beq.n	8011346 <USER_SPI_ioctl+0x1a>
 8011342:	2304      	movs	r3, #4
 8011344:	e15a      	b.n	80115fc <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8011346:	4baf      	ldr	r3, [pc, #700]	; (8011604 <USER_SPI_ioctl+0x2d8>)
 8011348:	781b      	ldrb	r3, [r3, #0]
 801134a:	b2db      	uxtb	r3, r3
 801134c:	f003 0301 	and.w	r3, r3, #1
 8011350:	2b00      	cmp	r3, #0
 8011352:	d001      	beq.n	8011358 <USER_SPI_ioctl+0x2c>
 8011354:	2303      	movs	r3, #3
 8011356:	e151      	b.n	80115fc <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8011358:	2301      	movs	r3, #1
 801135a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 801135e:	79bb      	ldrb	r3, [r7, #6]
 8011360:	2b04      	cmp	r3, #4
 8011362:	f200 8136 	bhi.w	80115d2 <USER_SPI_ioctl+0x2a6>
 8011366:	a201      	add	r2, pc, #4	; (adr r2, 801136c <USER_SPI_ioctl+0x40>)
 8011368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801136c:	08011381 	.word	0x08011381
 8011370:	08011395 	.word	0x08011395
 8011374:	080115d3 	.word	0x080115d3
 8011378:	08011441 	.word	0x08011441
 801137c:	08011537 	.word	0x08011537
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8011380:	f7ff fd0c 	bl	8010d9c <spiselect>
 8011384:	4603      	mov	r3, r0
 8011386:	2b00      	cmp	r3, #0
 8011388:	f000 8127 	beq.w	80115da <USER_SPI_ioctl+0x2ae>
 801138c:	2300      	movs	r3, #0
 801138e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8011392:	e122      	b.n	80115da <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8011394:	2100      	movs	r1, #0
 8011396:	2009      	movs	r0, #9
 8011398:	f7ff fd77 	bl	8010e8a <send_cmd>
 801139c:	4603      	mov	r3, r0
 801139e:	2b00      	cmp	r3, #0
 80113a0:	f040 811d 	bne.w	80115de <USER_SPI_ioctl+0x2b2>
 80113a4:	f107 030c 	add.w	r3, r7, #12
 80113a8:	2110      	movs	r1, #16
 80113aa:	4618      	mov	r0, r3
 80113ac:	f7ff fd12 	bl	8010dd4 <rcvr_datablock>
 80113b0:	4603      	mov	r3, r0
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	f000 8113 	beq.w	80115de <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80113b8:	7b3b      	ldrb	r3, [r7, #12]
 80113ba:	099b      	lsrs	r3, r3, #6
 80113bc:	b2db      	uxtb	r3, r3
 80113be:	2b01      	cmp	r3, #1
 80113c0:	d111      	bne.n	80113e6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80113c2:	7d7b      	ldrb	r3, [r7, #21]
 80113c4:	461a      	mov	r2, r3
 80113c6:	7d3b      	ldrb	r3, [r7, #20]
 80113c8:	021b      	lsls	r3, r3, #8
 80113ca:	4413      	add	r3, r2
 80113cc:	461a      	mov	r2, r3
 80113ce:	7cfb      	ldrb	r3, [r7, #19]
 80113d0:	041b      	lsls	r3, r3, #16
 80113d2:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80113d6:	4413      	add	r3, r2
 80113d8:	3301      	adds	r3, #1
 80113da:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80113dc:	69fb      	ldr	r3, [r7, #28]
 80113de:	029a      	lsls	r2, r3, #10
 80113e0:	683b      	ldr	r3, [r7, #0]
 80113e2:	601a      	str	r2, [r3, #0]
 80113e4:	e028      	b.n	8011438 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80113e6:	7c7b      	ldrb	r3, [r7, #17]
 80113e8:	f003 030f 	and.w	r3, r3, #15
 80113ec:	b2da      	uxtb	r2, r3
 80113ee:	7dbb      	ldrb	r3, [r7, #22]
 80113f0:	09db      	lsrs	r3, r3, #7
 80113f2:	b2db      	uxtb	r3, r3
 80113f4:	4413      	add	r3, r2
 80113f6:	b2da      	uxtb	r2, r3
 80113f8:	7d7b      	ldrb	r3, [r7, #21]
 80113fa:	005b      	lsls	r3, r3, #1
 80113fc:	b2db      	uxtb	r3, r3
 80113fe:	f003 0306 	and.w	r3, r3, #6
 8011402:	b2db      	uxtb	r3, r3
 8011404:	4413      	add	r3, r2
 8011406:	b2db      	uxtb	r3, r3
 8011408:	3302      	adds	r3, #2
 801140a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 801140e:	7d3b      	ldrb	r3, [r7, #20]
 8011410:	099b      	lsrs	r3, r3, #6
 8011412:	b2db      	uxtb	r3, r3
 8011414:	461a      	mov	r2, r3
 8011416:	7cfb      	ldrb	r3, [r7, #19]
 8011418:	009b      	lsls	r3, r3, #2
 801141a:	441a      	add	r2, r3
 801141c:	7cbb      	ldrb	r3, [r7, #18]
 801141e:	029b      	lsls	r3, r3, #10
 8011420:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8011424:	4413      	add	r3, r2
 8011426:	3301      	adds	r3, #1
 8011428:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 801142a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801142e:	3b09      	subs	r3, #9
 8011430:	69fa      	ldr	r2, [r7, #28]
 8011432:	409a      	lsls	r2, r3
 8011434:	683b      	ldr	r3, [r7, #0]
 8011436:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8011438:	2300      	movs	r3, #0
 801143a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 801143e:	e0ce      	b.n	80115de <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8011440:	4b71      	ldr	r3, [pc, #452]	; (8011608 <USER_SPI_ioctl+0x2dc>)
 8011442:	781b      	ldrb	r3, [r3, #0]
 8011444:	f003 0304 	and.w	r3, r3, #4
 8011448:	2b00      	cmp	r3, #0
 801144a:	d031      	beq.n	80114b0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 801144c:	2100      	movs	r1, #0
 801144e:	208d      	movs	r0, #141	; 0x8d
 8011450:	f7ff fd1b 	bl	8010e8a <send_cmd>
 8011454:	4603      	mov	r3, r0
 8011456:	2b00      	cmp	r3, #0
 8011458:	f040 80c3 	bne.w	80115e2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 801145c:	20ff      	movs	r0, #255	; 0xff
 801145e:	f7ff fc1d 	bl	8010c9c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8011462:	f107 030c 	add.w	r3, r7, #12
 8011466:	2110      	movs	r1, #16
 8011468:	4618      	mov	r0, r3
 801146a:	f7ff fcb3 	bl	8010dd4 <rcvr_datablock>
 801146e:	4603      	mov	r3, r0
 8011470:	2b00      	cmp	r3, #0
 8011472:	f000 80b6 	beq.w	80115e2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8011476:	2330      	movs	r3, #48	; 0x30
 8011478:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 801147c:	e007      	b.n	801148e <USER_SPI_ioctl+0x162>
 801147e:	20ff      	movs	r0, #255	; 0xff
 8011480:	f7ff fc0c 	bl	8010c9c <xchg_spi>
 8011484:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8011488:	3b01      	subs	r3, #1
 801148a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 801148e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8011492:	2b00      	cmp	r3, #0
 8011494:	d1f3      	bne.n	801147e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8011496:	7dbb      	ldrb	r3, [r7, #22]
 8011498:	091b      	lsrs	r3, r3, #4
 801149a:	b2db      	uxtb	r3, r3
 801149c:	461a      	mov	r2, r3
 801149e:	2310      	movs	r3, #16
 80114a0:	fa03 f202 	lsl.w	r2, r3, r2
 80114a4:	683b      	ldr	r3, [r7, #0]
 80114a6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80114a8:	2300      	movs	r3, #0
 80114aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80114ae:	e098      	b.n	80115e2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80114b0:	2100      	movs	r1, #0
 80114b2:	2009      	movs	r0, #9
 80114b4:	f7ff fce9 	bl	8010e8a <send_cmd>
 80114b8:	4603      	mov	r3, r0
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	f040 8091 	bne.w	80115e2 <USER_SPI_ioctl+0x2b6>
 80114c0:	f107 030c 	add.w	r3, r7, #12
 80114c4:	2110      	movs	r1, #16
 80114c6:	4618      	mov	r0, r3
 80114c8:	f7ff fc84 	bl	8010dd4 <rcvr_datablock>
 80114cc:	4603      	mov	r3, r0
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	f000 8087 	beq.w	80115e2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80114d4:	4b4c      	ldr	r3, [pc, #304]	; (8011608 <USER_SPI_ioctl+0x2dc>)
 80114d6:	781b      	ldrb	r3, [r3, #0]
 80114d8:	f003 0302 	and.w	r3, r3, #2
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d012      	beq.n	8011506 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80114e0:	7dbb      	ldrb	r3, [r7, #22]
 80114e2:	005b      	lsls	r3, r3, #1
 80114e4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80114e8:	7dfa      	ldrb	r2, [r7, #23]
 80114ea:	09d2      	lsrs	r2, r2, #7
 80114ec:	b2d2      	uxtb	r2, r2
 80114ee:	4413      	add	r3, r2
 80114f0:	1c5a      	adds	r2, r3, #1
 80114f2:	7e7b      	ldrb	r3, [r7, #25]
 80114f4:	099b      	lsrs	r3, r3, #6
 80114f6:	b2db      	uxtb	r3, r3
 80114f8:	3b01      	subs	r3, #1
 80114fa:	fa02 f303 	lsl.w	r3, r2, r3
 80114fe:	461a      	mov	r2, r3
 8011500:	683b      	ldr	r3, [r7, #0]
 8011502:	601a      	str	r2, [r3, #0]
 8011504:	e013      	b.n	801152e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8011506:	7dbb      	ldrb	r3, [r7, #22]
 8011508:	109b      	asrs	r3, r3, #2
 801150a:	b29b      	uxth	r3, r3
 801150c:	f003 031f 	and.w	r3, r3, #31
 8011510:	3301      	adds	r3, #1
 8011512:	7dfa      	ldrb	r2, [r7, #23]
 8011514:	00d2      	lsls	r2, r2, #3
 8011516:	f002 0218 	and.w	r2, r2, #24
 801151a:	7df9      	ldrb	r1, [r7, #23]
 801151c:	0949      	lsrs	r1, r1, #5
 801151e:	b2c9      	uxtb	r1, r1
 8011520:	440a      	add	r2, r1
 8011522:	3201      	adds	r2, #1
 8011524:	fb02 f303 	mul.w	r3, r2, r3
 8011528:	461a      	mov	r2, r3
 801152a:	683b      	ldr	r3, [r7, #0]
 801152c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 801152e:	2300      	movs	r3, #0
 8011530:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8011534:	e055      	b.n	80115e2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8011536:	4b34      	ldr	r3, [pc, #208]	; (8011608 <USER_SPI_ioctl+0x2dc>)
 8011538:	781b      	ldrb	r3, [r3, #0]
 801153a:	f003 0306 	and.w	r3, r3, #6
 801153e:	2b00      	cmp	r3, #0
 8011540:	d051      	beq.n	80115e6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8011542:	f107 020c 	add.w	r2, r7, #12
 8011546:	79fb      	ldrb	r3, [r7, #7]
 8011548:	210b      	movs	r1, #11
 801154a:	4618      	mov	r0, r3
 801154c:	f7ff feee 	bl	801132c <USER_SPI_ioctl>
 8011550:	4603      	mov	r3, r0
 8011552:	2b00      	cmp	r3, #0
 8011554:	d149      	bne.n	80115ea <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8011556:	7b3b      	ldrb	r3, [r7, #12]
 8011558:	099b      	lsrs	r3, r3, #6
 801155a:	b2db      	uxtb	r3, r3
 801155c:	2b00      	cmp	r3, #0
 801155e:	d104      	bne.n	801156a <USER_SPI_ioctl+0x23e>
 8011560:	7dbb      	ldrb	r3, [r7, #22]
 8011562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011566:	2b00      	cmp	r3, #0
 8011568:	d041      	beq.n	80115ee <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 801156a:	683b      	ldr	r3, [r7, #0]
 801156c:	623b      	str	r3, [r7, #32]
 801156e:	6a3b      	ldr	r3, [r7, #32]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	62bb      	str	r3, [r7, #40]	; 0x28
 8011574:	6a3b      	ldr	r3, [r7, #32]
 8011576:	685b      	ldr	r3, [r3, #4]
 8011578:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 801157a:	4b23      	ldr	r3, [pc, #140]	; (8011608 <USER_SPI_ioctl+0x2dc>)
 801157c:	781b      	ldrb	r3, [r3, #0]
 801157e:	f003 0308 	and.w	r3, r3, #8
 8011582:	2b00      	cmp	r3, #0
 8011584:	d105      	bne.n	8011592 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8011586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011588:	025b      	lsls	r3, r3, #9
 801158a:	62bb      	str	r3, [r7, #40]	; 0x28
 801158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801158e:	025b      	lsls	r3, r3, #9
 8011590:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8011592:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011594:	2020      	movs	r0, #32
 8011596:	f7ff fc78 	bl	8010e8a <send_cmd>
 801159a:	4603      	mov	r3, r0
 801159c:	2b00      	cmp	r3, #0
 801159e:	d128      	bne.n	80115f2 <USER_SPI_ioctl+0x2c6>
 80115a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80115a2:	2021      	movs	r0, #33	; 0x21
 80115a4:	f7ff fc71 	bl	8010e8a <send_cmd>
 80115a8:	4603      	mov	r3, r0
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d121      	bne.n	80115f2 <USER_SPI_ioctl+0x2c6>
 80115ae:	2100      	movs	r1, #0
 80115b0:	2026      	movs	r0, #38	; 0x26
 80115b2:	f7ff fc6a 	bl	8010e8a <send_cmd>
 80115b6:	4603      	mov	r3, r0
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d11a      	bne.n	80115f2 <USER_SPI_ioctl+0x2c6>
 80115bc:	f247 5030 	movw	r0, #30000	; 0x7530
 80115c0:	f7ff fbb9 	bl	8010d36 <wait_ready>
 80115c4:	4603      	mov	r3, r0
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d013      	beq.n	80115f2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80115ca:	2300      	movs	r3, #0
 80115cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80115d0:	e00f      	b.n	80115f2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80115d2:	2304      	movs	r3, #4
 80115d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80115d8:	e00c      	b.n	80115f4 <USER_SPI_ioctl+0x2c8>
		break;
 80115da:	bf00      	nop
 80115dc:	e00a      	b.n	80115f4 <USER_SPI_ioctl+0x2c8>
		break;
 80115de:	bf00      	nop
 80115e0:	e008      	b.n	80115f4 <USER_SPI_ioctl+0x2c8>
		break;
 80115e2:	bf00      	nop
 80115e4:	e006      	b.n	80115f4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80115e6:	bf00      	nop
 80115e8:	e004      	b.n	80115f4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80115ea:	bf00      	nop
 80115ec:	e002      	b.n	80115f4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80115ee:	bf00      	nop
 80115f0:	e000      	b.n	80115f4 <USER_SPI_ioctl+0x2c8>
		break;
 80115f2:	bf00      	nop
	}

	despiselect();
 80115f4:	f7ff fbc2 	bl	8010d7c <despiselect>

	return res;
 80115f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80115fc:	4618      	mov	r0, r3
 80115fe:	3730      	adds	r7, #48	; 0x30
 8011600:	46bd      	mov	sp, r7
 8011602:	bd80      	pop	{r7, pc}
 8011604:	20000078 	.word	0x20000078
 8011608:	20000830 	.word	0x20000830

0801160c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b084      	sub	sp, #16
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
 8011614:	460b      	mov	r3, r1
 8011616:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011618:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801161c:	f008 fcc4 	bl	8019fa8 <USBD_static_malloc>
 8011620:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d105      	bne.n	8011634 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	2200      	movs	r2, #0
 801162c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8011630:	2302      	movs	r3, #2
 8011632:	e066      	b.n	8011702 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	68fa      	ldr	r2, [r7, #12]
 8011638:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	7c1b      	ldrb	r3, [r3, #16]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d119      	bne.n	8011678 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011644:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011648:	2202      	movs	r2, #2
 801164a:	2181      	movs	r1, #129	; 0x81
 801164c:	6878      	ldr	r0, [r7, #4]
 801164e:	f008 fb88 	bl	8019d62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	2201      	movs	r2, #1
 8011656:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011658:	f44f 7300 	mov.w	r3, #512	; 0x200
 801165c:	2202      	movs	r2, #2
 801165e:	2101      	movs	r1, #1
 8011660:	6878      	ldr	r0, [r7, #4]
 8011662:	f008 fb7e 	bl	8019d62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	2201      	movs	r2, #1
 801166a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	2210      	movs	r2, #16
 8011672:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8011676:	e016      	b.n	80116a6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011678:	2340      	movs	r3, #64	; 0x40
 801167a:	2202      	movs	r2, #2
 801167c:	2181      	movs	r1, #129	; 0x81
 801167e:	6878      	ldr	r0, [r7, #4]
 8011680:	f008 fb6f 	bl	8019d62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	2201      	movs	r2, #1
 8011688:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801168a:	2340      	movs	r3, #64	; 0x40
 801168c:	2202      	movs	r2, #2
 801168e:	2101      	movs	r1, #1
 8011690:	6878      	ldr	r0, [r7, #4]
 8011692:	f008 fb66 	bl	8019d62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	2201      	movs	r2, #1
 801169a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	2210      	movs	r2, #16
 80116a2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80116a6:	2308      	movs	r3, #8
 80116a8:	2203      	movs	r2, #3
 80116aa:	2182      	movs	r1, #130	; 0x82
 80116ac:	6878      	ldr	r0, [r7, #4]
 80116ae:	f008 fb58 	bl	8019d62 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	2201      	movs	r2, #1
 80116b6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	2200      	movs	r2, #0
 80116c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	2200      	movs	r2, #0
 80116d0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	7c1b      	ldrb	r3, [r3, #16]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d109      	bne.n	80116f0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80116e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80116e6:	2101      	movs	r1, #1
 80116e8:	6878      	ldr	r0, [r7, #4]
 80116ea:	f008 fc29 	bl	8019f40 <USBD_LL_PrepareReceive>
 80116ee:	e007      	b.n	8011700 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80116f6:	2340      	movs	r3, #64	; 0x40
 80116f8:	2101      	movs	r1, #1
 80116fa:	6878      	ldr	r0, [r7, #4]
 80116fc:	f008 fc20 	bl	8019f40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011700:	2300      	movs	r3, #0
}
 8011702:	4618      	mov	r0, r3
 8011704:	3710      	adds	r7, #16
 8011706:	46bd      	mov	sp, r7
 8011708:	bd80      	pop	{r7, pc}

0801170a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801170a:	b580      	push	{r7, lr}
 801170c:	b082      	sub	sp, #8
 801170e:	af00      	add	r7, sp, #0
 8011710:	6078      	str	r0, [r7, #4]
 8011712:	460b      	mov	r3, r1
 8011714:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8011716:	2181      	movs	r1, #129	; 0x81
 8011718:	6878      	ldr	r0, [r7, #4]
 801171a:	f008 fb48 	bl	8019dae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	2200      	movs	r2, #0
 8011722:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8011724:	2101      	movs	r1, #1
 8011726:	6878      	ldr	r0, [r7, #4]
 8011728:	f008 fb41 	bl	8019dae <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	2200      	movs	r2, #0
 8011730:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8011734:	2182      	movs	r1, #130	; 0x82
 8011736:	6878      	ldr	r0, [r7, #4]
 8011738:	f008 fb39 	bl	8019dae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	2200      	movs	r2, #0
 8011740:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	2200      	movs	r2, #0
 8011748:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011752:	2b00      	cmp	r3, #0
 8011754:	d00e      	beq.n	8011774 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801175c:	685b      	ldr	r3, [r3, #4]
 801175e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011766:	4618      	mov	r0, r3
 8011768:	f008 fc2c 	bl	8019fc4 <USBD_static_free>
    pdev->pClassData = NULL;
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	2200      	movs	r2, #0
 8011770:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8011774:	2300      	movs	r3, #0
}
 8011776:	4618      	mov	r0, r3
 8011778:	3708      	adds	r7, #8
 801177a:	46bd      	mov	sp, r7
 801177c:	bd80      	pop	{r7, pc}
	...

08011780 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011780:	b580      	push	{r7, lr}
 8011782:	b086      	sub	sp, #24
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
 8011788:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011790:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8011792:	2300      	movs	r3, #0
 8011794:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8011796:	2300      	movs	r3, #0
 8011798:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801179a:	2300      	movs	r3, #0
 801179c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801179e:	693b      	ldr	r3, [r7, #16]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d101      	bne.n	80117a8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80117a4:	2303      	movs	r3, #3
 80117a6:	e0af      	b.n	8011908 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80117a8:	683b      	ldr	r3, [r7, #0]
 80117aa:	781b      	ldrb	r3, [r3, #0]
 80117ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d03f      	beq.n	8011834 <USBD_CDC_Setup+0xb4>
 80117b4:	2b20      	cmp	r3, #32
 80117b6:	f040 809f 	bne.w	80118f8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80117ba:	683b      	ldr	r3, [r7, #0]
 80117bc:	88db      	ldrh	r3, [r3, #6]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d02e      	beq.n	8011820 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80117c2:	683b      	ldr	r3, [r7, #0]
 80117c4:	781b      	ldrb	r3, [r3, #0]
 80117c6:	b25b      	sxtb	r3, r3
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	da16      	bge.n	80117fa <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80117d2:	689b      	ldr	r3, [r3, #8]
 80117d4:	683a      	ldr	r2, [r7, #0]
 80117d6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80117d8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80117da:	683a      	ldr	r2, [r7, #0]
 80117dc:	88d2      	ldrh	r2, [r2, #6]
 80117de:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80117e0:	683b      	ldr	r3, [r7, #0]
 80117e2:	88db      	ldrh	r3, [r3, #6]
 80117e4:	2b07      	cmp	r3, #7
 80117e6:	bf28      	it	cs
 80117e8:	2307      	movcs	r3, #7
 80117ea:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80117ec:	693b      	ldr	r3, [r7, #16]
 80117ee:	89fa      	ldrh	r2, [r7, #14]
 80117f0:	4619      	mov	r1, r3
 80117f2:	6878      	ldr	r0, [r7, #4]
 80117f4:	f001 fae9 	bl	8012dca <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80117f8:	e085      	b.n	8011906 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80117fa:	683b      	ldr	r3, [r7, #0]
 80117fc:	785a      	ldrb	r2, [r3, #1]
 80117fe:	693b      	ldr	r3, [r7, #16]
 8011800:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8011804:	683b      	ldr	r3, [r7, #0]
 8011806:	88db      	ldrh	r3, [r3, #6]
 8011808:	b2da      	uxtb	r2, r3
 801180a:	693b      	ldr	r3, [r7, #16]
 801180c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8011810:	6939      	ldr	r1, [r7, #16]
 8011812:	683b      	ldr	r3, [r7, #0]
 8011814:	88db      	ldrh	r3, [r3, #6]
 8011816:	461a      	mov	r2, r3
 8011818:	6878      	ldr	r0, [r7, #4]
 801181a:	f001 fb02 	bl	8012e22 <USBD_CtlPrepareRx>
      break;
 801181e:	e072      	b.n	8011906 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011826:	689b      	ldr	r3, [r3, #8]
 8011828:	683a      	ldr	r2, [r7, #0]
 801182a:	7850      	ldrb	r0, [r2, #1]
 801182c:	2200      	movs	r2, #0
 801182e:	6839      	ldr	r1, [r7, #0]
 8011830:	4798      	blx	r3
      break;
 8011832:	e068      	b.n	8011906 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011834:	683b      	ldr	r3, [r7, #0]
 8011836:	785b      	ldrb	r3, [r3, #1]
 8011838:	2b0b      	cmp	r3, #11
 801183a:	d852      	bhi.n	80118e2 <USBD_CDC_Setup+0x162>
 801183c:	a201      	add	r2, pc, #4	; (adr r2, 8011844 <USBD_CDC_Setup+0xc4>)
 801183e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011842:	bf00      	nop
 8011844:	08011875 	.word	0x08011875
 8011848:	080118f1 	.word	0x080118f1
 801184c:	080118e3 	.word	0x080118e3
 8011850:	080118e3 	.word	0x080118e3
 8011854:	080118e3 	.word	0x080118e3
 8011858:	080118e3 	.word	0x080118e3
 801185c:	080118e3 	.word	0x080118e3
 8011860:	080118e3 	.word	0x080118e3
 8011864:	080118e3 	.word	0x080118e3
 8011868:	080118e3 	.word	0x080118e3
 801186c:	0801189f 	.word	0x0801189f
 8011870:	080118c9 	.word	0x080118c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801187a:	b2db      	uxtb	r3, r3
 801187c:	2b03      	cmp	r3, #3
 801187e:	d107      	bne.n	8011890 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011880:	f107 030a 	add.w	r3, r7, #10
 8011884:	2202      	movs	r2, #2
 8011886:	4619      	mov	r1, r3
 8011888:	6878      	ldr	r0, [r7, #4]
 801188a:	f001 fa9e 	bl	8012dca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801188e:	e032      	b.n	80118f6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8011890:	6839      	ldr	r1, [r7, #0]
 8011892:	6878      	ldr	r0, [r7, #4]
 8011894:	f001 fa28 	bl	8012ce8 <USBD_CtlError>
            ret = USBD_FAIL;
 8011898:	2303      	movs	r3, #3
 801189a:	75fb      	strb	r3, [r7, #23]
          break;
 801189c:	e02b      	b.n	80118f6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80118a4:	b2db      	uxtb	r3, r3
 80118a6:	2b03      	cmp	r3, #3
 80118a8:	d107      	bne.n	80118ba <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80118aa:	f107 030d 	add.w	r3, r7, #13
 80118ae:	2201      	movs	r2, #1
 80118b0:	4619      	mov	r1, r3
 80118b2:	6878      	ldr	r0, [r7, #4]
 80118b4:	f001 fa89 	bl	8012dca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80118b8:	e01d      	b.n	80118f6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80118ba:	6839      	ldr	r1, [r7, #0]
 80118bc:	6878      	ldr	r0, [r7, #4]
 80118be:	f001 fa13 	bl	8012ce8 <USBD_CtlError>
            ret = USBD_FAIL;
 80118c2:	2303      	movs	r3, #3
 80118c4:	75fb      	strb	r3, [r7, #23]
          break;
 80118c6:	e016      	b.n	80118f6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80118ce:	b2db      	uxtb	r3, r3
 80118d0:	2b03      	cmp	r3, #3
 80118d2:	d00f      	beq.n	80118f4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80118d4:	6839      	ldr	r1, [r7, #0]
 80118d6:	6878      	ldr	r0, [r7, #4]
 80118d8:	f001 fa06 	bl	8012ce8 <USBD_CtlError>
            ret = USBD_FAIL;
 80118dc:	2303      	movs	r3, #3
 80118de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80118e0:	e008      	b.n	80118f4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80118e2:	6839      	ldr	r1, [r7, #0]
 80118e4:	6878      	ldr	r0, [r7, #4]
 80118e6:	f001 f9ff 	bl	8012ce8 <USBD_CtlError>
          ret = USBD_FAIL;
 80118ea:	2303      	movs	r3, #3
 80118ec:	75fb      	strb	r3, [r7, #23]
          break;
 80118ee:	e002      	b.n	80118f6 <USBD_CDC_Setup+0x176>
          break;
 80118f0:	bf00      	nop
 80118f2:	e008      	b.n	8011906 <USBD_CDC_Setup+0x186>
          break;
 80118f4:	bf00      	nop
      }
      break;
 80118f6:	e006      	b.n	8011906 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80118f8:	6839      	ldr	r1, [r7, #0]
 80118fa:	6878      	ldr	r0, [r7, #4]
 80118fc:	f001 f9f4 	bl	8012ce8 <USBD_CtlError>
      ret = USBD_FAIL;
 8011900:	2303      	movs	r3, #3
 8011902:	75fb      	strb	r3, [r7, #23]
      break;
 8011904:	bf00      	nop
  }

  return (uint8_t)ret;
 8011906:	7dfb      	ldrb	r3, [r7, #23]
}
 8011908:	4618      	mov	r0, r3
 801190a:	3718      	adds	r7, #24
 801190c:	46bd      	mov	sp, r7
 801190e:	bd80      	pop	{r7, pc}

08011910 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b084      	sub	sp, #16
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
 8011918:	460b      	mov	r3, r1
 801191a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011922:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801192a:	2b00      	cmp	r3, #0
 801192c:	d101      	bne.n	8011932 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801192e:	2303      	movs	r3, #3
 8011930:	e04f      	b.n	80119d2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011938:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801193a:	78fa      	ldrb	r2, [r7, #3]
 801193c:	6879      	ldr	r1, [r7, #4]
 801193e:	4613      	mov	r3, r2
 8011940:	009b      	lsls	r3, r3, #2
 8011942:	4413      	add	r3, r2
 8011944:	009b      	lsls	r3, r3, #2
 8011946:	440b      	add	r3, r1
 8011948:	3318      	adds	r3, #24
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d029      	beq.n	80119a4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8011950:	78fa      	ldrb	r2, [r7, #3]
 8011952:	6879      	ldr	r1, [r7, #4]
 8011954:	4613      	mov	r3, r2
 8011956:	009b      	lsls	r3, r3, #2
 8011958:	4413      	add	r3, r2
 801195a:	009b      	lsls	r3, r3, #2
 801195c:	440b      	add	r3, r1
 801195e:	3318      	adds	r3, #24
 8011960:	681a      	ldr	r2, [r3, #0]
 8011962:	78f9      	ldrb	r1, [r7, #3]
 8011964:	68f8      	ldr	r0, [r7, #12]
 8011966:	460b      	mov	r3, r1
 8011968:	00db      	lsls	r3, r3, #3
 801196a:	1a5b      	subs	r3, r3, r1
 801196c:	009b      	lsls	r3, r3, #2
 801196e:	4403      	add	r3, r0
 8011970:	3344      	adds	r3, #68	; 0x44
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	fbb2 f1f3 	udiv	r1, r2, r3
 8011978:	fb03 f301 	mul.w	r3, r3, r1
 801197c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801197e:	2b00      	cmp	r3, #0
 8011980:	d110      	bne.n	80119a4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8011982:	78fa      	ldrb	r2, [r7, #3]
 8011984:	6879      	ldr	r1, [r7, #4]
 8011986:	4613      	mov	r3, r2
 8011988:	009b      	lsls	r3, r3, #2
 801198a:	4413      	add	r3, r2
 801198c:	009b      	lsls	r3, r3, #2
 801198e:	440b      	add	r3, r1
 8011990:	3318      	adds	r3, #24
 8011992:	2200      	movs	r2, #0
 8011994:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011996:	78f9      	ldrb	r1, [r7, #3]
 8011998:	2300      	movs	r3, #0
 801199a:	2200      	movs	r2, #0
 801199c:	6878      	ldr	r0, [r7, #4]
 801199e:	f008 faae 	bl	8019efe <USBD_LL_Transmit>
 80119a2:	e015      	b.n	80119d0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80119a4:	68bb      	ldr	r3, [r7, #8]
 80119a6:	2200      	movs	r2, #0
 80119a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80119b2:	691b      	ldr	r3, [r3, #16]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d00b      	beq.n	80119d0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80119be:	691b      	ldr	r3, [r3, #16]
 80119c0:	68ba      	ldr	r2, [r7, #8]
 80119c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80119c6:	68ba      	ldr	r2, [r7, #8]
 80119c8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80119cc:	78fa      	ldrb	r2, [r7, #3]
 80119ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80119d0:	2300      	movs	r3, #0
}
 80119d2:	4618      	mov	r0, r3
 80119d4:	3710      	adds	r7, #16
 80119d6:	46bd      	mov	sp, r7
 80119d8:	bd80      	pop	{r7, pc}

080119da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80119da:	b580      	push	{r7, lr}
 80119dc:	b084      	sub	sp, #16
 80119de:	af00      	add	r7, sp, #0
 80119e0:	6078      	str	r0, [r7, #4]
 80119e2:	460b      	mov	r3, r1
 80119e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80119ec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d101      	bne.n	80119fc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80119f8:	2303      	movs	r3, #3
 80119fa:	e015      	b.n	8011a28 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80119fc:	78fb      	ldrb	r3, [r7, #3]
 80119fe:	4619      	mov	r1, r3
 8011a00:	6878      	ldr	r0, [r7, #4]
 8011a02:	f008 fabe 	bl	8019f82 <USBD_LL_GetRxDataSize>
 8011a06:	4602      	mov	r2, r0
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011a14:	68db      	ldr	r3, [r3, #12]
 8011a16:	68fa      	ldr	r2, [r7, #12]
 8011a18:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8011a1c:	68fa      	ldr	r2, [r7, #12]
 8011a1e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011a22:	4611      	mov	r1, r2
 8011a24:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011a26:	2300      	movs	r3, #0
}
 8011a28:	4618      	mov	r0, r3
 8011a2a:	3710      	adds	r7, #16
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	bd80      	pop	{r7, pc}

08011a30 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b084      	sub	sp, #16
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011a3e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d101      	bne.n	8011a4a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8011a46:	2303      	movs	r3, #3
 8011a48:	e01b      	b.n	8011a82 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d015      	beq.n	8011a80 <USBD_CDC_EP0_RxReady+0x50>
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011a5a:	2bff      	cmp	r3, #255	; 0xff
 8011a5c:	d010      	beq.n	8011a80 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011a64:	689b      	ldr	r3, [r3, #8]
 8011a66:	68fa      	ldr	r2, [r7, #12]
 8011a68:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8011a6c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8011a6e:	68fa      	ldr	r2, [r7, #12]
 8011a70:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011a74:	b292      	uxth	r2, r2
 8011a76:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	22ff      	movs	r2, #255	; 0xff
 8011a7c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8011a80:	2300      	movs	r3, #0
}
 8011a82:	4618      	mov	r0, r3
 8011a84:	3710      	adds	r7, #16
 8011a86:	46bd      	mov	sp, r7
 8011a88:	bd80      	pop	{r7, pc}
	...

08011a8c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011a8c:	b480      	push	{r7}
 8011a8e:	b083      	sub	sp, #12
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	2243      	movs	r2, #67	; 0x43
 8011a98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8011a9a:	4b03      	ldr	r3, [pc, #12]	; (8011aa8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	370c      	adds	r7, #12
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa6:	4770      	bx	lr
 8011aa8:	20000104 	.word	0x20000104

08011aac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011aac:	b480      	push	{r7}
 8011aae:	b083      	sub	sp, #12
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	2243      	movs	r2, #67	; 0x43
 8011ab8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8011aba:	4b03      	ldr	r3, [pc, #12]	; (8011ac8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011abc:	4618      	mov	r0, r3
 8011abe:	370c      	adds	r7, #12
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac6:	4770      	bx	lr
 8011ac8:	200000c0 	.word	0x200000c0

08011acc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011acc:	b480      	push	{r7}
 8011ace:	b083      	sub	sp, #12
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	2243      	movs	r2, #67	; 0x43
 8011ad8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8011ada:	4b03      	ldr	r3, [pc, #12]	; (8011ae8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011adc:	4618      	mov	r0, r3
 8011ade:	370c      	adds	r7, #12
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae6:	4770      	bx	lr
 8011ae8:	20000148 	.word	0x20000148

08011aec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011aec:	b480      	push	{r7}
 8011aee:	b083      	sub	sp, #12
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	220a      	movs	r2, #10
 8011af8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011afa:	4b03      	ldr	r3, [pc, #12]	; (8011b08 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011afc:	4618      	mov	r0, r3
 8011afe:	370c      	adds	r7, #12
 8011b00:	46bd      	mov	sp, r7
 8011b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b06:	4770      	bx	lr
 8011b08:	2000007c 	.word	0x2000007c

08011b0c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011b0c:	b480      	push	{r7}
 8011b0e:	b083      	sub	sp, #12
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
 8011b14:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011b16:	683b      	ldr	r3, [r7, #0]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d101      	bne.n	8011b20 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011b1c:	2303      	movs	r3, #3
 8011b1e:	e004      	b.n	8011b2a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	683a      	ldr	r2, [r7, #0]
 8011b24:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8011b28:	2300      	movs	r3, #0
}
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	370c      	adds	r7, #12
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b34:	4770      	bx	lr

08011b36 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011b36:	b480      	push	{r7}
 8011b38:	b087      	sub	sp, #28
 8011b3a:	af00      	add	r7, sp, #0
 8011b3c:	60f8      	str	r0, [r7, #12]
 8011b3e:	60b9      	str	r1, [r7, #8]
 8011b40:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b48:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8011b4a:	697b      	ldr	r3, [r7, #20]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d101      	bne.n	8011b54 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011b50:	2303      	movs	r3, #3
 8011b52:	e008      	b.n	8011b66 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8011b54:	697b      	ldr	r3, [r7, #20]
 8011b56:	68ba      	ldr	r2, [r7, #8]
 8011b58:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011b5c:	697b      	ldr	r3, [r7, #20]
 8011b5e:	687a      	ldr	r2, [r7, #4]
 8011b60:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8011b64:	2300      	movs	r3, #0
}
 8011b66:	4618      	mov	r0, r3
 8011b68:	371c      	adds	r7, #28
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b70:	4770      	bx	lr

08011b72 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011b72:	b480      	push	{r7}
 8011b74:	b085      	sub	sp, #20
 8011b76:	af00      	add	r7, sp, #0
 8011b78:	6078      	str	r0, [r7, #4]
 8011b7a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b82:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d101      	bne.n	8011b8e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8011b8a:	2303      	movs	r3, #3
 8011b8c:	e004      	b.n	8011b98 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	683a      	ldr	r2, [r7, #0]
 8011b92:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011b96:	2300      	movs	r3, #0
}
 8011b98:	4618      	mov	r0, r3
 8011b9a:	3714      	adds	r7, #20
 8011b9c:	46bd      	mov	sp, r7
 8011b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba2:	4770      	bx	lr

08011ba4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b084      	sub	sp, #16
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011bb2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d101      	bne.n	8011bc2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011bbe:	2303      	movs	r3, #3
 8011bc0:	e016      	b.n	8011bf0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	7c1b      	ldrb	r3, [r3, #16]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d109      	bne.n	8011bde <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011bd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011bd4:	2101      	movs	r1, #1
 8011bd6:	6878      	ldr	r0, [r7, #4]
 8011bd8:	f008 f9b2 	bl	8019f40 <USBD_LL_PrepareReceive>
 8011bdc:	e007      	b.n	8011bee <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011be4:	2340      	movs	r3, #64	; 0x40
 8011be6:	2101      	movs	r1, #1
 8011be8:	6878      	ldr	r0, [r7, #4]
 8011bea:	f008 f9a9 	bl	8019f40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011bee:	2300      	movs	r3, #0
}
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	3710      	adds	r7, #16
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	bd80      	pop	{r7, pc}

08011bf8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b086      	sub	sp, #24
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	60f8      	str	r0, [r7, #12]
 8011c00:	60b9      	str	r1, [r7, #8]
 8011c02:	4613      	mov	r3, r2
 8011c04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d101      	bne.n	8011c10 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011c0c:	2303      	movs	r3, #3
 8011c0e:	e01f      	b.n	8011c50 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	2200      	movs	r2, #0
 8011c14:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	2200      	movs	r2, #0
 8011c24:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011c28:	68bb      	ldr	r3, [r7, #8]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d003      	beq.n	8011c36 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	68ba      	ldr	r2, [r7, #8]
 8011c32:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	2201      	movs	r2, #1
 8011c3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	79fa      	ldrb	r2, [r7, #7]
 8011c42:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011c44:	68f8      	ldr	r0, [r7, #12]
 8011c46:	f008 f825 	bl	8019c94 <USBD_LL_Init>
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c50:	4618      	mov	r0, r3
 8011c52:	3718      	adds	r7, #24
 8011c54:	46bd      	mov	sp, r7
 8011c56:	bd80      	pop	{r7, pc}

08011c58 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b084      	sub	sp, #16
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
 8011c60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011c62:	2300      	movs	r3, #0
 8011c64:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011c66:	683b      	ldr	r3, [r7, #0]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d101      	bne.n	8011c70 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011c6c:	2303      	movs	r3, #3
 8011c6e:	e016      	b.n	8011c9e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	683a      	ldr	r2, [r7, #0]
 8011c74:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d00b      	beq.n	8011c9c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c8c:	f107 020e 	add.w	r2, r7, #14
 8011c90:	4610      	mov	r0, r2
 8011c92:	4798      	blx	r3
 8011c94:	4602      	mov	r2, r0
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8011c9c:	2300      	movs	r3, #0
}
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	3710      	adds	r7, #16
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	bd80      	pop	{r7, pc}

08011ca6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011ca6:	b580      	push	{r7, lr}
 8011ca8:	b082      	sub	sp, #8
 8011caa:	af00      	add	r7, sp, #0
 8011cac:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011cae:	6878      	ldr	r0, [r7, #4]
 8011cb0:	f008 f83c 	bl	8019d2c <USBD_LL_Start>
 8011cb4:	4603      	mov	r3, r0
}
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	3708      	adds	r7, #8
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}

08011cbe <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011cbe:	b480      	push	{r7}
 8011cc0:	b083      	sub	sp, #12
 8011cc2:	af00      	add	r7, sp, #0
 8011cc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011cc6:	2300      	movs	r3, #0
}
 8011cc8:	4618      	mov	r0, r3
 8011cca:	370c      	adds	r7, #12
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd2:	4770      	bx	lr

08011cd4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011cd4:	b580      	push	{r7, lr}
 8011cd6:	b084      	sub	sp, #16
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	6078      	str	r0, [r7, #4]
 8011cdc:	460b      	mov	r3, r1
 8011cde:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011ce0:	2303      	movs	r3, #3
 8011ce2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d009      	beq.n	8011d02 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	78fa      	ldrb	r2, [r7, #3]
 8011cf8:	4611      	mov	r1, r2
 8011cfa:	6878      	ldr	r0, [r7, #4]
 8011cfc:	4798      	blx	r3
 8011cfe:	4603      	mov	r3, r0
 8011d00:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d04:	4618      	mov	r0, r3
 8011d06:	3710      	adds	r7, #16
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	bd80      	pop	{r7, pc}

08011d0c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b082      	sub	sp, #8
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]
 8011d14:	460b      	mov	r3, r1
 8011d16:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d007      	beq.n	8011d32 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d28:	685b      	ldr	r3, [r3, #4]
 8011d2a:	78fa      	ldrb	r2, [r7, #3]
 8011d2c:	4611      	mov	r1, r2
 8011d2e:	6878      	ldr	r0, [r7, #4]
 8011d30:	4798      	blx	r3
  }

  return USBD_OK;
 8011d32:	2300      	movs	r3, #0
}
 8011d34:	4618      	mov	r0, r3
 8011d36:	3708      	adds	r7, #8
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	bd80      	pop	{r7, pc}

08011d3c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b084      	sub	sp, #16
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
 8011d44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011d4c:	6839      	ldr	r1, [r7, #0]
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f000 ff90 	bl	8012c74 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	2201      	movs	r2, #1
 8011d58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011d62:	461a      	mov	r2, r3
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011d70:	f003 031f 	and.w	r3, r3, #31
 8011d74:	2b02      	cmp	r3, #2
 8011d76:	d01a      	beq.n	8011dae <USBD_LL_SetupStage+0x72>
 8011d78:	2b02      	cmp	r3, #2
 8011d7a:	d822      	bhi.n	8011dc2 <USBD_LL_SetupStage+0x86>
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d002      	beq.n	8011d86 <USBD_LL_SetupStage+0x4a>
 8011d80:	2b01      	cmp	r3, #1
 8011d82:	d00a      	beq.n	8011d9a <USBD_LL_SetupStage+0x5e>
 8011d84:	e01d      	b.n	8011dc2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011d8c:	4619      	mov	r1, r3
 8011d8e:	6878      	ldr	r0, [r7, #4]
 8011d90:	f000 fa62 	bl	8012258 <USBD_StdDevReq>
 8011d94:	4603      	mov	r3, r0
 8011d96:	73fb      	strb	r3, [r7, #15]
      break;
 8011d98:	e020      	b.n	8011ddc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011da0:	4619      	mov	r1, r3
 8011da2:	6878      	ldr	r0, [r7, #4]
 8011da4:	f000 fac6 	bl	8012334 <USBD_StdItfReq>
 8011da8:	4603      	mov	r3, r0
 8011daa:	73fb      	strb	r3, [r7, #15]
      break;
 8011dac:	e016      	b.n	8011ddc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011db4:	4619      	mov	r1, r3
 8011db6:	6878      	ldr	r0, [r7, #4]
 8011db8:	f000 fb05 	bl	80123c6 <USBD_StdEPReq>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8011dc0:	e00c      	b.n	8011ddc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011dc8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011dcc:	b2db      	uxtb	r3, r3
 8011dce:	4619      	mov	r1, r3
 8011dd0:	6878      	ldr	r0, [r7, #4]
 8011dd2:	f008 f80b 	bl	8019dec <USBD_LL_StallEP>
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	73fb      	strb	r3, [r7, #15]
      break;
 8011dda:	bf00      	nop
  }

  return ret;
 8011ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011dde:	4618      	mov	r0, r3
 8011de0:	3710      	adds	r7, #16
 8011de2:	46bd      	mov	sp, r7
 8011de4:	bd80      	pop	{r7, pc}

08011de6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011de6:	b580      	push	{r7, lr}
 8011de8:	b086      	sub	sp, #24
 8011dea:	af00      	add	r7, sp, #0
 8011dec:	60f8      	str	r0, [r7, #12]
 8011dee:	460b      	mov	r3, r1
 8011df0:	607a      	str	r2, [r7, #4]
 8011df2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011df4:	7afb      	ldrb	r3, [r7, #11]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d138      	bne.n	8011e6c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011e00:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011e08:	2b03      	cmp	r3, #3
 8011e0a:	d14a      	bne.n	8011ea2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011e0c:	693b      	ldr	r3, [r7, #16]
 8011e0e:	689a      	ldr	r2, [r3, #8]
 8011e10:	693b      	ldr	r3, [r7, #16]
 8011e12:	68db      	ldr	r3, [r3, #12]
 8011e14:	429a      	cmp	r2, r3
 8011e16:	d913      	bls.n	8011e40 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011e18:	693b      	ldr	r3, [r7, #16]
 8011e1a:	689a      	ldr	r2, [r3, #8]
 8011e1c:	693b      	ldr	r3, [r7, #16]
 8011e1e:	68db      	ldr	r3, [r3, #12]
 8011e20:	1ad2      	subs	r2, r2, r3
 8011e22:	693b      	ldr	r3, [r7, #16]
 8011e24:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011e26:	693b      	ldr	r3, [r7, #16]
 8011e28:	68da      	ldr	r2, [r3, #12]
 8011e2a:	693b      	ldr	r3, [r7, #16]
 8011e2c:	689b      	ldr	r3, [r3, #8]
 8011e2e:	4293      	cmp	r3, r2
 8011e30:	bf28      	it	cs
 8011e32:	4613      	movcs	r3, r2
 8011e34:	461a      	mov	r2, r3
 8011e36:	6879      	ldr	r1, [r7, #4]
 8011e38:	68f8      	ldr	r0, [r7, #12]
 8011e3a:	f001 f80f 	bl	8012e5c <USBD_CtlContinueRx>
 8011e3e:	e030      	b.n	8011ea2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e46:	b2db      	uxtb	r3, r3
 8011e48:	2b03      	cmp	r3, #3
 8011e4a:	d10b      	bne.n	8011e64 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e52:	691b      	ldr	r3, [r3, #16]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d005      	beq.n	8011e64 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e5e:	691b      	ldr	r3, [r3, #16]
 8011e60:	68f8      	ldr	r0, [r7, #12]
 8011e62:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011e64:	68f8      	ldr	r0, [r7, #12]
 8011e66:	f001 f80a 	bl	8012e7e <USBD_CtlSendStatus>
 8011e6a:	e01a      	b.n	8011ea2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e72:	b2db      	uxtb	r3, r3
 8011e74:	2b03      	cmp	r3, #3
 8011e76:	d114      	bne.n	8011ea2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e7e:	699b      	ldr	r3, [r3, #24]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d00e      	beq.n	8011ea2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e8a:	699b      	ldr	r3, [r3, #24]
 8011e8c:	7afa      	ldrb	r2, [r7, #11]
 8011e8e:	4611      	mov	r1, r2
 8011e90:	68f8      	ldr	r0, [r7, #12]
 8011e92:	4798      	blx	r3
 8011e94:	4603      	mov	r3, r0
 8011e96:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8011e98:	7dfb      	ldrb	r3, [r7, #23]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d001      	beq.n	8011ea2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8011e9e:	7dfb      	ldrb	r3, [r7, #23]
 8011ea0:	e000      	b.n	8011ea4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8011ea2:	2300      	movs	r3, #0
}
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	3718      	adds	r7, #24
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	bd80      	pop	{r7, pc}

08011eac <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011eac:	b580      	push	{r7, lr}
 8011eae:	b086      	sub	sp, #24
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	60f8      	str	r0, [r7, #12]
 8011eb4:	460b      	mov	r3, r1
 8011eb6:	607a      	str	r2, [r7, #4]
 8011eb8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011eba:	7afb      	ldrb	r3, [r7, #11]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d16b      	bne.n	8011f98 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	3314      	adds	r3, #20
 8011ec4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011ecc:	2b02      	cmp	r3, #2
 8011ece:	d156      	bne.n	8011f7e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8011ed0:	693b      	ldr	r3, [r7, #16]
 8011ed2:	689a      	ldr	r2, [r3, #8]
 8011ed4:	693b      	ldr	r3, [r7, #16]
 8011ed6:	68db      	ldr	r3, [r3, #12]
 8011ed8:	429a      	cmp	r2, r3
 8011eda:	d914      	bls.n	8011f06 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011edc:	693b      	ldr	r3, [r7, #16]
 8011ede:	689a      	ldr	r2, [r3, #8]
 8011ee0:	693b      	ldr	r3, [r7, #16]
 8011ee2:	68db      	ldr	r3, [r3, #12]
 8011ee4:	1ad2      	subs	r2, r2, r3
 8011ee6:	693b      	ldr	r3, [r7, #16]
 8011ee8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011eea:	693b      	ldr	r3, [r7, #16]
 8011eec:	689b      	ldr	r3, [r3, #8]
 8011eee:	461a      	mov	r2, r3
 8011ef0:	6879      	ldr	r1, [r7, #4]
 8011ef2:	68f8      	ldr	r0, [r7, #12]
 8011ef4:	f000 ff84 	bl	8012e00 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011ef8:	2300      	movs	r3, #0
 8011efa:	2200      	movs	r2, #0
 8011efc:	2100      	movs	r1, #0
 8011efe:	68f8      	ldr	r0, [r7, #12]
 8011f00:	f008 f81e 	bl	8019f40 <USBD_LL_PrepareReceive>
 8011f04:	e03b      	b.n	8011f7e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011f06:	693b      	ldr	r3, [r7, #16]
 8011f08:	68da      	ldr	r2, [r3, #12]
 8011f0a:	693b      	ldr	r3, [r7, #16]
 8011f0c:	689b      	ldr	r3, [r3, #8]
 8011f0e:	429a      	cmp	r2, r3
 8011f10:	d11c      	bne.n	8011f4c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011f12:	693b      	ldr	r3, [r7, #16]
 8011f14:	685a      	ldr	r2, [r3, #4]
 8011f16:	693b      	ldr	r3, [r7, #16]
 8011f18:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011f1a:	429a      	cmp	r2, r3
 8011f1c:	d316      	bcc.n	8011f4c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011f1e:	693b      	ldr	r3, [r7, #16]
 8011f20:	685a      	ldr	r2, [r3, #4]
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011f28:	429a      	cmp	r2, r3
 8011f2a:	d20f      	bcs.n	8011f4c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011f2c:	2200      	movs	r2, #0
 8011f2e:	2100      	movs	r1, #0
 8011f30:	68f8      	ldr	r0, [r7, #12]
 8011f32:	f000 ff65 	bl	8012e00 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	2200      	movs	r2, #0
 8011f3a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011f3e:	2300      	movs	r3, #0
 8011f40:	2200      	movs	r2, #0
 8011f42:	2100      	movs	r1, #0
 8011f44:	68f8      	ldr	r0, [r7, #12]
 8011f46:	f007 fffb 	bl	8019f40 <USBD_LL_PrepareReceive>
 8011f4a:	e018      	b.n	8011f7e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f52:	b2db      	uxtb	r3, r3
 8011f54:	2b03      	cmp	r3, #3
 8011f56:	d10b      	bne.n	8011f70 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f5e:	68db      	ldr	r3, [r3, #12]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d005      	beq.n	8011f70 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f6a:	68db      	ldr	r3, [r3, #12]
 8011f6c:	68f8      	ldr	r0, [r7, #12]
 8011f6e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011f70:	2180      	movs	r1, #128	; 0x80
 8011f72:	68f8      	ldr	r0, [r7, #12]
 8011f74:	f007 ff3a 	bl	8019dec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011f78:	68f8      	ldr	r0, [r7, #12]
 8011f7a:	f000 ff93 	bl	8012ea4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011f84:	2b01      	cmp	r3, #1
 8011f86:	d122      	bne.n	8011fce <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8011f88:	68f8      	ldr	r0, [r7, #12]
 8011f8a:	f7ff fe98 	bl	8011cbe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	2200      	movs	r2, #0
 8011f92:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011f96:	e01a      	b.n	8011fce <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f9e:	b2db      	uxtb	r3, r3
 8011fa0:	2b03      	cmp	r3, #3
 8011fa2:	d114      	bne.n	8011fce <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011faa:	695b      	ldr	r3, [r3, #20]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d00e      	beq.n	8011fce <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fb6:	695b      	ldr	r3, [r3, #20]
 8011fb8:	7afa      	ldrb	r2, [r7, #11]
 8011fba:	4611      	mov	r1, r2
 8011fbc:	68f8      	ldr	r0, [r7, #12]
 8011fbe:	4798      	blx	r3
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8011fc4:	7dfb      	ldrb	r3, [r7, #23]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d001      	beq.n	8011fce <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8011fca:	7dfb      	ldrb	r3, [r7, #23]
 8011fcc:	e000      	b.n	8011fd0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8011fce:	2300      	movs	r3, #0
}
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	3718      	adds	r7, #24
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	bd80      	pop	{r7, pc}

08011fd8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b082      	sub	sp, #8
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	2201      	movs	r2, #1
 8011fe4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	2200      	movs	r2, #0
 8011fec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	2200      	movs	r2, #0
 8011ffa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012004:	2b00      	cmp	r3, #0
 8012006:	d101      	bne.n	801200c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8012008:	2303      	movs	r3, #3
 801200a:	e02f      	b.n	801206c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012012:	2b00      	cmp	r3, #0
 8012014:	d00f      	beq.n	8012036 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801201c:	685b      	ldr	r3, [r3, #4]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d009      	beq.n	8012036 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012028:	685b      	ldr	r3, [r3, #4]
 801202a:	687a      	ldr	r2, [r7, #4]
 801202c:	6852      	ldr	r2, [r2, #4]
 801202e:	b2d2      	uxtb	r2, r2
 8012030:	4611      	mov	r1, r2
 8012032:	6878      	ldr	r0, [r7, #4]
 8012034:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012036:	2340      	movs	r3, #64	; 0x40
 8012038:	2200      	movs	r2, #0
 801203a:	2100      	movs	r1, #0
 801203c:	6878      	ldr	r0, [r7, #4]
 801203e:	f007 fe90 	bl	8019d62 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	2201      	movs	r2, #1
 8012046:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	2240      	movs	r2, #64	; 0x40
 801204e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012052:	2340      	movs	r3, #64	; 0x40
 8012054:	2200      	movs	r2, #0
 8012056:	2180      	movs	r1, #128	; 0x80
 8012058:	6878      	ldr	r0, [r7, #4]
 801205a:	f007 fe82 	bl	8019d62 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	2201      	movs	r2, #1
 8012062:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	2240      	movs	r2, #64	; 0x40
 8012068:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801206a:	2300      	movs	r3, #0
}
 801206c:	4618      	mov	r0, r3
 801206e:	3708      	adds	r7, #8
 8012070:	46bd      	mov	sp, r7
 8012072:	bd80      	pop	{r7, pc}

08012074 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012074:	b480      	push	{r7}
 8012076:	b083      	sub	sp, #12
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]
 801207c:	460b      	mov	r3, r1
 801207e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	78fa      	ldrb	r2, [r7, #3]
 8012084:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012086:	2300      	movs	r3, #0
}
 8012088:	4618      	mov	r0, r3
 801208a:	370c      	adds	r7, #12
 801208c:	46bd      	mov	sp, r7
 801208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012092:	4770      	bx	lr

08012094 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012094:	b480      	push	{r7}
 8012096:	b083      	sub	sp, #12
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80120a2:	b2da      	uxtb	r2, r3
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	2204      	movs	r2, #4
 80120ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80120b2:	2300      	movs	r3, #0
}
 80120b4:	4618      	mov	r0, r3
 80120b6:	370c      	adds	r7, #12
 80120b8:	46bd      	mov	sp, r7
 80120ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120be:	4770      	bx	lr

080120c0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80120c0:	b480      	push	{r7}
 80120c2:	b083      	sub	sp, #12
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80120ce:	b2db      	uxtb	r3, r3
 80120d0:	2b04      	cmp	r3, #4
 80120d2:	d106      	bne.n	80120e2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80120da:	b2da      	uxtb	r2, r3
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80120e2:	2300      	movs	r3, #0
}
 80120e4:	4618      	mov	r0, r3
 80120e6:	370c      	adds	r7, #12
 80120e8:	46bd      	mov	sp, r7
 80120ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ee:	4770      	bx	lr

080120f0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b082      	sub	sp, #8
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d101      	bne.n	8012106 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8012102:	2303      	movs	r3, #3
 8012104:	e012      	b.n	801212c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801210c:	b2db      	uxtb	r3, r3
 801210e:	2b03      	cmp	r3, #3
 8012110:	d10b      	bne.n	801212a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012118:	69db      	ldr	r3, [r3, #28]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d005      	beq.n	801212a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012124:	69db      	ldr	r3, [r3, #28]
 8012126:	6878      	ldr	r0, [r7, #4]
 8012128:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801212a:	2300      	movs	r3, #0
}
 801212c:	4618      	mov	r0, r3
 801212e:	3708      	adds	r7, #8
 8012130:	46bd      	mov	sp, r7
 8012132:	bd80      	pop	{r7, pc}

08012134 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8012134:	b580      	push	{r7, lr}
 8012136:	b082      	sub	sp, #8
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
 801213c:	460b      	mov	r3, r1
 801213e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012146:	2b00      	cmp	r3, #0
 8012148:	d101      	bne.n	801214e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 801214a:	2303      	movs	r3, #3
 801214c:	e014      	b.n	8012178 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012154:	b2db      	uxtb	r3, r3
 8012156:	2b03      	cmp	r3, #3
 8012158:	d10d      	bne.n	8012176 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012160:	6a1b      	ldr	r3, [r3, #32]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d007      	beq.n	8012176 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801216c:	6a1b      	ldr	r3, [r3, #32]
 801216e:	78fa      	ldrb	r2, [r7, #3]
 8012170:	4611      	mov	r1, r2
 8012172:	6878      	ldr	r0, [r7, #4]
 8012174:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012176:	2300      	movs	r3, #0
}
 8012178:	4618      	mov	r0, r3
 801217a:	3708      	adds	r7, #8
 801217c:	46bd      	mov	sp, r7
 801217e:	bd80      	pop	{r7, pc}

08012180 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b082      	sub	sp, #8
 8012184:	af00      	add	r7, sp, #0
 8012186:	6078      	str	r0, [r7, #4]
 8012188:	460b      	mov	r3, r1
 801218a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012192:	2b00      	cmp	r3, #0
 8012194:	d101      	bne.n	801219a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8012196:	2303      	movs	r3, #3
 8012198:	e014      	b.n	80121c4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80121a0:	b2db      	uxtb	r3, r3
 80121a2:	2b03      	cmp	r3, #3
 80121a4:	d10d      	bne.n	80121c2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d007      	beq.n	80121c2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121ba:	78fa      	ldrb	r2, [r7, #3]
 80121bc:	4611      	mov	r1, r2
 80121be:	6878      	ldr	r0, [r7, #4]
 80121c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80121c2:	2300      	movs	r3, #0
}
 80121c4:	4618      	mov	r0, r3
 80121c6:	3708      	adds	r7, #8
 80121c8:	46bd      	mov	sp, r7
 80121ca:	bd80      	pop	{r7, pc}

080121cc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80121cc:	b480      	push	{r7}
 80121ce:	b083      	sub	sp, #12
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80121d4:	2300      	movs	r3, #0
}
 80121d6:	4618      	mov	r0, r3
 80121d8:	370c      	adds	r7, #12
 80121da:	46bd      	mov	sp, r7
 80121dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e0:	4770      	bx	lr

080121e2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80121e2:	b580      	push	{r7, lr}
 80121e4:	b082      	sub	sp, #8
 80121e6:	af00      	add	r7, sp, #0
 80121e8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	2201      	movs	r2, #1
 80121ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d009      	beq.n	8012210 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012202:	685b      	ldr	r3, [r3, #4]
 8012204:	687a      	ldr	r2, [r7, #4]
 8012206:	6852      	ldr	r2, [r2, #4]
 8012208:	b2d2      	uxtb	r2, r2
 801220a:	4611      	mov	r1, r2
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	4798      	blx	r3
  }

  return USBD_OK;
 8012210:	2300      	movs	r3, #0
}
 8012212:	4618      	mov	r0, r3
 8012214:	3708      	adds	r7, #8
 8012216:	46bd      	mov	sp, r7
 8012218:	bd80      	pop	{r7, pc}

0801221a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801221a:	b480      	push	{r7}
 801221c:	b087      	sub	sp, #28
 801221e:	af00      	add	r7, sp, #0
 8012220:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8012226:	697b      	ldr	r3, [r7, #20]
 8012228:	781b      	ldrb	r3, [r3, #0]
 801222a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801222c:	697b      	ldr	r3, [r7, #20]
 801222e:	3301      	adds	r3, #1
 8012230:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8012232:	697b      	ldr	r3, [r7, #20]
 8012234:	781b      	ldrb	r3, [r3, #0]
 8012236:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8012238:	8a3b      	ldrh	r3, [r7, #16]
 801223a:	021b      	lsls	r3, r3, #8
 801223c:	b21a      	sxth	r2, r3
 801223e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012242:	4313      	orrs	r3, r2
 8012244:	b21b      	sxth	r3, r3
 8012246:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8012248:	89fb      	ldrh	r3, [r7, #14]
}
 801224a:	4618      	mov	r0, r3
 801224c:	371c      	adds	r7, #28
 801224e:	46bd      	mov	sp, r7
 8012250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012254:	4770      	bx	lr
	...

08012258 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012258:	b580      	push	{r7, lr}
 801225a:	b084      	sub	sp, #16
 801225c:	af00      	add	r7, sp, #0
 801225e:	6078      	str	r0, [r7, #4]
 8012260:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012262:	2300      	movs	r3, #0
 8012264:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012266:	683b      	ldr	r3, [r7, #0]
 8012268:	781b      	ldrb	r3, [r3, #0]
 801226a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801226e:	2b40      	cmp	r3, #64	; 0x40
 8012270:	d005      	beq.n	801227e <USBD_StdDevReq+0x26>
 8012272:	2b40      	cmp	r3, #64	; 0x40
 8012274:	d853      	bhi.n	801231e <USBD_StdDevReq+0xc6>
 8012276:	2b00      	cmp	r3, #0
 8012278:	d00b      	beq.n	8012292 <USBD_StdDevReq+0x3a>
 801227a:	2b20      	cmp	r3, #32
 801227c:	d14f      	bne.n	801231e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012284:	689b      	ldr	r3, [r3, #8]
 8012286:	6839      	ldr	r1, [r7, #0]
 8012288:	6878      	ldr	r0, [r7, #4]
 801228a:	4798      	blx	r3
 801228c:	4603      	mov	r3, r0
 801228e:	73fb      	strb	r3, [r7, #15]
      break;
 8012290:	e04a      	b.n	8012328 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012292:	683b      	ldr	r3, [r7, #0]
 8012294:	785b      	ldrb	r3, [r3, #1]
 8012296:	2b09      	cmp	r3, #9
 8012298:	d83b      	bhi.n	8012312 <USBD_StdDevReq+0xba>
 801229a:	a201      	add	r2, pc, #4	; (adr r2, 80122a0 <USBD_StdDevReq+0x48>)
 801229c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122a0:	080122f5 	.word	0x080122f5
 80122a4:	08012309 	.word	0x08012309
 80122a8:	08012313 	.word	0x08012313
 80122ac:	080122ff 	.word	0x080122ff
 80122b0:	08012313 	.word	0x08012313
 80122b4:	080122d3 	.word	0x080122d3
 80122b8:	080122c9 	.word	0x080122c9
 80122bc:	08012313 	.word	0x08012313
 80122c0:	080122eb 	.word	0x080122eb
 80122c4:	080122dd 	.word	0x080122dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80122c8:	6839      	ldr	r1, [r7, #0]
 80122ca:	6878      	ldr	r0, [r7, #4]
 80122cc:	f000 f9de 	bl	801268c <USBD_GetDescriptor>
          break;
 80122d0:	e024      	b.n	801231c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80122d2:	6839      	ldr	r1, [r7, #0]
 80122d4:	6878      	ldr	r0, [r7, #4]
 80122d6:	f000 fb43 	bl	8012960 <USBD_SetAddress>
          break;
 80122da:	e01f      	b.n	801231c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80122dc:	6839      	ldr	r1, [r7, #0]
 80122de:	6878      	ldr	r0, [r7, #4]
 80122e0:	f000 fb82 	bl	80129e8 <USBD_SetConfig>
 80122e4:	4603      	mov	r3, r0
 80122e6:	73fb      	strb	r3, [r7, #15]
          break;
 80122e8:	e018      	b.n	801231c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80122ea:	6839      	ldr	r1, [r7, #0]
 80122ec:	6878      	ldr	r0, [r7, #4]
 80122ee:	f000 fc21 	bl	8012b34 <USBD_GetConfig>
          break;
 80122f2:	e013      	b.n	801231c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80122f4:	6839      	ldr	r1, [r7, #0]
 80122f6:	6878      	ldr	r0, [r7, #4]
 80122f8:	f000 fc52 	bl	8012ba0 <USBD_GetStatus>
          break;
 80122fc:	e00e      	b.n	801231c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80122fe:	6839      	ldr	r1, [r7, #0]
 8012300:	6878      	ldr	r0, [r7, #4]
 8012302:	f000 fc81 	bl	8012c08 <USBD_SetFeature>
          break;
 8012306:	e009      	b.n	801231c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012308:	6839      	ldr	r1, [r7, #0]
 801230a:	6878      	ldr	r0, [r7, #4]
 801230c:	f000 fc90 	bl	8012c30 <USBD_ClrFeature>
          break;
 8012310:	e004      	b.n	801231c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8012312:	6839      	ldr	r1, [r7, #0]
 8012314:	6878      	ldr	r0, [r7, #4]
 8012316:	f000 fce7 	bl	8012ce8 <USBD_CtlError>
          break;
 801231a:	bf00      	nop
      }
      break;
 801231c:	e004      	b.n	8012328 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801231e:	6839      	ldr	r1, [r7, #0]
 8012320:	6878      	ldr	r0, [r7, #4]
 8012322:	f000 fce1 	bl	8012ce8 <USBD_CtlError>
      break;
 8012326:	bf00      	nop
  }

  return ret;
 8012328:	7bfb      	ldrb	r3, [r7, #15]
}
 801232a:	4618      	mov	r0, r3
 801232c:	3710      	adds	r7, #16
 801232e:	46bd      	mov	sp, r7
 8012330:	bd80      	pop	{r7, pc}
 8012332:	bf00      	nop

08012334 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b084      	sub	sp, #16
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
 801233c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801233e:	2300      	movs	r3, #0
 8012340:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012342:	683b      	ldr	r3, [r7, #0]
 8012344:	781b      	ldrb	r3, [r3, #0]
 8012346:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801234a:	2b40      	cmp	r3, #64	; 0x40
 801234c:	d005      	beq.n	801235a <USBD_StdItfReq+0x26>
 801234e:	2b40      	cmp	r3, #64	; 0x40
 8012350:	d82f      	bhi.n	80123b2 <USBD_StdItfReq+0x7e>
 8012352:	2b00      	cmp	r3, #0
 8012354:	d001      	beq.n	801235a <USBD_StdItfReq+0x26>
 8012356:	2b20      	cmp	r3, #32
 8012358:	d12b      	bne.n	80123b2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012360:	b2db      	uxtb	r3, r3
 8012362:	3b01      	subs	r3, #1
 8012364:	2b02      	cmp	r3, #2
 8012366:	d81d      	bhi.n	80123a4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012368:	683b      	ldr	r3, [r7, #0]
 801236a:	889b      	ldrh	r3, [r3, #4]
 801236c:	b2db      	uxtb	r3, r3
 801236e:	2b01      	cmp	r3, #1
 8012370:	d813      	bhi.n	801239a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012378:	689b      	ldr	r3, [r3, #8]
 801237a:	6839      	ldr	r1, [r7, #0]
 801237c:	6878      	ldr	r0, [r7, #4]
 801237e:	4798      	blx	r3
 8012380:	4603      	mov	r3, r0
 8012382:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012384:	683b      	ldr	r3, [r7, #0]
 8012386:	88db      	ldrh	r3, [r3, #6]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d110      	bne.n	80123ae <USBD_StdItfReq+0x7a>
 801238c:	7bfb      	ldrb	r3, [r7, #15]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d10d      	bne.n	80123ae <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8012392:	6878      	ldr	r0, [r7, #4]
 8012394:	f000 fd73 	bl	8012e7e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8012398:	e009      	b.n	80123ae <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801239a:	6839      	ldr	r1, [r7, #0]
 801239c:	6878      	ldr	r0, [r7, #4]
 801239e:	f000 fca3 	bl	8012ce8 <USBD_CtlError>
          break;
 80123a2:	e004      	b.n	80123ae <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80123a4:	6839      	ldr	r1, [r7, #0]
 80123a6:	6878      	ldr	r0, [r7, #4]
 80123a8:	f000 fc9e 	bl	8012ce8 <USBD_CtlError>
          break;
 80123ac:	e000      	b.n	80123b0 <USBD_StdItfReq+0x7c>
          break;
 80123ae:	bf00      	nop
      }
      break;
 80123b0:	e004      	b.n	80123bc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80123b2:	6839      	ldr	r1, [r7, #0]
 80123b4:	6878      	ldr	r0, [r7, #4]
 80123b6:	f000 fc97 	bl	8012ce8 <USBD_CtlError>
      break;
 80123ba:	bf00      	nop
  }

  return ret;
 80123bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80123be:	4618      	mov	r0, r3
 80123c0:	3710      	adds	r7, #16
 80123c2:	46bd      	mov	sp, r7
 80123c4:	bd80      	pop	{r7, pc}

080123c6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80123c6:	b580      	push	{r7, lr}
 80123c8:	b084      	sub	sp, #16
 80123ca:	af00      	add	r7, sp, #0
 80123cc:	6078      	str	r0, [r7, #4]
 80123ce:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80123d0:	2300      	movs	r3, #0
 80123d2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80123d4:	683b      	ldr	r3, [r7, #0]
 80123d6:	889b      	ldrh	r3, [r3, #4]
 80123d8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80123da:	683b      	ldr	r3, [r7, #0]
 80123dc:	781b      	ldrb	r3, [r3, #0]
 80123de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80123e2:	2b40      	cmp	r3, #64	; 0x40
 80123e4:	d007      	beq.n	80123f6 <USBD_StdEPReq+0x30>
 80123e6:	2b40      	cmp	r3, #64	; 0x40
 80123e8:	f200 8145 	bhi.w	8012676 <USBD_StdEPReq+0x2b0>
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d00c      	beq.n	801240a <USBD_StdEPReq+0x44>
 80123f0:	2b20      	cmp	r3, #32
 80123f2:	f040 8140 	bne.w	8012676 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80123fc:	689b      	ldr	r3, [r3, #8]
 80123fe:	6839      	ldr	r1, [r7, #0]
 8012400:	6878      	ldr	r0, [r7, #4]
 8012402:	4798      	blx	r3
 8012404:	4603      	mov	r3, r0
 8012406:	73fb      	strb	r3, [r7, #15]
      break;
 8012408:	e13a      	b.n	8012680 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801240a:	683b      	ldr	r3, [r7, #0]
 801240c:	785b      	ldrb	r3, [r3, #1]
 801240e:	2b03      	cmp	r3, #3
 8012410:	d007      	beq.n	8012422 <USBD_StdEPReq+0x5c>
 8012412:	2b03      	cmp	r3, #3
 8012414:	f300 8129 	bgt.w	801266a <USBD_StdEPReq+0x2a4>
 8012418:	2b00      	cmp	r3, #0
 801241a:	d07f      	beq.n	801251c <USBD_StdEPReq+0x156>
 801241c:	2b01      	cmp	r3, #1
 801241e:	d03c      	beq.n	801249a <USBD_StdEPReq+0xd4>
 8012420:	e123      	b.n	801266a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012428:	b2db      	uxtb	r3, r3
 801242a:	2b02      	cmp	r3, #2
 801242c:	d002      	beq.n	8012434 <USBD_StdEPReq+0x6e>
 801242e:	2b03      	cmp	r3, #3
 8012430:	d016      	beq.n	8012460 <USBD_StdEPReq+0x9a>
 8012432:	e02c      	b.n	801248e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012434:	7bbb      	ldrb	r3, [r7, #14]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d00d      	beq.n	8012456 <USBD_StdEPReq+0x90>
 801243a:	7bbb      	ldrb	r3, [r7, #14]
 801243c:	2b80      	cmp	r3, #128	; 0x80
 801243e:	d00a      	beq.n	8012456 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012440:	7bbb      	ldrb	r3, [r7, #14]
 8012442:	4619      	mov	r1, r3
 8012444:	6878      	ldr	r0, [r7, #4]
 8012446:	f007 fcd1 	bl	8019dec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801244a:	2180      	movs	r1, #128	; 0x80
 801244c:	6878      	ldr	r0, [r7, #4]
 801244e:	f007 fccd 	bl	8019dec <USBD_LL_StallEP>
 8012452:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012454:	e020      	b.n	8012498 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8012456:	6839      	ldr	r1, [r7, #0]
 8012458:	6878      	ldr	r0, [r7, #4]
 801245a:	f000 fc45 	bl	8012ce8 <USBD_CtlError>
              break;
 801245e:	e01b      	b.n	8012498 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012460:	683b      	ldr	r3, [r7, #0]
 8012462:	885b      	ldrh	r3, [r3, #2]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d10e      	bne.n	8012486 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012468:	7bbb      	ldrb	r3, [r7, #14]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d00b      	beq.n	8012486 <USBD_StdEPReq+0xc0>
 801246e:	7bbb      	ldrb	r3, [r7, #14]
 8012470:	2b80      	cmp	r3, #128	; 0x80
 8012472:	d008      	beq.n	8012486 <USBD_StdEPReq+0xc0>
 8012474:	683b      	ldr	r3, [r7, #0]
 8012476:	88db      	ldrh	r3, [r3, #6]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d104      	bne.n	8012486 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801247c:	7bbb      	ldrb	r3, [r7, #14]
 801247e:	4619      	mov	r1, r3
 8012480:	6878      	ldr	r0, [r7, #4]
 8012482:	f007 fcb3 	bl	8019dec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8012486:	6878      	ldr	r0, [r7, #4]
 8012488:	f000 fcf9 	bl	8012e7e <USBD_CtlSendStatus>

              break;
 801248c:	e004      	b.n	8012498 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 801248e:	6839      	ldr	r1, [r7, #0]
 8012490:	6878      	ldr	r0, [r7, #4]
 8012492:	f000 fc29 	bl	8012ce8 <USBD_CtlError>
              break;
 8012496:	bf00      	nop
          }
          break;
 8012498:	e0ec      	b.n	8012674 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80124a0:	b2db      	uxtb	r3, r3
 80124a2:	2b02      	cmp	r3, #2
 80124a4:	d002      	beq.n	80124ac <USBD_StdEPReq+0xe6>
 80124a6:	2b03      	cmp	r3, #3
 80124a8:	d016      	beq.n	80124d8 <USBD_StdEPReq+0x112>
 80124aa:	e030      	b.n	801250e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80124ac:	7bbb      	ldrb	r3, [r7, #14]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d00d      	beq.n	80124ce <USBD_StdEPReq+0x108>
 80124b2:	7bbb      	ldrb	r3, [r7, #14]
 80124b4:	2b80      	cmp	r3, #128	; 0x80
 80124b6:	d00a      	beq.n	80124ce <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80124b8:	7bbb      	ldrb	r3, [r7, #14]
 80124ba:	4619      	mov	r1, r3
 80124bc:	6878      	ldr	r0, [r7, #4]
 80124be:	f007 fc95 	bl	8019dec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80124c2:	2180      	movs	r1, #128	; 0x80
 80124c4:	6878      	ldr	r0, [r7, #4]
 80124c6:	f007 fc91 	bl	8019dec <USBD_LL_StallEP>
 80124ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80124cc:	e025      	b.n	801251a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80124ce:	6839      	ldr	r1, [r7, #0]
 80124d0:	6878      	ldr	r0, [r7, #4]
 80124d2:	f000 fc09 	bl	8012ce8 <USBD_CtlError>
              break;
 80124d6:	e020      	b.n	801251a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80124d8:	683b      	ldr	r3, [r7, #0]
 80124da:	885b      	ldrh	r3, [r3, #2]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d11b      	bne.n	8012518 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80124e0:	7bbb      	ldrb	r3, [r7, #14]
 80124e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d004      	beq.n	80124f4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80124ea:	7bbb      	ldrb	r3, [r7, #14]
 80124ec:	4619      	mov	r1, r3
 80124ee:	6878      	ldr	r0, [r7, #4]
 80124f0:	f007 fc9b 	bl	8019e2a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80124f4:	6878      	ldr	r0, [r7, #4]
 80124f6:	f000 fcc2 	bl	8012e7e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012500:	689b      	ldr	r3, [r3, #8]
 8012502:	6839      	ldr	r1, [r7, #0]
 8012504:	6878      	ldr	r0, [r7, #4]
 8012506:	4798      	blx	r3
 8012508:	4603      	mov	r3, r0
 801250a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 801250c:	e004      	b.n	8012518 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801250e:	6839      	ldr	r1, [r7, #0]
 8012510:	6878      	ldr	r0, [r7, #4]
 8012512:	f000 fbe9 	bl	8012ce8 <USBD_CtlError>
              break;
 8012516:	e000      	b.n	801251a <USBD_StdEPReq+0x154>
              break;
 8012518:	bf00      	nop
          }
          break;
 801251a:	e0ab      	b.n	8012674 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012522:	b2db      	uxtb	r3, r3
 8012524:	2b02      	cmp	r3, #2
 8012526:	d002      	beq.n	801252e <USBD_StdEPReq+0x168>
 8012528:	2b03      	cmp	r3, #3
 801252a:	d032      	beq.n	8012592 <USBD_StdEPReq+0x1cc>
 801252c:	e097      	b.n	801265e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801252e:	7bbb      	ldrb	r3, [r7, #14]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d007      	beq.n	8012544 <USBD_StdEPReq+0x17e>
 8012534:	7bbb      	ldrb	r3, [r7, #14]
 8012536:	2b80      	cmp	r3, #128	; 0x80
 8012538:	d004      	beq.n	8012544 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801253a:	6839      	ldr	r1, [r7, #0]
 801253c:	6878      	ldr	r0, [r7, #4]
 801253e:	f000 fbd3 	bl	8012ce8 <USBD_CtlError>
                break;
 8012542:	e091      	b.n	8012668 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012544:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012548:	2b00      	cmp	r3, #0
 801254a:	da0b      	bge.n	8012564 <USBD_StdEPReq+0x19e>
 801254c:	7bbb      	ldrb	r3, [r7, #14]
 801254e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012552:	4613      	mov	r3, r2
 8012554:	009b      	lsls	r3, r3, #2
 8012556:	4413      	add	r3, r2
 8012558:	009b      	lsls	r3, r3, #2
 801255a:	3310      	adds	r3, #16
 801255c:	687a      	ldr	r2, [r7, #4]
 801255e:	4413      	add	r3, r2
 8012560:	3304      	adds	r3, #4
 8012562:	e00b      	b.n	801257c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012564:	7bbb      	ldrb	r3, [r7, #14]
 8012566:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801256a:	4613      	mov	r3, r2
 801256c:	009b      	lsls	r3, r3, #2
 801256e:	4413      	add	r3, r2
 8012570:	009b      	lsls	r3, r3, #2
 8012572:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012576:	687a      	ldr	r2, [r7, #4]
 8012578:	4413      	add	r3, r2
 801257a:	3304      	adds	r3, #4
 801257c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801257e:	68bb      	ldr	r3, [r7, #8]
 8012580:	2200      	movs	r2, #0
 8012582:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012584:	68bb      	ldr	r3, [r7, #8]
 8012586:	2202      	movs	r2, #2
 8012588:	4619      	mov	r1, r3
 801258a:	6878      	ldr	r0, [r7, #4]
 801258c:	f000 fc1d 	bl	8012dca <USBD_CtlSendData>
              break;
 8012590:	e06a      	b.n	8012668 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8012592:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012596:	2b00      	cmp	r3, #0
 8012598:	da11      	bge.n	80125be <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801259a:	7bbb      	ldrb	r3, [r7, #14]
 801259c:	f003 020f 	and.w	r2, r3, #15
 80125a0:	6879      	ldr	r1, [r7, #4]
 80125a2:	4613      	mov	r3, r2
 80125a4:	009b      	lsls	r3, r3, #2
 80125a6:	4413      	add	r3, r2
 80125a8:	009b      	lsls	r3, r3, #2
 80125aa:	440b      	add	r3, r1
 80125ac:	3324      	adds	r3, #36	; 0x24
 80125ae:	881b      	ldrh	r3, [r3, #0]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d117      	bne.n	80125e4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80125b4:	6839      	ldr	r1, [r7, #0]
 80125b6:	6878      	ldr	r0, [r7, #4]
 80125b8:	f000 fb96 	bl	8012ce8 <USBD_CtlError>
                  break;
 80125bc:	e054      	b.n	8012668 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80125be:	7bbb      	ldrb	r3, [r7, #14]
 80125c0:	f003 020f 	and.w	r2, r3, #15
 80125c4:	6879      	ldr	r1, [r7, #4]
 80125c6:	4613      	mov	r3, r2
 80125c8:	009b      	lsls	r3, r3, #2
 80125ca:	4413      	add	r3, r2
 80125cc:	009b      	lsls	r3, r3, #2
 80125ce:	440b      	add	r3, r1
 80125d0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80125d4:	881b      	ldrh	r3, [r3, #0]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d104      	bne.n	80125e4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80125da:	6839      	ldr	r1, [r7, #0]
 80125dc:	6878      	ldr	r0, [r7, #4]
 80125de:	f000 fb83 	bl	8012ce8 <USBD_CtlError>
                  break;
 80125e2:	e041      	b.n	8012668 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80125e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	da0b      	bge.n	8012604 <USBD_StdEPReq+0x23e>
 80125ec:	7bbb      	ldrb	r3, [r7, #14]
 80125ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80125f2:	4613      	mov	r3, r2
 80125f4:	009b      	lsls	r3, r3, #2
 80125f6:	4413      	add	r3, r2
 80125f8:	009b      	lsls	r3, r3, #2
 80125fa:	3310      	adds	r3, #16
 80125fc:	687a      	ldr	r2, [r7, #4]
 80125fe:	4413      	add	r3, r2
 8012600:	3304      	adds	r3, #4
 8012602:	e00b      	b.n	801261c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012604:	7bbb      	ldrb	r3, [r7, #14]
 8012606:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801260a:	4613      	mov	r3, r2
 801260c:	009b      	lsls	r3, r3, #2
 801260e:	4413      	add	r3, r2
 8012610:	009b      	lsls	r3, r3, #2
 8012612:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012616:	687a      	ldr	r2, [r7, #4]
 8012618:	4413      	add	r3, r2
 801261a:	3304      	adds	r3, #4
 801261c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801261e:	7bbb      	ldrb	r3, [r7, #14]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d002      	beq.n	801262a <USBD_StdEPReq+0x264>
 8012624:	7bbb      	ldrb	r3, [r7, #14]
 8012626:	2b80      	cmp	r3, #128	; 0x80
 8012628:	d103      	bne.n	8012632 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801262a:	68bb      	ldr	r3, [r7, #8]
 801262c:	2200      	movs	r2, #0
 801262e:	601a      	str	r2, [r3, #0]
 8012630:	e00e      	b.n	8012650 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8012632:	7bbb      	ldrb	r3, [r7, #14]
 8012634:	4619      	mov	r1, r3
 8012636:	6878      	ldr	r0, [r7, #4]
 8012638:	f007 fc16 	bl	8019e68 <USBD_LL_IsStallEP>
 801263c:	4603      	mov	r3, r0
 801263e:	2b00      	cmp	r3, #0
 8012640:	d003      	beq.n	801264a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8012642:	68bb      	ldr	r3, [r7, #8]
 8012644:	2201      	movs	r2, #1
 8012646:	601a      	str	r2, [r3, #0]
 8012648:	e002      	b.n	8012650 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 801264a:	68bb      	ldr	r3, [r7, #8]
 801264c:	2200      	movs	r2, #0
 801264e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012650:	68bb      	ldr	r3, [r7, #8]
 8012652:	2202      	movs	r2, #2
 8012654:	4619      	mov	r1, r3
 8012656:	6878      	ldr	r0, [r7, #4]
 8012658:	f000 fbb7 	bl	8012dca <USBD_CtlSendData>
              break;
 801265c:	e004      	b.n	8012668 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 801265e:	6839      	ldr	r1, [r7, #0]
 8012660:	6878      	ldr	r0, [r7, #4]
 8012662:	f000 fb41 	bl	8012ce8 <USBD_CtlError>
              break;
 8012666:	bf00      	nop
          }
          break;
 8012668:	e004      	b.n	8012674 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 801266a:	6839      	ldr	r1, [r7, #0]
 801266c:	6878      	ldr	r0, [r7, #4]
 801266e:	f000 fb3b 	bl	8012ce8 <USBD_CtlError>
          break;
 8012672:	bf00      	nop
      }
      break;
 8012674:	e004      	b.n	8012680 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8012676:	6839      	ldr	r1, [r7, #0]
 8012678:	6878      	ldr	r0, [r7, #4]
 801267a:	f000 fb35 	bl	8012ce8 <USBD_CtlError>
      break;
 801267e:	bf00      	nop
  }

  return ret;
 8012680:	7bfb      	ldrb	r3, [r7, #15]
}
 8012682:	4618      	mov	r0, r3
 8012684:	3710      	adds	r7, #16
 8012686:	46bd      	mov	sp, r7
 8012688:	bd80      	pop	{r7, pc}
	...

0801268c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801268c:	b580      	push	{r7, lr}
 801268e:	b084      	sub	sp, #16
 8012690:	af00      	add	r7, sp, #0
 8012692:	6078      	str	r0, [r7, #4]
 8012694:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012696:	2300      	movs	r3, #0
 8012698:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801269a:	2300      	movs	r3, #0
 801269c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801269e:	2300      	movs	r3, #0
 80126a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80126a2:	683b      	ldr	r3, [r7, #0]
 80126a4:	885b      	ldrh	r3, [r3, #2]
 80126a6:	0a1b      	lsrs	r3, r3, #8
 80126a8:	b29b      	uxth	r3, r3
 80126aa:	3b01      	subs	r3, #1
 80126ac:	2b06      	cmp	r3, #6
 80126ae:	f200 8128 	bhi.w	8012902 <USBD_GetDescriptor+0x276>
 80126b2:	a201      	add	r2, pc, #4	; (adr r2, 80126b8 <USBD_GetDescriptor+0x2c>)
 80126b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126b8:	080126d5 	.word	0x080126d5
 80126bc:	080126ed 	.word	0x080126ed
 80126c0:	0801272d 	.word	0x0801272d
 80126c4:	08012903 	.word	0x08012903
 80126c8:	08012903 	.word	0x08012903
 80126cc:	080128a3 	.word	0x080128a3
 80126d0:	080128cf 	.word	0x080128cf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	687a      	ldr	r2, [r7, #4]
 80126de:	7c12      	ldrb	r2, [r2, #16]
 80126e0:	f107 0108 	add.w	r1, r7, #8
 80126e4:	4610      	mov	r0, r2
 80126e6:	4798      	blx	r3
 80126e8:	60f8      	str	r0, [r7, #12]
      break;
 80126ea:	e112      	b.n	8012912 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	7c1b      	ldrb	r3, [r3, #16]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d10d      	bne.n	8012710 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80126fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80126fc:	f107 0208 	add.w	r2, r7, #8
 8012700:	4610      	mov	r0, r2
 8012702:	4798      	blx	r3
 8012704:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	3301      	adds	r3, #1
 801270a:	2202      	movs	r2, #2
 801270c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801270e:	e100      	b.n	8012912 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012718:	f107 0208 	add.w	r2, r7, #8
 801271c:	4610      	mov	r0, r2
 801271e:	4798      	blx	r3
 8012720:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	3301      	adds	r3, #1
 8012726:	2202      	movs	r2, #2
 8012728:	701a      	strb	r2, [r3, #0]
      break;
 801272a:	e0f2      	b.n	8012912 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801272c:	683b      	ldr	r3, [r7, #0]
 801272e:	885b      	ldrh	r3, [r3, #2]
 8012730:	b2db      	uxtb	r3, r3
 8012732:	2b05      	cmp	r3, #5
 8012734:	f200 80ac 	bhi.w	8012890 <USBD_GetDescriptor+0x204>
 8012738:	a201      	add	r2, pc, #4	; (adr r2, 8012740 <USBD_GetDescriptor+0xb4>)
 801273a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801273e:	bf00      	nop
 8012740:	08012759 	.word	0x08012759
 8012744:	0801278d 	.word	0x0801278d
 8012748:	080127c1 	.word	0x080127c1
 801274c:	080127f5 	.word	0x080127f5
 8012750:	08012829 	.word	0x08012829
 8012754:	0801285d 	.word	0x0801285d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801275e:	685b      	ldr	r3, [r3, #4]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d00b      	beq.n	801277c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801276a:	685b      	ldr	r3, [r3, #4]
 801276c:	687a      	ldr	r2, [r7, #4]
 801276e:	7c12      	ldrb	r2, [r2, #16]
 8012770:	f107 0108 	add.w	r1, r7, #8
 8012774:	4610      	mov	r0, r2
 8012776:	4798      	blx	r3
 8012778:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801277a:	e091      	b.n	80128a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801277c:	6839      	ldr	r1, [r7, #0]
 801277e:	6878      	ldr	r0, [r7, #4]
 8012780:	f000 fab2 	bl	8012ce8 <USBD_CtlError>
            err++;
 8012784:	7afb      	ldrb	r3, [r7, #11]
 8012786:	3301      	adds	r3, #1
 8012788:	72fb      	strb	r3, [r7, #11]
          break;
 801278a:	e089      	b.n	80128a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012792:	689b      	ldr	r3, [r3, #8]
 8012794:	2b00      	cmp	r3, #0
 8012796:	d00b      	beq.n	80127b0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801279e:	689b      	ldr	r3, [r3, #8]
 80127a0:	687a      	ldr	r2, [r7, #4]
 80127a2:	7c12      	ldrb	r2, [r2, #16]
 80127a4:	f107 0108 	add.w	r1, r7, #8
 80127a8:	4610      	mov	r0, r2
 80127aa:	4798      	blx	r3
 80127ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80127ae:	e077      	b.n	80128a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80127b0:	6839      	ldr	r1, [r7, #0]
 80127b2:	6878      	ldr	r0, [r7, #4]
 80127b4:	f000 fa98 	bl	8012ce8 <USBD_CtlError>
            err++;
 80127b8:	7afb      	ldrb	r3, [r7, #11]
 80127ba:	3301      	adds	r3, #1
 80127bc:	72fb      	strb	r3, [r7, #11]
          break;
 80127be:	e06f      	b.n	80128a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80127c6:	68db      	ldr	r3, [r3, #12]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d00b      	beq.n	80127e4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80127d2:	68db      	ldr	r3, [r3, #12]
 80127d4:	687a      	ldr	r2, [r7, #4]
 80127d6:	7c12      	ldrb	r2, [r2, #16]
 80127d8:	f107 0108 	add.w	r1, r7, #8
 80127dc:	4610      	mov	r0, r2
 80127de:	4798      	blx	r3
 80127e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80127e2:	e05d      	b.n	80128a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80127e4:	6839      	ldr	r1, [r7, #0]
 80127e6:	6878      	ldr	r0, [r7, #4]
 80127e8:	f000 fa7e 	bl	8012ce8 <USBD_CtlError>
            err++;
 80127ec:	7afb      	ldrb	r3, [r7, #11]
 80127ee:	3301      	adds	r3, #1
 80127f0:	72fb      	strb	r3, [r7, #11]
          break;
 80127f2:	e055      	b.n	80128a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80127fa:	691b      	ldr	r3, [r3, #16]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d00b      	beq.n	8012818 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012806:	691b      	ldr	r3, [r3, #16]
 8012808:	687a      	ldr	r2, [r7, #4]
 801280a:	7c12      	ldrb	r2, [r2, #16]
 801280c:	f107 0108 	add.w	r1, r7, #8
 8012810:	4610      	mov	r0, r2
 8012812:	4798      	blx	r3
 8012814:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012816:	e043      	b.n	80128a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012818:	6839      	ldr	r1, [r7, #0]
 801281a:	6878      	ldr	r0, [r7, #4]
 801281c:	f000 fa64 	bl	8012ce8 <USBD_CtlError>
            err++;
 8012820:	7afb      	ldrb	r3, [r7, #11]
 8012822:	3301      	adds	r3, #1
 8012824:	72fb      	strb	r3, [r7, #11]
          break;
 8012826:	e03b      	b.n	80128a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801282e:	695b      	ldr	r3, [r3, #20]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d00b      	beq.n	801284c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801283a:	695b      	ldr	r3, [r3, #20]
 801283c:	687a      	ldr	r2, [r7, #4]
 801283e:	7c12      	ldrb	r2, [r2, #16]
 8012840:	f107 0108 	add.w	r1, r7, #8
 8012844:	4610      	mov	r0, r2
 8012846:	4798      	blx	r3
 8012848:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801284a:	e029      	b.n	80128a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801284c:	6839      	ldr	r1, [r7, #0]
 801284e:	6878      	ldr	r0, [r7, #4]
 8012850:	f000 fa4a 	bl	8012ce8 <USBD_CtlError>
            err++;
 8012854:	7afb      	ldrb	r3, [r7, #11]
 8012856:	3301      	adds	r3, #1
 8012858:	72fb      	strb	r3, [r7, #11]
          break;
 801285a:	e021      	b.n	80128a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012862:	699b      	ldr	r3, [r3, #24]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d00b      	beq.n	8012880 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801286e:	699b      	ldr	r3, [r3, #24]
 8012870:	687a      	ldr	r2, [r7, #4]
 8012872:	7c12      	ldrb	r2, [r2, #16]
 8012874:	f107 0108 	add.w	r1, r7, #8
 8012878:	4610      	mov	r0, r2
 801287a:	4798      	blx	r3
 801287c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801287e:	e00f      	b.n	80128a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012880:	6839      	ldr	r1, [r7, #0]
 8012882:	6878      	ldr	r0, [r7, #4]
 8012884:	f000 fa30 	bl	8012ce8 <USBD_CtlError>
            err++;
 8012888:	7afb      	ldrb	r3, [r7, #11]
 801288a:	3301      	adds	r3, #1
 801288c:	72fb      	strb	r3, [r7, #11]
          break;
 801288e:	e007      	b.n	80128a0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012890:	6839      	ldr	r1, [r7, #0]
 8012892:	6878      	ldr	r0, [r7, #4]
 8012894:	f000 fa28 	bl	8012ce8 <USBD_CtlError>
          err++;
 8012898:	7afb      	ldrb	r3, [r7, #11]
 801289a:	3301      	adds	r3, #1
 801289c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801289e:	bf00      	nop
      }
      break;
 80128a0:	e037      	b.n	8012912 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	7c1b      	ldrb	r3, [r3, #16]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d109      	bne.n	80128be <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80128b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128b2:	f107 0208 	add.w	r2, r7, #8
 80128b6:	4610      	mov	r0, r2
 80128b8:	4798      	blx	r3
 80128ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80128bc:	e029      	b.n	8012912 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80128be:	6839      	ldr	r1, [r7, #0]
 80128c0:	6878      	ldr	r0, [r7, #4]
 80128c2:	f000 fa11 	bl	8012ce8 <USBD_CtlError>
        err++;
 80128c6:	7afb      	ldrb	r3, [r7, #11]
 80128c8:	3301      	adds	r3, #1
 80128ca:	72fb      	strb	r3, [r7, #11]
      break;
 80128cc:	e021      	b.n	8012912 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	7c1b      	ldrb	r3, [r3, #16]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d10d      	bne.n	80128f2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80128dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128de:	f107 0208 	add.w	r2, r7, #8
 80128e2:	4610      	mov	r0, r2
 80128e4:	4798      	blx	r3
 80128e6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	3301      	adds	r3, #1
 80128ec:	2207      	movs	r2, #7
 80128ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80128f0:	e00f      	b.n	8012912 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80128f2:	6839      	ldr	r1, [r7, #0]
 80128f4:	6878      	ldr	r0, [r7, #4]
 80128f6:	f000 f9f7 	bl	8012ce8 <USBD_CtlError>
        err++;
 80128fa:	7afb      	ldrb	r3, [r7, #11]
 80128fc:	3301      	adds	r3, #1
 80128fe:	72fb      	strb	r3, [r7, #11]
      break;
 8012900:	e007      	b.n	8012912 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8012902:	6839      	ldr	r1, [r7, #0]
 8012904:	6878      	ldr	r0, [r7, #4]
 8012906:	f000 f9ef 	bl	8012ce8 <USBD_CtlError>
      err++;
 801290a:	7afb      	ldrb	r3, [r7, #11]
 801290c:	3301      	adds	r3, #1
 801290e:	72fb      	strb	r3, [r7, #11]
      break;
 8012910:	bf00      	nop
  }

  if (err != 0U)
 8012912:	7afb      	ldrb	r3, [r7, #11]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d11e      	bne.n	8012956 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8012918:	683b      	ldr	r3, [r7, #0]
 801291a:	88db      	ldrh	r3, [r3, #6]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d016      	beq.n	801294e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8012920:	893b      	ldrh	r3, [r7, #8]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d00e      	beq.n	8012944 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8012926:	683b      	ldr	r3, [r7, #0]
 8012928:	88da      	ldrh	r2, [r3, #6]
 801292a:	893b      	ldrh	r3, [r7, #8]
 801292c:	4293      	cmp	r3, r2
 801292e:	bf28      	it	cs
 8012930:	4613      	movcs	r3, r2
 8012932:	b29b      	uxth	r3, r3
 8012934:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012936:	893b      	ldrh	r3, [r7, #8]
 8012938:	461a      	mov	r2, r3
 801293a:	68f9      	ldr	r1, [r7, #12]
 801293c:	6878      	ldr	r0, [r7, #4]
 801293e:	f000 fa44 	bl	8012dca <USBD_CtlSendData>
 8012942:	e009      	b.n	8012958 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012944:	6839      	ldr	r1, [r7, #0]
 8012946:	6878      	ldr	r0, [r7, #4]
 8012948:	f000 f9ce 	bl	8012ce8 <USBD_CtlError>
 801294c:	e004      	b.n	8012958 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801294e:	6878      	ldr	r0, [r7, #4]
 8012950:	f000 fa95 	bl	8012e7e <USBD_CtlSendStatus>
 8012954:	e000      	b.n	8012958 <USBD_GetDescriptor+0x2cc>
    return;
 8012956:	bf00      	nop
  }
}
 8012958:	3710      	adds	r7, #16
 801295a:	46bd      	mov	sp, r7
 801295c:	bd80      	pop	{r7, pc}
 801295e:	bf00      	nop

08012960 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b084      	sub	sp, #16
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
 8012968:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801296a:	683b      	ldr	r3, [r7, #0]
 801296c:	889b      	ldrh	r3, [r3, #4]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d131      	bne.n	80129d6 <USBD_SetAddress+0x76>
 8012972:	683b      	ldr	r3, [r7, #0]
 8012974:	88db      	ldrh	r3, [r3, #6]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d12d      	bne.n	80129d6 <USBD_SetAddress+0x76>
 801297a:	683b      	ldr	r3, [r7, #0]
 801297c:	885b      	ldrh	r3, [r3, #2]
 801297e:	2b7f      	cmp	r3, #127	; 0x7f
 8012980:	d829      	bhi.n	80129d6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	885b      	ldrh	r3, [r3, #2]
 8012986:	b2db      	uxtb	r3, r3
 8012988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801298c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012994:	b2db      	uxtb	r3, r3
 8012996:	2b03      	cmp	r3, #3
 8012998:	d104      	bne.n	80129a4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801299a:	6839      	ldr	r1, [r7, #0]
 801299c:	6878      	ldr	r0, [r7, #4]
 801299e:	f000 f9a3 	bl	8012ce8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80129a2:	e01d      	b.n	80129e0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	7bfa      	ldrb	r2, [r7, #15]
 80129a8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80129ac:	7bfb      	ldrb	r3, [r7, #15]
 80129ae:	4619      	mov	r1, r3
 80129b0:	6878      	ldr	r0, [r7, #4]
 80129b2:	f007 fa85 	bl	8019ec0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80129b6:	6878      	ldr	r0, [r7, #4]
 80129b8:	f000 fa61 	bl	8012e7e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80129bc:	7bfb      	ldrb	r3, [r7, #15]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d004      	beq.n	80129cc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	2202      	movs	r2, #2
 80129c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80129ca:	e009      	b.n	80129e0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	2201      	movs	r2, #1
 80129d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80129d4:	e004      	b.n	80129e0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80129d6:	6839      	ldr	r1, [r7, #0]
 80129d8:	6878      	ldr	r0, [r7, #4]
 80129da:	f000 f985 	bl	8012ce8 <USBD_CtlError>
  }
}
 80129de:	bf00      	nop
 80129e0:	bf00      	nop
 80129e2:	3710      	adds	r7, #16
 80129e4:	46bd      	mov	sp, r7
 80129e6:	bd80      	pop	{r7, pc}

080129e8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b084      	sub	sp, #16
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]
 80129f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80129f2:	2300      	movs	r3, #0
 80129f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80129f6:	683b      	ldr	r3, [r7, #0]
 80129f8:	885b      	ldrh	r3, [r3, #2]
 80129fa:	b2da      	uxtb	r2, r3
 80129fc:	4b4c      	ldr	r3, [pc, #304]	; (8012b30 <USBD_SetConfig+0x148>)
 80129fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012a00:	4b4b      	ldr	r3, [pc, #300]	; (8012b30 <USBD_SetConfig+0x148>)
 8012a02:	781b      	ldrb	r3, [r3, #0]
 8012a04:	2b01      	cmp	r3, #1
 8012a06:	d905      	bls.n	8012a14 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012a08:	6839      	ldr	r1, [r7, #0]
 8012a0a:	6878      	ldr	r0, [r7, #4]
 8012a0c:	f000 f96c 	bl	8012ce8 <USBD_CtlError>
    return USBD_FAIL;
 8012a10:	2303      	movs	r3, #3
 8012a12:	e088      	b.n	8012b26 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012a1a:	b2db      	uxtb	r3, r3
 8012a1c:	2b02      	cmp	r3, #2
 8012a1e:	d002      	beq.n	8012a26 <USBD_SetConfig+0x3e>
 8012a20:	2b03      	cmp	r3, #3
 8012a22:	d025      	beq.n	8012a70 <USBD_SetConfig+0x88>
 8012a24:	e071      	b.n	8012b0a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012a26:	4b42      	ldr	r3, [pc, #264]	; (8012b30 <USBD_SetConfig+0x148>)
 8012a28:	781b      	ldrb	r3, [r3, #0]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d01c      	beq.n	8012a68 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8012a2e:	4b40      	ldr	r3, [pc, #256]	; (8012b30 <USBD_SetConfig+0x148>)
 8012a30:	781b      	ldrb	r3, [r3, #0]
 8012a32:	461a      	mov	r2, r3
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012a38:	4b3d      	ldr	r3, [pc, #244]	; (8012b30 <USBD_SetConfig+0x148>)
 8012a3a:	781b      	ldrb	r3, [r3, #0]
 8012a3c:	4619      	mov	r1, r3
 8012a3e:	6878      	ldr	r0, [r7, #4]
 8012a40:	f7ff f948 	bl	8011cd4 <USBD_SetClassConfig>
 8012a44:	4603      	mov	r3, r0
 8012a46:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012a48:	7bfb      	ldrb	r3, [r7, #15]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d004      	beq.n	8012a58 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8012a4e:	6839      	ldr	r1, [r7, #0]
 8012a50:	6878      	ldr	r0, [r7, #4]
 8012a52:	f000 f949 	bl	8012ce8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012a56:	e065      	b.n	8012b24 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012a58:	6878      	ldr	r0, [r7, #4]
 8012a5a:	f000 fa10 	bl	8012e7e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	2203      	movs	r2, #3
 8012a62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012a66:	e05d      	b.n	8012b24 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012a68:	6878      	ldr	r0, [r7, #4]
 8012a6a:	f000 fa08 	bl	8012e7e <USBD_CtlSendStatus>
      break;
 8012a6e:	e059      	b.n	8012b24 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012a70:	4b2f      	ldr	r3, [pc, #188]	; (8012b30 <USBD_SetConfig+0x148>)
 8012a72:	781b      	ldrb	r3, [r3, #0]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d112      	bne.n	8012a9e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	2202      	movs	r2, #2
 8012a7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8012a80:	4b2b      	ldr	r3, [pc, #172]	; (8012b30 <USBD_SetConfig+0x148>)
 8012a82:	781b      	ldrb	r3, [r3, #0]
 8012a84:	461a      	mov	r2, r3
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012a8a:	4b29      	ldr	r3, [pc, #164]	; (8012b30 <USBD_SetConfig+0x148>)
 8012a8c:	781b      	ldrb	r3, [r3, #0]
 8012a8e:	4619      	mov	r1, r3
 8012a90:	6878      	ldr	r0, [r7, #4]
 8012a92:	f7ff f93b 	bl	8011d0c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012a96:	6878      	ldr	r0, [r7, #4]
 8012a98:	f000 f9f1 	bl	8012e7e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012a9c:	e042      	b.n	8012b24 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8012a9e:	4b24      	ldr	r3, [pc, #144]	; (8012b30 <USBD_SetConfig+0x148>)
 8012aa0:	781b      	ldrb	r3, [r3, #0]
 8012aa2:	461a      	mov	r2, r3
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	685b      	ldr	r3, [r3, #4]
 8012aa8:	429a      	cmp	r2, r3
 8012aaa:	d02a      	beq.n	8012b02 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	685b      	ldr	r3, [r3, #4]
 8012ab0:	b2db      	uxtb	r3, r3
 8012ab2:	4619      	mov	r1, r3
 8012ab4:	6878      	ldr	r0, [r7, #4]
 8012ab6:	f7ff f929 	bl	8011d0c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012aba:	4b1d      	ldr	r3, [pc, #116]	; (8012b30 <USBD_SetConfig+0x148>)
 8012abc:	781b      	ldrb	r3, [r3, #0]
 8012abe:	461a      	mov	r2, r3
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012ac4:	4b1a      	ldr	r3, [pc, #104]	; (8012b30 <USBD_SetConfig+0x148>)
 8012ac6:	781b      	ldrb	r3, [r3, #0]
 8012ac8:	4619      	mov	r1, r3
 8012aca:	6878      	ldr	r0, [r7, #4]
 8012acc:	f7ff f902 	bl	8011cd4 <USBD_SetClassConfig>
 8012ad0:	4603      	mov	r3, r0
 8012ad2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012ad4:	7bfb      	ldrb	r3, [r7, #15]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d00f      	beq.n	8012afa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8012ada:	6839      	ldr	r1, [r7, #0]
 8012adc:	6878      	ldr	r0, [r7, #4]
 8012ade:	f000 f903 	bl	8012ce8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	685b      	ldr	r3, [r3, #4]
 8012ae6:	b2db      	uxtb	r3, r3
 8012ae8:	4619      	mov	r1, r3
 8012aea:	6878      	ldr	r0, [r7, #4]
 8012aec:	f7ff f90e 	bl	8011d0c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	2202      	movs	r2, #2
 8012af4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012af8:	e014      	b.n	8012b24 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012afa:	6878      	ldr	r0, [r7, #4]
 8012afc:	f000 f9bf 	bl	8012e7e <USBD_CtlSendStatus>
      break;
 8012b00:	e010      	b.n	8012b24 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012b02:	6878      	ldr	r0, [r7, #4]
 8012b04:	f000 f9bb 	bl	8012e7e <USBD_CtlSendStatus>
      break;
 8012b08:	e00c      	b.n	8012b24 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8012b0a:	6839      	ldr	r1, [r7, #0]
 8012b0c:	6878      	ldr	r0, [r7, #4]
 8012b0e:	f000 f8eb 	bl	8012ce8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012b12:	4b07      	ldr	r3, [pc, #28]	; (8012b30 <USBD_SetConfig+0x148>)
 8012b14:	781b      	ldrb	r3, [r3, #0]
 8012b16:	4619      	mov	r1, r3
 8012b18:	6878      	ldr	r0, [r7, #4]
 8012b1a:	f7ff f8f7 	bl	8011d0c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012b1e:	2303      	movs	r3, #3
 8012b20:	73fb      	strb	r3, [r7, #15]
      break;
 8012b22:	bf00      	nop
  }

  return ret;
 8012b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b26:	4618      	mov	r0, r3
 8012b28:	3710      	adds	r7, #16
 8012b2a:	46bd      	mov	sp, r7
 8012b2c:	bd80      	pop	{r7, pc}
 8012b2e:	bf00      	nop
 8012b30:	20000831 	.word	0x20000831

08012b34 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012b34:	b580      	push	{r7, lr}
 8012b36:	b082      	sub	sp, #8
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	6078      	str	r0, [r7, #4]
 8012b3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012b3e:	683b      	ldr	r3, [r7, #0]
 8012b40:	88db      	ldrh	r3, [r3, #6]
 8012b42:	2b01      	cmp	r3, #1
 8012b44:	d004      	beq.n	8012b50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012b46:	6839      	ldr	r1, [r7, #0]
 8012b48:	6878      	ldr	r0, [r7, #4]
 8012b4a:	f000 f8cd 	bl	8012ce8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012b4e:	e023      	b.n	8012b98 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012b56:	b2db      	uxtb	r3, r3
 8012b58:	2b02      	cmp	r3, #2
 8012b5a:	dc02      	bgt.n	8012b62 <USBD_GetConfig+0x2e>
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	dc03      	bgt.n	8012b68 <USBD_GetConfig+0x34>
 8012b60:	e015      	b.n	8012b8e <USBD_GetConfig+0x5a>
 8012b62:	2b03      	cmp	r3, #3
 8012b64:	d00b      	beq.n	8012b7e <USBD_GetConfig+0x4a>
 8012b66:	e012      	b.n	8012b8e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	3308      	adds	r3, #8
 8012b72:	2201      	movs	r2, #1
 8012b74:	4619      	mov	r1, r3
 8012b76:	6878      	ldr	r0, [r7, #4]
 8012b78:	f000 f927 	bl	8012dca <USBD_CtlSendData>
        break;
 8012b7c:	e00c      	b.n	8012b98 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	3304      	adds	r3, #4
 8012b82:	2201      	movs	r2, #1
 8012b84:	4619      	mov	r1, r3
 8012b86:	6878      	ldr	r0, [r7, #4]
 8012b88:	f000 f91f 	bl	8012dca <USBD_CtlSendData>
        break;
 8012b8c:	e004      	b.n	8012b98 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012b8e:	6839      	ldr	r1, [r7, #0]
 8012b90:	6878      	ldr	r0, [r7, #4]
 8012b92:	f000 f8a9 	bl	8012ce8 <USBD_CtlError>
        break;
 8012b96:	bf00      	nop
}
 8012b98:	bf00      	nop
 8012b9a:	3708      	adds	r7, #8
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	bd80      	pop	{r7, pc}

08012ba0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012ba0:	b580      	push	{r7, lr}
 8012ba2:	b082      	sub	sp, #8
 8012ba4:	af00      	add	r7, sp, #0
 8012ba6:	6078      	str	r0, [r7, #4]
 8012ba8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012bb0:	b2db      	uxtb	r3, r3
 8012bb2:	3b01      	subs	r3, #1
 8012bb4:	2b02      	cmp	r3, #2
 8012bb6:	d81e      	bhi.n	8012bf6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012bb8:	683b      	ldr	r3, [r7, #0]
 8012bba:	88db      	ldrh	r3, [r3, #6]
 8012bbc:	2b02      	cmp	r3, #2
 8012bbe:	d004      	beq.n	8012bca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012bc0:	6839      	ldr	r1, [r7, #0]
 8012bc2:	6878      	ldr	r0, [r7, #4]
 8012bc4:	f000 f890 	bl	8012ce8 <USBD_CtlError>
        break;
 8012bc8:	e01a      	b.n	8012c00 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	2201      	movs	r2, #1
 8012bce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d005      	beq.n	8012be6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	68db      	ldr	r3, [r3, #12]
 8012bde:	f043 0202 	orr.w	r2, r3, #2
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	330c      	adds	r3, #12
 8012bea:	2202      	movs	r2, #2
 8012bec:	4619      	mov	r1, r3
 8012bee:	6878      	ldr	r0, [r7, #4]
 8012bf0:	f000 f8eb 	bl	8012dca <USBD_CtlSendData>
      break;
 8012bf4:	e004      	b.n	8012c00 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012bf6:	6839      	ldr	r1, [r7, #0]
 8012bf8:	6878      	ldr	r0, [r7, #4]
 8012bfa:	f000 f875 	bl	8012ce8 <USBD_CtlError>
      break;
 8012bfe:	bf00      	nop
  }
}
 8012c00:	bf00      	nop
 8012c02:	3708      	adds	r7, #8
 8012c04:	46bd      	mov	sp, r7
 8012c06:	bd80      	pop	{r7, pc}

08012c08 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b082      	sub	sp, #8
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	6078      	str	r0, [r7, #4]
 8012c10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012c12:	683b      	ldr	r3, [r7, #0]
 8012c14:	885b      	ldrh	r3, [r3, #2]
 8012c16:	2b01      	cmp	r3, #1
 8012c18:	d106      	bne.n	8012c28 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	2201      	movs	r2, #1
 8012c1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012c22:	6878      	ldr	r0, [r7, #4]
 8012c24:	f000 f92b 	bl	8012e7e <USBD_CtlSendStatus>
  }
}
 8012c28:	bf00      	nop
 8012c2a:	3708      	adds	r7, #8
 8012c2c:	46bd      	mov	sp, r7
 8012c2e:	bd80      	pop	{r7, pc}

08012c30 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012c30:	b580      	push	{r7, lr}
 8012c32:	b082      	sub	sp, #8
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	6078      	str	r0, [r7, #4]
 8012c38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012c40:	b2db      	uxtb	r3, r3
 8012c42:	3b01      	subs	r3, #1
 8012c44:	2b02      	cmp	r3, #2
 8012c46:	d80b      	bhi.n	8012c60 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012c48:	683b      	ldr	r3, [r7, #0]
 8012c4a:	885b      	ldrh	r3, [r3, #2]
 8012c4c:	2b01      	cmp	r3, #1
 8012c4e:	d10c      	bne.n	8012c6a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	2200      	movs	r2, #0
 8012c54:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012c58:	6878      	ldr	r0, [r7, #4]
 8012c5a:	f000 f910 	bl	8012e7e <USBD_CtlSendStatus>
      }
      break;
 8012c5e:	e004      	b.n	8012c6a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012c60:	6839      	ldr	r1, [r7, #0]
 8012c62:	6878      	ldr	r0, [r7, #4]
 8012c64:	f000 f840 	bl	8012ce8 <USBD_CtlError>
      break;
 8012c68:	e000      	b.n	8012c6c <USBD_ClrFeature+0x3c>
      break;
 8012c6a:	bf00      	nop
  }
}
 8012c6c:	bf00      	nop
 8012c6e:	3708      	adds	r7, #8
 8012c70:	46bd      	mov	sp, r7
 8012c72:	bd80      	pop	{r7, pc}

08012c74 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012c74:	b580      	push	{r7, lr}
 8012c76:	b084      	sub	sp, #16
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	6078      	str	r0, [r7, #4]
 8012c7c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012c7e:	683b      	ldr	r3, [r7, #0]
 8012c80:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	781a      	ldrb	r2, [r3, #0]
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	3301      	adds	r3, #1
 8012c8e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	781a      	ldrb	r2, [r3, #0]
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	3301      	adds	r3, #1
 8012c9c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012c9e:	68f8      	ldr	r0, [r7, #12]
 8012ca0:	f7ff fabb 	bl	801221a <SWAPBYTE>
 8012ca4:	4603      	mov	r3, r0
 8012ca6:	461a      	mov	r2, r3
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	3301      	adds	r3, #1
 8012cb0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	3301      	adds	r3, #1
 8012cb6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012cb8:	68f8      	ldr	r0, [r7, #12]
 8012cba:	f7ff faae 	bl	801221a <SWAPBYTE>
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	461a      	mov	r2, r3
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	3301      	adds	r3, #1
 8012cca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	3301      	adds	r3, #1
 8012cd0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012cd2:	68f8      	ldr	r0, [r7, #12]
 8012cd4:	f7ff faa1 	bl	801221a <SWAPBYTE>
 8012cd8:	4603      	mov	r3, r0
 8012cda:	461a      	mov	r2, r3
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	80da      	strh	r2, [r3, #6]
}
 8012ce0:	bf00      	nop
 8012ce2:	3710      	adds	r7, #16
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	bd80      	pop	{r7, pc}

08012ce8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	b082      	sub	sp, #8
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	6078      	str	r0, [r7, #4]
 8012cf0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012cf2:	2180      	movs	r1, #128	; 0x80
 8012cf4:	6878      	ldr	r0, [r7, #4]
 8012cf6:	f007 f879 	bl	8019dec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012cfa:	2100      	movs	r1, #0
 8012cfc:	6878      	ldr	r0, [r7, #4]
 8012cfe:	f007 f875 	bl	8019dec <USBD_LL_StallEP>
}
 8012d02:	bf00      	nop
 8012d04:	3708      	adds	r7, #8
 8012d06:	46bd      	mov	sp, r7
 8012d08:	bd80      	pop	{r7, pc}

08012d0a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012d0a:	b580      	push	{r7, lr}
 8012d0c:	b086      	sub	sp, #24
 8012d0e:	af00      	add	r7, sp, #0
 8012d10:	60f8      	str	r0, [r7, #12]
 8012d12:	60b9      	str	r1, [r7, #8]
 8012d14:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012d16:	2300      	movs	r3, #0
 8012d18:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d036      	beq.n	8012d8e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012d24:	6938      	ldr	r0, [r7, #16]
 8012d26:	f000 f836 	bl	8012d96 <USBD_GetLen>
 8012d2a:	4603      	mov	r3, r0
 8012d2c:	3301      	adds	r3, #1
 8012d2e:	b29b      	uxth	r3, r3
 8012d30:	005b      	lsls	r3, r3, #1
 8012d32:	b29a      	uxth	r2, r3
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012d38:	7dfb      	ldrb	r3, [r7, #23]
 8012d3a:	68ba      	ldr	r2, [r7, #8]
 8012d3c:	4413      	add	r3, r2
 8012d3e:	687a      	ldr	r2, [r7, #4]
 8012d40:	7812      	ldrb	r2, [r2, #0]
 8012d42:	701a      	strb	r2, [r3, #0]
  idx++;
 8012d44:	7dfb      	ldrb	r3, [r7, #23]
 8012d46:	3301      	adds	r3, #1
 8012d48:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012d4a:	7dfb      	ldrb	r3, [r7, #23]
 8012d4c:	68ba      	ldr	r2, [r7, #8]
 8012d4e:	4413      	add	r3, r2
 8012d50:	2203      	movs	r2, #3
 8012d52:	701a      	strb	r2, [r3, #0]
  idx++;
 8012d54:	7dfb      	ldrb	r3, [r7, #23]
 8012d56:	3301      	adds	r3, #1
 8012d58:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012d5a:	e013      	b.n	8012d84 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012d5c:	7dfb      	ldrb	r3, [r7, #23]
 8012d5e:	68ba      	ldr	r2, [r7, #8]
 8012d60:	4413      	add	r3, r2
 8012d62:	693a      	ldr	r2, [r7, #16]
 8012d64:	7812      	ldrb	r2, [r2, #0]
 8012d66:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012d68:	693b      	ldr	r3, [r7, #16]
 8012d6a:	3301      	adds	r3, #1
 8012d6c:	613b      	str	r3, [r7, #16]
    idx++;
 8012d6e:	7dfb      	ldrb	r3, [r7, #23]
 8012d70:	3301      	adds	r3, #1
 8012d72:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012d74:	7dfb      	ldrb	r3, [r7, #23]
 8012d76:	68ba      	ldr	r2, [r7, #8]
 8012d78:	4413      	add	r3, r2
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	701a      	strb	r2, [r3, #0]
    idx++;
 8012d7e:	7dfb      	ldrb	r3, [r7, #23]
 8012d80:	3301      	adds	r3, #1
 8012d82:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012d84:	693b      	ldr	r3, [r7, #16]
 8012d86:	781b      	ldrb	r3, [r3, #0]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d1e7      	bne.n	8012d5c <USBD_GetString+0x52>
 8012d8c:	e000      	b.n	8012d90 <USBD_GetString+0x86>
    return;
 8012d8e:	bf00      	nop
  }
}
 8012d90:	3718      	adds	r7, #24
 8012d92:	46bd      	mov	sp, r7
 8012d94:	bd80      	pop	{r7, pc}

08012d96 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012d96:	b480      	push	{r7}
 8012d98:	b085      	sub	sp, #20
 8012d9a:	af00      	add	r7, sp, #0
 8012d9c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012d9e:	2300      	movs	r3, #0
 8012da0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012da6:	e005      	b.n	8012db4 <USBD_GetLen+0x1e>
  {
    len++;
 8012da8:	7bfb      	ldrb	r3, [r7, #15]
 8012daa:	3301      	adds	r3, #1
 8012dac:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012dae:	68bb      	ldr	r3, [r7, #8]
 8012db0:	3301      	adds	r3, #1
 8012db2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012db4:	68bb      	ldr	r3, [r7, #8]
 8012db6:	781b      	ldrb	r3, [r3, #0]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d1f5      	bne.n	8012da8 <USBD_GetLen+0x12>
  }

  return len;
 8012dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	3714      	adds	r7, #20
 8012dc2:	46bd      	mov	sp, r7
 8012dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc8:	4770      	bx	lr

08012dca <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012dca:	b580      	push	{r7, lr}
 8012dcc:	b084      	sub	sp, #16
 8012dce:	af00      	add	r7, sp, #0
 8012dd0:	60f8      	str	r0, [r7, #12]
 8012dd2:	60b9      	str	r1, [r7, #8]
 8012dd4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	2202      	movs	r2, #2
 8012dda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	687a      	ldr	r2, [r7, #4]
 8012de2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	687a      	ldr	r2, [r7, #4]
 8012de8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	68ba      	ldr	r2, [r7, #8]
 8012dee:	2100      	movs	r1, #0
 8012df0:	68f8      	ldr	r0, [r7, #12]
 8012df2:	f007 f884 	bl	8019efe <USBD_LL_Transmit>

  return USBD_OK;
 8012df6:	2300      	movs	r3, #0
}
 8012df8:	4618      	mov	r0, r3
 8012dfa:	3710      	adds	r7, #16
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	bd80      	pop	{r7, pc}

08012e00 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012e00:	b580      	push	{r7, lr}
 8012e02:	b084      	sub	sp, #16
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	60f8      	str	r0, [r7, #12]
 8012e08:	60b9      	str	r1, [r7, #8]
 8012e0a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	68ba      	ldr	r2, [r7, #8]
 8012e10:	2100      	movs	r1, #0
 8012e12:	68f8      	ldr	r0, [r7, #12]
 8012e14:	f007 f873 	bl	8019efe <USBD_LL_Transmit>

  return USBD_OK;
 8012e18:	2300      	movs	r3, #0
}
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	3710      	adds	r7, #16
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	bd80      	pop	{r7, pc}

08012e22 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012e22:	b580      	push	{r7, lr}
 8012e24:	b084      	sub	sp, #16
 8012e26:	af00      	add	r7, sp, #0
 8012e28:	60f8      	str	r0, [r7, #12]
 8012e2a:	60b9      	str	r1, [r7, #8]
 8012e2c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	2203      	movs	r2, #3
 8012e32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	687a      	ldr	r2, [r7, #4]
 8012e3a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	687a      	ldr	r2, [r7, #4]
 8012e42:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	68ba      	ldr	r2, [r7, #8]
 8012e4a:	2100      	movs	r1, #0
 8012e4c:	68f8      	ldr	r0, [r7, #12]
 8012e4e:	f007 f877 	bl	8019f40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012e52:	2300      	movs	r3, #0
}
 8012e54:	4618      	mov	r0, r3
 8012e56:	3710      	adds	r7, #16
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	bd80      	pop	{r7, pc}

08012e5c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	b084      	sub	sp, #16
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	60f8      	str	r0, [r7, #12]
 8012e64:	60b9      	str	r1, [r7, #8]
 8012e66:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	68ba      	ldr	r2, [r7, #8]
 8012e6c:	2100      	movs	r1, #0
 8012e6e:	68f8      	ldr	r0, [r7, #12]
 8012e70:	f007 f866 	bl	8019f40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012e74:	2300      	movs	r3, #0
}
 8012e76:	4618      	mov	r0, r3
 8012e78:	3710      	adds	r7, #16
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	bd80      	pop	{r7, pc}

08012e7e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012e7e:	b580      	push	{r7, lr}
 8012e80:	b082      	sub	sp, #8
 8012e82:	af00      	add	r7, sp, #0
 8012e84:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	2204      	movs	r2, #4
 8012e8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012e8e:	2300      	movs	r3, #0
 8012e90:	2200      	movs	r2, #0
 8012e92:	2100      	movs	r1, #0
 8012e94:	6878      	ldr	r0, [r7, #4]
 8012e96:	f007 f832 	bl	8019efe <USBD_LL_Transmit>

  return USBD_OK;
 8012e9a:	2300      	movs	r3, #0
}
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	3708      	adds	r7, #8
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	bd80      	pop	{r7, pc}

08012ea4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b082      	sub	sp, #8
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	2205      	movs	r2, #5
 8012eb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	2200      	movs	r2, #0
 8012eb8:	2100      	movs	r1, #0
 8012eba:	6878      	ldr	r0, [r7, #4]
 8012ebc:	f007 f840 	bl	8019f40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012ec0:	2300      	movs	r3, #0
}
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	3708      	adds	r7, #8
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	bd80      	pop	{r7, pc}
	...

08012ecc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b084      	sub	sp, #16
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012ed6:	79fb      	ldrb	r3, [r7, #7]
 8012ed8:	4a08      	ldr	r2, [pc, #32]	; (8012efc <disk_status+0x30>)
 8012eda:	009b      	lsls	r3, r3, #2
 8012edc:	4413      	add	r3, r2
 8012ede:	685b      	ldr	r3, [r3, #4]
 8012ee0:	685b      	ldr	r3, [r3, #4]
 8012ee2:	79fa      	ldrb	r2, [r7, #7]
 8012ee4:	4905      	ldr	r1, [pc, #20]	; (8012efc <disk_status+0x30>)
 8012ee6:	440a      	add	r2, r1
 8012ee8:	7a12      	ldrb	r2, [r2, #8]
 8012eea:	4610      	mov	r0, r2
 8012eec:	4798      	blx	r3
 8012eee:	4603      	mov	r3, r0
 8012ef0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	3710      	adds	r7, #16
 8012ef8:	46bd      	mov	sp, r7
 8012efa:	bd80      	pop	{r7, pc}
 8012efc:	2000085c 	.word	0x2000085c

08012f00 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012f00:	b580      	push	{r7, lr}
 8012f02:	b084      	sub	sp, #16
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	4603      	mov	r3, r0
 8012f08:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8012f0e:	79fb      	ldrb	r3, [r7, #7]
 8012f10:	4a0d      	ldr	r2, [pc, #52]	; (8012f48 <disk_initialize+0x48>)
 8012f12:	5cd3      	ldrb	r3, [r2, r3]
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d111      	bne.n	8012f3c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012f18:	79fb      	ldrb	r3, [r7, #7]
 8012f1a:	4a0b      	ldr	r2, [pc, #44]	; (8012f48 <disk_initialize+0x48>)
 8012f1c:	2101      	movs	r1, #1
 8012f1e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012f20:	79fb      	ldrb	r3, [r7, #7]
 8012f22:	4a09      	ldr	r2, [pc, #36]	; (8012f48 <disk_initialize+0x48>)
 8012f24:	009b      	lsls	r3, r3, #2
 8012f26:	4413      	add	r3, r2
 8012f28:	685b      	ldr	r3, [r3, #4]
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	79fa      	ldrb	r2, [r7, #7]
 8012f2e:	4906      	ldr	r1, [pc, #24]	; (8012f48 <disk_initialize+0x48>)
 8012f30:	440a      	add	r2, r1
 8012f32:	7a12      	ldrb	r2, [r2, #8]
 8012f34:	4610      	mov	r0, r2
 8012f36:	4798      	blx	r3
 8012f38:	4603      	mov	r3, r0
 8012f3a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8012f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f3e:	4618      	mov	r0, r3
 8012f40:	3710      	adds	r7, #16
 8012f42:	46bd      	mov	sp, r7
 8012f44:	bd80      	pop	{r7, pc}
 8012f46:	bf00      	nop
 8012f48:	2000085c 	.word	0x2000085c

08012f4c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012f4c:	b590      	push	{r4, r7, lr}
 8012f4e:	b087      	sub	sp, #28
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	60b9      	str	r1, [r7, #8]
 8012f54:	607a      	str	r2, [r7, #4]
 8012f56:	603b      	str	r3, [r7, #0]
 8012f58:	4603      	mov	r3, r0
 8012f5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012f5c:	7bfb      	ldrb	r3, [r7, #15]
 8012f5e:	4a0a      	ldr	r2, [pc, #40]	; (8012f88 <disk_read+0x3c>)
 8012f60:	009b      	lsls	r3, r3, #2
 8012f62:	4413      	add	r3, r2
 8012f64:	685b      	ldr	r3, [r3, #4]
 8012f66:	689c      	ldr	r4, [r3, #8]
 8012f68:	7bfb      	ldrb	r3, [r7, #15]
 8012f6a:	4a07      	ldr	r2, [pc, #28]	; (8012f88 <disk_read+0x3c>)
 8012f6c:	4413      	add	r3, r2
 8012f6e:	7a18      	ldrb	r0, [r3, #8]
 8012f70:	683b      	ldr	r3, [r7, #0]
 8012f72:	687a      	ldr	r2, [r7, #4]
 8012f74:	68b9      	ldr	r1, [r7, #8]
 8012f76:	47a0      	blx	r4
 8012f78:	4603      	mov	r3, r0
 8012f7a:	75fb      	strb	r3, [r7, #23]
  return res;
 8012f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f7e:	4618      	mov	r0, r3
 8012f80:	371c      	adds	r7, #28
 8012f82:	46bd      	mov	sp, r7
 8012f84:	bd90      	pop	{r4, r7, pc}
 8012f86:	bf00      	nop
 8012f88:	2000085c 	.word	0x2000085c

08012f8c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012f8c:	b590      	push	{r4, r7, lr}
 8012f8e:	b087      	sub	sp, #28
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	60b9      	str	r1, [r7, #8]
 8012f94:	607a      	str	r2, [r7, #4]
 8012f96:	603b      	str	r3, [r7, #0]
 8012f98:	4603      	mov	r3, r0
 8012f9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012f9c:	7bfb      	ldrb	r3, [r7, #15]
 8012f9e:	4a0a      	ldr	r2, [pc, #40]	; (8012fc8 <disk_write+0x3c>)
 8012fa0:	009b      	lsls	r3, r3, #2
 8012fa2:	4413      	add	r3, r2
 8012fa4:	685b      	ldr	r3, [r3, #4]
 8012fa6:	68dc      	ldr	r4, [r3, #12]
 8012fa8:	7bfb      	ldrb	r3, [r7, #15]
 8012faa:	4a07      	ldr	r2, [pc, #28]	; (8012fc8 <disk_write+0x3c>)
 8012fac:	4413      	add	r3, r2
 8012fae:	7a18      	ldrb	r0, [r3, #8]
 8012fb0:	683b      	ldr	r3, [r7, #0]
 8012fb2:	687a      	ldr	r2, [r7, #4]
 8012fb4:	68b9      	ldr	r1, [r7, #8]
 8012fb6:	47a0      	blx	r4
 8012fb8:	4603      	mov	r3, r0
 8012fba:	75fb      	strb	r3, [r7, #23]
  return res;
 8012fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8012fbe:	4618      	mov	r0, r3
 8012fc0:	371c      	adds	r7, #28
 8012fc2:	46bd      	mov	sp, r7
 8012fc4:	bd90      	pop	{r4, r7, pc}
 8012fc6:	bf00      	nop
 8012fc8:	2000085c 	.word	0x2000085c

08012fcc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b084      	sub	sp, #16
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	603a      	str	r2, [r7, #0]
 8012fd6:	71fb      	strb	r3, [r7, #7]
 8012fd8:	460b      	mov	r3, r1
 8012fda:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012fdc:	79fb      	ldrb	r3, [r7, #7]
 8012fde:	4a09      	ldr	r2, [pc, #36]	; (8013004 <disk_ioctl+0x38>)
 8012fe0:	009b      	lsls	r3, r3, #2
 8012fe2:	4413      	add	r3, r2
 8012fe4:	685b      	ldr	r3, [r3, #4]
 8012fe6:	691b      	ldr	r3, [r3, #16]
 8012fe8:	79fa      	ldrb	r2, [r7, #7]
 8012fea:	4906      	ldr	r1, [pc, #24]	; (8013004 <disk_ioctl+0x38>)
 8012fec:	440a      	add	r2, r1
 8012fee:	7a10      	ldrb	r0, [r2, #8]
 8012ff0:	79b9      	ldrb	r1, [r7, #6]
 8012ff2:	683a      	ldr	r2, [r7, #0]
 8012ff4:	4798      	blx	r3
 8012ff6:	4603      	mov	r3, r0
 8012ff8:	73fb      	strb	r3, [r7, #15]
  return res;
 8012ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	3710      	adds	r7, #16
 8013000:	46bd      	mov	sp, r7
 8013002:	bd80      	pop	{r7, pc}
 8013004:	2000085c 	.word	0x2000085c

08013008 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8013008:	b480      	push	{r7}
 801300a:	b085      	sub	sp, #20
 801300c:	af00      	add	r7, sp, #0
 801300e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	3301      	adds	r3, #1
 8013014:	781b      	ldrb	r3, [r3, #0]
 8013016:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8013018:	89fb      	ldrh	r3, [r7, #14]
 801301a:	021b      	lsls	r3, r3, #8
 801301c:	b21a      	sxth	r2, r3
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	781b      	ldrb	r3, [r3, #0]
 8013022:	b21b      	sxth	r3, r3
 8013024:	4313      	orrs	r3, r2
 8013026:	b21b      	sxth	r3, r3
 8013028:	81fb      	strh	r3, [r7, #14]
	return rv;
 801302a:	89fb      	ldrh	r3, [r7, #14]
}
 801302c:	4618      	mov	r0, r3
 801302e:	3714      	adds	r7, #20
 8013030:	46bd      	mov	sp, r7
 8013032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013036:	4770      	bx	lr

08013038 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8013038:	b480      	push	{r7}
 801303a:	b085      	sub	sp, #20
 801303c:	af00      	add	r7, sp, #0
 801303e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	3303      	adds	r3, #3
 8013044:	781b      	ldrb	r3, [r3, #0]
 8013046:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	021b      	lsls	r3, r3, #8
 801304c:	687a      	ldr	r2, [r7, #4]
 801304e:	3202      	adds	r2, #2
 8013050:	7812      	ldrb	r2, [r2, #0]
 8013052:	4313      	orrs	r3, r2
 8013054:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	021b      	lsls	r3, r3, #8
 801305a:	687a      	ldr	r2, [r7, #4]
 801305c:	3201      	adds	r2, #1
 801305e:	7812      	ldrb	r2, [r2, #0]
 8013060:	4313      	orrs	r3, r2
 8013062:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	021b      	lsls	r3, r3, #8
 8013068:	687a      	ldr	r2, [r7, #4]
 801306a:	7812      	ldrb	r2, [r2, #0]
 801306c:	4313      	orrs	r3, r2
 801306e:	60fb      	str	r3, [r7, #12]
	return rv;
 8013070:	68fb      	ldr	r3, [r7, #12]
}
 8013072:	4618      	mov	r0, r3
 8013074:	3714      	adds	r7, #20
 8013076:	46bd      	mov	sp, r7
 8013078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801307c:	4770      	bx	lr

0801307e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801307e:	b480      	push	{r7}
 8013080:	b083      	sub	sp, #12
 8013082:	af00      	add	r7, sp, #0
 8013084:	6078      	str	r0, [r7, #4]
 8013086:	460b      	mov	r3, r1
 8013088:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	1c5a      	adds	r2, r3, #1
 801308e:	607a      	str	r2, [r7, #4]
 8013090:	887a      	ldrh	r2, [r7, #2]
 8013092:	b2d2      	uxtb	r2, r2
 8013094:	701a      	strb	r2, [r3, #0]
 8013096:	887b      	ldrh	r3, [r7, #2]
 8013098:	0a1b      	lsrs	r3, r3, #8
 801309a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	1c5a      	adds	r2, r3, #1
 80130a0:	607a      	str	r2, [r7, #4]
 80130a2:	887a      	ldrh	r2, [r7, #2]
 80130a4:	b2d2      	uxtb	r2, r2
 80130a6:	701a      	strb	r2, [r3, #0]
}
 80130a8:	bf00      	nop
 80130aa:	370c      	adds	r7, #12
 80130ac:	46bd      	mov	sp, r7
 80130ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b2:	4770      	bx	lr

080130b4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80130b4:	b480      	push	{r7}
 80130b6:	b083      	sub	sp, #12
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]
 80130bc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	1c5a      	adds	r2, r3, #1
 80130c2:	607a      	str	r2, [r7, #4]
 80130c4:	683a      	ldr	r2, [r7, #0]
 80130c6:	b2d2      	uxtb	r2, r2
 80130c8:	701a      	strb	r2, [r3, #0]
 80130ca:	683b      	ldr	r3, [r7, #0]
 80130cc:	0a1b      	lsrs	r3, r3, #8
 80130ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	1c5a      	adds	r2, r3, #1
 80130d4:	607a      	str	r2, [r7, #4]
 80130d6:	683a      	ldr	r2, [r7, #0]
 80130d8:	b2d2      	uxtb	r2, r2
 80130da:	701a      	strb	r2, [r3, #0]
 80130dc:	683b      	ldr	r3, [r7, #0]
 80130de:	0a1b      	lsrs	r3, r3, #8
 80130e0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	1c5a      	adds	r2, r3, #1
 80130e6:	607a      	str	r2, [r7, #4]
 80130e8:	683a      	ldr	r2, [r7, #0]
 80130ea:	b2d2      	uxtb	r2, r2
 80130ec:	701a      	strb	r2, [r3, #0]
 80130ee:	683b      	ldr	r3, [r7, #0]
 80130f0:	0a1b      	lsrs	r3, r3, #8
 80130f2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	1c5a      	adds	r2, r3, #1
 80130f8:	607a      	str	r2, [r7, #4]
 80130fa:	683a      	ldr	r2, [r7, #0]
 80130fc:	b2d2      	uxtb	r2, r2
 80130fe:	701a      	strb	r2, [r3, #0]
}
 8013100:	bf00      	nop
 8013102:	370c      	adds	r7, #12
 8013104:	46bd      	mov	sp, r7
 8013106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801310a:	4770      	bx	lr

0801310c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801310c:	b480      	push	{r7}
 801310e:	b087      	sub	sp, #28
 8013110:	af00      	add	r7, sp, #0
 8013112:	60f8      	str	r0, [r7, #12]
 8013114:	60b9      	str	r1, [r7, #8]
 8013116:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801311c:	68bb      	ldr	r3, [r7, #8]
 801311e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d00d      	beq.n	8013142 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8013126:	693a      	ldr	r2, [r7, #16]
 8013128:	1c53      	adds	r3, r2, #1
 801312a:	613b      	str	r3, [r7, #16]
 801312c:	697b      	ldr	r3, [r7, #20]
 801312e:	1c59      	adds	r1, r3, #1
 8013130:	6179      	str	r1, [r7, #20]
 8013132:	7812      	ldrb	r2, [r2, #0]
 8013134:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	3b01      	subs	r3, #1
 801313a:	607b      	str	r3, [r7, #4]
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d1f1      	bne.n	8013126 <mem_cpy+0x1a>
	}
}
 8013142:	bf00      	nop
 8013144:	371c      	adds	r7, #28
 8013146:	46bd      	mov	sp, r7
 8013148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801314c:	4770      	bx	lr

0801314e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801314e:	b480      	push	{r7}
 8013150:	b087      	sub	sp, #28
 8013152:	af00      	add	r7, sp, #0
 8013154:	60f8      	str	r0, [r7, #12]
 8013156:	60b9      	str	r1, [r7, #8]
 8013158:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801315e:	697b      	ldr	r3, [r7, #20]
 8013160:	1c5a      	adds	r2, r3, #1
 8013162:	617a      	str	r2, [r7, #20]
 8013164:	68ba      	ldr	r2, [r7, #8]
 8013166:	b2d2      	uxtb	r2, r2
 8013168:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	3b01      	subs	r3, #1
 801316e:	607b      	str	r3, [r7, #4]
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d1f3      	bne.n	801315e <mem_set+0x10>
}
 8013176:	bf00      	nop
 8013178:	bf00      	nop
 801317a:	371c      	adds	r7, #28
 801317c:	46bd      	mov	sp, r7
 801317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013182:	4770      	bx	lr

08013184 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8013184:	b480      	push	{r7}
 8013186:	b089      	sub	sp, #36	; 0x24
 8013188:	af00      	add	r7, sp, #0
 801318a:	60f8      	str	r0, [r7, #12]
 801318c:	60b9      	str	r1, [r7, #8]
 801318e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	61fb      	str	r3, [r7, #28]
 8013194:	68bb      	ldr	r3, [r7, #8]
 8013196:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8013198:	2300      	movs	r3, #0
 801319a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801319c:	69fb      	ldr	r3, [r7, #28]
 801319e:	1c5a      	adds	r2, r3, #1
 80131a0:	61fa      	str	r2, [r7, #28]
 80131a2:	781b      	ldrb	r3, [r3, #0]
 80131a4:	4619      	mov	r1, r3
 80131a6:	69bb      	ldr	r3, [r7, #24]
 80131a8:	1c5a      	adds	r2, r3, #1
 80131aa:	61ba      	str	r2, [r7, #24]
 80131ac:	781b      	ldrb	r3, [r3, #0]
 80131ae:	1acb      	subs	r3, r1, r3
 80131b0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	3b01      	subs	r3, #1
 80131b6:	607b      	str	r3, [r7, #4]
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d002      	beq.n	80131c4 <mem_cmp+0x40>
 80131be:	697b      	ldr	r3, [r7, #20]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d0eb      	beq.n	801319c <mem_cmp+0x18>

	return r;
 80131c4:	697b      	ldr	r3, [r7, #20]
}
 80131c6:	4618      	mov	r0, r3
 80131c8:	3724      	adds	r7, #36	; 0x24
 80131ca:	46bd      	mov	sp, r7
 80131cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d0:	4770      	bx	lr

080131d2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80131d2:	b480      	push	{r7}
 80131d4:	b083      	sub	sp, #12
 80131d6:	af00      	add	r7, sp, #0
 80131d8:	6078      	str	r0, [r7, #4]
 80131da:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80131dc:	e002      	b.n	80131e4 <chk_chr+0x12>
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	3301      	adds	r3, #1
 80131e2:	607b      	str	r3, [r7, #4]
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	781b      	ldrb	r3, [r3, #0]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d005      	beq.n	80131f8 <chk_chr+0x26>
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	781b      	ldrb	r3, [r3, #0]
 80131f0:	461a      	mov	r2, r3
 80131f2:	683b      	ldr	r3, [r7, #0]
 80131f4:	4293      	cmp	r3, r2
 80131f6:	d1f2      	bne.n	80131de <chk_chr+0xc>
	return *str;
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	781b      	ldrb	r3, [r3, #0]
}
 80131fc:	4618      	mov	r0, r3
 80131fe:	370c      	adds	r7, #12
 8013200:	46bd      	mov	sp, r7
 8013202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013206:	4770      	bx	lr

08013208 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8013208:	b580      	push	{r7, lr}
 801320a:	b082      	sub	sp, #8
 801320c:	af00      	add	r7, sp, #0
 801320e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d009      	beq.n	801322a <lock_fs+0x22>
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	68db      	ldr	r3, [r3, #12]
 801321a:	4618      	mov	r0, r3
 801321c:	f002 fcde 	bl	8015bdc <ff_req_grant>
 8013220:	4603      	mov	r3, r0
 8013222:	2b00      	cmp	r3, #0
 8013224:	d001      	beq.n	801322a <lock_fs+0x22>
 8013226:	2301      	movs	r3, #1
 8013228:	e000      	b.n	801322c <lock_fs+0x24>
 801322a:	2300      	movs	r3, #0
}
 801322c:	4618      	mov	r0, r3
 801322e:	3708      	adds	r7, #8
 8013230:	46bd      	mov	sp, r7
 8013232:	bd80      	pop	{r7, pc}

08013234 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8013234:	b580      	push	{r7, lr}
 8013236:	b082      	sub	sp, #8
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]
 801323c:	460b      	mov	r3, r1
 801323e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	2b00      	cmp	r3, #0
 8013244:	d00d      	beq.n	8013262 <unlock_fs+0x2e>
 8013246:	78fb      	ldrb	r3, [r7, #3]
 8013248:	2b0c      	cmp	r3, #12
 801324a:	d00a      	beq.n	8013262 <unlock_fs+0x2e>
 801324c:	78fb      	ldrb	r3, [r7, #3]
 801324e:	2b0b      	cmp	r3, #11
 8013250:	d007      	beq.n	8013262 <unlock_fs+0x2e>
 8013252:	78fb      	ldrb	r3, [r7, #3]
 8013254:	2b0f      	cmp	r3, #15
 8013256:	d004      	beq.n	8013262 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	68db      	ldr	r3, [r3, #12]
 801325c:	4618      	mov	r0, r3
 801325e:	f002 fcd2 	bl	8015c06 <ff_rel_grant>
	}
}
 8013262:	bf00      	nop
 8013264:	3708      	adds	r7, #8
 8013266:	46bd      	mov	sp, r7
 8013268:	bd80      	pop	{r7, pc}
	...

0801326c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801326c:	b480      	push	{r7}
 801326e:	b085      	sub	sp, #20
 8013270:	af00      	add	r7, sp, #0
 8013272:	6078      	str	r0, [r7, #4]
 8013274:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8013276:	2300      	movs	r3, #0
 8013278:	60bb      	str	r3, [r7, #8]
 801327a:	68bb      	ldr	r3, [r7, #8]
 801327c:	60fb      	str	r3, [r7, #12]
 801327e:	e029      	b.n	80132d4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8013280:	4a27      	ldr	r2, [pc, #156]	; (8013320 <chk_lock+0xb4>)
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	011b      	lsls	r3, r3, #4
 8013286:	4413      	add	r3, r2
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	2b00      	cmp	r3, #0
 801328c:	d01d      	beq.n	80132ca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801328e:	4a24      	ldr	r2, [pc, #144]	; (8013320 <chk_lock+0xb4>)
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	011b      	lsls	r3, r3, #4
 8013294:	4413      	add	r3, r2
 8013296:	681a      	ldr	r2, [r3, #0]
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	429a      	cmp	r2, r3
 801329e:	d116      	bne.n	80132ce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80132a0:	4a1f      	ldr	r2, [pc, #124]	; (8013320 <chk_lock+0xb4>)
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	011b      	lsls	r3, r3, #4
 80132a6:	4413      	add	r3, r2
 80132a8:	3304      	adds	r3, #4
 80132aa:	681a      	ldr	r2, [r3, #0]
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80132b0:	429a      	cmp	r2, r3
 80132b2:	d10c      	bne.n	80132ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80132b4:	4a1a      	ldr	r2, [pc, #104]	; (8013320 <chk_lock+0xb4>)
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	011b      	lsls	r3, r3, #4
 80132ba:	4413      	add	r3, r2
 80132bc:	3308      	adds	r3, #8
 80132be:	681a      	ldr	r2, [r3, #0]
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80132c4:	429a      	cmp	r2, r3
 80132c6:	d102      	bne.n	80132ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80132c8:	e007      	b.n	80132da <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80132ca:	2301      	movs	r3, #1
 80132cc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	3301      	adds	r3, #1
 80132d2:	60fb      	str	r3, [r7, #12]
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	2b01      	cmp	r3, #1
 80132d8:	d9d2      	bls.n	8013280 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	2b02      	cmp	r3, #2
 80132de:	d109      	bne.n	80132f4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80132e0:	68bb      	ldr	r3, [r7, #8]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d102      	bne.n	80132ec <chk_lock+0x80>
 80132e6:	683b      	ldr	r3, [r7, #0]
 80132e8:	2b02      	cmp	r3, #2
 80132ea:	d101      	bne.n	80132f0 <chk_lock+0x84>
 80132ec:	2300      	movs	r3, #0
 80132ee:	e010      	b.n	8013312 <chk_lock+0xa6>
 80132f0:	2312      	movs	r3, #18
 80132f2:	e00e      	b.n	8013312 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80132f4:	683b      	ldr	r3, [r7, #0]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d108      	bne.n	801330c <chk_lock+0xa0>
 80132fa:	4a09      	ldr	r2, [pc, #36]	; (8013320 <chk_lock+0xb4>)
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	011b      	lsls	r3, r3, #4
 8013300:	4413      	add	r3, r2
 8013302:	330c      	adds	r3, #12
 8013304:	881b      	ldrh	r3, [r3, #0]
 8013306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801330a:	d101      	bne.n	8013310 <chk_lock+0xa4>
 801330c:	2310      	movs	r3, #16
 801330e:	e000      	b.n	8013312 <chk_lock+0xa6>
 8013310:	2300      	movs	r3, #0
}
 8013312:	4618      	mov	r0, r3
 8013314:	3714      	adds	r7, #20
 8013316:	46bd      	mov	sp, r7
 8013318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801331c:	4770      	bx	lr
 801331e:	bf00      	nop
 8013320:	2000083c 	.word	0x2000083c

08013324 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8013324:	b480      	push	{r7}
 8013326:	b083      	sub	sp, #12
 8013328:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801332a:	2300      	movs	r3, #0
 801332c:	607b      	str	r3, [r7, #4]
 801332e:	e002      	b.n	8013336 <enq_lock+0x12>
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	3301      	adds	r3, #1
 8013334:	607b      	str	r3, [r7, #4]
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	2b01      	cmp	r3, #1
 801333a:	d806      	bhi.n	801334a <enq_lock+0x26>
 801333c:	4a09      	ldr	r2, [pc, #36]	; (8013364 <enq_lock+0x40>)
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	011b      	lsls	r3, r3, #4
 8013342:	4413      	add	r3, r2
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d1f2      	bne.n	8013330 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	2b02      	cmp	r3, #2
 801334e:	bf14      	ite	ne
 8013350:	2301      	movne	r3, #1
 8013352:	2300      	moveq	r3, #0
 8013354:	b2db      	uxtb	r3, r3
}
 8013356:	4618      	mov	r0, r3
 8013358:	370c      	adds	r7, #12
 801335a:	46bd      	mov	sp, r7
 801335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013360:	4770      	bx	lr
 8013362:	bf00      	nop
 8013364:	2000083c 	.word	0x2000083c

08013368 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8013368:	b480      	push	{r7}
 801336a:	b085      	sub	sp, #20
 801336c:	af00      	add	r7, sp, #0
 801336e:	6078      	str	r0, [r7, #4]
 8013370:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8013372:	2300      	movs	r3, #0
 8013374:	60fb      	str	r3, [r7, #12]
 8013376:	e01f      	b.n	80133b8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8013378:	4a41      	ldr	r2, [pc, #260]	; (8013480 <inc_lock+0x118>)
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	011b      	lsls	r3, r3, #4
 801337e:	4413      	add	r3, r2
 8013380:	681a      	ldr	r2, [r3, #0]
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	429a      	cmp	r2, r3
 8013388:	d113      	bne.n	80133b2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801338a:	4a3d      	ldr	r2, [pc, #244]	; (8013480 <inc_lock+0x118>)
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	011b      	lsls	r3, r3, #4
 8013390:	4413      	add	r3, r2
 8013392:	3304      	adds	r3, #4
 8013394:	681a      	ldr	r2, [r3, #0]
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801339a:	429a      	cmp	r2, r3
 801339c:	d109      	bne.n	80133b2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801339e:	4a38      	ldr	r2, [pc, #224]	; (8013480 <inc_lock+0x118>)
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	011b      	lsls	r3, r3, #4
 80133a4:	4413      	add	r3, r2
 80133a6:	3308      	adds	r3, #8
 80133a8:	681a      	ldr	r2, [r3, #0]
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80133ae:	429a      	cmp	r2, r3
 80133b0:	d006      	beq.n	80133c0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	3301      	adds	r3, #1
 80133b6:	60fb      	str	r3, [r7, #12]
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	2b01      	cmp	r3, #1
 80133bc:	d9dc      	bls.n	8013378 <inc_lock+0x10>
 80133be:	e000      	b.n	80133c2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80133c0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	2b02      	cmp	r3, #2
 80133c6:	d132      	bne.n	801342e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80133c8:	2300      	movs	r3, #0
 80133ca:	60fb      	str	r3, [r7, #12]
 80133cc:	e002      	b.n	80133d4 <inc_lock+0x6c>
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	3301      	adds	r3, #1
 80133d2:	60fb      	str	r3, [r7, #12]
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	2b01      	cmp	r3, #1
 80133d8:	d806      	bhi.n	80133e8 <inc_lock+0x80>
 80133da:	4a29      	ldr	r2, [pc, #164]	; (8013480 <inc_lock+0x118>)
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	011b      	lsls	r3, r3, #4
 80133e0:	4413      	add	r3, r2
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d1f2      	bne.n	80133ce <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	2b02      	cmp	r3, #2
 80133ec:	d101      	bne.n	80133f2 <inc_lock+0x8a>
 80133ee:	2300      	movs	r3, #0
 80133f0:	e040      	b.n	8013474 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	681a      	ldr	r2, [r3, #0]
 80133f6:	4922      	ldr	r1, [pc, #136]	; (8013480 <inc_lock+0x118>)
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	011b      	lsls	r3, r3, #4
 80133fc:	440b      	add	r3, r1
 80133fe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	689a      	ldr	r2, [r3, #8]
 8013404:	491e      	ldr	r1, [pc, #120]	; (8013480 <inc_lock+0x118>)
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	011b      	lsls	r3, r3, #4
 801340a:	440b      	add	r3, r1
 801340c:	3304      	adds	r3, #4
 801340e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	695a      	ldr	r2, [r3, #20]
 8013414:	491a      	ldr	r1, [pc, #104]	; (8013480 <inc_lock+0x118>)
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	011b      	lsls	r3, r3, #4
 801341a:	440b      	add	r3, r1
 801341c:	3308      	adds	r3, #8
 801341e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8013420:	4a17      	ldr	r2, [pc, #92]	; (8013480 <inc_lock+0x118>)
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	011b      	lsls	r3, r3, #4
 8013426:	4413      	add	r3, r2
 8013428:	330c      	adds	r3, #12
 801342a:	2200      	movs	r2, #0
 801342c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801342e:	683b      	ldr	r3, [r7, #0]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d009      	beq.n	8013448 <inc_lock+0xe0>
 8013434:	4a12      	ldr	r2, [pc, #72]	; (8013480 <inc_lock+0x118>)
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	011b      	lsls	r3, r3, #4
 801343a:	4413      	add	r3, r2
 801343c:	330c      	adds	r3, #12
 801343e:	881b      	ldrh	r3, [r3, #0]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d001      	beq.n	8013448 <inc_lock+0xe0>
 8013444:	2300      	movs	r3, #0
 8013446:	e015      	b.n	8013474 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8013448:	683b      	ldr	r3, [r7, #0]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d108      	bne.n	8013460 <inc_lock+0xf8>
 801344e:	4a0c      	ldr	r2, [pc, #48]	; (8013480 <inc_lock+0x118>)
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	011b      	lsls	r3, r3, #4
 8013454:	4413      	add	r3, r2
 8013456:	330c      	adds	r3, #12
 8013458:	881b      	ldrh	r3, [r3, #0]
 801345a:	3301      	adds	r3, #1
 801345c:	b29a      	uxth	r2, r3
 801345e:	e001      	b.n	8013464 <inc_lock+0xfc>
 8013460:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013464:	4906      	ldr	r1, [pc, #24]	; (8013480 <inc_lock+0x118>)
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	011b      	lsls	r3, r3, #4
 801346a:	440b      	add	r3, r1
 801346c:	330c      	adds	r3, #12
 801346e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	3301      	adds	r3, #1
}
 8013474:	4618      	mov	r0, r3
 8013476:	3714      	adds	r7, #20
 8013478:	46bd      	mov	sp, r7
 801347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801347e:	4770      	bx	lr
 8013480:	2000083c 	.word	0x2000083c

08013484 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8013484:	b480      	push	{r7}
 8013486:	b085      	sub	sp, #20
 8013488:	af00      	add	r7, sp, #0
 801348a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	3b01      	subs	r3, #1
 8013490:	607b      	str	r3, [r7, #4]
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	2b01      	cmp	r3, #1
 8013496:	d825      	bhi.n	80134e4 <dec_lock+0x60>
		n = Files[i].ctr;
 8013498:	4a17      	ldr	r2, [pc, #92]	; (80134f8 <dec_lock+0x74>)
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	011b      	lsls	r3, r3, #4
 801349e:	4413      	add	r3, r2
 80134a0:	330c      	adds	r3, #12
 80134a2:	881b      	ldrh	r3, [r3, #0]
 80134a4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80134a6:	89fb      	ldrh	r3, [r7, #14]
 80134a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80134ac:	d101      	bne.n	80134b2 <dec_lock+0x2e>
 80134ae:	2300      	movs	r3, #0
 80134b0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80134b2:	89fb      	ldrh	r3, [r7, #14]
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d002      	beq.n	80134be <dec_lock+0x3a>
 80134b8:	89fb      	ldrh	r3, [r7, #14]
 80134ba:	3b01      	subs	r3, #1
 80134bc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80134be:	4a0e      	ldr	r2, [pc, #56]	; (80134f8 <dec_lock+0x74>)
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	011b      	lsls	r3, r3, #4
 80134c4:	4413      	add	r3, r2
 80134c6:	330c      	adds	r3, #12
 80134c8:	89fa      	ldrh	r2, [r7, #14]
 80134ca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80134cc:	89fb      	ldrh	r3, [r7, #14]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d105      	bne.n	80134de <dec_lock+0x5a>
 80134d2:	4a09      	ldr	r2, [pc, #36]	; (80134f8 <dec_lock+0x74>)
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	011b      	lsls	r3, r3, #4
 80134d8:	4413      	add	r3, r2
 80134da:	2200      	movs	r2, #0
 80134dc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80134de:	2300      	movs	r3, #0
 80134e0:	737b      	strb	r3, [r7, #13]
 80134e2:	e001      	b.n	80134e8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80134e4:	2302      	movs	r3, #2
 80134e6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80134e8:	7b7b      	ldrb	r3, [r7, #13]
}
 80134ea:	4618      	mov	r0, r3
 80134ec:	3714      	adds	r7, #20
 80134ee:	46bd      	mov	sp, r7
 80134f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f4:	4770      	bx	lr
 80134f6:	bf00      	nop
 80134f8:	2000083c 	.word	0x2000083c

080134fc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80134fc:	b480      	push	{r7}
 80134fe:	b085      	sub	sp, #20
 8013500:	af00      	add	r7, sp, #0
 8013502:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8013504:	2300      	movs	r3, #0
 8013506:	60fb      	str	r3, [r7, #12]
 8013508:	e010      	b.n	801352c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801350a:	4a0d      	ldr	r2, [pc, #52]	; (8013540 <clear_lock+0x44>)
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	011b      	lsls	r3, r3, #4
 8013510:	4413      	add	r3, r2
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	687a      	ldr	r2, [r7, #4]
 8013516:	429a      	cmp	r2, r3
 8013518:	d105      	bne.n	8013526 <clear_lock+0x2a>
 801351a:	4a09      	ldr	r2, [pc, #36]	; (8013540 <clear_lock+0x44>)
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	011b      	lsls	r3, r3, #4
 8013520:	4413      	add	r3, r2
 8013522:	2200      	movs	r2, #0
 8013524:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	3301      	adds	r3, #1
 801352a:	60fb      	str	r3, [r7, #12]
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	2b01      	cmp	r3, #1
 8013530:	d9eb      	bls.n	801350a <clear_lock+0xe>
	}
}
 8013532:	bf00      	nop
 8013534:	bf00      	nop
 8013536:	3714      	adds	r7, #20
 8013538:	46bd      	mov	sp, r7
 801353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801353e:	4770      	bx	lr
 8013540:	2000083c 	.word	0x2000083c

08013544 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8013544:	b580      	push	{r7, lr}
 8013546:	b086      	sub	sp, #24
 8013548:	af00      	add	r7, sp, #0
 801354a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801354c:	2300      	movs	r3, #0
 801354e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	78db      	ldrb	r3, [r3, #3]
 8013554:	2b00      	cmp	r3, #0
 8013556:	d034      	beq.n	80135c2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801355c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	7858      	ldrb	r0, [r3, #1]
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013568:	2301      	movs	r3, #1
 801356a:	697a      	ldr	r2, [r7, #20]
 801356c:	f7ff fd0e 	bl	8012f8c <disk_write>
 8013570:	4603      	mov	r3, r0
 8013572:	2b00      	cmp	r3, #0
 8013574:	d002      	beq.n	801357c <sync_window+0x38>
			res = FR_DISK_ERR;
 8013576:	2301      	movs	r3, #1
 8013578:	73fb      	strb	r3, [r7, #15]
 801357a:	e022      	b.n	80135c2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	2200      	movs	r2, #0
 8013580:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013586:	697a      	ldr	r2, [r7, #20]
 8013588:	1ad2      	subs	r2, r2, r3
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	69db      	ldr	r3, [r3, #28]
 801358e:	429a      	cmp	r2, r3
 8013590:	d217      	bcs.n	80135c2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	789b      	ldrb	r3, [r3, #2]
 8013596:	613b      	str	r3, [r7, #16]
 8013598:	e010      	b.n	80135bc <sync_window+0x78>
					wsect += fs->fsize;
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	69db      	ldr	r3, [r3, #28]
 801359e:	697a      	ldr	r2, [r7, #20]
 80135a0:	4413      	add	r3, r2
 80135a2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	7858      	ldrb	r0, [r3, #1]
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80135ae:	2301      	movs	r3, #1
 80135b0:	697a      	ldr	r2, [r7, #20]
 80135b2:	f7ff fceb 	bl	8012f8c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80135b6:	693b      	ldr	r3, [r7, #16]
 80135b8:	3b01      	subs	r3, #1
 80135ba:	613b      	str	r3, [r7, #16]
 80135bc:	693b      	ldr	r3, [r7, #16]
 80135be:	2b01      	cmp	r3, #1
 80135c0:	d8eb      	bhi.n	801359a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80135c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80135c4:	4618      	mov	r0, r3
 80135c6:	3718      	adds	r7, #24
 80135c8:	46bd      	mov	sp, r7
 80135ca:	bd80      	pop	{r7, pc}

080135cc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80135cc:	b580      	push	{r7, lr}
 80135ce:	b084      	sub	sp, #16
 80135d0:	af00      	add	r7, sp, #0
 80135d2:	6078      	str	r0, [r7, #4]
 80135d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80135d6:	2300      	movs	r3, #0
 80135d8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135de:	683a      	ldr	r2, [r7, #0]
 80135e0:	429a      	cmp	r2, r3
 80135e2:	d01b      	beq.n	801361c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80135e4:	6878      	ldr	r0, [r7, #4]
 80135e6:	f7ff ffad 	bl	8013544 <sync_window>
 80135ea:	4603      	mov	r3, r0
 80135ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80135ee:	7bfb      	ldrb	r3, [r7, #15]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d113      	bne.n	801361c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	7858      	ldrb	r0, [r3, #1]
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80135fe:	2301      	movs	r3, #1
 8013600:	683a      	ldr	r2, [r7, #0]
 8013602:	f7ff fca3 	bl	8012f4c <disk_read>
 8013606:	4603      	mov	r3, r0
 8013608:	2b00      	cmp	r3, #0
 801360a:	d004      	beq.n	8013616 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801360c:	f04f 33ff 	mov.w	r3, #4294967295
 8013610:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8013612:	2301      	movs	r3, #1
 8013614:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	683a      	ldr	r2, [r7, #0]
 801361a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 801361c:	7bfb      	ldrb	r3, [r7, #15]
}
 801361e:	4618      	mov	r0, r3
 8013620:	3710      	adds	r7, #16
 8013622:	46bd      	mov	sp, r7
 8013624:	bd80      	pop	{r7, pc}
	...

08013628 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8013628:	b580      	push	{r7, lr}
 801362a:	b084      	sub	sp, #16
 801362c:	af00      	add	r7, sp, #0
 801362e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8013630:	6878      	ldr	r0, [r7, #4]
 8013632:	f7ff ff87 	bl	8013544 <sync_window>
 8013636:	4603      	mov	r3, r0
 8013638:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801363a:	7bfb      	ldrb	r3, [r7, #15]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d158      	bne.n	80136f2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	781b      	ldrb	r3, [r3, #0]
 8013644:	2b03      	cmp	r3, #3
 8013646:	d148      	bne.n	80136da <sync_fs+0xb2>
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	791b      	ldrb	r3, [r3, #4]
 801364c:	2b01      	cmp	r3, #1
 801364e:	d144      	bne.n	80136da <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	3334      	adds	r3, #52	; 0x34
 8013654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013658:	2100      	movs	r1, #0
 801365a:	4618      	mov	r0, r3
 801365c:	f7ff fd77 	bl	801314e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	3334      	adds	r3, #52	; 0x34
 8013664:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013668:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801366c:	4618      	mov	r0, r3
 801366e:	f7ff fd06 	bl	801307e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	3334      	adds	r3, #52	; 0x34
 8013676:	4921      	ldr	r1, [pc, #132]	; (80136fc <sync_fs+0xd4>)
 8013678:	4618      	mov	r0, r3
 801367a:	f7ff fd1b 	bl	80130b4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	3334      	adds	r3, #52	; 0x34
 8013682:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013686:	491e      	ldr	r1, [pc, #120]	; (8013700 <sync_fs+0xd8>)
 8013688:	4618      	mov	r0, r3
 801368a:	f7ff fd13 	bl	80130b4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	3334      	adds	r3, #52	; 0x34
 8013692:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	695b      	ldr	r3, [r3, #20]
 801369a:	4619      	mov	r1, r3
 801369c:	4610      	mov	r0, r2
 801369e:	f7ff fd09 	bl	80130b4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	3334      	adds	r3, #52	; 0x34
 80136a6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	691b      	ldr	r3, [r3, #16]
 80136ae:	4619      	mov	r1, r3
 80136b0:	4610      	mov	r0, r2
 80136b2:	f7ff fcff 	bl	80130b4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	6a1b      	ldr	r3, [r3, #32]
 80136ba:	1c5a      	adds	r2, r3, #1
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	7858      	ldrb	r0, [r3, #1]
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80136ce:	2301      	movs	r3, #1
 80136d0:	f7ff fc5c 	bl	8012f8c <disk_write>
			fs->fsi_flag = 0;
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	2200      	movs	r2, #0
 80136d8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	785b      	ldrb	r3, [r3, #1]
 80136de:	2200      	movs	r2, #0
 80136e0:	2100      	movs	r1, #0
 80136e2:	4618      	mov	r0, r3
 80136e4:	f7ff fc72 	bl	8012fcc <disk_ioctl>
 80136e8:	4603      	mov	r3, r0
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d001      	beq.n	80136f2 <sync_fs+0xca>
 80136ee:	2301      	movs	r3, #1
 80136f0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80136f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80136f4:	4618      	mov	r0, r3
 80136f6:	3710      	adds	r7, #16
 80136f8:	46bd      	mov	sp, r7
 80136fa:	bd80      	pop	{r7, pc}
 80136fc:	41615252 	.word	0x41615252
 8013700:	61417272 	.word	0x61417272

08013704 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8013704:	b480      	push	{r7}
 8013706:	b083      	sub	sp, #12
 8013708:	af00      	add	r7, sp, #0
 801370a:	6078      	str	r0, [r7, #4]
 801370c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801370e:	683b      	ldr	r3, [r7, #0]
 8013710:	3b02      	subs	r3, #2
 8013712:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	699b      	ldr	r3, [r3, #24]
 8013718:	3b02      	subs	r3, #2
 801371a:	683a      	ldr	r2, [r7, #0]
 801371c:	429a      	cmp	r2, r3
 801371e:	d301      	bcc.n	8013724 <clust2sect+0x20>
 8013720:	2300      	movs	r3, #0
 8013722:	e008      	b.n	8013736 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	895b      	ldrh	r3, [r3, #10]
 8013728:	461a      	mov	r2, r3
 801372a:	683b      	ldr	r3, [r7, #0]
 801372c:	fb03 f202 	mul.w	r2, r3, r2
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013734:	4413      	add	r3, r2
}
 8013736:	4618      	mov	r0, r3
 8013738:	370c      	adds	r7, #12
 801373a:	46bd      	mov	sp, r7
 801373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013740:	4770      	bx	lr

08013742 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8013742:	b580      	push	{r7, lr}
 8013744:	b086      	sub	sp, #24
 8013746:	af00      	add	r7, sp, #0
 8013748:	6078      	str	r0, [r7, #4]
 801374a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8013752:	683b      	ldr	r3, [r7, #0]
 8013754:	2b01      	cmp	r3, #1
 8013756:	d904      	bls.n	8013762 <get_fat+0x20>
 8013758:	693b      	ldr	r3, [r7, #16]
 801375a:	699b      	ldr	r3, [r3, #24]
 801375c:	683a      	ldr	r2, [r7, #0]
 801375e:	429a      	cmp	r2, r3
 8013760:	d302      	bcc.n	8013768 <get_fat+0x26>
		val = 1;	/* Internal error */
 8013762:	2301      	movs	r3, #1
 8013764:	617b      	str	r3, [r7, #20]
 8013766:	e08f      	b.n	8013888 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8013768:	f04f 33ff 	mov.w	r3, #4294967295
 801376c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801376e:	693b      	ldr	r3, [r7, #16]
 8013770:	781b      	ldrb	r3, [r3, #0]
 8013772:	2b03      	cmp	r3, #3
 8013774:	d062      	beq.n	801383c <get_fat+0xfa>
 8013776:	2b03      	cmp	r3, #3
 8013778:	dc7c      	bgt.n	8013874 <get_fat+0x132>
 801377a:	2b01      	cmp	r3, #1
 801377c:	d002      	beq.n	8013784 <get_fat+0x42>
 801377e:	2b02      	cmp	r3, #2
 8013780:	d042      	beq.n	8013808 <get_fat+0xc6>
 8013782:	e077      	b.n	8013874 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8013784:	683b      	ldr	r3, [r7, #0]
 8013786:	60fb      	str	r3, [r7, #12]
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	085b      	lsrs	r3, r3, #1
 801378c:	68fa      	ldr	r2, [r7, #12]
 801378e:	4413      	add	r3, r2
 8013790:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013792:	693b      	ldr	r3, [r7, #16]
 8013794:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	0a5b      	lsrs	r3, r3, #9
 801379a:	4413      	add	r3, r2
 801379c:	4619      	mov	r1, r3
 801379e:	6938      	ldr	r0, [r7, #16]
 80137a0:	f7ff ff14 	bl	80135cc <move_window>
 80137a4:	4603      	mov	r3, r0
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d167      	bne.n	801387a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	1c5a      	adds	r2, r3, #1
 80137ae:	60fa      	str	r2, [r7, #12]
 80137b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80137b4:	693a      	ldr	r2, [r7, #16]
 80137b6:	4413      	add	r3, r2
 80137b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80137bc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80137be:	693b      	ldr	r3, [r7, #16]
 80137c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	0a5b      	lsrs	r3, r3, #9
 80137c6:	4413      	add	r3, r2
 80137c8:	4619      	mov	r1, r3
 80137ca:	6938      	ldr	r0, [r7, #16]
 80137cc:	f7ff fefe 	bl	80135cc <move_window>
 80137d0:	4603      	mov	r3, r0
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d153      	bne.n	801387e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80137dc:	693a      	ldr	r2, [r7, #16]
 80137de:	4413      	add	r3, r2
 80137e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80137e4:	021b      	lsls	r3, r3, #8
 80137e6:	461a      	mov	r2, r3
 80137e8:	68bb      	ldr	r3, [r7, #8]
 80137ea:	4313      	orrs	r3, r2
 80137ec:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80137ee:	683b      	ldr	r3, [r7, #0]
 80137f0:	f003 0301 	and.w	r3, r3, #1
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d002      	beq.n	80137fe <get_fat+0xbc>
 80137f8:	68bb      	ldr	r3, [r7, #8]
 80137fa:	091b      	lsrs	r3, r3, #4
 80137fc:	e002      	b.n	8013804 <get_fat+0xc2>
 80137fe:	68bb      	ldr	r3, [r7, #8]
 8013800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013804:	617b      	str	r3, [r7, #20]
			break;
 8013806:	e03f      	b.n	8013888 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013808:	693b      	ldr	r3, [r7, #16]
 801380a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801380c:	683b      	ldr	r3, [r7, #0]
 801380e:	0a1b      	lsrs	r3, r3, #8
 8013810:	4413      	add	r3, r2
 8013812:	4619      	mov	r1, r3
 8013814:	6938      	ldr	r0, [r7, #16]
 8013816:	f7ff fed9 	bl	80135cc <move_window>
 801381a:	4603      	mov	r3, r0
 801381c:	2b00      	cmp	r3, #0
 801381e:	d130      	bne.n	8013882 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8013820:	693b      	ldr	r3, [r7, #16]
 8013822:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013826:	683b      	ldr	r3, [r7, #0]
 8013828:	005b      	lsls	r3, r3, #1
 801382a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801382e:	4413      	add	r3, r2
 8013830:	4618      	mov	r0, r3
 8013832:	f7ff fbe9 	bl	8013008 <ld_word>
 8013836:	4603      	mov	r3, r0
 8013838:	617b      	str	r3, [r7, #20]
			break;
 801383a:	e025      	b.n	8013888 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801383c:	693b      	ldr	r3, [r7, #16]
 801383e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013840:	683b      	ldr	r3, [r7, #0]
 8013842:	09db      	lsrs	r3, r3, #7
 8013844:	4413      	add	r3, r2
 8013846:	4619      	mov	r1, r3
 8013848:	6938      	ldr	r0, [r7, #16]
 801384a:	f7ff febf 	bl	80135cc <move_window>
 801384e:	4603      	mov	r3, r0
 8013850:	2b00      	cmp	r3, #0
 8013852:	d118      	bne.n	8013886 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013854:	693b      	ldr	r3, [r7, #16]
 8013856:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801385a:	683b      	ldr	r3, [r7, #0]
 801385c:	009b      	lsls	r3, r3, #2
 801385e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013862:	4413      	add	r3, r2
 8013864:	4618      	mov	r0, r3
 8013866:	f7ff fbe7 	bl	8013038 <ld_dword>
 801386a:	4603      	mov	r3, r0
 801386c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8013870:	617b      	str	r3, [r7, #20]
			break;
 8013872:	e009      	b.n	8013888 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8013874:	2301      	movs	r3, #1
 8013876:	617b      	str	r3, [r7, #20]
 8013878:	e006      	b.n	8013888 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801387a:	bf00      	nop
 801387c:	e004      	b.n	8013888 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801387e:	bf00      	nop
 8013880:	e002      	b.n	8013888 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013882:	bf00      	nop
 8013884:	e000      	b.n	8013888 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013886:	bf00      	nop
		}
	}

	return val;
 8013888:	697b      	ldr	r3, [r7, #20]
}
 801388a:	4618      	mov	r0, r3
 801388c:	3718      	adds	r7, #24
 801388e:	46bd      	mov	sp, r7
 8013890:	bd80      	pop	{r7, pc}

08013892 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8013892:	b590      	push	{r4, r7, lr}
 8013894:	b089      	sub	sp, #36	; 0x24
 8013896:	af00      	add	r7, sp, #0
 8013898:	60f8      	str	r0, [r7, #12]
 801389a:	60b9      	str	r1, [r7, #8]
 801389c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801389e:	2302      	movs	r3, #2
 80138a0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80138a2:	68bb      	ldr	r3, [r7, #8]
 80138a4:	2b01      	cmp	r3, #1
 80138a6:	f240 80d2 	bls.w	8013a4e <put_fat+0x1bc>
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	699b      	ldr	r3, [r3, #24]
 80138ae:	68ba      	ldr	r2, [r7, #8]
 80138b0:	429a      	cmp	r2, r3
 80138b2:	f080 80cc 	bcs.w	8013a4e <put_fat+0x1bc>
		switch (fs->fs_type) {
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	781b      	ldrb	r3, [r3, #0]
 80138ba:	2b03      	cmp	r3, #3
 80138bc:	f000 8096 	beq.w	80139ec <put_fat+0x15a>
 80138c0:	2b03      	cmp	r3, #3
 80138c2:	f300 80cd 	bgt.w	8013a60 <put_fat+0x1ce>
 80138c6:	2b01      	cmp	r3, #1
 80138c8:	d002      	beq.n	80138d0 <put_fat+0x3e>
 80138ca:	2b02      	cmp	r3, #2
 80138cc:	d06e      	beq.n	80139ac <put_fat+0x11a>
 80138ce:	e0c7      	b.n	8013a60 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80138d0:	68bb      	ldr	r3, [r7, #8]
 80138d2:	61bb      	str	r3, [r7, #24]
 80138d4:	69bb      	ldr	r3, [r7, #24]
 80138d6:	085b      	lsrs	r3, r3, #1
 80138d8:	69ba      	ldr	r2, [r7, #24]
 80138da:	4413      	add	r3, r2
 80138dc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80138e2:	69bb      	ldr	r3, [r7, #24]
 80138e4:	0a5b      	lsrs	r3, r3, #9
 80138e6:	4413      	add	r3, r2
 80138e8:	4619      	mov	r1, r3
 80138ea:	68f8      	ldr	r0, [r7, #12]
 80138ec:	f7ff fe6e 	bl	80135cc <move_window>
 80138f0:	4603      	mov	r3, r0
 80138f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80138f4:	7ffb      	ldrb	r3, [r7, #31]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	f040 80ab 	bne.w	8013a52 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013902:	69bb      	ldr	r3, [r7, #24]
 8013904:	1c59      	adds	r1, r3, #1
 8013906:	61b9      	str	r1, [r7, #24]
 8013908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801390c:	4413      	add	r3, r2
 801390e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013910:	68bb      	ldr	r3, [r7, #8]
 8013912:	f003 0301 	and.w	r3, r3, #1
 8013916:	2b00      	cmp	r3, #0
 8013918:	d00d      	beq.n	8013936 <put_fat+0xa4>
 801391a:	697b      	ldr	r3, [r7, #20]
 801391c:	781b      	ldrb	r3, [r3, #0]
 801391e:	b25b      	sxtb	r3, r3
 8013920:	f003 030f 	and.w	r3, r3, #15
 8013924:	b25a      	sxtb	r2, r3
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	b2db      	uxtb	r3, r3
 801392a:	011b      	lsls	r3, r3, #4
 801392c:	b25b      	sxtb	r3, r3
 801392e:	4313      	orrs	r3, r2
 8013930:	b25b      	sxtb	r3, r3
 8013932:	b2db      	uxtb	r3, r3
 8013934:	e001      	b.n	801393a <put_fat+0xa8>
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	b2db      	uxtb	r3, r3
 801393a:	697a      	ldr	r2, [r7, #20]
 801393c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	2201      	movs	r2, #1
 8013942:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013948:	69bb      	ldr	r3, [r7, #24]
 801394a:	0a5b      	lsrs	r3, r3, #9
 801394c:	4413      	add	r3, r2
 801394e:	4619      	mov	r1, r3
 8013950:	68f8      	ldr	r0, [r7, #12]
 8013952:	f7ff fe3b 	bl	80135cc <move_window>
 8013956:	4603      	mov	r3, r0
 8013958:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801395a:	7ffb      	ldrb	r3, [r7, #31]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d17a      	bne.n	8013a56 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013966:	69bb      	ldr	r3, [r7, #24]
 8013968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801396c:	4413      	add	r3, r2
 801396e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013970:	68bb      	ldr	r3, [r7, #8]
 8013972:	f003 0301 	and.w	r3, r3, #1
 8013976:	2b00      	cmp	r3, #0
 8013978:	d003      	beq.n	8013982 <put_fat+0xf0>
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	091b      	lsrs	r3, r3, #4
 801397e:	b2db      	uxtb	r3, r3
 8013980:	e00e      	b.n	80139a0 <put_fat+0x10e>
 8013982:	697b      	ldr	r3, [r7, #20]
 8013984:	781b      	ldrb	r3, [r3, #0]
 8013986:	b25b      	sxtb	r3, r3
 8013988:	f023 030f 	bic.w	r3, r3, #15
 801398c:	b25a      	sxtb	r2, r3
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	0a1b      	lsrs	r3, r3, #8
 8013992:	b25b      	sxtb	r3, r3
 8013994:	f003 030f 	and.w	r3, r3, #15
 8013998:	b25b      	sxtb	r3, r3
 801399a:	4313      	orrs	r3, r2
 801399c:	b25b      	sxtb	r3, r3
 801399e:	b2db      	uxtb	r3, r3
 80139a0:	697a      	ldr	r2, [r7, #20]
 80139a2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	2201      	movs	r2, #1
 80139a8:	70da      	strb	r2, [r3, #3]
			break;
 80139aa:	e059      	b.n	8013a60 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80139b0:	68bb      	ldr	r3, [r7, #8]
 80139b2:	0a1b      	lsrs	r3, r3, #8
 80139b4:	4413      	add	r3, r2
 80139b6:	4619      	mov	r1, r3
 80139b8:	68f8      	ldr	r0, [r7, #12]
 80139ba:	f7ff fe07 	bl	80135cc <move_window>
 80139be:	4603      	mov	r3, r0
 80139c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80139c2:	7ffb      	ldrb	r3, [r7, #31]
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d148      	bne.n	8013a5a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80139ce:	68bb      	ldr	r3, [r7, #8]
 80139d0:	005b      	lsls	r3, r3, #1
 80139d2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80139d6:	4413      	add	r3, r2
 80139d8:	687a      	ldr	r2, [r7, #4]
 80139da:	b292      	uxth	r2, r2
 80139dc:	4611      	mov	r1, r2
 80139de:	4618      	mov	r0, r3
 80139e0:	f7ff fb4d 	bl	801307e <st_word>
			fs->wflag = 1;
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	2201      	movs	r2, #1
 80139e8:	70da      	strb	r2, [r3, #3]
			break;
 80139ea:	e039      	b.n	8013a60 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80139f0:	68bb      	ldr	r3, [r7, #8]
 80139f2:	09db      	lsrs	r3, r3, #7
 80139f4:	4413      	add	r3, r2
 80139f6:	4619      	mov	r1, r3
 80139f8:	68f8      	ldr	r0, [r7, #12]
 80139fa:	f7ff fde7 	bl	80135cc <move_window>
 80139fe:	4603      	mov	r3, r0
 8013a00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013a02:	7ffb      	ldrb	r3, [r7, #31]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d12a      	bne.n	8013a5e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013a14:	68bb      	ldr	r3, [r7, #8]
 8013a16:	009b      	lsls	r3, r3, #2
 8013a18:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013a1c:	4413      	add	r3, r2
 8013a1e:	4618      	mov	r0, r3
 8013a20:	f7ff fb0a 	bl	8013038 <ld_dword>
 8013a24:	4603      	mov	r3, r0
 8013a26:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8013a2a:	4323      	orrs	r3, r4
 8013a2c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013a34:	68bb      	ldr	r3, [r7, #8]
 8013a36:	009b      	lsls	r3, r3, #2
 8013a38:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013a3c:	4413      	add	r3, r2
 8013a3e:	6879      	ldr	r1, [r7, #4]
 8013a40:	4618      	mov	r0, r3
 8013a42:	f7ff fb37 	bl	80130b4 <st_dword>
			fs->wflag = 1;
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	2201      	movs	r2, #1
 8013a4a:	70da      	strb	r2, [r3, #3]
			break;
 8013a4c:	e008      	b.n	8013a60 <put_fat+0x1ce>
		}
	}
 8013a4e:	bf00      	nop
 8013a50:	e006      	b.n	8013a60 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013a52:	bf00      	nop
 8013a54:	e004      	b.n	8013a60 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013a56:	bf00      	nop
 8013a58:	e002      	b.n	8013a60 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013a5a:	bf00      	nop
 8013a5c:	e000      	b.n	8013a60 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8013a5e:	bf00      	nop
	return res;
 8013a60:	7ffb      	ldrb	r3, [r7, #31]
}
 8013a62:	4618      	mov	r0, r3
 8013a64:	3724      	adds	r7, #36	; 0x24
 8013a66:	46bd      	mov	sp, r7
 8013a68:	bd90      	pop	{r4, r7, pc}

08013a6a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8013a6a:	b580      	push	{r7, lr}
 8013a6c:	b088      	sub	sp, #32
 8013a6e:	af00      	add	r7, sp, #0
 8013a70:	60f8      	str	r0, [r7, #12]
 8013a72:	60b9      	str	r1, [r7, #8]
 8013a74:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8013a76:	2300      	movs	r3, #0
 8013a78:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8013a80:	68bb      	ldr	r3, [r7, #8]
 8013a82:	2b01      	cmp	r3, #1
 8013a84:	d904      	bls.n	8013a90 <remove_chain+0x26>
 8013a86:	69bb      	ldr	r3, [r7, #24]
 8013a88:	699b      	ldr	r3, [r3, #24]
 8013a8a:	68ba      	ldr	r2, [r7, #8]
 8013a8c:	429a      	cmp	r2, r3
 8013a8e:	d301      	bcc.n	8013a94 <remove_chain+0x2a>
 8013a90:	2302      	movs	r3, #2
 8013a92:	e04b      	b.n	8013b2c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d00c      	beq.n	8013ab4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8013a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8013a9e:	6879      	ldr	r1, [r7, #4]
 8013aa0:	69b8      	ldr	r0, [r7, #24]
 8013aa2:	f7ff fef6 	bl	8013892 <put_fat>
 8013aa6:	4603      	mov	r3, r0
 8013aa8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8013aaa:	7ffb      	ldrb	r3, [r7, #31]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d001      	beq.n	8013ab4 <remove_chain+0x4a>
 8013ab0:	7ffb      	ldrb	r3, [r7, #31]
 8013ab2:	e03b      	b.n	8013b2c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8013ab4:	68b9      	ldr	r1, [r7, #8]
 8013ab6:	68f8      	ldr	r0, [r7, #12]
 8013ab8:	f7ff fe43 	bl	8013742 <get_fat>
 8013abc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8013abe:	697b      	ldr	r3, [r7, #20]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d031      	beq.n	8013b28 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8013ac4:	697b      	ldr	r3, [r7, #20]
 8013ac6:	2b01      	cmp	r3, #1
 8013ac8:	d101      	bne.n	8013ace <remove_chain+0x64>
 8013aca:	2302      	movs	r3, #2
 8013acc:	e02e      	b.n	8013b2c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013ace:	697b      	ldr	r3, [r7, #20]
 8013ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ad4:	d101      	bne.n	8013ada <remove_chain+0x70>
 8013ad6:	2301      	movs	r3, #1
 8013ad8:	e028      	b.n	8013b2c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8013ada:	2200      	movs	r2, #0
 8013adc:	68b9      	ldr	r1, [r7, #8]
 8013ade:	69b8      	ldr	r0, [r7, #24]
 8013ae0:	f7ff fed7 	bl	8013892 <put_fat>
 8013ae4:	4603      	mov	r3, r0
 8013ae6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8013ae8:	7ffb      	ldrb	r3, [r7, #31]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d001      	beq.n	8013af2 <remove_chain+0x88>
 8013aee:	7ffb      	ldrb	r3, [r7, #31]
 8013af0:	e01c      	b.n	8013b2c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8013af2:	69bb      	ldr	r3, [r7, #24]
 8013af4:	695a      	ldr	r2, [r3, #20]
 8013af6:	69bb      	ldr	r3, [r7, #24]
 8013af8:	699b      	ldr	r3, [r3, #24]
 8013afa:	3b02      	subs	r3, #2
 8013afc:	429a      	cmp	r2, r3
 8013afe:	d20b      	bcs.n	8013b18 <remove_chain+0xae>
			fs->free_clst++;
 8013b00:	69bb      	ldr	r3, [r7, #24]
 8013b02:	695b      	ldr	r3, [r3, #20]
 8013b04:	1c5a      	adds	r2, r3, #1
 8013b06:	69bb      	ldr	r3, [r7, #24]
 8013b08:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8013b0a:	69bb      	ldr	r3, [r7, #24]
 8013b0c:	791b      	ldrb	r3, [r3, #4]
 8013b0e:	f043 0301 	orr.w	r3, r3, #1
 8013b12:	b2da      	uxtb	r2, r3
 8013b14:	69bb      	ldr	r3, [r7, #24]
 8013b16:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8013b18:	697b      	ldr	r3, [r7, #20]
 8013b1a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8013b1c:	69bb      	ldr	r3, [r7, #24]
 8013b1e:	699b      	ldr	r3, [r3, #24]
 8013b20:	68ba      	ldr	r2, [r7, #8]
 8013b22:	429a      	cmp	r2, r3
 8013b24:	d3c6      	bcc.n	8013ab4 <remove_chain+0x4a>
 8013b26:	e000      	b.n	8013b2a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8013b28:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8013b2a:	2300      	movs	r3, #0
}
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	3720      	adds	r7, #32
 8013b30:	46bd      	mov	sp, r7
 8013b32:	bd80      	pop	{r7, pc}

08013b34 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8013b34:	b580      	push	{r7, lr}
 8013b36:	b088      	sub	sp, #32
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	6078      	str	r0, [r7, #4]
 8013b3c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8013b44:	683b      	ldr	r3, [r7, #0]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d10d      	bne.n	8013b66 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8013b4a:	693b      	ldr	r3, [r7, #16]
 8013b4c:	691b      	ldr	r3, [r3, #16]
 8013b4e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013b50:	69bb      	ldr	r3, [r7, #24]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d004      	beq.n	8013b60 <create_chain+0x2c>
 8013b56:	693b      	ldr	r3, [r7, #16]
 8013b58:	699b      	ldr	r3, [r3, #24]
 8013b5a:	69ba      	ldr	r2, [r7, #24]
 8013b5c:	429a      	cmp	r2, r3
 8013b5e:	d31b      	bcc.n	8013b98 <create_chain+0x64>
 8013b60:	2301      	movs	r3, #1
 8013b62:	61bb      	str	r3, [r7, #24]
 8013b64:	e018      	b.n	8013b98 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8013b66:	6839      	ldr	r1, [r7, #0]
 8013b68:	6878      	ldr	r0, [r7, #4]
 8013b6a:	f7ff fdea 	bl	8013742 <get_fat>
 8013b6e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	2b01      	cmp	r3, #1
 8013b74:	d801      	bhi.n	8013b7a <create_chain+0x46>
 8013b76:	2301      	movs	r3, #1
 8013b78:	e070      	b.n	8013c5c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b80:	d101      	bne.n	8013b86 <create_chain+0x52>
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	e06a      	b.n	8013c5c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8013b86:	693b      	ldr	r3, [r7, #16]
 8013b88:	699b      	ldr	r3, [r3, #24]
 8013b8a:	68fa      	ldr	r2, [r7, #12]
 8013b8c:	429a      	cmp	r2, r3
 8013b8e:	d201      	bcs.n	8013b94 <create_chain+0x60>
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	e063      	b.n	8013c5c <create_chain+0x128>
		scl = clst;
 8013b94:	683b      	ldr	r3, [r7, #0]
 8013b96:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8013b98:	69bb      	ldr	r3, [r7, #24]
 8013b9a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8013b9c:	69fb      	ldr	r3, [r7, #28]
 8013b9e:	3301      	adds	r3, #1
 8013ba0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8013ba2:	693b      	ldr	r3, [r7, #16]
 8013ba4:	699b      	ldr	r3, [r3, #24]
 8013ba6:	69fa      	ldr	r2, [r7, #28]
 8013ba8:	429a      	cmp	r2, r3
 8013baa:	d307      	bcc.n	8013bbc <create_chain+0x88>
				ncl = 2;
 8013bac:	2302      	movs	r3, #2
 8013bae:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8013bb0:	69fa      	ldr	r2, [r7, #28]
 8013bb2:	69bb      	ldr	r3, [r7, #24]
 8013bb4:	429a      	cmp	r2, r3
 8013bb6:	d901      	bls.n	8013bbc <create_chain+0x88>
 8013bb8:	2300      	movs	r3, #0
 8013bba:	e04f      	b.n	8013c5c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013bbc:	69f9      	ldr	r1, [r7, #28]
 8013bbe:	6878      	ldr	r0, [r7, #4]
 8013bc0:	f7ff fdbf 	bl	8013742 <get_fat>
 8013bc4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d00e      	beq.n	8013bea <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	2b01      	cmp	r3, #1
 8013bd0:	d003      	beq.n	8013bda <create_chain+0xa6>
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bd8:	d101      	bne.n	8013bde <create_chain+0xaa>
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	e03e      	b.n	8013c5c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013bde:	69fa      	ldr	r2, [r7, #28]
 8013be0:	69bb      	ldr	r3, [r7, #24]
 8013be2:	429a      	cmp	r2, r3
 8013be4:	d1da      	bne.n	8013b9c <create_chain+0x68>
 8013be6:	2300      	movs	r3, #0
 8013be8:	e038      	b.n	8013c5c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8013bea:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013bec:	f04f 32ff 	mov.w	r2, #4294967295
 8013bf0:	69f9      	ldr	r1, [r7, #28]
 8013bf2:	6938      	ldr	r0, [r7, #16]
 8013bf4:	f7ff fe4d 	bl	8013892 <put_fat>
 8013bf8:	4603      	mov	r3, r0
 8013bfa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8013bfc:	7dfb      	ldrb	r3, [r7, #23]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d109      	bne.n	8013c16 <create_chain+0xe2>
 8013c02:	683b      	ldr	r3, [r7, #0]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d006      	beq.n	8013c16 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8013c08:	69fa      	ldr	r2, [r7, #28]
 8013c0a:	6839      	ldr	r1, [r7, #0]
 8013c0c:	6938      	ldr	r0, [r7, #16]
 8013c0e:	f7ff fe40 	bl	8013892 <put_fat>
 8013c12:	4603      	mov	r3, r0
 8013c14:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8013c16:	7dfb      	ldrb	r3, [r7, #23]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d116      	bne.n	8013c4a <create_chain+0x116>
		fs->last_clst = ncl;
 8013c1c:	693b      	ldr	r3, [r7, #16]
 8013c1e:	69fa      	ldr	r2, [r7, #28]
 8013c20:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8013c22:	693b      	ldr	r3, [r7, #16]
 8013c24:	695a      	ldr	r2, [r3, #20]
 8013c26:	693b      	ldr	r3, [r7, #16]
 8013c28:	699b      	ldr	r3, [r3, #24]
 8013c2a:	3b02      	subs	r3, #2
 8013c2c:	429a      	cmp	r2, r3
 8013c2e:	d804      	bhi.n	8013c3a <create_chain+0x106>
 8013c30:	693b      	ldr	r3, [r7, #16]
 8013c32:	695b      	ldr	r3, [r3, #20]
 8013c34:	1e5a      	subs	r2, r3, #1
 8013c36:	693b      	ldr	r3, [r7, #16]
 8013c38:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8013c3a:	693b      	ldr	r3, [r7, #16]
 8013c3c:	791b      	ldrb	r3, [r3, #4]
 8013c3e:	f043 0301 	orr.w	r3, r3, #1
 8013c42:	b2da      	uxtb	r2, r3
 8013c44:	693b      	ldr	r3, [r7, #16]
 8013c46:	711a      	strb	r2, [r3, #4]
 8013c48:	e007      	b.n	8013c5a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8013c4a:	7dfb      	ldrb	r3, [r7, #23]
 8013c4c:	2b01      	cmp	r3, #1
 8013c4e:	d102      	bne.n	8013c56 <create_chain+0x122>
 8013c50:	f04f 33ff 	mov.w	r3, #4294967295
 8013c54:	e000      	b.n	8013c58 <create_chain+0x124>
 8013c56:	2301      	movs	r3, #1
 8013c58:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8013c5a:	69fb      	ldr	r3, [r7, #28]
}
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	3720      	adds	r7, #32
 8013c60:	46bd      	mov	sp, r7
 8013c62:	bd80      	pop	{r7, pc}

08013c64 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8013c64:	b480      	push	{r7}
 8013c66:	b087      	sub	sp, #28
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
 8013c6c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c78:	3304      	adds	r3, #4
 8013c7a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013c7c:	683b      	ldr	r3, [r7, #0]
 8013c7e:	0a5b      	lsrs	r3, r3, #9
 8013c80:	68fa      	ldr	r2, [r7, #12]
 8013c82:	8952      	ldrh	r2, [r2, #10]
 8013c84:	fbb3 f3f2 	udiv	r3, r3, r2
 8013c88:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013c8a:	693b      	ldr	r3, [r7, #16]
 8013c8c:	1d1a      	adds	r2, r3, #4
 8013c8e:	613a      	str	r2, [r7, #16]
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013c94:	68bb      	ldr	r3, [r7, #8]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d101      	bne.n	8013c9e <clmt_clust+0x3a>
 8013c9a:	2300      	movs	r3, #0
 8013c9c:	e010      	b.n	8013cc0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8013c9e:	697a      	ldr	r2, [r7, #20]
 8013ca0:	68bb      	ldr	r3, [r7, #8]
 8013ca2:	429a      	cmp	r2, r3
 8013ca4:	d307      	bcc.n	8013cb6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8013ca6:	697a      	ldr	r2, [r7, #20]
 8013ca8:	68bb      	ldr	r3, [r7, #8]
 8013caa:	1ad3      	subs	r3, r2, r3
 8013cac:	617b      	str	r3, [r7, #20]
 8013cae:	693b      	ldr	r3, [r7, #16]
 8013cb0:	3304      	adds	r3, #4
 8013cb2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013cb4:	e7e9      	b.n	8013c8a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8013cb6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8013cb8:	693b      	ldr	r3, [r7, #16]
 8013cba:	681a      	ldr	r2, [r3, #0]
 8013cbc:	697b      	ldr	r3, [r7, #20]
 8013cbe:	4413      	add	r3, r2
}
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	371c      	adds	r7, #28
 8013cc4:	46bd      	mov	sp, r7
 8013cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cca:	4770      	bx	lr

08013ccc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8013ccc:	b580      	push	{r7, lr}
 8013cce:	b086      	sub	sp, #24
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	6078      	str	r0, [r7, #4]
 8013cd4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8013cdc:	683b      	ldr	r3, [r7, #0]
 8013cde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013ce2:	d204      	bcs.n	8013cee <dir_sdi+0x22>
 8013ce4:	683b      	ldr	r3, [r7, #0]
 8013ce6:	f003 031f 	and.w	r3, r3, #31
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d001      	beq.n	8013cf2 <dir_sdi+0x26>
		return FR_INT_ERR;
 8013cee:	2302      	movs	r3, #2
 8013cf0:	e063      	b.n	8013dba <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	683a      	ldr	r2, [r7, #0]
 8013cf6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	689b      	ldr	r3, [r3, #8]
 8013cfc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8013cfe:	697b      	ldr	r3, [r7, #20]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d106      	bne.n	8013d12 <dir_sdi+0x46>
 8013d04:	693b      	ldr	r3, [r7, #16]
 8013d06:	781b      	ldrb	r3, [r3, #0]
 8013d08:	2b02      	cmp	r3, #2
 8013d0a:	d902      	bls.n	8013d12 <dir_sdi+0x46>
		clst = fs->dirbase;
 8013d0c:	693b      	ldr	r3, [r7, #16]
 8013d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d10:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013d12:	697b      	ldr	r3, [r7, #20]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d10c      	bne.n	8013d32 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8013d18:	683b      	ldr	r3, [r7, #0]
 8013d1a:	095b      	lsrs	r3, r3, #5
 8013d1c:	693a      	ldr	r2, [r7, #16]
 8013d1e:	8912      	ldrh	r2, [r2, #8]
 8013d20:	4293      	cmp	r3, r2
 8013d22:	d301      	bcc.n	8013d28 <dir_sdi+0x5c>
 8013d24:	2302      	movs	r3, #2
 8013d26:	e048      	b.n	8013dba <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8013d28:	693b      	ldr	r3, [r7, #16]
 8013d2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	61da      	str	r2, [r3, #28]
 8013d30:	e029      	b.n	8013d86 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013d32:	693b      	ldr	r3, [r7, #16]
 8013d34:	895b      	ldrh	r3, [r3, #10]
 8013d36:	025b      	lsls	r3, r3, #9
 8013d38:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013d3a:	e019      	b.n	8013d70 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	6979      	ldr	r1, [r7, #20]
 8013d40:	4618      	mov	r0, r3
 8013d42:	f7ff fcfe 	bl	8013742 <get_fat>
 8013d46:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013d48:	697b      	ldr	r3, [r7, #20]
 8013d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d4e:	d101      	bne.n	8013d54 <dir_sdi+0x88>
 8013d50:	2301      	movs	r3, #1
 8013d52:	e032      	b.n	8013dba <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013d54:	697b      	ldr	r3, [r7, #20]
 8013d56:	2b01      	cmp	r3, #1
 8013d58:	d904      	bls.n	8013d64 <dir_sdi+0x98>
 8013d5a:	693b      	ldr	r3, [r7, #16]
 8013d5c:	699b      	ldr	r3, [r3, #24]
 8013d5e:	697a      	ldr	r2, [r7, #20]
 8013d60:	429a      	cmp	r2, r3
 8013d62:	d301      	bcc.n	8013d68 <dir_sdi+0x9c>
 8013d64:	2302      	movs	r3, #2
 8013d66:	e028      	b.n	8013dba <dir_sdi+0xee>
			ofs -= csz;
 8013d68:	683a      	ldr	r2, [r7, #0]
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	1ad3      	subs	r3, r2, r3
 8013d6e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013d70:	683a      	ldr	r2, [r7, #0]
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	429a      	cmp	r2, r3
 8013d76:	d2e1      	bcs.n	8013d3c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8013d78:	6979      	ldr	r1, [r7, #20]
 8013d7a:	6938      	ldr	r0, [r7, #16]
 8013d7c:	f7ff fcc2 	bl	8013704 <clust2sect>
 8013d80:	4602      	mov	r2, r0
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	697a      	ldr	r2, [r7, #20]
 8013d8a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	69db      	ldr	r3, [r3, #28]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d101      	bne.n	8013d98 <dir_sdi+0xcc>
 8013d94:	2302      	movs	r3, #2
 8013d96:	e010      	b.n	8013dba <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	69da      	ldr	r2, [r3, #28]
 8013d9c:	683b      	ldr	r3, [r7, #0]
 8013d9e:	0a5b      	lsrs	r3, r3, #9
 8013da0:	441a      	add	r2, r3
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8013da6:	693b      	ldr	r3, [r7, #16]
 8013da8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013dac:	683b      	ldr	r3, [r7, #0]
 8013dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013db2:	441a      	add	r2, r3
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013db8:	2300      	movs	r3, #0
}
 8013dba:	4618      	mov	r0, r3
 8013dbc:	3718      	adds	r7, #24
 8013dbe:	46bd      	mov	sp, r7
 8013dc0:	bd80      	pop	{r7, pc}

08013dc2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013dc2:	b580      	push	{r7, lr}
 8013dc4:	b086      	sub	sp, #24
 8013dc6:	af00      	add	r7, sp, #0
 8013dc8:	6078      	str	r0, [r7, #4]
 8013dca:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	695b      	ldr	r3, [r3, #20]
 8013dd6:	3320      	adds	r3, #32
 8013dd8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	69db      	ldr	r3, [r3, #28]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d003      	beq.n	8013dea <dir_next+0x28>
 8013de2:	68bb      	ldr	r3, [r7, #8]
 8013de4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013de8:	d301      	bcc.n	8013dee <dir_next+0x2c>
 8013dea:	2304      	movs	r3, #4
 8013dec:	e0aa      	b.n	8013f44 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013dee:	68bb      	ldr	r3, [r7, #8]
 8013df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	f040 8098 	bne.w	8013f2a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	69db      	ldr	r3, [r3, #28]
 8013dfe:	1c5a      	adds	r2, r3, #1
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	699b      	ldr	r3, [r3, #24]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d10b      	bne.n	8013e24 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013e0c:	68bb      	ldr	r3, [r7, #8]
 8013e0e:	095b      	lsrs	r3, r3, #5
 8013e10:	68fa      	ldr	r2, [r7, #12]
 8013e12:	8912      	ldrh	r2, [r2, #8]
 8013e14:	4293      	cmp	r3, r2
 8013e16:	f0c0 8088 	bcc.w	8013f2a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	2200      	movs	r2, #0
 8013e1e:	61da      	str	r2, [r3, #28]
 8013e20:	2304      	movs	r3, #4
 8013e22:	e08f      	b.n	8013f44 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013e24:	68bb      	ldr	r3, [r7, #8]
 8013e26:	0a5b      	lsrs	r3, r3, #9
 8013e28:	68fa      	ldr	r2, [r7, #12]
 8013e2a:	8952      	ldrh	r2, [r2, #10]
 8013e2c:	3a01      	subs	r2, #1
 8013e2e:	4013      	ands	r3, r2
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d17a      	bne.n	8013f2a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013e34:	687a      	ldr	r2, [r7, #4]
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	699b      	ldr	r3, [r3, #24]
 8013e3a:	4619      	mov	r1, r3
 8013e3c:	4610      	mov	r0, r2
 8013e3e:	f7ff fc80 	bl	8013742 <get_fat>
 8013e42:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013e44:	697b      	ldr	r3, [r7, #20]
 8013e46:	2b01      	cmp	r3, #1
 8013e48:	d801      	bhi.n	8013e4e <dir_next+0x8c>
 8013e4a:	2302      	movs	r3, #2
 8013e4c:	e07a      	b.n	8013f44 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013e4e:	697b      	ldr	r3, [r7, #20]
 8013e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e54:	d101      	bne.n	8013e5a <dir_next+0x98>
 8013e56:	2301      	movs	r3, #1
 8013e58:	e074      	b.n	8013f44 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	699b      	ldr	r3, [r3, #24]
 8013e5e:	697a      	ldr	r2, [r7, #20]
 8013e60:	429a      	cmp	r2, r3
 8013e62:	d358      	bcc.n	8013f16 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8013e64:	683b      	ldr	r3, [r7, #0]
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d104      	bne.n	8013e74 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	2200      	movs	r2, #0
 8013e6e:	61da      	str	r2, [r3, #28]
 8013e70:	2304      	movs	r3, #4
 8013e72:	e067      	b.n	8013f44 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8013e74:	687a      	ldr	r2, [r7, #4]
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	699b      	ldr	r3, [r3, #24]
 8013e7a:	4619      	mov	r1, r3
 8013e7c:	4610      	mov	r0, r2
 8013e7e:	f7ff fe59 	bl	8013b34 <create_chain>
 8013e82:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8013e84:	697b      	ldr	r3, [r7, #20]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d101      	bne.n	8013e8e <dir_next+0xcc>
 8013e8a:	2307      	movs	r3, #7
 8013e8c:	e05a      	b.n	8013f44 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013e8e:	697b      	ldr	r3, [r7, #20]
 8013e90:	2b01      	cmp	r3, #1
 8013e92:	d101      	bne.n	8013e98 <dir_next+0xd6>
 8013e94:	2302      	movs	r3, #2
 8013e96:	e055      	b.n	8013f44 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013e98:	697b      	ldr	r3, [r7, #20]
 8013e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e9e:	d101      	bne.n	8013ea4 <dir_next+0xe2>
 8013ea0:	2301      	movs	r3, #1
 8013ea2:	e04f      	b.n	8013f44 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8013ea4:	68f8      	ldr	r0, [r7, #12]
 8013ea6:	f7ff fb4d 	bl	8013544 <sync_window>
 8013eaa:	4603      	mov	r3, r0
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d001      	beq.n	8013eb4 <dir_next+0xf2>
 8013eb0:	2301      	movs	r3, #1
 8013eb2:	e047      	b.n	8013f44 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	3334      	adds	r3, #52	; 0x34
 8013eb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013ebc:	2100      	movs	r1, #0
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	f7ff f945 	bl	801314e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	613b      	str	r3, [r7, #16]
 8013ec8:	6979      	ldr	r1, [r7, #20]
 8013eca:	68f8      	ldr	r0, [r7, #12]
 8013ecc:	f7ff fc1a 	bl	8013704 <clust2sect>
 8013ed0:	4602      	mov	r2, r0
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	631a      	str	r2, [r3, #48]	; 0x30
 8013ed6:	e012      	b.n	8013efe <dir_next+0x13c>
						fs->wflag = 1;
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	2201      	movs	r2, #1
 8013edc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013ede:	68f8      	ldr	r0, [r7, #12]
 8013ee0:	f7ff fb30 	bl	8013544 <sync_window>
 8013ee4:	4603      	mov	r3, r0
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d001      	beq.n	8013eee <dir_next+0x12c>
 8013eea:	2301      	movs	r3, #1
 8013eec:	e02a      	b.n	8013f44 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013eee:	693b      	ldr	r3, [r7, #16]
 8013ef0:	3301      	adds	r3, #1
 8013ef2:	613b      	str	r3, [r7, #16]
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ef8:	1c5a      	adds	r2, r3, #1
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	631a      	str	r2, [r3, #48]	; 0x30
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	895b      	ldrh	r3, [r3, #10]
 8013f02:	461a      	mov	r2, r3
 8013f04:	693b      	ldr	r3, [r7, #16]
 8013f06:	4293      	cmp	r3, r2
 8013f08:	d3e6      	bcc.n	8013ed8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013f0e:	693b      	ldr	r3, [r7, #16]
 8013f10:	1ad2      	subs	r2, r2, r3
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	697a      	ldr	r2, [r7, #20]
 8013f1a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8013f1c:	6979      	ldr	r1, [r7, #20]
 8013f1e:	68f8      	ldr	r0, [r7, #12]
 8013f20:	f7ff fbf0 	bl	8013704 <clust2sect>
 8013f24:	4602      	mov	r2, r0
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	68ba      	ldr	r2, [r7, #8]
 8013f2e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013f36:	68bb      	ldr	r3, [r7, #8]
 8013f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f3c:	441a      	add	r2, r3
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013f42:	2300      	movs	r3, #0
}
 8013f44:	4618      	mov	r0, r3
 8013f46:	3718      	adds	r7, #24
 8013f48:	46bd      	mov	sp, r7
 8013f4a:	bd80      	pop	{r7, pc}

08013f4c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013f4c:	b580      	push	{r7, lr}
 8013f4e:	b086      	sub	sp, #24
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	6078      	str	r0, [r7, #4]
 8013f54:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013f5c:	2100      	movs	r1, #0
 8013f5e:	6878      	ldr	r0, [r7, #4]
 8013f60:	f7ff feb4 	bl	8013ccc <dir_sdi>
 8013f64:	4603      	mov	r3, r0
 8013f66:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013f68:	7dfb      	ldrb	r3, [r7, #23]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d12b      	bne.n	8013fc6 <dir_alloc+0x7a>
		n = 0;
 8013f6e:	2300      	movs	r3, #0
 8013f70:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	69db      	ldr	r3, [r3, #28]
 8013f76:	4619      	mov	r1, r3
 8013f78:	68f8      	ldr	r0, [r7, #12]
 8013f7a:	f7ff fb27 	bl	80135cc <move_window>
 8013f7e:	4603      	mov	r3, r0
 8013f80:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013f82:	7dfb      	ldrb	r3, [r7, #23]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d11d      	bne.n	8013fc4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	6a1b      	ldr	r3, [r3, #32]
 8013f8c:	781b      	ldrb	r3, [r3, #0]
 8013f8e:	2be5      	cmp	r3, #229	; 0xe5
 8013f90:	d004      	beq.n	8013f9c <dir_alloc+0x50>
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	6a1b      	ldr	r3, [r3, #32]
 8013f96:	781b      	ldrb	r3, [r3, #0]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d107      	bne.n	8013fac <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013f9c:	693b      	ldr	r3, [r7, #16]
 8013f9e:	3301      	adds	r3, #1
 8013fa0:	613b      	str	r3, [r7, #16]
 8013fa2:	693a      	ldr	r2, [r7, #16]
 8013fa4:	683b      	ldr	r3, [r7, #0]
 8013fa6:	429a      	cmp	r2, r3
 8013fa8:	d102      	bne.n	8013fb0 <dir_alloc+0x64>
 8013faa:	e00c      	b.n	8013fc6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013fac:	2300      	movs	r3, #0
 8013fae:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013fb0:	2101      	movs	r1, #1
 8013fb2:	6878      	ldr	r0, [r7, #4]
 8013fb4:	f7ff ff05 	bl	8013dc2 <dir_next>
 8013fb8:	4603      	mov	r3, r0
 8013fba:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013fbc:	7dfb      	ldrb	r3, [r7, #23]
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d0d7      	beq.n	8013f72 <dir_alloc+0x26>
 8013fc2:	e000      	b.n	8013fc6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013fc4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013fc6:	7dfb      	ldrb	r3, [r7, #23]
 8013fc8:	2b04      	cmp	r3, #4
 8013fca:	d101      	bne.n	8013fd0 <dir_alloc+0x84>
 8013fcc:	2307      	movs	r3, #7
 8013fce:	75fb      	strb	r3, [r7, #23]
	return res;
 8013fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	3718      	adds	r7, #24
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	bd80      	pop	{r7, pc}

08013fda <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013fda:	b580      	push	{r7, lr}
 8013fdc:	b084      	sub	sp, #16
 8013fde:	af00      	add	r7, sp, #0
 8013fe0:	6078      	str	r0, [r7, #4]
 8013fe2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013fe4:	683b      	ldr	r3, [r7, #0]
 8013fe6:	331a      	adds	r3, #26
 8013fe8:	4618      	mov	r0, r3
 8013fea:	f7ff f80d 	bl	8013008 <ld_word>
 8013fee:	4603      	mov	r3, r0
 8013ff0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	781b      	ldrb	r3, [r3, #0]
 8013ff6:	2b03      	cmp	r3, #3
 8013ff8:	d109      	bne.n	801400e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013ffa:	683b      	ldr	r3, [r7, #0]
 8013ffc:	3314      	adds	r3, #20
 8013ffe:	4618      	mov	r0, r3
 8014000:	f7ff f802 	bl	8013008 <ld_word>
 8014004:	4603      	mov	r3, r0
 8014006:	041b      	lsls	r3, r3, #16
 8014008:	68fa      	ldr	r2, [r7, #12]
 801400a:	4313      	orrs	r3, r2
 801400c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801400e:	68fb      	ldr	r3, [r7, #12]
}
 8014010:	4618      	mov	r0, r3
 8014012:	3710      	adds	r7, #16
 8014014:	46bd      	mov	sp, r7
 8014016:	bd80      	pop	{r7, pc}

08014018 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8014018:	b580      	push	{r7, lr}
 801401a:	b084      	sub	sp, #16
 801401c:	af00      	add	r7, sp, #0
 801401e:	60f8      	str	r0, [r7, #12]
 8014020:	60b9      	str	r1, [r7, #8]
 8014022:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8014024:	68bb      	ldr	r3, [r7, #8]
 8014026:	331a      	adds	r3, #26
 8014028:	687a      	ldr	r2, [r7, #4]
 801402a:	b292      	uxth	r2, r2
 801402c:	4611      	mov	r1, r2
 801402e:	4618      	mov	r0, r3
 8014030:	f7ff f825 	bl	801307e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	781b      	ldrb	r3, [r3, #0]
 8014038:	2b03      	cmp	r3, #3
 801403a:	d109      	bne.n	8014050 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801403c:	68bb      	ldr	r3, [r7, #8]
 801403e:	f103 0214 	add.w	r2, r3, #20
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	0c1b      	lsrs	r3, r3, #16
 8014046:	b29b      	uxth	r3, r3
 8014048:	4619      	mov	r1, r3
 801404a:	4610      	mov	r0, r2
 801404c:	f7ff f817 	bl	801307e <st_word>
	}
}
 8014050:	bf00      	nop
 8014052:	3710      	adds	r7, #16
 8014054:	46bd      	mov	sp, r7
 8014056:	bd80      	pop	{r7, pc}

08014058 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8014058:	b580      	push	{r7, lr}
 801405a:	b086      	sub	sp, #24
 801405c:	af00      	add	r7, sp, #0
 801405e:	6078      	str	r0, [r7, #4]
 8014060:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8014062:	2304      	movs	r3, #4
 8014064:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 801406c:	e03c      	b.n	80140e8 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	69db      	ldr	r3, [r3, #28]
 8014072:	4619      	mov	r1, r3
 8014074:	6938      	ldr	r0, [r7, #16]
 8014076:	f7ff faa9 	bl	80135cc <move_window>
 801407a:	4603      	mov	r3, r0
 801407c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801407e:	7dfb      	ldrb	r3, [r7, #23]
 8014080:	2b00      	cmp	r3, #0
 8014082:	d136      	bne.n	80140f2 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	6a1b      	ldr	r3, [r3, #32]
 8014088:	781b      	ldrb	r3, [r3, #0]
 801408a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 801408c:	7bfb      	ldrb	r3, [r7, #15]
 801408e:	2b00      	cmp	r3, #0
 8014090:	d102      	bne.n	8014098 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8014092:	2304      	movs	r3, #4
 8014094:	75fb      	strb	r3, [r7, #23]
 8014096:	e031      	b.n	80140fc <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	6a1b      	ldr	r3, [r3, #32]
 801409c:	330b      	adds	r3, #11
 801409e:	781b      	ldrb	r3, [r3, #0]
 80140a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80140a4:	73bb      	strb	r3, [r7, #14]
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	7bba      	ldrb	r2, [r7, #14]
 80140aa:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80140ac:	7bfb      	ldrb	r3, [r7, #15]
 80140ae:	2be5      	cmp	r3, #229	; 0xe5
 80140b0:	d011      	beq.n	80140d6 <dir_read+0x7e>
 80140b2:	7bfb      	ldrb	r3, [r7, #15]
 80140b4:	2b2e      	cmp	r3, #46	; 0x2e
 80140b6:	d00e      	beq.n	80140d6 <dir_read+0x7e>
 80140b8:	7bbb      	ldrb	r3, [r7, #14]
 80140ba:	2b0f      	cmp	r3, #15
 80140bc:	d00b      	beq.n	80140d6 <dir_read+0x7e>
 80140be:	7bbb      	ldrb	r3, [r7, #14]
 80140c0:	f023 0320 	bic.w	r3, r3, #32
 80140c4:	2b08      	cmp	r3, #8
 80140c6:	bf0c      	ite	eq
 80140c8:	2301      	moveq	r3, #1
 80140ca:	2300      	movne	r3, #0
 80140cc:	b2db      	uxtb	r3, r3
 80140ce:	461a      	mov	r2, r3
 80140d0:	683b      	ldr	r3, [r7, #0]
 80140d2:	4293      	cmp	r3, r2
 80140d4:	d00f      	beq.n	80140f6 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80140d6:	2100      	movs	r1, #0
 80140d8:	6878      	ldr	r0, [r7, #4]
 80140da:	f7ff fe72 	bl	8013dc2 <dir_next>
 80140de:	4603      	mov	r3, r0
 80140e0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80140e2:	7dfb      	ldrb	r3, [r7, #23]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d108      	bne.n	80140fa <dir_read+0xa2>
	while (dp->sect) {
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	69db      	ldr	r3, [r3, #28]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d1be      	bne.n	801406e <dir_read+0x16>
 80140f0:	e004      	b.n	80140fc <dir_read+0xa4>
		if (res != FR_OK) break;
 80140f2:	bf00      	nop
 80140f4:	e002      	b.n	80140fc <dir_read+0xa4>
				break;
 80140f6:	bf00      	nop
 80140f8:	e000      	b.n	80140fc <dir_read+0xa4>
		if (res != FR_OK) break;
 80140fa:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80140fc:	7dfb      	ldrb	r3, [r7, #23]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d002      	beq.n	8014108 <dir_read+0xb0>
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	2200      	movs	r2, #0
 8014106:	61da      	str	r2, [r3, #28]
	return res;
 8014108:	7dfb      	ldrb	r3, [r7, #23]
}
 801410a:	4618      	mov	r0, r3
 801410c:	3718      	adds	r7, #24
 801410e:	46bd      	mov	sp, r7
 8014110:	bd80      	pop	{r7, pc}

08014112 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8014112:	b580      	push	{r7, lr}
 8014114:	b086      	sub	sp, #24
 8014116:	af00      	add	r7, sp, #0
 8014118:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8014120:	2100      	movs	r1, #0
 8014122:	6878      	ldr	r0, [r7, #4]
 8014124:	f7ff fdd2 	bl	8013ccc <dir_sdi>
 8014128:	4603      	mov	r3, r0
 801412a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801412c:	7dfb      	ldrb	r3, [r7, #23]
 801412e:	2b00      	cmp	r3, #0
 8014130:	d001      	beq.n	8014136 <dir_find+0x24>
 8014132:	7dfb      	ldrb	r3, [r7, #23]
 8014134:	e03e      	b.n	80141b4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	69db      	ldr	r3, [r3, #28]
 801413a:	4619      	mov	r1, r3
 801413c:	6938      	ldr	r0, [r7, #16]
 801413e:	f7ff fa45 	bl	80135cc <move_window>
 8014142:	4603      	mov	r3, r0
 8014144:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8014146:	7dfb      	ldrb	r3, [r7, #23]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d12f      	bne.n	80141ac <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	6a1b      	ldr	r3, [r3, #32]
 8014150:	781b      	ldrb	r3, [r3, #0]
 8014152:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8014154:	7bfb      	ldrb	r3, [r7, #15]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d102      	bne.n	8014160 <dir_find+0x4e>
 801415a:	2304      	movs	r3, #4
 801415c:	75fb      	strb	r3, [r7, #23]
 801415e:	e028      	b.n	80141b2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	6a1b      	ldr	r3, [r3, #32]
 8014164:	330b      	adds	r3, #11
 8014166:	781b      	ldrb	r3, [r3, #0]
 8014168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801416c:	b2da      	uxtb	r2, r3
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	6a1b      	ldr	r3, [r3, #32]
 8014176:	330b      	adds	r3, #11
 8014178:	781b      	ldrb	r3, [r3, #0]
 801417a:	f003 0308 	and.w	r3, r3, #8
 801417e:	2b00      	cmp	r3, #0
 8014180:	d10a      	bne.n	8014198 <dir_find+0x86>
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	6a18      	ldr	r0, [r3, #32]
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	3324      	adds	r3, #36	; 0x24
 801418a:	220b      	movs	r2, #11
 801418c:	4619      	mov	r1, r3
 801418e:	f7fe fff9 	bl	8013184 <mem_cmp>
 8014192:	4603      	mov	r3, r0
 8014194:	2b00      	cmp	r3, #0
 8014196:	d00b      	beq.n	80141b0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8014198:	2100      	movs	r1, #0
 801419a:	6878      	ldr	r0, [r7, #4]
 801419c:	f7ff fe11 	bl	8013dc2 <dir_next>
 80141a0:	4603      	mov	r3, r0
 80141a2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80141a4:	7dfb      	ldrb	r3, [r7, #23]
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d0c5      	beq.n	8014136 <dir_find+0x24>
 80141aa:	e002      	b.n	80141b2 <dir_find+0xa0>
		if (res != FR_OK) break;
 80141ac:	bf00      	nop
 80141ae:	e000      	b.n	80141b2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80141b0:	bf00      	nop

	return res;
 80141b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80141b4:	4618      	mov	r0, r3
 80141b6:	3718      	adds	r7, #24
 80141b8:	46bd      	mov	sp, r7
 80141ba:	bd80      	pop	{r7, pc}

080141bc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80141bc:	b580      	push	{r7, lr}
 80141be:	b084      	sub	sp, #16
 80141c0:	af00      	add	r7, sp, #0
 80141c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80141ca:	2101      	movs	r1, #1
 80141cc:	6878      	ldr	r0, [r7, #4]
 80141ce:	f7ff febd 	bl	8013f4c <dir_alloc>
 80141d2:	4603      	mov	r3, r0
 80141d4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80141d6:	7bfb      	ldrb	r3, [r7, #15]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d11c      	bne.n	8014216 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	69db      	ldr	r3, [r3, #28]
 80141e0:	4619      	mov	r1, r3
 80141e2:	68b8      	ldr	r0, [r7, #8]
 80141e4:	f7ff f9f2 	bl	80135cc <move_window>
 80141e8:	4603      	mov	r3, r0
 80141ea:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80141ec:	7bfb      	ldrb	r3, [r7, #15]
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d111      	bne.n	8014216 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	6a1b      	ldr	r3, [r3, #32]
 80141f6:	2220      	movs	r2, #32
 80141f8:	2100      	movs	r1, #0
 80141fa:	4618      	mov	r0, r3
 80141fc:	f7fe ffa7 	bl	801314e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	6a18      	ldr	r0, [r3, #32]
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	3324      	adds	r3, #36	; 0x24
 8014208:	220b      	movs	r2, #11
 801420a:	4619      	mov	r1, r3
 801420c:	f7fe ff7e 	bl	801310c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8014210:	68bb      	ldr	r3, [r7, #8]
 8014212:	2201      	movs	r2, #1
 8014214:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8014216:	7bfb      	ldrb	r3, [r7, #15]
}
 8014218:	4618      	mov	r0, r3
 801421a:	3710      	adds	r7, #16
 801421c:	46bd      	mov	sp, r7
 801421e:	bd80      	pop	{r7, pc}

08014220 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8014220:	b580      	push	{r7, lr}
 8014222:	b086      	sub	sp, #24
 8014224:	af00      	add	r7, sp, #0
 8014226:	6078      	str	r0, [r7, #4]
 8014228:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 801422a:	683b      	ldr	r3, [r7, #0]
 801422c:	2200      	movs	r2, #0
 801422e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	69db      	ldr	r3, [r3, #28]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d04e      	beq.n	80142d6 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8014238:	2300      	movs	r3, #0
 801423a:	613b      	str	r3, [r7, #16]
 801423c:	693b      	ldr	r3, [r7, #16]
 801423e:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8014240:	e021      	b.n	8014286 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	6a1a      	ldr	r2, [r3, #32]
 8014246:	697b      	ldr	r3, [r7, #20]
 8014248:	1c59      	adds	r1, r3, #1
 801424a:	6179      	str	r1, [r7, #20]
 801424c:	4413      	add	r3, r2
 801424e:	781b      	ldrb	r3, [r3, #0]
 8014250:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8014252:	7bfb      	ldrb	r3, [r7, #15]
 8014254:	2b20      	cmp	r3, #32
 8014256:	d100      	bne.n	801425a <get_fileinfo+0x3a>
 8014258:	e015      	b.n	8014286 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801425a:	7bfb      	ldrb	r3, [r7, #15]
 801425c:	2b05      	cmp	r3, #5
 801425e:	d101      	bne.n	8014264 <get_fileinfo+0x44>
 8014260:	23e5      	movs	r3, #229	; 0xe5
 8014262:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8014264:	697b      	ldr	r3, [r7, #20]
 8014266:	2b09      	cmp	r3, #9
 8014268:	d106      	bne.n	8014278 <get_fileinfo+0x58>
 801426a:	693b      	ldr	r3, [r7, #16]
 801426c:	1c5a      	adds	r2, r3, #1
 801426e:	613a      	str	r2, [r7, #16]
 8014270:	683a      	ldr	r2, [r7, #0]
 8014272:	4413      	add	r3, r2
 8014274:	222e      	movs	r2, #46	; 0x2e
 8014276:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8014278:	693b      	ldr	r3, [r7, #16]
 801427a:	1c5a      	adds	r2, r3, #1
 801427c:	613a      	str	r2, [r7, #16]
 801427e:	683a      	ldr	r2, [r7, #0]
 8014280:	4413      	add	r3, r2
 8014282:	7bfa      	ldrb	r2, [r7, #15]
 8014284:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8014286:	697b      	ldr	r3, [r7, #20]
 8014288:	2b0a      	cmp	r3, #10
 801428a:	d9da      	bls.n	8014242 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 801428c:	683a      	ldr	r2, [r7, #0]
 801428e:	693b      	ldr	r3, [r7, #16]
 8014290:	4413      	add	r3, r2
 8014292:	3309      	adds	r3, #9
 8014294:	2200      	movs	r2, #0
 8014296:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	6a1b      	ldr	r3, [r3, #32]
 801429c:	7ada      	ldrb	r2, [r3, #11]
 801429e:	683b      	ldr	r3, [r7, #0]
 80142a0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	6a1b      	ldr	r3, [r3, #32]
 80142a6:	331c      	adds	r3, #28
 80142a8:	4618      	mov	r0, r3
 80142aa:	f7fe fec5 	bl	8013038 <ld_dword>
 80142ae:	4602      	mov	r2, r0
 80142b0:	683b      	ldr	r3, [r7, #0]
 80142b2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	6a1b      	ldr	r3, [r3, #32]
 80142b8:	3316      	adds	r3, #22
 80142ba:	4618      	mov	r0, r3
 80142bc:	f7fe febc 	bl	8013038 <ld_dword>
 80142c0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80142c2:	68bb      	ldr	r3, [r7, #8]
 80142c4:	b29a      	uxth	r2, r3
 80142c6:	683b      	ldr	r3, [r7, #0]
 80142c8:	80da      	strh	r2, [r3, #6]
 80142ca:	68bb      	ldr	r3, [r7, #8]
 80142cc:	0c1b      	lsrs	r3, r3, #16
 80142ce:	b29a      	uxth	r2, r3
 80142d0:	683b      	ldr	r3, [r7, #0]
 80142d2:	809a      	strh	r2, [r3, #4]
 80142d4:	e000      	b.n	80142d8 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80142d6:	bf00      	nop
}
 80142d8:	3718      	adds	r7, #24
 80142da:	46bd      	mov	sp, r7
 80142dc:	bd80      	pop	{r7, pc}
	...

080142e0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b088      	sub	sp, #32
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
 80142e8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80142ea:	683b      	ldr	r3, [r7, #0]
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	60fb      	str	r3, [r7, #12]
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	3324      	adds	r3, #36	; 0x24
 80142f4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80142f6:	220b      	movs	r2, #11
 80142f8:	2120      	movs	r1, #32
 80142fa:	68b8      	ldr	r0, [r7, #8]
 80142fc:	f7fe ff27 	bl	801314e <mem_set>
	si = i = 0; ni = 8;
 8014300:	2300      	movs	r3, #0
 8014302:	613b      	str	r3, [r7, #16]
 8014304:	693b      	ldr	r3, [r7, #16]
 8014306:	61fb      	str	r3, [r7, #28]
 8014308:	2308      	movs	r3, #8
 801430a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801430c:	69fb      	ldr	r3, [r7, #28]
 801430e:	1c5a      	adds	r2, r3, #1
 8014310:	61fa      	str	r2, [r7, #28]
 8014312:	68fa      	ldr	r2, [r7, #12]
 8014314:	4413      	add	r3, r2
 8014316:	781b      	ldrb	r3, [r3, #0]
 8014318:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801431a:	7efb      	ldrb	r3, [r7, #27]
 801431c:	2b20      	cmp	r3, #32
 801431e:	d94e      	bls.n	80143be <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8014320:	7efb      	ldrb	r3, [r7, #27]
 8014322:	2b2f      	cmp	r3, #47	; 0x2f
 8014324:	d006      	beq.n	8014334 <create_name+0x54>
 8014326:	7efb      	ldrb	r3, [r7, #27]
 8014328:	2b5c      	cmp	r3, #92	; 0x5c
 801432a:	d110      	bne.n	801434e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801432c:	e002      	b.n	8014334 <create_name+0x54>
 801432e:	69fb      	ldr	r3, [r7, #28]
 8014330:	3301      	adds	r3, #1
 8014332:	61fb      	str	r3, [r7, #28]
 8014334:	68fa      	ldr	r2, [r7, #12]
 8014336:	69fb      	ldr	r3, [r7, #28]
 8014338:	4413      	add	r3, r2
 801433a:	781b      	ldrb	r3, [r3, #0]
 801433c:	2b2f      	cmp	r3, #47	; 0x2f
 801433e:	d0f6      	beq.n	801432e <create_name+0x4e>
 8014340:	68fa      	ldr	r2, [r7, #12]
 8014342:	69fb      	ldr	r3, [r7, #28]
 8014344:	4413      	add	r3, r2
 8014346:	781b      	ldrb	r3, [r3, #0]
 8014348:	2b5c      	cmp	r3, #92	; 0x5c
 801434a:	d0f0      	beq.n	801432e <create_name+0x4e>
			break;
 801434c:	e038      	b.n	80143c0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801434e:	7efb      	ldrb	r3, [r7, #27]
 8014350:	2b2e      	cmp	r3, #46	; 0x2e
 8014352:	d003      	beq.n	801435c <create_name+0x7c>
 8014354:	693a      	ldr	r2, [r7, #16]
 8014356:	697b      	ldr	r3, [r7, #20]
 8014358:	429a      	cmp	r2, r3
 801435a:	d30c      	bcc.n	8014376 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801435c:	697b      	ldr	r3, [r7, #20]
 801435e:	2b0b      	cmp	r3, #11
 8014360:	d002      	beq.n	8014368 <create_name+0x88>
 8014362:	7efb      	ldrb	r3, [r7, #27]
 8014364:	2b2e      	cmp	r3, #46	; 0x2e
 8014366:	d001      	beq.n	801436c <create_name+0x8c>
 8014368:	2306      	movs	r3, #6
 801436a:	e044      	b.n	80143f6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801436c:	2308      	movs	r3, #8
 801436e:	613b      	str	r3, [r7, #16]
 8014370:	230b      	movs	r3, #11
 8014372:	617b      	str	r3, [r7, #20]
			continue;
 8014374:	e022      	b.n	80143bc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8014376:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801437a:	2b00      	cmp	r3, #0
 801437c:	da04      	bge.n	8014388 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801437e:	7efb      	ldrb	r3, [r7, #27]
 8014380:	3b80      	subs	r3, #128	; 0x80
 8014382:	4a1f      	ldr	r2, [pc, #124]	; (8014400 <create_name+0x120>)
 8014384:	5cd3      	ldrb	r3, [r2, r3]
 8014386:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8014388:	7efb      	ldrb	r3, [r7, #27]
 801438a:	4619      	mov	r1, r3
 801438c:	481d      	ldr	r0, [pc, #116]	; (8014404 <create_name+0x124>)
 801438e:	f7fe ff20 	bl	80131d2 <chk_chr>
 8014392:	4603      	mov	r3, r0
 8014394:	2b00      	cmp	r3, #0
 8014396:	d001      	beq.n	801439c <create_name+0xbc>
 8014398:	2306      	movs	r3, #6
 801439a:	e02c      	b.n	80143f6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801439c:	7efb      	ldrb	r3, [r7, #27]
 801439e:	2b60      	cmp	r3, #96	; 0x60
 80143a0:	d905      	bls.n	80143ae <create_name+0xce>
 80143a2:	7efb      	ldrb	r3, [r7, #27]
 80143a4:	2b7a      	cmp	r3, #122	; 0x7a
 80143a6:	d802      	bhi.n	80143ae <create_name+0xce>
 80143a8:	7efb      	ldrb	r3, [r7, #27]
 80143aa:	3b20      	subs	r3, #32
 80143ac:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80143ae:	693b      	ldr	r3, [r7, #16]
 80143b0:	1c5a      	adds	r2, r3, #1
 80143b2:	613a      	str	r2, [r7, #16]
 80143b4:	68ba      	ldr	r2, [r7, #8]
 80143b6:	4413      	add	r3, r2
 80143b8:	7efa      	ldrb	r2, [r7, #27]
 80143ba:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80143bc:	e7a6      	b.n	801430c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80143be:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80143c0:	68fa      	ldr	r2, [r7, #12]
 80143c2:	69fb      	ldr	r3, [r7, #28]
 80143c4:	441a      	add	r2, r3
 80143c6:	683b      	ldr	r3, [r7, #0]
 80143c8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80143ca:	693b      	ldr	r3, [r7, #16]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d101      	bne.n	80143d4 <create_name+0xf4>
 80143d0:	2306      	movs	r3, #6
 80143d2:	e010      	b.n	80143f6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80143d4:	68bb      	ldr	r3, [r7, #8]
 80143d6:	781b      	ldrb	r3, [r3, #0]
 80143d8:	2be5      	cmp	r3, #229	; 0xe5
 80143da:	d102      	bne.n	80143e2 <create_name+0x102>
 80143dc:	68bb      	ldr	r3, [r7, #8]
 80143de:	2205      	movs	r2, #5
 80143e0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80143e2:	7efb      	ldrb	r3, [r7, #27]
 80143e4:	2b20      	cmp	r3, #32
 80143e6:	d801      	bhi.n	80143ec <create_name+0x10c>
 80143e8:	2204      	movs	r2, #4
 80143ea:	e000      	b.n	80143ee <create_name+0x10e>
 80143ec:	2200      	movs	r2, #0
 80143ee:	68bb      	ldr	r3, [r7, #8]
 80143f0:	330b      	adds	r3, #11
 80143f2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80143f4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80143f6:	4618      	mov	r0, r3
 80143f8:	3720      	adds	r7, #32
 80143fa:	46bd      	mov	sp, r7
 80143fc:	bd80      	pop	{r7, pc}
 80143fe:	bf00      	nop
 8014400:	08022f08 	.word	0x08022f08
 8014404:	08022d0c 	.word	0x08022d0c

08014408 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8014408:	b580      	push	{r7, lr}
 801440a:	b086      	sub	sp, #24
 801440c:	af00      	add	r7, sp, #0
 801440e:	6078      	str	r0, [r7, #4]
 8014410:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8014416:	693b      	ldr	r3, [r7, #16]
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801441c:	e002      	b.n	8014424 <follow_path+0x1c>
 801441e:	683b      	ldr	r3, [r7, #0]
 8014420:	3301      	adds	r3, #1
 8014422:	603b      	str	r3, [r7, #0]
 8014424:	683b      	ldr	r3, [r7, #0]
 8014426:	781b      	ldrb	r3, [r3, #0]
 8014428:	2b2f      	cmp	r3, #47	; 0x2f
 801442a:	d0f8      	beq.n	801441e <follow_path+0x16>
 801442c:	683b      	ldr	r3, [r7, #0]
 801442e:	781b      	ldrb	r3, [r3, #0]
 8014430:	2b5c      	cmp	r3, #92	; 0x5c
 8014432:	d0f4      	beq.n	801441e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8014434:	693b      	ldr	r3, [r7, #16]
 8014436:	2200      	movs	r2, #0
 8014438:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801443a:	683b      	ldr	r3, [r7, #0]
 801443c:	781b      	ldrb	r3, [r3, #0]
 801443e:	2b1f      	cmp	r3, #31
 8014440:	d80a      	bhi.n	8014458 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	2280      	movs	r2, #128	; 0x80
 8014446:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801444a:	2100      	movs	r1, #0
 801444c:	6878      	ldr	r0, [r7, #4]
 801444e:	f7ff fc3d 	bl	8013ccc <dir_sdi>
 8014452:	4603      	mov	r3, r0
 8014454:	75fb      	strb	r3, [r7, #23]
 8014456:	e043      	b.n	80144e0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014458:	463b      	mov	r3, r7
 801445a:	4619      	mov	r1, r3
 801445c:	6878      	ldr	r0, [r7, #4]
 801445e:	f7ff ff3f 	bl	80142e0 <create_name>
 8014462:	4603      	mov	r3, r0
 8014464:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8014466:	7dfb      	ldrb	r3, [r7, #23]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d134      	bne.n	80144d6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801446c:	6878      	ldr	r0, [r7, #4]
 801446e:	f7ff fe50 	bl	8014112 <dir_find>
 8014472:	4603      	mov	r3, r0
 8014474:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801447c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801447e:	7dfb      	ldrb	r3, [r7, #23]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d00a      	beq.n	801449a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8014484:	7dfb      	ldrb	r3, [r7, #23]
 8014486:	2b04      	cmp	r3, #4
 8014488:	d127      	bne.n	80144da <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801448a:	7afb      	ldrb	r3, [r7, #11]
 801448c:	f003 0304 	and.w	r3, r3, #4
 8014490:	2b00      	cmp	r3, #0
 8014492:	d122      	bne.n	80144da <follow_path+0xd2>
 8014494:	2305      	movs	r3, #5
 8014496:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8014498:	e01f      	b.n	80144da <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801449a:	7afb      	ldrb	r3, [r7, #11]
 801449c:	f003 0304 	and.w	r3, r3, #4
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d11c      	bne.n	80144de <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80144a4:	693b      	ldr	r3, [r7, #16]
 80144a6:	799b      	ldrb	r3, [r3, #6]
 80144a8:	f003 0310 	and.w	r3, r3, #16
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d102      	bne.n	80144b6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80144b0:	2305      	movs	r3, #5
 80144b2:	75fb      	strb	r3, [r7, #23]
 80144b4:	e014      	b.n	80144e0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	695b      	ldr	r3, [r3, #20]
 80144c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80144c4:	4413      	add	r3, r2
 80144c6:	4619      	mov	r1, r3
 80144c8:	68f8      	ldr	r0, [r7, #12]
 80144ca:	f7ff fd86 	bl	8013fda <ld_clust>
 80144ce:	4602      	mov	r2, r0
 80144d0:	693b      	ldr	r3, [r7, #16]
 80144d2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80144d4:	e7c0      	b.n	8014458 <follow_path+0x50>
			if (res != FR_OK) break;
 80144d6:	bf00      	nop
 80144d8:	e002      	b.n	80144e0 <follow_path+0xd8>
				break;
 80144da:	bf00      	nop
 80144dc:	e000      	b.n	80144e0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80144de:	bf00      	nop
			}
		}
	}

	return res;
 80144e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80144e2:	4618      	mov	r0, r3
 80144e4:	3718      	adds	r7, #24
 80144e6:	46bd      	mov	sp, r7
 80144e8:	bd80      	pop	{r7, pc}

080144ea <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80144ea:	b480      	push	{r7}
 80144ec:	b087      	sub	sp, #28
 80144ee:	af00      	add	r7, sp, #0
 80144f0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80144f2:	f04f 33ff 	mov.w	r3, #4294967295
 80144f6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d031      	beq.n	8014564 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	617b      	str	r3, [r7, #20]
 8014506:	e002      	b.n	801450e <get_ldnumber+0x24>
 8014508:	697b      	ldr	r3, [r7, #20]
 801450a:	3301      	adds	r3, #1
 801450c:	617b      	str	r3, [r7, #20]
 801450e:	697b      	ldr	r3, [r7, #20]
 8014510:	781b      	ldrb	r3, [r3, #0]
 8014512:	2b20      	cmp	r3, #32
 8014514:	d903      	bls.n	801451e <get_ldnumber+0x34>
 8014516:	697b      	ldr	r3, [r7, #20]
 8014518:	781b      	ldrb	r3, [r3, #0]
 801451a:	2b3a      	cmp	r3, #58	; 0x3a
 801451c:	d1f4      	bne.n	8014508 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801451e:	697b      	ldr	r3, [r7, #20]
 8014520:	781b      	ldrb	r3, [r3, #0]
 8014522:	2b3a      	cmp	r3, #58	; 0x3a
 8014524:	d11c      	bne.n	8014560 <get_ldnumber+0x76>
			tp = *path;
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	1c5a      	adds	r2, r3, #1
 8014530:	60fa      	str	r2, [r7, #12]
 8014532:	781b      	ldrb	r3, [r3, #0]
 8014534:	3b30      	subs	r3, #48	; 0x30
 8014536:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8014538:	68bb      	ldr	r3, [r7, #8]
 801453a:	2b09      	cmp	r3, #9
 801453c:	d80e      	bhi.n	801455c <get_ldnumber+0x72>
 801453e:	68fa      	ldr	r2, [r7, #12]
 8014540:	697b      	ldr	r3, [r7, #20]
 8014542:	429a      	cmp	r2, r3
 8014544:	d10a      	bne.n	801455c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8014546:	68bb      	ldr	r3, [r7, #8]
 8014548:	2b00      	cmp	r3, #0
 801454a:	d107      	bne.n	801455c <get_ldnumber+0x72>
					vol = (int)i;
 801454c:	68bb      	ldr	r3, [r7, #8]
 801454e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8014550:	697b      	ldr	r3, [r7, #20]
 8014552:	3301      	adds	r3, #1
 8014554:	617b      	str	r3, [r7, #20]
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	697a      	ldr	r2, [r7, #20]
 801455a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801455c:	693b      	ldr	r3, [r7, #16]
 801455e:	e002      	b.n	8014566 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8014560:	2300      	movs	r3, #0
 8014562:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8014564:	693b      	ldr	r3, [r7, #16]
}
 8014566:	4618      	mov	r0, r3
 8014568:	371c      	adds	r7, #28
 801456a:	46bd      	mov	sp, r7
 801456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014570:	4770      	bx	lr
	...

08014574 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b082      	sub	sp, #8
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
 801457c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	2200      	movs	r2, #0
 8014582:	70da      	strb	r2, [r3, #3]
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	f04f 32ff 	mov.w	r2, #4294967295
 801458a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801458c:	6839      	ldr	r1, [r7, #0]
 801458e:	6878      	ldr	r0, [r7, #4]
 8014590:	f7ff f81c 	bl	80135cc <move_window>
 8014594:	4603      	mov	r3, r0
 8014596:	2b00      	cmp	r3, #0
 8014598:	d001      	beq.n	801459e <check_fs+0x2a>
 801459a:	2304      	movs	r3, #4
 801459c:	e038      	b.n	8014610 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	3334      	adds	r3, #52	; 0x34
 80145a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80145a6:	4618      	mov	r0, r3
 80145a8:	f7fe fd2e 	bl	8013008 <ld_word>
 80145ac:	4603      	mov	r3, r0
 80145ae:	461a      	mov	r2, r3
 80145b0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80145b4:	429a      	cmp	r2, r3
 80145b6:	d001      	beq.n	80145bc <check_fs+0x48>
 80145b8:	2303      	movs	r3, #3
 80145ba:	e029      	b.n	8014610 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80145c2:	2be9      	cmp	r3, #233	; 0xe9
 80145c4:	d009      	beq.n	80145da <check_fs+0x66>
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80145cc:	2beb      	cmp	r3, #235	; 0xeb
 80145ce:	d11e      	bne.n	801460e <check_fs+0x9a>
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80145d6:	2b90      	cmp	r3, #144	; 0x90
 80145d8:	d119      	bne.n	801460e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	3334      	adds	r3, #52	; 0x34
 80145de:	3336      	adds	r3, #54	; 0x36
 80145e0:	4618      	mov	r0, r3
 80145e2:	f7fe fd29 	bl	8013038 <ld_dword>
 80145e6:	4603      	mov	r3, r0
 80145e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80145ec:	4a0a      	ldr	r2, [pc, #40]	; (8014618 <check_fs+0xa4>)
 80145ee:	4293      	cmp	r3, r2
 80145f0:	d101      	bne.n	80145f6 <check_fs+0x82>
 80145f2:	2300      	movs	r3, #0
 80145f4:	e00c      	b.n	8014610 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	3334      	adds	r3, #52	; 0x34
 80145fa:	3352      	adds	r3, #82	; 0x52
 80145fc:	4618      	mov	r0, r3
 80145fe:	f7fe fd1b 	bl	8013038 <ld_dword>
 8014602:	4603      	mov	r3, r0
 8014604:	4a05      	ldr	r2, [pc, #20]	; (801461c <check_fs+0xa8>)
 8014606:	4293      	cmp	r3, r2
 8014608:	d101      	bne.n	801460e <check_fs+0x9a>
 801460a:	2300      	movs	r3, #0
 801460c:	e000      	b.n	8014610 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801460e:	2302      	movs	r3, #2
}
 8014610:	4618      	mov	r0, r3
 8014612:	3708      	adds	r7, #8
 8014614:	46bd      	mov	sp, r7
 8014616:	bd80      	pop	{r7, pc}
 8014618:	00544146 	.word	0x00544146
 801461c:	33544146 	.word	0x33544146

08014620 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8014620:	b580      	push	{r7, lr}
 8014622:	b096      	sub	sp, #88	; 0x58
 8014624:	af00      	add	r7, sp, #0
 8014626:	60f8      	str	r0, [r7, #12]
 8014628:	60b9      	str	r1, [r7, #8]
 801462a:	4613      	mov	r3, r2
 801462c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801462e:	68bb      	ldr	r3, [r7, #8]
 8014630:	2200      	movs	r2, #0
 8014632:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8014634:	68f8      	ldr	r0, [r7, #12]
 8014636:	f7ff ff58 	bl	80144ea <get_ldnumber>
 801463a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801463c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801463e:	2b00      	cmp	r3, #0
 8014640:	da01      	bge.n	8014646 <find_volume+0x26>
 8014642:	230b      	movs	r3, #11
 8014644:	e236      	b.n	8014ab4 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8014646:	4aac      	ldr	r2, [pc, #688]	; (80148f8 <find_volume+0x2d8>)
 8014648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801464a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801464e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8014650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014652:	2b00      	cmp	r3, #0
 8014654:	d101      	bne.n	801465a <find_volume+0x3a>
 8014656:	230c      	movs	r3, #12
 8014658:	e22c      	b.n	8014ab4 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 801465a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801465c:	f7fe fdd4 	bl	8013208 <lock_fs>
 8014660:	4603      	mov	r3, r0
 8014662:	2b00      	cmp	r3, #0
 8014664:	d101      	bne.n	801466a <find_volume+0x4a>
 8014666:	230f      	movs	r3, #15
 8014668:	e224      	b.n	8014ab4 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 801466a:	68bb      	ldr	r3, [r7, #8]
 801466c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801466e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8014670:	79fb      	ldrb	r3, [r7, #7]
 8014672:	f023 0301 	bic.w	r3, r3, #1
 8014676:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8014678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801467a:	781b      	ldrb	r3, [r3, #0]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d01a      	beq.n	80146b6 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8014680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014682:	785b      	ldrb	r3, [r3, #1]
 8014684:	4618      	mov	r0, r3
 8014686:	f7fe fc21 	bl	8012ecc <disk_status>
 801468a:	4603      	mov	r3, r0
 801468c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8014690:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014694:	f003 0301 	and.w	r3, r3, #1
 8014698:	2b00      	cmp	r3, #0
 801469a:	d10c      	bne.n	80146b6 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801469c:	79fb      	ldrb	r3, [r7, #7]
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d007      	beq.n	80146b2 <find_volume+0x92>
 80146a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80146a6:	f003 0304 	and.w	r3, r3, #4
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d001      	beq.n	80146b2 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80146ae:	230a      	movs	r3, #10
 80146b0:	e200      	b.n	8014ab4 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 80146b2:	2300      	movs	r3, #0
 80146b4:	e1fe      	b.n	8014ab4 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80146b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146b8:	2200      	movs	r2, #0
 80146ba:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80146bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146be:	b2da      	uxtb	r2, r3
 80146c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146c2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80146c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146c6:	785b      	ldrb	r3, [r3, #1]
 80146c8:	4618      	mov	r0, r3
 80146ca:	f7fe fc19 	bl	8012f00 <disk_initialize>
 80146ce:	4603      	mov	r3, r0
 80146d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80146d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80146d8:	f003 0301 	and.w	r3, r3, #1
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d001      	beq.n	80146e4 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80146e0:	2303      	movs	r3, #3
 80146e2:	e1e7      	b.n	8014ab4 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80146e4:	79fb      	ldrb	r3, [r7, #7]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d007      	beq.n	80146fa <find_volume+0xda>
 80146ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80146ee:	f003 0304 	and.w	r3, r3, #4
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d001      	beq.n	80146fa <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80146f6:	230a      	movs	r3, #10
 80146f8:	e1dc      	b.n	8014ab4 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80146fa:	2300      	movs	r3, #0
 80146fc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80146fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014700:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014702:	f7ff ff37 	bl	8014574 <check_fs>
 8014706:	4603      	mov	r3, r0
 8014708:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801470c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014710:	2b02      	cmp	r3, #2
 8014712:	d14b      	bne.n	80147ac <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014714:	2300      	movs	r3, #0
 8014716:	643b      	str	r3, [r7, #64]	; 0x40
 8014718:	e01f      	b.n	801475a <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801471a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801471c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014722:	011b      	lsls	r3, r3, #4
 8014724:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8014728:	4413      	add	r3, r2
 801472a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801472c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801472e:	3304      	adds	r3, #4
 8014730:	781b      	ldrb	r3, [r3, #0]
 8014732:	2b00      	cmp	r3, #0
 8014734:	d006      	beq.n	8014744 <find_volume+0x124>
 8014736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014738:	3308      	adds	r3, #8
 801473a:	4618      	mov	r0, r3
 801473c:	f7fe fc7c 	bl	8013038 <ld_dword>
 8014740:	4602      	mov	r2, r0
 8014742:	e000      	b.n	8014746 <find_volume+0x126>
 8014744:	2200      	movs	r2, #0
 8014746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014748:	009b      	lsls	r3, r3, #2
 801474a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801474e:	440b      	add	r3, r1
 8014750:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014756:	3301      	adds	r3, #1
 8014758:	643b      	str	r3, [r7, #64]	; 0x40
 801475a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801475c:	2b03      	cmp	r3, #3
 801475e:	d9dc      	bls.n	801471a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8014760:	2300      	movs	r3, #0
 8014762:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8014764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014766:	2b00      	cmp	r3, #0
 8014768:	d002      	beq.n	8014770 <find_volume+0x150>
 801476a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801476c:	3b01      	subs	r3, #1
 801476e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8014770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014772:	009b      	lsls	r3, r3, #2
 8014774:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014778:	4413      	add	r3, r2
 801477a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801477e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014782:	2b00      	cmp	r3, #0
 8014784:	d005      	beq.n	8014792 <find_volume+0x172>
 8014786:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014788:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801478a:	f7ff fef3 	bl	8014574 <check_fs>
 801478e:	4603      	mov	r3, r0
 8014790:	e000      	b.n	8014794 <find_volume+0x174>
 8014792:	2303      	movs	r3, #3
 8014794:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014798:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801479c:	2b01      	cmp	r3, #1
 801479e:	d905      	bls.n	80147ac <find_volume+0x18c>
 80147a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80147a2:	3301      	adds	r3, #1
 80147a4:	643b      	str	r3, [r7, #64]	; 0x40
 80147a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80147a8:	2b03      	cmp	r3, #3
 80147aa:	d9e1      	bls.n	8014770 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80147ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80147b0:	2b04      	cmp	r3, #4
 80147b2:	d101      	bne.n	80147b8 <find_volume+0x198>
 80147b4:	2301      	movs	r3, #1
 80147b6:	e17d      	b.n	8014ab4 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80147b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80147bc:	2b01      	cmp	r3, #1
 80147be:	d901      	bls.n	80147c4 <find_volume+0x1a4>
 80147c0:	230d      	movs	r3, #13
 80147c2:	e177      	b.n	8014ab4 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80147c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147c6:	3334      	adds	r3, #52	; 0x34
 80147c8:	330b      	adds	r3, #11
 80147ca:	4618      	mov	r0, r3
 80147cc:	f7fe fc1c 	bl	8013008 <ld_word>
 80147d0:	4603      	mov	r3, r0
 80147d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80147d6:	d001      	beq.n	80147dc <find_volume+0x1bc>
 80147d8:	230d      	movs	r3, #13
 80147da:	e16b      	b.n	8014ab4 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80147dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147de:	3334      	adds	r3, #52	; 0x34
 80147e0:	3316      	adds	r3, #22
 80147e2:	4618      	mov	r0, r3
 80147e4:	f7fe fc10 	bl	8013008 <ld_word>
 80147e8:	4603      	mov	r3, r0
 80147ea:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80147ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d106      	bne.n	8014800 <find_volume+0x1e0>
 80147f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147f4:	3334      	adds	r3, #52	; 0x34
 80147f6:	3324      	adds	r3, #36	; 0x24
 80147f8:	4618      	mov	r0, r3
 80147fa:	f7fe fc1d 	bl	8013038 <ld_dword>
 80147fe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8014800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014802:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014804:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8014806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014808:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 801480c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801480e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8014810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014812:	789b      	ldrb	r3, [r3, #2]
 8014814:	2b01      	cmp	r3, #1
 8014816:	d005      	beq.n	8014824 <find_volume+0x204>
 8014818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801481a:	789b      	ldrb	r3, [r3, #2]
 801481c:	2b02      	cmp	r3, #2
 801481e:	d001      	beq.n	8014824 <find_volume+0x204>
 8014820:	230d      	movs	r3, #13
 8014822:	e147      	b.n	8014ab4 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8014824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014826:	789b      	ldrb	r3, [r3, #2]
 8014828:	461a      	mov	r2, r3
 801482a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801482c:	fb02 f303 	mul.w	r3, r2, r3
 8014830:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8014832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014838:	b29a      	uxth	r2, r3
 801483a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801483c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801483e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014840:	895b      	ldrh	r3, [r3, #10]
 8014842:	2b00      	cmp	r3, #0
 8014844:	d008      	beq.n	8014858 <find_volume+0x238>
 8014846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014848:	895b      	ldrh	r3, [r3, #10]
 801484a:	461a      	mov	r2, r3
 801484c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801484e:	895b      	ldrh	r3, [r3, #10]
 8014850:	3b01      	subs	r3, #1
 8014852:	4013      	ands	r3, r2
 8014854:	2b00      	cmp	r3, #0
 8014856:	d001      	beq.n	801485c <find_volume+0x23c>
 8014858:	230d      	movs	r3, #13
 801485a:	e12b      	b.n	8014ab4 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801485c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801485e:	3334      	adds	r3, #52	; 0x34
 8014860:	3311      	adds	r3, #17
 8014862:	4618      	mov	r0, r3
 8014864:	f7fe fbd0 	bl	8013008 <ld_word>
 8014868:	4603      	mov	r3, r0
 801486a:	461a      	mov	r2, r3
 801486c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801486e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8014870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014872:	891b      	ldrh	r3, [r3, #8]
 8014874:	f003 030f 	and.w	r3, r3, #15
 8014878:	b29b      	uxth	r3, r3
 801487a:	2b00      	cmp	r3, #0
 801487c:	d001      	beq.n	8014882 <find_volume+0x262>
 801487e:	230d      	movs	r3, #13
 8014880:	e118      	b.n	8014ab4 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8014882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014884:	3334      	adds	r3, #52	; 0x34
 8014886:	3313      	adds	r3, #19
 8014888:	4618      	mov	r0, r3
 801488a:	f7fe fbbd 	bl	8013008 <ld_word>
 801488e:	4603      	mov	r3, r0
 8014890:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8014892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014894:	2b00      	cmp	r3, #0
 8014896:	d106      	bne.n	80148a6 <find_volume+0x286>
 8014898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801489a:	3334      	adds	r3, #52	; 0x34
 801489c:	3320      	adds	r3, #32
 801489e:	4618      	mov	r0, r3
 80148a0:	f7fe fbca 	bl	8013038 <ld_dword>
 80148a4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80148a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148a8:	3334      	adds	r3, #52	; 0x34
 80148aa:	330e      	adds	r3, #14
 80148ac:	4618      	mov	r0, r3
 80148ae:	f7fe fbab 	bl	8013008 <ld_word>
 80148b2:	4603      	mov	r3, r0
 80148b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80148b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d101      	bne.n	80148c0 <find_volume+0x2a0>
 80148bc:	230d      	movs	r3, #13
 80148be:	e0f9      	b.n	8014ab4 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80148c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80148c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148c4:	4413      	add	r3, r2
 80148c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80148c8:	8912      	ldrh	r2, [r2, #8]
 80148ca:	0912      	lsrs	r2, r2, #4
 80148cc:	b292      	uxth	r2, r2
 80148ce:	4413      	add	r3, r2
 80148d0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80148d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80148d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148d6:	429a      	cmp	r2, r3
 80148d8:	d201      	bcs.n	80148de <find_volume+0x2be>
 80148da:	230d      	movs	r3, #13
 80148dc:	e0ea      	b.n	8014ab4 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80148de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80148e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148e2:	1ad3      	subs	r3, r2, r3
 80148e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80148e6:	8952      	ldrh	r2, [r2, #10]
 80148e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80148ec:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80148ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d103      	bne.n	80148fc <find_volume+0x2dc>
 80148f4:	230d      	movs	r3, #13
 80148f6:	e0dd      	b.n	8014ab4 <find_volume+0x494>
 80148f8:	20000834 	.word	0x20000834
		fmt = FS_FAT32;
 80148fc:	2303      	movs	r3, #3
 80148fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8014902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014904:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8014908:	4293      	cmp	r3, r2
 801490a:	d802      	bhi.n	8014912 <find_volume+0x2f2>
 801490c:	2302      	movs	r3, #2
 801490e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8014912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014914:	f640 72f5 	movw	r2, #4085	; 0xff5
 8014918:	4293      	cmp	r3, r2
 801491a:	d802      	bhi.n	8014922 <find_volume+0x302>
 801491c:	2301      	movs	r3, #1
 801491e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8014922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014924:	1c9a      	adds	r2, r3, #2
 8014926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014928:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 801492a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801492c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801492e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014930:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014934:	441a      	add	r2, r3
 8014936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014938:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 801493a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801493e:	441a      	add	r2, r3
 8014940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014942:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8014944:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014948:	2b03      	cmp	r3, #3
 801494a:	d11e      	bne.n	801498a <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801494c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801494e:	3334      	adds	r3, #52	; 0x34
 8014950:	332a      	adds	r3, #42	; 0x2a
 8014952:	4618      	mov	r0, r3
 8014954:	f7fe fb58 	bl	8013008 <ld_word>
 8014958:	4603      	mov	r3, r0
 801495a:	2b00      	cmp	r3, #0
 801495c:	d001      	beq.n	8014962 <find_volume+0x342>
 801495e:	230d      	movs	r3, #13
 8014960:	e0a8      	b.n	8014ab4 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8014962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014964:	891b      	ldrh	r3, [r3, #8]
 8014966:	2b00      	cmp	r3, #0
 8014968:	d001      	beq.n	801496e <find_volume+0x34e>
 801496a:	230d      	movs	r3, #13
 801496c:	e0a2      	b.n	8014ab4 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801496e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014970:	3334      	adds	r3, #52	; 0x34
 8014972:	332c      	adds	r3, #44	; 0x2c
 8014974:	4618      	mov	r0, r3
 8014976:	f7fe fb5f 	bl	8013038 <ld_dword>
 801497a:	4602      	mov	r2, r0
 801497c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801497e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8014980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014982:	699b      	ldr	r3, [r3, #24]
 8014984:	009b      	lsls	r3, r3, #2
 8014986:	647b      	str	r3, [r7, #68]	; 0x44
 8014988:	e01f      	b.n	80149ca <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801498a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801498c:	891b      	ldrh	r3, [r3, #8]
 801498e:	2b00      	cmp	r3, #0
 8014990:	d101      	bne.n	8014996 <find_volume+0x376>
 8014992:	230d      	movs	r3, #13
 8014994:	e08e      	b.n	8014ab4 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8014996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014998:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801499a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801499c:	441a      	add	r2, r3
 801499e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149a0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80149a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80149a6:	2b02      	cmp	r3, #2
 80149a8:	d103      	bne.n	80149b2 <find_volume+0x392>
 80149aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149ac:	699b      	ldr	r3, [r3, #24]
 80149ae:	005b      	lsls	r3, r3, #1
 80149b0:	e00a      	b.n	80149c8 <find_volume+0x3a8>
 80149b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149b4:	699a      	ldr	r2, [r3, #24]
 80149b6:	4613      	mov	r3, r2
 80149b8:	005b      	lsls	r3, r3, #1
 80149ba:	4413      	add	r3, r2
 80149bc:	085a      	lsrs	r2, r3, #1
 80149be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149c0:	699b      	ldr	r3, [r3, #24]
 80149c2:	f003 0301 	and.w	r3, r3, #1
 80149c6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80149c8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80149ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149cc:	69da      	ldr	r2, [r3, #28]
 80149ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80149d0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80149d4:	0a5b      	lsrs	r3, r3, #9
 80149d6:	429a      	cmp	r2, r3
 80149d8:	d201      	bcs.n	80149de <find_volume+0x3be>
 80149da:	230d      	movs	r3, #13
 80149dc:	e06a      	b.n	8014ab4 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80149de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149e0:	f04f 32ff 	mov.w	r2, #4294967295
 80149e4:	615a      	str	r2, [r3, #20]
 80149e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149e8:	695a      	ldr	r2, [r3, #20]
 80149ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149ec:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80149ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149f0:	2280      	movs	r2, #128	; 0x80
 80149f2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80149f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80149f8:	2b03      	cmp	r3, #3
 80149fa:	d149      	bne.n	8014a90 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80149fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149fe:	3334      	adds	r3, #52	; 0x34
 8014a00:	3330      	adds	r3, #48	; 0x30
 8014a02:	4618      	mov	r0, r3
 8014a04:	f7fe fb00 	bl	8013008 <ld_word>
 8014a08:	4603      	mov	r3, r0
 8014a0a:	2b01      	cmp	r3, #1
 8014a0c:	d140      	bne.n	8014a90 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a10:	3301      	adds	r3, #1
 8014a12:	4619      	mov	r1, r3
 8014a14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014a16:	f7fe fdd9 	bl	80135cc <move_window>
 8014a1a:	4603      	mov	r3, r0
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d137      	bne.n	8014a90 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8014a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a22:	2200      	movs	r2, #0
 8014a24:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8014a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a28:	3334      	adds	r3, #52	; 0x34
 8014a2a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014a2e:	4618      	mov	r0, r3
 8014a30:	f7fe faea 	bl	8013008 <ld_word>
 8014a34:	4603      	mov	r3, r0
 8014a36:	461a      	mov	r2, r3
 8014a38:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014a3c:	429a      	cmp	r2, r3
 8014a3e:	d127      	bne.n	8014a90 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8014a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a42:	3334      	adds	r3, #52	; 0x34
 8014a44:	4618      	mov	r0, r3
 8014a46:	f7fe faf7 	bl	8013038 <ld_dword>
 8014a4a:	4603      	mov	r3, r0
 8014a4c:	4a1b      	ldr	r2, [pc, #108]	; (8014abc <find_volume+0x49c>)
 8014a4e:	4293      	cmp	r3, r2
 8014a50:	d11e      	bne.n	8014a90 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8014a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a54:	3334      	adds	r3, #52	; 0x34
 8014a56:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	f7fe faec 	bl	8013038 <ld_dword>
 8014a60:	4603      	mov	r3, r0
 8014a62:	4a17      	ldr	r2, [pc, #92]	; (8014ac0 <find_volume+0x4a0>)
 8014a64:	4293      	cmp	r3, r2
 8014a66:	d113      	bne.n	8014a90 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8014a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a6a:	3334      	adds	r3, #52	; 0x34
 8014a6c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8014a70:	4618      	mov	r0, r3
 8014a72:	f7fe fae1 	bl	8013038 <ld_dword>
 8014a76:	4602      	mov	r2, r0
 8014a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a7a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a7e:	3334      	adds	r3, #52	; 0x34
 8014a80:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8014a84:	4618      	mov	r0, r3
 8014a86:	f7fe fad7 	bl	8013038 <ld_dword>
 8014a8a:	4602      	mov	r2, r0
 8014a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a8e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8014a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a92:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8014a96:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8014a98:	4b0a      	ldr	r3, [pc, #40]	; (8014ac4 <find_volume+0x4a4>)
 8014a9a:	881b      	ldrh	r3, [r3, #0]
 8014a9c:	3301      	adds	r3, #1
 8014a9e:	b29a      	uxth	r2, r3
 8014aa0:	4b08      	ldr	r3, [pc, #32]	; (8014ac4 <find_volume+0x4a4>)
 8014aa2:	801a      	strh	r2, [r3, #0]
 8014aa4:	4b07      	ldr	r3, [pc, #28]	; (8014ac4 <find_volume+0x4a4>)
 8014aa6:	881a      	ldrh	r2, [r3, #0]
 8014aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014aaa:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8014aac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014aae:	f7fe fd25 	bl	80134fc <clear_lock>
#endif
	return FR_OK;
 8014ab2:	2300      	movs	r3, #0
}
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	3758      	adds	r7, #88	; 0x58
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	bd80      	pop	{r7, pc}
 8014abc:	41615252 	.word	0x41615252
 8014ac0:	61417272 	.word	0x61417272
 8014ac4:	20000838 	.word	0x20000838

08014ac8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b084      	sub	sp, #16
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	6078      	str	r0, [r7, #4]
 8014ad0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8014ad2:	2309      	movs	r3, #9
 8014ad4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d02e      	beq.n	8014b3a <validate+0x72>
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d02a      	beq.n	8014b3a <validate+0x72>
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	781b      	ldrb	r3, [r3, #0]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d025      	beq.n	8014b3a <validate+0x72>
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	889a      	ldrh	r2, [r3, #4]
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	88db      	ldrh	r3, [r3, #6]
 8014af8:	429a      	cmp	r2, r3
 8014afa:	d11e      	bne.n	8014b3a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	4618      	mov	r0, r3
 8014b02:	f7fe fb81 	bl	8013208 <lock_fs>
 8014b06:	4603      	mov	r3, r0
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d014      	beq.n	8014b36 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	785b      	ldrb	r3, [r3, #1]
 8014b12:	4618      	mov	r0, r3
 8014b14:	f7fe f9da 	bl	8012ecc <disk_status>
 8014b18:	4603      	mov	r3, r0
 8014b1a:	f003 0301 	and.w	r3, r3, #1
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d102      	bne.n	8014b28 <validate+0x60>
				res = FR_OK;
 8014b22:	2300      	movs	r3, #0
 8014b24:	73fb      	strb	r3, [r7, #15]
 8014b26:	e008      	b.n	8014b3a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	2100      	movs	r1, #0
 8014b2e:	4618      	mov	r0, r3
 8014b30:	f7fe fb80 	bl	8013234 <unlock_fs>
 8014b34:	e001      	b.n	8014b3a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8014b36:	230f      	movs	r3, #15
 8014b38:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8014b3a:	7bfb      	ldrb	r3, [r7, #15]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d102      	bne.n	8014b46 <validate+0x7e>
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	e000      	b.n	8014b48 <validate+0x80>
 8014b46:	2300      	movs	r3, #0
 8014b48:	683a      	ldr	r2, [r7, #0]
 8014b4a:	6013      	str	r3, [r2, #0]
	return res;
 8014b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b4e:	4618      	mov	r0, r3
 8014b50:	3710      	adds	r7, #16
 8014b52:	46bd      	mov	sp, r7
 8014b54:	bd80      	pop	{r7, pc}
	...

08014b58 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014b58:	b580      	push	{r7, lr}
 8014b5a:	b088      	sub	sp, #32
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	60f8      	str	r0, [r7, #12]
 8014b60:	60b9      	str	r1, [r7, #8]
 8014b62:	4613      	mov	r3, r2
 8014b64:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8014b66:	68bb      	ldr	r3, [r7, #8]
 8014b68:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8014b6a:	f107 0310 	add.w	r3, r7, #16
 8014b6e:	4618      	mov	r0, r3
 8014b70:	f7ff fcbb 	bl	80144ea <get_ldnumber>
 8014b74:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8014b76:	69fb      	ldr	r3, [r7, #28]
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	da01      	bge.n	8014b80 <f_mount+0x28>
 8014b7c:	230b      	movs	r3, #11
 8014b7e:	e048      	b.n	8014c12 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8014b80:	4a26      	ldr	r2, [pc, #152]	; (8014c1c <f_mount+0xc4>)
 8014b82:	69fb      	ldr	r3, [r7, #28]
 8014b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014b88:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8014b8a:	69bb      	ldr	r3, [r7, #24]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d00f      	beq.n	8014bb0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8014b90:	69b8      	ldr	r0, [r7, #24]
 8014b92:	f7fe fcb3 	bl	80134fc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8014b96:	69bb      	ldr	r3, [r7, #24]
 8014b98:	68db      	ldr	r3, [r3, #12]
 8014b9a:	4618      	mov	r0, r3
 8014b9c:	f001 f812 	bl	8015bc4 <ff_del_syncobj>
 8014ba0:	4603      	mov	r3, r0
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d101      	bne.n	8014baa <f_mount+0x52>
 8014ba6:	2302      	movs	r3, #2
 8014ba8:	e033      	b.n	8014c12 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8014baa:	69bb      	ldr	r3, [r7, #24]
 8014bac:	2200      	movs	r2, #0
 8014bae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d00f      	beq.n	8014bd6 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	2200      	movs	r2, #0
 8014bba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8014bbc:	69fb      	ldr	r3, [r7, #28]
 8014bbe:	b2da      	uxtb	r2, r3
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	330c      	adds	r3, #12
 8014bc4:	4619      	mov	r1, r3
 8014bc6:	4610      	mov	r0, r2
 8014bc8:	f000 ffe1 	bl	8015b8e <ff_cre_syncobj>
 8014bcc:	4603      	mov	r3, r0
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d101      	bne.n	8014bd6 <f_mount+0x7e>
 8014bd2:	2302      	movs	r3, #2
 8014bd4:	e01d      	b.n	8014c12 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8014bd6:	68fa      	ldr	r2, [r7, #12]
 8014bd8:	4910      	ldr	r1, [pc, #64]	; (8014c1c <f_mount+0xc4>)
 8014bda:	69fb      	ldr	r3, [r7, #28]
 8014bdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d002      	beq.n	8014bec <f_mount+0x94>
 8014be6:	79fb      	ldrb	r3, [r7, #7]
 8014be8:	2b01      	cmp	r3, #1
 8014bea:	d001      	beq.n	8014bf0 <f_mount+0x98>
 8014bec:	2300      	movs	r3, #0
 8014bee:	e010      	b.n	8014c12 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014bf0:	f107 010c 	add.w	r1, r7, #12
 8014bf4:	f107 0308 	add.w	r3, r7, #8
 8014bf8:	2200      	movs	r2, #0
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	f7ff fd10 	bl	8014620 <find_volume>
 8014c00:	4603      	mov	r3, r0
 8014c02:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	7dfa      	ldrb	r2, [r7, #23]
 8014c08:	4611      	mov	r1, r2
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	f7fe fb12 	bl	8013234 <unlock_fs>
 8014c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8014c12:	4618      	mov	r0, r3
 8014c14:	3720      	adds	r7, #32
 8014c16:	46bd      	mov	sp, r7
 8014c18:	bd80      	pop	{r7, pc}
 8014c1a:	bf00      	nop
 8014c1c:	20000834 	.word	0x20000834

08014c20 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014c20:	b580      	push	{r7, lr}
 8014c22:	b098      	sub	sp, #96	; 0x60
 8014c24:	af00      	add	r7, sp, #0
 8014c26:	60f8      	str	r0, [r7, #12]
 8014c28:	60b9      	str	r1, [r7, #8]
 8014c2a:	4613      	mov	r3, r2
 8014c2c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d101      	bne.n	8014c38 <f_open+0x18>
 8014c34:	2309      	movs	r3, #9
 8014c36:	e1b4      	b.n	8014fa2 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8014c38:	79fb      	ldrb	r3, [r7, #7]
 8014c3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014c3e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8014c40:	79fa      	ldrb	r2, [r7, #7]
 8014c42:	f107 0110 	add.w	r1, r7, #16
 8014c46:	f107 0308 	add.w	r3, r7, #8
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	f7ff fce8 	bl	8014620 <find_volume>
 8014c50:	4603      	mov	r3, r0
 8014c52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8014c56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	f040 8191 	bne.w	8014f82 <f_open+0x362>
		dj.obj.fs = fs;
 8014c60:	693b      	ldr	r3, [r7, #16]
 8014c62:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014c64:	68ba      	ldr	r2, [r7, #8]
 8014c66:	f107 0314 	add.w	r3, r7, #20
 8014c6a:	4611      	mov	r1, r2
 8014c6c:	4618      	mov	r0, r3
 8014c6e:	f7ff fbcb 	bl	8014408 <follow_path>
 8014c72:	4603      	mov	r3, r0
 8014c74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8014c78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d11a      	bne.n	8014cb6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014c80:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014c84:	b25b      	sxtb	r3, r3
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	da03      	bge.n	8014c92 <f_open+0x72>
				res = FR_INVALID_NAME;
 8014c8a:	2306      	movs	r3, #6
 8014c8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014c90:	e011      	b.n	8014cb6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014c92:	79fb      	ldrb	r3, [r7, #7]
 8014c94:	f023 0301 	bic.w	r3, r3, #1
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	bf14      	ite	ne
 8014c9c:	2301      	movne	r3, #1
 8014c9e:	2300      	moveq	r3, #0
 8014ca0:	b2db      	uxtb	r3, r3
 8014ca2:	461a      	mov	r2, r3
 8014ca4:	f107 0314 	add.w	r3, r7, #20
 8014ca8:	4611      	mov	r1, r2
 8014caa:	4618      	mov	r0, r3
 8014cac:	f7fe fade 	bl	801326c <chk_lock>
 8014cb0:	4603      	mov	r3, r0
 8014cb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8014cb6:	79fb      	ldrb	r3, [r7, #7]
 8014cb8:	f003 031c 	and.w	r3, r3, #28
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d07f      	beq.n	8014dc0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8014cc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d017      	beq.n	8014cf8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014cc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014ccc:	2b04      	cmp	r3, #4
 8014cce:	d10e      	bne.n	8014cee <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014cd0:	f7fe fb28 	bl	8013324 <enq_lock>
 8014cd4:	4603      	mov	r3, r0
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d006      	beq.n	8014ce8 <f_open+0xc8>
 8014cda:	f107 0314 	add.w	r3, r7, #20
 8014cde:	4618      	mov	r0, r3
 8014ce0:	f7ff fa6c 	bl	80141bc <dir_register>
 8014ce4:	4603      	mov	r3, r0
 8014ce6:	e000      	b.n	8014cea <f_open+0xca>
 8014ce8:	2312      	movs	r3, #18
 8014cea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8014cee:	79fb      	ldrb	r3, [r7, #7]
 8014cf0:	f043 0308 	orr.w	r3, r3, #8
 8014cf4:	71fb      	strb	r3, [r7, #7]
 8014cf6:	e010      	b.n	8014d1a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014cf8:	7ebb      	ldrb	r3, [r7, #26]
 8014cfa:	f003 0311 	and.w	r3, r3, #17
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d003      	beq.n	8014d0a <f_open+0xea>
					res = FR_DENIED;
 8014d02:	2307      	movs	r3, #7
 8014d04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014d08:	e007      	b.n	8014d1a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8014d0a:	79fb      	ldrb	r3, [r7, #7]
 8014d0c:	f003 0304 	and.w	r3, r3, #4
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d002      	beq.n	8014d1a <f_open+0xfa>
 8014d14:	2308      	movs	r3, #8
 8014d16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8014d1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d168      	bne.n	8014df4 <f_open+0x1d4>
 8014d22:	79fb      	ldrb	r3, [r7, #7]
 8014d24:	f003 0308 	and.w	r3, r3, #8
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d063      	beq.n	8014df4 <f_open+0x1d4>
				dw = GET_FATTIME();
 8014d2c:	f7fb ff2e 	bl	8010b8c <get_fattime>
 8014d30:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8014d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d34:	330e      	adds	r3, #14
 8014d36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014d38:	4618      	mov	r0, r3
 8014d3a:	f7fe f9bb 	bl	80130b4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8014d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d40:	3316      	adds	r3, #22
 8014d42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014d44:	4618      	mov	r0, r3
 8014d46:	f7fe f9b5 	bl	80130b4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d4c:	330b      	adds	r3, #11
 8014d4e:	2220      	movs	r2, #32
 8014d50:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8014d52:	693b      	ldr	r3, [r7, #16]
 8014d54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014d56:	4611      	mov	r1, r2
 8014d58:	4618      	mov	r0, r3
 8014d5a:	f7ff f93e 	bl	8013fda <ld_clust>
 8014d5e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014d60:	693b      	ldr	r3, [r7, #16]
 8014d62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014d64:	2200      	movs	r2, #0
 8014d66:	4618      	mov	r0, r3
 8014d68:	f7ff f956 	bl	8014018 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8014d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d6e:	331c      	adds	r3, #28
 8014d70:	2100      	movs	r1, #0
 8014d72:	4618      	mov	r0, r3
 8014d74:	f7fe f99e 	bl	80130b4 <st_dword>
					fs->wflag = 1;
 8014d78:	693b      	ldr	r3, [r7, #16]
 8014d7a:	2201      	movs	r2, #1
 8014d7c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d037      	beq.n	8014df4 <f_open+0x1d4>
						dw = fs->winsect;
 8014d84:	693b      	ldr	r3, [r7, #16]
 8014d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d88:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8014d8a:	f107 0314 	add.w	r3, r7, #20
 8014d8e:	2200      	movs	r2, #0
 8014d90:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8014d92:	4618      	mov	r0, r3
 8014d94:	f7fe fe69 	bl	8013a6a <remove_chain>
 8014d98:	4603      	mov	r3, r0
 8014d9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8014d9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d126      	bne.n	8014df4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8014da6:	693b      	ldr	r3, [r7, #16]
 8014da8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014daa:	4618      	mov	r0, r3
 8014dac:	f7fe fc0e 	bl	80135cc <move_window>
 8014db0:	4603      	mov	r3, r0
 8014db2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8014db6:	693b      	ldr	r3, [r7, #16]
 8014db8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014dba:	3a01      	subs	r2, #1
 8014dbc:	611a      	str	r2, [r3, #16]
 8014dbe:	e019      	b.n	8014df4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014dc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d115      	bne.n	8014df4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8014dc8:	7ebb      	ldrb	r3, [r7, #26]
 8014dca:	f003 0310 	and.w	r3, r3, #16
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d003      	beq.n	8014dda <f_open+0x1ba>
					res = FR_NO_FILE;
 8014dd2:	2304      	movs	r3, #4
 8014dd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014dd8:	e00c      	b.n	8014df4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8014dda:	79fb      	ldrb	r3, [r7, #7]
 8014ddc:	f003 0302 	and.w	r3, r3, #2
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d007      	beq.n	8014df4 <f_open+0x1d4>
 8014de4:	7ebb      	ldrb	r3, [r7, #26]
 8014de6:	f003 0301 	and.w	r3, r3, #1
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d002      	beq.n	8014df4 <f_open+0x1d4>
						res = FR_DENIED;
 8014dee:	2307      	movs	r3, #7
 8014df0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8014df4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d128      	bne.n	8014e4e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014dfc:	79fb      	ldrb	r3, [r7, #7]
 8014dfe:	f003 0308 	and.w	r3, r3, #8
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d003      	beq.n	8014e0e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8014e06:	79fb      	ldrb	r3, [r7, #7]
 8014e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014e0c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014e0e:	693b      	ldr	r3, [r7, #16]
 8014e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8014e16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014e1c:	79fb      	ldrb	r3, [r7, #7]
 8014e1e:	f023 0301 	bic.w	r3, r3, #1
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	bf14      	ite	ne
 8014e26:	2301      	movne	r3, #1
 8014e28:	2300      	moveq	r3, #0
 8014e2a:	b2db      	uxtb	r3, r3
 8014e2c:	461a      	mov	r2, r3
 8014e2e:	f107 0314 	add.w	r3, r7, #20
 8014e32:	4611      	mov	r1, r2
 8014e34:	4618      	mov	r0, r3
 8014e36:	f7fe fa97 	bl	8013368 <inc_lock>
 8014e3a:	4602      	mov	r2, r0
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	691b      	ldr	r3, [r3, #16]
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d102      	bne.n	8014e4e <f_open+0x22e>
 8014e48:	2302      	movs	r3, #2
 8014e4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8014e4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	f040 8095 	bne.w	8014f82 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014e58:	693b      	ldr	r3, [r7, #16]
 8014e5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014e5c:	4611      	mov	r1, r2
 8014e5e:	4618      	mov	r0, r3
 8014e60:	f7ff f8bb 	bl	8013fda <ld_clust>
 8014e64:	4602      	mov	r2, r0
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8014e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e6c:	331c      	adds	r3, #28
 8014e6e:	4618      	mov	r0, r3
 8014e70:	f7fe f8e2 	bl	8013038 <ld_dword>
 8014e74:	4602      	mov	r2, r0
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	2200      	movs	r2, #0
 8014e7e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8014e80:	693a      	ldr	r2, [r7, #16]
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8014e86:	693b      	ldr	r3, [r7, #16]
 8014e88:	88da      	ldrh	r2, [r3, #6]
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	79fa      	ldrb	r2, [r7, #7]
 8014e92:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	2200      	movs	r2, #0
 8014e98:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8014e9a:	68fb      	ldr	r3, [r7, #12]
 8014e9c:	2200      	movs	r2, #0
 8014e9e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	2200      	movs	r2, #0
 8014ea4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	3330      	adds	r3, #48	; 0x30
 8014eaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014eae:	2100      	movs	r1, #0
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	f7fe f94c 	bl	801314e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8014eb6:	79fb      	ldrb	r3, [r7, #7]
 8014eb8:	f003 0320 	and.w	r3, r3, #32
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d060      	beq.n	8014f82 <f_open+0x362>
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	68db      	ldr	r3, [r3, #12]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d05c      	beq.n	8014f82 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	68da      	ldr	r2, [r3, #12]
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014ed0:	693b      	ldr	r3, [r7, #16]
 8014ed2:	895b      	ldrh	r3, [r3, #10]
 8014ed4:	025b      	lsls	r3, r3, #9
 8014ed6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	689b      	ldr	r3, [r3, #8]
 8014edc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	68db      	ldr	r3, [r3, #12]
 8014ee2:	657b      	str	r3, [r7, #84]	; 0x54
 8014ee4:	e016      	b.n	8014f14 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014eea:	4618      	mov	r0, r3
 8014eec:	f7fe fc29 	bl	8013742 <get_fat>
 8014ef0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8014ef2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014ef4:	2b01      	cmp	r3, #1
 8014ef6:	d802      	bhi.n	8014efe <f_open+0x2de>
 8014ef8:	2302      	movs	r3, #2
 8014efa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014efe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f04:	d102      	bne.n	8014f0c <f_open+0x2ec>
 8014f06:	2301      	movs	r3, #1
 8014f08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014f0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f10:	1ad3      	subs	r3, r2, r3
 8014f12:	657b      	str	r3, [r7, #84]	; 0x54
 8014f14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d103      	bne.n	8014f24 <f_open+0x304>
 8014f1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f20:	429a      	cmp	r2, r3
 8014f22:	d8e0      	bhi.n	8014ee6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014f28:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014f2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d127      	bne.n	8014f82 <f_open+0x362>
 8014f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d022      	beq.n	8014f82 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014f3c:	693b      	ldr	r3, [r7, #16]
 8014f3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014f40:	4618      	mov	r0, r3
 8014f42:	f7fe fbdf 	bl	8013704 <clust2sect>
 8014f46:	6478      	str	r0, [r7, #68]	; 0x44
 8014f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d103      	bne.n	8014f56 <f_open+0x336>
						res = FR_INT_ERR;
 8014f4e:	2302      	movs	r3, #2
 8014f50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014f54:	e015      	b.n	8014f82 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014f58:	0a5a      	lsrs	r2, r3, #9
 8014f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014f5c:	441a      	add	r2, r3
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014f62:	693b      	ldr	r3, [r7, #16]
 8014f64:	7858      	ldrb	r0, [r3, #1]
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	6a1a      	ldr	r2, [r3, #32]
 8014f70:	2301      	movs	r3, #1
 8014f72:	f7fd ffeb 	bl	8012f4c <disk_read>
 8014f76:	4603      	mov	r3, r0
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d002      	beq.n	8014f82 <f_open+0x362>
 8014f7c:	2301      	movs	r3, #1
 8014f7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014f82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d002      	beq.n	8014f90 <f_open+0x370>
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	2200      	movs	r2, #0
 8014f8e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014f90:	693b      	ldr	r3, [r7, #16]
 8014f92:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8014f96:	4611      	mov	r1, r2
 8014f98:	4618      	mov	r0, r3
 8014f9a:	f7fe f94b 	bl	8013234 <unlock_fs>
 8014f9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	3760      	adds	r7, #96	; 0x60
 8014fa6:	46bd      	mov	sp, r7
 8014fa8:	bd80      	pop	{r7, pc}

08014faa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014faa:	b580      	push	{r7, lr}
 8014fac:	b08c      	sub	sp, #48	; 0x30
 8014fae:	af00      	add	r7, sp, #0
 8014fb0:	60f8      	str	r0, [r7, #12]
 8014fb2:	60b9      	str	r1, [r7, #8]
 8014fb4:	607a      	str	r2, [r7, #4]
 8014fb6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014fb8:	68bb      	ldr	r3, [r7, #8]
 8014fba:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014fbc:	683b      	ldr	r3, [r7, #0]
 8014fbe:	2200      	movs	r2, #0
 8014fc0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	f107 0210 	add.w	r2, r7, #16
 8014fc8:	4611      	mov	r1, r2
 8014fca:	4618      	mov	r0, r3
 8014fcc:	f7ff fd7c 	bl	8014ac8 <validate>
 8014fd0:	4603      	mov	r3, r0
 8014fd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014fd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d107      	bne.n	8014fee <f_write+0x44>
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	7d5b      	ldrb	r3, [r3, #21]
 8014fe2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014fe6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d009      	beq.n	8015002 <f_write+0x58>
 8014fee:	693b      	ldr	r3, [r7, #16]
 8014ff0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8014ff4:	4611      	mov	r1, r2
 8014ff6:	4618      	mov	r0, r3
 8014ff8:	f7fe f91c 	bl	8013234 <unlock_fs>
 8014ffc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015000:	e173      	b.n	80152ea <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	7d1b      	ldrb	r3, [r3, #20]
 8015006:	f003 0302 	and.w	r3, r3, #2
 801500a:	2b00      	cmp	r3, #0
 801500c:	d106      	bne.n	801501c <f_write+0x72>
 801500e:	693b      	ldr	r3, [r7, #16]
 8015010:	2107      	movs	r1, #7
 8015012:	4618      	mov	r0, r3
 8015014:	f7fe f90e 	bl	8013234 <unlock_fs>
 8015018:	2307      	movs	r3, #7
 801501a:	e166      	b.n	80152ea <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	699a      	ldr	r2, [r3, #24]
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	441a      	add	r2, r3
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	699b      	ldr	r3, [r3, #24]
 8015028:	429a      	cmp	r2, r3
 801502a:	f080 814b 	bcs.w	80152c4 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	699b      	ldr	r3, [r3, #24]
 8015032:	43db      	mvns	r3, r3
 8015034:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8015036:	e145      	b.n	80152c4 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	699b      	ldr	r3, [r3, #24]
 801503c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015040:	2b00      	cmp	r3, #0
 8015042:	f040 8101 	bne.w	8015248 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	699b      	ldr	r3, [r3, #24]
 801504a:	0a5b      	lsrs	r3, r3, #9
 801504c:	693a      	ldr	r2, [r7, #16]
 801504e:	8952      	ldrh	r2, [r2, #10]
 8015050:	3a01      	subs	r2, #1
 8015052:	4013      	ands	r3, r2
 8015054:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8015056:	69bb      	ldr	r3, [r7, #24]
 8015058:	2b00      	cmp	r3, #0
 801505a:	d14d      	bne.n	80150f8 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	699b      	ldr	r3, [r3, #24]
 8015060:	2b00      	cmp	r3, #0
 8015062:	d10c      	bne.n	801507e <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	689b      	ldr	r3, [r3, #8]
 8015068:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801506a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801506c:	2b00      	cmp	r3, #0
 801506e:	d11a      	bne.n	80150a6 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	2100      	movs	r1, #0
 8015074:	4618      	mov	r0, r3
 8015076:	f7fe fd5d 	bl	8013b34 <create_chain>
 801507a:	62b8      	str	r0, [r7, #40]	; 0x28
 801507c:	e013      	b.n	80150a6 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015082:	2b00      	cmp	r3, #0
 8015084:	d007      	beq.n	8015096 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	699b      	ldr	r3, [r3, #24]
 801508a:	4619      	mov	r1, r3
 801508c:	68f8      	ldr	r0, [r7, #12]
 801508e:	f7fe fde9 	bl	8013c64 <clmt_clust>
 8015092:	62b8      	str	r0, [r7, #40]	; 0x28
 8015094:	e007      	b.n	80150a6 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8015096:	68fa      	ldr	r2, [r7, #12]
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	69db      	ldr	r3, [r3, #28]
 801509c:	4619      	mov	r1, r3
 801509e:	4610      	mov	r0, r2
 80150a0:	f7fe fd48 	bl	8013b34 <create_chain>
 80150a4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80150a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	f000 8110 	beq.w	80152ce <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80150ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150b0:	2b01      	cmp	r3, #1
 80150b2:	d109      	bne.n	80150c8 <f_write+0x11e>
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	2202      	movs	r2, #2
 80150b8:	755a      	strb	r2, [r3, #21]
 80150ba:	693b      	ldr	r3, [r7, #16]
 80150bc:	2102      	movs	r1, #2
 80150be:	4618      	mov	r0, r3
 80150c0:	f7fe f8b8 	bl	8013234 <unlock_fs>
 80150c4:	2302      	movs	r3, #2
 80150c6:	e110      	b.n	80152ea <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80150c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150ce:	d109      	bne.n	80150e4 <f_write+0x13a>
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	2201      	movs	r2, #1
 80150d4:	755a      	strb	r2, [r3, #21]
 80150d6:	693b      	ldr	r3, [r7, #16]
 80150d8:	2101      	movs	r1, #1
 80150da:	4618      	mov	r0, r3
 80150dc:	f7fe f8aa 	bl	8013234 <unlock_fs>
 80150e0:	2301      	movs	r3, #1
 80150e2:	e102      	b.n	80152ea <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80150e8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	689b      	ldr	r3, [r3, #8]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d102      	bne.n	80150f8 <f_write+0x14e>
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80150f6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	7d1b      	ldrb	r3, [r3, #20]
 80150fc:	b25b      	sxtb	r3, r3
 80150fe:	2b00      	cmp	r3, #0
 8015100:	da1d      	bge.n	801513e <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015102:	693b      	ldr	r3, [r7, #16]
 8015104:	7858      	ldrb	r0, [r3, #1]
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	6a1a      	ldr	r2, [r3, #32]
 8015110:	2301      	movs	r3, #1
 8015112:	f7fd ff3b 	bl	8012f8c <disk_write>
 8015116:	4603      	mov	r3, r0
 8015118:	2b00      	cmp	r3, #0
 801511a:	d009      	beq.n	8015130 <f_write+0x186>
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	2201      	movs	r2, #1
 8015120:	755a      	strb	r2, [r3, #21]
 8015122:	693b      	ldr	r3, [r7, #16]
 8015124:	2101      	movs	r1, #1
 8015126:	4618      	mov	r0, r3
 8015128:	f7fe f884 	bl	8013234 <unlock_fs>
 801512c:	2301      	movs	r3, #1
 801512e:	e0dc      	b.n	80152ea <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	7d1b      	ldrb	r3, [r3, #20]
 8015134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015138:	b2da      	uxtb	r2, r3
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801513e:	693a      	ldr	r2, [r7, #16]
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	69db      	ldr	r3, [r3, #28]
 8015144:	4619      	mov	r1, r3
 8015146:	4610      	mov	r0, r2
 8015148:	f7fe fadc 	bl	8013704 <clust2sect>
 801514c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801514e:	697b      	ldr	r3, [r7, #20]
 8015150:	2b00      	cmp	r3, #0
 8015152:	d109      	bne.n	8015168 <f_write+0x1be>
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	2202      	movs	r2, #2
 8015158:	755a      	strb	r2, [r3, #21]
 801515a:	693b      	ldr	r3, [r7, #16]
 801515c:	2102      	movs	r1, #2
 801515e:	4618      	mov	r0, r3
 8015160:	f7fe f868 	bl	8013234 <unlock_fs>
 8015164:	2302      	movs	r3, #2
 8015166:	e0c0      	b.n	80152ea <f_write+0x340>
			sect += csect;
 8015168:	697a      	ldr	r2, [r7, #20]
 801516a:	69bb      	ldr	r3, [r7, #24]
 801516c:	4413      	add	r3, r2
 801516e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	0a5b      	lsrs	r3, r3, #9
 8015174:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8015176:	6a3b      	ldr	r3, [r7, #32]
 8015178:	2b00      	cmp	r3, #0
 801517a:	d041      	beq.n	8015200 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801517c:	69ba      	ldr	r2, [r7, #24]
 801517e:	6a3b      	ldr	r3, [r7, #32]
 8015180:	4413      	add	r3, r2
 8015182:	693a      	ldr	r2, [r7, #16]
 8015184:	8952      	ldrh	r2, [r2, #10]
 8015186:	4293      	cmp	r3, r2
 8015188:	d905      	bls.n	8015196 <f_write+0x1ec>
					cc = fs->csize - csect;
 801518a:	693b      	ldr	r3, [r7, #16]
 801518c:	895b      	ldrh	r3, [r3, #10]
 801518e:	461a      	mov	r2, r3
 8015190:	69bb      	ldr	r3, [r7, #24]
 8015192:	1ad3      	subs	r3, r2, r3
 8015194:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015196:	693b      	ldr	r3, [r7, #16]
 8015198:	7858      	ldrb	r0, [r3, #1]
 801519a:	6a3b      	ldr	r3, [r7, #32]
 801519c:	697a      	ldr	r2, [r7, #20]
 801519e:	69f9      	ldr	r1, [r7, #28]
 80151a0:	f7fd fef4 	bl	8012f8c <disk_write>
 80151a4:	4603      	mov	r3, r0
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d009      	beq.n	80151be <f_write+0x214>
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	2201      	movs	r2, #1
 80151ae:	755a      	strb	r2, [r3, #21]
 80151b0:	693b      	ldr	r3, [r7, #16]
 80151b2:	2101      	movs	r1, #1
 80151b4:	4618      	mov	r0, r3
 80151b6:	f7fe f83d 	bl	8013234 <unlock_fs>
 80151ba:	2301      	movs	r3, #1
 80151bc:	e095      	b.n	80152ea <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	6a1a      	ldr	r2, [r3, #32]
 80151c2:	697b      	ldr	r3, [r7, #20]
 80151c4:	1ad3      	subs	r3, r2, r3
 80151c6:	6a3a      	ldr	r2, [r7, #32]
 80151c8:	429a      	cmp	r2, r3
 80151ca:	d915      	bls.n	80151f8 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	6a1a      	ldr	r2, [r3, #32]
 80151d6:	697b      	ldr	r3, [r7, #20]
 80151d8:	1ad3      	subs	r3, r2, r3
 80151da:	025b      	lsls	r3, r3, #9
 80151dc:	69fa      	ldr	r2, [r7, #28]
 80151de:	4413      	add	r3, r2
 80151e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80151e4:	4619      	mov	r1, r3
 80151e6:	f7fd ff91 	bl	801310c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	7d1b      	ldrb	r3, [r3, #20]
 80151ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80151f2:	b2da      	uxtb	r2, r3
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80151f8:	6a3b      	ldr	r3, [r7, #32]
 80151fa:	025b      	lsls	r3, r3, #9
 80151fc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80151fe:	e044      	b.n	801528a <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	6a1b      	ldr	r3, [r3, #32]
 8015204:	697a      	ldr	r2, [r7, #20]
 8015206:	429a      	cmp	r2, r3
 8015208:	d01b      	beq.n	8015242 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	699a      	ldr	r2, [r3, #24]
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015212:	429a      	cmp	r2, r3
 8015214:	d215      	bcs.n	8015242 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8015216:	693b      	ldr	r3, [r7, #16]
 8015218:	7858      	ldrb	r0, [r3, #1]
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015220:	2301      	movs	r3, #1
 8015222:	697a      	ldr	r2, [r7, #20]
 8015224:	f7fd fe92 	bl	8012f4c <disk_read>
 8015228:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801522a:	2b00      	cmp	r3, #0
 801522c:	d009      	beq.n	8015242 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	2201      	movs	r2, #1
 8015232:	755a      	strb	r2, [r3, #21]
 8015234:	693b      	ldr	r3, [r7, #16]
 8015236:	2101      	movs	r1, #1
 8015238:	4618      	mov	r0, r3
 801523a:	f7fd fffb 	bl	8013234 <unlock_fs>
 801523e:	2301      	movs	r3, #1
 8015240:	e053      	b.n	80152ea <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	697a      	ldr	r2, [r7, #20]
 8015246:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	699b      	ldr	r3, [r3, #24]
 801524c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015250:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8015254:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8015256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	429a      	cmp	r2, r3
 801525c:	d901      	bls.n	8015262 <f_write+0x2b8>
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	699b      	ldr	r3, [r3, #24]
 801526c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015270:	4413      	add	r3, r2
 8015272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015274:	69f9      	ldr	r1, [r7, #28]
 8015276:	4618      	mov	r0, r3
 8015278:	f7fd ff48 	bl	801310c <mem_cpy>
		fp->flag |= FA_DIRTY;
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	7d1b      	ldrb	r3, [r3, #20]
 8015280:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015284:	b2da      	uxtb	r2, r3
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801528a:	69fa      	ldr	r2, [r7, #28]
 801528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801528e:	4413      	add	r3, r2
 8015290:	61fb      	str	r3, [r7, #28]
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	699a      	ldr	r2, [r3, #24]
 8015296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015298:	441a      	add	r2, r3
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	619a      	str	r2, [r3, #24]
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	68da      	ldr	r2, [r3, #12]
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	699b      	ldr	r3, [r3, #24]
 80152a6:	429a      	cmp	r2, r3
 80152a8:	bf38      	it	cc
 80152aa:	461a      	movcc	r2, r3
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	60da      	str	r2, [r3, #12]
 80152b0:	683b      	ldr	r3, [r7, #0]
 80152b2:	681a      	ldr	r2, [r3, #0]
 80152b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152b6:	441a      	add	r2, r3
 80152b8:	683b      	ldr	r3, [r7, #0]
 80152ba:	601a      	str	r2, [r3, #0]
 80152bc:	687a      	ldr	r2, [r7, #4]
 80152be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152c0:	1ad3      	subs	r3, r2, r3
 80152c2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	f47f aeb6 	bne.w	8015038 <f_write+0x8e>
 80152cc:	e000      	b.n	80152d0 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80152ce:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	7d1b      	ldrb	r3, [r3, #20]
 80152d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80152d8:	b2da      	uxtb	r2, r3
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80152de:	693b      	ldr	r3, [r7, #16]
 80152e0:	2100      	movs	r1, #0
 80152e2:	4618      	mov	r0, r3
 80152e4:	f7fd ffa6 	bl	8013234 <unlock_fs>
 80152e8:	2300      	movs	r3, #0
}
 80152ea:	4618      	mov	r0, r3
 80152ec:	3730      	adds	r7, #48	; 0x30
 80152ee:	46bd      	mov	sp, r7
 80152f0:	bd80      	pop	{r7, pc}

080152f2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80152f2:	b580      	push	{r7, lr}
 80152f4:	b086      	sub	sp, #24
 80152f6:	af00      	add	r7, sp, #0
 80152f8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	f107 0208 	add.w	r2, r7, #8
 8015300:	4611      	mov	r1, r2
 8015302:	4618      	mov	r0, r3
 8015304:	f7ff fbe0 	bl	8014ac8 <validate>
 8015308:	4603      	mov	r3, r0
 801530a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801530c:	7dfb      	ldrb	r3, [r7, #23]
 801530e:	2b00      	cmp	r3, #0
 8015310:	d16d      	bne.n	80153ee <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	7d1b      	ldrb	r3, [r3, #20]
 8015316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801531a:	2b00      	cmp	r3, #0
 801531c:	d067      	beq.n	80153ee <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	7d1b      	ldrb	r3, [r3, #20]
 8015322:	b25b      	sxtb	r3, r3
 8015324:	2b00      	cmp	r3, #0
 8015326:	da1a      	bge.n	801535e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8015328:	68bb      	ldr	r3, [r7, #8]
 801532a:	7858      	ldrb	r0, [r3, #1]
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	6a1a      	ldr	r2, [r3, #32]
 8015336:	2301      	movs	r3, #1
 8015338:	f7fd fe28 	bl	8012f8c <disk_write>
 801533c:	4603      	mov	r3, r0
 801533e:	2b00      	cmp	r3, #0
 8015340:	d006      	beq.n	8015350 <f_sync+0x5e>
 8015342:	68bb      	ldr	r3, [r7, #8]
 8015344:	2101      	movs	r1, #1
 8015346:	4618      	mov	r0, r3
 8015348:	f7fd ff74 	bl	8013234 <unlock_fs>
 801534c:	2301      	movs	r3, #1
 801534e:	e055      	b.n	80153fc <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	7d1b      	ldrb	r3, [r3, #20]
 8015354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015358:	b2da      	uxtb	r2, r3
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801535e:	f7fb fc15 	bl	8010b8c <get_fattime>
 8015362:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8015364:	68ba      	ldr	r2, [r7, #8]
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801536a:	4619      	mov	r1, r3
 801536c:	4610      	mov	r0, r2
 801536e:	f7fe f92d 	bl	80135cc <move_window>
 8015372:	4603      	mov	r3, r0
 8015374:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8015376:	7dfb      	ldrb	r3, [r7, #23]
 8015378:	2b00      	cmp	r3, #0
 801537a:	d138      	bne.n	80153ee <f_sync+0xfc>
					dir = fp->dir_ptr;
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015380:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	330b      	adds	r3, #11
 8015386:	781a      	ldrb	r2, [r3, #0]
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	330b      	adds	r3, #11
 801538c:	f042 0220 	orr.w	r2, r2, #32
 8015390:	b2d2      	uxtb	r2, r2
 8015392:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	6818      	ldr	r0, [r3, #0]
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	689b      	ldr	r3, [r3, #8]
 801539c:	461a      	mov	r2, r3
 801539e:	68f9      	ldr	r1, [r7, #12]
 80153a0:	f7fe fe3a 	bl	8014018 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	f103 021c 	add.w	r2, r3, #28
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	68db      	ldr	r3, [r3, #12]
 80153ae:	4619      	mov	r1, r3
 80153b0:	4610      	mov	r0, r2
 80153b2:	f7fd fe7f 	bl	80130b4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	3316      	adds	r3, #22
 80153ba:	6939      	ldr	r1, [r7, #16]
 80153bc:	4618      	mov	r0, r3
 80153be:	f7fd fe79 	bl	80130b4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	3312      	adds	r3, #18
 80153c6:	2100      	movs	r1, #0
 80153c8:	4618      	mov	r0, r3
 80153ca:	f7fd fe58 	bl	801307e <st_word>
					fs->wflag = 1;
 80153ce:	68bb      	ldr	r3, [r7, #8]
 80153d0:	2201      	movs	r2, #1
 80153d2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80153d4:	68bb      	ldr	r3, [r7, #8]
 80153d6:	4618      	mov	r0, r3
 80153d8:	f7fe f926 	bl	8013628 <sync_fs>
 80153dc:	4603      	mov	r3, r0
 80153de:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	7d1b      	ldrb	r3, [r3, #20]
 80153e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80153e8:	b2da      	uxtb	r2, r3
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80153ee:	68bb      	ldr	r3, [r7, #8]
 80153f0:	7dfa      	ldrb	r2, [r7, #23]
 80153f2:	4611      	mov	r1, r2
 80153f4:	4618      	mov	r0, r3
 80153f6:	f7fd ff1d 	bl	8013234 <unlock_fs>
 80153fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80153fc:	4618      	mov	r0, r3
 80153fe:	3718      	adds	r7, #24
 8015400:	46bd      	mov	sp, r7
 8015402:	bd80      	pop	{r7, pc}

08015404 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8015404:	b580      	push	{r7, lr}
 8015406:	b084      	sub	sp, #16
 8015408:	af00      	add	r7, sp, #0
 801540a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801540c:	6878      	ldr	r0, [r7, #4]
 801540e:	f7ff ff70 	bl	80152f2 <f_sync>
 8015412:	4603      	mov	r3, r0
 8015414:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8015416:	7bfb      	ldrb	r3, [r7, #15]
 8015418:	2b00      	cmp	r3, #0
 801541a:	d11d      	bne.n	8015458 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	f107 0208 	add.w	r2, r7, #8
 8015422:	4611      	mov	r1, r2
 8015424:	4618      	mov	r0, r3
 8015426:	f7ff fb4f 	bl	8014ac8 <validate>
 801542a:	4603      	mov	r3, r0
 801542c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801542e:	7bfb      	ldrb	r3, [r7, #15]
 8015430:	2b00      	cmp	r3, #0
 8015432:	d111      	bne.n	8015458 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	691b      	ldr	r3, [r3, #16]
 8015438:	4618      	mov	r0, r3
 801543a:	f7fe f823 	bl	8013484 <dec_lock>
 801543e:	4603      	mov	r3, r0
 8015440:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8015442:	7bfb      	ldrb	r3, [r7, #15]
 8015444:	2b00      	cmp	r3, #0
 8015446:	d102      	bne.n	801544e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	2200      	movs	r2, #0
 801544c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 801544e:	68bb      	ldr	r3, [r7, #8]
 8015450:	2100      	movs	r1, #0
 8015452:	4618      	mov	r0, r3
 8015454:	f7fd feee 	bl	8013234 <unlock_fs>
#endif
		}
	}
	return res;
 8015458:	7bfb      	ldrb	r3, [r7, #15]
}
 801545a:	4618      	mov	r0, r3
 801545c:	3710      	adds	r7, #16
 801545e:	46bd      	mov	sp, r7
 8015460:	bd80      	pop	{r7, pc}

08015462 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8015462:	b580      	push	{r7, lr}
 8015464:	b090      	sub	sp, #64	; 0x40
 8015466:	af00      	add	r7, sp, #0
 8015468:	6078      	str	r0, [r7, #4]
 801546a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	f107 0208 	add.w	r2, r7, #8
 8015472:	4611      	mov	r1, r2
 8015474:	4618      	mov	r0, r3
 8015476:	f7ff fb27 	bl	8014ac8 <validate>
 801547a:	4603      	mov	r3, r0
 801547c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8015480:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015484:	2b00      	cmp	r3, #0
 8015486:	d103      	bne.n	8015490 <f_lseek+0x2e>
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	7d5b      	ldrb	r3, [r3, #21]
 801548c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8015490:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015494:	2b00      	cmp	r3, #0
 8015496:	d009      	beq.n	80154ac <f_lseek+0x4a>
 8015498:	68bb      	ldr	r3, [r7, #8]
 801549a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801549e:	4611      	mov	r1, r2
 80154a0:	4618      	mov	r0, r3
 80154a2:	f7fd fec7 	bl	8013234 <unlock_fs>
 80154a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80154aa:	e229      	b.n	8015900 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	f000 80ea 	beq.w	801568a <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80154b6:	683b      	ldr	r3, [r7, #0]
 80154b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80154bc:	d164      	bne.n	8015588 <f_lseek+0x126>
			tbl = fp->cltbl;
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154c2:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80154c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154c6:	1d1a      	adds	r2, r3, #4
 80154c8:	627a      	str	r2, [r7, #36]	; 0x24
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	617b      	str	r3, [r7, #20]
 80154ce:	2302      	movs	r3, #2
 80154d0:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	689b      	ldr	r3, [r3, #8]
 80154d6:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80154d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d044      	beq.n	8015568 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80154de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154e0:	613b      	str	r3, [r7, #16]
 80154e2:	2300      	movs	r3, #0
 80154e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80154e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154e8:	3302      	adds	r3, #2
 80154ea:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80154ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154ee:	60fb      	str	r3, [r7, #12]
 80154f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154f2:	3301      	adds	r3, #1
 80154f4:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80154fa:	4618      	mov	r0, r3
 80154fc:	f7fe f921 	bl	8013742 <get_fat>
 8015500:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8015502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015504:	2b01      	cmp	r3, #1
 8015506:	d809      	bhi.n	801551c <f_lseek+0xba>
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	2202      	movs	r2, #2
 801550c:	755a      	strb	r2, [r3, #21]
 801550e:	68bb      	ldr	r3, [r7, #8]
 8015510:	2102      	movs	r1, #2
 8015512:	4618      	mov	r0, r3
 8015514:	f7fd fe8e 	bl	8013234 <unlock_fs>
 8015518:	2302      	movs	r3, #2
 801551a:	e1f1      	b.n	8015900 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801551c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801551e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015522:	d109      	bne.n	8015538 <f_lseek+0xd6>
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	2201      	movs	r2, #1
 8015528:	755a      	strb	r2, [r3, #21]
 801552a:	68bb      	ldr	r3, [r7, #8]
 801552c:	2101      	movs	r1, #1
 801552e:	4618      	mov	r0, r3
 8015530:	f7fd fe80 	bl	8013234 <unlock_fs>
 8015534:	2301      	movs	r3, #1
 8015536:	e1e3      	b.n	8015900 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8015538:	68fb      	ldr	r3, [r7, #12]
 801553a:	3301      	adds	r3, #1
 801553c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801553e:	429a      	cmp	r2, r3
 8015540:	d0d4      	beq.n	80154ec <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8015542:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015544:	697b      	ldr	r3, [r7, #20]
 8015546:	429a      	cmp	r2, r3
 8015548:	d809      	bhi.n	801555e <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 801554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801554c:	1d1a      	adds	r2, r3, #4
 801554e:	627a      	str	r2, [r7, #36]	; 0x24
 8015550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015552:	601a      	str	r2, [r3, #0]
 8015554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015556:	1d1a      	adds	r2, r3, #4
 8015558:	627a      	str	r2, [r7, #36]	; 0x24
 801555a:	693a      	ldr	r2, [r7, #16]
 801555c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801555e:	68bb      	ldr	r3, [r7, #8]
 8015560:	699b      	ldr	r3, [r3, #24]
 8015562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015564:	429a      	cmp	r2, r3
 8015566:	d3ba      	bcc.n	80154de <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801556c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801556e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8015570:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015572:	697b      	ldr	r3, [r7, #20]
 8015574:	429a      	cmp	r2, r3
 8015576:	d803      	bhi.n	8015580 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8015578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801557a:	2200      	movs	r2, #0
 801557c:	601a      	str	r2, [r3, #0]
 801557e:	e1b6      	b.n	80158ee <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8015580:	2311      	movs	r3, #17
 8015582:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8015586:	e1b2      	b.n	80158ee <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	68db      	ldr	r3, [r3, #12]
 801558c:	683a      	ldr	r2, [r7, #0]
 801558e:	429a      	cmp	r2, r3
 8015590:	d902      	bls.n	8015598 <f_lseek+0x136>
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	68db      	ldr	r3, [r3, #12]
 8015596:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	683a      	ldr	r2, [r7, #0]
 801559c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801559e:	683b      	ldr	r3, [r7, #0]
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	f000 81a4 	beq.w	80158ee <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80155a6:	683b      	ldr	r3, [r7, #0]
 80155a8:	3b01      	subs	r3, #1
 80155aa:	4619      	mov	r1, r3
 80155ac:	6878      	ldr	r0, [r7, #4]
 80155ae:	f7fe fb59 	bl	8013c64 <clmt_clust>
 80155b2:	4602      	mov	r2, r0
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80155b8:	68ba      	ldr	r2, [r7, #8]
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	69db      	ldr	r3, [r3, #28]
 80155be:	4619      	mov	r1, r3
 80155c0:	4610      	mov	r0, r2
 80155c2:	f7fe f89f 	bl	8013704 <clust2sect>
 80155c6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80155c8:	69bb      	ldr	r3, [r7, #24]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d109      	bne.n	80155e2 <f_lseek+0x180>
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	2202      	movs	r2, #2
 80155d2:	755a      	strb	r2, [r3, #21]
 80155d4:	68bb      	ldr	r3, [r7, #8]
 80155d6:	2102      	movs	r1, #2
 80155d8:	4618      	mov	r0, r3
 80155da:	f7fd fe2b 	bl	8013234 <unlock_fs>
 80155de:	2302      	movs	r3, #2
 80155e0:	e18e      	b.n	8015900 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80155e2:	683b      	ldr	r3, [r7, #0]
 80155e4:	3b01      	subs	r3, #1
 80155e6:	0a5b      	lsrs	r3, r3, #9
 80155e8:	68ba      	ldr	r2, [r7, #8]
 80155ea:	8952      	ldrh	r2, [r2, #10]
 80155ec:	3a01      	subs	r2, #1
 80155ee:	4013      	ands	r3, r2
 80155f0:	69ba      	ldr	r2, [r7, #24]
 80155f2:	4413      	add	r3, r2
 80155f4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	699b      	ldr	r3, [r3, #24]
 80155fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80155fe:	2b00      	cmp	r3, #0
 8015600:	f000 8175 	beq.w	80158ee <f_lseek+0x48c>
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	6a1b      	ldr	r3, [r3, #32]
 8015608:	69ba      	ldr	r2, [r7, #24]
 801560a:	429a      	cmp	r2, r3
 801560c:	f000 816f 	beq.w	80158ee <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	7d1b      	ldrb	r3, [r3, #20]
 8015614:	b25b      	sxtb	r3, r3
 8015616:	2b00      	cmp	r3, #0
 8015618:	da1d      	bge.n	8015656 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801561a:	68bb      	ldr	r3, [r7, #8]
 801561c:	7858      	ldrb	r0, [r3, #1]
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	6a1a      	ldr	r2, [r3, #32]
 8015628:	2301      	movs	r3, #1
 801562a:	f7fd fcaf 	bl	8012f8c <disk_write>
 801562e:	4603      	mov	r3, r0
 8015630:	2b00      	cmp	r3, #0
 8015632:	d009      	beq.n	8015648 <f_lseek+0x1e6>
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	2201      	movs	r2, #1
 8015638:	755a      	strb	r2, [r3, #21]
 801563a:	68bb      	ldr	r3, [r7, #8]
 801563c:	2101      	movs	r1, #1
 801563e:	4618      	mov	r0, r3
 8015640:	f7fd fdf8 	bl	8013234 <unlock_fs>
 8015644:	2301      	movs	r3, #1
 8015646:	e15b      	b.n	8015900 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	7d1b      	ldrb	r3, [r3, #20]
 801564c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015650:	b2da      	uxtb	r2, r3
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8015656:	68bb      	ldr	r3, [r7, #8]
 8015658:	7858      	ldrb	r0, [r3, #1]
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015660:	2301      	movs	r3, #1
 8015662:	69ba      	ldr	r2, [r7, #24]
 8015664:	f7fd fc72 	bl	8012f4c <disk_read>
 8015668:	4603      	mov	r3, r0
 801566a:	2b00      	cmp	r3, #0
 801566c:	d009      	beq.n	8015682 <f_lseek+0x220>
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	2201      	movs	r2, #1
 8015672:	755a      	strb	r2, [r3, #21]
 8015674:	68bb      	ldr	r3, [r7, #8]
 8015676:	2101      	movs	r1, #1
 8015678:	4618      	mov	r0, r3
 801567a:	f7fd fddb 	bl	8013234 <unlock_fs>
 801567e:	2301      	movs	r3, #1
 8015680:	e13e      	b.n	8015900 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	69ba      	ldr	r2, [r7, #24]
 8015686:	621a      	str	r2, [r3, #32]
 8015688:	e131      	b.n	80158ee <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	68db      	ldr	r3, [r3, #12]
 801568e:	683a      	ldr	r2, [r7, #0]
 8015690:	429a      	cmp	r2, r3
 8015692:	d908      	bls.n	80156a6 <f_lseek+0x244>
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	7d1b      	ldrb	r3, [r3, #20]
 8015698:	f003 0302 	and.w	r3, r3, #2
 801569c:	2b00      	cmp	r3, #0
 801569e:	d102      	bne.n	80156a6 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	68db      	ldr	r3, [r3, #12]
 80156a4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	699b      	ldr	r3, [r3, #24]
 80156aa:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80156ac:	2300      	movs	r3, #0
 80156ae:	637b      	str	r3, [r7, #52]	; 0x34
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80156b4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80156b6:	683b      	ldr	r3, [r7, #0]
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	f000 80c0 	beq.w	801583e <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80156be:	68bb      	ldr	r3, [r7, #8]
 80156c0:	895b      	ldrh	r3, [r3, #10]
 80156c2:	025b      	lsls	r3, r3, #9
 80156c4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80156c6:	6a3b      	ldr	r3, [r7, #32]
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d01b      	beq.n	8015704 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80156cc:	683b      	ldr	r3, [r7, #0]
 80156ce:	1e5a      	subs	r2, r3, #1
 80156d0:	69fb      	ldr	r3, [r7, #28]
 80156d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80156d6:	6a3b      	ldr	r3, [r7, #32]
 80156d8:	1e59      	subs	r1, r3, #1
 80156da:	69fb      	ldr	r3, [r7, #28]
 80156dc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80156e0:	429a      	cmp	r2, r3
 80156e2:	d30f      	bcc.n	8015704 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80156e4:	6a3b      	ldr	r3, [r7, #32]
 80156e6:	1e5a      	subs	r2, r3, #1
 80156e8:	69fb      	ldr	r3, [r7, #28]
 80156ea:	425b      	negs	r3, r3
 80156ec:	401a      	ands	r2, r3
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	699b      	ldr	r3, [r3, #24]
 80156f6:	683a      	ldr	r2, [r7, #0]
 80156f8:	1ad3      	subs	r3, r2, r3
 80156fa:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	69db      	ldr	r3, [r3, #28]
 8015700:	63bb      	str	r3, [r7, #56]	; 0x38
 8015702:	e02c      	b.n	801575e <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	689b      	ldr	r3, [r3, #8]
 8015708:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801570a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801570c:	2b00      	cmp	r3, #0
 801570e:	d123      	bne.n	8015758 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	2100      	movs	r1, #0
 8015714:	4618      	mov	r0, r3
 8015716:	f7fe fa0d 	bl	8013b34 <create_chain>
 801571a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801571c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801571e:	2b01      	cmp	r3, #1
 8015720:	d109      	bne.n	8015736 <f_lseek+0x2d4>
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	2202      	movs	r2, #2
 8015726:	755a      	strb	r2, [r3, #21]
 8015728:	68bb      	ldr	r3, [r7, #8]
 801572a:	2102      	movs	r1, #2
 801572c:	4618      	mov	r0, r3
 801572e:	f7fd fd81 	bl	8013234 <unlock_fs>
 8015732:	2302      	movs	r3, #2
 8015734:	e0e4      	b.n	8015900 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015738:	f1b3 3fff 	cmp.w	r3, #4294967295
 801573c:	d109      	bne.n	8015752 <f_lseek+0x2f0>
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	2201      	movs	r2, #1
 8015742:	755a      	strb	r2, [r3, #21]
 8015744:	68bb      	ldr	r3, [r7, #8]
 8015746:	2101      	movs	r1, #1
 8015748:	4618      	mov	r0, r3
 801574a:	f7fd fd73 	bl	8013234 <unlock_fs>
 801574e:	2301      	movs	r3, #1
 8015750:	e0d6      	b.n	8015900 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015756:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801575c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801575e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015760:	2b00      	cmp	r3, #0
 8015762:	d06c      	beq.n	801583e <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8015764:	e044      	b.n	80157f0 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8015766:	683a      	ldr	r2, [r7, #0]
 8015768:	69fb      	ldr	r3, [r7, #28]
 801576a:	1ad3      	subs	r3, r2, r3
 801576c:	603b      	str	r3, [r7, #0]
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	699a      	ldr	r2, [r3, #24]
 8015772:	69fb      	ldr	r3, [r7, #28]
 8015774:	441a      	add	r2, r3
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	7d1b      	ldrb	r3, [r3, #20]
 801577e:	f003 0302 	and.w	r3, r3, #2
 8015782:	2b00      	cmp	r3, #0
 8015784:	d00b      	beq.n	801579e <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801578a:	4618      	mov	r0, r3
 801578c:	f7fe f9d2 	bl	8013b34 <create_chain>
 8015790:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8015792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015794:	2b00      	cmp	r3, #0
 8015796:	d108      	bne.n	80157aa <f_lseek+0x348>
							ofs = 0; break;
 8015798:	2300      	movs	r3, #0
 801579a:	603b      	str	r3, [r7, #0]
 801579c:	e02c      	b.n	80157f8 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80157a2:	4618      	mov	r0, r3
 80157a4:	f7fd ffcd 	bl	8013742 <get_fat>
 80157a8:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80157aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80157b0:	d109      	bne.n	80157c6 <f_lseek+0x364>
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	2201      	movs	r2, #1
 80157b6:	755a      	strb	r2, [r3, #21]
 80157b8:	68bb      	ldr	r3, [r7, #8]
 80157ba:	2101      	movs	r1, #1
 80157bc:	4618      	mov	r0, r3
 80157be:	f7fd fd39 	bl	8013234 <unlock_fs>
 80157c2:	2301      	movs	r3, #1
 80157c4:	e09c      	b.n	8015900 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80157c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157c8:	2b01      	cmp	r3, #1
 80157ca:	d904      	bls.n	80157d6 <f_lseek+0x374>
 80157cc:	68bb      	ldr	r3, [r7, #8]
 80157ce:	699b      	ldr	r3, [r3, #24]
 80157d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80157d2:	429a      	cmp	r2, r3
 80157d4:	d309      	bcc.n	80157ea <f_lseek+0x388>
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	2202      	movs	r2, #2
 80157da:	755a      	strb	r2, [r3, #21]
 80157dc:	68bb      	ldr	r3, [r7, #8]
 80157de:	2102      	movs	r1, #2
 80157e0:	4618      	mov	r0, r3
 80157e2:	f7fd fd27 	bl	8013234 <unlock_fs>
 80157e6:	2302      	movs	r3, #2
 80157e8:	e08a      	b.n	8015900 <f_lseek+0x49e>
					fp->clust = clst;
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80157ee:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80157f0:	683a      	ldr	r2, [r7, #0]
 80157f2:	69fb      	ldr	r3, [r7, #28]
 80157f4:	429a      	cmp	r2, r3
 80157f6:	d8b6      	bhi.n	8015766 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	699a      	ldr	r2, [r3, #24]
 80157fc:	683b      	ldr	r3, [r7, #0]
 80157fe:	441a      	add	r2, r3
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8015804:	683b      	ldr	r3, [r7, #0]
 8015806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801580a:	2b00      	cmp	r3, #0
 801580c:	d017      	beq.n	801583e <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801580e:	68bb      	ldr	r3, [r7, #8]
 8015810:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015812:	4618      	mov	r0, r3
 8015814:	f7fd ff76 	bl	8013704 <clust2sect>
 8015818:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801581a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801581c:	2b00      	cmp	r3, #0
 801581e:	d109      	bne.n	8015834 <f_lseek+0x3d2>
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	2202      	movs	r2, #2
 8015824:	755a      	strb	r2, [r3, #21]
 8015826:	68bb      	ldr	r3, [r7, #8]
 8015828:	2102      	movs	r1, #2
 801582a:	4618      	mov	r0, r3
 801582c:	f7fd fd02 	bl	8013234 <unlock_fs>
 8015830:	2302      	movs	r3, #2
 8015832:	e065      	b.n	8015900 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8015834:	683b      	ldr	r3, [r7, #0]
 8015836:	0a5b      	lsrs	r3, r3, #9
 8015838:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801583a:	4413      	add	r3, r2
 801583c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	699a      	ldr	r2, [r3, #24]
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	68db      	ldr	r3, [r3, #12]
 8015846:	429a      	cmp	r2, r3
 8015848:	d90a      	bls.n	8015860 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	699a      	ldr	r2, [r3, #24]
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	7d1b      	ldrb	r3, [r3, #20]
 8015856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801585a:	b2da      	uxtb	r2, r3
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	699b      	ldr	r3, [r3, #24]
 8015864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015868:	2b00      	cmp	r3, #0
 801586a:	d040      	beq.n	80158ee <f_lseek+0x48c>
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	6a1b      	ldr	r3, [r3, #32]
 8015870:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015872:	429a      	cmp	r2, r3
 8015874:	d03b      	beq.n	80158ee <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	7d1b      	ldrb	r3, [r3, #20]
 801587a:	b25b      	sxtb	r3, r3
 801587c:	2b00      	cmp	r3, #0
 801587e:	da1d      	bge.n	80158bc <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015880:	68bb      	ldr	r3, [r7, #8]
 8015882:	7858      	ldrb	r0, [r3, #1]
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	6a1a      	ldr	r2, [r3, #32]
 801588e:	2301      	movs	r3, #1
 8015890:	f7fd fb7c 	bl	8012f8c <disk_write>
 8015894:	4603      	mov	r3, r0
 8015896:	2b00      	cmp	r3, #0
 8015898:	d009      	beq.n	80158ae <f_lseek+0x44c>
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	2201      	movs	r2, #1
 801589e:	755a      	strb	r2, [r3, #21]
 80158a0:	68bb      	ldr	r3, [r7, #8]
 80158a2:	2101      	movs	r1, #1
 80158a4:	4618      	mov	r0, r3
 80158a6:	f7fd fcc5 	bl	8013234 <unlock_fs>
 80158aa:	2301      	movs	r3, #1
 80158ac:	e028      	b.n	8015900 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	7d1b      	ldrb	r3, [r3, #20]
 80158b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80158b6:	b2da      	uxtb	r2, r3
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80158bc:	68bb      	ldr	r3, [r7, #8]
 80158be:	7858      	ldrb	r0, [r3, #1]
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80158c6:	2301      	movs	r3, #1
 80158c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80158ca:	f7fd fb3f 	bl	8012f4c <disk_read>
 80158ce:	4603      	mov	r3, r0
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d009      	beq.n	80158e8 <f_lseek+0x486>
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	2201      	movs	r2, #1
 80158d8:	755a      	strb	r2, [r3, #21]
 80158da:	68bb      	ldr	r3, [r7, #8]
 80158dc:	2101      	movs	r1, #1
 80158de:	4618      	mov	r0, r3
 80158e0:	f7fd fca8 	bl	8013234 <unlock_fs>
 80158e4:	2301      	movs	r3, #1
 80158e6:	e00b      	b.n	8015900 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80158ec:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80158ee:	68bb      	ldr	r3, [r7, #8]
 80158f0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80158f4:	4611      	mov	r1, r2
 80158f6:	4618      	mov	r0, r3
 80158f8:	f7fd fc9c 	bl	8013234 <unlock_fs>
 80158fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8015900:	4618      	mov	r0, r3
 8015902:	3740      	adds	r7, #64	; 0x40
 8015904:	46bd      	mov	sp, r7
 8015906:	bd80      	pop	{r7, pc}

08015908 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8015908:	b580      	push	{r7, lr}
 801590a:	b086      	sub	sp, #24
 801590c:	af00      	add	r7, sp, #0
 801590e:	6078      	str	r0, [r7, #4]
 8015910:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	2b00      	cmp	r3, #0
 8015916:	d101      	bne.n	801591c <f_opendir+0x14>
 8015918:	2309      	movs	r3, #9
 801591a:	e06a      	b.n	80159f2 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8015920:	f107 010c 	add.w	r1, r7, #12
 8015924:	463b      	mov	r3, r7
 8015926:	2200      	movs	r2, #0
 8015928:	4618      	mov	r0, r3
 801592a:	f7fe fe79 	bl	8014620 <find_volume>
 801592e:	4603      	mov	r3, r0
 8015930:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015932:	7dfb      	ldrb	r3, [r7, #23]
 8015934:	2b00      	cmp	r3, #0
 8015936:	d14f      	bne.n	80159d8 <f_opendir+0xd0>
		obj->fs = fs;
 8015938:	68fa      	ldr	r2, [r7, #12]
 801593a:	693b      	ldr	r3, [r7, #16]
 801593c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801593e:	683b      	ldr	r3, [r7, #0]
 8015940:	4619      	mov	r1, r3
 8015942:	6878      	ldr	r0, [r7, #4]
 8015944:	f7fe fd60 	bl	8014408 <follow_path>
 8015948:	4603      	mov	r3, r0
 801594a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801594c:	7dfb      	ldrb	r3, [r7, #23]
 801594e:	2b00      	cmp	r3, #0
 8015950:	d13d      	bne.n	80159ce <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015958:	b25b      	sxtb	r3, r3
 801595a:	2b00      	cmp	r3, #0
 801595c:	db12      	blt.n	8015984 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801595e:	693b      	ldr	r3, [r7, #16]
 8015960:	799b      	ldrb	r3, [r3, #6]
 8015962:	f003 0310 	and.w	r3, r3, #16
 8015966:	2b00      	cmp	r3, #0
 8015968:	d00a      	beq.n	8015980 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801596a:	68fa      	ldr	r2, [r7, #12]
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	6a1b      	ldr	r3, [r3, #32]
 8015970:	4619      	mov	r1, r3
 8015972:	4610      	mov	r0, r2
 8015974:	f7fe fb31 	bl	8013fda <ld_clust>
 8015978:	4602      	mov	r2, r0
 801597a:	693b      	ldr	r3, [r7, #16]
 801597c:	609a      	str	r2, [r3, #8]
 801597e:	e001      	b.n	8015984 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8015980:	2305      	movs	r3, #5
 8015982:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8015984:	7dfb      	ldrb	r3, [r7, #23]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d121      	bne.n	80159ce <f_opendir+0xc6>
				obj->id = fs->id;
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	88da      	ldrh	r2, [r3, #6]
 801598e:	693b      	ldr	r3, [r7, #16]
 8015990:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8015992:	2100      	movs	r1, #0
 8015994:	6878      	ldr	r0, [r7, #4]
 8015996:	f7fe f999 	bl	8013ccc <dir_sdi>
 801599a:	4603      	mov	r3, r0
 801599c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801599e:	7dfb      	ldrb	r3, [r7, #23]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d114      	bne.n	80159ce <f_opendir+0xc6>
					if (obj->sclust) {
 80159a4:	693b      	ldr	r3, [r7, #16]
 80159a6:	689b      	ldr	r3, [r3, #8]
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d00d      	beq.n	80159c8 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80159ac:	2100      	movs	r1, #0
 80159ae:	6878      	ldr	r0, [r7, #4]
 80159b0:	f7fd fcda 	bl	8013368 <inc_lock>
 80159b4:	4602      	mov	r2, r0
 80159b6:	693b      	ldr	r3, [r7, #16]
 80159b8:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80159ba:	693b      	ldr	r3, [r7, #16]
 80159bc:	691b      	ldr	r3, [r3, #16]
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d105      	bne.n	80159ce <f_opendir+0xc6>
 80159c2:	2312      	movs	r3, #18
 80159c4:	75fb      	strb	r3, [r7, #23]
 80159c6:	e002      	b.n	80159ce <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80159c8:	693b      	ldr	r3, [r7, #16]
 80159ca:	2200      	movs	r2, #0
 80159cc:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80159ce:	7dfb      	ldrb	r3, [r7, #23]
 80159d0:	2b04      	cmp	r3, #4
 80159d2:	d101      	bne.n	80159d8 <f_opendir+0xd0>
 80159d4:	2305      	movs	r3, #5
 80159d6:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80159d8:	7dfb      	ldrb	r3, [r7, #23]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d002      	beq.n	80159e4 <f_opendir+0xdc>
 80159de:	693b      	ldr	r3, [r7, #16]
 80159e0:	2200      	movs	r2, #0
 80159e2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	7dfa      	ldrb	r2, [r7, #23]
 80159e8:	4611      	mov	r1, r2
 80159ea:	4618      	mov	r0, r3
 80159ec:	f7fd fc22 	bl	8013234 <unlock_fs>
 80159f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80159f2:	4618      	mov	r0, r3
 80159f4:	3718      	adds	r7, #24
 80159f6:	46bd      	mov	sp, r7
 80159f8:	bd80      	pop	{r7, pc}

080159fa <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80159fa:	b580      	push	{r7, lr}
 80159fc:	b084      	sub	sp, #16
 80159fe:	af00      	add	r7, sp, #0
 8015a00:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	f107 0208 	add.w	r2, r7, #8
 8015a08:	4611      	mov	r1, r2
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	f7ff f85c 	bl	8014ac8 <validate>
 8015a10:	4603      	mov	r3, r0
 8015a12:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015a14:	7bfb      	ldrb	r3, [r7, #15]
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d115      	bne.n	8015a46 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	691b      	ldr	r3, [r3, #16]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d006      	beq.n	8015a30 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	691b      	ldr	r3, [r3, #16]
 8015a26:	4618      	mov	r0, r3
 8015a28:	f7fd fd2c 	bl	8013484 <dec_lock>
 8015a2c:	4603      	mov	r3, r0
 8015a2e:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8015a30:	7bfb      	ldrb	r3, [r7, #15]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d102      	bne.n	8015a3c <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	2200      	movs	r2, #0
 8015a3a:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8015a3c:	68bb      	ldr	r3, [r7, #8]
 8015a3e:	2100      	movs	r1, #0
 8015a40:	4618      	mov	r0, r3
 8015a42:	f7fd fbf7 	bl	8013234 <unlock_fs>
#endif
	}
	return res;
 8015a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a48:	4618      	mov	r0, r3
 8015a4a:	3710      	adds	r7, #16
 8015a4c:	46bd      	mov	sp, r7
 8015a4e:	bd80      	pop	{r7, pc}

08015a50 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8015a50:	b580      	push	{r7, lr}
 8015a52:	b084      	sub	sp, #16
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	6078      	str	r0, [r7, #4]
 8015a58:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	f107 0208 	add.w	r2, r7, #8
 8015a60:	4611      	mov	r1, r2
 8015a62:	4618      	mov	r0, r3
 8015a64:	f7ff f830 	bl	8014ac8 <validate>
 8015a68:	4603      	mov	r3, r0
 8015a6a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015a6c:	7bfb      	ldrb	r3, [r7, #15]
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d126      	bne.n	8015ac0 <f_readdir+0x70>
		if (!fno) {
 8015a72:	683b      	ldr	r3, [r7, #0]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d106      	bne.n	8015a86 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8015a78:	2100      	movs	r1, #0
 8015a7a:	6878      	ldr	r0, [r7, #4]
 8015a7c:	f7fe f926 	bl	8013ccc <dir_sdi>
 8015a80:	4603      	mov	r3, r0
 8015a82:	73fb      	strb	r3, [r7, #15]
 8015a84:	e01c      	b.n	8015ac0 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8015a86:	2100      	movs	r1, #0
 8015a88:	6878      	ldr	r0, [r7, #4]
 8015a8a:	f7fe fae5 	bl	8014058 <dir_read>
 8015a8e:	4603      	mov	r3, r0
 8015a90:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8015a92:	7bfb      	ldrb	r3, [r7, #15]
 8015a94:	2b04      	cmp	r3, #4
 8015a96:	d101      	bne.n	8015a9c <f_readdir+0x4c>
 8015a98:	2300      	movs	r3, #0
 8015a9a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8015a9c:	7bfb      	ldrb	r3, [r7, #15]
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d10e      	bne.n	8015ac0 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8015aa2:	6839      	ldr	r1, [r7, #0]
 8015aa4:	6878      	ldr	r0, [r7, #4]
 8015aa6:	f7fe fbbb 	bl	8014220 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8015aaa:	2100      	movs	r1, #0
 8015aac:	6878      	ldr	r0, [r7, #4]
 8015aae:	f7fe f988 	bl	8013dc2 <dir_next>
 8015ab2:	4603      	mov	r3, r0
 8015ab4:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8015ab6:	7bfb      	ldrb	r3, [r7, #15]
 8015ab8:	2b04      	cmp	r3, #4
 8015aba:	d101      	bne.n	8015ac0 <f_readdir+0x70>
 8015abc:	2300      	movs	r3, #0
 8015abe:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8015ac0:	68bb      	ldr	r3, [r7, #8]
 8015ac2:	7bfa      	ldrb	r2, [r7, #15]
 8015ac4:	4611      	mov	r1, r2
 8015ac6:	4618      	mov	r0, r3
 8015ac8:	f7fd fbb4 	bl	8013234 <unlock_fs>
 8015acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ace:	4618      	mov	r0, r3
 8015ad0:	3710      	adds	r7, #16
 8015ad2:	46bd      	mov	sp, r7
 8015ad4:	bd80      	pop	{r7, pc}
	...

08015ad8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015ad8:	b480      	push	{r7}
 8015ada:	b087      	sub	sp, #28
 8015adc:	af00      	add	r7, sp, #0
 8015ade:	60f8      	str	r0, [r7, #12]
 8015ae0:	60b9      	str	r1, [r7, #8]
 8015ae2:	4613      	mov	r3, r2
 8015ae4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015ae6:	2301      	movs	r3, #1
 8015ae8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8015aea:	2300      	movs	r3, #0
 8015aec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015aee:	4b1f      	ldr	r3, [pc, #124]	; (8015b6c <FATFS_LinkDriverEx+0x94>)
 8015af0:	7a5b      	ldrb	r3, [r3, #9]
 8015af2:	b2db      	uxtb	r3, r3
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d131      	bne.n	8015b5c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015af8:	4b1c      	ldr	r3, [pc, #112]	; (8015b6c <FATFS_LinkDriverEx+0x94>)
 8015afa:	7a5b      	ldrb	r3, [r3, #9]
 8015afc:	b2db      	uxtb	r3, r3
 8015afe:	461a      	mov	r2, r3
 8015b00:	4b1a      	ldr	r3, [pc, #104]	; (8015b6c <FATFS_LinkDriverEx+0x94>)
 8015b02:	2100      	movs	r1, #0
 8015b04:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015b06:	4b19      	ldr	r3, [pc, #100]	; (8015b6c <FATFS_LinkDriverEx+0x94>)
 8015b08:	7a5b      	ldrb	r3, [r3, #9]
 8015b0a:	b2db      	uxtb	r3, r3
 8015b0c:	4a17      	ldr	r2, [pc, #92]	; (8015b6c <FATFS_LinkDriverEx+0x94>)
 8015b0e:	009b      	lsls	r3, r3, #2
 8015b10:	4413      	add	r3, r2
 8015b12:	68fa      	ldr	r2, [r7, #12]
 8015b14:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015b16:	4b15      	ldr	r3, [pc, #84]	; (8015b6c <FATFS_LinkDriverEx+0x94>)
 8015b18:	7a5b      	ldrb	r3, [r3, #9]
 8015b1a:	b2db      	uxtb	r3, r3
 8015b1c:	461a      	mov	r2, r3
 8015b1e:	4b13      	ldr	r3, [pc, #76]	; (8015b6c <FATFS_LinkDriverEx+0x94>)
 8015b20:	4413      	add	r3, r2
 8015b22:	79fa      	ldrb	r2, [r7, #7]
 8015b24:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8015b26:	4b11      	ldr	r3, [pc, #68]	; (8015b6c <FATFS_LinkDriverEx+0x94>)
 8015b28:	7a5b      	ldrb	r3, [r3, #9]
 8015b2a:	b2db      	uxtb	r3, r3
 8015b2c:	1c5a      	adds	r2, r3, #1
 8015b2e:	b2d1      	uxtb	r1, r2
 8015b30:	4a0e      	ldr	r2, [pc, #56]	; (8015b6c <FATFS_LinkDriverEx+0x94>)
 8015b32:	7251      	strb	r1, [r2, #9]
 8015b34:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015b36:	7dbb      	ldrb	r3, [r7, #22]
 8015b38:	3330      	adds	r3, #48	; 0x30
 8015b3a:	b2da      	uxtb	r2, r3
 8015b3c:	68bb      	ldr	r3, [r7, #8]
 8015b3e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015b40:	68bb      	ldr	r3, [r7, #8]
 8015b42:	3301      	adds	r3, #1
 8015b44:	223a      	movs	r2, #58	; 0x3a
 8015b46:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015b48:	68bb      	ldr	r3, [r7, #8]
 8015b4a:	3302      	adds	r3, #2
 8015b4c:	222f      	movs	r2, #47	; 0x2f
 8015b4e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015b50:	68bb      	ldr	r3, [r7, #8]
 8015b52:	3303      	adds	r3, #3
 8015b54:	2200      	movs	r2, #0
 8015b56:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015b58:	2300      	movs	r3, #0
 8015b5a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8015b5e:	4618      	mov	r0, r3
 8015b60:	371c      	adds	r7, #28
 8015b62:	46bd      	mov	sp, r7
 8015b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b68:	4770      	bx	lr
 8015b6a:	bf00      	nop
 8015b6c:	2000085c 	.word	0x2000085c

08015b70 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015b70:	b580      	push	{r7, lr}
 8015b72:	b082      	sub	sp, #8
 8015b74:	af00      	add	r7, sp, #0
 8015b76:	6078      	str	r0, [r7, #4]
 8015b78:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015b7a:	2200      	movs	r2, #0
 8015b7c:	6839      	ldr	r1, [r7, #0]
 8015b7e:	6878      	ldr	r0, [r7, #4]
 8015b80:	f7ff ffaa 	bl	8015ad8 <FATFS_LinkDriverEx>
 8015b84:	4603      	mov	r3, r0
}
 8015b86:	4618      	mov	r0, r3
 8015b88:	3708      	adds	r7, #8
 8015b8a:	46bd      	mov	sp, r7
 8015b8c:	bd80      	pop	{r7, pc}

08015b8e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8015b8e:	b580      	push	{r7, lr}
 8015b90:	b084      	sub	sp, #16
 8015b92:	af00      	add	r7, sp, #0
 8015b94:	4603      	mov	r3, r0
 8015b96:	6039      	str	r1, [r7, #0]
 8015b98:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8015b9a:	2200      	movs	r2, #0
 8015b9c:	2101      	movs	r1, #1
 8015b9e:	2001      	movs	r0, #1
 8015ba0:	f000 f9e6 	bl	8015f70 <osSemaphoreNew>
 8015ba4:	4602      	mov	r2, r0
 8015ba6:	683b      	ldr	r3, [r7, #0]
 8015ba8:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8015baa:	683b      	ldr	r3, [r7, #0]
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	bf14      	ite	ne
 8015bb2:	2301      	movne	r3, #1
 8015bb4:	2300      	moveq	r3, #0
 8015bb6:	b2db      	uxtb	r3, r3
 8015bb8:	60fb      	str	r3, [r7, #12]

    return ret;
 8015bba:	68fb      	ldr	r3, [r7, #12]
}
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	3710      	adds	r7, #16
 8015bc0:	46bd      	mov	sp, r7
 8015bc2:	bd80      	pop	{r7, pc}

08015bc4 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8015bc4:	b580      	push	{r7, lr}
 8015bc6:	b082      	sub	sp, #8
 8015bc8:	af00      	add	r7, sp, #0
 8015bca:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8015bcc:	6878      	ldr	r0, [r7, #4]
 8015bce:	f000 faef 	bl	80161b0 <osSemaphoreDelete>
#endif
    return 1;
 8015bd2:	2301      	movs	r3, #1
}
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	3708      	adds	r7, #8
 8015bd8:	46bd      	mov	sp, r7
 8015bda:	bd80      	pop	{r7, pc}

08015bdc <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8015bdc:	b580      	push	{r7, lr}
 8015bde:	b084      	sub	sp, #16
 8015be0:	af00      	add	r7, sp, #0
 8015be2:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8015be4:	2300      	movs	r3, #0
 8015be6:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8015be8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8015bec:	6878      	ldr	r0, [r7, #4]
 8015bee:	f000 fa49 	bl	8016084 <osSemaphoreAcquire>
 8015bf2:	4603      	mov	r3, r0
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d101      	bne.n	8015bfc <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8015bf8:	2301      	movs	r3, #1
 8015bfa:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8015bfc:	68fb      	ldr	r3, [r7, #12]
}
 8015bfe:	4618      	mov	r0, r3
 8015c00:	3710      	adds	r7, #16
 8015c02:	46bd      	mov	sp, r7
 8015c04:	bd80      	pop	{r7, pc}

08015c06 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8015c06:	b580      	push	{r7, lr}
 8015c08:	b082      	sub	sp, #8
 8015c0a:	af00      	add	r7, sp, #0
 8015c0c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8015c0e:	6878      	ldr	r0, [r7, #4]
 8015c10:	f000 fa8a 	bl	8016128 <osSemaphoreRelease>
#endif
}
 8015c14:	bf00      	nop
 8015c16:	3708      	adds	r7, #8
 8015c18:	46bd      	mov	sp, r7
 8015c1a:	bd80      	pop	{r7, pc}

08015c1c <__NVIC_SetPriority>:
{
 8015c1c:	b480      	push	{r7}
 8015c1e:	b083      	sub	sp, #12
 8015c20:	af00      	add	r7, sp, #0
 8015c22:	4603      	mov	r3, r0
 8015c24:	6039      	str	r1, [r7, #0]
 8015c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	db0a      	blt.n	8015c46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015c30:	683b      	ldr	r3, [r7, #0]
 8015c32:	b2da      	uxtb	r2, r3
 8015c34:	490c      	ldr	r1, [pc, #48]	; (8015c68 <__NVIC_SetPriority+0x4c>)
 8015c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015c3a:	0112      	lsls	r2, r2, #4
 8015c3c:	b2d2      	uxtb	r2, r2
 8015c3e:	440b      	add	r3, r1
 8015c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015c44:	e00a      	b.n	8015c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015c46:	683b      	ldr	r3, [r7, #0]
 8015c48:	b2da      	uxtb	r2, r3
 8015c4a:	4908      	ldr	r1, [pc, #32]	; (8015c6c <__NVIC_SetPriority+0x50>)
 8015c4c:	79fb      	ldrb	r3, [r7, #7]
 8015c4e:	f003 030f 	and.w	r3, r3, #15
 8015c52:	3b04      	subs	r3, #4
 8015c54:	0112      	lsls	r2, r2, #4
 8015c56:	b2d2      	uxtb	r2, r2
 8015c58:	440b      	add	r3, r1
 8015c5a:	761a      	strb	r2, [r3, #24]
}
 8015c5c:	bf00      	nop
 8015c5e:	370c      	adds	r7, #12
 8015c60:	46bd      	mov	sp, r7
 8015c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c66:	4770      	bx	lr
 8015c68:	e000e100 	.word	0xe000e100
 8015c6c:	e000ed00 	.word	0xe000ed00

08015c70 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8015c70:	b580      	push	{r7, lr}
 8015c72:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8015c74:	4b05      	ldr	r3, [pc, #20]	; (8015c8c <SysTick_Handler+0x1c>)
 8015c76:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8015c78:	f002 fb74 	bl	8018364 <xTaskGetSchedulerState>
 8015c7c:	4603      	mov	r3, r0
 8015c7e:	2b01      	cmp	r3, #1
 8015c80:	d001      	beq.n	8015c86 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8015c82:	f003 fa59 	bl	8019138 <xPortSysTickHandler>
  }
}
 8015c86:	bf00      	nop
 8015c88:	bd80      	pop	{r7, pc}
 8015c8a:	bf00      	nop
 8015c8c:	e000e010 	.word	0xe000e010

08015c90 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8015c90:	b580      	push	{r7, lr}
 8015c92:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8015c94:	2100      	movs	r1, #0
 8015c96:	f06f 0004 	mvn.w	r0, #4
 8015c9a:	f7ff ffbf 	bl	8015c1c <__NVIC_SetPriority>
#endif
}
 8015c9e:	bf00      	nop
 8015ca0:	bd80      	pop	{r7, pc}
	...

08015ca4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8015ca4:	b480      	push	{r7}
 8015ca6:	b083      	sub	sp, #12
 8015ca8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015caa:	f3ef 8305 	mrs	r3, IPSR
 8015cae:	603b      	str	r3, [r7, #0]
  return(result);
 8015cb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d003      	beq.n	8015cbe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8015cb6:	f06f 0305 	mvn.w	r3, #5
 8015cba:	607b      	str	r3, [r7, #4]
 8015cbc:	e00c      	b.n	8015cd8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8015cbe:	4b0a      	ldr	r3, [pc, #40]	; (8015ce8 <osKernelInitialize+0x44>)
 8015cc0:	681b      	ldr	r3, [r3, #0]
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d105      	bne.n	8015cd2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8015cc6:	4b08      	ldr	r3, [pc, #32]	; (8015ce8 <osKernelInitialize+0x44>)
 8015cc8:	2201      	movs	r2, #1
 8015cca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8015ccc:	2300      	movs	r3, #0
 8015cce:	607b      	str	r3, [r7, #4]
 8015cd0:	e002      	b.n	8015cd8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8015cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8015cd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015cd8:	687b      	ldr	r3, [r7, #4]
}
 8015cda:	4618      	mov	r0, r3
 8015cdc:	370c      	adds	r7, #12
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ce4:	4770      	bx	lr
 8015ce6:	bf00      	nop
 8015ce8:	20000868 	.word	0x20000868

08015cec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8015cec:	b580      	push	{r7, lr}
 8015cee:	b082      	sub	sp, #8
 8015cf0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015cf2:	f3ef 8305 	mrs	r3, IPSR
 8015cf6:	603b      	str	r3, [r7, #0]
  return(result);
 8015cf8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d003      	beq.n	8015d06 <osKernelStart+0x1a>
    stat = osErrorISR;
 8015cfe:	f06f 0305 	mvn.w	r3, #5
 8015d02:	607b      	str	r3, [r7, #4]
 8015d04:	e010      	b.n	8015d28 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8015d06:	4b0b      	ldr	r3, [pc, #44]	; (8015d34 <osKernelStart+0x48>)
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	2b01      	cmp	r3, #1
 8015d0c:	d109      	bne.n	8015d22 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8015d0e:	f7ff ffbf 	bl	8015c90 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8015d12:	4b08      	ldr	r3, [pc, #32]	; (8015d34 <osKernelStart+0x48>)
 8015d14:	2202      	movs	r2, #2
 8015d16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8015d18:	f001 feb8 	bl	8017a8c <vTaskStartScheduler>
      stat = osOK;
 8015d1c:	2300      	movs	r3, #0
 8015d1e:	607b      	str	r3, [r7, #4]
 8015d20:	e002      	b.n	8015d28 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8015d22:	f04f 33ff 	mov.w	r3, #4294967295
 8015d26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015d28:	687b      	ldr	r3, [r7, #4]
}
 8015d2a:	4618      	mov	r0, r3
 8015d2c:	3708      	adds	r7, #8
 8015d2e:	46bd      	mov	sp, r7
 8015d30:	bd80      	pop	{r7, pc}
 8015d32:	bf00      	nop
 8015d34:	20000868 	.word	0x20000868

08015d38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8015d38:	b580      	push	{r7, lr}
 8015d3a:	b08e      	sub	sp, #56	; 0x38
 8015d3c:	af04      	add	r7, sp, #16
 8015d3e:	60f8      	str	r0, [r7, #12]
 8015d40:	60b9      	str	r1, [r7, #8]
 8015d42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8015d44:	2300      	movs	r3, #0
 8015d46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015d48:	f3ef 8305 	mrs	r3, IPSR
 8015d4c:	617b      	str	r3, [r7, #20]
  return(result);
 8015d4e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d17e      	bne.n	8015e52 <osThreadNew+0x11a>
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d07b      	beq.n	8015e52 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8015d5a:	2380      	movs	r3, #128	; 0x80
 8015d5c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8015d5e:	2318      	movs	r3, #24
 8015d60:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8015d62:	2300      	movs	r3, #0
 8015d64:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8015d66:	f04f 33ff 	mov.w	r3, #4294967295
 8015d6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d045      	beq.n	8015dfe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d002      	beq.n	8015d80 <osThreadNew+0x48>
        name = attr->name;
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	681b      	ldr	r3, [r3, #0]
 8015d7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	699b      	ldr	r3, [r3, #24]
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d002      	beq.n	8015d8e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	699b      	ldr	r3, [r3, #24]
 8015d8c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8015d8e:	69fb      	ldr	r3, [r7, #28]
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d008      	beq.n	8015da6 <osThreadNew+0x6e>
 8015d94:	69fb      	ldr	r3, [r7, #28]
 8015d96:	2b38      	cmp	r3, #56	; 0x38
 8015d98:	d805      	bhi.n	8015da6 <osThreadNew+0x6e>
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	685b      	ldr	r3, [r3, #4]
 8015d9e:	f003 0301 	and.w	r3, r3, #1
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d001      	beq.n	8015daa <osThreadNew+0x72>
        return (NULL);
 8015da6:	2300      	movs	r3, #0
 8015da8:	e054      	b.n	8015e54 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	695b      	ldr	r3, [r3, #20]
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d003      	beq.n	8015dba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	695b      	ldr	r3, [r3, #20]
 8015db6:	089b      	lsrs	r3, r3, #2
 8015db8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	689b      	ldr	r3, [r3, #8]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d00e      	beq.n	8015de0 <osThreadNew+0xa8>
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	68db      	ldr	r3, [r3, #12]
 8015dc6:	2bbb      	cmp	r3, #187	; 0xbb
 8015dc8:	d90a      	bls.n	8015de0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d006      	beq.n	8015de0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	695b      	ldr	r3, [r3, #20]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d002      	beq.n	8015de0 <osThreadNew+0xa8>
        mem = 1;
 8015dda:	2301      	movs	r3, #1
 8015ddc:	61bb      	str	r3, [r7, #24]
 8015dde:	e010      	b.n	8015e02 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	689b      	ldr	r3, [r3, #8]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d10c      	bne.n	8015e02 <osThreadNew+0xca>
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	68db      	ldr	r3, [r3, #12]
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d108      	bne.n	8015e02 <osThreadNew+0xca>
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	691b      	ldr	r3, [r3, #16]
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d104      	bne.n	8015e02 <osThreadNew+0xca>
          mem = 0;
 8015df8:	2300      	movs	r3, #0
 8015dfa:	61bb      	str	r3, [r7, #24]
 8015dfc:	e001      	b.n	8015e02 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8015dfe:	2300      	movs	r3, #0
 8015e00:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8015e02:	69bb      	ldr	r3, [r7, #24]
 8015e04:	2b01      	cmp	r3, #1
 8015e06:	d110      	bne.n	8015e2a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8015e0c:	687a      	ldr	r2, [r7, #4]
 8015e0e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015e10:	9202      	str	r2, [sp, #8]
 8015e12:	9301      	str	r3, [sp, #4]
 8015e14:	69fb      	ldr	r3, [r7, #28]
 8015e16:	9300      	str	r3, [sp, #0]
 8015e18:	68bb      	ldr	r3, [r7, #8]
 8015e1a:	6a3a      	ldr	r2, [r7, #32]
 8015e1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015e1e:	68f8      	ldr	r0, [r7, #12]
 8015e20:	f001 fae0 	bl	80173e4 <xTaskCreateStatic>
 8015e24:	4603      	mov	r3, r0
 8015e26:	613b      	str	r3, [r7, #16]
 8015e28:	e013      	b.n	8015e52 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8015e2a:	69bb      	ldr	r3, [r7, #24]
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d110      	bne.n	8015e52 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8015e30:	6a3b      	ldr	r3, [r7, #32]
 8015e32:	b29a      	uxth	r2, r3
 8015e34:	f107 0310 	add.w	r3, r7, #16
 8015e38:	9301      	str	r3, [sp, #4]
 8015e3a:	69fb      	ldr	r3, [r7, #28]
 8015e3c:	9300      	str	r3, [sp, #0]
 8015e3e:	68bb      	ldr	r3, [r7, #8]
 8015e40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015e42:	68f8      	ldr	r0, [r7, #12]
 8015e44:	f001 fb2b 	bl	801749e <xTaskCreate>
 8015e48:	4603      	mov	r3, r0
 8015e4a:	2b01      	cmp	r3, #1
 8015e4c:	d001      	beq.n	8015e52 <osThreadNew+0x11a>
            hTask = NULL;
 8015e4e:	2300      	movs	r3, #0
 8015e50:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8015e52:	693b      	ldr	r3, [r7, #16]
}
 8015e54:	4618      	mov	r0, r3
 8015e56:	3728      	adds	r7, #40	; 0x28
 8015e58:	46bd      	mov	sp, r7
 8015e5a:	bd80      	pop	{r7, pc}

08015e5c <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8015e5c:	b580      	push	{r7, lr}
 8015e5e:	b082      	sub	sp, #8
 8015e60:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8015e62:	f002 fa6f 	bl	8018344 <xTaskGetCurrentTaskHandle>
 8015e66:	6078      	str	r0, [r7, #4]

  return (id);
 8015e68:	687b      	ldr	r3, [r7, #4]
}
 8015e6a:	4618      	mov	r0, r3
 8015e6c:	3708      	adds	r7, #8
 8015e6e:	46bd      	mov	sp, r7
 8015e70:	bd80      	pop	{r7, pc}
	...

08015e74 <osThreadGetState>:

osThreadState_t osThreadGetState (osThreadId_t thread_id) {
 8015e74:	b580      	push	{r7, lr}
 8015e76:	b086      	sub	sp, #24
 8015e78:	af00      	add	r7, sp, #0
 8015e7a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015e80:	f3ef 8305 	mrs	r3, IPSR
 8015e84:	60fb      	str	r3, [r7, #12]
  return(result);
 8015e86:	68fb      	ldr	r3, [r7, #12]
  osThreadState_t state;

  if (IS_IRQ() || (hTask == NULL)) {
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d102      	bne.n	8015e92 <osThreadGetState+0x1e>
 8015e8c:	693b      	ldr	r3, [r7, #16]
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d103      	bne.n	8015e9a <osThreadGetState+0x26>
    state = osThreadError;
 8015e92:	f04f 33ff 	mov.w	r3, #4294967295
 8015e96:	617b      	str	r3, [r7, #20]
 8015e98:	e022      	b.n	8015ee0 <osThreadGetState+0x6c>
  }
  else {
    switch (eTaskGetState (hTask)) {
 8015e9a:	6938      	ldr	r0, [r7, #16]
 8015e9c:	f001 fd00 	bl	80178a0 <eTaskGetState>
 8015ea0:	4603      	mov	r3, r0
 8015ea2:	2b04      	cmp	r3, #4
 8015ea4:	d818      	bhi.n	8015ed8 <osThreadGetState+0x64>
 8015ea6:	a201      	add	r2, pc, #4	; (adr r2, 8015eac <osThreadGetState+0x38>)
 8015ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015eac:	08015ec1 	.word	0x08015ec1
 8015eb0:	08015ec7 	.word	0x08015ec7
 8015eb4:	08015ecd 	.word	0x08015ecd
 8015eb8:	08015ecd 	.word	0x08015ecd
 8015ebc:	08015ed3 	.word	0x08015ed3
      case eRunning:   state = osThreadRunning;    break;
 8015ec0:	2302      	movs	r3, #2
 8015ec2:	617b      	str	r3, [r7, #20]
 8015ec4:	e00c      	b.n	8015ee0 <osThreadGetState+0x6c>
      case eReady:     state = osThreadReady;      break;
 8015ec6:	2301      	movs	r3, #1
 8015ec8:	617b      	str	r3, [r7, #20]
 8015eca:	e009      	b.n	8015ee0 <osThreadGetState+0x6c>
      case eBlocked:
      case eSuspended: state = osThreadBlocked;    break;
 8015ecc:	2303      	movs	r3, #3
 8015ece:	617b      	str	r3, [r7, #20]
 8015ed0:	e006      	b.n	8015ee0 <osThreadGetState+0x6c>
      case eDeleted:   state = osThreadTerminated; break;
 8015ed2:	2304      	movs	r3, #4
 8015ed4:	617b      	str	r3, [r7, #20]
 8015ed6:	e003      	b.n	8015ee0 <osThreadGetState+0x6c>
      case eInvalid:
      default:         state = osThreadError;      break;
 8015ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8015edc:	617b      	str	r3, [r7, #20]
 8015ede:	bf00      	nop
    }
  }

  return (state);
 8015ee0:	697b      	ldr	r3, [r7, #20]
}
 8015ee2:	4618      	mov	r0, r3
 8015ee4:	3718      	adds	r7, #24
 8015ee6:	46bd      	mov	sp, r7
 8015ee8:	bd80      	pop	{r7, pc}
 8015eea:	bf00      	nop

08015eec <osThreadResume>:
  }

  return (stat);
}

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8015eec:	b580      	push	{r7, lr}
 8015eee:	b086      	sub	sp, #24
 8015ef0:	af00      	add	r7, sp, #0
 8015ef2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015ef8:	f3ef 8305 	mrs	r3, IPSR
 8015efc:	60fb      	str	r3, [r7, #12]
  return(result);
 8015efe:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d003      	beq.n	8015f0c <osThreadResume+0x20>
    stat = osErrorISR;
 8015f04:	f06f 0305 	mvn.w	r3, #5
 8015f08:	617b      	str	r3, [r7, #20]
 8015f0a:	e00b      	b.n	8015f24 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8015f0c:	693b      	ldr	r3, [r7, #16]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d103      	bne.n	8015f1a <osThreadResume+0x2e>
    stat = osErrorParameter;
 8015f12:	f06f 0303 	mvn.w	r3, #3
 8015f16:	617b      	str	r3, [r7, #20]
 8015f18:	e004      	b.n	8015f24 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8015f1e:	6938      	ldr	r0, [r7, #16]
 8015f20:	f001 fd56 	bl	80179d0 <vTaskResume>
  }

  return (stat);
 8015f24:	697b      	ldr	r3, [r7, #20]
}
 8015f26:	4618      	mov	r0, r3
 8015f28:	3718      	adds	r7, #24
 8015f2a:	46bd      	mov	sp, r7
 8015f2c:	bd80      	pop	{r7, pc}

08015f2e <osThreadExit>:
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 8015f2e:	b580      	push	{r7, lr}
 8015f30:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8015f32:	2000      	movs	r0, #0
 8015f34:	f001 fc0e 	bl	8017754 <vTaskDelete>
#endif
  for (;;);
 8015f38:	e7fe      	b.n	8015f38 <osThreadExit+0xa>

08015f3a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8015f3a:	b580      	push	{r7, lr}
 8015f3c:	b084      	sub	sp, #16
 8015f3e:	af00      	add	r7, sp, #0
 8015f40:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015f42:	f3ef 8305 	mrs	r3, IPSR
 8015f46:	60bb      	str	r3, [r7, #8]
  return(result);
 8015f48:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d003      	beq.n	8015f56 <osDelay+0x1c>
    stat = osErrorISR;
 8015f4e:	f06f 0305 	mvn.w	r3, #5
 8015f52:	60fb      	str	r3, [r7, #12]
 8015f54:	e007      	b.n	8015f66 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8015f56:	2300      	movs	r3, #0
 8015f58:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d002      	beq.n	8015f66 <osDelay+0x2c>
      vTaskDelay(ticks);
 8015f60:	6878      	ldr	r0, [r7, #4]
 8015f62:	f001 fc69 	bl	8017838 <vTaskDelay>
    }
  }

  return (stat);
 8015f66:	68fb      	ldr	r3, [r7, #12]
}
 8015f68:	4618      	mov	r0, r3
 8015f6a:	3710      	adds	r7, #16
 8015f6c:	46bd      	mov	sp, r7
 8015f6e:	bd80      	pop	{r7, pc}

08015f70 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8015f70:	b580      	push	{r7, lr}
 8015f72:	b08a      	sub	sp, #40	; 0x28
 8015f74:	af02      	add	r7, sp, #8
 8015f76:	60f8      	str	r0, [r7, #12]
 8015f78:	60b9      	str	r1, [r7, #8]
 8015f7a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8015f7c:	2300      	movs	r3, #0
 8015f7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015f80:	f3ef 8305 	mrs	r3, IPSR
 8015f84:	613b      	str	r3, [r7, #16]
  return(result);
 8015f86:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d175      	bne.n	8016078 <osSemaphoreNew+0x108>
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d072      	beq.n	8016078 <osSemaphoreNew+0x108>
 8015f92:	68ba      	ldr	r2, [r7, #8]
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	429a      	cmp	r2, r3
 8015f98:	d86e      	bhi.n	8016078 <osSemaphoreNew+0x108>
    mem = -1;
 8015f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8015f9e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d015      	beq.n	8015fd2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	689b      	ldr	r3, [r3, #8]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d006      	beq.n	8015fbc <osSemaphoreNew+0x4c>
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	68db      	ldr	r3, [r3, #12]
 8015fb2:	2b4f      	cmp	r3, #79	; 0x4f
 8015fb4:	d902      	bls.n	8015fbc <osSemaphoreNew+0x4c>
        mem = 1;
 8015fb6:	2301      	movs	r3, #1
 8015fb8:	61bb      	str	r3, [r7, #24]
 8015fba:	e00c      	b.n	8015fd6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	689b      	ldr	r3, [r3, #8]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d108      	bne.n	8015fd6 <osSemaphoreNew+0x66>
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	68db      	ldr	r3, [r3, #12]
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d104      	bne.n	8015fd6 <osSemaphoreNew+0x66>
          mem = 0;
 8015fcc:	2300      	movs	r3, #0
 8015fce:	61bb      	str	r3, [r7, #24]
 8015fd0:	e001      	b.n	8015fd6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8015fd2:	2300      	movs	r3, #0
 8015fd4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8015fd6:	69bb      	ldr	r3, [r7, #24]
 8015fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015fdc:	d04c      	beq.n	8016078 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	2b01      	cmp	r3, #1
 8015fe2:	d128      	bne.n	8016036 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8015fe4:	69bb      	ldr	r3, [r7, #24]
 8015fe6:	2b01      	cmp	r3, #1
 8015fe8:	d10a      	bne.n	8016000 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	689b      	ldr	r3, [r3, #8]
 8015fee:	2203      	movs	r2, #3
 8015ff0:	9200      	str	r2, [sp, #0]
 8015ff2:	2200      	movs	r2, #0
 8015ff4:	2100      	movs	r1, #0
 8015ff6:	2001      	movs	r0, #1
 8015ff8:	f000 fa4e 	bl	8016498 <xQueueGenericCreateStatic>
 8015ffc:	61f8      	str	r0, [r7, #28]
 8015ffe:	e005      	b.n	801600c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8016000:	2203      	movs	r2, #3
 8016002:	2100      	movs	r1, #0
 8016004:	2001      	movs	r0, #1
 8016006:	f000 fabf 	bl	8016588 <xQueueGenericCreate>
 801600a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 801600c:	69fb      	ldr	r3, [r7, #28]
 801600e:	2b00      	cmp	r3, #0
 8016010:	d022      	beq.n	8016058 <osSemaphoreNew+0xe8>
 8016012:	68bb      	ldr	r3, [r7, #8]
 8016014:	2b00      	cmp	r3, #0
 8016016:	d01f      	beq.n	8016058 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8016018:	2300      	movs	r3, #0
 801601a:	2200      	movs	r2, #0
 801601c:	2100      	movs	r1, #0
 801601e:	69f8      	ldr	r0, [r7, #28]
 8016020:	f000 fb7a 	bl	8016718 <xQueueGenericSend>
 8016024:	4603      	mov	r3, r0
 8016026:	2b01      	cmp	r3, #1
 8016028:	d016      	beq.n	8016058 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 801602a:	69f8      	ldr	r0, [r7, #28]
 801602c:	f001 f806 	bl	801703c <vQueueDelete>
            hSemaphore = NULL;
 8016030:	2300      	movs	r3, #0
 8016032:	61fb      	str	r3, [r7, #28]
 8016034:	e010      	b.n	8016058 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8016036:	69bb      	ldr	r3, [r7, #24]
 8016038:	2b01      	cmp	r3, #1
 801603a:	d108      	bne.n	801604e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	689b      	ldr	r3, [r3, #8]
 8016040:	461a      	mov	r2, r3
 8016042:	68b9      	ldr	r1, [r7, #8]
 8016044:	68f8      	ldr	r0, [r7, #12]
 8016046:	f000 fafc 	bl	8016642 <xQueueCreateCountingSemaphoreStatic>
 801604a:	61f8      	str	r0, [r7, #28]
 801604c:	e004      	b.n	8016058 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801604e:	68b9      	ldr	r1, [r7, #8]
 8016050:	68f8      	ldr	r0, [r7, #12]
 8016052:	f000 fb2d 	bl	80166b0 <xQueueCreateCountingSemaphore>
 8016056:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8016058:	69fb      	ldr	r3, [r7, #28]
 801605a:	2b00      	cmp	r3, #0
 801605c:	d00c      	beq.n	8016078 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	2b00      	cmp	r3, #0
 8016062:	d003      	beq.n	801606c <osSemaphoreNew+0xfc>
          name = attr->name;
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	617b      	str	r3, [r7, #20]
 801606a:	e001      	b.n	8016070 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 801606c:	2300      	movs	r3, #0
 801606e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8016070:	6979      	ldr	r1, [r7, #20]
 8016072:	69f8      	ldr	r0, [r7, #28]
 8016074:	f001 f92e 	bl	80172d4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8016078:	69fb      	ldr	r3, [r7, #28]
}
 801607a:	4618      	mov	r0, r3
 801607c:	3720      	adds	r7, #32
 801607e:	46bd      	mov	sp, r7
 8016080:	bd80      	pop	{r7, pc}
	...

08016084 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8016084:	b580      	push	{r7, lr}
 8016086:	b086      	sub	sp, #24
 8016088:	af00      	add	r7, sp, #0
 801608a:	6078      	str	r0, [r7, #4]
 801608c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8016092:	2300      	movs	r3, #0
 8016094:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8016096:	693b      	ldr	r3, [r7, #16]
 8016098:	2b00      	cmp	r3, #0
 801609a:	d103      	bne.n	80160a4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 801609c:	f06f 0303 	mvn.w	r3, #3
 80160a0:	617b      	str	r3, [r7, #20]
 80160a2:	e039      	b.n	8016118 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80160a4:	f3ef 8305 	mrs	r3, IPSR
 80160a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80160aa:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d022      	beq.n	80160f6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80160b0:	683b      	ldr	r3, [r7, #0]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d003      	beq.n	80160be <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80160b6:	f06f 0303 	mvn.w	r3, #3
 80160ba:	617b      	str	r3, [r7, #20]
 80160bc:	e02c      	b.n	8016118 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80160be:	2300      	movs	r3, #0
 80160c0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80160c2:	f107 0308 	add.w	r3, r7, #8
 80160c6:	461a      	mov	r2, r3
 80160c8:	2100      	movs	r1, #0
 80160ca:	6938      	ldr	r0, [r7, #16]
 80160cc:	f000 ff36 	bl	8016f3c <xQueueReceiveFromISR>
 80160d0:	4603      	mov	r3, r0
 80160d2:	2b01      	cmp	r3, #1
 80160d4:	d003      	beq.n	80160de <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80160d6:	f06f 0302 	mvn.w	r3, #2
 80160da:	617b      	str	r3, [r7, #20]
 80160dc:	e01c      	b.n	8016118 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80160de:	68bb      	ldr	r3, [r7, #8]
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d019      	beq.n	8016118 <osSemaphoreAcquire+0x94>
 80160e4:	4b0f      	ldr	r3, [pc, #60]	; (8016124 <osSemaphoreAcquire+0xa0>)
 80160e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80160ea:	601a      	str	r2, [r3, #0]
 80160ec:	f3bf 8f4f 	dsb	sy
 80160f0:	f3bf 8f6f 	isb	sy
 80160f4:	e010      	b.n	8016118 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80160f6:	6839      	ldr	r1, [r7, #0]
 80160f8:	6938      	ldr	r0, [r7, #16]
 80160fa:	f000 fe13 	bl	8016d24 <xQueueSemaphoreTake>
 80160fe:	4603      	mov	r3, r0
 8016100:	2b01      	cmp	r3, #1
 8016102:	d009      	beq.n	8016118 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8016104:	683b      	ldr	r3, [r7, #0]
 8016106:	2b00      	cmp	r3, #0
 8016108:	d003      	beq.n	8016112 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 801610a:	f06f 0301 	mvn.w	r3, #1
 801610e:	617b      	str	r3, [r7, #20]
 8016110:	e002      	b.n	8016118 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8016112:	f06f 0302 	mvn.w	r3, #2
 8016116:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8016118:	697b      	ldr	r3, [r7, #20]
}
 801611a:	4618      	mov	r0, r3
 801611c:	3718      	adds	r7, #24
 801611e:	46bd      	mov	sp, r7
 8016120:	bd80      	pop	{r7, pc}
 8016122:	bf00      	nop
 8016124:	e000ed04 	.word	0xe000ed04

08016128 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8016128:	b580      	push	{r7, lr}
 801612a:	b086      	sub	sp, #24
 801612c:	af00      	add	r7, sp, #0
 801612e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8016134:	2300      	movs	r3, #0
 8016136:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8016138:	693b      	ldr	r3, [r7, #16]
 801613a:	2b00      	cmp	r3, #0
 801613c:	d103      	bne.n	8016146 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801613e:	f06f 0303 	mvn.w	r3, #3
 8016142:	617b      	str	r3, [r7, #20]
 8016144:	e02c      	b.n	80161a0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016146:	f3ef 8305 	mrs	r3, IPSR
 801614a:	60fb      	str	r3, [r7, #12]
  return(result);
 801614c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801614e:	2b00      	cmp	r3, #0
 8016150:	d01a      	beq.n	8016188 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8016152:	2300      	movs	r3, #0
 8016154:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8016156:	f107 0308 	add.w	r3, r7, #8
 801615a:	4619      	mov	r1, r3
 801615c:	6938      	ldr	r0, [r7, #16]
 801615e:	f000 fc74 	bl	8016a4a <xQueueGiveFromISR>
 8016162:	4603      	mov	r3, r0
 8016164:	2b01      	cmp	r3, #1
 8016166:	d003      	beq.n	8016170 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8016168:	f06f 0302 	mvn.w	r3, #2
 801616c:	617b      	str	r3, [r7, #20]
 801616e:	e017      	b.n	80161a0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8016170:	68bb      	ldr	r3, [r7, #8]
 8016172:	2b00      	cmp	r3, #0
 8016174:	d014      	beq.n	80161a0 <osSemaphoreRelease+0x78>
 8016176:	4b0d      	ldr	r3, [pc, #52]	; (80161ac <osSemaphoreRelease+0x84>)
 8016178:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801617c:	601a      	str	r2, [r3, #0]
 801617e:	f3bf 8f4f 	dsb	sy
 8016182:	f3bf 8f6f 	isb	sy
 8016186:	e00b      	b.n	80161a0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8016188:	2300      	movs	r3, #0
 801618a:	2200      	movs	r2, #0
 801618c:	2100      	movs	r1, #0
 801618e:	6938      	ldr	r0, [r7, #16]
 8016190:	f000 fac2 	bl	8016718 <xQueueGenericSend>
 8016194:	4603      	mov	r3, r0
 8016196:	2b01      	cmp	r3, #1
 8016198:	d002      	beq.n	80161a0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 801619a:	f06f 0302 	mvn.w	r3, #2
 801619e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80161a0:	697b      	ldr	r3, [r7, #20]
}
 80161a2:	4618      	mov	r0, r3
 80161a4:	3718      	adds	r7, #24
 80161a6:	46bd      	mov	sp, r7
 80161a8:	bd80      	pop	{r7, pc}
 80161aa:	bf00      	nop
 80161ac:	e000ed04 	.word	0xe000ed04

080161b0 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80161b0:	b580      	push	{r7, lr}
 80161b2:	b086      	sub	sp, #24
 80161b4:	af00      	add	r7, sp, #0
 80161b6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80161bc:	f3ef 8305 	mrs	r3, IPSR
 80161c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80161c2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d003      	beq.n	80161d0 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 80161c8:	f06f 0305 	mvn.w	r3, #5
 80161cc:	617b      	str	r3, [r7, #20]
 80161ce:	e00e      	b.n	80161ee <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 80161d0:	693b      	ldr	r3, [r7, #16]
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d103      	bne.n	80161de <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 80161d6:	f06f 0303 	mvn.w	r3, #3
 80161da:	617b      	str	r3, [r7, #20]
 80161dc:	e007      	b.n	80161ee <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80161de:	6938      	ldr	r0, [r7, #16]
 80161e0:	f001 f8a2 	bl	8017328 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80161e4:	2300      	movs	r3, #0
 80161e6:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 80161e8:	6938      	ldr	r0, [r7, #16]
 80161ea:	f000 ff27 	bl	801703c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80161ee:	697b      	ldr	r3, [r7, #20]
}
 80161f0:	4618      	mov	r0, r3
 80161f2:	3718      	adds	r7, #24
 80161f4:	46bd      	mov	sp, r7
 80161f6:	bd80      	pop	{r7, pc}

080161f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80161f8:	b480      	push	{r7}
 80161fa:	b085      	sub	sp, #20
 80161fc:	af00      	add	r7, sp, #0
 80161fe:	60f8      	str	r0, [r7, #12]
 8016200:	60b9      	str	r1, [r7, #8]
 8016202:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	4a07      	ldr	r2, [pc, #28]	; (8016224 <vApplicationGetIdleTaskMemory+0x2c>)
 8016208:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801620a:	68bb      	ldr	r3, [r7, #8]
 801620c:	4a06      	ldr	r2, [pc, #24]	; (8016228 <vApplicationGetIdleTaskMemory+0x30>)
 801620e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	2280      	movs	r2, #128	; 0x80
 8016214:	601a      	str	r2, [r3, #0]
}
 8016216:	bf00      	nop
 8016218:	3714      	adds	r7, #20
 801621a:	46bd      	mov	sp, r7
 801621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016220:	4770      	bx	lr
 8016222:	bf00      	nop
 8016224:	2000086c 	.word	0x2000086c
 8016228:	20000928 	.word	0x20000928

0801622c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801622c:	b480      	push	{r7}
 801622e:	b085      	sub	sp, #20
 8016230:	af00      	add	r7, sp, #0
 8016232:	60f8      	str	r0, [r7, #12]
 8016234:	60b9      	str	r1, [r7, #8]
 8016236:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	4a07      	ldr	r2, [pc, #28]	; (8016258 <vApplicationGetTimerTaskMemory+0x2c>)
 801623c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801623e:	68bb      	ldr	r3, [r7, #8]
 8016240:	4a06      	ldr	r2, [pc, #24]	; (801625c <vApplicationGetTimerTaskMemory+0x30>)
 8016242:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	f44f 7280 	mov.w	r2, #256	; 0x100
 801624a:	601a      	str	r2, [r3, #0]
}
 801624c:	bf00      	nop
 801624e:	3714      	adds	r7, #20
 8016250:	46bd      	mov	sp, r7
 8016252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016256:	4770      	bx	lr
 8016258:	20000b28 	.word	0x20000b28
 801625c:	20000be4 	.word	0x20000be4

08016260 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8016260:	b480      	push	{r7}
 8016262:	b083      	sub	sp, #12
 8016264:	af00      	add	r7, sp, #0
 8016266:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	f103 0208 	add.w	r2, r3, #8
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	f04f 32ff 	mov.w	r2, #4294967295
 8016278:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	f103 0208 	add.w	r2, r3, #8
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	f103 0208 	add.w	r2, r3, #8
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	2200      	movs	r2, #0
 8016292:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016294:	bf00      	nop
 8016296:	370c      	adds	r7, #12
 8016298:	46bd      	mov	sp, r7
 801629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801629e:	4770      	bx	lr

080162a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80162a0:	b480      	push	{r7}
 80162a2:	b083      	sub	sp, #12
 80162a4:	af00      	add	r7, sp, #0
 80162a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	2200      	movs	r2, #0
 80162ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80162ae:	bf00      	nop
 80162b0:	370c      	adds	r7, #12
 80162b2:	46bd      	mov	sp, r7
 80162b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162b8:	4770      	bx	lr

080162ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80162ba:	b480      	push	{r7}
 80162bc:	b085      	sub	sp, #20
 80162be:	af00      	add	r7, sp, #0
 80162c0:	6078      	str	r0, [r7, #4]
 80162c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	685b      	ldr	r3, [r3, #4]
 80162c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80162ca:	683b      	ldr	r3, [r7, #0]
 80162cc:	68fa      	ldr	r2, [r7, #12]
 80162ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	689a      	ldr	r2, [r3, #8]
 80162d4:	683b      	ldr	r3, [r7, #0]
 80162d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	689b      	ldr	r3, [r3, #8]
 80162dc:	683a      	ldr	r2, [r7, #0]
 80162de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	683a      	ldr	r2, [r7, #0]
 80162e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80162e6:	683b      	ldr	r3, [r7, #0]
 80162e8:	687a      	ldr	r2, [r7, #4]
 80162ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	681b      	ldr	r3, [r3, #0]
 80162f0:	1c5a      	adds	r2, r3, #1
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	601a      	str	r2, [r3, #0]
}
 80162f6:	bf00      	nop
 80162f8:	3714      	adds	r7, #20
 80162fa:	46bd      	mov	sp, r7
 80162fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016300:	4770      	bx	lr

08016302 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016302:	b480      	push	{r7}
 8016304:	b085      	sub	sp, #20
 8016306:	af00      	add	r7, sp, #0
 8016308:	6078      	str	r0, [r7, #4]
 801630a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801630c:	683b      	ldr	r3, [r7, #0]
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8016312:	68bb      	ldr	r3, [r7, #8]
 8016314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016318:	d103      	bne.n	8016322 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	691b      	ldr	r3, [r3, #16]
 801631e:	60fb      	str	r3, [r7, #12]
 8016320:	e00c      	b.n	801633c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	3308      	adds	r3, #8
 8016326:	60fb      	str	r3, [r7, #12]
 8016328:	e002      	b.n	8016330 <vListInsert+0x2e>
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	685b      	ldr	r3, [r3, #4]
 801632e:	60fb      	str	r3, [r7, #12]
 8016330:	68fb      	ldr	r3, [r7, #12]
 8016332:	685b      	ldr	r3, [r3, #4]
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	68ba      	ldr	r2, [r7, #8]
 8016338:	429a      	cmp	r2, r3
 801633a:	d2f6      	bcs.n	801632a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	685a      	ldr	r2, [r3, #4]
 8016340:	683b      	ldr	r3, [r7, #0]
 8016342:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8016344:	683b      	ldr	r3, [r7, #0]
 8016346:	685b      	ldr	r3, [r3, #4]
 8016348:	683a      	ldr	r2, [r7, #0]
 801634a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801634c:	683b      	ldr	r3, [r7, #0]
 801634e:	68fa      	ldr	r2, [r7, #12]
 8016350:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	683a      	ldr	r2, [r7, #0]
 8016356:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8016358:	683b      	ldr	r3, [r7, #0]
 801635a:	687a      	ldr	r2, [r7, #4]
 801635c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	1c5a      	adds	r2, r3, #1
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	601a      	str	r2, [r3, #0]
}
 8016368:	bf00      	nop
 801636a:	3714      	adds	r7, #20
 801636c:	46bd      	mov	sp, r7
 801636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016372:	4770      	bx	lr

08016374 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8016374:	b480      	push	{r7}
 8016376:	b085      	sub	sp, #20
 8016378:	af00      	add	r7, sp, #0
 801637a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	691b      	ldr	r3, [r3, #16]
 8016380:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	685b      	ldr	r3, [r3, #4]
 8016386:	687a      	ldr	r2, [r7, #4]
 8016388:	6892      	ldr	r2, [r2, #8]
 801638a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	689b      	ldr	r3, [r3, #8]
 8016390:	687a      	ldr	r2, [r7, #4]
 8016392:	6852      	ldr	r2, [r2, #4]
 8016394:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8016396:	68fb      	ldr	r3, [r7, #12]
 8016398:	685b      	ldr	r3, [r3, #4]
 801639a:	687a      	ldr	r2, [r7, #4]
 801639c:	429a      	cmp	r2, r3
 801639e:	d103      	bne.n	80163a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	689a      	ldr	r2, [r3, #8]
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	2200      	movs	r2, #0
 80163ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	1e5a      	subs	r2, r3, #1
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	681b      	ldr	r3, [r3, #0]
}
 80163bc:	4618      	mov	r0, r3
 80163be:	3714      	adds	r7, #20
 80163c0:	46bd      	mov	sp, r7
 80163c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163c6:	4770      	bx	lr

080163c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80163c8:	b580      	push	{r7, lr}
 80163ca:	b084      	sub	sp, #16
 80163cc:	af00      	add	r7, sp, #0
 80163ce:	6078      	str	r0, [r7, #4]
 80163d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80163d6:	68fb      	ldr	r3, [r7, #12]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d10a      	bne.n	80163f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80163dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163e0:	f383 8811 	msr	BASEPRI, r3
 80163e4:	f3bf 8f6f 	isb	sy
 80163e8:	f3bf 8f4f 	dsb	sy
 80163ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80163ee:	bf00      	nop
 80163f0:	e7fe      	b.n	80163f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80163f2:	f002 fe0f 	bl	8019014 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	681a      	ldr	r2, [r3, #0]
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80163fe:	68f9      	ldr	r1, [r7, #12]
 8016400:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016402:	fb01 f303 	mul.w	r3, r1, r3
 8016406:	441a      	add	r2, r3
 8016408:	68fb      	ldr	r3, [r7, #12]
 801640a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	2200      	movs	r2, #0
 8016410:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	681a      	ldr	r2, [r3, #0]
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	681a      	ldr	r2, [r3, #0]
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016422:	3b01      	subs	r3, #1
 8016424:	68f9      	ldr	r1, [r7, #12]
 8016426:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016428:	fb01 f303 	mul.w	r3, r1, r3
 801642c:	441a      	add	r2, r3
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	22ff      	movs	r2, #255	; 0xff
 8016436:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	22ff      	movs	r2, #255	; 0xff
 801643e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8016442:	683b      	ldr	r3, [r7, #0]
 8016444:	2b00      	cmp	r3, #0
 8016446:	d114      	bne.n	8016472 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	691b      	ldr	r3, [r3, #16]
 801644c:	2b00      	cmp	r3, #0
 801644e:	d01a      	beq.n	8016486 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	3310      	adds	r3, #16
 8016454:	4618      	mov	r0, r3
 8016456:	f001 fdb3 	bl	8017fc0 <xTaskRemoveFromEventList>
 801645a:	4603      	mov	r3, r0
 801645c:	2b00      	cmp	r3, #0
 801645e:	d012      	beq.n	8016486 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8016460:	4b0c      	ldr	r3, [pc, #48]	; (8016494 <xQueueGenericReset+0xcc>)
 8016462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016466:	601a      	str	r2, [r3, #0]
 8016468:	f3bf 8f4f 	dsb	sy
 801646c:	f3bf 8f6f 	isb	sy
 8016470:	e009      	b.n	8016486 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	3310      	adds	r3, #16
 8016476:	4618      	mov	r0, r3
 8016478:	f7ff fef2 	bl	8016260 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801647c:	68fb      	ldr	r3, [r7, #12]
 801647e:	3324      	adds	r3, #36	; 0x24
 8016480:	4618      	mov	r0, r3
 8016482:	f7ff feed 	bl	8016260 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8016486:	f002 fdf5 	bl	8019074 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801648a:	2301      	movs	r3, #1
}
 801648c:	4618      	mov	r0, r3
 801648e:	3710      	adds	r7, #16
 8016490:	46bd      	mov	sp, r7
 8016492:	bd80      	pop	{r7, pc}
 8016494:	e000ed04 	.word	0xe000ed04

08016498 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8016498:	b580      	push	{r7, lr}
 801649a:	b08e      	sub	sp, #56	; 0x38
 801649c:	af02      	add	r7, sp, #8
 801649e:	60f8      	str	r0, [r7, #12]
 80164a0:	60b9      	str	r1, [r7, #8]
 80164a2:	607a      	str	r2, [r7, #4]
 80164a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d10a      	bne.n	80164c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80164ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164b0:	f383 8811 	msr	BASEPRI, r3
 80164b4:	f3bf 8f6f 	isb	sy
 80164b8:	f3bf 8f4f 	dsb	sy
 80164bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80164be:	bf00      	nop
 80164c0:	e7fe      	b.n	80164c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80164c2:	683b      	ldr	r3, [r7, #0]
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d10a      	bne.n	80164de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80164c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164cc:	f383 8811 	msr	BASEPRI, r3
 80164d0:	f3bf 8f6f 	isb	sy
 80164d4:	f3bf 8f4f 	dsb	sy
 80164d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80164da:	bf00      	nop
 80164dc:	e7fe      	b.n	80164dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d002      	beq.n	80164ea <xQueueGenericCreateStatic+0x52>
 80164e4:	68bb      	ldr	r3, [r7, #8]
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d001      	beq.n	80164ee <xQueueGenericCreateStatic+0x56>
 80164ea:	2301      	movs	r3, #1
 80164ec:	e000      	b.n	80164f0 <xQueueGenericCreateStatic+0x58>
 80164ee:	2300      	movs	r3, #0
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d10a      	bne.n	801650a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80164f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164f8:	f383 8811 	msr	BASEPRI, r3
 80164fc:	f3bf 8f6f 	isb	sy
 8016500:	f3bf 8f4f 	dsb	sy
 8016504:	623b      	str	r3, [r7, #32]
}
 8016506:	bf00      	nop
 8016508:	e7fe      	b.n	8016508 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	2b00      	cmp	r3, #0
 801650e:	d102      	bne.n	8016516 <xQueueGenericCreateStatic+0x7e>
 8016510:	68bb      	ldr	r3, [r7, #8]
 8016512:	2b00      	cmp	r3, #0
 8016514:	d101      	bne.n	801651a <xQueueGenericCreateStatic+0x82>
 8016516:	2301      	movs	r3, #1
 8016518:	e000      	b.n	801651c <xQueueGenericCreateStatic+0x84>
 801651a:	2300      	movs	r3, #0
 801651c:	2b00      	cmp	r3, #0
 801651e:	d10a      	bne.n	8016536 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8016520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016524:	f383 8811 	msr	BASEPRI, r3
 8016528:	f3bf 8f6f 	isb	sy
 801652c:	f3bf 8f4f 	dsb	sy
 8016530:	61fb      	str	r3, [r7, #28]
}
 8016532:	bf00      	nop
 8016534:	e7fe      	b.n	8016534 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8016536:	2350      	movs	r3, #80	; 0x50
 8016538:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801653a:	697b      	ldr	r3, [r7, #20]
 801653c:	2b50      	cmp	r3, #80	; 0x50
 801653e:	d00a      	beq.n	8016556 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8016540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016544:	f383 8811 	msr	BASEPRI, r3
 8016548:	f3bf 8f6f 	isb	sy
 801654c:	f3bf 8f4f 	dsb	sy
 8016550:	61bb      	str	r3, [r7, #24]
}
 8016552:	bf00      	nop
 8016554:	e7fe      	b.n	8016554 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016556:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016558:	683b      	ldr	r3, [r7, #0]
 801655a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801655c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801655e:	2b00      	cmp	r3, #0
 8016560:	d00d      	beq.n	801657e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016564:	2201      	movs	r2, #1
 8016566:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801656a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801656e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016570:	9300      	str	r3, [sp, #0]
 8016572:	4613      	mov	r3, r2
 8016574:	687a      	ldr	r2, [r7, #4]
 8016576:	68b9      	ldr	r1, [r7, #8]
 8016578:	68f8      	ldr	r0, [r7, #12]
 801657a:	f000 f83f 	bl	80165fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801657e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8016580:	4618      	mov	r0, r3
 8016582:	3730      	adds	r7, #48	; 0x30
 8016584:	46bd      	mov	sp, r7
 8016586:	bd80      	pop	{r7, pc}

08016588 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8016588:	b580      	push	{r7, lr}
 801658a:	b08a      	sub	sp, #40	; 0x28
 801658c:	af02      	add	r7, sp, #8
 801658e:	60f8      	str	r0, [r7, #12]
 8016590:	60b9      	str	r1, [r7, #8]
 8016592:	4613      	mov	r3, r2
 8016594:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016596:	68fb      	ldr	r3, [r7, #12]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d10a      	bne.n	80165b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 801659c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165a0:	f383 8811 	msr	BASEPRI, r3
 80165a4:	f3bf 8f6f 	isb	sy
 80165a8:	f3bf 8f4f 	dsb	sy
 80165ac:	613b      	str	r3, [r7, #16]
}
 80165ae:	bf00      	nop
 80165b0:	e7fe      	b.n	80165b0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80165b2:	68fb      	ldr	r3, [r7, #12]
 80165b4:	68ba      	ldr	r2, [r7, #8]
 80165b6:	fb02 f303 	mul.w	r3, r2, r3
 80165ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80165bc:	69fb      	ldr	r3, [r7, #28]
 80165be:	3350      	adds	r3, #80	; 0x50
 80165c0:	4618      	mov	r0, r3
 80165c2:	f002 fe49 	bl	8019258 <pvPortMalloc>
 80165c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80165c8:	69bb      	ldr	r3, [r7, #24]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d011      	beq.n	80165f2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80165ce:	69bb      	ldr	r3, [r7, #24]
 80165d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80165d2:	697b      	ldr	r3, [r7, #20]
 80165d4:	3350      	adds	r3, #80	; 0x50
 80165d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80165d8:	69bb      	ldr	r3, [r7, #24]
 80165da:	2200      	movs	r2, #0
 80165dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80165e0:	79fa      	ldrb	r2, [r7, #7]
 80165e2:	69bb      	ldr	r3, [r7, #24]
 80165e4:	9300      	str	r3, [sp, #0]
 80165e6:	4613      	mov	r3, r2
 80165e8:	697a      	ldr	r2, [r7, #20]
 80165ea:	68b9      	ldr	r1, [r7, #8]
 80165ec:	68f8      	ldr	r0, [r7, #12]
 80165ee:	f000 f805 	bl	80165fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80165f2:	69bb      	ldr	r3, [r7, #24]
	}
 80165f4:	4618      	mov	r0, r3
 80165f6:	3720      	adds	r7, #32
 80165f8:	46bd      	mov	sp, r7
 80165fa:	bd80      	pop	{r7, pc}

080165fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80165fc:	b580      	push	{r7, lr}
 80165fe:	b084      	sub	sp, #16
 8016600:	af00      	add	r7, sp, #0
 8016602:	60f8      	str	r0, [r7, #12]
 8016604:	60b9      	str	r1, [r7, #8]
 8016606:	607a      	str	r2, [r7, #4]
 8016608:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801660a:	68bb      	ldr	r3, [r7, #8]
 801660c:	2b00      	cmp	r3, #0
 801660e:	d103      	bne.n	8016618 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016610:	69bb      	ldr	r3, [r7, #24]
 8016612:	69ba      	ldr	r2, [r7, #24]
 8016614:	601a      	str	r2, [r3, #0]
 8016616:	e002      	b.n	801661e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016618:	69bb      	ldr	r3, [r7, #24]
 801661a:	687a      	ldr	r2, [r7, #4]
 801661c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801661e:	69bb      	ldr	r3, [r7, #24]
 8016620:	68fa      	ldr	r2, [r7, #12]
 8016622:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016624:	69bb      	ldr	r3, [r7, #24]
 8016626:	68ba      	ldr	r2, [r7, #8]
 8016628:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801662a:	2101      	movs	r1, #1
 801662c:	69b8      	ldr	r0, [r7, #24]
 801662e:	f7ff fecb 	bl	80163c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8016632:	69bb      	ldr	r3, [r7, #24]
 8016634:	78fa      	ldrb	r2, [r7, #3]
 8016636:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801663a:	bf00      	nop
 801663c:	3710      	adds	r7, #16
 801663e:	46bd      	mov	sp, r7
 8016640:	bd80      	pop	{r7, pc}

08016642 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8016642:	b580      	push	{r7, lr}
 8016644:	b08a      	sub	sp, #40	; 0x28
 8016646:	af02      	add	r7, sp, #8
 8016648:	60f8      	str	r0, [r7, #12]
 801664a:	60b9      	str	r1, [r7, #8]
 801664c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	2b00      	cmp	r3, #0
 8016652:	d10a      	bne.n	801666a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8016654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016658:	f383 8811 	msr	BASEPRI, r3
 801665c:	f3bf 8f6f 	isb	sy
 8016660:	f3bf 8f4f 	dsb	sy
 8016664:	61bb      	str	r3, [r7, #24]
}
 8016666:	bf00      	nop
 8016668:	e7fe      	b.n	8016668 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801666a:	68ba      	ldr	r2, [r7, #8]
 801666c:	68fb      	ldr	r3, [r7, #12]
 801666e:	429a      	cmp	r2, r3
 8016670:	d90a      	bls.n	8016688 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8016672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016676:	f383 8811 	msr	BASEPRI, r3
 801667a:	f3bf 8f6f 	isb	sy
 801667e:	f3bf 8f4f 	dsb	sy
 8016682:	617b      	str	r3, [r7, #20]
}
 8016684:	bf00      	nop
 8016686:	e7fe      	b.n	8016686 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8016688:	2302      	movs	r3, #2
 801668a:	9300      	str	r3, [sp, #0]
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	2200      	movs	r2, #0
 8016690:	2100      	movs	r1, #0
 8016692:	68f8      	ldr	r0, [r7, #12]
 8016694:	f7ff ff00 	bl	8016498 <xQueueGenericCreateStatic>
 8016698:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801669a:	69fb      	ldr	r3, [r7, #28]
 801669c:	2b00      	cmp	r3, #0
 801669e:	d002      	beq.n	80166a6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80166a0:	69fb      	ldr	r3, [r7, #28]
 80166a2:	68ba      	ldr	r2, [r7, #8]
 80166a4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80166a6:	69fb      	ldr	r3, [r7, #28]
	}
 80166a8:	4618      	mov	r0, r3
 80166aa:	3720      	adds	r7, #32
 80166ac:	46bd      	mov	sp, r7
 80166ae:	bd80      	pop	{r7, pc}

080166b0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80166b0:	b580      	push	{r7, lr}
 80166b2:	b086      	sub	sp, #24
 80166b4:	af00      	add	r7, sp, #0
 80166b6:	6078      	str	r0, [r7, #4]
 80166b8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d10a      	bne.n	80166d6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80166c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166c4:	f383 8811 	msr	BASEPRI, r3
 80166c8:	f3bf 8f6f 	isb	sy
 80166cc:	f3bf 8f4f 	dsb	sy
 80166d0:	613b      	str	r3, [r7, #16]
}
 80166d2:	bf00      	nop
 80166d4:	e7fe      	b.n	80166d4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80166d6:	683a      	ldr	r2, [r7, #0]
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	429a      	cmp	r2, r3
 80166dc:	d90a      	bls.n	80166f4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80166de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166e2:	f383 8811 	msr	BASEPRI, r3
 80166e6:	f3bf 8f6f 	isb	sy
 80166ea:	f3bf 8f4f 	dsb	sy
 80166ee:	60fb      	str	r3, [r7, #12]
}
 80166f0:	bf00      	nop
 80166f2:	e7fe      	b.n	80166f2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80166f4:	2202      	movs	r2, #2
 80166f6:	2100      	movs	r1, #0
 80166f8:	6878      	ldr	r0, [r7, #4]
 80166fa:	f7ff ff45 	bl	8016588 <xQueueGenericCreate>
 80166fe:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8016700:	697b      	ldr	r3, [r7, #20]
 8016702:	2b00      	cmp	r3, #0
 8016704:	d002      	beq.n	801670c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8016706:	697b      	ldr	r3, [r7, #20]
 8016708:	683a      	ldr	r2, [r7, #0]
 801670a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801670c:	697b      	ldr	r3, [r7, #20]
	}
 801670e:	4618      	mov	r0, r3
 8016710:	3718      	adds	r7, #24
 8016712:	46bd      	mov	sp, r7
 8016714:	bd80      	pop	{r7, pc}
	...

08016718 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016718:	b580      	push	{r7, lr}
 801671a:	b08e      	sub	sp, #56	; 0x38
 801671c:	af00      	add	r7, sp, #0
 801671e:	60f8      	str	r0, [r7, #12]
 8016720:	60b9      	str	r1, [r7, #8]
 8016722:	607a      	str	r2, [r7, #4]
 8016724:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8016726:	2300      	movs	r3, #0
 8016728:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801672a:	68fb      	ldr	r3, [r7, #12]
 801672c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801672e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016730:	2b00      	cmp	r3, #0
 8016732:	d10a      	bne.n	801674a <xQueueGenericSend+0x32>
	__asm volatile
 8016734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016738:	f383 8811 	msr	BASEPRI, r3
 801673c:	f3bf 8f6f 	isb	sy
 8016740:	f3bf 8f4f 	dsb	sy
 8016744:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016746:	bf00      	nop
 8016748:	e7fe      	b.n	8016748 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801674a:	68bb      	ldr	r3, [r7, #8]
 801674c:	2b00      	cmp	r3, #0
 801674e:	d103      	bne.n	8016758 <xQueueGenericSend+0x40>
 8016750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016754:	2b00      	cmp	r3, #0
 8016756:	d101      	bne.n	801675c <xQueueGenericSend+0x44>
 8016758:	2301      	movs	r3, #1
 801675a:	e000      	b.n	801675e <xQueueGenericSend+0x46>
 801675c:	2300      	movs	r3, #0
 801675e:	2b00      	cmp	r3, #0
 8016760:	d10a      	bne.n	8016778 <xQueueGenericSend+0x60>
	__asm volatile
 8016762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016766:	f383 8811 	msr	BASEPRI, r3
 801676a:	f3bf 8f6f 	isb	sy
 801676e:	f3bf 8f4f 	dsb	sy
 8016772:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016774:	bf00      	nop
 8016776:	e7fe      	b.n	8016776 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016778:	683b      	ldr	r3, [r7, #0]
 801677a:	2b02      	cmp	r3, #2
 801677c:	d103      	bne.n	8016786 <xQueueGenericSend+0x6e>
 801677e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016782:	2b01      	cmp	r3, #1
 8016784:	d101      	bne.n	801678a <xQueueGenericSend+0x72>
 8016786:	2301      	movs	r3, #1
 8016788:	e000      	b.n	801678c <xQueueGenericSend+0x74>
 801678a:	2300      	movs	r3, #0
 801678c:	2b00      	cmp	r3, #0
 801678e:	d10a      	bne.n	80167a6 <xQueueGenericSend+0x8e>
	__asm volatile
 8016790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016794:	f383 8811 	msr	BASEPRI, r3
 8016798:	f3bf 8f6f 	isb	sy
 801679c:	f3bf 8f4f 	dsb	sy
 80167a0:	623b      	str	r3, [r7, #32]
}
 80167a2:	bf00      	nop
 80167a4:	e7fe      	b.n	80167a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80167a6:	f001 fddd 	bl	8018364 <xTaskGetSchedulerState>
 80167aa:	4603      	mov	r3, r0
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d102      	bne.n	80167b6 <xQueueGenericSend+0x9e>
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d101      	bne.n	80167ba <xQueueGenericSend+0xa2>
 80167b6:	2301      	movs	r3, #1
 80167b8:	e000      	b.n	80167bc <xQueueGenericSend+0xa4>
 80167ba:	2300      	movs	r3, #0
 80167bc:	2b00      	cmp	r3, #0
 80167be:	d10a      	bne.n	80167d6 <xQueueGenericSend+0xbe>
	__asm volatile
 80167c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167c4:	f383 8811 	msr	BASEPRI, r3
 80167c8:	f3bf 8f6f 	isb	sy
 80167cc:	f3bf 8f4f 	dsb	sy
 80167d0:	61fb      	str	r3, [r7, #28]
}
 80167d2:	bf00      	nop
 80167d4:	e7fe      	b.n	80167d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80167d6:	f002 fc1d 	bl	8019014 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80167da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80167de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80167e2:	429a      	cmp	r2, r3
 80167e4:	d302      	bcc.n	80167ec <xQueueGenericSend+0xd4>
 80167e6:	683b      	ldr	r3, [r7, #0]
 80167e8:	2b02      	cmp	r3, #2
 80167ea:	d129      	bne.n	8016840 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80167ec:	683a      	ldr	r2, [r7, #0]
 80167ee:	68b9      	ldr	r1, [r7, #8]
 80167f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80167f2:	f000 fc5e 	bl	80170b2 <prvCopyDataToQueue>
 80167f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80167f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d010      	beq.n	8016822 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016802:	3324      	adds	r3, #36	; 0x24
 8016804:	4618      	mov	r0, r3
 8016806:	f001 fbdb 	bl	8017fc0 <xTaskRemoveFromEventList>
 801680a:	4603      	mov	r3, r0
 801680c:	2b00      	cmp	r3, #0
 801680e:	d013      	beq.n	8016838 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8016810:	4b3f      	ldr	r3, [pc, #252]	; (8016910 <xQueueGenericSend+0x1f8>)
 8016812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016816:	601a      	str	r2, [r3, #0]
 8016818:	f3bf 8f4f 	dsb	sy
 801681c:	f3bf 8f6f 	isb	sy
 8016820:	e00a      	b.n	8016838 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8016822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016824:	2b00      	cmp	r3, #0
 8016826:	d007      	beq.n	8016838 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8016828:	4b39      	ldr	r3, [pc, #228]	; (8016910 <xQueueGenericSend+0x1f8>)
 801682a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801682e:	601a      	str	r2, [r3, #0]
 8016830:	f3bf 8f4f 	dsb	sy
 8016834:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8016838:	f002 fc1c 	bl	8019074 <vPortExitCritical>
				return pdPASS;
 801683c:	2301      	movs	r3, #1
 801683e:	e063      	b.n	8016908 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	2b00      	cmp	r3, #0
 8016844:	d103      	bne.n	801684e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016846:	f002 fc15 	bl	8019074 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801684a:	2300      	movs	r3, #0
 801684c:	e05c      	b.n	8016908 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801684e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016850:	2b00      	cmp	r3, #0
 8016852:	d106      	bne.n	8016862 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016854:	f107 0314 	add.w	r3, r7, #20
 8016858:	4618      	mov	r0, r3
 801685a:	f001 fc15 	bl	8018088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801685e:	2301      	movs	r3, #1
 8016860:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016862:	f002 fc07 	bl	8019074 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016866:	f001 f981 	bl	8017b6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801686a:	f002 fbd3 	bl	8019014 <vPortEnterCritical>
 801686e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016870:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016874:	b25b      	sxtb	r3, r3
 8016876:	f1b3 3fff 	cmp.w	r3, #4294967295
 801687a:	d103      	bne.n	8016884 <xQueueGenericSend+0x16c>
 801687c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801687e:	2200      	movs	r2, #0
 8016880:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016886:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801688a:	b25b      	sxtb	r3, r3
 801688c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016890:	d103      	bne.n	801689a <xQueueGenericSend+0x182>
 8016892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016894:	2200      	movs	r2, #0
 8016896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801689a:	f002 fbeb 	bl	8019074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801689e:	1d3a      	adds	r2, r7, #4
 80168a0:	f107 0314 	add.w	r3, r7, #20
 80168a4:	4611      	mov	r1, r2
 80168a6:	4618      	mov	r0, r3
 80168a8:	f001 fc04 	bl	80180b4 <xTaskCheckForTimeOut>
 80168ac:	4603      	mov	r3, r0
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d124      	bne.n	80168fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80168b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80168b4:	f000 fcf5 	bl	80172a2 <prvIsQueueFull>
 80168b8:	4603      	mov	r3, r0
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d018      	beq.n	80168f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80168be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168c0:	3310      	adds	r3, #16
 80168c2:	687a      	ldr	r2, [r7, #4]
 80168c4:	4611      	mov	r1, r2
 80168c6:	4618      	mov	r0, r3
 80168c8:	f001 fb2a 	bl	8017f20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80168cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80168ce:	f000 fc80 	bl	80171d2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80168d2:	f001 f959 	bl	8017b88 <xTaskResumeAll>
 80168d6:	4603      	mov	r3, r0
 80168d8:	2b00      	cmp	r3, #0
 80168da:	f47f af7c 	bne.w	80167d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80168de:	4b0c      	ldr	r3, [pc, #48]	; (8016910 <xQueueGenericSend+0x1f8>)
 80168e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80168e4:	601a      	str	r2, [r3, #0]
 80168e6:	f3bf 8f4f 	dsb	sy
 80168ea:	f3bf 8f6f 	isb	sy
 80168ee:	e772      	b.n	80167d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80168f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80168f2:	f000 fc6e 	bl	80171d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80168f6:	f001 f947 	bl	8017b88 <xTaskResumeAll>
 80168fa:	e76c      	b.n	80167d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80168fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80168fe:	f000 fc68 	bl	80171d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016902:	f001 f941 	bl	8017b88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8016906:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8016908:	4618      	mov	r0, r3
 801690a:	3738      	adds	r7, #56	; 0x38
 801690c:	46bd      	mov	sp, r7
 801690e:	bd80      	pop	{r7, pc}
 8016910:	e000ed04 	.word	0xe000ed04

08016914 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8016914:	b580      	push	{r7, lr}
 8016916:	b090      	sub	sp, #64	; 0x40
 8016918:	af00      	add	r7, sp, #0
 801691a:	60f8      	str	r0, [r7, #12]
 801691c:	60b9      	str	r1, [r7, #8]
 801691e:	607a      	str	r2, [r7, #4]
 8016920:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016922:	68fb      	ldr	r3, [r7, #12]
 8016924:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8016926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016928:	2b00      	cmp	r3, #0
 801692a:	d10a      	bne.n	8016942 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801692c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016930:	f383 8811 	msr	BASEPRI, r3
 8016934:	f3bf 8f6f 	isb	sy
 8016938:	f3bf 8f4f 	dsb	sy
 801693c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801693e:	bf00      	nop
 8016940:	e7fe      	b.n	8016940 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016942:	68bb      	ldr	r3, [r7, #8]
 8016944:	2b00      	cmp	r3, #0
 8016946:	d103      	bne.n	8016950 <xQueueGenericSendFromISR+0x3c>
 8016948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801694a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801694c:	2b00      	cmp	r3, #0
 801694e:	d101      	bne.n	8016954 <xQueueGenericSendFromISR+0x40>
 8016950:	2301      	movs	r3, #1
 8016952:	e000      	b.n	8016956 <xQueueGenericSendFromISR+0x42>
 8016954:	2300      	movs	r3, #0
 8016956:	2b00      	cmp	r3, #0
 8016958:	d10a      	bne.n	8016970 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801695a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801695e:	f383 8811 	msr	BASEPRI, r3
 8016962:	f3bf 8f6f 	isb	sy
 8016966:	f3bf 8f4f 	dsb	sy
 801696a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801696c:	bf00      	nop
 801696e:	e7fe      	b.n	801696e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016970:	683b      	ldr	r3, [r7, #0]
 8016972:	2b02      	cmp	r3, #2
 8016974:	d103      	bne.n	801697e <xQueueGenericSendFromISR+0x6a>
 8016976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801697a:	2b01      	cmp	r3, #1
 801697c:	d101      	bne.n	8016982 <xQueueGenericSendFromISR+0x6e>
 801697e:	2301      	movs	r3, #1
 8016980:	e000      	b.n	8016984 <xQueueGenericSendFromISR+0x70>
 8016982:	2300      	movs	r3, #0
 8016984:	2b00      	cmp	r3, #0
 8016986:	d10a      	bne.n	801699e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8016988:	f04f 0350 	mov.w	r3, #80	; 0x50
 801698c:	f383 8811 	msr	BASEPRI, r3
 8016990:	f3bf 8f6f 	isb	sy
 8016994:	f3bf 8f4f 	dsb	sy
 8016998:	623b      	str	r3, [r7, #32]
}
 801699a:	bf00      	nop
 801699c:	e7fe      	b.n	801699c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801699e:	f002 fc1b 	bl	80191d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80169a2:	f3ef 8211 	mrs	r2, BASEPRI
 80169a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169aa:	f383 8811 	msr	BASEPRI, r3
 80169ae:	f3bf 8f6f 	isb	sy
 80169b2:	f3bf 8f4f 	dsb	sy
 80169b6:	61fa      	str	r2, [r7, #28]
 80169b8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80169ba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80169bc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80169be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80169c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80169c6:	429a      	cmp	r2, r3
 80169c8:	d302      	bcc.n	80169d0 <xQueueGenericSendFromISR+0xbc>
 80169ca:	683b      	ldr	r3, [r7, #0]
 80169cc:	2b02      	cmp	r3, #2
 80169ce:	d12f      	bne.n	8016a30 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80169d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80169d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80169da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80169de:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80169e0:	683a      	ldr	r2, [r7, #0]
 80169e2:	68b9      	ldr	r1, [r7, #8]
 80169e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80169e6:	f000 fb64 	bl	80170b2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80169ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80169ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80169f2:	d112      	bne.n	8016a1a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80169f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d016      	beq.n	8016a2a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80169fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169fe:	3324      	adds	r3, #36	; 0x24
 8016a00:	4618      	mov	r0, r3
 8016a02:	f001 fadd 	bl	8017fc0 <xTaskRemoveFromEventList>
 8016a06:	4603      	mov	r3, r0
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d00e      	beq.n	8016a2a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d00b      	beq.n	8016a2a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	2201      	movs	r2, #1
 8016a16:	601a      	str	r2, [r3, #0]
 8016a18:	e007      	b.n	8016a2a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016a1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016a1e:	3301      	adds	r3, #1
 8016a20:	b2db      	uxtb	r3, r3
 8016a22:	b25a      	sxtb	r2, r3
 8016a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016a2a:	2301      	movs	r3, #1
 8016a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8016a2e:	e001      	b.n	8016a34 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016a30:	2300      	movs	r3, #0
 8016a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a36:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8016a38:	697b      	ldr	r3, [r7, #20]
 8016a3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8016a3e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8016a42:	4618      	mov	r0, r3
 8016a44:	3740      	adds	r7, #64	; 0x40
 8016a46:	46bd      	mov	sp, r7
 8016a48:	bd80      	pop	{r7, pc}

08016a4a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016a4a:	b580      	push	{r7, lr}
 8016a4c:	b08e      	sub	sp, #56	; 0x38
 8016a4e:	af00      	add	r7, sp, #0
 8016a50:	6078      	str	r0, [r7, #4]
 8016a52:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8016a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d10a      	bne.n	8016a74 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8016a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a62:	f383 8811 	msr	BASEPRI, r3
 8016a66:	f3bf 8f6f 	isb	sy
 8016a6a:	f3bf 8f4f 	dsb	sy
 8016a6e:	623b      	str	r3, [r7, #32]
}
 8016a70:	bf00      	nop
 8016a72:	e7fe      	b.n	8016a72 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d00a      	beq.n	8016a92 <xQueueGiveFromISR+0x48>
	__asm volatile
 8016a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a80:	f383 8811 	msr	BASEPRI, r3
 8016a84:	f3bf 8f6f 	isb	sy
 8016a88:	f3bf 8f4f 	dsb	sy
 8016a8c:	61fb      	str	r3, [r7, #28]
}
 8016a8e:	bf00      	nop
 8016a90:	e7fe      	b.n	8016a90 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8016a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a94:	681b      	ldr	r3, [r3, #0]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d103      	bne.n	8016aa2 <xQueueGiveFromISR+0x58>
 8016a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a9c:	689b      	ldr	r3, [r3, #8]
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d101      	bne.n	8016aa6 <xQueueGiveFromISR+0x5c>
 8016aa2:	2301      	movs	r3, #1
 8016aa4:	e000      	b.n	8016aa8 <xQueueGiveFromISR+0x5e>
 8016aa6:	2300      	movs	r3, #0
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d10a      	bne.n	8016ac2 <xQueueGiveFromISR+0x78>
	__asm volatile
 8016aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ab0:	f383 8811 	msr	BASEPRI, r3
 8016ab4:	f3bf 8f6f 	isb	sy
 8016ab8:	f3bf 8f4f 	dsb	sy
 8016abc:	61bb      	str	r3, [r7, #24]
}
 8016abe:	bf00      	nop
 8016ac0:	e7fe      	b.n	8016ac0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016ac2:	f002 fb89 	bl	80191d8 <vPortValidateInterruptPriority>
	__asm volatile
 8016ac6:	f3ef 8211 	mrs	r2, BASEPRI
 8016aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ace:	f383 8811 	msr	BASEPRI, r3
 8016ad2:	f3bf 8f6f 	isb	sy
 8016ad6:	f3bf 8f4f 	dsb	sy
 8016ada:	617a      	str	r2, [r7, #20]
 8016adc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8016ade:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016ae6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8016ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016aee:	429a      	cmp	r2, r3
 8016af0:	d22b      	bcs.n	8016b4a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016af4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016af8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016afe:	1c5a      	adds	r2, r3, #1
 8016b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b02:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016b04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b0c:	d112      	bne.n	8016b34 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d016      	beq.n	8016b44 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b18:	3324      	adds	r3, #36	; 0x24
 8016b1a:	4618      	mov	r0, r3
 8016b1c:	f001 fa50 	bl	8017fc0 <xTaskRemoveFromEventList>
 8016b20:	4603      	mov	r3, r0
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d00e      	beq.n	8016b44 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016b26:	683b      	ldr	r3, [r7, #0]
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d00b      	beq.n	8016b44 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016b2c:	683b      	ldr	r3, [r7, #0]
 8016b2e:	2201      	movs	r2, #1
 8016b30:	601a      	str	r2, [r3, #0]
 8016b32:	e007      	b.n	8016b44 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016b34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b38:	3301      	adds	r3, #1
 8016b3a:	b2db      	uxtb	r3, r3
 8016b3c:	b25a      	sxtb	r2, r3
 8016b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016b44:	2301      	movs	r3, #1
 8016b46:	637b      	str	r3, [r7, #52]	; 0x34
 8016b48:	e001      	b.n	8016b4e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	637b      	str	r3, [r7, #52]	; 0x34
 8016b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b50:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8016b52:	68fb      	ldr	r3, [r7, #12]
 8016b54:	f383 8811 	msr	BASEPRI, r3
}
 8016b58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016b5c:	4618      	mov	r0, r3
 8016b5e:	3738      	adds	r7, #56	; 0x38
 8016b60:	46bd      	mov	sp, r7
 8016b62:	bd80      	pop	{r7, pc}

08016b64 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8016b64:	b580      	push	{r7, lr}
 8016b66:	b08c      	sub	sp, #48	; 0x30
 8016b68:	af00      	add	r7, sp, #0
 8016b6a:	60f8      	str	r0, [r7, #12]
 8016b6c:	60b9      	str	r1, [r7, #8]
 8016b6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8016b70:	2300      	movs	r3, #0
 8016b72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016b74:	68fb      	ldr	r3, [r7, #12]
 8016b76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d10a      	bne.n	8016b94 <xQueueReceive+0x30>
	__asm volatile
 8016b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b82:	f383 8811 	msr	BASEPRI, r3
 8016b86:	f3bf 8f6f 	isb	sy
 8016b8a:	f3bf 8f4f 	dsb	sy
 8016b8e:	623b      	str	r3, [r7, #32]
}
 8016b90:	bf00      	nop
 8016b92:	e7fe      	b.n	8016b92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016b94:	68bb      	ldr	r3, [r7, #8]
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d103      	bne.n	8016ba2 <xQueueReceive+0x3e>
 8016b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d101      	bne.n	8016ba6 <xQueueReceive+0x42>
 8016ba2:	2301      	movs	r3, #1
 8016ba4:	e000      	b.n	8016ba8 <xQueueReceive+0x44>
 8016ba6:	2300      	movs	r3, #0
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d10a      	bne.n	8016bc2 <xQueueReceive+0x5e>
	__asm volatile
 8016bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bb0:	f383 8811 	msr	BASEPRI, r3
 8016bb4:	f3bf 8f6f 	isb	sy
 8016bb8:	f3bf 8f4f 	dsb	sy
 8016bbc:	61fb      	str	r3, [r7, #28]
}
 8016bbe:	bf00      	nop
 8016bc0:	e7fe      	b.n	8016bc0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016bc2:	f001 fbcf 	bl	8018364 <xTaskGetSchedulerState>
 8016bc6:	4603      	mov	r3, r0
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d102      	bne.n	8016bd2 <xQueueReceive+0x6e>
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d101      	bne.n	8016bd6 <xQueueReceive+0x72>
 8016bd2:	2301      	movs	r3, #1
 8016bd4:	e000      	b.n	8016bd8 <xQueueReceive+0x74>
 8016bd6:	2300      	movs	r3, #0
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d10a      	bne.n	8016bf2 <xQueueReceive+0x8e>
	__asm volatile
 8016bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016be0:	f383 8811 	msr	BASEPRI, r3
 8016be4:	f3bf 8f6f 	isb	sy
 8016be8:	f3bf 8f4f 	dsb	sy
 8016bec:	61bb      	str	r3, [r7, #24]
}
 8016bee:	bf00      	nop
 8016bf0:	e7fe      	b.n	8016bf0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016bf2:	f002 fa0f 	bl	8019014 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016bfa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d01f      	beq.n	8016c42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016c02:	68b9      	ldr	r1, [r7, #8]
 8016c04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016c06:	f000 fabe 	bl	8017186 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c0c:	1e5a      	subs	r2, r3, #1
 8016c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c14:	691b      	ldr	r3, [r3, #16]
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d00f      	beq.n	8016c3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c1c:	3310      	adds	r3, #16
 8016c1e:	4618      	mov	r0, r3
 8016c20:	f001 f9ce 	bl	8017fc0 <xTaskRemoveFromEventList>
 8016c24:	4603      	mov	r3, r0
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d007      	beq.n	8016c3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016c2a:	4b3d      	ldr	r3, [pc, #244]	; (8016d20 <xQueueReceive+0x1bc>)
 8016c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016c30:	601a      	str	r2, [r3, #0]
 8016c32:	f3bf 8f4f 	dsb	sy
 8016c36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016c3a:	f002 fa1b 	bl	8019074 <vPortExitCritical>
				return pdPASS;
 8016c3e:	2301      	movs	r3, #1
 8016c40:	e069      	b.n	8016d16 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d103      	bne.n	8016c50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016c48:	f002 fa14 	bl	8019074 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016c4c:	2300      	movs	r3, #0
 8016c4e:	e062      	b.n	8016d16 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d106      	bne.n	8016c64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016c56:	f107 0310 	add.w	r3, r7, #16
 8016c5a:	4618      	mov	r0, r3
 8016c5c:	f001 fa14 	bl	8018088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016c60:	2301      	movs	r3, #1
 8016c62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016c64:	f002 fa06 	bl	8019074 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016c68:	f000 ff80 	bl	8017b6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016c6c:	f002 f9d2 	bl	8019014 <vPortEnterCritical>
 8016c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016c76:	b25b      	sxtb	r3, r3
 8016c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c7c:	d103      	bne.n	8016c86 <xQueueReceive+0x122>
 8016c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c80:	2200      	movs	r2, #0
 8016c82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016c8c:	b25b      	sxtb	r3, r3
 8016c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c92:	d103      	bne.n	8016c9c <xQueueReceive+0x138>
 8016c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c96:	2200      	movs	r2, #0
 8016c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016c9c:	f002 f9ea 	bl	8019074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016ca0:	1d3a      	adds	r2, r7, #4
 8016ca2:	f107 0310 	add.w	r3, r7, #16
 8016ca6:	4611      	mov	r1, r2
 8016ca8:	4618      	mov	r0, r3
 8016caa:	f001 fa03 	bl	80180b4 <xTaskCheckForTimeOut>
 8016cae:	4603      	mov	r3, r0
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d123      	bne.n	8016cfc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016cb6:	f000 fade 	bl	8017276 <prvIsQueueEmpty>
 8016cba:	4603      	mov	r3, r0
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d017      	beq.n	8016cf0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cc2:	3324      	adds	r3, #36	; 0x24
 8016cc4:	687a      	ldr	r2, [r7, #4]
 8016cc6:	4611      	mov	r1, r2
 8016cc8:	4618      	mov	r0, r3
 8016cca:	f001 f929 	bl	8017f20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016cce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016cd0:	f000 fa7f 	bl	80171d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016cd4:	f000 ff58 	bl	8017b88 <xTaskResumeAll>
 8016cd8:	4603      	mov	r3, r0
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d189      	bne.n	8016bf2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8016cde:	4b10      	ldr	r3, [pc, #64]	; (8016d20 <xQueueReceive+0x1bc>)
 8016ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016ce4:	601a      	str	r2, [r3, #0]
 8016ce6:	f3bf 8f4f 	dsb	sy
 8016cea:	f3bf 8f6f 	isb	sy
 8016cee:	e780      	b.n	8016bf2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016cf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016cf2:	f000 fa6e 	bl	80171d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016cf6:	f000 ff47 	bl	8017b88 <xTaskResumeAll>
 8016cfa:	e77a      	b.n	8016bf2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8016cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016cfe:	f000 fa68 	bl	80171d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016d02:	f000 ff41 	bl	8017b88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016d06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016d08:	f000 fab5 	bl	8017276 <prvIsQueueEmpty>
 8016d0c:	4603      	mov	r3, r0
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	f43f af6f 	beq.w	8016bf2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016d14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016d16:	4618      	mov	r0, r3
 8016d18:	3730      	adds	r7, #48	; 0x30
 8016d1a:	46bd      	mov	sp, r7
 8016d1c:	bd80      	pop	{r7, pc}
 8016d1e:	bf00      	nop
 8016d20:	e000ed04 	.word	0xe000ed04

08016d24 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8016d24:	b580      	push	{r7, lr}
 8016d26:	b08e      	sub	sp, #56	; 0x38
 8016d28:	af00      	add	r7, sp, #0
 8016d2a:	6078      	str	r0, [r7, #4]
 8016d2c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8016d2e:	2300      	movs	r3, #0
 8016d30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8016d36:	2300      	movs	r3, #0
 8016d38:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d10a      	bne.n	8016d56 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8016d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d44:	f383 8811 	msr	BASEPRI, r3
 8016d48:	f3bf 8f6f 	isb	sy
 8016d4c:	f3bf 8f4f 	dsb	sy
 8016d50:	623b      	str	r3, [r7, #32]
}
 8016d52:	bf00      	nop
 8016d54:	e7fe      	b.n	8016d54 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d00a      	beq.n	8016d74 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8016d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d62:	f383 8811 	msr	BASEPRI, r3
 8016d66:	f3bf 8f6f 	isb	sy
 8016d6a:	f3bf 8f4f 	dsb	sy
 8016d6e:	61fb      	str	r3, [r7, #28]
}
 8016d70:	bf00      	nop
 8016d72:	e7fe      	b.n	8016d72 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016d74:	f001 faf6 	bl	8018364 <xTaskGetSchedulerState>
 8016d78:	4603      	mov	r3, r0
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d102      	bne.n	8016d84 <xQueueSemaphoreTake+0x60>
 8016d7e:	683b      	ldr	r3, [r7, #0]
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d101      	bne.n	8016d88 <xQueueSemaphoreTake+0x64>
 8016d84:	2301      	movs	r3, #1
 8016d86:	e000      	b.n	8016d8a <xQueueSemaphoreTake+0x66>
 8016d88:	2300      	movs	r3, #0
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d10a      	bne.n	8016da4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8016d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d92:	f383 8811 	msr	BASEPRI, r3
 8016d96:	f3bf 8f6f 	isb	sy
 8016d9a:	f3bf 8f4f 	dsb	sy
 8016d9e:	61bb      	str	r3, [r7, #24]
}
 8016da0:	bf00      	nop
 8016da2:	e7fe      	b.n	8016da2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016da4:	f002 f936 	bl	8019014 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8016da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016dac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8016dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d024      	beq.n	8016dfe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8016db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016db6:	1e5a      	subs	r2, r3, #1
 8016db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dbe:	681b      	ldr	r3, [r3, #0]
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d104      	bne.n	8016dce <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8016dc4:	f001 fc44 	bl	8018650 <pvTaskIncrementMutexHeldCount>
 8016dc8:	4602      	mov	r2, r0
 8016dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dcc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dd0:	691b      	ldr	r3, [r3, #16]
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d00f      	beq.n	8016df6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dd8:	3310      	adds	r3, #16
 8016dda:	4618      	mov	r0, r3
 8016ddc:	f001 f8f0 	bl	8017fc0 <xTaskRemoveFromEventList>
 8016de0:	4603      	mov	r3, r0
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d007      	beq.n	8016df6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016de6:	4b54      	ldr	r3, [pc, #336]	; (8016f38 <xQueueSemaphoreTake+0x214>)
 8016de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016dec:	601a      	str	r2, [r3, #0]
 8016dee:	f3bf 8f4f 	dsb	sy
 8016df2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016df6:	f002 f93d 	bl	8019074 <vPortExitCritical>
				return pdPASS;
 8016dfa:	2301      	movs	r3, #1
 8016dfc:	e097      	b.n	8016f2e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016dfe:	683b      	ldr	r3, [r7, #0]
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d111      	bne.n	8016e28 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8016e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d00a      	beq.n	8016e20 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8016e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e0e:	f383 8811 	msr	BASEPRI, r3
 8016e12:	f3bf 8f6f 	isb	sy
 8016e16:	f3bf 8f4f 	dsb	sy
 8016e1a:	617b      	str	r3, [r7, #20]
}
 8016e1c:	bf00      	nop
 8016e1e:	e7fe      	b.n	8016e1e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8016e20:	f002 f928 	bl	8019074 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016e24:	2300      	movs	r3, #0
 8016e26:	e082      	b.n	8016f2e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d106      	bne.n	8016e3c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016e2e:	f107 030c 	add.w	r3, r7, #12
 8016e32:	4618      	mov	r0, r3
 8016e34:	f001 f928 	bl	8018088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016e38:	2301      	movs	r3, #1
 8016e3a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016e3c:	f002 f91a 	bl	8019074 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016e40:	f000 fe94 	bl	8017b6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016e44:	f002 f8e6 	bl	8019014 <vPortEnterCritical>
 8016e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016e4e:	b25b      	sxtb	r3, r3
 8016e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e54:	d103      	bne.n	8016e5e <xQueueSemaphoreTake+0x13a>
 8016e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e58:	2200      	movs	r2, #0
 8016e5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016e64:	b25b      	sxtb	r3, r3
 8016e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e6a:	d103      	bne.n	8016e74 <xQueueSemaphoreTake+0x150>
 8016e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e6e:	2200      	movs	r2, #0
 8016e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016e74:	f002 f8fe 	bl	8019074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016e78:	463a      	mov	r2, r7
 8016e7a:	f107 030c 	add.w	r3, r7, #12
 8016e7e:	4611      	mov	r1, r2
 8016e80:	4618      	mov	r0, r3
 8016e82:	f001 f917 	bl	80180b4 <xTaskCheckForTimeOut>
 8016e86:	4603      	mov	r3, r0
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d132      	bne.n	8016ef2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016e8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016e8e:	f000 f9f2 	bl	8017276 <prvIsQueueEmpty>
 8016e92:	4603      	mov	r3, r0
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d026      	beq.n	8016ee6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d109      	bne.n	8016eb4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8016ea0:	f002 f8b8 	bl	8019014 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ea6:	689b      	ldr	r3, [r3, #8]
 8016ea8:	4618      	mov	r0, r3
 8016eaa:	f001 fa79 	bl	80183a0 <xTaskPriorityInherit>
 8016eae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8016eb0:	f002 f8e0 	bl	8019074 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eb6:	3324      	adds	r3, #36	; 0x24
 8016eb8:	683a      	ldr	r2, [r7, #0]
 8016eba:	4611      	mov	r1, r2
 8016ebc:	4618      	mov	r0, r3
 8016ebe:	f001 f82f 	bl	8017f20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016ec2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016ec4:	f000 f985 	bl	80171d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016ec8:	f000 fe5e 	bl	8017b88 <xTaskResumeAll>
 8016ecc:	4603      	mov	r3, r0
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	f47f af68 	bne.w	8016da4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8016ed4:	4b18      	ldr	r3, [pc, #96]	; (8016f38 <xQueueSemaphoreTake+0x214>)
 8016ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016eda:	601a      	str	r2, [r3, #0]
 8016edc:	f3bf 8f4f 	dsb	sy
 8016ee0:	f3bf 8f6f 	isb	sy
 8016ee4:	e75e      	b.n	8016da4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8016ee6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016ee8:	f000 f973 	bl	80171d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016eec:	f000 fe4c 	bl	8017b88 <xTaskResumeAll>
 8016ef0:	e758      	b.n	8016da4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8016ef2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016ef4:	f000 f96d 	bl	80171d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016ef8:	f000 fe46 	bl	8017b88 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016efc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016efe:	f000 f9ba 	bl	8017276 <prvIsQueueEmpty>
 8016f02:	4603      	mov	r3, r0
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	f43f af4d 	beq.w	8016da4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8016f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d00d      	beq.n	8016f2c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8016f10:	f002 f880 	bl	8019014 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8016f14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016f16:	f000 f8b4 	bl	8017082 <prvGetDisinheritPriorityAfterTimeout>
 8016f1a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8016f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f1e:	689b      	ldr	r3, [r3, #8]
 8016f20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016f22:	4618      	mov	r0, r3
 8016f24:	f001 fb12 	bl	801854c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8016f28:	f002 f8a4 	bl	8019074 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016f2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016f2e:	4618      	mov	r0, r3
 8016f30:	3738      	adds	r7, #56	; 0x38
 8016f32:	46bd      	mov	sp, r7
 8016f34:	bd80      	pop	{r7, pc}
 8016f36:	bf00      	nop
 8016f38:	e000ed04 	.word	0xe000ed04

08016f3c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016f3c:	b580      	push	{r7, lr}
 8016f3e:	b08e      	sub	sp, #56	; 0x38
 8016f40:	af00      	add	r7, sp, #0
 8016f42:	60f8      	str	r0, [r7, #12]
 8016f44:	60b9      	str	r1, [r7, #8]
 8016f46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016f48:	68fb      	ldr	r3, [r7, #12]
 8016f4a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d10a      	bne.n	8016f68 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8016f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f56:	f383 8811 	msr	BASEPRI, r3
 8016f5a:	f3bf 8f6f 	isb	sy
 8016f5e:	f3bf 8f4f 	dsb	sy
 8016f62:	623b      	str	r3, [r7, #32]
}
 8016f64:	bf00      	nop
 8016f66:	e7fe      	b.n	8016f66 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016f68:	68bb      	ldr	r3, [r7, #8]
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d103      	bne.n	8016f76 <xQueueReceiveFromISR+0x3a>
 8016f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d101      	bne.n	8016f7a <xQueueReceiveFromISR+0x3e>
 8016f76:	2301      	movs	r3, #1
 8016f78:	e000      	b.n	8016f7c <xQueueReceiveFromISR+0x40>
 8016f7a:	2300      	movs	r3, #0
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d10a      	bne.n	8016f96 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8016f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f84:	f383 8811 	msr	BASEPRI, r3
 8016f88:	f3bf 8f6f 	isb	sy
 8016f8c:	f3bf 8f4f 	dsb	sy
 8016f90:	61fb      	str	r3, [r7, #28]
}
 8016f92:	bf00      	nop
 8016f94:	e7fe      	b.n	8016f94 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016f96:	f002 f91f 	bl	80191d8 <vPortValidateInterruptPriority>
	__asm volatile
 8016f9a:	f3ef 8211 	mrs	r2, BASEPRI
 8016f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fa2:	f383 8811 	msr	BASEPRI, r3
 8016fa6:	f3bf 8f6f 	isb	sy
 8016faa:	f3bf 8f4f 	dsb	sy
 8016fae:	61ba      	str	r2, [r7, #24]
 8016fb0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8016fb2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016fba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d02f      	beq.n	8017022 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8016fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016fc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016fcc:	68b9      	ldr	r1, [r7, #8]
 8016fce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016fd0:	f000 f8d9 	bl	8017186 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fd6:	1e5a      	subs	r2, r3, #1
 8016fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fda:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8016fdc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016fe4:	d112      	bne.n	801700c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fe8:	691b      	ldr	r3, [r3, #16]
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d016      	beq.n	801701c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ff0:	3310      	adds	r3, #16
 8016ff2:	4618      	mov	r0, r3
 8016ff4:	f000 ffe4 	bl	8017fc0 <xTaskRemoveFromEventList>
 8016ff8:	4603      	mov	r3, r0
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d00e      	beq.n	801701c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	2b00      	cmp	r3, #0
 8017002:	d00b      	beq.n	801701c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	2201      	movs	r2, #1
 8017008:	601a      	str	r2, [r3, #0]
 801700a:	e007      	b.n	801701c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801700c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017010:	3301      	adds	r3, #1
 8017012:	b2db      	uxtb	r3, r3
 8017014:	b25a      	sxtb	r2, r3
 8017016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801701c:	2301      	movs	r3, #1
 801701e:	637b      	str	r3, [r7, #52]	; 0x34
 8017020:	e001      	b.n	8017026 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8017022:	2300      	movs	r3, #0
 8017024:	637b      	str	r3, [r7, #52]	; 0x34
 8017026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017028:	613b      	str	r3, [r7, #16]
	__asm volatile
 801702a:	693b      	ldr	r3, [r7, #16]
 801702c:	f383 8811 	msr	BASEPRI, r3
}
 8017030:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017034:	4618      	mov	r0, r3
 8017036:	3738      	adds	r7, #56	; 0x38
 8017038:	46bd      	mov	sp, r7
 801703a:	bd80      	pop	{r7, pc}

0801703c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801703c:	b580      	push	{r7, lr}
 801703e:	b084      	sub	sp, #16
 8017040:	af00      	add	r7, sp, #0
 8017042:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017048:	68fb      	ldr	r3, [r7, #12]
 801704a:	2b00      	cmp	r3, #0
 801704c:	d10a      	bne.n	8017064 <vQueueDelete+0x28>
	__asm volatile
 801704e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017052:	f383 8811 	msr	BASEPRI, r3
 8017056:	f3bf 8f6f 	isb	sy
 801705a:	f3bf 8f4f 	dsb	sy
 801705e:	60bb      	str	r3, [r7, #8]
}
 8017060:	bf00      	nop
 8017062:	e7fe      	b.n	8017062 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8017064:	68f8      	ldr	r0, [r7, #12]
 8017066:	f000 f95f 	bl	8017328 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801706a:	68fb      	ldr	r3, [r7, #12]
 801706c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8017070:	2b00      	cmp	r3, #0
 8017072:	d102      	bne.n	801707a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8017074:	68f8      	ldr	r0, [r7, #12]
 8017076:	f002 f9bb 	bl	80193f0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801707a:	bf00      	nop
 801707c:	3710      	adds	r7, #16
 801707e:	46bd      	mov	sp, r7
 8017080:	bd80      	pop	{r7, pc}

08017082 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8017082:	b480      	push	{r7}
 8017084:	b085      	sub	sp, #20
 8017086:	af00      	add	r7, sp, #0
 8017088:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801708e:	2b00      	cmp	r3, #0
 8017090:	d006      	beq.n	80170a0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801709c:	60fb      	str	r3, [r7, #12]
 801709e:	e001      	b.n	80170a4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80170a0:	2300      	movs	r3, #0
 80170a2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80170a4:	68fb      	ldr	r3, [r7, #12]
	}
 80170a6:	4618      	mov	r0, r3
 80170a8:	3714      	adds	r7, #20
 80170aa:	46bd      	mov	sp, r7
 80170ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170b0:	4770      	bx	lr

080170b2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80170b2:	b580      	push	{r7, lr}
 80170b4:	b086      	sub	sp, #24
 80170b6:	af00      	add	r7, sp, #0
 80170b8:	60f8      	str	r0, [r7, #12]
 80170ba:	60b9      	str	r1, [r7, #8]
 80170bc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80170be:	2300      	movs	r3, #0
 80170c0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80170c2:	68fb      	ldr	r3, [r7, #12]
 80170c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80170c6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80170c8:	68fb      	ldr	r3, [r7, #12]
 80170ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	d10d      	bne.n	80170ec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	681b      	ldr	r3, [r3, #0]
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d14d      	bne.n	8017174 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80170d8:	68fb      	ldr	r3, [r7, #12]
 80170da:	689b      	ldr	r3, [r3, #8]
 80170dc:	4618      	mov	r0, r3
 80170de:	f001 f9c7 	bl	8018470 <xTaskPriorityDisinherit>
 80170e2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	2200      	movs	r2, #0
 80170e8:	609a      	str	r2, [r3, #8]
 80170ea:	e043      	b.n	8017174 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d119      	bne.n	8017126 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	6858      	ldr	r0, [r3, #4]
 80170f6:	68fb      	ldr	r3, [r7, #12]
 80170f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170fa:	461a      	mov	r2, r3
 80170fc:	68b9      	ldr	r1, [r7, #8]
 80170fe:	f004 f9d3 	bl	801b4a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	685a      	ldr	r2, [r3, #4]
 8017106:	68fb      	ldr	r3, [r7, #12]
 8017108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801710a:	441a      	add	r2, r3
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017110:	68fb      	ldr	r3, [r7, #12]
 8017112:	685a      	ldr	r2, [r3, #4]
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	689b      	ldr	r3, [r3, #8]
 8017118:	429a      	cmp	r2, r3
 801711a:	d32b      	bcc.n	8017174 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801711c:	68fb      	ldr	r3, [r7, #12]
 801711e:	681a      	ldr	r2, [r3, #0]
 8017120:	68fb      	ldr	r3, [r7, #12]
 8017122:	605a      	str	r2, [r3, #4]
 8017124:	e026      	b.n	8017174 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017126:	68fb      	ldr	r3, [r7, #12]
 8017128:	68d8      	ldr	r0, [r3, #12]
 801712a:	68fb      	ldr	r3, [r7, #12]
 801712c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801712e:	461a      	mov	r2, r3
 8017130:	68b9      	ldr	r1, [r7, #8]
 8017132:	f004 f9b9 	bl	801b4a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	68da      	ldr	r2, [r3, #12]
 801713a:	68fb      	ldr	r3, [r7, #12]
 801713c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801713e:	425b      	negs	r3, r3
 8017140:	441a      	add	r2, r3
 8017142:	68fb      	ldr	r3, [r7, #12]
 8017144:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017146:	68fb      	ldr	r3, [r7, #12]
 8017148:	68da      	ldr	r2, [r3, #12]
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	681b      	ldr	r3, [r3, #0]
 801714e:	429a      	cmp	r2, r3
 8017150:	d207      	bcs.n	8017162 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017152:	68fb      	ldr	r3, [r7, #12]
 8017154:	689a      	ldr	r2, [r3, #8]
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801715a:	425b      	negs	r3, r3
 801715c:	441a      	add	r2, r3
 801715e:	68fb      	ldr	r3, [r7, #12]
 8017160:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	2b02      	cmp	r3, #2
 8017166:	d105      	bne.n	8017174 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017168:	693b      	ldr	r3, [r7, #16]
 801716a:	2b00      	cmp	r3, #0
 801716c:	d002      	beq.n	8017174 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801716e:	693b      	ldr	r3, [r7, #16]
 8017170:	3b01      	subs	r3, #1
 8017172:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017174:	693b      	ldr	r3, [r7, #16]
 8017176:	1c5a      	adds	r2, r3, #1
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801717c:	697b      	ldr	r3, [r7, #20]
}
 801717e:	4618      	mov	r0, r3
 8017180:	3718      	adds	r7, #24
 8017182:	46bd      	mov	sp, r7
 8017184:	bd80      	pop	{r7, pc}

08017186 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017186:	b580      	push	{r7, lr}
 8017188:	b082      	sub	sp, #8
 801718a:	af00      	add	r7, sp, #0
 801718c:	6078      	str	r0, [r7, #4]
 801718e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017194:	2b00      	cmp	r3, #0
 8017196:	d018      	beq.n	80171ca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	68da      	ldr	r2, [r3, #12]
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171a0:	441a      	add	r2, r3
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	68da      	ldr	r2, [r3, #12]
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	689b      	ldr	r3, [r3, #8]
 80171ae:	429a      	cmp	r2, r3
 80171b0:	d303      	bcc.n	80171ba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	681a      	ldr	r2, [r3, #0]
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	68d9      	ldr	r1, [r3, #12]
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171c2:	461a      	mov	r2, r3
 80171c4:	6838      	ldr	r0, [r7, #0]
 80171c6:	f004 f96f 	bl	801b4a8 <memcpy>
	}
}
 80171ca:	bf00      	nop
 80171cc:	3708      	adds	r7, #8
 80171ce:	46bd      	mov	sp, r7
 80171d0:	bd80      	pop	{r7, pc}

080171d2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80171d2:	b580      	push	{r7, lr}
 80171d4:	b084      	sub	sp, #16
 80171d6:	af00      	add	r7, sp, #0
 80171d8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80171da:	f001 ff1b 	bl	8019014 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80171e4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80171e6:	e011      	b.n	801720c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d012      	beq.n	8017216 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	3324      	adds	r3, #36	; 0x24
 80171f4:	4618      	mov	r0, r3
 80171f6:	f000 fee3 	bl	8017fc0 <xTaskRemoveFromEventList>
 80171fa:	4603      	mov	r3, r0
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d001      	beq.n	8017204 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017200:	f000 ffba 	bl	8018178 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017204:	7bfb      	ldrb	r3, [r7, #15]
 8017206:	3b01      	subs	r3, #1
 8017208:	b2db      	uxtb	r3, r3
 801720a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801720c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017210:	2b00      	cmp	r3, #0
 8017212:	dce9      	bgt.n	80171e8 <prvUnlockQueue+0x16>
 8017214:	e000      	b.n	8017218 <prvUnlockQueue+0x46>
					break;
 8017216:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	22ff      	movs	r2, #255	; 0xff
 801721c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8017220:	f001 ff28 	bl	8019074 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017224:	f001 fef6 	bl	8019014 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801722e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017230:	e011      	b.n	8017256 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	691b      	ldr	r3, [r3, #16]
 8017236:	2b00      	cmp	r3, #0
 8017238:	d012      	beq.n	8017260 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	3310      	adds	r3, #16
 801723e:	4618      	mov	r0, r3
 8017240:	f000 febe 	bl	8017fc0 <xTaskRemoveFromEventList>
 8017244:	4603      	mov	r3, r0
 8017246:	2b00      	cmp	r3, #0
 8017248:	d001      	beq.n	801724e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801724a:	f000 ff95 	bl	8018178 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801724e:	7bbb      	ldrb	r3, [r7, #14]
 8017250:	3b01      	subs	r3, #1
 8017252:	b2db      	uxtb	r3, r3
 8017254:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017256:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801725a:	2b00      	cmp	r3, #0
 801725c:	dce9      	bgt.n	8017232 <prvUnlockQueue+0x60>
 801725e:	e000      	b.n	8017262 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017260:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	22ff      	movs	r2, #255	; 0xff
 8017266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801726a:	f001 ff03 	bl	8019074 <vPortExitCritical>
}
 801726e:	bf00      	nop
 8017270:	3710      	adds	r7, #16
 8017272:	46bd      	mov	sp, r7
 8017274:	bd80      	pop	{r7, pc}

08017276 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017276:	b580      	push	{r7, lr}
 8017278:	b084      	sub	sp, #16
 801727a:	af00      	add	r7, sp, #0
 801727c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801727e:	f001 fec9 	bl	8019014 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017286:	2b00      	cmp	r3, #0
 8017288:	d102      	bne.n	8017290 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801728a:	2301      	movs	r3, #1
 801728c:	60fb      	str	r3, [r7, #12]
 801728e:	e001      	b.n	8017294 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017290:	2300      	movs	r3, #0
 8017292:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017294:	f001 feee 	bl	8019074 <vPortExitCritical>

	return xReturn;
 8017298:	68fb      	ldr	r3, [r7, #12]
}
 801729a:	4618      	mov	r0, r3
 801729c:	3710      	adds	r7, #16
 801729e:	46bd      	mov	sp, r7
 80172a0:	bd80      	pop	{r7, pc}

080172a2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80172a2:	b580      	push	{r7, lr}
 80172a4:	b084      	sub	sp, #16
 80172a6:	af00      	add	r7, sp, #0
 80172a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80172aa:	f001 feb3 	bl	8019014 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80172b6:	429a      	cmp	r2, r3
 80172b8:	d102      	bne.n	80172c0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80172ba:	2301      	movs	r3, #1
 80172bc:	60fb      	str	r3, [r7, #12]
 80172be:	e001      	b.n	80172c4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80172c0:	2300      	movs	r3, #0
 80172c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80172c4:	f001 fed6 	bl	8019074 <vPortExitCritical>

	return xReturn;
 80172c8:	68fb      	ldr	r3, [r7, #12]
}
 80172ca:	4618      	mov	r0, r3
 80172cc:	3710      	adds	r7, #16
 80172ce:	46bd      	mov	sp, r7
 80172d0:	bd80      	pop	{r7, pc}
	...

080172d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80172d4:	b480      	push	{r7}
 80172d6:	b085      	sub	sp, #20
 80172d8:	af00      	add	r7, sp, #0
 80172da:	6078      	str	r0, [r7, #4]
 80172dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80172de:	2300      	movs	r3, #0
 80172e0:	60fb      	str	r3, [r7, #12]
 80172e2:	e014      	b.n	801730e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80172e4:	4a0f      	ldr	r2, [pc, #60]	; (8017324 <vQueueAddToRegistry+0x50>)
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	d10b      	bne.n	8017308 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80172f0:	490c      	ldr	r1, [pc, #48]	; (8017324 <vQueueAddToRegistry+0x50>)
 80172f2:	68fb      	ldr	r3, [r7, #12]
 80172f4:	683a      	ldr	r2, [r7, #0]
 80172f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80172fa:	4a0a      	ldr	r2, [pc, #40]	; (8017324 <vQueueAddToRegistry+0x50>)
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	00db      	lsls	r3, r3, #3
 8017300:	4413      	add	r3, r2
 8017302:	687a      	ldr	r2, [r7, #4]
 8017304:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8017306:	e006      	b.n	8017316 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017308:	68fb      	ldr	r3, [r7, #12]
 801730a:	3301      	adds	r3, #1
 801730c:	60fb      	str	r3, [r7, #12]
 801730e:	68fb      	ldr	r3, [r7, #12]
 8017310:	2b07      	cmp	r3, #7
 8017312:	d9e7      	bls.n	80172e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017314:	bf00      	nop
 8017316:	bf00      	nop
 8017318:	3714      	adds	r7, #20
 801731a:	46bd      	mov	sp, r7
 801731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017320:	4770      	bx	lr
 8017322:	bf00      	nop
 8017324:	200076ac 	.word	0x200076ac

08017328 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8017328:	b480      	push	{r7}
 801732a:	b085      	sub	sp, #20
 801732c:	af00      	add	r7, sp, #0
 801732e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017330:	2300      	movs	r3, #0
 8017332:	60fb      	str	r3, [r7, #12]
 8017334:	e016      	b.n	8017364 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8017336:	4a10      	ldr	r2, [pc, #64]	; (8017378 <vQueueUnregisterQueue+0x50>)
 8017338:	68fb      	ldr	r3, [r7, #12]
 801733a:	00db      	lsls	r3, r3, #3
 801733c:	4413      	add	r3, r2
 801733e:	685b      	ldr	r3, [r3, #4]
 8017340:	687a      	ldr	r2, [r7, #4]
 8017342:	429a      	cmp	r2, r3
 8017344:	d10b      	bne.n	801735e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8017346:	4a0c      	ldr	r2, [pc, #48]	; (8017378 <vQueueUnregisterQueue+0x50>)
 8017348:	68fb      	ldr	r3, [r7, #12]
 801734a:	2100      	movs	r1, #0
 801734c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8017350:	4a09      	ldr	r2, [pc, #36]	; (8017378 <vQueueUnregisterQueue+0x50>)
 8017352:	68fb      	ldr	r3, [r7, #12]
 8017354:	00db      	lsls	r3, r3, #3
 8017356:	4413      	add	r3, r2
 8017358:	2200      	movs	r2, #0
 801735a:	605a      	str	r2, [r3, #4]
				break;
 801735c:	e006      	b.n	801736c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801735e:	68fb      	ldr	r3, [r7, #12]
 8017360:	3301      	adds	r3, #1
 8017362:	60fb      	str	r3, [r7, #12]
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	2b07      	cmp	r3, #7
 8017368:	d9e5      	bls.n	8017336 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801736a:	bf00      	nop
 801736c:	bf00      	nop
 801736e:	3714      	adds	r7, #20
 8017370:	46bd      	mov	sp, r7
 8017372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017376:	4770      	bx	lr
 8017378:	200076ac 	.word	0x200076ac

0801737c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801737c:	b580      	push	{r7, lr}
 801737e:	b086      	sub	sp, #24
 8017380:	af00      	add	r7, sp, #0
 8017382:	60f8      	str	r0, [r7, #12]
 8017384:	60b9      	str	r1, [r7, #8]
 8017386:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8017388:	68fb      	ldr	r3, [r7, #12]
 801738a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801738c:	f001 fe42 	bl	8019014 <vPortEnterCritical>
 8017390:	697b      	ldr	r3, [r7, #20]
 8017392:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017396:	b25b      	sxtb	r3, r3
 8017398:	f1b3 3fff 	cmp.w	r3, #4294967295
 801739c:	d103      	bne.n	80173a6 <vQueueWaitForMessageRestricted+0x2a>
 801739e:	697b      	ldr	r3, [r7, #20]
 80173a0:	2200      	movs	r2, #0
 80173a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80173a6:	697b      	ldr	r3, [r7, #20]
 80173a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80173ac:	b25b      	sxtb	r3, r3
 80173ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80173b2:	d103      	bne.n	80173bc <vQueueWaitForMessageRestricted+0x40>
 80173b4:	697b      	ldr	r3, [r7, #20]
 80173b6:	2200      	movs	r2, #0
 80173b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80173bc:	f001 fe5a 	bl	8019074 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80173c0:	697b      	ldr	r3, [r7, #20]
 80173c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d106      	bne.n	80173d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80173c8:	697b      	ldr	r3, [r7, #20]
 80173ca:	3324      	adds	r3, #36	; 0x24
 80173cc:	687a      	ldr	r2, [r7, #4]
 80173ce:	68b9      	ldr	r1, [r7, #8]
 80173d0:	4618      	mov	r0, r3
 80173d2:	f000 fdc9 	bl	8017f68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80173d6:	6978      	ldr	r0, [r7, #20]
 80173d8:	f7ff fefb 	bl	80171d2 <prvUnlockQueue>
	}
 80173dc:	bf00      	nop
 80173de:	3718      	adds	r7, #24
 80173e0:	46bd      	mov	sp, r7
 80173e2:	bd80      	pop	{r7, pc}

080173e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80173e4:	b580      	push	{r7, lr}
 80173e6:	b08e      	sub	sp, #56	; 0x38
 80173e8:	af04      	add	r7, sp, #16
 80173ea:	60f8      	str	r0, [r7, #12]
 80173ec:	60b9      	str	r1, [r7, #8]
 80173ee:	607a      	str	r2, [r7, #4]
 80173f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80173f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	d10a      	bne.n	801740e <xTaskCreateStatic+0x2a>
	__asm volatile
 80173f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173fc:	f383 8811 	msr	BASEPRI, r3
 8017400:	f3bf 8f6f 	isb	sy
 8017404:	f3bf 8f4f 	dsb	sy
 8017408:	623b      	str	r3, [r7, #32]
}
 801740a:	bf00      	nop
 801740c:	e7fe      	b.n	801740c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801740e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017410:	2b00      	cmp	r3, #0
 8017412:	d10a      	bne.n	801742a <xTaskCreateStatic+0x46>
	__asm volatile
 8017414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017418:	f383 8811 	msr	BASEPRI, r3
 801741c:	f3bf 8f6f 	isb	sy
 8017420:	f3bf 8f4f 	dsb	sy
 8017424:	61fb      	str	r3, [r7, #28]
}
 8017426:	bf00      	nop
 8017428:	e7fe      	b.n	8017428 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801742a:	23bc      	movs	r3, #188	; 0xbc
 801742c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801742e:	693b      	ldr	r3, [r7, #16]
 8017430:	2bbc      	cmp	r3, #188	; 0xbc
 8017432:	d00a      	beq.n	801744a <xTaskCreateStatic+0x66>
	__asm volatile
 8017434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017438:	f383 8811 	msr	BASEPRI, r3
 801743c:	f3bf 8f6f 	isb	sy
 8017440:	f3bf 8f4f 	dsb	sy
 8017444:	61bb      	str	r3, [r7, #24]
}
 8017446:	bf00      	nop
 8017448:	e7fe      	b.n	8017448 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801744a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801744c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801744e:	2b00      	cmp	r3, #0
 8017450:	d01e      	beq.n	8017490 <xTaskCreateStatic+0xac>
 8017452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017454:	2b00      	cmp	r3, #0
 8017456:	d01b      	beq.n	8017490 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801745a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801745e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017460:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017464:	2202      	movs	r2, #2
 8017466:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801746a:	2300      	movs	r3, #0
 801746c:	9303      	str	r3, [sp, #12]
 801746e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017470:	9302      	str	r3, [sp, #8]
 8017472:	f107 0314 	add.w	r3, r7, #20
 8017476:	9301      	str	r3, [sp, #4]
 8017478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801747a:	9300      	str	r3, [sp, #0]
 801747c:	683b      	ldr	r3, [r7, #0]
 801747e:	687a      	ldr	r2, [r7, #4]
 8017480:	68b9      	ldr	r1, [r7, #8]
 8017482:	68f8      	ldr	r0, [r7, #12]
 8017484:	f000 f850 	bl	8017528 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017488:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801748a:	f000 f8f3 	bl	8017674 <prvAddNewTaskToReadyList>
 801748e:	e001      	b.n	8017494 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8017490:	2300      	movs	r3, #0
 8017492:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017494:	697b      	ldr	r3, [r7, #20]
	}
 8017496:	4618      	mov	r0, r3
 8017498:	3728      	adds	r7, #40	; 0x28
 801749a:	46bd      	mov	sp, r7
 801749c:	bd80      	pop	{r7, pc}

0801749e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801749e:	b580      	push	{r7, lr}
 80174a0:	b08c      	sub	sp, #48	; 0x30
 80174a2:	af04      	add	r7, sp, #16
 80174a4:	60f8      	str	r0, [r7, #12]
 80174a6:	60b9      	str	r1, [r7, #8]
 80174a8:	603b      	str	r3, [r7, #0]
 80174aa:	4613      	mov	r3, r2
 80174ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80174ae:	88fb      	ldrh	r3, [r7, #6]
 80174b0:	009b      	lsls	r3, r3, #2
 80174b2:	4618      	mov	r0, r3
 80174b4:	f001 fed0 	bl	8019258 <pvPortMalloc>
 80174b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80174ba:	697b      	ldr	r3, [r7, #20]
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d00e      	beq.n	80174de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80174c0:	20bc      	movs	r0, #188	; 0xbc
 80174c2:	f001 fec9 	bl	8019258 <pvPortMalloc>
 80174c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80174c8:	69fb      	ldr	r3, [r7, #28]
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d003      	beq.n	80174d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80174ce:	69fb      	ldr	r3, [r7, #28]
 80174d0:	697a      	ldr	r2, [r7, #20]
 80174d2:	631a      	str	r2, [r3, #48]	; 0x30
 80174d4:	e005      	b.n	80174e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80174d6:	6978      	ldr	r0, [r7, #20]
 80174d8:	f001 ff8a 	bl	80193f0 <vPortFree>
 80174dc:	e001      	b.n	80174e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80174de:	2300      	movs	r3, #0
 80174e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80174e2:	69fb      	ldr	r3, [r7, #28]
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d017      	beq.n	8017518 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80174e8:	69fb      	ldr	r3, [r7, #28]
 80174ea:	2200      	movs	r2, #0
 80174ec:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80174f0:	88fa      	ldrh	r2, [r7, #6]
 80174f2:	2300      	movs	r3, #0
 80174f4:	9303      	str	r3, [sp, #12]
 80174f6:	69fb      	ldr	r3, [r7, #28]
 80174f8:	9302      	str	r3, [sp, #8]
 80174fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174fc:	9301      	str	r3, [sp, #4]
 80174fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017500:	9300      	str	r3, [sp, #0]
 8017502:	683b      	ldr	r3, [r7, #0]
 8017504:	68b9      	ldr	r1, [r7, #8]
 8017506:	68f8      	ldr	r0, [r7, #12]
 8017508:	f000 f80e 	bl	8017528 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801750c:	69f8      	ldr	r0, [r7, #28]
 801750e:	f000 f8b1 	bl	8017674 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017512:	2301      	movs	r3, #1
 8017514:	61bb      	str	r3, [r7, #24]
 8017516:	e002      	b.n	801751e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017518:	f04f 33ff 	mov.w	r3, #4294967295
 801751c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801751e:	69bb      	ldr	r3, [r7, #24]
	}
 8017520:	4618      	mov	r0, r3
 8017522:	3720      	adds	r7, #32
 8017524:	46bd      	mov	sp, r7
 8017526:	bd80      	pop	{r7, pc}

08017528 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017528:	b580      	push	{r7, lr}
 801752a:	b088      	sub	sp, #32
 801752c:	af00      	add	r7, sp, #0
 801752e:	60f8      	str	r0, [r7, #12]
 8017530:	60b9      	str	r1, [r7, #8]
 8017532:	607a      	str	r2, [r7, #4]
 8017534:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017538:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	009b      	lsls	r3, r3, #2
 801753e:	461a      	mov	r2, r3
 8017540:	21a5      	movs	r1, #165	; 0xa5
 8017542:	f003 ffd9 	bl	801b4f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8017550:	3b01      	subs	r3, #1
 8017552:	009b      	lsls	r3, r3, #2
 8017554:	4413      	add	r3, r2
 8017556:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017558:	69bb      	ldr	r3, [r7, #24]
 801755a:	f023 0307 	bic.w	r3, r3, #7
 801755e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017560:	69bb      	ldr	r3, [r7, #24]
 8017562:	f003 0307 	and.w	r3, r3, #7
 8017566:	2b00      	cmp	r3, #0
 8017568:	d00a      	beq.n	8017580 <prvInitialiseNewTask+0x58>
	__asm volatile
 801756a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801756e:	f383 8811 	msr	BASEPRI, r3
 8017572:	f3bf 8f6f 	isb	sy
 8017576:	f3bf 8f4f 	dsb	sy
 801757a:	617b      	str	r3, [r7, #20]
}
 801757c:	bf00      	nop
 801757e:	e7fe      	b.n	801757e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017580:	68bb      	ldr	r3, [r7, #8]
 8017582:	2b00      	cmp	r3, #0
 8017584:	d01f      	beq.n	80175c6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017586:	2300      	movs	r3, #0
 8017588:	61fb      	str	r3, [r7, #28]
 801758a:	e012      	b.n	80175b2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801758c:	68ba      	ldr	r2, [r7, #8]
 801758e:	69fb      	ldr	r3, [r7, #28]
 8017590:	4413      	add	r3, r2
 8017592:	7819      	ldrb	r1, [r3, #0]
 8017594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017596:	69fb      	ldr	r3, [r7, #28]
 8017598:	4413      	add	r3, r2
 801759a:	3334      	adds	r3, #52	; 0x34
 801759c:	460a      	mov	r2, r1
 801759e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80175a0:	68ba      	ldr	r2, [r7, #8]
 80175a2:	69fb      	ldr	r3, [r7, #28]
 80175a4:	4413      	add	r3, r2
 80175a6:	781b      	ldrb	r3, [r3, #0]
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	d006      	beq.n	80175ba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80175ac:	69fb      	ldr	r3, [r7, #28]
 80175ae:	3301      	adds	r3, #1
 80175b0:	61fb      	str	r3, [r7, #28]
 80175b2:	69fb      	ldr	r3, [r7, #28]
 80175b4:	2b0f      	cmp	r3, #15
 80175b6:	d9e9      	bls.n	801758c <prvInitialiseNewTask+0x64>
 80175b8:	e000      	b.n	80175bc <prvInitialiseNewTask+0x94>
			{
				break;
 80175ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80175bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175be:	2200      	movs	r2, #0
 80175c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80175c4:	e003      	b.n	80175ce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80175c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175c8:	2200      	movs	r2, #0
 80175ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80175ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175d0:	2b37      	cmp	r3, #55	; 0x37
 80175d2:	d901      	bls.n	80175d8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80175d4:	2337      	movs	r3, #55	; 0x37
 80175d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80175d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80175dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80175de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80175e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80175e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175e6:	2200      	movs	r2, #0
 80175e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80175ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175ec:	3304      	adds	r3, #4
 80175ee:	4618      	mov	r0, r3
 80175f0:	f7fe fe56 	bl	80162a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80175f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175f6:	3318      	adds	r3, #24
 80175f8:	4618      	mov	r0, r3
 80175fa:	f7fe fe51 	bl	80162a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80175fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017602:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017606:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801760a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801760c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801760e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017612:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017616:	2200      	movs	r2, #0
 8017618:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801761c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801761e:	2200      	movs	r2, #0
 8017620:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8017624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017626:	3354      	adds	r3, #84	; 0x54
 8017628:	2260      	movs	r2, #96	; 0x60
 801762a:	2100      	movs	r1, #0
 801762c:	4618      	mov	r0, r3
 801762e:	f003 ff63 	bl	801b4f8 <memset>
 8017632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017634:	4a0c      	ldr	r2, [pc, #48]	; (8017668 <prvInitialiseNewTask+0x140>)
 8017636:	659a      	str	r2, [r3, #88]	; 0x58
 8017638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801763a:	4a0c      	ldr	r2, [pc, #48]	; (801766c <prvInitialiseNewTask+0x144>)
 801763c:	65da      	str	r2, [r3, #92]	; 0x5c
 801763e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017640:	4a0b      	ldr	r2, [pc, #44]	; (8017670 <prvInitialiseNewTask+0x148>)
 8017642:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017644:	683a      	ldr	r2, [r7, #0]
 8017646:	68f9      	ldr	r1, [r7, #12]
 8017648:	69b8      	ldr	r0, [r7, #24]
 801764a:	f001 fbb7 	bl	8018dbc <pxPortInitialiseStack>
 801764e:	4602      	mov	r2, r0
 8017650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017652:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017656:	2b00      	cmp	r3, #0
 8017658:	d002      	beq.n	8017660 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801765a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801765c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801765e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017660:	bf00      	nop
 8017662:	3720      	adds	r7, #32
 8017664:	46bd      	mov	sp, r7
 8017666:	bd80      	pop	{r7, pc}
 8017668:	080230ec 	.word	0x080230ec
 801766c:	0802310c 	.word	0x0802310c
 8017670:	080230cc 	.word	0x080230cc

08017674 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017674:	b580      	push	{r7, lr}
 8017676:	b082      	sub	sp, #8
 8017678:	af00      	add	r7, sp, #0
 801767a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801767c:	f001 fcca 	bl	8019014 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017680:	4b2d      	ldr	r3, [pc, #180]	; (8017738 <prvAddNewTaskToReadyList+0xc4>)
 8017682:	681b      	ldr	r3, [r3, #0]
 8017684:	3301      	adds	r3, #1
 8017686:	4a2c      	ldr	r2, [pc, #176]	; (8017738 <prvAddNewTaskToReadyList+0xc4>)
 8017688:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801768a:	4b2c      	ldr	r3, [pc, #176]	; (801773c <prvAddNewTaskToReadyList+0xc8>)
 801768c:	681b      	ldr	r3, [r3, #0]
 801768e:	2b00      	cmp	r3, #0
 8017690:	d109      	bne.n	80176a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8017692:	4a2a      	ldr	r2, [pc, #168]	; (801773c <prvAddNewTaskToReadyList+0xc8>)
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017698:	4b27      	ldr	r3, [pc, #156]	; (8017738 <prvAddNewTaskToReadyList+0xc4>)
 801769a:	681b      	ldr	r3, [r3, #0]
 801769c:	2b01      	cmp	r3, #1
 801769e:	d110      	bne.n	80176c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80176a0:	f000 fd8e 	bl	80181c0 <prvInitialiseTaskLists>
 80176a4:	e00d      	b.n	80176c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80176a6:	4b26      	ldr	r3, [pc, #152]	; (8017740 <prvAddNewTaskToReadyList+0xcc>)
 80176a8:	681b      	ldr	r3, [r3, #0]
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	d109      	bne.n	80176c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80176ae:	4b23      	ldr	r3, [pc, #140]	; (801773c <prvAddNewTaskToReadyList+0xc8>)
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176b8:	429a      	cmp	r2, r3
 80176ba:	d802      	bhi.n	80176c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80176bc:	4a1f      	ldr	r2, [pc, #124]	; (801773c <prvAddNewTaskToReadyList+0xc8>)
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80176c2:	4b20      	ldr	r3, [pc, #128]	; (8017744 <prvAddNewTaskToReadyList+0xd0>)
 80176c4:	681b      	ldr	r3, [r3, #0]
 80176c6:	3301      	adds	r3, #1
 80176c8:	4a1e      	ldr	r2, [pc, #120]	; (8017744 <prvAddNewTaskToReadyList+0xd0>)
 80176ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80176cc:	4b1d      	ldr	r3, [pc, #116]	; (8017744 <prvAddNewTaskToReadyList+0xd0>)
 80176ce:	681a      	ldr	r2, [r3, #0]
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176d8:	4b1b      	ldr	r3, [pc, #108]	; (8017748 <prvAddNewTaskToReadyList+0xd4>)
 80176da:	681b      	ldr	r3, [r3, #0]
 80176dc:	429a      	cmp	r2, r3
 80176de:	d903      	bls.n	80176e8 <prvAddNewTaskToReadyList+0x74>
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176e4:	4a18      	ldr	r2, [pc, #96]	; (8017748 <prvAddNewTaskToReadyList+0xd4>)
 80176e6:	6013      	str	r3, [r2, #0]
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176ec:	4613      	mov	r3, r2
 80176ee:	009b      	lsls	r3, r3, #2
 80176f0:	4413      	add	r3, r2
 80176f2:	009b      	lsls	r3, r3, #2
 80176f4:	4a15      	ldr	r2, [pc, #84]	; (801774c <prvAddNewTaskToReadyList+0xd8>)
 80176f6:	441a      	add	r2, r3
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	3304      	adds	r3, #4
 80176fc:	4619      	mov	r1, r3
 80176fe:	4610      	mov	r0, r2
 8017700:	f7fe fddb 	bl	80162ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017704:	f001 fcb6 	bl	8019074 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8017708:	4b0d      	ldr	r3, [pc, #52]	; (8017740 <prvAddNewTaskToReadyList+0xcc>)
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	2b00      	cmp	r3, #0
 801770e:	d00e      	beq.n	801772e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017710:	4b0a      	ldr	r3, [pc, #40]	; (801773c <prvAddNewTaskToReadyList+0xc8>)
 8017712:	681b      	ldr	r3, [r3, #0]
 8017714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801771a:	429a      	cmp	r2, r3
 801771c:	d207      	bcs.n	801772e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801771e:	4b0c      	ldr	r3, [pc, #48]	; (8017750 <prvAddNewTaskToReadyList+0xdc>)
 8017720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017724:	601a      	str	r2, [r3, #0]
 8017726:	f3bf 8f4f 	dsb	sy
 801772a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801772e:	bf00      	nop
 8017730:	3708      	adds	r7, #8
 8017732:	46bd      	mov	sp, r7
 8017734:	bd80      	pop	{r7, pc}
 8017736:	bf00      	nop
 8017738:	200014b8 	.word	0x200014b8
 801773c:	20000fe4 	.word	0x20000fe4
 8017740:	200014c4 	.word	0x200014c4
 8017744:	200014d4 	.word	0x200014d4
 8017748:	200014c0 	.word	0x200014c0
 801774c:	20000fe8 	.word	0x20000fe8
 8017750:	e000ed04 	.word	0xe000ed04

08017754 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8017754:	b580      	push	{r7, lr}
 8017756:	b084      	sub	sp, #16
 8017758:	af00      	add	r7, sp, #0
 801775a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801775c:	f001 fc5a 	bl	8019014 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	2b00      	cmp	r3, #0
 8017764:	d102      	bne.n	801776c <vTaskDelete+0x18>
 8017766:	4b2c      	ldr	r3, [pc, #176]	; (8017818 <vTaskDelete+0xc4>)
 8017768:	681b      	ldr	r3, [r3, #0]
 801776a:	e000      	b.n	801776e <vTaskDelete+0x1a>
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017770:	68fb      	ldr	r3, [r7, #12]
 8017772:	3304      	adds	r3, #4
 8017774:	4618      	mov	r0, r3
 8017776:	f7fe fdfd 	bl	8016374 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801777e:	2b00      	cmp	r3, #0
 8017780:	d004      	beq.n	801778c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	3318      	adds	r3, #24
 8017786:	4618      	mov	r0, r3
 8017788:	f7fe fdf4 	bl	8016374 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 801778c:	4b23      	ldr	r3, [pc, #140]	; (801781c <vTaskDelete+0xc8>)
 801778e:	681b      	ldr	r3, [r3, #0]
 8017790:	3301      	adds	r3, #1
 8017792:	4a22      	ldr	r2, [pc, #136]	; (801781c <vTaskDelete+0xc8>)
 8017794:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8017796:	4b20      	ldr	r3, [pc, #128]	; (8017818 <vTaskDelete+0xc4>)
 8017798:	681b      	ldr	r3, [r3, #0]
 801779a:	68fa      	ldr	r2, [r7, #12]
 801779c:	429a      	cmp	r2, r3
 801779e:	d10b      	bne.n	80177b8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80177a0:	68fb      	ldr	r3, [r7, #12]
 80177a2:	3304      	adds	r3, #4
 80177a4:	4619      	mov	r1, r3
 80177a6:	481e      	ldr	r0, [pc, #120]	; (8017820 <vTaskDelete+0xcc>)
 80177a8:	f7fe fd87 	bl	80162ba <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80177ac:	4b1d      	ldr	r3, [pc, #116]	; (8017824 <vTaskDelete+0xd0>)
 80177ae:	681b      	ldr	r3, [r3, #0]
 80177b0:	3301      	adds	r3, #1
 80177b2:	4a1c      	ldr	r2, [pc, #112]	; (8017824 <vTaskDelete+0xd0>)
 80177b4:	6013      	str	r3, [r2, #0]
 80177b6:	e009      	b.n	80177cc <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80177b8:	4b1b      	ldr	r3, [pc, #108]	; (8017828 <vTaskDelete+0xd4>)
 80177ba:	681b      	ldr	r3, [r3, #0]
 80177bc:	3b01      	subs	r3, #1
 80177be:	4a1a      	ldr	r2, [pc, #104]	; (8017828 <vTaskDelete+0xd4>)
 80177c0:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80177c2:	68f8      	ldr	r0, [r7, #12]
 80177c4:	f000 fd6a 	bl	801829c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80177c8:	f000 fd9c 	bl	8018304 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80177cc:	f001 fc52 	bl	8019074 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80177d0:	4b16      	ldr	r3, [pc, #88]	; (801782c <vTaskDelete+0xd8>)
 80177d2:	681b      	ldr	r3, [r3, #0]
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d01b      	beq.n	8017810 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80177d8:	4b0f      	ldr	r3, [pc, #60]	; (8017818 <vTaskDelete+0xc4>)
 80177da:	681b      	ldr	r3, [r3, #0]
 80177dc:	68fa      	ldr	r2, [r7, #12]
 80177de:	429a      	cmp	r2, r3
 80177e0:	d116      	bne.n	8017810 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80177e2:	4b13      	ldr	r3, [pc, #76]	; (8017830 <vTaskDelete+0xdc>)
 80177e4:	681b      	ldr	r3, [r3, #0]
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d00a      	beq.n	8017800 <vTaskDelete+0xac>
	__asm volatile
 80177ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177ee:	f383 8811 	msr	BASEPRI, r3
 80177f2:	f3bf 8f6f 	isb	sy
 80177f6:	f3bf 8f4f 	dsb	sy
 80177fa:	60bb      	str	r3, [r7, #8]
}
 80177fc:	bf00      	nop
 80177fe:	e7fe      	b.n	80177fe <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8017800:	4b0c      	ldr	r3, [pc, #48]	; (8017834 <vTaskDelete+0xe0>)
 8017802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017806:	601a      	str	r2, [r3, #0]
 8017808:	f3bf 8f4f 	dsb	sy
 801780c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017810:	bf00      	nop
 8017812:	3710      	adds	r7, #16
 8017814:	46bd      	mov	sp, r7
 8017816:	bd80      	pop	{r7, pc}
 8017818:	20000fe4 	.word	0x20000fe4
 801781c:	200014d4 	.word	0x200014d4
 8017820:	2000148c 	.word	0x2000148c
 8017824:	200014a0 	.word	0x200014a0
 8017828:	200014b8 	.word	0x200014b8
 801782c:	200014c4 	.word	0x200014c4
 8017830:	200014e0 	.word	0x200014e0
 8017834:	e000ed04 	.word	0xe000ed04

08017838 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017838:	b580      	push	{r7, lr}
 801783a:	b084      	sub	sp, #16
 801783c:	af00      	add	r7, sp, #0
 801783e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8017840:	2300      	movs	r3, #0
 8017842:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	2b00      	cmp	r3, #0
 8017848:	d017      	beq.n	801787a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801784a:	4b13      	ldr	r3, [pc, #76]	; (8017898 <vTaskDelay+0x60>)
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	2b00      	cmp	r3, #0
 8017850:	d00a      	beq.n	8017868 <vTaskDelay+0x30>
	__asm volatile
 8017852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017856:	f383 8811 	msr	BASEPRI, r3
 801785a:	f3bf 8f6f 	isb	sy
 801785e:	f3bf 8f4f 	dsb	sy
 8017862:	60bb      	str	r3, [r7, #8]
}
 8017864:	bf00      	nop
 8017866:	e7fe      	b.n	8017866 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8017868:	f000 f980 	bl	8017b6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801786c:	2100      	movs	r1, #0
 801786e:	6878      	ldr	r0, [r7, #4]
 8017870:	f000 ff02 	bl	8018678 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8017874:	f000 f988 	bl	8017b88 <xTaskResumeAll>
 8017878:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801787a:	68fb      	ldr	r3, [r7, #12]
 801787c:	2b00      	cmp	r3, #0
 801787e:	d107      	bne.n	8017890 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8017880:	4b06      	ldr	r3, [pc, #24]	; (801789c <vTaskDelay+0x64>)
 8017882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017886:	601a      	str	r2, [r3, #0]
 8017888:	f3bf 8f4f 	dsb	sy
 801788c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017890:	bf00      	nop
 8017892:	3710      	adds	r7, #16
 8017894:	46bd      	mov	sp, r7
 8017896:	bd80      	pop	{r7, pc}
 8017898:	200014e0 	.word	0x200014e0
 801789c:	e000ed04 	.word	0xe000ed04

080178a0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80178a0:	b580      	push	{r7, lr}
 80178a2:	b088      	sub	sp, #32
 80178a4:	af00      	add	r7, sp, #0
 80178a6:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80178ac:	69bb      	ldr	r3, [r7, #24]
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d10a      	bne.n	80178c8 <eTaskGetState+0x28>
	__asm volatile
 80178b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178b6:	f383 8811 	msr	BASEPRI, r3
 80178ba:	f3bf 8f6f 	isb	sy
 80178be:	f3bf 8f4f 	dsb	sy
 80178c2:	60bb      	str	r3, [r7, #8]
}
 80178c4:	bf00      	nop
 80178c6:	e7fe      	b.n	80178c6 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80178c8:	4b23      	ldr	r3, [pc, #140]	; (8017958 <eTaskGetState+0xb8>)
 80178ca:	681b      	ldr	r3, [r3, #0]
 80178cc:	69ba      	ldr	r2, [r7, #24]
 80178ce:	429a      	cmp	r2, r3
 80178d0:	d102      	bne.n	80178d8 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80178d2:	2300      	movs	r3, #0
 80178d4:	77fb      	strb	r3, [r7, #31]
 80178d6:	e03a      	b.n	801794e <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 80178d8:	f001 fb9c 	bl	8019014 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80178dc:	69bb      	ldr	r3, [r7, #24]
 80178de:	695b      	ldr	r3, [r3, #20]
 80178e0:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80178e2:	4b1e      	ldr	r3, [pc, #120]	; (801795c <eTaskGetState+0xbc>)
 80178e4:	681b      	ldr	r3, [r3, #0]
 80178e6:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80178e8:	4b1d      	ldr	r3, [pc, #116]	; (8017960 <eTaskGetState+0xc0>)
 80178ea:	681b      	ldr	r3, [r3, #0]
 80178ec:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80178ee:	f001 fbc1 	bl	8019074 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80178f2:	697a      	ldr	r2, [r7, #20]
 80178f4:	693b      	ldr	r3, [r7, #16]
 80178f6:	429a      	cmp	r2, r3
 80178f8:	d003      	beq.n	8017902 <eTaskGetState+0x62>
 80178fa:	697a      	ldr	r2, [r7, #20]
 80178fc:	68fb      	ldr	r3, [r7, #12]
 80178fe:	429a      	cmp	r2, r3
 8017900:	d102      	bne.n	8017908 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8017902:	2302      	movs	r3, #2
 8017904:	77fb      	strb	r3, [r7, #31]
 8017906:	e022      	b.n	801794e <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8017908:	697b      	ldr	r3, [r7, #20]
 801790a:	4a16      	ldr	r2, [pc, #88]	; (8017964 <eTaskGetState+0xc4>)
 801790c:	4293      	cmp	r3, r2
 801790e:	d112      	bne.n	8017936 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8017910:	69bb      	ldr	r3, [r7, #24]
 8017912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017914:	2b00      	cmp	r3, #0
 8017916:	d10b      	bne.n	8017930 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8017918:	69bb      	ldr	r3, [r7, #24]
 801791a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 801791e:	b2db      	uxtb	r3, r3
 8017920:	2b01      	cmp	r3, #1
 8017922:	d102      	bne.n	801792a <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8017924:	2302      	movs	r3, #2
 8017926:	77fb      	strb	r3, [r7, #31]
 8017928:	e011      	b.n	801794e <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 801792a:	2303      	movs	r3, #3
 801792c:	77fb      	strb	r3, [r7, #31]
 801792e:	e00e      	b.n	801794e <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8017930:	2302      	movs	r3, #2
 8017932:	77fb      	strb	r3, [r7, #31]
 8017934:	e00b      	b.n	801794e <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8017936:	697b      	ldr	r3, [r7, #20]
 8017938:	4a0b      	ldr	r2, [pc, #44]	; (8017968 <eTaskGetState+0xc8>)
 801793a:	4293      	cmp	r3, r2
 801793c:	d002      	beq.n	8017944 <eTaskGetState+0xa4>
 801793e:	697b      	ldr	r3, [r7, #20]
 8017940:	2b00      	cmp	r3, #0
 8017942:	d102      	bne.n	801794a <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8017944:	2304      	movs	r3, #4
 8017946:	77fb      	strb	r3, [r7, #31]
 8017948:	e001      	b.n	801794e <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 801794a:	2301      	movs	r3, #1
 801794c:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 801794e:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8017950:	4618      	mov	r0, r3
 8017952:	3720      	adds	r7, #32
 8017954:	46bd      	mov	sp, r7
 8017956:	bd80      	pop	{r7, pc}
 8017958:	20000fe4 	.word	0x20000fe4
 801795c:	20001470 	.word	0x20001470
 8017960:	20001474 	.word	0x20001474
 8017964:	200014a4 	.word	0x200014a4
 8017968:	2000148c 	.word	0x2000148c

0801796c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 801796c:	b480      	push	{r7}
 801796e:	b087      	sub	sp, #28
 8017970:	af00      	add	r7, sp, #0
 8017972:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8017974:	2300      	movs	r3, #0
 8017976:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	2b00      	cmp	r3, #0
 8017980:	d10a      	bne.n	8017998 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8017982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017986:	f383 8811 	msr	BASEPRI, r3
 801798a:	f3bf 8f6f 	isb	sy
 801798e:	f3bf 8f4f 	dsb	sy
 8017992:	60fb      	str	r3, [r7, #12]
}
 8017994:	bf00      	nop
 8017996:	e7fe      	b.n	8017996 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8017998:	693b      	ldr	r3, [r7, #16]
 801799a:	695b      	ldr	r3, [r3, #20]
 801799c:	4a0a      	ldr	r2, [pc, #40]	; (80179c8 <prvTaskIsTaskSuspended+0x5c>)
 801799e:	4293      	cmp	r3, r2
 80179a0:	d10a      	bne.n	80179b8 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80179a2:	693b      	ldr	r3, [r7, #16]
 80179a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80179a6:	4a09      	ldr	r2, [pc, #36]	; (80179cc <prvTaskIsTaskSuspended+0x60>)
 80179a8:	4293      	cmp	r3, r2
 80179aa:	d005      	beq.n	80179b8 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80179ac:	693b      	ldr	r3, [r7, #16]
 80179ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	d101      	bne.n	80179b8 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80179b4:	2301      	movs	r3, #1
 80179b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80179b8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80179ba:	4618      	mov	r0, r3
 80179bc:	371c      	adds	r7, #28
 80179be:	46bd      	mov	sp, r7
 80179c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179c4:	4770      	bx	lr
 80179c6:	bf00      	nop
 80179c8:	200014a4 	.word	0x200014a4
 80179cc:	20001478 	.word	0x20001478

080179d0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80179d0:	b580      	push	{r7, lr}
 80179d2:	b084      	sub	sp, #16
 80179d4:	af00      	add	r7, sp, #0
 80179d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	2b00      	cmp	r3, #0
 80179e0:	d10a      	bne.n	80179f8 <vTaskResume+0x28>
	__asm volatile
 80179e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179e6:	f383 8811 	msr	BASEPRI, r3
 80179ea:	f3bf 8f6f 	isb	sy
 80179ee:	f3bf 8f4f 	dsb	sy
 80179f2:	60bb      	str	r3, [r7, #8]
}
 80179f4:	bf00      	nop
 80179f6:	e7fe      	b.n	80179f6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80179f8:	4b20      	ldr	r3, [pc, #128]	; (8017a7c <vTaskResume+0xac>)
 80179fa:	681b      	ldr	r3, [r3, #0]
 80179fc:	68fa      	ldr	r2, [r7, #12]
 80179fe:	429a      	cmp	r2, r3
 8017a00:	d038      	beq.n	8017a74 <vTaskResume+0xa4>
 8017a02:	68fb      	ldr	r3, [r7, #12]
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	d035      	beq.n	8017a74 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8017a08:	f001 fb04 	bl	8019014 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8017a0c:	68f8      	ldr	r0, [r7, #12]
 8017a0e:	f7ff ffad 	bl	801796c <prvTaskIsTaskSuspended>
 8017a12:	4603      	mov	r3, r0
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d02b      	beq.n	8017a70 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8017a18:	68fb      	ldr	r3, [r7, #12]
 8017a1a:	3304      	adds	r3, #4
 8017a1c:	4618      	mov	r0, r3
 8017a1e:	f7fe fca9 	bl	8016374 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017a22:	68fb      	ldr	r3, [r7, #12]
 8017a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017a26:	4b16      	ldr	r3, [pc, #88]	; (8017a80 <vTaskResume+0xb0>)
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	429a      	cmp	r2, r3
 8017a2c:	d903      	bls.n	8017a36 <vTaskResume+0x66>
 8017a2e:	68fb      	ldr	r3, [r7, #12]
 8017a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a32:	4a13      	ldr	r2, [pc, #76]	; (8017a80 <vTaskResume+0xb0>)
 8017a34:	6013      	str	r3, [r2, #0]
 8017a36:	68fb      	ldr	r3, [r7, #12]
 8017a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017a3a:	4613      	mov	r3, r2
 8017a3c:	009b      	lsls	r3, r3, #2
 8017a3e:	4413      	add	r3, r2
 8017a40:	009b      	lsls	r3, r3, #2
 8017a42:	4a10      	ldr	r2, [pc, #64]	; (8017a84 <vTaskResume+0xb4>)
 8017a44:	441a      	add	r2, r3
 8017a46:	68fb      	ldr	r3, [r7, #12]
 8017a48:	3304      	adds	r3, #4
 8017a4a:	4619      	mov	r1, r3
 8017a4c:	4610      	mov	r0, r2
 8017a4e:	f7fe fc34 	bl	80162ba <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017a52:	68fb      	ldr	r3, [r7, #12]
 8017a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017a56:	4b09      	ldr	r3, [pc, #36]	; (8017a7c <vTaskResume+0xac>)
 8017a58:	681b      	ldr	r3, [r3, #0]
 8017a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a5c:	429a      	cmp	r2, r3
 8017a5e:	d307      	bcc.n	8017a70 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8017a60:	4b09      	ldr	r3, [pc, #36]	; (8017a88 <vTaskResume+0xb8>)
 8017a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a66:	601a      	str	r2, [r3, #0]
 8017a68:	f3bf 8f4f 	dsb	sy
 8017a6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8017a70:	f001 fb00 	bl	8019074 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017a74:	bf00      	nop
 8017a76:	3710      	adds	r7, #16
 8017a78:	46bd      	mov	sp, r7
 8017a7a:	bd80      	pop	{r7, pc}
 8017a7c:	20000fe4 	.word	0x20000fe4
 8017a80:	200014c0 	.word	0x200014c0
 8017a84:	20000fe8 	.word	0x20000fe8
 8017a88:	e000ed04 	.word	0xe000ed04

08017a8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8017a8c:	b580      	push	{r7, lr}
 8017a8e:	b08a      	sub	sp, #40	; 0x28
 8017a90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8017a92:	2300      	movs	r3, #0
 8017a94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017a96:	2300      	movs	r3, #0
 8017a98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017a9a:	463a      	mov	r2, r7
 8017a9c:	1d39      	adds	r1, r7, #4
 8017a9e:	f107 0308 	add.w	r3, r7, #8
 8017aa2:	4618      	mov	r0, r3
 8017aa4:	f7fe fba8 	bl	80161f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017aa8:	6839      	ldr	r1, [r7, #0]
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	68ba      	ldr	r2, [r7, #8]
 8017aae:	9202      	str	r2, [sp, #8]
 8017ab0:	9301      	str	r3, [sp, #4]
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	9300      	str	r3, [sp, #0]
 8017ab6:	2300      	movs	r3, #0
 8017ab8:	460a      	mov	r2, r1
 8017aba:	4924      	ldr	r1, [pc, #144]	; (8017b4c <vTaskStartScheduler+0xc0>)
 8017abc:	4824      	ldr	r0, [pc, #144]	; (8017b50 <vTaskStartScheduler+0xc4>)
 8017abe:	f7ff fc91 	bl	80173e4 <xTaskCreateStatic>
 8017ac2:	4603      	mov	r3, r0
 8017ac4:	4a23      	ldr	r2, [pc, #140]	; (8017b54 <vTaskStartScheduler+0xc8>)
 8017ac6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8017ac8:	4b22      	ldr	r3, [pc, #136]	; (8017b54 <vTaskStartScheduler+0xc8>)
 8017aca:	681b      	ldr	r3, [r3, #0]
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d002      	beq.n	8017ad6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8017ad0:	2301      	movs	r3, #1
 8017ad2:	617b      	str	r3, [r7, #20]
 8017ad4:	e001      	b.n	8017ada <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8017ad6:	2300      	movs	r3, #0
 8017ad8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8017ada:	697b      	ldr	r3, [r7, #20]
 8017adc:	2b01      	cmp	r3, #1
 8017ade:	d102      	bne.n	8017ae6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8017ae0:	f000 fe1e 	bl	8018720 <xTimerCreateTimerTask>
 8017ae4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8017ae6:	697b      	ldr	r3, [r7, #20]
 8017ae8:	2b01      	cmp	r3, #1
 8017aea:	d11b      	bne.n	8017b24 <vTaskStartScheduler+0x98>
	__asm volatile
 8017aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017af0:	f383 8811 	msr	BASEPRI, r3
 8017af4:	f3bf 8f6f 	isb	sy
 8017af8:	f3bf 8f4f 	dsb	sy
 8017afc:	613b      	str	r3, [r7, #16]
}
 8017afe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017b00:	4b15      	ldr	r3, [pc, #84]	; (8017b58 <vTaskStartScheduler+0xcc>)
 8017b02:	681b      	ldr	r3, [r3, #0]
 8017b04:	3354      	adds	r3, #84	; 0x54
 8017b06:	4a15      	ldr	r2, [pc, #84]	; (8017b5c <vTaskStartScheduler+0xd0>)
 8017b08:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8017b0a:	4b15      	ldr	r3, [pc, #84]	; (8017b60 <vTaskStartScheduler+0xd4>)
 8017b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8017b10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8017b12:	4b14      	ldr	r3, [pc, #80]	; (8017b64 <vTaskStartScheduler+0xd8>)
 8017b14:	2201      	movs	r2, #1
 8017b16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8017b18:	4b13      	ldr	r3, [pc, #76]	; (8017b68 <vTaskStartScheduler+0xdc>)
 8017b1a:	2200      	movs	r2, #0
 8017b1c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8017b1e:	f001 f9d7 	bl	8018ed0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8017b22:	e00e      	b.n	8017b42 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8017b24:	697b      	ldr	r3, [r7, #20]
 8017b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b2a:	d10a      	bne.n	8017b42 <vTaskStartScheduler+0xb6>
	__asm volatile
 8017b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b30:	f383 8811 	msr	BASEPRI, r3
 8017b34:	f3bf 8f6f 	isb	sy
 8017b38:	f3bf 8f4f 	dsb	sy
 8017b3c:	60fb      	str	r3, [r7, #12]
}
 8017b3e:	bf00      	nop
 8017b40:	e7fe      	b.n	8017b40 <vTaskStartScheduler+0xb4>
}
 8017b42:	bf00      	nop
 8017b44:	3718      	adds	r7, #24
 8017b46:	46bd      	mov	sp, r7
 8017b48:	bd80      	pop	{r7, pc}
 8017b4a:	bf00      	nop
 8017b4c:	08022d50 	.word	0x08022d50
 8017b50:	08018191 	.word	0x08018191
 8017b54:	200014dc 	.word	0x200014dc
 8017b58:	20000fe4 	.word	0x20000fe4
 8017b5c:	200001fc 	.word	0x200001fc
 8017b60:	200014d8 	.word	0x200014d8
 8017b64:	200014c4 	.word	0x200014c4
 8017b68:	200014bc 	.word	0x200014bc

08017b6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8017b6c:	b480      	push	{r7}
 8017b6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8017b70:	4b04      	ldr	r3, [pc, #16]	; (8017b84 <vTaskSuspendAll+0x18>)
 8017b72:	681b      	ldr	r3, [r3, #0]
 8017b74:	3301      	adds	r3, #1
 8017b76:	4a03      	ldr	r2, [pc, #12]	; (8017b84 <vTaskSuspendAll+0x18>)
 8017b78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8017b7a:	bf00      	nop
 8017b7c:	46bd      	mov	sp, r7
 8017b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b82:	4770      	bx	lr
 8017b84:	200014e0 	.word	0x200014e0

08017b88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017b88:	b580      	push	{r7, lr}
 8017b8a:	b084      	sub	sp, #16
 8017b8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8017b8e:	2300      	movs	r3, #0
 8017b90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8017b92:	2300      	movs	r3, #0
 8017b94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8017b96:	4b42      	ldr	r3, [pc, #264]	; (8017ca0 <xTaskResumeAll+0x118>)
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d10a      	bne.n	8017bb4 <xTaskResumeAll+0x2c>
	__asm volatile
 8017b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ba2:	f383 8811 	msr	BASEPRI, r3
 8017ba6:	f3bf 8f6f 	isb	sy
 8017baa:	f3bf 8f4f 	dsb	sy
 8017bae:	603b      	str	r3, [r7, #0]
}
 8017bb0:	bf00      	nop
 8017bb2:	e7fe      	b.n	8017bb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8017bb4:	f001 fa2e 	bl	8019014 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8017bb8:	4b39      	ldr	r3, [pc, #228]	; (8017ca0 <xTaskResumeAll+0x118>)
 8017bba:	681b      	ldr	r3, [r3, #0]
 8017bbc:	3b01      	subs	r3, #1
 8017bbe:	4a38      	ldr	r2, [pc, #224]	; (8017ca0 <xTaskResumeAll+0x118>)
 8017bc0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017bc2:	4b37      	ldr	r3, [pc, #220]	; (8017ca0 <xTaskResumeAll+0x118>)
 8017bc4:	681b      	ldr	r3, [r3, #0]
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	d162      	bne.n	8017c90 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8017bca:	4b36      	ldr	r3, [pc, #216]	; (8017ca4 <xTaskResumeAll+0x11c>)
 8017bcc:	681b      	ldr	r3, [r3, #0]
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d05e      	beq.n	8017c90 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017bd2:	e02f      	b.n	8017c34 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017bd4:	4b34      	ldr	r3, [pc, #208]	; (8017ca8 <xTaskResumeAll+0x120>)
 8017bd6:	68db      	ldr	r3, [r3, #12]
 8017bd8:	68db      	ldr	r3, [r3, #12]
 8017bda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017bdc:	68fb      	ldr	r3, [r7, #12]
 8017bde:	3318      	adds	r3, #24
 8017be0:	4618      	mov	r0, r3
 8017be2:	f7fe fbc7 	bl	8016374 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017be6:	68fb      	ldr	r3, [r7, #12]
 8017be8:	3304      	adds	r3, #4
 8017bea:	4618      	mov	r0, r3
 8017bec:	f7fe fbc2 	bl	8016374 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017bf0:	68fb      	ldr	r3, [r7, #12]
 8017bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017bf4:	4b2d      	ldr	r3, [pc, #180]	; (8017cac <xTaskResumeAll+0x124>)
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	429a      	cmp	r2, r3
 8017bfa:	d903      	bls.n	8017c04 <xTaskResumeAll+0x7c>
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c00:	4a2a      	ldr	r2, [pc, #168]	; (8017cac <xTaskResumeAll+0x124>)
 8017c02:	6013      	str	r3, [r2, #0]
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c08:	4613      	mov	r3, r2
 8017c0a:	009b      	lsls	r3, r3, #2
 8017c0c:	4413      	add	r3, r2
 8017c0e:	009b      	lsls	r3, r3, #2
 8017c10:	4a27      	ldr	r2, [pc, #156]	; (8017cb0 <xTaskResumeAll+0x128>)
 8017c12:	441a      	add	r2, r3
 8017c14:	68fb      	ldr	r3, [r7, #12]
 8017c16:	3304      	adds	r3, #4
 8017c18:	4619      	mov	r1, r3
 8017c1a:	4610      	mov	r0, r2
 8017c1c:	f7fe fb4d 	bl	80162ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017c20:	68fb      	ldr	r3, [r7, #12]
 8017c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c24:	4b23      	ldr	r3, [pc, #140]	; (8017cb4 <xTaskResumeAll+0x12c>)
 8017c26:	681b      	ldr	r3, [r3, #0]
 8017c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c2a:	429a      	cmp	r2, r3
 8017c2c:	d302      	bcc.n	8017c34 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8017c2e:	4b22      	ldr	r3, [pc, #136]	; (8017cb8 <xTaskResumeAll+0x130>)
 8017c30:	2201      	movs	r2, #1
 8017c32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017c34:	4b1c      	ldr	r3, [pc, #112]	; (8017ca8 <xTaskResumeAll+0x120>)
 8017c36:	681b      	ldr	r3, [r3, #0]
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d1cb      	bne.n	8017bd4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d001      	beq.n	8017c46 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8017c42:	f000 fb5f 	bl	8018304 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8017c46:	4b1d      	ldr	r3, [pc, #116]	; (8017cbc <xTaskResumeAll+0x134>)
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	d010      	beq.n	8017c74 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8017c52:	f000 f847 	bl	8017ce4 <xTaskIncrementTick>
 8017c56:	4603      	mov	r3, r0
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d002      	beq.n	8017c62 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8017c5c:	4b16      	ldr	r3, [pc, #88]	; (8017cb8 <xTaskResumeAll+0x130>)
 8017c5e:	2201      	movs	r2, #1
 8017c60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	3b01      	subs	r3, #1
 8017c66:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d1f1      	bne.n	8017c52 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8017c6e:	4b13      	ldr	r3, [pc, #76]	; (8017cbc <xTaskResumeAll+0x134>)
 8017c70:	2200      	movs	r2, #0
 8017c72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8017c74:	4b10      	ldr	r3, [pc, #64]	; (8017cb8 <xTaskResumeAll+0x130>)
 8017c76:	681b      	ldr	r3, [r3, #0]
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	d009      	beq.n	8017c90 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8017c7c:	2301      	movs	r3, #1
 8017c7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8017c80:	4b0f      	ldr	r3, [pc, #60]	; (8017cc0 <xTaskResumeAll+0x138>)
 8017c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017c86:	601a      	str	r2, [r3, #0]
 8017c88:	f3bf 8f4f 	dsb	sy
 8017c8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017c90:	f001 f9f0 	bl	8019074 <vPortExitCritical>

	return xAlreadyYielded;
 8017c94:	68bb      	ldr	r3, [r7, #8]
}
 8017c96:	4618      	mov	r0, r3
 8017c98:	3710      	adds	r7, #16
 8017c9a:	46bd      	mov	sp, r7
 8017c9c:	bd80      	pop	{r7, pc}
 8017c9e:	bf00      	nop
 8017ca0:	200014e0 	.word	0x200014e0
 8017ca4:	200014b8 	.word	0x200014b8
 8017ca8:	20001478 	.word	0x20001478
 8017cac:	200014c0 	.word	0x200014c0
 8017cb0:	20000fe8 	.word	0x20000fe8
 8017cb4:	20000fe4 	.word	0x20000fe4
 8017cb8:	200014cc 	.word	0x200014cc
 8017cbc:	200014c8 	.word	0x200014c8
 8017cc0:	e000ed04 	.word	0xe000ed04

08017cc4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8017cc4:	b480      	push	{r7}
 8017cc6:	b083      	sub	sp, #12
 8017cc8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8017cca:	4b05      	ldr	r3, [pc, #20]	; (8017ce0 <xTaskGetTickCount+0x1c>)
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017cd0:	687b      	ldr	r3, [r7, #4]
}
 8017cd2:	4618      	mov	r0, r3
 8017cd4:	370c      	adds	r7, #12
 8017cd6:	46bd      	mov	sp, r7
 8017cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cdc:	4770      	bx	lr
 8017cde:	bf00      	nop
 8017ce0:	200014bc 	.word	0x200014bc

08017ce4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8017ce4:	b580      	push	{r7, lr}
 8017ce6:	b086      	sub	sp, #24
 8017ce8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8017cea:	2300      	movs	r3, #0
 8017cec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017cee:	4b4f      	ldr	r3, [pc, #316]	; (8017e2c <xTaskIncrementTick+0x148>)
 8017cf0:	681b      	ldr	r3, [r3, #0]
 8017cf2:	2b00      	cmp	r3, #0
 8017cf4:	f040 808f 	bne.w	8017e16 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8017cf8:	4b4d      	ldr	r3, [pc, #308]	; (8017e30 <xTaskIncrementTick+0x14c>)
 8017cfa:	681b      	ldr	r3, [r3, #0]
 8017cfc:	3301      	adds	r3, #1
 8017cfe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8017d00:	4a4b      	ldr	r2, [pc, #300]	; (8017e30 <xTaskIncrementTick+0x14c>)
 8017d02:	693b      	ldr	r3, [r7, #16]
 8017d04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8017d06:	693b      	ldr	r3, [r7, #16]
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d120      	bne.n	8017d4e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8017d0c:	4b49      	ldr	r3, [pc, #292]	; (8017e34 <xTaskIncrementTick+0x150>)
 8017d0e:	681b      	ldr	r3, [r3, #0]
 8017d10:	681b      	ldr	r3, [r3, #0]
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	d00a      	beq.n	8017d2c <xTaskIncrementTick+0x48>
	__asm volatile
 8017d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d1a:	f383 8811 	msr	BASEPRI, r3
 8017d1e:	f3bf 8f6f 	isb	sy
 8017d22:	f3bf 8f4f 	dsb	sy
 8017d26:	603b      	str	r3, [r7, #0]
}
 8017d28:	bf00      	nop
 8017d2a:	e7fe      	b.n	8017d2a <xTaskIncrementTick+0x46>
 8017d2c:	4b41      	ldr	r3, [pc, #260]	; (8017e34 <xTaskIncrementTick+0x150>)
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	60fb      	str	r3, [r7, #12]
 8017d32:	4b41      	ldr	r3, [pc, #260]	; (8017e38 <xTaskIncrementTick+0x154>)
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	4a3f      	ldr	r2, [pc, #252]	; (8017e34 <xTaskIncrementTick+0x150>)
 8017d38:	6013      	str	r3, [r2, #0]
 8017d3a:	4a3f      	ldr	r2, [pc, #252]	; (8017e38 <xTaskIncrementTick+0x154>)
 8017d3c:	68fb      	ldr	r3, [r7, #12]
 8017d3e:	6013      	str	r3, [r2, #0]
 8017d40:	4b3e      	ldr	r3, [pc, #248]	; (8017e3c <xTaskIncrementTick+0x158>)
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	3301      	adds	r3, #1
 8017d46:	4a3d      	ldr	r2, [pc, #244]	; (8017e3c <xTaskIncrementTick+0x158>)
 8017d48:	6013      	str	r3, [r2, #0]
 8017d4a:	f000 fadb 	bl	8018304 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8017d4e:	4b3c      	ldr	r3, [pc, #240]	; (8017e40 <xTaskIncrementTick+0x15c>)
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	693a      	ldr	r2, [r7, #16]
 8017d54:	429a      	cmp	r2, r3
 8017d56:	d349      	bcc.n	8017dec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017d58:	4b36      	ldr	r3, [pc, #216]	; (8017e34 <xTaskIncrementTick+0x150>)
 8017d5a:	681b      	ldr	r3, [r3, #0]
 8017d5c:	681b      	ldr	r3, [r3, #0]
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	d104      	bne.n	8017d6c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017d62:	4b37      	ldr	r3, [pc, #220]	; (8017e40 <xTaskIncrementTick+0x15c>)
 8017d64:	f04f 32ff 	mov.w	r2, #4294967295
 8017d68:	601a      	str	r2, [r3, #0]
					break;
 8017d6a:	e03f      	b.n	8017dec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017d6c:	4b31      	ldr	r3, [pc, #196]	; (8017e34 <xTaskIncrementTick+0x150>)
 8017d6e:	681b      	ldr	r3, [r3, #0]
 8017d70:	68db      	ldr	r3, [r3, #12]
 8017d72:	68db      	ldr	r3, [r3, #12]
 8017d74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017d76:	68bb      	ldr	r3, [r7, #8]
 8017d78:	685b      	ldr	r3, [r3, #4]
 8017d7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8017d7c:	693a      	ldr	r2, [r7, #16]
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	429a      	cmp	r2, r3
 8017d82:	d203      	bcs.n	8017d8c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8017d84:	4a2e      	ldr	r2, [pc, #184]	; (8017e40 <xTaskIncrementTick+0x15c>)
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8017d8a:	e02f      	b.n	8017dec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017d8c:	68bb      	ldr	r3, [r7, #8]
 8017d8e:	3304      	adds	r3, #4
 8017d90:	4618      	mov	r0, r3
 8017d92:	f7fe faef 	bl	8016374 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017d96:	68bb      	ldr	r3, [r7, #8]
 8017d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	d004      	beq.n	8017da8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017d9e:	68bb      	ldr	r3, [r7, #8]
 8017da0:	3318      	adds	r3, #24
 8017da2:	4618      	mov	r0, r3
 8017da4:	f7fe fae6 	bl	8016374 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8017da8:	68bb      	ldr	r3, [r7, #8]
 8017daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017dac:	4b25      	ldr	r3, [pc, #148]	; (8017e44 <xTaskIncrementTick+0x160>)
 8017dae:	681b      	ldr	r3, [r3, #0]
 8017db0:	429a      	cmp	r2, r3
 8017db2:	d903      	bls.n	8017dbc <xTaskIncrementTick+0xd8>
 8017db4:	68bb      	ldr	r3, [r7, #8]
 8017db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017db8:	4a22      	ldr	r2, [pc, #136]	; (8017e44 <xTaskIncrementTick+0x160>)
 8017dba:	6013      	str	r3, [r2, #0]
 8017dbc:	68bb      	ldr	r3, [r7, #8]
 8017dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017dc0:	4613      	mov	r3, r2
 8017dc2:	009b      	lsls	r3, r3, #2
 8017dc4:	4413      	add	r3, r2
 8017dc6:	009b      	lsls	r3, r3, #2
 8017dc8:	4a1f      	ldr	r2, [pc, #124]	; (8017e48 <xTaskIncrementTick+0x164>)
 8017dca:	441a      	add	r2, r3
 8017dcc:	68bb      	ldr	r3, [r7, #8]
 8017dce:	3304      	adds	r3, #4
 8017dd0:	4619      	mov	r1, r3
 8017dd2:	4610      	mov	r0, r2
 8017dd4:	f7fe fa71 	bl	80162ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017dd8:	68bb      	ldr	r3, [r7, #8]
 8017dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ddc:	4b1b      	ldr	r3, [pc, #108]	; (8017e4c <xTaskIncrementTick+0x168>)
 8017dde:	681b      	ldr	r3, [r3, #0]
 8017de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017de2:	429a      	cmp	r2, r3
 8017de4:	d3b8      	bcc.n	8017d58 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8017de6:	2301      	movs	r3, #1
 8017de8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017dea:	e7b5      	b.n	8017d58 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017dec:	4b17      	ldr	r3, [pc, #92]	; (8017e4c <xTaskIncrementTick+0x168>)
 8017dee:	681b      	ldr	r3, [r3, #0]
 8017df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017df2:	4915      	ldr	r1, [pc, #84]	; (8017e48 <xTaskIncrementTick+0x164>)
 8017df4:	4613      	mov	r3, r2
 8017df6:	009b      	lsls	r3, r3, #2
 8017df8:	4413      	add	r3, r2
 8017dfa:	009b      	lsls	r3, r3, #2
 8017dfc:	440b      	add	r3, r1
 8017dfe:	681b      	ldr	r3, [r3, #0]
 8017e00:	2b01      	cmp	r3, #1
 8017e02:	d901      	bls.n	8017e08 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8017e04:	2301      	movs	r3, #1
 8017e06:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8017e08:	4b11      	ldr	r3, [pc, #68]	; (8017e50 <xTaskIncrementTick+0x16c>)
 8017e0a:	681b      	ldr	r3, [r3, #0]
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	d007      	beq.n	8017e20 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8017e10:	2301      	movs	r3, #1
 8017e12:	617b      	str	r3, [r7, #20]
 8017e14:	e004      	b.n	8017e20 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8017e16:	4b0f      	ldr	r3, [pc, #60]	; (8017e54 <xTaskIncrementTick+0x170>)
 8017e18:	681b      	ldr	r3, [r3, #0]
 8017e1a:	3301      	adds	r3, #1
 8017e1c:	4a0d      	ldr	r2, [pc, #52]	; (8017e54 <xTaskIncrementTick+0x170>)
 8017e1e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8017e20:	697b      	ldr	r3, [r7, #20]
}
 8017e22:	4618      	mov	r0, r3
 8017e24:	3718      	adds	r7, #24
 8017e26:	46bd      	mov	sp, r7
 8017e28:	bd80      	pop	{r7, pc}
 8017e2a:	bf00      	nop
 8017e2c:	200014e0 	.word	0x200014e0
 8017e30:	200014bc 	.word	0x200014bc
 8017e34:	20001470 	.word	0x20001470
 8017e38:	20001474 	.word	0x20001474
 8017e3c:	200014d0 	.word	0x200014d0
 8017e40:	200014d8 	.word	0x200014d8
 8017e44:	200014c0 	.word	0x200014c0
 8017e48:	20000fe8 	.word	0x20000fe8
 8017e4c:	20000fe4 	.word	0x20000fe4
 8017e50:	200014cc 	.word	0x200014cc
 8017e54:	200014c8 	.word	0x200014c8

08017e58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017e58:	b480      	push	{r7}
 8017e5a:	b085      	sub	sp, #20
 8017e5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017e5e:	4b2a      	ldr	r3, [pc, #168]	; (8017f08 <vTaskSwitchContext+0xb0>)
 8017e60:	681b      	ldr	r3, [r3, #0]
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d003      	beq.n	8017e6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017e66:	4b29      	ldr	r3, [pc, #164]	; (8017f0c <vTaskSwitchContext+0xb4>)
 8017e68:	2201      	movs	r2, #1
 8017e6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017e6c:	e046      	b.n	8017efc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8017e6e:	4b27      	ldr	r3, [pc, #156]	; (8017f0c <vTaskSwitchContext+0xb4>)
 8017e70:	2200      	movs	r2, #0
 8017e72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017e74:	4b26      	ldr	r3, [pc, #152]	; (8017f10 <vTaskSwitchContext+0xb8>)
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	60fb      	str	r3, [r7, #12]
 8017e7a:	e010      	b.n	8017e9e <vTaskSwitchContext+0x46>
 8017e7c:	68fb      	ldr	r3, [r7, #12]
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	d10a      	bne.n	8017e98 <vTaskSwitchContext+0x40>
	__asm volatile
 8017e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e86:	f383 8811 	msr	BASEPRI, r3
 8017e8a:	f3bf 8f6f 	isb	sy
 8017e8e:	f3bf 8f4f 	dsb	sy
 8017e92:	607b      	str	r3, [r7, #4]
}
 8017e94:	bf00      	nop
 8017e96:	e7fe      	b.n	8017e96 <vTaskSwitchContext+0x3e>
 8017e98:	68fb      	ldr	r3, [r7, #12]
 8017e9a:	3b01      	subs	r3, #1
 8017e9c:	60fb      	str	r3, [r7, #12]
 8017e9e:	491d      	ldr	r1, [pc, #116]	; (8017f14 <vTaskSwitchContext+0xbc>)
 8017ea0:	68fa      	ldr	r2, [r7, #12]
 8017ea2:	4613      	mov	r3, r2
 8017ea4:	009b      	lsls	r3, r3, #2
 8017ea6:	4413      	add	r3, r2
 8017ea8:	009b      	lsls	r3, r3, #2
 8017eaa:	440b      	add	r3, r1
 8017eac:	681b      	ldr	r3, [r3, #0]
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d0e4      	beq.n	8017e7c <vTaskSwitchContext+0x24>
 8017eb2:	68fa      	ldr	r2, [r7, #12]
 8017eb4:	4613      	mov	r3, r2
 8017eb6:	009b      	lsls	r3, r3, #2
 8017eb8:	4413      	add	r3, r2
 8017eba:	009b      	lsls	r3, r3, #2
 8017ebc:	4a15      	ldr	r2, [pc, #84]	; (8017f14 <vTaskSwitchContext+0xbc>)
 8017ebe:	4413      	add	r3, r2
 8017ec0:	60bb      	str	r3, [r7, #8]
 8017ec2:	68bb      	ldr	r3, [r7, #8]
 8017ec4:	685b      	ldr	r3, [r3, #4]
 8017ec6:	685a      	ldr	r2, [r3, #4]
 8017ec8:	68bb      	ldr	r3, [r7, #8]
 8017eca:	605a      	str	r2, [r3, #4]
 8017ecc:	68bb      	ldr	r3, [r7, #8]
 8017ece:	685a      	ldr	r2, [r3, #4]
 8017ed0:	68bb      	ldr	r3, [r7, #8]
 8017ed2:	3308      	adds	r3, #8
 8017ed4:	429a      	cmp	r2, r3
 8017ed6:	d104      	bne.n	8017ee2 <vTaskSwitchContext+0x8a>
 8017ed8:	68bb      	ldr	r3, [r7, #8]
 8017eda:	685b      	ldr	r3, [r3, #4]
 8017edc:	685a      	ldr	r2, [r3, #4]
 8017ede:	68bb      	ldr	r3, [r7, #8]
 8017ee0:	605a      	str	r2, [r3, #4]
 8017ee2:	68bb      	ldr	r3, [r7, #8]
 8017ee4:	685b      	ldr	r3, [r3, #4]
 8017ee6:	68db      	ldr	r3, [r3, #12]
 8017ee8:	4a0b      	ldr	r2, [pc, #44]	; (8017f18 <vTaskSwitchContext+0xc0>)
 8017eea:	6013      	str	r3, [r2, #0]
 8017eec:	4a08      	ldr	r2, [pc, #32]	; (8017f10 <vTaskSwitchContext+0xb8>)
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017ef2:	4b09      	ldr	r3, [pc, #36]	; (8017f18 <vTaskSwitchContext+0xc0>)
 8017ef4:	681b      	ldr	r3, [r3, #0]
 8017ef6:	3354      	adds	r3, #84	; 0x54
 8017ef8:	4a08      	ldr	r2, [pc, #32]	; (8017f1c <vTaskSwitchContext+0xc4>)
 8017efa:	6013      	str	r3, [r2, #0]
}
 8017efc:	bf00      	nop
 8017efe:	3714      	adds	r7, #20
 8017f00:	46bd      	mov	sp, r7
 8017f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f06:	4770      	bx	lr
 8017f08:	200014e0 	.word	0x200014e0
 8017f0c:	200014cc 	.word	0x200014cc
 8017f10:	200014c0 	.word	0x200014c0
 8017f14:	20000fe8 	.word	0x20000fe8
 8017f18:	20000fe4 	.word	0x20000fe4
 8017f1c:	200001fc 	.word	0x200001fc

08017f20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8017f20:	b580      	push	{r7, lr}
 8017f22:	b084      	sub	sp, #16
 8017f24:	af00      	add	r7, sp, #0
 8017f26:	6078      	str	r0, [r7, #4]
 8017f28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	d10a      	bne.n	8017f46 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8017f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f34:	f383 8811 	msr	BASEPRI, r3
 8017f38:	f3bf 8f6f 	isb	sy
 8017f3c:	f3bf 8f4f 	dsb	sy
 8017f40:	60fb      	str	r3, [r7, #12]
}
 8017f42:	bf00      	nop
 8017f44:	e7fe      	b.n	8017f44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017f46:	4b07      	ldr	r3, [pc, #28]	; (8017f64 <vTaskPlaceOnEventList+0x44>)
 8017f48:	681b      	ldr	r3, [r3, #0]
 8017f4a:	3318      	adds	r3, #24
 8017f4c:	4619      	mov	r1, r3
 8017f4e:	6878      	ldr	r0, [r7, #4]
 8017f50:	f7fe f9d7 	bl	8016302 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017f54:	2101      	movs	r1, #1
 8017f56:	6838      	ldr	r0, [r7, #0]
 8017f58:	f000 fb8e 	bl	8018678 <prvAddCurrentTaskToDelayedList>
}
 8017f5c:	bf00      	nop
 8017f5e:	3710      	adds	r7, #16
 8017f60:	46bd      	mov	sp, r7
 8017f62:	bd80      	pop	{r7, pc}
 8017f64:	20000fe4 	.word	0x20000fe4

08017f68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017f68:	b580      	push	{r7, lr}
 8017f6a:	b086      	sub	sp, #24
 8017f6c:	af00      	add	r7, sp, #0
 8017f6e:	60f8      	str	r0, [r7, #12]
 8017f70:	60b9      	str	r1, [r7, #8]
 8017f72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8017f74:	68fb      	ldr	r3, [r7, #12]
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d10a      	bne.n	8017f90 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8017f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f7e:	f383 8811 	msr	BASEPRI, r3
 8017f82:	f3bf 8f6f 	isb	sy
 8017f86:	f3bf 8f4f 	dsb	sy
 8017f8a:	617b      	str	r3, [r7, #20]
}
 8017f8c:	bf00      	nop
 8017f8e:	e7fe      	b.n	8017f8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017f90:	4b0a      	ldr	r3, [pc, #40]	; (8017fbc <vTaskPlaceOnEventListRestricted+0x54>)
 8017f92:	681b      	ldr	r3, [r3, #0]
 8017f94:	3318      	adds	r3, #24
 8017f96:	4619      	mov	r1, r3
 8017f98:	68f8      	ldr	r0, [r7, #12]
 8017f9a:	f7fe f98e 	bl	80162ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	d002      	beq.n	8017faa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8017fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8017fa8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017faa:	6879      	ldr	r1, [r7, #4]
 8017fac:	68b8      	ldr	r0, [r7, #8]
 8017fae:	f000 fb63 	bl	8018678 <prvAddCurrentTaskToDelayedList>
	}
 8017fb2:	bf00      	nop
 8017fb4:	3718      	adds	r7, #24
 8017fb6:	46bd      	mov	sp, r7
 8017fb8:	bd80      	pop	{r7, pc}
 8017fba:	bf00      	nop
 8017fbc:	20000fe4 	.word	0x20000fe4

08017fc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017fc0:	b580      	push	{r7, lr}
 8017fc2:	b086      	sub	sp, #24
 8017fc4:	af00      	add	r7, sp, #0
 8017fc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	68db      	ldr	r3, [r3, #12]
 8017fcc:	68db      	ldr	r3, [r3, #12]
 8017fce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8017fd0:	693b      	ldr	r3, [r7, #16]
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d10a      	bne.n	8017fec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8017fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fda:	f383 8811 	msr	BASEPRI, r3
 8017fde:	f3bf 8f6f 	isb	sy
 8017fe2:	f3bf 8f4f 	dsb	sy
 8017fe6:	60fb      	str	r3, [r7, #12]
}
 8017fe8:	bf00      	nop
 8017fea:	e7fe      	b.n	8017fea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017fec:	693b      	ldr	r3, [r7, #16]
 8017fee:	3318      	adds	r3, #24
 8017ff0:	4618      	mov	r0, r3
 8017ff2:	f7fe f9bf 	bl	8016374 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017ff6:	4b1e      	ldr	r3, [pc, #120]	; (8018070 <xTaskRemoveFromEventList+0xb0>)
 8017ff8:	681b      	ldr	r3, [r3, #0]
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d11d      	bne.n	801803a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017ffe:	693b      	ldr	r3, [r7, #16]
 8018000:	3304      	adds	r3, #4
 8018002:	4618      	mov	r0, r3
 8018004:	f7fe f9b6 	bl	8016374 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018008:	693b      	ldr	r3, [r7, #16]
 801800a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801800c:	4b19      	ldr	r3, [pc, #100]	; (8018074 <xTaskRemoveFromEventList+0xb4>)
 801800e:	681b      	ldr	r3, [r3, #0]
 8018010:	429a      	cmp	r2, r3
 8018012:	d903      	bls.n	801801c <xTaskRemoveFromEventList+0x5c>
 8018014:	693b      	ldr	r3, [r7, #16]
 8018016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018018:	4a16      	ldr	r2, [pc, #88]	; (8018074 <xTaskRemoveFromEventList+0xb4>)
 801801a:	6013      	str	r3, [r2, #0]
 801801c:	693b      	ldr	r3, [r7, #16]
 801801e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018020:	4613      	mov	r3, r2
 8018022:	009b      	lsls	r3, r3, #2
 8018024:	4413      	add	r3, r2
 8018026:	009b      	lsls	r3, r3, #2
 8018028:	4a13      	ldr	r2, [pc, #76]	; (8018078 <xTaskRemoveFromEventList+0xb8>)
 801802a:	441a      	add	r2, r3
 801802c:	693b      	ldr	r3, [r7, #16]
 801802e:	3304      	adds	r3, #4
 8018030:	4619      	mov	r1, r3
 8018032:	4610      	mov	r0, r2
 8018034:	f7fe f941 	bl	80162ba <vListInsertEnd>
 8018038:	e005      	b.n	8018046 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801803a:	693b      	ldr	r3, [r7, #16]
 801803c:	3318      	adds	r3, #24
 801803e:	4619      	mov	r1, r3
 8018040:	480e      	ldr	r0, [pc, #56]	; (801807c <xTaskRemoveFromEventList+0xbc>)
 8018042:	f7fe f93a 	bl	80162ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018046:	693b      	ldr	r3, [r7, #16]
 8018048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801804a:	4b0d      	ldr	r3, [pc, #52]	; (8018080 <xTaskRemoveFromEventList+0xc0>)
 801804c:	681b      	ldr	r3, [r3, #0]
 801804e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018050:	429a      	cmp	r2, r3
 8018052:	d905      	bls.n	8018060 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018054:	2301      	movs	r3, #1
 8018056:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8018058:	4b0a      	ldr	r3, [pc, #40]	; (8018084 <xTaskRemoveFromEventList+0xc4>)
 801805a:	2201      	movs	r2, #1
 801805c:	601a      	str	r2, [r3, #0]
 801805e:	e001      	b.n	8018064 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8018060:	2300      	movs	r3, #0
 8018062:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018064:	697b      	ldr	r3, [r7, #20]
}
 8018066:	4618      	mov	r0, r3
 8018068:	3718      	adds	r7, #24
 801806a:	46bd      	mov	sp, r7
 801806c:	bd80      	pop	{r7, pc}
 801806e:	bf00      	nop
 8018070:	200014e0 	.word	0x200014e0
 8018074:	200014c0 	.word	0x200014c0
 8018078:	20000fe8 	.word	0x20000fe8
 801807c:	20001478 	.word	0x20001478
 8018080:	20000fe4 	.word	0x20000fe4
 8018084:	200014cc 	.word	0x200014cc

08018088 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8018088:	b480      	push	{r7}
 801808a:	b083      	sub	sp, #12
 801808c:	af00      	add	r7, sp, #0
 801808e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018090:	4b06      	ldr	r3, [pc, #24]	; (80180ac <vTaskInternalSetTimeOutState+0x24>)
 8018092:	681a      	ldr	r2, [r3, #0]
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018098:	4b05      	ldr	r3, [pc, #20]	; (80180b0 <vTaskInternalSetTimeOutState+0x28>)
 801809a:	681a      	ldr	r2, [r3, #0]
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	605a      	str	r2, [r3, #4]
}
 80180a0:	bf00      	nop
 80180a2:	370c      	adds	r7, #12
 80180a4:	46bd      	mov	sp, r7
 80180a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180aa:	4770      	bx	lr
 80180ac:	200014d0 	.word	0x200014d0
 80180b0:	200014bc 	.word	0x200014bc

080180b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80180b4:	b580      	push	{r7, lr}
 80180b6:	b088      	sub	sp, #32
 80180b8:	af00      	add	r7, sp, #0
 80180ba:	6078      	str	r0, [r7, #4]
 80180bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d10a      	bne.n	80180da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80180c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180c8:	f383 8811 	msr	BASEPRI, r3
 80180cc:	f3bf 8f6f 	isb	sy
 80180d0:	f3bf 8f4f 	dsb	sy
 80180d4:	613b      	str	r3, [r7, #16]
}
 80180d6:	bf00      	nop
 80180d8:	e7fe      	b.n	80180d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80180da:	683b      	ldr	r3, [r7, #0]
 80180dc:	2b00      	cmp	r3, #0
 80180de:	d10a      	bne.n	80180f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80180e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180e4:	f383 8811 	msr	BASEPRI, r3
 80180e8:	f3bf 8f6f 	isb	sy
 80180ec:	f3bf 8f4f 	dsb	sy
 80180f0:	60fb      	str	r3, [r7, #12]
}
 80180f2:	bf00      	nop
 80180f4:	e7fe      	b.n	80180f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80180f6:	f000 ff8d 	bl	8019014 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80180fa:	4b1d      	ldr	r3, [pc, #116]	; (8018170 <xTaskCheckForTimeOut+0xbc>)
 80180fc:	681b      	ldr	r3, [r3, #0]
 80180fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	685b      	ldr	r3, [r3, #4]
 8018104:	69ba      	ldr	r2, [r7, #24]
 8018106:	1ad3      	subs	r3, r2, r3
 8018108:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801810a:	683b      	ldr	r3, [r7, #0]
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018112:	d102      	bne.n	801811a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018114:	2300      	movs	r3, #0
 8018116:	61fb      	str	r3, [r7, #28]
 8018118:	e023      	b.n	8018162 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	681a      	ldr	r2, [r3, #0]
 801811e:	4b15      	ldr	r3, [pc, #84]	; (8018174 <xTaskCheckForTimeOut+0xc0>)
 8018120:	681b      	ldr	r3, [r3, #0]
 8018122:	429a      	cmp	r2, r3
 8018124:	d007      	beq.n	8018136 <xTaskCheckForTimeOut+0x82>
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	685b      	ldr	r3, [r3, #4]
 801812a:	69ba      	ldr	r2, [r7, #24]
 801812c:	429a      	cmp	r2, r3
 801812e:	d302      	bcc.n	8018136 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018130:	2301      	movs	r3, #1
 8018132:	61fb      	str	r3, [r7, #28]
 8018134:	e015      	b.n	8018162 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8018136:	683b      	ldr	r3, [r7, #0]
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	697a      	ldr	r2, [r7, #20]
 801813c:	429a      	cmp	r2, r3
 801813e:	d20b      	bcs.n	8018158 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018140:	683b      	ldr	r3, [r7, #0]
 8018142:	681a      	ldr	r2, [r3, #0]
 8018144:	697b      	ldr	r3, [r7, #20]
 8018146:	1ad2      	subs	r2, r2, r3
 8018148:	683b      	ldr	r3, [r7, #0]
 801814a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801814c:	6878      	ldr	r0, [r7, #4]
 801814e:	f7ff ff9b 	bl	8018088 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8018152:	2300      	movs	r3, #0
 8018154:	61fb      	str	r3, [r7, #28]
 8018156:	e004      	b.n	8018162 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8018158:	683b      	ldr	r3, [r7, #0]
 801815a:	2200      	movs	r2, #0
 801815c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801815e:	2301      	movs	r3, #1
 8018160:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8018162:	f000 ff87 	bl	8019074 <vPortExitCritical>

	return xReturn;
 8018166:	69fb      	ldr	r3, [r7, #28]
}
 8018168:	4618      	mov	r0, r3
 801816a:	3720      	adds	r7, #32
 801816c:	46bd      	mov	sp, r7
 801816e:	bd80      	pop	{r7, pc}
 8018170:	200014bc 	.word	0x200014bc
 8018174:	200014d0 	.word	0x200014d0

08018178 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018178:	b480      	push	{r7}
 801817a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801817c:	4b03      	ldr	r3, [pc, #12]	; (801818c <vTaskMissedYield+0x14>)
 801817e:	2201      	movs	r2, #1
 8018180:	601a      	str	r2, [r3, #0]
}
 8018182:	bf00      	nop
 8018184:	46bd      	mov	sp, r7
 8018186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801818a:	4770      	bx	lr
 801818c:	200014cc 	.word	0x200014cc

08018190 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018190:	b580      	push	{r7, lr}
 8018192:	b082      	sub	sp, #8
 8018194:	af00      	add	r7, sp, #0
 8018196:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8018198:	f000 f852 	bl	8018240 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801819c:	4b06      	ldr	r3, [pc, #24]	; (80181b8 <prvIdleTask+0x28>)
 801819e:	681b      	ldr	r3, [r3, #0]
 80181a0:	2b01      	cmp	r3, #1
 80181a2:	d9f9      	bls.n	8018198 <prvIdleTask+0x8>
			{
				taskYIELD();
 80181a4:	4b05      	ldr	r3, [pc, #20]	; (80181bc <prvIdleTask+0x2c>)
 80181a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80181aa:	601a      	str	r2, [r3, #0]
 80181ac:	f3bf 8f4f 	dsb	sy
 80181b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80181b4:	e7f0      	b.n	8018198 <prvIdleTask+0x8>
 80181b6:	bf00      	nop
 80181b8:	20000fe8 	.word	0x20000fe8
 80181bc:	e000ed04 	.word	0xe000ed04

080181c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80181c0:	b580      	push	{r7, lr}
 80181c2:	b082      	sub	sp, #8
 80181c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80181c6:	2300      	movs	r3, #0
 80181c8:	607b      	str	r3, [r7, #4]
 80181ca:	e00c      	b.n	80181e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80181cc:	687a      	ldr	r2, [r7, #4]
 80181ce:	4613      	mov	r3, r2
 80181d0:	009b      	lsls	r3, r3, #2
 80181d2:	4413      	add	r3, r2
 80181d4:	009b      	lsls	r3, r3, #2
 80181d6:	4a12      	ldr	r2, [pc, #72]	; (8018220 <prvInitialiseTaskLists+0x60>)
 80181d8:	4413      	add	r3, r2
 80181da:	4618      	mov	r0, r3
 80181dc:	f7fe f840 	bl	8016260 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	3301      	adds	r3, #1
 80181e4:	607b      	str	r3, [r7, #4]
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	2b37      	cmp	r3, #55	; 0x37
 80181ea:	d9ef      	bls.n	80181cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80181ec:	480d      	ldr	r0, [pc, #52]	; (8018224 <prvInitialiseTaskLists+0x64>)
 80181ee:	f7fe f837 	bl	8016260 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80181f2:	480d      	ldr	r0, [pc, #52]	; (8018228 <prvInitialiseTaskLists+0x68>)
 80181f4:	f7fe f834 	bl	8016260 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80181f8:	480c      	ldr	r0, [pc, #48]	; (801822c <prvInitialiseTaskLists+0x6c>)
 80181fa:	f7fe f831 	bl	8016260 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80181fe:	480c      	ldr	r0, [pc, #48]	; (8018230 <prvInitialiseTaskLists+0x70>)
 8018200:	f7fe f82e 	bl	8016260 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018204:	480b      	ldr	r0, [pc, #44]	; (8018234 <prvInitialiseTaskLists+0x74>)
 8018206:	f7fe f82b 	bl	8016260 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801820a:	4b0b      	ldr	r3, [pc, #44]	; (8018238 <prvInitialiseTaskLists+0x78>)
 801820c:	4a05      	ldr	r2, [pc, #20]	; (8018224 <prvInitialiseTaskLists+0x64>)
 801820e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018210:	4b0a      	ldr	r3, [pc, #40]	; (801823c <prvInitialiseTaskLists+0x7c>)
 8018212:	4a05      	ldr	r2, [pc, #20]	; (8018228 <prvInitialiseTaskLists+0x68>)
 8018214:	601a      	str	r2, [r3, #0]
}
 8018216:	bf00      	nop
 8018218:	3708      	adds	r7, #8
 801821a:	46bd      	mov	sp, r7
 801821c:	bd80      	pop	{r7, pc}
 801821e:	bf00      	nop
 8018220:	20000fe8 	.word	0x20000fe8
 8018224:	20001448 	.word	0x20001448
 8018228:	2000145c 	.word	0x2000145c
 801822c:	20001478 	.word	0x20001478
 8018230:	2000148c 	.word	0x2000148c
 8018234:	200014a4 	.word	0x200014a4
 8018238:	20001470 	.word	0x20001470
 801823c:	20001474 	.word	0x20001474

08018240 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018240:	b580      	push	{r7, lr}
 8018242:	b082      	sub	sp, #8
 8018244:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018246:	e019      	b.n	801827c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018248:	f000 fee4 	bl	8019014 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801824c:	4b10      	ldr	r3, [pc, #64]	; (8018290 <prvCheckTasksWaitingTermination+0x50>)
 801824e:	68db      	ldr	r3, [r3, #12]
 8018250:	68db      	ldr	r3, [r3, #12]
 8018252:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	3304      	adds	r3, #4
 8018258:	4618      	mov	r0, r3
 801825a:	f7fe f88b 	bl	8016374 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801825e:	4b0d      	ldr	r3, [pc, #52]	; (8018294 <prvCheckTasksWaitingTermination+0x54>)
 8018260:	681b      	ldr	r3, [r3, #0]
 8018262:	3b01      	subs	r3, #1
 8018264:	4a0b      	ldr	r2, [pc, #44]	; (8018294 <prvCheckTasksWaitingTermination+0x54>)
 8018266:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018268:	4b0b      	ldr	r3, [pc, #44]	; (8018298 <prvCheckTasksWaitingTermination+0x58>)
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	3b01      	subs	r3, #1
 801826e:	4a0a      	ldr	r2, [pc, #40]	; (8018298 <prvCheckTasksWaitingTermination+0x58>)
 8018270:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8018272:	f000 feff 	bl	8019074 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8018276:	6878      	ldr	r0, [r7, #4]
 8018278:	f000 f810 	bl	801829c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801827c:	4b06      	ldr	r3, [pc, #24]	; (8018298 <prvCheckTasksWaitingTermination+0x58>)
 801827e:	681b      	ldr	r3, [r3, #0]
 8018280:	2b00      	cmp	r3, #0
 8018282:	d1e1      	bne.n	8018248 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018284:	bf00      	nop
 8018286:	bf00      	nop
 8018288:	3708      	adds	r7, #8
 801828a:	46bd      	mov	sp, r7
 801828c:	bd80      	pop	{r7, pc}
 801828e:	bf00      	nop
 8018290:	2000148c 	.word	0x2000148c
 8018294:	200014b8 	.word	0x200014b8
 8018298:	200014a0 	.word	0x200014a0

0801829c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801829c:	b580      	push	{r7, lr}
 801829e:	b084      	sub	sp, #16
 80182a0:	af00      	add	r7, sp, #0
 80182a2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	3354      	adds	r3, #84	; 0x54
 80182a8:	4618      	mov	r0, r3
 80182aa:	f004 fb6b 	bl	801c984 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80182ae:	687b      	ldr	r3, [r7, #4]
 80182b0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80182b4:	2b00      	cmp	r3, #0
 80182b6:	d108      	bne.n	80182ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80182bc:	4618      	mov	r0, r3
 80182be:	f001 f897 	bl	80193f0 <vPortFree>
				vPortFree( pxTCB );
 80182c2:	6878      	ldr	r0, [r7, #4]
 80182c4:	f001 f894 	bl	80193f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80182c8:	e018      	b.n	80182fc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80182d0:	2b01      	cmp	r3, #1
 80182d2:	d103      	bne.n	80182dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80182d4:	6878      	ldr	r0, [r7, #4]
 80182d6:	f001 f88b 	bl	80193f0 <vPortFree>
	}
 80182da:	e00f      	b.n	80182fc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80182e2:	2b02      	cmp	r3, #2
 80182e4:	d00a      	beq.n	80182fc <prvDeleteTCB+0x60>
	__asm volatile
 80182e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182ea:	f383 8811 	msr	BASEPRI, r3
 80182ee:	f3bf 8f6f 	isb	sy
 80182f2:	f3bf 8f4f 	dsb	sy
 80182f6:	60fb      	str	r3, [r7, #12]
}
 80182f8:	bf00      	nop
 80182fa:	e7fe      	b.n	80182fa <prvDeleteTCB+0x5e>
	}
 80182fc:	bf00      	nop
 80182fe:	3710      	adds	r7, #16
 8018300:	46bd      	mov	sp, r7
 8018302:	bd80      	pop	{r7, pc}

08018304 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018304:	b480      	push	{r7}
 8018306:	b083      	sub	sp, #12
 8018308:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801830a:	4b0c      	ldr	r3, [pc, #48]	; (801833c <prvResetNextTaskUnblockTime+0x38>)
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	2b00      	cmp	r3, #0
 8018312:	d104      	bne.n	801831e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018314:	4b0a      	ldr	r3, [pc, #40]	; (8018340 <prvResetNextTaskUnblockTime+0x3c>)
 8018316:	f04f 32ff 	mov.w	r2, #4294967295
 801831a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801831c:	e008      	b.n	8018330 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801831e:	4b07      	ldr	r3, [pc, #28]	; (801833c <prvResetNextTaskUnblockTime+0x38>)
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	68db      	ldr	r3, [r3, #12]
 8018324:	68db      	ldr	r3, [r3, #12]
 8018326:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	685b      	ldr	r3, [r3, #4]
 801832c:	4a04      	ldr	r2, [pc, #16]	; (8018340 <prvResetNextTaskUnblockTime+0x3c>)
 801832e:	6013      	str	r3, [r2, #0]
}
 8018330:	bf00      	nop
 8018332:	370c      	adds	r7, #12
 8018334:	46bd      	mov	sp, r7
 8018336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801833a:	4770      	bx	lr
 801833c:	20001470 	.word	0x20001470
 8018340:	200014d8 	.word	0x200014d8

08018344 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8018344:	b480      	push	{r7}
 8018346:	b083      	sub	sp, #12
 8018348:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801834a:	4b05      	ldr	r3, [pc, #20]	; (8018360 <xTaskGetCurrentTaskHandle+0x1c>)
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8018350:	687b      	ldr	r3, [r7, #4]
	}
 8018352:	4618      	mov	r0, r3
 8018354:	370c      	adds	r7, #12
 8018356:	46bd      	mov	sp, r7
 8018358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801835c:	4770      	bx	lr
 801835e:	bf00      	nop
 8018360:	20000fe4 	.word	0x20000fe4

08018364 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018364:	b480      	push	{r7}
 8018366:	b083      	sub	sp, #12
 8018368:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801836a:	4b0b      	ldr	r3, [pc, #44]	; (8018398 <xTaskGetSchedulerState+0x34>)
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	2b00      	cmp	r3, #0
 8018370:	d102      	bne.n	8018378 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018372:	2301      	movs	r3, #1
 8018374:	607b      	str	r3, [r7, #4]
 8018376:	e008      	b.n	801838a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018378:	4b08      	ldr	r3, [pc, #32]	; (801839c <xTaskGetSchedulerState+0x38>)
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	2b00      	cmp	r3, #0
 801837e:	d102      	bne.n	8018386 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018380:	2302      	movs	r3, #2
 8018382:	607b      	str	r3, [r7, #4]
 8018384:	e001      	b.n	801838a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018386:	2300      	movs	r3, #0
 8018388:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801838a:	687b      	ldr	r3, [r7, #4]
	}
 801838c:	4618      	mov	r0, r3
 801838e:	370c      	adds	r7, #12
 8018390:	46bd      	mov	sp, r7
 8018392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018396:	4770      	bx	lr
 8018398:	200014c4 	.word	0x200014c4
 801839c:	200014e0 	.word	0x200014e0

080183a0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80183a0:	b580      	push	{r7, lr}
 80183a2:	b084      	sub	sp, #16
 80183a4:	af00      	add	r7, sp, #0
 80183a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80183ac:	2300      	movs	r3, #0
 80183ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d051      	beq.n	801845a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80183b6:	68bb      	ldr	r3, [r7, #8]
 80183b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183ba:	4b2a      	ldr	r3, [pc, #168]	; (8018464 <xTaskPriorityInherit+0xc4>)
 80183bc:	681b      	ldr	r3, [r3, #0]
 80183be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183c0:	429a      	cmp	r2, r3
 80183c2:	d241      	bcs.n	8018448 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80183c4:	68bb      	ldr	r3, [r7, #8]
 80183c6:	699b      	ldr	r3, [r3, #24]
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	db06      	blt.n	80183da <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80183cc:	4b25      	ldr	r3, [pc, #148]	; (8018464 <xTaskPriorityInherit+0xc4>)
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80183d6:	68bb      	ldr	r3, [r7, #8]
 80183d8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80183da:	68bb      	ldr	r3, [r7, #8]
 80183dc:	6959      	ldr	r1, [r3, #20]
 80183de:	68bb      	ldr	r3, [r7, #8]
 80183e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183e2:	4613      	mov	r3, r2
 80183e4:	009b      	lsls	r3, r3, #2
 80183e6:	4413      	add	r3, r2
 80183e8:	009b      	lsls	r3, r3, #2
 80183ea:	4a1f      	ldr	r2, [pc, #124]	; (8018468 <xTaskPriorityInherit+0xc8>)
 80183ec:	4413      	add	r3, r2
 80183ee:	4299      	cmp	r1, r3
 80183f0:	d122      	bne.n	8018438 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80183f2:	68bb      	ldr	r3, [r7, #8]
 80183f4:	3304      	adds	r3, #4
 80183f6:	4618      	mov	r0, r3
 80183f8:	f7fd ffbc 	bl	8016374 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80183fc:	4b19      	ldr	r3, [pc, #100]	; (8018464 <xTaskPriorityInherit+0xc4>)
 80183fe:	681b      	ldr	r3, [r3, #0]
 8018400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018402:	68bb      	ldr	r3, [r7, #8]
 8018404:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8018406:	68bb      	ldr	r3, [r7, #8]
 8018408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801840a:	4b18      	ldr	r3, [pc, #96]	; (801846c <xTaskPriorityInherit+0xcc>)
 801840c:	681b      	ldr	r3, [r3, #0]
 801840e:	429a      	cmp	r2, r3
 8018410:	d903      	bls.n	801841a <xTaskPriorityInherit+0x7a>
 8018412:	68bb      	ldr	r3, [r7, #8]
 8018414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018416:	4a15      	ldr	r2, [pc, #84]	; (801846c <xTaskPriorityInherit+0xcc>)
 8018418:	6013      	str	r3, [r2, #0]
 801841a:	68bb      	ldr	r3, [r7, #8]
 801841c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801841e:	4613      	mov	r3, r2
 8018420:	009b      	lsls	r3, r3, #2
 8018422:	4413      	add	r3, r2
 8018424:	009b      	lsls	r3, r3, #2
 8018426:	4a10      	ldr	r2, [pc, #64]	; (8018468 <xTaskPriorityInherit+0xc8>)
 8018428:	441a      	add	r2, r3
 801842a:	68bb      	ldr	r3, [r7, #8]
 801842c:	3304      	adds	r3, #4
 801842e:	4619      	mov	r1, r3
 8018430:	4610      	mov	r0, r2
 8018432:	f7fd ff42 	bl	80162ba <vListInsertEnd>
 8018436:	e004      	b.n	8018442 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018438:	4b0a      	ldr	r3, [pc, #40]	; (8018464 <xTaskPriorityInherit+0xc4>)
 801843a:	681b      	ldr	r3, [r3, #0]
 801843c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801843e:	68bb      	ldr	r3, [r7, #8]
 8018440:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8018442:	2301      	movs	r3, #1
 8018444:	60fb      	str	r3, [r7, #12]
 8018446:	e008      	b.n	801845a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8018448:	68bb      	ldr	r3, [r7, #8]
 801844a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801844c:	4b05      	ldr	r3, [pc, #20]	; (8018464 <xTaskPriorityInherit+0xc4>)
 801844e:	681b      	ldr	r3, [r3, #0]
 8018450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018452:	429a      	cmp	r2, r3
 8018454:	d201      	bcs.n	801845a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8018456:	2301      	movs	r3, #1
 8018458:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801845a:	68fb      	ldr	r3, [r7, #12]
	}
 801845c:	4618      	mov	r0, r3
 801845e:	3710      	adds	r7, #16
 8018460:	46bd      	mov	sp, r7
 8018462:	bd80      	pop	{r7, pc}
 8018464:	20000fe4 	.word	0x20000fe4
 8018468:	20000fe8 	.word	0x20000fe8
 801846c:	200014c0 	.word	0x200014c0

08018470 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018470:	b580      	push	{r7, lr}
 8018472:	b086      	sub	sp, #24
 8018474:	af00      	add	r7, sp, #0
 8018476:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801847c:	2300      	movs	r3, #0
 801847e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	2b00      	cmp	r3, #0
 8018484:	d056      	beq.n	8018534 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018486:	4b2e      	ldr	r3, [pc, #184]	; (8018540 <xTaskPriorityDisinherit+0xd0>)
 8018488:	681b      	ldr	r3, [r3, #0]
 801848a:	693a      	ldr	r2, [r7, #16]
 801848c:	429a      	cmp	r2, r3
 801848e:	d00a      	beq.n	80184a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8018490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018494:	f383 8811 	msr	BASEPRI, r3
 8018498:	f3bf 8f6f 	isb	sy
 801849c:	f3bf 8f4f 	dsb	sy
 80184a0:	60fb      	str	r3, [r7, #12]
}
 80184a2:	bf00      	nop
 80184a4:	e7fe      	b.n	80184a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80184a6:	693b      	ldr	r3, [r7, #16]
 80184a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d10a      	bne.n	80184c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80184ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184b2:	f383 8811 	msr	BASEPRI, r3
 80184b6:	f3bf 8f6f 	isb	sy
 80184ba:	f3bf 8f4f 	dsb	sy
 80184be:	60bb      	str	r3, [r7, #8]
}
 80184c0:	bf00      	nop
 80184c2:	e7fe      	b.n	80184c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80184c4:	693b      	ldr	r3, [r7, #16]
 80184c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80184c8:	1e5a      	subs	r2, r3, #1
 80184ca:	693b      	ldr	r3, [r7, #16]
 80184cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80184ce:	693b      	ldr	r3, [r7, #16]
 80184d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80184d2:	693b      	ldr	r3, [r7, #16]
 80184d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80184d6:	429a      	cmp	r2, r3
 80184d8:	d02c      	beq.n	8018534 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80184da:	693b      	ldr	r3, [r7, #16]
 80184dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80184de:	2b00      	cmp	r3, #0
 80184e0:	d128      	bne.n	8018534 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80184e2:	693b      	ldr	r3, [r7, #16]
 80184e4:	3304      	adds	r3, #4
 80184e6:	4618      	mov	r0, r3
 80184e8:	f7fd ff44 	bl	8016374 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80184ec:	693b      	ldr	r3, [r7, #16]
 80184ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80184f0:	693b      	ldr	r3, [r7, #16]
 80184f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80184f4:	693b      	ldr	r3, [r7, #16]
 80184f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80184f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80184fc:	693b      	ldr	r3, [r7, #16]
 80184fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018500:	693b      	ldr	r3, [r7, #16]
 8018502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018504:	4b0f      	ldr	r3, [pc, #60]	; (8018544 <xTaskPriorityDisinherit+0xd4>)
 8018506:	681b      	ldr	r3, [r3, #0]
 8018508:	429a      	cmp	r2, r3
 801850a:	d903      	bls.n	8018514 <xTaskPriorityDisinherit+0xa4>
 801850c:	693b      	ldr	r3, [r7, #16]
 801850e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018510:	4a0c      	ldr	r2, [pc, #48]	; (8018544 <xTaskPriorityDisinherit+0xd4>)
 8018512:	6013      	str	r3, [r2, #0]
 8018514:	693b      	ldr	r3, [r7, #16]
 8018516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018518:	4613      	mov	r3, r2
 801851a:	009b      	lsls	r3, r3, #2
 801851c:	4413      	add	r3, r2
 801851e:	009b      	lsls	r3, r3, #2
 8018520:	4a09      	ldr	r2, [pc, #36]	; (8018548 <xTaskPriorityDisinherit+0xd8>)
 8018522:	441a      	add	r2, r3
 8018524:	693b      	ldr	r3, [r7, #16]
 8018526:	3304      	adds	r3, #4
 8018528:	4619      	mov	r1, r3
 801852a:	4610      	mov	r0, r2
 801852c:	f7fd fec5 	bl	80162ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018530:	2301      	movs	r3, #1
 8018532:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018534:	697b      	ldr	r3, [r7, #20]
	}
 8018536:	4618      	mov	r0, r3
 8018538:	3718      	adds	r7, #24
 801853a:	46bd      	mov	sp, r7
 801853c:	bd80      	pop	{r7, pc}
 801853e:	bf00      	nop
 8018540:	20000fe4 	.word	0x20000fe4
 8018544:	200014c0 	.word	0x200014c0
 8018548:	20000fe8 	.word	0x20000fe8

0801854c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801854c:	b580      	push	{r7, lr}
 801854e:	b088      	sub	sp, #32
 8018550:	af00      	add	r7, sp, #0
 8018552:	6078      	str	r0, [r7, #4]
 8018554:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801855a:	2301      	movs	r3, #1
 801855c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	2b00      	cmp	r3, #0
 8018562:	d06a      	beq.n	801863a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8018564:	69bb      	ldr	r3, [r7, #24]
 8018566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018568:	2b00      	cmp	r3, #0
 801856a:	d10a      	bne.n	8018582 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801856c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018570:	f383 8811 	msr	BASEPRI, r3
 8018574:	f3bf 8f6f 	isb	sy
 8018578:	f3bf 8f4f 	dsb	sy
 801857c:	60fb      	str	r3, [r7, #12]
}
 801857e:	bf00      	nop
 8018580:	e7fe      	b.n	8018580 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8018582:	69bb      	ldr	r3, [r7, #24]
 8018584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018586:	683a      	ldr	r2, [r7, #0]
 8018588:	429a      	cmp	r2, r3
 801858a:	d902      	bls.n	8018592 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801858c:	683b      	ldr	r3, [r7, #0]
 801858e:	61fb      	str	r3, [r7, #28]
 8018590:	e002      	b.n	8018598 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8018592:	69bb      	ldr	r3, [r7, #24]
 8018594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018596:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8018598:	69bb      	ldr	r3, [r7, #24]
 801859a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801859c:	69fa      	ldr	r2, [r7, #28]
 801859e:	429a      	cmp	r2, r3
 80185a0:	d04b      	beq.n	801863a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80185a2:	69bb      	ldr	r3, [r7, #24]
 80185a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80185a6:	697a      	ldr	r2, [r7, #20]
 80185a8:	429a      	cmp	r2, r3
 80185aa:	d146      	bne.n	801863a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80185ac:	4b25      	ldr	r3, [pc, #148]	; (8018644 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80185ae:	681b      	ldr	r3, [r3, #0]
 80185b0:	69ba      	ldr	r2, [r7, #24]
 80185b2:	429a      	cmp	r2, r3
 80185b4:	d10a      	bne.n	80185cc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80185b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185ba:	f383 8811 	msr	BASEPRI, r3
 80185be:	f3bf 8f6f 	isb	sy
 80185c2:	f3bf 8f4f 	dsb	sy
 80185c6:	60bb      	str	r3, [r7, #8]
}
 80185c8:	bf00      	nop
 80185ca:	e7fe      	b.n	80185ca <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80185cc:	69bb      	ldr	r3, [r7, #24]
 80185ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185d0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80185d2:	69bb      	ldr	r3, [r7, #24]
 80185d4:	69fa      	ldr	r2, [r7, #28]
 80185d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80185d8:	69bb      	ldr	r3, [r7, #24]
 80185da:	699b      	ldr	r3, [r3, #24]
 80185dc:	2b00      	cmp	r3, #0
 80185de:	db04      	blt.n	80185ea <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80185e0:	69fb      	ldr	r3, [r7, #28]
 80185e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80185e6:	69bb      	ldr	r3, [r7, #24]
 80185e8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80185ea:	69bb      	ldr	r3, [r7, #24]
 80185ec:	6959      	ldr	r1, [r3, #20]
 80185ee:	693a      	ldr	r2, [r7, #16]
 80185f0:	4613      	mov	r3, r2
 80185f2:	009b      	lsls	r3, r3, #2
 80185f4:	4413      	add	r3, r2
 80185f6:	009b      	lsls	r3, r3, #2
 80185f8:	4a13      	ldr	r2, [pc, #76]	; (8018648 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80185fa:	4413      	add	r3, r2
 80185fc:	4299      	cmp	r1, r3
 80185fe:	d11c      	bne.n	801863a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018600:	69bb      	ldr	r3, [r7, #24]
 8018602:	3304      	adds	r3, #4
 8018604:	4618      	mov	r0, r3
 8018606:	f7fd feb5 	bl	8016374 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801860a:	69bb      	ldr	r3, [r7, #24]
 801860c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801860e:	4b0f      	ldr	r3, [pc, #60]	; (801864c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8018610:	681b      	ldr	r3, [r3, #0]
 8018612:	429a      	cmp	r2, r3
 8018614:	d903      	bls.n	801861e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8018616:	69bb      	ldr	r3, [r7, #24]
 8018618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801861a:	4a0c      	ldr	r2, [pc, #48]	; (801864c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801861c:	6013      	str	r3, [r2, #0]
 801861e:	69bb      	ldr	r3, [r7, #24]
 8018620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018622:	4613      	mov	r3, r2
 8018624:	009b      	lsls	r3, r3, #2
 8018626:	4413      	add	r3, r2
 8018628:	009b      	lsls	r3, r3, #2
 801862a:	4a07      	ldr	r2, [pc, #28]	; (8018648 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801862c:	441a      	add	r2, r3
 801862e:	69bb      	ldr	r3, [r7, #24]
 8018630:	3304      	adds	r3, #4
 8018632:	4619      	mov	r1, r3
 8018634:	4610      	mov	r0, r2
 8018636:	f7fd fe40 	bl	80162ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801863a:	bf00      	nop
 801863c:	3720      	adds	r7, #32
 801863e:	46bd      	mov	sp, r7
 8018640:	bd80      	pop	{r7, pc}
 8018642:	bf00      	nop
 8018644:	20000fe4 	.word	0x20000fe4
 8018648:	20000fe8 	.word	0x20000fe8
 801864c:	200014c0 	.word	0x200014c0

08018650 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8018650:	b480      	push	{r7}
 8018652:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8018654:	4b07      	ldr	r3, [pc, #28]	; (8018674 <pvTaskIncrementMutexHeldCount+0x24>)
 8018656:	681b      	ldr	r3, [r3, #0]
 8018658:	2b00      	cmp	r3, #0
 801865a:	d004      	beq.n	8018666 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801865c:	4b05      	ldr	r3, [pc, #20]	; (8018674 <pvTaskIncrementMutexHeldCount+0x24>)
 801865e:	681b      	ldr	r3, [r3, #0]
 8018660:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018662:	3201      	adds	r2, #1
 8018664:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8018666:	4b03      	ldr	r3, [pc, #12]	; (8018674 <pvTaskIncrementMutexHeldCount+0x24>)
 8018668:	681b      	ldr	r3, [r3, #0]
	}
 801866a:	4618      	mov	r0, r3
 801866c:	46bd      	mov	sp, r7
 801866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018672:	4770      	bx	lr
 8018674:	20000fe4 	.word	0x20000fe4

08018678 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018678:	b580      	push	{r7, lr}
 801867a:	b084      	sub	sp, #16
 801867c:	af00      	add	r7, sp, #0
 801867e:	6078      	str	r0, [r7, #4]
 8018680:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018682:	4b21      	ldr	r3, [pc, #132]	; (8018708 <prvAddCurrentTaskToDelayedList+0x90>)
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018688:	4b20      	ldr	r3, [pc, #128]	; (801870c <prvAddCurrentTaskToDelayedList+0x94>)
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	3304      	adds	r3, #4
 801868e:	4618      	mov	r0, r3
 8018690:	f7fd fe70 	bl	8016374 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	f1b3 3fff 	cmp.w	r3, #4294967295
 801869a:	d10a      	bne.n	80186b2 <prvAddCurrentTaskToDelayedList+0x3a>
 801869c:	683b      	ldr	r3, [r7, #0]
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d007      	beq.n	80186b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80186a2:	4b1a      	ldr	r3, [pc, #104]	; (801870c <prvAddCurrentTaskToDelayedList+0x94>)
 80186a4:	681b      	ldr	r3, [r3, #0]
 80186a6:	3304      	adds	r3, #4
 80186a8:	4619      	mov	r1, r3
 80186aa:	4819      	ldr	r0, [pc, #100]	; (8018710 <prvAddCurrentTaskToDelayedList+0x98>)
 80186ac:	f7fd fe05 	bl	80162ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80186b0:	e026      	b.n	8018700 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80186b2:	68fa      	ldr	r2, [r7, #12]
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	4413      	add	r3, r2
 80186b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80186ba:	4b14      	ldr	r3, [pc, #80]	; (801870c <prvAddCurrentTaskToDelayedList+0x94>)
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	68ba      	ldr	r2, [r7, #8]
 80186c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80186c2:	68ba      	ldr	r2, [r7, #8]
 80186c4:	68fb      	ldr	r3, [r7, #12]
 80186c6:	429a      	cmp	r2, r3
 80186c8:	d209      	bcs.n	80186de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80186ca:	4b12      	ldr	r3, [pc, #72]	; (8018714 <prvAddCurrentTaskToDelayedList+0x9c>)
 80186cc:	681a      	ldr	r2, [r3, #0]
 80186ce:	4b0f      	ldr	r3, [pc, #60]	; (801870c <prvAddCurrentTaskToDelayedList+0x94>)
 80186d0:	681b      	ldr	r3, [r3, #0]
 80186d2:	3304      	adds	r3, #4
 80186d4:	4619      	mov	r1, r3
 80186d6:	4610      	mov	r0, r2
 80186d8:	f7fd fe13 	bl	8016302 <vListInsert>
}
 80186dc:	e010      	b.n	8018700 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80186de:	4b0e      	ldr	r3, [pc, #56]	; (8018718 <prvAddCurrentTaskToDelayedList+0xa0>)
 80186e0:	681a      	ldr	r2, [r3, #0]
 80186e2:	4b0a      	ldr	r3, [pc, #40]	; (801870c <prvAddCurrentTaskToDelayedList+0x94>)
 80186e4:	681b      	ldr	r3, [r3, #0]
 80186e6:	3304      	adds	r3, #4
 80186e8:	4619      	mov	r1, r3
 80186ea:	4610      	mov	r0, r2
 80186ec:	f7fd fe09 	bl	8016302 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80186f0:	4b0a      	ldr	r3, [pc, #40]	; (801871c <prvAddCurrentTaskToDelayedList+0xa4>)
 80186f2:	681b      	ldr	r3, [r3, #0]
 80186f4:	68ba      	ldr	r2, [r7, #8]
 80186f6:	429a      	cmp	r2, r3
 80186f8:	d202      	bcs.n	8018700 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80186fa:	4a08      	ldr	r2, [pc, #32]	; (801871c <prvAddCurrentTaskToDelayedList+0xa4>)
 80186fc:	68bb      	ldr	r3, [r7, #8]
 80186fe:	6013      	str	r3, [r2, #0]
}
 8018700:	bf00      	nop
 8018702:	3710      	adds	r7, #16
 8018704:	46bd      	mov	sp, r7
 8018706:	bd80      	pop	{r7, pc}
 8018708:	200014bc 	.word	0x200014bc
 801870c:	20000fe4 	.word	0x20000fe4
 8018710:	200014a4 	.word	0x200014a4
 8018714:	20001474 	.word	0x20001474
 8018718:	20001470 	.word	0x20001470
 801871c:	200014d8 	.word	0x200014d8

08018720 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018720:	b580      	push	{r7, lr}
 8018722:	b08a      	sub	sp, #40	; 0x28
 8018724:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018726:	2300      	movs	r3, #0
 8018728:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801872a:	f000 fb07 	bl	8018d3c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801872e:	4b1c      	ldr	r3, [pc, #112]	; (80187a0 <xTimerCreateTimerTask+0x80>)
 8018730:	681b      	ldr	r3, [r3, #0]
 8018732:	2b00      	cmp	r3, #0
 8018734:	d021      	beq.n	801877a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018736:	2300      	movs	r3, #0
 8018738:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801873a:	2300      	movs	r3, #0
 801873c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801873e:	1d3a      	adds	r2, r7, #4
 8018740:	f107 0108 	add.w	r1, r7, #8
 8018744:	f107 030c 	add.w	r3, r7, #12
 8018748:	4618      	mov	r0, r3
 801874a:	f7fd fd6f 	bl	801622c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801874e:	6879      	ldr	r1, [r7, #4]
 8018750:	68bb      	ldr	r3, [r7, #8]
 8018752:	68fa      	ldr	r2, [r7, #12]
 8018754:	9202      	str	r2, [sp, #8]
 8018756:	9301      	str	r3, [sp, #4]
 8018758:	2302      	movs	r3, #2
 801875a:	9300      	str	r3, [sp, #0]
 801875c:	2300      	movs	r3, #0
 801875e:	460a      	mov	r2, r1
 8018760:	4910      	ldr	r1, [pc, #64]	; (80187a4 <xTimerCreateTimerTask+0x84>)
 8018762:	4811      	ldr	r0, [pc, #68]	; (80187a8 <xTimerCreateTimerTask+0x88>)
 8018764:	f7fe fe3e 	bl	80173e4 <xTaskCreateStatic>
 8018768:	4603      	mov	r3, r0
 801876a:	4a10      	ldr	r2, [pc, #64]	; (80187ac <xTimerCreateTimerTask+0x8c>)
 801876c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801876e:	4b0f      	ldr	r3, [pc, #60]	; (80187ac <xTimerCreateTimerTask+0x8c>)
 8018770:	681b      	ldr	r3, [r3, #0]
 8018772:	2b00      	cmp	r3, #0
 8018774:	d001      	beq.n	801877a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8018776:	2301      	movs	r3, #1
 8018778:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801877a:	697b      	ldr	r3, [r7, #20]
 801877c:	2b00      	cmp	r3, #0
 801877e:	d10a      	bne.n	8018796 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8018780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018784:	f383 8811 	msr	BASEPRI, r3
 8018788:	f3bf 8f6f 	isb	sy
 801878c:	f3bf 8f4f 	dsb	sy
 8018790:	613b      	str	r3, [r7, #16]
}
 8018792:	bf00      	nop
 8018794:	e7fe      	b.n	8018794 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8018796:	697b      	ldr	r3, [r7, #20]
}
 8018798:	4618      	mov	r0, r3
 801879a:	3718      	adds	r7, #24
 801879c:	46bd      	mov	sp, r7
 801879e:	bd80      	pop	{r7, pc}
 80187a0:	20001514 	.word	0x20001514
 80187a4:	08022d58 	.word	0x08022d58
 80187a8:	080188e5 	.word	0x080188e5
 80187ac:	20001518 	.word	0x20001518

080187b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80187b0:	b580      	push	{r7, lr}
 80187b2:	b08a      	sub	sp, #40	; 0x28
 80187b4:	af00      	add	r7, sp, #0
 80187b6:	60f8      	str	r0, [r7, #12]
 80187b8:	60b9      	str	r1, [r7, #8]
 80187ba:	607a      	str	r2, [r7, #4]
 80187bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80187be:	2300      	movs	r3, #0
 80187c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80187c2:	68fb      	ldr	r3, [r7, #12]
 80187c4:	2b00      	cmp	r3, #0
 80187c6:	d10a      	bne.n	80187de <xTimerGenericCommand+0x2e>
	__asm volatile
 80187c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187cc:	f383 8811 	msr	BASEPRI, r3
 80187d0:	f3bf 8f6f 	isb	sy
 80187d4:	f3bf 8f4f 	dsb	sy
 80187d8:	623b      	str	r3, [r7, #32]
}
 80187da:	bf00      	nop
 80187dc:	e7fe      	b.n	80187dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80187de:	4b1a      	ldr	r3, [pc, #104]	; (8018848 <xTimerGenericCommand+0x98>)
 80187e0:	681b      	ldr	r3, [r3, #0]
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d02a      	beq.n	801883c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80187e6:	68bb      	ldr	r3, [r7, #8]
 80187e8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80187ea:	687b      	ldr	r3, [r7, #4]
 80187ec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80187ee:	68fb      	ldr	r3, [r7, #12]
 80187f0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80187f2:	68bb      	ldr	r3, [r7, #8]
 80187f4:	2b05      	cmp	r3, #5
 80187f6:	dc18      	bgt.n	801882a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80187f8:	f7ff fdb4 	bl	8018364 <xTaskGetSchedulerState>
 80187fc:	4603      	mov	r3, r0
 80187fe:	2b02      	cmp	r3, #2
 8018800:	d109      	bne.n	8018816 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018802:	4b11      	ldr	r3, [pc, #68]	; (8018848 <xTimerGenericCommand+0x98>)
 8018804:	6818      	ldr	r0, [r3, #0]
 8018806:	f107 0110 	add.w	r1, r7, #16
 801880a:	2300      	movs	r3, #0
 801880c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801880e:	f7fd ff83 	bl	8016718 <xQueueGenericSend>
 8018812:	6278      	str	r0, [r7, #36]	; 0x24
 8018814:	e012      	b.n	801883c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8018816:	4b0c      	ldr	r3, [pc, #48]	; (8018848 <xTimerGenericCommand+0x98>)
 8018818:	6818      	ldr	r0, [r3, #0]
 801881a:	f107 0110 	add.w	r1, r7, #16
 801881e:	2300      	movs	r3, #0
 8018820:	2200      	movs	r2, #0
 8018822:	f7fd ff79 	bl	8016718 <xQueueGenericSend>
 8018826:	6278      	str	r0, [r7, #36]	; 0x24
 8018828:	e008      	b.n	801883c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801882a:	4b07      	ldr	r3, [pc, #28]	; (8018848 <xTimerGenericCommand+0x98>)
 801882c:	6818      	ldr	r0, [r3, #0]
 801882e:	f107 0110 	add.w	r1, r7, #16
 8018832:	2300      	movs	r3, #0
 8018834:	683a      	ldr	r2, [r7, #0]
 8018836:	f7fe f86d 	bl	8016914 <xQueueGenericSendFromISR>
 801883a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801883c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801883e:	4618      	mov	r0, r3
 8018840:	3728      	adds	r7, #40	; 0x28
 8018842:	46bd      	mov	sp, r7
 8018844:	bd80      	pop	{r7, pc}
 8018846:	bf00      	nop
 8018848:	20001514 	.word	0x20001514

0801884c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801884c:	b580      	push	{r7, lr}
 801884e:	b088      	sub	sp, #32
 8018850:	af02      	add	r7, sp, #8
 8018852:	6078      	str	r0, [r7, #4]
 8018854:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018856:	4b22      	ldr	r3, [pc, #136]	; (80188e0 <prvProcessExpiredTimer+0x94>)
 8018858:	681b      	ldr	r3, [r3, #0]
 801885a:	68db      	ldr	r3, [r3, #12]
 801885c:	68db      	ldr	r3, [r3, #12]
 801885e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018860:	697b      	ldr	r3, [r7, #20]
 8018862:	3304      	adds	r3, #4
 8018864:	4618      	mov	r0, r3
 8018866:	f7fd fd85 	bl	8016374 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801886a:	697b      	ldr	r3, [r7, #20]
 801886c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018870:	f003 0304 	and.w	r3, r3, #4
 8018874:	2b00      	cmp	r3, #0
 8018876:	d022      	beq.n	80188be <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018878:	697b      	ldr	r3, [r7, #20]
 801887a:	699a      	ldr	r2, [r3, #24]
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	18d1      	adds	r1, r2, r3
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	683a      	ldr	r2, [r7, #0]
 8018884:	6978      	ldr	r0, [r7, #20]
 8018886:	f000 f8d1 	bl	8018a2c <prvInsertTimerInActiveList>
 801888a:	4603      	mov	r3, r0
 801888c:	2b00      	cmp	r3, #0
 801888e:	d01f      	beq.n	80188d0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018890:	2300      	movs	r3, #0
 8018892:	9300      	str	r3, [sp, #0]
 8018894:	2300      	movs	r3, #0
 8018896:	687a      	ldr	r2, [r7, #4]
 8018898:	2100      	movs	r1, #0
 801889a:	6978      	ldr	r0, [r7, #20]
 801889c:	f7ff ff88 	bl	80187b0 <xTimerGenericCommand>
 80188a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80188a2:	693b      	ldr	r3, [r7, #16]
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	d113      	bne.n	80188d0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80188a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188ac:	f383 8811 	msr	BASEPRI, r3
 80188b0:	f3bf 8f6f 	isb	sy
 80188b4:	f3bf 8f4f 	dsb	sy
 80188b8:	60fb      	str	r3, [r7, #12]
}
 80188ba:	bf00      	nop
 80188bc:	e7fe      	b.n	80188bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80188be:	697b      	ldr	r3, [r7, #20]
 80188c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80188c4:	f023 0301 	bic.w	r3, r3, #1
 80188c8:	b2da      	uxtb	r2, r3
 80188ca:	697b      	ldr	r3, [r7, #20]
 80188cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80188d0:	697b      	ldr	r3, [r7, #20]
 80188d2:	6a1b      	ldr	r3, [r3, #32]
 80188d4:	6978      	ldr	r0, [r7, #20]
 80188d6:	4798      	blx	r3
}
 80188d8:	bf00      	nop
 80188da:	3718      	adds	r7, #24
 80188dc:	46bd      	mov	sp, r7
 80188de:	bd80      	pop	{r7, pc}
 80188e0:	2000150c 	.word	0x2000150c

080188e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80188e4:	b580      	push	{r7, lr}
 80188e6:	b084      	sub	sp, #16
 80188e8:	af00      	add	r7, sp, #0
 80188ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80188ec:	f107 0308 	add.w	r3, r7, #8
 80188f0:	4618      	mov	r0, r3
 80188f2:	f000 f857 	bl	80189a4 <prvGetNextExpireTime>
 80188f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80188f8:	68bb      	ldr	r3, [r7, #8]
 80188fa:	4619      	mov	r1, r3
 80188fc:	68f8      	ldr	r0, [r7, #12]
 80188fe:	f000 f803 	bl	8018908 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8018902:	f000 f8d5 	bl	8018ab0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018906:	e7f1      	b.n	80188ec <prvTimerTask+0x8>

08018908 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018908:	b580      	push	{r7, lr}
 801890a:	b084      	sub	sp, #16
 801890c:	af00      	add	r7, sp, #0
 801890e:	6078      	str	r0, [r7, #4]
 8018910:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8018912:	f7ff f92b 	bl	8017b6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018916:	f107 0308 	add.w	r3, r7, #8
 801891a:	4618      	mov	r0, r3
 801891c:	f000 f866 	bl	80189ec <prvSampleTimeNow>
 8018920:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8018922:	68bb      	ldr	r3, [r7, #8]
 8018924:	2b00      	cmp	r3, #0
 8018926:	d130      	bne.n	801898a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8018928:	683b      	ldr	r3, [r7, #0]
 801892a:	2b00      	cmp	r3, #0
 801892c:	d10a      	bne.n	8018944 <prvProcessTimerOrBlockTask+0x3c>
 801892e:	687a      	ldr	r2, [r7, #4]
 8018930:	68fb      	ldr	r3, [r7, #12]
 8018932:	429a      	cmp	r2, r3
 8018934:	d806      	bhi.n	8018944 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8018936:	f7ff f927 	bl	8017b88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801893a:	68f9      	ldr	r1, [r7, #12]
 801893c:	6878      	ldr	r0, [r7, #4]
 801893e:	f7ff ff85 	bl	801884c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8018942:	e024      	b.n	801898e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8018944:	683b      	ldr	r3, [r7, #0]
 8018946:	2b00      	cmp	r3, #0
 8018948:	d008      	beq.n	801895c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801894a:	4b13      	ldr	r3, [pc, #76]	; (8018998 <prvProcessTimerOrBlockTask+0x90>)
 801894c:	681b      	ldr	r3, [r3, #0]
 801894e:	681b      	ldr	r3, [r3, #0]
 8018950:	2b00      	cmp	r3, #0
 8018952:	d101      	bne.n	8018958 <prvProcessTimerOrBlockTask+0x50>
 8018954:	2301      	movs	r3, #1
 8018956:	e000      	b.n	801895a <prvProcessTimerOrBlockTask+0x52>
 8018958:	2300      	movs	r3, #0
 801895a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801895c:	4b0f      	ldr	r3, [pc, #60]	; (801899c <prvProcessTimerOrBlockTask+0x94>)
 801895e:	6818      	ldr	r0, [r3, #0]
 8018960:	687a      	ldr	r2, [r7, #4]
 8018962:	68fb      	ldr	r3, [r7, #12]
 8018964:	1ad3      	subs	r3, r2, r3
 8018966:	683a      	ldr	r2, [r7, #0]
 8018968:	4619      	mov	r1, r3
 801896a:	f7fe fd07 	bl	801737c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801896e:	f7ff f90b 	bl	8017b88 <xTaskResumeAll>
 8018972:	4603      	mov	r3, r0
 8018974:	2b00      	cmp	r3, #0
 8018976:	d10a      	bne.n	801898e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8018978:	4b09      	ldr	r3, [pc, #36]	; (80189a0 <prvProcessTimerOrBlockTask+0x98>)
 801897a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801897e:	601a      	str	r2, [r3, #0]
 8018980:	f3bf 8f4f 	dsb	sy
 8018984:	f3bf 8f6f 	isb	sy
}
 8018988:	e001      	b.n	801898e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801898a:	f7ff f8fd 	bl	8017b88 <xTaskResumeAll>
}
 801898e:	bf00      	nop
 8018990:	3710      	adds	r7, #16
 8018992:	46bd      	mov	sp, r7
 8018994:	bd80      	pop	{r7, pc}
 8018996:	bf00      	nop
 8018998:	20001510 	.word	0x20001510
 801899c:	20001514 	.word	0x20001514
 80189a0:	e000ed04 	.word	0xe000ed04

080189a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80189a4:	b480      	push	{r7}
 80189a6:	b085      	sub	sp, #20
 80189a8:	af00      	add	r7, sp, #0
 80189aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80189ac:	4b0e      	ldr	r3, [pc, #56]	; (80189e8 <prvGetNextExpireTime+0x44>)
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	681b      	ldr	r3, [r3, #0]
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	d101      	bne.n	80189ba <prvGetNextExpireTime+0x16>
 80189b6:	2201      	movs	r2, #1
 80189b8:	e000      	b.n	80189bc <prvGetNextExpireTime+0x18>
 80189ba:	2200      	movs	r2, #0
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	681b      	ldr	r3, [r3, #0]
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	d105      	bne.n	80189d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80189c8:	4b07      	ldr	r3, [pc, #28]	; (80189e8 <prvGetNextExpireTime+0x44>)
 80189ca:	681b      	ldr	r3, [r3, #0]
 80189cc:	68db      	ldr	r3, [r3, #12]
 80189ce:	681b      	ldr	r3, [r3, #0]
 80189d0:	60fb      	str	r3, [r7, #12]
 80189d2:	e001      	b.n	80189d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80189d4:	2300      	movs	r3, #0
 80189d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80189d8:	68fb      	ldr	r3, [r7, #12]
}
 80189da:	4618      	mov	r0, r3
 80189dc:	3714      	adds	r7, #20
 80189de:	46bd      	mov	sp, r7
 80189e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189e4:	4770      	bx	lr
 80189e6:	bf00      	nop
 80189e8:	2000150c 	.word	0x2000150c

080189ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80189ec:	b580      	push	{r7, lr}
 80189ee:	b084      	sub	sp, #16
 80189f0:	af00      	add	r7, sp, #0
 80189f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80189f4:	f7ff f966 	bl	8017cc4 <xTaskGetTickCount>
 80189f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80189fa:	4b0b      	ldr	r3, [pc, #44]	; (8018a28 <prvSampleTimeNow+0x3c>)
 80189fc:	681b      	ldr	r3, [r3, #0]
 80189fe:	68fa      	ldr	r2, [r7, #12]
 8018a00:	429a      	cmp	r2, r3
 8018a02:	d205      	bcs.n	8018a10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8018a04:	f000 f936 	bl	8018c74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	2201      	movs	r2, #1
 8018a0c:	601a      	str	r2, [r3, #0]
 8018a0e:	e002      	b.n	8018a16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	2200      	movs	r2, #0
 8018a14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8018a16:	4a04      	ldr	r2, [pc, #16]	; (8018a28 <prvSampleTimeNow+0x3c>)
 8018a18:	68fb      	ldr	r3, [r7, #12]
 8018a1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8018a1c:	68fb      	ldr	r3, [r7, #12]
}
 8018a1e:	4618      	mov	r0, r3
 8018a20:	3710      	adds	r7, #16
 8018a22:	46bd      	mov	sp, r7
 8018a24:	bd80      	pop	{r7, pc}
 8018a26:	bf00      	nop
 8018a28:	2000151c 	.word	0x2000151c

08018a2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8018a2c:	b580      	push	{r7, lr}
 8018a2e:	b086      	sub	sp, #24
 8018a30:	af00      	add	r7, sp, #0
 8018a32:	60f8      	str	r0, [r7, #12]
 8018a34:	60b9      	str	r1, [r7, #8]
 8018a36:	607a      	str	r2, [r7, #4]
 8018a38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8018a3a:	2300      	movs	r3, #0
 8018a3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8018a3e:	68fb      	ldr	r3, [r7, #12]
 8018a40:	68ba      	ldr	r2, [r7, #8]
 8018a42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018a44:	68fb      	ldr	r3, [r7, #12]
 8018a46:	68fa      	ldr	r2, [r7, #12]
 8018a48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8018a4a:	68ba      	ldr	r2, [r7, #8]
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	429a      	cmp	r2, r3
 8018a50:	d812      	bhi.n	8018a78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018a52:	687a      	ldr	r2, [r7, #4]
 8018a54:	683b      	ldr	r3, [r7, #0]
 8018a56:	1ad2      	subs	r2, r2, r3
 8018a58:	68fb      	ldr	r3, [r7, #12]
 8018a5a:	699b      	ldr	r3, [r3, #24]
 8018a5c:	429a      	cmp	r2, r3
 8018a5e:	d302      	bcc.n	8018a66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018a60:	2301      	movs	r3, #1
 8018a62:	617b      	str	r3, [r7, #20]
 8018a64:	e01b      	b.n	8018a9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018a66:	4b10      	ldr	r3, [pc, #64]	; (8018aa8 <prvInsertTimerInActiveList+0x7c>)
 8018a68:	681a      	ldr	r2, [r3, #0]
 8018a6a:	68fb      	ldr	r3, [r7, #12]
 8018a6c:	3304      	adds	r3, #4
 8018a6e:	4619      	mov	r1, r3
 8018a70:	4610      	mov	r0, r2
 8018a72:	f7fd fc46 	bl	8016302 <vListInsert>
 8018a76:	e012      	b.n	8018a9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018a78:	687a      	ldr	r2, [r7, #4]
 8018a7a:	683b      	ldr	r3, [r7, #0]
 8018a7c:	429a      	cmp	r2, r3
 8018a7e:	d206      	bcs.n	8018a8e <prvInsertTimerInActiveList+0x62>
 8018a80:	68ba      	ldr	r2, [r7, #8]
 8018a82:	683b      	ldr	r3, [r7, #0]
 8018a84:	429a      	cmp	r2, r3
 8018a86:	d302      	bcc.n	8018a8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8018a88:	2301      	movs	r3, #1
 8018a8a:	617b      	str	r3, [r7, #20]
 8018a8c:	e007      	b.n	8018a9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018a8e:	4b07      	ldr	r3, [pc, #28]	; (8018aac <prvInsertTimerInActiveList+0x80>)
 8018a90:	681a      	ldr	r2, [r3, #0]
 8018a92:	68fb      	ldr	r3, [r7, #12]
 8018a94:	3304      	adds	r3, #4
 8018a96:	4619      	mov	r1, r3
 8018a98:	4610      	mov	r0, r2
 8018a9a:	f7fd fc32 	bl	8016302 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8018a9e:	697b      	ldr	r3, [r7, #20]
}
 8018aa0:	4618      	mov	r0, r3
 8018aa2:	3718      	adds	r7, #24
 8018aa4:	46bd      	mov	sp, r7
 8018aa6:	bd80      	pop	{r7, pc}
 8018aa8:	20001510 	.word	0x20001510
 8018aac:	2000150c 	.word	0x2000150c

08018ab0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018ab0:	b580      	push	{r7, lr}
 8018ab2:	b08e      	sub	sp, #56	; 0x38
 8018ab4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018ab6:	e0ca      	b.n	8018c4e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	da18      	bge.n	8018af0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8018abe:	1d3b      	adds	r3, r7, #4
 8018ac0:	3304      	adds	r3, #4
 8018ac2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8018ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d10a      	bne.n	8018ae0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8018aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ace:	f383 8811 	msr	BASEPRI, r3
 8018ad2:	f3bf 8f6f 	isb	sy
 8018ad6:	f3bf 8f4f 	dsb	sy
 8018ada:	61fb      	str	r3, [r7, #28]
}
 8018adc:	bf00      	nop
 8018ade:	e7fe      	b.n	8018ade <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8018ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ae2:	681b      	ldr	r3, [r3, #0]
 8018ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018ae6:	6850      	ldr	r0, [r2, #4]
 8018ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018aea:	6892      	ldr	r2, [r2, #8]
 8018aec:	4611      	mov	r1, r2
 8018aee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	f2c0 80aa 	blt.w	8018c4c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8018af8:	68fb      	ldr	r3, [r7, #12]
 8018afa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8018afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018afe:	695b      	ldr	r3, [r3, #20]
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	d004      	beq.n	8018b0e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b06:	3304      	adds	r3, #4
 8018b08:	4618      	mov	r0, r3
 8018b0a:	f7fd fc33 	bl	8016374 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018b0e:	463b      	mov	r3, r7
 8018b10:	4618      	mov	r0, r3
 8018b12:	f7ff ff6b 	bl	80189ec <prvSampleTimeNow>
 8018b16:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	2b09      	cmp	r3, #9
 8018b1c:	f200 8097 	bhi.w	8018c4e <prvProcessReceivedCommands+0x19e>
 8018b20:	a201      	add	r2, pc, #4	; (adr r2, 8018b28 <prvProcessReceivedCommands+0x78>)
 8018b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b26:	bf00      	nop
 8018b28:	08018b51 	.word	0x08018b51
 8018b2c:	08018b51 	.word	0x08018b51
 8018b30:	08018b51 	.word	0x08018b51
 8018b34:	08018bc5 	.word	0x08018bc5
 8018b38:	08018bd9 	.word	0x08018bd9
 8018b3c:	08018c23 	.word	0x08018c23
 8018b40:	08018b51 	.word	0x08018b51
 8018b44:	08018b51 	.word	0x08018b51
 8018b48:	08018bc5 	.word	0x08018bc5
 8018b4c:	08018bd9 	.word	0x08018bd9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018b56:	f043 0301 	orr.w	r3, r3, #1
 8018b5a:	b2da      	uxtb	r2, r3
 8018b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018b62:	68ba      	ldr	r2, [r7, #8]
 8018b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b66:	699b      	ldr	r3, [r3, #24]
 8018b68:	18d1      	adds	r1, r2, r3
 8018b6a:	68bb      	ldr	r3, [r7, #8]
 8018b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018b6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018b70:	f7ff ff5c 	bl	8018a2c <prvInsertTimerInActiveList>
 8018b74:	4603      	mov	r3, r0
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	d069      	beq.n	8018c4e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b7c:	6a1b      	ldr	r3, [r3, #32]
 8018b7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018b80:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018b88:	f003 0304 	and.w	r3, r3, #4
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d05e      	beq.n	8018c4e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018b90:	68ba      	ldr	r2, [r7, #8]
 8018b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b94:	699b      	ldr	r3, [r3, #24]
 8018b96:	441a      	add	r2, r3
 8018b98:	2300      	movs	r3, #0
 8018b9a:	9300      	str	r3, [sp, #0]
 8018b9c:	2300      	movs	r3, #0
 8018b9e:	2100      	movs	r1, #0
 8018ba0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018ba2:	f7ff fe05 	bl	80187b0 <xTimerGenericCommand>
 8018ba6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8018ba8:	6a3b      	ldr	r3, [r7, #32]
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	d14f      	bne.n	8018c4e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8018bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bb2:	f383 8811 	msr	BASEPRI, r3
 8018bb6:	f3bf 8f6f 	isb	sy
 8018bba:	f3bf 8f4f 	dsb	sy
 8018bbe:	61bb      	str	r3, [r7, #24]
}
 8018bc0:	bf00      	nop
 8018bc2:	e7fe      	b.n	8018bc2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018bca:	f023 0301 	bic.w	r3, r3, #1
 8018bce:	b2da      	uxtb	r2, r3
 8018bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8018bd6:	e03a      	b.n	8018c4e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018bde:	f043 0301 	orr.w	r3, r3, #1
 8018be2:	b2da      	uxtb	r2, r3
 8018be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018be6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8018bea:	68ba      	ldr	r2, [r7, #8]
 8018bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8018bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bf2:	699b      	ldr	r3, [r3, #24]
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	d10a      	bne.n	8018c0e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8018bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bfc:	f383 8811 	msr	BASEPRI, r3
 8018c00:	f3bf 8f6f 	isb	sy
 8018c04:	f3bf 8f4f 	dsb	sy
 8018c08:	617b      	str	r3, [r7, #20]
}
 8018c0a:	bf00      	nop
 8018c0c:	e7fe      	b.n	8018c0c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8018c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c10:	699a      	ldr	r2, [r3, #24]
 8018c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c14:	18d1      	adds	r1, r2, r3
 8018c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018c1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018c1c:	f7ff ff06 	bl	8018a2c <prvInsertTimerInActiveList>
					break;
 8018c20:	e015      	b.n	8018c4e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8018c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018c28:	f003 0302 	and.w	r3, r3, #2
 8018c2c:	2b00      	cmp	r3, #0
 8018c2e:	d103      	bne.n	8018c38 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8018c30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018c32:	f000 fbdd 	bl	80193f0 <vPortFree>
 8018c36:	e00a      	b.n	8018c4e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018c3e:	f023 0301 	bic.w	r3, r3, #1
 8018c42:	b2da      	uxtb	r2, r3
 8018c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8018c4a:	e000      	b.n	8018c4e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8018c4c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018c4e:	4b08      	ldr	r3, [pc, #32]	; (8018c70 <prvProcessReceivedCommands+0x1c0>)
 8018c50:	681b      	ldr	r3, [r3, #0]
 8018c52:	1d39      	adds	r1, r7, #4
 8018c54:	2200      	movs	r2, #0
 8018c56:	4618      	mov	r0, r3
 8018c58:	f7fd ff84 	bl	8016b64 <xQueueReceive>
 8018c5c:	4603      	mov	r3, r0
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	f47f af2a 	bne.w	8018ab8 <prvProcessReceivedCommands+0x8>
	}
}
 8018c64:	bf00      	nop
 8018c66:	bf00      	nop
 8018c68:	3730      	adds	r7, #48	; 0x30
 8018c6a:	46bd      	mov	sp, r7
 8018c6c:	bd80      	pop	{r7, pc}
 8018c6e:	bf00      	nop
 8018c70:	20001514 	.word	0x20001514

08018c74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8018c74:	b580      	push	{r7, lr}
 8018c76:	b088      	sub	sp, #32
 8018c78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018c7a:	e048      	b.n	8018d0e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018c7c:	4b2d      	ldr	r3, [pc, #180]	; (8018d34 <prvSwitchTimerLists+0xc0>)
 8018c7e:	681b      	ldr	r3, [r3, #0]
 8018c80:	68db      	ldr	r3, [r3, #12]
 8018c82:	681b      	ldr	r3, [r3, #0]
 8018c84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018c86:	4b2b      	ldr	r3, [pc, #172]	; (8018d34 <prvSwitchTimerLists+0xc0>)
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	68db      	ldr	r3, [r3, #12]
 8018c8c:	68db      	ldr	r3, [r3, #12]
 8018c8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018c90:	68fb      	ldr	r3, [r7, #12]
 8018c92:	3304      	adds	r3, #4
 8018c94:	4618      	mov	r0, r3
 8018c96:	f7fd fb6d 	bl	8016374 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018c9a:	68fb      	ldr	r3, [r7, #12]
 8018c9c:	6a1b      	ldr	r3, [r3, #32]
 8018c9e:	68f8      	ldr	r0, [r7, #12]
 8018ca0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018ca2:	68fb      	ldr	r3, [r7, #12]
 8018ca4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018ca8:	f003 0304 	and.w	r3, r3, #4
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	d02e      	beq.n	8018d0e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018cb0:	68fb      	ldr	r3, [r7, #12]
 8018cb2:	699b      	ldr	r3, [r3, #24]
 8018cb4:	693a      	ldr	r2, [r7, #16]
 8018cb6:	4413      	add	r3, r2
 8018cb8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8018cba:	68ba      	ldr	r2, [r7, #8]
 8018cbc:	693b      	ldr	r3, [r7, #16]
 8018cbe:	429a      	cmp	r2, r3
 8018cc0:	d90e      	bls.n	8018ce0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8018cc2:	68fb      	ldr	r3, [r7, #12]
 8018cc4:	68ba      	ldr	r2, [r7, #8]
 8018cc6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018cc8:	68fb      	ldr	r3, [r7, #12]
 8018cca:	68fa      	ldr	r2, [r7, #12]
 8018ccc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018cce:	4b19      	ldr	r3, [pc, #100]	; (8018d34 <prvSwitchTimerLists+0xc0>)
 8018cd0:	681a      	ldr	r2, [r3, #0]
 8018cd2:	68fb      	ldr	r3, [r7, #12]
 8018cd4:	3304      	adds	r3, #4
 8018cd6:	4619      	mov	r1, r3
 8018cd8:	4610      	mov	r0, r2
 8018cda:	f7fd fb12 	bl	8016302 <vListInsert>
 8018cde:	e016      	b.n	8018d0e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018ce0:	2300      	movs	r3, #0
 8018ce2:	9300      	str	r3, [sp, #0]
 8018ce4:	2300      	movs	r3, #0
 8018ce6:	693a      	ldr	r2, [r7, #16]
 8018ce8:	2100      	movs	r1, #0
 8018cea:	68f8      	ldr	r0, [r7, #12]
 8018cec:	f7ff fd60 	bl	80187b0 <xTimerGenericCommand>
 8018cf0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	2b00      	cmp	r3, #0
 8018cf6:	d10a      	bne.n	8018d0e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8018cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cfc:	f383 8811 	msr	BASEPRI, r3
 8018d00:	f3bf 8f6f 	isb	sy
 8018d04:	f3bf 8f4f 	dsb	sy
 8018d08:	603b      	str	r3, [r7, #0]
}
 8018d0a:	bf00      	nop
 8018d0c:	e7fe      	b.n	8018d0c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018d0e:	4b09      	ldr	r3, [pc, #36]	; (8018d34 <prvSwitchTimerLists+0xc0>)
 8018d10:	681b      	ldr	r3, [r3, #0]
 8018d12:	681b      	ldr	r3, [r3, #0]
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d1b1      	bne.n	8018c7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8018d18:	4b06      	ldr	r3, [pc, #24]	; (8018d34 <prvSwitchTimerLists+0xc0>)
 8018d1a:	681b      	ldr	r3, [r3, #0]
 8018d1c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8018d1e:	4b06      	ldr	r3, [pc, #24]	; (8018d38 <prvSwitchTimerLists+0xc4>)
 8018d20:	681b      	ldr	r3, [r3, #0]
 8018d22:	4a04      	ldr	r2, [pc, #16]	; (8018d34 <prvSwitchTimerLists+0xc0>)
 8018d24:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8018d26:	4a04      	ldr	r2, [pc, #16]	; (8018d38 <prvSwitchTimerLists+0xc4>)
 8018d28:	697b      	ldr	r3, [r7, #20]
 8018d2a:	6013      	str	r3, [r2, #0]
}
 8018d2c:	bf00      	nop
 8018d2e:	3718      	adds	r7, #24
 8018d30:	46bd      	mov	sp, r7
 8018d32:	bd80      	pop	{r7, pc}
 8018d34:	2000150c 	.word	0x2000150c
 8018d38:	20001510 	.word	0x20001510

08018d3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8018d3c:	b580      	push	{r7, lr}
 8018d3e:	b082      	sub	sp, #8
 8018d40:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8018d42:	f000 f967 	bl	8019014 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8018d46:	4b15      	ldr	r3, [pc, #84]	; (8018d9c <prvCheckForValidListAndQueue+0x60>)
 8018d48:	681b      	ldr	r3, [r3, #0]
 8018d4a:	2b00      	cmp	r3, #0
 8018d4c:	d120      	bne.n	8018d90 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8018d4e:	4814      	ldr	r0, [pc, #80]	; (8018da0 <prvCheckForValidListAndQueue+0x64>)
 8018d50:	f7fd fa86 	bl	8016260 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8018d54:	4813      	ldr	r0, [pc, #76]	; (8018da4 <prvCheckForValidListAndQueue+0x68>)
 8018d56:	f7fd fa83 	bl	8016260 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8018d5a:	4b13      	ldr	r3, [pc, #76]	; (8018da8 <prvCheckForValidListAndQueue+0x6c>)
 8018d5c:	4a10      	ldr	r2, [pc, #64]	; (8018da0 <prvCheckForValidListAndQueue+0x64>)
 8018d5e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8018d60:	4b12      	ldr	r3, [pc, #72]	; (8018dac <prvCheckForValidListAndQueue+0x70>)
 8018d62:	4a10      	ldr	r2, [pc, #64]	; (8018da4 <prvCheckForValidListAndQueue+0x68>)
 8018d64:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8018d66:	2300      	movs	r3, #0
 8018d68:	9300      	str	r3, [sp, #0]
 8018d6a:	4b11      	ldr	r3, [pc, #68]	; (8018db0 <prvCheckForValidListAndQueue+0x74>)
 8018d6c:	4a11      	ldr	r2, [pc, #68]	; (8018db4 <prvCheckForValidListAndQueue+0x78>)
 8018d6e:	2110      	movs	r1, #16
 8018d70:	200a      	movs	r0, #10
 8018d72:	f7fd fb91 	bl	8016498 <xQueueGenericCreateStatic>
 8018d76:	4603      	mov	r3, r0
 8018d78:	4a08      	ldr	r2, [pc, #32]	; (8018d9c <prvCheckForValidListAndQueue+0x60>)
 8018d7a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8018d7c:	4b07      	ldr	r3, [pc, #28]	; (8018d9c <prvCheckForValidListAndQueue+0x60>)
 8018d7e:	681b      	ldr	r3, [r3, #0]
 8018d80:	2b00      	cmp	r3, #0
 8018d82:	d005      	beq.n	8018d90 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8018d84:	4b05      	ldr	r3, [pc, #20]	; (8018d9c <prvCheckForValidListAndQueue+0x60>)
 8018d86:	681b      	ldr	r3, [r3, #0]
 8018d88:	490b      	ldr	r1, [pc, #44]	; (8018db8 <prvCheckForValidListAndQueue+0x7c>)
 8018d8a:	4618      	mov	r0, r3
 8018d8c:	f7fe faa2 	bl	80172d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018d90:	f000 f970 	bl	8019074 <vPortExitCritical>
}
 8018d94:	bf00      	nop
 8018d96:	46bd      	mov	sp, r7
 8018d98:	bd80      	pop	{r7, pc}
 8018d9a:	bf00      	nop
 8018d9c:	20001514 	.word	0x20001514
 8018da0:	200014e4 	.word	0x200014e4
 8018da4:	200014f8 	.word	0x200014f8
 8018da8:	2000150c 	.word	0x2000150c
 8018dac:	20001510 	.word	0x20001510
 8018db0:	200015c0 	.word	0x200015c0
 8018db4:	20001520 	.word	0x20001520
 8018db8:	08022d60 	.word	0x08022d60

08018dbc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018dbc:	b480      	push	{r7}
 8018dbe:	b085      	sub	sp, #20
 8018dc0:	af00      	add	r7, sp, #0
 8018dc2:	60f8      	str	r0, [r7, #12]
 8018dc4:	60b9      	str	r1, [r7, #8]
 8018dc6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018dc8:	68fb      	ldr	r3, [r7, #12]
 8018dca:	3b04      	subs	r3, #4
 8018dcc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018dce:	68fb      	ldr	r3, [r7, #12]
 8018dd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8018dd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018dd6:	68fb      	ldr	r3, [r7, #12]
 8018dd8:	3b04      	subs	r3, #4
 8018dda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018ddc:	68bb      	ldr	r3, [r7, #8]
 8018dde:	f023 0201 	bic.w	r2, r3, #1
 8018de2:	68fb      	ldr	r3, [r7, #12]
 8018de4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018de6:	68fb      	ldr	r3, [r7, #12]
 8018de8:	3b04      	subs	r3, #4
 8018dea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018dec:	4a0c      	ldr	r2, [pc, #48]	; (8018e20 <pxPortInitialiseStack+0x64>)
 8018dee:	68fb      	ldr	r3, [r7, #12]
 8018df0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8018df2:	68fb      	ldr	r3, [r7, #12]
 8018df4:	3b14      	subs	r3, #20
 8018df6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018df8:	687a      	ldr	r2, [r7, #4]
 8018dfa:	68fb      	ldr	r3, [r7, #12]
 8018dfc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8018dfe:	68fb      	ldr	r3, [r7, #12]
 8018e00:	3b04      	subs	r3, #4
 8018e02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018e04:	68fb      	ldr	r3, [r7, #12]
 8018e06:	f06f 0202 	mvn.w	r2, #2
 8018e0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8018e0c:	68fb      	ldr	r3, [r7, #12]
 8018e0e:	3b20      	subs	r3, #32
 8018e10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8018e12:	68fb      	ldr	r3, [r7, #12]
}
 8018e14:	4618      	mov	r0, r3
 8018e16:	3714      	adds	r7, #20
 8018e18:	46bd      	mov	sp, r7
 8018e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e1e:	4770      	bx	lr
 8018e20:	08018e25 	.word	0x08018e25

08018e24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018e24:	b480      	push	{r7}
 8018e26:	b085      	sub	sp, #20
 8018e28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8018e2a:	2300      	movs	r3, #0
 8018e2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8018e2e:	4b12      	ldr	r3, [pc, #72]	; (8018e78 <prvTaskExitError+0x54>)
 8018e30:	681b      	ldr	r3, [r3, #0]
 8018e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018e36:	d00a      	beq.n	8018e4e <prvTaskExitError+0x2a>
	__asm volatile
 8018e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e3c:	f383 8811 	msr	BASEPRI, r3
 8018e40:	f3bf 8f6f 	isb	sy
 8018e44:	f3bf 8f4f 	dsb	sy
 8018e48:	60fb      	str	r3, [r7, #12]
}
 8018e4a:	bf00      	nop
 8018e4c:	e7fe      	b.n	8018e4c <prvTaskExitError+0x28>
	__asm volatile
 8018e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e52:	f383 8811 	msr	BASEPRI, r3
 8018e56:	f3bf 8f6f 	isb	sy
 8018e5a:	f3bf 8f4f 	dsb	sy
 8018e5e:	60bb      	str	r3, [r7, #8]
}
 8018e60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018e62:	bf00      	nop
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	2b00      	cmp	r3, #0
 8018e68:	d0fc      	beq.n	8018e64 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018e6a:	bf00      	nop
 8018e6c:	bf00      	nop
 8018e6e:	3714      	adds	r7, #20
 8018e70:	46bd      	mov	sp, r7
 8018e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e76:	4770      	bx	lr
 8018e78:	2000018c 	.word	0x2000018c
 8018e7c:	00000000 	.word	0x00000000

08018e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018e80:	4b07      	ldr	r3, [pc, #28]	; (8018ea0 <pxCurrentTCBConst2>)
 8018e82:	6819      	ldr	r1, [r3, #0]
 8018e84:	6808      	ldr	r0, [r1, #0]
 8018e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e8a:	f380 8809 	msr	PSP, r0
 8018e8e:	f3bf 8f6f 	isb	sy
 8018e92:	f04f 0000 	mov.w	r0, #0
 8018e96:	f380 8811 	msr	BASEPRI, r0
 8018e9a:	4770      	bx	lr
 8018e9c:	f3af 8000 	nop.w

08018ea0 <pxCurrentTCBConst2>:
 8018ea0:	20000fe4 	.word	0x20000fe4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018ea4:	bf00      	nop
 8018ea6:	bf00      	nop

08018ea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018ea8:	4808      	ldr	r0, [pc, #32]	; (8018ecc <prvPortStartFirstTask+0x24>)
 8018eaa:	6800      	ldr	r0, [r0, #0]
 8018eac:	6800      	ldr	r0, [r0, #0]
 8018eae:	f380 8808 	msr	MSP, r0
 8018eb2:	f04f 0000 	mov.w	r0, #0
 8018eb6:	f380 8814 	msr	CONTROL, r0
 8018eba:	b662      	cpsie	i
 8018ebc:	b661      	cpsie	f
 8018ebe:	f3bf 8f4f 	dsb	sy
 8018ec2:	f3bf 8f6f 	isb	sy
 8018ec6:	df00      	svc	0
 8018ec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8018eca:	bf00      	nop
 8018ecc:	e000ed08 	.word	0xe000ed08

08018ed0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018ed0:	b580      	push	{r7, lr}
 8018ed2:	b086      	sub	sp, #24
 8018ed4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018ed6:	4b46      	ldr	r3, [pc, #280]	; (8018ff0 <xPortStartScheduler+0x120>)
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	4a46      	ldr	r2, [pc, #280]	; (8018ff4 <xPortStartScheduler+0x124>)
 8018edc:	4293      	cmp	r3, r2
 8018ede:	d10a      	bne.n	8018ef6 <xPortStartScheduler+0x26>
	__asm volatile
 8018ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ee4:	f383 8811 	msr	BASEPRI, r3
 8018ee8:	f3bf 8f6f 	isb	sy
 8018eec:	f3bf 8f4f 	dsb	sy
 8018ef0:	613b      	str	r3, [r7, #16]
}
 8018ef2:	bf00      	nop
 8018ef4:	e7fe      	b.n	8018ef4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018ef6:	4b3e      	ldr	r3, [pc, #248]	; (8018ff0 <xPortStartScheduler+0x120>)
 8018ef8:	681b      	ldr	r3, [r3, #0]
 8018efa:	4a3f      	ldr	r2, [pc, #252]	; (8018ff8 <xPortStartScheduler+0x128>)
 8018efc:	4293      	cmp	r3, r2
 8018efe:	d10a      	bne.n	8018f16 <xPortStartScheduler+0x46>
	__asm volatile
 8018f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f04:	f383 8811 	msr	BASEPRI, r3
 8018f08:	f3bf 8f6f 	isb	sy
 8018f0c:	f3bf 8f4f 	dsb	sy
 8018f10:	60fb      	str	r3, [r7, #12]
}
 8018f12:	bf00      	nop
 8018f14:	e7fe      	b.n	8018f14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018f16:	4b39      	ldr	r3, [pc, #228]	; (8018ffc <xPortStartScheduler+0x12c>)
 8018f18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018f1a:	697b      	ldr	r3, [r7, #20]
 8018f1c:	781b      	ldrb	r3, [r3, #0]
 8018f1e:	b2db      	uxtb	r3, r3
 8018f20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018f22:	697b      	ldr	r3, [r7, #20]
 8018f24:	22ff      	movs	r2, #255	; 0xff
 8018f26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018f28:	697b      	ldr	r3, [r7, #20]
 8018f2a:	781b      	ldrb	r3, [r3, #0]
 8018f2c:	b2db      	uxtb	r3, r3
 8018f2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018f30:	78fb      	ldrb	r3, [r7, #3]
 8018f32:	b2db      	uxtb	r3, r3
 8018f34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8018f38:	b2da      	uxtb	r2, r3
 8018f3a:	4b31      	ldr	r3, [pc, #196]	; (8019000 <xPortStartScheduler+0x130>)
 8018f3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018f3e:	4b31      	ldr	r3, [pc, #196]	; (8019004 <xPortStartScheduler+0x134>)
 8018f40:	2207      	movs	r2, #7
 8018f42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018f44:	e009      	b.n	8018f5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8018f46:	4b2f      	ldr	r3, [pc, #188]	; (8019004 <xPortStartScheduler+0x134>)
 8018f48:	681b      	ldr	r3, [r3, #0]
 8018f4a:	3b01      	subs	r3, #1
 8018f4c:	4a2d      	ldr	r2, [pc, #180]	; (8019004 <xPortStartScheduler+0x134>)
 8018f4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018f50:	78fb      	ldrb	r3, [r7, #3]
 8018f52:	b2db      	uxtb	r3, r3
 8018f54:	005b      	lsls	r3, r3, #1
 8018f56:	b2db      	uxtb	r3, r3
 8018f58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018f5a:	78fb      	ldrb	r3, [r7, #3]
 8018f5c:	b2db      	uxtb	r3, r3
 8018f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018f62:	2b80      	cmp	r3, #128	; 0x80
 8018f64:	d0ef      	beq.n	8018f46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018f66:	4b27      	ldr	r3, [pc, #156]	; (8019004 <xPortStartScheduler+0x134>)
 8018f68:	681b      	ldr	r3, [r3, #0]
 8018f6a:	f1c3 0307 	rsb	r3, r3, #7
 8018f6e:	2b04      	cmp	r3, #4
 8018f70:	d00a      	beq.n	8018f88 <xPortStartScheduler+0xb8>
	__asm volatile
 8018f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f76:	f383 8811 	msr	BASEPRI, r3
 8018f7a:	f3bf 8f6f 	isb	sy
 8018f7e:	f3bf 8f4f 	dsb	sy
 8018f82:	60bb      	str	r3, [r7, #8]
}
 8018f84:	bf00      	nop
 8018f86:	e7fe      	b.n	8018f86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018f88:	4b1e      	ldr	r3, [pc, #120]	; (8019004 <xPortStartScheduler+0x134>)
 8018f8a:	681b      	ldr	r3, [r3, #0]
 8018f8c:	021b      	lsls	r3, r3, #8
 8018f8e:	4a1d      	ldr	r2, [pc, #116]	; (8019004 <xPortStartScheduler+0x134>)
 8018f90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018f92:	4b1c      	ldr	r3, [pc, #112]	; (8019004 <xPortStartScheduler+0x134>)
 8018f94:	681b      	ldr	r3, [r3, #0]
 8018f96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8018f9a:	4a1a      	ldr	r2, [pc, #104]	; (8019004 <xPortStartScheduler+0x134>)
 8018f9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	b2da      	uxtb	r2, r3
 8018fa2:	697b      	ldr	r3, [r7, #20]
 8018fa4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018fa6:	4b18      	ldr	r3, [pc, #96]	; (8019008 <xPortStartScheduler+0x138>)
 8018fa8:	681b      	ldr	r3, [r3, #0]
 8018faa:	4a17      	ldr	r2, [pc, #92]	; (8019008 <xPortStartScheduler+0x138>)
 8018fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018fb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018fb2:	4b15      	ldr	r3, [pc, #84]	; (8019008 <xPortStartScheduler+0x138>)
 8018fb4:	681b      	ldr	r3, [r3, #0]
 8018fb6:	4a14      	ldr	r2, [pc, #80]	; (8019008 <xPortStartScheduler+0x138>)
 8018fb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8018fbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8018fbe:	f000 f8dd 	bl	801917c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8018fc2:	4b12      	ldr	r3, [pc, #72]	; (801900c <xPortStartScheduler+0x13c>)
 8018fc4:	2200      	movs	r2, #0
 8018fc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8018fc8:	f000 f8fc 	bl	80191c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018fcc:	4b10      	ldr	r3, [pc, #64]	; (8019010 <xPortStartScheduler+0x140>)
 8018fce:	681b      	ldr	r3, [r3, #0]
 8018fd0:	4a0f      	ldr	r2, [pc, #60]	; (8019010 <xPortStartScheduler+0x140>)
 8018fd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8018fd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8018fd8:	f7ff ff66 	bl	8018ea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8018fdc:	f7fe ff3c 	bl	8017e58 <vTaskSwitchContext>
	prvTaskExitError();
 8018fe0:	f7ff ff20 	bl	8018e24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8018fe4:	2300      	movs	r3, #0
}
 8018fe6:	4618      	mov	r0, r3
 8018fe8:	3718      	adds	r7, #24
 8018fea:	46bd      	mov	sp, r7
 8018fec:	bd80      	pop	{r7, pc}
 8018fee:	bf00      	nop
 8018ff0:	e000ed00 	.word	0xe000ed00
 8018ff4:	410fc271 	.word	0x410fc271
 8018ff8:	410fc270 	.word	0x410fc270
 8018ffc:	e000e400 	.word	0xe000e400
 8019000:	20001610 	.word	0x20001610
 8019004:	20001614 	.word	0x20001614
 8019008:	e000ed20 	.word	0xe000ed20
 801900c:	2000018c 	.word	0x2000018c
 8019010:	e000ef34 	.word	0xe000ef34

08019014 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8019014:	b480      	push	{r7}
 8019016:	b083      	sub	sp, #12
 8019018:	af00      	add	r7, sp, #0
	__asm volatile
 801901a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801901e:	f383 8811 	msr	BASEPRI, r3
 8019022:	f3bf 8f6f 	isb	sy
 8019026:	f3bf 8f4f 	dsb	sy
 801902a:	607b      	str	r3, [r7, #4]
}
 801902c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801902e:	4b0f      	ldr	r3, [pc, #60]	; (801906c <vPortEnterCritical+0x58>)
 8019030:	681b      	ldr	r3, [r3, #0]
 8019032:	3301      	adds	r3, #1
 8019034:	4a0d      	ldr	r2, [pc, #52]	; (801906c <vPortEnterCritical+0x58>)
 8019036:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8019038:	4b0c      	ldr	r3, [pc, #48]	; (801906c <vPortEnterCritical+0x58>)
 801903a:	681b      	ldr	r3, [r3, #0]
 801903c:	2b01      	cmp	r3, #1
 801903e:	d10f      	bne.n	8019060 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019040:	4b0b      	ldr	r3, [pc, #44]	; (8019070 <vPortEnterCritical+0x5c>)
 8019042:	681b      	ldr	r3, [r3, #0]
 8019044:	b2db      	uxtb	r3, r3
 8019046:	2b00      	cmp	r3, #0
 8019048:	d00a      	beq.n	8019060 <vPortEnterCritical+0x4c>
	__asm volatile
 801904a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801904e:	f383 8811 	msr	BASEPRI, r3
 8019052:	f3bf 8f6f 	isb	sy
 8019056:	f3bf 8f4f 	dsb	sy
 801905a:	603b      	str	r3, [r7, #0]
}
 801905c:	bf00      	nop
 801905e:	e7fe      	b.n	801905e <vPortEnterCritical+0x4a>
	}
}
 8019060:	bf00      	nop
 8019062:	370c      	adds	r7, #12
 8019064:	46bd      	mov	sp, r7
 8019066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801906a:	4770      	bx	lr
 801906c:	2000018c 	.word	0x2000018c
 8019070:	e000ed04 	.word	0xe000ed04

08019074 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8019074:	b480      	push	{r7}
 8019076:	b083      	sub	sp, #12
 8019078:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801907a:	4b12      	ldr	r3, [pc, #72]	; (80190c4 <vPortExitCritical+0x50>)
 801907c:	681b      	ldr	r3, [r3, #0]
 801907e:	2b00      	cmp	r3, #0
 8019080:	d10a      	bne.n	8019098 <vPortExitCritical+0x24>
	__asm volatile
 8019082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019086:	f383 8811 	msr	BASEPRI, r3
 801908a:	f3bf 8f6f 	isb	sy
 801908e:	f3bf 8f4f 	dsb	sy
 8019092:	607b      	str	r3, [r7, #4]
}
 8019094:	bf00      	nop
 8019096:	e7fe      	b.n	8019096 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8019098:	4b0a      	ldr	r3, [pc, #40]	; (80190c4 <vPortExitCritical+0x50>)
 801909a:	681b      	ldr	r3, [r3, #0]
 801909c:	3b01      	subs	r3, #1
 801909e:	4a09      	ldr	r2, [pc, #36]	; (80190c4 <vPortExitCritical+0x50>)
 80190a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80190a2:	4b08      	ldr	r3, [pc, #32]	; (80190c4 <vPortExitCritical+0x50>)
 80190a4:	681b      	ldr	r3, [r3, #0]
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	d105      	bne.n	80190b6 <vPortExitCritical+0x42>
 80190aa:	2300      	movs	r3, #0
 80190ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80190ae:	683b      	ldr	r3, [r7, #0]
 80190b0:	f383 8811 	msr	BASEPRI, r3
}
 80190b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80190b6:	bf00      	nop
 80190b8:	370c      	adds	r7, #12
 80190ba:	46bd      	mov	sp, r7
 80190bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190c0:	4770      	bx	lr
 80190c2:	bf00      	nop
 80190c4:	2000018c 	.word	0x2000018c
	...

080190d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80190d0:	f3ef 8009 	mrs	r0, PSP
 80190d4:	f3bf 8f6f 	isb	sy
 80190d8:	4b15      	ldr	r3, [pc, #84]	; (8019130 <pxCurrentTCBConst>)
 80190da:	681a      	ldr	r2, [r3, #0]
 80190dc:	f01e 0f10 	tst.w	lr, #16
 80190e0:	bf08      	it	eq
 80190e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80190e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190ea:	6010      	str	r0, [r2, #0]
 80190ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80190f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80190f4:	f380 8811 	msr	BASEPRI, r0
 80190f8:	f3bf 8f4f 	dsb	sy
 80190fc:	f3bf 8f6f 	isb	sy
 8019100:	f7fe feaa 	bl	8017e58 <vTaskSwitchContext>
 8019104:	f04f 0000 	mov.w	r0, #0
 8019108:	f380 8811 	msr	BASEPRI, r0
 801910c:	bc09      	pop	{r0, r3}
 801910e:	6819      	ldr	r1, [r3, #0]
 8019110:	6808      	ldr	r0, [r1, #0]
 8019112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019116:	f01e 0f10 	tst.w	lr, #16
 801911a:	bf08      	it	eq
 801911c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019120:	f380 8809 	msr	PSP, r0
 8019124:	f3bf 8f6f 	isb	sy
 8019128:	4770      	bx	lr
 801912a:	bf00      	nop
 801912c:	f3af 8000 	nop.w

08019130 <pxCurrentTCBConst>:
 8019130:	20000fe4 	.word	0x20000fe4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019134:	bf00      	nop
 8019136:	bf00      	nop

08019138 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019138:	b580      	push	{r7, lr}
 801913a:	b082      	sub	sp, #8
 801913c:	af00      	add	r7, sp, #0
	__asm volatile
 801913e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019142:	f383 8811 	msr	BASEPRI, r3
 8019146:	f3bf 8f6f 	isb	sy
 801914a:	f3bf 8f4f 	dsb	sy
 801914e:	607b      	str	r3, [r7, #4]
}
 8019150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019152:	f7fe fdc7 	bl	8017ce4 <xTaskIncrementTick>
 8019156:	4603      	mov	r3, r0
 8019158:	2b00      	cmp	r3, #0
 801915a:	d003      	beq.n	8019164 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801915c:	4b06      	ldr	r3, [pc, #24]	; (8019178 <xPortSysTickHandler+0x40>)
 801915e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019162:	601a      	str	r2, [r3, #0]
 8019164:	2300      	movs	r3, #0
 8019166:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019168:	683b      	ldr	r3, [r7, #0]
 801916a:	f383 8811 	msr	BASEPRI, r3
}
 801916e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019170:	bf00      	nop
 8019172:	3708      	adds	r7, #8
 8019174:	46bd      	mov	sp, r7
 8019176:	bd80      	pop	{r7, pc}
 8019178:	e000ed04 	.word	0xe000ed04

0801917c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801917c:	b480      	push	{r7}
 801917e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019180:	4b0b      	ldr	r3, [pc, #44]	; (80191b0 <vPortSetupTimerInterrupt+0x34>)
 8019182:	2200      	movs	r2, #0
 8019184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019186:	4b0b      	ldr	r3, [pc, #44]	; (80191b4 <vPortSetupTimerInterrupt+0x38>)
 8019188:	2200      	movs	r2, #0
 801918a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801918c:	4b0a      	ldr	r3, [pc, #40]	; (80191b8 <vPortSetupTimerInterrupt+0x3c>)
 801918e:	681b      	ldr	r3, [r3, #0]
 8019190:	4a0a      	ldr	r2, [pc, #40]	; (80191bc <vPortSetupTimerInterrupt+0x40>)
 8019192:	fba2 2303 	umull	r2, r3, r2, r3
 8019196:	099b      	lsrs	r3, r3, #6
 8019198:	4a09      	ldr	r2, [pc, #36]	; (80191c0 <vPortSetupTimerInterrupt+0x44>)
 801919a:	3b01      	subs	r3, #1
 801919c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801919e:	4b04      	ldr	r3, [pc, #16]	; (80191b0 <vPortSetupTimerInterrupt+0x34>)
 80191a0:	2207      	movs	r2, #7
 80191a2:	601a      	str	r2, [r3, #0]
}
 80191a4:	bf00      	nop
 80191a6:	46bd      	mov	sp, r7
 80191a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ac:	4770      	bx	lr
 80191ae:	bf00      	nop
 80191b0:	e000e010 	.word	0xe000e010
 80191b4:	e000e018 	.word	0xe000e018
 80191b8:	20000004 	.word	0x20000004
 80191bc:	10624dd3 	.word	0x10624dd3
 80191c0:	e000e014 	.word	0xe000e014

080191c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80191c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80191d4 <vPortEnableVFP+0x10>
 80191c8:	6801      	ldr	r1, [r0, #0]
 80191ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80191ce:	6001      	str	r1, [r0, #0]
 80191d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80191d2:	bf00      	nop
 80191d4:	e000ed88 	.word	0xe000ed88

080191d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80191d8:	b480      	push	{r7}
 80191da:	b085      	sub	sp, #20
 80191dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80191de:	f3ef 8305 	mrs	r3, IPSR
 80191e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80191e4:	68fb      	ldr	r3, [r7, #12]
 80191e6:	2b0f      	cmp	r3, #15
 80191e8:	d914      	bls.n	8019214 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80191ea:	4a17      	ldr	r2, [pc, #92]	; (8019248 <vPortValidateInterruptPriority+0x70>)
 80191ec:	68fb      	ldr	r3, [r7, #12]
 80191ee:	4413      	add	r3, r2
 80191f0:	781b      	ldrb	r3, [r3, #0]
 80191f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80191f4:	4b15      	ldr	r3, [pc, #84]	; (801924c <vPortValidateInterruptPriority+0x74>)
 80191f6:	781b      	ldrb	r3, [r3, #0]
 80191f8:	7afa      	ldrb	r2, [r7, #11]
 80191fa:	429a      	cmp	r2, r3
 80191fc:	d20a      	bcs.n	8019214 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80191fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019202:	f383 8811 	msr	BASEPRI, r3
 8019206:	f3bf 8f6f 	isb	sy
 801920a:	f3bf 8f4f 	dsb	sy
 801920e:	607b      	str	r3, [r7, #4]
}
 8019210:	bf00      	nop
 8019212:	e7fe      	b.n	8019212 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019214:	4b0e      	ldr	r3, [pc, #56]	; (8019250 <vPortValidateInterruptPriority+0x78>)
 8019216:	681b      	ldr	r3, [r3, #0]
 8019218:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801921c:	4b0d      	ldr	r3, [pc, #52]	; (8019254 <vPortValidateInterruptPriority+0x7c>)
 801921e:	681b      	ldr	r3, [r3, #0]
 8019220:	429a      	cmp	r2, r3
 8019222:	d90a      	bls.n	801923a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8019224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019228:	f383 8811 	msr	BASEPRI, r3
 801922c:	f3bf 8f6f 	isb	sy
 8019230:	f3bf 8f4f 	dsb	sy
 8019234:	603b      	str	r3, [r7, #0]
}
 8019236:	bf00      	nop
 8019238:	e7fe      	b.n	8019238 <vPortValidateInterruptPriority+0x60>
	}
 801923a:	bf00      	nop
 801923c:	3714      	adds	r7, #20
 801923e:	46bd      	mov	sp, r7
 8019240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019244:	4770      	bx	lr
 8019246:	bf00      	nop
 8019248:	e000e3f0 	.word	0xe000e3f0
 801924c:	20001610 	.word	0x20001610
 8019250:	e000ed0c 	.word	0xe000ed0c
 8019254:	20001614 	.word	0x20001614

08019258 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019258:	b580      	push	{r7, lr}
 801925a:	b08a      	sub	sp, #40	; 0x28
 801925c:	af00      	add	r7, sp, #0
 801925e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019260:	2300      	movs	r3, #0
 8019262:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019264:	f7fe fc82 	bl	8017b6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019268:	4b5b      	ldr	r3, [pc, #364]	; (80193d8 <pvPortMalloc+0x180>)
 801926a:	681b      	ldr	r3, [r3, #0]
 801926c:	2b00      	cmp	r3, #0
 801926e:	d101      	bne.n	8019274 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019270:	f000 f920 	bl	80194b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019274:	4b59      	ldr	r3, [pc, #356]	; (80193dc <pvPortMalloc+0x184>)
 8019276:	681a      	ldr	r2, [r3, #0]
 8019278:	687b      	ldr	r3, [r7, #4]
 801927a:	4013      	ands	r3, r2
 801927c:	2b00      	cmp	r3, #0
 801927e:	f040 8093 	bne.w	80193a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	2b00      	cmp	r3, #0
 8019286:	d01d      	beq.n	80192c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8019288:	2208      	movs	r2, #8
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	4413      	add	r3, r2
 801928e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	f003 0307 	and.w	r3, r3, #7
 8019296:	2b00      	cmp	r3, #0
 8019298:	d014      	beq.n	80192c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	f023 0307 	bic.w	r3, r3, #7
 80192a0:	3308      	adds	r3, #8
 80192a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	f003 0307 	and.w	r3, r3, #7
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	d00a      	beq.n	80192c4 <pvPortMalloc+0x6c>
	__asm volatile
 80192ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192b2:	f383 8811 	msr	BASEPRI, r3
 80192b6:	f3bf 8f6f 	isb	sy
 80192ba:	f3bf 8f4f 	dsb	sy
 80192be:	617b      	str	r3, [r7, #20]
}
 80192c0:	bf00      	nop
 80192c2:	e7fe      	b.n	80192c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	2b00      	cmp	r3, #0
 80192c8:	d06e      	beq.n	80193a8 <pvPortMalloc+0x150>
 80192ca:	4b45      	ldr	r3, [pc, #276]	; (80193e0 <pvPortMalloc+0x188>)
 80192cc:	681b      	ldr	r3, [r3, #0]
 80192ce:	687a      	ldr	r2, [r7, #4]
 80192d0:	429a      	cmp	r2, r3
 80192d2:	d869      	bhi.n	80193a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80192d4:	4b43      	ldr	r3, [pc, #268]	; (80193e4 <pvPortMalloc+0x18c>)
 80192d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80192d8:	4b42      	ldr	r3, [pc, #264]	; (80193e4 <pvPortMalloc+0x18c>)
 80192da:	681b      	ldr	r3, [r3, #0]
 80192dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80192de:	e004      	b.n	80192ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80192e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80192e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192e6:	681b      	ldr	r3, [r3, #0]
 80192e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80192ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192ec:	685b      	ldr	r3, [r3, #4]
 80192ee:	687a      	ldr	r2, [r7, #4]
 80192f0:	429a      	cmp	r2, r3
 80192f2:	d903      	bls.n	80192fc <pvPortMalloc+0xa4>
 80192f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192f6:	681b      	ldr	r3, [r3, #0]
 80192f8:	2b00      	cmp	r3, #0
 80192fa:	d1f1      	bne.n	80192e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80192fc:	4b36      	ldr	r3, [pc, #216]	; (80193d8 <pvPortMalloc+0x180>)
 80192fe:	681b      	ldr	r3, [r3, #0]
 8019300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019302:	429a      	cmp	r2, r3
 8019304:	d050      	beq.n	80193a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019306:	6a3b      	ldr	r3, [r7, #32]
 8019308:	681b      	ldr	r3, [r3, #0]
 801930a:	2208      	movs	r2, #8
 801930c:	4413      	add	r3, r2
 801930e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019312:	681a      	ldr	r2, [r3, #0]
 8019314:	6a3b      	ldr	r3, [r7, #32]
 8019316:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801931a:	685a      	ldr	r2, [r3, #4]
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	1ad2      	subs	r2, r2, r3
 8019320:	2308      	movs	r3, #8
 8019322:	005b      	lsls	r3, r3, #1
 8019324:	429a      	cmp	r2, r3
 8019326:	d91f      	bls.n	8019368 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	4413      	add	r3, r2
 801932e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019330:	69bb      	ldr	r3, [r7, #24]
 8019332:	f003 0307 	and.w	r3, r3, #7
 8019336:	2b00      	cmp	r3, #0
 8019338:	d00a      	beq.n	8019350 <pvPortMalloc+0xf8>
	__asm volatile
 801933a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801933e:	f383 8811 	msr	BASEPRI, r3
 8019342:	f3bf 8f6f 	isb	sy
 8019346:	f3bf 8f4f 	dsb	sy
 801934a:	613b      	str	r3, [r7, #16]
}
 801934c:	bf00      	nop
 801934e:	e7fe      	b.n	801934e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019352:	685a      	ldr	r2, [r3, #4]
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	1ad2      	subs	r2, r2, r3
 8019358:	69bb      	ldr	r3, [r7, #24]
 801935a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801935c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801935e:	687a      	ldr	r2, [r7, #4]
 8019360:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019362:	69b8      	ldr	r0, [r7, #24]
 8019364:	f000 f908 	bl	8019578 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019368:	4b1d      	ldr	r3, [pc, #116]	; (80193e0 <pvPortMalloc+0x188>)
 801936a:	681a      	ldr	r2, [r3, #0]
 801936c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801936e:	685b      	ldr	r3, [r3, #4]
 8019370:	1ad3      	subs	r3, r2, r3
 8019372:	4a1b      	ldr	r2, [pc, #108]	; (80193e0 <pvPortMalloc+0x188>)
 8019374:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019376:	4b1a      	ldr	r3, [pc, #104]	; (80193e0 <pvPortMalloc+0x188>)
 8019378:	681a      	ldr	r2, [r3, #0]
 801937a:	4b1b      	ldr	r3, [pc, #108]	; (80193e8 <pvPortMalloc+0x190>)
 801937c:	681b      	ldr	r3, [r3, #0]
 801937e:	429a      	cmp	r2, r3
 8019380:	d203      	bcs.n	801938a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019382:	4b17      	ldr	r3, [pc, #92]	; (80193e0 <pvPortMalloc+0x188>)
 8019384:	681b      	ldr	r3, [r3, #0]
 8019386:	4a18      	ldr	r2, [pc, #96]	; (80193e8 <pvPortMalloc+0x190>)
 8019388:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801938a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801938c:	685a      	ldr	r2, [r3, #4]
 801938e:	4b13      	ldr	r3, [pc, #76]	; (80193dc <pvPortMalloc+0x184>)
 8019390:	681b      	ldr	r3, [r3, #0]
 8019392:	431a      	orrs	r2, r3
 8019394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019396:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801939a:	2200      	movs	r2, #0
 801939c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801939e:	4b13      	ldr	r3, [pc, #76]	; (80193ec <pvPortMalloc+0x194>)
 80193a0:	681b      	ldr	r3, [r3, #0]
 80193a2:	3301      	adds	r3, #1
 80193a4:	4a11      	ldr	r2, [pc, #68]	; (80193ec <pvPortMalloc+0x194>)
 80193a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80193a8:	f7fe fbee 	bl	8017b88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80193ac:	69fb      	ldr	r3, [r7, #28]
 80193ae:	f003 0307 	and.w	r3, r3, #7
 80193b2:	2b00      	cmp	r3, #0
 80193b4:	d00a      	beq.n	80193cc <pvPortMalloc+0x174>
	__asm volatile
 80193b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193ba:	f383 8811 	msr	BASEPRI, r3
 80193be:	f3bf 8f6f 	isb	sy
 80193c2:	f3bf 8f4f 	dsb	sy
 80193c6:	60fb      	str	r3, [r7, #12]
}
 80193c8:	bf00      	nop
 80193ca:	e7fe      	b.n	80193ca <pvPortMalloc+0x172>
	return pvReturn;
 80193cc:	69fb      	ldr	r3, [r7, #28]
}
 80193ce:	4618      	mov	r0, r3
 80193d0:	3728      	adds	r7, #40	; 0x28
 80193d2:	46bd      	mov	sp, r7
 80193d4:	bd80      	pop	{r7, pc}
 80193d6:	bf00      	nop
 80193d8:	20005c70 	.word	0x20005c70
 80193dc:	20005c84 	.word	0x20005c84
 80193e0:	20005c74 	.word	0x20005c74
 80193e4:	20005c68 	.word	0x20005c68
 80193e8:	20005c78 	.word	0x20005c78
 80193ec:	20005c7c 	.word	0x20005c7c

080193f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80193f0:	b580      	push	{r7, lr}
 80193f2:	b086      	sub	sp, #24
 80193f4:	af00      	add	r7, sp, #0
 80193f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80193f8:	687b      	ldr	r3, [r7, #4]
 80193fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	2b00      	cmp	r3, #0
 8019400:	d04d      	beq.n	801949e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8019402:	2308      	movs	r3, #8
 8019404:	425b      	negs	r3, r3
 8019406:	697a      	ldr	r2, [r7, #20]
 8019408:	4413      	add	r3, r2
 801940a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801940c:	697b      	ldr	r3, [r7, #20]
 801940e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019410:	693b      	ldr	r3, [r7, #16]
 8019412:	685a      	ldr	r2, [r3, #4]
 8019414:	4b24      	ldr	r3, [pc, #144]	; (80194a8 <vPortFree+0xb8>)
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	4013      	ands	r3, r2
 801941a:	2b00      	cmp	r3, #0
 801941c:	d10a      	bne.n	8019434 <vPortFree+0x44>
	__asm volatile
 801941e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019422:	f383 8811 	msr	BASEPRI, r3
 8019426:	f3bf 8f6f 	isb	sy
 801942a:	f3bf 8f4f 	dsb	sy
 801942e:	60fb      	str	r3, [r7, #12]
}
 8019430:	bf00      	nop
 8019432:	e7fe      	b.n	8019432 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019434:	693b      	ldr	r3, [r7, #16]
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	2b00      	cmp	r3, #0
 801943a:	d00a      	beq.n	8019452 <vPortFree+0x62>
	__asm volatile
 801943c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019440:	f383 8811 	msr	BASEPRI, r3
 8019444:	f3bf 8f6f 	isb	sy
 8019448:	f3bf 8f4f 	dsb	sy
 801944c:	60bb      	str	r3, [r7, #8]
}
 801944e:	bf00      	nop
 8019450:	e7fe      	b.n	8019450 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019452:	693b      	ldr	r3, [r7, #16]
 8019454:	685a      	ldr	r2, [r3, #4]
 8019456:	4b14      	ldr	r3, [pc, #80]	; (80194a8 <vPortFree+0xb8>)
 8019458:	681b      	ldr	r3, [r3, #0]
 801945a:	4013      	ands	r3, r2
 801945c:	2b00      	cmp	r3, #0
 801945e:	d01e      	beq.n	801949e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019460:	693b      	ldr	r3, [r7, #16]
 8019462:	681b      	ldr	r3, [r3, #0]
 8019464:	2b00      	cmp	r3, #0
 8019466:	d11a      	bne.n	801949e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019468:	693b      	ldr	r3, [r7, #16]
 801946a:	685a      	ldr	r2, [r3, #4]
 801946c:	4b0e      	ldr	r3, [pc, #56]	; (80194a8 <vPortFree+0xb8>)
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	43db      	mvns	r3, r3
 8019472:	401a      	ands	r2, r3
 8019474:	693b      	ldr	r3, [r7, #16]
 8019476:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019478:	f7fe fb78 	bl	8017b6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801947c:	693b      	ldr	r3, [r7, #16]
 801947e:	685a      	ldr	r2, [r3, #4]
 8019480:	4b0a      	ldr	r3, [pc, #40]	; (80194ac <vPortFree+0xbc>)
 8019482:	681b      	ldr	r3, [r3, #0]
 8019484:	4413      	add	r3, r2
 8019486:	4a09      	ldr	r2, [pc, #36]	; (80194ac <vPortFree+0xbc>)
 8019488:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801948a:	6938      	ldr	r0, [r7, #16]
 801948c:	f000 f874 	bl	8019578 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019490:	4b07      	ldr	r3, [pc, #28]	; (80194b0 <vPortFree+0xc0>)
 8019492:	681b      	ldr	r3, [r3, #0]
 8019494:	3301      	adds	r3, #1
 8019496:	4a06      	ldr	r2, [pc, #24]	; (80194b0 <vPortFree+0xc0>)
 8019498:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801949a:	f7fe fb75 	bl	8017b88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801949e:	bf00      	nop
 80194a0:	3718      	adds	r7, #24
 80194a2:	46bd      	mov	sp, r7
 80194a4:	bd80      	pop	{r7, pc}
 80194a6:	bf00      	nop
 80194a8:	20005c84 	.word	0x20005c84
 80194ac:	20005c74 	.word	0x20005c74
 80194b0:	20005c80 	.word	0x20005c80

080194b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80194b4:	b480      	push	{r7}
 80194b6:	b085      	sub	sp, #20
 80194b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80194ba:	f244 6350 	movw	r3, #18000	; 0x4650
 80194be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80194c0:	4b27      	ldr	r3, [pc, #156]	; (8019560 <prvHeapInit+0xac>)
 80194c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80194c4:	68fb      	ldr	r3, [r7, #12]
 80194c6:	f003 0307 	and.w	r3, r3, #7
 80194ca:	2b00      	cmp	r3, #0
 80194cc:	d00c      	beq.n	80194e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80194ce:	68fb      	ldr	r3, [r7, #12]
 80194d0:	3307      	adds	r3, #7
 80194d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80194d4:	68fb      	ldr	r3, [r7, #12]
 80194d6:	f023 0307 	bic.w	r3, r3, #7
 80194da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80194dc:	68ba      	ldr	r2, [r7, #8]
 80194de:	68fb      	ldr	r3, [r7, #12]
 80194e0:	1ad3      	subs	r3, r2, r3
 80194e2:	4a1f      	ldr	r2, [pc, #124]	; (8019560 <prvHeapInit+0xac>)
 80194e4:	4413      	add	r3, r2
 80194e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80194e8:	68fb      	ldr	r3, [r7, #12]
 80194ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80194ec:	4a1d      	ldr	r2, [pc, #116]	; (8019564 <prvHeapInit+0xb0>)
 80194ee:	687b      	ldr	r3, [r7, #4]
 80194f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80194f2:	4b1c      	ldr	r3, [pc, #112]	; (8019564 <prvHeapInit+0xb0>)
 80194f4:	2200      	movs	r2, #0
 80194f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	68ba      	ldr	r2, [r7, #8]
 80194fc:	4413      	add	r3, r2
 80194fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019500:	2208      	movs	r2, #8
 8019502:	68fb      	ldr	r3, [r7, #12]
 8019504:	1a9b      	subs	r3, r3, r2
 8019506:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019508:	68fb      	ldr	r3, [r7, #12]
 801950a:	f023 0307 	bic.w	r3, r3, #7
 801950e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019510:	68fb      	ldr	r3, [r7, #12]
 8019512:	4a15      	ldr	r2, [pc, #84]	; (8019568 <prvHeapInit+0xb4>)
 8019514:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019516:	4b14      	ldr	r3, [pc, #80]	; (8019568 <prvHeapInit+0xb4>)
 8019518:	681b      	ldr	r3, [r3, #0]
 801951a:	2200      	movs	r2, #0
 801951c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801951e:	4b12      	ldr	r3, [pc, #72]	; (8019568 <prvHeapInit+0xb4>)
 8019520:	681b      	ldr	r3, [r3, #0]
 8019522:	2200      	movs	r2, #0
 8019524:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801952a:	683b      	ldr	r3, [r7, #0]
 801952c:	68fa      	ldr	r2, [r7, #12]
 801952e:	1ad2      	subs	r2, r2, r3
 8019530:	683b      	ldr	r3, [r7, #0]
 8019532:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019534:	4b0c      	ldr	r3, [pc, #48]	; (8019568 <prvHeapInit+0xb4>)
 8019536:	681a      	ldr	r2, [r3, #0]
 8019538:	683b      	ldr	r3, [r7, #0]
 801953a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801953c:	683b      	ldr	r3, [r7, #0]
 801953e:	685b      	ldr	r3, [r3, #4]
 8019540:	4a0a      	ldr	r2, [pc, #40]	; (801956c <prvHeapInit+0xb8>)
 8019542:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019544:	683b      	ldr	r3, [r7, #0]
 8019546:	685b      	ldr	r3, [r3, #4]
 8019548:	4a09      	ldr	r2, [pc, #36]	; (8019570 <prvHeapInit+0xbc>)
 801954a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801954c:	4b09      	ldr	r3, [pc, #36]	; (8019574 <prvHeapInit+0xc0>)
 801954e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019552:	601a      	str	r2, [r3, #0]
}
 8019554:	bf00      	nop
 8019556:	3714      	adds	r7, #20
 8019558:	46bd      	mov	sp, r7
 801955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801955e:	4770      	bx	lr
 8019560:	20001618 	.word	0x20001618
 8019564:	20005c68 	.word	0x20005c68
 8019568:	20005c70 	.word	0x20005c70
 801956c:	20005c78 	.word	0x20005c78
 8019570:	20005c74 	.word	0x20005c74
 8019574:	20005c84 	.word	0x20005c84

08019578 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019578:	b480      	push	{r7}
 801957a:	b085      	sub	sp, #20
 801957c:	af00      	add	r7, sp, #0
 801957e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019580:	4b28      	ldr	r3, [pc, #160]	; (8019624 <prvInsertBlockIntoFreeList+0xac>)
 8019582:	60fb      	str	r3, [r7, #12]
 8019584:	e002      	b.n	801958c <prvInsertBlockIntoFreeList+0x14>
 8019586:	68fb      	ldr	r3, [r7, #12]
 8019588:	681b      	ldr	r3, [r3, #0]
 801958a:	60fb      	str	r3, [r7, #12]
 801958c:	68fb      	ldr	r3, [r7, #12]
 801958e:	681b      	ldr	r3, [r3, #0]
 8019590:	687a      	ldr	r2, [r7, #4]
 8019592:	429a      	cmp	r2, r3
 8019594:	d8f7      	bhi.n	8019586 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019596:	68fb      	ldr	r3, [r7, #12]
 8019598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801959a:	68fb      	ldr	r3, [r7, #12]
 801959c:	685b      	ldr	r3, [r3, #4]
 801959e:	68ba      	ldr	r2, [r7, #8]
 80195a0:	4413      	add	r3, r2
 80195a2:	687a      	ldr	r2, [r7, #4]
 80195a4:	429a      	cmp	r2, r3
 80195a6:	d108      	bne.n	80195ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80195a8:	68fb      	ldr	r3, [r7, #12]
 80195aa:	685a      	ldr	r2, [r3, #4]
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	685b      	ldr	r3, [r3, #4]
 80195b0:	441a      	add	r2, r3
 80195b2:	68fb      	ldr	r3, [r7, #12]
 80195b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80195b6:	68fb      	ldr	r3, [r7, #12]
 80195b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	685b      	ldr	r3, [r3, #4]
 80195c2:	68ba      	ldr	r2, [r7, #8]
 80195c4:	441a      	add	r2, r3
 80195c6:	68fb      	ldr	r3, [r7, #12]
 80195c8:	681b      	ldr	r3, [r3, #0]
 80195ca:	429a      	cmp	r2, r3
 80195cc:	d118      	bne.n	8019600 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80195ce:	68fb      	ldr	r3, [r7, #12]
 80195d0:	681a      	ldr	r2, [r3, #0]
 80195d2:	4b15      	ldr	r3, [pc, #84]	; (8019628 <prvInsertBlockIntoFreeList+0xb0>)
 80195d4:	681b      	ldr	r3, [r3, #0]
 80195d6:	429a      	cmp	r2, r3
 80195d8:	d00d      	beq.n	80195f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	685a      	ldr	r2, [r3, #4]
 80195de:	68fb      	ldr	r3, [r7, #12]
 80195e0:	681b      	ldr	r3, [r3, #0]
 80195e2:	685b      	ldr	r3, [r3, #4]
 80195e4:	441a      	add	r2, r3
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80195ea:	68fb      	ldr	r3, [r7, #12]
 80195ec:	681b      	ldr	r3, [r3, #0]
 80195ee:	681a      	ldr	r2, [r3, #0]
 80195f0:	687b      	ldr	r3, [r7, #4]
 80195f2:	601a      	str	r2, [r3, #0]
 80195f4:	e008      	b.n	8019608 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80195f6:	4b0c      	ldr	r3, [pc, #48]	; (8019628 <prvInsertBlockIntoFreeList+0xb0>)
 80195f8:	681a      	ldr	r2, [r3, #0]
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	601a      	str	r2, [r3, #0]
 80195fe:	e003      	b.n	8019608 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019600:	68fb      	ldr	r3, [r7, #12]
 8019602:	681a      	ldr	r2, [r3, #0]
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019608:	68fa      	ldr	r2, [r7, #12]
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	429a      	cmp	r2, r3
 801960e:	d002      	beq.n	8019616 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019610:	68fb      	ldr	r3, [r7, #12]
 8019612:	687a      	ldr	r2, [r7, #4]
 8019614:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019616:	bf00      	nop
 8019618:	3714      	adds	r7, #20
 801961a:	46bd      	mov	sp, r7
 801961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019620:	4770      	bx	lr
 8019622:	bf00      	nop
 8019624:	20005c68 	.word	0x20005c68
 8019628:	20005c70 	.word	0x20005c70

0801962c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801962c:	b580      	push	{r7, lr}
 801962e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8019630:	2200      	movs	r2, #0
 8019632:	4912      	ldr	r1, [pc, #72]	; (801967c <MX_USB_DEVICE_Init+0x50>)
 8019634:	4812      	ldr	r0, [pc, #72]	; (8019680 <MX_USB_DEVICE_Init+0x54>)
 8019636:	f7f8 fadf 	bl	8011bf8 <USBD_Init>
 801963a:	4603      	mov	r3, r0
 801963c:	2b00      	cmp	r3, #0
 801963e:	d001      	beq.n	8019644 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8019640:	f7e9 fad2 	bl	8002be8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8019644:	490f      	ldr	r1, [pc, #60]	; (8019684 <MX_USB_DEVICE_Init+0x58>)
 8019646:	480e      	ldr	r0, [pc, #56]	; (8019680 <MX_USB_DEVICE_Init+0x54>)
 8019648:	f7f8 fb06 	bl	8011c58 <USBD_RegisterClass>
 801964c:	4603      	mov	r3, r0
 801964e:	2b00      	cmp	r3, #0
 8019650:	d001      	beq.n	8019656 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8019652:	f7e9 fac9 	bl	8002be8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8019656:	490c      	ldr	r1, [pc, #48]	; (8019688 <MX_USB_DEVICE_Init+0x5c>)
 8019658:	4809      	ldr	r0, [pc, #36]	; (8019680 <MX_USB_DEVICE_Init+0x54>)
 801965a:	f7f8 fa57 	bl	8011b0c <USBD_CDC_RegisterInterface>
 801965e:	4603      	mov	r3, r0
 8019660:	2b00      	cmp	r3, #0
 8019662:	d001      	beq.n	8019668 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8019664:	f7e9 fac0 	bl	8002be8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8019668:	4805      	ldr	r0, [pc, #20]	; (8019680 <MX_USB_DEVICE_Init+0x54>)
 801966a:	f7f8 fb1c 	bl	8011ca6 <USBD_Start>
 801966e:	4603      	mov	r3, r0
 8019670:	2b00      	cmp	r3, #0
 8019672:	d001      	beq.n	8019678 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8019674:	f7e9 fab8 	bl	8002be8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8019678:	bf00      	nop
 801967a:	bd80      	pop	{r7, pc}
 801967c:	200001a4 	.word	0x200001a4
 8019680:	200076ec 	.word	0x200076ec
 8019684:	20000088 	.word	0x20000088
 8019688:	20000190 	.word	0x20000190

0801968c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801968c:	b580      	push	{r7, lr}
 801968e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8019690:	2200      	movs	r2, #0
 8019692:	4905      	ldr	r1, [pc, #20]	; (80196a8 <CDC_Init_FS+0x1c>)
 8019694:	4805      	ldr	r0, [pc, #20]	; (80196ac <CDC_Init_FS+0x20>)
 8019696:	f7f8 fa4e 	bl	8011b36 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801969a:	4905      	ldr	r1, [pc, #20]	; (80196b0 <CDC_Init_FS+0x24>)
 801969c:	4803      	ldr	r0, [pc, #12]	; (80196ac <CDC_Init_FS+0x20>)
 801969e:	f7f8 fa68 	bl	8011b72 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80196a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80196a4:	4618      	mov	r0, r3
 80196a6:	bd80      	pop	{r7, pc}
 80196a8:	200081bc 	.word	0x200081bc
 80196ac:	200076ec 	.word	0x200076ec
 80196b0:	200079bc 	.word	0x200079bc

080196b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80196b4:	b480      	push	{r7}
 80196b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80196b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80196ba:	4618      	mov	r0, r3
 80196bc:	46bd      	mov	sp, r7
 80196be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196c2:	4770      	bx	lr

080196c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80196c4:	b480      	push	{r7}
 80196c6:	b083      	sub	sp, #12
 80196c8:	af00      	add	r7, sp, #0
 80196ca:	4603      	mov	r3, r0
 80196cc:	6039      	str	r1, [r7, #0]
 80196ce:	71fb      	strb	r3, [r7, #7]
 80196d0:	4613      	mov	r3, r2
 80196d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80196d4:	79fb      	ldrb	r3, [r7, #7]
 80196d6:	2b23      	cmp	r3, #35	; 0x23
 80196d8:	d84a      	bhi.n	8019770 <CDC_Control_FS+0xac>
 80196da:	a201      	add	r2, pc, #4	; (adr r2, 80196e0 <CDC_Control_FS+0x1c>)
 80196dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80196e0:	08019771 	.word	0x08019771
 80196e4:	08019771 	.word	0x08019771
 80196e8:	08019771 	.word	0x08019771
 80196ec:	08019771 	.word	0x08019771
 80196f0:	08019771 	.word	0x08019771
 80196f4:	08019771 	.word	0x08019771
 80196f8:	08019771 	.word	0x08019771
 80196fc:	08019771 	.word	0x08019771
 8019700:	08019771 	.word	0x08019771
 8019704:	08019771 	.word	0x08019771
 8019708:	08019771 	.word	0x08019771
 801970c:	08019771 	.word	0x08019771
 8019710:	08019771 	.word	0x08019771
 8019714:	08019771 	.word	0x08019771
 8019718:	08019771 	.word	0x08019771
 801971c:	08019771 	.word	0x08019771
 8019720:	08019771 	.word	0x08019771
 8019724:	08019771 	.word	0x08019771
 8019728:	08019771 	.word	0x08019771
 801972c:	08019771 	.word	0x08019771
 8019730:	08019771 	.word	0x08019771
 8019734:	08019771 	.word	0x08019771
 8019738:	08019771 	.word	0x08019771
 801973c:	08019771 	.word	0x08019771
 8019740:	08019771 	.word	0x08019771
 8019744:	08019771 	.word	0x08019771
 8019748:	08019771 	.word	0x08019771
 801974c:	08019771 	.word	0x08019771
 8019750:	08019771 	.word	0x08019771
 8019754:	08019771 	.word	0x08019771
 8019758:	08019771 	.word	0x08019771
 801975c:	08019771 	.word	0x08019771
 8019760:	08019771 	.word	0x08019771
 8019764:	08019771 	.word	0x08019771
 8019768:	08019771 	.word	0x08019771
 801976c:	08019771 	.word	0x08019771
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8019770:	bf00      	nop
  }

  return (USBD_OK);
 8019772:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8019774:	4618      	mov	r0, r3
 8019776:	370c      	adds	r7, #12
 8019778:	46bd      	mov	sp, r7
 801977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801977e:	4770      	bx	lr

08019780 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8019780:	b580      	push	{r7, lr}
 8019782:	b082      	sub	sp, #8
 8019784:	af00      	add	r7, sp, #0
 8019786:	6078      	str	r0, [r7, #4]
 8019788:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801978a:	6879      	ldr	r1, [r7, #4]
 801978c:	4805      	ldr	r0, [pc, #20]	; (80197a4 <CDC_Receive_FS+0x24>)
 801978e:	f7f8 f9f0 	bl	8011b72 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8019792:	4804      	ldr	r0, [pc, #16]	; (80197a4 <CDC_Receive_FS+0x24>)
 8019794:	f7f8 fa06 	bl	8011ba4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8019798:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801979a:	4618      	mov	r0, r3
 801979c:	3708      	adds	r7, #8
 801979e:	46bd      	mov	sp, r7
 80197a0:	bd80      	pop	{r7, pc}
 80197a2:	bf00      	nop
 80197a4:	200076ec 	.word	0x200076ec

080197a8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80197a8:	b480      	push	{r7}
 80197aa:	b087      	sub	sp, #28
 80197ac:	af00      	add	r7, sp, #0
 80197ae:	60f8      	str	r0, [r7, #12]
 80197b0:	60b9      	str	r1, [r7, #8]
 80197b2:	4613      	mov	r3, r2
 80197b4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80197b6:	2300      	movs	r3, #0
 80197b8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80197ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80197be:	4618      	mov	r0, r3
 80197c0:	371c      	adds	r7, #28
 80197c2:	46bd      	mov	sp, r7
 80197c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197c8:	4770      	bx	lr
	...

080197cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80197cc:	b480      	push	{r7}
 80197ce:	b083      	sub	sp, #12
 80197d0:	af00      	add	r7, sp, #0
 80197d2:	4603      	mov	r3, r0
 80197d4:	6039      	str	r1, [r7, #0]
 80197d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80197d8:	683b      	ldr	r3, [r7, #0]
 80197da:	2212      	movs	r2, #18
 80197dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80197de:	4b03      	ldr	r3, [pc, #12]	; (80197ec <USBD_FS_DeviceDescriptor+0x20>)
}
 80197e0:	4618      	mov	r0, r3
 80197e2:	370c      	adds	r7, #12
 80197e4:	46bd      	mov	sp, r7
 80197e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197ea:	4770      	bx	lr
 80197ec:	200001c0 	.word	0x200001c0

080197f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80197f0:	b480      	push	{r7}
 80197f2:	b083      	sub	sp, #12
 80197f4:	af00      	add	r7, sp, #0
 80197f6:	4603      	mov	r3, r0
 80197f8:	6039      	str	r1, [r7, #0]
 80197fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80197fc:	683b      	ldr	r3, [r7, #0]
 80197fe:	2204      	movs	r2, #4
 8019800:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8019802:	4b03      	ldr	r3, [pc, #12]	; (8019810 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8019804:	4618      	mov	r0, r3
 8019806:	370c      	adds	r7, #12
 8019808:	46bd      	mov	sp, r7
 801980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801980e:	4770      	bx	lr
 8019810:	200001d4 	.word	0x200001d4

08019814 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019814:	b580      	push	{r7, lr}
 8019816:	b082      	sub	sp, #8
 8019818:	af00      	add	r7, sp, #0
 801981a:	4603      	mov	r3, r0
 801981c:	6039      	str	r1, [r7, #0]
 801981e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019820:	79fb      	ldrb	r3, [r7, #7]
 8019822:	2b00      	cmp	r3, #0
 8019824:	d105      	bne.n	8019832 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019826:	683a      	ldr	r2, [r7, #0]
 8019828:	4907      	ldr	r1, [pc, #28]	; (8019848 <USBD_FS_ProductStrDescriptor+0x34>)
 801982a:	4808      	ldr	r0, [pc, #32]	; (801984c <USBD_FS_ProductStrDescriptor+0x38>)
 801982c:	f7f9 fa6d 	bl	8012d0a <USBD_GetString>
 8019830:	e004      	b.n	801983c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019832:	683a      	ldr	r2, [r7, #0]
 8019834:	4904      	ldr	r1, [pc, #16]	; (8019848 <USBD_FS_ProductStrDescriptor+0x34>)
 8019836:	4805      	ldr	r0, [pc, #20]	; (801984c <USBD_FS_ProductStrDescriptor+0x38>)
 8019838:	f7f9 fa67 	bl	8012d0a <USBD_GetString>
  }
  return USBD_StrDesc;
 801983c:	4b02      	ldr	r3, [pc, #8]	; (8019848 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801983e:	4618      	mov	r0, r3
 8019840:	3708      	adds	r7, #8
 8019842:	46bd      	mov	sp, r7
 8019844:	bd80      	pop	{r7, pc}
 8019846:	bf00      	nop
 8019848:	200089bc 	.word	0x200089bc
 801984c:	08022d68 	.word	0x08022d68

08019850 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019850:	b580      	push	{r7, lr}
 8019852:	b082      	sub	sp, #8
 8019854:	af00      	add	r7, sp, #0
 8019856:	4603      	mov	r3, r0
 8019858:	6039      	str	r1, [r7, #0]
 801985a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801985c:	683a      	ldr	r2, [r7, #0]
 801985e:	4904      	ldr	r1, [pc, #16]	; (8019870 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8019860:	4804      	ldr	r0, [pc, #16]	; (8019874 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8019862:	f7f9 fa52 	bl	8012d0a <USBD_GetString>
  return USBD_StrDesc;
 8019866:	4b02      	ldr	r3, [pc, #8]	; (8019870 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8019868:	4618      	mov	r0, r3
 801986a:	3708      	adds	r7, #8
 801986c:	46bd      	mov	sp, r7
 801986e:	bd80      	pop	{r7, pc}
 8019870:	200089bc 	.word	0x200089bc
 8019874:	08022d80 	.word	0x08022d80

08019878 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019878:	b580      	push	{r7, lr}
 801987a:	b082      	sub	sp, #8
 801987c:	af00      	add	r7, sp, #0
 801987e:	4603      	mov	r3, r0
 8019880:	6039      	str	r1, [r7, #0]
 8019882:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8019884:	683b      	ldr	r3, [r7, #0]
 8019886:	221a      	movs	r2, #26
 8019888:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801988a:	f000 f843 	bl	8019914 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801988e:	4b02      	ldr	r3, [pc, #8]	; (8019898 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8019890:	4618      	mov	r0, r3
 8019892:	3708      	adds	r7, #8
 8019894:	46bd      	mov	sp, r7
 8019896:	bd80      	pop	{r7, pc}
 8019898:	200001d8 	.word	0x200001d8

0801989c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801989c:	b580      	push	{r7, lr}
 801989e:	b082      	sub	sp, #8
 80198a0:	af00      	add	r7, sp, #0
 80198a2:	4603      	mov	r3, r0
 80198a4:	6039      	str	r1, [r7, #0]
 80198a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80198a8:	79fb      	ldrb	r3, [r7, #7]
 80198aa:	2b00      	cmp	r3, #0
 80198ac:	d105      	bne.n	80198ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80198ae:	683a      	ldr	r2, [r7, #0]
 80198b0:	4907      	ldr	r1, [pc, #28]	; (80198d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80198b2:	4808      	ldr	r0, [pc, #32]	; (80198d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80198b4:	f7f9 fa29 	bl	8012d0a <USBD_GetString>
 80198b8:	e004      	b.n	80198c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80198ba:	683a      	ldr	r2, [r7, #0]
 80198bc:	4904      	ldr	r1, [pc, #16]	; (80198d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80198be:	4805      	ldr	r0, [pc, #20]	; (80198d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80198c0:	f7f9 fa23 	bl	8012d0a <USBD_GetString>
  }
  return USBD_StrDesc;
 80198c4:	4b02      	ldr	r3, [pc, #8]	; (80198d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80198c6:	4618      	mov	r0, r3
 80198c8:	3708      	adds	r7, #8
 80198ca:	46bd      	mov	sp, r7
 80198cc:	bd80      	pop	{r7, pc}
 80198ce:	bf00      	nop
 80198d0:	200089bc 	.word	0x200089bc
 80198d4:	08022d94 	.word	0x08022d94

080198d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80198d8:	b580      	push	{r7, lr}
 80198da:	b082      	sub	sp, #8
 80198dc:	af00      	add	r7, sp, #0
 80198de:	4603      	mov	r3, r0
 80198e0:	6039      	str	r1, [r7, #0]
 80198e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80198e4:	79fb      	ldrb	r3, [r7, #7]
 80198e6:	2b00      	cmp	r3, #0
 80198e8:	d105      	bne.n	80198f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80198ea:	683a      	ldr	r2, [r7, #0]
 80198ec:	4907      	ldr	r1, [pc, #28]	; (801990c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80198ee:	4808      	ldr	r0, [pc, #32]	; (8019910 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80198f0:	f7f9 fa0b 	bl	8012d0a <USBD_GetString>
 80198f4:	e004      	b.n	8019900 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80198f6:	683a      	ldr	r2, [r7, #0]
 80198f8:	4904      	ldr	r1, [pc, #16]	; (801990c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80198fa:	4805      	ldr	r0, [pc, #20]	; (8019910 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80198fc:	f7f9 fa05 	bl	8012d0a <USBD_GetString>
  }
  return USBD_StrDesc;
 8019900:	4b02      	ldr	r3, [pc, #8]	; (801990c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8019902:	4618      	mov	r0, r3
 8019904:	3708      	adds	r7, #8
 8019906:	46bd      	mov	sp, r7
 8019908:	bd80      	pop	{r7, pc}
 801990a:	bf00      	nop
 801990c:	200089bc 	.word	0x200089bc
 8019910:	08022da0 	.word	0x08022da0

08019914 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8019914:	b580      	push	{r7, lr}
 8019916:	b084      	sub	sp, #16
 8019918:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801991a:	4b0f      	ldr	r3, [pc, #60]	; (8019958 <Get_SerialNum+0x44>)
 801991c:	681b      	ldr	r3, [r3, #0]
 801991e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8019920:	4b0e      	ldr	r3, [pc, #56]	; (801995c <Get_SerialNum+0x48>)
 8019922:	681b      	ldr	r3, [r3, #0]
 8019924:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8019926:	4b0e      	ldr	r3, [pc, #56]	; (8019960 <Get_SerialNum+0x4c>)
 8019928:	681b      	ldr	r3, [r3, #0]
 801992a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801992c:	68fa      	ldr	r2, [r7, #12]
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	4413      	add	r3, r2
 8019932:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8019934:	68fb      	ldr	r3, [r7, #12]
 8019936:	2b00      	cmp	r3, #0
 8019938:	d009      	beq.n	801994e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801993a:	2208      	movs	r2, #8
 801993c:	4909      	ldr	r1, [pc, #36]	; (8019964 <Get_SerialNum+0x50>)
 801993e:	68f8      	ldr	r0, [r7, #12]
 8019940:	f000 f814 	bl	801996c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8019944:	2204      	movs	r2, #4
 8019946:	4908      	ldr	r1, [pc, #32]	; (8019968 <Get_SerialNum+0x54>)
 8019948:	68b8      	ldr	r0, [r7, #8]
 801994a:	f000 f80f 	bl	801996c <IntToUnicode>
  }
}
 801994e:	bf00      	nop
 8019950:	3710      	adds	r7, #16
 8019952:	46bd      	mov	sp, r7
 8019954:	bd80      	pop	{r7, pc}
 8019956:	bf00      	nop
 8019958:	1fff7a10 	.word	0x1fff7a10
 801995c:	1fff7a14 	.word	0x1fff7a14
 8019960:	1fff7a18 	.word	0x1fff7a18
 8019964:	200001da 	.word	0x200001da
 8019968:	200001ea 	.word	0x200001ea

0801996c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801996c:	b480      	push	{r7}
 801996e:	b087      	sub	sp, #28
 8019970:	af00      	add	r7, sp, #0
 8019972:	60f8      	str	r0, [r7, #12]
 8019974:	60b9      	str	r1, [r7, #8]
 8019976:	4613      	mov	r3, r2
 8019978:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801997a:	2300      	movs	r3, #0
 801997c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801997e:	2300      	movs	r3, #0
 8019980:	75fb      	strb	r3, [r7, #23]
 8019982:	e027      	b.n	80199d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8019984:	68fb      	ldr	r3, [r7, #12]
 8019986:	0f1b      	lsrs	r3, r3, #28
 8019988:	2b09      	cmp	r3, #9
 801998a:	d80b      	bhi.n	80199a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801998c:	68fb      	ldr	r3, [r7, #12]
 801998e:	0f1b      	lsrs	r3, r3, #28
 8019990:	b2da      	uxtb	r2, r3
 8019992:	7dfb      	ldrb	r3, [r7, #23]
 8019994:	005b      	lsls	r3, r3, #1
 8019996:	4619      	mov	r1, r3
 8019998:	68bb      	ldr	r3, [r7, #8]
 801999a:	440b      	add	r3, r1
 801999c:	3230      	adds	r2, #48	; 0x30
 801999e:	b2d2      	uxtb	r2, r2
 80199a0:	701a      	strb	r2, [r3, #0]
 80199a2:	e00a      	b.n	80199ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80199a4:	68fb      	ldr	r3, [r7, #12]
 80199a6:	0f1b      	lsrs	r3, r3, #28
 80199a8:	b2da      	uxtb	r2, r3
 80199aa:	7dfb      	ldrb	r3, [r7, #23]
 80199ac:	005b      	lsls	r3, r3, #1
 80199ae:	4619      	mov	r1, r3
 80199b0:	68bb      	ldr	r3, [r7, #8]
 80199b2:	440b      	add	r3, r1
 80199b4:	3237      	adds	r2, #55	; 0x37
 80199b6:	b2d2      	uxtb	r2, r2
 80199b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80199ba:	68fb      	ldr	r3, [r7, #12]
 80199bc:	011b      	lsls	r3, r3, #4
 80199be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80199c0:	7dfb      	ldrb	r3, [r7, #23]
 80199c2:	005b      	lsls	r3, r3, #1
 80199c4:	3301      	adds	r3, #1
 80199c6:	68ba      	ldr	r2, [r7, #8]
 80199c8:	4413      	add	r3, r2
 80199ca:	2200      	movs	r2, #0
 80199cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80199ce:	7dfb      	ldrb	r3, [r7, #23]
 80199d0:	3301      	adds	r3, #1
 80199d2:	75fb      	strb	r3, [r7, #23]
 80199d4:	7dfa      	ldrb	r2, [r7, #23]
 80199d6:	79fb      	ldrb	r3, [r7, #7]
 80199d8:	429a      	cmp	r2, r3
 80199da:	d3d3      	bcc.n	8019984 <IntToUnicode+0x18>
  }
}
 80199dc:	bf00      	nop
 80199de:	bf00      	nop
 80199e0:	371c      	adds	r7, #28
 80199e2:	46bd      	mov	sp, r7
 80199e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199e8:	4770      	bx	lr
	...

080199ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80199ec:	b580      	push	{r7, lr}
 80199ee:	b08a      	sub	sp, #40	; 0x28
 80199f0:	af00      	add	r7, sp, #0
 80199f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80199f4:	f107 0314 	add.w	r3, r7, #20
 80199f8:	2200      	movs	r2, #0
 80199fa:	601a      	str	r2, [r3, #0]
 80199fc:	605a      	str	r2, [r3, #4]
 80199fe:	609a      	str	r2, [r3, #8]
 8019a00:	60da      	str	r2, [r3, #12]
 8019a02:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	681b      	ldr	r3, [r3, #0]
 8019a08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019a0c:	d147      	bne.n	8019a9e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019a0e:	2300      	movs	r3, #0
 8019a10:	613b      	str	r3, [r7, #16]
 8019a12:	4b25      	ldr	r3, [pc, #148]	; (8019aa8 <HAL_PCD_MspInit+0xbc>)
 8019a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019a16:	4a24      	ldr	r2, [pc, #144]	; (8019aa8 <HAL_PCD_MspInit+0xbc>)
 8019a18:	f043 0301 	orr.w	r3, r3, #1
 8019a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8019a1e:	4b22      	ldr	r3, [pc, #136]	; (8019aa8 <HAL_PCD_MspInit+0xbc>)
 8019a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019a22:	f003 0301 	and.w	r3, r3, #1
 8019a26:	613b      	str	r3, [r7, #16]
 8019a28:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8019a2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8019a30:	2300      	movs	r3, #0
 8019a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019a34:	2300      	movs	r3, #0
 8019a36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019a38:	f107 0314 	add.w	r3, r7, #20
 8019a3c:	4619      	mov	r1, r3
 8019a3e:	481b      	ldr	r0, [pc, #108]	; (8019aac <HAL_PCD_MspInit+0xc0>)
 8019a40:	f7ef fd1e 	bl	8009480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8019a44:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8019a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019a4a:	2302      	movs	r3, #2
 8019a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019a4e:	2300      	movs	r3, #0
 8019a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019a52:	2303      	movs	r3, #3
 8019a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8019a56:	230a      	movs	r3, #10
 8019a58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019a5a:	f107 0314 	add.w	r3, r7, #20
 8019a5e:	4619      	mov	r1, r3
 8019a60:	4812      	ldr	r0, [pc, #72]	; (8019aac <HAL_PCD_MspInit+0xc0>)
 8019a62:	f7ef fd0d 	bl	8009480 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8019a66:	4b10      	ldr	r3, [pc, #64]	; (8019aa8 <HAL_PCD_MspInit+0xbc>)
 8019a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019a6a:	4a0f      	ldr	r2, [pc, #60]	; (8019aa8 <HAL_PCD_MspInit+0xbc>)
 8019a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019a70:	6353      	str	r3, [r2, #52]	; 0x34
 8019a72:	2300      	movs	r3, #0
 8019a74:	60fb      	str	r3, [r7, #12]
 8019a76:	4b0c      	ldr	r3, [pc, #48]	; (8019aa8 <HAL_PCD_MspInit+0xbc>)
 8019a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019a7a:	4a0b      	ldr	r2, [pc, #44]	; (8019aa8 <HAL_PCD_MspInit+0xbc>)
 8019a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8019a80:	6453      	str	r3, [r2, #68]	; 0x44
 8019a82:	4b09      	ldr	r3, [pc, #36]	; (8019aa8 <HAL_PCD_MspInit+0xbc>)
 8019a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019a8a:	60fb      	str	r3, [r7, #12]
 8019a8c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8019a8e:	2200      	movs	r2, #0
 8019a90:	2105      	movs	r1, #5
 8019a92:	2043      	movs	r0, #67	; 0x43
 8019a94:	f7ef fcbc 	bl	8009410 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8019a98:	2043      	movs	r0, #67	; 0x43
 8019a9a:	f7ef fcd5 	bl	8009448 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8019a9e:	bf00      	nop
 8019aa0:	3728      	adds	r7, #40	; 0x28
 8019aa2:	46bd      	mov	sp, r7
 8019aa4:	bd80      	pop	{r7, pc}
 8019aa6:	bf00      	nop
 8019aa8:	40023800 	.word	0x40023800
 8019aac:	40020000 	.word	0x40020000

08019ab0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019ab0:	b580      	push	{r7, lr}
 8019ab2:	b082      	sub	sp, #8
 8019ab4:	af00      	add	r7, sp, #0
 8019ab6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8019abe:	687b      	ldr	r3, [r7, #4]
 8019ac0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8019ac4:	4619      	mov	r1, r3
 8019ac6:	4610      	mov	r0, r2
 8019ac8:	f7f8 f938 	bl	8011d3c <USBD_LL_SetupStage>
}
 8019acc:	bf00      	nop
 8019ace:	3708      	adds	r7, #8
 8019ad0:	46bd      	mov	sp, r7
 8019ad2:	bd80      	pop	{r7, pc}

08019ad4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019ad4:	b580      	push	{r7, lr}
 8019ad6:	b082      	sub	sp, #8
 8019ad8:	af00      	add	r7, sp, #0
 8019ada:	6078      	str	r0, [r7, #4]
 8019adc:	460b      	mov	r3, r1
 8019ade:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8019ae0:	687b      	ldr	r3, [r7, #4]
 8019ae2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8019ae6:	78fa      	ldrb	r2, [r7, #3]
 8019ae8:	6879      	ldr	r1, [r7, #4]
 8019aea:	4613      	mov	r3, r2
 8019aec:	00db      	lsls	r3, r3, #3
 8019aee:	1a9b      	subs	r3, r3, r2
 8019af0:	009b      	lsls	r3, r3, #2
 8019af2:	440b      	add	r3, r1
 8019af4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019af8:	681a      	ldr	r2, [r3, #0]
 8019afa:	78fb      	ldrb	r3, [r7, #3]
 8019afc:	4619      	mov	r1, r3
 8019afe:	f7f8 f972 	bl	8011de6 <USBD_LL_DataOutStage>
}
 8019b02:	bf00      	nop
 8019b04:	3708      	adds	r7, #8
 8019b06:	46bd      	mov	sp, r7
 8019b08:	bd80      	pop	{r7, pc}

08019b0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019b0a:	b580      	push	{r7, lr}
 8019b0c:	b082      	sub	sp, #8
 8019b0e:	af00      	add	r7, sp, #0
 8019b10:	6078      	str	r0, [r7, #4]
 8019b12:	460b      	mov	r3, r1
 8019b14:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8019b16:	687b      	ldr	r3, [r7, #4]
 8019b18:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8019b1c:	78fa      	ldrb	r2, [r7, #3]
 8019b1e:	6879      	ldr	r1, [r7, #4]
 8019b20:	4613      	mov	r3, r2
 8019b22:	00db      	lsls	r3, r3, #3
 8019b24:	1a9b      	subs	r3, r3, r2
 8019b26:	009b      	lsls	r3, r3, #2
 8019b28:	440b      	add	r3, r1
 8019b2a:	3348      	adds	r3, #72	; 0x48
 8019b2c:	681a      	ldr	r2, [r3, #0]
 8019b2e:	78fb      	ldrb	r3, [r7, #3]
 8019b30:	4619      	mov	r1, r3
 8019b32:	f7f8 f9bb 	bl	8011eac <USBD_LL_DataInStage>
}
 8019b36:	bf00      	nop
 8019b38:	3708      	adds	r7, #8
 8019b3a:	46bd      	mov	sp, r7
 8019b3c:	bd80      	pop	{r7, pc}

08019b3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019b3e:	b580      	push	{r7, lr}
 8019b40:	b082      	sub	sp, #8
 8019b42:	af00      	add	r7, sp, #0
 8019b44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8019b46:	687b      	ldr	r3, [r7, #4]
 8019b48:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019b4c:	4618      	mov	r0, r3
 8019b4e:	f7f8 facf 	bl	80120f0 <USBD_LL_SOF>
}
 8019b52:	bf00      	nop
 8019b54:	3708      	adds	r7, #8
 8019b56:	46bd      	mov	sp, r7
 8019b58:	bd80      	pop	{r7, pc}

08019b5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019b5a:	b580      	push	{r7, lr}
 8019b5c:	b084      	sub	sp, #16
 8019b5e:	af00      	add	r7, sp, #0
 8019b60:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8019b62:	2301      	movs	r3, #1
 8019b64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8019b66:	687b      	ldr	r3, [r7, #4]
 8019b68:	68db      	ldr	r3, [r3, #12]
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	d102      	bne.n	8019b74 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8019b6e:	2300      	movs	r3, #0
 8019b70:	73fb      	strb	r3, [r7, #15]
 8019b72:	e008      	b.n	8019b86 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8019b74:	687b      	ldr	r3, [r7, #4]
 8019b76:	68db      	ldr	r3, [r3, #12]
 8019b78:	2b02      	cmp	r3, #2
 8019b7a:	d102      	bne.n	8019b82 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8019b7c:	2301      	movs	r3, #1
 8019b7e:	73fb      	strb	r3, [r7, #15]
 8019b80:	e001      	b.n	8019b86 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8019b82:	f7e9 f831 	bl	8002be8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8019b86:	687b      	ldr	r3, [r7, #4]
 8019b88:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019b8c:	7bfa      	ldrb	r2, [r7, #15]
 8019b8e:	4611      	mov	r1, r2
 8019b90:	4618      	mov	r0, r3
 8019b92:	f7f8 fa6f 	bl	8012074 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019b96:	687b      	ldr	r3, [r7, #4]
 8019b98:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019b9c:	4618      	mov	r0, r3
 8019b9e:	f7f8 fa1b 	bl	8011fd8 <USBD_LL_Reset>
}
 8019ba2:	bf00      	nop
 8019ba4:	3710      	adds	r7, #16
 8019ba6:	46bd      	mov	sp, r7
 8019ba8:	bd80      	pop	{r7, pc}
	...

08019bac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019bac:	b580      	push	{r7, lr}
 8019bae:	b082      	sub	sp, #8
 8019bb0:	af00      	add	r7, sp, #0
 8019bb2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019bba:	4618      	mov	r0, r3
 8019bbc:	f7f8 fa6a 	bl	8012094 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	681b      	ldr	r3, [r3, #0]
 8019bc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019bc8:	681b      	ldr	r3, [r3, #0]
 8019bca:	687a      	ldr	r2, [r7, #4]
 8019bcc:	6812      	ldr	r2, [r2, #0]
 8019bce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019bd2:	f043 0301 	orr.w	r3, r3, #1
 8019bd6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	6a1b      	ldr	r3, [r3, #32]
 8019bdc:	2b00      	cmp	r3, #0
 8019bde:	d005      	beq.n	8019bec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019be0:	4b04      	ldr	r3, [pc, #16]	; (8019bf4 <HAL_PCD_SuspendCallback+0x48>)
 8019be2:	691b      	ldr	r3, [r3, #16]
 8019be4:	4a03      	ldr	r2, [pc, #12]	; (8019bf4 <HAL_PCD_SuspendCallback+0x48>)
 8019be6:	f043 0306 	orr.w	r3, r3, #6
 8019bea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8019bec:	bf00      	nop
 8019bee:	3708      	adds	r7, #8
 8019bf0:	46bd      	mov	sp, r7
 8019bf2:	bd80      	pop	{r7, pc}
 8019bf4:	e000ed00 	.word	0xe000ed00

08019bf8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019bf8:	b580      	push	{r7, lr}
 8019bfa:	b082      	sub	sp, #8
 8019bfc:	af00      	add	r7, sp, #0
 8019bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019c06:	4618      	mov	r0, r3
 8019c08:	f7f8 fa5a 	bl	80120c0 <USBD_LL_Resume>
}
 8019c0c:	bf00      	nop
 8019c0e:	3708      	adds	r7, #8
 8019c10:	46bd      	mov	sp, r7
 8019c12:	bd80      	pop	{r7, pc}

08019c14 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019c14:	b580      	push	{r7, lr}
 8019c16:	b082      	sub	sp, #8
 8019c18:	af00      	add	r7, sp, #0
 8019c1a:	6078      	str	r0, [r7, #4]
 8019c1c:	460b      	mov	r3, r1
 8019c1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019c20:	687b      	ldr	r3, [r7, #4]
 8019c22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019c26:	78fa      	ldrb	r2, [r7, #3]
 8019c28:	4611      	mov	r1, r2
 8019c2a:	4618      	mov	r0, r3
 8019c2c:	f7f8 faa8 	bl	8012180 <USBD_LL_IsoOUTIncomplete>
}
 8019c30:	bf00      	nop
 8019c32:	3708      	adds	r7, #8
 8019c34:	46bd      	mov	sp, r7
 8019c36:	bd80      	pop	{r7, pc}

08019c38 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019c38:	b580      	push	{r7, lr}
 8019c3a:	b082      	sub	sp, #8
 8019c3c:	af00      	add	r7, sp, #0
 8019c3e:	6078      	str	r0, [r7, #4]
 8019c40:	460b      	mov	r3, r1
 8019c42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019c44:	687b      	ldr	r3, [r7, #4]
 8019c46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019c4a:	78fa      	ldrb	r2, [r7, #3]
 8019c4c:	4611      	mov	r1, r2
 8019c4e:	4618      	mov	r0, r3
 8019c50:	f7f8 fa70 	bl	8012134 <USBD_LL_IsoINIncomplete>
}
 8019c54:	bf00      	nop
 8019c56:	3708      	adds	r7, #8
 8019c58:	46bd      	mov	sp, r7
 8019c5a:	bd80      	pop	{r7, pc}

08019c5c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019c5c:	b580      	push	{r7, lr}
 8019c5e:	b082      	sub	sp, #8
 8019c60:	af00      	add	r7, sp, #0
 8019c62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019c64:	687b      	ldr	r3, [r7, #4]
 8019c66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019c6a:	4618      	mov	r0, r3
 8019c6c:	f7f8 faae 	bl	80121cc <USBD_LL_DevConnected>
}
 8019c70:	bf00      	nop
 8019c72:	3708      	adds	r7, #8
 8019c74:	46bd      	mov	sp, r7
 8019c76:	bd80      	pop	{r7, pc}

08019c78 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019c78:	b580      	push	{r7, lr}
 8019c7a:	b082      	sub	sp, #8
 8019c7c:	af00      	add	r7, sp, #0
 8019c7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019c86:	4618      	mov	r0, r3
 8019c88:	f7f8 faab 	bl	80121e2 <USBD_LL_DevDisconnected>
}
 8019c8c:	bf00      	nop
 8019c8e:	3708      	adds	r7, #8
 8019c90:	46bd      	mov	sp, r7
 8019c92:	bd80      	pop	{r7, pc}

08019c94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019c94:	b580      	push	{r7, lr}
 8019c96:	b082      	sub	sp, #8
 8019c98:	af00      	add	r7, sp, #0
 8019c9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8019c9c:	687b      	ldr	r3, [r7, #4]
 8019c9e:	781b      	ldrb	r3, [r3, #0]
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	d13c      	bne.n	8019d1e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8019ca4:	4a20      	ldr	r2, [pc, #128]	; (8019d28 <USBD_LL_Init+0x94>)
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	4a1e      	ldr	r2, [pc, #120]	; (8019d28 <USBD_LL_Init+0x94>)
 8019cb0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019cb4:	4b1c      	ldr	r3, [pc, #112]	; (8019d28 <USBD_LL_Init+0x94>)
 8019cb6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8019cba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8019cbc:	4b1a      	ldr	r3, [pc, #104]	; (8019d28 <USBD_LL_Init+0x94>)
 8019cbe:	2204      	movs	r2, #4
 8019cc0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8019cc2:	4b19      	ldr	r3, [pc, #100]	; (8019d28 <USBD_LL_Init+0x94>)
 8019cc4:	2202      	movs	r2, #2
 8019cc6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8019cc8:	4b17      	ldr	r3, [pc, #92]	; (8019d28 <USBD_LL_Init+0x94>)
 8019cca:	2200      	movs	r2, #0
 8019ccc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019cce:	4b16      	ldr	r3, [pc, #88]	; (8019d28 <USBD_LL_Init+0x94>)
 8019cd0:	2202      	movs	r2, #2
 8019cd2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8019cd4:	4b14      	ldr	r3, [pc, #80]	; (8019d28 <USBD_LL_Init+0x94>)
 8019cd6:	2200      	movs	r2, #0
 8019cd8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8019cda:	4b13      	ldr	r3, [pc, #76]	; (8019d28 <USBD_LL_Init+0x94>)
 8019cdc:	2200      	movs	r2, #0
 8019cde:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8019ce0:	4b11      	ldr	r3, [pc, #68]	; (8019d28 <USBD_LL_Init+0x94>)
 8019ce2:	2200      	movs	r2, #0
 8019ce4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8019ce6:	4b10      	ldr	r3, [pc, #64]	; (8019d28 <USBD_LL_Init+0x94>)
 8019ce8:	2201      	movs	r2, #1
 8019cea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8019cec:	4b0e      	ldr	r3, [pc, #56]	; (8019d28 <USBD_LL_Init+0x94>)
 8019cee:	2200      	movs	r2, #0
 8019cf0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8019cf2:	480d      	ldr	r0, [pc, #52]	; (8019d28 <USBD_LL_Init+0x94>)
 8019cf4:	f7f0 fe7c 	bl	800a9f0 <HAL_PCD_Init>
 8019cf8:	4603      	mov	r3, r0
 8019cfa:	2b00      	cmp	r3, #0
 8019cfc:	d001      	beq.n	8019d02 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8019cfe:	f7e8 ff73 	bl	8002be8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8019d02:	2180      	movs	r1, #128	; 0x80
 8019d04:	4808      	ldr	r0, [pc, #32]	; (8019d28 <USBD_LL_Init+0x94>)
 8019d06:	f7f1 ffda 	bl	800bcbe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8019d0a:	2240      	movs	r2, #64	; 0x40
 8019d0c:	2100      	movs	r1, #0
 8019d0e:	4806      	ldr	r0, [pc, #24]	; (8019d28 <USBD_LL_Init+0x94>)
 8019d10:	f7f1 ff8e 	bl	800bc30 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8019d14:	2280      	movs	r2, #128	; 0x80
 8019d16:	2101      	movs	r1, #1
 8019d18:	4803      	ldr	r0, [pc, #12]	; (8019d28 <USBD_LL_Init+0x94>)
 8019d1a:	f7f1 ff89 	bl	800bc30 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8019d1e:	2300      	movs	r3, #0
}
 8019d20:	4618      	mov	r0, r3
 8019d22:	3708      	adds	r7, #8
 8019d24:	46bd      	mov	sp, r7
 8019d26:	bd80      	pop	{r7, pc}
 8019d28:	20008bbc 	.word	0x20008bbc

08019d2c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019d2c:	b580      	push	{r7, lr}
 8019d2e:	b084      	sub	sp, #16
 8019d30:	af00      	add	r7, sp, #0
 8019d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019d34:	2300      	movs	r3, #0
 8019d36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019d38:	2300      	movs	r3, #0
 8019d3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8019d3c:	687b      	ldr	r3, [r7, #4]
 8019d3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019d42:	4618      	mov	r0, r3
 8019d44:	f7f0 ff71 	bl	800ac2a <HAL_PCD_Start>
 8019d48:	4603      	mov	r3, r0
 8019d4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019d4c:	7bfb      	ldrb	r3, [r7, #15]
 8019d4e:	4618      	mov	r0, r3
 8019d50:	f000 f942 	bl	8019fd8 <USBD_Get_USB_Status>
 8019d54:	4603      	mov	r3, r0
 8019d56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019d58:	7bbb      	ldrb	r3, [r7, #14]
}
 8019d5a:	4618      	mov	r0, r3
 8019d5c:	3710      	adds	r7, #16
 8019d5e:	46bd      	mov	sp, r7
 8019d60:	bd80      	pop	{r7, pc}

08019d62 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019d62:	b580      	push	{r7, lr}
 8019d64:	b084      	sub	sp, #16
 8019d66:	af00      	add	r7, sp, #0
 8019d68:	6078      	str	r0, [r7, #4]
 8019d6a:	4608      	mov	r0, r1
 8019d6c:	4611      	mov	r1, r2
 8019d6e:	461a      	mov	r2, r3
 8019d70:	4603      	mov	r3, r0
 8019d72:	70fb      	strb	r3, [r7, #3]
 8019d74:	460b      	mov	r3, r1
 8019d76:	70bb      	strb	r3, [r7, #2]
 8019d78:	4613      	mov	r3, r2
 8019d7a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019d7c:	2300      	movs	r3, #0
 8019d7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019d80:	2300      	movs	r3, #0
 8019d82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019d8a:	78bb      	ldrb	r3, [r7, #2]
 8019d8c:	883a      	ldrh	r2, [r7, #0]
 8019d8e:	78f9      	ldrb	r1, [r7, #3]
 8019d90:	f7f1 fb55 	bl	800b43e <HAL_PCD_EP_Open>
 8019d94:	4603      	mov	r3, r0
 8019d96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019d98:	7bfb      	ldrb	r3, [r7, #15]
 8019d9a:	4618      	mov	r0, r3
 8019d9c:	f000 f91c 	bl	8019fd8 <USBD_Get_USB_Status>
 8019da0:	4603      	mov	r3, r0
 8019da2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019da4:	7bbb      	ldrb	r3, [r7, #14]
}
 8019da6:	4618      	mov	r0, r3
 8019da8:	3710      	adds	r7, #16
 8019daa:	46bd      	mov	sp, r7
 8019dac:	bd80      	pop	{r7, pc}

08019dae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019dae:	b580      	push	{r7, lr}
 8019db0:	b084      	sub	sp, #16
 8019db2:	af00      	add	r7, sp, #0
 8019db4:	6078      	str	r0, [r7, #4]
 8019db6:	460b      	mov	r3, r1
 8019db8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019dba:	2300      	movs	r3, #0
 8019dbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019dbe:	2300      	movs	r3, #0
 8019dc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019dc2:	687b      	ldr	r3, [r7, #4]
 8019dc4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019dc8:	78fa      	ldrb	r2, [r7, #3]
 8019dca:	4611      	mov	r1, r2
 8019dcc:	4618      	mov	r0, r3
 8019dce:	f7f1 fb9e 	bl	800b50e <HAL_PCD_EP_Close>
 8019dd2:	4603      	mov	r3, r0
 8019dd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019dd6:	7bfb      	ldrb	r3, [r7, #15]
 8019dd8:	4618      	mov	r0, r3
 8019dda:	f000 f8fd 	bl	8019fd8 <USBD_Get_USB_Status>
 8019dde:	4603      	mov	r3, r0
 8019de0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019de2:	7bbb      	ldrb	r3, [r7, #14]
}
 8019de4:	4618      	mov	r0, r3
 8019de6:	3710      	adds	r7, #16
 8019de8:	46bd      	mov	sp, r7
 8019dea:	bd80      	pop	{r7, pc}

08019dec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019dec:	b580      	push	{r7, lr}
 8019dee:	b084      	sub	sp, #16
 8019df0:	af00      	add	r7, sp, #0
 8019df2:	6078      	str	r0, [r7, #4]
 8019df4:	460b      	mov	r3, r1
 8019df6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019df8:	2300      	movs	r3, #0
 8019dfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019dfc:	2300      	movs	r3, #0
 8019dfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019e06:	78fa      	ldrb	r2, [r7, #3]
 8019e08:	4611      	mov	r1, r2
 8019e0a:	4618      	mov	r0, r3
 8019e0c:	f7f1 fc76 	bl	800b6fc <HAL_PCD_EP_SetStall>
 8019e10:	4603      	mov	r3, r0
 8019e12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019e14:	7bfb      	ldrb	r3, [r7, #15]
 8019e16:	4618      	mov	r0, r3
 8019e18:	f000 f8de 	bl	8019fd8 <USBD_Get_USB_Status>
 8019e1c:	4603      	mov	r3, r0
 8019e1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019e20:	7bbb      	ldrb	r3, [r7, #14]
}
 8019e22:	4618      	mov	r0, r3
 8019e24:	3710      	adds	r7, #16
 8019e26:	46bd      	mov	sp, r7
 8019e28:	bd80      	pop	{r7, pc}

08019e2a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019e2a:	b580      	push	{r7, lr}
 8019e2c:	b084      	sub	sp, #16
 8019e2e:	af00      	add	r7, sp, #0
 8019e30:	6078      	str	r0, [r7, #4]
 8019e32:	460b      	mov	r3, r1
 8019e34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019e36:	2300      	movs	r3, #0
 8019e38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019e3a:	2300      	movs	r3, #0
 8019e3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019e44:	78fa      	ldrb	r2, [r7, #3]
 8019e46:	4611      	mov	r1, r2
 8019e48:	4618      	mov	r0, r3
 8019e4a:	f7f1 fcbb 	bl	800b7c4 <HAL_PCD_EP_ClrStall>
 8019e4e:	4603      	mov	r3, r0
 8019e50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019e52:	7bfb      	ldrb	r3, [r7, #15]
 8019e54:	4618      	mov	r0, r3
 8019e56:	f000 f8bf 	bl	8019fd8 <USBD_Get_USB_Status>
 8019e5a:	4603      	mov	r3, r0
 8019e5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019e5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019e60:	4618      	mov	r0, r3
 8019e62:	3710      	adds	r7, #16
 8019e64:	46bd      	mov	sp, r7
 8019e66:	bd80      	pop	{r7, pc}

08019e68 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019e68:	b480      	push	{r7}
 8019e6a:	b085      	sub	sp, #20
 8019e6c:	af00      	add	r7, sp, #0
 8019e6e:	6078      	str	r0, [r7, #4]
 8019e70:	460b      	mov	r3, r1
 8019e72:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019e74:	687b      	ldr	r3, [r7, #4]
 8019e76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019e7a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019e7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019e80:	2b00      	cmp	r3, #0
 8019e82:	da0b      	bge.n	8019e9c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019e84:	78fb      	ldrb	r3, [r7, #3]
 8019e86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019e8a:	68f9      	ldr	r1, [r7, #12]
 8019e8c:	4613      	mov	r3, r2
 8019e8e:	00db      	lsls	r3, r3, #3
 8019e90:	1a9b      	subs	r3, r3, r2
 8019e92:	009b      	lsls	r3, r3, #2
 8019e94:	440b      	add	r3, r1
 8019e96:	333e      	adds	r3, #62	; 0x3e
 8019e98:	781b      	ldrb	r3, [r3, #0]
 8019e9a:	e00b      	b.n	8019eb4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019e9c:	78fb      	ldrb	r3, [r7, #3]
 8019e9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019ea2:	68f9      	ldr	r1, [r7, #12]
 8019ea4:	4613      	mov	r3, r2
 8019ea6:	00db      	lsls	r3, r3, #3
 8019ea8:	1a9b      	subs	r3, r3, r2
 8019eaa:	009b      	lsls	r3, r3, #2
 8019eac:	440b      	add	r3, r1
 8019eae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8019eb2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019eb4:	4618      	mov	r0, r3
 8019eb6:	3714      	adds	r7, #20
 8019eb8:	46bd      	mov	sp, r7
 8019eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ebe:	4770      	bx	lr

08019ec0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019ec0:	b580      	push	{r7, lr}
 8019ec2:	b084      	sub	sp, #16
 8019ec4:	af00      	add	r7, sp, #0
 8019ec6:	6078      	str	r0, [r7, #4]
 8019ec8:	460b      	mov	r3, r1
 8019eca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019ecc:	2300      	movs	r3, #0
 8019ece:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019ed0:	2300      	movs	r3, #0
 8019ed2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019eda:	78fa      	ldrb	r2, [r7, #3]
 8019edc:	4611      	mov	r1, r2
 8019ede:	4618      	mov	r0, r3
 8019ee0:	f7f1 fa88 	bl	800b3f4 <HAL_PCD_SetAddress>
 8019ee4:	4603      	mov	r3, r0
 8019ee6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019ee8:	7bfb      	ldrb	r3, [r7, #15]
 8019eea:	4618      	mov	r0, r3
 8019eec:	f000 f874 	bl	8019fd8 <USBD_Get_USB_Status>
 8019ef0:	4603      	mov	r3, r0
 8019ef2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019ef4:	7bbb      	ldrb	r3, [r7, #14]
}
 8019ef6:	4618      	mov	r0, r3
 8019ef8:	3710      	adds	r7, #16
 8019efa:	46bd      	mov	sp, r7
 8019efc:	bd80      	pop	{r7, pc}

08019efe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019efe:	b580      	push	{r7, lr}
 8019f00:	b086      	sub	sp, #24
 8019f02:	af00      	add	r7, sp, #0
 8019f04:	60f8      	str	r0, [r7, #12]
 8019f06:	607a      	str	r2, [r7, #4]
 8019f08:	603b      	str	r3, [r7, #0]
 8019f0a:	460b      	mov	r3, r1
 8019f0c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019f0e:	2300      	movs	r3, #0
 8019f10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019f12:	2300      	movs	r3, #0
 8019f14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019f16:	68fb      	ldr	r3, [r7, #12]
 8019f18:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019f1c:	7af9      	ldrb	r1, [r7, #11]
 8019f1e:	683b      	ldr	r3, [r7, #0]
 8019f20:	687a      	ldr	r2, [r7, #4]
 8019f22:	f7f1 fba1 	bl	800b668 <HAL_PCD_EP_Transmit>
 8019f26:	4603      	mov	r3, r0
 8019f28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019f2a:	7dfb      	ldrb	r3, [r7, #23]
 8019f2c:	4618      	mov	r0, r3
 8019f2e:	f000 f853 	bl	8019fd8 <USBD_Get_USB_Status>
 8019f32:	4603      	mov	r3, r0
 8019f34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019f36:	7dbb      	ldrb	r3, [r7, #22]
}
 8019f38:	4618      	mov	r0, r3
 8019f3a:	3718      	adds	r7, #24
 8019f3c:	46bd      	mov	sp, r7
 8019f3e:	bd80      	pop	{r7, pc}

08019f40 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019f40:	b580      	push	{r7, lr}
 8019f42:	b086      	sub	sp, #24
 8019f44:	af00      	add	r7, sp, #0
 8019f46:	60f8      	str	r0, [r7, #12]
 8019f48:	607a      	str	r2, [r7, #4]
 8019f4a:	603b      	str	r3, [r7, #0]
 8019f4c:	460b      	mov	r3, r1
 8019f4e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019f50:	2300      	movs	r3, #0
 8019f52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019f54:	2300      	movs	r3, #0
 8019f56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019f58:	68fb      	ldr	r3, [r7, #12]
 8019f5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019f5e:	7af9      	ldrb	r1, [r7, #11]
 8019f60:	683b      	ldr	r3, [r7, #0]
 8019f62:	687a      	ldr	r2, [r7, #4]
 8019f64:	f7f1 fb1d 	bl	800b5a2 <HAL_PCD_EP_Receive>
 8019f68:	4603      	mov	r3, r0
 8019f6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019f6c:	7dfb      	ldrb	r3, [r7, #23]
 8019f6e:	4618      	mov	r0, r3
 8019f70:	f000 f832 	bl	8019fd8 <USBD_Get_USB_Status>
 8019f74:	4603      	mov	r3, r0
 8019f76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019f78:	7dbb      	ldrb	r3, [r7, #22]
}
 8019f7a:	4618      	mov	r0, r3
 8019f7c:	3718      	adds	r7, #24
 8019f7e:	46bd      	mov	sp, r7
 8019f80:	bd80      	pop	{r7, pc}

08019f82 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019f82:	b580      	push	{r7, lr}
 8019f84:	b082      	sub	sp, #8
 8019f86:	af00      	add	r7, sp, #0
 8019f88:	6078      	str	r0, [r7, #4]
 8019f8a:	460b      	mov	r3, r1
 8019f8c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019f8e:	687b      	ldr	r3, [r7, #4]
 8019f90:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019f94:	78fa      	ldrb	r2, [r7, #3]
 8019f96:	4611      	mov	r1, r2
 8019f98:	4618      	mov	r0, r3
 8019f9a:	f7f1 fb4d 	bl	800b638 <HAL_PCD_EP_GetRxCount>
 8019f9e:	4603      	mov	r3, r0
}
 8019fa0:	4618      	mov	r0, r3
 8019fa2:	3708      	adds	r7, #8
 8019fa4:	46bd      	mov	sp, r7
 8019fa6:	bd80      	pop	{r7, pc}

08019fa8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019fa8:	b480      	push	{r7}
 8019faa:	b083      	sub	sp, #12
 8019fac:	af00      	add	r7, sp, #0
 8019fae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8019fb0:	4b03      	ldr	r3, [pc, #12]	; (8019fc0 <USBD_static_malloc+0x18>)
}
 8019fb2:	4618      	mov	r0, r3
 8019fb4:	370c      	adds	r7, #12
 8019fb6:	46bd      	mov	sp, r7
 8019fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fbc:	4770      	bx	lr
 8019fbe:	bf00      	nop
 8019fc0:	20005c88 	.word	0x20005c88

08019fc4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8019fc4:	b480      	push	{r7}
 8019fc6:	b083      	sub	sp, #12
 8019fc8:	af00      	add	r7, sp, #0
 8019fca:	6078      	str	r0, [r7, #4]

}
 8019fcc:	bf00      	nop
 8019fce:	370c      	adds	r7, #12
 8019fd0:	46bd      	mov	sp, r7
 8019fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fd6:	4770      	bx	lr

08019fd8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019fd8:	b480      	push	{r7}
 8019fda:	b085      	sub	sp, #20
 8019fdc:	af00      	add	r7, sp, #0
 8019fde:	4603      	mov	r3, r0
 8019fe0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019fe2:	2300      	movs	r3, #0
 8019fe4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019fe6:	79fb      	ldrb	r3, [r7, #7]
 8019fe8:	2b03      	cmp	r3, #3
 8019fea:	d817      	bhi.n	801a01c <USBD_Get_USB_Status+0x44>
 8019fec:	a201      	add	r2, pc, #4	; (adr r2, 8019ff4 <USBD_Get_USB_Status+0x1c>)
 8019fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019ff2:	bf00      	nop
 8019ff4:	0801a005 	.word	0x0801a005
 8019ff8:	0801a00b 	.word	0x0801a00b
 8019ffc:	0801a011 	.word	0x0801a011
 801a000:	0801a017 	.word	0x0801a017
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801a004:	2300      	movs	r3, #0
 801a006:	73fb      	strb	r3, [r7, #15]
    break;
 801a008:	e00b      	b.n	801a022 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a00a:	2303      	movs	r3, #3
 801a00c:	73fb      	strb	r3, [r7, #15]
    break;
 801a00e:	e008      	b.n	801a022 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a010:	2301      	movs	r3, #1
 801a012:	73fb      	strb	r3, [r7, #15]
    break;
 801a014:	e005      	b.n	801a022 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a016:	2303      	movs	r3, #3
 801a018:	73fb      	strb	r3, [r7, #15]
    break;
 801a01a:	e002      	b.n	801a022 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801a01c:	2303      	movs	r3, #3
 801a01e:	73fb      	strb	r3, [r7, #15]
    break;
 801a020:	bf00      	nop
  }
  return usb_status;
 801a022:	7bfb      	ldrb	r3, [r7, #15]
}
 801a024:	4618      	mov	r0, r3
 801a026:	3714      	adds	r7, #20
 801a028:	46bd      	mov	sp, r7
 801a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a02e:	4770      	bx	lr

0801a030 <_Znwj>:
 801a030:	2801      	cmp	r0, #1
 801a032:	bf38      	it	cc
 801a034:	2001      	movcc	r0, #1
 801a036:	b510      	push	{r4, lr}
 801a038:	4604      	mov	r4, r0
 801a03a:	4620      	mov	r0, r4
 801a03c:	f001 fa24 	bl	801b488 <malloc>
 801a040:	b930      	cbnz	r0, 801a050 <_Znwj+0x20>
 801a042:	f000 f81b 	bl	801a07c <_ZSt15get_new_handlerv>
 801a046:	b908      	cbnz	r0, 801a04c <_Znwj+0x1c>
 801a048:	f000 ffd4 	bl	801aff4 <abort>
 801a04c:	4780      	blx	r0
 801a04e:	e7f4      	b.n	801a03a <_Znwj+0xa>
 801a050:	bd10      	pop	{r4, pc}

0801a052 <__cxa_pure_virtual>:
 801a052:	b508      	push	{r3, lr}
 801a054:	f000 f80c 	bl	801a070 <_ZSt9terminatev>

0801a058 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801a058:	b508      	push	{r3, lr}
 801a05a:	4780      	blx	r0
 801a05c:	f000 ffca 	bl	801aff4 <abort>

0801a060 <_ZSt13get_terminatev>:
 801a060:	4b02      	ldr	r3, [pc, #8]	; (801a06c <_ZSt13get_terminatev+0xc>)
 801a062:	6818      	ldr	r0, [r3, #0]
 801a064:	f3bf 8f5b 	dmb	ish
 801a068:	4770      	bx	lr
 801a06a:	bf00      	nop
 801a06c:	200001f4 	.word	0x200001f4

0801a070 <_ZSt9terminatev>:
 801a070:	b508      	push	{r3, lr}
 801a072:	f7ff fff5 	bl	801a060 <_ZSt13get_terminatev>
 801a076:	f7ff ffef 	bl	801a058 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0801a07c <_ZSt15get_new_handlerv>:
 801a07c:	4b02      	ldr	r3, [pc, #8]	; (801a088 <_ZSt15get_new_handlerv+0xc>)
 801a07e:	6818      	ldr	r0, [r3, #0]
 801a080:	f3bf 8f5b 	dmb	ish
 801a084:	4770      	bx	lr
 801a086:	bf00      	nop
 801a088:	20005ea8 	.word	0x20005ea8

0801a08c <pow>:
 801a08c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a090:	ec59 8b10 	vmov	r8, r9, d0
 801a094:	ec57 6b11 	vmov	r6, r7, d1
 801a098:	f000 f8a6 	bl	801a1e8 <__ieee754_pow>
 801a09c:	4b4e      	ldr	r3, [pc, #312]	; (801a1d8 <pow+0x14c>)
 801a09e:	f993 3000 	ldrsb.w	r3, [r3]
 801a0a2:	3301      	adds	r3, #1
 801a0a4:	ec55 4b10 	vmov	r4, r5, d0
 801a0a8:	d015      	beq.n	801a0d6 <pow+0x4a>
 801a0aa:	4632      	mov	r2, r6
 801a0ac:	463b      	mov	r3, r7
 801a0ae:	4630      	mov	r0, r6
 801a0b0:	4639      	mov	r1, r7
 801a0b2:	f7e6 fd5b 	bl	8000b6c <__aeabi_dcmpun>
 801a0b6:	b970      	cbnz	r0, 801a0d6 <pow+0x4a>
 801a0b8:	4642      	mov	r2, r8
 801a0ba:	464b      	mov	r3, r9
 801a0bc:	4640      	mov	r0, r8
 801a0be:	4649      	mov	r1, r9
 801a0c0:	f7e6 fd54 	bl	8000b6c <__aeabi_dcmpun>
 801a0c4:	2200      	movs	r2, #0
 801a0c6:	2300      	movs	r3, #0
 801a0c8:	b148      	cbz	r0, 801a0de <pow+0x52>
 801a0ca:	4630      	mov	r0, r6
 801a0cc:	4639      	mov	r1, r7
 801a0ce:	f7e6 fd1b 	bl	8000b08 <__aeabi_dcmpeq>
 801a0d2:	2800      	cmp	r0, #0
 801a0d4:	d17d      	bne.n	801a1d2 <pow+0x146>
 801a0d6:	ec45 4b10 	vmov	d0, r4, r5
 801a0da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a0de:	4640      	mov	r0, r8
 801a0e0:	4649      	mov	r1, r9
 801a0e2:	f7e6 fd11 	bl	8000b08 <__aeabi_dcmpeq>
 801a0e6:	b1e0      	cbz	r0, 801a122 <pow+0x96>
 801a0e8:	2200      	movs	r2, #0
 801a0ea:	2300      	movs	r3, #0
 801a0ec:	4630      	mov	r0, r6
 801a0ee:	4639      	mov	r1, r7
 801a0f0:	f7e6 fd0a 	bl	8000b08 <__aeabi_dcmpeq>
 801a0f4:	2800      	cmp	r0, #0
 801a0f6:	d16c      	bne.n	801a1d2 <pow+0x146>
 801a0f8:	ec47 6b10 	vmov	d0, r6, r7
 801a0fc:	f000 fe53 	bl	801ada6 <finite>
 801a100:	2800      	cmp	r0, #0
 801a102:	d0e8      	beq.n	801a0d6 <pow+0x4a>
 801a104:	2200      	movs	r2, #0
 801a106:	2300      	movs	r3, #0
 801a108:	4630      	mov	r0, r6
 801a10a:	4639      	mov	r1, r7
 801a10c:	f7e6 fd06 	bl	8000b1c <__aeabi_dcmplt>
 801a110:	2800      	cmp	r0, #0
 801a112:	d0e0      	beq.n	801a0d6 <pow+0x4a>
 801a114:	f000 ff76 	bl	801b004 <__errno>
 801a118:	2321      	movs	r3, #33	; 0x21
 801a11a:	6003      	str	r3, [r0, #0]
 801a11c:	2400      	movs	r4, #0
 801a11e:	4d2f      	ldr	r5, [pc, #188]	; (801a1dc <pow+0x150>)
 801a120:	e7d9      	b.n	801a0d6 <pow+0x4a>
 801a122:	ec45 4b10 	vmov	d0, r4, r5
 801a126:	f000 fe3e 	bl	801ada6 <finite>
 801a12a:	bbb8      	cbnz	r0, 801a19c <pow+0x110>
 801a12c:	ec49 8b10 	vmov	d0, r8, r9
 801a130:	f000 fe39 	bl	801ada6 <finite>
 801a134:	b390      	cbz	r0, 801a19c <pow+0x110>
 801a136:	ec47 6b10 	vmov	d0, r6, r7
 801a13a:	f000 fe34 	bl	801ada6 <finite>
 801a13e:	b368      	cbz	r0, 801a19c <pow+0x110>
 801a140:	4622      	mov	r2, r4
 801a142:	462b      	mov	r3, r5
 801a144:	4620      	mov	r0, r4
 801a146:	4629      	mov	r1, r5
 801a148:	f7e6 fd10 	bl	8000b6c <__aeabi_dcmpun>
 801a14c:	b160      	cbz	r0, 801a168 <pow+0xdc>
 801a14e:	f000 ff59 	bl	801b004 <__errno>
 801a152:	2321      	movs	r3, #33	; 0x21
 801a154:	6003      	str	r3, [r0, #0]
 801a156:	2200      	movs	r2, #0
 801a158:	2300      	movs	r3, #0
 801a15a:	4610      	mov	r0, r2
 801a15c:	4619      	mov	r1, r3
 801a15e:	f7e6 fb95 	bl	800088c <__aeabi_ddiv>
 801a162:	4604      	mov	r4, r0
 801a164:	460d      	mov	r5, r1
 801a166:	e7b6      	b.n	801a0d6 <pow+0x4a>
 801a168:	f000 ff4c 	bl	801b004 <__errno>
 801a16c:	2322      	movs	r3, #34	; 0x22
 801a16e:	6003      	str	r3, [r0, #0]
 801a170:	2200      	movs	r2, #0
 801a172:	2300      	movs	r3, #0
 801a174:	4640      	mov	r0, r8
 801a176:	4649      	mov	r1, r9
 801a178:	f7e6 fcd0 	bl	8000b1c <__aeabi_dcmplt>
 801a17c:	2400      	movs	r4, #0
 801a17e:	b158      	cbz	r0, 801a198 <pow+0x10c>
 801a180:	ec47 6b10 	vmov	d0, r6, r7
 801a184:	f000 fe24 	bl	801add0 <rint>
 801a188:	4632      	mov	r2, r6
 801a18a:	ec51 0b10 	vmov	r0, r1, d0
 801a18e:	463b      	mov	r3, r7
 801a190:	f7e6 fcba 	bl	8000b08 <__aeabi_dcmpeq>
 801a194:	2800      	cmp	r0, #0
 801a196:	d0c2      	beq.n	801a11e <pow+0x92>
 801a198:	4d11      	ldr	r5, [pc, #68]	; (801a1e0 <pow+0x154>)
 801a19a:	e79c      	b.n	801a0d6 <pow+0x4a>
 801a19c:	2200      	movs	r2, #0
 801a19e:	2300      	movs	r3, #0
 801a1a0:	4620      	mov	r0, r4
 801a1a2:	4629      	mov	r1, r5
 801a1a4:	f7e6 fcb0 	bl	8000b08 <__aeabi_dcmpeq>
 801a1a8:	2800      	cmp	r0, #0
 801a1aa:	d094      	beq.n	801a0d6 <pow+0x4a>
 801a1ac:	ec49 8b10 	vmov	d0, r8, r9
 801a1b0:	f000 fdf9 	bl	801ada6 <finite>
 801a1b4:	2800      	cmp	r0, #0
 801a1b6:	d08e      	beq.n	801a0d6 <pow+0x4a>
 801a1b8:	ec47 6b10 	vmov	d0, r6, r7
 801a1bc:	f000 fdf3 	bl	801ada6 <finite>
 801a1c0:	2800      	cmp	r0, #0
 801a1c2:	d088      	beq.n	801a0d6 <pow+0x4a>
 801a1c4:	f000 ff1e 	bl	801b004 <__errno>
 801a1c8:	2322      	movs	r3, #34	; 0x22
 801a1ca:	6003      	str	r3, [r0, #0]
 801a1cc:	2400      	movs	r4, #0
 801a1ce:	2500      	movs	r5, #0
 801a1d0:	e781      	b.n	801a0d6 <pow+0x4a>
 801a1d2:	4d04      	ldr	r5, [pc, #16]	; (801a1e4 <pow+0x158>)
 801a1d4:	2400      	movs	r4, #0
 801a1d6:	e77e      	b.n	801a0d6 <pow+0x4a>
 801a1d8:	200001f8 	.word	0x200001f8
 801a1dc:	fff00000 	.word	0xfff00000
 801a1e0:	7ff00000 	.word	0x7ff00000
 801a1e4:	3ff00000 	.word	0x3ff00000

0801a1e8 <__ieee754_pow>:
 801a1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1ec:	ed2d 8b06 	vpush	{d8-d10}
 801a1f0:	b08d      	sub	sp, #52	; 0x34
 801a1f2:	ed8d 1b02 	vstr	d1, [sp, #8]
 801a1f6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 801a1fa:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801a1fe:	ea56 0100 	orrs.w	r1, r6, r0
 801a202:	ec53 2b10 	vmov	r2, r3, d0
 801a206:	f000 84d1 	beq.w	801abac <__ieee754_pow+0x9c4>
 801a20a:	497f      	ldr	r1, [pc, #508]	; (801a408 <__ieee754_pow+0x220>)
 801a20c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 801a210:	428c      	cmp	r4, r1
 801a212:	ee10 8a10 	vmov	r8, s0
 801a216:	4699      	mov	r9, r3
 801a218:	dc09      	bgt.n	801a22e <__ieee754_pow+0x46>
 801a21a:	d103      	bne.n	801a224 <__ieee754_pow+0x3c>
 801a21c:	b97a      	cbnz	r2, 801a23e <__ieee754_pow+0x56>
 801a21e:	42a6      	cmp	r6, r4
 801a220:	dd02      	ble.n	801a228 <__ieee754_pow+0x40>
 801a222:	e00c      	b.n	801a23e <__ieee754_pow+0x56>
 801a224:	428e      	cmp	r6, r1
 801a226:	dc02      	bgt.n	801a22e <__ieee754_pow+0x46>
 801a228:	428e      	cmp	r6, r1
 801a22a:	d110      	bne.n	801a24e <__ieee754_pow+0x66>
 801a22c:	b178      	cbz	r0, 801a24e <__ieee754_pow+0x66>
 801a22e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801a232:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a236:	ea54 0308 	orrs.w	r3, r4, r8
 801a23a:	f000 84b7 	beq.w	801abac <__ieee754_pow+0x9c4>
 801a23e:	4873      	ldr	r0, [pc, #460]	; (801a40c <__ieee754_pow+0x224>)
 801a240:	b00d      	add	sp, #52	; 0x34
 801a242:	ecbd 8b06 	vpop	{d8-d10}
 801a246:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a24a:	f000 bdb9 	b.w	801adc0 <nan>
 801a24e:	f1b9 0f00 	cmp.w	r9, #0
 801a252:	da36      	bge.n	801a2c2 <__ieee754_pow+0xda>
 801a254:	496e      	ldr	r1, [pc, #440]	; (801a410 <__ieee754_pow+0x228>)
 801a256:	428e      	cmp	r6, r1
 801a258:	dc51      	bgt.n	801a2fe <__ieee754_pow+0x116>
 801a25a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 801a25e:	428e      	cmp	r6, r1
 801a260:	f340 84af 	ble.w	801abc2 <__ieee754_pow+0x9da>
 801a264:	1531      	asrs	r1, r6, #20
 801a266:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801a26a:	2914      	cmp	r1, #20
 801a26c:	dd0f      	ble.n	801a28e <__ieee754_pow+0xa6>
 801a26e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 801a272:	fa20 fc01 	lsr.w	ip, r0, r1
 801a276:	fa0c f101 	lsl.w	r1, ip, r1
 801a27a:	4281      	cmp	r1, r0
 801a27c:	f040 84a1 	bne.w	801abc2 <__ieee754_pow+0x9da>
 801a280:	f00c 0c01 	and.w	ip, ip, #1
 801a284:	f1cc 0102 	rsb	r1, ip, #2
 801a288:	9100      	str	r1, [sp, #0]
 801a28a:	b180      	cbz	r0, 801a2ae <__ieee754_pow+0xc6>
 801a28c:	e059      	b.n	801a342 <__ieee754_pow+0x15a>
 801a28e:	2800      	cmp	r0, #0
 801a290:	d155      	bne.n	801a33e <__ieee754_pow+0x156>
 801a292:	f1c1 0114 	rsb	r1, r1, #20
 801a296:	fa46 fc01 	asr.w	ip, r6, r1
 801a29a:	fa0c f101 	lsl.w	r1, ip, r1
 801a29e:	42b1      	cmp	r1, r6
 801a2a0:	f040 848c 	bne.w	801abbc <__ieee754_pow+0x9d4>
 801a2a4:	f00c 0c01 	and.w	ip, ip, #1
 801a2a8:	f1cc 0102 	rsb	r1, ip, #2
 801a2ac:	9100      	str	r1, [sp, #0]
 801a2ae:	4959      	ldr	r1, [pc, #356]	; (801a414 <__ieee754_pow+0x22c>)
 801a2b0:	428e      	cmp	r6, r1
 801a2b2:	d12d      	bne.n	801a310 <__ieee754_pow+0x128>
 801a2b4:	2f00      	cmp	r7, #0
 801a2b6:	da79      	bge.n	801a3ac <__ieee754_pow+0x1c4>
 801a2b8:	4956      	ldr	r1, [pc, #344]	; (801a414 <__ieee754_pow+0x22c>)
 801a2ba:	2000      	movs	r0, #0
 801a2bc:	f7e6 fae6 	bl	800088c <__aeabi_ddiv>
 801a2c0:	e016      	b.n	801a2f0 <__ieee754_pow+0x108>
 801a2c2:	2100      	movs	r1, #0
 801a2c4:	9100      	str	r1, [sp, #0]
 801a2c6:	2800      	cmp	r0, #0
 801a2c8:	d13b      	bne.n	801a342 <__ieee754_pow+0x15a>
 801a2ca:	494f      	ldr	r1, [pc, #316]	; (801a408 <__ieee754_pow+0x220>)
 801a2cc:	428e      	cmp	r6, r1
 801a2ce:	d1ee      	bne.n	801a2ae <__ieee754_pow+0xc6>
 801a2d0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801a2d4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801a2d8:	ea53 0308 	orrs.w	r3, r3, r8
 801a2dc:	f000 8466 	beq.w	801abac <__ieee754_pow+0x9c4>
 801a2e0:	4b4d      	ldr	r3, [pc, #308]	; (801a418 <__ieee754_pow+0x230>)
 801a2e2:	429c      	cmp	r4, r3
 801a2e4:	dd0d      	ble.n	801a302 <__ieee754_pow+0x11a>
 801a2e6:	2f00      	cmp	r7, #0
 801a2e8:	f280 8464 	bge.w	801abb4 <__ieee754_pow+0x9cc>
 801a2ec:	2000      	movs	r0, #0
 801a2ee:	2100      	movs	r1, #0
 801a2f0:	ec41 0b10 	vmov	d0, r0, r1
 801a2f4:	b00d      	add	sp, #52	; 0x34
 801a2f6:	ecbd 8b06 	vpop	{d8-d10}
 801a2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2fe:	2102      	movs	r1, #2
 801a300:	e7e0      	b.n	801a2c4 <__ieee754_pow+0xdc>
 801a302:	2f00      	cmp	r7, #0
 801a304:	daf2      	bge.n	801a2ec <__ieee754_pow+0x104>
 801a306:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 801a30a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a30e:	e7ef      	b.n	801a2f0 <__ieee754_pow+0x108>
 801a310:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 801a314:	d104      	bne.n	801a320 <__ieee754_pow+0x138>
 801a316:	4610      	mov	r0, r2
 801a318:	4619      	mov	r1, r3
 801a31a:	f7e6 f98d 	bl	8000638 <__aeabi_dmul>
 801a31e:	e7e7      	b.n	801a2f0 <__ieee754_pow+0x108>
 801a320:	493e      	ldr	r1, [pc, #248]	; (801a41c <__ieee754_pow+0x234>)
 801a322:	428f      	cmp	r7, r1
 801a324:	d10d      	bne.n	801a342 <__ieee754_pow+0x15a>
 801a326:	f1b9 0f00 	cmp.w	r9, #0
 801a32a:	db0a      	blt.n	801a342 <__ieee754_pow+0x15a>
 801a32c:	ec43 2b10 	vmov	d0, r2, r3
 801a330:	b00d      	add	sp, #52	; 0x34
 801a332:	ecbd 8b06 	vpop	{d8-d10}
 801a336:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a33a:	f000 bc77 	b.w	801ac2c <__ieee754_sqrt>
 801a33e:	2100      	movs	r1, #0
 801a340:	9100      	str	r1, [sp, #0]
 801a342:	ec43 2b10 	vmov	d0, r2, r3
 801a346:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801a34a:	f000 fd23 	bl	801ad94 <fabs>
 801a34e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a352:	ec51 0b10 	vmov	r0, r1, d0
 801a356:	f1b8 0f00 	cmp.w	r8, #0
 801a35a:	d12a      	bne.n	801a3b2 <__ieee754_pow+0x1ca>
 801a35c:	b12c      	cbz	r4, 801a36a <__ieee754_pow+0x182>
 801a35e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 801a414 <__ieee754_pow+0x22c>
 801a362:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 801a366:	45e6      	cmp	lr, ip
 801a368:	d123      	bne.n	801a3b2 <__ieee754_pow+0x1ca>
 801a36a:	2f00      	cmp	r7, #0
 801a36c:	da05      	bge.n	801a37a <__ieee754_pow+0x192>
 801a36e:	4602      	mov	r2, r0
 801a370:	460b      	mov	r3, r1
 801a372:	2000      	movs	r0, #0
 801a374:	4927      	ldr	r1, [pc, #156]	; (801a414 <__ieee754_pow+0x22c>)
 801a376:	f7e6 fa89 	bl	800088c <__aeabi_ddiv>
 801a37a:	f1b9 0f00 	cmp.w	r9, #0
 801a37e:	dab7      	bge.n	801a2f0 <__ieee754_pow+0x108>
 801a380:	9b00      	ldr	r3, [sp, #0]
 801a382:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801a386:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a38a:	4323      	orrs	r3, r4
 801a38c:	d108      	bne.n	801a3a0 <__ieee754_pow+0x1b8>
 801a38e:	4602      	mov	r2, r0
 801a390:	460b      	mov	r3, r1
 801a392:	4610      	mov	r0, r2
 801a394:	4619      	mov	r1, r3
 801a396:	f7e5 ff97 	bl	80002c8 <__aeabi_dsub>
 801a39a:	4602      	mov	r2, r0
 801a39c:	460b      	mov	r3, r1
 801a39e:	e78d      	b.n	801a2bc <__ieee754_pow+0xd4>
 801a3a0:	9b00      	ldr	r3, [sp, #0]
 801a3a2:	2b01      	cmp	r3, #1
 801a3a4:	d1a4      	bne.n	801a2f0 <__ieee754_pow+0x108>
 801a3a6:	4602      	mov	r2, r0
 801a3a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a3ac:	4610      	mov	r0, r2
 801a3ae:	4619      	mov	r1, r3
 801a3b0:	e79e      	b.n	801a2f0 <__ieee754_pow+0x108>
 801a3b2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 801a3b6:	f10c 35ff 	add.w	r5, ip, #4294967295
 801a3ba:	950a      	str	r5, [sp, #40]	; 0x28
 801a3bc:	9d00      	ldr	r5, [sp, #0]
 801a3be:	46ac      	mov	ip, r5
 801a3c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801a3c2:	ea5c 0505 	orrs.w	r5, ip, r5
 801a3c6:	d0e4      	beq.n	801a392 <__ieee754_pow+0x1aa>
 801a3c8:	4b15      	ldr	r3, [pc, #84]	; (801a420 <__ieee754_pow+0x238>)
 801a3ca:	429e      	cmp	r6, r3
 801a3cc:	f340 80fc 	ble.w	801a5c8 <__ieee754_pow+0x3e0>
 801a3d0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801a3d4:	429e      	cmp	r6, r3
 801a3d6:	4b10      	ldr	r3, [pc, #64]	; (801a418 <__ieee754_pow+0x230>)
 801a3d8:	dd07      	ble.n	801a3ea <__ieee754_pow+0x202>
 801a3da:	429c      	cmp	r4, r3
 801a3dc:	dc0a      	bgt.n	801a3f4 <__ieee754_pow+0x20c>
 801a3de:	2f00      	cmp	r7, #0
 801a3e0:	da84      	bge.n	801a2ec <__ieee754_pow+0x104>
 801a3e2:	a307      	add	r3, pc, #28	; (adr r3, 801a400 <__ieee754_pow+0x218>)
 801a3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3e8:	e795      	b.n	801a316 <__ieee754_pow+0x12e>
 801a3ea:	429c      	cmp	r4, r3
 801a3ec:	dbf7      	blt.n	801a3de <__ieee754_pow+0x1f6>
 801a3ee:	4b09      	ldr	r3, [pc, #36]	; (801a414 <__ieee754_pow+0x22c>)
 801a3f0:	429c      	cmp	r4, r3
 801a3f2:	dd17      	ble.n	801a424 <__ieee754_pow+0x23c>
 801a3f4:	2f00      	cmp	r7, #0
 801a3f6:	dcf4      	bgt.n	801a3e2 <__ieee754_pow+0x1fa>
 801a3f8:	e778      	b.n	801a2ec <__ieee754_pow+0x104>
 801a3fa:	bf00      	nop
 801a3fc:	f3af 8000 	nop.w
 801a400:	8800759c 	.word	0x8800759c
 801a404:	7e37e43c 	.word	0x7e37e43c
 801a408:	7ff00000 	.word	0x7ff00000
 801a40c:	08023367 	.word	0x08023367
 801a410:	433fffff 	.word	0x433fffff
 801a414:	3ff00000 	.word	0x3ff00000
 801a418:	3fefffff 	.word	0x3fefffff
 801a41c:	3fe00000 	.word	0x3fe00000
 801a420:	41e00000 	.word	0x41e00000
 801a424:	4b64      	ldr	r3, [pc, #400]	; (801a5b8 <__ieee754_pow+0x3d0>)
 801a426:	2200      	movs	r2, #0
 801a428:	f7e5 ff4e 	bl	80002c8 <__aeabi_dsub>
 801a42c:	a356      	add	r3, pc, #344	; (adr r3, 801a588 <__ieee754_pow+0x3a0>)
 801a42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a432:	4604      	mov	r4, r0
 801a434:	460d      	mov	r5, r1
 801a436:	f7e6 f8ff 	bl	8000638 <__aeabi_dmul>
 801a43a:	a355      	add	r3, pc, #340	; (adr r3, 801a590 <__ieee754_pow+0x3a8>)
 801a43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a440:	4606      	mov	r6, r0
 801a442:	460f      	mov	r7, r1
 801a444:	4620      	mov	r0, r4
 801a446:	4629      	mov	r1, r5
 801a448:	f7e6 f8f6 	bl	8000638 <__aeabi_dmul>
 801a44c:	4b5b      	ldr	r3, [pc, #364]	; (801a5bc <__ieee754_pow+0x3d4>)
 801a44e:	4682      	mov	sl, r0
 801a450:	468b      	mov	fp, r1
 801a452:	2200      	movs	r2, #0
 801a454:	4620      	mov	r0, r4
 801a456:	4629      	mov	r1, r5
 801a458:	f7e6 f8ee 	bl	8000638 <__aeabi_dmul>
 801a45c:	4602      	mov	r2, r0
 801a45e:	460b      	mov	r3, r1
 801a460:	a14d      	add	r1, pc, #308	; (adr r1, 801a598 <__ieee754_pow+0x3b0>)
 801a462:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a466:	f7e5 ff2f 	bl	80002c8 <__aeabi_dsub>
 801a46a:	4622      	mov	r2, r4
 801a46c:	462b      	mov	r3, r5
 801a46e:	f7e6 f8e3 	bl	8000638 <__aeabi_dmul>
 801a472:	4602      	mov	r2, r0
 801a474:	460b      	mov	r3, r1
 801a476:	2000      	movs	r0, #0
 801a478:	4951      	ldr	r1, [pc, #324]	; (801a5c0 <__ieee754_pow+0x3d8>)
 801a47a:	f7e5 ff25 	bl	80002c8 <__aeabi_dsub>
 801a47e:	4622      	mov	r2, r4
 801a480:	4680      	mov	r8, r0
 801a482:	4689      	mov	r9, r1
 801a484:	462b      	mov	r3, r5
 801a486:	4620      	mov	r0, r4
 801a488:	4629      	mov	r1, r5
 801a48a:	f7e6 f8d5 	bl	8000638 <__aeabi_dmul>
 801a48e:	4602      	mov	r2, r0
 801a490:	460b      	mov	r3, r1
 801a492:	4640      	mov	r0, r8
 801a494:	4649      	mov	r1, r9
 801a496:	f7e6 f8cf 	bl	8000638 <__aeabi_dmul>
 801a49a:	a341      	add	r3, pc, #260	; (adr r3, 801a5a0 <__ieee754_pow+0x3b8>)
 801a49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4a0:	f7e6 f8ca 	bl	8000638 <__aeabi_dmul>
 801a4a4:	4602      	mov	r2, r0
 801a4a6:	460b      	mov	r3, r1
 801a4a8:	4650      	mov	r0, sl
 801a4aa:	4659      	mov	r1, fp
 801a4ac:	f7e5 ff0c 	bl	80002c8 <__aeabi_dsub>
 801a4b0:	4602      	mov	r2, r0
 801a4b2:	460b      	mov	r3, r1
 801a4b4:	4680      	mov	r8, r0
 801a4b6:	4689      	mov	r9, r1
 801a4b8:	4630      	mov	r0, r6
 801a4ba:	4639      	mov	r1, r7
 801a4bc:	f7e5 ff06 	bl	80002cc <__adddf3>
 801a4c0:	2400      	movs	r4, #0
 801a4c2:	4632      	mov	r2, r6
 801a4c4:	463b      	mov	r3, r7
 801a4c6:	4620      	mov	r0, r4
 801a4c8:	460d      	mov	r5, r1
 801a4ca:	f7e5 fefd 	bl	80002c8 <__aeabi_dsub>
 801a4ce:	4602      	mov	r2, r0
 801a4d0:	460b      	mov	r3, r1
 801a4d2:	4640      	mov	r0, r8
 801a4d4:	4649      	mov	r1, r9
 801a4d6:	f7e5 fef7 	bl	80002c8 <__aeabi_dsub>
 801a4da:	9b00      	ldr	r3, [sp, #0]
 801a4dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a4de:	3b01      	subs	r3, #1
 801a4e0:	4313      	orrs	r3, r2
 801a4e2:	4682      	mov	sl, r0
 801a4e4:	468b      	mov	fp, r1
 801a4e6:	f040 81f1 	bne.w	801a8cc <__ieee754_pow+0x6e4>
 801a4ea:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 801a5a8 <__ieee754_pow+0x3c0>
 801a4ee:	eeb0 8a47 	vmov.f32	s16, s14
 801a4f2:	eef0 8a67 	vmov.f32	s17, s15
 801a4f6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801a4fa:	2600      	movs	r6, #0
 801a4fc:	4632      	mov	r2, r6
 801a4fe:	463b      	mov	r3, r7
 801a500:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a504:	f7e5 fee0 	bl	80002c8 <__aeabi_dsub>
 801a508:	4622      	mov	r2, r4
 801a50a:	462b      	mov	r3, r5
 801a50c:	f7e6 f894 	bl	8000638 <__aeabi_dmul>
 801a510:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a514:	4680      	mov	r8, r0
 801a516:	4689      	mov	r9, r1
 801a518:	4650      	mov	r0, sl
 801a51a:	4659      	mov	r1, fp
 801a51c:	f7e6 f88c 	bl	8000638 <__aeabi_dmul>
 801a520:	4602      	mov	r2, r0
 801a522:	460b      	mov	r3, r1
 801a524:	4640      	mov	r0, r8
 801a526:	4649      	mov	r1, r9
 801a528:	f7e5 fed0 	bl	80002cc <__adddf3>
 801a52c:	4632      	mov	r2, r6
 801a52e:	463b      	mov	r3, r7
 801a530:	4680      	mov	r8, r0
 801a532:	4689      	mov	r9, r1
 801a534:	4620      	mov	r0, r4
 801a536:	4629      	mov	r1, r5
 801a538:	f7e6 f87e 	bl	8000638 <__aeabi_dmul>
 801a53c:	460b      	mov	r3, r1
 801a53e:	4604      	mov	r4, r0
 801a540:	460d      	mov	r5, r1
 801a542:	4602      	mov	r2, r0
 801a544:	4649      	mov	r1, r9
 801a546:	4640      	mov	r0, r8
 801a548:	f7e5 fec0 	bl	80002cc <__adddf3>
 801a54c:	4b1d      	ldr	r3, [pc, #116]	; (801a5c4 <__ieee754_pow+0x3dc>)
 801a54e:	4299      	cmp	r1, r3
 801a550:	ec45 4b19 	vmov	d9, r4, r5
 801a554:	4606      	mov	r6, r0
 801a556:	460f      	mov	r7, r1
 801a558:	468b      	mov	fp, r1
 801a55a:	f340 82fe 	ble.w	801ab5a <__ieee754_pow+0x972>
 801a55e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801a562:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801a566:	4303      	orrs	r3, r0
 801a568:	f000 81f0 	beq.w	801a94c <__ieee754_pow+0x764>
 801a56c:	a310      	add	r3, pc, #64	; (adr r3, 801a5b0 <__ieee754_pow+0x3c8>)
 801a56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a572:	ec51 0b18 	vmov	r0, r1, d8
 801a576:	f7e6 f85f 	bl	8000638 <__aeabi_dmul>
 801a57a:	a30d      	add	r3, pc, #52	; (adr r3, 801a5b0 <__ieee754_pow+0x3c8>)
 801a57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a580:	e6cb      	b.n	801a31a <__ieee754_pow+0x132>
 801a582:	bf00      	nop
 801a584:	f3af 8000 	nop.w
 801a588:	60000000 	.word	0x60000000
 801a58c:	3ff71547 	.word	0x3ff71547
 801a590:	f85ddf44 	.word	0xf85ddf44
 801a594:	3e54ae0b 	.word	0x3e54ae0b
 801a598:	55555555 	.word	0x55555555
 801a59c:	3fd55555 	.word	0x3fd55555
 801a5a0:	652b82fe 	.word	0x652b82fe
 801a5a4:	3ff71547 	.word	0x3ff71547
 801a5a8:	00000000 	.word	0x00000000
 801a5ac:	bff00000 	.word	0xbff00000
 801a5b0:	8800759c 	.word	0x8800759c
 801a5b4:	7e37e43c 	.word	0x7e37e43c
 801a5b8:	3ff00000 	.word	0x3ff00000
 801a5bc:	3fd00000 	.word	0x3fd00000
 801a5c0:	3fe00000 	.word	0x3fe00000
 801a5c4:	408fffff 	.word	0x408fffff
 801a5c8:	4bd7      	ldr	r3, [pc, #860]	; (801a928 <__ieee754_pow+0x740>)
 801a5ca:	ea03 0309 	and.w	r3, r3, r9
 801a5ce:	2200      	movs	r2, #0
 801a5d0:	b92b      	cbnz	r3, 801a5de <__ieee754_pow+0x3f6>
 801a5d2:	4bd6      	ldr	r3, [pc, #856]	; (801a92c <__ieee754_pow+0x744>)
 801a5d4:	f7e6 f830 	bl	8000638 <__aeabi_dmul>
 801a5d8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801a5dc:	460c      	mov	r4, r1
 801a5de:	1523      	asrs	r3, r4, #20
 801a5e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a5e4:	4413      	add	r3, r2
 801a5e6:	9309      	str	r3, [sp, #36]	; 0x24
 801a5e8:	4bd1      	ldr	r3, [pc, #836]	; (801a930 <__ieee754_pow+0x748>)
 801a5ea:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801a5ee:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801a5f2:	429c      	cmp	r4, r3
 801a5f4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801a5f8:	dd08      	ble.n	801a60c <__ieee754_pow+0x424>
 801a5fa:	4bce      	ldr	r3, [pc, #824]	; (801a934 <__ieee754_pow+0x74c>)
 801a5fc:	429c      	cmp	r4, r3
 801a5fe:	f340 8163 	ble.w	801a8c8 <__ieee754_pow+0x6e0>
 801a602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a604:	3301      	adds	r3, #1
 801a606:	9309      	str	r3, [sp, #36]	; 0x24
 801a608:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801a60c:	2400      	movs	r4, #0
 801a60e:	00e3      	lsls	r3, r4, #3
 801a610:	930b      	str	r3, [sp, #44]	; 0x2c
 801a612:	4bc9      	ldr	r3, [pc, #804]	; (801a938 <__ieee754_pow+0x750>)
 801a614:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a618:	ed93 7b00 	vldr	d7, [r3]
 801a61c:	4629      	mov	r1, r5
 801a61e:	ec53 2b17 	vmov	r2, r3, d7
 801a622:	eeb0 8a47 	vmov.f32	s16, s14
 801a626:	eef0 8a67 	vmov.f32	s17, s15
 801a62a:	4682      	mov	sl, r0
 801a62c:	f7e5 fe4c 	bl	80002c8 <__aeabi_dsub>
 801a630:	4652      	mov	r2, sl
 801a632:	4606      	mov	r6, r0
 801a634:	460f      	mov	r7, r1
 801a636:	462b      	mov	r3, r5
 801a638:	ec51 0b18 	vmov	r0, r1, d8
 801a63c:	f7e5 fe46 	bl	80002cc <__adddf3>
 801a640:	4602      	mov	r2, r0
 801a642:	460b      	mov	r3, r1
 801a644:	2000      	movs	r0, #0
 801a646:	49bd      	ldr	r1, [pc, #756]	; (801a93c <__ieee754_pow+0x754>)
 801a648:	f7e6 f920 	bl	800088c <__aeabi_ddiv>
 801a64c:	ec41 0b19 	vmov	d9, r0, r1
 801a650:	4602      	mov	r2, r0
 801a652:	460b      	mov	r3, r1
 801a654:	4630      	mov	r0, r6
 801a656:	4639      	mov	r1, r7
 801a658:	f7e5 ffee 	bl	8000638 <__aeabi_dmul>
 801a65c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a660:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a664:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801a668:	2300      	movs	r3, #0
 801a66a:	9304      	str	r3, [sp, #16]
 801a66c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801a670:	46ab      	mov	fp, r5
 801a672:	106d      	asrs	r5, r5, #1
 801a674:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801a678:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801a67c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801a680:	2200      	movs	r2, #0
 801a682:	4640      	mov	r0, r8
 801a684:	4649      	mov	r1, r9
 801a686:	4614      	mov	r4, r2
 801a688:	461d      	mov	r5, r3
 801a68a:	f7e5 ffd5 	bl	8000638 <__aeabi_dmul>
 801a68e:	4602      	mov	r2, r0
 801a690:	460b      	mov	r3, r1
 801a692:	4630      	mov	r0, r6
 801a694:	4639      	mov	r1, r7
 801a696:	f7e5 fe17 	bl	80002c8 <__aeabi_dsub>
 801a69a:	ec53 2b18 	vmov	r2, r3, d8
 801a69e:	4606      	mov	r6, r0
 801a6a0:	460f      	mov	r7, r1
 801a6a2:	4620      	mov	r0, r4
 801a6a4:	4629      	mov	r1, r5
 801a6a6:	f7e5 fe0f 	bl	80002c8 <__aeabi_dsub>
 801a6aa:	4602      	mov	r2, r0
 801a6ac:	460b      	mov	r3, r1
 801a6ae:	4650      	mov	r0, sl
 801a6b0:	4659      	mov	r1, fp
 801a6b2:	f7e5 fe09 	bl	80002c8 <__aeabi_dsub>
 801a6b6:	4642      	mov	r2, r8
 801a6b8:	464b      	mov	r3, r9
 801a6ba:	f7e5 ffbd 	bl	8000638 <__aeabi_dmul>
 801a6be:	4602      	mov	r2, r0
 801a6c0:	460b      	mov	r3, r1
 801a6c2:	4630      	mov	r0, r6
 801a6c4:	4639      	mov	r1, r7
 801a6c6:	f7e5 fdff 	bl	80002c8 <__aeabi_dsub>
 801a6ca:	ec53 2b19 	vmov	r2, r3, d9
 801a6ce:	f7e5 ffb3 	bl	8000638 <__aeabi_dmul>
 801a6d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a6d6:	ec41 0b18 	vmov	d8, r0, r1
 801a6da:	4610      	mov	r0, r2
 801a6dc:	4619      	mov	r1, r3
 801a6de:	f7e5 ffab 	bl	8000638 <__aeabi_dmul>
 801a6e2:	a37d      	add	r3, pc, #500	; (adr r3, 801a8d8 <__ieee754_pow+0x6f0>)
 801a6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6e8:	4604      	mov	r4, r0
 801a6ea:	460d      	mov	r5, r1
 801a6ec:	f7e5 ffa4 	bl	8000638 <__aeabi_dmul>
 801a6f0:	a37b      	add	r3, pc, #492	; (adr r3, 801a8e0 <__ieee754_pow+0x6f8>)
 801a6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6f6:	f7e5 fde9 	bl	80002cc <__adddf3>
 801a6fa:	4622      	mov	r2, r4
 801a6fc:	462b      	mov	r3, r5
 801a6fe:	f7e5 ff9b 	bl	8000638 <__aeabi_dmul>
 801a702:	a379      	add	r3, pc, #484	; (adr r3, 801a8e8 <__ieee754_pow+0x700>)
 801a704:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a708:	f7e5 fde0 	bl	80002cc <__adddf3>
 801a70c:	4622      	mov	r2, r4
 801a70e:	462b      	mov	r3, r5
 801a710:	f7e5 ff92 	bl	8000638 <__aeabi_dmul>
 801a714:	a376      	add	r3, pc, #472	; (adr r3, 801a8f0 <__ieee754_pow+0x708>)
 801a716:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a71a:	f7e5 fdd7 	bl	80002cc <__adddf3>
 801a71e:	4622      	mov	r2, r4
 801a720:	462b      	mov	r3, r5
 801a722:	f7e5 ff89 	bl	8000638 <__aeabi_dmul>
 801a726:	a374      	add	r3, pc, #464	; (adr r3, 801a8f8 <__ieee754_pow+0x710>)
 801a728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a72c:	f7e5 fdce 	bl	80002cc <__adddf3>
 801a730:	4622      	mov	r2, r4
 801a732:	462b      	mov	r3, r5
 801a734:	f7e5 ff80 	bl	8000638 <__aeabi_dmul>
 801a738:	a371      	add	r3, pc, #452	; (adr r3, 801a900 <__ieee754_pow+0x718>)
 801a73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a73e:	f7e5 fdc5 	bl	80002cc <__adddf3>
 801a742:	4622      	mov	r2, r4
 801a744:	4606      	mov	r6, r0
 801a746:	460f      	mov	r7, r1
 801a748:	462b      	mov	r3, r5
 801a74a:	4620      	mov	r0, r4
 801a74c:	4629      	mov	r1, r5
 801a74e:	f7e5 ff73 	bl	8000638 <__aeabi_dmul>
 801a752:	4602      	mov	r2, r0
 801a754:	460b      	mov	r3, r1
 801a756:	4630      	mov	r0, r6
 801a758:	4639      	mov	r1, r7
 801a75a:	f7e5 ff6d 	bl	8000638 <__aeabi_dmul>
 801a75e:	4642      	mov	r2, r8
 801a760:	4604      	mov	r4, r0
 801a762:	460d      	mov	r5, r1
 801a764:	464b      	mov	r3, r9
 801a766:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a76a:	f7e5 fdaf 	bl	80002cc <__adddf3>
 801a76e:	ec53 2b18 	vmov	r2, r3, d8
 801a772:	f7e5 ff61 	bl	8000638 <__aeabi_dmul>
 801a776:	4622      	mov	r2, r4
 801a778:	462b      	mov	r3, r5
 801a77a:	f7e5 fda7 	bl	80002cc <__adddf3>
 801a77e:	4642      	mov	r2, r8
 801a780:	4682      	mov	sl, r0
 801a782:	468b      	mov	fp, r1
 801a784:	464b      	mov	r3, r9
 801a786:	4640      	mov	r0, r8
 801a788:	4649      	mov	r1, r9
 801a78a:	f7e5 ff55 	bl	8000638 <__aeabi_dmul>
 801a78e:	4b6c      	ldr	r3, [pc, #432]	; (801a940 <__ieee754_pow+0x758>)
 801a790:	2200      	movs	r2, #0
 801a792:	4606      	mov	r6, r0
 801a794:	460f      	mov	r7, r1
 801a796:	f7e5 fd99 	bl	80002cc <__adddf3>
 801a79a:	4652      	mov	r2, sl
 801a79c:	465b      	mov	r3, fp
 801a79e:	f7e5 fd95 	bl	80002cc <__adddf3>
 801a7a2:	9c04      	ldr	r4, [sp, #16]
 801a7a4:	460d      	mov	r5, r1
 801a7a6:	4622      	mov	r2, r4
 801a7a8:	460b      	mov	r3, r1
 801a7aa:	4640      	mov	r0, r8
 801a7ac:	4649      	mov	r1, r9
 801a7ae:	f7e5 ff43 	bl	8000638 <__aeabi_dmul>
 801a7b2:	4b63      	ldr	r3, [pc, #396]	; (801a940 <__ieee754_pow+0x758>)
 801a7b4:	4680      	mov	r8, r0
 801a7b6:	4689      	mov	r9, r1
 801a7b8:	2200      	movs	r2, #0
 801a7ba:	4620      	mov	r0, r4
 801a7bc:	4629      	mov	r1, r5
 801a7be:	f7e5 fd83 	bl	80002c8 <__aeabi_dsub>
 801a7c2:	4632      	mov	r2, r6
 801a7c4:	463b      	mov	r3, r7
 801a7c6:	f7e5 fd7f 	bl	80002c8 <__aeabi_dsub>
 801a7ca:	4602      	mov	r2, r0
 801a7cc:	460b      	mov	r3, r1
 801a7ce:	4650      	mov	r0, sl
 801a7d0:	4659      	mov	r1, fp
 801a7d2:	f7e5 fd79 	bl	80002c8 <__aeabi_dsub>
 801a7d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a7da:	f7e5 ff2d 	bl	8000638 <__aeabi_dmul>
 801a7de:	4622      	mov	r2, r4
 801a7e0:	4606      	mov	r6, r0
 801a7e2:	460f      	mov	r7, r1
 801a7e4:	462b      	mov	r3, r5
 801a7e6:	ec51 0b18 	vmov	r0, r1, d8
 801a7ea:	f7e5 ff25 	bl	8000638 <__aeabi_dmul>
 801a7ee:	4602      	mov	r2, r0
 801a7f0:	460b      	mov	r3, r1
 801a7f2:	4630      	mov	r0, r6
 801a7f4:	4639      	mov	r1, r7
 801a7f6:	f7e5 fd69 	bl	80002cc <__adddf3>
 801a7fa:	4606      	mov	r6, r0
 801a7fc:	460f      	mov	r7, r1
 801a7fe:	4602      	mov	r2, r0
 801a800:	460b      	mov	r3, r1
 801a802:	4640      	mov	r0, r8
 801a804:	4649      	mov	r1, r9
 801a806:	f7e5 fd61 	bl	80002cc <__adddf3>
 801a80a:	9c04      	ldr	r4, [sp, #16]
 801a80c:	a33e      	add	r3, pc, #248	; (adr r3, 801a908 <__ieee754_pow+0x720>)
 801a80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a812:	4620      	mov	r0, r4
 801a814:	460d      	mov	r5, r1
 801a816:	f7e5 ff0f 	bl	8000638 <__aeabi_dmul>
 801a81a:	4642      	mov	r2, r8
 801a81c:	ec41 0b18 	vmov	d8, r0, r1
 801a820:	464b      	mov	r3, r9
 801a822:	4620      	mov	r0, r4
 801a824:	4629      	mov	r1, r5
 801a826:	f7e5 fd4f 	bl	80002c8 <__aeabi_dsub>
 801a82a:	4602      	mov	r2, r0
 801a82c:	460b      	mov	r3, r1
 801a82e:	4630      	mov	r0, r6
 801a830:	4639      	mov	r1, r7
 801a832:	f7e5 fd49 	bl	80002c8 <__aeabi_dsub>
 801a836:	a336      	add	r3, pc, #216	; (adr r3, 801a910 <__ieee754_pow+0x728>)
 801a838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a83c:	f7e5 fefc 	bl	8000638 <__aeabi_dmul>
 801a840:	a335      	add	r3, pc, #212	; (adr r3, 801a918 <__ieee754_pow+0x730>)
 801a842:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a846:	4606      	mov	r6, r0
 801a848:	460f      	mov	r7, r1
 801a84a:	4620      	mov	r0, r4
 801a84c:	4629      	mov	r1, r5
 801a84e:	f7e5 fef3 	bl	8000638 <__aeabi_dmul>
 801a852:	4602      	mov	r2, r0
 801a854:	460b      	mov	r3, r1
 801a856:	4630      	mov	r0, r6
 801a858:	4639      	mov	r1, r7
 801a85a:	f7e5 fd37 	bl	80002cc <__adddf3>
 801a85e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a860:	4b38      	ldr	r3, [pc, #224]	; (801a944 <__ieee754_pow+0x75c>)
 801a862:	4413      	add	r3, r2
 801a864:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a868:	f7e5 fd30 	bl	80002cc <__adddf3>
 801a86c:	4682      	mov	sl, r0
 801a86e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a870:	468b      	mov	fp, r1
 801a872:	f7e5 fe77 	bl	8000564 <__aeabi_i2d>
 801a876:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a878:	4b33      	ldr	r3, [pc, #204]	; (801a948 <__ieee754_pow+0x760>)
 801a87a:	4413      	add	r3, r2
 801a87c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a880:	4606      	mov	r6, r0
 801a882:	460f      	mov	r7, r1
 801a884:	4652      	mov	r2, sl
 801a886:	465b      	mov	r3, fp
 801a888:	ec51 0b18 	vmov	r0, r1, d8
 801a88c:	f7e5 fd1e 	bl	80002cc <__adddf3>
 801a890:	4642      	mov	r2, r8
 801a892:	464b      	mov	r3, r9
 801a894:	f7e5 fd1a 	bl	80002cc <__adddf3>
 801a898:	4632      	mov	r2, r6
 801a89a:	463b      	mov	r3, r7
 801a89c:	f7e5 fd16 	bl	80002cc <__adddf3>
 801a8a0:	9c04      	ldr	r4, [sp, #16]
 801a8a2:	4632      	mov	r2, r6
 801a8a4:	463b      	mov	r3, r7
 801a8a6:	4620      	mov	r0, r4
 801a8a8:	460d      	mov	r5, r1
 801a8aa:	f7e5 fd0d 	bl	80002c8 <__aeabi_dsub>
 801a8ae:	4642      	mov	r2, r8
 801a8b0:	464b      	mov	r3, r9
 801a8b2:	f7e5 fd09 	bl	80002c8 <__aeabi_dsub>
 801a8b6:	ec53 2b18 	vmov	r2, r3, d8
 801a8ba:	f7e5 fd05 	bl	80002c8 <__aeabi_dsub>
 801a8be:	4602      	mov	r2, r0
 801a8c0:	460b      	mov	r3, r1
 801a8c2:	4650      	mov	r0, sl
 801a8c4:	4659      	mov	r1, fp
 801a8c6:	e606      	b.n	801a4d6 <__ieee754_pow+0x2ee>
 801a8c8:	2401      	movs	r4, #1
 801a8ca:	e6a0      	b.n	801a60e <__ieee754_pow+0x426>
 801a8cc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801a920 <__ieee754_pow+0x738>
 801a8d0:	e60d      	b.n	801a4ee <__ieee754_pow+0x306>
 801a8d2:	bf00      	nop
 801a8d4:	f3af 8000 	nop.w
 801a8d8:	4a454eef 	.word	0x4a454eef
 801a8dc:	3fca7e28 	.word	0x3fca7e28
 801a8e0:	93c9db65 	.word	0x93c9db65
 801a8e4:	3fcd864a 	.word	0x3fcd864a
 801a8e8:	a91d4101 	.word	0xa91d4101
 801a8ec:	3fd17460 	.word	0x3fd17460
 801a8f0:	518f264d 	.word	0x518f264d
 801a8f4:	3fd55555 	.word	0x3fd55555
 801a8f8:	db6fabff 	.word	0xdb6fabff
 801a8fc:	3fdb6db6 	.word	0x3fdb6db6
 801a900:	33333303 	.word	0x33333303
 801a904:	3fe33333 	.word	0x3fe33333
 801a908:	e0000000 	.word	0xe0000000
 801a90c:	3feec709 	.word	0x3feec709
 801a910:	dc3a03fd 	.word	0xdc3a03fd
 801a914:	3feec709 	.word	0x3feec709
 801a918:	145b01f5 	.word	0x145b01f5
 801a91c:	be3e2fe0 	.word	0xbe3e2fe0
 801a920:	00000000 	.word	0x00000000
 801a924:	3ff00000 	.word	0x3ff00000
 801a928:	7ff00000 	.word	0x7ff00000
 801a92c:	43400000 	.word	0x43400000
 801a930:	0003988e 	.word	0x0003988e
 801a934:	000bb679 	.word	0x000bb679
 801a938:	08022f88 	.word	0x08022f88
 801a93c:	3ff00000 	.word	0x3ff00000
 801a940:	40080000 	.word	0x40080000
 801a944:	08022fa8 	.word	0x08022fa8
 801a948:	08022f98 	.word	0x08022f98
 801a94c:	a3b5      	add	r3, pc, #724	; (adr r3, 801ac24 <__ieee754_pow+0xa3c>)
 801a94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a952:	4640      	mov	r0, r8
 801a954:	4649      	mov	r1, r9
 801a956:	f7e5 fcb9 	bl	80002cc <__adddf3>
 801a95a:	4622      	mov	r2, r4
 801a95c:	ec41 0b1a 	vmov	d10, r0, r1
 801a960:	462b      	mov	r3, r5
 801a962:	4630      	mov	r0, r6
 801a964:	4639      	mov	r1, r7
 801a966:	f7e5 fcaf 	bl	80002c8 <__aeabi_dsub>
 801a96a:	4602      	mov	r2, r0
 801a96c:	460b      	mov	r3, r1
 801a96e:	ec51 0b1a 	vmov	r0, r1, d10
 801a972:	f7e6 f8f1 	bl	8000b58 <__aeabi_dcmpgt>
 801a976:	2800      	cmp	r0, #0
 801a978:	f47f adf8 	bne.w	801a56c <__ieee754_pow+0x384>
 801a97c:	4aa4      	ldr	r2, [pc, #656]	; (801ac10 <__ieee754_pow+0xa28>)
 801a97e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801a982:	4293      	cmp	r3, r2
 801a984:	f340 810b 	ble.w	801ab9e <__ieee754_pow+0x9b6>
 801a988:	151b      	asrs	r3, r3, #20
 801a98a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801a98e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801a992:	fa4a f303 	asr.w	r3, sl, r3
 801a996:	445b      	add	r3, fp
 801a998:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801a99c:	4e9d      	ldr	r6, [pc, #628]	; (801ac14 <__ieee754_pow+0xa2c>)
 801a99e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801a9a2:	4116      	asrs	r6, r2
 801a9a4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801a9a8:	2000      	movs	r0, #0
 801a9aa:	ea23 0106 	bic.w	r1, r3, r6
 801a9ae:	f1c2 0214 	rsb	r2, r2, #20
 801a9b2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801a9b6:	fa4a fa02 	asr.w	sl, sl, r2
 801a9ba:	f1bb 0f00 	cmp.w	fp, #0
 801a9be:	4602      	mov	r2, r0
 801a9c0:	460b      	mov	r3, r1
 801a9c2:	4620      	mov	r0, r4
 801a9c4:	4629      	mov	r1, r5
 801a9c6:	bfb8      	it	lt
 801a9c8:	f1ca 0a00 	rsblt	sl, sl, #0
 801a9cc:	f7e5 fc7c 	bl	80002c8 <__aeabi_dsub>
 801a9d0:	ec41 0b19 	vmov	d9, r0, r1
 801a9d4:	4642      	mov	r2, r8
 801a9d6:	464b      	mov	r3, r9
 801a9d8:	ec51 0b19 	vmov	r0, r1, d9
 801a9dc:	f7e5 fc76 	bl	80002cc <__adddf3>
 801a9e0:	2400      	movs	r4, #0
 801a9e2:	a379      	add	r3, pc, #484	; (adr r3, 801abc8 <__ieee754_pow+0x9e0>)
 801a9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9e8:	4620      	mov	r0, r4
 801a9ea:	460d      	mov	r5, r1
 801a9ec:	f7e5 fe24 	bl	8000638 <__aeabi_dmul>
 801a9f0:	ec53 2b19 	vmov	r2, r3, d9
 801a9f4:	4606      	mov	r6, r0
 801a9f6:	460f      	mov	r7, r1
 801a9f8:	4620      	mov	r0, r4
 801a9fa:	4629      	mov	r1, r5
 801a9fc:	f7e5 fc64 	bl	80002c8 <__aeabi_dsub>
 801aa00:	4602      	mov	r2, r0
 801aa02:	460b      	mov	r3, r1
 801aa04:	4640      	mov	r0, r8
 801aa06:	4649      	mov	r1, r9
 801aa08:	f7e5 fc5e 	bl	80002c8 <__aeabi_dsub>
 801aa0c:	a370      	add	r3, pc, #448	; (adr r3, 801abd0 <__ieee754_pow+0x9e8>)
 801aa0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa12:	f7e5 fe11 	bl	8000638 <__aeabi_dmul>
 801aa16:	a370      	add	r3, pc, #448	; (adr r3, 801abd8 <__ieee754_pow+0x9f0>)
 801aa18:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa1c:	4680      	mov	r8, r0
 801aa1e:	4689      	mov	r9, r1
 801aa20:	4620      	mov	r0, r4
 801aa22:	4629      	mov	r1, r5
 801aa24:	f7e5 fe08 	bl	8000638 <__aeabi_dmul>
 801aa28:	4602      	mov	r2, r0
 801aa2a:	460b      	mov	r3, r1
 801aa2c:	4640      	mov	r0, r8
 801aa2e:	4649      	mov	r1, r9
 801aa30:	f7e5 fc4c 	bl	80002cc <__adddf3>
 801aa34:	4604      	mov	r4, r0
 801aa36:	460d      	mov	r5, r1
 801aa38:	4602      	mov	r2, r0
 801aa3a:	460b      	mov	r3, r1
 801aa3c:	4630      	mov	r0, r6
 801aa3e:	4639      	mov	r1, r7
 801aa40:	f7e5 fc44 	bl	80002cc <__adddf3>
 801aa44:	4632      	mov	r2, r6
 801aa46:	463b      	mov	r3, r7
 801aa48:	4680      	mov	r8, r0
 801aa4a:	4689      	mov	r9, r1
 801aa4c:	f7e5 fc3c 	bl	80002c8 <__aeabi_dsub>
 801aa50:	4602      	mov	r2, r0
 801aa52:	460b      	mov	r3, r1
 801aa54:	4620      	mov	r0, r4
 801aa56:	4629      	mov	r1, r5
 801aa58:	f7e5 fc36 	bl	80002c8 <__aeabi_dsub>
 801aa5c:	4642      	mov	r2, r8
 801aa5e:	4606      	mov	r6, r0
 801aa60:	460f      	mov	r7, r1
 801aa62:	464b      	mov	r3, r9
 801aa64:	4640      	mov	r0, r8
 801aa66:	4649      	mov	r1, r9
 801aa68:	f7e5 fde6 	bl	8000638 <__aeabi_dmul>
 801aa6c:	a35c      	add	r3, pc, #368	; (adr r3, 801abe0 <__ieee754_pow+0x9f8>)
 801aa6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa72:	4604      	mov	r4, r0
 801aa74:	460d      	mov	r5, r1
 801aa76:	f7e5 fddf 	bl	8000638 <__aeabi_dmul>
 801aa7a:	a35b      	add	r3, pc, #364	; (adr r3, 801abe8 <__ieee754_pow+0xa00>)
 801aa7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa80:	f7e5 fc22 	bl	80002c8 <__aeabi_dsub>
 801aa84:	4622      	mov	r2, r4
 801aa86:	462b      	mov	r3, r5
 801aa88:	f7e5 fdd6 	bl	8000638 <__aeabi_dmul>
 801aa8c:	a358      	add	r3, pc, #352	; (adr r3, 801abf0 <__ieee754_pow+0xa08>)
 801aa8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa92:	f7e5 fc1b 	bl	80002cc <__adddf3>
 801aa96:	4622      	mov	r2, r4
 801aa98:	462b      	mov	r3, r5
 801aa9a:	f7e5 fdcd 	bl	8000638 <__aeabi_dmul>
 801aa9e:	a356      	add	r3, pc, #344	; (adr r3, 801abf8 <__ieee754_pow+0xa10>)
 801aaa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aaa4:	f7e5 fc10 	bl	80002c8 <__aeabi_dsub>
 801aaa8:	4622      	mov	r2, r4
 801aaaa:	462b      	mov	r3, r5
 801aaac:	f7e5 fdc4 	bl	8000638 <__aeabi_dmul>
 801aab0:	a353      	add	r3, pc, #332	; (adr r3, 801ac00 <__ieee754_pow+0xa18>)
 801aab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aab6:	f7e5 fc09 	bl	80002cc <__adddf3>
 801aaba:	4622      	mov	r2, r4
 801aabc:	462b      	mov	r3, r5
 801aabe:	f7e5 fdbb 	bl	8000638 <__aeabi_dmul>
 801aac2:	4602      	mov	r2, r0
 801aac4:	460b      	mov	r3, r1
 801aac6:	4640      	mov	r0, r8
 801aac8:	4649      	mov	r1, r9
 801aaca:	f7e5 fbfd 	bl	80002c8 <__aeabi_dsub>
 801aace:	4604      	mov	r4, r0
 801aad0:	460d      	mov	r5, r1
 801aad2:	4602      	mov	r2, r0
 801aad4:	460b      	mov	r3, r1
 801aad6:	4640      	mov	r0, r8
 801aad8:	4649      	mov	r1, r9
 801aada:	f7e5 fdad 	bl	8000638 <__aeabi_dmul>
 801aade:	2200      	movs	r2, #0
 801aae0:	ec41 0b19 	vmov	d9, r0, r1
 801aae4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801aae8:	4620      	mov	r0, r4
 801aaea:	4629      	mov	r1, r5
 801aaec:	f7e5 fbec 	bl	80002c8 <__aeabi_dsub>
 801aaf0:	4602      	mov	r2, r0
 801aaf2:	460b      	mov	r3, r1
 801aaf4:	ec51 0b19 	vmov	r0, r1, d9
 801aaf8:	f7e5 fec8 	bl	800088c <__aeabi_ddiv>
 801aafc:	4632      	mov	r2, r6
 801aafe:	4604      	mov	r4, r0
 801ab00:	460d      	mov	r5, r1
 801ab02:	463b      	mov	r3, r7
 801ab04:	4640      	mov	r0, r8
 801ab06:	4649      	mov	r1, r9
 801ab08:	f7e5 fd96 	bl	8000638 <__aeabi_dmul>
 801ab0c:	4632      	mov	r2, r6
 801ab0e:	463b      	mov	r3, r7
 801ab10:	f7e5 fbdc 	bl	80002cc <__adddf3>
 801ab14:	4602      	mov	r2, r0
 801ab16:	460b      	mov	r3, r1
 801ab18:	4620      	mov	r0, r4
 801ab1a:	4629      	mov	r1, r5
 801ab1c:	f7e5 fbd4 	bl	80002c8 <__aeabi_dsub>
 801ab20:	4642      	mov	r2, r8
 801ab22:	464b      	mov	r3, r9
 801ab24:	f7e5 fbd0 	bl	80002c8 <__aeabi_dsub>
 801ab28:	460b      	mov	r3, r1
 801ab2a:	4602      	mov	r2, r0
 801ab2c:	493a      	ldr	r1, [pc, #232]	; (801ac18 <__ieee754_pow+0xa30>)
 801ab2e:	2000      	movs	r0, #0
 801ab30:	f7e5 fbca 	bl	80002c8 <__aeabi_dsub>
 801ab34:	e9cd 0100 	strd	r0, r1, [sp]
 801ab38:	9b01      	ldr	r3, [sp, #4]
 801ab3a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801ab3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801ab42:	da2f      	bge.n	801aba4 <__ieee754_pow+0x9bc>
 801ab44:	4650      	mov	r0, sl
 801ab46:	ed9d 0b00 	vldr	d0, [sp]
 801ab4a:	f000 f9cd 	bl	801aee8 <scalbn>
 801ab4e:	ec51 0b10 	vmov	r0, r1, d0
 801ab52:	ec53 2b18 	vmov	r2, r3, d8
 801ab56:	f7ff bbe0 	b.w	801a31a <__ieee754_pow+0x132>
 801ab5a:	4b30      	ldr	r3, [pc, #192]	; (801ac1c <__ieee754_pow+0xa34>)
 801ab5c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801ab60:	429e      	cmp	r6, r3
 801ab62:	f77f af0b 	ble.w	801a97c <__ieee754_pow+0x794>
 801ab66:	4b2e      	ldr	r3, [pc, #184]	; (801ac20 <__ieee754_pow+0xa38>)
 801ab68:	440b      	add	r3, r1
 801ab6a:	4303      	orrs	r3, r0
 801ab6c:	d00b      	beq.n	801ab86 <__ieee754_pow+0x99e>
 801ab6e:	a326      	add	r3, pc, #152	; (adr r3, 801ac08 <__ieee754_pow+0xa20>)
 801ab70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab74:	ec51 0b18 	vmov	r0, r1, d8
 801ab78:	f7e5 fd5e 	bl	8000638 <__aeabi_dmul>
 801ab7c:	a322      	add	r3, pc, #136	; (adr r3, 801ac08 <__ieee754_pow+0xa20>)
 801ab7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab82:	f7ff bbca 	b.w	801a31a <__ieee754_pow+0x132>
 801ab86:	4622      	mov	r2, r4
 801ab88:	462b      	mov	r3, r5
 801ab8a:	f7e5 fb9d 	bl	80002c8 <__aeabi_dsub>
 801ab8e:	4642      	mov	r2, r8
 801ab90:	464b      	mov	r3, r9
 801ab92:	f7e5 ffd7 	bl	8000b44 <__aeabi_dcmpge>
 801ab96:	2800      	cmp	r0, #0
 801ab98:	f43f aef0 	beq.w	801a97c <__ieee754_pow+0x794>
 801ab9c:	e7e7      	b.n	801ab6e <__ieee754_pow+0x986>
 801ab9e:	f04f 0a00 	mov.w	sl, #0
 801aba2:	e717      	b.n	801a9d4 <__ieee754_pow+0x7ec>
 801aba4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801aba8:	4619      	mov	r1, r3
 801abaa:	e7d2      	b.n	801ab52 <__ieee754_pow+0x96a>
 801abac:	491a      	ldr	r1, [pc, #104]	; (801ac18 <__ieee754_pow+0xa30>)
 801abae:	2000      	movs	r0, #0
 801abb0:	f7ff bb9e 	b.w	801a2f0 <__ieee754_pow+0x108>
 801abb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801abb8:	f7ff bb9a 	b.w	801a2f0 <__ieee754_pow+0x108>
 801abbc:	9000      	str	r0, [sp, #0]
 801abbe:	f7ff bb76 	b.w	801a2ae <__ieee754_pow+0xc6>
 801abc2:	2100      	movs	r1, #0
 801abc4:	f7ff bb60 	b.w	801a288 <__ieee754_pow+0xa0>
 801abc8:	00000000 	.word	0x00000000
 801abcc:	3fe62e43 	.word	0x3fe62e43
 801abd0:	fefa39ef 	.word	0xfefa39ef
 801abd4:	3fe62e42 	.word	0x3fe62e42
 801abd8:	0ca86c39 	.word	0x0ca86c39
 801abdc:	be205c61 	.word	0xbe205c61
 801abe0:	72bea4d0 	.word	0x72bea4d0
 801abe4:	3e663769 	.word	0x3e663769
 801abe8:	c5d26bf1 	.word	0xc5d26bf1
 801abec:	3ebbbd41 	.word	0x3ebbbd41
 801abf0:	af25de2c 	.word	0xaf25de2c
 801abf4:	3f11566a 	.word	0x3f11566a
 801abf8:	16bebd93 	.word	0x16bebd93
 801abfc:	3f66c16c 	.word	0x3f66c16c
 801ac00:	5555553e 	.word	0x5555553e
 801ac04:	3fc55555 	.word	0x3fc55555
 801ac08:	c2f8f359 	.word	0xc2f8f359
 801ac0c:	01a56e1f 	.word	0x01a56e1f
 801ac10:	3fe00000 	.word	0x3fe00000
 801ac14:	000fffff 	.word	0x000fffff
 801ac18:	3ff00000 	.word	0x3ff00000
 801ac1c:	4090cbff 	.word	0x4090cbff
 801ac20:	3f6f3400 	.word	0x3f6f3400
 801ac24:	652b82fe 	.word	0x652b82fe
 801ac28:	3c971547 	.word	0x3c971547

0801ac2c <__ieee754_sqrt>:
 801ac2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac30:	ec55 4b10 	vmov	r4, r5, d0
 801ac34:	4e56      	ldr	r6, [pc, #344]	; (801ad90 <__ieee754_sqrt+0x164>)
 801ac36:	43ae      	bics	r6, r5
 801ac38:	ee10 0a10 	vmov	r0, s0
 801ac3c:	ee10 3a10 	vmov	r3, s0
 801ac40:	4629      	mov	r1, r5
 801ac42:	462a      	mov	r2, r5
 801ac44:	d110      	bne.n	801ac68 <__ieee754_sqrt+0x3c>
 801ac46:	ee10 2a10 	vmov	r2, s0
 801ac4a:	462b      	mov	r3, r5
 801ac4c:	f7e5 fcf4 	bl	8000638 <__aeabi_dmul>
 801ac50:	4602      	mov	r2, r0
 801ac52:	460b      	mov	r3, r1
 801ac54:	4620      	mov	r0, r4
 801ac56:	4629      	mov	r1, r5
 801ac58:	f7e5 fb38 	bl	80002cc <__adddf3>
 801ac5c:	4604      	mov	r4, r0
 801ac5e:	460d      	mov	r5, r1
 801ac60:	ec45 4b10 	vmov	d0, r4, r5
 801ac64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ac68:	2d00      	cmp	r5, #0
 801ac6a:	dc10      	bgt.n	801ac8e <__ieee754_sqrt+0x62>
 801ac6c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801ac70:	4330      	orrs	r0, r6
 801ac72:	d0f5      	beq.n	801ac60 <__ieee754_sqrt+0x34>
 801ac74:	b15d      	cbz	r5, 801ac8e <__ieee754_sqrt+0x62>
 801ac76:	ee10 2a10 	vmov	r2, s0
 801ac7a:	462b      	mov	r3, r5
 801ac7c:	ee10 0a10 	vmov	r0, s0
 801ac80:	f7e5 fb22 	bl	80002c8 <__aeabi_dsub>
 801ac84:	4602      	mov	r2, r0
 801ac86:	460b      	mov	r3, r1
 801ac88:	f7e5 fe00 	bl	800088c <__aeabi_ddiv>
 801ac8c:	e7e6      	b.n	801ac5c <__ieee754_sqrt+0x30>
 801ac8e:	1509      	asrs	r1, r1, #20
 801ac90:	d076      	beq.n	801ad80 <__ieee754_sqrt+0x154>
 801ac92:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801ac96:	07ce      	lsls	r6, r1, #31
 801ac98:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801ac9c:	bf5e      	ittt	pl
 801ac9e:	0fda      	lsrpl	r2, r3, #31
 801aca0:	005b      	lslpl	r3, r3, #1
 801aca2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801aca6:	0fda      	lsrs	r2, r3, #31
 801aca8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801acac:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801acb0:	2000      	movs	r0, #0
 801acb2:	106d      	asrs	r5, r5, #1
 801acb4:	005b      	lsls	r3, r3, #1
 801acb6:	f04f 0e16 	mov.w	lr, #22
 801acba:	4684      	mov	ip, r0
 801acbc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801acc0:	eb0c 0401 	add.w	r4, ip, r1
 801acc4:	4294      	cmp	r4, r2
 801acc6:	bfde      	ittt	le
 801acc8:	1b12      	suble	r2, r2, r4
 801acca:	eb04 0c01 	addle.w	ip, r4, r1
 801acce:	1840      	addle	r0, r0, r1
 801acd0:	0052      	lsls	r2, r2, #1
 801acd2:	f1be 0e01 	subs.w	lr, lr, #1
 801acd6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801acda:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801acde:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ace2:	d1ed      	bne.n	801acc0 <__ieee754_sqrt+0x94>
 801ace4:	4671      	mov	r1, lr
 801ace6:	2720      	movs	r7, #32
 801ace8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801acec:	4562      	cmp	r2, ip
 801acee:	eb04 060e 	add.w	r6, r4, lr
 801acf2:	dc02      	bgt.n	801acfa <__ieee754_sqrt+0xce>
 801acf4:	d113      	bne.n	801ad1e <__ieee754_sqrt+0xf2>
 801acf6:	429e      	cmp	r6, r3
 801acf8:	d811      	bhi.n	801ad1e <__ieee754_sqrt+0xf2>
 801acfa:	2e00      	cmp	r6, #0
 801acfc:	eb06 0e04 	add.w	lr, r6, r4
 801ad00:	da43      	bge.n	801ad8a <__ieee754_sqrt+0x15e>
 801ad02:	f1be 0f00 	cmp.w	lr, #0
 801ad06:	db40      	blt.n	801ad8a <__ieee754_sqrt+0x15e>
 801ad08:	f10c 0801 	add.w	r8, ip, #1
 801ad0c:	eba2 020c 	sub.w	r2, r2, ip
 801ad10:	429e      	cmp	r6, r3
 801ad12:	bf88      	it	hi
 801ad14:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801ad18:	1b9b      	subs	r3, r3, r6
 801ad1a:	4421      	add	r1, r4
 801ad1c:	46c4      	mov	ip, r8
 801ad1e:	0052      	lsls	r2, r2, #1
 801ad20:	3f01      	subs	r7, #1
 801ad22:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801ad26:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801ad2a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ad2e:	d1dd      	bne.n	801acec <__ieee754_sqrt+0xc0>
 801ad30:	4313      	orrs	r3, r2
 801ad32:	d006      	beq.n	801ad42 <__ieee754_sqrt+0x116>
 801ad34:	1c4c      	adds	r4, r1, #1
 801ad36:	bf13      	iteet	ne
 801ad38:	3101      	addne	r1, #1
 801ad3a:	3001      	addeq	r0, #1
 801ad3c:	4639      	moveq	r1, r7
 801ad3e:	f021 0101 	bicne.w	r1, r1, #1
 801ad42:	1043      	asrs	r3, r0, #1
 801ad44:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801ad48:	0849      	lsrs	r1, r1, #1
 801ad4a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801ad4e:	07c2      	lsls	r2, r0, #31
 801ad50:	bf48      	it	mi
 801ad52:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801ad56:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801ad5a:	460c      	mov	r4, r1
 801ad5c:	463d      	mov	r5, r7
 801ad5e:	e77f      	b.n	801ac60 <__ieee754_sqrt+0x34>
 801ad60:	0ada      	lsrs	r2, r3, #11
 801ad62:	3815      	subs	r0, #21
 801ad64:	055b      	lsls	r3, r3, #21
 801ad66:	2a00      	cmp	r2, #0
 801ad68:	d0fa      	beq.n	801ad60 <__ieee754_sqrt+0x134>
 801ad6a:	02d7      	lsls	r7, r2, #11
 801ad6c:	d50a      	bpl.n	801ad84 <__ieee754_sqrt+0x158>
 801ad6e:	f1c1 0420 	rsb	r4, r1, #32
 801ad72:	fa23 f404 	lsr.w	r4, r3, r4
 801ad76:	1e4d      	subs	r5, r1, #1
 801ad78:	408b      	lsls	r3, r1
 801ad7a:	4322      	orrs	r2, r4
 801ad7c:	1b41      	subs	r1, r0, r5
 801ad7e:	e788      	b.n	801ac92 <__ieee754_sqrt+0x66>
 801ad80:	4608      	mov	r0, r1
 801ad82:	e7f0      	b.n	801ad66 <__ieee754_sqrt+0x13a>
 801ad84:	0052      	lsls	r2, r2, #1
 801ad86:	3101      	adds	r1, #1
 801ad88:	e7ef      	b.n	801ad6a <__ieee754_sqrt+0x13e>
 801ad8a:	46e0      	mov	r8, ip
 801ad8c:	e7be      	b.n	801ad0c <__ieee754_sqrt+0xe0>
 801ad8e:	bf00      	nop
 801ad90:	7ff00000 	.word	0x7ff00000

0801ad94 <fabs>:
 801ad94:	ec51 0b10 	vmov	r0, r1, d0
 801ad98:	ee10 2a10 	vmov	r2, s0
 801ad9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ada0:	ec43 2b10 	vmov	d0, r2, r3
 801ada4:	4770      	bx	lr

0801ada6 <finite>:
 801ada6:	b082      	sub	sp, #8
 801ada8:	ed8d 0b00 	vstr	d0, [sp]
 801adac:	9801      	ldr	r0, [sp, #4]
 801adae:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801adb2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801adb6:	0fc0      	lsrs	r0, r0, #31
 801adb8:	b002      	add	sp, #8
 801adba:	4770      	bx	lr
 801adbc:	0000      	movs	r0, r0
	...

0801adc0 <nan>:
 801adc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801adc8 <nan+0x8>
 801adc4:	4770      	bx	lr
 801adc6:	bf00      	nop
 801adc8:	00000000 	.word	0x00000000
 801adcc:	7ff80000 	.word	0x7ff80000

0801add0 <rint>:
 801add0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801add2:	ec51 0b10 	vmov	r0, r1, d0
 801add6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801adda:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801adde:	2e13      	cmp	r6, #19
 801ade0:	ee10 4a10 	vmov	r4, s0
 801ade4:	460b      	mov	r3, r1
 801ade6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801adea:	dc58      	bgt.n	801ae9e <rint+0xce>
 801adec:	2e00      	cmp	r6, #0
 801adee:	da2b      	bge.n	801ae48 <rint+0x78>
 801adf0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801adf4:	4302      	orrs	r2, r0
 801adf6:	d023      	beq.n	801ae40 <rint+0x70>
 801adf8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801adfc:	4302      	orrs	r2, r0
 801adfe:	4254      	negs	r4, r2
 801ae00:	4314      	orrs	r4, r2
 801ae02:	0c4b      	lsrs	r3, r1, #17
 801ae04:	0b24      	lsrs	r4, r4, #12
 801ae06:	045b      	lsls	r3, r3, #17
 801ae08:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801ae0c:	ea44 0103 	orr.w	r1, r4, r3
 801ae10:	4b32      	ldr	r3, [pc, #200]	; (801aedc <rint+0x10c>)
 801ae12:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801ae16:	e9d3 6700 	ldrd	r6, r7, [r3]
 801ae1a:	4602      	mov	r2, r0
 801ae1c:	460b      	mov	r3, r1
 801ae1e:	4630      	mov	r0, r6
 801ae20:	4639      	mov	r1, r7
 801ae22:	f7e5 fa53 	bl	80002cc <__adddf3>
 801ae26:	e9cd 0100 	strd	r0, r1, [sp]
 801ae2a:	463b      	mov	r3, r7
 801ae2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ae30:	4632      	mov	r2, r6
 801ae32:	f7e5 fa49 	bl	80002c8 <__aeabi_dsub>
 801ae36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ae3a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801ae3e:	4639      	mov	r1, r7
 801ae40:	ec41 0b10 	vmov	d0, r0, r1
 801ae44:	b003      	add	sp, #12
 801ae46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ae48:	4a25      	ldr	r2, [pc, #148]	; (801aee0 <rint+0x110>)
 801ae4a:	4132      	asrs	r2, r6
 801ae4c:	ea01 0702 	and.w	r7, r1, r2
 801ae50:	4307      	orrs	r7, r0
 801ae52:	d0f5      	beq.n	801ae40 <rint+0x70>
 801ae54:	0851      	lsrs	r1, r2, #1
 801ae56:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801ae5a:	4314      	orrs	r4, r2
 801ae5c:	d00c      	beq.n	801ae78 <rint+0xa8>
 801ae5e:	ea23 0201 	bic.w	r2, r3, r1
 801ae62:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801ae66:	2e13      	cmp	r6, #19
 801ae68:	fa43 f606 	asr.w	r6, r3, r6
 801ae6c:	bf0c      	ite	eq
 801ae6e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801ae72:	2400      	movne	r4, #0
 801ae74:	ea42 0306 	orr.w	r3, r2, r6
 801ae78:	4918      	ldr	r1, [pc, #96]	; (801aedc <rint+0x10c>)
 801ae7a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801ae7e:	4622      	mov	r2, r4
 801ae80:	e9d5 4500 	ldrd	r4, r5, [r5]
 801ae84:	4620      	mov	r0, r4
 801ae86:	4629      	mov	r1, r5
 801ae88:	f7e5 fa20 	bl	80002cc <__adddf3>
 801ae8c:	e9cd 0100 	strd	r0, r1, [sp]
 801ae90:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ae94:	4622      	mov	r2, r4
 801ae96:	462b      	mov	r3, r5
 801ae98:	f7e5 fa16 	bl	80002c8 <__aeabi_dsub>
 801ae9c:	e7d0      	b.n	801ae40 <rint+0x70>
 801ae9e:	2e33      	cmp	r6, #51	; 0x33
 801aea0:	dd07      	ble.n	801aeb2 <rint+0xe2>
 801aea2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801aea6:	d1cb      	bne.n	801ae40 <rint+0x70>
 801aea8:	ee10 2a10 	vmov	r2, s0
 801aeac:	f7e5 fa0e 	bl	80002cc <__adddf3>
 801aeb0:	e7c6      	b.n	801ae40 <rint+0x70>
 801aeb2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801aeb6:	f04f 36ff 	mov.w	r6, #4294967295
 801aeba:	40d6      	lsrs	r6, r2
 801aebc:	4230      	tst	r0, r6
 801aebe:	d0bf      	beq.n	801ae40 <rint+0x70>
 801aec0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 801aec4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 801aec8:	bf1f      	itttt	ne
 801aeca:	ea24 0101 	bicne.w	r1, r4, r1
 801aece:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801aed2:	fa44 f202 	asrne.w	r2, r4, r2
 801aed6:	ea41 0402 	orrne.w	r4, r1, r2
 801aeda:	e7cd      	b.n	801ae78 <rint+0xa8>
 801aedc:	08022fb8 	.word	0x08022fb8
 801aee0:	000fffff 	.word	0x000fffff
 801aee4:	00000000 	.word	0x00000000

0801aee8 <scalbn>:
 801aee8:	b570      	push	{r4, r5, r6, lr}
 801aeea:	ec55 4b10 	vmov	r4, r5, d0
 801aeee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801aef2:	4606      	mov	r6, r0
 801aef4:	462b      	mov	r3, r5
 801aef6:	b99a      	cbnz	r2, 801af20 <scalbn+0x38>
 801aef8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801aefc:	4323      	orrs	r3, r4
 801aefe:	d036      	beq.n	801af6e <scalbn+0x86>
 801af00:	4b39      	ldr	r3, [pc, #228]	; (801afe8 <scalbn+0x100>)
 801af02:	4629      	mov	r1, r5
 801af04:	ee10 0a10 	vmov	r0, s0
 801af08:	2200      	movs	r2, #0
 801af0a:	f7e5 fb95 	bl	8000638 <__aeabi_dmul>
 801af0e:	4b37      	ldr	r3, [pc, #220]	; (801afec <scalbn+0x104>)
 801af10:	429e      	cmp	r6, r3
 801af12:	4604      	mov	r4, r0
 801af14:	460d      	mov	r5, r1
 801af16:	da10      	bge.n	801af3a <scalbn+0x52>
 801af18:	a32b      	add	r3, pc, #172	; (adr r3, 801afc8 <scalbn+0xe0>)
 801af1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af1e:	e03a      	b.n	801af96 <scalbn+0xae>
 801af20:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801af24:	428a      	cmp	r2, r1
 801af26:	d10c      	bne.n	801af42 <scalbn+0x5a>
 801af28:	ee10 2a10 	vmov	r2, s0
 801af2c:	4620      	mov	r0, r4
 801af2e:	4629      	mov	r1, r5
 801af30:	f7e5 f9cc 	bl	80002cc <__adddf3>
 801af34:	4604      	mov	r4, r0
 801af36:	460d      	mov	r5, r1
 801af38:	e019      	b.n	801af6e <scalbn+0x86>
 801af3a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801af3e:	460b      	mov	r3, r1
 801af40:	3a36      	subs	r2, #54	; 0x36
 801af42:	4432      	add	r2, r6
 801af44:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801af48:	428a      	cmp	r2, r1
 801af4a:	dd08      	ble.n	801af5e <scalbn+0x76>
 801af4c:	2d00      	cmp	r5, #0
 801af4e:	a120      	add	r1, pc, #128	; (adr r1, 801afd0 <scalbn+0xe8>)
 801af50:	e9d1 0100 	ldrd	r0, r1, [r1]
 801af54:	da1c      	bge.n	801af90 <scalbn+0xa8>
 801af56:	a120      	add	r1, pc, #128	; (adr r1, 801afd8 <scalbn+0xf0>)
 801af58:	e9d1 0100 	ldrd	r0, r1, [r1]
 801af5c:	e018      	b.n	801af90 <scalbn+0xa8>
 801af5e:	2a00      	cmp	r2, #0
 801af60:	dd08      	ble.n	801af74 <scalbn+0x8c>
 801af62:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801af66:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801af6a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801af6e:	ec45 4b10 	vmov	d0, r4, r5
 801af72:	bd70      	pop	{r4, r5, r6, pc}
 801af74:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801af78:	da19      	bge.n	801afae <scalbn+0xc6>
 801af7a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801af7e:	429e      	cmp	r6, r3
 801af80:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801af84:	dd0a      	ble.n	801af9c <scalbn+0xb4>
 801af86:	a112      	add	r1, pc, #72	; (adr r1, 801afd0 <scalbn+0xe8>)
 801af88:	e9d1 0100 	ldrd	r0, r1, [r1]
 801af8c:	2b00      	cmp	r3, #0
 801af8e:	d1e2      	bne.n	801af56 <scalbn+0x6e>
 801af90:	a30f      	add	r3, pc, #60	; (adr r3, 801afd0 <scalbn+0xe8>)
 801af92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af96:	f7e5 fb4f 	bl	8000638 <__aeabi_dmul>
 801af9a:	e7cb      	b.n	801af34 <scalbn+0x4c>
 801af9c:	a10a      	add	r1, pc, #40	; (adr r1, 801afc8 <scalbn+0xe0>)
 801af9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801afa2:	2b00      	cmp	r3, #0
 801afa4:	d0b8      	beq.n	801af18 <scalbn+0x30>
 801afa6:	a10e      	add	r1, pc, #56	; (adr r1, 801afe0 <scalbn+0xf8>)
 801afa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801afac:	e7b4      	b.n	801af18 <scalbn+0x30>
 801afae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801afb2:	3236      	adds	r2, #54	; 0x36
 801afb4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801afb8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801afbc:	4620      	mov	r0, r4
 801afbe:	4b0c      	ldr	r3, [pc, #48]	; (801aff0 <scalbn+0x108>)
 801afc0:	2200      	movs	r2, #0
 801afc2:	e7e8      	b.n	801af96 <scalbn+0xae>
 801afc4:	f3af 8000 	nop.w
 801afc8:	c2f8f359 	.word	0xc2f8f359
 801afcc:	01a56e1f 	.word	0x01a56e1f
 801afd0:	8800759c 	.word	0x8800759c
 801afd4:	7e37e43c 	.word	0x7e37e43c
 801afd8:	8800759c 	.word	0x8800759c
 801afdc:	fe37e43c 	.word	0xfe37e43c
 801afe0:	c2f8f359 	.word	0xc2f8f359
 801afe4:	81a56e1f 	.word	0x81a56e1f
 801afe8:	43500000 	.word	0x43500000
 801afec:	ffff3cb0 	.word	0xffff3cb0
 801aff0:	3c900000 	.word	0x3c900000

0801aff4 <abort>:
 801aff4:	b508      	push	{r3, lr}
 801aff6:	2006      	movs	r0, #6
 801aff8:	f001 fd5e 	bl	801cab8 <raise>
 801affc:	2001      	movs	r0, #1
 801affe:	f7e8 f9e7 	bl	80033d0 <_exit>
	...

0801b004 <__errno>:
 801b004:	4b01      	ldr	r3, [pc, #4]	; (801b00c <__errno+0x8>)
 801b006:	6818      	ldr	r0, [r3, #0]
 801b008:	4770      	bx	lr
 801b00a:	bf00      	nop
 801b00c:	200001fc 	.word	0x200001fc

0801b010 <std>:
 801b010:	2300      	movs	r3, #0
 801b012:	b510      	push	{r4, lr}
 801b014:	4604      	mov	r4, r0
 801b016:	e9c0 3300 	strd	r3, r3, [r0]
 801b01a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b01e:	6083      	str	r3, [r0, #8]
 801b020:	8181      	strh	r1, [r0, #12]
 801b022:	6643      	str	r3, [r0, #100]	; 0x64
 801b024:	81c2      	strh	r2, [r0, #14]
 801b026:	6183      	str	r3, [r0, #24]
 801b028:	4619      	mov	r1, r3
 801b02a:	2208      	movs	r2, #8
 801b02c:	305c      	adds	r0, #92	; 0x5c
 801b02e:	f000 fa63 	bl	801b4f8 <memset>
 801b032:	4b05      	ldr	r3, [pc, #20]	; (801b048 <std+0x38>)
 801b034:	6263      	str	r3, [r4, #36]	; 0x24
 801b036:	4b05      	ldr	r3, [pc, #20]	; (801b04c <std+0x3c>)
 801b038:	62a3      	str	r3, [r4, #40]	; 0x28
 801b03a:	4b05      	ldr	r3, [pc, #20]	; (801b050 <std+0x40>)
 801b03c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b03e:	4b05      	ldr	r3, [pc, #20]	; (801b054 <std+0x44>)
 801b040:	6224      	str	r4, [r4, #32]
 801b042:	6323      	str	r3, [r4, #48]	; 0x30
 801b044:	bd10      	pop	{r4, pc}
 801b046:	bf00      	nop
 801b048:	0801cb89 	.word	0x0801cb89
 801b04c:	0801cbaf 	.word	0x0801cbaf
 801b050:	0801cbe7 	.word	0x0801cbe7
 801b054:	0801cc0b 	.word	0x0801cc0b

0801b058 <_cleanup_r>:
 801b058:	4901      	ldr	r1, [pc, #4]	; (801b060 <_cleanup_r+0x8>)
 801b05a:	f000 b8af 	b.w	801b1bc <_fwalk_reent>
 801b05e:	bf00      	nop
 801b060:	0801efd5 	.word	0x0801efd5

0801b064 <__sfmoreglue>:
 801b064:	b570      	push	{r4, r5, r6, lr}
 801b066:	1e4a      	subs	r2, r1, #1
 801b068:	2568      	movs	r5, #104	; 0x68
 801b06a:	4355      	muls	r5, r2
 801b06c:	460e      	mov	r6, r1
 801b06e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801b072:	f000 fd17 	bl	801baa4 <_malloc_r>
 801b076:	4604      	mov	r4, r0
 801b078:	b140      	cbz	r0, 801b08c <__sfmoreglue+0x28>
 801b07a:	2100      	movs	r1, #0
 801b07c:	e9c0 1600 	strd	r1, r6, [r0]
 801b080:	300c      	adds	r0, #12
 801b082:	60a0      	str	r0, [r4, #8]
 801b084:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801b088:	f000 fa36 	bl	801b4f8 <memset>
 801b08c:	4620      	mov	r0, r4
 801b08e:	bd70      	pop	{r4, r5, r6, pc}

0801b090 <__sfp_lock_acquire>:
 801b090:	4801      	ldr	r0, [pc, #4]	; (801b098 <__sfp_lock_acquire+0x8>)
 801b092:	f000 b9f5 	b.w	801b480 <__retarget_lock_acquire_recursive>
 801b096:	bf00      	nop
 801b098:	20008fcc 	.word	0x20008fcc

0801b09c <__sfp_lock_release>:
 801b09c:	4801      	ldr	r0, [pc, #4]	; (801b0a4 <__sfp_lock_release+0x8>)
 801b09e:	f000 b9f1 	b.w	801b484 <__retarget_lock_release_recursive>
 801b0a2:	bf00      	nop
 801b0a4:	20008fcc 	.word	0x20008fcc

0801b0a8 <__sinit_lock_acquire>:
 801b0a8:	4801      	ldr	r0, [pc, #4]	; (801b0b0 <__sinit_lock_acquire+0x8>)
 801b0aa:	f000 b9e9 	b.w	801b480 <__retarget_lock_acquire_recursive>
 801b0ae:	bf00      	nop
 801b0b0:	20008fc7 	.word	0x20008fc7

0801b0b4 <__sinit_lock_release>:
 801b0b4:	4801      	ldr	r0, [pc, #4]	; (801b0bc <__sinit_lock_release+0x8>)
 801b0b6:	f000 b9e5 	b.w	801b484 <__retarget_lock_release_recursive>
 801b0ba:	bf00      	nop
 801b0bc:	20008fc7 	.word	0x20008fc7

0801b0c0 <__sinit>:
 801b0c0:	b510      	push	{r4, lr}
 801b0c2:	4604      	mov	r4, r0
 801b0c4:	f7ff fff0 	bl	801b0a8 <__sinit_lock_acquire>
 801b0c8:	69a3      	ldr	r3, [r4, #24]
 801b0ca:	b11b      	cbz	r3, 801b0d4 <__sinit+0x14>
 801b0cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b0d0:	f7ff bff0 	b.w	801b0b4 <__sinit_lock_release>
 801b0d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801b0d8:	6523      	str	r3, [r4, #80]	; 0x50
 801b0da:	4b13      	ldr	r3, [pc, #76]	; (801b128 <__sinit+0x68>)
 801b0dc:	4a13      	ldr	r2, [pc, #76]	; (801b12c <__sinit+0x6c>)
 801b0de:	681b      	ldr	r3, [r3, #0]
 801b0e0:	62a2      	str	r2, [r4, #40]	; 0x28
 801b0e2:	42a3      	cmp	r3, r4
 801b0e4:	bf04      	itt	eq
 801b0e6:	2301      	moveq	r3, #1
 801b0e8:	61a3      	streq	r3, [r4, #24]
 801b0ea:	4620      	mov	r0, r4
 801b0ec:	f000 f820 	bl	801b130 <__sfp>
 801b0f0:	6060      	str	r0, [r4, #4]
 801b0f2:	4620      	mov	r0, r4
 801b0f4:	f000 f81c 	bl	801b130 <__sfp>
 801b0f8:	60a0      	str	r0, [r4, #8]
 801b0fa:	4620      	mov	r0, r4
 801b0fc:	f000 f818 	bl	801b130 <__sfp>
 801b100:	2200      	movs	r2, #0
 801b102:	60e0      	str	r0, [r4, #12]
 801b104:	2104      	movs	r1, #4
 801b106:	6860      	ldr	r0, [r4, #4]
 801b108:	f7ff ff82 	bl	801b010 <std>
 801b10c:	68a0      	ldr	r0, [r4, #8]
 801b10e:	2201      	movs	r2, #1
 801b110:	2109      	movs	r1, #9
 801b112:	f7ff ff7d 	bl	801b010 <std>
 801b116:	68e0      	ldr	r0, [r4, #12]
 801b118:	2202      	movs	r2, #2
 801b11a:	2112      	movs	r1, #18
 801b11c:	f7ff ff78 	bl	801b010 <std>
 801b120:	2301      	movs	r3, #1
 801b122:	61a3      	str	r3, [r4, #24]
 801b124:	e7d2      	b.n	801b0cc <__sinit+0xc>
 801b126:	bf00      	nop
 801b128:	0802312c 	.word	0x0802312c
 801b12c:	0801b059 	.word	0x0801b059

0801b130 <__sfp>:
 801b130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b132:	4607      	mov	r7, r0
 801b134:	f7ff ffac 	bl	801b090 <__sfp_lock_acquire>
 801b138:	4b1e      	ldr	r3, [pc, #120]	; (801b1b4 <__sfp+0x84>)
 801b13a:	681e      	ldr	r6, [r3, #0]
 801b13c:	69b3      	ldr	r3, [r6, #24]
 801b13e:	b913      	cbnz	r3, 801b146 <__sfp+0x16>
 801b140:	4630      	mov	r0, r6
 801b142:	f7ff ffbd 	bl	801b0c0 <__sinit>
 801b146:	3648      	adds	r6, #72	; 0x48
 801b148:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801b14c:	3b01      	subs	r3, #1
 801b14e:	d503      	bpl.n	801b158 <__sfp+0x28>
 801b150:	6833      	ldr	r3, [r6, #0]
 801b152:	b30b      	cbz	r3, 801b198 <__sfp+0x68>
 801b154:	6836      	ldr	r6, [r6, #0]
 801b156:	e7f7      	b.n	801b148 <__sfp+0x18>
 801b158:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b15c:	b9d5      	cbnz	r5, 801b194 <__sfp+0x64>
 801b15e:	4b16      	ldr	r3, [pc, #88]	; (801b1b8 <__sfp+0x88>)
 801b160:	60e3      	str	r3, [r4, #12]
 801b162:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b166:	6665      	str	r5, [r4, #100]	; 0x64
 801b168:	f000 f988 	bl	801b47c <__retarget_lock_init_recursive>
 801b16c:	f7ff ff96 	bl	801b09c <__sfp_lock_release>
 801b170:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801b174:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801b178:	6025      	str	r5, [r4, #0]
 801b17a:	61a5      	str	r5, [r4, #24]
 801b17c:	2208      	movs	r2, #8
 801b17e:	4629      	mov	r1, r5
 801b180:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b184:	f000 f9b8 	bl	801b4f8 <memset>
 801b188:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b18c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b190:	4620      	mov	r0, r4
 801b192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b194:	3468      	adds	r4, #104	; 0x68
 801b196:	e7d9      	b.n	801b14c <__sfp+0x1c>
 801b198:	2104      	movs	r1, #4
 801b19a:	4638      	mov	r0, r7
 801b19c:	f7ff ff62 	bl	801b064 <__sfmoreglue>
 801b1a0:	4604      	mov	r4, r0
 801b1a2:	6030      	str	r0, [r6, #0]
 801b1a4:	2800      	cmp	r0, #0
 801b1a6:	d1d5      	bne.n	801b154 <__sfp+0x24>
 801b1a8:	f7ff ff78 	bl	801b09c <__sfp_lock_release>
 801b1ac:	230c      	movs	r3, #12
 801b1ae:	603b      	str	r3, [r7, #0]
 801b1b0:	e7ee      	b.n	801b190 <__sfp+0x60>
 801b1b2:	bf00      	nop
 801b1b4:	0802312c 	.word	0x0802312c
 801b1b8:	ffff0001 	.word	0xffff0001

0801b1bc <_fwalk_reent>:
 801b1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b1c0:	4606      	mov	r6, r0
 801b1c2:	4688      	mov	r8, r1
 801b1c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b1c8:	2700      	movs	r7, #0
 801b1ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b1ce:	f1b9 0901 	subs.w	r9, r9, #1
 801b1d2:	d505      	bpl.n	801b1e0 <_fwalk_reent+0x24>
 801b1d4:	6824      	ldr	r4, [r4, #0]
 801b1d6:	2c00      	cmp	r4, #0
 801b1d8:	d1f7      	bne.n	801b1ca <_fwalk_reent+0xe>
 801b1da:	4638      	mov	r0, r7
 801b1dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b1e0:	89ab      	ldrh	r3, [r5, #12]
 801b1e2:	2b01      	cmp	r3, #1
 801b1e4:	d907      	bls.n	801b1f6 <_fwalk_reent+0x3a>
 801b1e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b1ea:	3301      	adds	r3, #1
 801b1ec:	d003      	beq.n	801b1f6 <_fwalk_reent+0x3a>
 801b1ee:	4629      	mov	r1, r5
 801b1f0:	4630      	mov	r0, r6
 801b1f2:	47c0      	blx	r8
 801b1f4:	4307      	orrs	r7, r0
 801b1f6:	3568      	adds	r5, #104	; 0x68
 801b1f8:	e7e9      	b.n	801b1ce <_fwalk_reent+0x12>
	...

0801b1fc <__libc_init_array>:
 801b1fc:	b570      	push	{r4, r5, r6, lr}
 801b1fe:	4d0d      	ldr	r5, [pc, #52]	; (801b234 <__libc_init_array+0x38>)
 801b200:	4c0d      	ldr	r4, [pc, #52]	; (801b238 <__libc_init_array+0x3c>)
 801b202:	1b64      	subs	r4, r4, r5
 801b204:	10a4      	asrs	r4, r4, #2
 801b206:	2600      	movs	r6, #0
 801b208:	42a6      	cmp	r6, r4
 801b20a:	d109      	bne.n	801b220 <__libc_init_array+0x24>
 801b20c:	4d0b      	ldr	r5, [pc, #44]	; (801b23c <__libc_init_array+0x40>)
 801b20e:	4c0c      	ldr	r4, [pc, #48]	; (801b240 <__libc_init_array+0x44>)
 801b210:	f005 ffba 	bl	8021188 <_init>
 801b214:	1b64      	subs	r4, r4, r5
 801b216:	10a4      	asrs	r4, r4, #2
 801b218:	2600      	movs	r6, #0
 801b21a:	42a6      	cmp	r6, r4
 801b21c:	d105      	bne.n	801b22a <__libc_init_array+0x2e>
 801b21e:	bd70      	pop	{r4, r5, r6, pc}
 801b220:	f855 3b04 	ldr.w	r3, [r5], #4
 801b224:	4798      	blx	r3
 801b226:	3601      	adds	r6, #1
 801b228:	e7ee      	b.n	801b208 <__libc_init_array+0xc>
 801b22a:	f855 3b04 	ldr.w	r3, [r5], #4
 801b22e:	4798      	blx	r3
 801b230:	3601      	adds	r6, #1
 801b232:	e7f2      	b.n	801b21a <__libc_init_array+0x1e>
 801b234:	080235f8 	.word	0x080235f8
 801b238:	080235f8 	.word	0x080235f8
 801b23c:	080235f8 	.word	0x080235f8
 801b240:	08023600 	.word	0x08023600

0801b244 <isxdigit>:
 801b244:	4b02      	ldr	r3, [pc, #8]	; (801b250 <isxdigit+0xc>)
 801b246:	4418      	add	r0, r3
 801b248:	7840      	ldrb	r0, [r0, #1]
 801b24a:	f000 0044 	and.w	r0, r0, #68	; 0x44
 801b24e:	4770      	bx	lr
 801b250:	08022fc8 	.word	0x08022fc8

0801b254 <localtime>:
 801b254:	b538      	push	{r3, r4, r5, lr}
 801b256:	4b0b      	ldr	r3, [pc, #44]	; (801b284 <localtime+0x30>)
 801b258:	681d      	ldr	r5, [r3, #0]
 801b25a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801b25c:	4604      	mov	r4, r0
 801b25e:	b953      	cbnz	r3, 801b276 <localtime+0x22>
 801b260:	2024      	movs	r0, #36	; 0x24
 801b262:	f000 f911 	bl	801b488 <malloc>
 801b266:	4602      	mov	r2, r0
 801b268:	63e8      	str	r0, [r5, #60]	; 0x3c
 801b26a:	b920      	cbnz	r0, 801b276 <localtime+0x22>
 801b26c:	4b06      	ldr	r3, [pc, #24]	; (801b288 <localtime+0x34>)
 801b26e:	4807      	ldr	r0, [pc, #28]	; (801b28c <localtime+0x38>)
 801b270:	2132      	movs	r1, #50	; 0x32
 801b272:	f002 ff6f 	bl	801e154 <__assert_func>
 801b276:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 801b278:	4620      	mov	r0, r4
 801b27a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b27e:	f000 b807 	b.w	801b290 <localtime_r>
 801b282:	bf00      	nop
 801b284:	200001fc 	.word	0x200001fc
 801b288:	08023130 	.word	0x08023130
 801b28c:	08023147 	.word	0x08023147

0801b290 <localtime_r>:
 801b290:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801b294:	4607      	mov	r7, r0
 801b296:	9101      	str	r1, [sp, #4]
 801b298:	f004 fa9c 	bl	801f7d4 <__gettzinfo>
 801b29c:	9901      	ldr	r1, [sp, #4]
 801b29e:	4680      	mov	r8, r0
 801b2a0:	4638      	mov	r0, r7
 801b2a2:	f004 fa9b 	bl	801f7dc <gmtime_r>
 801b2a6:	6943      	ldr	r3, [r0, #20]
 801b2a8:	079a      	lsls	r2, r3, #30
 801b2aa:	4604      	mov	r4, r0
 801b2ac:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 801b2b0:	d105      	bne.n	801b2be <localtime_r+0x2e>
 801b2b2:	2264      	movs	r2, #100	; 0x64
 801b2b4:	fb96 f3f2 	sdiv	r3, r6, r2
 801b2b8:	fb02 6313 	mls	r3, r2, r3, r6
 801b2bc:	bb7b      	cbnz	r3, 801b31e <localtime_r+0x8e>
 801b2be:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801b2c2:	fb96 f5f3 	sdiv	r5, r6, r3
 801b2c6:	fb03 6515 	mls	r5, r3, r5, r6
 801b2ca:	fab5 f585 	clz	r5, r5
 801b2ce:	096d      	lsrs	r5, r5, #5
 801b2d0:	4b68      	ldr	r3, [pc, #416]	; (801b474 <localtime_r+0x1e4>)
 801b2d2:	2230      	movs	r2, #48	; 0x30
 801b2d4:	fb02 3505 	mla	r5, r2, r5, r3
 801b2d8:	f002 fca2 	bl	801dc20 <__tz_lock>
 801b2dc:	f002 fcac 	bl	801dc38 <_tzset_unlocked>
 801b2e0:	4b65      	ldr	r3, [pc, #404]	; (801b478 <localtime_r+0x1e8>)
 801b2e2:	681b      	ldr	r3, [r3, #0]
 801b2e4:	b353      	cbz	r3, 801b33c <localtime_r+0xac>
 801b2e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b2ea:	42b3      	cmp	r3, r6
 801b2ec:	d119      	bne.n	801b322 <localtime_r+0x92>
 801b2ee:	f8d8 1000 	ldr.w	r1, [r8]
 801b2f2:	e9d7 6700 	ldrd	r6, r7, [r7]
 801b2f6:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801b2fa:	b9d1      	cbnz	r1, 801b332 <localtime_r+0xa2>
 801b2fc:	4296      	cmp	r6, r2
 801b2fe:	eb77 0303 	sbcs.w	r3, r7, r3
 801b302:	da23      	bge.n	801b34c <localtime_r+0xbc>
 801b304:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801b308:	4296      	cmp	r6, r2
 801b30a:	eb77 0303 	sbcs.w	r3, r7, r3
 801b30e:	bfb4      	ite	lt
 801b310:	2301      	movlt	r3, #1
 801b312:	2300      	movge	r3, #0
 801b314:	6223      	str	r3, [r4, #32]
 801b316:	db1b      	blt.n	801b350 <localtime_r+0xc0>
 801b318:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 801b31c:	e01a      	b.n	801b354 <localtime_r+0xc4>
 801b31e:	2501      	movs	r5, #1
 801b320:	e7d6      	b.n	801b2d0 <localtime_r+0x40>
 801b322:	4630      	mov	r0, r6
 801b324:	f002 fbd4 	bl	801dad0 <__tzcalc_limits>
 801b328:	2800      	cmp	r0, #0
 801b32a:	d1e0      	bne.n	801b2ee <localtime_r+0x5e>
 801b32c:	f04f 33ff 	mov.w	r3, #4294967295
 801b330:	e004      	b.n	801b33c <localtime_r+0xac>
 801b332:	4296      	cmp	r6, r2
 801b334:	eb77 0303 	sbcs.w	r3, r7, r3
 801b338:	da02      	bge.n	801b340 <localtime_r+0xb0>
 801b33a:	2300      	movs	r3, #0
 801b33c:	6223      	str	r3, [r4, #32]
 801b33e:	e7eb      	b.n	801b318 <localtime_r+0x88>
 801b340:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801b344:	4296      	cmp	r6, r2
 801b346:	eb77 0303 	sbcs.w	r3, r7, r3
 801b34a:	daf6      	bge.n	801b33a <localtime_r+0xaa>
 801b34c:	2301      	movs	r3, #1
 801b34e:	6223      	str	r3, [r4, #32]
 801b350:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 801b354:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801b358:	203c      	movs	r0, #60	; 0x3c
 801b35a:	fb91 f6f3 	sdiv	r6, r1, r3
 801b35e:	fb03 1316 	mls	r3, r3, r6, r1
 801b362:	6861      	ldr	r1, [r4, #4]
 801b364:	fb93 f2f0 	sdiv	r2, r3, r0
 801b368:	fb00 3012 	mls	r0, r0, r2, r3
 801b36c:	6823      	ldr	r3, [r4, #0]
 801b36e:	1a89      	subs	r1, r1, r2
 801b370:	68a2      	ldr	r2, [r4, #8]
 801b372:	6061      	str	r1, [r4, #4]
 801b374:	1a1b      	subs	r3, r3, r0
 801b376:	1b92      	subs	r2, r2, r6
 801b378:	2b3b      	cmp	r3, #59	; 0x3b
 801b37a:	6023      	str	r3, [r4, #0]
 801b37c:	60a2      	str	r2, [r4, #8]
 801b37e:	dd35      	ble.n	801b3ec <localtime_r+0x15c>
 801b380:	3101      	adds	r1, #1
 801b382:	6061      	str	r1, [r4, #4]
 801b384:	3b3c      	subs	r3, #60	; 0x3c
 801b386:	6023      	str	r3, [r4, #0]
 801b388:	6863      	ldr	r3, [r4, #4]
 801b38a:	2b3b      	cmp	r3, #59	; 0x3b
 801b38c:	dd34      	ble.n	801b3f8 <localtime_r+0x168>
 801b38e:	3201      	adds	r2, #1
 801b390:	60a2      	str	r2, [r4, #8]
 801b392:	3b3c      	subs	r3, #60	; 0x3c
 801b394:	6063      	str	r3, [r4, #4]
 801b396:	68a3      	ldr	r3, [r4, #8]
 801b398:	2b17      	cmp	r3, #23
 801b39a:	dd33      	ble.n	801b404 <localtime_r+0x174>
 801b39c:	69e2      	ldr	r2, [r4, #28]
 801b39e:	3201      	adds	r2, #1
 801b3a0:	61e2      	str	r2, [r4, #28]
 801b3a2:	69a2      	ldr	r2, [r4, #24]
 801b3a4:	3201      	adds	r2, #1
 801b3a6:	2a06      	cmp	r2, #6
 801b3a8:	bfc8      	it	gt
 801b3aa:	2200      	movgt	r2, #0
 801b3ac:	61a2      	str	r2, [r4, #24]
 801b3ae:	68e2      	ldr	r2, [r4, #12]
 801b3b0:	3b18      	subs	r3, #24
 801b3b2:	3201      	adds	r2, #1
 801b3b4:	60a3      	str	r3, [r4, #8]
 801b3b6:	6923      	ldr	r3, [r4, #16]
 801b3b8:	60e2      	str	r2, [r4, #12]
 801b3ba:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801b3be:	428a      	cmp	r2, r1
 801b3c0:	dd0e      	ble.n	801b3e0 <localtime_r+0x150>
 801b3c2:	2b0b      	cmp	r3, #11
 801b3c4:	eba2 0201 	sub.w	r2, r2, r1
 801b3c8:	60e2      	str	r2, [r4, #12]
 801b3ca:	f103 0201 	add.w	r2, r3, #1
 801b3ce:	bf09      	itett	eq
 801b3d0:	6963      	ldreq	r3, [r4, #20]
 801b3d2:	6122      	strne	r2, [r4, #16]
 801b3d4:	2200      	moveq	r2, #0
 801b3d6:	3301      	addeq	r3, #1
 801b3d8:	bf02      	ittt	eq
 801b3da:	6122      	streq	r2, [r4, #16]
 801b3dc:	6163      	streq	r3, [r4, #20]
 801b3de:	61e2      	streq	r2, [r4, #28]
 801b3e0:	f002 fc24 	bl	801dc2c <__tz_unlock>
 801b3e4:	4620      	mov	r0, r4
 801b3e6:	b002      	add	sp, #8
 801b3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b3ec:	2b00      	cmp	r3, #0
 801b3ee:	dacb      	bge.n	801b388 <localtime_r+0xf8>
 801b3f0:	3901      	subs	r1, #1
 801b3f2:	6061      	str	r1, [r4, #4]
 801b3f4:	333c      	adds	r3, #60	; 0x3c
 801b3f6:	e7c6      	b.n	801b386 <localtime_r+0xf6>
 801b3f8:	2b00      	cmp	r3, #0
 801b3fa:	dacc      	bge.n	801b396 <localtime_r+0x106>
 801b3fc:	3a01      	subs	r2, #1
 801b3fe:	60a2      	str	r2, [r4, #8]
 801b400:	333c      	adds	r3, #60	; 0x3c
 801b402:	e7c7      	b.n	801b394 <localtime_r+0x104>
 801b404:	2b00      	cmp	r3, #0
 801b406:	daeb      	bge.n	801b3e0 <localtime_r+0x150>
 801b408:	69e2      	ldr	r2, [r4, #28]
 801b40a:	3a01      	subs	r2, #1
 801b40c:	61e2      	str	r2, [r4, #28]
 801b40e:	69a2      	ldr	r2, [r4, #24]
 801b410:	3a01      	subs	r2, #1
 801b412:	bf48      	it	mi
 801b414:	2206      	movmi	r2, #6
 801b416:	61a2      	str	r2, [r4, #24]
 801b418:	68e2      	ldr	r2, [r4, #12]
 801b41a:	3318      	adds	r3, #24
 801b41c:	3a01      	subs	r2, #1
 801b41e:	60e2      	str	r2, [r4, #12]
 801b420:	60a3      	str	r3, [r4, #8]
 801b422:	2a00      	cmp	r2, #0
 801b424:	d1dc      	bne.n	801b3e0 <localtime_r+0x150>
 801b426:	6923      	ldr	r3, [r4, #16]
 801b428:	3b01      	subs	r3, #1
 801b42a:	d405      	bmi.n	801b438 <localtime_r+0x1a8>
 801b42c:	6123      	str	r3, [r4, #16]
 801b42e:	6923      	ldr	r3, [r4, #16]
 801b430:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801b434:	60e3      	str	r3, [r4, #12]
 801b436:	e7d3      	b.n	801b3e0 <localtime_r+0x150>
 801b438:	230b      	movs	r3, #11
 801b43a:	6123      	str	r3, [r4, #16]
 801b43c:	6963      	ldr	r3, [r4, #20]
 801b43e:	1e5a      	subs	r2, r3, #1
 801b440:	6162      	str	r2, [r4, #20]
 801b442:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 801b446:	0793      	lsls	r3, r2, #30
 801b448:	d105      	bne.n	801b456 <localtime_r+0x1c6>
 801b44a:	2164      	movs	r1, #100	; 0x64
 801b44c:	fb92 f3f1 	sdiv	r3, r2, r1
 801b450:	fb01 2313 	mls	r3, r1, r3, r2
 801b454:	b963      	cbnz	r3, 801b470 <localtime_r+0x1e0>
 801b456:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801b45a:	fb92 f3f1 	sdiv	r3, r2, r1
 801b45e:	fb01 2313 	mls	r3, r1, r3, r2
 801b462:	fab3 f383 	clz	r3, r3
 801b466:	095b      	lsrs	r3, r3, #5
 801b468:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801b46c:	61e3      	str	r3, [r4, #28]
 801b46e:	e7de      	b.n	801b42e <localtime_r+0x19e>
 801b470:	2301      	movs	r3, #1
 801b472:	e7f9      	b.n	801b468 <localtime_r+0x1d8>
 801b474:	08023208 	.word	0x08023208
 801b478:	20005ed0 	.word	0x20005ed0

0801b47c <__retarget_lock_init_recursive>:
 801b47c:	4770      	bx	lr

0801b47e <__retarget_lock_acquire>:
 801b47e:	4770      	bx	lr

0801b480 <__retarget_lock_acquire_recursive>:
 801b480:	4770      	bx	lr

0801b482 <__retarget_lock_release>:
 801b482:	4770      	bx	lr

0801b484 <__retarget_lock_release_recursive>:
 801b484:	4770      	bx	lr
	...

0801b488 <malloc>:
 801b488:	4b02      	ldr	r3, [pc, #8]	; (801b494 <malloc+0xc>)
 801b48a:	4601      	mov	r1, r0
 801b48c:	6818      	ldr	r0, [r3, #0]
 801b48e:	f000 bb09 	b.w	801baa4 <_malloc_r>
 801b492:	bf00      	nop
 801b494:	200001fc 	.word	0x200001fc

0801b498 <free>:
 801b498:	4b02      	ldr	r3, [pc, #8]	; (801b4a4 <free+0xc>)
 801b49a:	4601      	mov	r1, r0
 801b49c:	6818      	ldr	r0, [r3, #0]
 801b49e:	f000 bab1 	b.w	801ba04 <_free_r>
 801b4a2:	bf00      	nop
 801b4a4:	200001fc 	.word	0x200001fc

0801b4a8 <memcpy>:
 801b4a8:	440a      	add	r2, r1
 801b4aa:	4291      	cmp	r1, r2
 801b4ac:	f100 33ff 	add.w	r3, r0, #4294967295
 801b4b0:	d100      	bne.n	801b4b4 <memcpy+0xc>
 801b4b2:	4770      	bx	lr
 801b4b4:	b510      	push	{r4, lr}
 801b4b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b4ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b4be:	4291      	cmp	r1, r2
 801b4c0:	d1f9      	bne.n	801b4b6 <memcpy+0xe>
 801b4c2:	bd10      	pop	{r4, pc}

0801b4c4 <memmove>:
 801b4c4:	4288      	cmp	r0, r1
 801b4c6:	b510      	push	{r4, lr}
 801b4c8:	eb01 0402 	add.w	r4, r1, r2
 801b4cc:	d902      	bls.n	801b4d4 <memmove+0x10>
 801b4ce:	4284      	cmp	r4, r0
 801b4d0:	4623      	mov	r3, r4
 801b4d2:	d807      	bhi.n	801b4e4 <memmove+0x20>
 801b4d4:	1e43      	subs	r3, r0, #1
 801b4d6:	42a1      	cmp	r1, r4
 801b4d8:	d008      	beq.n	801b4ec <memmove+0x28>
 801b4da:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b4de:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b4e2:	e7f8      	b.n	801b4d6 <memmove+0x12>
 801b4e4:	4402      	add	r2, r0
 801b4e6:	4601      	mov	r1, r0
 801b4e8:	428a      	cmp	r2, r1
 801b4ea:	d100      	bne.n	801b4ee <memmove+0x2a>
 801b4ec:	bd10      	pop	{r4, pc}
 801b4ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b4f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b4f6:	e7f7      	b.n	801b4e8 <memmove+0x24>

0801b4f8 <memset>:
 801b4f8:	4402      	add	r2, r0
 801b4fa:	4603      	mov	r3, r0
 801b4fc:	4293      	cmp	r3, r2
 801b4fe:	d100      	bne.n	801b502 <memset+0xa>
 801b500:	4770      	bx	lr
 801b502:	f803 1b01 	strb.w	r1, [r3], #1
 801b506:	e7f9      	b.n	801b4fc <memset+0x4>

0801b508 <validate_structure>:
 801b508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b50a:	6801      	ldr	r1, [r0, #0]
 801b50c:	293b      	cmp	r1, #59	; 0x3b
 801b50e:	4604      	mov	r4, r0
 801b510:	d911      	bls.n	801b536 <validate_structure+0x2e>
 801b512:	223c      	movs	r2, #60	; 0x3c
 801b514:	4668      	mov	r0, sp
 801b516:	f002 fe4b 	bl	801e1b0 <div>
 801b51a:	9a01      	ldr	r2, [sp, #4]
 801b51c:	6863      	ldr	r3, [r4, #4]
 801b51e:	9900      	ldr	r1, [sp, #0]
 801b520:	2a00      	cmp	r2, #0
 801b522:	440b      	add	r3, r1
 801b524:	6063      	str	r3, [r4, #4]
 801b526:	bfbb      	ittet	lt
 801b528:	323c      	addlt	r2, #60	; 0x3c
 801b52a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801b52e:	6022      	strge	r2, [r4, #0]
 801b530:	6022      	strlt	r2, [r4, #0]
 801b532:	bfb8      	it	lt
 801b534:	6063      	strlt	r3, [r4, #4]
 801b536:	6861      	ldr	r1, [r4, #4]
 801b538:	293b      	cmp	r1, #59	; 0x3b
 801b53a:	d911      	bls.n	801b560 <validate_structure+0x58>
 801b53c:	223c      	movs	r2, #60	; 0x3c
 801b53e:	4668      	mov	r0, sp
 801b540:	f002 fe36 	bl	801e1b0 <div>
 801b544:	9a01      	ldr	r2, [sp, #4]
 801b546:	68a3      	ldr	r3, [r4, #8]
 801b548:	9900      	ldr	r1, [sp, #0]
 801b54a:	2a00      	cmp	r2, #0
 801b54c:	440b      	add	r3, r1
 801b54e:	60a3      	str	r3, [r4, #8]
 801b550:	bfbb      	ittet	lt
 801b552:	323c      	addlt	r2, #60	; 0x3c
 801b554:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801b558:	6062      	strge	r2, [r4, #4]
 801b55a:	6062      	strlt	r2, [r4, #4]
 801b55c:	bfb8      	it	lt
 801b55e:	60a3      	strlt	r3, [r4, #8]
 801b560:	68a1      	ldr	r1, [r4, #8]
 801b562:	2917      	cmp	r1, #23
 801b564:	d911      	bls.n	801b58a <validate_structure+0x82>
 801b566:	2218      	movs	r2, #24
 801b568:	4668      	mov	r0, sp
 801b56a:	f002 fe21 	bl	801e1b0 <div>
 801b56e:	9a01      	ldr	r2, [sp, #4]
 801b570:	68e3      	ldr	r3, [r4, #12]
 801b572:	9900      	ldr	r1, [sp, #0]
 801b574:	2a00      	cmp	r2, #0
 801b576:	440b      	add	r3, r1
 801b578:	60e3      	str	r3, [r4, #12]
 801b57a:	bfbb      	ittet	lt
 801b57c:	3218      	addlt	r2, #24
 801b57e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801b582:	60a2      	strge	r2, [r4, #8]
 801b584:	60a2      	strlt	r2, [r4, #8]
 801b586:	bfb8      	it	lt
 801b588:	60e3      	strlt	r3, [r4, #12]
 801b58a:	6921      	ldr	r1, [r4, #16]
 801b58c:	290b      	cmp	r1, #11
 801b58e:	d911      	bls.n	801b5b4 <validate_structure+0xac>
 801b590:	220c      	movs	r2, #12
 801b592:	4668      	mov	r0, sp
 801b594:	f002 fe0c 	bl	801e1b0 <div>
 801b598:	9a01      	ldr	r2, [sp, #4]
 801b59a:	6963      	ldr	r3, [r4, #20]
 801b59c:	9900      	ldr	r1, [sp, #0]
 801b59e:	2a00      	cmp	r2, #0
 801b5a0:	440b      	add	r3, r1
 801b5a2:	6163      	str	r3, [r4, #20]
 801b5a4:	bfbb      	ittet	lt
 801b5a6:	320c      	addlt	r2, #12
 801b5a8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801b5ac:	6122      	strge	r2, [r4, #16]
 801b5ae:	6122      	strlt	r2, [r4, #16]
 801b5b0:	bfb8      	it	lt
 801b5b2:	6163      	strlt	r3, [r4, #20]
 801b5b4:	6963      	ldr	r3, [r4, #20]
 801b5b6:	0799      	lsls	r1, r3, #30
 801b5b8:	d120      	bne.n	801b5fc <validate_structure+0xf4>
 801b5ba:	2164      	movs	r1, #100	; 0x64
 801b5bc:	fb93 f2f1 	sdiv	r2, r3, r1
 801b5c0:	fb01 3212 	mls	r2, r1, r2, r3
 801b5c4:	b9e2      	cbnz	r2, 801b600 <validate_structure+0xf8>
 801b5c6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 801b5ca:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801b5ce:	fb93 f2f1 	sdiv	r2, r3, r1
 801b5d2:	fb01 3312 	mls	r3, r1, r2, r3
 801b5d6:	2b00      	cmp	r3, #0
 801b5d8:	bf14      	ite	ne
 801b5da:	231c      	movne	r3, #28
 801b5dc:	231d      	moveq	r3, #29
 801b5de:	68e2      	ldr	r2, [r4, #12]
 801b5e0:	2a00      	cmp	r2, #0
 801b5e2:	dc0f      	bgt.n	801b604 <validate_structure+0xfc>
 801b5e4:	4f33      	ldr	r7, [pc, #204]	; (801b6b4 <validate_structure+0x1ac>)
 801b5e6:	260b      	movs	r6, #11
 801b5e8:	2064      	movs	r0, #100	; 0x64
 801b5ea:	f44f 75c8 	mov.w	r5, #400	; 0x190
 801b5ee:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801b5f2:	f1bc 0f00 	cmp.w	ip, #0
 801b5f6:	dd31      	ble.n	801b65c <validate_structure+0x154>
 801b5f8:	b003      	add	sp, #12
 801b5fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b5fc:	231c      	movs	r3, #28
 801b5fe:	e7ee      	b.n	801b5de <validate_structure+0xd6>
 801b600:	231d      	movs	r3, #29
 801b602:	e7ec      	b.n	801b5de <validate_structure+0xd6>
 801b604:	4f2b      	ldr	r7, [pc, #172]	; (801b6b4 <validate_structure+0x1ac>)
 801b606:	f04f 0c00 	mov.w	ip, #0
 801b60a:	2564      	movs	r5, #100	; 0x64
 801b60c:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801b610:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 801b614:	2a01      	cmp	r2, #1
 801b616:	bf14      	ite	ne
 801b618:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 801b61c:	4618      	moveq	r0, r3
 801b61e:	4281      	cmp	r1, r0
 801b620:	ddea      	ble.n	801b5f8 <validate_structure+0xf0>
 801b622:	3201      	adds	r2, #1
 801b624:	1a09      	subs	r1, r1, r0
 801b626:	2a0c      	cmp	r2, #12
 801b628:	60e1      	str	r1, [r4, #12]
 801b62a:	6122      	str	r2, [r4, #16]
 801b62c:	d1f0      	bne.n	801b610 <validate_structure+0x108>
 801b62e:	6963      	ldr	r3, [r4, #20]
 801b630:	1c5a      	adds	r2, r3, #1
 801b632:	0791      	lsls	r1, r2, #30
 801b634:	e9c4 c204 	strd	ip, r2, [r4, #16]
 801b638:	d137      	bne.n	801b6aa <validate_structure+0x1a2>
 801b63a:	fb92 f1f5 	sdiv	r1, r2, r5
 801b63e:	fb05 2211 	mls	r2, r5, r1, r2
 801b642:	2a00      	cmp	r2, #0
 801b644:	d133      	bne.n	801b6ae <validate_structure+0x1a6>
 801b646:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 801b64a:	fb93 f2f6 	sdiv	r2, r3, r6
 801b64e:	fb06 3312 	mls	r3, r6, r2, r3
 801b652:	2b00      	cmp	r3, #0
 801b654:	bf14      	ite	ne
 801b656:	231c      	movne	r3, #28
 801b658:	231d      	moveq	r3, #29
 801b65a:	e7d9      	b.n	801b610 <validate_structure+0x108>
 801b65c:	6921      	ldr	r1, [r4, #16]
 801b65e:	3901      	subs	r1, #1
 801b660:	6121      	str	r1, [r4, #16]
 801b662:	3101      	adds	r1, #1
 801b664:	d114      	bne.n	801b690 <validate_structure+0x188>
 801b666:	6963      	ldr	r3, [r4, #20]
 801b668:	1e59      	subs	r1, r3, #1
 801b66a:	078a      	lsls	r2, r1, #30
 801b66c:	e9c4 6104 	strd	r6, r1, [r4, #16]
 801b670:	d117      	bne.n	801b6a2 <validate_structure+0x19a>
 801b672:	fb91 f2f0 	sdiv	r2, r1, r0
 801b676:	fb00 1112 	mls	r1, r0, r2, r1
 801b67a:	b9a1      	cbnz	r1, 801b6a6 <validate_structure+0x19e>
 801b67c:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 801b680:	fb93 f2f5 	sdiv	r2, r3, r5
 801b684:	fb05 3312 	mls	r3, r5, r2, r3
 801b688:	2b00      	cmp	r3, #0
 801b68a:	bf14      	ite	ne
 801b68c:	231c      	movne	r3, #28
 801b68e:	231d      	moveq	r3, #29
 801b690:	6922      	ldr	r2, [r4, #16]
 801b692:	2a01      	cmp	r2, #1
 801b694:	bf14      	ite	ne
 801b696:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 801b69a:	461a      	moveq	r2, r3
 801b69c:	4462      	add	r2, ip
 801b69e:	60e2      	str	r2, [r4, #12]
 801b6a0:	e7a5      	b.n	801b5ee <validate_structure+0xe6>
 801b6a2:	231c      	movs	r3, #28
 801b6a4:	e7f4      	b.n	801b690 <validate_structure+0x188>
 801b6a6:	231d      	movs	r3, #29
 801b6a8:	e7f2      	b.n	801b690 <validate_structure+0x188>
 801b6aa:	231c      	movs	r3, #28
 801b6ac:	e7b0      	b.n	801b610 <validate_structure+0x108>
 801b6ae:	231d      	movs	r3, #29
 801b6b0:	e7ae      	b.n	801b610 <validate_structure+0x108>
 801b6b2:	bf00      	nop
 801b6b4:	080231a8 	.word	0x080231a8

0801b6b8 <mktime>:
 801b6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6bc:	b08b      	sub	sp, #44	; 0x2c
 801b6be:	4605      	mov	r5, r0
 801b6c0:	f004 f888 	bl	801f7d4 <__gettzinfo>
 801b6c4:	4607      	mov	r7, r0
 801b6c6:	4628      	mov	r0, r5
 801b6c8:	f7ff ff1e 	bl	801b508 <validate_structure>
 801b6cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b6d0:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 801b6d4:	68a8      	ldr	r0, [r5, #8]
 801b6d6:	696e      	ldr	r6, [r5, #20]
 801b6d8:	fb0a 2303 	mla	r3, sl, r3, r2
 801b6dc:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 801b6e0:	fb0a 3a00 	mla	sl, sl, r0, r3
 801b6e4:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 801b6e8:	4ac3      	ldr	r2, [pc, #780]	; (801b9f8 <mktime+0x340>)
 801b6ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801b6ee:	3c01      	subs	r4, #1
 801b6f0:	2b01      	cmp	r3, #1
 801b6f2:	4414      	add	r4, r2
 801b6f4:	dd11      	ble.n	801b71a <mktime+0x62>
 801b6f6:	07b1      	lsls	r1, r6, #30
 801b6f8:	d10f      	bne.n	801b71a <mktime+0x62>
 801b6fa:	2264      	movs	r2, #100	; 0x64
 801b6fc:	fb96 f3f2 	sdiv	r3, r6, r2
 801b700:	fb02 6313 	mls	r3, r2, r3, r6
 801b704:	b943      	cbnz	r3, 801b718 <mktime+0x60>
 801b706:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 801b70a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801b70e:	fb91 f3f2 	sdiv	r3, r1, r2
 801b712:	fb02 1313 	mls	r3, r2, r3, r1
 801b716:	b903      	cbnz	r3, 801b71a <mktime+0x62>
 801b718:	3401      	adds	r4, #1
 801b71a:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 801b71e:	3310      	adds	r3, #16
 801b720:	f644 6220 	movw	r2, #20000	; 0x4e20
 801b724:	4293      	cmp	r3, r2
 801b726:	61ec      	str	r4, [r5, #28]
 801b728:	f200 8161 	bhi.w	801b9ee <mktime+0x336>
 801b72c:	2e46      	cmp	r6, #70	; 0x46
 801b72e:	dd77      	ble.n	801b820 <mktime+0x168>
 801b730:	2346      	movs	r3, #70	; 0x46
 801b732:	f240 1e6d 	movw	lr, #365	; 0x16d
 801b736:	2164      	movs	r1, #100	; 0x64
 801b738:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801b73c:	079a      	lsls	r2, r3, #30
 801b73e:	d169      	bne.n	801b814 <mktime+0x15c>
 801b740:	fb93 f2f1 	sdiv	r2, r3, r1
 801b744:	fb01 3212 	mls	r2, r1, r2, r3
 801b748:	2a00      	cmp	r2, #0
 801b74a:	d166      	bne.n	801b81a <mktime+0x162>
 801b74c:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801b750:	fb9c f2f0 	sdiv	r2, ip, r0
 801b754:	fb00 c212 	mls	r2, r0, r2, ip
 801b758:	2a00      	cmp	r2, #0
 801b75a:	bf14      	ite	ne
 801b75c:	4672      	movne	r2, lr
 801b75e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801b762:	3301      	adds	r3, #1
 801b764:	429e      	cmp	r6, r3
 801b766:	4414      	add	r4, r2
 801b768:	d1e8      	bne.n	801b73c <mktime+0x84>
 801b76a:	4ba4      	ldr	r3, [pc, #656]	; (801b9fc <mktime+0x344>)
 801b76c:	ea4f 7bea 	mov.w	fp, sl, asr #31
 801b770:	fbc3 ab04 	smlal	sl, fp, r3, r4
 801b774:	f002 fa54 	bl	801dc20 <__tz_lock>
 801b778:	f002 fa5e 	bl	801dc38 <_tzset_unlocked>
 801b77c:	4ba0      	ldr	r3, [pc, #640]	; (801ba00 <mktime+0x348>)
 801b77e:	f8d3 9000 	ldr.w	r9, [r3]
 801b782:	f1b9 0f00 	cmp.w	r9, #0
 801b786:	d03f      	beq.n	801b808 <mktime+0x150>
 801b788:	f8d5 9020 	ldr.w	r9, [r5, #32]
 801b78c:	6968      	ldr	r0, [r5, #20]
 801b78e:	687b      	ldr	r3, [r7, #4]
 801b790:	f1b9 0f01 	cmp.w	r9, #1
 801b794:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801b798:	46c8      	mov	r8, r9
 801b79a:	bfa8      	it	ge
 801b79c:	f04f 0801 	movge.w	r8, #1
 801b7a0:	4283      	cmp	r3, r0
 801b7a2:	d17f      	bne.n	801b8a4 <mktime+0x1ec>
 801b7a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b7a6:	4619      	mov	r1, r3
 801b7a8:	17da      	asrs	r2, r3, #31
 801b7aa:	e9cd 1200 	strd	r1, r2, [sp]
 801b7ae:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 801b7b2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801b7b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b7ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b7bc:	1a80      	subs	r0, r0, r2
 801b7be:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 801b7c2:	4582      	cmp	sl, r0
 801b7c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b7c8:	eb7b 0101 	sbcs.w	r1, fp, r1
 801b7cc:	da71      	bge.n	801b8b2 <mktime+0x1fa>
 801b7ce:	9800      	ldr	r0, [sp, #0]
 801b7d0:	6a39      	ldr	r1, [r7, #32]
 801b7d2:	1a09      	subs	r1, r1, r0
 801b7d4:	9104      	str	r1, [sp, #16]
 801b7d6:	9801      	ldr	r0, [sp, #4]
 801b7d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b7da:	eb61 0100 	sbc.w	r1, r1, r0
 801b7de:	9105      	str	r1, [sp, #20]
 801b7e0:	6839      	ldr	r1, [r7, #0]
 801b7e2:	2900      	cmp	r1, #0
 801b7e4:	d075      	beq.n	801b8d2 <mktime+0x21a>
 801b7e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b7ea:	4582      	cmp	sl, r0
 801b7ec:	eb7b 0101 	sbcs.w	r1, fp, r1
 801b7f0:	db05      	blt.n	801b7fe <mktime+0x146>
 801b7f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b7f6:	4582      	cmp	sl, r0
 801b7f8:	eb7b 0101 	sbcs.w	r1, fp, r1
 801b7fc:	db6f      	blt.n	801b8de <mktime+0x226>
 801b7fe:	f1b9 0f00 	cmp.w	r9, #0
 801b802:	f04f 0900 	mov.w	r9, #0
 801b806:	da6f      	bge.n	801b8e8 <mktime+0x230>
 801b808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b80a:	eb1a 0a03 	adds.w	sl, sl, r3
 801b80e:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801b812:	e0ae      	b.n	801b972 <mktime+0x2ba>
 801b814:	f240 126d 	movw	r2, #365	; 0x16d
 801b818:	e7a3      	b.n	801b762 <mktime+0xaa>
 801b81a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801b81e:	e7a0      	b.n	801b762 <mktime+0xaa>
 801b820:	d0a3      	beq.n	801b76a <mktime+0xb2>
 801b822:	2345      	movs	r3, #69	; 0x45
 801b824:	f240 1e6d 	movw	lr, #365	; 0x16d
 801b828:	2164      	movs	r1, #100	; 0x64
 801b82a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801b82e:	e012      	b.n	801b856 <mktime+0x19e>
 801b830:	bb62      	cbnz	r2, 801b88c <mktime+0x1d4>
 801b832:	fb93 f2f1 	sdiv	r2, r3, r1
 801b836:	fb01 3212 	mls	r2, r1, r2, r3
 801b83a:	bb52      	cbnz	r2, 801b892 <mktime+0x1da>
 801b83c:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801b840:	fb9c f2f0 	sdiv	r2, ip, r0
 801b844:	fb00 c212 	mls	r2, r0, r2, ip
 801b848:	2a00      	cmp	r2, #0
 801b84a:	bf14      	ite	ne
 801b84c:	4672      	movne	r2, lr
 801b84e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801b852:	1aa4      	subs	r4, r4, r2
 801b854:	3b01      	subs	r3, #1
 801b856:	429e      	cmp	r6, r3
 801b858:	f003 0203 	and.w	r2, r3, #3
 801b85c:	dbe8      	blt.n	801b830 <mktime+0x178>
 801b85e:	b9da      	cbnz	r2, 801b898 <mktime+0x1e0>
 801b860:	2264      	movs	r2, #100	; 0x64
 801b862:	fb96 f3f2 	sdiv	r3, r6, r2
 801b866:	fb02 6313 	mls	r3, r2, r3, r6
 801b86a:	b9c3      	cbnz	r3, 801b89e <mktime+0x1e6>
 801b86c:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 801b870:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801b874:	fb91 f3f2 	sdiv	r3, r1, r2
 801b878:	fb02 1313 	mls	r3, r2, r3, r1
 801b87c:	2b00      	cmp	r3, #0
 801b87e:	f240 136d 	movw	r3, #365	; 0x16d
 801b882:	bf08      	it	eq
 801b884:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 801b888:	1ae4      	subs	r4, r4, r3
 801b88a:	e76e      	b.n	801b76a <mktime+0xb2>
 801b88c:	f240 126d 	movw	r2, #365	; 0x16d
 801b890:	e7df      	b.n	801b852 <mktime+0x19a>
 801b892:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801b896:	e7dc      	b.n	801b852 <mktime+0x19a>
 801b898:	f240 136d 	movw	r3, #365	; 0x16d
 801b89c:	e7f4      	b.n	801b888 <mktime+0x1d0>
 801b89e:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 801b8a2:	e7f1      	b.n	801b888 <mktime+0x1d0>
 801b8a4:	f002 f914 	bl	801dad0 <__tzcalc_limits>
 801b8a8:	2800      	cmp	r0, #0
 801b8aa:	f47f af7b 	bne.w	801b7a4 <mktime+0xec>
 801b8ae:	46c1      	mov	r9, r8
 801b8b0:	e054      	b.n	801b95c <mktime+0x2a4>
 801b8b2:	9800      	ldr	r0, [sp, #0]
 801b8b4:	9902      	ldr	r1, [sp, #8]
 801b8b6:	1a09      	subs	r1, r1, r0
 801b8b8:	9108      	str	r1, [sp, #32]
 801b8ba:	9801      	ldr	r0, [sp, #4]
 801b8bc:	9903      	ldr	r1, [sp, #12]
 801b8be:	eb61 0100 	sbc.w	r1, r1, r0
 801b8c2:	9109      	str	r1, [sp, #36]	; 0x24
 801b8c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b8c8:	4582      	cmp	sl, r0
 801b8ca:	eb7b 0101 	sbcs.w	r1, fp, r1
 801b8ce:	dbee      	blt.n	801b8ae <mktime+0x1f6>
 801b8d0:	e77d      	b.n	801b7ce <mktime+0x116>
 801b8d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b8d6:	4582      	cmp	sl, r0
 801b8d8:	eb7b 0101 	sbcs.w	r1, fp, r1
 801b8dc:	db89      	blt.n	801b7f2 <mktime+0x13a>
 801b8de:	f1b9 0f00 	cmp.w	r9, #0
 801b8e2:	db3f      	blt.n	801b964 <mktime+0x2ac>
 801b8e4:	f04f 0901 	mov.w	r9, #1
 801b8e8:	ea88 0809 	eor.w	r8, r8, r9
 801b8ec:	f1b8 0f01 	cmp.w	r8, #1
 801b8f0:	d134      	bne.n	801b95c <mktime+0x2a4>
 801b8f2:	f1b9 0f00 	cmp.w	r9, #0
 801b8f6:	d04f      	beq.n	801b998 <mktime+0x2e0>
 801b8f8:	1ad3      	subs	r3, r2, r3
 801b8fa:	682a      	ldr	r2, [r5, #0]
 801b8fc:	f8d5 800c 	ldr.w	r8, [r5, #12]
 801b900:	441a      	add	r2, r3
 801b902:	eb1a 0a03 	adds.w	sl, sl, r3
 801b906:	602a      	str	r2, [r5, #0]
 801b908:	4628      	mov	r0, r5
 801b90a:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801b90e:	f7ff fdfb 	bl	801b508 <validate_structure>
 801b912:	68ea      	ldr	r2, [r5, #12]
 801b914:	ebb2 0208 	subs.w	r2, r2, r8
 801b918:	d020      	beq.n	801b95c <mktime+0x2a4>
 801b91a:	2a01      	cmp	r2, #1
 801b91c:	dc3e      	bgt.n	801b99c <mktime+0x2e4>
 801b91e:	1c90      	adds	r0, r2, #2
 801b920:	bfd8      	it	le
 801b922:	2201      	movle	r2, #1
 801b924:	69eb      	ldr	r3, [r5, #28]
 801b926:	18d3      	adds	r3, r2, r3
 801b928:	4414      	add	r4, r2
 801b92a:	d540      	bpl.n	801b9ae <mktime+0x2f6>
 801b92c:	1e72      	subs	r2, r6, #1
 801b92e:	0791      	lsls	r1, r2, #30
 801b930:	d137      	bne.n	801b9a2 <mktime+0x2ea>
 801b932:	2164      	movs	r1, #100	; 0x64
 801b934:	fb92 f3f1 	sdiv	r3, r2, r1
 801b938:	fb01 2313 	mls	r3, r1, r3, r2
 801b93c:	bba3      	cbnz	r3, 801b9a8 <mktime+0x2f0>
 801b93e:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 801b942:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801b946:	fb96 f3f2 	sdiv	r3, r6, r2
 801b94a:	fb02 6613 	mls	r6, r2, r3, r6
 801b94e:	2e00      	cmp	r6, #0
 801b950:	f240 136d 	movw	r3, #365	; 0x16d
 801b954:	bf18      	it	ne
 801b956:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 801b95a:	61eb      	str	r3, [r5, #28]
 801b95c:	f1b9 0f01 	cmp.w	r9, #1
 801b960:	f47f af52 	bne.w	801b808 <mktime+0x150>
 801b964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b966:	eb1a 0a03 	adds.w	sl, sl, r3
 801b96a:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801b96e:	f04f 0901 	mov.w	r9, #1
 801b972:	f002 f95b 	bl	801dc2c <__tz_unlock>
 801b976:	3404      	adds	r4, #4
 801b978:	2307      	movs	r3, #7
 801b97a:	fb94 f3f3 	sdiv	r3, r4, r3
 801b97e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801b982:	1ae4      	subs	r4, r4, r3
 801b984:	bf48      	it	mi
 801b986:	3407      	addmi	r4, #7
 801b988:	f8c5 9020 	str.w	r9, [r5, #32]
 801b98c:	61ac      	str	r4, [r5, #24]
 801b98e:	4650      	mov	r0, sl
 801b990:	4659      	mov	r1, fp
 801b992:	b00b      	add	sp, #44	; 0x2c
 801b994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b998:	1a9b      	subs	r3, r3, r2
 801b99a:	e7ae      	b.n	801b8fa <mktime+0x242>
 801b99c:	f04f 32ff 	mov.w	r2, #4294967295
 801b9a0:	e7c0      	b.n	801b924 <mktime+0x26c>
 801b9a2:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 801b9a6:	e7d8      	b.n	801b95a <mktime+0x2a2>
 801b9a8:	f240 136d 	movw	r3, #365	; 0x16d
 801b9ac:	e7d5      	b.n	801b95a <mktime+0x2a2>
 801b9ae:	07b2      	lsls	r2, r6, #30
 801b9b0:	d117      	bne.n	801b9e2 <mktime+0x32a>
 801b9b2:	2164      	movs	r1, #100	; 0x64
 801b9b4:	fb96 f2f1 	sdiv	r2, r6, r1
 801b9b8:	fb01 6212 	mls	r2, r1, r2, r6
 801b9bc:	b9a2      	cbnz	r2, 801b9e8 <mktime+0x330>
 801b9be:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 801b9c2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801b9c6:	fb96 f2f1 	sdiv	r2, r6, r1
 801b9ca:	fb01 6612 	mls	r6, r1, r2, r6
 801b9ce:	2e00      	cmp	r6, #0
 801b9d0:	f240 126d 	movw	r2, #365	; 0x16d
 801b9d4:	bf08      	it	eq
 801b9d6:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801b9da:	4293      	cmp	r3, r2
 801b9dc:	bfa8      	it	ge
 801b9de:	1a9b      	subge	r3, r3, r2
 801b9e0:	e7bb      	b.n	801b95a <mktime+0x2a2>
 801b9e2:	f240 126d 	movw	r2, #365	; 0x16d
 801b9e6:	e7f8      	b.n	801b9da <mktime+0x322>
 801b9e8:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801b9ec:	e7f5      	b.n	801b9da <mktime+0x322>
 801b9ee:	f04f 3aff 	mov.w	sl, #4294967295
 801b9f2:	f04f 3bff 	mov.w	fp, #4294967295
 801b9f6:	e7ca      	b.n	801b98e <mktime+0x2d6>
 801b9f8:	080231d8 	.word	0x080231d8
 801b9fc:	00015180 	.word	0x00015180
 801ba00:	20005ed0 	.word	0x20005ed0

0801ba04 <_free_r>:
 801ba04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ba06:	2900      	cmp	r1, #0
 801ba08:	d048      	beq.n	801ba9c <_free_r+0x98>
 801ba0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ba0e:	9001      	str	r0, [sp, #4]
 801ba10:	2b00      	cmp	r3, #0
 801ba12:	f1a1 0404 	sub.w	r4, r1, #4
 801ba16:	bfb8      	it	lt
 801ba18:	18e4      	addlt	r4, r4, r3
 801ba1a:	f004 f81b 	bl	801fa54 <__malloc_lock>
 801ba1e:	4a20      	ldr	r2, [pc, #128]	; (801baa0 <_free_r+0x9c>)
 801ba20:	9801      	ldr	r0, [sp, #4]
 801ba22:	6813      	ldr	r3, [r2, #0]
 801ba24:	4615      	mov	r5, r2
 801ba26:	b933      	cbnz	r3, 801ba36 <_free_r+0x32>
 801ba28:	6063      	str	r3, [r4, #4]
 801ba2a:	6014      	str	r4, [r2, #0]
 801ba2c:	b003      	add	sp, #12
 801ba2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ba32:	f004 b815 	b.w	801fa60 <__malloc_unlock>
 801ba36:	42a3      	cmp	r3, r4
 801ba38:	d90b      	bls.n	801ba52 <_free_r+0x4e>
 801ba3a:	6821      	ldr	r1, [r4, #0]
 801ba3c:	1862      	adds	r2, r4, r1
 801ba3e:	4293      	cmp	r3, r2
 801ba40:	bf04      	itt	eq
 801ba42:	681a      	ldreq	r2, [r3, #0]
 801ba44:	685b      	ldreq	r3, [r3, #4]
 801ba46:	6063      	str	r3, [r4, #4]
 801ba48:	bf04      	itt	eq
 801ba4a:	1852      	addeq	r2, r2, r1
 801ba4c:	6022      	streq	r2, [r4, #0]
 801ba4e:	602c      	str	r4, [r5, #0]
 801ba50:	e7ec      	b.n	801ba2c <_free_r+0x28>
 801ba52:	461a      	mov	r2, r3
 801ba54:	685b      	ldr	r3, [r3, #4]
 801ba56:	b10b      	cbz	r3, 801ba5c <_free_r+0x58>
 801ba58:	42a3      	cmp	r3, r4
 801ba5a:	d9fa      	bls.n	801ba52 <_free_r+0x4e>
 801ba5c:	6811      	ldr	r1, [r2, #0]
 801ba5e:	1855      	adds	r5, r2, r1
 801ba60:	42a5      	cmp	r5, r4
 801ba62:	d10b      	bne.n	801ba7c <_free_r+0x78>
 801ba64:	6824      	ldr	r4, [r4, #0]
 801ba66:	4421      	add	r1, r4
 801ba68:	1854      	adds	r4, r2, r1
 801ba6a:	42a3      	cmp	r3, r4
 801ba6c:	6011      	str	r1, [r2, #0]
 801ba6e:	d1dd      	bne.n	801ba2c <_free_r+0x28>
 801ba70:	681c      	ldr	r4, [r3, #0]
 801ba72:	685b      	ldr	r3, [r3, #4]
 801ba74:	6053      	str	r3, [r2, #4]
 801ba76:	4421      	add	r1, r4
 801ba78:	6011      	str	r1, [r2, #0]
 801ba7a:	e7d7      	b.n	801ba2c <_free_r+0x28>
 801ba7c:	d902      	bls.n	801ba84 <_free_r+0x80>
 801ba7e:	230c      	movs	r3, #12
 801ba80:	6003      	str	r3, [r0, #0]
 801ba82:	e7d3      	b.n	801ba2c <_free_r+0x28>
 801ba84:	6825      	ldr	r5, [r4, #0]
 801ba86:	1961      	adds	r1, r4, r5
 801ba88:	428b      	cmp	r3, r1
 801ba8a:	bf04      	itt	eq
 801ba8c:	6819      	ldreq	r1, [r3, #0]
 801ba8e:	685b      	ldreq	r3, [r3, #4]
 801ba90:	6063      	str	r3, [r4, #4]
 801ba92:	bf04      	itt	eq
 801ba94:	1949      	addeq	r1, r1, r5
 801ba96:	6021      	streq	r1, [r4, #0]
 801ba98:	6054      	str	r4, [r2, #4]
 801ba9a:	e7c7      	b.n	801ba2c <_free_r+0x28>
 801ba9c:	b003      	add	sp, #12
 801ba9e:	bd30      	pop	{r4, r5, pc}
 801baa0:	20005eac 	.word	0x20005eac

0801baa4 <_malloc_r>:
 801baa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801baa6:	1ccd      	adds	r5, r1, #3
 801baa8:	f025 0503 	bic.w	r5, r5, #3
 801baac:	3508      	adds	r5, #8
 801baae:	2d0c      	cmp	r5, #12
 801bab0:	bf38      	it	cc
 801bab2:	250c      	movcc	r5, #12
 801bab4:	2d00      	cmp	r5, #0
 801bab6:	4606      	mov	r6, r0
 801bab8:	db01      	blt.n	801babe <_malloc_r+0x1a>
 801baba:	42a9      	cmp	r1, r5
 801babc:	d903      	bls.n	801bac6 <_malloc_r+0x22>
 801babe:	230c      	movs	r3, #12
 801bac0:	6033      	str	r3, [r6, #0]
 801bac2:	2000      	movs	r0, #0
 801bac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bac6:	f003 ffc5 	bl	801fa54 <__malloc_lock>
 801baca:	4921      	ldr	r1, [pc, #132]	; (801bb50 <_malloc_r+0xac>)
 801bacc:	680a      	ldr	r2, [r1, #0]
 801bace:	4614      	mov	r4, r2
 801bad0:	b99c      	cbnz	r4, 801bafa <_malloc_r+0x56>
 801bad2:	4f20      	ldr	r7, [pc, #128]	; (801bb54 <_malloc_r+0xb0>)
 801bad4:	683b      	ldr	r3, [r7, #0]
 801bad6:	b923      	cbnz	r3, 801bae2 <_malloc_r+0x3e>
 801bad8:	4621      	mov	r1, r4
 801bada:	4630      	mov	r0, r6
 801badc:	f000 ffae 	bl	801ca3c <_sbrk_r>
 801bae0:	6038      	str	r0, [r7, #0]
 801bae2:	4629      	mov	r1, r5
 801bae4:	4630      	mov	r0, r6
 801bae6:	f000 ffa9 	bl	801ca3c <_sbrk_r>
 801baea:	1c43      	adds	r3, r0, #1
 801baec:	d123      	bne.n	801bb36 <_malloc_r+0x92>
 801baee:	230c      	movs	r3, #12
 801baf0:	6033      	str	r3, [r6, #0]
 801baf2:	4630      	mov	r0, r6
 801baf4:	f003 ffb4 	bl	801fa60 <__malloc_unlock>
 801baf8:	e7e3      	b.n	801bac2 <_malloc_r+0x1e>
 801bafa:	6823      	ldr	r3, [r4, #0]
 801bafc:	1b5b      	subs	r3, r3, r5
 801bafe:	d417      	bmi.n	801bb30 <_malloc_r+0x8c>
 801bb00:	2b0b      	cmp	r3, #11
 801bb02:	d903      	bls.n	801bb0c <_malloc_r+0x68>
 801bb04:	6023      	str	r3, [r4, #0]
 801bb06:	441c      	add	r4, r3
 801bb08:	6025      	str	r5, [r4, #0]
 801bb0a:	e004      	b.n	801bb16 <_malloc_r+0x72>
 801bb0c:	6863      	ldr	r3, [r4, #4]
 801bb0e:	42a2      	cmp	r2, r4
 801bb10:	bf0c      	ite	eq
 801bb12:	600b      	streq	r3, [r1, #0]
 801bb14:	6053      	strne	r3, [r2, #4]
 801bb16:	4630      	mov	r0, r6
 801bb18:	f003 ffa2 	bl	801fa60 <__malloc_unlock>
 801bb1c:	f104 000b 	add.w	r0, r4, #11
 801bb20:	1d23      	adds	r3, r4, #4
 801bb22:	f020 0007 	bic.w	r0, r0, #7
 801bb26:	1ac2      	subs	r2, r0, r3
 801bb28:	d0cc      	beq.n	801bac4 <_malloc_r+0x20>
 801bb2a:	1a1b      	subs	r3, r3, r0
 801bb2c:	50a3      	str	r3, [r4, r2]
 801bb2e:	e7c9      	b.n	801bac4 <_malloc_r+0x20>
 801bb30:	4622      	mov	r2, r4
 801bb32:	6864      	ldr	r4, [r4, #4]
 801bb34:	e7cc      	b.n	801bad0 <_malloc_r+0x2c>
 801bb36:	1cc4      	adds	r4, r0, #3
 801bb38:	f024 0403 	bic.w	r4, r4, #3
 801bb3c:	42a0      	cmp	r0, r4
 801bb3e:	d0e3      	beq.n	801bb08 <_malloc_r+0x64>
 801bb40:	1a21      	subs	r1, r4, r0
 801bb42:	4630      	mov	r0, r6
 801bb44:	f000 ff7a 	bl	801ca3c <_sbrk_r>
 801bb48:	3001      	adds	r0, #1
 801bb4a:	d1dd      	bne.n	801bb08 <_malloc_r+0x64>
 801bb4c:	e7cf      	b.n	801baee <_malloc_r+0x4a>
 801bb4e:	bf00      	nop
 801bb50:	20005eac 	.word	0x20005eac
 801bb54:	20005eb0 	.word	0x20005eb0

0801bb58 <__cvt>:
 801bb58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bb5c:	ec55 4b10 	vmov	r4, r5, d0
 801bb60:	2d00      	cmp	r5, #0
 801bb62:	460e      	mov	r6, r1
 801bb64:	4619      	mov	r1, r3
 801bb66:	462b      	mov	r3, r5
 801bb68:	bfbb      	ittet	lt
 801bb6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801bb6e:	461d      	movlt	r5, r3
 801bb70:	2300      	movge	r3, #0
 801bb72:	232d      	movlt	r3, #45	; 0x2d
 801bb74:	700b      	strb	r3, [r1, #0]
 801bb76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bb78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801bb7c:	4691      	mov	r9, r2
 801bb7e:	f023 0820 	bic.w	r8, r3, #32
 801bb82:	bfbc      	itt	lt
 801bb84:	4622      	movlt	r2, r4
 801bb86:	4614      	movlt	r4, r2
 801bb88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801bb8c:	d005      	beq.n	801bb9a <__cvt+0x42>
 801bb8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801bb92:	d100      	bne.n	801bb96 <__cvt+0x3e>
 801bb94:	3601      	adds	r6, #1
 801bb96:	2102      	movs	r1, #2
 801bb98:	e000      	b.n	801bb9c <__cvt+0x44>
 801bb9a:	2103      	movs	r1, #3
 801bb9c:	ab03      	add	r3, sp, #12
 801bb9e:	9301      	str	r3, [sp, #4]
 801bba0:	ab02      	add	r3, sp, #8
 801bba2:	9300      	str	r3, [sp, #0]
 801bba4:	ec45 4b10 	vmov	d0, r4, r5
 801bba8:	4653      	mov	r3, sl
 801bbaa:	4632      	mov	r2, r6
 801bbac:	f002 fba0 	bl	801e2f0 <_dtoa_r>
 801bbb0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801bbb4:	4607      	mov	r7, r0
 801bbb6:	d102      	bne.n	801bbbe <__cvt+0x66>
 801bbb8:	f019 0f01 	tst.w	r9, #1
 801bbbc:	d022      	beq.n	801bc04 <__cvt+0xac>
 801bbbe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801bbc2:	eb07 0906 	add.w	r9, r7, r6
 801bbc6:	d110      	bne.n	801bbea <__cvt+0x92>
 801bbc8:	783b      	ldrb	r3, [r7, #0]
 801bbca:	2b30      	cmp	r3, #48	; 0x30
 801bbcc:	d10a      	bne.n	801bbe4 <__cvt+0x8c>
 801bbce:	2200      	movs	r2, #0
 801bbd0:	2300      	movs	r3, #0
 801bbd2:	4620      	mov	r0, r4
 801bbd4:	4629      	mov	r1, r5
 801bbd6:	f7e4 ff97 	bl	8000b08 <__aeabi_dcmpeq>
 801bbda:	b918      	cbnz	r0, 801bbe4 <__cvt+0x8c>
 801bbdc:	f1c6 0601 	rsb	r6, r6, #1
 801bbe0:	f8ca 6000 	str.w	r6, [sl]
 801bbe4:	f8da 3000 	ldr.w	r3, [sl]
 801bbe8:	4499      	add	r9, r3
 801bbea:	2200      	movs	r2, #0
 801bbec:	2300      	movs	r3, #0
 801bbee:	4620      	mov	r0, r4
 801bbf0:	4629      	mov	r1, r5
 801bbf2:	f7e4 ff89 	bl	8000b08 <__aeabi_dcmpeq>
 801bbf6:	b108      	cbz	r0, 801bbfc <__cvt+0xa4>
 801bbf8:	f8cd 900c 	str.w	r9, [sp, #12]
 801bbfc:	2230      	movs	r2, #48	; 0x30
 801bbfe:	9b03      	ldr	r3, [sp, #12]
 801bc00:	454b      	cmp	r3, r9
 801bc02:	d307      	bcc.n	801bc14 <__cvt+0xbc>
 801bc04:	9b03      	ldr	r3, [sp, #12]
 801bc06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bc08:	1bdb      	subs	r3, r3, r7
 801bc0a:	4638      	mov	r0, r7
 801bc0c:	6013      	str	r3, [r2, #0]
 801bc0e:	b004      	add	sp, #16
 801bc10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bc14:	1c59      	adds	r1, r3, #1
 801bc16:	9103      	str	r1, [sp, #12]
 801bc18:	701a      	strb	r2, [r3, #0]
 801bc1a:	e7f0      	b.n	801bbfe <__cvt+0xa6>

0801bc1c <__exponent>:
 801bc1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bc1e:	4603      	mov	r3, r0
 801bc20:	2900      	cmp	r1, #0
 801bc22:	bfb8      	it	lt
 801bc24:	4249      	neglt	r1, r1
 801bc26:	f803 2b02 	strb.w	r2, [r3], #2
 801bc2a:	bfb4      	ite	lt
 801bc2c:	222d      	movlt	r2, #45	; 0x2d
 801bc2e:	222b      	movge	r2, #43	; 0x2b
 801bc30:	2909      	cmp	r1, #9
 801bc32:	7042      	strb	r2, [r0, #1]
 801bc34:	dd2a      	ble.n	801bc8c <__exponent+0x70>
 801bc36:	f10d 0407 	add.w	r4, sp, #7
 801bc3a:	46a4      	mov	ip, r4
 801bc3c:	270a      	movs	r7, #10
 801bc3e:	46a6      	mov	lr, r4
 801bc40:	460a      	mov	r2, r1
 801bc42:	fb91 f6f7 	sdiv	r6, r1, r7
 801bc46:	fb07 1516 	mls	r5, r7, r6, r1
 801bc4a:	3530      	adds	r5, #48	; 0x30
 801bc4c:	2a63      	cmp	r2, #99	; 0x63
 801bc4e:	f104 34ff 	add.w	r4, r4, #4294967295
 801bc52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801bc56:	4631      	mov	r1, r6
 801bc58:	dcf1      	bgt.n	801bc3e <__exponent+0x22>
 801bc5a:	3130      	adds	r1, #48	; 0x30
 801bc5c:	f1ae 0502 	sub.w	r5, lr, #2
 801bc60:	f804 1c01 	strb.w	r1, [r4, #-1]
 801bc64:	1c44      	adds	r4, r0, #1
 801bc66:	4629      	mov	r1, r5
 801bc68:	4561      	cmp	r1, ip
 801bc6a:	d30a      	bcc.n	801bc82 <__exponent+0x66>
 801bc6c:	f10d 0209 	add.w	r2, sp, #9
 801bc70:	eba2 020e 	sub.w	r2, r2, lr
 801bc74:	4565      	cmp	r5, ip
 801bc76:	bf88      	it	hi
 801bc78:	2200      	movhi	r2, #0
 801bc7a:	4413      	add	r3, r2
 801bc7c:	1a18      	subs	r0, r3, r0
 801bc7e:	b003      	add	sp, #12
 801bc80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bc82:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bc86:	f804 2f01 	strb.w	r2, [r4, #1]!
 801bc8a:	e7ed      	b.n	801bc68 <__exponent+0x4c>
 801bc8c:	2330      	movs	r3, #48	; 0x30
 801bc8e:	3130      	adds	r1, #48	; 0x30
 801bc90:	7083      	strb	r3, [r0, #2]
 801bc92:	70c1      	strb	r1, [r0, #3]
 801bc94:	1d03      	adds	r3, r0, #4
 801bc96:	e7f1      	b.n	801bc7c <__exponent+0x60>

0801bc98 <_printf_float>:
 801bc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc9c:	ed2d 8b02 	vpush	{d8}
 801bca0:	b08d      	sub	sp, #52	; 0x34
 801bca2:	460c      	mov	r4, r1
 801bca4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801bca8:	4616      	mov	r6, r2
 801bcaa:	461f      	mov	r7, r3
 801bcac:	4605      	mov	r5, r0
 801bcae:	f003 fe45 	bl	801f93c <_localeconv_r>
 801bcb2:	f8d0 a000 	ldr.w	sl, [r0]
 801bcb6:	4650      	mov	r0, sl
 801bcb8:	f7e4 faa4 	bl	8000204 <strlen>
 801bcbc:	2300      	movs	r3, #0
 801bcbe:	930a      	str	r3, [sp, #40]	; 0x28
 801bcc0:	6823      	ldr	r3, [r4, #0]
 801bcc2:	9305      	str	r3, [sp, #20]
 801bcc4:	f8d8 3000 	ldr.w	r3, [r8]
 801bcc8:	f894 b018 	ldrb.w	fp, [r4, #24]
 801bccc:	3307      	adds	r3, #7
 801bcce:	f023 0307 	bic.w	r3, r3, #7
 801bcd2:	f103 0208 	add.w	r2, r3, #8
 801bcd6:	f8c8 2000 	str.w	r2, [r8]
 801bcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcde:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801bce2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801bce6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801bcea:	9307      	str	r3, [sp, #28]
 801bcec:	f8cd 8018 	str.w	r8, [sp, #24]
 801bcf0:	ee08 0a10 	vmov	s16, r0
 801bcf4:	4b9f      	ldr	r3, [pc, #636]	; (801bf74 <_printf_float+0x2dc>)
 801bcf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bcfa:	f04f 32ff 	mov.w	r2, #4294967295
 801bcfe:	f7e4 ff35 	bl	8000b6c <__aeabi_dcmpun>
 801bd02:	bb88      	cbnz	r0, 801bd68 <_printf_float+0xd0>
 801bd04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bd08:	4b9a      	ldr	r3, [pc, #616]	; (801bf74 <_printf_float+0x2dc>)
 801bd0a:	f04f 32ff 	mov.w	r2, #4294967295
 801bd0e:	f7e4 ff0f 	bl	8000b30 <__aeabi_dcmple>
 801bd12:	bb48      	cbnz	r0, 801bd68 <_printf_float+0xd0>
 801bd14:	2200      	movs	r2, #0
 801bd16:	2300      	movs	r3, #0
 801bd18:	4640      	mov	r0, r8
 801bd1a:	4649      	mov	r1, r9
 801bd1c:	f7e4 fefe 	bl	8000b1c <__aeabi_dcmplt>
 801bd20:	b110      	cbz	r0, 801bd28 <_printf_float+0x90>
 801bd22:	232d      	movs	r3, #45	; 0x2d
 801bd24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bd28:	4b93      	ldr	r3, [pc, #588]	; (801bf78 <_printf_float+0x2e0>)
 801bd2a:	4894      	ldr	r0, [pc, #592]	; (801bf7c <_printf_float+0x2e4>)
 801bd2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801bd30:	bf94      	ite	ls
 801bd32:	4698      	movls	r8, r3
 801bd34:	4680      	movhi	r8, r0
 801bd36:	2303      	movs	r3, #3
 801bd38:	6123      	str	r3, [r4, #16]
 801bd3a:	9b05      	ldr	r3, [sp, #20]
 801bd3c:	f023 0204 	bic.w	r2, r3, #4
 801bd40:	6022      	str	r2, [r4, #0]
 801bd42:	f04f 0900 	mov.w	r9, #0
 801bd46:	9700      	str	r7, [sp, #0]
 801bd48:	4633      	mov	r3, r6
 801bd4a:	aa0b      	add	r2, sp, #44	; 0x2c
 801bd4c:	4621      	mov	r1, r4
 801bd4e:	4628      	mov	r0, r5
 801bd50:	f000 f9d8 	bl	801c104 <_printf_common>
 801bd54:	3001      	adds	r0, #1
 801bd56:	f040 8090 	bne.w	801be7a <_printf_float+0x1e2>
 801bd5a:	f04f 30ff 	mov.w	r0, #4294967295
 801bd5e:	b00d      	add	sp, #52	; 0x34
 801bd60:	ecbd 8b02 	vpop	{d8}
 801bd64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd68:	4642      	mov	r2, r8
 801bd6a:	464b      	mov	r3, r9
 801bd6c:	4640      	mov	r0, r8
 801bd6e:	4649      	mov	r1, r9
 801bd70:	f7e4 fefc 	bl	8000b6c <__aeabi_dcmpun>
 801bd74:	b140      	cbz	r0, 801bd88 <_printf_float+0xf0>
 801bd76:	464b      	mov	r3, r9
 801bd78:	2b00      	cmp	r3, #0
 801bd7a:	bfbc      	itt	lt
 801bd7c:	232d      	movlt	r3, #45	; 0x2d
 801bd7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801bd82:	487f      	ldr	r0, [pc, #508]	; (801bf80 <_printf_float+0x2e8>)
 801bd84:	4b7f      	ldr	r3, [pc, #508]	; (801bf84 <_printf_float+0x2ec>)
 801bd86:	e7d1      	b.n	801bd2c <_printf_float+0x94>
 801bd88:	6863      	ldr	r3, [r4, #4]
 801bd8a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801bd8e:	9206      	str	r2, [sp, #24]
 801bd90:	1c5a      	adds	r2, r3, #1
 801bd92:	d13f      	bne.n	801be14 <_printf_float+0x17c>
 801bd94:	2306      	movs	r3, #6
 801bd96:	6063      	str	r3, [r4, #4]
 801bd98:	9b05      	ldr	r3, [sp, #20]
 801bd9a:	6861      	ldr	r1, [r4, #4]
 801bd9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801bda0:	2300      	movs	r3, #0
 801bda2:	9303      	str	r3, [sp, #12]
 801bda4:	ab0a      	add	r3, sp, #40	; 0x28
 801bda6:	e9cd b301 	strd	fp, r3, [sp, #4]
 801bdaa:	ab09      	add	r3, sp, #36	; 0x24
 801bdac:	ec49 8b10 	vmov	d0, r8, r9
 801bdb0:	9300      	str	r3, [sp, #0]
 801bdb2:	6022      	str	r2, [r4, #0]
 801bdb4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801bdb8:	4628      	mov	r0, r5
 801bdba:	f7ff fecd 	bl	801bb58 <__cvt>
 801bdbe:	9b06      	ldr	r3, [sp, #24]
 801bdc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bdc2:	2b47      	cmp	r3, #71	; 0x47
 801bdc4:	4680      	mov	r8, r0
 801bdc6:	d108      	bne.n	801bdda <_printf_float+0x142>
 801bdc8:	1cc8      	adds	r0, r1, #3
 801bdca:	db02      	blt.n	801bdd2 <_printf_float+0x13a>
 801bdcc:	6863      	ldr	r3, [r4, #4]
 801bdce:	4299      	cmp	r1, r3
 801bdd0:	dd41      	ble.n	801be56 <_printf_float+0x1be>
 801bdd2:	f1ab 0b02 	sub.w	fp, fp, #2
 801bdd6:	fa5f fb8b 	uxtb.w	fp, fp
 801bdda:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801bdde:	d820      	bhi.n	801be22 <_printf_float+0x18a>
 801bde0:	3901      	subs	r1, #1
 801bde2:	465a      	mov	r2, fp
 801bde4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801bde8:	9109      	str	r1, [sp, #36]	; 0x24
 801bdea:	f7ff ff17 	bl	801bc1c <__exponent>
 801bdee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bdf0:	1813      	adds	r3, r2, r0
 801bdf2:	2a01      	cmp	r2, #1
 801bdf4:	4681      	mov	r9, r0
 801bdf6:	6123      	str	r3, [r4, #16]
 801bdf8:	dc02      	bgt.n	801be00 <_printf_float+0x168>
 801bdfa:	6822      	ldr	r2, [r4, #0]
 801bdfc:	07d2      	lsls	r2, r2, #31
 801bdfe:	d501      	bpl.n	801be04 <_printf_float+0x16c>
 801be00:	3301      	adds	r3, #1
 801be02:	6123      	str	r3, [r4, #16]
 801be04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801be08:	2b00      	cmp	r3, #0
 801be0a:	d09c      	beq.n	801bd46 <_printf_float+0xae>
 801be0c:	232d      	movs	r3, #45	; 0x2d
 801be0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801be12:	e798      	b.n	801bd46 <_printf_float+0xae>
 801be14:	9a06      	ldr	r2, [sp, #24]
 801be16:	2a47      	cmp	r2, #71	; 0x47
 801be18:	d1be      	bne.n	801bd98 <_printf_float+0x100>
 801be1a:	2b00      	cmp	r3, #0
 801be1c:	d1bc      	bne.n	801bd98 <_printf_float+0x100>
 801be1e:	2301      	movs	r3, #1
 801be20:	e7b9      	b.n	801bd96 <_printf_float+0xfe>
 801be22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801be26:	d118      	bne.n	801be5a <_printf_float+0x1c2>
 801be28:	2900      	cmp	r1, #0
 801be2a:	6863      	ldr	r3, [r4, #4]
 801be2c:	dd0b      	ble.n	801be46 <_printf_float+0x1ae>
 801be2e:	6121      	str	r1, [r4, #16]
 801be30:	b913      	cbnz	r3, 801be38 <_printf_float+0x1a0>
 801be32:	6822      	ldr	r2, [r4, #0]
 801be34:	07d0      	lsls	r0, r2, #31
 801be36:	d502      	bpl.n	801be3e <_printf_float+0x1a6>
 801be38:	3301      	adds	r3, #1
 801be3a:	440b      	add	r3, r1
 801be3c:	6123      	str	r3, [r4, #16]
 801be3e:	65a1      	str	r1, [r4, #88]	; 0x58
 801be40:	f04f 0900 	mov.w	r9, #0
 801be44:	e7de      	b.n	801be04 <_printf_float+0x16c>
 801be46:	b913      	cbnz	r3, 801be4e <_printf_float+0x1b6>
 801be48:	6822      	ldr	r2, [r4, #0]
 801be4a:	07d2      	lsls	r2, r2, #31
 801be4c:	d501      	bpl.n	801be52 <_printf_float+0x1ba>
 801be4e:	3302      	adds	r3, #2
 801be50:	e7f4      	b.n	801be3c <_printf_float+0x1a4>
 801be52:	2301      	movs	r3, #1
 801be54:	e7f2      	b.n	801be3c <_printf_float+0x1a4>
 801be56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801be5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801be5c:	4299      	cmp	r1, r3
 801be5e:	db05      	blt.n	801be6c <_printf_float+0x1d4>
 801be60:	6823      	ldr	r3, [r4, #0]
 801be62:	6121      	str	r1, [r4, #16]
 801be64:	07d8      	lsls	r0, r3, #31
 801be66:	d5ea      	bpl.n	801be3e <_printf_float+0x1a6>
 801be68:	1c4b      	adds	r3, r1, #1
 801be6a:	e7e7      	b.n	801be3c <_printf_float+0x1a4>
 801be6c:	2900      	cmp	r1, #0
 801be6e:	bfd4      	ite	le
 801be70:	f1c1 0202 	rsble	r2, r1, #2
 801be74:	2201      	movgt	r2, #1
 801be76:	4413      	add	r3, r2
 801be78:	e7e0      	b.n	801be3c <_printf_float+0x1a4>
 801be7a:	6823      	ldr	r3, [r4, #0]
 801be7c:	055a      	lsls	r2, r3, #21
 801be7e:	d407      	bmi.n	801be90 <_printf_float+0x1f8>
 801be80:	6923      	ldr	r3, [r4, #16]
 801be82:	4642      	mov	r2, r8
 801be84:	4631      	mov	r1, r6
 801be86:	4628      	mov	r0, r5
 801be88:	47b8      	blx	r7
 801be8a:	3001      	adds	r0, #1
 801be8c:	d12c      	bne.n	801bee8 <_printf_float+0x250>
 801be8e:	e764      	b.n	801bd5a <_printf_float+0xc2>
 801be90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801be94:	f240 80e0 	bls.w	801c058 <_printf_float+0x3c0>
 801be98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801be9c:	2200      	movs	r2, #0
 801be9e:	2300      	movs	r3, #0
 801bea0:	f7e4 fe32 	bl	8000b08 <__aeabi_dcmpeq>
 801bea4:	2800      	cmp	r0, #0
 801bea6:	d034      	beq.n	801bf12 <_printf_float+0x27a>
 801bea8:	4a37      	ldr	r2, [pc, #220]	; (801bf88 <_printf_float+0x2f0>)
 801beaa:	2301      	movs	r3, #1
 801beac:	4631      	mov	r1, r6
 801beae:	4628      	mov	r0, r5
 801beb0:	47b8      	blx	r7
 801beb2:	3001      	adds	r0, #1
 801beb4:	f43f af51 	beq.w	801bd5a <_printf_float+0xc2>
 801beb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801bebc:	429a      	cmp	r2, r3
 801bebe:	db02      	blt.n	801bec6 <_printf_float+0x22e>
 801bec0:	6823      	ldr	r3, [r4, #0]
 801bec2:	07d8      	lsls	r0, r3, #31
 801bec4:	d510      	bpl.n	801bee8 <_printf_float+0x250>
 801bec6:	ee18 3a10 	vmov	r3, s16
 801beca:	4652      	mov	r2, sl
 801becc:	4631      	mov	r1, r6
 801bece:	4628      	mov	r0, r5
 801bed0:	47b8      	blx	r7
 801bed2:	3001      	adds	r0, #1
 801bed4:	f43f af41 	beq.w	801bd5a <_printf_float+0xc2>
 801bed8:	f04f 0800 	mov.w	r8, #0
 801bedc:	f104 091a 	add.w	r9, r4, #26
 801bee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bee2:	3b01      	subs	r3, #1
 801bee4:	4543      	cmp	r3, r8
 801bee6:	dc09      	bgt.n	801befc <_printf_float+0x264>
 801bee8:	6823      	ldr	r3, [r4, #0]
 801beea:	079b      	lsls	r3, r3, #30
 801beec:	f100 8105 	bmi.w	801c0fa <_printf_float+0x462>
 801bef0:	68e0      	ldr	r0, [r4, #12]
 801bef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bef4:	4298      	cmp	r0, r3
 801bef6:	bfb8      	it	lt
 801bef8:	4618      	movlt	r0, r3
 801befa:	e730      	b.n	801bd5e <_printf_float+0xc6>
 801befc:	2301      	movs	r3, #1
 801befe:	464a      	mov	r2, r9
 801bf00:	4631      	mov	r1, r6
 801bf02:	4628      	mov	r0, r5
 801bf04:	47b8      	blx	r7
 801bf06:	3001      	adds	r0, #1
 801bf08:	f43f af27 	beq.w	801bd5a <_printf_float+0xc2>
 801bf0c:	f108 0801 	add.w	r8, r8, #1
 801bf10:	e7e6      	b.n	801bee0 <_printf_float+0x248>
 801bf12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf14:	2b00      	cmp	r3, #0
 801bf16:	dc39      	bgt.n	801bf8c <_printf_float+0x2f4>
 801bf18:	4a1b      	ldr	r2, [pc, #108]	; (801bf88 <_printf_float+0x2f0>)
 801bf1a:	2301      	movs	r3, #1
 801bf1c:	4631      	mov	r1, r6
 801bf1e:	4628      	mov	r0, r5
 801bf20:	47b8      	blx	r7
 801bf22:	3001      	adds	r0, #1
 801bf24:	f43f af19 	beq.w	801bd5a <_printf_float+0xc2>
 801bf28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801bf2c:	4313      	orrs	r3, r2
 801bf2e:	d102      	bne.n	801bf36 <_printf_float+0x29e>
 801bf30:	6823      	ldr	r3, [r4, #0]
 801bf32:	07d9      	lsls	r1, r3, #31
 801bf34:	d5d8      	bpl.n	801bee8 <_printf_float+0x250>
 801bf36:	ee18 3a10 	vmov	r3, s16
 801bf3a:	4652      	mov	r2, sl
 801bf3c:	4631      	mov	r1, r6
 801bf3e:	4628      	mov	r0, r5
 801bf40:	47b8      	blx	r7
 801bf42:	3001      	adds	r0, #1
 801bf44:	f43f af09 	beq.w	801bd5a <_printf_float+0xc2>
 801bf48:	f04f 0900 	mov.w	r9, #0
 801bf4c:	f104 0a1a 	add.w	sl, r4, #26
 801bf50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf52:	425b      	negs	r3, r3
 801bf54:	454b      	cmp	r3, r9
 801bf56:	dc01      	bgt.n	801bf5c <_printf_float+0x2c4>
 801bf58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bf5a:	e792      	b.n	801be82 <_printf_float+0x1ea>
 801bf5c:	2301      	movs	r3, #1
 801bf5e:	4652      	mov	r2, sl
 801bf60:	4631      	mov	r1, r6
 801bf62:	4628      	mov	r0, r5
 801bf64:	47b8      	blx	r7
 801bf66:	3001      	adds	r0, #1
 801bf68:	f43f aef7 	beq.w	801bd5a <_printf_float+0xc2>
 801bf6c:	f109 0901 	add.w	r9, r9, #1
 801bf70:	e7ee      	b.n	801bf50 <_printf_float+0x2b8>
 801bf72:	bf00      	nop
 801bf74:	7fefffff 	.word	0x7fefffff
 801bf78:	08023268 	.word	0x08023268
 801bf7c:	0802326c 	.word	0x0802326c
 801bf80:	08023274 	.word	0x08023274
 801bf84:	08023270 	.word	0x08023270
 801bf88:	080235d9 	.word	0x080235d9
 801bf8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bf8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801bf90:	429a      	cmp	r2, r3
 801bf92:	bfa8      	it	ge
 801bf94:	461a      	movge	r2, r3
 801bf96:	2a00      	cmp	r2, #0
 801bf98:	4691      	mov	r9, r2
 801bf9a:	dc37      	bgt.n	801c00c <_printf_float+0x374>
 801bf9c:	f04f 0b00 	mov.w	fp, #0
 801bfa0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801bfa4:	f104 021a 	add.w	r2, r4, #26
 801bfa8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801bfaa:	9305      	str	r3, [sp, #20]
 801bfac:	eba3 0309 	sub.w	r3, r3, r9
 801bfb0:	455b      	cmp	r3, fp
 801bfb2:	dc33      	bgt.n	801c01c <_printf_float+0x384>
 801bfb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801bfb8:	429a      	cmp	r2, r3
 801bfba:	db3b      	blt.n	801c034 <_printf_float+0x39c>
 801bfbc:	6823      	ldr	r3, [r4, #0]
 801bfbe:	07da      	lsls	r2, r3, #31
 801bfc0:	d438      	bmi.n	801c034 <_printf_float+0x39c>
 801bfc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bfc4:	9b05      	ldr	r3, [sp, #20]
 801bfc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bfc8:	1ad3      	subs	r3, r2, r3
 801bfca:	eba2 0901 	sub.w	r9, r2, r1
 801bfce:	4599      	cmp	r9, r3
 801bfd0:	bfa8      	it	ge
 801bfd2:	4699      	movge	r9, r3
 801bfd4:	f1b9 0f00 	cmp.w	r9, #0
 801bfd8:	dc35      	bgt.n	801c046 <_printf_float+0x3ae>
 801bfda:	f04f 0800 	mov.w	r8, #0
 801bfde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801bfe2:	f104 0a1a 	add.w	sl, r4, #26
 801bfe6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801bfea:	1a9b      	subs	r3, r3, r2
 801bfec:	eba3 0309 	sub.w	r3, r3, r9
 801bff0:	4543      	cmp	r3, r8
 801bff2:	f77f af79 	ble.w	801bee8 <_printf_float+0x250>
 801bff6:	2301      	movs	r3, #1
 801bff8:	4652      	mov	r2, sl
 801bffa:	4631      	mov	r1, r6
 801bffc:	4628      	mov	r0, r5
 801bffe:	47b8      	blx	r7
 801c000:	3001      	adds	r0, #1
 801c002:	f43f aeaa 	beq.w	801bd5a <_printf_float+0xc2>
 801c006:	f108 0801 	add.w	r8, r8, #1
 801c00a:	e7ec      	b.n	801bfe6 <_printf_float+0x34e>
 801c00c:	4613      	mov	r3, r2
 801c00e:	4631      	mov	r1, r6
 801c010:	4642      	mov	r2, r8
 801c012:	4628      	mov	r0, r5
 801c014:	47b8      	blx	r7
 801c016:	3001      	adds	r0, #1
 801c018:	d1c0      	bne.n	801bf9c <_printf_float+0x304>
 801c01a:	e69e      	b.n	801bd5a <_printf_float+0xc2>
 801c01c:	2301      	movs	r3, #1
 801c01e:	4631      	mov	r1, r6
 801c020:	4628      	mov	r0, r5
 801c022:	9205      	str	r2, [sp, #20]
 801c024:	47b8      	blx	r7
 801c026:	3001      	adds	r0, #1
 801c028:	f43f ae97 	beq.w	801bd5a <_printf_float+0xc2>
 801c02c:	9a05      	ldr	r2, [sp, #20]
 801c02e:	f10b 0b01 	add.w	fp, fp, #1
 801c032:	e7b9      	b.n	801bfa8 <_printf_float+0x310>
 801c034:	ee18 3a10 	vmov	r3, s16
 801c038:	4652      	mov	r2, sl
 801c03a:	4631      	mov	r1, r6
 801c03c:	4628      	mov	r0, r5
 801c03e:	47b8      	blx	r7
 801c040:	3001      	adds	r0, #1
 801c042:	d1be      	bne.n	801bfc2 <_printf_float+0x32a>
 801c044:	e689      	b.n	801bd5a <_printf_float+0xc2>
 801c046:	9a05      	ldr	r2, [sp, #20]
 801c048:	464b      	mov	r3, r9
 801c04a:	4442      	add	r2, r8
 801c04c:	4631      	mov	r1, r6
 801c04e:	4628      	mov	r0, r5
 801c050:	47b8      	blx	r7
 801c052:	3001      	adds	r0, #1
 801c054:	d1c1      	bne.n	801bfda <_printf_float+0x342>
 801c056:	e680      	b.n	801bd5a <_printf_float+0xc2>
 801c058:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c05a:	2a01      	cmp	r2, #1
 801c05c:	dc01      	bgt.n	801c062 <_printf_float+0x3ca>
 801c05e:	07db      	lsls	r3, r3, #31
 801c060:	d538      	bpl.n	801c0d4 <_printf_float+0x43c>
 801c062:	2301      	movs	r3, #1
 801c064:	4642      	mov	r2, r8
 801c066:	4631      	mov	r1, r6
 801c068:	4628      	mov	r0, r5
 801c06a:	47b8      	blx	r7
 801c06c:	3001      	adds	r0, #1
 801c06e:	f43f ae74 	beq.w	801bd5a <_printf_float+0xc2>
 801c072:	ee18 3a10 	vmov	r3, s16
 801c076:	4652      	mov	r2, sl
 801c078:	4631      	mov	r1, r6
 801c07a:	4628      	mov	r0, r5
 801c07c:	47b8      	blx	r7
 801c07e:	3001      	adds	r0, #1
 801c080:	f43f ae6b 	beq.w	801bd5a <_printf_float+0xc2>
 801c084:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801c088:	2200      	movs	r2, #0
 801c08a:	2300      	movs	r3, #0
 801c08c:	f7e4 fd3c 	bl	8000b08 <__aeabi_dcmpeq>
 801c090:	b9d8      	cbnz	r0, 801c0ca <_printf_float+0x432>
 801c092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c094:	f108 0201 	add.w	r2, r8, #1
 801c098:	3b01      	subs	r3, #1
 801c09a:	4631      	mov	r1, r6
 801c09c:	4628      	mov	r0, r5
 801c09e:	47b8      	blx	r7
 801c0a0:	3001      	adds	r0, #1
 801c0a2:	d10e      	bne.n	801c0c2 <_printf_float+0x42a>
 801c0a4:	e659      	b.n	801bd5a <_printf_float+0xc2>
 801c0a6:	2301      	movs	r3, #1
 801c0a8:	4652      	mov	r2, sl
 801c0aa:	4631      	mov	r1, r6
 801c0ac:	4628      	mov	r0, r5
 801c0ae:	47b8      	blx	r7
 801c0b0:	3001      	adds	r0, #1
 801c0b2:	f43f ae52 	beq.w	801bd5a <_printf_float+0xc2>
 801c0b6:	f108 0801 	add.w	r8, r8, #1
 801c0ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c0bc:	3b01      	subs	r3, #1
 801c0be:	4543      	cmp	r3, r8
 801c0c0:	dcf1      	bgt.n	801c0a6 <_printf_float+0x40e>
 801c0c2:	464b      	mov	r3, r9
 801c0c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801c0c8:	e6dc      	b.n	801be84 <_printf_float+0x1ec>
 801c0ca:	f04f 0800 	mov.w	r8, #0
 801c0ce:	f104 0a1a 	add.w	sl, r4, #26
 801c0d2:	e7f2      	b.n	801c0ba <_printf_float+0x422>
 801c0d4:	2301      	movs	r3, #1
 801c0d6:	4642      	mov	r2, r8
 801c0d8:	e7df      	b.n	801c09a <_printf_float+0x402>
 801c0da:	2301      	movs	r3, #1
 801c0dc:	464a      	mov	r2, r9
 801c0de:	4631      	mov	r1, r6
 801c0e0:	4628      	mov	r0, r5
 801c0e2:	47b8      	blx	r7
 801c0e4:	3001      	adds	r0, #1
 801c0e6:	f43f ae38 	beq.w	801bd5a <_printf_float+0xc2>
 801c0ea:	f108 0801 	add.w	r8, r8, #1
 801c0ee:	68e3      	ldr	r3, [r4, #12]
 801c0f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c0f2:	1a5b      	subs	r3, r3, r1
 801c0f4:	4543      	cmp	r3, r8
 801c0f6:	dcf0      	bgt.n	801c0da <_printf_float+0x442>
 801c0f8:	e6fa      	b.n	801bef0 <_printf_float+0x258>
 801c0fa:	f04f 0800 	mov.w	r8, #0
 801c0fe:	f104 0919 	add.w	r9, r4, #25
 801c102:	e7f4      	b.n	801c0ee <_printf_float+0x456>

0801c104 <_printf_common>:
 801c104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c108:	4616      	mov	r6, r2
 801c10a:	4699      	mov	r9, r3
 801c10c:	688a      	ldr	r2, [r1, #8]
 801c10e:	690b      	ldr	r3, [r1, #16]
 801c110:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c114:	4293      	cmp	r3, r2
 801c116:	bfb8      	it	lt
 801c118:	4613      	movlt	r3, r2
 801c11a:	6033      	str	r3, [r6, #0]
 801c11c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c120:	4607      	mov	r7, r0
 801c122:	460c      	mov	r4, r1
 801c124:	b10a      	cbz	r2, 801c12a <_printf_common+0x26>
 801c126:	3301      	adds	r3, #1
 801c128:	6033      	str	r3, [r6, #0]
 801c12a:	6823      	ldr	r3, [r4, #0]
 801c12c:	0699      	lsls	r1, r3, #26
 801c12e:	bf42      	ittt	mi
 801c130:	6833      	ldrmi	r3, [r6, #0]
 801c132:	3302      	addmi	r3, #2
 801c134:	6033      	strmi	r3, [r6, #0]
 801c136:	6825      	ldr	r5, [r4, #0]
 801c138:	f015 0506 	ands.w	r5, r5, #6
 801c13c:	d106      	bne.n	801c14c <_printf_common+0x48>
 801c13e:	f104 0a19 	add.w	sl, r4, #25
 801c142:	68e3      	ldr	r3, [r4, #12]
 801c144:	6832      	ldr	r2, [r6, #0]
 801c146:	1a9b      	subs	r3, r3, r2
 801c148:	42ab      	cmp	r3, r5
 801c14a:	dc26      	bgt.n	801c19a <_printf_common+0x96>
 801c14c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c150:	1e13      	subs	r3, r2, #0
 801c152:	6822      	ldr	r2, [r4, #0]
 801c154:	bf18      	it	ne
 801c156:	2301      	movne	r3, #1
 801c158:	0692      	lsls	r2, r2, #26
 801c15a:	d42b      	bmi.n	801c1b4 <_printf_common+0xb0>
 801c15c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c160:	4649      	mov	r1, r9
 801c162:	4638      	mov	r0, r7
 801c164:	47c0      	blx	r8
 801c166:	3001      	adds	r0, #1
 801c168:	d01e      	beq.n	801c1a8 <_printf_common+0xa4>
 801c16a:	6823      	ldr	r3, [r4, #0]
 801c16c:	68e5      	ldr	r5, [r4, #12]
 801c16e:	6832      	ldr	r2, [r6, #0]
 801c170:	f003 0306 	and.w	r3, r3, #6
 801c174:	2b04      	cmp	r3, #4
 801c176:	bf08      	it	eq
 801c178:	1aad      	subeq	r5, r5, r2
 801c17a:	68a3      	ldr	r3, [r4, #8]
 801c17c:	6922      	ldr	r2, [r4, #16]
 801c17e:	bf0c      	ite	eq
 801c180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c184:	2500      	movne	r5, #0
 801c186:	4293      	cmp	r3, r2
 801c188:	bfc4      	itt	gt
 801c18a:	1a9b      	subgt	r3, r3, r2
 801c18c:	18ed      	addgt	r5, r5, r3
 801c18e:	2600      	movs	r6, #0
 801c190:	341a      	adds	r4, #26
 801c192:	42b5      	cmp	r5, r6
 801c194:	d11a      	bne.n	801c1cc <_printf_common+0xc8>
 801c196:	2000      	movs	r0, #0
 801c198:	e008      	b.n	801c1ac <_printf_common+0xa8>
 801c19a:	2301      	movs	r3, #1
 801c19c:	4652      	mov	r2, sl
 801c19e:	4649      	mov	r1, r9
 801c1a0:	4638      	mov	r0, r7
 801c1a2:	47c0      	blx	r8
 801c1a4:	3001      	adds	r0, #1
 801c1a6:	d103      	bne.n	801c1b0 <_printf_common+0xac>
 801c1a8:	f04f 30ff 	mov.w	r0, #4294967295
 801c1ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c1b0:	3501      	adds	r5, #1
 801c1b2:	e7c6      	b.n	801c142 <_printf_common+0x3e>
 801c1b4:	18e1      	adds	r1, r4, r3
 801c1b6:	1c5a      	adds	r2, r3, #1
 801c1b8:	2030      	movs	r0, #48	; 0x30
 801c1ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c1be:	4422      	add	r2, r4
 801c1c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c1c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c1c8:	3302      	adds	r3, #2
 801c1ca:	e7c7      	b.n	801c15c <_printf_common+0x58>
 801c1cc:	2301      	movs	r3, #1
 801c1ce:	4622      	mov	r2, r4
 801c1d0:	4649      	mov	r1, r9
 801c1d2:	4638      	mov	r0, r7
 801c1d4:	47c0      	blx	r8
 801c1d6:	3001      	adds	r0, #1
 801c1d8:	d0e6      	beq.n	801c1a8 <_printf_common+0xa4>
 801c1da:	3601      	adds	r6, #1
 801c1dc:	e7d9      	b.n	801c192 <_printf_common+0x8e>
	...

0801c1e0 <_printf_i>:
 801c1e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c1e4:	460c      	mov	r4, r1
 801c1e6:	4691      	mov	r9, r2
 801c1e8:	7e27      	ldrb	r7, [r4, #24]
 801c1ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c1ec:	2f78      	cmp	r7, #120	; 0x78
 801c1ee:	4680      	mov	r8, r0
 801c1f0:	469a      	mov	sl, r3
 801c1f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c1f6:	d807      	bhi.n	801c208 <_printf_i+0x28>
 801c1f8:	2f62      	cmp	r7, #98	; 0x62
 801c1fa:	d80a      	bhi.n	801c212 <_printf_i+0x32>
 801c1fc:	2f00      	cmp	r7, #0
 801c1fe:	f000 80d8 	beq.w	801c3b2 <_printf_i+0x1d2>
 801c202:	2f58      	cmp	r7, #88	; 0x58
 801c204:	f000 80a3 	beq.w	801c34e <_printf_i+0x16e>
 801c208:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c20c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c210:	e03a      	b.n	801c288 <_printf_i+0xa8>
 801c212:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c216:	2b15      	cmp	r3, #21
 801c218:	d8f6      	bhi.n	801c208 <_printf_i+0x28>
 801c21a:	a001      	add	r0, pc, #4	; (adr r0, 801c220 <_printf_i+0x40>)
 801c21c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801c220:	0801c279 	.word	0x0801c279
 801c224:	0801c28d 	.word	0x0801c28d
 801c228:	0801c209 	.word	0x0801c209
 801c22c:	0801c209 	.word	0x0801c209
 801c230:	0801c209 	.word	0x0801c209
 801c234:	0801c209 	.word	0x0801c209
 801c238:	0801c28d 	.word	0x0801c28d
 801c23c:	0801c209 	.word	0x0801c209
 801c240:	0801c209 	.word	0x0801c209
 801c244:	0801c209 	.word	0x0801c209
 801c248:	0801c209 	.word	0x0801c209
 801c24c:	0801c399 	.word	0x0801c399
 801c250:	0801c2bd 	.word	0x0801c2bd
 801c254:	0801c37b 	.word	0x0801c37b
 801c258:	0801c209 	.word	0x0801c209
 801c25c:	0801c209 	.word	0x0801c209
 801c260:	0801c3bb 	.word	0x0801c3bb
 801c264:	0801c209 	.word	0x0801c209
 801c268:	0801c2bd 	.word	0x0801c2bd
 801c26c:	0801c209 	.word	0x0801c209
 801c270:	0801c209 	.word	0x0801c209
 801c274:	0801c383 	.word	0x0801c383
 801c278:	680b      	ldr	r3, [r1, #0]
 801c27a:	1d1a      	adds	r2, r3, #4
 801c27c:	681b      	ldr	r3, [r3, #0]
 801c27e:	600a      	str	r2, [r1, #0]
 801c280:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c288:	2301      	movs	r3, #1
 801c28a:	e0a3      	b.n	801c3d4 <_printf_i+0x1f4>
 801c28c:	6825      	ldr	r5, [r4, #0]
 801c28e:	6808      	ldr	r0, [r1, #0]
 801c290:	062e      	lsls	r6, r5, #24
 801c292:	f100 0304 	add.w	r3, r0, #4
 801c296:	d50a      	bpl.n	801c2ae <_printf_i+0xce>
 801c298:	6805      	ldr	r5, [r0, #0]
 801c29a:	600b      	str	r3, [r1, #0]
 801c29c:	2d00      	cmp	r5, #0
 801c29e:	da03      	bge.n	801c2a8 <_printf_i+0xc8>
 801c2a0:	232d      	movs	r3, #45	; 0x2d
 801c2a2:	426d      	negs	r5, r5
 801c2a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c2a8:	485e      	ldr	r0, [pc, #376]	; (801c424 <_printf_i+0x244>)
 801c2aa:	230a      	movs	r3, #10
 801c2ac:	e019      	b.n	801c2e2 <_printf_i+0x102>
 801c2ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 801c2b2:	6805      	ldr	r5, [r0, #0]
 801c2b4:	600b      	str	r3, [r1, #0]
 801c2b6:	bf18      	it	ne
 801c2b8:	b22d      	sxthne	r5, r5
 801c2ba:	e7ef      	b.n	801c29c <_printf_i+0xbc>
 801c2bc:	680b      	ldr	r3, [r1, #0]
 801c2be:	6825      	ldr	r5, [r4, #0]
 801c2c0:	1d18      	adds	r0, r3, #4
 801c2c2:	6008      	str	r0, [r1, #0]
 801c2c4:	0628      	lsls	r0, r5, #24
 801c2c6:	d501      	bpl.n	801c2cc <_printf_i+0xec>
 801c2c8:	681d      	ldr	r5, [r3, #0]
 801c2ca:	e002      	b.n	801c2d2 <_printf_i+0xf2>
 801c2cc:	0669      	lsls	r1, r5, #25
 801c2ce:	d5fb      	bpl.n	801c2c8 <_printf_i+0xe8>
 801c2d0:	881d      	ldrh	r5, [r3, #0]
 801c2d2:	4854      	ldr	r0, [pc, #336]	; (801c424 <_printf_i+0x244>)
 801c2d4:	2f6f      	cmp	r7, #111	; 0x6f
 801c2d6:	bf0c      	ite	eq
 801c2d8:	2308      	moveq	r3, #8
 801c2da:	230a      	movne	r3, #10
 801c2dc:	2100      	movs	r1, #0
 801c2de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c2e2:	6866      	ldr	r6, [r4, #4]
 801c2e4:	60a6      	str	r6, [r4, #8]
 801c2e6:	2e00      	cmp	r6, #0
 801c2e8:	bfa2      	ittt	ge
 801c2ea:	6821      	ldrge	r1, [r4, #0]
 801c2ec:	f021 0104 	bicge.w	r1, r1, #4
 801c2f0:	6021      	strge	r1, [r4, #0]
 801c2f2:	b90d      	cbnz	r5, 801c2f8 <_printf_i+0x118>
 801c2f4:	2e00      	cmp	r6, #0
 801c2f6:	d04d      	beq.n	801c394 <_printf_i+0x1b4>
 801c2f8:	4616      	mov	r6, r2
 801c2fa:	fbb5 f1f3 	udiv	r1, r5, r3
 801c2fe:	fb03 5711 	mls	r7, r3, r1, r5
 801c302:	5dc7      	ldrb	r7, [r0, r7]
 801c304:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c308:	462f      	mov	r7, r5
 801c30a:	42bb      	cmp	r3, r7
 801c30c:	460d      	mov	r5, r1
 801c30e:	d9f4      	bls.n	801c2fa <_printf_i+0x11a>
 801c310:	2b08      	cmp	r3, #8
 801c312:	d10b      	bne.n	801c32c <_printf_i+0x14c>
 801c314:	6823      	ldr	r3, [r4, #0]
 801c316:	07df      	lsls	r7, r3, #31
 801c318:	d508      	bpl.n	801c32c <_printf_i+0x14c>
 801c31a:	6923      	ldr	r3, [r4, #16]
 801c31c:	6861      	ldr	r1, [r4, #4]
 801c31e:	4299      	cmp	r1, r3
 801c320:	bfde      	ittt	le
 801c322:	2330      	movle	r3, #48	; 0x30
 801c324:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c328:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c32c:	1b92      	subs	r2, r2, r6
 801c32e:	6122      	str	r2, [r4, #16]
 801c330:	f8cd a000 	str.w	sl, [sp]
 801c334:	464b      	mov	r3, r9
 801c336:	aa03      	add	r2, sp, #12
 801c338:	4621      	mov	r1, r4
 801c33a:	4640      	mov	r0, r8
 801c33c:	f7ff fee2 	bl	801c104 <_printf_common>
 801c340:	3001      	adds	r0, #1
 801c342:	d14c      	bne.n	801c3de <_printf_i+0x1fe>
 801c344:	f04f 30ff 	mov.w	r0, #4294967295
 801c348:	b004      	add	sp, #16
 801c34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c34e:	4835      	ldr	r0, [pc, #212]	; (801c424 <_printf_i+0x244>)
 801c350:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801c354:	6823      	ldr	r3, [r4, #0]
 801c356:	680e      	ldr	r6, [r1, #0]
 801c358:	061f      	lsls	r7, r3, #24
 801c35a:	f856 5b04 	ldr.w	r5, [r6], #4
 801c35e:	600e      	str	r6, [r1, #0]
 801c360:	d514      	bpl.n	801c38c <_printf_i+0x1ac>
 801c362:	07d9      	lsls	r1, r3, #31
 801c364:	bf44      	itt	mi
 801c366:	f043 0320 	orrmi.w	r3, r3, #32
 801c36a:	6023      	strmi	r3, [r4, #0]
 801c36c:	b91d      	cbnz	r5, 801c376 <_printf_i+0x196>
 801c36e:	6823      	ldr	r3, [r4, #0]
 801c370:	f023 0320 	bic.w	r3, r3, #32
 801c374:	6023      	str	r3, [r4, #0]
 801c376:	2310      	movs	r3, #16
 801c378:	e7b0      	b.n	801c2dc <_printf_i+0xfc>
 801c37a:	6823      	ldr	r3, [r4, #0]
 801c37c:	f043 0320 	orr.w	r3, r3, #32
 801c380:	6023      	str	r3, [r4, #0]
 801c382:	2378      	movs	r3, #120	; 0x78
 801c384:	4828      	ldr	r0, [pc, #160]	; (801c428 <_printf_i+0x248>)
 801c386:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c38a:	e7e3      	b.n	801c354 <_printf_i+0x174>
 801c38c:	065e      	lsls	r6, r3, #25
 801c38e:	bf48      	it	mi
 801c390:	b2ad      	uxthmi	r5, r5
 801c392:	e7e6      	b.n	801c362 <_printf_i+0x182>
 801c394:	4616      	mov	r6, r2
 801c396:	e7bb      	b.n	801c310 <_printf_i+0x130>
 801c398:	680b      	ldr	r3, [r1, #0]
 801c39a:	6826      	ldr	r6, [r4, #0]
 801c39c:	6960      	ldr	r0, [r4, #20]
 801c39e:	1d1d      	adds	r5, r3, #4
 801c3a0:	600d      	str	r5, [r1, #0]
 801c3a2:	0635      	lsls	r5, r6, #24
 801c3a4:	681b      	ldr	r3, [r3, #0]
 801c3a6:	d501      	bpl.n	801c3ac <_printf_i+0x1cc>
 801c3a8:	6018      	str	r0, [r3, #0]
 801c3aa:	e002      	b.n	801c3b2 <_printf_i+0x1d2>
 801c3ac:	0671      	lsls	r1, r6, #25
 801c3ae:	d5fb      	bpl.n	801c3a8 <_printf_i+0x1c8>
 801c3b0:	8018      	strh	r0, [r3, #0]
 801c3b2:	2300      	movs	r3, #0
 801c3b4:	6123      	str	r3, [r4, #16]
 801c3b6:	4616      	mov	r6, r2
 801c3b8:	e7ba      	b.n	801c330 <_printf_i+0x150>
 801c3ba:	680b      	ldr	r3, [r1, #0]
 801c3bc:	1d1a      	adds	r2, r3, #4
 801c3be:	600a      	str	r2, [r1, #0]
 801c3c0:	681e      	ldr	r6, [r3, #0]
 801c3c2:	6862      	ldr	r2, [r4, #4]
 801c3c4:	2100      	movs	r1, #0
 801c3c6:	4630      	mov	r0, r6
 801c3c8:	f7e3 ff2a 	bl	8000220 <memchr>
 801c3cc:	b108      	cbz	r0, 801c3d2 <_printf_i+0x1f2>
 801c3ce:	1b80      	subs	r0, r0, r6
 801c3d0:	6060      	str	r0, [r4, #4]
 801c3d2:	6863      	ldr	r3, [r4, #4]
 801c3d4:	6123      	str	r3, [r4, #16]
 801c3d6:	2300      	movs	r3, #0
 801c3d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c3dc:	e7a8      	b.n	801c330 <_printf_i+0x150>
 801c3de:	6923      	ldr	r3, [r4, #16]
 801c3e0:	4632      	mov	r2, r6
 801c3e2:	4649      	mov	r1, r9
 801c3e4:	4640      	mov	r0, r8
 801c3e6:	47d0      	blx	sl
 801c3e8:	3001      	adds	r0, #1
 801c3ea:	d0ab      	beq.n	801c344 <_printf_i+0x164>
 801c3ec:	6823      	ldr	r3, [r4, #0]
 801c3ee:	079b      	lsls	r3, r3, #30
 801c3f0:	d413      	bmi.n	801c41a <_printf_i+0x23a>
 801c3f2:	68e0      	ldr	r0, [r4, #12]
 801c3f4:	9b03      	ldr	r3, [sp, #12]
 801c3f6:	4298      	cmp	r0, r3
 801c3f8:	bfb8      	it	lt
 801c3fa:	4618      	movlt	r0, r3
 801c3fc:	e7a4      	b.n	801c348 <_printf_i+0x168>
 801c3fe:	2301      	movs	r3, #1
 801c400:	4632      	mov	r2, r6
 801c402:	4649      	mov	r1, r9
 801c404:	4640      	mov	r0, r8
 801c406:	47d0      	blx	sl
 801c408:	3001      	adds	r0, #1
 801c40a:	d09b      	beq.n	801c344 <_printf_i+0x164>
 801c40c:	3501      	adds	r5, #1
 801c40e:	68e3      	ldr	r3, [r4, #12]
 801c410:	9903      	ldr	r1, [sp, #12]
 801c412:	1a5b      	subs	r3, r3, r1
 801c414:	42ab      	cmp	r3, r5
 801c416:	dcf2      	bgt.n	801c3fe <_printf_i+0x21e>
 801c418:	e7eb      	b.n	801c3f2 <_printf_i+0x212>
 801c41a:	2500      	movs	r5, #0
 801c41c:	f104 0619 	add.w	r6, r4, #25
 801c420:	e7f5      	b.n	801c40e <_printf_i+0x22e>
 801c422:	bf00      	nop
 801c424:	08023278 	.word	0x08023278
 801c428:	08023289 	.word	0x08023289

0801c42c <_scanf_float>:
 801c42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c430:	b087      	sub	sp, #28
 801c432:	4617      	mov	r7, r2
 801c434:	9303      	str	r3, [sp, #12]
 801c436:	688b      	ldr	r3, [r1, #8]
 801c438:	1e5a      	subs	r2, r3, #1
 801c43a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801c43e:	bf83      	ittte	hi
 801c440:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801c444:	195b      	addhi	r3, r3, r5
 801c446:	9302      	strhi	r3, [sp, #8]
 801c448:	2300      	movls	r3, #0
 801c44a:	bf86      	itte	hi
 801c44c:	f240 135d 	movwhi	r3, #349	; 0x15d
 801c450:	608b      	strhi	r3, [r1, #8]
 801c452:	9302      	strls	r3, [sp, #8]
 801c454:	680b      	ldr	r3, [r1, #0]
 801c456:	468b      	mov	fp, r1
 801c458:	2500      	movs	r5, #0
 801c45a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801c45e:	f84b 3b1c 	str.w	r3, [fp], #28
 801c462:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801c466:	4680      	mov	r8, r0
 801c468:	460c      	mov	r4, r1
 801c46a:	465e      	mov	r6, fp
 801c46c:	46aa      	mov	sl, r5
 801c46e:	46a9      	mov	r9, r5
 801c470:	9501      	str	r5, [sp, #4]
 801c472:	68a2      	ldr	r2, [r4, #8]
 801c474:	b152      	cbz	r2, 801c48c <_scanf_float+0x60>
 801c476:	683b      	ldr	r3, [r7, #0]
 801c478:	781b      	ldrb	r3, [r3, #0]
 801c47a:	2b4e      	cmp	r3, #78	; 0x4e
 801c47c:	d864      	bhi.n	801c548 <_scanf_float+0x11c>
 801c47e:	2b40      	cmp	r3, #64	; 0x40
 801c480:	d83c      	bhi.n	801c4fc <_scanf_float+0xd0>
 801c482:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801c486:	b2c8      	uxtb	r0, r1
 801c488:	280e      	cmp	r0, #14
 801c48a:	d93a      	bls.n	801c502 <_scanf_float+0xd6>
 801c48c:	f1b9 0f00 	cmp.w	r9, #0
 801c490:	d003      	beq.n	801c49a <_scanf_float+0x6e>
 801c492:	6823      	ldr	r3, [r4, #0]
 801c494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c498:	6023      	str	r3, [r4, #0]
 801c49a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c49e:	f1ba 0f01 	cmp.w	sl, #1
 801c4a2:	f200 8113 	bhi.w	801c6cc <_scanf_float+0x2a0>
 801c4a6:	455e      	cmp	r6, fp
 801c4a8:	f200 8105 	bhi.w	801c6b6 <_scanf_float+0x28a>
 801c4ac:	2501      	movs	r5, #1
 801c4ae:	4628      	mov	r0, r5
 801c4b0:	b007      	add	sp, #28
 801c4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4b6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801c4ba:	2a0d      	cmp	r2, #13
 801c4bc:	d8e6      	bhi.n	801c48c <_scanf_float+0x60>
 801c4be:	a101      	add	r1, pc, #4	; (adr r1, 801c4c4 <_scanf_float+0x98>)
 801c4c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801c4c4:	0801c603 	.word	0x0801c603
 801c4c8:	0801c48d 	.word	0x0801c48d
 801c4cc:	0801c48d 	.word	0x0801c48d
 801c4d0:	0801c48d 	.word	0x0801c48d
 801c4d4:	0801c663 	.word	0x0801c663
 801c4d8:	0801c63b 	.word	0x0801c63b
 801c4dc:	0801c48d 	.word	0x0801c48d
 801c4e0:	0801c48d 	.word	0x0801c48d
 801c4e4:	0801c611 	.word	0x0801c611
 801c4e8:	0801c48d 	.word	0x0801c48d
 801c4ec:	0801c48d 	.word	0x0801c48d
 801c4f0:	0801c48d 	.word	0x0801c48d
 801c4f4:	0801c48d 	.word	0x0801c48d
 801c4f8:	0801c5c9 	.word	0x0801c5c9
 801c4fc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801c500:	e7db      	b.n	801c4ba <_scanf_float+0x8e>
 801c502:	290e      	cmp	r1, #14
 801c504:	d8c2      	bhi.n	801c48c <_scanf_float+0x60>
 801c506:	a001      	add	r0, pc, #4	; (adr r0, 801c50c <_scanf_float+0xe0>)
 801c508:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801c50c:	0801c5bb 	.word	0x0801c5bb
 801c510:	0801c48d 	.word	0x0801c48d
 801c514:	0801c5bb 	.word	0x0801c5bb
 801c518:	0801c64f 	.word	0x0801c64f
 801c51c:	0801c48d 	.word	0x0801c48d
 801c520:	0801c569 	.word	0x0801c569
 801c524:	0801c5a5 	.word	0x0801c5a5
 801c528:	0801c5a5 	.word	0x0801c5a5
 801c52c:	0801c5a5 	.word	0x0801c5a5
 801c530:	0801c5a5 	.word	0x0801c5a5
 801c534:	0801c5a5 	.word	0x0801c5a5
 801c538:	0801c5a5 	.word	0x0801c5a5
 801c53c:	0801c5a5 	.word	0x0801c5a5
 801c540:	0801c5a5 	.word	0x0801c5a5
 801c544:	0801c5a5 	.word	0x0801c5a5
 801c548:	2b6e      	cmp	r3, #110	; 0x6e
 801c54a:	d809      	bhi.n	801c560 <_scanf_float+0x134>
 801c54c:	2b60      	cmp	r3, #96	; 0x60
 801c54e:	d8b2      	bhi.n	801c4b6 <_scanf_float+0x8a>
 801c550:	2b54      	cmp	r3, #84	; 0x54
 801c552:	d077      	beq.n	801c644 <_scanf_float+0x218>
 801c554:	2b59      	cmp	r3, #89	; 0x59
 801c556:	d199      	bne.n	801c48c <_scanf_float+0x60>
 801c558:	2d07      	cmp	r5, #7
 801c55a:	d197      	bne.n	801c48c <_scanf_float+0x60>
 801c55c:	2508      	movs	r5, #8
 801c55e:	e029      	b.n	801c5b4 <_scanf_float+0x188>
 801c560:	2b74      	cmp	r3, #116	; 0x74
 801c562:	d06f      	beq.n	801c644 <_scanf_float+0x218>
 801c564:	2b79      	cmp	r3, #121	; 0x79
 801c566:	e7f6      	b.n	801c556 <_scanf_float+0x12a>
 801c568:	6821      	ldr	r1, [r4, #0]
 801c56a:	05c8      	lsls	r0, r1, #23
 801c56c:	d51a      	bpl.n	801c5a4 <_scanf_float+0x178>
 801c56e:	9b02      	ldr	r3, [sp, #8]
 801c570:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801c574:	6021      	str	r1, [r4, #0]
 801c576:	f109 0901 	add.w	r9, r9, #1
 801c57a:	b11b      	cbz	r3, 801c584 <_scanf_float+0x158>
 801c57c:	3b01      	subs	r3, #1
 801c57e:	3201      	adds	r2, #1
 801c580:	9302      	str	r3, [sp, #8]
 801c582:	60a2      	str	r2, [r4, #8]
 801c584:	68a3      	ldr	r3, [r4, #8]
 801c586:	3b01      	subs	r3, #1
 801c588:	60a3      	str	r3, [r4, #8]
 801c58a:	6923      	ldr	r3, [r4, #16]
 801c58c:	3301      	adds	r3, #1
 801c58e:	6123      	str	r3, [r4, #16]
 801c590:	687b      	ldr	r3, [r7, #4]
 801c592:	3b01      	subs	r3, #1
 801c594:	2b00      	cmp	r3, #0
 801c596:	607b      	str	r3, [r7, #4]
 801c598:	f340 8084 	ble.w	801c6a4 <_scanf_float+0x278>
 801c59c:	683b      	ldr	r3, [r7, #0]
 801c59e:	3301      	adds	r3, #1
 801c5a0:	603b      	str	r3, [r7, #0]
 801c5a2:	e766      	b.n	801c472 <_scanf_float+0x46>
 801c5a4:	eb1a 0f05 	cmn.w	sl, r5
 801c5a8:	f47f af70 	bne.w	801c48c <_scanf_float+0x60>
 801c5ac:	6822      	ldr	r2, [r4, #0]
 801c5ae:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801c5b2:	6022      	str	r2, [r4, #0]
 801c5b4:	f806 3b01 	strb.w	r3, [r6], #1
 801c5b8:	e7e4      	b.n	801c584 <_scanf_float+0x158>
 801c5ba:	6822      	ldr	r2, [r4, #0]
 801c5bc:	0610      	lsls	r0, r2, #24
 801c5be:	f57f af65 	bpl.w	801c48c <_scanf_float+0x60>
 801c5c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801c5c6:	e7f4      	b.n	801c5b2 <_scanf_float+0x186>
 801c5c8:	f1ba 0f00 	cmp.w	sl, #0
 801c5cc:	d10e      	bne.n	801c5ec <_scanf_float+0x1c0>
 801c5ce:	f1b9 0f00 	cmp.w	r9, #0
 801c5d2:	d10e      	bne.n	801c5f2 <_scanf_float+0x1c6>
 801c5d4:	6822      	ldr	r2, [r4, #0]
 801c5d6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801c5da:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801c5de:	d108      	bne.n	801c5f2 <_scanf_float+0x1c6>
 801c5e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801c5e4:	6022      	str	r2, [r4, #0]
 801c5e6:	f04f 0a01 	mov.w	sl, #1
 801c5ea:	e7e3      	b.n	801c5b4 <_scanf_float+0x188>
 801c5ec:	f1ba 0f02 	cmp.w	sl, #2
 801c5f0:	d055      	beq.n	801c69e <_scanf_float+0x272>
 801c5f2:	2d01      	cmp	r5, #1
 801c5f4:	d002      	beq.n	801c5fc <_scanf_float+0x1d0>
 801c5f6:	2d04      	cmp	r5, #4
 801c5f8:	f47f af48 	bne.w	801c48c <_scanf_float+0x60>
 801c5fc:	3501      	adds	r5, #1
 801c5fe:	b2ed      	uxtb	r5, r5
 801c600:	e7d8      	b.n	801c5b4 <_scanf_float+0x188>
 801c602:	f1ba 0f01 	cmp.w	sl, #1
 801c606:	f47f af41 	bne.w	801c48c <_scanf_float+0x60>
 801c60a:	f04f 0a02 	mov.w	sl, #2
 801c60e:	e7d1      	b.n	801c5b4 <_scanf_float+0x188>
 801c610:	b97d      	cbnz	r5, 801c632 <_scanf_float+0x206>
 801c612:	f1b9 0f00 	cmp.w	r9, #0
 801c616:	f47f af3c 	bne.w	801c492 <_scanf_float+0x66>
 801c61a:	6822      	ldr	r2, [r4, #0]
 801c61c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801c620:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801c624:	f47f af39 	bne.w	801c49a <_scanf_float+0x6e>
 801c628:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801c62c:	6022      	str	r2, [r4, #0]
 801c62e:	2501      	movs	r5, #1
 801c630:	e7c0      	b.n	801c5b4 <_scanf_float+0x188>
 801c632:	2d03      	cmp	r5, #3
 801c634:	d0e2      	beq.n	801c5fc <_scanf_float+0x1d0>
 801c636:	2d05      	cmp	r5, #5
 801c638:	e7de      	b.n	801c5f8 <_scanf_float+0x1cc>
 801c63a:	2d02      	cmp	r5, #2
 801c63c:	f47f af26 	bne.w	801c48c <_scanf_float+0x60>
 801c640:	2503      	movs	r5, #3
 801c642:	e7b7      	b.n	801c5b4 <_scanf_float+0x188>
 801c644:	2d06      	cmp	r5, #6
 801c646:	f47f af21 	bne.w	801c48c <_scanf_float+0x60>
 801c64a:	2507      	movs	r5, #7
 801c64c:	e7b2      	b.n	801c5b4 <_scanf_float+0x188>
 801c64e:	6822      	ldr	r2, [r4, #0]
 801c650:	0591      	lsls	r1, r2, #22
 801c652:	f57f af1b 	bpl.w	801c48c <_scanf_float+0x60>
 801c656:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801c65a:	6022      	str	r2, [r4, #0]
 801c65c:	f8cd 9004 	str.w	r9, [sp, #4]
 801c660:	e7a8      	b.n	801c5b4 <_scanf_float+0x188>
 801c662:	6822      	ldr	r2, [r4, #0]
 801c664:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801c668:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801c66c:	d006      	beq.n	801c67c <_scanf_float+0x250>
 801c66e:	0550      	lsls	r0, r2, #21
 801c670:	f57f af0c 	bpl.w	801c48c <_scanf_float+0x60>
 801c674:	f1b9 0f00 	cmp.w	r9, #0
 801c678:	f43f af0f 	beq.w	801c49a <_scanf_float+0x6e>
 801c67c:	0591      	lsls	r1, r2, #22
 801c67e:	bf58      	it	pl
 801c680:	9901      	ldrpl	r1, [sp, #4]
 801c682:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801c686:	bf58      	it	pl
 801c688:	eba9 0101 	subpl.w	r1, r9, r1
 801c68c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801c690:	bf58      	it	pl
 801c692:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801c696:	6022      	str	r2, [r4, #0]
 801c698:	f04f 0900 	mov.w	r9, #0
 801c69c:	e78a      	b.n	801c5b4 <_scanf_float+0x188>
 801c69e:	f04f 0a03 	mov.w	sl, #3
 801c6a2:	e787      	b.n	801c5b4 <_scanf_float+0x188>
 801c6a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801c6a8:	4639      	mov	r1, r7
 801c6aa:	4640      	mov	r0, r8
 801c6ac:	4798      	blx	r3
 801c6ae:	2800      	cmp	r0, #0
 801c6b0:	f43f aedf 	beq.w	801c472 <_scanf_float+0x46>
 801c6b4:	e6ea      	b.n	801c48c <_scanf_float+0x60>
 801c6b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c6ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801c6be:	463a      	mov	r2, r7
 801c6c0:	4640      	mov	r0, r8
 801c6c2:	4798      	blx	r3
 801c6c4:	6923      	ldr	r3, [r4, #16]
 801c6c6:	3b01      	subs	r3, #1
 801c6c8:	6123      	str	r3, [r4, #16]
 801c6ca:	e6ec      	b.n	801c4a6 <_scanf_float+0x7a>
 801c6cc:	1e6b      	subs	r3, r5, #1
 801c6ce:	2b06      	cmp	r3, #6
 801c6d0:	d825      	bhi.n	801c71e <_scanf_float+0x2f2>
 801c6d2:	2d02      	cmp	r5, #2
 801c6d4:	d836      	bhi.n	801c744 <_scanf_float+0x318>
 801c6d6:	455e      	cmp	r6, fp
 801c6d8:	f67f aee8 	bls.w	801c4ac <_scanf_float+0x80>
 801c6dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c6e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801c6e4:	463a      	mov	r2, r7
 801c6e6:	4640      	mov	r0, r8
 801c6e8:	4798      	blx	r3
 801c6ea:	6923      	ldr	r3, [r4, #16]
 801c6ec:	3b01      	subs	r3, #1
 801c6ee:	6123      	str	r3, [r4, #16]
 801c6f0:	e7f1      	b.n	801c6d6 <_scanf_float+0x2aa>
 801c6f2:	9802      	ldr	r0, [sp, #8]
 801c6f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c6f8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801c6fc:	9002      	str	r0, [sp, #8]
 801c6fe:	463a      	mov	r2, r7
 801c700:	4640      	mov	r0, r8
 801c702:	4798      	blx	r3
 801c704:	6923      	ldr	r3, [r4, #16]
 801c706:	3b01      	subs	r3, #1
 801c708:	6123      	str	r3, [r4, #16]
 801c70a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c70e:	fa5f fa8a 	uxtb.w	sl, sl
 801c712:	f1ba 0f02 	cmp.w	sl, #2
 801c716:	d1ec      	bne.n	801c6f2 <_scanf_float+0x2c6>
 801c718:	3d03      	subs	r5, #3
 801c71a:	b2ed      	uxtb	r5, r5
 801c71c:	1b76      	subs	r6, r6, r5
 801c71e:	6823      	ldr	r3, [r4, #0]
 801c720:	05da      	lsls	r2, r3, #23
 801c722:	d52f      	bpl.n	801c784 <_scanf_float+0x358>
 801c724:	055b      	lsls	r3, r3, #21
 801c726:	d510      	bpl.n	801c74a <_scanf_float+0x31e>
 801c728:	455e      	cmp	r6, fp
 801c72a:	f67f aebf 	bls.w	801c4ac <_scanf_float+0x80>
 801c72e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c732:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801c736:	463a      	mov	r2, r7
 801c738:	4640      	mov	r0, r8
 801c73a:	4798      	blx	r3
 801c73c:	6923      	ldr	r3, [r4, #16]
 801c73e:	3b01      	subs	r3, #1
 801c740:	6123      	str	r3, [r4, #16]
 801c742:	e7f1      	b.n	801c728 <_scanf_float+0x2fc>
 801c744:	46aa      	mov	sl, r5
 801c746:	9602      	str	r6, [sp, #8]
 801c748:	e7df      	b.n	801c70a <_scanf_float+0x2de>
 801c74a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801c74e:	6923      	ldr	r3, [r4, #16]
 801c750:	2965      	cmp	r1, #101	; 0x65
 801c752:	f103 33ff 	add.w	r3, r3, #4294967295
 801c756:	f106 35ff 	add.w	r5, r6, #4294967295
 801c75a:	6123      	str	r3, [r4, #16]
 801c75c:	d00c      	beq.n	801c778 <_scanf_float+0x34c>
 801c75e:	2945      	cmp	r1, #69	; 0x45
 801c760:	d00a      	beq.n	801c778 <_scanf_float+0x34c>
 801c762:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c766:	463a      	mov	r2, r7
 801c768:	4640      	mov	r0, r8
 801c76a:	4798      	blx	r3
 801c76c:	6923      	ldr	r3, [r4, #16]
 801c76e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801c772:	3b01      	subs	r3, #1
 801c774:	1eb5      	subs	r5, r6, #2
 801c776:	6123      	str	r3, [r4, #16]
 801c778:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c77c:	463a      	mov	r2, r7
 801c77e:	4640      	mov	r0, r8
 801c780:	4798      	blx	r3
 801c782:	462e      	mov	r6, r5
 801c784:	6825      	ldr	r5, [r4, #0]
 801c786:	f015 0510 	ands.w	r5, r5, #16
 801c78a:	d158      	bne.n	801c83e <_scanf_float+0x412>
 801c78c:	7035      	strb	r5, [r6, #0]
 801c78e:	6823      	ldr	r3, [r4, #0]
 801c790:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801c794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c798:	d11c      	bne.n	801c7d4 <_scanf_float+0x3a8>
 801c79a:	9b01      	ldr	r3, [sp, #4]
 801c79c:	454b      	cmp	r3, r9
 801c79e:	eba3 0209 	sub.w	r2, r3, r9
 801c7a2:	d124      	bne.n	801c7ee <_scanf_float+0x3c2>
 801c7a4:	2200      	movs	r2, #0
 801c7a6:	4659      	mov	r1, fp
 801c7a8:	4640      	mov	r0, r8
 801c7aa:	f001 f873 	bl	801d894 <_strtod_r>
 801c7ae:	9b03      	ldr	r3, [sp, #12]
 801c7b0:	6821      	ldr	r1, [r4, #0]
 801c7b2:	681b      	ldr	r3, [r3, #0]
 801c7b4:	f011 0f02 	tst.w	r1, #2
 801c7b8:	ec57 6b10 	vmov	r6, r7, d0
 801c7bc:	f103 0204 	add.w	r2, r3, #4
 801c7c0:	d020      	beq.n	801c804 <_scanf_float+0x3d8>
 801c7c2:	9903      	ldr	r1, [sp, #12]
 801c7c4:	600a      	str	r2, [r1, #0]
 801c7c6:	681b      	ldr	r3, [r3, #0]
 801c7c8:	e9c3 6700 	strd	r6, r7, [r3]
 801c7cc:	68e3      	ldr	r3, [r4, #12]
 801c7ce:	3301      	adds	r3, #1
 801c7d0:	60e3      	str	r3, [r4, #12]
 801c7d2:	e66c      	b.n	801c4ae <_scanf_float+0x82>
 801c7d4:	9b04      	ldr	r3, [sp, #16]
 801c7d6:	2b00      	cmp	r3, #0
 801c7d8:	d0e4      	beq.n	801c7a4 <_scanf_float+0x378>
 801c7da:	9905      	ldr	r1, [sp, #20]
 801c7dc:	230a      	movs	r3, #10
 801c7de:	462a      	mov	r2, r5
 801c7e0:	3101      	adds	r1, #1
 801c7e2:	4640      	mov	r0, r8
 801c7e4:	f001 f8e0 	bl	801d9a8 <_strtol_r>
 801c7e8:	9b04      	ldr	r3, [sp, #16]
 801c7ea:	9e05      	ldr	r6, [sp, #20]
 801c7ec:	1ac2      	subs	r2, r0, r3
 801c7ee:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801c7f2:	429e      	cmp	r6, r3
 801c7f4:	bf28      	it	cs
 801c7f6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801c7fa:	4912      	ldr	r1, [pc, #72]	; (801c844 <_scanf_float+0x418>)
 801c7fc:	4630      	mov	r0, r6
 801c7fe:	f000 f977 	bl	801caf0 <siprintf>
 801c802:	e7cf      	b.n	801c7a4 <_scanf_float+0x378>
 801c804:	f011 0f04 	tst.w	r1, #4
 801c808:	9903      	ldr	r1, [sp, #12]
 801c80a:	600a      	str	r2, [r1, #0]
 801c80c:	d1db      	bne.n	801c7c6 <_scanf_float+0x39a>
 801c80e:	f8d3 8000 	ldr.w	r8, [r3]
 801c812:	ee10 2a10 	vmov	r2, s0
 801c816:	ee10 0a10 	vmov	r0, s0
 801c81a:	463b      	mov	r3, r7
 801c81c:	4639      	mov	r1, r7
 801c81e:	f7e4 f9a5 	bl	8000b6c <__aeabi_dcmpun>
 801c822:	b128      	cbz	r0, 801c830 <_scanf_float+0x404>
 801c824:	4808      	ldr	r0, [pc, #32]	; (801c848 <_scanf_float+0x41c>)
 801c826:	f000 f919 	bl	801ca5c <nanf>
 801c82a:	ed88 0a00 	vstr	s0, [r8]
 801c82e:	e7cd      	b.n	801c7cc <_scanf_float+0x3a0>
 801c830:	4630      	mov	r0, r6
 801c832:	4639      	mov	r1, r7
 801c834:	f7e4 f9f8 	bl	8000c28 <__aeabi_d2f>
 801c838:	f8c8 0000 	str.w	r0, [r8]
 801c83c:	e7c6      	b.n	801c7cc <_scanf_float+0x3a0>
 801c83e:	2500      	movs	r5, #0
 801c840:	e635      	b.n	801c4ae <_scanf_float+0x82>
 801c842:	bf00      	nop
 801c844:	0802329a 	.word	0x0802329a
 801c848:	08023367 	.word	0x08023367

0801c84c <iprintf>:
 801c84c:	b40f      	push	{r0, r1, r2, r3}
 801c84e:	4b0a      	ldr	r3, [pc, #40]	; (801c878 <iprintf+0x2c>)
 801c850:	b513      	push	{r0, r1, r4, lr}
 801c852:	681c      	ldr	r4, [r3, #0]
 801c854:	b124      	cbz	r4, 801c860 <iprintf+0x14>
 801c856:	69a3      	ldr	r3, [r4, #24]
 801c858:	b913      	cbnz	r3, 801c860 <iprintf+0x14>
 801c85a:	4620      	mov	r0, r4
 801c85c:	f7fe fc30 	bl	801b0c0 <__sinit>
 801c860:	ab05      	add	r3, sp, #20
 801c862:	9a04      	ldr	r2, [sp, #16]
 801c864:	68a1      	ldr	r1, [r4, #8]
 801c866:	9301      	str	r3, [sp, #4]
 801c868:	4620      	mov	r0, r4
 801c86a:	f004 f947 	bl	8020afc <_vfiprintf_r>
 801c86e:	b002      	add	sp, #8
 801c870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c874:	b004      	add	sp, #16
 801c876:	4770      	bx	lr
 801c878:	200001fc 	.word	0x200001fc

0801c87c <_puts_r>:
 801c87c:	b570      	push	{r4, r5, r6, lr}
 801c87e:	460e      	mov	r6, r1
 801c880:	4605      	mov	r5, r0
 801c882:	b118      	cbz	r0, 801c88c <_puts_r+0x10>
 801c884:	6983      	ldr	r3, [r0, #24]
 801c886:	b90b      	cbnz	r3, 801c88c <_puts_r+0x10>
 801c888:	f7fe fc1a 	bl	801b0c0 <__sinit>
 801c88c:	69ab      	ldr	r3, [r5, #24]
 801c88e:	68ac      	ldr	r4, [r5, #8]
 801c890:	b913      	cbnz	r3, 801c898 <_puts_r+0x1c>
 801c892:	4628      	mov	r0, r5
 801c894:	f7fe fc14 	bl	801b0c0 <__sinit>
 801c898:	4b2c      	ldr	r3, [pc, #176]	; (801c94c <_puts_r+0xd0>)
 801c89a:	429c      	cmp	r4, r3
 801c89c:	d120      	bne.n	801c8e0 <_puts_r+0x64>
 801c89e:	686c      	ldr	r4, [r5, #4]
 801c8a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c8a2:	07db      	lsls	r3, r3, #31
 801c8a4:	d405      	bmi.n	801c8b2 <_puts_r+0x36>
 801c8a6:	89a3      	ldrh	r3, [r4, #12]
 801c8a8:	0598      	lsls	r0, r3, #22
 801c8aa:	d402      	bmi.n	801c8b2 <_puts_r+0x36>
 801c8ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c8ae:	f7fe fde7 	bl	801b480 <__retarget_lock_acquire_recursive>
 801c8b2:	89a3      	ldrh	r3, [r4, #12]
 801c8b4:	0719      	lsls	r1, r3, #28
 801c8b6:	d51d      	bpl.n	801c8f4 <_puts_r+0x78>
 801c8b8:	6923      	ldr	r3, [r4, #16]
 801c8ba:	b1db      	cbz	r3, 801c8f4 <_puts_r+0x78>
 801c8bc:	3e01      	subs	r6, #1
 801c8be:	68a3      	ldr	r3, [r4, #8]
 801c8c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801c8c4:	3b01      	subs	r3, #1
 801c8c6:	60a3      	str	r3, [r4, #8]
 801c8c8:	bb39      	cbnz	r1, 801c91a <_puts_r+0x9e>
 801c8ca:	2b00      	cmp	r3, #0
 801c8cc:	da38      	bge.n	801c940 <_puts_r+0xc4>
 801c8ce:	4622      	mov	r2, r4
 801c8d0:	210a      	movs	r1, #10
 801c8d2:	4628      	mov	r0, r5
 801c8d4:	f001 fb6c 	bl	801dfb0 <__swbuf_r>
 801c8d8:	3001      	adds	r0, #1
 801c8da:	d011      	beq.n	801c900 <_puts_r+0x84>
 801c8dc:	250a      	movs	r5, #10
 801c8de:	e011      	b.n	801c904 <_puts_r+0x88>
 801c8e0:	4b1b      	ldr	r3, [pc, #108]	; (801c950 <_puts_r+0xd4>)
 801c8e2:	429c      	cmp	r4, r3
 801c8e4:	d101      	bne.n	801c8ea <_puts_r+0x6e>
 801c8e6:	68ac      	ldr	r4, [r5, #8]
 801c8e8:	e7da      	b.n	801c8a0 <_puts_r+0x24>
 801c8ea:	4b1a      	ldr	r3, [pc, #104]	; (801c954 <_puts_r+0xd8>)
 801c8ec:	429c      	cmp	r4, r3
 801c8ee:	bf08      	it	eq
 801c8f0:	68ec      	ldreq	r4, [r5, #12]
 801c8f2:	e7d5      	b.n	801c8a0 <_puts_r+0x24>
 801c8f4:	4621      	mov	r1, r4
 801c8f6:	4628      	mov	r0, r5
 801c8f8:	f001 fbbe 	bl	801e078 <__swsetup_r>
 801c8fc:	2800      	cmp	r0, #0
 801c8fe:	d0dd      	beq.n	801c8bc <_puts_r+0x40>
 801c900:	f04f 35ff 	mov.w	r5, #4294967295
 801c904:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c906:	07da      	lsls	r2, r3, #31
 801c908:	d405      	bmi.n	801c916 <_puts_r+0x9a>
 801c90a:	89a3      	ldrh	r3, [r4, #12]
 801c90c:	059b      	lsls	r3, r3, #22
 801c90e:	d402      	bmi.n	801c916 <_puts_r+0x9a>
 801c910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c912:	f7fe fdb7 	bl	801b484 <__retarget_lock_release_recursive>
 801c916:	4628      	mov	r0, r5
 801c918:	bd70      	pop	{r4, r5, r6, pc}
 801c91a:	2b00      	cmp	r3, #0
 801c91c:	da04      	bge.n	801c928 <_puts_r+0xac>
 801c91e:	69a2      	ldr	r2, [r4, #24]
 801c920:	429a      	cmp	r2, r3
 801c922:	dc06      	bgt.n	801c932 <_puts_r+0xb6>
 801c924:	290a      	cmp	r1, #10
 801c926:	d004      	beq.n	801c932 <_puts_r+0xb6>
 801c928:	6823      	ldr	r3, [r4, #0]
 801c92a:	1c5a      	adds	r2, r3, #1
 801c92c:	6022      	str	r2, [r4, #0]
 801c92e:	7019      	strb	r1, [r3, #0]
 801c930:	e7c5      	b.n	801c8be <_puts_r+0x42>
 801c932:	4622      	mov	r2, r4
 801c934:	4628      	mov	r0, r5
 801c936:	f001 fb3b 	bl	801dfb0 <__swbuf_r>
 801c93a:	3001      	adds	r0, #1
 801c93c:	d1bf      	bne.n	801c8be <_puts_r+0x42>
 801c93e:	e7df      	b.n	801c900 <_puts_r+0x84>
 801c940:	6823      	ldr	r3, [r4, #0]
 801c942:	250a      	movs	r5, #10
 801c944:	1c5a      	adds	r2, r3, #1
 801c946:	6022      	str	r2, [r4, #0]
 801c948:	701d      	strb	r5, [r3, #0]
 801c94a:	e7db      	b.n	801c904 <_puts_r+0x88>
 801c94c:	080230ec 	.word	0x080230ec
 801c950:	0802310c 	.word	0x0802310c
 801c954:	080230cc 	.word	0x080230cc

0801c958 <puts>:
 801c958:	4b02      	ldr	r3, [pc, #8]	; (801c964 <puts+0xc>)
 801c95a:	4601      	mov	r1, r0
 801c95c:	6818      	ldr	r0, [r3, #0]
 801c95e:	f7ff bf8d 	b.w	801c87c <_puts_r>
 801c962:	bf00      	nop
 801c964:	200001fc 	.word	0x200001fc

0801c968 <cleanup_glue>:
 801c968:	b538      	push	{r3, r4, r5, lr}
 801c96a:	460c      	mov	r4, r1
 801c96c:	6809      	ldr	r1, [r1, #0]
 801c96e:	4605      	mov	r5, r0
 801c970:	b109      	cbz	r1, 801c976 <cleanup_glue+0xe>
 801c972:	f7ff fff9 	bl	801c968 <cleanup_glue>
 801c976:	4621      	mov	r1, r4
 801c978:	4628      	mov	r0, r5
 801c97a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c97e:	f7ff b841 	b.w	801ba04 <_free_r>
	...

0801c984 <_reclaim_reent>:
 801c984:	4b2c      	ldr	r3, [pc, #176]	; (801ca38 <_reclaim_reent+0xb4>)
 801c986:	681b      	ldr	r3, [r3, #0]
 801c988:	4283      	cmp	r3, r0
 801c98a:	b570      	push	{r4, r5, r6, lr}
 801c98c:	4604      	mov	r4, r0
 801c98e:	d051      	beq.n	801ca34 <_reclaim_reent+0xb0>
 801c990:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801c992:	b143      	cbz	r3, 801c9a6 <_reclaim_reent+0x22>
 801c994:	68db      	ldr	r3, [r3, #12]
 801c996:	2b00      	cmp	r3, #0
 801c998:	d14a      	bne.n	801ca30 <_reclaim_reent+0xac>
 801c99a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c99c:	6819      	ldr	r1, [r3, #0]
 801c99e:	b111      	cbz	r1, 801c9a6 <_reclaim_reent+0x22>
 801c9a0:	4620      	mov	r0, r4
 801c9a2:	f7ff f82f 	bl	801ba04 <_free_r>
 801c9a6:	6961      	ldr	r1, [r4, #20]
 801c9a8:	b111      	cbz	r1, 801c9b0 <_reclaim_reent+0x2c>
 801c9aa:	4620      	mov	r0, r4
 801c9ac:	f7ff f82a 	bl	801ba04 <_free_r>
 801c9b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801c9b2:	b111      	cbz	r1, 801c9ba <_reclaim_reent+0x36>
 801c9b4:	4620      	mov	r0, r4
 801c9b6:	f7ff f825 	bl	801ba04 <_free_r>
 801c9ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c9bc:	b111      	cbz	r1, 801c9c4 <_reclaim_reent+0x40>
 801c9be:	4620      	mov	r0, r4
 801c9c0:	f7ff f820 	bl	801ba04 <_free_r>
 801c9c4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801c9c6:	b111      	cbz	r1, 801c9ce <_reclaim_reent+0x4a>
 801c9c8:	4620      	mov	r0, r4
 801c9ca:	f7ff f81b 	bl	801ba04 <_free_r>
 801c9ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801c9d0:	b111      	cbz	r1, 801c9d8 <_reclaim_reent+0x54>
 801c9d2:	4620      	mov	r0, r4
 801c9d4:	f7ff f816 	bl	801ba04 <_free_r>
 801c9d8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801c9da:	b111      	cbz	r1, 801c9e2 <_reclaim_reent+0x5e>
 801c9dc:	4620      	mov	r0, r4
 801c9de:	f7ff f811 	bl	801ba04 <_free_r>
 801c9e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801c9e4:	b111      	cbz	r1, 801c9ec <_reclaim_reent+0x68>
 801c9e6:	4620      	mov	r0, r4
 801c9e8:	f7ff f80c 	bl	801ba04 <_free_r>
 801c9ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c9ee:	b111      	cbz	r1, 801c9f6 <_reclaim_reent+0x72>
 801c9f0:	4620      	mov	r0, r4
 801c9f2:	f7ff f807 	bl	801ba04 <_free_r>
 801c9f6:	69a3      	ldr	r3, [r4, #24]
 801c9f8:	b1e3      	cbz	r3, 801ca34 <_reclaim_reent+0xb0>
 801c9fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801c9fc:	4620      	mov	r0, r4
 801c9fe:	4798      	blx	r3
 801ca00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801ca02:	b1b9      	cbz	r1, 801ca34 <_reclaim_reent+0xb0>
 801ca04:	4620      	mov	r0, r4
 801ca06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ca0a:	f7ff bfad 	b.w	801c968 <cleanup_glue>
 801ca0e:	5949      	ldr	r1, [r1, r5]
 801ca10:	b941      	cbnz	r1, 801ca24 <_reclaim_reent+0xa0>
 801ca12:	3504      	adds	r5, #4
 801ca14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ca16:	2d80      	cmp	r5, #128	; 0x80
 801ca18:	68d9      	ldr	r1, [r3, #12]
 801ca1a:	d1f8      	bne.n	801ca0e <_reclaim_reent+0x8a>
 801ca1c:	4620      	mov	r0, r4
 801ca1e:	f7fe fff1 	bl	801ba04 <_free_r>
 801ca22:	e7ba      	b.n	801c99a <_reclaim_reent+0x16>
 801ca24:	680e      	ldr	r6, [r1, #0]
 801ca26:	4620      	mov	r0, r4
 801ca28:	f7fe ffec 	bl	801ba04 <_free_r>
 801ca2c:	4631      	mov	r1, r6
 801ca2e:	e7ef      	b.n	801ca10 <_reclaim_reent+0x8c>
 801ca30:	2500      	movs	r5, #0
 801ca32:	e7ef      	b.n	801ca14 <_reclaim_reent+0x90>
 801ca34:	bd70      	pop	{r4, r5, r6, pc}
 801ca36:	bf00      	nop
 801ca38:	200001fc 	.word	0x200001fc

0801ca3c <_sbrk_r>:
 801ca3c:	b538      	push	{r3, r4, r5, lr}
 801ca3e:	4d06      	ldr	r5, [pc, #24]	; (801ca58 <_sbrk_r+0x1c>)
 801ca40:	2300      	movs	r3, #0
 801ca42:	4604      	mov	r4, r0
 801ca44:	4608      	mov	r0, r1
 801ca46:	602b      	str	r3, [r5, #0]
 801ca48:	f7e6 fd3a 	bl	80034c0 <_sbrk>
 801ca4c:	1c43      	adds	r3, r0, #1
 801ca4e:	d102      	bne.n	801ca56 <_sbrk_r+0x1a>
 801ca50:	682b      	ldr	r3, [r5, #0]
 801ca52:	b103      	cbz	r3, 801ca56 <_sbrk_r+0x1a>
 801ca54:	6023      	str	r3, [r4, #0]
 801ca56:	bd38      	pop	{r3, r4, r5, pc}
 801ca58:	20008fd0 	.word	0x20008fd0

0801ca5c <nanf>:
 801ca5c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801ca64 <nanf+0x8>
 801ca60:	4770      	bx	lr
 801ca62:	bf00      	nop
 801ca64:	7fc00000 	.word	0x7fc00000

0801ca68 <_raise_r>:
 801ca68:	291f      	cmp	r1, #31
 801ca6a:	b538      	push	{r3, r4, r5, lr}
 801ca6c:	4604      	mov	r4, r0
 801ca6e:	460d      	mov	r5, r1
 801ca70:	d904      	bls.n	801ca7c <_raise_r+0x14>
 801ca72:	2316      	movs	r3, #22
 801ca74:	6003      	str	r3, [r0, #0]
 801ca76:	f04f 30ff 	mov.w	r0, #4294967295
 801ca7a:	bd38      	pop	{r3, r4, r5, pc}
 801ca7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ca7e:	b112      	cbz	r2, 801ca86 <_raise_r+0x1e>
 801ca80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ca84:	b94b      	cbnz	r3, 801ca9a <_raise_r+0x32>
 801ca86:	4620      	mov	r0, r4
 801ca88:	f000 f830 	bl	801caec <_getpid_r>
 801ca8c:	462a      	mov	r2, r5
 801ca8e:	4601      	mov	r1, r0
 801ca90:	4620      	mov	r0, r4
 801ca92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ca96:	f000 b817 	b.w	801cac8 <_kill_r>
 801ca9a:	2b01      	cmp	r3, #1
 801ca9c:	d00a      	beq.n	801cab4 <_raise_r+0x4c>
 801ca9e:	1c59      	adds	r1, r3, #1
 801caa0:	d103      	bne.n	801caaa <_raise_r+0x42>
 801caa2:	2316      	movs	r3, #22
 801caa4:	6003      	str	r3, [r0, #0]
 801caa6:	2001      	movs	r0, #1
 801caa8:	e7e7      	b.n	801ca7a <_raise_r+0x12>
 801caaa:	2400      	movs	r4, #0
 801caac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801cab0:	4628      	mov	r0, r5
 801cab2:	4798      	blx	r3
 801cab4:	2000      	movs	r0, #0
 801cab6:	e7e0      	b.n	801ca7a <_raise_r+0x12>

0801cab8 <raise>:
 801cab8:	4b02      	ldr	r3, [pc, #8]	; (801cac4 <raise+0xc>)
 801caba:	4601      	mov	r1, r0
 801cabc:	6818      	ldr	r0, [r3, #0]
 801cabe:	f7ff bfd3 	b.w	801ca68 <_raise_r>
 801cac2:	bf00      	nop
 801cac4:	200001fc 	.word	0x200001fc

0801cac8 <_kill_r>:
 801cac8:	b538      	push	{r3, r4, r5, lr}
 801caca:	4d07      	ldr	r5, [pc, #28]	; (801cae8 <_kill_r+0x20>)
 801cacc:	2300      	movs	r3, #0
 801cace:	4604      	mov	r4, r0
 801cad0:	4608      	mov	r0, r1
 801cad2:	4611      	mov	r1, r2
 801cad4:	602b      	str	r3, [r5, #0]
 801cad6:	f7e6 fc6b 	bl	80033b0 <_kill>
 801cada:	1c43      	adds	r3, r0, #1
 801cadc:	d102      	bne.n	801cae4 <_kill_r+0x1c>
 801cade:	682b      	ldr	r3, [r5, #0]
 801cae0:	b103      	cbz	r3, 801cae4 <_kill_r+0x1c>
 801cae2:	6023      	str	r3, [r4, #0]
 801cae4:	bd38      	pop	{r3, r4, r5, pc}
 801cae6:	bf00      	nop
 801cae8:	20008fd0 	.word	0x20008fd0

0801caec <_getpid_r>:
 801caec:	f7e6 bc58 	b.w	80033a0 <_getpid>

0801caf0 <siprintf>:
 801caf0:	b40e      	push	{r1, r2, r3}
 801caf2:	b500      	push	{lr}
 801caf4:	b09c      	sub	sp, #112	; 0x70
 801caf6:	ab1d      	add	r3, sp, #116	; 0x74
 801caf8:	9002      	str	r0, [sp, #8]
 801cafa:	9006      	str	r0, [sp, #24]
 801cafc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801cb00:	4809      	ldr	r0, [pc, #36]	; (801cb28 <siprintf+0x38>)
 801cb02:	9107      	str	r1, [sp, #28]
 801cb04:	9104      	str	r1, [sp, #16]
 801cb06:	4909      	ldr	r1, [pc, #36]	; (801cb2c <siprintf+0x3c>)
 801cb08:	f853 2b04 	ldr.w	r2, [r3], #4
 801cb0c:	9105      	str	r1, [sp, #20]
 801cb0e:	6800      	ldr	r0, [r0, #0]
 801cb10:	9301      	str	r3, [sp, #4]
 801cb12:	a902      	add	r1, sp, #8
 801cb14:	f003 fcf6 	bl	8020504 <_svfiprintf_r>
 801cb18:	9b02      	ldr	r3, [sp, #8]
 801cb1a:	2200      	movs	r2, #0
 801cb1c:	701a      	strb	r2, [r3, #0]
 801cb1e:	b01c      	add	sp, #112	; 0x70
 801cb20:	f85d eb04 	ldr.w	lr, [sp], #4
 801cb24:	b003      	add	sp, #12
 801cb26:	4770      	bx	lr
 801cb28:	200001fc 	.word	0x200001fc
 801cb2c:	ffff0208 	.word	0xffff0208

0801cb30 <siscanf>:
 801cb30:	b40e      	push	{r1, r2, r3}
 801cb32:	b510      	push	{r4, lr}
 801cb34:	b09f      	sub	sp, #124	; 0x7c
 801cb36:	ac21      	add	r4, sp, #132	; 0x84
 801cb38:	f44f 7101 	mov.w	r1, #516	; 0x204
 801cb3c:	f854 2b04 	ldr.w	r2, [r4], #4
 801cb40:	9201      	str	r2, [sp, #4]
 801cb42:	f8ad 101c 	strh.w	r1, [sp, #28]
 801cb46:	9004      	str	r0, [sp, #16]
 801cb48:	9008      	str	r0, [sp, #32]
 801cb4a:	f7e3 fb5b 	bl	8000204 <strlen>
 801cb4e:	4b0c      	ldr	r3, [pc, #48]	; (801cb80 <siscanf+0x50>)
 801cb50:	9005      	str	r0, [sp, #20]
 801cb52:	9009      	str	r0, [sp, #36]	; 0x24
 801cb54:	930d      	str	r3, [sp, #52]	; 0x34
 801cb56:	480b      	ldr	r0, [pc, #44]	; (801cb84 <siscanf+0x54>)
 801cb58:	9a01      	ldr	r2, [sp, #4]
 801cb5a:	6800      	ldr	r0, [r0, #0]
 801cb5c:	9403      	str	r4, [sp, #12]
 801cb5e:	2300      	movs	r3, #0
 801cb60:	9311      	str	r3, [sp, #68]	; 0x44
 801cb62:	9316      	str	r3, [sp, #88]	; 0x58
 801cb64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cb68:	f8ad 301e 	strh.w	r3, [sp, #30]
 801cb6c:	a904      	add	r1, sp, #16
 801cb6e:	4623      	mov	r3, r4
 801cb70:	f003 fe22 	bl	80207b8 <__ssvfiscanf_r>
 801cb74:	b01f      	add	sp, #124	; 0x7c
 801cb76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cb7a:	b003      	add	sp, #12
 801cb7c:	4770      	bx	lr
 801cb7e:	bf00      	nop
 801cb80:	0801cbab 	.word	0x0801cbab
 801cb84:	200001fc 	.word	0x200001fc

0801cb88 <__sread>:
 801cb88:	b510      	push	{r4, lr}
 801cb8a:	460c      	mov	r4, r1
 801cb8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cb90:	f004 fa30 	bl	8020ff4 <_read_r>
 801cb94:	2800      	cmp	r0, #0
 801cb96:	bfab      	itete	ge
 801cb98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801cb9a:	89a3      	ldrhlt	r3, [r4, #12]
 801cb9c:	181b      	addge	r3, r3, r0
 801cb9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801cba2:	bfac      	ite	ge
 801cba4:	6563      	strge	r3, [r4, #84]	; 0x54
 801cba6:	81a3      	strhlt	r3, [r4, #12]
 801cba8:	bd10      	pop	{r4, pc}

0801cbaa <__seofread>:
 801cbaa:	2000      	movs	r0, #0
 801cbac:	4770      	bx	lr

0801cbae <__swrite>:
 801cbae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cbb2:	461f      	mov	r7, r3
 801cbb4:	898b      	ldrh	r3, [r1, #12]
 801cbb6:	05db      	lsls	r3, r3, #23
 801cbb8:	4605      	mov	r5, r0
 801cbba:	460c      	mov	r4, r1
 801cbbc:	4616      	mov	r6, r2
 801cbbe:	d505      	bpl.n	801cbcc <__swrite+0x1e>
 801cbc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cbc4:	2302      	movs	r3, #2
 801cbc6:	2200      	movs	r2, #0
 801cbc8:	f002 febc 	bl	801f944 <_lseek_r>
 801cbcc:	89a3      	ldrh	r3, [r4, #12]
 801cbce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cbd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801cbd6:	81a3      	strh	r3, [r4, #12]
 801cbd8:	4632      	mov	r2, r6
 801cbda:	463b      	mov	r3, r7
 801cbdc:	4628      	mov	r0, r5
 801cbde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cbe2:	f001 ba37 	b.w	801e054 <_write_r>

0801cbe6 <__sseek>:
 801cbe6:	b510      	push	{r4, lr}
 801cbe8:	460c      	mov	r4, r1
 801cbea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cbee:	f002 fea9 	bl	801f944 <_lseek_r>
 801cbf2:	1c43      	adds	r3, r0, #1
 801cbf4:	89a3      	ldrh	r3, [r4, #12]
 801cbf6:	bf15      	itete	ne
 801cbf8:	6560      	strne	r0, [r4, #84]	; 0x54
 801cbfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801cbfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801cc02:	81a3      	strheq	r3, [r4, #12]
 801cc04:	bf18      	it	ne
 801cc06:	81a3      	strhne	r3, [r4, #12]
 801cc08:	bd10      	pop	{r4, pc}

0801cc0a <__sclose>:
 801cc0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cc0e:	f001 babf 	b.w	801e190 <_close_r>

0801cc12 <strcpy>:
 801cc12:	4603      	mov	r3, r0
 801cc14:	f811 2b01 	ldrb.w	r2, [r1], #1
 801cc18:	f803 2b01 	strb.w	r2, [r3], #1
 801cc1c:	2a00      	cmp	r2, #0
 801cc1e:	d1f9      	bne.n	801cc14 <strcpy+0x2>
 801cc20:	4770      	bx	lr

0801cc22 <strncmp>:
 801cc22:	b510      	push	{r4, lr}
 801cc24:	b16a      	cbz	r2, 801cc42 <strncmp+0x20>
 801cc26:	3901      	subs	r1, #1
 801cc28:	1884      	adds	r4, r0, r2
 801cc2a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801cc2e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801cc32:	4293      	cmp	r3, r2
 801cc34:	d103      	bne.n	801cc3e <strncmp+0x1c>
 801cc36:	42a0      	cmp	r0, r4
 801cc38:	d001      	beq.n	801cc3e <strncmp+0x1c>
 801cc3a:	2b00      	cmp	r3, #0
 801cc3c:	d1f5      	bne.n	801cc2a <strncmp+0x8>
 801cc3e:	1a98      	subs	r0, r3, r2
 801cc40:	bd10      	pop	{r4, pc}
 801cc42:	4610      	mov	r0, r2
 801cc44:	e7fc      	b.n	801cc40 <strncmp+0x1e>

0801cc46 <sulp>:
 801cc46:	b570      	push	{r4, r5, r6, lr}
 801cc48:	4604      	mov	r4, r0
 801cc4a:	460d      	mov	r5, r1
 801cc4c:	ec45 4b10 	vmov	d0, r4, r5
 801cc50:	4616      	mov	r6, r2
 801cc52:	f003 fa77 	bl	8020144 <__ulp>
 801cc56:	ec51 0b10 	vmov	r0, r1, d0
 801cc5a:	b17e      	cbz	r6, 801cc7c <sulp+0x36>
 801cc5c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801cc60:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801cc64:	2b00      	cmp	r3, #0
 801cc66:	dd09      	ble.n	801cc7c <sulp+0x36>
 801cc68:	051b      	lsls	r3, r3, #20
 801cc6a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801cc6e:	2400      	movs	r4, #0
 801cc70:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801cc74:	4622      	mov	r2, r4
 801cc76:	462b      	mov	r3, r5
 801cc78:	f7e3 fcde 	bl	8000638 <__aeabi_dmul>
 801cc7c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801cc80 <_strtod_l>:
 801cc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc84:	b0a3      	sub	sp, #140	; 0x8c
 801cc86:	461f      	mov	r7, r3
 801cc88:	2300      	movs	r3, #0
 801cc8a:	931e      	str	r3, [sp, #120]	; 0x78
 801cc8c:	4ba4      	ldr	r3, [pc, #656]	; (801cf20 <_strtod_l+0x2a0>)
 801cc8e:	9219      	str	r2, [sp, #100]	; 0x64
 801cc90:	681b      	ldr	r3, [r3, #0]
 801cc92:	9307      	str	r3, [sp, #28]
 801cc94:	4604      	mov	r4, r0
 801cc96:	4618      	mov	r0, r3
 801cc98:	4688      	mov	r8, r1
 801cc9a:	f7e3 fab3 	bl	8000204 <strlen>
 801cc9e:	f04f 0a00 	mov.w	sl, #0
 801cca2:	4605      	mov	r5, r0
 801cca4:	f04f 0b00 	mov.w	fp, #0
 801cca8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801ccac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ccae:	781a      	ldrb	r2, [r3, #0]
 801ccb0:	2a2b      	cmp	r2, #43	; 0x2b
 801ccb2:	d04c      	beq.n	801cd4e <_strtod_l+0xce>
 801ccb4:	d839      	bhi.n	801cd2a <_strtod_l+0xaa>
 801ccb6:	2a0d      	cmp	r2, #13
 801ccb8:	d832      	bhi.n	801cd20 <_strtod_l+0xa0>
 801ccba:	2a08      	cmp	r2, #8
 801ccbc:	d832      	bhi.n	801cd24 <_strtod_l+0xa4>
 801ccbe:	2a00      	cmp	r2, #0
 801ccc0:	d03c      	beq.n	801cd3c <_strtod_l+0xbc>
 801ccc2:	2300      	movs	r3, #0
 801ccc4:	930e      	str	r3, [sp, #56]	; 0x38
 801ccc6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801ccc8:	7833      	ldrb	r3, [r6, #0]
 801ccca:	2b30      	cmp	r3, #48	; 0x30
 801cccc:	f040 80b4 	bne.w	801ce38 <_strtod_l+0x1b8>
 801ccd0:	7873      	ldrb	r3, [r6, #1]
 801ccd2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801ccd6:	2b58      	cmp	r3, #88	; 0x58
 801ccd8:	d16c      	bne.n	801cdb4 <_strtod_l+0x134>
 801ccda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ccdc:	9301      	str	r3, [sp, #4]
 801ccde:	ab1e      	add	r3, sp, #120	; 0x78
 801cce0:	9702      	str	r7, [sp, #8]
 801cce2:	9300      	str	r3, [sp, #0]
 801cce4:	4a8f      	ldr	r2, [pc, #572]	; (801cf24 <_strtod_l+0x2a4>)
 801cce6:	ab1f      	add	r3, sp, #124	; 0x7c
 801cce8:	a91d      	add	r1, sp, #116	; 0x74
 801ccea:	4620      	mov	r0, r4
 801ccec:	f002 fa28 	bl	801f140 <__gethex>
 801ccf0:	f010 0707 	ands.w	r7, r0, #7
 801ccf4:	4605      	mov	r5, r0
 801ccf6:	d005      	beq.n	801cd04 <_strtod_l+0x84>
 801ccf8:	2f06      	cmp	r7, #6
 801ccfa:	d12a      	bne.n	801cd52 <_strtod_l+0xd2>
 801ccfc:	3601      	adds	r6, #1
 801ccfe:	2300      	movs	r3, #0
 801cd00:	961d      	str	r6, [sp, #116]	; 0x74
 801cd02:	930e      	str	r3, [sp, #56]	; 0x38
 801cd04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801cd06:	2b00      	cmp	r3, #0
 801cd08:	f040 8596 	bne.w	801d838 <_strtod_l+0xbb8>
 801cd0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cd0e:	b1db      	cbz	r3, 801cd48 <_strtod_l+0xc8>
 801cd10:	4652      	mov	r2, sl
 801cd12:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801cd16:	ec43 2b10 	vmov	d0, r2, r3
 801cd1a:	b023      	add	sp, #140	; 0x8c
 801cd1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd20:	2a20      	cmp	r2, #32
 801cd22:	d1ce      	bne.n	801ccc2 <_strtod_l+0x42>
 801cd24:	3301      	adds	r3, #1
 801cd26:	931d      	str	r3, [sp, #116]	; 0x74
 801cd28:	e7c0      	b.n	801ccac <_strtod_l+0x2c>
 801cd2a:	2a2d      	cmp	r2, #45	; 0x2d
 801cd2c:	d1c9      	bne.n	801ccc2 <_strtod_l+0x42>
 801cd2e:	2201      	movs	r2, #1
 801cd30:	920e      	str	r2, [sp, #56]	; 0x38
 801cd32:	1c5a      	adds	r2, r3, #1
 801cd34:	921d      	str	r2, [sp, #116]	; 0x74
 801cd36:	785b      	ldrb	r3, [r3, #1]
 801cd38:	2b00      	cmp	r3, #0
 801cd3a:	d1c4      	bne.n	801ccc6 <_strtod_l+0x46>
 801cd3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801cd3e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801cd42:	2b00      	cmp	r3, #0
 801cd44:	f040 8576 	bne.w	801d834 <_strtod_l+0xbb4>
 801cd48:	4652      	mov	r2, sl
 801cd4a:	465b      	mov	r3, fp
 801cd4c:	e7e3      	b.n	801cd16 <_strtod_l+0x96>
 801cd4e:	2200      	movs	r2, #0
 801cd50:	e7ee      	b.n	801cd30 <_strtod_l+0xb0>
 801cd52:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801cd54:	b13a      	cbz	r2, 801cd66 <_strtod_l+0xe6>
 801cd56:	2135      	movs	r1, #53	; 0x35
 801cd58:	a820      	add	r0, sp, #128	; 0x80
 801cd5a:	f003 fafe 	bl	802035a <__copybits>
 801cd5e:	991e      	ldr	r1, [sp, #120]	; 0x78
 801cd60:	4620      	mov	r0, r4
 801cd62:	f002 fec3 	bl	801faec <_Bfree>
 801cd66:	3f01      	subs	r7, #1
 801cd68:	2f05      	cmp	r7, #5
 801cd6a:	d807      	bhi.n	801cd7c <_strtod_l+0xfc>
 801cd6c:	e8df f007 	tbb	[pc, r7]
 801cd70:	1d180b0e 	.word	0x1d180b0e
 801cd74:	030e      	.short	0x030e
 801cd76:	f04f 0b00 	mov.w	fp, #0
 801cd7a:	46da      	mov	sl, fp
 801cd7c:	0728      	lsls	r0, r5, #28
 801cd7e:	d5c1      	bpl.n	801cd04 <_strtod_l+0x84>
 801cd80:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801cd84:	e7be      	b.n	801cd04 <_strtod_l+0x84>
 801cd86:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801cd8a:	e7f7      	b.n	801cd7c <_strtod_l+0xfc>
 801cd8c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801cd90:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801cd92:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801cd96:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801cd9a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801cd9e:	e7ed      	b.n	801cd7c <_strtod_l+0xfc>
 801cda0:	f8df b184 	ldr.w	fp, [pc, #388]	; 801cf28 <_strtod_l+0x2a8>
 801cda4:	f04f 0a00 	mov.w	sl, #0
 801cda8:	e7e8      	b.n	801cd7c <_strtod_l+0xfc>
 801cdaa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801cdae:	f04f 3aff 	mov.w	sl, #4294967295
 801cdb2:	e7e3      	b.n	801cd7c <_strtod_l+0xfc>
 801cdb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801cdb6:	1c5a      	adds	r2, r3, #1
 801cdb8:	921d      	str	r2, [sp, #116]	; 0x74
 801cdba:	785b      	ldrb	r3, [r3, #1]
 801cdbc:	2b30      	cmp	r3, #48	; 0x30
 801cdbe:	d0f9      	beq.n	801cdb4 <_strtod_l+0x134>
 801cdc0:	2b00      	cmp	r3, #0
 801cdc2:	d09f      	beq.n	801cd04 <_strtod_l+0x84>
 801cdc4:	2301      	movs	r3, #1
 801cdc6:	f04f 0900 	mov.w	r9, #0
 801cdca:	9304      	str	r3, [sp, #16]
 801cdcc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801cdce:	930a      	str	r3, [sp, #40]	; 0x28
 801cdd0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801cdd4:	464f      	mov	r7, r9
 801cdd6:	220a      	movs	r2, #10
 801cdd8:	981d      	ldr	r0, [sp, #116]	; 0x74
 801cdda:	7806      	ldrb	r6, [r0, #0]
 801cddc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801cde0:	b2d9      	uxtb	r1, r3
 801cde2:	2909      	cmp	r1, #9
 801cde4:	d92a      	bls.n	801ce3c <_strtod_l+0x1bc>
 801cde6:	9907      	ldr	r1, [sp, #28]
 801cde8:	462a      	mov	r2, r5
 801cdea:	f7ff ff1a 	bl	801cc22 <strncmp>
 801cdee:	b398      	cbz	r0, 801ce58 <_strtod_l+0x1d8>
 801cdf0:	2000      	movs	r0, #0
 801cdf2:	4633      	mov	r3, r6
 801cdf4:	463d      	mov	r5, r7
 801cdf6:	9007      	str	r0, [sp, #28]
 801cdf8:	4602      	mov	r2, r0
 801cdfa:	2b65      	cmp	r3, #101	; 0x65
 801cdfc:	d001      	beq.n	801ce02 <_strtod_l+0x182>
 801cdfe:	2b45      	cmp	r3, #69	; 0x45
 801ce00:	d118      	bne.n	801ce34 <_strtod_l+0x1b4>
 801ce02:	b91d      	cbnz	r5, 801ce0c <_strtod_l+0x18c>
 801ce04:	9b04      	ldr	r3, [sp, #16]
 801ce06:	4303      	orrs	r3, r0
 801ce08:	d098      	beq.n	801cd3c <_strtod_l+0xbc>
 801ce0a:	2500      	movs	r5, #0
 801ce0c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801ce10:	f108 0301 	add.w	r3, r8, #1
 801ce14:	931d      	str	r3, [sp, #116]	; 0x74
 801ce16:	f898 3001 	ldrb.w	r3, [r8, #1]
 801ce1a:	2b2b      	cmp	r3, #43	; 0x2b
 801ce1c:	d075      	beq.n	801cf0a <_strtod_l+0x28a>
 801ce1e:	2b2d      	cmp	r3, #45	; 0x2d
 801ce20:	d07b      	beq.n	801cf1a <_strtod_l+0x29a>
 801ce22:	f04f 0c00 	mov.w	ip, #0
 801ce26:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801ce2a:	2909      	cmp	r1, #9
 801ce2c:	f240 8082 	bls.w	801cf34 <_strtod_l+0x2b4>
 801ce30:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801ce34:	2600      	movs	r6, #0
 801ce36:	e09d      	b.n	801cf74 <_strtod_l+0x2f4>
 801ce38:	2300      	movs	r3, #0
 801ce3a:	e7c4      	b.n	801cdc6 <_strtod_l+0x146>
 801ce3c:	2f08      	cmp	r7, #8
 801ce3e:	bfd8      	it	le
 801ce40:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801ce42:	f100 0001 	add.w	r0, r0, #1
 801ce46:	bfda      	itte	le
 801ce48:	fb02 3301 	mlale	r3, r2, r1, r3
 801ce4c:	9309      	strle	r3, [sp, #36]	; 0x24
 801ce4e:	fb02 3909 	mlagt	r9, r2, r9, r3
 801ce52:	3701      	adds	r7, #1
 801ce54:	901d      	str	r0, [sp, #116]	; 0x74
 801ce56:	e7bf      	b.n	801cdd8 <_strtod_l+0x158>
 801ce58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ce5a:	195a      	adds	r2, r3, r5
 801ce5c:	921d      	str	r2, [sp, #116]	; 0x74
 801ce5e:	5d5b      	ldrb	r3, [r3, r5]
 801ce60:	2f00      	cmp	r7, #0
 801ce62:	d037      	beq.n	801ced4 <_strtod_l+0x254>
 801ce64:	9007      	str	r0, [sp, #28]
 801ce66:	463d      	mov	r5, r7
 801ce68:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801ce6c:	2a09      	cmp	r2, #9
 801ce6e:	d912      	bls.n	801ce96 <_strtod_l+0x216>
 801ce70:	2201      	movs	r2, #1
 801ce72:	e7c2      	b.n	801cdfa <_strtod_l+0x17a>
 801ce74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ce76:	1c5a      	adds	r2, r3, #1
 801ce78:	921d      	str	r2, [sp, #116]	; 0x74
 801ce7a:	785b      	ldrb	r3, [r3, #1]
 801ce7c:	3001      	adds	r0, #1
 801ce7e:	2b30      	cmp	r3, #48	; 0x30
 801ce80:	d0f8      	beq.n	801ce74 <_strtod_l+0x1f4>
 801ce82:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801ce86:	2a08      	cmp	r2, #8
 801ce88:	f200 84db 	bhi.w	801d842 <_strtod_l+0xbc2>
 801ce8c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801ce8e:	9007      	str	r0, [sp, #28]
 801ce90:	2000      	movs	r0, #0
 801ce92:	920a      	str	r2, [sp, #40]	; 0x28
 801ce94:	4605      	mov	r5, r0
 801ce96:	3b30      	subs	r3, #48	; 0x30
 801ce98:	f100 0201 	add.w	r2, r0, #1
 801ce9c:	d014      	beq.n	801cec8 <_strtod_l+0x248>
 801ce9e:	9907      	ldr	r1, [sp, #28]
 801cea0:	4411      	add	r1, r2
 801cea2:	9107      	str	r1, [sp, #28]
 801cea4:	462a      	mov	r2, r5
 801cea6:	eb00 0e05 	add.w	lr, r0, r5
 801ceaa:	210a      	movs	r1, #10
 801ceac:	4572      	cmp	r2, lr
 801ceae:	d113      	bne.n	801ced8 <_strtod_l+0x258>
 801ceb0:	182a      	adds	r2, r5, r0
 801ceb2:	2a08      	cmp	r2, #8
 801ceb4:	f105 0501 	add.w	r5, r5, #1
 801ceb8:	4405      	add	r5, r0
 801ceba:	dc1c      	bgt.n	801cef6 <_strtod_l+0x276>
 801cebc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801cebe:	220a      	movs	r2, #10
 801cec0:	fb02 3301 	mla	r3, r2, r1, r3
 801cec4:	9309      	str	r3, [sp, #36]	; 0x24
 801cec6:	2200      	movs	r2, #0
 801cec8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ceca:	1c59      	adds	r1, r3, #1
 801cecc:	911d      	str	r1, [sp, #116]	; 0x74
 801cece:	785b      	ldrb	r3, [r3, #1]
 801ced0:	4610      	mov	r0, r2
 801ced2:	e7c9      	b.n	801ce68 <_strtod_l+0x1e8>
 801ced4:	4638      	mov	r0, r7
 801ced6:	e7d2      	b.n	801ce7e <_strtod_l+0x1fe>
 801ced8:	2a08      	cmp	r2, #8
 801ceda:	dc04      	bgt.n	801cee6 <_strtod_l+0x266>
 801cedc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801cede:	434e      	muls	r6, r1
 801cee0:	9609      	str	r6, [sp, #36]	; 0x24
 801cee2:	3201      	adds	r2, #1
 801cee4:	e7e2      	b.n	801ceac <_strtod_l+0x22c>
 801cee6:	f102 0c01 	add.w	ip, r2, #1
 801ceea:	f1bc 0f10 	cmp.w	ip, #16
 801ceee:	bfd8      	it	le
 801cef0:	fb01 f909 	mulle.w	r9, r1, r9
 801cef4:	e7f5      	b.n	801cee2 <_strtod_l+0x262>
 801cef6:	2d10      	cmp	r5, #16
 801cef8:	bfdc      	itt	le
 801cefa:	220a      	movle	r2, #10
 801cefc:	fb02 3909 	mlale	r9, r2, r9, r3
 801cf00:	e7e1      	b.n	801cec6 <_strtod_l+0x246>
 801cf02:	2300      	movs	r3, #0
 801cf04:	9307      	str	r3, [sp, #28]
 801cf06:	2201      	movs	r2, #1
 801cf08:	e77c      	b.n	801ce04 <_strtod_l+0x184>
 801cf0a:	f04f 0c00 	mov.w	ip, #0
 801cf0e:	f108 0302 	add.w	r3, r8, #2
 801cf12:	931d      	str	r3, [sp, #116]	; 0x74
 801cf14:	f898 3002 	ldrb.w	r3, [r8, #2]
 801cf18:	e785      	b.n	801ce26 <_strtod_l+0x1a6>
 801cf1a:	f04f 0c01 	mov.w	ip, #1
 801cf1e:	e7f6      	b.n	801cf0e <_strtod_l+0x28e>
 801cf20:	08023450 	.word	0x08023450
 801cf24:	080232a0 	.word	0x080232a0
 801cf28:	7ff00000 	.word	0x7ff00000
 801cf2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801cf2e:	1c59      	adds	r1, r3, #1
 801cf30:	911d      	str	r1, [sp, #116]	; 0x74
 801cf32:	785b      	ldrb	r3, [r3, #1]
 801cf34:	2b30      	cmp	r3, #48	; 0x30
 801cf36:	d0f9      	beq.n	801cf2c <_strtod_l+0x2ac>
 801cf38:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801cf3c:	2908      	cmp	r1, #8
 801cf3e:	f63f af79 	bhi.w	801ce34 <_strtod_l+0x1b4>
 801cf42:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801cf46:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801cf48:	9308      	str	r3, [sp, #32]
 801cf4a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801cf4c:	1c59      	adds	r1, r3, #1
 801cf4e:	911d      	str	r1, [sp, #116]	; 0x74
 801cf50:	785b      	ldrb	r3, [r3, #1]
 801cf52:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801cf56:	2e09      	cmp	r6, #9
 801cf58:	d937      	bls.n	801cfca <_strtod_l+0x34a>
 801cf5a:	9e08      	ldr	r6, [sp, #32]
 801cf5c:	1b89      	subs	r1, r1, r6
 801cf5e:	2908      	cmp	r1, #8
 801cf60:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801cf64:	dc02      	bgt.n	801cf6c <_strtod_l+0x2ec>
 801cf66:	4576      	cmp	r6, lr
 801cf68:	bfa8      	it	ge
 801cf6a:	4676      	movge	r6, lr
 801cf6c:	f1bc 0f00 	cmp.w	ip, #0
 801cf70:	d000      	beq.n	801cf74 <_strtod_l+0x2f4>
 801cf72:	4276      	negs	r6, r6
 801cf74:	2d00      	cmp	r5, #0
 801cf76:	d14f      	bne.n	801d018 <_strtod_l+0x398>
 801cf78:	9904      	ldr	r1, [sp, #16]
 801cf7a:	4301      	orrs	r1, r0
 801cf7c:	f47f aec2 	bne.w	801cd04 <_strtod_l+0x84>
 801cf80:	2a00      	cmp	r2, #0
 801cf82:	f47f aedb 	bne.w	801cd3c <_strtod_l+0xbc>
 801cf86:	2b69      	cmp	r3, #105	; 0x69
 801cf88:	d027      	beq.n	801cfda <_strtod_l+0x35a>
 801cf8a:	dc24      	bgt.n	801cfd6 <_strtod_l+0x356>
 801cf8c:	2b49      	cmp	r3, #73	; 0x49
 801cf8e:	d024      	beq.n	801cfda <_strtod_l+0x35a>
 801cf90:	2b4e      	cmp	r3, #78	; 0x4e
 801cf92:	f47f aed3 	bne.w	801cd3c <_strtod_l+0xbc>
 801cf96:	499e      	ldr	r1, [pc, #632]	; (801d210 <_strtod_l+0x590>)
 801cf98:	a81d      	add	r0, sp, #116	; 0x74
 801cf9a:	f002 fb29 	bl	801f5f0 <__match>
 801cf9e:	2800      	cmp	r0, #0
 801cfa0:	f43f aecc 	beq.w	801cd3c <_strtod_l+0xbc>
 801cfa4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801cfa6:	781b      	ldrb	r3, [r3, #0]
 801cfa8:	2b28      	cmp	r3, #40	; 0x28
 801cfaa:	d12d      	bne.n	801d008 <_strtod_l+0x388>
 801cfac:	4999      	ldr	r1, [pc, #612]	; (801d214 <_strtod_l+0x594>)
 801cfae:	aa20      	add	r2, sp, #128	; 0x80
 801cfb0:	a81d      	add	r0, sp, #116	; 0x74
 801cfb2:	f002 fb31 	bl	801f618 <__hexnan>
 801cfb6:	2805      	cmp	r0, #5
 801cfb8:	d126      	bne.n	801d008 <_strtod_l+0x388>
 801cfba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801cfbc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801cfc0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801cfc4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801cfc8:	e69c      	b.n	801cd04 <_strtod_l+0x84>
 801cfca:	210a      	movs	r1, #10
 801cfcc:	fb01 3e0e 	mla	lr, r1, lr, r3
 801cfd0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801cfd4:	e7b9      	b.n	801cf4a <_strtod_l+0x2ca>
 801cfd6:	2b6e      	cmp	r3, #110	; 0x6e
 801cfd8:	e7db      	b.n	801cf92 <_strtod_l+0x312>
 801cfda:	498f      	ldr	r1, [pc, #572]	; (801d218 <_strtod_l+0x598>)
 801cfdc:	a81d      	add	r0, sp, #116	; 0x74
 801cfde:	f002 fb07 	bl	801f5f0 <__match>
 801cfe2:	2800      	cmp	r0, #0
 801cfe4:	f43f aeaa 	beq.w	801cd3c <_strtod_l+0xbc>
 801cfe8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801cfea:	498c      	ldr	r1, [pc, #560]	; (801d21c <_strtod_l+0x59c>)
 801cfec:	3b01      	subs	r3, #1
 801cfee:	a81d      	add	r0, sp, #116	; 0x74
 801cff0:	931d      	str	r3, [sp, #116]	; 0x74
 801cff2:	f002 fafd 	bl	801f5f0 <__match>
 801cff6:	b910      	cbnz	r0, 801cffe <_strtod_l+0x37e>
 801cff8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801cffa:	3301      	adds	r3, #1
 801cffc:	931d      	str	r3, [sp, #116]	; 0x74
 801cffe:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801d22c <_strtod_l+0x5ac>
 801d002:	f04f 0a00 	mov.w	sl, #0
 801d006:	e67d      	b.n	801cd04 <_strtod_l+0x84>
 801d008:	4885      	ldr	r0, [pc, #532]	; (801d220 <_strtod_l+0x5a0>)
 801d00a:	f7fd fed9 	bl	801adc0 <nan>
 801d00e:	ed8d 0b04 	vstr	d0, [sp, #16]
 801d012:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801d016:	e675      	b.n	801cd04 <_strtod_l+0x84>
 801d018:	9b07      	ldr	r3, [sp, #28]
 801d01a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d01c:	1af3      	subs	r3, r6, r3
 801d01e:	2f00      	cmp	r7, #0
 801d020:	bf08      	it	eq
 801d022:	462f      	moveq	r7, r5
 801d024:	2d10      	cmp	r5, #16
 801d026:	9308      	str	r3, [sp, #32]
 801d028:	46a8      	mov	r8, r5
 801d02a:	bfa8      	it	ge
 801d02c:	f04f 0810 	movge.w	r8, #16
 801d030:	f7e3 fa88 	bl	8000544 <__aeabi_ui2d>
 801d034:	2d09      	cmp	r5, #9
 801d036:	4682      	mov	sl, r0
 801d038:	468b      	mov	fp, r1
 801d03a:	dd13      	ble.n	801d064 <_strtod_l+0x3e4>
 801d03c:	4b79      	ldr	r3, [pc, #484]	; (801d224 <_strtod_l+0x5a4>)
 801d03e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801d042:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801d046:	f7e3 faf7 	bl	8000638 <__aeabi_dmul>
 801d04a:	4682      	mov	sl, r0
 801d04c:	4648      	mov	r0, r9
 801d04e:	468b      	mov	fp, r1
 801d050:	f7e3 fa78 	bl	8000544 <__aeabi_ui2d>
 801d054:	4602      	mov	r2, r0
 801d056:	460b      	mov	r3, r1
 801d058:	4650      	mov	r0, sl
 801d05a:	4659      	mov	r1, fp
 801d05c:	f7e3 f936 	bl	80002cc <__adddf3>
 801d060:	4682      	mov	sl, r0
 801d062:	468b      	mov	fp, r1
 801d064:	2d0f      	cmp	r5, #15
 801d066:	dc38      	bgt.n	801d0da <_strtod_l+0x45a>
 801d068:	9b08      	ldr	r3, [sp, #32]
 801d06a:	2b00      	cmp	r3, #0
 801d06c:	f43f ae4a 	beq.w	801cd04 <_strtod_l+0x84>
 801d070:	dd24      	ble.n	801d0bc <_strtod_l+0x43c>
 801d072:	2b16      	cmp	r3, #22
 801d074:	dc0b      	bgt.n	801d08e <_strtod_l+0x40e>
 801d076:	4d6b      	ldr	r5, [pc, #428]	; (801d224 <_strtod_l+0x5a4>)
 801d078:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801d07c:	e9d5 0100 	ldrd	r0, r1, [r5]
 801d080:	4652      	mov	r2, sl
 801d082:	465b      	mov	r3, fp
 801d084:	f7e3 fad8 	bl	8000638 <__aeabi_dmul>
 801d088:	4682      	mov	sl, r0
 801d08a:	468b      	mov	fp, r1
 801d08c:	e63a      	b.n	801cd04 <_strtod_l+0x84>
 801d08e:	9a08      	ldr	r2, [sp, #32]
 801d090:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801d094:	4293      	cmp	r3, r2
 801d096:	db20      	blt.n	801d0da <_strtod_l+0x45a>
 801d098:	4c62      	ldr	r4, [pc, #392]	; (801d224 <_strtod_l+0x5a4>)
 801d09a:	f1c5 050f 	rsb	r5, r5, #15
 801d09e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801d0a2:	4652      	mov	r2, sl
 801d0a4:	465b      	mov	r3, fp
 801d0a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d0aa:	f7e3 fac5 	bl	8000638 <__aeabi_dmul>
 801d0ae:	9b08      	ldr	r3, [sp, #32]
 801d0b0:	1b5d      	subs	r5, r3, r5
 801d0b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801d0b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 801d0ba:	e7e3      	b.n	801d084 <_strtod_l+0x404>
 801d0bc:	9b08      	ldr	r3, [sp, #32]
 801d0be:	3316      	adds	r3, #22
 801d0c0:	db0b      	blt.n	801d0da <_strtod_l+0x45a>
 801d0c2:	9b07      	ldr	r3, [sp, #28]
 801d0c4:	4a57      	ldr	r2, [pc, #348]	; (801d224 <_strtod_l+0x5a4>)
 801d0c6:	1b9e      	subs	r6, r3, r6
 801d0c8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801d0cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 801d0d0:	4650      	mov	r0, sl
 801d0d2:	4659      	mov	r1, fp
 801d0d4:	f7e3 fbda 	bl	800088c <__aeabi_ddiv>
 801d0d8:	e7d6      	b.n	801d088 <_strtod_l+0x408>
 801d0da:	9b08      	ldr	r3, [sp, #32]
 801d0dc:	eba5 0808 	sub.w	r8, r5, r8
 801d0e0:	4498      	add	r8, r3
 801d0e2:	f1b8 0f00 	cmp.w	r8, #0
 801d0e6:	dd71      	ble.n	801d1cc <_strtod_l+0x54c>
 801d0e8:	f018 030f 	ands.w	r3, r8, #15
 801d0ec:	d00a      	beq.n	801d104 <_strtod_l+0x484>
 801d0ee:	494d      	ldr	r1, [pc, #308]	; (801d224 <_strtod_l+0x5a4>)
 801d0f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801d0f4:	4652      	mov	r2, sl
 801d0f6:	465b      	mov	r3, fp
 801d0f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d0fc:	f7e3 fa9c 	bl	8000638 <__aeabi_dmul>
 801d100:	4682      	mov	sl, r0
 801d102:	468b      	mov	fp, r1
 801d104:	f038 080f 	bics.w	r8, r8, #15
 801d108:	d04d      	beq.n	801d1a6 <_strtod_l+0x526>
 801d10a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801d10e:	dd22      	ble.n	801d156 <_strtod_l+0x4d6>
 801d110:	2500      	movs	r5, #0
 801d112:	462e      	mov	r6, r5
 801d114:	9509      	str	r5, [sp, #36]	; 0x24
 801d116:	9507      	str	r5, [sp, #28]
 801d118:	2322      	movs	r3, #34	; 0x22
 801d11a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801d22c <_strtod_l+0x5ac>
 801d11e:	6023      	str	r3, [r4, #0]
 801d120:	f04f 0a00 	mov.w	sl, #0
 801d124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d126:	2b00      	cmp	r3, #0
 801d128:	f43f adec 	beq.w	801cd04 <_strtod_l+0x84>
 801d12c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801d12e:	4620      	mov	r0, r4
 801d130:	f002 fcdc 	bl	801faec <_Bfree>
 801d134:	9907      	ldr	r1, [sp, #28]
 801d136:	4620      	mov	r0, r4
 801d138:	f002 fcd8 	bl	801faec <_Bfree>
 801d13c:	4631      	mov	r1, r6
 801d13e:	4620      	mov	r0, r4
 801d140:	f002 fcd4 	bl	801faec <_Bfree>
 801d144:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d146:	4620      	mov	r0, r4
 801d148:	f002 fcd0 	bl	801faec <_Bfree>
 801d14c:	4629      	mov	r1, r5
 801d14e:	4620      	mov	r0, r4
 801d150:	f002 fccc 	bl	801faec <_Bfree>
 801d154:	e5d6      	b.n	801cd04 <_strtod_l+0x84>
 801d156:	2300      	movs	r3, #0
 801d158:	ea4f 1828 	mov.w	r8, r8, asr #4
 801d15c:	4650      	mov	r0, sl
 801d15e:	4659      	mov	r1, fp
 801d160:	4699      	mov	r9, r3
 801d162:	f1b8 0f01 	cmp.w	r8, #1
 801d166:	dc21      	bgt.n	801d1ac <_strtod_l+0x52c>
 801d168:	b10b      	cbz	r3, 801d16e <_strtod_l+0x4ee>
 801d16a:	4682      	mov	sl, r0
 801d16c:	468b      	mov	fp, r1
 801d16e:	4b2e      	ldr	r3, [pc, #184]	; (801d228 <_strtod_l+0x5a8>)
 801d170:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801d174:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801d178:	4652      	mov	r2, sl
 801d17a:	465b      	mov	r3, fp
 801d17c:	e9d9 0100 	ldrd	r0, r1, [r9]
 801d180:	f7e3 fa5a 	bl	8000638 <__aeabi_dmul>
 801d184:	4b29      	ldr	r3, [pc, #164]	; (801d22c <_strtod_l+0x5ac>)
 801d186:	460a      	mov	r2, r1
 801d188:	400b      	ands	r3, r1
 801d18a:	4929      	ldr	r1, [pc, #164]	; (801d230 <_strtod_l+0x5b0>)
 801d18c:	428b      	cmp	r3, r1
 801d18e:	4682      	mov	sl, r0
 801d190:	d8be      	bhi.n	801d110 <_strtod_l+0x490>
 801d192:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801d196:	428b      	cmp	r3, r1
 801d198:	bf86      	itte	hi
 801d19a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801d234 <_strtod_l+0x5b4>
 801d19e:	f04f 3aff 	movhi.w	sl, #4294967295
 801d1a2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801d1a6:	2300      	movs	r3, #0
 801d1a8:	9304      	str	r3, [sp, #16]
 801d1aa:	e081      	b.n	801d2b0 <_strtod_l+0x630>
 801d1ac:	f018 0f01 	tst.w	r8, #1
 801d1b0:	d007      	beq.n	801d1c2 <_strtod_l+0x542>
 801d1b2:	4b1d      	ldr	r3, [pc, #116]	; (801d228 <_strtod_l+0x5a8>)
 801d1b4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801d1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1bc:	f7e3 fa3c 	bl	8000638 <__aeabi_dmul>
 801d1c0:	2301      	movs	r3, #1
 801d1c2:	f109 0901 	add.w	r9, r9, #1
 801d1c6:	ea4f 0868 	mov.w	r8, r8, asr #1
 801d1ca:	e7ca      	b.n	801d162 <_strtod_l+0x4e2>
 801d1cc:	d0eb      	beq.n	801d1a6 <_strtod_l+0x526>
 801d1ce:	f1c8 0800 	rsb	r8, r8, #0
 801d1d2:	f018 020f 	ands.w	r2, r8, #15
 801d1d6:	d00a      	beq.n	801d1ee <_strtod_l+0x56e>
 801d1d8:	4b12      	ldr	r3, [pc, #72]	; (801d224 <_strtod_l+0x5a4>)
 801d1da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d1de:	4650      	mov	r0, sl
 801d1e0:	4659      	mov	r1, fp
 801d1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1e6:	f7e3 fb51 	bl	800088c <__aeabi_ddiv>
 801d1ea:	4682      	mov	sl, r0
 801d1ec:	468b      	mov	fp, r1
 801d1ee:	ea5f 1828 	movs.w	r8, r8, asr #4
 801d1f2:	d0d8      	beq.n	801d1a6 <_strtod_l+0x526>
 801d1f4:	f1b8 0f1f 	cmp.w	r8, #31
 801d1f8:	dd1e      	ble.n	801d238 <_strtod_l+0x5b8>
 801d1fa:	2500      	movs	r5, #0
 801d1fc:	462e      	mov	r6, r5
 801d1fe:	9509      	str	r5, [sp, #36]	; 0x24
 801d200:	9507      	str	r5, [sp, #28]
 801d202:	2322      	movs	r3, #34	; 0x22
 801d204:	f04f 0a00 	mov.w	sl, #0
 801d208:	f04f 0b00 	mov.w	fp, #0
 801d20c:	6023      	str	r3, [r4, #0]
 801d20e:	e789      	b.n	801d124 <_strtod_l+0x4a4>
 801d210:	08023275 	.word	0x08023275
 801d214:	080232b4 	.word	0x080232b4
 801d218:	0802326d 	.word	0x0802326d
 801d21c:	0802336b 	.word	0x0802336b
 801d220:	08023367 	.word	0x08023367
 801d224:	080234f0 	.word	0x080234f0
 801d228:	080234c8 	.word	0x080234c8
 801d22c:	7ff00000 	.word	0x7ff00000
 801d230:	7ca00000 	.word	0x7ca00000
 801d234:	7fefffff 	.word	0x7fefffff
 801d238:	f018 0310 	ands.w	r3, r8, #16
 801d23c:	bf18      	it	ne
 801d23e:	236a      	movne	r3, #106	; 0x6a
 801d240:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801d5f8 <_strtod_l+0x978>
 801d244:	9304      	str	r3, [sp, #16]
 801d246:	4650      	mov	r0, sl
 801d248:	4659      	mov	r1, fp
 801d24a:	2300      	movs	r3, #0
 801d24c:	f018 0f01 	tst.w	r8, #1
 801d250:	d004      	beq.n	801d25c <_strtod_l+0x5dc>
 801d252:	e9d9 2300 	ldrd	r2, r3, [r9]
 801d256:	f7e3 f9ef 	bl	8000638 <__aeabi_dmul>
 801d25a:	2301      	movs	r3, #1
 801d25c:	ea5f 0868 	movs.w	r8, r8, asr #1
 801d260:	f109 0908 	add.w	r9, r9, #8
 801d264:	d1f2      	bne.n	801d24c <_strtod_l+0x5cc>
 801d266:	b10b      	cbz	r3, 801d26c <_strtod_l+0x5ec>
 801d268:	4682      	mov	sl, r0
 801d26a:	468b      	mov	fp, r1
 801d26c:	9b04      	ldr	r3, [sp, #16]
 801d26e:	b1bb      	cbz	r3, 801d2a0 <_strtod_l+0x620>
 801d270:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801d274:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801d278:	2b00      	cmp	r3, #0
 801d27a:	4659      	mov	r1, fp
 801d27c:	dd10      	ble.n	801d2a0 <_strtod_l+0x620>
 801d27e:	2b1f      	cmp	r3, #31
 801d280:	f340 8128 	ble.w	801d4d4 <_strtod_l+0x854>
 801d284:	2b34      	cmp	r3, #52	; 0x34
 801d286:	bfde      	ittt	le
 801d288:	3b20      	suble	r3, #32
 801d28a:	f04f 32ff 	movle.w	r2, #4294967295
 801d28e:	fa02 f303 	lslle.w	r3, r2, r3
 801d292:	f04f 0a00 	mov.w	sl, #0
 801d296:	bfcc      	ite	gt
 801d298:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801d29c:	ea03 0b01 	andle.w	fp, r3, r1
 801d2a0:	2200      	movs	r2, #0
 801d2a2:	2300      	movs	r3, #0
 801d2a4:	4650      	mov	r0, sl
 801d2a6:	4659      	mov	r1, fp
 801d2a8:	f7e3 fc2e 	bl	8000b08 <__aeabi_dcmpeq>
 801d2ac:	2800      	cmp	r0, #0
 801d2ae:	d1a4      	bne.n	801d1fa <_strtod_l+0x57a>
 801d2b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2b2:	9300      	str	r3, [sp, #0]
 801d2b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 801d2b6:	462b      	mov	r3, r5
 801d2b8:	463a      	mov	r2, r7
 801d2ba:	4620      	mov	r0, r4
 801d2bc:	f002 fc82 	bl	801fbc4 <__s2b>
 801d2c0:	9009      	str	r0, [sp, #36]	; 0x24
 801d2c2:	2800      	cmp	r0, #0
 801d2c4:	f43f af24 	beq.w	801d110 <_strtod_l+0x490>
 801d2c8:	9b07      	ldr	r3, [sp, #28]
 801d2ca:	1b9e      	subs	r6, r3, r6
 801d2cc:	9b08      	ldr	r3, [sp, #32]
 801d2ce:	2b00      	cmp	r3, #0
 801d2d0:	bfb4      	ite	lt
 801d2d2:	4633      	movlt	r3, r6
 801d2d4:	2300      	movge	r3, #0
 801d2d6:	9310      	str	r3, [sp, #64]	; 0x40
 801d2d8:	9b08      	ldr	r3, [sp, #32]
 801d2da:	2500      	movs	r5, #0
 801d2dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d2e0:	9318      	str	r3, [sp, #96]	; 0x60
 801d2e2:	462e      	mov	r6, r5
 801d2e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2e6:	4620      	mov	r0, r4
 801d2e8:	6859      	ldr	r1, [r3, #4]
 801d2ea:	f002 fbbf 	bl	801fa6c <_Balloc>
 801d2ee:	9007      	str	r0, [sp, #28]
 801d2f0:	2800      	cmp	r0, #0
 801d2f2:	f43f af11 	beq.w	801d118 <_strtod_l+0x498>
 801d2f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2f8:	691a      	ldr	r2, [r3, #16]
 801d2fa:	3202      	adds	r2, #2
 801d2fc:	f103 010c 	add.w	r1, r3, #12
 801d300:	0092      	lsls	r2, r2, #2
 801d302:	300c      	adds	r0, #12
 801d304:	f7fe f8d0 	bl	801b4a8 <memcpy>
 801d308:	ec4b ab10 	vmov	d0, sl, fp
 801d30c:	aa20      	add	r2, sp, #128	; 0x80
 801d30e:	a91f      	add	r1, sp, #124	; 0x7c
 801d310:	4620      	mov	r0, r4
 801d312:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801d316:	f002 ff91 	bl	802023c <__d2b>
 801d31a:	901e      	str	r0, [sp, #120]	; 0x78
 801d31c:	2800      	cmp	r0, #0
 801d31e:	f43f aefb 	beq.w	801d118 <_strtod_l+0x498>
 801d322:	2101      	movs	r1, #1
 801d324:	4620      	mov	r0, r4
 801d326:	f002 fce7 	bl	801fcf8 <__i2b>
 801d32a:	4606      	mov	r6, r0
 801d32c:	2800      	cmp	r0, #0
 801d32e:	f43f aef3 	beq.w	801d118 <_strtod_l+0x498>
 801d332:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d334:	9904      	ldr	r1, [sp, #16]
 801d336:	2b00      	cmp	r3, #0
 801d338:	bfab      	itete	ge
 801d33a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801d33c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801d33e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801d340:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801d344:	bfac      	ite	ge
 801d346:	eb03 0902 	addge.w	r9, r3, r2
 801d34a:	1ad7      	sublt	r7, r2, r3
 801d34c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d34e:	eba3 0801 	sub.w	r8, r3, r1
 801d352:	4490      	add	r8, r2
 801d354:	4ba3      	ldr	r3, [pc, #652]	; (801d5e4 <_strtod_l+0x964>)
 801d356:	f108 38ff 	add.w	r8, r8, #4294967295
 801d35a:	4598      	cmp	r8, r3
 801d35c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801d360:	f280 80cc 	bge.w	801d4fc <_strtod_l+0x87c>
 801d364:	eba3 0308 	sub.w	r3, r3, r8
 801d368:	2b1f      	cmp	r3, #31
 801d36a:	eba2 0203 	sub.w	r2, r2, r3
 801d36e:	f04f 0101 	mov.w	r1, #1
 801d372:	f300 80b6 	bgt.w	801d4e2 <_strtod_l+0x862>
 801d376:	fa01 f303 	lsl.w	r3, r1, r3
 801d37a:	9311      	str	r3, [sp, #68]	; 0x44
 801d37c:	2300      	movs	r3, #0
 801d37e:	930c      	str	r3, [sp, #48]	; 0x30
 801d380:	eb09 0802 	add.w	r8, r9, r2
 801d384:	9b04      	ldr	r3, [sp, #16]
 801d386:	45c1      	cmp	r9, r8
 801d388:	4417      	add	r7, r2
 801d38a:	441f      	add	r7, r3
 801d38c:	464b      	mov	r3, r9
 801d38e:	bfa8      	it	ge
 801d390:	4643      	movge	r3, r8
 801d392:	42bb      	cmp	r3, r7
 801d394:	bfa8      	it	ge
 801d396:	463b      	movge	r3, r7
 801d398:	2b00      	cmp	r3, #0
 801d39a:	bfc2      	ittt	gt
 801d39c:	eba8 0803 	subgt.w	r8, r8, r3
 801d3a0:	1aff      	subgt	r7, r7, r3
 801d3a2:	eba9 0903 	subgt.w	r9, r9, r3
 801d3a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d3a8:	2b00      	cmp	r3, #0
 801d3aa:	dd17      	ble.n	801d3dc <_strtod_l+0x75c>
 801d3ac:	4631      	mov	r1, r6
 801d3ae:	461a      	mov	r2, r3
 801d3b0:	4620      	mov	r0, r4
 801d3b2:	f002 fd5d 	bl	801fe70 <__pow5mult>
 801d3b6:	4606      	mov	r6, r0
 801d3b8:	2800      	cmp	r0, #0
 801d3ba:	f43f aead 	beq.w	801d118 <_strtod_l+0x498>
 801d3be:	4601      	mov	r1, r0
 801d3c0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801d3c2:	4620      	mov	r0, r4
 801d3c4:	f002 fcae 	bl	801fd24 <__multiply>
 801d3c8:	900f      	str	r0, [sp, #60]	; 0x3c
 801d3ca:	2800      	cmp	r0, #0
 801d3cc:	f43f aea4 	beq.w	801d118 <_strtod_l+0x498>
 801d3d0:	991e      	ldr	r1, [sp, #120]	; 0x78
 801d3d2:	4620      	mov	r0, r4
 801d3d4:	f002 fb8a 	bl	801faec <_Bfree>
 801d3d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d3da:	931e      	str	r3, [sp, #120]	; 0x78
 801d3dc:	f1b8 0f00 	cmp.w	r8, #0
 801d3e0:	f300 8091 	bgt.w	801d506 <_strtod_l+0x886>
 801d3e4:	9b08      	ldr	r3, [sp, #32]
 801d3e6:	2b00      	cmp	r3, #0
 801d3e8:	dd08      	ble.n	801d3fc <_strtod_l+0x77c>
 801d3ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d3ec:	9907      	ldr	r1, [sp, #28]
 801d3ee:	4620      	mov	r0, r4
 801d3f0:	f002 fd3e 	bl	801fe70 <__pow5mult>
 801d3f4:	9007      	str	r0, [sp, #28]
 801d3f6:	2800      	cmp	r0, #0
 801d3f8:	f43f ae8e 	beq.w	801d118 <_strtod_l+0x498>
 801d3fc:	2f00      	cmp	r7, #0
 801d3fe:	dd08      	ble.n	801d412 <_strtod_l+0x792>
 801d400:	9907      	ldr	r1, [sp, #28]
 801d402:	463a      	mov	r2, r7
 801d404:	4620      	mov	r0, r4
 801d406:	f002 fd8d 	bl	801ff24 <__lshift>
 801d40a:	9007      	str	r0, [sp, #28]
 801d40c:	2800      	cmp	r0, #0
 801d40e:	f43f ae83 	beq.w	801d118 <_strtod_l+0x498>
 801d412:	f1b9 0f00 	cmp.w	r9, #0
 801d416:	dd08      	ble.n	801d42a <_strtod_l+0x7aa>
 801d418:	4631      	mov	r1, r6
 801d41a:	464a      	mov	r2, r9
 801d41c:	4620      	mov	r0, r4
 801d41e:	f002 fd81 	bl	801ff24 <__lshift>
 801d422:	4606      	mov	r6, r0
 801d424:	2800      	cmp	r0, #0
 801d426:	f43f ae77 	beq.w	801d118 <_strtod_l+0x498>
 801d42a:	9a07      	ldr	r2, [sp, #28]
 801d42c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801d42e:	4620      	mov	r0, r4
 801d430:	f002 fe00 	bl	8020034 <__mdiff>
 801d434:	4605      	mov	r5, r0
 801d436:	2800      	cmp	r0, #0
 801d438:	f43f ae6e 	beq.w	801d118 <_strtod_l+0x498>
 801d43c:	68c3      	ldr	r3, [r0, #12]
 801d43e:	930f      	str	r3, [sp, #60]	; 0x3c
 801d440:	2300      	movs	r3, #0
 801d442:	60c3      	str	r3, [r0, #12]
 801d444:	4631      	mov	r1, r6
 801d446:	f002 fdd9 	bl	801fffc <__mcmp>
 801d44a:	2800      	cmp	r0, #0
 801d44c:	da65      	bge.n	801d51a <_strtod_l+0x89a>
 801d44e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d450:	ea53 030a 	orrs.w	r3, r3, sl
 801d454:	f040 8087 	bne.w	801d566 <_strtod_l+0x8e6>
 801d458:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d45c:	2b00      	cmp	r3, #0
 801d45e:	f040 8082 	bne.w	801d566 <_strtod_l+0x8e6>
 801d462:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801d466:	0d1b      	lsrs	r3, r3, #20
 801d468:	051b      	lsls	r3, r3, #20
 801d46a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801d46e:	d97a      	bls.n	801d566 <_strtod_l+0x8e6>
 801d470:	696b      	ldr	r3, [r5, #20]
 801d472:	b913      	cbnz	r3, 801d47a <_strtod_l+0x7fa>
 801d474:	692b      	ldr	r3, [r5, #16]
 801d476:	2b01      	cmp	r3, #1
 801d478:	dd75      	ble.n	801d566 <_strtod_l+0x8e6>
 801d47a:	4629      	mov	r1, r5
 801d47c:	2201      	movs	r2, #1
 801d47e:	4620      	mov	r0, r4
 801d480:	f002 fd50 	bl	801ff24 <__lshift>
 801d484:	4631      	mov	r1, r6
 801d486:	4605      	mov	r5, r0
 801d488:	f002 fdb8 	bl	801fffc <__mcmp>
 801d48c:	2800      	cmp	r0, #0
 801d48e:	dd6a      	ble.n	801d566 <_strtod_l+0x8e6>
 801d490:	9904      	ldr	r1, [sp, #16]
 801d492:	4a55      	ldr	r2, [pc, #340]	; (801d5e8 <_strtod_l+0x968>)
 801d494:	465b      	mov	r3, fp
 801d496:	2900      	cmp	r1, #0
 801d498:	f000 8085 	beq.w	801d5a6 <_strtod_l+0x926>
 801d49c:	ea02 010b 	and.w	r1, r2, fp
 801d4a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801d4a4:	dc7f      	bgt.n	801d5a6 <_strtod_l+0x926>
 801d4a6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801d4aa:	f77f aeaa 	ble.w	801d202 <_strtod_l+0x582>
 801d4ae:	4a4f      	ldr	r2, [pc, #316]	; (801d5ec <_strtod_l+0x96c>)
 801d4b0:	2300      	movs	r3, #0
 801d4b2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801d4b6:	4650      	mov	r0, sl
 801d4b8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801d4bc:	4659      	mov	r1, fp
 801d4be:	f7e3 f8bb 	bl	8000638 <__aeabi_dmul>
 801d4c2:	460b      	mov	r3, r1
 801d4c4:	4303      	orrs	r3, r0
 801d4c6:	bf08      	it	eq
 801d4c8:	2322      	moveq	r3, #34	; 0x22
 801d4ca:	4682      	mov	sl, r0
 801d4cc:	468b      	mov	fp, r1
 801d4ce:	bf08      	it	eq
 801d4d0:	6023      	streq	r3, [r4, #0]
 801d4d2:	e62b      	b.n	801d12c <_strtod_l+0x4ac>
 801d4d4:	f04f 32ff 	mov.w	r2, #4294967295
 801d4d8:	fa02 f303 	lsl.w	r3, r2, r3
 801d4dc:	ea03 0a0a 	and.w	sl, r3, sl
 801d4e0:	e6de      	b.n	801d2a0 <_strtod_l+0x620>
 801d4e2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801d4e6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801d4ea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801d4ee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801d4f2:	fa01 f308 	lsl.w	r3, r1, r8
 801d4f6:	930c      	str	r3, [sp, #48]	; 0x30
 801d4f8:	9111      	str	r1, [sp, #68]	; 0x44
 801d4fa:	e741      	b.n	801d380 <_strtod_l+0x700>
 801d4fc:	2300      	movs	r3, #0
 801d4fe:	930c      	str	r3, [sp, #48]	; 0x30
 801d500:	2301      	movs	r3, #1
 801d502:	9311      	str	r3, [sp, #68]	; 0x44
 801d504:	e73c      	b.n	801d380 <_strtod_l+0x700>
 801d506:	991e      	ldr	r1, [sp, #120]	; 0x78
 801d508:	4642      	mov	r2, r8
 801d50a:	4620      	mov	r0, r4
 801d50c:	f002 fd0a 	bl	801ff24 <__lshift>
 801d510:	901e      	str	r0, [sp, #120]	; 0x78
 801d512:	2800      	cmp	r0, #0
 801d514:	f47f af66 	bne.w	801d3e4 <_strtod_l+0x764>
 801d518:	e5fe      	b.n	801d118 <_strtod_l+0x498>
 801d51a:	465f      	mov	r7, fp
 801d51c:	d16e      	bne.n	801d5fc <_strtod_l+0x97c>
 801d51e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d520:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d524:	b342      	cbz	r2, 801d578 <_strtod_l+0x8f8>
 801d526:	4a32      	ldr	r2, [pc, #200]	; (801d5f0 <_strtod_l+0x970>)
 801d528:	4293      	cmp	r3, r2
 801d52a:	d128      	bne.n	801d57e <_strtod_l+0x8fe>
 801d52c:	9b04      	ldr	r3, [sp, #16]
 801d52e:	4650      	mov	r0, sl
 801d530:	b1eb      	cbz	r3, 801d56e <_strtod_l+0x8ee>
 801d532:	4a2d      	ldr	r2, [pc, #180]	; (801d5e8 <_strtod_l+0x968>)
 801d534:	403a      	ands	r2, r7
 801d536:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801d53a:	f04f 31ff 	mov.w	r1, #4294967295
 801d53e:	d819      	bhi.n	801d574 <_strtod_l+0x8f4>
 801d540:	0d12      	lsrs	r2, r2, #20
 801d542:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801d546:	fa01 f303 	lsl.w	r3, r1, r3
 801d54a:	4298      	cmp	r0, r3
 801d54c:	d117      	bne.n	801d57e <_strtod_l+0x8fe>
 801d54e:	4b29      	ldr	r3, [pc, #164]	; (801d5f4 <_strtod_l+0x974>)
 801d550:	429f      	cmp	r7, r3
 801d552:	d102      	bne.n	801d55a <_strtod_l+0x8da>
 801d554:	3001      	adds	r0, #1
 801d556:	f43f addf 	beq.w	801d118 <_strtod_l+0x498>
 801d55a:	4b23      	ldr	r3, [pc, #140]	; (801d5e8 <_strtod_l+0x968>)
 801d55c:	403b      	ands	r3, r7
 801d55e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801d562:	f04f 0a00 	mov.w	sl, #0
 801d566:	9b04      	ldr	r3, [sp, #16]
 801d568:	2b00      	cmp	r3, #0
 801d56a:	d1a0      	bne.n	801d4ae <_strtod_l+0x82e>
 801d56c:	e5de      	b.n	801d12c <_strtod_l+0x4ac>
 801d56e:	f04f 33ff 	mov.w	r3, #4294967295
 801d572:	e7ea      	b.n	801d54a <_strtod_l+0x8ca>
 801d574:	460b      	mov	r3, r1
 801d576:	e7e8      	b.n	801d54a <_strtod_l+0x8ca>
 801d578:	ea53 030a 	orrs.w	r3, r3, sl
 801d57c:	d088      	beq.n	801d490 <_strtod_l+0x810>
 801d57e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d580:	b1db      	cbz	r3, 801d5ba <_strtod_l+0x93a>
 801d582:	423b      	tst	r3, r7
 801d584:	d0ef      	beq.n	801d566 <_strtod_l+0x8e6>
 801d586:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d588:	9a04      	ldr	r2, [sp, #16]
 801d58a:	4650      	mov	r0, sl
 801d58c:	4659      	mov	r1, fp
 801d58e:	b1c3      	cbz	r3, 801d5c2 <_strtod_l+0x942>
 801d590:	f7ff fb59 	bl	801cc46 <sulp>
 801d594:	4602      	mov	r2, r0
 801d596:	460b      	mov	r3, r1
 801d598:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801d59c:	f7e2 fe96 	bl	80002cc <__adddf3>
 801d5a0:	4682      	mov	sl, r0
 801d5a2:	468b      	mov	fp, r1
 801d5a4:	e7df      	b.n	801d566 <_strtod_l+0x8e6>
 801d5a6:	4013      	ands	r3, r2
 801d5a8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801d5ac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801d5b0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801d5b4:	f04f 3aff 	mov.w	sl, #4294967295
 801d5b8:	e7d5      	b.n	801d566 <_strtod_l+0x8e6>
 801d5ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d5bc:	ea13 0f0a 	tst.w	r3, sl
 801d5c0:	e7e0      	b.n	801d584 <_strtod_l+0x904>
 801d5c2:	f7ff fb40 	bl	801cc46 <sulp>
 801d5c6:	4602      	mov	r2, r0
 801d5c8:	460b      	mov	r3, r1
 801d5ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801d5ce:	f7e2 fe7b 	bl	80002c8 <__aeabi_dsub>
 801d5d2:	2200      	movs	r2, #0
 801d5d4:	2300      	movs	r3, #0
 801d5d6:	4682      	mov	sl, r0
 801d5d8:	468b      	mov	fp, r1
 801d5da:	f7e3 fa95 	bl	8000b08 <__aeabi_dcmpeq>
 801d5de:	2800      	cmp	r0, #0
 801d5e0:	d0c1      	beq.n	801d566 <_strtod_l+0x8e6>
 801d5e2:	e60e      	b.n	801d202 <_strtod_l+0x582>
 801d5e4:	fffffc02 	.word	0xfffffc02
 801d5e8:	7ff00000 	.word	0x7ff00000
 801d5ec:	39500000 	.word	0x39500000
 801d5f0:	000fffff 	.word	0x000fffff
 801d5f4:	7fefffff 	.word	0x7fefffff
 801d5f8:	080232c8 	.word	0x080232c8
 801d5fc:	4631      	mov	r1, r6
 801d5fe:	4628      	mov	r0, r5
 801d600:	f002 fe78 	bl	80202f4 <__ratio>
 801d604:	ec59 8b10 	vmov	r8, r9, d0
 801d608:	ee10 0a10 	vmov	r0, s0
 801d60c:	2200      	movs	r2, #0
 801d60e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d612:	4649      	mov	r1, r9
 801d614:	f7e3 fa8c 	bl	8000b30 <__aeabi_dcmple>
 801d618:	2800      	cmp	r0, #0
 801d61a:	d07c      	beq.n	801d716 <_strtod_l+0xa96>
 801d61c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d61e:	2b00      	cmp	r3, #0
 801d620:	d04c      	beq.n	801d6bc <_strtod_l+0xa3c>
 801d622:	4b95      	ldr	r3, [pc, #596]	; (801d878 <_strtod_l+0xbf8>)
 801d624:	2200      	movs	r2, #0
 801d626:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801d62a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801d878 <_strtod_l+0xbf8>
 801d62e:	f04f 0800 	mov.w	r8, #0
 801d632:	4b92      	ldr	r3, [pc, #584]	; (801d87c <_strtod_l+0xbfc>)
 801d634:	403b      	ands	r3, r7
 801d636:	9311      	str	r3, [sp, #68]	; 0x44
 801d638:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d63a:	4b91      	ldr	r3, [pc, #580]	; (801d880 <_strtod_l+0xc00>)
 801d63c:	429a      	cmp	r2, r3
 801d63e:	f040 80b2 	bne.w	801d7a6 <_strtod_l+0xb26>
 801d642:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801d646:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801d64a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801d64e:	ec4b ab10 	vmov	d0, sl, fp
 801d652:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801d656:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801d65a:	f002 fd73 	bl	8020144 <__ulp>
 801d65e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801d662:	ec53 2b10 	vmov	r2, r3, d0
 801d666:	f7e2 ffe7 	bl	8000638 <__aeabi_dmul>
 801d66a:	4652      	mov	r2, sl
 801d66c:	465b      	mov	r3, fp
 801d66e:	f7e2 fe2d 	bl	80002cc <__adddf3>
 801d672:	460b      	mov	r3, r1
 801d674:	4981      	ldr	r1, [pc, #516]	; (801d87c <_strtod_l+0xbfc>)
 801d676:	4a83      	ldr	r2, [pc, #524]	; (801d884 <_strtod_l+0xc04>)
 801d678:	4019      	ands	r1, r3
 801d67a:	4291      	cmp	r1, r2
 801d67c:	4682      	mov	sl, r0
 801d67e:	d95e      	bls.n	801d73e <_strtod_l+0xabe>
 801d680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d682:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801d686:	4293      	cmp	r3, r2
 801d688:	d103      	bne.n	801d692 <_strtod_l+0xa12>
 801d68a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d68c:	3301      	adds	r3, #1
 801d68e:	f43f ad43 	beq.w	801d118 <_strtod_l+0x498>
 801d692:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801d890 <_strtod_l+0xc10>
 801d696:	f04f 3aff 	mov.w	sl, #4294967295
 801d69a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801d69c:	4620      	mov	r0, r4
 801d69e:	f002 fa25 	bl	801faec <_Bfree>
 801d6a2:	9907      	ldr	r1, [sp, #28]
 801d6a4:	4620      	mov	r0, r4
 801d6a6:	f002 fa21 	bl	801faec <_Bfree>
 801d6aa:	4631      	mov	r1, r6
 801d6ac:	4620      	mov	r0, r4
 801d6ae:	f002 fa1d 	bl	801faec <_Bfree>
 801d6b2:	4629      	mov	r1, r5
 801d6b4:	4620      	mov	r0, r4
 801d6b6:	f002 fa19 	bl	801faec <_Bfree>
 801d6ba:	e613      	b.n	801d2e4 <_strtod_l+0x664>
 801d6bc:	f1ba 0f00 	cmp.w	sl, #0
 801d6c0:	d11b      	bne.n	801d6fa <_strtod_l+0xa7a>
 801d6c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d6c6:	b9f3      	cbnz	r3, 801d706 <_strtod_l+0xa86>
 801d6c8:	4b6b      	ldr	r3, [pc, #428]	; (801d878 <_strtod_l+0xbf8>)
 801d6ca:	2200      	movs	r2, #0
 801d6cc:	4640      	mov	r0, r8
 801d6ce:	4649      	mov	r1, r9
 801d6d0:	f7e3 fa24 	bl	8000b1c <__aeabi_dcmplt>
 801d6d4:	b9d0      	cbnz	r0, 801d70c <_strtod_l+0xa8c>
 801d6d6:	4640      	mov	r0, r8
 801d6d8:	4649      	mov	r1, r9
 801d6da:	4b6b      	ldr	r3, [pc, #428]	; (801d888 <_strtod_l+0xc08>)
 801d6dc:	2200      	movs	r2, #0
 801d6de:	f7e2 ffab 	bl	8000638 <__aeabi_dmul>
 801d6e2:	4680      	mov	r8, r0
 801d6e4:	4689      	mov	r9, r1
 801d6e6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801d6ea:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801d6ee:	931b      	str	r3, [sp, #108]	; 0x6c
 801d6f0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801d6f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801d6f8:	e79b      	b.n	801d632 <_strtod_l+0x9b2>
 801d6fa:	f1ba 0f01 	cmp.w	sl, #1
 801d6fe:	d102      	bne.n	801d706 <_strtod_l+0xa86>
 801d700:	2f00      	cmp	r7, #0
 801d702:	f43f ad7e 	beq.w	801d202 <_strtod_l+0x582>
 801d706:	4b61      	ldr	r3, [pc, #388]	; (801d88c <_strtod_l+0xc0c>)
 801d708:	2200      	movs	r2, #0
 801d70a:	e78c      	b.n	801d626 <_strtod_l+0x9a6>
 801d70c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801d888 <_strtod_l+0xc08>
 801d710:	f04f 0800 	mov.w	r8, #0
 801d714:	e7e7      	b.n	801d6e6 <_strtod_l+0xa66>
 801d716:	4b5c      	ldr	r3, [pc, #368]	; (801d888 <_strtod_l+0xc08>)
 801d718:	4640      	mov	r0, r8
 801d71a:	4649      	mov	r1, r9
 801d71c:	2200      	movs	r2, #0
 801d71e:	f7e2 ff8b 	bl	8000638 <__aeabi_dmul>
 801d722:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d724:	4680      	mov	r8, r0
 801d726:	4689      	mov	r9, r1
 801d728:	b933      	cbnz	r3, 801d738 <_strtod_l+0xab8>
 801d72a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d72e:	9012      	str	r0, [sp, #72]	; 0x48
 801d730:	9313      	str	r3, [sp, #76]	; 0x4c
 801d732:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801d736:	e7dd      	b.n	801d6f4 <_strtod_l+0xa74>
 801d738:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801d73c:	e7f9      	b.n	801d732 <_strtod_l+0xab2>
 801d73e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801d742:	9b04      	ldr	r3, [sp, #16]
 801d744:	2b00      	cmp	r3, #0
 801d746:	d1a8      	bne.n	801d69a <_strtod_l+0xa1a>
 801d748:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801d74c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d74e:	0d1b      	lsrs	r3, r3, #20
 801d750:	051b      	lsls	r3, r3, #20
 801d752:	429a      	cmp	r2, r3
 801d754:	d1a1      	bne.n	801d69a <_strtod_l+0xa1a>
 801d756:	4640      	mov	r0, r8
 801d758:	4649      	mov	r1, r9
 801d75a:	f7e3 fb1d 	bl	8000d98 <__aeabi_d2lz>
 801d75e:	f7e2 ff3d 	bl	80005dc <__aeabi_l2d>
 801d762:	4602      	mov	r2, r0
 801d764:	460b      	mov	r3, r1
 801d766:	4640      	mov	r0, r8
 801d768:	4649      	mov	r1, r9
 801d76a:	f7e2 fdad 	bl	80002c8 <__aeabi_dsub>
 801d76e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d770:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d774:	ea43 030a 	orr.w	r3, r3, sl
 801d778:	4313      	orrs	r3, r2
 801d77a:	4680      	mov	r8, r0
 801d77c:	4689      	mov	r9, r1
 801d77e:	d053      	beq.n	801d828 <_strtod_l+0xba8>
 801d780:	a335      	add	r3, pc, #212	; (adr r3, 801d858 <_strtod_l+0xbd8>)
 801d782:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d786:	f7e3 f9c9 	bl	8000b1c <__aeabi_dcmplt>
 801d78a:	2800      	cmp	r0, #0
 801d78c:	f47f acce 	bne.w	801d12c <_strtod_l+0x4ac>
 801d790:	a333      	add	r3, pc, #204	; (adr r3, 801d860 <_strtod_l+0xbe0>)
 801d792:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d796:	4640      	mov	r0, r8
 801d798:	4649      	mov	r1, r9
 801d79a:	f7e3 f9dd 	bl	8000b58 <__aeabi_dcmpgt>
 801d79e:	2800      	cmp	r0, #0
 801d7a0:	f43f af7b 	beq.w	801d69a <_strtod_l+0xa1a>
 801d7a4:	e4c2      	b.n	801d12c <_strtod_l+0x4ac>
 801d7a6:	9b04      	ldr	r3, [sp, #16]
 801d7a8:	b333      	cbz	r3, 801d7f8 <_strtod_l+0xb78>
 801d7aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d7ac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801d7b0:	d822      	bhi.n	801d7f8 <_strtod_l+0xb78>
 801d7b2:	a32d      	add	r3, pc, #180	; (adr r3, 801d868 <_strtod_l+0xbe8>)
 801d7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7b8:	4640      	mov	r0, r8
 801d7ba:	4649      	mov	r1, r9
 801d7bc:	f7e3 f9b8 	bl	8000b30 <__aeabi_dcmple>
 801d7c0:	b1a0      	cbz	r0, 801d7ec <_strtod_l+0xb6c>
 801d7c2:	4649      	mov	r1, r9
 801d7c4:	4640      	mov	r0, r8
 801d7c6:	f7e3 fa0f 	bl	8000be8 <__aeabi_d2uiz>
 801d7ca:	2801      	cmp	r0, #1
 801d7cc:	bf38      	it	cc
 801d7ce:	2001      	movcc	r0, #1
 801d7d0:	f7e2 feb8 	bl	8000544 <__aeabi_ui2d>
 801d7d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d7d6:	4680      	mov	r8, r0
 801d7d8:	4689      	mov	r9, r1
 801d7da:	bb13      	cbnz	r3, 801d822 <_strtod_l+0xba2>
 801d7dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d7e0:	9014      	str	r0, [sp, #80]	; 0x50
 801d7e2:	9315      	str	r3, [sp, #84]	; 0x54
 801d7e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801d7e8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801d7ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d7ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d7f0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801d7f4:	1a9b      	subs	r3, r3, r2
 801d7f6:	930d      	str	r3, [sp, #52]	; 0x34
 801d7f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801d7fc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801d800:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801d804:	f002 fc9e 	bl	8020144 <__ulp>
 801d808:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801d80c:	ec53 2b10 	vmov	r2, r3, d0
 801d810:	f7e2 ff12 	bl	8000638 <__aeabi_dmul>
 801d814:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801d818:	f7e2 fd58 	bl	80002cc <__adddf3>
 801d81c:	4682      	mov	sl, r0
 801d81e:	468b      	mov	fp, r1
 801d820:	e78f      	b.n	801d742 <_strtod_l+0xac2>
 801d822:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801d826:	e7dd      	b.n	801d7e4 <_strtod_l+0xb64>
 801d828:	a311      	add	r3, pc, #68	; (adr r3, 801d870 <_strtod_l+0xbf0>)
 801d82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d82e:	f7e3 f975 	bl	8000b1c <__aeabi_dcmplt>
 801d832:	e7b4      	b.n	801d79e <_strtod_l+0xb1e>
 801d834:	2300      	movs	r3, #0
 801d836:	930e      	str	r3, [sp, #56]	; 0x38
 801d838:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801d83a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d83c:	6013      	str	r3, [r2, #0]
 801d83e:	f7ff ba65 	b.w	801cd0c <_strtod_l+0x8c>
 801d842:	2b65      	cmp	r3, #101	; 0x65
 801d844:	f43f ab5d 	beq.w	801cf02 <_strtod_l+0x282>
 801d848:	2b45      	cmp	r3, #69	; 0x45
 801d84a:	f43f ab5a 	beq.w	801cf02 <_strtod_l+0x282>
 801d84e:	2201      	movs	r2, #1
 801d850:	f7ff bb92 	b.w	801cf78 <_strtod_l+0x2f8>
 801d854:	f3af 8000 	nop.w
 801d858:	94a03595 	.word	0x94a03595
 801d85c:	3fdfffff 	.word	0x3fdfffff
 801d860:	35afe535 	.word	0x35afe535
 801d864:	3fe00000 	.word	0x3fe00000
 801d868:	ffc00000 	.word	0xffc00000
 801d86c:	41dfffff 	.word	0x41dfffff
 801d870:	94a03595 	.word	0x94a03595
 801d874:	3fcfffff 	.word	0x3fcfffff
 801d878:	3ff00000 	.word	0x3ff00000
 801d87c:	7ff00000 	.word	0x7ff00000
 801d880:	7fe00000 	.word	0x7fe00000
 801d884:	7c9fffff 	.word	0x7c9fffff
 801d888:	3fe00000 	.word	0x3fe00000
 801d88c:	bff00000 	.word	0xbff00000
 801d890:	7fefffff 	.word	0x7fefffff

0801d894 <_strtod_r>:
 801d894:	4b01      	ldr	r3, [pc, #4]	; (801d89c <_strtod_r+0x8>)
 801d896:	f7ff b9f3 	b.w	801cc80 <_strtod_l>
 801d89a:	bf00      	nop
 801d89c:	200002c4 	.word	0x200002c4

0801d8a0 <_strtol_l.isra.0>:
 801d8a0:	2b01      	cmp	r3, #1
 801d8a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d8a6:	d001      	beq.n	801d8ac <_strtol_l.isra.0+0xc>
 801d8a8:	2b24      	cmp	r3, #36	; 0x24
 801d8aa:	d906      	bls.n	801d8ba <_strtol_l.isra.0+0x1a>
 801d8ac:	f7fd fbaa 	bl	801b004 <__errno>
 801d8b0:	2316      	movs	r3, #22
 801d8b2:	6003      	str	r3, [r0, #0]
 801d8b4:	2000      	movs	r0, #0
 801d8b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d8ba:	4f3a      	ldr	r7, [pc, #232]	; (801d9a4 <_strtol_l.isra.0+0x104>)
 801d8bc:	468e      	mov	lr, r1
 801d8be:	4676      	mov	r6, lr
 801d8c0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801d8c4:	5de5      	ldrb	r5, [r4, r7]
 801d8c6:	f015 0508 	ands.w	r5, r5, #8
 801d8ca:	d1f8      	bne.n	801d8be <_strtol_l.isra.0+0x1e>
 801d8cc:	2c2d      	cmp	r4, #45	; 0x2d
 801d8ce:	d134      	bne.n	801d93a <_strtol_l.isra.0+0x9a>
 801d8d0:	f89e 4000 	ldrb.w	r4, [lr]
 801d8d4:	f04f 0801 	mov.w	r8, #1
 801d8d8:	f106 0e02 	add.w	lr, r6, #2
 801d8dc:	2b00      	cmp	r3, #0
 801d8de:	d05c      	beq.n	801d99a <_strtol_l.isra.0+0xfa>
 801d8e0:	2b10      	cmp	r3, #16
 801d8e2:	d10c      	bne.n	801d8fe <_strtol_l.isra.0+0x5e>
 801d8e4:	2c30      	cmp	r4, #48	; 0x30
 801d8e6:	d10a      	bne.n	801d8fe <_strtol_l.isra.0+0x5e>
 801d8e8:	f89e 4000 	ldrb.w	r4, [lr]
 801d8ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801d8f0:	2c58      	cmp	r4, #88	; 0x58
 801d8f2:	d14d      	bne.n	801d990 <_strtol_l.isra.0+0xf0>
 801d8f4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801d8f8:	2310      	movs	r3, #16
 801d8fa:	f10e 0e02 	add.w	lr, lr, #2
 801d8fe:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801d902:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d906:	2600      	movs	r6, #0
 801d908:	fbbc f9f3 	udiv	r9, ip, r3
 801d90c:	4635      	mov	r5, r6
 801d90e:	fb03 ca19 	mls	sl, r3, r9, ip
 801d912:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801d916:	2f09      	cmp	r7, #9
 801d918:	d818      	bhi.n	801d94c <_strtol_l.isra.0+0xac>
 801d91a:	463c      	mov	r4, r7
 801d91c:	42a3      	cmp	r3, r4
 801d91e:	dd24      	ble.n	801d96a <_strtol_l.isra.0+0xca>
 801d920:	2e00      	cmp	r6, #0
 801d922:	db1f      	blt.n	801d964 <_strtol_l.isra.0+0xc4>
 801d924:	45a9      	cmp	r9, r5
 801d926:	d31d      	bcc.n	801d964 <_strtol_l.isra.0+0xc4>
 801d928:	d101      	bne.n	801d92e <_strtol_l.isra.0+0x8e>
 801d92a:	45a2      	cmp	sl, r4
 801d92c:	db1a      	blt.n	801d964 <_strtol_l.isra.0+0xc4>
 801d92e:	fb05 4503 	mla	r5, r5, r3, r4
 801d932:	2601      	movs	r6, #1
 801d934:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801d938:	e7eb      	b.n	801d912 <_strtol_l.isra.0+0x72>
 801d93a:	2c2b      	cmp	r4, #43	; 0x2b
 801d93c:	bf08      	it	eq
 801d93e:	f89e 4000 	ldrbeq.w	r4, [lr]
 801d942:	46a8      	mov	r8, r5
 801d944:	bf08      	it	eq
 801d946:	f106 0e02 	addeq.w	lr, r6, #2
 801d94a:	e7c7      	b.n	801d8dc <_strtol_l.isra.0+0x3c>
 801d94c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801d950:	2f19      	cmp	r7, #25
 801d952:	d801      	bhi.n	801d958 <_strtol_l.isra.0+0xb8>
 801d954:	3c37      	subs	r4, #55	; 0x37
 801d956:	e7e1      	b.n	801d91c <_strtol_l.isra.0+0x7c>
 801d958:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801d95c:	2f19      	cmp	r7, #25
 801d95e:	d804      	bhi.n	801d96a <_strtol_l.isra.0+0xca>
 801d960:	3c57      	subs	r4, #87	; 0x57
 801d962:	e7db      	b.n	801d91c <_strtol_l.isra.0+0x7c>
 801d964:	f04f 36ff 	mov.w	r6, #4294967295
 801d968:	e7e4      	b.n	801d934 <_strtol_l.isra.0+0x94>
 801d96a:	2e00      	cmp	r6, #0
 801d96c:	da05      	bge.n	801d97a <_strtol_l.isra.0+0xda>
 801d96e:	2322      	movs	r3, #34	; 0x22
 801d970:	6003      	str	r3, [r0, #0]
 801d972:	4665      	mov	r5, ip
 801d974:	b942      	cbnz	r2, 801d988 <_strtol_l.isra.0+0xe8>
 801d976:	4628      	mov	r0, r5
 801d978:	e79d      	b.n	801d8b6 <_strtol_l.isra.0+0x16>
 801d97a:	f1b8 0f00 	cmp.w	r8, #0
 801d97e:	d000      	beq.n	801d982 <_strtol_l.isra.0+0xe2>
 801d980:	426d      	negs	r5, r5
 801d982:	2a00      	cmp	r2, #0
 801d984:	d0f7      	beq.n	801d976 <_strtol_l.isra.0+0xd6>
 801d986:	b10e      	cbz	r6, 801d98c <_strtol_l.isra.0+0xec>
 801d988:	f10e 31ff 	add.w	r1, lr, #4294967295
 801d98c:	6011      	str	r1, [r2, #0]
 801d98e:	e7f2      	b.n	801d976 <_strtol_l.isra.0+0xd6>
 801d990:	2430      	movs	r4, #48	; 0x30
 801d992:	2b00      	cmp	r3, #0
 801d994:	d1b3      	bne.n	801d8fe <_strtol_l.isra.0+0x5e>
 801d996:	2308      	movs	r3, #8
 801d998:	e7b1      	b.n	801d8fe <_strtol_l.isra.0+0x5e>
 801d99a:	2c30      	cmp	r4, #48	; 0x30
 801d99c:	d0a4      	beq.n	801d8e8 <_strtol_l.isra.0+0x48>
 801d99e:	230a      	movs	r3, #10
 801d9a0:	e7ad      	b.n	801d8fe <_strtol_l.isra.0+0x5e>
 801d9a2:	bf00      	nop
 801d9a4:	08022fc9 	.word	0x08022fc9

0801d9a8 <_strtol_r>:
 801d9a8:	f7ff bf7a 	b.w	801d8a0 <_strtol_l.isra.0>

0801d9ac <strtol>:
 801d9ac:	4613      	mov	r3, r2
 801d9ae:	460a      	mov	r2, r1
 801d9b0:	4601      	mov	r1, r0
 801d9b2:	4802      	ldr	r0, [pc, #8]	; (801d9bc <strtol+0x10>)
 801d9b4:	6800      	ldr	r0, [r0, #0]
 801d9b6:	f7ff bf73 	b.w	801d8a0 <_strtol_l.isra.0>
 801d9ba:	bf00      	nop
 801d9bc:	200001fc 	.word	0x200001fc

0801d9c0 <_strtoul_l.isra.0>:
 801d9c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d9c4:	4e3b      	ldr	r6, [pc, #236]	; (801dab4 <_strtoul_l.isra.0+0xf4>)
 801d9c6:	4686      	mov	lr, r0
 801d9c8:	468c      	mov	ip, r1
 801d9ca:	4660      	mov	r0, ip
 801d9cc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801d9d0:	5da5      	ldrb	r5, [r4, r6]
 801d9d2:	f015 0508 	ands.w	r5, r5, #8
 801d9d6:	d1f8      	bne.n	801d9ca <_strtoul_l.isra.0+0xa>
 801d9d8:	2c2d      	cmp	r4, #45	; 0x2d
 801d9da:	d134      	bne.n	801da46 <_strtoul_l.isra.0+0x86>
 801d9dc:	f89c 4000 	ldrb.w	r4, [ip]
 801d9e0:	f04f 0801 	mov.w	r8, #1
 801d9e4:	f100 0c02 	add.w	ip, r0, #2
 801d9e8:	2b00      	cmp	r3, #0
 801d9ea:	d05e      	beq.n	801daaa <_strtoul_l.isra.0+0xea>
 801d9ec:	2b10      	cmp	r3, #16
 801d9ee:	d10c      	bne.n	801da0a <_strtoul_l.isra.0+0x4a>
 801d9f0:	2c30      	cmp	r4, #48	; 0x30
 801d9f2:	d10a      	bne.n	801da0a <_strtoul_l.isra.0+0x4a>
 801d9f4:	f89c 0000 	ldrb.w	r0, [ip]
 801d9f8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801d9fc:	2858      	cmp	r0, #88	; 0x58
 801d9fe:	d14f      	bne.n	801daa0 <_strtoul_l.isra.0+0xe0>
 801da00:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801da04:	2310      	movs	r3, #16
 801da06:	f10c 0c02 	add.w	ip, ip, #2
 801da0a:	f04f 37ff 	mov.w	r7, #4294967295
 801da0e:	2500      	movs	r5, #0
 801da10:	fbb7 f7f3 	udiv	r7, r7, r3
 801da14:	fb03 f907 	mul.w	r9, r3, r7
 801da18:	ea6f 0909 	mvn.w	r9, r9
 801da1c:	4628      	mov	r0, r5
 801da1e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801da22:	2e09      	cmp	r6, #9
 801da24:	d818      	bhi.n	801da58 <_strtoul_l.isra.0+0x98>
 801da26:	4634      	mov	r4, r6
 801da28:	42a3      	cmp	r3, r4
 801da2a:	dd24      	ble.n	801da76 <_strtoul_l.isra.0+0xb6>
 801da2c:	2d00      	cmp	r5, #0
 801da2e:	db1f      	blt.n	801da70 <_strtoul_l.isra.0+0xb0>
 801da30:	4287      	cmp	r7, r0
 801da32:	d31d      	bcc.n	801da70 <_strtoul_l.isra.0+0xb0>
 801da34:	d101      	bne.n	801da3a <_strtoul_l.isra.0+0x7a>
 801da36:	45a1      	cmp	r9, r4
 801da38:	db1a      	blt.n	801da70 <_strtoul_l.isra.0+0xb0>
 801da3a:	fb00 4003 	mla	r0, r0, r3, r4
 801da3e:	2501      	movs	r5, #1
 801da40:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801da44:	e7eb      	b.n	801da1e <_strtoul_l.isra.0+0x5e>
 801da46:	2c2b      	cmp	r4, #43	; 0x2b
 801da48:	bf08      	it	eq
 801da4a:	f89c 4000 	ldrbeq.w	r4, [ip]
 801da4e:	46a8      	mov	r8, r5
 801da50:	bf08      	it	eq
 801da52:	f100 0c02 	addeq.w	ip, r0, #2
 801da56:	e7c7      	b.n	801d9e8 <_strtoul_l.isra.0+0x28>
 801da58:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801da5c:	2e19      	cmp	r6, #25
 801da5e:	d801      	bhi.n	801da64 <_strtoul_l.isra.0+0xa4>
 801da60:	3c37      	subs	r4, #55	; 0x37
 801da62:	e7e1      	b.n	801da28 <_strtoul_l.isra.0+0x68>
 801da64:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801da68:	2e19      	cmp	r6, #25
 801da6a:	d804      	bhi.n	801da76 <_strtoul_l.isra.0+0xb6>
 801da6c:	3c57      	subs	r4, #87	; 0x57
 801da6e:	e7db      	b.n	801da28 <_strtoul_l.isra.0+0x68>
 801da70:	f04f 35ff 	mov.w	r5, #4294967295
 801da74:	e7e4      	b.n	801da40 <_strtoul_l.isra.0+0x80>
 801da76:	2d00      	cmp	r5, #0
 801da78:	da07      	bge.n	801da8a <_strtoul_l.isra.0+0xca>
 801da7a:	2322      	movs	r3, #34	; 0x22
 801da7c:	f8ce 3000 	str.w	r3, [lr]
 801da80:	f04f 30ff 	mov.w	r0, #4294967295
 801da84:	b942      	cbnz	r2, 801da98 <_strtoul_l.isra.0+0xd8>
 801da86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801da8a:	f1b8 0f00 	cmp.w	r8, #0
 801da8e:	d000      	beq.n	801da92 <_strtoul_l.isra.0+0xd2>
 801da90:	4240      	negs	r0, r0
 801da92:	2a00      	cmp	r2, #0
 801da94:	d0f7      	beq.n	801da86 <_strtoul_l.isra.0+0xc6>
 801da96:	b10d      	cbz	r5, 801da9c <_strtoul_l.isra.0+0xdc>
 801da98:	f10c 31ff 	add.w	r1, ip, #4294967295
 801da9c:	6011      	str	r1, [r2, #0]
 801da9e:	e7f2      	b.n	801da86 <_strtoul_l.isra.0+0xc6>
 801daa0:	2430      	movs	r4, #48	; 0x30
 801daa2:	2b00      	cmp	r3, #0
 801daa4:	d1b1      	bne.n	801da0a <_strtoul_l.isra.0+0x4a>
 801daa6:	2308      	movs	r3, #8
 801daa8:	e7af      	b.n	801da0a <_strtoul_l.isra.0+0x4a>
 801daaa:	2c30      	cmp	r4, #48	; 0x30
 801daac:	d0a2      	beq.n	801d9f4 <_strtoul_l.isra.0+0x34>
 801daae:	230a      	movs	r3, #10
 801dab0:	e7ab      	b.n	801da0a <_strtoul_l.isra.0+0x4a>
 801dab2:	bf00      	nop
 801dab4:	08022fc9 	.word	0x08022fc9

0801dab8 <_strtoul_r>:
 801dab8:	f7ff bf82 	b.w	801d9c0 <_strtoul_l.isra.0>

0801dabc <strtoul>:
 801dabc:	4613      	mov	r3, r2
 801dabe:	460a      	mov	r2, r1
 801dac0:	4601      	mov	r1, r0
 801dac2:	4802      	ldr	r0, [pc, #8]	; (801dacc <strtoul+0x10>)
 801dac4:	6800      	ldr	r0, [r0, #0]
 801dac6:	f7ff bf7b 	b.w	801d9c0 <_strtoul_l.isra.0>
 801daca:	bf00      	nop
 801dacc:	200001fc 	.word	0x200001fc

0801dad0 <__tzcalc_limits>:
 801dad0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dad4:	4680      	mov	r8, r0
 801dad6:	f001 fe7d 	bl	801f7d4 <__gettzinfo>
 801dada:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801dade:	4598      	cmp	r8, r3
 801dae0:	f340 8098 	ble.w	801dc14 <__tzcalc_limits+0x144>
 801dae4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 801dae8:	4443      	add	r3, r8
 801daea:	109b      	asrs	r3, r3, #2
 801daec:	f240 126d 	movw	r2, #365	; 0x16d
 801daf0:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 801daf4:	fb02 3505 	mla	r5, r2, r5, r3
 801daf8:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801dafc:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 801db00:	fb93 f3f2 	sdiv	r3, r3, r2
 801db04:	441d      	add	r5, r3
 801db06:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801db0a:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801db0e:	fb98 f7f3 	sdiv	r7, r8, r3
 801db12:	fb03 8717 	mls	r7, r3, r7, r8
 801db16:	4442      	add	r2, r8
 801db18:	fab7 fc87 	clz	ip, r7
 801db1c:	fbb2 f2f3 	udiv	r2, r2, r3
 801db20:	f008 0303 	and.w	r3, r8, #3
 801db24:	4415      	add	r5, r2
 801db26:	2264      	movs	r2, #100	; 0x64
 801db28:	f8c0 8004 	str.w	r8, [r0, #4]
 801db2c:	fb98 f6f2 	sdiv	r6, r8, r2
 801db30:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801db34:	fb02 8616 	mls	r6, r2, r6, r8
 801db38:	4604      	mov	r4, r0
 801db3a:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801db3e:	9300      	str	r3, [sp, #0]
 801db40:	f04f 0e07 	mov.w	lr, #7
 801db44:	7a22      	ldrb	r2, [r4, #8]
 801db46:	6963      	ldr	r3, [r4, #20]
 801db48:	2a4a      	cmp	r2, #74	; 0x4a
 801db4a:	d128      	bne.n	801db9e <__tzcalc_limits+0xce>
 801db4c:	9900      	ldr	r1, [sp, #0]
 801db4e:	18ea      	adds	r2, r5, r3
 801db50:	b901      	cbnz	r1, 801db54 <__tzcalc_limits+0x84>
 801db52:	b906      	cbnz	r6, 801db56 <__tzcalc_limits+0x86>
 801db54:	bb0f      	cbnz	r7, 801db9a <__tzcalc_limits+0xca>
 801db56:	2b3b      	cmp	r3, #59	; 0x3b
 801db58:	bfd4      	ite	le
 801db5a:	2300      	movle	r3, #0
 801db5c:	2301      	movgt	r3, #1
 801db5e:	4413      	add	r3, r2
 801db60:	1e5a      	subs	r2, r3, #1
 801db62:	69a3      	ldr	r3, [r4, #24]
 801db64:	492c      	ldr	r1, [pc, #176]	; (801dc18 <__tzcalc_limits+0x148>)
 801db66:	fb01 3202 	mla	r2, r1, r2, r3
 801db6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801db6c:	4413      	add	r3, r2
 801db6e:	461a      	mov	r2, r3
 801db70:	17db      	asrs	r3, r3, #31
 801db72:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801db76:	3428      	adds	r4, #40	; 0x28
 801db78:	45a3      	cmp	fp, r4
 801db7a:	d1e3      	bne.n	801db44 <__tzcalc_limits+0x74>
 801db7c:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 801db80:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 801db84:	4294      	cmp	r4, r2
 801db86:	eb75 0303 	sbcs.w	r3, r5, r3
 801db8a:	bfb4      	ite	lt
 801db8c:	2301      	movlt	r3, #1
 801db8e:	2300      	movge	r3, #0
 801db90:	6003      	str	r3, [r0, #0]
 801db92:	2001      	movs	r0, #1
 801db94:	b003      	add	sp, #12
 801db96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db9a:	2300      	movs	r3, #0
 801db9c:	e7df      	b.n	801db5e <__tzcalc_limits+0x8e>
 801db9e:	2a44      	cmp	r2, #68	; 0x44
 801dba0:	d101      	bne.n	801dba6 <__tzcalc_limits+0xd6>
 801dba2:	18ea      	adds	r2, r5, r3
 801dba4:	e7dd      	b.n	801db62 <__tzcalc_limits+0x92>
 801dba6:	9a00      	ldr	r2, [sp, #0]
 801dba8:	bb72      	cbnz	r2, 801dc08 <__tzcalc_limits+0x138>
 801dbaa:	2e00      	cmp	r6, #0
 801dbac:	bf0c      	ite	eq
 801dbae:	46e0      	moveq	r8, ip
 801dbb0:	f04f 0801 	movne.w	r8, #1
 801dbb4:	4919      	ldr	r1, [pc, #100]	; (801dc1c <__tzcalc_limits+0x14c>)
 801dbb6:	68e2      	ldr	r2, [r4, #12]
 801dbb8:	9201      	str	r2, [sp, #4]
 801dbba:	f04f 0a30 	mov.w	sl, #48	; 0x30
 801dbbe:	fb0a 1808 	mla	r8, sl, r8, r1
 801dbc2:	462a      	mov	r2, r5
 801dbc4:	f04f 0900 	mov.w	r9, #0
 801dbc8:	f1a8 0804 	sub.w	r8, r8, #4
 801dbcc:	9901      	ldr	r1, [sp, #4]
 801dbce:	f109 0901 	add.w	r9, r9, #1
 801dbd2:	4549      	cmp	r1, r9
 801dbd4:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 801dbd8:	dc18      	bgt.n	801dc0c <__tzcalc_limits+0x13c>
 801dbda:	f102 0804 	add.w	r8, r2, #4
 801dbde:	fb98 f9fe 	sdiv	r9, r8, lr
 801dbe2:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 801dbe6:	eba8 0909 	sub.w	r9, r8, r9
 801dbea:	ebb3 0909 	subs.w	r9, r3, r9
 801dbee:	6923      	ldr	r3, [r4, #16]
 801dbf0:	f103 33ff 	add.w	r3, r3, #4294967295
 801dbf4:	bf48      	it	mi
 801dbf6:	f109 0907 	addmi.w	r9, r9, #7
 801dbfa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801dbfe:	444b      	add	r3, r9
 801dc00:	4553      	cmp	r3, sl
 801dc02:	da05      	bge.n	801dc10 <__tzcalc_limits+0x140>
 801dc04:	441a      	add	r2, r3
 801dc06:	e7ac      	b.n	801db62 <__tzcalc_limits+0x92>
 801dc08:	46e0      	mov	r8, ip
 801dc0a:	e7d3      	b.n	801dbb4 <__tzcalc_limits+0xe4>
 801dc0c:	4452      	add	r2, sl
 801dc0e:	e7dd      	b.n	801dbcc <__tzcalc_limits+0xfc>
 801dc10:	3b07      	subs	r3, #7
 801dc12:	e7f5      	b.n	801dc00 <__tzcalc_limits+0x130>
 801dc14:	2000      	movs	r0, #0
 801dc16:	e7bd      	b.n	801db94 <__tzcalc_limits+0xc4>
 801dc18:	00015180 	.word	0x00015180
 801dc1c:	08023208 	.word	0x08023208

0801dc20 <__tz_lock>:
 801dc20:	4801      	ldr	r0, [pc, #4]	; (801dc28 <__tz_lock+0x8>)
 801dc22:	f7fd bc2c 	b.w	801b47e <__retarget_lock_acquire>
 801dc26:	bf00      	nop
 801dc28:	20008fcb 	.word	0x20008fcb

0801dc2c <__tz_unlock>:
 801dc2c:	4801      	ldr	r0, [pc, #4]	; (801dc34 <__tz_unlock+0x8>)
 801dc2e:	f7fd bc28 	b.w	801b482 <__retarget_lock_release>
 801dc32:	bf00      	nop
 801dc34:	20008fcb 	.word	0x20008fcb

0801dc38 <_tzset_unlocked>:
 801dc38:	4b01      	ldr	r3, [pc, #4]	; (801dc40 <_tzset_unlocked+0x8>)
 801dc3a:	6818      	ldr	r0, [r3, #0]
 801dc3c:	f000 b802 	b.w	801dc44 <_tzset_unlocked_r>
 801dc40:	200001fc 	.word	0x200001fc

0801dc44 <_tzset_unlocked_r>:
 801dc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc48:	b08d      	sub	sp, #52	; 0x34
 801dc4a:	4607      	mov	r7, r0
 801dc4c:	f001 fdc2 	bl	801f7d4 <__gettzinfo>
 801dc50:	49ae      	ldr	r1, [pc, #696]	; (801df0c <_tzset_unlocked_r+0x2c8>)
 801dc52:	4eaf      	ldr	r6, [pc, #700]	; (801df10 <_tzset_unlocked_r+0x2cc>)
 801dc54:	4605      	mov	r5, r0
 801dc56:	4638      	mov	r0, r7
 801dc58:	f001 fdb4 	bl	801f7c4 <_getenv_r>
 801dc5c:	4604      	mov	r4, r0
 801dc5e:	b970      	cbnz	r0, 801dc7e <_tzset_unlocked_r+0x3a>
 801dc60:	4bac      	ldr	r3, [pc, #688]	; (801df14 <_tzset_unlocked_r+0x2d0>)
 801dc62:	4aad      	ldr	r2, [pc, #692]	; (801df18 <_tzset_unlocked_r+0x2d4>)
 801dc64:	6018      	str	r0, [r3, #0]
 801dc66:	4bad      	ldr	r3, [pc, #692]	; (801df1c <_tzset_unlocked_r+0x2d8>)
 801dc68:	6018      	str	r0, [r3, #0]
 801dc6a:	4bad      	ldr	r3, [pc, #692]	; (801df20 <_tzset_unlocked_r+0x2dc>)
 801dc6c:	6830      	ldr	r0, [r6, #0]
 801dc6e:	e9c3 2200 	strd	r2, r2, [r3]
 801dc72:	f7fd fc11 	bl	801b498 <free>
 801dc76:	6034      	str	r4, [r6, #0]
 801dc78:	b00d      	add	sp, #52	; 0x34
 801dc7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc7e:	6831      	ldr	r1, [r6, #0]
 801dc80:	2900      	cmp	r1, #0
 801dc82:	d15f      	bne.n	801dd44 <_tzset_unlocked_r+0x100>
 801dc84:	6830      	ldr	r0, [r6, #0]
 801dc86:	f7fd fc07 	bl	801b498 <free>
 801dc8a:	4620      	mov	r0, r4
 801dc8c:	f7e2 faba 	bl	8000204 <strlen>
 801dc90:	1c41      	adds	r1, r0, #1
 801dc92:	4638      	mov	r0, r7
 801dc94:	f7fd ff06 	bl	801baa4 <_malloc_r>
 801dc98:	6030      	str	r0, [r6, #0]
 801dc9a:	2800      	cmp	r0, #0
 801dc9c:	d157      	bne.n	801dd4e <_tzset_unlocked_r+0x10a>
 801dc9e:	7823      	ldrb	r3, [r4, #0]
 801dca0:	4aa0      	ldr	r2, [pc, #640]	; (801df24 <_tzset_unlocked_r+0x2e0>)
 801dca2:	49a1      	ldr	r1, [pc, #644]	; (801df28 <_tzset_unlocked_r+0x2e4>)
 801dca4:	2b3a      	cmp	r3, #58	; 0x3a
 801dca6:	bf08      	it	eq
 801dca8:	3401      	addeq	r4, #1
 801dcaa:	ae0a      	add	r6, sp, #40	; 0x28
 801dcac:	4633      	mov	r3, r6
 801dcae:	4620      	mov	r0, r4
 801dcb0:	f7fe ff3e 	bl	801cb30 <siscanf>
 801dcb4:	2800      	cmp	r0, #0
 801dcb6:	dddf      	ble.n	801dc78 <_tzset_unlocked_r+0x34>
 801dcb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dcba:	18e7      	adds	r7, r4, r3
 801dcbc:	5ce3      	ldrb	r3, [r4, r3]
 801dcbe:	2b2d      	cmp	r3, #45	; 0x2d
 801dcc0:	d149      	bne.n	801dd56 <_tzset_unlocked_r+0x112>
 801dcc2:	3701      	adds	r7, #1
 801dcc4:	f04f 34ff 	mov.w	r4, #4294967295
 801dcc8:	f10d 0a20 	add.w	sl, sp, #32
 801dccc:	f10d 0b1e 	add.w	fp, sp, #30
 801dcd0:	f04f 0800 	mov.w	r8, #0
 801dcd4:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801dcd8:	4994      	ldr	r1, [pc, #592]	; (801df2c <_tzset_unlocked_r+0x2e8>)
 801dcda:	9603      	str	r6, [sp, #12]
 801dcdc:	f8cd b000 	str.w	fp, [sp]
 801dce0:	4633      	mov	r3, r6
 801dce2:	aa07      	add	r2, sp, #28
 801dce4:	4638      	mov	r0, r7
 801dce6:	f8ad 801e 	strh.w	r8, [sp, #30]
 801dcea:	f8ad 8020 	strh.w	r8, [sp, #32]
 801dcee:	f7fe ff1f 	bl	801cb30 <siscanf>
 801dcf2:	4540      	cmp	r0, r8
 801dcf4:	ddc0      	ble.n	801dc78 <_tzset_unlocked_r+0x34>
 801dcf6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801dcfa:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801dcfe:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801df38 <_tzset_unlocked_r+0x2f4>
 801dd02:	213c      	movs	r1, #60	; 0x3c
 801dd04:	fb01 2203 	mla	r2, r1, r3, r2
 801dd08:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801dd0c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801dd10:	fb01 2303 	mla	r3, r1, r3, r2
 801dd14:	435c      	muls	r4, r3
 801dd16:	62ac      	str	r4, [r5, #40]	; 0x28
 801dd18:	4c81      	ldr	r4, [pc, #516]	; (801df20 <_tzset_unlocked_r+0x2dc>)
 801dd1a:	4b82      	ldr	r3, [pc, #520]	; (801df24 <_tzset_unlocked_r+0x2e0>)
 801dd1c:	6023      	str	r3, [r4, #0]
 801dd1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dd20:	4981      	ldr	r1, [pc, #516]	; (801df28 <_tzset_unlocked_r+0x2e4>)
 801dd22:	441f      	add	r7, r3
 801dd24:	464a      	mov	r2, r9
 801dd26:	4633      	mov	r3, r6
 801dd28:	4638      	mov	r0, r7
 801dd2a:	f7fe ff01 	bl	801cb30 <siscanf>
 801dd2e:	4540      	cmp	r0, r8
 801dd30:	dc16      	bgt.n	801dd60 <_tzset_unlocked_r+0x11c>
 801dd32:	6823      	ldr	r3, [r4, #0]
 801dd34:	6063      	str	r3, [r4, #4]
 801dd36:	4b77      	ldr	r3, [pc, #476]	; (801df14 <_tzset_unlocked_r+0x2d0>)
 801dd38:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801dd3a:	601a      	str	r2, [r3, #0]
 801dd3c:	4b77      	ldr	r3, [pc, #476]	; (801df1c <_tzset_unlocked_r+0x2d8>)
 801dd3e:	f8c3 8000 	str.w	r8, [r3]
 801dd42:	e799      	b.n	801dc78 <_tzset_unlocked_r+0x34>
 801dd44:	f7e2 fa54 	bl	80001f0 <strcmp>
 801dd48:	2800      	cmp	r0, #0
 801dd4a:	d19b      	bne.n	801dc84 <_tzset_unlocked_r+0x40>
 801dd4c:	e794      	b.n	801dc78 <_tzset_unlocked_r+0x34>
 801dd4e:	4621      	mov	r1, r4
 801dd50:	f7fe ff5f 	bl	801cc12 <strcpy>
 801dd54:	e7a3      	b.n	801dc9e <_tzset_unlocked_r+0x5a>
 801dd56:	2b2b      	cmp	r3, #43	; 0x2b
 801dd58:	bf08      	it	eq
 801dd5a:	3701      	addeq	r7, #1
 801dd5c:	2401      	movs	r4, #1
 801dd5e:	e7b3      	b.n	801dcc8 <_tzset_unlocked_r+0x84>
 801dd60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dd62:	f8c4 9004 	str.w	r9, [r4, #4]
 801dd66:	18fc      	adds	r4, r7, r3
 801dd68:	5cfb      	ldrb	r3, [r7, r3]
 801dd6a:	2b2d      	cmp	r3, #45	; 0x2d
 801dd6c:	f040 808b 	bne.w	801de86 <_tzset_unlocked_r+0x242>
 801dd70:	3401      	adds	r4, #1
 801dd72:	f04f 37ff 	mov.w	r7, #4294967295
 801dd76:	2300      	movs	r3, #0
 801dd78:	f8ad 301c 	strh.w	r3, [sp, #28]
 801dd7c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801dd80:	f8ad 3020 	strh.w	r3, [sp, #32]
 801dd84:	930a      	str	r3, [sp, #40]	; 0x28
 801dd86:	e9cd a602 	strd	sl, r6, [sp, #8]
 801dd8a:	e9cd b600 	strd	fp, r6, [sp]
 801dd8e:	4967      	ldr	r1, [pc, #412]	; (801df2c <_tzset_unlocked_r+0x2e8>)
 801dd90:	4633      	mov	r3, r6
 801dd92:	aa07      	add	r2, sp, #28
 801dd94:	4620      	mov	r0, r4
 801dd96:	f7fe fecb 	bl	801cb30 <siscanf>
 801dd9a:	2800      	cmp	r0, #0
 801dd9c:	dc78      	bgt.n	801de90 <_tzset_unlocked_r+0x24c>
 801dd9e:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 801dda0:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 801dda4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dda6:	652f      	str	r7, [r5, #80]	; 0x50
 801dda8:	441c      	add	r4, r3
 801ddaa:	462f      	mov	r7, r5
 801ddac:	f04f 0900 	mov.w	r9, #0
 801ddb0:	7823      	ldrb	r3, [r4, #0]
 801ddb2:	2b2c      	cmp	r3, #44	; 0x2c
 801ddb4:	bf08      	it	eq
 801ddb6:	3401      	addeq	r4, #1
 801ddb8:	f894 8000 	ldrb.w	r8, [r4]
 801ddbc:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801ddc0:	d178      	bne.n	801deb4 <_tzset_unlocked_r+0x270>
 801ddc2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801ddc6:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801ddca:	ab09      	add	r3, sp, #36	; 0x24
 801ddcc:	9300      	str	r3, [sp, #0]
 801ddce:	4958      	ldr	r1, [pc, #352]	; (801df30 <_tzset_unlocked_r+0x2ec>)
 801ddd0:	9603      	str	r6, [sp, #12]
 801ddd2:	4633      	mov	r3, r6
 801ddd4:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 801ddd8:	4620      	mov	r0, r4
 801ddda:	f7fe fea9 	bl	801cb30 <siscanf>
 801ddde:	2803      	cmp	r0, #3
 801dde0:	f47f af4a 	bne.w	801dc78 <_tzset_unlocked_r+0x34>
 801dde4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801dde8:	1e4b      	subs	r3, r1, #1
 801ddea:	2b0b      	cmp	r3, #11
 801ddec:	f63f af44 	bhi.w	801dc78 <_tzset_unlocked_r+0x34>
 801ddf0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801ddf4:	1e53      	subs	r3, r2, #1
 801ddf6:	2b04      	cmp	r3, #4
 801ddf8:	f63f af3e 	bhi.w	801dc78 <_tzset_unlocked_r+0x34>
 801ddfc:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801de00:	2b06      	cmp	r3, #6
 801de02:	f63f af39 	bhi.w	801dc78 <_tzset_unlocked_r+0x34>
 801de06:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801de0a:	f887 8008 	strb.w	r8, [r7, #8]
 801de0e:	617b      	str	r3, [r7, #20]
 801de10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801de12:	eb04 0803 	add.w	r8, r4, r3
 801de16:	2302      	movs	r3, #2
 801de18:	f8ad 301c 	strh.w	r3, [sp, #28]
 801de1c:	2300      	movs	r3, #0
 801de1e:	f8ad 301e 	strh.w	r3, [sp, #30]
 801de22:	f8ad 3020 	strh.w	r3, [sp, #32]
 801de26:	930a      	str	r3, [sp, #40]	; 0x28
 801de28:	f898 3000 	ldrb.w	r3, [r8]
 801de2c:	2b2f      	cmp	r3, #47	; 0x2f
 801de2e:	d109      	bne.n	801de44 <_tzset_unlocked_r+0x200>
 801de30:	e9cd a602 	strd	sl, r6, [sp, #8]
 801de34:	e9cd b600 	strd	fp, r6, [sp]
 801de38:	493e      	ldr	r1, [pc, #248]	; (801df34 <_tzset_unlocked_r+0x2f0>)
 801de3a:	4633      	mov	r3, r6
 801de3c:	aa07      	add	r2, sp, #28
 801de3e:	4640      	mov	r0, r8
 801de40:	f7fe fe76 	bl	801cb30 <siscanf>
 801de44:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801de48:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801de4c:	213c      	movs	r1, #60	; 0x3c
 801de4e:	fb01 2203 	mla	r2, r1, r3, r2
 801de52:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801de56:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801de5a:	fb01 2303 	mla	r3, r1, r3, r2
 801de5e:	61bb      	str	r3, [r7, #24]
 801de60:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801de62:	3728      	adds	r7, #40	; 0x28
 801de64:	4444      	add	r4, r8
 801de66:	f1b9 0f00 	cmp.w	r9, #0
 801de6a:	d020      	beq.n	801deae <_tzset_unlocked_r+0x26a>
 801de6c:	6868      	ldr	r0, [r5, #4]
 801de6e:	f7ff fe2f 	bl	801dad0 <__tzcalc_limits>
 801de72:	4b28      	ldr	r3, [pc, #160]	; (801df14 <_tzset_unlocked_r+0x2d0>)
 801de74:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801de76:	601a      	str	r2, [r3, #0]
 801de78:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801de7a:	1a9b      	subs	r3, r3, r2
 801de7c:	4a27      	ldr	r2, [pc, #156]	; (801df1c <_tzset_unlocked_r+0x2d8>)
 801de7e:	bf18      	it	ne
 801de80:	2301      	movne	r3, #1
 801de82:	6013      	str	r3, [r2, #0]
 801de84:	e6f8      	b.n	801dc78 <_tzset_unlocked_r+0x34>
 801de86:	2b2b      	cmp	r3, #43	; 0x2b
 801de88:	bf08      	it	eq
 801de8a:	3401      	addeq	r4, #1
 801de8c:	2701      	movs	r7, #1
 801de8e:	e772      	b.n	801dd76 <_tzset_unlocked_r+0x132>
 801de90:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801de94:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801de98:	213c      	movs	r1, #60	; 0x3c
 801de9a:	fb01 2203 	mla	r2, r1, r3, r2
 801de9e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801dea2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801dea6:	fb01 2303 	mla	r3, r1, r3, r2
 801deaa:	435f      	muls	r7, r3
 801deac:	e77a      	b.n	801dda4 <_tzset_unlocked_r+0x160>
 801deae:	f04f 0901 	mov.w	r9, #1
 801deb2:	e77d      	b.n	801ddb0 <_tzset_unlocked_r+0x16c>
 801deb4:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 801deb8:	bf06      	itte	eq
 801deba:	3401      	addeq	r4, #1
 801debc:	4643      	moveq	r3, r8
 801debe:	2344      	movne	r3, #68	; 0x44
 801dec0:	220a      	movs	r2, #10
 801dec2:	a90b      	add	r1, sp, #44	; 0x2c
 801dec4:	4620      	mov	r0, r4
 801dec6:	9305      	str	r3, [sp, #20]
 801dec8:	f7ff fdf8 	bl	801dabc <strtoul>
 801decc:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801ded0:	9b05      	ldr	r3, [sp, #20]
 801ded2:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801ded6:	45a0      	cmp	r8, r4
 801ded8:	d114      	bne.n	801df04 <_tzset_unlocked_r+0x2c0>
 801deda:	234d      	movs	r3, #77	; 0x4d
 801dedc:	f1b9 0f00 	cmp.w	r9, #0
 801dee0:	d107      	bne.n	801def2 <_tzset_unlocked_r+0x2ae>
 801dee2:	722b      	strb	r3, [r5, #8]
 801dee4:	2103      	movs	r1, #3
 801dee6:	2302      	movs	r3, #2
 801dee8:	e9c5 1303 	strd	r1, r3, [r5, #12]
 801deec:	f8c5 9014 	str.w	r9, [r5, #20]
 801def0:	e791      	b.n	801de16 <_tzset_unlocked_r+0x1d2>
 801def2:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801def6:	220b      	movs	r2, #11
 801def8:	2301      	movs	r3, #1
 801defa:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 801defe:	2300      	movs	r3, #0
 801df00:	63eb      	str	r3, [r5, #60]	; 0x3c
 801df02:	e788      	b.n	801de16 <_tzset_unlocked_r+0x1d2>
 801df04:	b280      	uxth	r0, r0
 801df06:	723b      	strb	r3, [r7, #8]
 801df08:	6178      	str	r0, [r7, #20]
 801df0a:	e784      	b.n	801de16 <_tzset_unlocked_r+0x1d2>
 801df0c:	080232f0 	.word	0x080232f0
 801df10:	20005ecc 	.word	0x20005ecc
 801df14:	20005ed4 	.word	0x20005ed4
 801df18:	080232f3 	.word	0x080232f3
 801df1c:	20005ed0 	.word	0x20005ed0
 801df20:	20000260 	.word	0x20000260
 801df24:	20005ebf 	.word	0x20005ebf
 801df28:	080232f7 	.word	0x080232f7
 801df2c:	0802331a 	.word	0x0802331a
 801df30:	08023306 	.word	0x08023306
 801df34:	08023319 	.word	0x08023319
 801df38:	20005eb4 	.word	0x20005eb4

0801df3c <_vsniprintf_r>:
 801df3c:	b530      	push	{r4, r5, lr}
 801df3e:	1e14      	subs	r4, r2, #0
 801df40:	4605      	mov	r5, r0
 801df42:	b09b      	sub	sp, #108	; 0x6c
 801df44:	4618      	mov	r0, r3
 801df46:	da05      	bge.n	801df54 <_vsniprintf_r+0x18>
 801df48:	238b      	movs	r3, #139	; 0x8b
 801df4a:	602b      	str	r3, [r5, #0]
 801df4c:	f04f 30ff 	mov.w	r0, #4294967295
 801df50:	b01b      	add	sp, #108	; 0x6c
 801df52:	bd30      	pop	{r4, r5, pc}
 801df54:	f44f 7302 	mov.w	r3, #520	; 0x208
 801df58:	f8ad 300c 	strh.w	r3, [sp, #12]
 801df5c:	bf14      	ite	ne
 801df5e:	f104 33ff 	addne.w	r3, r4, #4294967295
 801df62:	4623      	moveq	r3, r4
 801df64:	9302      	str	r3, [sp, #8]
 801df66:	9305      	str	r3, [sp, #20]
 801df68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801df6c:	9100      	str	r1, [sp, #0]
 801df6e:	9104      	str	r1, [sp, #16]
 801df70:	f8ad 300e 	strh.w	r3, [sp, #14]
 801df74:	4602      	mov	r2, r0
 801df76:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801df78:	4669      	mov	r1, sp
 801df7a:	4628      	mov	r0, r5
 801df7c:	f002 fac2 	bl	8020504 <_svfiprintf_r>
 801df80:	1c43      	adds	r3, r0, #1
 801df82:	bfbc      	itt	lt
 801df84:	238b      	movlt	r3, #139	; 0x8b
 801df86:	602b      	strlt	r3, [r5, #0]
 801df88:	2c00      	cmp	r4, #0
 801df8a:	d0e1      	beq.n	801df50 <_vsniprintf_r+0x14>
 801df8c:	9b00      	ldr	r3, [sp, #0]
 801df8e:	2200      	movs	r2, #0
 801df90:	701a      	strb	r2, [r3, #0]
 801df92:	e7dd      	b.n	801df50 <_vsniprintf_r+0x14>

0801df94 <vsniprintf>:
 801df94:	b507      	push	{r0, r1, r2, lr}
 801df96:	9300      	str	r3, [sp, #0]
 801df98:	4613      	mov	r3, r2
 801df9a:	460a      	mov	r2, r1
 801df9c:	4601      	mov	r1, r0
 801df9e:	4803      	ldr	r0, [pc, #12]	; (801dfac <vsniprintf+0x18>)
 801dfa0:	6800      	ldr	r0, [r0, #0]
 801dfa2:	f7ff ffcb 	bl	801df3c <_vsniprintf_r>
 801dfa6:	b003      	add	sp, #12
 801dfa8:	f85d fb04 	ldr.w	pc, [sp], #4
 801dfac:	200001fc 	.word	0x200001fc

0801dfb0 <__swbuf_r>:
 801dfb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dfb2:	460e      	mov	r6, r1
 801dfb4:	4614      	mov	r4, r2
 801dfb6:	4605      	mov	r5, r0
 801dfb8:	b118      	cbz	r0, 801dfc2 <__swbuf_r+0x12>
 801dfba:	6983      	ldr	r3, [r0, #24]
 801dfbc:	b90b      	cbnz	r3, 801dfc2 <__swbuf_r+0x12>
 801dfbe:	f7fd f87f 	bl	801b0c0 <__sinit>
 801dfc2:	4b21      	ldr	r3, [pc, #132]	; (801e048 <__swbuf_r+0x98>)
 801dfc4:	429c      	cmp	r4, r3
 801dfc6:	d12b      	bne.n	801e020 <__swbuf_r+0x70>
 801dfc8:	686c      	ldr	r4, [r5, #4]
 801dfca:	69a3      	ldr	r3, [r4, #24]
 801dfcc:	60a3      	str	r3, [r4, #8]
 801dfce:	89a3      	ldrh	r3, [r4, #12]
 801dfd0:	071a      	lsls	r2, r3, #28
 801dfd2:	d52f      	bpl.n	801e034 <__swbuf_r+0x84>
 801dfd4:	6923      	ldr	r3, [r4, #16]
 801dfd6:	b36b      	cbz	r3, 801e034 <__swbuf_r+0x84>
 801dfd8:	6923      	ldr	r3, [r4, #16]
 801dfda:	6820      	ldr	r0, [r4, #0]
 801dfdc:	1ac0      	subs	r0, r0, r3
 801dfde:	6963      	ldr	r3, [r4, #20]
 801dfe0:	b2f6      	uxtb	r6, r6
 801dfe2:	4283      	cmp	r3, r0
 801dfe4:	4637      	mov	r7, r6
 801dfe6:	dc04      	bgt.n	801dff2 <__swbuf_r+0x42>
 801dfe8:	4621      	mov	r1, r4
 801dfea:	4628      	mov	r0, r5
 801dfec:	f000 fff2 	bl	801efd4 <_fflush_r>
 801dff0:	bb30      	cbnz	r0, 801e040 <__swbuf_r+0x90>
 801dff2:	68a3      	ldr	r3, [r4, #8]
 801dff4:	3b01      	subs	r3, #1
 801dff6:	60a3      	str	r3, [r4, #8]
 801dff8:	6823      	ldr	r3, [r4, #0]
 801dffa:	1c5a      	adds	r2, r3, #1
 801dffc:	6022      	str	r2, [r4, #0]
 801dffe:	701e      	strb	r6, [r3, #0]
 801e000:	6963      	ldr	r3, [r4, #20]
 801e002:	3001      	adds	r0, #1
 801e004:	4283      	cmp	r3, r0
 801e006:	d004      	beq.n	801e012 <__swbuf_r+0x62>
 801e008:	89a3      	ldrh	r3, [r4, #12]
 801e00a:	07db      	lsls	r3, r3, #31
 801e00c:	d506      	bpl.n	801e01c <__swbuf_r+0x6c>
 801e00e:	2e0a      	cmp	r6, #10
 801e010:	d104      	bne.n	801e01c <__swbuf_r+0x6c>
 801e012:	4621      	mov	r1, r4
 801e014:	4628      	mov	r0, r5
 801e016:	f000 ffdd 	bl	801efd4 <_fflush_r>
 801e01a:	b988      	cbnz	r0, 801e040 <__swbuf_r+0x90>
 801e01c:	4638      	mov	r0, r7
 801e01e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e020:	4b0a      	ldr	r3, [pc, #40]	; (801e04c <__swbuf_r+0x9c>)
 801e022:	429c      	cmp	r4, r3
 801e024:	d101      	bne.n	801e02a <__swbuf_r+0x7a>
 801e026:	68ac      	ldr	r4, [r5, #8]
 801e028:	e7cf      	b.n	801dfca <__swbuf_r+0x1a>
 801e02a:	4b09      	ldr	r3, [pc, #36]	; (801e050 <__swbuf_r+0xa0>)
 801e02c:	429c      	cmp	r4, r3
 801e02e:	bf08      	it	eq
 801e030:	68ec      	ldreq	r4, [r5, #12]
 801e032:	e7ca      	b.n	801dfca <__swbuf_r+0x1a>
 801e034:	4621      	mov	r1, r4
 801e036:	4628      	mov	r0, r5
 801e038:	f000 f81e 	bl	801e078 <__swsetup_r>
 801e03c:	2800      	cmp	r0, #0
 801e03e:	d0cb      	beq.n	801dfd8 <__swbuf_r+0x28>
 801e040:	f04f 37ff 	mov.w	r7, #4294967295
 801e044:	e7ea      	b.n	801e01c <__swbuf_r+0x6c>
 801e046:	bf00      	nop
 801e048:	080230ec 	.word	0x080230ec
 801e04c:	0802310c 	.word	0x0802310c
 801e050:	080230cc 	.word	0x080230cc

0801e054 <_write_r>:
 801e054:	b538      	push	{r3, r4, r5, lr}
 801e056:	4d07      	ldr	r5, [pc, #28]	; (801e074 <_write_r+0x20>)
 801e058:	4604      	mov	r4, r0
 801e05a:	4608      	mov	r0, r1
 801e05c:	4611      	mov	r1, r2
 801e05e:	2200      	movs	r2, #0
 801e060:	602a      	str	r2, [r5, #0]
 801e062:	461a      	mov	r2, r3
 801e064:	f7e5 f9db 	bl	800341e <_write>
 801e068:	1c43      	adds	r3, r0, #1
 801e06a:	d102      	bne.n	801e072 <_write_r+0x1e>
 801e06c:	682b      	ldr	r3, [r5, #0]
 801e06e:	b103      	cbz	r3, 801e072 <_write_r+0x1e>
 801e070:	6023      	str	r3, [r4, #0]
 801e072:	bd38      	pop	{r3, r4, r5, pc}
 801e074:	20008fd0 	.word	0x20008fd0

0801e078 <__swsetup_r>:
 801e078:	4b32      	ldr	r3, [pc, #200]	; (801e144 <__swsetup_r+0xcc>)
 801e07a:	b570      	push	{r4, r5, r6, lr}
 801e07c:	681d      	ldr	r5, [r3, #0]
 801e07e:	4606      	mov	r6, r0
 801e080:	460c      	mov	r4, r1
 801e082:	b125      	cbz	r5, 801e08e <__swsetup_r+0x16>
 801e084:	69ab      	ldr	r3, [r5, #24]
 801e086:	b913      	cbnz	r3, 801e08e <__swsetup_r+0x16>
 801e088:	4628      	mov	r0, r5
 801e08a:	f7fd f819 	bl	801b0c0 <__sinit>
 801e08e:	4b2e      	ldr	r3, [pc, #184]	; (801e148 <__swsetup_r+0xd0>)
 801e090:	429c      	cmp	r4, r3
 801e092:	d10f      	bne.n	801e0b4 <__swsetup_r+0x3c>
 801e094:	686c      	ldr	r4, [r5, #4]
 801e096:	89a3      	ldrh	r3, [r4, #12]
 801e098:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e09c:	0719      	lsls	r1, r3, #28
 801e09e:	d42c      	bmi.n	801e0fa <__swsetup_r+0x82>
 801e0a0:	06dd      	lsls	r5, r3, #27
 801e0a2:	d411      	bmi.n	801e0c8 <__swsetup_r+0x50>
 801e0a4:	2309      	movs	r3, #9
 801e0a6:	6033      	str	r3, [r6, #0]
 801e0a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e0ac:	81a3      	strh	r3, [r4, #12]
 801e0ae:	f04f 30ff 	mov.w	r0, #4294967295
 801e0b2:	e03e      	b.n	801e132 <__swsetup_r+0xba>
 801e0b4:	4b25      	ldr	r3, [pc, #148]	; (801e14c <__swsetup_r+0xd4>)
 801e0b6:	429c      	cmp	r4, r3
 801e0b8:	d101      	bne.n	801e0be <__swsetup_r+0x46>
 801e0ba:	68ac      	ldr	r4, [r5, #8]
 801e0bc:	e7eb      	b.n	801e096 <__swsetup_r+0x1e>
 801e0be:	4b24      	ldr	r3, [pc, #144]	; (801e150 <__swsetup_r+0xd8>)
 801e0c0:	429c      	cmp	r4, r3
 801e0c2:	bf08      	it	eq
 801e0c4:	68ec      	ldreq	r4, [r5, #12]
 801e0c6:	e7e6      	b.n	801e096 <__swsetup_r+0x1e>
 801e0c8:	0758      	lsls	r0, r3, #29
 801e0ca:	d512      	bpl.n	801e0f2 <__swsetup_r+0x7a>
 801e0cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e0ce:	b141      	cbz	r1, 801e0e2 <__swsetup_r+0x6a>
 801e0d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e0d4:	4299      	cmp	r1, r3
 801e0d6:	d002      	beq.n	801e0de <__swsetup_r+0x66>
 801e0d8:	4630      	mov	r0, r6
 801e0da:	f7fd fc93 	bl	801ba04 <_free_r>
 801e0de:	2300      	movs	r3, #0
 801e0e0:	6363      	str	r3, [r4, #52]	; 0x34
 801e0e2:	89a3      	ldrh	r3, [r4, #12]
 801e0e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e0e8:	81a3      	strh	r3, [r4, #12]
 801e0ea:	2300      	movs	r3, #0
 801e0ec:	6063      	str	r3, [r4, #4]
 801e0ee:	6923      	ldr	r3, [r4, #16]
 801e0f0:	6023      	str	r3, [r4, #0]
 801e0f2:	89a3      	ldrh	r3, [r4, #12]
 801e0f4:	f043 0308 	orr.w	r3, r3, #8
 801e0f8:	81a3      	strh	r3, [r4, #12]
 801e0fa:	6923      	ldr	r3, [r4, #16]
 801e0fc:	b94b      	cbnz	r3, 801e112 <__swsetup_r+0x9a>
 801e0fe:	89a3      	ldrh	r3, [r4, #12]
 801e100:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e108:	d003      	beq.n	801e112 <__swsetup_r+0x9a>
 801e10a:	4621      	mov	r1, r4
 801e10c:	4630      	mov	r0, r6
 801e10e:	f001 fc4f 	bl	801f9b0 <__smakebuf_r>
 801e112:	89a0      	ldrh	r0, [r4, #12]
 801e114:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e118:	f010 0301 	ands.w	r3, r0, #1
 801e11c:	d00a      	beq.n	801e134 <__swsetup_r+0xbc>
 801e11e:	2300      	movs	r3, #0
 801e120:	60a3      	str	r3, [r4, #8]
 801e122:	6963      	ldr	r3, [r4, #20]
 801e124:	425b      	negs	r3, r3
 801e126:	61a3      	str	r3, [r4, #24]
 801e128:	6923      	ldr	r3, [r4, #16]
 801e12a:	b943      	cbnz	r3, 801e13e <__swsetup_r+0xc6>
 801e12c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e130:	d1ba      	bne.n	801e0a8 <__swsetup_r+0x30>
 801e132:	bd70      	pop	{r4, r5, r6, pc}
 801e134:	0781      	lsls	r1, r0, #30
 801e136:	bf58      	it	pl
 801e138:	6963      	ldrpl	r3, [r4, #20]
 801e13a:	60a3      	str	r3, [r4, #8]
 801e13c:	e7f4      	b.n	801e128 <__swsetup_r+0xb0>
 801e13e:	2000      	movs	r0, #0
 801e140:	e7f7      	b.n	801e132 <__swsetup_r+0xba>
 801e142:	bf00      	nop
 801e144:	200001fc 	.word	0x200001fc
 801e148:	080230ec 	.word	0x080230ec
 801e14c:	0802310c 	.word	0x0802310c
 801e150:	080230cc 	.word	0x080230cc

0801e154 <__assert_func>:
 801e154:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e156:	4614      	mov	r4, r2
 801e158:	461a      	mov	r2, r3
 801e15a:	4b09      	ldr	r3, [pc, #36]	; (801e180 <__assert_func+0x2c>)
 801e15c:	681b      	ldr	r3, [r3, #0]
 801e15e:	4605      	mov	r5, r0
 801e160:	68d8      	ldr	r0, [r3, #12]
 801e162:	b14c      	cbz	r4, 801e178 <__assert_func+0x24>
 801e164:	4b07      	ldr	r3, [pc, #28]	; (801e184 <__assert_func+0x30>)
 801e166:	9100      	str	r1, [sp, #0]
 801e168:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e16c:	4906      	ldr	r1, [pc, #24]	; (801e188 <__assert_func+0x34>)
 801e16e:	462b      	mov	r3, r5
 801e170:	f000 ff6c 	bl	801f04c <fiprintf>
 801e174:	f7fc ff3e 	bl	801aff4 <abort>
 801e178:	4b04      	ldr	r3, [pc, #16]	; (801e18c <__assert_func+0x38>)
 801e17a:	461c      	mov	r4, r3
 801e17c:	e7f3      	b.n	801e166 <__assert_func+0x12>
 801e17e:	bf00      	nop
 801e180:	200001fc 	.word	0x200001fc
 801e184:	0802332c 	.word	0x0802332c
 801e188:	08023339 	.word	0x08023339
 801e18c:	08023367 	.word	0x08023367

0801e190 <_close_r>:
 801e190:	b538      	push	{r3, r4, r5, lr}
 801e192:	4d06      	ldr	r5, [pc, #24]	; (801e1ac <_close_r+0x1c>)
 801e194:	2300      	movs	r3, #0
 801e196:	4604      	mov	r4, r0
 801e198:	4608      	mov	r0, r1
 801e19a:	602b      	str	r3, [r5, #0]
 801e19c:	f7e5 f95b 	bl	8003456 <_close>
 801e1a0:	1c43      	adds	r3, r0, #1
 801e1a2:	d102      	bne.n	801e1aa <_close_r+0x1a>
 801e1a4:	682b      	ldr	r3, [r5, #0]
 801e1a6:	b103      	cbz	r3, 801e1aa <_close_r+0x1a>
 801e1a8:	6023      	str	r3, [r4, #0]
 801e1aa:	bd38      	pop	{r3, r4, r5, pc}
 801e1ac:	20008fd0 	.word	0x20008fd0

0801e1b0 <div>:
 801e1b0:	2900      	cmp	r1, #0
 801e1b2:	b510      	push	{r4, lr}
 801e1b4:	fb91 f4f2 	sdiv	r4, r1, r2
 801e1b8:	fb02 1314 	mls	r3, r2, r4, r1
 801e1bc:	db06      	blt.n	801e1cc <div+0x1c>
 801e1be:	2b00      	cmp	r3, #0
 801e1c0:	da01      	bge.n	801e1c6 <div+0x16>
 801e1c2:	3401      	adds	r4, #1
 801e1c4:	1a9b      	subs	r3, r3, r2
 801e1c6:	e9c0 4300 	strd	r4, r3, [r0]
 801e1ca:	bd10      	pop	{r4, pc}
 801e1cc:	2b00      	cmp	r3, #0
 801e1ce:	bfc4      	itt	gt
 801e1d0:	f104 34ff 	addgt.w	r4, r4, #4294967295
 801e1d4:	189b      	addgt	r3, r3, r2
 801e1d6:	e7f6      	b.n	801e1c6 <div+0x16>

0801e1d8 <quorem>:
 801e1d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1dc:	6903      	ldr	r3, [r0, #16]
 801e1de:	690c      	ldr	r4, [r1, #16]
 801e1e0:	42a3      	cmp	r3, r4
 801e1e2:	4607      	mov	r7, r0
 801e1e4:	f2c0 8081 	blt.w	801e2ea <quorem+0x112>
 801e1e8:	3c01      	subs	r4, #1
 801e1ea:	f101 0814 	add.w	r8, r1, #20
 801e1ee:	f100 0514 	add.w	r5, r0, #20
 801e1f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e1f6:	9301      	str	r3, [sp, #4]
 801e1f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801e1fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e200:	3301      	adds	r3, #1
 801e202:	429a      	cmp	r2, r3
 801e204:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801e208:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801e20c:	fbb2 f6f3 	udiv	r6, r2, r3
 801e210:	d331      	bcc.n	801e276 <quorem+0x9e>
 801e212:	f04f 0e00 	mov.w	lr, #0
 801e216:	4640      	mov	r0, r8
 801e218:	46ac      	mov	ip, r5
 801e21a:	46f2      	mov	sl, lr
 801e21c:	f850 2b04 	ldr.w	r2, [r0], #4
 801e220:	b293      	uxth	r3, r2
 801e222:	fb06 e303 	mla	r3, r6, r3, lr
 801e226:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801e22a:	b29b      	uxth	r3, r3
 801e22c:	ebaa 0303 	sub.w	r3, sl, r3
 801e230:	0c12      	lsrs	r2, r2, #16
 801e232:	f8dc a000 	ldr.w	sl, [ip]
 801e236:	fb06 e202 	mla	r2, r6, r2, lr
 801e23a:	fa13 f38a 	uxtah	r3, r3, sl
 801e23e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801e242:	fa1f fa82 	uxth.w	sl, r2
 801e246:	f8dc 2000 	ldr.w	r2, [ip]
 801e24a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801e24e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801e252:	b29b      	uxth	r3, r3
 801e254:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e258:	4581      	cmp	r9, r0
 801e25a:	f84c 3b04 	str.w	r3, [ip], #4
 801e25e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801e262:	d2db      	bcs.n	801e21c <quorem+0x44>
 801e264:	f855 300b 	ldr.w	r3, [r5, fp]
 801e268:	b92b      	cbnz	r3, 801e276 <quorem+0x9e>
 801e26a:	9b01      	ldr	r3, [sp, #4]
 801e26c:	3b04      	subs	r3, #4
 801e26e:	429d      	cmp	r5, r3
 801e270:	461a      	mov	r2, r3
 801e272:	d32e      	bcc.n	801e2d2 <quorem+0xfa>
 801e274:	613c      	str	r4, [r7, #16]
 801e276:	4638      	mov	r0, r7
 801e278:	f001 fec0 	bl	801fffc <__mcmp>
 801e27c:	2800      	cmp	r0, #0
 801e27e:	db24      	blt.n	801e2ca <quorem+0xf2>
 801e280:	3601      	adds	r6, #1
 801e282:	4628      	mov	r0, r5
 801e284:	f04f 0c00 	mov.w	ip, #0
 801e288:	f858 2b04 	ldr.w	r2, [r8], #4
 801e28c:	f8d0 e000 	ldr.w	lr, [r0]
 801e290:	b293      	uxth	r3, r2
 801e292:	ebac 0303 	sub.w	r3, ip, r3
 801e296:	0c12      	lsrs	r2, r2, #16
 801e298:	fa13 f38e 	uxtah	r3, r3, lr
 801e29c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801e2a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801e2a4:	b29b      	uxth	r3, r3
 801e2a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e2aa:	45c1      	cmp	r9, r8
 801e2ac:	f840 3b04 	str.w	r3, [r0], #4
 801e2b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801e2b4:	d2e8      	bcs.n	801e288 <quorem+0xb0>
 801e2b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e2ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e2be:	b922      	cbnz	r2, 801e2ca <quorem+0xf2>
 801e2c0:	3b04      	subs	r3, #4
 801e2c2:	429d      	cmp	r5, r3
 801e2c4:	461a      	mov	r2, r3
 801e2c6:	d30a      	bcc.n	801e2de <quorem+0x106>
 801e2c8:	613c      	str	r4, [r7, #16]
 801e2ca:	4630      	mov	r0, r6
 801e2cc:	b003      	add	sp, #12
 801e2ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2d2:	6812      	ldr	r2, [r2, #0]
 801e2d4:	3b04      	subs	r3, #4
 801e2d6:	2a00      	cmp	r2, #0
 801e2d8:	d1cc      	bne.n	801e274 <quorem+0x9c>
 801e2da:	3c01      	subs	r4, #1
 801e2dc:	e7c7      	b.n	801e26e <quorem+0x96>
 801e2de:	6812      	ldr	r2, [r2, #0]
 801e2e0:	3b04      	subs	r3, #4
 801e2e2:	2a00      	cmp	r2, #0
 801e2e4:	d1f0      	bne.n	801e2c8 <quorem+0xf0>
 801e2e6:	3c01      	subs	r4, #1
 801e2e8:	e7eb      	b.n	801e2c2 <quorem+0xea>
 801e2ea:	2000      	movs	r0, #0
 801e2ec:	e7ee      	b.n	801e2cc <quorem+0xf4>
	...

0801e2f0 <_dtoa_r>:
 801e2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2f4:	ed2d 8b02 	vpush	{d8}
 801e2f8:	ec57 6b10 	vmov	r6, r7, d0
 801e2fc:	b095      	sub	sp, #84	; 0x54
 801e2fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801e300:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801e304:	9105      	str	r1, [sp, #20]
 801e306:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801e30a:	4604      	mov	r4, r0
 801e30c:	9209      	str	r2, [sp, #36]	; 0x24
 801e30e:	930f      	str	r3, [sp, #60]	; 0x3c
 801e310:	b975      	cbnz	r5, 801e330 <_dtoa_r+0x40>
 801e312:	2010      	movs	r0, #16
 801e314:	f7fd f8b8 	bl	801b488 <malloc>
 801e318:	4602      	mov	r2, r0
 801e31a:	6260      	str	r0, [r4, #36]	; 0x24
 801e31c:	b920      	cbnz	r0, 801e328 <_dtoa_r+0x38>
 801e31e:	4bb2      	ldr	r3, [pc, #712]	; (801e5e8 <_dtoa_r+0x2f8>)
 801e320:	21ea      	movs	r1, #234	; 0xea
 801e322:	48b2      	ldr	r0, [pc, #712]	; (801e5ec <_dtoa_r+0x2fc>)
 801e324:	f7ff ff16 	bl	801e154 <__assert_func>
 801e328:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801e32c:	6005      	str	r5, [r0, #0]
 801e32e:	60c5      	str	r5, [r0, #12]
 801e330:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e332:	6819      	ldr	r1, [r3, #0]
 801e334:	b151      	cbz	r1, 801e34c <_dtoa_r+0x5c>
 801e336:	685a      	ldr	r2, [r3, #4]
 801e338:	604a      	str	r2, [r1, #4]
 801e33a:	2301      	movs	r3, #1
 801e33c:	4093      	lsls	r3, r2
 801e33e:	608b      	str	r3, [r1, #8]
 801e340:	4620      	mov	r0, r4
 801e342:	f001 fbd3 	bl	801faec <_Bfree>
 801e346:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e348:	2200      	movs	r2, #0
 801e34a:	601a      	str	r2, [r3, #0]
 801e34c:	1e3b      	subs	r3, r7, #0
 801e34e:	bfb9      	ittee	lt
 801e350:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801e354:	9303      	strlt	r3, [sp, #12]
 801e356:	2300      	movge	r3, #0
 801e358:	f8c8 3000 	strge.w	r3, [r8]
 801e35c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801e360:	4ba3      	ldr	r3, [pc, #652]	; (801e5f0 <_dtoa_r+0x300>)
 801e362:	bfbc      	itt	lt
 801e364:	2201      	movlt	r2, #1
 801e366:	f8c8 2000 	strlt.w	r2, [r8]
 801e36a:	ea33 0309 	bics.w	r3, r3, r9
 801e36e:	d11b      	bne.n	801e3a8 <_dtoa_r+0xb8>
 801e370:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e372:	f242 730f 	movw	r3, #9999	; 0x270f
 801e376:	6013      	str	r3, [r2, #0]
 801e378:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e37c:	4333      	orrs	r3, r6
 801e37e:	f000 857a 	beq.w	801ee76 <_dtoa_r+0xb86>
 801e382:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e384:	b963      	cbnz	r3, 801e3a0 <_dtoa_r+0xb0>
 801e386:	4b9b      	ldr	r3, [pc, #620]	; (801e5f4 <_dtoa_r+0x304>)
 801e388:	e024      	b.n	801e3d4 <_dtoa_r+0xe4>
 801e38a:	4b9b      	ldr	r3, [pc, #620]	; (801e5f8 <_dtoa_r+0x308>)
 801e38c:	9300      	str	r3, [sp, #0]
 801e38e:	3308      	adds	r3, #8
 801e390:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801e392:	6013      	str	r3, [r2, #0]
 801e394:	9800      	ldr	r0, [sp, #0]
 801e396:	b015      	add	sp, #84	; 0x54
 801e398:	ecbd 8b02 	vpop	{d8}
 801e39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3a0:	4b94      	ldr	r3, [pc, #592]	; (801e5f4 <_dtoa_r+0x304>)
 801e3a2:	9300      	str	r3, [sp, #0]
 801e3a4:	3303      	adds	r3, #3
 801e3a6:	e7f3      	b.n	801e390 <_dtoa_r+0xa0>
 801e3a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e3ac:	2200      	movs	r2, #0
 801e3ae:	ec51 0b17 	vmov	r0, r1, d7
 801e3b2:	2300      	movs	r3, #0
 801e3b4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801e3b8:	f7e2 fba6 	bl	8000b08 <__aeabi_dcmpeq>
 801e3bc:	4680      	mov	r8, r0
 801e3be:	b158      	cbz	r0, 801e3d8 <_dtoa_r+0xe8>
 801e3c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e3c2:	2301      	movs	r3, #1
 801e3c4:	6013      	str	r3, [r2, #0]
 801e3c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e3c8:	2b00      	cmp	r3, #0
 801e3ca:	f000 8551 	beq.w	801ee70 <_dtoa_r+0xb80>
 801e3ce:	488b      	ldr	r0, [pc, #556]	; (801e5fc <_dtoa_r+0x30c>)
 801e3d0:	6018      	str	r0, [r3, #0]
 801e3d2:	1e43      	subs	r3, r0, #1
 801e3d4:	9300      	str	r3, [sp, #0]
 801e3d6:	e7dd      	b.n	801e394 <_dtoa_r+0xa4>
 801e3d8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801e3dc:	aa12      	add	r2, sp, #72	; 0x48
 801e3de:	a913      	add	r1, sp, #76	; 0x4c
 801e3e0:	4620      	mov	r0, r4
 801e3e2:	f001 ff2b 	bl	802023c <__d2b>
 801e3e6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801e3ea:	4683      	mov	fp, r0
 801e3ec:	2d00      	cmp	r5, #0
 801e3ee:	d07c      	beq.n	801e4ea <_dtoa_r+0x1fa>
 801e3f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e3f2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801e3f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e3fa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801e3fe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801e402:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801e406:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801e40a:	4b7d      	ldr	r3, [pc, #500]	; (801e600 <_dtoa_r+0x310>)
 801e40c:	2200      	movs	r2, #0
 801e40e:	4630      	mov	r0, r6
 801e410:	4639      	mov	r1, r7
 801e412:	f7e1 ff59 	bl	80002c8 <__aeabi_dsub>
 801e416:	a36e      	add	r3, pc, #440	; (adr r3, 801e5d0 <_dtoa_r+0x2e0>)
 801e418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e41c:	f7e2 f90c 	bl	8000638 <__aeabi_dmul>
 801e420:	a36d      	add	r3, pc, #436	; (adr r3, 801e5d8 <_dtoa_r+0x2e8>)
 801e422:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e426:	f7e1 ff51 	bl	80002cc <__adddf3>
 801e42a:	4606      	mov	r6, r0
 801e42c:	4628      	mov	r0, r5
 801e42e:	460f      	mov	r7, r1
 801e430:	f7e2 f898 	bl	8000564 <__aeabi_i2d>
 801e434:	a36a      	add	r3, pc, #424	; (adr r3, 801e5e0 <_dtoa_r+0x2f0>)
 801e436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e43a:	f7e2 f8fd 	bl	8000638 <__aeabi_dmul>
 801e43e:	4602      	mov	r2, r0
 801e440:	460b      	mov	r3, r1
 801e442:	4630      	mov	r0, r6
 801e444:	4639      	mov	r1, r7
 801e446:	f7e1 ff41 	bl	80002cc <__adddf3>
 801e44a:	4606      	mov	r6, r0
 801e44c:	460f      	mov	r7, r1
 801e44e:	f7e2 fba3 	bl	8000b98 <__aeabi_d2iz>
 801e452:	2200      	movs	r2, #0
 801e454:	4682      	mov	sl, r0
 801e456:	2300      	movs	r3, #0
 801e458:	4630      	mov	r0, r6
 801e45a:	4639      	mov	r1, r7
 801e45c:	f7e2 fb5e 	bl	8000b1c <__aeabi_dcmplt>
 801e460:	b148      	cbz	r0, 801e476 <_dtoa_r+0x186>
 801e462:	4650      	mov	r0, sl
 801e464:	f7e2 f87e 	bl	8000564 <__aeabi_i2d>
 801e468:	4632      	mov	r2, r6
 801e46a:	463b      	mov	r3, r7
 801e46c:	f7e2 fb4c 	bl	8000b08 <__aeabi_dcmpeq>
 801e470:	b908      	cbnz	r0, 801e476 <_dtoa_r+0x186>
 801e472:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e476:	f1ba 0f16 	cmp.w	sl, #22
 801e47a:	d854      	bhi.n	801e526 <_dtoa_r+0x236>
 801e47c:	4b61      	ldr	r3, [pc, #388]	; (801e604 <_dtoa_r+0x314>)
 801e47e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801e482:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e486:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801e48a:	f7e2 fb47 	bl	8000b1c <__aeabi_dcmplt>
 801e48e:	2800      	cmp	r0, #0
 801e490:	d04b      	beq.n	801e52a <_dtoa_r+0x23a>
 801e492:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e496:	2300      	movs	r3, #0
 801e498:	930e      	str	r3, [sp, #56]	; 0x38
 801e49a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e49c:	1b5d      	subs	r5, r3, r5
 801e49e:	1e6b      	subs	r3, r5, #1
 801e4a0:	9304      	str	r3, [sp, #16]
 801e4a2:	bf43      	ittte	mi
 801e4a4:	2300      	movmi	r3, #0
 801e4a6:	f1c5 0801 	rsbmi	r8, r5, #1
 801e4aa:	9304      	strmi	r3, [sp, #16]
 801e4ac:	f04f 0800 	movpl.w	r8, #0
 801e4b0:	f1ba 0f00 	cmp.w	sl, #0
 801e4b4:	db3b      	blt.n	801e52e <_dtoa_r+0x23e>
 801e4b6:	9b04      	ldr	r3, [sp, #16]
 801e4b8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801e4bc:	4453      	add	r3, sl
 801e4be:	9304      	str	r3, [sp, #16]
 801e4c0:	2300      	movs	r3, #0
 801e4c2:	9306      	str	r3, [sp, #24]
 801e4c4:	9b05      	ldr	r3, [sp, #20]
 801e4c6:	2b09      	cmp	r3, #9
 801e4c8:	d869      	bhi.n	801e59e <_dtoa_r+0x2ae>
 801e4ca:	2b05      	cmp	r3, #5
 801e4cc:	bfc4      	itt	gt
 801e4ce:	3b04      	subgt	r3, #4
 801e4d0:	9305      	strgt	r3, [sp, #20]
 801e4d2:	9b05      	ldr	r3, [sp, #20]
 801e4d4:	f1a3 0302 	sub.w	r3, r3, #2
 801e4d8:	bfcc      	ite	gt
 801e4da:	2500      	movgt	r5, #0
 801e4dc:	2501      	movle	r5, #1
 801e4de:	2b03      	cmp	r3, #3
 801e4e0:	d869      	bhi.n	801e5b6 <_dtoa_r+0x2c6>
 801e4e2:	e8df f003 	tbb	[pc, r3]
 801e4e6:	4e2c      	.short	0x4e2c
 801e4e8:	5a4c      	.short	0x5a4c
 801e4ea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801e4ee:	441d      	add	r5, r3
 801e4f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801e4f4:	2b20      	cmp	r3, #32
 801e4f6:	bfc1      	itttt	gt
 801e4f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801e4fc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801e500:	fa09 f303 	lslgt.w	r3, r9, r3
 801e504:	fa26 f000 	lsrgt.w	r0, r6, r0
 801e508:	bfda      	itte	le
 801e50a:	f1c3 0320 	rsble	r3, r3, #32
 801e50e:	fa06 f003 	lslle.w	r0, r6, r3
 801e512:	4318      	orrgt	r0, r3
 801e514:	f7e2 f816 	bl	8000544 <__aeabi_ui2d>
 801e518:	2301      	movs	r3, #1
 801e51a:	4606      	mov	r6, r0
 801e51c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801e520:	3d01      	subs	r5, #1
 801e522:	9310      	str	r3, [sp, #64]	; 0x40
 801e524:	e771      	b.n	801e40a <_dtoa_r+0x11a>
 801e526:	2301      	movs	r3, #1
 801e528:	e7b6      	b.n	801e498 <_dtoa_r+0x1a8>
 801e52a:	900e      	str	r0, [sp, #56]	; 0x38
 801e52c:	e7b5      	b.n	801e49a <_dtoa_r+0x1aa>
 801e52e:	f1ca 0300 	rsb	r3, sl, #0
 801e532:	9306      	str	r3, [sp, #24]
 801e534:	2300      	movs	r3, #0
 801e536:	eba8 080a 	sub.w	r8, r8, sl
 801e53a:	930d      	str	r3, [sp, #52]	; 0x34
 801e53c:	e7c2      	b.n	801e4c4 <_dtoa_r+0x1d4>
 801e53e:	2300      	movs	r3, #0
 801e540:	9308      	str	r3, [sp, #32]
 801e542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e544:	2b00      	cmp	r3, #0
 801e546:	dc39      	bgt.n	801e5bc <_dtoa_r+0x2cc>
 801e548:	f04f 0901 	mov.w	r9, #1
 801e54c:	f8cd 9004 	str.w	r9, [sp, #4]
 801e550:	464b      	mov	r3, r9
 801e552:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801e556:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801e558:	2200      	movs	r2, #0
 801e55a:	6042      	str	r2, [r0, #4]
 801e55c:	2204      	movs	r2, #4
 801e55e:	f102 0614 	add.w	r6, r2, #20
 801e562:	429e      	cmp	r6, r3
 801e564:	6841      	ldr	r1, [r0, #4]
 801e566:	d92f      	bls.n	801e5c8 <_dtoa_r+0x2d8>
 801e568:	4620      	mov	r0, r4
 801e56a:	f001 fa7f 	bl	801fa6c <_Balloc>
 801e56e:	9000      	str	r0, [sp, #0]
 801e570:	2800      	cmp	r0, #0
 801e572:	d14b      	bne.n	801e60c <_dtoa_r+0x31c>
 801e574:	4b24      	ldr	r3, [pc, #144]	; (801e608 <_dtoa_r+0x318>)
 801e576:	4602      	mov	r2, r0
 801e578:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801e57c:	e6d1      	b.n	801e322 <_dtoa_r+0x32>
 801e57e:	2301      	movs	r3, #1
 801e580:	e7de      	b.n	801e540 <_dtoa_r+0x250>
 801e582:	2300      	movs	r3, #0
 801e584:	9308      	str	r3, [sp, #32]
 801e586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e588:	eb0a 0903 	add.w	r9, sl, r3
 801e58c:	f109 0301 	add.w	r3, r9, #1
 801e590:	2b01      	cmp	r3, #1
 801e592:	9301      	str	r3, [sp, #4]
 801e594:	bfb8      	it	lt
 801e596:	2301      	movlt	r3, #1
 801e598:	e7dd      	b.n	801e556 <_dtoa_r+0x266>
 801e59a:	2301      	movs	r3, #1
 801e59c:	e7f2      	b.n	801e584 <_dtoa_r+0x294>
 801e59e:	2501      	movs	r5, #1
 801e5a0:	2300      	movs	r3, #0
 801e5a2:	9305      	str	r3, [sp, #20]
 801e5a4:	9508      	str	r5, [sp, #32]
 801e5a6:	f04f 39ff 	mov.w	r9, #4294967295
 801e5aa:	2200      	movs	r2, #0
 801e5ac:	f8cd 9004 	str.w	r9, [sp, #4]
 801e5b0:	2312      	movs	r3, #18
 801e5b2:	9209      	str	r2, [sp, #36]	; 0x24
 801e5b4:	e7cf      	b.n	801e556 <_dtoa_r+0x266>
 801e5b6:	2301      	movs	r3, #1
 801e5b8:	9308      	str	r3, [sp, #32]
 801e5ba:	e7f4      	b.n	801e5a6 <_dtoa_r+0x2b6>
 801e5bc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801e5c0:	f8cd 9004 	str.w	r9, [sp, #4]
 801e5c4:	464b      	mov	r3, r9
 801e5c6:	e7c6      	b.n	801e556 <_dtoa_r+0x266>
 801e5c8:	3101      	adds	r1, #1
 801e5ca:	6041      	str	r1, [r0, #4]
 801e5cc:	0052      	lsls	r2, r2, #1
 801e5ce:	e7c6      	b.n	801e55e <_dtoa_r+0x26e>
 801e5d0:	636f4361 	.word	0x636f4361
 801e5d4:	3fd287a7 	.word	0x3fd287a7
 801e5d8:	8b60c8b3 	.word	0x8b60c8b3
 801e5dc:	3fc68a28 	.word	0x3fc68a28
 801e5e0:	509f79fb 	.word	0x509f79fb
 801e5e4:	3fd34413 	.word	0x3fd34413
 801e5e8:	08023130 	.word	0x08023130
 801e5ec:	08023375 	.word	0x08023375
 801e5f0:	7ff00000 	.word	0x7ff00000
 801e5f4:	08023371 	.word	0x08023371
 801e5f8:	08023368 	.word	0x08023368
 801e5fc:	080235da 	.word	0x080235da
 801e600:	3ff80000 	.word	0x3ff80000
 801e604:	080234f0 	.word	0x080234f0
 801e608:	080233d4 	.word	0x080233d4
 801e60c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e60e:	9a00      	ldr	r2, [sp, #0]
 801e610:	601a      	str	r2, [r3, #0]
 801e612:	9b01      	ldr	r3, [sp, #4]
 801e614:	2b0e      	cmp	r3, #14
 801e616:	f200 80ad 	bhi.w	801e774 <_dtoa_r+0x484>
 801e61a:	2d00      	cmp	r5, #0
 801e61c:	f000 80aa 	beq.w	801e774 <_dtoa_r+0x484>
 801e620:	f1ba 0f00 	cmp.w	sl, #0
 801e624:	dd36      	ble.n	801e694 <_dtoa_r+0x3a4>
 801e626:	4ac3      	ldr	r2, [pc, #780]	; (801e934 <_dtoa_r+0x644>)
 801e628:	f00a 030f 	and.w	r3, sl, #15
 801e62c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801e630:	ed93 7b00 	vldr	d7, [r3]
 801e634:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801e638:	ea4f 172a 	mov.w	r7, sl, asr #4
 801e63c:	eeb0 8a47 	vmov.f32	s16, s14
 801e640:	eef0 8a67 	vmov.f32	s17, s15
 801e644:	d016      	beq.n	801e674 <_dtoa_r+0x384>
 801e646:	4bbc      	ldr	r3, [pc, #752]	; (801e938 <_dtoa_r+0x648>)
 801e648:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801e64c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801e650:	f7e2 f91c 	bl	800088c <__aeabi_ddiv>
 801e654:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e658:	f007 070f 	and.w	r7, r7, #15
 801e65c:	2503      	movs	r5, #3
 801e65e:	4eb6      	ldr	r6, [pc, #728]	; (801e938 <_dtoa_r+0x648>)
 801e660:	b957      	cbnz	r7, 801e678 <_dtoa_r+0x388>
 801e662:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e666:	ec53 2b18 	vmov	r2, r3, d8
 801e66a:	f7e2 f90f 	bl	800088c <__aeabi_ddiv>
 801e66e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e672:	e029      	b.n	801e6c8 <_dtoa_r+0x3d8>
 801e674:	2502      	movs	r5, #2
 801e676:	e7f2      	b.n	801e65e <_dtoa_r+0x36e>
 801e678:	07f9      	lsls	r1, r7, #31
 801e67a:	d508      	bpl.n	801e68e <_dtoa_r+0x39e>
 801e67c:	ec51 0b18 	vmov	r0, r1, d8
 801e680:	e9d6 2300 	ldrd	r2, r3, [r6]
 801e684:	f7e1 ffd8 	bl	8000638 <__aeabi_dmul>
 801e688:	ec41 0b18 	vmov	d8, r0, r1
 801e68c:	3501      	adds	r5, #1
 801e68e:	107f      	asrs	r7, r7, #1
 801e690:	3608      	adds	r6, #8
 801e692:	e7e5      	b.n	801e660 <_dtoa_r+0x370>
 801e694:	f000 80a6 	beq.w	801e7e4 <_dtoa_r+0x4f4>
 801e698:	f1ca 0600 	rsb	r6, sl, #0
 801e69c:	4ba5      	ldr	r3, [pc, #660]	; (801e934 <_dtoa_r+0x644>)
 801e69e:	4fa6      	ldr	r7, [pc, #664]	; (801e938 <_dtoa_r+0x648>)
 801e6a0:	f006 020f 	and.w	r2, r6, #15
 801e6a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801e6b0:	f7e1 ffc2 	bl	8000638 <__aeabi_dmul>
 801e6b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e6b8:	1136      	asrs	r6, r6, #4
 801e6ba:	2300      	movs	r3, #0
 801e6bc:	2502      	movs	r5, #2
 801e6be:	2e00      	cmp	r6, #0
 801e6c0:	f040 8085 	bne.w	801e7ce <_dtoa_r+0x4de>
 801e6c4:	2b00      	cmp	r3, #0
 801e6c6:	d1d2      	bne.n	801e66e <_dtoa_r+0x37e>
 801e6c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e6ca:	2b00      	cmp	r3, #0
 801e6cc:	f000 808c 	beq.w	801e7e8 <_dtoa_r+0x4f8>
 801e6d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801e6d4:	4b99      	ldr	r3, [pc, #612]	; (801e93c <_dtoa_r+0x64c>)
 801e6d6:	2200      	movs	r2, #0
 801e6d8:	4630      	mov	r0, r6
 801e6da:	4639      	mov	r1, r7
 801e6dc:	f7e2 fa1e 	bl	8000b1c <__aeabi_dcmplt>
 801e6e0:	2800      	cmp	r0, #0
 801e6e2:	f000 8081 	beq.w	801e7e8 <_dtoa_r+0x4f8>
 801e6e6:	9b01      	ldr	r3, [sp, #4]
 801e6e8:	2b00      	cmp	r3, #0
 801e6ea:	d07d      	beq.n	801e7e8 <_dtoa_r+0x4f8>
 801e6ec:	f1b9 0f00 	cmp.w	r9, #0
 801e6f0:	dd3c      	ble.n	801e76c <_dtoa_r+0x47c>
 801e6f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 801e6f6:	9307      	str	r3, [sp, #28]
 801e6f8:	2200      	movs	r2, #0
 801e6fa:	4b91      	ldr	r3, [pc, #580]	; (801e940 <_dtoa_r+0x650>)
 801e6fc:	4630      	mov	r0, r6
 801e6fe:	4639      	mov	r1, r7
 801e700:	f7e1 ff9a 	bl	8000638 <__aeabi_dmul>
 801e704:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e708:	3501      	adds	r5, #1
 801e70a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801e70e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801e712:	4628      	mov	r0, r5
 801e714:	f7e1 ff26 	bl	8000564 <__aeabi_i2d>
 801e718:	4632      	mov	r2, r6
 801e71a:	463b      	mov	r3, r7
 801e71c:	f7e1 ff8c 	bl	8000638 <__aeabi_dmul>
 801e720:	4b88      	ldr	r3, [pc, #544]	; (801e944 <_dtoa_r+0x654>)
 801e722:	2200      	movs	r2, #0
 801e724:	f7e1 fdd2 	bl	80002cc <__adddf3>
 801e728:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801e72c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e730:	9303      	str	r3, [sp, #12]
 801e732:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e734:	2b00      	cmp	r3, #0
 801e736:	d15c      	bne.n	801e7f2 <_dtoa_r+0x502>
 801e738:	4b83      	ldr	r3, [pc, #524]	; (801e948 <_dtoa_r+0x658>)
 801e73a:	2200      	movs	r2, #0
 801e73c:	4630      	mov	r0, r6
 801e73e:	4639      	mov	r1, r7
 801e740:	f7e1 fdc2 	bl	80002c8 <__aeabi_dsub>
 801e744:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e748:	4606      	mov	r6, r0
 801e74a:	460f      	mov	r7, r1
 801e74c:	f7e2 fa04 	bl	8000b58 <__aeabi_dcmpgt>
 801e750:	2800      	cmp	r0, #0
 801e752:	f040 8296 	bne.w	801ec82 <_dtoa_r+0x992>
 801e756:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801e75a:	4630      	mov	r0, r6
 801e75c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e760:	4639      	mov	r1, r7
 801e762:	f7e2 f9db 	bl	8000b1c <__aeabi_dcmplt>
 801e766:	2800      	cmp	r0, #0
 801e768:	f040 8288 	bne.w	801ec7c <_dtoa_r+0x98c>
 801e76c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801e770:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e774:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e776:	2b00      	cmp	r3, #0
 801e778:	f2c0 8158 	blt.w	801ea2c <_dtoa_r+0x73c>
 801e77c:	f1ba 0f0e 	cmp.w	sl, #14
 801e780:	f300 8154 	bgt.w	801ea2c <_dtoa_r+0x73c>
 801e784:	4b6b      	ldr	r3, [pc, #428]	; (801e934 <_dtoa_r+0x644>)
 801e786:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801e78a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801e78e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e790:	2b00      	cmp	r3, #0
 801e792:	f280 80e3 	bge.w	801e95c <_dtoa_r+0x66c>
 801e796:	9b01      	ldr	r3, [sp, #4]
 801e798:	2b00      	cmp	r3, #0
 801e79a:	f300 80df 	bgt.w	801e95c <_dtoa_r+0x66c>
 801e79e:	f040 826d 	bne.w	801ec7c <_dtoa_r+0x98c>
 801e7a2:	4b69      	ldr	r3, [pc, #420]	; (801e948 <_dtoa_r+0x658>)
 801e7a4:	2200      	movs	r2, #0
 801e7a6:	4640      	mov	r0, r8
 801e7a8:	4649      	mov	r1, r9
 801e7aa:	f7e1 ff45 	bl	8000638 <__aeabi_dmul>
 801e7ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e7b2:	f7e2 f9c7 	bl	8000b44 <__aeabi_dcmpge>
 801e7b6:	9e01      	ldr	r6, [sp, #4]
 801e7b8:	4637      	mov	r7, r6
 801e7ba:	2800      	cmp	r0, #0
 801e7bc:	f040 8243 	bne.w	801ec46 <_dtoa_r+0x956>
 801e7c0:	9d00      	ldr	r5, [sp, #0]
 801e7c2:	2331      	movs	r3, #49	; 0x31
 801e7c4:	f805 3b01 	strb.w	r3, [r5], #1
 801e7c8:	f10a 0a01 	add.w	sl, sl, #1
 801e7cc:	e23f      	b.n	801ec4e <_dtoa_r+0x95e>
 801e7ce:	07f2      	lsls	r2, r6, #31
 801e7d0:	d505      	bpl.n	801e7de <_dtoa_r+0x4ee>
 801e7d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e7d6:	f7e1 ff2f 	bl	8000638 <__aeabi_dmul>
 801e7da:	3501      	adds	r5, #1
 801e7dc:	2301      	movs	r3, #1
 801e7de:	1076      	asrs	r6, r6, #1
 801e7e0:	3708      	adds	r7, #8
 801e7e2:	e76c      	b.n	801e6be <_dtoa_r+0x3ce>
 801e7e4:	2502      	movs	r5, #2
 801e7e6:	e76f      	b.n	801e6c8 <_dtoa_r+0x3d8>
 801e7e8:	9b01      	ldr	r3, [sp, #4]
 801e7ea:	f8cd a01c 	str.w	sl, [sp, #28]
 801e7ee:	930c      	str	r3, [sp, #48]	; 0x30
 801e7f0:	e78d      	b.n	801e70e <_dtoa_r+0x41e>
 801e7f2:	9900      	ldr	r1, [sp, #0]
 801e7f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e7f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e7f8:	4b4e      	ldr	r3, [pc, #312]	; (801e934 <_dtoa_r+0x644>)
 801e7fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e7fe:	4401      	add	r1, r0
 801e800:	9102      	str	r1, [sp, #8]
 801e802:	9908      	ldr	r1, [sp, #32]
 801e804:	eeb0 8a47 	vmov.f32	s16, s14
 801e808:	eef0 8a67 	vmov.f32	s17, s15
 801e80c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e810:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801e814:	2900      	cmp	r1, #0
 801e816:	d045      	beq.n	801e8a4 <_dtoa_r+0x5b4>
 801e818:	494c      	ldr	r1, [pc, #304]	; (801e94c <_dtoa_r+0x65c>)
 801e81a:	2000      	movs	r0, #0
 801e81c:	f7e2 f836 	bl	800088c <__aeabi_ddiv>
 801e820:	ec53 2b18 	vmov	r2, r3, d8
 801e824:	f7e1 fd50 	bl	80002c8 <__aeabi_dsub>
 801e828:	9d00      	ldr	r5, [sp, #0]
 801e82a:	ec41 0b18 	vmov	d8, r0, r1
 801e82e:	4639      	mov	r1, r7
 801e830:	4630      	mov	r0, r6
 801e832:	f7e2 f9b1 	bl	8000b98 <__aeabi_d2iz>
 801e836:	900c      	str	r0, [sp, #48]	; 0x30
 801e838:	f7e1 fe94 	bl	8000564 <__aeabi_i2d>
 801e83c:	4602      	mov	r2, r0
 801e83e:	460b      	mov	r3, r1
 801e840:	4630      	mov	r0, r6
 801e842:	4639      	mov	r1, r7
 801e844:	f7e1 fd40 	bl	80002c8 <__aeabi_dsub>
 801e848:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e84a:	3330      	adds	r3, #48	; 0x30
 801e84c:	f805 3b01 	strb.w	r3, [r5], #1
 801e850:	ec53 2b18 	vmov	r2, r3, d8
 801e854:	4606      	mov	r6, r0
 801e856:	460f      	mov	r7, r1
 801e858:	f7e2 f960 	bl	8000b1c <__aeabi_dcmplt>
 801e85c:	2800      	cmp	r0, #0
 801e85e:	d165      	bne.n	801e92c <_dtoa_r+0x63c>
 801e860:	4632      	mov	r2, r6
 801e862:	463b      	mov	r3, r7
 801e864:	4935      	ldr	r1, [pc, #212]	; (801e93c <_dtoa_r+0x64c>)
 801e866:	2000      	movs	r0, #0
 801e868:	f7e1 fd2e 	bl	80002c8 <__aeabi_dsub>
 801e86c:	ec53 2b18 	vmov	r2, r3, d8
 801e870:	f7e2 f954 	bl	8000b1c <__aeabi_dcmplt>
 801e874:	2800      	cmp	r0, #0
 801e876:	f040 80b9 	bne.w	801e9ec <_dtoa_r+0x6fc>
 801e87a:	9b02      	ldr	r3, [sp, #8]
 801e87c:	429d      	cmp	r5, r3
 801e87e:	f43f af75 	beq.w	801e76c <_dtoa_r+0x47c>
 801e882:	4b2f      	ldr	r3, [pc, #188]	; (801e940 <_dtoa_r+0x650>)
 801e884:	ec51 0b18 	vmov	r0, r1, d8
 801e888:	2200      	movs	r2, #0
 801e88a:	f7e1 fed5 	bl	8000638 <__aeabi_dmul>
 801e88e:	4b2c      	ldr	r3, [pc, #176]	; (801e940 <_dtoa_r+0x650>)
 801e890:	ec41 0b18 	vmov	d8, r0, r1
 801e894:	2200      	movs	r2, #0
 801e896:	4630      	mov	r0, r6
 801e898:	4639      	mov	r1, r7
 801e89a:	f7e1 fecd 	bl	8000638 <__aeabi_dmul>
 801e89e:	4606      	mov	r6, r0
 801e8a0:	460f      	mov	r7, r1
 801e8a2:	e7c4      	b.n	801e82e <_dtoa_r+0x53e>
 801e8a4:	ec51 0b17 	vmov	r0, r1, d7
 801e8a8:	f7e1 fec6 	bl	8000638 <__aeabi_dmul>
 801e8ac:	9b02      	ldr	r3, [sp, #8]
 801e8ae:	9d00      	ldr	r5, [sp, #0]
 801e8b0:	930c      	str	r3, [sp, #48]	; 0x30
 801e8b2:	ec41 0b18 	vmov	d8, r0, r1
 801e8b6:	4639      	mov	r1, r7
 801e8b8:	4630      	mov	r0, r6
 801e8ba:	f7e2 f96d 	bl	8000b98 <__aeabi_d2iz>
 801e8be:	9011      	str	r0, [sp, #68]	; 0x44
 801e8c0:	f7e1 fe50 	bl	8000564 <__aeabi_i2d>
 801e8c4:	4602      	mov	r2, r0
 801e8c6:	460b      	mov	r3, r1
 801e8c8:	4630      	mov	r0, r6
 801e8ca:	4639      	mov	r1, r7
 801e8cc:	f7e1 fcfc 	bl	80002c8 <__aeabi_dsub>
 801e8d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e8d2:	3330      	adds	r3, #48	; 0x30
 801e8d4:	f805 3b01 	strb.w	r3, [r5], #1
 801e8d8:	9b02      	ldr	r3, [sp, #8]
 801e8da:	429d      	cmp	r5, r3
 801e8dc:	4606      	mov	r6, r0
 801e8de:	460f      	mov	r7, r1
 801e8e0:	f04f 0200 	mov.w	r2, #0
 801e8e4:	d134      	bne.n	801e950 <_dtoa_r+0x660>
 801e8e6:	4b19      	ldr	r3, [pc, #100]	; (801e94c <_dtoa_r+0x65c>)
 801e8e8:	ec51 0b18 	vmov	r0, r1, d8
 801e8ec:	f7e1 fcee 	bl	80002cc <__adddf3>
 801e8f0:	4602      	mov	r2, r0
 801e8f2:	460b      	mov	r3, r1
 801e8f4:	4630      	mov	r0, r6
 801e8f6:	4639      	mov	r1, r7
 801e8f8:	f7e2 f92e 	bl	8000b58 <__aeabi_dcmpgt>
 801e8fc:	2800      	cmp	r0, #0
 801e8fe:	d175      	bne.n	801e9ec <_dtoa_r+0x6fc>
 801e900:	ec53 2b18 	vmov	r2, r3, d8
 801e904:	4911      	ldr	r1, [pc, #68]	; (801e94c <_dtoa_r+0x65c>)
 801e906:	2000      	movs	r0, #0
 801e908:	f7e1 fcde 	bl	80002c8 <__aeabi_dsub>
 801e90c:	4602      	mov	r2, r0
 801e90e:	460b      	mov	r3, r1
 801e910:	4630      	mov	r0, r6
 801e912:	4639      	mov	r1, r7
 801e914:	f7e2 f902 	bl	8000b1c <__aeabi_dcmplt>
 801e918:	2800      	cmp	r0, #0
 801e91a:	f43f af27 	beq.w	801e76c <_dtoa_r+0x47c>
 801e91e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e920:	1e6b      	subs	r3, r5, #1
 801e922:	930c      	str	r3, [sp, #48]	; 0x30
 801e924:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801e928:	2b30      	cmp	r3, #48	; 0x30
 801e92a:	d0f8      	beq.n	801e91e <_dtoa_r+0x62e>
 801e92c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801e930:	e04a      	b.n	801e9c8 <_dtoa_r+0x6d8>
 801e932:	bf00      	nop
 801e934:	080234f0 	.word	0x080234f0
 801e938:	080234c8 	.word	0x080234c8
 801e93c:	3ff00000 	.word	0x3ff00000
 801e940:	40240000 	.word	0x40240000
 801e944:	401c0000 	.word	0x401c0000
 801e948:	40140000 	.word	0x40140000
 801e94c:	3fe00000 	.word	0x3fe00000
 801e950:	4baf      	ldr	r3, [pc, #700]	; (801ec10 <_dtoa_r+0x920>)
 801e952:	f7e1 fe71 	bl	8000638 <__aeabi_dmul>
 801e956:	4606      	mov	r6, r0
 801e958:	460f      	mov	r7, r1
 801e95a:	e7ac      	b.n	801e8b6 <_dtoa_r+0x5c6>
 801e95c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801e960:	9d00      	ldr	r5, [sp, #0]
 801e962:	4642      	mov	r2, r8
 801e964:	464b      	mov	r3, r9
 801e966:	4630      	mov	r0, r6
 801e968:	4639      	mov	r1, r7
 801e96a:	f7e1 ff8f 	bl	800088c <__aeabi_ddiv>
 801e96e:	f7e2 f913 	bl	8000b98 <__aeabi_d2iz>
 801e972:	9002      	str	r0, [sp, #8]
 801e974:	f7e1 fdf6 	bl	8000564 <__aeabi_i2d>
 801e978:	4642      	mov	r2, r8
 801e97a:	464b      	mov	r3, r9
 801e97c:	f7e1 fe5c 	bl	8000638 <__aeabi_dmul>
 801e980:	4602      	mov	r2, r0
 801e982:	460b      	mov	r3, r1
 801e984:	4630      	mov	r0, r6
 801e986:	4639      	mov	r1, r7
 801e988:	f7e1 fc9e 	bl	80002c8 <__aeabi_dsub>
 801e98c:	9e02      	ldr	r6, [sp, #8]
 801e98e:	9f01      	ldr	r7, [sp, #4]
 801e990:	3630      	adds	r6, #48	; 0x30
 801e992:	f805 6b01 	strb.w	r6, [r5], #1
 801e996:	9e00      	ldr	r6, [sp, #0]
 801e998:	1bae      	subs	r6, r5, r6
 801e99a:	42b7      	cmp	r7, r6
 801e99c:	4602      	mov	r2, r0
 801e99e:	460b      	mov	r3, r1
 801e9a0:	d137      	bne.n	801ea12 <_dtoa_r+0x722>
 801e9a2:	f7e1 fc93 	bl	80002cc <__adddf3>
 801e9a6:	4642      	mov	r2, r8
 801e9a8:	464b      	mov	r3, r9
 801e9aa:	4606      	mov	r6, r0
 801e9ac:	460f      	mov	r7, r1
 801e9ae:	f7e2 f8d3 	bl	8000b58 <__aeabi_dcmpgt>
 801e9b2:	b9c8      	cbnz	r0, 801e9e8 <_dtoa_r+0x6f8>
 801e9b4:	4642      	mov	r2, r8
 801e9b6:	464b      	mov	r3, r9
 801e9b8:	4630      	mov	r0, r6
 801e9ba:	4639      	mov	r1, r7
 801e9bc:	f7e2 f8a4 	bl	8000b08 <__aeabi_dcmpeq>
 801e9c0:	b110      	cbz	r0, 801e9c8 <_dtoa_r+0x6d8>
 801e9c2:	9b02      	ldr	r3, [sp, #8]
 801e9c4:	07d9      	lsls	r1, r3, #31
 801e9c6:	d40f      	bmi.n	801e9e8 <_dtoa_r+0x6f8>
 801e9c8:	4620      	mov	r0, r4
 801e9ca:	4659      	mov	r1, fp
 801e9cc:	f001 f88e 	bl	801faec <_Bfree>
 801e9d0:	2300      	movs	r3, #0
 801e9d2:	702b      	strb	r3, [r5, #0]
 801e9d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e9d6:	f10a 0001 	add.w	r0, sl, #1
 801e9da:	6018      	str	r0, [r3, #0]
 801e9dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e9de:	2b00      	cmp	r3, #0
 801e9e0:	f43f acd8 	beq.w	801e394 <_dtoa_r+0xa4>
 801e9e4:	601d      	str	r5, [r3, #0]
 801e9e6:	e4d5      	b.n	801e394 <_dtoa_r+0xa4>
 801e9e8:	f8cd a01c 	str.w	sl, [sp, #28]
 801e9ec:	462b      	mov	r3, r5
 801e9ee:	461d      	mov	r5, r3
 801e9f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e9f4:	2a39      	cmp	r2, #57	; 0x39
 801e9f6:	d108      	bne.n	801ea0a <_dtoa_r+0x71a>
 801e9f8:	9a00      	ldr	r2, [sp, #0]
 801e9fa:	429a      	cmp	r2, r3
 801e9fc:	d1f7      	bne.n	801e9ee <_dtoa_r+0x6fe>
 801e9fe:	9a07      	ldr	r2, [sp, #28]
 801ea00:	9900      	ldr	r1, [sp, #0]
 801ea02:	3201      	adds	r2, #1
 801ea04:	9207      	str	r2, [sp, #28]
 801ea06:	2230      	movs	r2, #48	; 0x30
 801ea08:	700a      	strb	r2, [r1, #0]
 801ea0a:	781a      	ldrb	r2, [r3, #0]
 801ea0c:	3201      	adds	r2, #1
 801ea0e:	701a      	strb	r2, [r3, #0]
 801ea10:	e78c      	b.n	801e92c <_dtoa_r+0x63c>
 801ea12:	4b7f      	ldr	r3, [pc, #508]	; (801ec10 <_dtoa_r+0x920>)
 801ea14:	2200      	movs	r2, #0
 801ea16:	f7e1 fe0f 	bl	8000638 <__aeabi_dmul>
 801ea1a:	2200      	movs	r2, #0
 801ea1c:	2300      	movs	r3, #0
 801ea1e:	4606      	mov	r6, r0
 801ea20:	460f      	mov	r7, r1
 801ea22:	f7e2 f871 	bl	8000b08 <__aeabi_dcmpeq>
 801ea26:	2800      	cmp	r0, #0
 801ea28:	d09b      	beq.n	801e962 <_dtoa_r+0x672>
 801ea2a:	e7cd      	b.n	801e9c8 <_dtoa_r+0x6d8>
 801ea2c:	9a08      	ldr	r2, [sp, #32]
 801ea2e:	2a00      	cmp	r2, #0
 801ea30:	f000 80c4 	beq.w	801ebbc <_dtoa_r+0x8cc>
 801ea34:	9a05      	ldr	r2, [sp, #20]
 801ea36:	2a01      	cmp	r2, #1
 801ea38:	f300 80a8 	bgt.w	801eb8c <_dtoa_r+0x89c>
 801ea3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ea3e:	2a00      	cmp	r2, #0
 801ea40:	f000 80a0 	beq.w	801eb84 <_dtoa_r+0x894>
 801ea44:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801ea48:	9e06      	ldr	r6, [sp, #24]
 801ea4a:	4645      	mov	r5, r8
 801ea4c:	9a04      	ldr	r2, [sp, #16]
 801ea4e:	2101      	movs	r1, #1
 801ea50:	441a      	add	r2, r3
 801ea52:	4620      	mov	r0, r4
 801ea54:	4498      	add	r8, r3
 801ea56:	9204      	str	r2, [sp, #16]
 801ea58:	f001 f94e 	bl	801fcf8 <__i2b>
 801ea5c:	4607      	mov	r7, r0
 801ea5e:	2d00      	cmp	r5, #0
 801ea60:	dd0b      	ble.n	801ea7a <_dtoa_r+0x78a>
 801ea62:	9b04      	ldr	r3, [sp, #16]
 801ea64:	2b00      	cmp	r3, #0
 801ea66:	dd08      	ble.n	801ea7a <_dtoa_r+0x78a>
 801ea68:	42ab      	cmp	r3, r5
 801ea6a:	9a04      	ldr	r2, [sp, #16]
 801ea6c:	bfa8      	it	ge
 801ea6e:	462b      	movge	r3, r5
 801ea70:	eba8 0803 	sub.w	r8, r8, r3
 801ea74:	1aed      	subs	r5, r5, r3
 801ea76:	1ad3      	subs	r3, r2, r3
 801ea78:	9304      	str	r3, [sp, #16]
 801ea7a:	9b06      	ldr	r3, [sp, #24]
 801ea7c:	b1fb      	cbz	r3, 801eabe <_dtoa_r+0x7ce>
 801ea7e:	9b08      	ldr	r3, [sp, #32]
 801ea80:	2b00      	cmp	r3, #0
 801ea82:	f000 809f 	beq.w	801ebc4 <_dtoa_r+0x8d4>
 801ea86:	2e00      	cmp	r6, #0
 801ea88:	dd11      	ble.n	801eaae <_dtoa_r+0x7be>
 801ea8a:	4639      	mov	r1, r7
 801ea8c:	4632      	mov	r2, r6
 801ea8e:	4620      	mov	r0, r4
 801ea90:	f001 f9ee 	bl	801fe70 <__pow5mult>
 801ea94:	465a      	mov	r2, fp
 801ea96:	4601      	mov	r1, r0
 801ea98:	4607      	mov	r7, r0
 801ea9a:	4620      	mov	r0, r4
 801ea9c:	f001 f942 	bl	801fd24 <__multiply>
 801eaa0:	4659      	mov	r1, fp
 801eaa2:	9007      	str	r0, [sp, #28]
 801eaa4:	4620      	mov	r0, r4
 801eaa6:	f001 f821 	bl	801faec <_Bfree>
 801eaaa:	9b07      	ldr	r3, [sp, #28]
 801eaac:	469b      	mov	fp, r3
 801eaae:	9b06      	ldr	r3, [sp, #24]
 801eab0:	1b9a      	subs	r2, r3, r6
 801eab2:	d004      	beq.n	801eabe <_dtoa_r+0x7ce>
 801eab4:	4659      	mov	r1, fp
 801eab6:	4620      	mov	r0, r4
 801eab8:	f001 f9da 	bl	801fe70 <__pow5mult>
 801eabc:	4683      	mov	fp, r0
 801eabe:	2101      	movs	r1, #1
 801eac0:	4620      	mov	r0, r4
 801eac2:	f001 f919 	bl	801fcf8 <__i2b>
 801eac6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801eac8:	2b00      	cmp	r3, #0
 801eaca:	4606      	mov	r6, r0
 801eacc:	dd7c      	ble.n	801ebc8 <_dtoa_r+0x8d8>
 801eace:	461a      	mov	r2, r3
 801ead0:	4601      	mov	r1, r0
 801ead2:	4620      	mov	r0, r4
 801ead4:	f001 f9cc 	bl	801fe70 <__pow5mult>
 801ead8:	9b05      	ldr	r3, [sp, #20]
 801eada:	2b01      	cmp	r3, #1
 801eadc:	4606      	mov	r6, r0
 801eade:	dd76      	ble.n	801ebce <_dtoa_r+0x8de>
 801eae0:	2300      	movs	r3, #0
 801eae2:	9306      	str	r3, [sp, #24]
 801eae4:	6933      	ldr	r3, [r6, #16]
 801eae6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801eaea:	6918      	ldr	r0, [r3, #16]
 801eaec:	f001 f8b4 	bl	801fc58 <__hi0bits>
 801eaf0:	f1c0 0020 	rsb	r0, r0, #32
 801eaf4:	9b04      	ldr	r3, [sp, #16]
 801eaf6:	4418      	add	r0, r3
 801eaf8:	f010 001f 	ands.w	r0, r0, #31
 801eafc:	f000 8086 	beq.w	801ec0c <_dtoa_r+0x91c>
 801eb00:	f1c0 0320 	rsb	r3, r0, #32
 801eb04:	2b04      	cmp	r3, #4
 801eb06:	dd7f      	ble.n	801ec08 <_dtoa_r+0x918>
 801eb08:	f1c0 001c 	rsb	r0, r0, #28
 801eb0c:	9b04      	ldr	r3, [sp, #16]
 801eb0e:	4403      	add	r3, r0
 801eb10:	4480      	add	r8, r0
 801eb12:	4405      	add	r5, r0
 801eb14:	9304      	str	r3, [sp, #16]
 801eb16:	f1b8 0f00 	cmp.w	r8, #0
 801eb1a:	dd05      	ble.n	801eb28 <_dtoa_r+0x838>
 801eb1c:	4659      	mov	r1, fp
 801eb1e:	4642      	mov	r2, r8
 801eb20:	4620      	mov	r0, r4
 801eb22:	f001 f9ff 	bl	801ff24 <__lshift>
 801eb26:	4683      	mov	fp, r0
 801eb28:	9b04      	ldr	r3, [sp, #16]
 801eb2a:	2b00      	cmp	r3, #0
 801eb2c:	dd05      	ble.n	801eb3a <_dtoa_r+0x84a>
 801eb2e:	4631      	mov	r1, r6
 801eb30:	461a      	mov	r2, r3
 801eb32:	4620      	mov	r0, r4
 801eb34:	f001 f9f6 	bl	801ff24 <__lshift>
 801eb38:	4606      	mov	r6, r0
 801eb3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eb3c:	2b00      	cmp	r3, #0
 801eb3e:	d069      	beq.n	801ec14 <_dtoa_r+0x924>
 801eb40:	4631      	mov	r1, r6
 801eb42:	4658      	mov	r0, fp
 801eb44:	f001 fa5a 	bl	801fffc <__mcmp>
 801eb48:	2800      	cmp	r0, #0
 801eb4a:	da63      	bge.n	801ec14 <_dtoa_r+0x924>
 801eb4c:	2300      	movs	r3, #0
 801eb4e:	4659      	mov	r1, fp
 801eb50:	220a      	movs	r2, #10
 801eb52:	4620      	mov	r0, r4
 801eb54:	f000 ffec 	bl	801fb30 <__multadd>
 801eb58:	9b08      	ldr	r3, [sp, #32]
 801eb5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801eb5e:	4683      	mov	fp, r0
 801eb60:	2b00      	cmp	r3, #0
 801eb62:	f000 818f 	beq.w	801ee84 <_dtoa_r+0xb94>
 801eb66:	4639      	mov	r1, r7
 801eb68:	2300      	movs	r3, #0
 801eb6a:	220a      	movs	r2, #10
 801eb6c:	4620      	mov	r0, r4
 801eb6e:	f000 ffdf 	bl	801fb30 <__multadd>
 801eb72:	f1b9 0f00 	cmp.w	r9, #0
 801eb76:	4607      	mov	r7, r0
 801eb78:	f300 808e 	bgt.w	801ec98 <_dtoa_r+0x9a8>
 801eb7c:	9b05      	ldr	r3, [sp, #20]
 801eb7e:	2b02      	cmp	r3, #2
 801eb80:	dc50      	bgt.n	801ec24 <_dtoa_r+0x934>
 801eb82:	e089      	b.n	801ec98 <_dtoa_r+0x9a8>
 801eb84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801eb86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801eb8a:	e75d      	b.n	801ea48 <_dtoa_r+0x758>
 801eb8c:	9b01      	ldr	r3, [sp, #4]
 801eb8e:	1e5e      	subs	r6, r3, #1
 801eb90:	9b06      	ldr	r3, [sp, #24]
 801eb92:	42b3      	cmp	r3, r6
 801eb94:	bfbf      	itttt	lt
 801eb96:	9b06      	ldrlt	r3, [sp, #24]
 801eb98:	9606      	strlt	r6, [sp, #24]
 801eb9a:	1af2      	sublt	r2, r6, r3
 801eb9c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801eb9e:	bfb6      	itet	lt
 801eba0:	189b      	addlt	r3, r3, r2
 801eba2:	1b9e      	subge	r6, r3, r6
 801eba4:	930d      	strlt	r3, [sp, #52]	; 0x34
 801eba6:	9b01      	ldr	r3, [sp, #4]
 801eba8:	bfb8      	it	lt
 801ebaa:	2600      	movlt	r6, #0
 801ebac:	2b00      	cmp	r3, #0
 801ebae:	bfb5      	itete	lt
 801ebb0:	eba8 0503 	sublt.w	r5, r8, r3
 801ebb4:	9b01      	ldrge	r3, [sp, #4]
 801ebb6:	2300      	movlt	r3, #0
 801ebb8:	4645      	movge	r5, r8
 801ebba:	e747      	b.n	801ea4c <_dtoa_r+0x75c>
 801ebbc:	9e06      	ldr	r6, [sp, #24]
 801ebbe:	9f08      	ldr	r7, [sp, #32]
 801ebc0:	4645      	mov	r5, r8
 801ebc2:	e74c      	b.n	801ea5e <_dtoa_r+0x76e>
 801ebc4:	9a06      	ldr	r2, [sp, #24]
 801ebc6:	e775      	b.n	801eab4 <_dtoa_r+0x7c4>
 801ebc8:	9b05      	ldr	r3, [sp, #20]
 801ebca:	2b01      	cmp	r3, #1
 801ebcc:	dc18      	bgt.n	801ec00 <_dtoa_r+0x910>
 801ebce:	9b02      	ldr	r3, [sp, #8]
 801ebd0:	b9b3      	cbnz	r3, 801ec00 <_dtoa_r+0x910>
 801ebd2:	9b03      	ldr	r3, [sp, #12]
 801ebd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ebd8:	b9a3      	cbnz	r3, 801ec04 <_dtoa_r+0x914>
 801ebda:	9b03      	ldr	r3, [sp, #12]
 801ebdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ebe0:	0d1b      	lsrs	r3, r3, #20
 801ebe2:	051b      	lsls	r3, r3, #20
 801ebe4:	b12b      	cbz	r3, 801ebf2 <_dtoa_r+0x902>
 801ebe6:	9b04      	ldr	r3, [sp, #16]
 801ebe8:	3301      	adds	r3, #1
 801ebea:	9304      	str	r3, [sp, #16]
 801ebec:	f108 0801 	add.w	r8, r8, #1
 801ebf0:	2301      	movs	r3, #1
 801ebf2:	9306      	str	r3, [sp, #24]
 801ebf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ebf6:	2b00      	cmp	r3, #0
 801ebf8:	f47f af74 	bne.w	801eae4 <_dtoa_r+0x7f4>
 801ebfc:	2001      	movs	r0, #1
 801ebfe:	e779      	b.n	801eaf4 <_dtoa_r+0x804>
 801ec00:	2300      	movs	r3, #0
 801ec02:	e7f6      	b.n	801ebf2 <_dtoa_r+0x902>
 801ec04:	9b02      	ldr	r3, [sp, #8]
 801ec06:	e7f4      	b.n	801ebf2 <_dtoa_r+0x902>
 801ec08:	d085      	beq.n	801eb16 <_dtoa_r+0x826>
 801ec0a:	4618      	mov	r0, r3
 801ec0c:	301c      	adds	r0, #28
 801ec0e:	e77d      	b.n	801eb0c <_dtoa_r+0x81c>
 801ec10:	40240000 	.word	0x40240000
 801ec14:	9b01      	ldr	r3, [sp, #4]
 801ec16:	2b00      	cmp	r3, #0
 801ec18:	dc38      	bgt.n	801ec8c <_dtoa_r+0x99c>
 801ec1a:	9b05      	ldr	r3, [sp, #20]
 801ec1c:	2b02      	cmp	r3, #2
 801ec1e:	dd35      	ble.n	801ec8c <_dtoa_r+0x99c>
 801ec20:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801ec24:	f1b9 0f00 	cmp.w	r9, #0
 801ec28:	d10d      	bne.n	801ec46 <_dtoa_r+0x956>
 801ec2a:	4631      	mov	r1, r6
 801ec2c:	464b      	mov	r3, r9
 801ec2e:	2205      	movs	r2, #5
 801ec30:	4620      	mov	r0, r4
 801ec32:	f000 ff7d 	bl	801fb30 <__multadd>
 801ec36:	4601      	mov	r1, r0
 801ec38:	4606      	mov	r6, r0
 801ec3a:	4658      	mov	r0, fp
 801ec3c:	f001 f9de 	bl	801fffc <__mcmp>
 801ec40:	2800      	cmp	r0, #0
 801ec42:	f73f adbd 	bgt.w	801e7c0 <_dtoa_r+0x4d0>
 801ec46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ec48:	9d00      	ldr	r5, [sp, #0]
 801ec4a:	ea6f 0a03 	mvn.w	sl, r3
 801ec4e:	f04f 0800 	mov.w	r8, #0
 801ec52:	4631      	mov	r1, r6
 801ec54:	4620      	mov	r0, r4
 801ec56:	f000 ff49 	bl	801faec <_Bfree>
 801ec5a:	2f00      	cmp	r7, #0
 801ec5c:	f43f aeb4 	beq.w	801e9c8 <_dtoa_r+0x6d8>
 801ec60:	f1b8 0f00 	cmp.w	r8, #0
 801ec64:	d005      	beq.n	801ec72 <_dtoa_r+0x982>
 801ec66:	45b8      	cmp	r8, r7
 801ec68:	d003      	beq.n	801ec72 <_dtoa_r+0x982>
 801ec6a:	4641      	mov	r1, r8
 801ec6c:	4620      	mov	r0, r4
 801ec6e:	f000 ff3d 	bl	801faec <_Bfree>
 801ec72:	4639      	mov	r1, r7
 801ec74:	4620      	mov	r0, r4
 801ec76:	f000 ff39 	bl	801faec <_Bfree>
 801ec7a:	e6a5      	b.n	801e9c8 <_dtoa_r+0x6d8>
 801ec7c:	2600      	movs	r6, #0
 801ec7e:	4637      	mov	r7, r6
 801ec80:	e7e1      	b.n	801ec46 <_dtoa_r+0x956>
 801ec82:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801ec84:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801ec88:	4637      	mov	r7, r6
 801ec8a:	e599      	b.n	801e7c0 <_dtoa_r+0x4d0>
 801ec8c:	9b08      	ldr	r3, [sp, #32]
 801ec8e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801ec92:	2b00      	cmp	r3, #0
 801ec94:	f000 80fd 	beq.w	801ee92 <_dtoa_r+0xba2>
 801ec98:	2d00      	cmp	r5, #0
 801ec9a:	dd05      	ble.n	801eca8 <_dtoa_r+0x9b8>
 801ec9c:	4639      	mov	r1, r7
 801ec9e:	462a      	mov	r2, r5
 801eca0:	4620      	mov	r0, r4
 801eca2:	f001 f93f 	bl	801ff24 <__lshift>
 801eca6:	4607      	mov	r7, r0
 801eca8:	9b06      	ldr	r3, [sp, #24]
 801ecaa:	2b00      	cmp	r3, #0
 801ecac:	d05c      	beq.n	801ed68 <_dtoa_r+0xa78>
 801ecae:	6879      	ldr	r1, [r7, #4]
 801ecb0:	4620      	mov	r0, r4
 801ecb2:	f000 fedb 	bl	801fa6c <_Balloc>
 801ecb6:	4605      	mov	r5, r0
 801ecb8:	b928      	cbnz	r0, 801ecc6 <_dtoa_r+0x9d6>
 801ecba:	4b80      	ldr	r3, [pc, #512]	; (801eebc <_dtoa_r+0xbcc>)
 801ecbc:	4602      	mov	r2, r0
 801ecbe:	f240 21ea 	movw	r1, #746	; 0x2ea
 801ecc2:	f7ff bb2e 	b.w	801e322 <_dtoa_r+0x32>
 801ecc6:	693a      	ldr	r2, [r7, #16]
 801ecc8:	3202      	adds	r2, #2
 801ecca:	0092      	lsls	r2, r2, #2
 801eccc:	f107 010c 	add.w	r1, r7, #12
 801ecd0:	300c      	adds	r0, #12
 801ecd2:	f7fc fbe9 	bl	801b4a8 <memcpy>
 801ecd6:	2201      	movs	r2, #1
 801ecd8:	4629      	mov	r1, r5
 801ecda:	4620      	mov	r0, r4
 801ecdc:	f001 f922 	bl	801ff24 <__lshift>
 801ece0:	9b00      	ldr	r3, [sp, #0]
 801ece2:	3301      	adds	r3, #1
 801ece4:	9301      	str	r3, [sp, #4]
 801ece6:	9b00      	ldr	r3, [sp, #0]
 801ece8:	444b      	add	r3, r9
 801ecea:	9307      	str	r3, [sp, #28]
 801ecec:	9b02      	ldr	r3, [sp, #8]
 801ecee:	f003 0301 	and.w	r3, r3, #1
 801ecf2:	46b8      	mov	r8, r7
 801ecf4:	9306      	str	r3, [sp, #24]
 801ecf6:	4607      	mov	r7, r0
 801ecf8:	9b01      	ldr	r3, [sp, #4]
 801ecfa:	4631      	mov	r1, r6
 801ecfc:	3b01      	subs	r3, #1
 801ecfe:	4658      	mov	r0, fp
 801ed00:	9302      	str	r3, [sp, #8]
 801ed02:	f7ff fa69 	bl	801e1d8 <quorem>
 801ed06:	4603      	mov	r3, r0
 801ed08:	3330      	adds	r3, #48	; 0x30
 801ed0a:	9004      	str	r0, [sp, #16]
 801ed0c:	4641      	mov	r1, r8
 801ed0e:	4658      	mov	r0, fp
 801ed10:	9308      	str	r3, [sp, #32]
 801ed12:	f001 f973 	bl	801fffc <__mcmp>
 801ed16:	463a      	mov	r2, r7
 801ed18:	4681      	mov	r9, r0
 801ed1a:	4631      	mov	r1, r6
 801ed1c:	4620      	mov	r0, r4
 801ed1e:	f001 f989 	bl	8020034 <__mdiff>
 801ed22:	68c2      	ldr	r2, [r0, #12]
 801ed24:	9b08      	ldr	r3, [sp, #32]
 801ed26:	4605      	mov	r5, r0
 801ed28:	bb02      	cbnz	r2, 801ed6c <_dtoa_r+0xa7c>
 801ed2a:	4601      	mov	r1, r0
 801ed2c:	4658      	mov	r0, fp
 801ed2e:	f001 f965 	bl	801fffc <__mcmp>
 801ed32:	9b08      	ldr	r3, [sp, #32]
 801ed34:	4602      	mov	r2, r0
 801ed36:	4629      	mov	r1, r5
 801ed38:	4620      	mov	r0, r4
 801ed3a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801ed3e:	f000 fed5 	bl	801faec <_Bfree>
 801ed42:	9b05      	ldr	r3, [sp, #20]
 801ed44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ed46:	9d01      	ldr	r5, [sp, #4]
 801ed48:	ea43 0102 	orr.w	r1, r3, r2
 801ed4c:	9b06      	ldr	r3, [sp, #24]
 801ed4e:	430b      	orrs	r3, r1
 801ed50:	9b08      	ldr	r3, [sp, #32]
 801ed52:	d10d      	bne.n	801ed70 <_dtoa_r+0xa80>
 801ed54:	2b39      	cmp	r3, #57	; 0x39
 801ed56:	d029      	beq.n	801edac <_dtoa_r+0xabc>
 801ed58:	f1b9 0f00 	cmp.w	r9, #0
 801ed5c:	dd01      	ble.n	801ed62 <_dtoa_r+0xa72>
 801ed5e:	9b04      	ldr	r3, [sp, #16]
 801ed60:	3331      	adds	r3, #49	; 0x31
 801ed62:	9a02      	ldr	r2, [sp, #8]
 801ed64:	7013      	strb	r3, [r2, #0]
 801ed66:	e774      	b.n	801ec52 <_dtoa_r+0x962>
 801ed68:	4638      	mov	r0, r7
 801ed6a:	e7b9      	b.n	801ece0 <_dtoa_r+0x9f0>
 801ed6c:	2201      	movs	r2, #1
 801ed6e:	e7e2      	b.n	801ed36 <_dtoa_r+0xa46>
 801ed70:	f1b9 0f00 	cmp.w	r9, #0
 801ed74:	db06      	blt.n	801ed84 <_dtoa_r+0xa94>
 801ed76:	9905      	ldr	r1, [sp, #20]
 801ed78:	ea41 0909 	orr.w	r9, r1, r9
 801ed7c:	9906      	ldr	r1, [sp, #24]
 801ed7e:	ea59 0101 	orrs.w	r1, r9, r1
 801ed82:	d120      	bne.n	801edc6 <_dtoa_r+0xad6>
 801ed84:	2a00      	cmp	r2, #0
 801ed86:	ddec      	ble.n	801ed62 <_dtoa_r+0xa72>
 801ed88:	4659      	mov	r1, fp
 801ed8a:	2201      	movs	r2, #1
 801ed8c:	4620      	mov	r0, r4
 801ed8e:	9301      	str	r3, [sp, #4]
 801ed90:	f001 f8c8 	bl	801ff24 <__lshift>
 801ed94:	4631      	mov	r1, r6
 801ed96:	4683      	mov	fp, r0
 801ed98:	f001 f930 	bl	801fffc <__mcmp>
 801ed9c:	2800      	cmp	r0, #0
 801ed9e:	9b01      	ldr	r3, [sp, #4]
 801eda0:	dc02      	bgt.n	801eda8 <_dtoa_r+0xab8>
 801eda2:	d1de      	bne.n	801ed62 <_dtoa_r+0xa72>
 801eda4:	07da      	lsls	r2, r3, #31
 801eda6:	d5dc      	bpl.n	801ed62 <_dtoa_r+0xa72>
 801eda8:	2b39      	cmp	r3, #57	; 0x39
 801edaa:	d1d8      	bne.n	801ed5e <_dtoa_r+0xa6e>
 801edac:	9a02      	ldr	r2, [sp, #8]
 801edae:	2339      	movs	r3, #57	; 0x39
 801edb0:	7013      	strb	r3, [r2, #0]
 801edb2:	462b      	mov	r3, r5
 801edb4:	461d      	mov	r5, r3
 801edb6:	3b01      	subs	r3, #1
 801edb8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801edbc:	2a39      	cmp	r2, #57	; 0x39
 801edbe:	d050      	beq.n	801ee62 <_dtoa_r+0xb72>
 801edc0:	3201      	adds	r2, #1
 801edc2:	701a      	strb	r2, [r3, #0]
 801edc4:	e745      	b.n	801ec52 <_dtoa_r+0x962>
 801edc6:	2a00      	cmp	r2, #0
 801edc8:	dd03      	ble.n	801edd2 <_dtoa_r+0xae2>
 801edca:	2b39      	cmp	r3, #57	; 0x39
 801edcc:	d0ee      	beq.n	801edac <_dtoa_r+0xabc>
 801edce:	3301      	adds	r3, #1
 801edd0:	e7c7      	b.n	801ed62 <_dtoa_r+0xa72>
 801edd2:	9a01      	ldr	r2, [sp, #4]
 801edd4:	9907      	ldr	r1, [sp, #28]
 801edd6:	f802 3c01 	strb.w	r3, [r2, #-1]
 801edda:	428a      	cmp	r2, r1
 801eddc:	d02a      	beq.n	801ee34 <_dtoa_r+0xb44>
 801edde:	4659      	mov	r1, fp
 801ede0:	2300      	movs	r3, #0
 801ede2:	220a      	movs	r2, #10
 801ede4:	4620      	mov	r0, r4
 801ede6:	f000 fea3 	bl	801fb30 <__multadd>
 801edea:	45b8      	cmp	r8, r7
 801edec:	4683      	mov	fp, r0
 801edee:	f04f 0300 	mov.w	r3, #0
 801edf2:	f04f 020a 	mov.w	r2, #10
 801edf6:	4641      	mov	r1, r8
 801edf8:	4620      	mov	r0, r4
 801edfa:	d107      	bne.n	801ee0c <_dtoa_r+0xb1c>
 801edfc:	f000 fe98 	bl	801fb30 <__multadd>
 801ee00:	4680      	mov	r8, r0
 801ee02:	4607      	mov	r7, r0
 801ee04:	9b01      	ldr	r3, [sp, #4]
 801ee06:	3301      	adds	r3, #1
 801ee08:	9301      	str	r3, [sp, #4]
 801ee0a:	e775      	b.n	801ecf8 <_dtoa_r+0xa08>
 801ee0c:	f000 fe90 	bl	801fb30 <__multadd>
 801ee10:	4639      	mov	r1, r7
 801ee12:	4680      	mov	r8, r0
 801ee14:	2300      	movs	r3, #0
 801ee16:	220a      	movs	r2, #10
 801ee18:	4620      	mov	r0, r4
 801ee1a:	f000 fe89 	bl	801fb30 <__multadd>
 801ee1e:	4607      	mov	r7, r0
 801ee20:	e7f0      	b.n	801ee04 <_dtoa_r+0xb14>
 801ee22:	f1b9 0f00 	cmp.w	r9, #0
 801ee26:	9a00      	ldr	r2, [sp, #0]
 801ee28:	bfcc      	ite	gt
 801ee2a:	464d      	movgt	r5, r9
 801ee2c:	2501      	movle	r5, #1
 801ee2e:	4415      	add	r5, r2
 801ee30:	f04f 0800 	mov.w	r8, #0
 801ee34:	4659      	mov	r1, fp
 801ee36:	2201      	movs	r2, #1
 801ee38:	4620      	mov	r0, r4
 801ee3a:	9301      	str	r3, [sp, #4]
 801ee3c:	f001 f872 	bl	801ff24 <__lshift>
 801ee40:	4631      	mov	r1, r6
 801ee42:	4683      	mov	fp, r0
 801ee44:	f001 f8da 	bl	801fffc <__mcmp>
 801ee48:	2800      	cmp	r0, #0
 801ee4a:	dcb2      	bgt.n	801edb2 <_dtoa_r+0xac2>
 801ee4c:	d102      	bne.n	801ee54 <_dtoa_r+0xb64>
 801ee4e:	9b01      	ldr	r3, [sp, #4]
 801ee50:	07db      	lsls	r3, r3, #31
 801ee52:	d4ae      	bmi.n	801edb2 <_dtoa_r+0xac2>
 801ee54:	462b      	mov	r3, r5
 801ee56:	461d      	mov	r5, r3
 801ee58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ee5c:	2a30      	cmp	r2, #48	; 0x30
 801ee5e:	d0fa      	beq.n	801ee56 <_dtoa_r+0xb66>
 801ee60:	e6f7      	b.n	801ec52 <_dtoa_r+0x962>
 801ee62:	9a00      	ldr	r2, [sp, #0]
 801ee64:	429a      	cmp	r2, r3
 801ee66:	d1a5      	bne.n	801edb4 <_dtoa_r+0xac4>
 801ee68:	f10a 0a01 	add.w	sl, sl, #1
 801ee6c:	2331      	movs	r3, #49	; 0x31
 801ee6e:	e779      	b.n	801ed64 <_dtoa_r+0xa74>
 801ee70:	4b13      	ldr	r3, [pc, #76]	; (801eec0 <_dtoa_r+0xbd0>)
 801ee72:	f7ff baaf 	b.w	801e3d4 <_dtoa_r+0xe4>
 801ee76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ee78:	2b00      	cmp	r3, #0
 801ee7a:	f47f aa86 	bne.w	801e38a <_dtoa_r+0x9a>
 801ee7e:	4b11      	ldr	r3, [pc, #68]	; (801eec4 <_dtoa_r+0xbd4>)
 801ee80:	f7ff baa8 	b.w	801e3d4 <_dtoa_r+0xe4>
 801ee84:	f1b9 0f00 	cmp.w	r9, #0
 801ee88:	dc03      	bgt.n	801ee92 <_dtoa_r+0xba2>
 801ee8a:	9b05      	ldr	r3, [sp, #20]
 801ee8c:	2b02      	cmp	r3, #2
 801ee8e:	f73f aec9 	bgt.w	801ec24 <_dtoa_r+0x934>
 801ee92:	9d00      	ldr	r5, [sp, #0]
 801ee94:	4631      	mov	r1, r6
 801ee96:	4658      	mov	r0, fp
 801ee98:	f7ff f99e 	bl	801e1d8 <quorem>
 801ee9c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801eea0:	f805 3b01 	strb.w	r3, [r5], #1
 801eea4:	9a00      	ldr	r2, [sp, #0]
 801eea6:	1aaa      	subs	r2, r5, r2
 801eea8:	4591      	cmp	r9, r2
 801eeaa:	ddba      	ble.n	801ee22 <_dtoa_r+0xb32>
 801eeac:	4659      	mov	r1, fp
 801eeae:	2300      	movs	r3, #0
 801eeb0:	220a      	movs	r2, #10
 801eeb2:	4620      	mov	r0, r4
 801eeb4:	f000 fe3c 	bl	801fb30 <__multadd>
 801eeb8:	4683      	mov	fp, r0
 801eeba:	e7eb      	b.n	801ee94 <_dtoa_r+0xba4>
 801eebc:	080233d4 	.word	0x080233d4
 801eec0:	080235d9 	.word	0x080235d9
 801eec4:	08023368 	.word	0x08023368

0801eec8 <__sflush_r>:
 801eec8:	898a      	ldrh	r2, [r1, #12]
 801eeca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eece:	4605      	mov	r5, r0
 801eed0:	0710      	lsls	r0, r2, #28
 801eed2:	460c      	mov	r4, r1
 801eed4:	d458      	bmi.n	801ef88 <__sflush_r+0xc0>
 801eed6:	684b      	ldr	r3, [r1, #4]
 801eed8:	2b00      	cmp	r3, #0
 801eeda:	dc05      	bgt.n	801eee8 <__sflush_r+0x20>
 801eedc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801eede:	2b00      	cmp	r3, #0
 801eee0:	dc02      	bgt.n	801eee8 <__sflush_r+0x20>
 801eee2:	2000      	movs	r0, #0
 801eee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eee8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801eeea:	2e00      	cmp	r6, #0
 801eeec:	d0f9      	beq.n	801eee2 <__sflush_r+0x1a>
 801eeee:	2300      	movs	r3, #0
 801eef0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801eef4:	682f      	ldr	r7, [r5, #0]
 801eef6:	602b      	str	r3, [r5, #0]
 801eef8:	d032      	beq.n	801ef60 <__sflush_r+0x98>
 801eefa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801eefc:	89a3      	ldrh	r3, [r4, #12]
 801eefe:	075a      	lsls	r2, r3, #29
 801ef00:	d505      	bpl.n	801ef0e <__sflush_r+0x46>
 801ef02:	6863      	ldr	r3, [r4, #4]
 801ef04:	1ac0      	subs	r0, r0, r3
 801ef06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ef08:	b10b      	cbz	r3, 801ef0e <__sflush_r+0x46>
 801ef0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ef0c:	1ac0      	subs	r0, r0, r3
 801ef0e:	2300      	movs	r3, #0
 801ef10:	4602      	mov	r2, r0
 801ef12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ef14:	6a21      	ldr	r1, [r4, #32]
 801ef16:	4628      	mov	r0, r5
 801ef18:	47b0      	blx	r6
 801ef1a:	1c43      	adds	r3, r0, #1
 801ef1c:	89a3      	ldrh	r3, [r4, #12]
 801ef1e:	d106      	bne.n	801ef2e <__sflush_r+0x66>
 801ef20:	6829      	ldr	r1, [r5, #0]
 801ef22:	291d      	cmp	r1, #29
 801ef24:	d82c      	bhi.n	801ef80 <__sflush_r+0xb8>
 801ef26:	4a2a      	ldr	r2, [pc, #168]	; (801efd0 <__sflush_r+0x108>)
 801ef28:	40ca      	lsrs	r2, r1
 801ef2a:	07d6      	lsls	r6, r2, #31
 801ef2c:	d528      	bpl.n	801ef80 <__sflush_r+0xb8>
 801ef2e:	2200      	movs	r2, #0
 801ef30:	6062      	str	r2, [r4, #4]
 801ef32:	04d9      	lsls	r1, r3, #19
 801ef34:	6922      	ldr	r2, [r4, #16]
 801ef36:	6022      	str	r2, [r4, #0]
 801ef38:	d504      	bpl.n	801ef44 <__sflush_r+0x7c>
 801ef3a:	1c42      	adds	r2, r0, #1
 801ef3c:	d101      	bne.n	801ef42 <__sflush_r+0x7a>
 801ef3e:	682b      	ldr	r3, [r5, #0]
 801ef40:	b903      	cbnz	r3, 801ef44 <__sflush_r+0x7c>
 801ef42:	6560      	str	r0, [r4, #84]	; 0x54
 801ef44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ef46:	602f      	str	r7, [r5, #0]
 801ef48:	2900      	cmp	r1, #0
 801ef4a:	d0ca      	beq.n	801eee2 <__sflush_r+0x1a>
 801ef4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ef50:	4299      	cmp	r1, r3
 801ef52:	d002      	beq.n	801ef5a <__sflush_r+0x92>
 801ef54:	4628      	mov	r0, r5
 801ef56:	f7fc fd55 	bl	801ba04 <_free_r>
 801ef5a:	2000      	movs	r0, #0
 801ef5c:	6360      	str	r0, [r4, #52]	; 0x34
 801ef5e:	e7c1      	b.n	801eee4 <__sflush_r+0x1c>
 801ef60:	6a21      	ldr	r1, [r4, #32]
 801ef62:	2301      	movs	r3, #1
 801ef64:	4628      	mov	r0, r5
 801ef66:	47b0      	blx	r6
 801ef68:	1c41      	adds	r1, r0, #1
 801ef6a:	d1c7      	bne.n	801eefc <__sflush_r+0x34>
 801ef6c:	682b      	ldr	r3, [r5, #0]
 801ef6e:	2b00      	cmp	r3, #0
 801ef70:	d0c4      	beq.n	801eefc <__sflush_r+0x34>
 801ef72:	2b1d      	cmp	r3, #29
 801ef74:	d001      	beq.n	801ef7a <__sflush_r+0xb2>
 801ef76:	2b16      	cmp	r3, #22
 801ef78:	d101      	bne.n	801ef7e <__sflush_r+0xb6>
 801ef7a:	602f      	str	r7, [r5, #0]
 801ef7c:	e7b1      	b.n	801eee2 <__sflush_r+0x1a>
 801ef7e:	89a3      	ldrh	r3, [r4, #12]
 801ef80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ef84:	81a3      	strh	r3, [r4, #12]
 801ef86:	e7ad      	b.n	801eee4 <__sflush_r+0x1c>
 801ef88:	690f      	ldr	r7, [r1, #16]
 801ef8a:	2f00      	cmp	r7, #0
 801ef8c:	d0a9      	beq.n	801eee2 <__sflush_r+0x1a>
 801ef8e:	0793      	lsls	r3, r2, #30
 801ef90:	680e      	ldr	r6, [r1, #0]
 801ef92:	bf08      	it	eq
 801ef94:	694b      	ldreq	r3, [r1, #20]
 801ef96:	600f      	str	r7, [r1, #0]
 801ef98:	bf18      	it	ne
 801ef9a:	2300      	movne	r3, #0
 801ef9c:	eba6 0807 	sub.w	r8, r6, r7
 801efa0:	608b      	str	r3, [r1, #8]
 801efa2:	f1b8 0f00 	cmp.w	r8, #0
 801efa6:	dd9c      	ble.n	801eee2 <__sflush_r+0x1a>
 801efa8:	6a21      	ldr	r1, [r4, #32]
 801efaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801efac:	4643      	mov	r3, r8
 801efae:	463a      	mov	r2, r7
 801efb0:	4628      	mov	r0, r5
 801efb2:	47b0      	blx	r6
 801efb4:	2800      	cmp	r0, #0
 801efb6:	dc06      	bgt.n	801efc6 <__sflush_r+0xfe>
 801efb8:	89a3      	ldrh	r3, [r4, #12]
 801efba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801efbe:	81a3      	strh	r3, [r4, #12]
 801efc0:	f04f 30ff 	mov.w	r0, #4294967295
 801efc4:	e78e      	b.n	801eee4 <__sflush_r+0x1c>
 801efc6:	4407      	add	r7, r0
 801efc8:	eba8 0800 	sub.w	r8, r8, r0
 801efcc:	e7e9      	b.n	801efa2 <__sflush_r+0xda>
 801efce:	bf00      	nop
 801efd0:	20400001 	.word	0x20400001

0801efd4 <_fflush_r>:
 801efd4:	b538      	push	{r3, r4, r5, lr}
 801efd6:	690b      	ldr	r3, [r1, #16]
 801efd8:	4605      	mov	r5, r0
 801efda:	460c      	mov	r4, r1
 801efdc:	b913      	cbnz	r3, 801efe4 <_fflush_r+0x10>
 801efde:	2500      	movs	r5, #0
 801efe0:	4628      	mov	r0, r5
 801efe2:	bd38      	pop	{r3, r4, r5, pc}
 801efe4:	b118      	cbz	r0, 801efee <_fflush_r+0x1a>
 801efe6:	6983      	ldr	r3, [r0, #24]
 801efe8:	b90b      	cbnz	r3, 801efee <_fflush_r+0x1a>
 801efea:	f7fc f869 	bl	801b0c0 <__sinit>
 801efee:	4b14      	ldr	r3, [pc, #80]	; (801f040 <_fflush_r+0x6c>)
 801eff0:	429c      	cmp	r4, r3
 801eff2:	d11b      	bne.n	801f02c <_fflush_r+0x58>
 801eff4:	686c      	ldr	r4, [r5, #4]
 801eff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801effa:	2b00      	cmp	r3, #0
 801effc:	d0ef      	beq.n	801efde <_fflush_r+0xa>
 801effe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801f000:	07d0      	lsls	r0, r2, #31
 801f002:	d404      	bmi.n	801f00e <_fflush_r+0x3a>
 801f004:	0599      	lsls	r1, r3, #22
 801f006:	d402      	bmi.n	801f00e <_fflush_r+0x3a>
 801f008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f00a:	f7fc fa39 	bl	801b480 <__retarget_lock_acquire_recursive>
 801f00e:	4628      	mov	r0, r5
 801f010:	4621      	mov	r1, r4
 801f012:	f7ff ff59 	bl	801eec8 <__sflush_r>
 801f016:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f018:	07da      	lsls	r2, r3, #31
 801f01a:	4605      	mov	r5, r0
 801f01c:	d4e0      	bmi.n	801efe0 <_fflush_r+0xc>
 801f01e:	89a3      	ldrh	r3, [r4, #12]
 801f020:	059b      	lsls	r3, r3, #22
 801f022:	d4dd      	bmi.n	801efe0 <_fflush_r+0xc>
 801f024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f026:	f7fc fa2d 	bl	801b484 <__retarget_lock_release_recursive>
 801f02a:	e7d9      	b.n	801efe0 <_fflush_r+0xc>
 801f02c:	4b05      	ldr	r3, [pc, #20]	; (801f044 <_fflush_r+0x70>)
 801f02e:	429c      	cmp	r4, r3
 801f030:	d101      	bne.n	801f036 <_fflush_r+0x62>
 801f032:	68ac      	ldr	r4, [r5, #8]
 801f034:	e7df      	b.n	801eff6 <_fflush_r+0x22>
 801f036:	4b04      	ldr	r3, [pc, #16]	; (801f048 <_fflush_r+0x74>)
 801f038:	429c      	cmp	r4, r3
 801f03a:	bf08      	it	eq
 801f03c:	68ec      	ldreq	r4, [r5, #12]
 801f03e:	e7da      	b.n	801eff6 <_fflush_r+0x22>
 801f040:	080230ec 	.word	0x080230ec
 801f044:	0802310c 	.word	0x0802310c
 801f048:	080230cc 	.word	0x080230cc

0801f04c <fiprintf>:
 801f04c:	b40e      	push	{r1, r2, r3}
 801f04e:	b503      	push	{r0, r1, lr}
 801f050:	4601      	mov	r1, r0
 801f052:	ab03      	add	r3, sp, #12
 801f054:	4805      	ldr	r0, [pc, #20]	; (801f06c <fiprintf+0x20>)
 801f056:	f853 2b04 	ldr.w	r2, [r3], #4
 801f05a:	6800      	ldr	r0, [r0, #0]
 801f05c:	9301      	str	r3, [sp, #4]
 801f05e:	f001 fd4d 	bl	8020afc <_vfiprintf_r>
 801f062:	b002      	add	sp, #8
 801f064:	f85d eb04 	ldr.w	lr, [sp], #4
 801f068:	b003      	add	sp, #12
 801f06a:	4770      	bx	lr
 801f06c:	200001fc 	.word	0x200001fc

0801f070 <rshift>:
 801f070:	6903      	ldr	r3, [r0, #16]
 801f072:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801f076:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f07a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801f07e:	f100 0414 	add.w	r4, r0, #20
 801f082:	dd45      	ble.n	801f110 <rshift+0xa0>
 801f084:	f011 011f 	ands.w	r1, r1, #31
 801f088:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801f08c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801f090:	d10c      	bne.n	801f0ac <rshift+0x3c>
 801f092:	f100 0710 	add.w	r7, r0, #16
 801f096:	4629      	mov	r1, r5
 801f098:	42b1      	cmp	r1, r6
 801f09a:	d334      	bcc.n	801f106 <rshift+0x96>
 801f09c:	1a9b      	subs	r3, r3, r2
 801f09e:	009b      	lsls	r3, r3, #2
 801f0a0:	1eea      	subs	r2, r5, #3
 801f0a2:	4296      	cmp	r6, r2
 801f0a4:	bf38      	it	cc
 801f0a6:	2300      	movcc	r3, #0
 801f0a8:	4423      	add	r3, r4
 801f0aa:	e015      	b.n	801f0d8 <rshift+0x68>
 801f0ac:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801f0b0:	f1c1 0820 	rsb	r8, r1, #32
 801f0b4:	40cf      	lsrs	r7, r1
 801f0b6:	f105 0e04 	add.w	lr, r5, #4
 801f0ba:	46a1      	mov	r9, r4
 801f0bc:	4576      	cmp	r6, lr
 801f0be:	46f4      	mov	ip, lr
 801f0c0:	d815      	bhi.n	801f0ee <rshift+0x7e>
 801f0c2:	1a9b      	subs	r3, r3, r2
 801f0c4:	009a      	lsls	r2, r3, #2
 801f0c6:	3a04      	subs	r2, #4
 801f0c8:	3501      	adds	r5, #1
 801f0ca:	42ae      	cmp	r6, r5
 801f0cc:	bf38      	it	cc
 801f0ce:	2200      	movcc	r2, #0
 801f0d0:	18a3      	adds	r3, r4, r2
 801f0d2:	50a7      	str	r7, [r4, r2]
 801f0d4:	b107      	cbz	r7, 801f0d8 <rshift+0x68>
 801f0d6:	3304      	adds	r3, #4
 801f0d8:	1b1a      	subs	r2, r3, r4
 801f0da:	42a3      	cmp	r3, r4
 801f0dc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801f0e0:	bf08      	it	eq
 801f0e2:	2300      	moveq	r3, #0
 801f0e4:	6102      	str	r2, [r0, #16]
 801f0e6:	bf08      	it	eq
 801f0e8:	6143      	streq	r3, [r0, #20]
 801f0ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f0ee:	f8dc c000 	ldr.w	ip, [ip]
 801f0f2:	fa0c fc08 	lsl.w	ip, ip, r8
 801f0f6:	ea4c 0707 	orr.w	r7, ip, r7
 801f0fa:	f849 7b04 	str.w	r7, [r9], #4
 801f0fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 801f102:	40cf      	lsrs	r7, r1
 801f104:	e7da      	b.n	801f0bc <rshift+0x4c>
 801f106:	f851 cb04 	ldr.w	ip, [r1], #4
 801f10a:	f847 cf04 	str.w	ip, [r7, #4]!
 801f10e:	e7c3      	b.n	801f098 <rshift+0x28>
 801f110:	4623      	mov	r3, r4
 801f112:	e7e1      	b.n	801f0d8 <rshift+0x68>

0801f114 <__hexdig_fun>:
 801f114:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801f118:	2b09      	cmp	r3, #9
 801f11a:	d802      	bhi.n	801f122 <__hexdig_fun+0xe>
 801f11c:	3820      	subs	r0, #32
 801f11e:	b2c0      	uxtb	r0, r0
 801f120:	4770      	bx	lr
 801f122:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801f126:	2b05      	cmp	r3, #5
 801f128:	d801      	bhi.n	801f12e <__hexdig_fun+0x1a>
 801f12a:	3847      	subs	r0, #71	; 0x47
 801f12c:	e7f7      	b.n	801f11e <__hexdig_fun+0xa>
 801f12e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801f132:	2b05      	cmp	r3, #5
 801f134:	d801      	bhi.n	801f13a <__hexdig_fun+0x26>
 801f136:	3827      	subs	r0, #39	; 0x27
 801f138:	e7f1      	b.n	801f11e <__hexdig_fun+0xa>
 801f13a:	2000      	movs	r0, #0
 801f13c:	4770      	bx	lr
	...

0801f140 <__gethex>:
 801f140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f144:	ed2d 8b02 	vpush	{d8}
 801f148:	b089      	sub	sp, #36	; 0x24
 801f14a:	ee08 0a10 	vmov	s16, r0
 801f14e:	9304      	str	r3, [sp, #16]
 801f150:	4bbc      	ldr	r3, [pc, #752]	; (801f444 <__gethex+0x304>)
 801f152:	681b      	ldr	r3, [r3, #0]
 801f154:	9301      	str	r3, [sp, #4]
 801f156:	4618      	mov	r0, r3
 801f158:	468b      	mov	fp, r1
 801f15a:	4690      	mov	r8, r2
 801f15c:	f7e1 f852 	bl	8000204 <strlen>
 801f160:	9b01      	ldr	r3, [sp, #4]
 801f162:	f8db 2000 	ldr.w	r2, [fp]
 801f166:	4403      	add	r3, r0
 801f168:	4682      	mov	sl, r0
 801f16a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801f16e:	9305      	str	r3, [sp, #20]
 801f170:	1c93      	adds	r3, r2, #2
 801f172:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801f176:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801f17a:	32fe      	adds	r2, #254	; 0xfe
 801f17c:	18d1      	adds	r1, r2, r3
 801f17e:	461f      	mov	r7, r3
 801f180:	f813 0b01 	ldrb.w	r0, [r3], #1
 801f184:	9100      	str	r1, [sp, #0]
 801f186:	2830      	cmp	r0, #48	; 0x30
 801f188:	d0f8      	beq.n	801f17c <__gethex+0x3c>
 801f18a:	f7ff ffc3 	bl	801f114 <__hexdig_fun>
 801f18e:	4604      	mov	r4, r0
 801f190:	2800      	cmp	r0, #0
 801f192:	d13a      	bne.n	801f20a <__gethex+0xca>
 801f194:	9901      	ldr	r1, [sp, #4]
 801f196:	4652      	mov	r2, sl
 801f198:	4638      	mov	r0, r7
 801f19a:	f7fd fd42 	bl	801cc22 <strncmp>
 801f19e:	4605      	mov	r5, r0
 801f1a0:	2800      	cmp	r0, #0
 801f1a2:	d168      	bne.n	801f276 <__gethex+0x136>
 801f1a4:	f817 000a 	ldrb.w	r0, [r7, sl]
 801f1a8:	eb07 060a 	add.w	r6, r7, sl
 801f1ac:	f7ff ffb2 	bl	801f114 <__hexdig_fun>
 801f1b0:	2800      	cmp	r0, #0
 801f1b2:	d062      	beq.n	801f27a <__gethex+0x13a>
 801f1b4:	4633      	mov	r3, r6
 801f1b6:	7818      	ldrb	r0, [r3, #0]
 801f1b8:	2830      	cmp	r0, #48	; 0x30
 801f1ba:	461f      	mov	r7, r3
 801f1bc:	f103 0301 	add.w	r3, r3, #1
 801f1c0:	d0f9      	beq.n	801f1b6 <__gethex+0x76>
 801f1c2:	f7ff ffa7 	bl	801f114 <__hexdig_fun>
 801f1c6:	2301      	movs	r3, #1
 801f1c8:	fab0 f480 	clz	r4, r0
 801f1cc:	0964      	lsrs	r4, r4, #5
 801f1ce:	4635      	mov	r5, r6
 801f1d0:	9300      	str	r3, [sp, #0]
 801f1d2:	463a      	mov	r2, r7
 801f1d4:	4616      	mov	r6, r2
 801f1d6:	3201      	adds	r2, #1
 801f1d8:	7830      	ldrb	r0, [r6, #0]
 801f1da:	f7ff ff9b 	bl	801f114 <__hexdig_fun>
 801f1de:	2800      	cmp	r0, #0
 801f1e0:	d1f8      	bne.n	801f1d4 <__gethex+0x94>
 801f1e2:	9901      	ldr	r1, [sp, #4]
 801f1e4:	4652      	mov	r2, sl
 801f1e6:	4630      	mov	r0, r6
 801f1e8:	f7fd fd1b 	bl	801cc22 <strncmp>
 801f1ec:	b980      	cbnz	r0, 801f210 <__gethex+0xd0>
 801f1ee:	b94d      	cbnz	r5, 801f204 <__gethex+0xc4>
 801f1f0:	eb06 050a 	add.w	r5, r6, sl
 801f1f4:	462a      	mov	r2, r5
 801f1f6:	4616      	mov	r6, r2
 801f1f8:	3201      	adds	r2, #1
 801f1fa:	7830      	ldrb	r0, [r6, #0]
 801f1fc:	f7ff ff8a 	bl	801f114 <__hexdig_fun>
 801f200:	2800      	cmp	r0, #0
 801f202:	d1f8      	bne.n	801f1f6 <__gethex+0xb6>
 801f204:	1bad      	subs	r5, r5, r6
 801f206:	00ad      	lsls	r5, r5, #2
 801f208:	e004      	b.n	801f214 <__gethex+0xd4>
 801f20a:	2400      	movs	r4, #0
 801f20c:	4625      	mov	r5, r4
 801f20e:	e7e0      	b.n	801f1d2 <__gethex+0x92>
 801f210:	2d00      	cmp	r5, #0
 801f212:	d1f7      	bne.n	801f204 <__gethex+0xc4>
 801f214:	7833      	ldrb	r3, [r6, #0]
 801f216:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801f21a:	2b50      	cmp	r3, #80	; 0x50
 801f21c:	d13b      	bne.n	801f296 <__gethex+0x156>
 801f21e:	7873      	ldrb	r3, [r6, #1]
 801f220:	2b2b      	cmp	r3, #43	; 0x2b
 801f222:	d02c      	beq.n	801f27e <__gethex+0x13e>
 801f224:	2b2d      	cmp	r3, #45	; 0x2d
 801f226:	d02e      	beq.n	801f286 <__gethex+0x146>
 801f228:	1c71      	adds	r1, r6, #1
 801f22a:	f04f 0900 	mov.w	r9, #0
 801f22e:	7808      	ldrb	r0, [r1, #0]
 801f230:	f7ff ff70 	bl	801f114 <__hexdig_fun>
 801f234:	1e43      	subs	r3, r0, #1
 801f236:	b2db      	uxtb	r3, r3
 801f238:	2b18      	cmp	r3, #24
 801f23a:	d82c      	bhi.n	801f296 <__gethex+0x156>
 801f23c:	f1a0 0210 	sub.w	r2, r0, #16
 801f240:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801f244:	f7ff ff66 	bl	801f114 <__hexdig_fun>
 801f248:	1e43      	subs	r3, r0, #1
 801f24a:	b2db      	uxtb	r3, r3
 801f24c:	2b18      	cmp	r3, #24
 801f24e:	d91d      	bls.n	801f28c <__gethex+0x14c>
 801f250:	f1b9 0f00 	cmp.w	r9, #0
 801f254:	d000      	beq.n	801f258 <__gethex+0x118>
 801f256:	4252      	negs	r2, r2
 801f258:	4415      	add	r5, r2
 801f25a:	f8cb 1000 	str.w	r1, [fp]
 801f25e:	b1e4      	cbz	r4, 801f29a <__gethex+0x15a>
 801f260:	9b00      	ldr	r3, [sp, #0]
 801f262:	2b00      	cmp	r3, #0
 801f264:	bf14      	ite	ne
 801f266:	2700      	movne	r7, #0
 801f268:	2706      	moveq	r7, #6
 801f26a:	4638      	mov	r0, r7
 801f26c:	b009      	add	sp, #36	; 0x24
 801f26e:	ecbd 8b02 	vpop	{d8}
 801f272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f276:	463e      	mov	r6, r7
 801f278:	4625      	mov	r5, r4
 801f27a:	2401      	movs	r4, #1
 801f27c:	e7ca      	b.n	801f214 <__gethex+0xd4>
 801f27e:	f04f 0900 	mov.w	r9, #0
 801f282:	1cb1      	adds	r1, r6, #2
 801f284:	e7d3      	b.n	801f22e <__gethex+0xee>
 801f286:	f04f 0901 	mov.w	r9, #1
 801f28a:	e7fa      	b.n	801f282 <__gethex+0x142>
 801f28c:	230a      	movs	r3, #10
 801f28e:	fb03 0202 	mla	r2, r3, r2, r0
 801f292:	3a10      	subs	r2, #16
 801f294:	e7d4      	b.n	801f240 <__gethex+0x100>
 801f296:	4631      	mov	r1, r6
 801f298:	e7df      	b.n	801f25a <__gethex+0x11a>
 801f29a:	1bf3      	subs	r3, r6, r7
 801f29c:	3b01      	subs	r3, #1
 801f29e:	4621      	mov	r1, r4
 801f2a0:	2b07      	cmp	r3, #7
 801f2a2:	dc0b      	bgt.n	801f2bc <__gethex+0x17c>
 801f2a4:	ee18 0a10 	vmov	r0, s16
 801f2a8:	f000 fbe0 	bl	801fa6c <_Balloc>
 801f2ac:	4604      	mov	r4, r0
 801f2ae:	b940      	cbnz	r0, 801f2c2 <__gethex+0x182>
 801f2b0:	4b65      	ldr	r3, [pc, #404]	; (801f448 <__gethex+0x308>)
 801f2b2:	4602      	mov	r2, r0
 801f2b4:	21de      	movs	r1, #222	; 0xde
 801f2b6:	4865      	ldr	r0, [pc, #404]	; (801f44c <__gethex+0x30c>)
 801f2b8:	f7fe ff4c 	bl	801e154 <__assert_func>
 801f2bc:	3101      	adds	r1, #1
 801f2be:	105b      	asrs	r3, r3, #1
 801f2c0:	e7ee      	b.n	801f2a0 <__gethex+0x160>
 801f2c2:	f100 0914 	add.w	r9, r0, #20
 801f2c6:	f04f 0b00 	mov.w	fp, #0
 801f2ca:	f1ca 0301 	rsb	r3, sl, #1
 801f2ce:	f8cd 9008 	str.w	r9, [sp, #8]
 801f2d2:	f8cd b000 	str.w	fp, [sp]
 801f2d6:	9306      	str	r3, [sp, #24]
 801f2d8:	42b7      	cmp	r7, r6
 801f2da:	d340      	bcc.n	801f35e <__gethex+0x21e>
 801f2dc:	9802      	ldr	r0, [sp, #8]
 801f2de:	9b00      	ldr	r3, [sp, #0]
 801f2e0:	f840 3b04 	str.w	r3, [r0], #4
 801f2e4:	eba0 0009 	sub.w	r0, r0, r9
 801f2e8:	1080      	asrs	r0, r0, #2
 801f2ea:	0146      	lsls	r6, r0, #5
 801f2ec:	6120      	str	r0, [r4, #16]
 801f2ee:	4618      	mov	r0, r3
 801f2f0:	f000 fcb2 	bl	801fc58 <__hi0bits>
 801f2f4:	1a30      	subs	r0, r6, r0
 801f2f6:	f8d8 6000 	ldr.w	r6, [r8]
 801f2fa:	42b0      	cmp	r0, r6
 801f2fc:	dd63      	ble.n	801f3c6 <__gethex+0x286>
 801f2fe:	1b87      	subs	r7, r0, r6
 801f300:	4639      	mov	r1, r7
 801f302:	4620      	mov	r0, r4
 801f304:	f001 f84c 	bl	80203a0 <__any_on>
 801f308:	4682      	mov	sl, r0
 801f30a:	b1a8      	cbz	r0, 801f338 <__gethex+0x1f8>
 801f30c:	1e7b      	subs	r3, r7, #1
 801f30e:	1159      	asrs	r1, r3, #5
 801f310:	f003 021f 	and.w	r2, r3, #31
 801f314:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801f318:	f04f 0a01 	mov.w	sl, #1
 801f31c:	fa0a f202 	lsl.w	r2, sl, r2
 801f320:	420a      	tst	r2, r1
 801f322:	d009      	beq.n	801f338 <__gethex+0x1f8>
 801f324:	4553      	cmp	r3, sl
 801f326:	dd05      	ble.n	801f334 <__gethex+0x1f4>
 801f328:	1eb9      	subs	r1, r7, #2
 801f32a:	4620      	mov	r0, r4
 801f32c:	f001 f838 	bl	80203a0 <__any_on>
 801f330:	2800      	cmp	r0, #0
 801f332:	d145      	bne.n	801f3c0 <__gethex+0x280>
 801f334:	f04f 0a02 	mov.w	sl, #2
 801f338:	4639      	mov	r1, r7
 801f33a:	4620      	mov	r0, r4
 801f33c:	f7ff fe98 	bl	801f070 <rshift>
 801f340:	443d      	add	r5, r7
 801f342:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801f346:	42ab      	cmp	r3, r5
 801f348:	da4c      	bge.n	801f3e4 <__gethex+0x2a4>
 801f34a:	ee18 0a10 	vmov	r0, s16
 801f34e:	4621      	mov	r1, r4
 801f350:	f000 fbcc 	bl	801faec <_Bfree>
 801f354:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f356:	2300      	movs	r3, #0
 801f358:	6013      	str	r3, [r2, #0]
 801f35a:	27a3      	movs	r7, #163	; 0xa3
 801f35c:	e785      	b.n	801f26a <__gethex+0x12a>
 801f35e:	1e73      	subs	r3, r6, #1
 801f360:	9a05      	ldr	r2, [sp, #20]
 801f362:	9303      	str	r3, [sp, #12]
 801f364:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801f368:	4293      	cmp	r3, r2
 801f36a:	d019      	beq.n	801f3a0 <__gethex+0x260>
 801f36c:	f1bb 0f20 	cmp.w	fp, #32
 801f370:	d107      	bne.n	801f382 <__gethex+0x242>
 801f372:	9b02      	ldr	r3, [sp, #8]
 801f374:	9a00      	ldr	r2, [sp, #0]
 801f376:	f843 2b04 	str.w	r2, [r3], #4
 801f37a:	9302      	str	r3, [sp, #8]
 801f37c:	2300      	movs	r3, #0
 801f37e:	9300      	str	r3, [sp, #0]
 801f380:	469b      	mov	fp, r3
 801f382:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801f386:	f7ff fec5 	bl	801f114 <__hexdig_fun>
 801f38a:	9b00      	ldr	r3, [sp, #0]
 801f38c:	f000 000f 	and.w	r0, r0, #15
 801f390:	fa00 f00b 	lsl.w	r0, r0, fp
 801f394:	4303      	orrs	r3, r0
 801f396:	9300      	str	r3, [sp, #0]
 801f398:	f10b 0b04 	add.w	fp, fp, #4
 801f39c:	9b03      	ldr	r3, [sp, #12]
 801f39e:	e00d      	b.n	801f3bc <__gethex+0x27c>
 801f3a0:	9b03      	ldr	r3, [sp, #12]
 801f3a2:	9a06      	ldr	r2, [sp, #24]
 801f3a4:	4413      	add	r3, r2
 801f3a6:	42bb      	cmp	r3, r7
 801f3a8:	d3e0      	bcc.n	801f36c <__gethex+0x22c>
 801f3aa:	4618      	mov	r0, r3
 801f3ac:	9901      	ldr	r1, [sp, #4]
 801f3ae:	9307      	str	r3, [sp, #28]
 801f3b0:	4652      	mov	r2, sl
 801f3b2:	f7fd fc36 	bl	801cc22 <strncmp>
 801f3b6:	9b07      	ldr	r3, [sp, #28]
 801f3b8:	2800      	cmp	r0, #0
 801f3ba:	d1d7      	bne.n	801f36c <__gethex+0x22c>
 801f3bc:	461e      	mov	r6, r3
 801f3be:	e78b      	b.n	801f2d8 <__gethex+0x198>
 801f3c0:	f04f 0a03 	mov.w	sl, #3
 801f3c4:	e7b8      	b.n	801f338 <__gethex+0x1f8>
 801f3c6:	da0a      	bge.n	801f3de <__gethex+0x29e>
 801f3c8:	1a37      	subs	r7, r6, r0
 801f3ca:	4621      	mov	r1, r4
 801f3cc:	ee18 0a10 	vmov	r0, s16
 801f3d0:	463a      	mov	r2, r7
 801f3d2:	f000 fda7 	bl	801ff24 <__lshift>
 801f3d6:	1bed      	subs	r5, r5, r7
 801f3d8:	4604      	mov	r4, r0
 801f3da:	f100 0914 	add.w	r9, r0, #20
 801f3de:	f04f 0a00 	mov.w	sl, #0
 801f3e2:	e7ae      	b.n	801f342 <__gethex+0x202>
 801f3e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801f3e8:	42a8      	cmp	r0, r5
 801f3ea:	dd72      	ble.n	801f4d2 <__gethex+0x392>
 801f3ec:	1b45      	subs	r5, r0, r5
 801f3ee:	42ae      	cmp	r6, r5
 801f3f0:	dc36      	bgt.n	801f460 <__gethex+0x320>
 801f3f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801f3f6:	2b02      	cmp	r3, #2
 801f3f8:	d02a      	beq.n	801f450 <__gethex+0x310>
 801f3fa:	2b03      	cmp	r3, #3
 801f3fc:	d02c      	beq.n	801f458 <__gethex+0x318>
 801f3fe:	2b01      	cmp	r3, #1
 801f400:	d115      	bne.n	801f42e <__gethex+0x2ee>
 801f402:	42ae      	cmp	r6, r5
 801f404:	d113      	bne.n	801f42e <__gethex+0x2ee>
 801f406:	2e01      	cmp	r6, #1
 801f408:	d10b      	bne.n	801f422 <__gethex+0x2e2>
 801f40a:	9a04      	ldr	r2, [sp, #16]
 801f40c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801f410:	6013      	str	r3, [r2, #0]
 801f412:	2301      	movs	r3, #1
 801f414:	6123      	str	r3, [r4, #16]
 801f416:	f8c9 3000 	str.w	r3, [r9]
 801f41a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f41c:	2762      	movs	r7, #98	; 0x62
 801f41e:	601c      	str	r4, [r3, #0]
 801f420:	e723      	b.n	801f26a <__gethex+0x12a>
 801f422:	1e71      	subs	r1, r6, #1
 801f424:	4620      	mov	r0, r4
 801f426:	f000 ffbb 	bl	80203a0 <__any_on>
 801f42a:	2800      	cmp	r0, #0
 801f42c:	d1ed      	bne.n	801f40a <__gethex+0x2ca>
 801f42e:	ee18 0a10 	vmov	r0, s16
 801f432:	4621      	mov	r1, r4
 801f434:	f000 fb5a 	bl	801faec <_Bfree>
 801f438:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f43a:	2300      	movs	r3, #0
 801f43c:	6013      	str	r3, [r2, #0]
 801f43e:	2750      	movs	r7, #80	; 0x50
 801f440:	e713      	b.n	801f26a <__gethex+0x12a>
 801f442:	bf00      	nop
 801f444:	08023450 	.word	0x08023450
 801f448:	080233d4 	.word	0x080233d4
 801f44c:	080233e5 	.word	0x080233e5
 801f450:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f452:	2b00      	cmp	r3, #0
 801f454:	d1eb      	bne.n	801f42e <__gethex+0x2ee>
 801f456:	e7d8      	b.n	801f40a <__gethex+0x2ca>
 801f458:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f45a:	2b00      	cmp	r3, #0
 801f45c:	d1d5      	bne.n	801f40a <__gethex+0x2ca>
 801f45e:	e7e6      	b.n	801f42e <__gethex+0x2ee>
 801f460:	1e6f      	subs	r7, r5, #1
 801f462:	f1ba 0f00 	cmp.w	sl, #0
 801f466:	d131      	bne.n	801f4cc <__gethex+0x38c>
 801f468:	b127      	cbz	r7, 801f474 <__gethex+0x334>
 801f46a:	4639      	mov	r1, r7
 801f46c:	4620      	mov	r0, r4
 801f46e:	f000 ff97 	bl	80203a0 <__any_on>
 801f472:	4682      	mov	sl, r0
 801f474:	117b      	asrs	r3, r7, #5
 801f476:	2101      	movs	r1, #1
 801f478:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801f47c:	f007 071f 	and.w	r7, r7, #31
 801f480:	fa01 f707 	lsl.w	r7, r1, r7
 801f484:	421f      	tst	r7, r3
 801f486:	4629      	mov	r1, r5
 801f488:	4620      	mov	r0, r4
 801f48a:	bf18      	it	ne
 801f48c:	f04a 0a02 	orrne.w	sl, sl, #2
 801f490:	1b76      	subs	r6, r6, r5
 801f492:	f7ff fded 	bl	801f070 <rshift>
 801f496:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801f49a:	2702      	movs	r7, #2
 801f49c:	f1ba 0f00 	cmp.w	sl, #0
 801f4a0:	d048      	beq.n	801f534 <__gethex+0x3f4>
 801f4a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801f4a6:	2b02      	cmp	r3, #2
 801f4a8:	d015      	beq.n	801f4d6 <__gethex+0x396>
 801f4aa:	2b03      	cmp	r3, #3
 801f4ac:	d017      	beq.n	801f4de <__gethex+0x39e>
 801f4ae:	2b01      	cmp	r3, #1
 801f4b0:	d109      	bne.n	801f4c6 <__gethex+0x386>
 801f4b2:	f01a 0f02 	tst.w	sl, #2
 801f4b6:	d006      	beq.n	801f4c6 <__gethex+0x386>
 801f4b8:	f8d9 0000 	ldr.w	r0, [r9]
 801f4bc:	ea4a 0a00 	orr.w	sl, sl, r0
 801f4c0:	f01a 0f01 	tst.w	sl, #1
 801f4c4:	d10e      	bne.n	801f4e4 <__gethex+0x3a4>
 801f4c6:	f047 0710 	orr.w	r7, r7, #16
 801f4ca:	e033      	b.n	801f534 <__gethex+0x3f4>
 801f4cc:	f04f 0a01 	mov.w	sl, #1
 801f4d0:	e7d0      	b.n	801f474 <__gethex+0x334>
 801f4d2:	2701      	movs	r7, #1
 801f4d4:	e7e2      	b.n	801f49c <__gethex+0x35c>
 801f4d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f4d8:	f1c3 0301 	rsb	r3, r3, #1
 801f4dc:	9315      	str	r3, [sp, #84]	; 0x54
 801f4de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f4e0:	2b00      	cmp	r3, #0
 801f4e2:	d0f0      	beq.n	801f4c6 <__gethex+0x386>
 801f4e4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801f4e8:	f104 0314 	add.w	r3, r4, #20
 801f4ec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801f4f0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801f4f4:	f04f 0c00 	mov.w	ip, #0
 801f4f8:	4618      	mov	r0, r3
 801f4fa:	f853 2b04 	ldr.w	r2, [r3], #4
 801f4fe:	f1b2 3fff 	cmp.w	r2, #4294967295
 801f502:	d01c      	beq.n	801f53e <__gethex+0x3fe>
 801f504:	3201      	adds	r2, #1
 801f506:	6002      	str	r2, [r0, #0]
 801f508:	2f02      	cmp	r7, #2
 801f50a:	f104 0314 	add.w	r3, r4, #20
 801f50e:	d13f      	bne.n	801f590 <__gethex+0x450>
 801f510:	f8d8 2000 	ldr.w	r2, [r8]
 801f514:	3a01      	subs	r2, #1
 801f516:	42b2      	cmp	r2, r6
 801f518:	d10a      	bne.n	801f530 <__gethex+0x3f0>
 801f51a:	1171      	asrs	r1, r6, #5
 801f51c:	2201      	movs	r2, #1
 801f51e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801f522:	f006 061f 	and.w	r6, r6, #31
 801f526:	fa02 f606 	lsl.w	r6, r2, r6
 801f52a:	421e      	tst	r6, r3
 801f52c:	bf18      	it	ne
 801f52e:	4617      	movne	r7, r2
 801f530:	f047 0720 	orr.w	r7, r7, #32
 801f534:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f536:	601c      	str	r4, [r3, #0]
 801f538:	9b04      	ldr	r3, [sp, #16]
 801f53a:	601d      	str	r5, [r3, #0]
 801f53c:	e695      	b.n	801f26a <__gethex+0x12a>
 801f53e:	4299      	cmp	r1, r3
 801f540:	f843 cc04 	str.w	ip, [r3, #-4]
 801f544:	d8d8      	bhi.n	801f4f8 <__gethex+0x3b8>
 801f546:	68a3      	ldr	r3, [r4, #8]
 801f548:	459b      	cmp	fp, r3
 801f54a:	db19      	blt.n	801f580 <__gethex+0x440>
 801f54c:	6861      	ldr	r1, [r4, #4]
 801f54e:	ee18 0a10 	vmov	r0, s16
 801f552:	3101      	adds	r1, #1
 801f554:	f000 fa8a 	bl	801fa6c <_Balloc>
 801f558:	4681      	mov	r9, r0
 801f55a:	b918      	cbnz	r0, 801f564 <__gethex+0x424>
 801f55c:	4b1a      	ldr	r3, [pc, #104]	; (801f5c8 <__gethex+0x488>)
 801f55e:	4602      	mov	r2, r0
 801f560:	2184      	movs	r1, #132	; 0x84
 801f562:	e6a8      	b.n	801f2b6 <__gethex+0x176>
 801f564:	6922      	ldr	r2, [r4, #16]
 801f566:	3202      	adds	r2, #2
 801f568:	f104 010c 	add.w	r1, r4, #12
 801f56c:	0092      	lsls	r2, r2, #2
 801f56e:	300c      	adds	r0, #12
 801f570:	f7fb ff9a 	bl	801b4a8 <memcpy>
 801f574:	4621      	mov	r1, r4
 801f576:	ee18 0a10 	vmov	r0, s16
 801f57a:	f000 fab7 	bl	801faec <_Bfree>
 801f57e:	464c      	mov	r4, r9
 801f580:	6923      	ldr	r3, [r4, #16]
 801f582:	1c5a      	adds	r2, r3, #1
 801f584:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801f588:	6122      	str	r2, [r4, #16]
 801f58a:	2201      	movs	r2, #1
 801f58c:	615a      	str	r2, [r3, #20]
 801f58e:	e7bb      	b.n	801f508 <__gethex+0x3c8>
 801f590:	6922      	ldr	r2, [r4, #16]
 801f592:	455a      	cmp	r2, fp
 801f594:	dd0b      	ble.n	801f5ae <__gethex+0x46e>
 801f596:	2101      	movs	r1, #1
 801f598:	4620      	mov	r0, r4
 801f59a:	f7ff fd69 	bl	801f070 <rshift>
 801f59e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801f5a2:	3501      	adds	r5, #1
 801f5a4:	42ab      	cmp	r3, r5
 801f5a6:	f6ff aed0 	blt.w	801f34a <__gethex+0x20a>
 801f5aa:	2701      	movs	r7, #1
 801f5ac:	e7c0      	b.n	801f530 <__gethex+0x3f0>
 801f5ae:	f016 061f 	ands.w	r6, r6, #31
 801f5b2:	d0fa      	beq.n	801f5aa <__gethex+0x46a>
 801f5b4:	449a      	add	sl, r3
 801f5b6:	f1c6 0620 	rsb	r6, r6, #32
 801f5ba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801f5be:	f000 fb4b 	bl	801fc58 <__hi0bits>
 801f5c2:	42b0      	cmp	r0, r6
 801f5c4:	dbe7      	blt.n	801f596 <__gethex+0x456>
 801f5c6:	e7f0      	b.n	801f5aa <__gethex+0x46a>
 801f5c8:	080233d4 	.word	0x080233d4

0801f5cc <L_shift>:
 801f5cc:	f1c2 0208 	rsb	r2, r2, #8
 801f5d0:	0092      	lsls	r2, r2, #2
 801f5d2:	b570      	push	{r4, r5, r6, lr}
 801f5d4:	f1c2 0620 	rsb	r6, r2, #32
 801f5d8:	6843      	ldr	r3, [r0, #4]
 801f5da:	6804      	ldr	r4, [r0, #0]
 801f5dc:	fa03 f506 	lsl.w	r5, r3, r6
 801f5e0:	432c      	orrs	r4, r5
 801f5e2:	40d3      	lsrs	r3, r2
 801f5e4:	6004      	str	r4, [r0, #0]
 801f5e6:	f840 3f04 	str.w	r3, [r0, #4]!
 801f5ea:	4288      	cmp	r0, r1
 801f5ec:	d3f4      	bcc.n	801f5d8 <L_shift+0xc>
 801f5ee:	bd70      	pop	{r4, r5, r6, pc}

0801f5f0 <__match>:
 801f5f0:	b530      	push	{r4, r5, lr}
 801f5f2:	6803      	ldr	r3, [r0, #0]
 801f5f4:	3301      	adds	r3, #1
 801f5f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f5fa:	b914      	cbnz	r4, 801f602 <__match+0x12>
 801f5fc:	6003      	str	r3, [r0, #0]
 801f5fe:	2001      	movs	r0, #1
 801f600:	bd30      	pop	{r4, r5, pc}
 801f602:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f606:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801f60a:	2d19      	cmp	r5, #25
 801f60c:	bf98      	it	ls
 801f60e:	3220      	addls	r2, #32
 801f610:	42a2      	cmp	r2, r4
 801f612:	d0f0      	beq.n	801f5f6 <__match+0x6>
 801f614:	2000      	movs	r0, #0
 801f616:	e7f3      	b.n	801f600 <__match+0x10>

0801f618 <__hexnan>:
 801f618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f61c:	680b      	ldr	r3, [r1, #0]
 801f61e:	6801      	ldr	r1, [r0, #0]
 801f620:	115e      	asrs	r6, r3, #5
 801f622:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801f626:	f013 031f 	ands.w	r3, r3, #31
 801f62a:	b087      	sub	sp, #28
 801f62c:	bf18      	it	ne
 801f62e:	3604      	addne	r6, #4
 801f630:	2500      	movs	r5, #0
 801f632:	1f37      	subs	r7, r6, #4
 801f634:	4682      	mov	sl, r0
 801f636:	4690      	mov	r8, r2
 801f638:	9301      	str	r3, [sp, #4]
 801f63a:	f846 5c04 	str.w	r5, [r6, #-4]
 801f63e:	46b9      	mov	r9, r7
 801f640:	463c      	mov	r4, r7
 801f642:	9502      	str	r5, [sp, #8]
 801f644:	46ab      	mov	fp, r5
 801f646:	784a      	ldrb	r2, [r1, #1]
 801f648:	1c4b      	adds	r3, r1, #1
 801f64a:	9303      	str	r3, [sp, #12]
 801f64c:	b342      	cbz	r2, 801f6a0 <__hexnan+0x88>
 801f64e:	4610      	mov	r0, r2
 801f650:	9105      	str	r1, [sp, #20]
 801f652:	9204      	str	r2, [sp, #16]
 801f654:	f7ff fd5e 	bl	801f114 <__hexdig_fun>
 801f658:	2800      	cmp	r0, #0
 801f65a:	d14f      	bne.n	801f6fc <__hexnan+0xe4>
 801f65c:	9a04      	ldr	r2, [sp, #16]
 801f65e:	9905      	ldr	r1, [sp, #20]
 801f660:	2a20      	cmp	r2, #32
 801f662:	d818      	bhi.n	801f696 <__hexnan+0x7e>
 801f664:	9b02      	ldr	r3, [sp, #8]
 801f666:	459b      	cmp	fp, r3
 801f668:	dd13      	ble.n	801f692 <__hexnan+0x7a>
 801f66a:	454c      	cmp	r4, r9
 801f66c:	d206      	bcs.n	801f67c <__hexnan+0x64>
 801f66e:	2d07      	cmp	r5, #7
 801f670:	dc04      	bgt.n	801f67c <__hexnan+0x64>
 801f672:	462a      	mov	r2, r5
 801f674:	4649      	mov	r1, r9
 801f676:	4620      	mov	r0, r4
 801f678:	f7ff ffa8 	bl	801f5cc <L_shift>
 801f67c:	4544      	cmp	r4, r8
 801f67e:	d950      	bls.n	801f722 <__hexnan+0x10a>
 801f680:	2300      	movs	r3, #0
 801f682:	f1a4 0904 	sub.w	r9, r4, #4
 801f686:	f844 3c04 	str.w	r3, [r4, #-4]
 801f68a:	f8cd b008 	str.w	fp, [sp, #8]
 801f68e:	464c      	mov	r4, r9
 801f690:	461d      	mov	r5, r3
 801f692:	9903      	ldr	r1, [sp, #12]
 801f694:	e7d7      	b.n	801f646 <__hexnan+0x2e>
 801f696:	2a29      	cmp	r2, #41	; 0x29
 801f698:	d156      	bne.n	801f748 <__hexnan+0x130>
 801f69a:	3102      	adds	r1, #2
 801f69c:	f8ca 1000 	str.w	r1, [sl]
 801f6a0:	f1bb 0f00 	cmp.w	fp, #0
 801f6a4:	d050      	beq.n	801f748 <__hexnan+0x130>
 801f6a6:	454c      	cmp	r4, r9
 801f6a8:	d206      	bcs.n	801f6b8 <__hexnan+0xa0>
 801f6aa:	2d07      	cmp	r5, #7
 801f6ac:	dc04      	bgt.n	801f6b8 <__hexnan+0xa0>
 801f6ae:	462a      	mov	r2, r5
 801f6b0:	4649      	mov	r1, r9
 801f6b2:	4620      	mov	r0, r4
 801f6b4:	f7ff ff8a 	bl	801f5cc <L_shift>
 801f6b8:	4544      	cmp	r4, r8
 801f6ba:	d934      	bls.n	801f726 <__hexnan+0x10e>
 801f6bc:	f1a8 0204 	sub.w	r2, r8, #4
 801f6c0:	4623      	mov	r3, r4
 801f6c2:	f853 1b04 	ldr.w	r1, [r3], #4
 801f6c6:	f842 1f04 	str.w	r1, [r2, #4]!
 801f6ca:	429f      	cmp	r7, r3
 801f6cc:	d2f9      	bcs.n	801f6c2 <__hexnan+0xaa>
 801f6ce:	1b3b      	subs	r3, r7, r4
 801f6d0:	f023 0303 	bic.w	r3, r3, #3
 801f6d4:	3304      	adds	r3, #4
 801f6d6:	3401      	adds	r4, #1
 801f6d8:	3e03      	subs	r6, #3
 801f6da:	42b4      	cmp	r4, r6
 801f6dc:	bf88      	it	hi
 801f6de:	2304      	movhi	r3, #4
 801f6e0:	4443      	add	r3, r8
 801f6e2:	2200      	movs	r2, #0
 801f6e4:	f843 2b04 	str.w	r2, [r3], #4
 801f6e8:	429f      	cmp	r7, r3
 801f6ea:	d2fb      	bcs.n	801f6e4 <__hexnan+0xcc>
 801f6ec:	683b      	ldr	r3, [r7, #0]
 801f6ee:	b91b      	cbnz	r3, 801f6f8 <__hexnan+0xe0>
 801f6f0:	4547      	cmp	r7, r8
 801f6f2:	d127      	bne.n	801f744 <__hexnan+0x12c>
 801f6f4:	2301      	movs	r3, #1
 801f6f6:	603b      	str	r3, [r7, #0]
 801f6f8:	2005      	movs	r0, #5
 801f6fa:	e026      	b.n	801f74a <__hexnan+0x132>
 801f6fc:	3501      	adds	r5, #1
 801f6fe:	2d08      	cmp	r5, #8
 801f700:	f10b 0b01 	add.w	fp, fp, #1
 801f704:	dd06      	ble.n	801f714 <__hexnan+0xfc>
 801f706:	4544      	cmp	r4, r8
 801f708:	d9c3      	bls.n	801f692 <__hexnan+0x7a>
 801f70a:	2300      	movs	r3, #0
 801f70c:	f844 3c04 	str.w	r3, [r4, #-4]
 801f710:	2501      	movs	r5, #1
 801f712:	3c04      	subs	r4, #4
 801f714:	6822      	ldr	r2, [r4, #0]
 801f716:	f000 000f 	and.w	r0, r0, #15
 801f71a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801f71e:	6022      	str	r2, [r4, #0]
 801f720:	e7b7      	b.n	801f692 <__hexnan+0x7a>
 801f722:	2508      	movs	r5, #8
 801f724:	e7b5      	b.n	801f692 <__hexnan+0x7a>
 801f726:	9b01      	ldr	r3, [sp, #4]
 801f728:	2b00      	cmp	r3, #0
 801f72a:	d0df      	beq.n	801f6ec <__hexnan+0xd4>
 801f72c:	f04f 32ff 	mov.w	r2, #4294967295
 801f730:	f1c3 0320 	rsb	r3, r3, #32
 801f734:	fa22 f303 	lsr.w	r3, r2, r3
 801f738:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801f73c:	401a      	ands	r2, r3
 801f73e:	f846 2c04 	str.w	r2, [r6, #-4]
 801f742:	e7d3      	b.n	801f6ec <__hexnan+0xd4>
 801f744:	3f04      	subs	r7, #4
 801f746:	e7d1      	b.n	801f6ec <__hexnan+0xd4>
 801f748:	2004      	movs	r0, #4
 801f74a:	b007      	add	sp, #28
 801f74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f750 <_findenv_r>:
 801f750:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f754:	4607      	mov	r7, r0
 801f756:	4689      	mov	r9, r1
 801f758:	4616      	mov	r6, r2
 801f75a:	f001 fcdf 	bl	802111c <__env_lock>
 801f75e:	4b18      	ldr	r3, [pc, #96]	; (801f7c0 <_findenv_r+0x70>)
 801f760:	681c      	ldr	r4, [r3, #0]
 801f762:	469a      	mov	sl, r3
 801f764:	b134      	cbz	r4, 801f774 <_findenv_r+0x24>
 801f766:	464b      	mov	r3, r9
 801f768:	4698      	mov	r8, r3
 801f76a:	f813 1b01 	ldrb.w	r1, [r3], #1
 801f76e:	b139      	cbz	r1, 801f780 <_findenv_r+0x30>
 801f770:	293d      	cmp	r1, #61	; 0x3d
 801f772:	d1f9      	bne.n	801f768 <_findenv_r+0x18>
 801f774:	4638      	mov	r0, r7
 801f776:	f001 fcd7 	bl	8021128 <__env_unlock>
 801f77a:	2000      	movs	r0, #0
 801f77c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f780:	eba8 0809 	sub.w	r8, r8, r9
 801f784:	46a3      	mov	fp, r4
 801f786:	f854 0b04 	ldr.w	r0, [r4], #4
 801f78a:	2800      	cmp	r0, #0
 801f78c:	d0f2      	beq.n	801f774 <_findenv_r+0x24>
 801f78e:	4642      	mov	r2, r8
 801f790:	4649      	mov	r1, r9
 801f792:	f7fd fa46 	bl	801cc22 <strncmp>
 801f796:	2800      	cmp	r0, #0
 801f798:	d1f4      	bne.n	801f784 <_findenv_r+0x34>
 801f79a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801f79e:	eb03 0508 	add.w	r5, r3, r8
 801f7a2:	f813 3008 	ldrb.w	r3, [r3, r8]
 801f7a6:	2b3d      	cmp	r3, #61	; 0x3d
 801f7a8:	d1ec      	bne.n	801f784 <_findenv_r+0x34>
 801f7aa:	f8da 3000 	ldr.w	r3, [sl]
 801f7ae:	ebab 0303 	sub.w	r3, fp, r3
 801f7b2:	109b      	asrs	r3, r3, #2
 801f7b4:	4638      	mov	r0, r7
 801f7b6:	6033      	str	r3, [r6, #0]
 801f7b8:	f001 fcb6 	bl	8021128 <__env_unlock>
 801f7bc:	1c68      	adds	r0, r5, #1
 801f7be:	e7dd      	b.n	801f77c <_findenv_r+0x2c>
 801f7c0:	20000000 	.word	0x20000000

0801f7c4 <_getenv_r>:
 801f7c4:	b507      	push	{r0, r1, r2, lr}
 801f7c6:	aa01      	add	r2, sp, #4
 801f7c8:	f7ff ffc2 	bl	801f750 <_findenv_r>
 801f7cc:	b003      	add	sp, #12
 801f7ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801f7d4 <__gettzinfo>:
 801f7d4:	4800      	ldr	r0, [pc, #0]	; (801f7d8 <__gettzinfo+0x4>)
 801f7d6:	4770      	bx	lr
 801f7d8:	20000268 	.word	0x20000268

0801f7dc <gmtime_r>:
 801f7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f7e0:	e9d0 6700 	ldrd	r6, r7, [r0]
 801f7e4:	460c      	mov	r4, r1
 801f7e6:	4a51      	ldr	r2, [pc, #324]	; (801f92c <gmtime_r+0x150>)
 801f7e8:	2300      	movs	r3, #0
 801f7ea:	4630      	mov	r0, r6
 801f7ec:	4639      	mov	r1, r7
 801f7ee:	f7e1 fa6b 	bl	8000cc8 <__aeabi_ldivmod>
 801f7f2:	4639      	mov	r1, r7
 801f7f4:	4605      	mov	r5, r0
 801f7f6:	4a4d      	ldr	r2, [pc, #308]	; (801f92c <gmtime_r+0x150>)
 801f7f8:	4630      	mov	r0, r6
 801f7fa:	2300      	movs	r3, #0
 801f7fc:	f7e1 fa64 	bl	8000cc8 <__aeabi_ldivmod>
 801f800:	2a00      	cmp	r2, #0
 801f802:	bfbc      	itt	lt
 801f804:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 801f808:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 801f80c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801f810:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 801f814:	fbb2 f3f1 	udiv	r3, r2, r1
 801f818:	fb01 2213 	mls	r2, r1, r3, r2
 801f81c:	f04f 013c 	mov.w	r1, #60	; 0x3c
 801f820:	bfac      	ite	ge
 801f822:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 801f826:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 801f82a:	60a3      	str	r3, [r4, #8]
 801f82c:	fbb2 f3f1 	udiv	r3, r2, r1
 801f830:	fb01 2213 	mls	r2, r1, r3, r2
 801f834:	6063      	str	r3, [r4, #4]
 801f836:	6022      	str	r2, [r4, #0]
 801f838:	1cc3      	adds	r3, r0, #3
 801f83a:	2207      	movs	r2, #7
 801f83c:	fb93 f2f2 	sdiv	r2, r3, r2
 801f840:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801f844:	1a9b      	subs	r3, r3, r2
 801f846:	bf48      	it	mi
 801f848:	3307      	addmi	r3, #7
 801f84a:	2800      	cmp	r0, #0
 801f84c:	61a3      	str	r3, [r4, #24]
 801f84e:	bfb8      	it	lt
 801f850:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 801f854:	4936      	ldr	r1, [pc, #216]	; (801f930 <gmtime_r+0x154>)
 801f856:	bfae      	itee	ge
 801f858:	fb90 f1f1 	sdivge	r1, r0, r1
 801f85c:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 801f860:	fb93 f1f1 	sdivlt	r1, r3, r1
 801f864:	4b33      	ldr	r3, [pc, #204]	; (801f934 <gmtime_r+0x158>)
 801f866:	fb03 0001 	mla	r0, r3, r1, r0
 801f86a:	f648 62ac 	movw	r2, #36524	; 0x8eac
 801f86e:	fbb0 f2f2 	udiv	r2, r0, r2
 801f872:	4402      	add	r2, r0
 801f874:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 801f878:	fbb0 f3fc 	udiv	r3, r0, ip
 801f87c:	1ad2      	subs	r2, r2, r3
 801f87e:	f240 176d 	movw	r7, #365	; 0x16d
 801f882:	4b2d      	ldr	r3, [pc, #180]	; (801f938 <gmtime_r+0x15c>)
 801f884:	fbb0 f3f3 	udiv	r3, r0, r3
 801f888:	2664      	movs	r6, #100	; 0x64
 801f88a:	1ad3      	subs	r3, r2, r3
 801f88c:	fbb3 f5f7 	udiv	r5, r3, r7
 801f890:	fbb3 f3fc 	udiv	r3, r3, ip
 801f894:	fbb5 f2f6 	udiv	r2, r5, r6
 801f898:	1ad3      	subs	r3, r2, r3
 801f89a:	4403      	add	r3, r0
 801f89c:	fb07 3315 	mls	r3, r7, r5, r3
 801f8a0:	2099      	movs	r0, #153	; 0x99
 801f8a2:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 801f8a6:	f10c 0c02 	add.w	ip, ip, #2
 801f8aa:	f103 0e01 	add.w	lr, r3, #1
 801f8ae:	fbbc f7f0 	udiv	r7, ip, r0
 801f8b2:	4378      	muls	r0, r7
 801f8b4:	3002      	adds	r0, #2
 801f8b6:	f04f 0805 	mov.w	r8, #5
 801f8ba:	fbb0 f0f8 	udiv	r0, r0, r8
 801f8be:	ebae 0000 	sub.w	r0, lr, r0
 801f8c2:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 801f8c6:	45f4      	cmp	ip, lr
 801f8c8:	bf94      	ite	ls
 801f8ca:	f04f 0c02 	movls.w	ip, #2
 801f8ce:	f06f 0c09 	mvnhi.w	ip, #9
 801f8d2:	4467      	add	r7, ip
 801f8d4:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 801f8d8:	fb0c 5101 	mla	r1, ip, r1, r5
 801f8dc:	2f01      	cmp	r7, #1
 801f8de:	bf98      	it	ls
 801f8e0:	3101      	addls	r1, #1
 801f8e2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 801f8e6:	d30c      	bcc.n	801f902 <gmtime_r+0x126>
 801f8e8:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 801f8ec:	61e3      	str	r3, [r4, #28]
 801f8ee:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 801f8f2:	2300      	movs	r3, #0
 801f8f4:	60e0      	str	r0, [r4, #12]
 801f8f6:	e9c4 7104 	strd	r7, r1, [r4, #16]
 801f8fa:	6223      	str	r3, [r4, #32]
 801f8fc:	4620      	mov	r0, r4
 801f8fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f902:	f015 0f03 	tst.w	r5, #3
 801f906:	d102      	bne.n	801f90e <gmtime_r+0x132>
 801f908:	fb06 5212 	mls	r2, r6, r2, r5
 801f90c:	b95a      	cbnz	r2, 801f926 <gmtime_r+0x14a>
 801f90e:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801f912:	fbb5 f2f6 	udiv	r2, r5, r6
 801f916:	fb06 5212 	mls	r2, r6, r2, r5
 801f91a:	fab2 f282 	clz	r2, r2
 801f91e:	0952      	lsrs	r2, r2, #5
 801f920:	333b      	adds	r3, #59	; 0x3b
 801f922:	4413      	add	r3, r2
 801f924:	e7e2      	b.n	801f8ec <gmtime_r+0x110>
 801f926:	2201      	movs	r2, #1
 801f928:	e7fa      	b.n	801f920 <gmtime_r+0x144>
 801f92a:	bf00      	nop
 801f92c:	00015180 	.word	0x00015180
 801f930:	00023ab1 	.word	0x00023ab1
 801f934:	fffdc54f 	.word	0xfffdc54f
 801f938:	00023ab0 	.word	0x00023ab0

0801f93c <_localeconv_r>:
 801f93c:	4800      	ldr	r0, [pc, #0]	; (801f940 <_localeconv_r+0x4>)
 801f93e:	4770      	bx	lr
 801f940:	200003b4 	.word	0x200003b4

0801f944 <_lseek_r>:
 801f944:	b538      	push	{r3, r4, r5, lr}
 801f946:	4d07      	ldr	r5, [pc, #28]	; (801f964 <_lseek_r+0x20>)
 801f948:	4604      	mov	r4, r0
 801f94a:	4608      	mov	r0, r1
 801f94c:	4611      	mov	r1, r2
 801f94e:	2200      	movs	r2, #0
 801f950:	602a      	str	r2, [r5, #0]
 801f952:	461a      	mov	r2, r3
 801f954:	f7e3 fda6 	bl	80034a4 <_lseek>
 801f958:	1c43      	adds	r3, r0, #1
 801f95a:	d102      	bne.n	801f962 <_lseek_r+0x1e>
 801f95c:	682b      	ldr	r3, [r5, #0]
 801f95e:	b103      	cbz	r3, 801f962 <_lseek_r+0x1e>
 801f960:	6023      	str	r3, [r4, #0]
 801f962:	bd38      	pop	{r3, r4, r5, pc}
 801f964:	20008fd0 	.word	0x20008fd0

0801f968 <__swhatbuf_r>:
 801f968:	b570      	push	{r4, r5, r6, lr}
 801f96a:	460e      	mov	r6, r1
 801f96c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f970:	2900      	cmp	r1, #0
 801f972:	b096      	sub	sp, #88	; 0x58
 801f974:	4614      	mov	r4, r2
 801f976:	461d      	mov	r5, r3
 801f978:	da07      	bge.n	801f98a <__swhatbuf_r+0x22>
 801f97a:	2300      	movs	r3, #0
 801f97c:	602b      	str	r3, [r5, #0]
 801f97e:	89b3      	ldrh	r3, [r6, #12]
 801f980:	061a      	lsls	r2, r3, #24
 801f982:	d410      	bmi.n	801f9a6 <__swhatbuf_r+0x3e>
 801f984:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f988:	e00e      	b.n	801f9a8 <__swhatbuf_r+0x40>
 801f98a:	466a      	mov	r2, sp
 801f98c:	f001 fbd2 	bl	8021134 <_fstat_r>
 801f990:	2800      	cmp	r0, #0
 801f992:	dbf2      	blt.n	801f97a <__swhatbuf_r+0x12>
 801f994:	9a01      	ldr	r2, [sp, #4]
 801f996:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801f99a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801f99e:	425a      	negs	r2, r3
 801f9a0:	415a      	adcs	r2, r3
 801f9a2:	602a      	str	r2, [r5, #0]
 801f9a4:	e7ee      	b.n	801f984 <__swhatbuf_r+0x1c>
 801f9a6:	2340      	movs	r3, #64	; 0x40
 801f9a8:	2000      	movs	r0, #0
 801f9aa:	6023      	str	r3, [r4, #0]
 801f9ac:	b016      	add	sp, #88	; 0x58
 801f9ae:	bd70      	pop	{r4, r5, r6, pc}

0801f9b0 <__smakebuf_r>:
 801f9b0:	898b      	ldrh	r3, [r1, #12]
 801f9b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f9b4:	079d      	lsls	r5, r3, #30
 801f9b6:	4606      	mov	r6, r0
 801f9b8:	460c      	mov	r4, r1
 801f9ba:	d507      	bpl.n	801f9cc <__smakebuf_r+0x1c>
 801f9bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f9c0:	6023      	str	r3, [r4, #0]
 801f9c2:	6123      	str	r3, [r4, #16]
 801f9c4:	2301      	movs	r3, #1
 801f9c6:	6163      	str	r3, [r4, #20]
 801f9c8:	b002      	add	sp, #8
 801f9ca:	bd70      	pop	{r4, r5, r6, pc}
 801f9cc:	ab01      	add	r3, sp, #4
 801f9ce:	466a      	mov	r2, sp
 801f9d0:	f7ff ffca 	bl	801f968 <__swhatbuf_r>
 801f9d4:	9900      	ldr	r1, [sp, #0]
 801f9d6:	4605      	mov	r5, r0
 801f9d8:	4630      	mov	r0, r6
 801f9da:	f7fc f863 	bl	801baa4 <_malloc_r>
 801f9de:	b948      	cbnz	r0, 801f9f4 <__smakebuf_r+0x44>
 801f9e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f9e4:	059a      	lsls	r2, r3, #22
 801f9e6:	d4ef      	bmi.n	801f9c8 <__smakebuf_r+0x18>
 801f9e8:	f023 0303 	bic.w	r3, r3, #3
 801f9ec:	f043 0302 	orr.w	r3, r3, #2
 801f9f0:	81a3      	strh	r3, [r4, #12]
 801f9f2:	e7e3      	b.n	801f9bc <__smakebuf_r+0xc>
 801f9f4:	4b0d      	ldr	r3, [pc, #52]	; (801fa2c <__smakebuf_r+0x7c>)
 801f9f6:	62b3      	str	r3, [r6, #40]	; 0x28
 801f9f8:	89a3      	ldrh	r3, [r4, #12]
 801f9fa:	6020      	str	r0, [r4, #0]
 801f9fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fa00:	81a3      	strh	r3, [r4, #12]
 801fa02:	9b00      	ldr	r3, [sp, #0]
 801fa04:	6163      	str	r3, [r4, #20]
 801fa06:	9b01      	ldr	r3, [sp, #4]
 801fa08:	6120      	str	r0, [r4, #16]
 801fa0a:	b15b      	cbz	r3, 801fa24 <__smakebuf_r+0x74>
 801fa0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fa10:	4630      	mov	r0, r6
 801fa12:	f001 fba1 	bl	8021158 <_isatty_r>
 801fa16:	b128      	cbz	r0, 801fa24 <__smakebuf_r+0x74>
 801fa18:	89a3      	ldrh	r3, [r4, #12]
 801fa1a:	f023 0303 	bic.w	r3, r3, #3
 801fa1e:	f043 0301 	orr.w	r3, r3, #1
 801fa22:	81a3      	strh	r3, [r4, #12]
 801fa24:	89a0      	ldrh	r0, [r4, #12]
 801fa26:	4305      	orrs	r5, r0
 801fa28:	81a5      	strh	r5, [r4, #12]
 801fa2a:	e7cd      	b.n	801f9c8 <__smakebuf_r+0x18>
 801fa2c:	0801b059 	.word	0x0801b059

0801fa30 <__ascii_mbtowc>:
 801fa30:	b082      	sub	sp, #8
 801fa32:	b901      	cbnz	r1, 801fa36 <__ascii_mbtowc+0x6>
 801fa34:	a901      	add	r1, sp, #4
 801fa36:	b142      	cbz	r2, 801fa4a <__ascii_mbtowc+0x1a>
 801fa38:	b14b      	cbz	r3, 801fa4e <__ascii_mbtowc+0x1e>
 801fa3a:	7813      	ldrb	r3, [r2, #0]
 801fa3c:	600b      	str	r3, [r1, #0]
 801fa3e:	7812      	ldrb	r2, [r2, #0]
 801fa40:	1e10      	subs	r0, r2, #0
 801fa42:	bf18      	it	ne
 801fa44:	2001      	movne	r0, #1
 801fa46:	b002      	add	sp, #8
 801fa48:	4770      	bx	lr
 801fa4a:	4610      	mov	r0, r2
 801fa4c:	e7fb      	b.n	801fa46 <__ascii_mbtowc+0x16>
 801fa4e:	f06f 0001 	mvn.w	r0, #1
 801fa52:	e7f8      	b.n	801fa46 <__ascii_mbtowc+0x16>

0801fa54 <__malloc_lock>:
 801fa54:	4801      	ldr	r0, [pc, #4]	; (801fa5c <__malloc_lock+0x8>)
 801fa56:	f7fb bd13 	b.w	801b480 <__retarget_lock_acquire_recursive>
 801fa5a:	bf00      	nop
 801fa5c:	20008fc8 	.word	0x20008fc8

0801fa60 <__malloc_unlock>:
 801fa60:	4801      	ldr	r0, [pc, #4]	; (801fa68 <__malloc_unlock+0x8>)
 801fa62:	f7fb bd0f 	b.w	801b484 <__retarget_lock_release_recursive>
 801fa66:	bf00      	nop
 801fa68:	20008fc8 	.word	0x20008fc8

0801fa6c <_Balloc>:
 801fa6c:	b570      	push	{r4, r5, r6, lr}
 801fa6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801fa70:	4604      	mov	r4, r0
 801fa72:	460d      	mov	r5, r1
 801fa74:	b976      	cbnz	r6, 801fa94 <_Balloc+0x28>
 801fa76:	2010      	movs	r0, #16
 801fa78:	f7fb fd06 	bl	801b488 <malloc>
 801fa7c:	4602      	mov	r2, r0
 801fa7e:	6260      	str	r0, [r4, #36]	; 0x24
 801fa80:	b920      	cbnz	r0, 801fa8c <_Balloc+0x20>
 801fa82:	4b18      	ldr	r3, [pc, #96]	; (801fae4 <_Balloc+0x78>)
 801fa84:	4818      	ldr	r0, [pc, #96]	; (801fae8 <_Balloc+0x7c>)
 801fa86:	2166      	movs	r1, #102	; 0x66
 801fa88:	f7fe fb64 	bl	801e154 <__assert_func>
 801fa8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fa90:	6006      	str	r6, [r0, #0]
 801fa92:	60c6      	str	r6, [r0, #12]
 801fa94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801fa96:	68f3      	ldr	r3, [r6, #12]
 801fa98:	b183      	cbz	r3, 801fabc <_Balloc+0x50>
 801fa9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fa9c:	68db      	ldr	r3, [r3, #12]
 801fa9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801faa2:	b9b8      	cbnz	r0, 801fad4 <_Balloc+0x68>
 801faa4:	2101      	movs	r1, #1
 801faa6:	fa01 f605 	lsl.w	r6, r1, r5
 801faaa:	1d72      	adds	r2, r6, #5
 801faac:	0092      	lsls	r2, r2, #2
 801faae:	4620      	mov	r0, r4
 801fab0:	f000 fc97 	bl	80203e2 <_calloc_r>
 801fab4:	b160      	cbz	r0, 801fad0 <_Balloc+0x64>
 801fab6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801faba:	e00e      	b.n	801fada <_Balloc+0x6e>
 801fabc:	2221      	movs	r2, #33	; 0x21
 801fabe:	2104      	movs	r1, #4
 801fac0:	4620      	mov	r0, r4
 801fac2:	f000 fc8e 	bl	80203e2 <_calloc_r>
 801fac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fac8:	60f0      	str	r0, [r6, #12]
 801faca:	68db      	ldr	r3, [r3, #12]
 801facc:	2b00      	cmp	r3, #0
 801face:	d1e4      	bne.n	801fa9a <_Balloc+0x2e>
 801fad0:	2000      	movs	r0, #0
 801fad2:	bd70      	pop	{r4, r5, r6, pc}
 801fad4:	6802      	ldr	r2, [r0, #0]
 801fad6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801fada:	2300      	movs	r3, #0
 801fadc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801fae0:	e7f7      	b.n	801fad2 <_Balloc+0x66>
 801fae2:	bf00      	nop
 801fae4:	08023130 	.word	0x08023130
 801fae8:	08023464 	.word	0x08023464

0801faec <_Bfree>:
 801faec:	b570      	push	{r4, r5, r6, lr}
 801faee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801faf0:	4605      	mov	r5, r0
 801faf2:	460c      	mov	r4, r1
 801faf4:	b976      	cbnz	r6, 801fb14 <_Bfree+0x28>
 801faf6:	2010      	movs	r0, #16
 801faf8:	f7fb fcc6 	bl	801b488 <malloc>
 801fafc:	4602      	mov	r2, r0
 801fafe:	6268      	str	r0, [r5, #36]	; 0x24
 801fb00:	b920      	cbnz	r0, 801fb0c <_Bfree+0x20>
 801fb02:	4b09      	ldr	r3, [pc, #36]	; (801fb28 <_Bfree+0x3c>)
 801fb04:	4809      	ldr	r0, [pc, #36]	; (801fb2c <_Bfree+0x40>)
 801fb06:	218a      	movs	r1, #138	; 0x8a
 801fb08:	f7fe fb24 	bl	801e154 <__assert_func>
 801fb0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fb10:	6006      	str	r6, [r0, #0]
 801fb12:	60c6      	str	r6, [r0, #12]
 801fb14:	b13c      	cbz	r4, 801fb26 <_Bfree+0x3a>
 801fb16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801fb18:	6862      	ldr	r2, [r4, #4]
 801fb1a:	68db      	ldr	r3, [r3, #12]
 801fb1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801fb20:	6021      	str	r1, [r4, #0]
 801fb22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801fb26:	bd70      	pop	{r4, r5, r6, pc}
 801fb28:	08023130 	.word	0x08023130
 801fb2c:	08023464 	.word	0x08023464

0801fb30 <__multadd>:
 801fb30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fb34:	690e      	ldr	r6, [r1, #16]
 801fb36:	4607      	mov	r7, r0
 801fb38:	4698      	mov	r8, r3
 801fb3a:	460c      	mov	r4, r1
 801fb3c:	f101 0014 	add.w	r0, r1, #20
 801fb40:	2300      	movs	r3, #0
 801fb42:	6805      	ldr	r5, [r0, #0]
 801fb44:	b2a9      	uxth	r1, r5
 801fb46:	fb02 8101 	mla	r1, r2, r1, r8
 801fb4a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801fb4e:	0c2d      	lsrs	r5, r5, #16
 801fb50:	fb02 c505 	mla	r5, r2, r5, ip
 801fb54:	b289      	uxth	r1, r1
 801fb56:	3301      	adds	r3, #1
 801fb58:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801fb5c:	429e      	cmp	r6, r3
 801fb5e:	f840 1b04 	str.w	r1, [r0], #4
 801fb62:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801fb66:	dcec      	bgt.n	801fb42 <__multadd+0x12>
 801fb68:	f1b8 0f00 	cmp.w	r8, #0
 801fb6c:	d022      	beq.n	801fbb4 <__multadd+0x84>
 801fb6e:	68a3      	ldr	r3, [r4, #8]
 801fb70:	42b3      	cmp	r3, r6
 801fb72:	dc19      	bgt.n	801fba8 <__multadd+0x78>
 801fb74:	6861      	ldr	r1, [r4, #4]
 801fb76:	4638      	mov	r0, r7
 801fb78:	3101      	adds	r1, #1
 801fb7a:	f7ff ff77 	bl	801fa6c <_Balloc>
 801fb7e:	4605      	mov	r5, r0
 801fb80:	b928      	cbnz	r0, 801fb8e <__multadd+0x5e>
 801fb82:	4602      	mov	r2, r0
 801fb84:	4b0d      	ldr	r3, [pc, #52]	; (801fbbc <__multadd+0x8c>)
 801fb86:	480e      	ldr	r0, [pc, #56]	; (801fbc0 <__multadd+0x90>)
 801fb88:	21b5      	movs	r1, #181	; 0xb5
 801fb8a:	f7fe fae3 	bl	801e154 <__assert_func>
 801fb8e:	6922      	ldr	r2, [r4, #16]
 801fb90:	3202      	adds	r2, #2
 801fb92:	f104 010c 	add.w	r1, r4, #12
 801fb96:	0092      	lsls	r2, r2, #2
 801fb98:	300c      	adds	r0, #12
 801fb9a:	f7fb fc85 	bl	801b4a8 <memcpy>
 801fb9e:	4621      	mov	r1, r4
 801fba0:	4638      	mov	r0, r7
 801fba2:	f7ff ffa3 	bl	801faec <_Bfree>
 801fba6:	462c      	mov	r4, r5
 801fba8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801fbac:	3601      	adds	r6, #1
 801fbae:	f8c3 8014 	str.w	r8, [r3, #20]
 801fbb2:	6126      	str	r6, [r4, #16]
 801fbb4:	4620      	mov	r0, r4
 801fbb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fbba:	bf00      	nop
 801fbbc:	080233d4 	.word	0x080233d4
 801fbc0:	08023464 	.word	0x08023464

0801fbc4 <__s2b>:
 801fbc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fbc8:	460c      	mov	r4, r1
 801fbca:	4615      	mov	r5, r2
 801fbcc:	461f      	mov	r7, r3
 801fbce:	2209      	movs	r2, #9
 801fbd0:	3308      	adds	r3, #8
 801fbd2:	4606      	mov	r6, r0
 801fbd4:	fb93 f3f2 	sdiv	r3, r3, r2
 801fbd8:	2100      	movs	r1, #0
 801fbda:	2201      	movs	r2, #1
 801fbdc:	429a      	cmp	r2, r3
 801fbde:	db09      	blt.n	801fbf4 <__s2b+0x30>
 801fbe0:	4630      	mov	r0, r6
 801fbe2:	f7ff ff43 	bl	801fa6c <_Balloc>
 801fbe6:	b940      	cbnz	r0, 801fbfa <__s2b+0x36>
 801fbe8:	4602      	mov	r2, r0
 801fbea:	4b19      	ldr	r3, [pc, #100]	; (801fc50 <__s2b+0x8c>)
 801fbec:	4819      	ldr	r0, [pc, #100]	; (801fc54 <__s2b+0x90>)
 801fbee:	21ce      	movs	r1, #206	; 0xce
 801fbf0:	f7fe fab0 	bl	801e154 <__assert_func>
 801fbf4:	0052      	lsls	r2, r2, #1
 801fbf6:	3101      	adds	r1, #1
 801fbf8:	e7f0      	b.n	801fbdc <__s2b+0x18>
 801fbfa:	9b08      	ldr	r3, [sp, #32]
 801fbfc:	6143      	str	r3, [r0, #20]
 801fbfe:	2d09      	cmp	r5, #9
 801fc00:	f04f 0301 	mov.w	r3, #1
 801fc04:	6103      	str	r3, [r0, #16]
 801fc06:	dd16      	ble.n	801fc36 <__s2b+0x72>
 801fc08:	f104 0909 	add.w	r9, r4, #9
 801fc0c:	46c8      	mov	r8, r9
 801fc0e:	442c      	add	r4, r5
 801fc10:	f818 3b01 	ldrb.w	r3, [r8], #1
 801fc14:	4601      	mov	r1, r0
 801fc16:	3b30      	subs	r3, #48	; 0x30
 801fc18:	220a      	movs	r2, #10
 801fc1a:	4630      	mov	r0, r6
 801fc1c:	f7ff ff88 	bl	801fb30 <__multadd>
 801fc20:	45a0      	cmp	r8, r4
 801fc22:	d1f5      	bne.n	801fc10 <__s2b+0x4c>
 801fc24:	f1a5 0408 	sub.w	r4, r5, #8
 801fc28:	444c      	add	r4, r9
 801fc2a:	1b2d      	subs	r5, r5, r4
 801fc2c:	1963      	adds	r3, r4, r5
 801fc2e:	42bb      	cmp	r3, r7
 801fc30:	db04      	blt.n	801fc3c <__s2b+0x78>
 801fc32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fc36:	340a      	adds	r4, #10
 801fc38:	2509      	movs	r5, #9
 801fc3a:	e7f6      	b.n	801fc2a <__s2b+0x66>
 801fc3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801fc40:	4601      	mov	r1, r0
 801fc42:	3b30      	subs	r3, #48	; 0x30
 801fc44:	220a      	movs	r2, #10
 801fc46:	4630      	mov	r0, r6
 801fc48:	f7ff ff72 	bl	801fb30 <__multadd>
 801fc4c:	e7ee      	b.n	801fc2c <__s2b+0x68>
 801fc4e:	bf00      	nop
 801fc50:	080233d4 	.word	0x080233d4
 801fc54:	08023464 	.word	0x08023464

0801fc58 <__hi0bits>:
 801fc58:	0c03      	lsrs	r3, r0, #16
 801fc5a:	041b      	lsls	r3, r3, #16
 801fc5c:	b9d3      	cbnz	r3, 801fc94 <__hi0bits+0x3c>
 801fc5e:	0400      	lsls	r0, r0, #16
 801fc60:	2310      	movs	r3, #16
 801fc62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801fc66:	bf04      	itt	eq
 801fc68:	0200      	lsleq	r0, r0, #8
 801fc6a:	3308      	addeq	r3, #8
 801fc6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801fc70:	bf04      	itt	eq
 801fc72:	0100      	lsleq	r0, r0, #4
 801fc74:	3304      	addeq	r3, #4
 801fc76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801fc7a:	bf04      	itt	eq
 801fc7c:	0080      	lsleq	r0, r0, #2
 801fc7e:	3302      	addeq	r3, #2
 801fc80:	2800      	cmp	r0, #0
 801fc82:	db05      	blt.n	801fc90 <__hi0bits+0x38>
 801fc84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801fc88:	f103 0301 	add.w	r3, r3, #1
 801fc8c:	bf08      	it	eq
 801fc8e:	2320      	moveq	r3, #32
 801fc90:	4618      	mov	r0, r3
 801fc92:	4770      	bx	lr
 801fc94:	2300      	movs	r3, #0
 801fc96:	e7e4      	b.n	801fc62 <__hi0bits+0xa>

0801fc98 <__lo0bits>:
 801fc98:	6803      	ldr	r3, [r0, #0]
 801fc9a:	f013 0207 	ands.w	r2, r3, #7
 801fc9e:	4601      	mov	r1, r0
 801fca0:	d00b      	beq.n	801fcba <__lo0bits+0x22>
 801fca2:	07da      	lsls	r2, r3, #31
 801fca4:	d424      	bmi.n	801fcf0 <__lo0bits+0x58>
 801fca6:	0798      	lsls	r0, r3, #30
 801fca8:	bf49      	itett	mi
 801fcaa:	085b      	lsrmi	r3, r3, #1
 801fcac:	089b      	lsrpl	r3, r3, #2
 801fcae:	2001      	movmi	r0, #1
 801fcb0:	600b      	strmi	r3, [r1, #0]
 801fcb2:	bf5c      	itt	pl
 801fcb4:	600b      	strpl	r3, [r1, #0]
 801fcb6:	2002      	movpl	r0, #2
 801fcb8:	4770      	bx	lr
 801fcba:	b298      	uxth	r0, r3
 801fcbc:	b9b0      	cbnz	r0, 801fcec <__lo0bits+0x54>
 801fcbe:	0c1b      	lsrs	r3, r3, #16
 801fcc0:	2010      	movs	r0, #16
 801fcc2:	f013 0fff 	tst.w	r3, #255	; 0xff
 801fcc6:	bf04      	itt	eq
 801fcc8:	0a1b      	lsreq	r3, r3, #8
 801fcca:	3008      	addeq	r0, #8
 801fccc:	071a      	lsls	r2, r3, #28
 801fcce:	bf04      	itt	eq
 801fcd0:	091b      	lsreq	r3, r3, #4
 801fcd2:	3004      	addeq	r0, #4
 801fcd4:	079a      	lsls	r2, r3, #30
 801fcd6:	bf04      	itt	eq
 801fcd8:	089b      	lsreq	r3, r3, #2
 801fcda:	3002      	addeq	r0, #2
 801fcdc:	07da      	lsls	r2, r3, #31
 801fcde:	d403      	bmi.n	801fce8 <__lo0bits+0x50>
 801fce0:	085b      	lsrs	r3, r3, #1
 801fce2:	f100 0001 	add.w	r0, r0, #1
 801fce6:	d005      	beq.n	801fcf4 <__lo0bits+0x5c>
 801fce8:	600b      	str	r3, [r1, #0]
 801fcea:	4770      	bx	lr
 801fcec:	4610      	mov	r0, r2
 801fcee:	e7e8      	b.n	801fcc2 <__lo0bits+0x2a>
 801fcf0:	2000      	movs	r0, #0
 801fcf2:	4770      	bx	lr
 801fcf4:	2020      	movs	r0, #32
 801fcf6:	4770      	bx	lr

0801fcf8 <__i2b>:
 801fcf8:	b510      	push	{r4, lr}
 801fcfa:	460c      	mov	r4, r1
 801fcfc:	2101      	movs	r1, #1
 801fcfe:	f7ff feb5 	bl	801fa6c <_Balloc>
 801fd02:	4602      	mov	r2, r0
 801fd04:	b928      	cbnz	r0, 801fd12 <__i2b+0x1a>
 801fd06:	4b05      	ldr	r3, [pc, #20]	; (801fd1c <__i2b+0x24>)
 801fd08:	4805      	ldr	r0, [pc, #20]	; (801fd20 <__i2b+0x28>)
 801fd0a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801fd0e:	f7fe fa21 	bl	801e154 <__assert_func>
 801fd12:	2301      	movs	r3, #1
 801fd14:	6144      	str	r4, [r0, #20]
 801fd16:	6103      	str	r3, [r0, #16]
 801fd18:	bd10      	pop	{r4, pc}
 801fd1a:	bf00      	nop
 801fd1c:	080233d4 	.word	0x080233d4
 801fd20:	08023464 	.word	0x08023464

0801fd24 <__multiply>:
 801fd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd28:	4614      	mov	r4, r2
 801fd2a:	690a      	ldr	r2, [r1, #16]
 801fd2c:	6923      	ldr	r3, [r4, #16]
 801fd2e:	429a      	cmp	r2, r3
 801fd30:	bfb8      	it	lt
 801fd32:	460b      	movlt	r3, r1
 801fd34:	460d      	mov	r5, r1
 801fd36:	bfbc      	itt	lt
 801fd38:	4625      	movlt	r5, r4
 801fd3a:	461c      	movlt	r4, r3
 801fd3c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801fd40:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801fd44:	68ab      	ldr	r3, [r5, #8]
 801fd46:	6869      	ldr	r1, [r5, #4]
 801fd48:	eb0a 0709 	add.w	r7, sl, r9
 801fd4c:	42bb      	cmp	r3, r7
 801fd4e:	b085      	sub	sp, #20
 801fd50:	bfb8      	it	lt
 801fd52:	3101      	addlt	r1, #1
 801fd54:	f7ff fe8a 	bl	801fa6c <_Balloc>
 801fd58:	b930      	cbnz	r0, 801fd68 <__multiply+0x44>
 801fd5a:	4602      	mov	r2, r0
 801fd5c:	4b42      	ldr	r3, [pc, #264]	; (801fe68 <__multiply+0x144>)
 801fd5e:	4843      	ldr	r0, [pc, #268]	; (801fe6c <__multiply+0x148>)
 801fd60:	f240 115d 	movw	r1, #349	; 0x15d
 801fd64:	f7fe f9f6 	bl	801e154 <__assert_func>
 801fd68:	f100 0614 	add.w	r6, r0, #20
 801fd6c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801fd70:	4633      	mov	r3, r6
 801fd72:	2200      	movs	r2, #0
 801fd74:	4543      	cmp	r3, r8
 801fd76:	d31e      	bcc.n	801fdb6 <__multiply+0x92>
 801fd78:	f105 0c14 	add.w	ip, r5, #20
 801fd7c:	f104 0314 	add.w	r3, r4, #20
 801fd80:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801fd84:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801fd88:	9202      	str	r2, [sp, #8]
 801fd8a:	ebac 0205 	sub.w	r2, ip, r5
 801fd8e:	3a15      	subs	r2, #21
 801fd90:	f022 0203 	bic.w	r2, r2, #3
 801fd94:	3204      	adds	r2, #4
 801fd96:	f105 0115 	add.w	r1, r5, #21
 801fd9a:	458c      	cmp	ip, r1
 801fd9c:	bf38      	it	cc
 801fd9e:	2204      	movcc	r2, #4
 801fda0:	9201      	str	r2, [sp, #4]
 801fda2:	9a02      	ldr	r2, [sp, #8]
 801fda4:	9303      	str	r3, [sp, #12]
 801fda6:	429a      	cmp	r2, r3
 801fda8:	d808      	bhi.n	801fdbc <__multiply+0x98>
 801fdaa:	2f00      	cmp	r7, #0
 801fdac:	dc55      	bgt.n	801fe5a <__multiply+0x136>
 801fdae:	6107      	str	r7, [r0, #16]
 801fdb0:	b005      	add	sp, #20
 801fdb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdb6:	f843 2b04 	str.w	r2, [r3], #4
 801fdba:	e7db      	b.n	801fd74 <__multiply+0x50>
 801fdbc:	f8b3 a000 	ldrh.w	sl, [r3]
 801fdc0:	f1ba 0f00 	cmp.w	sl, #0
 801fdc4:	d020      	beq.n	801fe08 <__multiply+0xe4>
 801fdc6:	f105 0e14 	add.w	lr, r5, #20
 801fdca:	46b1      	mov	r9, r6
 801fdcc:	2200      	movs	r2, #0
 801fdce:	f85e 4b04 	ldr.w	r4, [lr], #4
 801fdd2:	f8d9 b000 	ldr.w	fp, [r9]
 801fdd6:	b2a1      	uxth	r1, r4
 801fdd8:	fa1f fb8b 	uxth.w	fp, fp
 801fddc:	fb0a b101 	mla	r1, sl, r1, fp
 801fde0:	4411      	add	r1, r2
 801fde2:	f8d9 2000 	ldr.w	r2, [r9]
 801fde6:	0c24      	lsrs	r4, r4, #16
 801fde8:	0c12      	lsrs	r2, r2, #16
 801fdea:	fb0a 2404 	mla	r4, sl, r4, r2
 801fdee:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801fdf2:	b289      	uxth	r1, r1
 801fdf4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801fdf8:	45f4      	cmp	ip, lr
 801fdfa:	f849 1b04 	str.w	r1, [r9], #4
 801fdfe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801fe02:	d8e4      	bhi.n	801fdce <__multiply+0xaa>
 801fe04:	9901      	ldr	r1, [sp, #4]
 801fe06:	5072      	str	r2, [r6, r1]
 801fe08:	9a03      	ldr	r2, [sp, #12]
 801fe0a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801fe0e:	3304      	adds	r3, #4
 801fe10:	f1b9 0f00 	cmp.w	r9, #0
 801fe14:	d01f      	beq.n	801fe56 <__multiply+0x132>
 801fe16:	6834      	ldr	r4, [r6, #0]
 801fe18:	f105 0114 	add.w	r1, r5, #20
 801fe1c:	46b6      	mov	lr, r6
 801fe1e:	f04f 0a00 	mov.w	sl, #0
 801fe22:	880a      	ldrh	r2, [r1, #0]
 801fe24:	f8be b002 	ldrh.w	fp, [lr, #2]
 801fe28:	fb09 b202 	mla	r2, r9, r2, fp
 801fe2c:	4492      	add	sl, r2
 801fe2e:	b2a4      	uxth	r4, r4
 801fe30:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801fe34:	f84e 4b04 	str.w	r4, [lr], #4
 801fe38:	f851 4b04 	ldr.w	r4, [r1], #4
 801fe3c:	f8be 2000 	ldrh.w	r2, [lr]
 801fe40:	0c24      	lsrs	r4, r4, #16
 801fe42:	fb09 2404 	mla	r4, r9, r4, r2
 801fe46:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801fe4a:	458c      	cmp	ip, r1
 801fe4c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801fe50:	d8e7      	bhi.n	801fe22 <__multiply+0xfe>
 801fe52:	9a01      	ldr	r2, [sp, #4]
 801fe54:	50b4      	str	r4, [r6, r2]
 801fe56:	3604      	adds	r6, #4
 801fe58:	e7a3      	b.n	801fda2 <__multiply+0x7e>
 801fe5a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801fe5e:	2b00      	cmp	r3, #0
 801fe60:	d1a5      	bne.n	801fdae <__multiply+0x8a>
 801fe62:	3f01      	subs	r7, #1
 801fe64:	e7a1      	b.n	801fdaa <__multiply+0x86>
 801fe66:	bf00      	nop
 801fe68:	080233d4 	.word	0x080233d4
 801fe6c:	08023464 	.word	0x08023464

0801fe70 <__pow5mult>:
 801fe70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fe74:	4615      	mov	r5, r2
 801fe76:	f012 0203 	ands.w	r2, r2, #3
 801fe7a:	4606      	mov	r6, r0
 801fe7c:	460f      	mov	r7, r1
 801fe7e:	d007      	beq.n	801fe90 <__pow5mult+0x20>
 801fe80:	4c25      	ldr	r4, [pc, #148]	; (801ff18 <__pow5mult+0xa8>)
 801fe82:	3a01      	subs	r2, #1
 801fe84:	2300      	movs	r3, #0
 801fe86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801fe8a:	f7ff fe51 	bl	801fb30 <__multadd>
 801fe8e:	4607      	mov	r7, r0
 801fe90:	10ad      	asrs	r5, r5, #2
 801fe92:	d03d      	beq.n	801ff10 <__pow5mult+0xa0>
 801fe94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801fe96:	b97c      	cbnz	r4, 801feb8 <__pow5mult+0x48>
 801fe98:	2010      	movs	r0, #16
 801fe9a:	f7fb faf5 	bl	801b488 <malloc>
 801fe9e:	4602      	mov	r2, r0
 801fea0:	6270      	str	r0, [r6, #36]	; 0x24
 801fea2:	b928      	cbnz	r0, 801feb0 <__pow5mult+0x40>
 801fea4:	4b1d      	ldr	r3, [pc, #116]	; (801ff1c <__pow5mult+0xac>)
 801fea6:	481e      	ldr	r0, [pc, #120]	; (801ff20 <__pow5mult+0xb0>)
 801fea8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801feac:	f7fe f952 	bl	801e154 <__assert_func>
 801feb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801feb4:	6004      	str	r4, [r0, #0]
 801feb6:	60c4      	str	r4, [r0, #12]
 801feb8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801febc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801fec0:	b94c      	cbnz	r4, 801fed6 <__pow5mult+0x66>
 801fec2:	f240 2171 	movw	r1, #625	; 0x271
 801fec6:	4630      	mov	r0, r6
 801fec8:	f7ff ff16 	bl	801fcf8 <__i2b>
 801fecc:	2300      	movs	r3, #0
 801fece:	f8c8 0008 	str.w	r0, [r8, #8]
 801fed2:	4604      	mov	r4, r0
 801fed4:	6003      	str	r3, [r0, #0]
 801fed6:	f04f 0900 	mov.w	r9, #0
 801feda:	07eb      	lsls	r3, r5, #31
 801fedc:	d50a      	bpl.n	801fef4 <__pow5mult+0x84>
 801fede:	4639      	mov	r1, r7
 801fee0:	4622      	mov	r2, r4
 801fee2:	4630      	mov	r0, r6
 801fee4:	f7ff ff1e 	bl	801fd24 <__multiply>
 801fee8:	4639      	mov	r1, r7
 801feea:	4680      	mov	r8, r0
 801feec:	4630      	mov	r0, r6
 801feee:	f7ff fdfd 	bl	801faec <_Bfree>
 801fef2:	4647      	mov	r7, r8
 801fef4:	106d      	asrs	r5, r5, #1
 801fef6:	d00b      	beq.n	801ff10 <__pow5mult+0xa0>
 801fef8:	6820      	ldr	r0, [r4, #0]
 801fefa:	b938      	cbnz	r0, 801ff0c <__pow5mult+0x9c>
 801fefc:	4622      	mov	r2, r4
 801fefe:	4621      	mov	r1, r4
 801ff00:	4630      	mov	r0, r6
 801ff02:	f7ff ff0f 	bl	801fd24 <__multiply>
 801ff06:	6020      	str	r0, [r4, #0]
 801ff08:	f8c0 9000 	str.w	r9, [r0]
 801ff0c:	4604      	mov	r4, r0
 801ff0e:	e7e4      	b.n	801feda <__pow5mult+0x6a>
 801ff10:	4638      	mov	r0, r7
 801ff12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ff16:	bf00      	nop
 801ff18:	080235b8 	.word	0x080235b8
 801ff1c:	08023130 	.word	0x08023130
 801ff20:	08023464 	.word	0x08023464

0801ff24 <__lshift>:
 801ff24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ff28:	460c      	mov	r4, r1
 801ff2a:	6849      	ldr	r1, [r1, #4]
 801ff2c:	6923      	ldr	r3, [r4, #16]
 801ff2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ff32:	68a3      	ldr	r3, [r4, #8]
 801ff34:	4607      	mov	r7, r0
 801ff36:	4691      	mov	r9, r2
 801ff38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ff3c:	f108 0601 	add.w	r6, r8, #1
 801ff40:	42b3      	cmp	r3, r6
 801ff42:	db0b      	blt.n	801ff5c <__lshift+0x38>
 801ff44:	4638      	mov	r0, r7
 801ff46:	f7ff fd91 	bl	801fa6c <_Balloc>
 801ff4a:	4605      	mov	r5, r0
 801ff4c:	b948      	cbnz	r0, 801ff62 <__lshift+0x3e>
 801ff4e:	4602      	mov	r2, r0
 801ff50:	4b28      	ldr	r3, [pc, #160]	; (801fff4 <__lshift+0xd0>)
 801ff52:	4829      	ldr	r0, [pc, #164]	; (801fff8 <__lshift+0xd4>)
 801ff54:	f240 11d9 	movw	r1, #473	; 0x1d9
 801ff58:	f7fe f8fc 	bl	801e154 <__assert_func>
 801ff5c:	3101      	adds	r1, #1
 801ff5e:	005b      	lsls	r3, r3, #1
 801ff60:	e7ee      	b.n	801ff40 <__lshift+0x1c>
 801ff62:	2300      	movs	r3, #0
 801ff64:	f100 0114 	add.w	r1, r0, #20
 801ff68:	f100 0210 	add.w	r2, r0, #16
 801ff6c:	4618      	mov	r0, r3
 801ff6e:	4553      	cmp	r3, sl
 801ff70:	db33      	blt.n	801ffda <__lshift+0xb6>
 801ff72:	6920      	ldr	r0, [r4, #16]
 801ff74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ff78:	f104 0314 	add.w	r3, r4, #20
 801ff7c:	f019 091f 	ands.w	r9, r9, #31
 801ff80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801ff84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801ff88:	d02b      	beq.n	801ffe2 <__lshift+0xbe>
 801ff8a:	f1c9 0e20 	rsb	lr, r9, #32
 801ff8e:	468a      	mov	sl, r1
 801ff90:	2200      	movs	r2, #0
 801ff92:	6818      	ldr	r0, [r3, #0]
 801ff94:	fa00 f009 	lsl.w	r0, r0, r9
 801ff98:	4302      	orrs	r2, r0
 801ff9a:	f84a 2b04 	str.w	r2, [sl], #4
 801ff9e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ffa2:	459c      	cmp	ip, r3
 801ffa4:	fa22 f20e 	lsr.w	r2, r2, lr
 801ffa8:	d8f3      	bhi.n	801ff92 <__lshift+0x6e>
 801ffaa:	ebac 0304 	sub.w	r3, ip, r4
 801ffae:	3b15      	subs	r3, #21
 801ffb0:	f023 0303 	bic.w	r3, r3, #3
 801ffb4:	3304      	adds	r3, #4
 801ffb6:	f104 0015 	add.w	r0, r4, #21
 801ffba:	4584      	cmp	ip, r0
 801ffbc:	bf38      	it	cc
 801ffbe:	2304      	movcc	r3, #4
 801ffc0:	50ca      	str	r2, [r1, r3]
 801ffc2:	b10a      	cbz	r2, 801ffc8 <__lshift+0xa4>
 801ffc4:	f108 0602 	add.w	r6, r8, #2
 801ffc8:	3e01      	subs	r6, #1
 801ffca:	4638      	mov	r0, r7
 801ffcc:	612e      	str	r6, [r5, #16]
 801ffce:	4621      	mov	r1, r4
 801ffd0:	f7ff fd8c 	bl	801faec <_Bfree>
 801ffd4:	4628      	mov	r0, r5
 801ffd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ffda:	f842 0f04 	str.w	r0, [r2, #4]!
 801ffde:	3301      	adds	r3, #1
 801ffe0:	e7c5      	b.n	801ff6e <__lshift+0x4a>
 801ffe2:	3904      	subs	r1, #4
 801ffe4:	f853 2b04 	ldr.w	r2, [r3], #4
 801ffe8:	f841 2f04 	str.w	r2, [r1, #4]!
 801ffec:	459c      	cmp	ip, r3
 801ffee:	d8f9      	bhi.n	801ffe4 <__lshift+0xc0>
 801fff0:	e7ea      	b.n	801ffc8 <__lshift+0xa4>
 801fff2:	bf00      	nop
 801fff4:	080233d4 	.word	0x080233d4
 801fff8:	08023464 	.word	0x08023464

0801fffc <__mcmp>:
 801fffc:	b530      	push	{r4, r5, lr}
 801fffe:	6902      	ldr	r2, [r0, #16]
 8020000:	690c      	ldr	r4, [r1, #16]
 8020002:	1b12      	subs	r2, r2, r4
 8020004:	d10e      	bne.n	8020024 <__mcmp+0x28>
 8020006:	f100 0314 	add.w	r3, r0, #20
 802000a:	3114      	adds	r1, #20
 802000c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8020010:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8020014:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8020018:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802001c:	42a5      	cmp	r5, r4
 802001e:	d003      	beq.n	8020028 <__mcmp+0x2c>
 8020020:	d305      	bcc.n	802002e <__mcmp+0x32>
 8020022:	2201      	movs	r2, #1
 8020024:	4610      	mov	r0, r2
 8020026:	bd30      	pop	{r4, r5, pc}
 8020028:	4283      	cmp	r3, r0
 802002a:	d3f3      	bcc.n	8020014 <__mcmp+0x18>
 802002c:	e7fa      	b.n	8020024 <__mcmp+0x28>
 802002e:	f04f 32ff 	mov.w	r2, #4294967295
 8020032:	e7f7      	b.n	8020024 <__mcmp+0x28>

08020034 <__mdiff>:
 8020034:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020038:	460c      	mov	r4, r1
 802003a:	4606      	mov	r6, r0
 802003c:	4611      	mov	r1, r2
 802003e:	4620      	mov	r0, r4
 8020040:	4617      	mov	r7, r2
 8020042:	f7ff ffdb 	bl	801fffc <__mcmp>
 8020046:	1e05      	subs	r5, r0, #0
 8020048:	d110      	bne.n	802006c <__mdiff+0x38>
 802004a:	4629      	mov	r1, r5
 802004c:	4630      	mov	r0, r6
 802004e:	f7ff fd0d 	bl	801fa6c <_Balloc>
 8020052:	b930      	cbnz	r0, 8020062 <__mdiff+0x2e>
 8020054:	4b39      	ldr	r3, [pc, #228]	; (802013c <__mdiff+0x108>)
 8020056:	4602      	mov	r2, r0
 8020058:	f240 2132 	movw	r1, #562	; 0x232
 802005c:	4838      	ldr	r0, [pc, #224]	; (8020140 <__mdiff+0x10c>)
 802005e:	f7fe f879 	bl	801e154 <__assert_func>
 8020062:	2301      	movs	r3, #1
 8020064:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8020068:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802006c:	bfa4      	itt	ge
 802006e:	463b      	movge	r3, r7
 8020070:	4627      	movge	r7, r4
 8020072:	4630      	mov	r0, r6
 8020074:	6879      	ldr	r1, [r7, #4]
 8020076:	bfa6      	itte	ge
 8020078:	461c      	movge	r4, r3
 802007a:	2500      	movge	r5, #0
 802007c:	2501      	movlt	r5, #1
 802007e:	f7ff fcf5 	bl	801fa6c <_Balloc>
 8020082:	b920      	cbnz	r0, 802008e <__mdiff+0x5a>
 8020084:	4b2d      	ldr	r3, [pc, #180]	; (802013c <__mdiff+0x108>)
 8020086:	4602      	mov	r2, r0
 8020088:	f44f 7110 	mov.w	r1, #576	; 0x240
 802008c:	e7e6      	b.n	802005c <__mdiff+0x28>
 802008e:	693e      	ldr	r6, [r7, #16]
 8020090:	60c5      	str	r5, [r0, #12]
 8020092:	6925      	ldr	r5, [r4, #16]
 8020094:	f107 0114 	add.w	r1, r7, #20
 8020098:	f104 0914 	add.w	r9, r4, #20
 802009c:	f100 0e14 	add.w	lr, r0, #20
 80200a0:	f107 0210 	add.w	r2, r7, #16
 80200a4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80200a8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80200ac:	46f2      	mov	sl, lr
 80200ae:	2700      	movs	r7, #0
 80200b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80200b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80200b8:	fa1f f883 	uxth.w	r8, r3
 80200bc:	fa17 f78b 	uxtah	r7, r7, fp
 80200c0:	0c1b      	lsrs	r3, r3, #16
 80200c2:	eba7 0808 	sub.w	r8, r7, r8
 80200c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80200ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80200ce:	fa1f f888 	uxth.w	r8, r8
 80200d2:	141f      	asrs	r7, r3, #16
 80200d4:	454d      	cmp	r5, r9
 80200d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80200da:	f84a 3b04 	str.w	r3, [sl], #4
 80200de:	d8e7      	bhi.n	80200b0 <__mdiff+0x7c>
 80200e0:	1b2b      	subs	r3, r5, r4
 80200e2:	3b15      	subs	r3, #21
 80200e4:	f023 0303 	bic.w	r3, r3, #3
 80200e8:	3304      	adds	r3, #4
 80200ea:	3415      	adds	r4, #21
 80200ec:	42a5      	cmp	r5, r4
 80200ee:	bf38      	it	cc
 80200f0:	2304      	movcc	r3, #4
 80200f2:	4419      	add	r1, r3
 80200f4:	4473      	add	r3, lr
 80200f6:	469e      	mov	lr, r3
 80200f8:	460d      	mov	r5, r1
 80200fa:	4565      	cmp	r5, ip
 80200fc:	d30e      	bcc.n	802011c <__mdiff+0xe8>
 80200fe:	f10c 0203 	add.w	r2, ip, #3
 8020102:	1a52      	subs	r2, r2, r1
 8020104:	f022 0203 	bic.w	r2, r2, #3
 8020108:	3903      	subs	r1, #3
 802010a:	458c      	cmp	ip, r1
 802010c:	bf38      	it	cc
 802010e:	2200      	movcc	r2, #0
 8020110:	441a      	add	r2, r3
 8020112:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8020116:	b17b      	cbz	r3, 8020138 <__mdiff+0x104>
 8020118:	6106      	str	r6, [r0, #16]
 802011a:	e7a5      	b.n	8020068 <__mdiff+0x34>
 802011c:	f855 8b04 	ldr.w	r8, [r5], #4
 8020120:	fa17 f488 	uxtah	r4, r7, r8
 8020124:	1422      	asrs	r2, r4, #16
 8020126:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 802012a:	b2a4      	uxth	r4, r4
 802012c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8020130:	f84e 4b04 	str.w	r4, [lr], #4
 8020134:	1417      	asrs	r7, r2, #16
 8020136:	e7e0      	b.n	80200fa <__mdiff+0xc6>
 8020138:	3e01      	subs	r6, #1
 802013a:	e7ea      	b.n	8020112 <__mdiff+0xde>
 802013c:	080233d4 	.word	0x080233d4
 8020140:	08023464 	.word	0x08023464

08020144 <__ulp>:
 8020144:	b082      	sub	sp, #8
 8020146:	ed8d 0b00 	vstr	d0, [sp]
 802014a:	9b01      	ldr	r3, [sp, #4]
 802014c:	4912      	ldr	r1, [pc, #72]	; (8020198 <__ulp+0x54>)
 802014e:	4019      	ands	r1, r3
 8020150:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8020154:	2900      	cmp	r1, #0
 8020156:	dd05      	ble.n	8020164 <__ulp+0x20>
 8020158:	2200      	movs	r2, #0
 802015a:	460b      	mov	r3, r1
 802015c:	ec43 2b10 	vmov	d0, r2, r3
 8020160:	b002      	add	sp, #8
 8020162:	4770      	bx	lr
 8020164:	4249      	negs	r1, r1
 8020166:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 802016a:	ea4f 5021 	mov.w	r0, r1, asr #20
 802016e:	f04f 0200 	mov.w	r2, #0
 8020172:	f04f 0300 	mov.w	r3, #0
 8020176:	da04      	bge.n	8020182 <__ulp+0x3e>
 8020178:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 802017c:	fa41 f300 	asr.w	r3, r1, r0
 8020180:	e7ec      	b.n	802015c <__ulp+0x18>
 8020182:	f1a0 0114 	sub.w	r1, r0, #20
 8020186:	291e      	cmp	r1, #30
 8020188:	bfda      	itte	le
 802018a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 802018e:	fa20 f101 	lsrle.w	r1, r0, r1
 8020192:	2101      	movgt	r1, #1
 8020194:	460a      	mov	r2, r1
 8020196:	e7e1      	b.n	802015c <__ulp+0x18>
 8020198:	7ff00000 	.word	0x7ff00000

0802019c <__b2d>:
 802019c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802019e:	6905      	ldr	r5, [r0, #16]
 80201a0:	f100 0714 	add.w	r7, r0, #20
 80201a4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80201a8:	1f2e      	subs	r6, r5, #4
 80201aa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80201ae:	4620      	mov	r0, r4
 80201b0:	f7ff fd52 	bl	801fc58 <__hi0bits>
 80201b4:	f1c0 0320 	rsb	r3, r0, #32
 80201b8:	280a      	cmp	r0, #10
 80201ba:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8020238 <__b2d+0x9c>
 80201be:	600b      	str	r3, [r1, #0]
 80201c0:	dc14      	bgt.n	80201ec <__b2d+0x50>
 80201c2:	f1c0 0e0b 	rsb	lr, r0, #11
 80201c6:	fa24 f10e 	lsr.w	r1, r4, lr
 80201ca:	42b7      	cmp	r7, r6
 80201cc:	ea41 030c 	orr.w	r3, r1, ip
 80201d0:	bf34      	ite	cc
 80201d2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80201d6:	2100      	movcs	r1, #0
 80201d8:	3015      	adds	r0, #21
 80201da:	fa04 f000 	lsl.w	r0, r4, r0
 80201de:	fa21 f10e 	lsr.w	r1, r1, lr
 80201e2:	ea40 0201 	orr.w	r2, r0, r1
 80201e6:	ec43 2b10 	vmov	d0, r2, r3
 80201ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80201ec:	42b7      	cmp	r7, r6
 80201ee:	bf3a      	itte	cc
 80201f0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80201f4:	f1a5 0608 	subcc.w	r6, r5, #8
 80201f8:	2100      	movcs	r1, #0
 80201fa:	380b      	subs	r0, #11
 80201fc:	d017      	beq.n	802022e <__b2d+0x92>
 80201fe:	f1c0 0c20 	rsb	ip, r0, #32
 8020202:	fa04 f500 	lsl.w	r5, r4, r0
 8020206:	42be      	cmp	r6, r7
 8020208:	fa21 f40c 	lsr.w	r4, r1, ip
 802020c:	ea45 0504 	orr.w	r5, r5, r4
 8020210:	bf8c      	ite	hi
 8020212:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8020216:	2400      	movls	r4, #0
 8020218:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 802021c:	fa01 f000 	lsl.w	r0, r1, r0
 8020220:	fa24 f40c 	lsr.w	r4, r4, ip
 8020224:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8020228:	ea40 0204 	orr.w	r2, r0, r4
 802022c:	e7db      	b.n	80201e6 <__b2d+0x4a>
 802022e:	ea44 030c 	orr.w	r3, r4, ip
 8020232:	460a      	mov	r2, r1
 8020234:	e7d7      	b.n	80201e6 <__b2d+0x4a>
 8020236:	bf00      	nop
 8020238:	3ff00000 	.word	0x3ff00000

0802023c <__d2b>:
 802023c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8020240:	4689      	mov	r9, r1
 8020242:	2101      	movs	r1, #1
 8020244:	ec57 6b10 	vmov	r6, r7, d0
 8020248:	4690      	mov	r8, r2
 802024a:	f7ff fc0f 	bl	801fa6c <_Balloc>
 802024e:	4604      	mov	r4, r0
 8020250:	b930      	cbnz	r0, 8020260 <__d2b+0x24>
 8020252:	4602      	mov	r2, r0
 8020254:	4b25      	ldr	r3, [pc, #148]	; (80202ec <__d2b+0xb0>)
 8020256:	4826      	ldr	r0, [pc, #152]	; (80202f0 <__d2b+0xb4>)
 8020258:	f240 310a 	movw	r1, #778	; 0x30a
 802025c:	f7fd ff7a 	bl	801e154 <__assert_func>
 8020260:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8020264:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8020268:	bb35      	cbnz	r5, 80202b8 <__d2b+0x7c>
 802026a:	2e00      	cmp	r6, #0
 802026c:	9301      	str	r3, [sp, #4]
 802026e:	d028      	beq.n	80202c2 <__d2b+0x86>
 8020270:	4668      	mov	r0, sp
 8020272:	9600      	str	r6, [sp, #0]
 8020274:	f7ff fd10 	bl	801fc98 <__lo0bits>
 8020278:	9900      	ldr	r1, [sp, #0]
 802027a:	b300      	cbz	r0, 80202be <__d2b+0x82>
 802027c:	9a01      	ldr	r2, [sp, #4]
 802027e:	f1c0 0320 	rsb	r3, r0, #32
 8020282:	fa02 f303 	lsl.w	r3, r2, r3
 8020286:	430b      	orrs	r3, r1
 8020288:	40c2      	lsrs	r2, r0
 802028a:	6163      	str	r3, [r4, #20]
 802028c:	9201      	str	r2, [sp, #4]
 802028e:	9b01      	ldr	r3, [sp, #4]
 8020290:	61a3      	str	r3, [r4, #24]
 8020292:	2b00      	cmp	r3, #0
 8020294:	bf14      	ite	ne
 8020296:	2202      	movne	r2, #2
 8020298:	2201      	moveq	r2, #1
 802029a:	6122      	str	r2, [r4, #16]
 802029c:	b1d5      	cbz	r5, 80202d4 <__d2b+0x98>
 802029e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80202a2:	4405      	add	r5, r0
 80202a4:	f8c9 5000 	str.w	r5, [r9]
 80202a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80202ac:	f8c8 0000 	str.w	r0, [r8]
 80202b0:	4620      	mov	r0, r4
 80202b2:	b003      	add	sp, #12
 80202b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80202b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80202bc:	e7d5      	b.n	802026a <__d2b+0x2e>
 80202be:	6161      	str	r1, [r4, #20]
 80202c0:	e7e5      	b.n	802028e <__d2b+0x52>
 80202c2:	a801      	add	r0, sp, #4
 80202c4:	f7ff fce8 	bl	801fc98 <__lo0bits>
 80202c8:	9b01      	ldr	r3, [sp, #4]
 80202ca:	6163      	str	r3, [r4, #20]
 80202cc:	2201      	movs	r2, #1
 80202ce:	6122      	str	r2, [r4, #16]
 80202d0:	3020      	adds	r0, #32
 80202d2:	e7e3      	b.n	802029c <__d2b+0x60>
 80202d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80202d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80202dc:	f8c9 0000 	str.w	r0, [r9]
 80202e0:	6918      	ldr	r0, [r3, #16]
 80202e2:	f7ff fcb9 	bl	801fc58 <__hi0bits>
 80202e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80202ea:	e7df      	b.n	80202ac <__d2b+0x70>
 80202ec:	080233d4 	.word	0x080233d4
 80202f0:	08023464 	.word	0x08023464

080202f4 <__ratio>:
 80202f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202f8:	4688      	mov	r8, r1
 80202fa:	4669      	mov	r1, sp
 80202fc:	4681      	mov	r9, r0
 80202fe:	f7ff ff4d 	bl	802019c <__b2d>
 8020302:	a901      	add	r1, sp, #4
 8020304:	4640      	mov	r0, r8
 8020306:	ec55 4b10 	vmov	r4, r5, d0
 802030a:	f7ff ff47 	bl	802019c <__b2d>
 802030e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8020312:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8020316:	eba3 0c02 	sub.w	ip, r3, r2
 802031a:	e9dd 3200 	ldrd	r3, r2, [sp]
 802031e:	1a9b      	subs	r3, r3, r2
 8020320:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8020324:	ec51 0b10 	vmov	r0, r1, d0
 8020328:	2b00      	cmp	r3, #0
 802032a:	bfd6      	itet	le
 802032c:	460a      	movle	r2, r1
 802032e:	462a      	movgt	r2, r5
 8020330:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8020334:	468b      	mov	fp, r1
 8020336:	462f      	mov	r7, r5
 8020338:	bfd4      	ite	le
 802033a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 802033e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8020342:	4620      	mov	r0, r4
 8020344:	ee10 2a10 	vmov	r2, s0
 8020348:	465b      	mov	r3, fp
 802034a:	4639      	mov	r1, r7
 802034c:	f7e0 fa9e 	bl	800088c <__aeabi_ddiv>
 8020350:	ec41 0b10 	vmov	d0, r0, r1
 8020354:	b003      	add	sp, #12
 8020356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802035a <__copybits>:
 802035a:	3901      	subs	r1, #1
 802035c:	b570      	push	{r4, r5, r6, lr}
 802035e:	1149      	asrs	r1, r1, #5
 8020360:	6914      	ldr	r4, [r2, #16]
 8020362:	3101      	adds	r1, #1
 8020364:	f102 0314 	add.w	r3, r2, #20
 8020368:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802036c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8020370:	1f05      	subs	r5, r0, #4
 8020372:	42a3      	cmp	r3, r4
 8020374:	d30c      	bcc.n	8020390 <__copybits+0x36>
 8020376:	1aa3      	subs	r3, r4, r2
 8020378:	3b11      	subs	r3, #17
 802037a:	f023 0303 	bic.w	r3, r3, #3
 802037e:	3211      	adds	r2, #17
 8020380:	42a2      	cmp	r2, r4
 8020382:	bf88      	it	hi
 8020384:	2300      	movhi	r3, #0
 8020386:	4418      	add	r0, r3
 8020388:	2300      	movs	r3, #0
 802038a:	4288      	cmp	r0, r1
 802038c:	d305      	bcc.n	802039a <__copybits+0x40>
 802038e:	bd70      	pop	{r4, r5, r6, pc}
 8020390:	f853 6b04 	ldr.w	r6, [r3], #4
 8020394:	f845 6f04 	str.w	r6, [r5, #4]!
 8020398:	e7eb      	b.n	8020372 <__copybits+0x18>
 802039a:	f840 3b04 	str.w	r3, [r0], #4
 802039e:	e7f4      	b.n	802038a <__copybits+0x30>

080203a0 <__any_on>:
 80203a0:	f100 0214 	add.w	r2, r0, #20
 80203a4:	6900      	ldr	r0, [r0, #16]
 80203a6:	114b      	asrs	r3, r1, #5
 80203a8:	4298      	cmp	r0, r3
 80203aa:	b510      	push	{r4, lr}
 80203ac:	db11      	blt.n	80203d2 <__any_on+0x32>
 80203ae:	dd0a      	ble.n	80203c6 <__any_on+0x26>
 80203b0:	f011 011f 	ands.w	r1, r1, #31
 80203b4:	d007      	beq.n	80203c6 <__any_on+0x26>
 80203b6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80203ba:	fa24 f001 	lsr.w	r0, r4, r1
 80203be:	fa00 f101 	lsl.w	r1, r0, r1
 80203c2:	428c      	cmp	r4, r1
 80203c4:	d10b      	bne.n	80203de <__any_on+0x3e>
 80203c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80203ca:	4293      	cmp	r3, r2
 80203cc:	d803      	bhi.n	80203d6 <__any_on+0x36>
 80203ce:	2000      	movs	r0, #0
 80203d0:	bd10      	pop	{r4, pc}
 80203d2:	4603      	mov	r3, r0
 80203d4:	e7f7      	b.n	80203c6 <__any_on+0x26>
 80203d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80203da:	2900      	cmp	r1, #0
 80203dc:	d0f5      	beq.n	80203ca <__any_on+0x2a>
 80203de:	2001      	movs	r0, #1
 80203e0:	e7f6      	b.n	80203d0 <__any_on+0x30>

080203e2 <_calloc_r>:
 80203e2:	b513      	push	{r0, r1, r4, lr}
 80203e4:	434a      	muls	r2, r1
 80203e6:	4611      	mov	r1, r2
 80203e8:	9201      	str	r2, [sp, #4]
 80203ea:	f7fb fb5b 	bl	801baa4 <_malloc_r>
 80203ee:	4604      	mov	r4, r0
 80203f0:	b118      	cbz	r0, 80203fa <_calloc_r+0x18>
 80203f2:	9a01      	ldr	r2, [sp, #4]
 80203f4:	2100      	movs	r1, #0
 80203f6:	f7fb f87f 	bl	801b4f8 <memset>
 80203fa:	4620      	mov	r0, r4
 80203fc:	b002      	add	sp, #8
 80203fe:	bd10      	pop	{r4, pc}

08020400 <_realloc_r>:
 8020400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020402:	4607      	mov	r7, r0
 8020404:	4614      	mov	r4, r2
 8020406:	460e      	mov	r6, r1
 8020408:	b921      	cbnz	r1, 8020414 <_realloc_r+0x14>
 802040a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802040e:	4611      	mov	r1, r2
 8020410:	f7fb bb48 	b.w	801baa4 <_malloc_r>
 8020414:	b922      	cbnz	r2, 8020420 <_realloc_r+0x20>
 8020416:	f7fb faf5 	bl	801ba04 <_free_r>
 802041a:	4625      	mov	r5, r4
 802041c:	4628      	mov	r0, r5
 802041e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020420:	f000 feaa 	bl	8021178 <_malloc_usable_size_r>
 8020424:	42a0      	cmp	r0, r4
 8020426:	d20f      	bcs.n	8020448 <_realloc_r+0x48>
 8020428:	4621      	mov	r1, r4
 802042a:	4638      	mov	r0, r7
 802042c:	f7fb fb3a 	bl	801baa4 <_malloc_r>
 8020430:	4605      	mov	r5, r0
 8020432:	2800      	cmp	r0, #0
 8020434:	d0f2      	beq.n	802041c <_realloc_r+0x1c>
 8020436:	4631      	mov	r1, r6
 8020438:	4622      	mov	r2, r4
 802043a:	f7fb f835 	bl	801b4a8 <memcpy>
 802043e:	4631      	mov	r1, r6
 8020440:	4638      	mov	r0, r7
 8020442:	f7fb fadf 	bl	801ba04 <_free_r>
 8020446:	e7e9      	b.n	802041c <_realloc_r+0x1c>
 8020448:	4635      	mov	r5, r6
 802044a:	e7e7      	b.n	802041c <_realloc_r+0x1c>

0802044c <__ssputs_r>:
 802044c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020450:	688e      	ldr	r6, [r1, #8]
 8020452:	429e      	cmp	r6, r3
 8020454:	4682      	mov	sl, r0
 8020456:	460c      	mov	r4, r1
 8020458:	4690      	mov	r8, r2
 802045a:	461f      	mov	r7, r3
 802045c:	d838      	bhi.n	80204d0 <__ssputs_r+0x84>
 802045e:	898a      	ldrh	r2, [r1, #12]
 8020460:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8020464:	d032      	beq.n	80204cc <__ssputs_r+0x80>
 8020466:	6825      	ldr	r5, [r4, #0]
 8020468:	6909      	ldr	r1, [r1, #16]
 802046a:	eba5 0901 	sub.w	r9, r5, r1
 802046e:	6965      	ldr	r5, [r4, #20]
 8020470:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020474:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020478:	3301      	adds	r3, #1
 802047a:	444b      	add	r3, r9
 802047c:	106d      	asrs	r5, r5, #1
 802047e:	429d      	cmp	r5, r3
 8020480:	bf38      	it	cc
 8020482:	461d      	movcc	r5, r3
 8020484:	0553      	lsls	r3, r2, #21
 8020486:	d531      	bpl.n	80204ec <__ssputs_r+0xa0>
 8020488:	4629      	mov	r1, r5
 802048a:	f7fb fb0b 	bl	801baa4 <_malloc_r>
 802048e:	4606      	mov	r6, r0
 8020490:	b950      	cbnz	r0, 80204a8 <__ssputs_r+0x5c>
 8020492:	230c      	movs	r3, #12
 8020494:	f8ca 3000 	str.w	r3, [sl]
 8020498:	89a3      	ldrh	r3, [r4, #12]
 802049a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802049e:	81a3      	strh	r3, [r4, #12]
 80204a0:	f04f 30ff 	mov.w	r0, #4294967295
 80204a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80204a8:	6921      	ldr	r1, [r4, #16]
 80204aa:	464a      	mov	r2, r9
 80204ac:	f7fa fffc 	bl	801b4a8 <memcpy>
 80204b0:	89a3      	ldrh	r3, [r4, #12]
 80204b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80204b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80204ba:	81a3      	strh	r3, [r4, #12]
 80204bc:	6126      	str	r6, [r4, #16]
 80204be:	6165      	str	r5, [r4, #20]
 80204c0:	444e      	add	r6, r9
 80204c2:	eba5 0509 	sub.w	r5, r5, r9
 80204c6:	6026      	str	r6, [r4, #0]
 80204c8:	60a5      	str	r5, [r4, #8]
 80204ca:	463e      	mov	r6, r7
 80204cc:	42be      	cmp	r6, r7
 80204ce:	d900      	bls.n	80204d2 <__ssputs_r+0x86>
 80204d0:	463e      	mov	r6, r7
 80204d2:	4632      	mov	r2, r6
 80204d4:	6820      	ldr	r0, [r4, #0]
 80204d6:	4641      	mov	r1, r8
 80204d8:	f7fa fff4 	bl	801b4c4 <memmove>
 80204dc:	68a3      	ldr	r3, [r4, #8]
 80204de:	6822      	ldr	r2, [r4, #0]
 80204e0:	1b9b      	subs	r3, r3, r6
 80204e2:	4432      	add	r2, r6
 80204e4:	60a3      	str	r3, [r4, #8]
 80204e6:	6022      	str	r2, [r4, #0]
 80204e8:	2000      	movs	r0, #0
 80204ea:	e7db      	b.n	80204a4 <__ssputs_r+0x58>
 80204ec:	462a      	mov	r2, r5
 80204ee:	f7ff ff87 	bl	8020400 <_realloc_r>
 80204f2:	4606      	mov	r6, r0
 80204f4:	2800      	cmp	r0, #0
 80204f6:	d1e1      	bne.n	80204bc <__ssputs_r+0x70>
 80204f8:	6921      	ldr	r1, [r4, #16]
 80204fa:	4650      	mov	r0, sl
 80204fc:	f7fb fa82 	bl	801ba04 <_free_r>
 8020500:	e7c7      	b.n	8020492 <__ssputs_r+0x46>
	...

08020504 <_svfiprintf_r>:
 8020504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020508:	4698      	mov	r8, r3
 802050a:	898b      	ldrh	r3, [r1, #12]
 802050c:	061b      	lsls	r3, r3, #24
 802050e:	b09d      	sub	sp, #116	; 0x74
 8020510:	4607      	mov	r7, r0
 8020512:	460d      	mov	r5, r1
 8020514:	4614      	mov	r4, r2
 8020516:	d50e      	bpl.n	8020536 <_svfiprintf_r+0x32>
 8020518:	690b      	ldr	r3, [r1, #16]
 802051a:	b963      	cbnz	r3, 8020536 <_svfiprintf_r+0x32>
 802051c:	2140      	movs	r1, #64	; 0x40
 802051e:	f7fb fac1 	bl	801baa4 <_malloc_r>
 8020522:	6028      	str	r0, [r5, #0]
 8020524:	6128      	str	r0, [r5, #16]
 8020526:	b920      	cbnz	r0, 8020532 <_svfiprintf_r+0x2e>
 8020528:	230c      	movs	r3, #12
 802052a:	603b      	str	r3, [r7, #0]
 802052c:	f04f 30ff 	mov.w	r0, #4294967295
 8020530:	e0d1      	b.n	80206d6 <_svfiprintf_r+0x1d2>
 8020532:	2340      	movs	r3, #64	; 0x40
 8020534:	616b      	str	r3, [r5, #20]
 8020536:	2300      	movs	r3, #0
 8020538:	9309      	str	r3, [sp, #36]	; 0x24
 802053a:	2320      	movs	r3, #32
 802053c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020540:	f8cd 800c 	str.w	r8, [sp, #12]
 8020544:	2330      	movs	r3, #48	; 0x30
 8020546:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80206f0 <_svfiprintf_r+0x1ec>
 802054a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802054e:	f04f 0901 	mov.w	r9, #1
 8020552:	4623      	mov	r3, r4
 8020554:	469a      	mov	sl, r3
 8020556:	f813 2b01 	ldrb.w	r2, [r3], #1
 802055a:	b10a      	cbz	r2, 8020560 <_svfiprintf_r+0x5c>
 802055c:	2a25      	cmp	r2, #37	; 0x25
 802055e:	d1f9      	bne.n	8020554 <_svfiprintf_r+0x50>
 8020560:	ebba 0b04 	subs.w	fp, sl, r4
 8020564:	d00b      	beq.n	802057e <_svfiprintf_r+0x7a>
 8020566:	465b      	mov	r3, fp
 8020568:	4622      	mov	r2, r4
 802056a:	4629      	mov	r1, r5
 802056c:	4638      	mov	r0, r7
 802056e:	f7ff ff6d 	bl	802044c <__ssputs_r>
 8020572:	3001      	adds	r0, #1
 8020574:	f000 80aa 	beq.w	80206cc <_svfiprintf_r+0x1c8>
 8020578:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802057a:	445a      	add	r2, fp
 802057c:	9209      	str	r2, [sp, #36]	; 0x24
 802057e:	f89a 3000 	ldrb.w	r3, [sl]
 8020582:	2b00      	cmp	r3, #0
 8020584:	f000 80a2 	beq.w	80206cc <_svfiprintf_r+0x1c8>
 8020588:	2300      	movs	r3, #0
 802058a:	f04f 32ff 	mov.w	r2, #4294967295
 802058e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020592:	f10a 0a01 	add.w	sl, sl, #1
 8020596:	9304      	str	r3, [sp, #16]
 8020598:	9307      	str	r3, [sp, #28]
 802059a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802059e:	931a      	str	r3, [sp, #104]	; 0x68
 80205a0:	4654      	mov	r4, sl
 80205a2:	2205      	movs	r2, #5
 80205a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80205a8:	4851      	ldr	r0, [pc, #324]	; (80206f0 <_svfiprintf_r+0x1ec>)
 80205aa:	f7df fe39 	bl	8000220 <memchr>
 80205ae:	9a04      	ldr	r2, [sp, #16]
 80205b0:	b9d8      	cbnz	r0, 80205ea <_svfiprintf_r+0xe6>
 80205b2:	06d0      	lsls	r0, r2, #27
 80205b4:	bf44      	itt	mi
 80205b6:	2320      	movmi	r3, #32
 80205b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80205bc:	0711      	lsls	r1, r2, #28
 80205be:	bf44      	itt	mi
 80205c0:	232b      	movmi	r3, #43	; 0x2b
 80205c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80205c6:	f89a 3000 	ldrb.w	r3, [sl]
 80205ca:	2b2a      	cmp	r3, #42	; 0x2a
 80205cc:	d015      	beq.n	80205fa <_svfiprintf_r+0xf6>
 80205ce:	9a07      	ldr	r2, [sp, #28]
 80205d0:	4654      	mov	r4, sl
 80205d2:	2000      	movs	r0, #0
 80205d4:	f04f 0c0a 	mov.w	ip, #10
 80205d8:	4621      	mov	r1, r4
 80205da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80205de:	3b30      	subs	r3, #48	; 0x30
 80205e0:	2b09      	cmp	r3, #9
 80205e2:	d94e      	bls.n	8020682 <_svfiprintf_r+0x17e>
 80205e4:	b1b0      	cbz	r0, 8020614 <_svfiprintf_r+0x110>
 80205e6:	9207      	str	r2, [sp, #28]
 80205e8:	e014      	b.n	8020614 <_svfiprintf_r+0x110>
 80205ea:	eba0 0308 	sub.w	r3, r0, r8
 80205ee:	fa09 f303 	lsl.w	r3, r9, r3
 80205f2:	4313      	orrs	r3, r2
 80205f4:	9304      	str	r3, [sp, #16]
 80205f6:	46a2      	mov	sl, r4
 80205f8:	e7d2      	b.n	80205a0 <_svfiprintf_r+0x9c>
 80205fa:	9b03      	ldr	r3, [sp, #12]
 80205fc:	1d19      	adds	r1, r3, #4
 80205fe:	681b      	ldr	r3, [r3, #0]
 8020600:	9103      	str	r1, [sp, #12]
 8020602:	2b00      	cmp	r3, #0
 8020604:	bfbb      	ittet	lt
 8020606:	425b      	neglt	r3, r3
 8020608:	f042 0202 	orrlt.w	r2, r2, #2
 802060c:	9307      	strge	r3, [sp, #28]
 802060e:	9307      	strlt	r3, [sp, #28]
 8020610:	bfb8      	it	lt
 8020612:	9204      	strlt	r2, [sp, #16]
 8020614:	7823      	ldrb	r3, [r4, #0]
 8020616:	2b2e      	cmp	r3, #46	; 0x2e
 8020618:	d10c      	bne.n	8020634 <_svfiprintf_r+0x130>
 802061a:	7863      	ldrb	r3, [r4, #1]
 802061c:	2b2a      	cmp	r3, #42	; 0x2a
 802061e:	d135      	bne.n	802068c <_svfiprintf_r+0x188>
 8020620:	9b03      	ldr	r3, [sp, #12]
 8020622:	1d1a      	adds	r2, r3, #4
 8020624:	681b      	ldr	r3, [r3, #0]
 8020626:	9203      	str	r2, [sp, #12]
 8020628:	2b00      	cmp	r3, #0
 802062a:	bfb8      	it	lt
 802062c:	f04f 33ff 	movlt.w	r3, #4294967295
 8020630:	3402      	adds	r4, #2
 8020632:	9305      	str	r3, [sp, #20]
 8020634:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8020700 <_svfiprintf_r+0x1fc>
 8020638:	7821      	ldrb	r1, [r4, #0]
 802063a:	2203      	movs	r2, #3
 802063c:	4650      	mov	r0, sl
 802063e:	f7df fdef 	bl	8000220 <memchr>
 8020642:	b140      	cbz	r0, 8020656 <_svfiprintf_r+0x152>
 8020644:	2340      	movs	r3, #64	; 0x40
 8020646:	eba0 000a 	sub.w	r0, r0, sl
 802064a:	fa03 f000 	lsl.w	r0, r3, r0
 802064e:	9b04      	ldr	r3, [sp, #16]
 8020650:	4303      	orrs	r3, r0
 8020652:	3401      	adds	r4, #1
 8020654:	9304      	str	r3, [sp, #16]
 8020656:	f814 1b01 	ldrb.w	r1, [r4], #1
 802065a:	4826      	ldr	r0, [pc, #152]	; (80206f4 <_svfiprintf_r+0x1f0>)
 802065c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020660:	2206      	movs	r2, #6
 8020662:	f7df fddd 	bl	8000220 <memchr>
 8020666:	2800      	cmp	r0, #0
 8020668:	d038      	beq.n	80206dc <_svfiprintf_r+0x1d8>
 802066a:	4b23      	ldr	r3, [pc, #140]	; (80206f8 <_svfiprintf_r+0x1f4>)
 802066c:	bb1b      	cbnz	r3, 80206b6 <_svfiprintf_r+0x1b2>
 802066e:	9b03      	ldr	r3, [sp, #12]
 8020670:	3307      	adds	r3, #7
 8020672:	f023 0307 	bic.w	r3, r3, #7
 8020676:	3308      	adds	r3, #8
 8020678:	9303      	str	r3, [sp, #12]
 802067a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802067c:	4433      	add	r3, r6
 802067e:	9309      	str	r3, [sp, #36]	; 0x24
 8020680:	e767      	b.n	8020552 <_svfiprintf_r+0x4e>
 8020682:	fb0c 3202 	mla	r2, ip, r2, r3
 8020686:	460c      	mov	r4, r1
 8020688:	2001      	movs	r0, #1
 802068a:	e7a5      	b.n	80205d8 <_svfiprintf_r+0xd4>
 802068c:	2300      	movs	r3, #0
 802068e:	3401      	adds	r4, #1
 8020690:	9305      	str	r3, [sp, #20]
 8020692:	4619      	mov	r1, r3
 8020694:	f04f 0c0a 	mov.w	ip, #10
 8020698:	4620      	mov	r0, r4
 802069a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802069e:	3a30      	subs	r2, #48	; 0x30
 80206a0:	2a09      	cmp	r2, #9
 80206a2:	d903      	bls.n	80206ac <_svfiprintf_r+0x1a8>
 80206a4:	2b00      	cmp	r3, #0
 80206a6:	d0c5      	beq.n	8020634 <_svfiprintf_r+0x130>
 80206a8:	9105      	str	r1, [sp, #20]
 80206aa:	e7c3      	b.n	8020634 <_svfiprintf_r+0x130>
 80206ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80206b0:	4604      	mov	r4, r0
 80206b2:	2301      	movs	r3, #1
 80206b4:	e7f0      	b.n	8020698 <_svfiprintf_r+0x194>
 80206b6:	ab03      	add	r3, sp, #12
 80206b8:	9300      	str	r3, [sp, #0]
 80206ba:	462a      	mov	r2, r5
 80206bc:	4b0f      	ldr	r3, [pc, #60]	; (80206fc <_svfiprintf_r+0x1f8>)
 80206be:	a904      	add	r1, sp, #16
 80206c0:	4638      	mov	r0, r7
 80206c2:	f7fb fae9 	bl	801bc98 <_printf_float>
 80206c6:	1c42      	adds	r2, r0, #1
 80206c8:	4606      	mov	r6, r0
 80206ca:	d1d6      	bne.n	802067a <_svfiprintf_r+0x176>
 80206cc:	89ab      	ldrh	r3, [r5, #12]
 80206ce:	065b      	lsls	r3, r3, #25
 80206d0:	f53f af2c 	bmi.w	802052c <_svfiprintf_r+0x28>
 80206d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80206d6:	b01d      	add	sp, #116	; 0x74
 80206d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206dc:	ab03      	add	r3, sp, #12
 80206de:	9300      	str	r3, [sp, #0]
 80206e0:	462a      	mov	r2, r5
 80206e2:	4b06      	ldr	r3, [pc, #24]	; (80206fc <_svfiprintf_r+0x1f8>)
 80206e4:	a904      	add	r1, sp, #16
 80206e6:	4638      	mov	r0, r7
 80206e8:	f7fb fd7a 	bl	801c1e0 <_printf_i>
 80206ec:	e7eb      	b.n	80206c6 <_svfiprintf_r+0x1c2>
 80206ee:	bf00      	nop
 80206f0:	080235c4 	.word	0x080235c4
 80206f4:	080235ce 	.word	0x080235ce
 80206f8:	0801bc99 	.word	0x0801bc99
 80206fc:	0802044d 	.word	0x0802044d
 8020700:	080235ca 	.word	0x080235ca

08020704 <_sungetc_r>:
 8020704:	b538      	push	{r3, r4, r5, lr}
 8020706:	1c4b      	adds	r3, r1, #1
 8020708:	4614      	mov	r4, r2
 802070a:	d103      	bne.n	8020714 <_sungetc_r+0x10>
 802070c:	f04f 35ff 	mov.w	r5, #4294967295
 8020710:	4628      	mov	r0, r5
 8020712:	bd38      	pop	{r3, r4, r5, pc}
 8020714:	8993      	ldrh	r3, [r2, #12]
 8020716:	f023 0320 	bic.w	r3, r3, #32
 802071a:	8193      	strh	r3, [r2, #12]
 802071c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802071e:	6852      	ldr	r2, [r2, #4]
 8020720:	b2cd      	uxtb	r5, r1
 8020722:	b18b      	cbz	r3, 8020748 <_sungetc_r+0x44>
 8020724:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020726:	4293      	cmp	r3, r2
 8020728:	dd08      	ble.n	802073c <_sungetc_r+0x38>
 802072a:	6823      	ldr	r3, [r4, #0]
 802072c:	1e5a      	subs	r2, r3, #1
 802072e:	6022      	str	r2, [r4, #0]
 8020730:	f803 5c01 	strb.w	r5, [r3, #-1]
 8020734:	6863      	ldr	r3, [r4, #4]
 8020736:	3301      	adds	r3, #1
 8020738:	6063      	str	r3, [r4, #4]
 802073a:	e7e9      	b.n	8020710 <_sungetc_r+0xc>
 802073c:	4621      	mov	r1, r4
 802073e:	f000 fca5 	bl	802108c <__submore>
 8020742:	2800      	cmp	r0, #0
 8020744:	d0f1      	beq.n	802072a <_sungetc_r+0x26>
 8020746:	e7e1      	b.n	802070c <_sungetc_r+0x8>
 8020748:	6921      	ldr	r1, [r4, #16]
 802074a:	6823      	ldr	r3, [r4, #0]
 802074c:	b151      	cbz	r1, 8020764 <_sungetc_r+0x60>
 802074e:	4299      	cmp	r1, r3
 8020750:	d208      	bcs.n	8020764 <_sungetc_r+0x60>
 8020752:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8020756:	42a9      	cmp	r1, r5
 8020758:	d104      	bne.n	8020764 <_sungetc_r+0x60>
 802075a:	3b01      	subs	r3, #1
 802075c:	3201      	adds	r2, #1
 802075e:	6023      	str	r3, [r4, #0]
 8020760:	6062      	str	r2, [r4, #4]
 8020762:	e7d5      	b.n	8020710 <_sungetc_r+0xc>
 8020764:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8020768:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802076c:	6363      	str	r3, [r4, #52]	; 0x34
 802076e:	2303      	movs	r3, #3
 8020770:	63a3      	str	r3, [r4, #56]	; 0x38
 8020772:	4623      	mov	r3, r4
 8020774:	f803 5f46 	strb.w	r5, [r3, #70]!
 8020778:	6023      	str	r3, [r4, #0]
 802077a:	2301      	movs	r3, #1
 802077c:	e7dc      	b.n	8020738 <_sungetc_r+0x34>

0802077e <__ssrefill_r>:
 802077e:	b510      	push	{r4, lr}
 8020780:	460c      	mov	r4, r1
 8020782:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8020784:	b169      	cbz	r1, 80207a2 <__ssrefill_r+0x24>
 8020786:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802078a:	4299      	cmp	r1, r3
 802078c:	d001      	beq.n	8020792 <__ssrefill_r+0x14>
 802078e:	f7fb f939 	bl	801ba04 <_free_r>
 8020792:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020794:	6063      	str	r3, [r4, #4]
 8020796:	2000      	movs	r0, #0
 8020798:	6360      	str	r0, [r4, #52]	; 0x34
 802079a:	b113      	cbz	r3, 80207a2 <__ssrefill_r+0x24>
 802079c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802079e:	6023      	str	r3, [r4, #0]
 80207a0:	bd10      	pop	{r4, pc}
 80207a2:	6923      	ldr	r3, [r4, #16]
 80207a4:	6023      	str	r3, [r4, #0]
 80207a6:	2300      	movs	r3, #0
 80207a8:	6063      	str	r3, [r4, #4]
 80207aa:	89a3      	ldrh	r3, [r4, #12]
 80207ac:	f043 0320 	orr.w	r3, r3, #32
 80207b0:	81a3      	strh	r3, [r4, #12]
 80207b2:	f04f 30ff 	mov.w	r0, #4294967295
 80207b6:	e7f3      	b.n	80207a0 <__ssrefill_r+0x22>

080207b8 <__ssvfiscanf_r>:
 80207b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207bc:	460c      	mov	r4, r1
 80207be:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80207c2:	2100      	movs	r1, #0
 80207c4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80207c8:	49b2      	ldr	r1, [pc, #712]	; (8020a94 <__ssvfiscanf_r+0x2dc>)
 80207ca:	91a0      	str	r1, [sp, #640]	; 0x280
 80207cc:	f10d 0804 	add.w	r8, sp, #4
 80207d0:	49b1      	ldr	r1, [pc, #708]	; (8020a98 <__ssvfiscanf_r+0x2e0>)
 80207d2:	4fb2      	ldr	r7, [pc, #712]	; (8020a9c <__ssvfiscanf_r+0x2e4>)
 80207d4:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8020aa0 <__ssvfiscanf_r+0x2e8>
 80207d8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80207dc:	4606      	mov	r6, r0
 80207de:	91a1      	str	r1, [sp, #644]	; 0x284
 80207e0:	9300      	str	r3, [sp, #0]
 80207e2:	f892 a000 	ldrb.w	sl, [r2]
 80207e6:	f1ba 0f00 	cmp.w	sl, #0
 80207ea:	f000 8151 	beq.w	8020a90 <__ssvfiscanf_r+0x2d8>
 80207ee:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80207f2:	f013 0308 	ands.w	r3, r3, #8
 80207f6:	f102 0501 	add.w	r5, r2, #1
 80207fa:	d019      	beq.n	8020830 <__ssvfiscanf_r+0x78>
 80207fc:	6863      	ldr	r3, [r4, #4]
 80207fe:	2b00      	cmp	r3, #0
 8020800:	dd0f      	ble.n	8020822 <__ssvfiscanf_r+0x6a>
 8020802:	6823      	ldr	r3, [r4, #0]
 8020804:	781a      	ldrb	r2, [r3, #0]
 8020806:	5cba      	ldrb	r2, [r7, r2]
 8020808:	0712      	lsls	r2, r2, #28
 802080a:	d401      	bmi.n	8020810 <__ssvfiscanf_r+0x58>
 802080c:	462a      	mov	r2, r5
 802080e:	e7e8      	b.n	80207e2 <__ssvfiscanf_r+0x2a>
 8020810:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020812:	3201      	adds	r2, #1
 8020814:	9245      	str	r2, [sp, #276]	; 0x114
 8020816:	6862      	ldr	r2, [r4, #4]
 8020818:	3301      	adds	r3, #1
 802081a:	3a01      	subs	r2, #1
 802081c:	6062      	str	r2, [r4, #4]
 802081e:	6023      	str	r3, [r4, #0]
 8020820:	e7ec      	b.n	80207fc <__ssvfiscanf_r+0x44>
 8020822:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020824:	4621      	mov	r1, r4
 8020826:	4630      	mov	r0, r6
 8020828:	4798      	blx	r3
 802082a:	2800      	cmp	r0, #0
 802082c:	d0e9      	beq.n	8020802 <__ssvfiscanf_r+0x4a>
 802082e:	e7ed      	b.n	802080c <__ssvfiscanf_r+0x54>
 8020830:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8020834:	f040 8083 	bne.w	802093e <__ssvfiscanf_r+0x186>
 8020838:	9341      	str	r3, [sp, #260]	; 0x104
 802083a:	9343      	str	r3, [sp, #268]	; 0x10c
 802083c:	7853      	ldrb	r3, [r2, #1]
 802083e:	2b2a      	cmp	r3, #42	; 0x2a
 8020840:	bf02      	ittt	eq
 8020842:	2310      	moveq	r3, #16
 8020844:	1c95      	addeq	r5, r2, #2
 8020846:	9341      	streq	r3, [sp, #260]	; 0x104
 8020848:	220a      	movs	r2, #10
 802084a:	46ab      	mov	fp, r5
 802084c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8020850:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8020854:	2b09      	cmp	r3, #9
 8020856:	d91d      	bls.n	8020894 <__ssvfiscanf_r+0xdc>
 8020858:	4891      	ldr	r0, [pc, #580]	; (8020aa0 <__ssvfiscanf_r+0x2e8>)
 802085a:	2203      	movs	r2, #3
 802085c:	f7df fce0 	bl	8000220 <memchr>
 8020860:	b140      	cbz	r0, 8020874 <__ssvfiscanf_r+0xbc>
 8020862:	2301      	movs	r3, #1
 8020864:	eba0 0009 	sub.w	r0, r0, r9
 8020868:	fa03 f000 	lsl.w	r0, r3, r0
 802086c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802086e:	4318      	orrs	r0, r3
 8020870:	9041      	str	r0, [sp, #260]	; 0x104
 8020872:	465d      	mov	r5, fp
 8020874:	f815 3b01 	ldrb.w	r3, [r5], #1
 8020878:	2b78      	cmp	r3, #120	; 0x78
 802087a:	d806      	bhi.n	802088a <__ssvfiscanf_r+0xd2>
 802087c:	2b57      	cmp	r3, #87	; 0x57
 802087e:	d810      	bhi.n	80208a2 <__ssvfiscanf_r+0xea>
 8020880:	2b25      	cmp	r3, #37	; 0x25
 8020882:	d05c      	beq.n	802093e <__ssvfiscanf_r+0x186>
 8020884:	d856      	bhi.n	8020934 <__ssvfiscanf_r+0x17c>
 8020886:	2b00      	cmp	r3, #0
 8020888:	d074      	beq.n	8020974 <__ssvfiscanf_r+0x1bc>
 802088a:	2303      	movs	r3, #3
 802088c:	9347      	str	r3, [sp, #284]	; 0x11c
 802088e:	230a      	movs	r3, #10
 8020890:	9342      	str	r3, [sp, #264]	; 0x108
 8020892:	e081      	b.n	8020998 <__ssvfiscanf_r+0x1e0>
 8020894:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8020896:	fb02 1303 	mla	r3, r2, r3, r1
 802089a:	3b30      	subs	r3, #48	; 0x30
 802089c:	9343      	str	r3, [sp, #268]	; 0x10c
 802089e:	465d      	mov	r5, fp
 80208a0:	e7d3      	b.n	802084a <__ssvfiscanf_r+0x92>
 80208a2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80208a6:	2a20      	cmp	r2, #32
 80208a8:	d8ef      	bhi.n	802088a <__ssvfiscanf_r+0xd2>
 80208aa:	a101      	add	r1, pc, #4	; (adr r1, 80208b0 <__ssvfiscanf_r+0xf8>)
 80208ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80208b0:	08020983 	.word	0x08020983
 80208b4:	0802088b 	.word	0x0802088b
 80208b8:	0802088b 	.word	0x0802088b
 80208bc:	080209e1 	.word	0x080209e1
 80208c0:	0802088b 	.word	0x0802088b
 80208c4:	0802088b 	.word	0x0802088b
 80208c8:	0802088b 	.word	0x0802088b
 80208cc:	0802088b 	.word	0x0802088b
 80208d0:	0802088b 	.word	0x0802088b
 80208d4:	0802088b 	.word	0x0802088b
 80208d8:	0802088b 	.word	0x0802088b
 80208dc:	080209f7 	.word	0x080209f7
 80208e0:	080209cd 	.word	0x080209cd
 80208e4:	0802093b 	.word	0x0802093b
 80208e8:	0802093b 	.word	0x0802093b
 80208ec:	0802093b 	.word	0x0802093b
 80208f0:	0802088b 	.word	0x0802088b
 80208f4:	080209d1 	.word	0x080209d1
 80208f8:	0802088b 	.word	0x0802088b
 80208fc:	0802088b 	.word	0x0802088b
 8020900:	0802088b 	.word	0x0802088b
 8020904:	0802088b 	.word	0x0802088b
 8020908:	08020a07 	.word	0x08020a07
 802090c:	080209d9 	.word	0x080209d9
 8020910:	0802097b 	.word	0x0802097b
 8020914:	0802088b 	.word	0x0802088b
 8020918:	0802088b 	.word	0x0802088b
 802091c:	08020a03 	.word	0x08020a03
 8020920:	0802088b 	.word	0x0802088b
 8020924:	080209cd 	.word	0x080209cd
 8020928:	0802088b 	.word	0x0802088b
 802092c:	0802088b 	.word	0x0802088b
 8020930:	08020983 	.word	0x08020983
 8020934:	3b45      	subs	r3, #69	; 0x45
 8020936:	2b02      	cmp	r3, #2
 8020938:	d8a7      	bhi.n	802088a <__ssvfiscanf_r+0xd2>
 802093a:	2305      	movs	r3, #5
 802093c:	e02b      	b.n	8020996 <__ssvfiscanf_r+0x1de>
 802093e:	6863      	ldr	r3, [r4, #4]
 8020940:	2b00      	cmp	r3, #0
 8020942:	dd0d      	ble.n	8020960 <__ssvfiscanf_r+0x1a8>
 8020944:	6823      	ldr	r3, [r4, #0]
 8020946:	781a      	ldrb	r2, [r3, #0]
 8020948:	4552      	cmp	r2, sl
 802094a:	f040 80a1 	bne.w	8020a90 <__ssvfiscanf_r+0x2d8>
 802094e:	3301      	adds	r3, #1
 8020950:	6862      	ldr	r2, [r4, #4]
 8020952:	6023      	str	r3, [r4, #0]
 8020954:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8020956:	3a01      	subs	r2, #1
 8020958:	3301      	adds	r3, #1
 802095a:	6062      	str	r2, [r4, #4]
 802095c:	9345      	str	r3, [sp, #276]	; 0x114
 802095e:	e755      	b.n	802080c <__ssvfiscanf_r+0x54>
 8020960:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020962:	4621      	mov	r1, r4
 8020964:	4630      	mov	r0, r6
 8020966:	4798      	blx	r3
 8020968:	2800      	cmp	r0, #0
 802096a:	d0eb      	beq.n	8020944 <__ssvfiscanf_r+0x18c>
 802096c:	9844      	ldr	r0, [sp, #272]	; 0x110
 802096e:	2800      	cmp	r0, #0
 8020970:	f040 8084 	bne.w	8020a7c <__ssvfiscanf_r+0x2c4>
 8020974:	f04f 30ff 	mov.w	r0, #4294967295
 8020978:	e086      	b.n	8020a88 <__ssvfiscanf_r+0x2d0>
 802097a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802097c:	f042 0220 	orr.w	r2, r2, #32
 8020980:	9241      	str	r2, [sp, #260]	; 0x104
 8020982:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8020984:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020988:	9241      	str	r2, [sp, #260]	; 0x104
 802098a:	2210      	movs	r2, #16
 802098c:	2b6f      	cmp	r3, #111	; 0x6f
 802098e:	9242      	str	r2, [sp, #264]	; 0x108
 8020990:	bf34      	ite	cc
 8020992:	2303      	movcc	r3, #3
 8020994:	2304      	movcs	r3, #4
 8020996:	9347      	str	r3, [sp, #284]	; 0x11c
 8020998:	6863      	ldr	r3, [r4, #4]
 802099a:	2b00      	cmp	r3, #0
 802099c:	dd41      	ble.n	8020a22 <__ssvfiscanf_r+0x26a>
 802099e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80209a0:	0659      	lsls	r1, r3, #25
 80209a2:	d404      	bmi.n	80209ae <__ssvfiscanf_r+0x1f6>
 80209a4:	6823      	ldr	r3, [r4, #0]
 80209a6:	781a      	ldrb	r2, [r3, #0]
 80209a8:	5cba      	ldrb	r2, [r7, r2]
 80209aa:	0712      	lsls	r2, r2, #28
 80209ac:	d440      	bmi.n	8020a30 <__ssvfiscanf_r+0x278>
 80209ae:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80209b0:	2b02      	cmp	r3, #2
 80209b2:	dc4f      	bgt.n	8020a54 <__ssvfiscanf_r+0x29c>
 80209b4:	466b      	mov	r3, sp
 80209b6:	4622      	mov	r2, r4
 80209b8:	a941      	add	r1, sp, #260	; 0x104
 80209ba:	4630      	mov	r0, r6
 80209bc:	f000 f9ce 	bl	8020d5c <_scanf_chars>
 80209c0:	2801      	cmp	r0, #1
 80209c2:	d065      	beq.n	8020a90 <__ssvfiscanf_r+0x2d8>
 80209c4:	2802      	cmp	r0, #2
 80209c6:	f47f af21 	bne.w	802080c <__ssvfiscanf_r+0x54>
 80209ca:	e7cf      	b.n	802096c <__ssvfiscanf_r+0x1b4>
 80209cc:	220a      	movs	r2, #10
 80209ce:	e7dd      	b.n	802098c <__ssvfiscanf_r+0x1d4>
 80209d0:	2300      	movs	r3, #0
 80209d2:	9342      	str	r3, [sp, #264]	; 0x108
 80209d4:	2303      	movs	r3, #3
 80209d6:	e7de      	b.n	8020996 <__ssvfiscanf_r+0x1de>
 80209d8:	2308      	movs	r3, #8
 80209da:	9342      	str	r3, [sp, #264]	; 0x108
 80209dc:	2304      	movs	r3, #4
 80209de:	e7da      	b.n	8020996 <__ssvfiscanf_r+0x1de>
 80209e0:	4629      	mov	r1, r5
 80209e2:	4640      	mov	r0, r8
 80209e4:	f000 fb18 	bl	8021018 <__sccl>
 80209e8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80209ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80209ee:	9341      	str	r3, [sp, #260]	; 0x104
 80209f0:	4605      	mov	r5, r0
 80209f2:	2301      	movs	r3, #1
 80209f4:	e7cf      	b.n	8020996 <__ssvfiscanf_r+0x1de>
 80209f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80209f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80209fc:	9341      	str	r3, [sp, #260]	; 0x104
 80209fe:	2300      	movs	r3, #0
 8020a00:	e7c9      	b.n	8020996 <__ssvfiscanf_r+0x1de>
 8020a02:	2302      	movs	r3, #2
 8020a04:	e7c7      	b.n	8020996 <__ssvfiscanf_r+0x1de>
 8020a06:	9841      	ldr	r0, [sp, #260]	; 0x104
 8020a08:	06c3      	lsls	r3, r0, #27
 8020a0a:	f53f aeff 	bmi.w	802080c <__ssvfiscanf_r+0x54>
 8020a0e:	9b00      	ldr	r3, [sp, #0]
 8020a10:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020a12:	1d19      	adds	r1, r3, #4
 8020a14:	9100      	str	r1, [sp, #0]
 8020a16:	681b      	ldr	r3, [r3, #0]
 8020a18:	07c0      	lsls	r0, r0, #31
 8020a1a:	bf4c      	ite	mi
 8020a1c:	801a      	strhmi	r2, [r3, #0]
 8020a1e:	601a      	strpl	r2, [r3, #0]
 8020a20:	e6f4      	b.n	802080c <__ssvfiscanf_r+0x54>
 8020a22:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020a24:	4621      	mov	r1, r4
 8020a26:	4630      	mov	r0, r6
 8020a28:	4798      	blx	r3
 8020a2a:	2800      	cmp	r0, #0
 8020a2c:	d0b7      	beq.n	802099e <__ssvfiscanf_r+0x1e6>
 8020a2e:	e79d      	b.n	802096c <__ssvfiscanf_r+0x1b4>
 8020a30:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020a32:	3201      	adds	r2, #1
 8020a34:	9245      	str	r2, [sp, #276]	; 0x114
 8020a36:	6862      	ldr	r2, [r4, #4]
 8020a38:	3a01      	subs	r2, #1
 8020a3a:	2a00      	cmp	r2, #0
 8020a3c:	6062      	str	r2, [r4, #4]
 8020a3e:	dd02      	ble.n	8020a46 <__ssvfiscanf_r+0x28e>
 8020a40:	3301      	adds	r3, #1
 8020a42:	6023      	str	r3, [r4, #0]
 8020a44:	e7ae      	b.n	80209a4 <__ssvfiscanf_r+0x1ec>
 8020a46:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020a48:	4621      	mov	r1, r4
 8020a4a:	4630      	mov	r0, r6
 8020a4c:	4798      	blx	r3
 8020a4e:	2800      	cmp	r0, #0
 8020a50:	d0a8      	beq.n	80209a4 <__ssvfiscanf_r+0x1ec>
 8020a52:	e78b      	b.n	802096c <__ssvfiscanf_r+0x1b4>
 8020a54:	2b04      	cmp	r3, #4
 8020a56:	dc06      	bgt.n	8020a66 <__ssvfiscanf_r+0x2ae>
 8020a58:	466b      	mov	r3, sp
 8020a5a:	4622      	mov	r2, r4
 8020a5c:	a941      	add	r1, sp, #260	; 0x104
 8020a5e:	4630      	mov	r0, r6
 8020a60:	f000 f9d4 	bl	8020e0c <_scanf_i>
 8020a64:	e7ac      	b.n	80209c0 <__ssvfiscanf_r+0x208>
 8020a66:	4b0f      	ldr	r3, [pc, #60]	; (8020aa4 <__ssvfiscanf_r+0x2ec>)
 8020a68:	2b00      	cmp	r3, #0
 8020a6a:	f43f aecf 	beq.w	802080c <__ssvfiscanf_r+0x54>
 8020a6e:	466b      	mov	r3, sp
 8020a70:	4622      	mov	r2, r4
 8020a72:	a941      	add	r1, sp, #260	; 0x104
 8020a74:	4630      	mov	r0, r6
 8020a76:	f7fb fcd9 	bl	801c42c <_scanf_float>
 8020a7a:	e7a1      	b.n	80209c0 <__ssvfiscanf_r+0x208>
 8020a7c:	89a3      	ldrh	r3, [r4, #12]
 8020a7e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8020a82:	bf18      	it	ne
 8020a84:	f04f 30ff 	movne.w	r0, #4294967295
 8020a88:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8020a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a90:	9844      	ldr	r0, [sp, #272]	; 0x110
 8020a92:	e7f9      	b.n	8020a88 <__ssvfiscanf_r+0x2d0>
 8020a94:	08020705 	.word	0x08020705
 8020a98:	0802077f 	.word	0x0802077f
 8020a9c:	08022fc9 	.word	0x08022fc9
 8020aa0:	080235ca 	.word	0x080235ca
 8020aa4:	0801c42d 	.word	0x0801c42d

08020aa8 <__sfputc_r>:
 8020aa8:	6893      	ldr	r3, [r2, #8]
 8020aaa:	3b01      	subs	r3, #1
 8020aac:	2b00      	cmp	r3, #0
 8020aae:	b410      	push	{r4}
 8020ab0:	6093      	str	r3, [r2, #8]
 8020ab2:	da08      	bge.n	8020ac6 <__sfputc_r+0x1e>
 8020ab4:	6994      	ldr	r4, [r2, #24]
 8020ab6:	42a3      	cmp	r3, r4
 8020ab8:	db01      	blt.n	8020abe <__sfputc_r+0x16>
 8020aba:	290a      	cmp	r1, #10
 8020abc:	d103      	bne.n	8020ac6 <__sfputc_r+0x1e>
 8020abe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020ac2:	f7fd ba75 	b.w	801dfb0 <__swbuf_r>
 8020ac6:	6813      	ldr	r3, [r2, #0]
 8020ac8:	1c58      	adds	r0, r3, #1
 8020aca:	6010      	str	r0, [r2, #0]
 8020acc:	7019      	strb	r1, [r3, #0]
 8020ace:	4608      	mov	r0, r1
 8020ad0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020ad4:	4770      	bx	lr

08020ad6 <__sfputs_r>:
 8020ad6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020ad8:	4606      	mov	r6, r0
 8020ada:	460f      	mov	r7, r1
 8020adc:	4614      	mov	r4, r2
 8020ade:	18d5      	adds	r5, r2, r3
 8020ae0:	42ac      	cmp	r4, r5
 8020ae2:	d101      	bne.n	8020ae8 <__sfputs_r+0x12>
 8020ae4:	2000      	movs	r0, #0
 8020ae6:	e007      	b.n	8020af8 <__sfputs_r+0x22>
 8020ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020aec:	463a      	mov	r2, r7
 8020aee:	4630      	mov	r0, r6
 8020af0:	f7ff ffda 	bl	8020aa8 <__sfputc_r>
 8020af4:	1c43      	adds	r3, r0, #1
 8020af6:	d1f3      	bne.n	8020ae0 <__sfputs_r+0xa>
 8020af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020afc <_vfiprintf_r>:
 8020afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b00:	460d      	mov	r5, r1
 8020b02:	b09d      	sub	sp, #116	; 0x74
 8020b04:	4614      	mov	r4, r2
 8020b06:	4698      	mov	r8, r3
 8020b08:	4606      	mov	r6, r0
 8020b0a:	b118      	cbz	r0, 8020b14 <_vfiprintf_r+0x18>
 8020b0c:	6983      	ldr	r3, [r0, #24]
 8020b0e:	b90b      	cbnz	r3, 8020b14 <_vfiprintf_r+0x18>
 8020b10:	f7fa fad6 	bl	801b0c0 <__sinit>
 8020b14:	4b89      	ldr	r3, [pc, #548]	; (8020d3c <_vfiprintf_r+0x240>)
 8020b16:	429d      	cmp	r5, r3
 8020b18:	d11b      	bne.n	8020b52 <_vfiprintf_r+0x56>
 8020b1a:	6875      	ldr	r5, [r6, #4]
 8020b1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020b1e:	07d9      	lsls	r1, r3, #31
 8020b20:	d405      	bmi.n	8020b2e <_vfiprintf_r+0x32>
 8020b22:	89ab      	ldrh	r3, [r5, #12]
 8020b24:	059a      	lsls	r2, r3, #22
 8020b26:	d402      	bmi.n	8020b2e <_vfiprintf_r+0x32>
 8020b28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020b2a:	f7fa fca9 	bl	801b480 <__retarget_lock_acquire_recursive>
 8020b2e:	89ab      	ldrh	r3, [r5, #12]
 8020b30:	071b      	lsls	r3, r3, #28
 8020b32:	d501      	bpl.n	8020b38 <_vfiprintf_r+0x3c>
 8020b34:	692b      	ldr	r3, [r5, #16]
 8020b36:	b9eb      	cbnz	r3, 8020b74 <_vfiprintf_r+0x78>
 8020b38:	4629      	mov	r1, r5
 8020b3a:	4630      	mov	r0, r6
 8020b3c:	f7fd fa9c 	bl	801e078 <__swsetup_r>
 8020b40:	b1c0      	cbz	r0, 8020b74 <_vfiprintf_r+0x78>
 8020b42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020b44:	07dc      	lsls	r4, r3, #31
 8020b46:	d50e      	bpl.n	8020b66 <_vfiprintf_r+0x6a>
 8020b48:	f04f 30ff 	mov.w	r0, #4294967295
 8020b4c:	b01d      	add	sp, #116	; 0x74
 8020b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b52:	4b7b      	ldr	r3, [pc, #492]	; (8020d40 <_vfiprintf_r+0x244>)
 8020b54:	429d      	cmp	r5, r3
 8020b56:	d101      	bne.n	8020b5c <_vfiprintf_r+0x60>
 8020b58:	68b5      	ldr	r5, [r6, #8]
 8020b5a:	e7df      	b.n	8020b1c <_vfiprintf_r+0x20>
 8020b5c:	4b79      	ldr	r3, [pc, #484]	; (8020d44 <_vfiprintf_r+0x248>)
 8020b5e:	429d      	cmp	r5, r3
 8020b60:	bf08      	it	eq
 8020b62:	68f5      	ldreq	r5, [r6, #12]
 8020b64:	e7da      	b.n	8020b1c <_vfiprintf_r+0x20>
 8020b66:	89ab      	ldrh	r3, [r5, #12]
 8020b68:	0598      	lsls	r0, r3, #22
 8020b6a:	d4ed      	bmi.n	8020b48 <_vfiprintf_r+0x4c>
 8020b6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020b6e:	f7fa fc89 	bl	801b484 <__retarget_lock_release_recursive>
 8020b72:	e7e9      	b.n	8020b48 <_vfiprintf_r+0x4c>
 8020b74:	2300      	movs	r3, #0
 8020b76:	9309      	str	r3, [sp, #36]	; 0x24
 8020b78:	2320      	movs	r3, #32
 8020b7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020b7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8020b82:	2330      	movs	r3, #48	; 0x30
 8020b84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8020d48 <_vfiprintf_r+0x24c>
 8020b88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020b8c:	f04f 0901 	mov.w	r9, #1
 8020b90:	4623      	mov	r3, r4
 8020b92:	469a      	mov	sl, r3
 8020b94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020b98:	b10a      	cbz	r2, 8020b9e <_vfiprintf_r+0xa2>
 8020b9a:	2a25      	cmp	r2, #37	; 0x25
 8020b9c:	d1f9      	bne.n	8020b92 <_vfiprintf_r+0x96>
 8020b9e:	ebba 0b04 	subs.w	fp, sl, r4
 8020ba2:	d00b      	beq.n	8020bbc <_vfiprintf_r+0xc0>
 8020ba4:	465b      	mov	r3, fp
 8020ba6:	4622      	mov	r2, r4
 8020ba8:	4629      	mov	r1, r5
 8020baa:	4630      	mov	r0, r6
 8020bac:	f7ff ff93 	bl	8020ad6 <__sfputs_r>
 8020bb0:	3001      	adds	r0, #1
 8020bb2:	f000 80aa 	beq.w	8020d0a <_vfiprintf_r+0x20e>
 8020bb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020bb8:	445a      	add	r2, fp
 8020bba:	9209      	str	r2, [sp, #36]	; 0x24
 8020bbc:	f89a 3000 	ldrb.w	r3, [sl]
 8020bc0:	2b00      	cmp	r3, #0
 8020bc2:	f000 80a2 	beq.w	8020d0a <_vfiprintf_r+0x20e>
 8020bc6:	2300      	movs	r3, #0
 8020bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8020bcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020bd0:	f10a 0a01 	add.w	sl, sl, #1
 8020bd4:	9304      	str	r3, [sp, #16]
 8020bd6:	9307      	str	r3, [sp, #28]
 8020bd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020bdc:	931a      	str	r3, [sp, #104]	; 0x68
 8020bde:	4654      	mov	r4, sl
 8020be0:	2205      	movs	r2, #5
 8020be2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020be6:	4858      	ldr	r0, [pc, #352]	; (8020d48 <_vfiprintf_r+0x24c>)
 8020be8:	f7df fb1a 	bl	8000220 <memchr>
 8020bec:	9a04      	ldr	r2, [sp, #16]
 8020bee:	b9d8      	cbnz	r0, 8020c28 <_vfiprintf_r+0x12c>
 8020bf0:	06d1      	lsls	r1, r2, #27
 8020bf2:	bf44      	itt	mi
 8020bf4:	2320      	movmi	r3, #32
 8020bf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020bfa:	0713      	lsls	r3, r2, #28
 8020bfc:	bf44      	itt	mi
 8020bfe:	232b      	movmi	r3, #43	; 0x2b
 8020c00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020c04:	f89a 3000 	ldrb.w	r3, [sl]
 8020c08:	2b2a      	cmp	r3, #42	; 0x2a
 8020c0a:	d015      	beq.n	8020c38 <_vfiprintf_r+0x13c>
 8020c0c:	9a07      	ldr	r2, [sp, #28]
 8020c0e:	4654      	mov	r4, sl
 8020c10:	2000      	movs	r0, #0
 8020c12:	f04f 0c0a 	mov.w	ip, #10
 8020c16:	4621      	mov	r1, r4
 8020c18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020c1c:	3b30      	subs	r3, #48	; 0x30
 8020c1e:	2b09      	cmp	r3, #9
 8020c20:	d94e      	bls.n	8020cc0 <_vfiprintf_r+0x1c4>
 8020c22:	b1b0      	cbz	r0, 8020c52 <_vfiprintf_r+0x156>
 8020c24:	9207      	str	r2, [sp, #28]
 8020c26:	e014      	b.n	8020c52 <_vfiprintf_r+0x156>
 8020c28:	eba0 0308 	sub.w	r3, r0, r8
 8020c2c:	fa09 f303 	lsl.w	r3, r9, r3
 8020c30:	4313      	orrs	r3, r2
 8020c32:	9304      	str	r3, [sp, #16]
 8020c34:	46a2      	mov	sl, r4
 8020c36:	e7d2      	b.n	8020bde <_vfiprintf_r+0xe2>
 8020c38:	9b03      	ldr	r3, [sp, #12]
 8020c3a:	1d19      	adds	r1, r3, #4
 8020c3c:	681b      	ldr	r3, [r3, #0]
 8020c3e:	9103      	str	r1, [sp, #12]
 8020c40:	2b00      	cmp	r3, #0
 8020c42:	bfbb      	ittet	lt
 8020c44:	425b      	neglt	r3, r3
 8020c46:	f042 0202 	orrlt.w	r2, r2, #2
 8020c4a:	9307      	strge	r3, [sp, #28]
 8020c4c:	9307      	strlt	r3, [sp, #28]
 8020c4e:	bfb8      	it	lt
 8020c50:	9204      	strlt	r2, [sp, #16]
 8020c52:	7823      	ldrb	r3, [r4, #0]
 8020c54:	2b2e      	cmp	r3, #46	; 0x2e
 8020c56:	d10c      	bne.n	8020c72 <_vfiprintf_r+0x176>
 8020c58:	7863      	ldrb	r3, [r4, #1]
 8020c5a:	2b2a      	cmp	r3, #42	; 0x2a
 8020c5c:	d135      	bne.n	8020cca <_vfiprintf_r+0x1ce>
 8020c5e:	9b03      	ldr	r3, [sp, #12]
 8020c60:	1d1a      	adds	r2, r3, #4
 8020c62:	681b      	ldr	r3, [r3, #0]
 8020c64:	9203      	str	r2, [sp, #12]
 8020c66:	2b00      	cmp	r3, #0
 8020c68:	bfb8      	it	lt
 8020c6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8020c6e:	3402      	adds	r4, #2
 8020c70:	9305      	str	r3, [sp, #20]
 8020c72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8020d58 <_vfiprintf_r+0x25c>
 8020c76:	7821      	ldrb	r1, [r4, #0]
 8020c78:	2203      	movs	r2, #3
 8020c7a:	4650      	mov	r0, sl
 8020c7c:	f7df fad0 	bl	8000220 <memchr>
 8020c80:	b140      	cbz	r0, 8020c94 <_vfiprintf_r+0x198>
 8020c82:	2340      	movs	r3, #64	; 0x40
 8020c84:	eba0 000a 	sub.w	r0, r0, sl
 8020c88:	fa03 f000 	lsl.w	r0, r3, r0
 8020c8c:	9b04      	ldr	r3, [sp, #16]
 8020c8e:	4303      	orrs	r3, r0
 8020c90:	3401      	adds	r4, #1
 8020c92:	9304      	str	r3, [sp, #16]
 8020c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020c98:	482c      	ldr	r0, [pc, #176]	; (8020d4c <_vfiprintf_r+0x250>)
 8020c9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020c9e:	2206      	movs	r2, #6
 8020ca0:	f7df fabe 	bl	8000220 <memchr>
 8020ca4:	2800      	cmp	r0, #0
 8020ca6:	d03f      	beq.n	8020d28 <_vfiprintf_r+0x22c>
 8020ca8:	4b29      	ldr	r3, [pc, #164]	; (8020d50 <_vfiprintf_r+0x254>)
 8020caa:	bb1b      	cbnz	r3, 8020cf4 <_vfiprintf_r+0x1f8>
 8020cac:	9b03      	ldr	r3, [sp, #12]
 8020cae:	3307      	adds	r3, #7
 8020cb0:	f023 0307 	bic.w	r3, r3, #7
 8020cb4:	3308      	adds	r3, #8
 8020cb6:	9303      	str	r3, [sp, #12]
 8020cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020cba:	443b      	add	r3, r7
 8020cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8020cbe:	e767      	b.n	8020b90 <_vfiprintf_r+0x94>
 8020cc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8020cc4:	460c      	mov	r4, r1
 8020cc6:	2001      	movs	r0, #1
 8020cc8:	e7a5      	b.n	8020c16 <_vfiprintf_r+0x11a>
 8020cca:	2300      	movs	r3, #0
 8020ccc:	3401      	adds	r4, #1
 8020cce:	9305      	str	r3, [sp, #20]
 8020cd0:	4619      	mov	r1, r3
 8020cd2:	f04f 0c0a 	mov.w	ip, #10
 8020cd6:	4620      	mov	r0, r4
 8020cd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020cdc:	3a30      	subs	r2, #48	; 0x30
 8020cde:	2a09      	cmp	r2, #9
 8020ce0:	d903      	bls.n	8020cea <_vfiprintf_r+0x1ee>
 8020ce2:	2b00      	cmp	r3, #0
 8020ce4:	d0c5      	beq.n	8020c72 <_vfiprintf_r+0x176>
 8020ce6:	9105      	str	r1, [sp, #20]
 8020ce8:	e7c3      	b.n	8020c72 <_vfiprintf_r+0x176>
 8020cea:	fb0c 2101 	mla	r1, ip, r1, r2
 8020cee:	4604      	mov	r4, r0
 8020cf0:	2301      	movs	r3, #1
 8020cf2:	e7f0      	b.n	8020cd6 <_vfiprintf_r+0x1da>
 8020cf4:	ab03      	add	r3, sp, #12
 8020cf6:	9300      	str	r3, [sp, #0]
 8020cf8:	462a      	mov	r2, r5
 8020cfa:	4b16      	ldr	r3, [pc, #88]	; (8020d54 <_vfiprintf_r+0x258>)
 8020cfc:	a904      	add	r1, sp, #16
 8020cfe:	4630      	mov	r0, r6
 8020d00:	f7fa ffca 	bl	801bc98 <_printf_float>
 8020d04:	4607      	mov	r7, r0
 8020d06:	1c78      	adds	r0, r7, #1
 8020d08:	d1d6      	bne.n	8020cb8 <_vfiprintf_r+0x1bc>
 8020d0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020d0c:	07d9      	lsls	r1, r3, #31
 8020d0e:	d405      	bmi.n	8020d1c <_vfiprintf_r+0x220>
 8020d10:	89ab      	ldrh	r3, [r5, #12]
 8020d12:	059a      	lsls	r2, r3, #22
 8020d14:	d402      	bmi.n	8020d1c <_vfiprintf_r+0x220>
 8020d16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020d18:	f7fa fbb4 	bl	801b484 <__retarget_lock_release_recursive>
 8020d1c:	89ab      	ldrh	r3, [r5, #12]
 8020d1e:	065b      	lsls	r3, r3, #25
 8020d20:	f53f af12 	bmi.w	8020b48 <_vfiprintf_r+0x4c>
 8020d24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020d26:	e711      	b.n	8020b4c <_vfiprintf_r+0x50>
 8020d28:	ab03      	add	r3, sp, #12
 8020d2a:	9300      	str	r3, [sp, #0]
 8020d2c:	462a      	mov	r2, r5
 8020d2e:	4b09      	ldr	r3, [pc, #36]	; (8020d54 <_vfiprintf_r+0x258>)
 8020d30:	a904      	add	r1, sp, #16
 8020d32:	4630      	mov	r0, r6
 8020d34:	f7fb fa54 	bl	801c1e0 <_printf_i>
 8020d38:	e7e4      	b.n	8020d04 <_vfiprintf_r+0x208>
 8020d3a:	bf00      	nop
 8020d3c:	080230ec 	.word	0x080230ec
 8020d40:	0802310c 	.word	0x0802310c
 8020d44:	080230cc 	.word	0x080230cc
 8020d48:	080235c4 	.word	0x080235c4
 8020d4c:	080235ce 	.word	0x080235ce
 8020d50:	0801bc99 	.word	0x0801bc99
 8020d54:	08020ad7 	.word	0x08020ad7
 8020d58:	080235ca 	.word	0x080235ca

08020d5c <_scanf_chars>:
 8020d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020d60:	4615      	mov	r5, r2
 8020d62:	688a      	ldr	r2, [r1, #8]
 8020d64:	4680      	mov	r8, r0
 8020d66:	460c      	mov	r4, r1
 8020d68:	b932      	cbnz	r2, 8020d78 <_scanf_chars+0x1c>
 8020d6a:	698a      	ldr	r2, [r1, #24]
 8020d6c:	2a00      	cmp	r2, #0
 8020d6e:	bf0c      	ite	eq
 8020d70:	2201      	moveq	r2, #1
 8020d72:	f04f 32ff 	movne.w	r2, #4294967295
 8020d76:	608a      	str	r2, [r1, #8]
 8020d78:	6822      	ldr	r2, [r4, #0]
 8020d7a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8020e08 <_scanf_chars+0xac>
 8020d7e:	06d1      	lsls	r1, r2, #27
 8020d80:	bf5f      	itttt	pl
 8020d82:	681a      	ldrpl	r2, [r3, #0]
 8020d84:	1d11      	addpl	r1, r2, #4
 8020d86:	6019      	strpl	r1, [r3, #0]
 8020d88:	6816      	ldrpl	r6, [r2, #0]
 8020d8a:	2700      	movs	r7, #0
 8020d8c:	69a0      	ldr	r0, [r4, #24]
 8020d8e:	b188      	cbz	r0, 8020db4 <_scanf_chars+0x58>
 8020d90:	2801      	cmp	r0, #1
 8020d92:	d107      	bne.n	8020da4 <_scanf_chars+0x48>
 8020d94:	682b      	ldr	r3, [r5, #0]
 8020d96:	781a      	ldrb	r2, [r3, #0]
 8020d98:	6963      	ldr	r3, [r4, #20]
 8020d9a:	5c9b      	ldrb	r3, [r3, r2]
 8020d9c:	b953      	cbnz	r3, 8020db4 <_scanf_chars+0x58>
 8020d9e:	bb27      	cbnz	r7, 8020dea <_scanf_chars+0x8e>
 8020da0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020da4:	2802      	cmp	r0, #2
 8020da6:	d120      	bne.n	8020dea <_scanf_chars+0x8e>
 8020da8:	682b      	ldr	r3, [r5, #0]
 8020daa:	781b      	ldrb	r3, [r3, #0]
 8020dac:	f813 3009 	ldrb.w	r3, [r3, r9]
 8020db0:	071b      	lsls	r3, r3, #28
 8020db2:	d41a      	bmi.n	8020dea <_scanf_chars+0x8e>
 8020db4:	6823      	ldr	r3, [r4, #0]
 8020db6:	06da      	lsls	r2, r3, #27
 8020db8:	bf5e      	ittt	pl
 8020dba:	682b      	ldrpl	r3, [r5, #0]
 8020dbc:	781b      	ldrbpl	r3, [r3, #0]
 8020dbe:	f806 3b01 	strbpl.w	r3, [r6], #1
 8020dc2:	682a      	ldr	r2, [r5, #0]
 8020dc4:	686b      	ldr	r3, [r5, #4]
 8020dc6:	3201      	adds	r2, #1
 8020dc8:	602a      	str	r2, [r5, #0]
 8020dca:	68a2      	ldr	r2, [r4, #8]
 8020dcc:	3b01      	subs	r3, #1
 8020dce:	3a01      	subs	r2, #1
 8020dd0:	606b      	str	r3, [r5, #4]
 8020dd2:	3701      	adds	r7, #1
 8020dd4:	60a2      	str	r2, [r4, #8]
 8020dd6:	b142      	cbz	r2, 8020dea <_scanf_chars+0x8e>
 8020dd8:	2b00      	cmp	r3, #0
 8020dda:	dcd7      	bgt.n	8020d8c <_scanf_chars+0x30>
 8020ddc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020de0:	4629      	mov	r1, r5
 8020de2:	4640      	mov	r0, r8
 8020de4:	4798      	blx	r3
 8020de6:	2800      	cmp	r0, #0
 8020de8:	d0d0      	beq.n	8020d8c <_scanf_chars+0x30>
 8020dea:	6823      	ldr	r3, [r4, #0]
 8020dec:	f013 0310 	ands.w	r3, r3, #16
 8020df0:	d105      	bne.n	8020dfe <_scanf_chars+0xa2>
 8020df2:	68e2      	ldr	r2, [r4, #12]
 8020df4:	3201      	adds	r2, #1
 8020df6:	60e2      	str	r2, [r4, #12]
 8020df8:	69a2      	ldr	r2, [r4, #24]
 8020dfa:	b102      	cbz	r2, 8020dfe <_scanf_chars+0xa2>
 8020dfc:	7033      	strb	r3, [r6, #0]
 8020dfe:	6923      	ldr	r3, [r4, #16]
 8020e00:	441f      	add	r7, r3
 8020e02:	6127      	str	r7, [r4, #16]
 8020e04:	2000      	movs	r0, #0
 8020e06:	e7cb      	b.n	8020da0 <_scanf_chars+0x44>
 8020e08:	08022fc9 	.word	0x08022fc9

08020e0c <_scanf_i>:
 8020e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e10:	4698      	mov	r8, r3
 8020e12:	4b74      	ldr	r3, [pc, #464]	; (8020fe4 <_scanf_i+0x1d8>)
 8020e14:	460c      	mov	r4, r1
 8020e16:	4682      	mov	sl, r0
 8020e18:	4616      	mov	r6, r2
 8020e1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8020e1e:	b087      	sub	sp, #28
 8020e20:	ab03      	add	r3, sp, #12
 8020e22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8020e26:	4b70      	ldr	r3, [pc, #448]	; (8020fe8 <_scanf_i+0x1dc>)
 8020e28:	69a1      	ldr	r1, [r4, #24]
 8020e2a:	4a70      	ldr	r2, [pc, #448]	; (8020fec <_scanf_i+0x1e0>)
 8020e2c:	2903      	cmp	r1, #3
 8020e2e:	bf18      	it	ne
 8020e30:	461a      	movne	r2, r3
 8020e32:	68a3      	ldr	r3, [r4, #8]
 8020e34:	9201      	str	r2, [sp, #4]
 8020e36:	1e5a      	subs	r2, r3, #1
 8020e38:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8020e3c:	bf88      	it	hi
 8020e3e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8020e42:	4627      	mov	r7, r4
 8020e44:	bf82      	ittt	hi
 8020e46:	eb03 0905 	addhi.w	r9, r3, r5
 8020e4a:	f240 135d 	movwhi	r3, #349	; 0x15d
 8020e4e:	60a3      	strhi	r3, [r4, #8]
 8020e50:	f857 3b1c 	ldr.w	r3, [r7], #28
 8020e54:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8020e58:	bf98      	it	ls
 8020e5a:	f04f 0900 	movls.w	r9, #0
 8020e5e:	6023      	str	r3, [r4, #0]
 8020e60:	463d      	mov	r5, r7
 8020e62:	f04f 0b00 	mov.w	fp, #0
 8020e66:	6831      	ldr	r1, [r6, #0]
 8020e68:	ab03      	add	r3, sp, #12
 8020e6a:	7809      	ldrb	r1, [r1, #0]
 8020e6c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8020e70:	2202      	movs	r2, #2
 8020e72:	f7df f9d5 	bl	8000220 <memchr>
 8020e76:	b328      	cbz	r0, 8020ec4 <_scanf_i+0xb8>
 8020e78:	f1bb 0f01 	cmp.w	fp, #1
 8020e7c:	d159      	bne.n	8020f32 <_scanf_i+0x126>
 8020e7e:	6862      	ldr	r2, [r4, #4]
 8020e80:	b92a      	cbnz	r2, 8020e8e <_scanf_i+0x82>
 8020e82:	6822      	ldr	r2, [r4, #0]
 8020e84:	2308      	movs	r3, #8
 8020e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020e8a:	6063      	str	r3, [r4, #4]
 8020e8c:	6022      	str	r2, [r4, #0]
 8020e8e:	6822      	ldr	r2, [r4, #0]
 8020e90:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8020e94:	6022      	str	r2, [r4, #0]
 8020e96:	68a2      	ldr	r2, [r4, #8]
 8020e98:	1e51      	subs	r1, r2, #1
 8020e9a:	60a1      	str	r1, [r4, #8]
 8020e9c:	b192      	cbz	r2, 8020ec4 <_scanf_i+0xb8>
 8020e9e:	6832      	ldr	r2, [r6, #0]
 8020ea0:	1c51      	adds	r1, r2, #1
 8020ea2:	6031      	str	r1, [r6, #0]
 8020ea4:	7812      	ldrb	r2, [r2, #0]
 8020ea6:	f805 2b01 	strb.w	r2, [r5], #1
 8020eaa:	6872      	ldr	r2, [r6, #4]
 8020eac:	3a01      	subs	r2, #1
 8020eae:	2a00      	cmp	r2, #0
 8020eb0:	6072      	str	r2, [r6, #4]
 8020eb2:	dc07      	bgt.n	8020ec4 <_scanf_i+0xb8>
 8020eb4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8020eb8:	4631      	mov	r1, r6
 8020eba:	4650      	mov	r0, sl
 8020ebc:	4790      	blx	r2
 8020ebe:	2800      	cmp	r0, #0
 8020ec0:	f040 8085 	bne.w	8020fce <_scanf_i+0x1c2>
 8020ec4:	f10b 0b01 	add.w	fp, fp, #1
 8020ec8:	f1bb 0f03 	cmp.w	fp, #3
 8020ecc:	d1cb      	bne.n	8020e66 <_scanf_i+0x5a>
 8020ece:	6863      	ldr	r3, [r4, #4]
 8020ed0:	b90b      	cbnz	r3, 8020ed6 <_scanf_i+0xca>
 8020ed2:	230a      	movs	r3, #10
 8020ed4:	6063      	str	r3, [r4, #4]
 8020ed6:	6863      	ldr	r3, [r4, #4]
 8020ed8:	4945      	ldr	r1, [pc, #276]	; (8020ff0 <_scanf_i+0x1e4>)
 8020eda:	6960      	ldr	r0, [r4, #20]
 8020edc:	1ac9      	subs	r1, r1, r3
 8020ede:	f000 f89b 	bl	8021018 <__sccl>
 8020ee2:	f04f 0b00 	mov.w	fp, #0
 8020ee6:	68a3      	ldr	r3, [r4, #8]
 8020ee8:	6822      	ldr	r2, [r4, #0]
 8020eea:	2b00      	cmp	r3, #0
 8020eec:	d03d      	beq.n	8020f6a <_scanf_i+0x15e>
 8020eee:	6831      	ldr	r1, [r6, #0]
 8020ef0:	6960      	ldr	r0, [r4, #20]
 8020ef2:	f891 c000 	ldrb.w	ip, [r1]
 8020ef6:	f810 000c 	ldrb.w	r0, [r0, ip]
 8020efa:	2800      	cmp	r0, #0
 8020efc:	d035      	beq.n	8020f6a <_scanf_i+0x15e>
 8020efe:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8020f02:	d124      	bne.n	8020f4e <_scanf_i+0x142>
 8020f04:	0510      	lsls	r0, r2, #20
 8020f06:	d522      	bpl.n	8020f4e <_scanf_i+0x142>
 8020f08:	f10b 0b01 	add.w	fp, fp, #1
 8020f0c:	f1b9 0f00 	cmp.w	r9, #0
 8020f10:	d003      	beq.n	8020f1a <_scanf_i+0x10e>
 8020f12:	3301      	adds	r3, #1
 8020f14:	f109 39ff 	add.w	r9, r9, #4294967295
 8020f18:	60a3      	str	r3, [r4, #8]
 8020f1a:	6873      	ldr	r3, [r6, #4]
 8020f1c:	3b01      	subs	r3, #1
 8020f1e:	2b00      	cmp	r3, #0
 8020f20:	6073      	str	r3, [r6, #4]
 8020f22:	dd1b      	ble.n	8020f5c <_scanf_i+0x150>
 8020f24:	6833      	ldr	r3, [r6, #0]
 8020f26:	3301      	adds	r3, #1
 8020f28:	6033      	str	r3, [r6, #0]
 8020f2a:	68a3      	ldr	r3, [r4, #8]
 8020f2c:	3b01      	subs	r3, #1
 8020f2e:	60a3      	str	r3, [r4, #8]
 8020f30:	e7d9      	b.n	8020ee6 <_scanf_i+0xda>
 8020f32:	f1bb 0f02 	cmp.w	fp, #2
 8020f36:	d1ae      	bne.n	8020e96 <_scanf_i+0x8a>
 8020f38:	6822      	ldr	r2, [r4, #0]
 8020f3a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8020f3e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8020f42:	d1bf      	bne.n	8020ec4 <_scanf_i+0xb8>
 8020f44:	2310      	movs	r3, #16
 8020f46:	6063      	str	r3, [r4, #4]
 8020f48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8020f4c:	e7a2      	b.n	8020e94 <_scanf_i+0x88>
 8020f4e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8020f52:	6022      	str	r2, [r4, #0]
 8020f54:	780b      	ldrb	r3, [r1, #0]
 8020f56:	f805 3b01 	strb.w	r3, [r5], #1
 8020f5a:	e7de      	b.n	8020f1a <_scanf_i+0x10e>
 8020f5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020f60:	4631      	mov	r1, r6
 8020f62:	4650      	mov	r0, sl
 8020f64:	4798      	blx	r3
 8020f66:	2800      	cmp	r0, #0
 8020f68:	d0df      	beq.n	8020f2a <_scanf_i+0x11e>
 8020f6a:	6823      	ldr	r3, [r4, #0]
 8020f6c:	05d9      	lsls	r1, r3, #23
 8020f6e:	d50d      	bpl.n	8020f8c <_scanf_i+0x180>
 8020f70:	42bd      	cmp	r5, r7
 8020f72:	d909      	bls.n	8020f88 <_scanf_i+0x17c>
 8020f74:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8020f78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020f7c:	4632      	mov	r2, r6
 8020f7e:	4650      	mov	r0, sl
 8020f80:	4798      	blx	r3
 8020f82:	f105 39ff 	add.w	r9, r5, #4294967295
 8020f86:	464d      	mov	r5, r9
 8020f88:	42bd      	cmp	r5, r7
 8020f8a:	d028      	beq.n	8020fde <_scanf_i+0x1d2>
 8020f8c:	6822      	ldr	r2, [r4, #0]
 8020f8e:	f012 0210 	ands.w	r2, r2, #16
 8020f92:	d113      	bne.n	8020fbc <_scanf_i+0x1b0>
 8020f94:	702a      	strb	r2, [r5, #0]
 8020f96:	6863      	ldr	r3, [r4, #4]
 8020f98:	9e01      	ldr	r6, [sp, #4]
 8020f9a:	4639      	mov	r1, r7
 8020f9c:	4650      	mov	r0, sl
 8020f9e:	47b0      	blx	r6
 8020fa0:	f8d8 3000 	ldr.w	r3, [r8]
 8020fa4:	6821      	ldr	r1, [r4, #0]
 8020fa6:	1d1a      	adds	r2, r3, #4
 8020fa8:	f8c8 2000 	str.w	r2, [r8]
 8020fac:	f011 0f20 	tst.w	r1, #32
 8020fb0:	681b      	ldr	r3, [r3, #0]
 8020fb2:	d00f      	beq.n	8020fd4 <_scanf_i+0x1c8>
 8020fb4:	6018      	str	r0, [r3, #0]
 8020fb6:	68e3      	ldr	r3, [r4, #12]
 8020fb8:	3301      	adds	r3, #1
 8020fba:	60e3      	str	r3, [r4, #12]
 8020fbc:	1bed      	subs	r5, r5, r7
 8020fbe:	44ab      	add	fp, r5
 8020fc0:	6925      	ldr	r5, [r4, #16]
 8020fc2:	445d      	add	r5, fp
 8020fc4:	6125      	str	r5, [r4, #16]
 8020fc6:	2000      	movs	r0, #0
 8020fc8:	b007      	add	sp, #28
 8020fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020fce:	f04f 0b00 	mov.w	fp, #0
 8020fd2:	e7ca      	b.n	8020f6a <_scanf_i+0x15e>
 8020fd4:	07ca      	lsls	r2, r1, #31
 8020fd6:	bf4c      	ite	mi
 8020fd8:	8018      	strhmi	r0, [r3, #0]
 8020fda:	6018      	strpl	r0, [r3, #0]
 8020fdc:	e7eb      	b.n	8020fb6 <_scanf_i+0x1aa>
 8020fde:	2001      	movs	r0, #1
 8020fe0:	e7f2      	b.n	8020fc8 <_scanf_i+0x1bc>
 8020fe2:	bf00      	nop
 8020fe4:	08022db0 	.word	0x08022db0
 8020fe8:	0801dab9 	.word	0x0801dab9
 8020fec:	0801d9a9 	.word	0x0801d9a9
 8020ff0:	080235ee 	.word	0x080235ee

08020ff4 <_read_r>:
 8020ff4:	b538      	push	{r3, r4, r5, lr}
 8020ff6:	4d07      	ldr	r5, [pc, #28]	; (8021014 <_read_r+0x20>)
 8020ff8:	4604      	mov	r4, r0
 8020ffa:	4608      	mov	r0, r1
 8020ffc:	4611      	mov	r1, r2
 8020ffe:	2200      	movs	r2, #0
 8021000:	602a      	str	r2, [r5, #0]
 8021002:	461a      	mov	r2, r3
 8021004:	f7e2 f9ee 	bl	80033e4 <_read>
 8021008:	1c43      	adds	r3, r0, #1
 802100a:	d102      	bne.n	8021012 <_read_r+0x1e>
 802100c:	682b      	ldr	r3, [r5, #0]
 802100e:	b103      	cbz	r3, 8021012 <_read_r+0x1e>
 8021010:	6023      	str	r3, [r4, #0]
 8021012:	bd38      	pop	{r3, r4, r5, pc}
 8021014:	20008fd0 	.word	0x20008fd0

08021018 <__sccl>:
 8021018:	b570      	push	{r4, r5, r6, lr}
 802101a:	780b      	ldrb	r3, [r1, #0]
 802101c:	4604      	mov	r4, r0
 802101e:	2b5e      	cmp	r3, #94	; 0x5e
 8021020:	bf0b      	itete	eq
 8021022:	784b      	ldrbeq	r3, [r1, #1]
 8021024:	1c48      	addne	r0, r1, #1
 8021026:	1c88      	addeq	r0, r1, #2
 8021028:	2200      	movne	r2, #0
 802102a:	bf08      	it	eq
 802102c:	2201      	moveq	r2, #1
 802102e:	1e61      	subs	r1, r4, #1
 8021030:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8021034:	f801 2f01 	strb.w	r2, [r1, #1]!
 8021038:	42a9      	cmp	r1, r5
 802103a:	d1fb      	bne.n	8021034 <__sccl+0x1c>
 802103c:	b90b      	cbnz	r3, 8021042 <__sccl+0x2a>
 802103e:	3801      	subs	r0, #1
 8021040:	bd70      	pop	{r4, r5, r6, pc}
 8021042:	f082 0101 	eor.w	r1, r2, #1
 8021046:	54e1      	strb	r1, [r4, r3]
 8021048:	1c42      	adds	r2, r0, #1
 802104a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 802104e:	2d2d      	cmp	r5, #45	; 0x2d
 8021050:	f102 36ff 	add.w	r6, r2, #4294967295
 8021054:	4610      	mov	r0, r2
 8021056:	d006      	beq.n	8021066 <__sccl+0x4e>
 8021058:	2d5d      	cmp	r5, #93	; 0x5d
 802105a:	d0f1      	beq.n	8021040 <__sccl+0x28>
 802105c:	b90d      	cbnz	r5, 8021062 <__sccl+0x4a>
 802105e:	4630      	mov	r0, r6
 8021060:	e7ee      	b.n	8021040 <__sccl+0x28>
 8021062:	462b      	mov	r3, r5
 8021064:	e7ef      	b.n	8021046 <__sccl+0x2e>
 8021066:	7816      	ldrb	r6, [r2, #0]
 8021068:	2e5d      	cmp	r6, #93	; 0x5d
 802106a:	d0fa      	beq.n	8021062 <__sccl+0x4a>
 802106c:	42b3      	cmp	r3, r6
 802106e:	dcf8      	bgt.n	8021062 <__sccl+0x4a>
 8021070:	4618      	mov	r0, r3
 8021072:	3001      	adds	r0, #1
 8021074:	4286      	cmp	r6, r0
 8021076:	5421      	strb	r1, [r4, r0]
 8021078:	dcfb      	bgt.n	8021072 <__sccl+0x5a>
 802107a:	43d8      	mvns	r0, r3
 802107c:	4430      	add	r0, r6
 802107e:	1c5d      	adds	r5, r3, #1
 8021080:	42b3      	cmp	r3, r6
 8021082:	bfa8      	it	ge
 8021084:	2000      	movge	r0, #0
 8021086:	182b      	adds	r3, r5, r0
 8021088:	3202      	adds	r2, #2
 802108a:	e7de      	b.n	802104a <__sccl+0x32>

0802108c <__submore>:
 802108c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021090:	460c      	mov	r4, r1
 8021092:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8021094:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021098:	4299      	cmp	r1, r3
 802109a:	d11d      	bne.n	80210d8 <__submore+0x4c>
 802109c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80210a0:	f7fa fd00 	bl	801baa4 <_malloc_r>
 80210a4:	b918      	cbnz	r0, 80210ae <__submore+0x22>
 80210a6:	f04f 30ff 	mov.w	r0, #4294967295
 80210aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80210ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80210b2:	63a3      	str	r3, [r4, #56]	; 0x38
 80210b4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80210b8:	6360      	str	r0, [r4, #52]	; 0x34
 80210ba:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80210be:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80210c2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80210c6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80210ca:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80210ce:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80210d2:	6020      	str	r0, [r4, #0]
 80210d4:	2000      	movs	r0, #0
 80210d6:	e7e8      	b.n	80210aa <__submore+0x1e>
 80210d8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80210da:	0077      	lsls	r7, r6, #1
 80210dc:	463a      	mov	r2, r7
 80210de:	f7ff f98f 	bl	8020400 <_realloc_r>
 80210e2:	4605      	mov	r5, r0
 80210e4:	2800      	cmp	r0, #0
 80210e6:	d0de      	beq.n	80210a6 <__submore+0x1a>
 80210e8:	eb00 0806 	add.w	r8, r0, r6
 80210ec:	4601      	mov	r1, r0
 80210ee:	4632      	mov	r2, r6
 80210f0:	4640      	mov	r0, r8
 80210f2:	f7fa f9d9 	bl	801b4a8 <memcpy>
 80210f6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80210fa:	f8c4 8000 	str.w	r8, [r4]
 80210fe:	e7e9      	b.n	80210d4 <__submore+0x48>

08021100 <__ascii_wctomb>:
 8021100:	b149      	cbz	r1, 8021116 <__ascii_wctomb+0x16>
 8021102:	2aff      	cmp	r2, #255	; 0xff
 8021104:	bf85      	ittet	hi
 8021106:	238a      	movhi	r3, #138	; 0x8a
 8021108:	6003      	strhi	r3, [r0, #0]
 802110a:	700a      	strbls	r2, [r1, #0]
 802110c:	f04f 30ff 	movhi.w	r0, #4294967295
 8021110:	bf98      	it	ls
 8021112:	2001      	movls	r0, #1
 8021114:	4770      	bx	lr
 8021116:	4608      	mov	r0, r1
 8021118:	4770      	bx	lr
	...

0802111c <__env_lock>:
 802111c:	4801      	ldr	r0, [pc, #4]	; (8021124 <__env_lock+0x8>)
 802111e:	f7fa b9af 	b.w	801b480 <__retarget_lock_acquire_recursive>
 8021122:	bf00      	nop
 8021124:	20008fc6 	.word	0x20008fc6

08021128 <__env_unlock>:
 8021128:	4801      	ldr	r0, [pc, #4]	; (8021130 <__env_unlock+0x8>)
 802112a:	f7fa b9ab 	b.w	801b484 <__retarget_lock_release_recursive>
 802112e:	bf00      	nop
 8021130:	20008fc6 	.word	0x20008fc6

08021134 <_fstat_r>:
 8021134:	b538      	push	{r3, r4, r5, lr}
 8021136:	4d07      	ldr	r5, [pc, #28]	; (8021154 <_fstat_r+0x20>)
 8021138:	2300      	movs	r3, #0
 802113a:	4604      	mov	r4, r0
 802113c:	4608      	mov	r0, r1
 802113e:	4611      	mov	r1, r2
 8021140:	602b      	str	r3, [r5, #0]
 8021142:	f7e2 f994 	bl	800346e <_fstat>
 8021146:	1c43      	adds	r3, r0, #1
 8021148:	d102      	bne.n	8021150 <_fstat_r+0x1c>
 802114a:	682b      	ldr	r3, [r5, #0]
 802114c:	b103      	cbz	r3, 8021150 <_fstat_r+0x1c>
 802114e:	6023      	str	r3, [r4, #0]
 8021150:	bd38      	pop	{r3, r4, r5, pc}
 8021152:	bf00      	nop
 8021154:	20008fd0 	.word	0x20008fd0

08021158 <_isatty_r>:
 8021158:	b538      	push	{r3, r4, r5, lr}
 802115a:	4d06      	ldr	r5, [pc, #24]	; (8021174 <_isatty_r+0x1c>)
 802115c:	2300      	movs	r3, #0
 802115e:	4604      	mov	r4, r0
 8021160:	4608      	mov	r0, r1
 8021162:	602b      	str	r3, [r5, #0]
 8021164:	f7e2 f993 	bl	800348e <_isatty>
 8021168:	1c43      	adds	r3, r0, #1
 802116a:	d102      	bne.n	8021172 <_isatty_r+0x1a>
 802116c:	682b      	ldr	r3, [r5, #0]
 802116e:	b103      	cbz	r3, 8021172 <_isatty_r+0x1a>
 8021170:	6023      	str	r3, [r4, #0]
 8021172:	bd38      	pop	{r3, r4, r5, pc}
 8021174:	20008fd0 	.word	0x20008fd0

08021178 <_malloc_usable_size_r>:
 8021178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802117c:	1f18      	subs	r0, r3, #4
 802117e:	2b00      	cmp	r3, #0
 8021180:	bfbc      	itt	lt
 8021182:	580b      	ldrlt	r3, [r1, r0]
 8021184:	18c0      	addlt	r0, r0, r3
 8021186:	4770      	bx	lr

08021188 <_init>:
 8021188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802118a:	bf00      	nop
 802118c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802118e:	bc08      	pop	{r3}
 8021190:	469e      	mov	lr, r3
 8021192:	4770      	bx	lr

08021194 <_fini>:
 8021194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021196:	bf00      	nop
 8021198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802119a:	bc08      	pop	{r3}
 802119c:	469e      	mov	lr, r3
 802119e:	4770      	bx	lr
