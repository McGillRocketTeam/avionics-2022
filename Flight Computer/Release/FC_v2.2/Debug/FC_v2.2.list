
FC_v2.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f6e4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002338  0801f898  0801f898  0002f898  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021bd0  08021bd0  000403cc  2**0
                  CONTENTS
  4 .ARM          00000008  08021bd0  08021bd0  00031bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021bd8  08021bd8  000403cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08021bd8  08021bd8  00031bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021be0  08021be0  00031be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003cc  20000000  08021be4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000403cc  2**0
                  CONTENTS
 10 .bss          00008be8  200003cc  200003cc  000403cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  20008fb4  20008fb4  000403cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000403cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00074d86  00000000  00000000  000403fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000aecb  00000000  00000000  000b5182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000041f0  00000000  00000000  000c0050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000389ed  00000000  00000000  000c4240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004a85e  00000000  00000000  000fcc2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119a0e  00000000  00000000  0014748b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00260e99  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00003ec0  00000000  00000000  00260ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000134f8  00000000  00000000  00264db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200003cc 	.word	0x200003cc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801f87c 	.word	0x0801f87c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200003d0 	.word	0x200003d0
 80001ec:	0801f87c 	.word	0x0801f87c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <lsm_write>:
/*
 * LSM6DSR
 */

static int32_t lsm_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af04      	add	r7, sp, #16
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	461a      	mov	r2, r3
 8001018:	460b      	mov	r3, r1
 800101a:	72fb      	strb	r3, [r7, #11]
 800101c:	4613      	mov	r3, r2
 800101e:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8001020:	7afb      	ldrb	r3, [r7, #11]
 8001022:	b29a      	uxth	r2, r3
 8001024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001028:	9302      	str	r3, [sp, #8]
 800102a:	893b      	ldrh	r3, [r7, #8]
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	21d5      	movs	r1, #213	; 0xd5
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f008 f8a6 	bl	8009188 <HAL_I2C_Mem_Write>
  return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <lsm_read>:

static int32_t lsm_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b088      	sub	sp, #32
 800104a:	af04      	add	r7, sp, #16
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	607a      	str	r2, [r7, #4]
 8001050:	461a      	mov	r2, r3
 8001052:	460b      	mov	r3, r1
 8001054:	72fb      	strb	r3, [r7, #11]
 8001056:	4613      	mov	r3, r2
 8001058:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSR_I2C_ADD_L, reg,
 800105a:	7afb      	ldrb	r3, [r7, #11]
 800105c:	b29a      	uxth	r2, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	9302      	str	r3, [sp, #8]
 8001064:	893b      	ldrh	r3, [r7, #8]
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	21d5      	movs	r1, #213	; 0xd5
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f008 f983 	bl	800937c <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <MRT_LSM6DSR_Setup>:




stmdev_ctx_t  MRT_LSM6DSR_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b08b      	sub	sp, #44	; 0x2c
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	  Guart = uart;
 800108c:	4a53      	ldr	r2, [pc, #332]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LSM6DSR Setup Starts\n\r", 22, HAL_MAX_DELAY);
 8001092:	4b52      	ldr	r3, [pc, #328]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 8001094:	6818      	ldr	r0, [r3, #0]
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	2216      	movs	r2, #22
 800109c:	4950      	ldr	r1, [pc, #320]	; (80011e0 <MRT_LSM6DSR_Setup+0x160>)
 800109e:	f00d f9c8 	bl	800e432 <HAL_UART_Transmit>


	  stmdev_ctx_t lsm_ctx;

	  /* Initialize mems driver interface */
	  lsm_ctx.write_reg = lsm_write;
 80010a2:	4b50      	ldr	r3, [pc, #320]	; (80011e4 <MRT_LSM6DSR_Setup+0x164>)
 80010a4:	61fb      	str	r3, [r7, #28]
	  lsm_ctx.read_reg = lsm_read;
 80010a6:	4b50      	ldr	r3, [pc, #320]	; (80011e8 <MRT_LSM6DSR_Setup+0x168>)
 80010a8:	623b      	str	r3, [r7, #32]
	  lsm_ctx.handle = SENSOR_BUS;
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 80010ae:	2064      	movs	r0, #100	; 0x64
 80010b0:	f007 f986 	bl	80083c0 <HAL_Delay>
	  /* Check device ID */
	  lsm6dsr_device_id_get(&lsm_ctx, &lsm_whoamI);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	494c      	ldr	r1, [pc, #304]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f006 fbbe 	bl	800783c <lsm6dsr_device_id_get>

	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 21, HAL_MAX_DELAY);
 80010c0:	4b46      	ldr	r3, [pc, #280]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	2215      	movs	r2, #21
 80010ca:	4949      	ldr	r1, [pc, #292]	; (80011f0 <MRT_LSM6DSR_Setup+0x170>)
 80010cc:	f00d f9b1 	bl	800e432 <HAL_UART_Transmit>


	  if (lsm_whoamI != LSM6DSR_ID){
 80010d0:	4b46      	ldr	r3, [pc, #280]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b6a      	cmp	r3, #106	; 0x6a
 80010d6:	d032      	beq.n	800113e <MRT_LSM6DSR_Setup+0xbe>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 80010d8:	4b40      	ldr	r3, [pc, #256]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	2208      	movs	r2, #8
 80010e2:	4944      	ldr	r1, [pc, #272]	; (80011f4 <MRT_LSM6DSR_Setup+0x174>)
 80010e4:	f00d f9a5 	bl	800e432 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80010e8:	4b3c      	ldr	r3, [pc, #240]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
 80010f0:	2210      	movs	r2, #16
 80010f2:	4941      	ldr	r1, [pc, #260]	; (80011f8 <MRT_LSM6DSR_Setup+0x178>)
 80010f4:	f00d f99d 	bl	800e432 <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lsm_whoamI);
 80010f8:	4b3c      	ldr	r3, [pc, #240]	; (80011ec <MRT_LSM6DSR_Setup+0x16c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	493e      	ldr	r1, [pc, #248]	; (80011fc <MRT_LSM6DSR_Setup+0x17c>)
 8001104:	4618      	mov	r0, r3
 8001106:	f01a fbb7 	bl	801b878 <siprintf>

			__BKPT();
 800110a:	be00      	bkpt	0x0000

		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 800110c:	4b33      	ldr	r3, [pc, #204]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800110e:	681c      	ldr	r4, [r3, #0]
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f86b 	bl	80001f0 <strlen>
 800111a:	4603      	mov	r3, r0
 800111c:	b29a      	uxth	r2, r3
 800111e:	f107 0110 	add.w	r1, r7, #16
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	4620      	mov	r0, r4
 8001128:	f00d f983 	bl	800e432 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 800112e:	6818      	ldr	r0, [r3, #0]
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	2216      	movs	r2, #22
 8001136:	4932      	ldr	r1, [pc, #200]	; (8001200 <MRT_LSM6DSR_Setup+0x180>)
 8001138:	f00d f97b 	bl	800e432 <HAL_UART_Transmit>
		  while(1);
 800113c:	e7fe      	b.n	800113c <MRT_LSM6DSR_Setup+0xbc>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 6, HAL_MAX_DELAY);
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 8001140:	6818      	ldr	r0, [r3, #0]
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	2206      	movs	r2, #6
 8001148:	492e      	ldr	r1, [pc, #184]	; (8001204 <MRT_LSM6DSR_Setup+0x184>)
 800114a:	f00d f972 	bl	800e432 <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lsm6dsr_reset_set(&lsm_ctx, PROPERTY_ENABLE);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	2101      	movs	r1, #1
 8001154:	4618      	mov	r0, r3
 8001156:	f006 fb82 	bl	800785e <lsm6dsr_reset_set>


	  HAL_Delay(1000);
 800115a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800115e:	f007 f92f 	bl	80083c0 <HAL_Delay>

	  do {
	    lsm6dsr_reset_get(&lsm_ctx, &lsm_rst);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4928      	ldr	r1, [pc, #160]	; (8001208 <MRT_LSM6DSR_Setup+0x188>)
 8001168:	4618      	mov	r0, r3
 800116a:	f006 fb9e 	bl	80078aa <lsm6dsr_reset_get>
	  } while (lsm_rst);
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <MRT_LSM6DSR_Setup+0x188>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f5      	bne.n	8001162 <MRT_LSM6DSR_Setup+0xe2>

	  /* Disable I3C interface */
	  //TODO JASPER lsm6dsr_i3c_disable_set(&lsm_ctx, LSM6DSR_I3C_DISABLE);

	  /* Enable Block Data Update */
	  lsm6dsr_block_data_update_set(&lsm_ctx, PROPERTY_ENABLE);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	2101      	movs	r1, #1
 800117c:	4618      	mov	r0, r3
 800117e:	f006 fa0d 	bl	800759c <lsm6dsr_block_data_update_set>
	  /* Set Output Data Rate */
	  lsm6dsr_xl_data_rate_set(&lsm_ctx, LSM6DSR_XL_ODR_12Hz5);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	2101      	movs	r1, #1
 8001188:	4618      	mov	r0, r3
 800118a:	f005 ffe9 	bl	8007160 <lsm6dsr_xl_data_rate_set>
	  lsm6dsr_gy_data_rate_set(&lsm_ctx, LSM6DSR_GY_ODR_12Hz5);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	2101      	movs	r1, #1
 8001194:	4618      	mov	r0, r3
 8001196:	f006 f905 	bl	80073a4 <lsm6dsr_gy_data_rate_set>
	  /* Set full scale */
	  lsm6dsr_xl_full_scale_set(&lsm_ctx, LSM6DSR_2g);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f005 ffb7 	bl	8007114 <lsm6dsr_xl_full_scale_set>
	  lsm6dsr_gy_full_scale_set(&lsm_ctx, LSM6DSR_2000dps);
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	210c      	movs	r1, #12
 80011ac:	4618      	mov	r0, r3
 80011ae:	f006 f8d3 	bl	8007358 <lsm6dsr_gy_full_scale_set>
	  /* Configure filtering chain(No aux interface)
	   * Accelerometer - LPF1 + LPF2 path
	   */
	  //TODO JASPER lsm6dsr_xl_hp_path_on_out_set(&lsm_ctx, LSM6DSR_LP_ODR_DIV_100);
	  //TODO JASPER lsm6dsr_xl_filter_lp2_set(&lsm_ctx, PROPERTY_ENABLE);
	  HAL_UART_Transmit(Guart,"LLSM6DSR Setup Ends\n\r", 25, HAL_MAX_DELAY);
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <MRT_LSM6DSR_Setup+0x15c>)
 80011b4:	6818      	ldr	r0, [r3, #0]
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	2219      	movs	r2, #25
 80011bc:	4913      	ldr	r1, [pc, #76]	; (800120c <MRT_LSM6DSR_Setup+0x18c>)
 80011be:	f00d f938 	bl	800e432 <HAL_UART_Transmit>

	  return lsm_ctx;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	461c      	mov	r4, r3
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	372c      	adds	r7, #44	; 0x2c
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd90      	pop	{r4, r7, pc}
 80011da:	bf00      	nop
 80011dc:	20005f08 	.word	0x20005f08
 80011e0:	0801f898 	.word	0x0801f898
 80011e4:	0800100d 	.word	0x0800100d
 80011e8:	08001047 	.word	0x08001047
 80011ec:	200003f8 	.word	0x200003f8
 80011f0:	0801f8b0 	.word	0x0801f8b0
 80011f4:	0801f8c8 	.word	0x0801f8c8
 80011f8:	0801f8d4 	.word	0x0801f8d4
 80011fc:	0801f8e8 	.word	0x0801f8e8
 8001200:	0801f8f0 	.word	0x0801f8f0
 8001204:	0801f908 	.word	0x0801f908
 8001208:	200003f9 	.word	0x200003f9
 800120c:	0801f910 	.word	0x0801f910

08001210 <MRT_LSM6DSR_getAcceleration>:


/*
 * Get acceleration values
 */
void MRT_LSM6DSR_getAcceleration(stmdev_ctx_t lsm_ctx,float acceleration_mg[3]){
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
 8001216:	1d3c      	adds	r4, r7, #4
 8001218:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800121c:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_xl_flag_data_ready_get(&lsm_ctx, &reg);
 800121e:	f107 0217 	add.w	r2, r7, #23
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f006 f9de 	bl	80075e8 <lsm6dsr_xl_flag_data_ready_get>

		//if (reg.status_reg.gda) {
	    if(reg){
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d02d      	beq.n	800128e <MRT_LSM6DSR_getAcceleration+0x7e>
		/* Read magnetic field data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001232:	2206      	movs	r2, #6
 8001234:	2100      	movs	r1, #0
 8001236:	4818      	ldr	r0, [pc, #96]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001238:	f019 faa0 	bl	801a77c <memset>
        lsm6dsr_acceleration_raw_get(&lsm_ctx, data_raw_acceleration);
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	4916      	ldr	r1, [pc, #88]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001240:	4618      	mov	r0, r3
 8001242:	f006 fa8a 	bl	800775a <lsm6dsr_acceleration_raw_get>
        acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124c:	4618      	mov	r0, r3
 800124e:	f005 ff15 	bl	800707c <lsm6dsr_from_fs2g_to_mg>
 8001252:	eef0 7a40 	vmov.f32	s15, s0
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	edc3 7a00 	vstr	s15, [r3]
                               data_raw_acceleration[0]);
        acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 800125e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	1d1c      	adds	r4, r3, #4
 8001266:	4610      	mov	r0, r2
 8001268:	f005 ff08 	bl	800707c <lsm6dsr_from_fs2g_to_mg>
 800126c:	eef0 7a40 	vmov.f32	s15, s0
 8001270:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[1]);
        acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <MRT_LSM6DSR_getAcceleration+0x88>)
 8001276:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	f103 0408 	add.w	r4, r3, #8
 8001280:	4610      	mov	r0, r2
 8001282:	f005 fefb 	bl	800707c <lsm6dsr_from_fs2g_to_mg>
 8001286:	eef0 7a40 	vmov.f32	s15, s0
 800128a:	edc4 7a00 	vstr	s15, [r4]
                               data_raw_acceleration[2]);
      }
}
 800128e:	bf00      	nop
 8001290:	371c      	adds	r7, #28
 8001292:	46bd      	mov	sp, r7
 8001294:	bd90      	pop	{r4, r7, pc}
 8001296:	bf00      	nop
 8001298:	200003e8 	.word	0x200003e8

0800129c <MRT_LSM6DSR_getTemperature>:


/*
 * Get temperature value
 */
void MRT_LSM6DSR_getTemperature(stmdev_ctx_t lsm_ctx,float* temperature_degC){
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	1d3c      	adds	r4, r7, #4
 80012a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012a8:	603b      	str	r3, [r7, #0]
	//lsm6dsr_reg_t reg;
	//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    uint8_t reg;
    lsm6dsr_temp_flag_data_ready_get(&lsm_ctx, &reg);
 80012aa:	f107 0217 	add.w	r2, r7, #23
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f006 f9ca 	bl	800764c <lsm6dsr_temp_flag_data_ready_get>

	//if (reg.status_reg.tda) {
    if(reg){
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d012      	beq.n	80012e4 <MRT_LSM6DSR_getTemperature+0x48>
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <MRT_LSM6DSR_getTemperature+0x50>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	801a      	strh	r2, [r3, #0]
		//Read temperature data
		memset(&lsm_data_raw_temperature, 0x00, sizeof(int16_t));
		lsm6dsr_temperature_raw_get(&lsm_ctx, &lsm_data_raw_temperature);
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	4909      	ldr	r1, [pc, #36]	; (80012ec <MRT_LSM6DSR_getTemperature+0x50>)
 80012c8:	4618      	mov	r0, r3
 80012ca:	f006 f9d8 	bl	800767e <lsm6dsr_temperature_raw_get>
		*temperature_degC = lsm6dsr_from_lsb_to_celsius(lsm_data_raw_temperature);
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <MRT_LSM6DSR_getTemperature+0x50>)
 80012d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f005 ff01 	bl	80070dc <lsm6dsr_from_lsb_to_celsius>
 80012da:	eef0 7a40 	vmov.f32	s15, s0
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	edc3 7a00 	vstr	s15, [r3]

	}
}
 80012e4:	bf00      	nop
 80012e6:	371c      	adds	r7, #28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd90      	pop	{r4, r7, pc}
 80012ec:	200003f6 	.word	0x200003f6

080012f0 <MRT_LSM6DSR_getAngularRate>:


/*
 * Get angular rate values
 */
void MRT_LSM6DSR_getAngularRate(stmdev_ctx_t lsm_ctx,float angular_rate_mdps[3]){
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	1d3c      	adds	r4, r7, #4
 80012f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012fc:	603b      	str	r3, [r7, #0]
		//lsm6dsr_reg_t reg;
		//lsm6dsr_status_reg_get(&dev_ctx, &reg.status_reg);

    	uint8_t reg;
	    lsm6dsr_gy_flag_data_ready_get(&lsm_ctx, &reg);
 80012fe:	f107 0217 	add.w	r2, r7, #23
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	4611      	mov	r1, r2
 8001306:	4618      	mov	r0, r3
 8001308:	f006 f987 	bl	800761a <lsm6dsr_gy_flag_data_ready_get>

		//if (reg.status_reg.xlda) {
	    if(reg){
 800130c:	7dfb      	ldrb	r3, [r7, #23]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d02d      	beq.n	800136e <MRT_LSM6DSR_getAngularRate+0x7e>
		/* Read magnetic field data */
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8001312:	2206      	movs	r2, #6
 8001314:	2100      	movs	r1, #0
 8001316:	4818      	ldr	r0, [pc, #96]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001318:	f019 fa30 	bl	801a77c <memset>
		lsm6dsr_angular_rate_raw_get(&lsm_ctx, data_raw_angular_rate);
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	4916      	ldr	r1, [pc, #88]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001320:	4618      	mov	r0, r3
 8001322:	f006 f9cf 	bl	80076c4 <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800132c:	4618      	mov	r0, r3
 800132e:	f005 febd 	bl	80070ac <lsm6dsr_from_fs2000dps_to_mdps>
 8001332:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[0] =
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	edc3 7a00 	vstr	s15, [r3]
		angular_rate_mdps[1] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 800133e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
		angular_rate_mdps[1] =
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	1d1c      	adds	r4, r3, #4
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001346:	4610      	mov	r0, r2
 8001348:	f005 feb0 	bl	80070ac <lsm6dsr_from_fs2000dps_to_mdps>
 800134c:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[1] =
 8001350:	edc4 7a00 	vstr	s15, [r4]
		angular_rate_mdps[2] =
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <MRT_LSM6DSR_getAngularRate+0x88>)
 8001356:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		angular_rate_mdps[2] =
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	f103 0408 	add.w	r4, r3, #8
				lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001360:	4610      	mov	r0, r2
 8001362:	f005 fea3 	bl	80070ac <lsm6dsr_from_fs2000dps_to_mdps>
 8001366:	eef0 7a40 	vmov.f32	s15, s0
		angular_rate_mdps[2] =
 800136a:	edc4 7a00 	vstr	s15, [r4]
		fs2000dps_to_mdps
		*/

		}

}
 800136e:	bf00      	nop
 8001370:	371c      	adds	r7, #28
 8001372:	46bd      	mov	sp, r7
 8001374:	bd90      	pop	{r4, r7, pc}
 8001376:	bf00      	nop
 8001378:	200003f0 	.word	0x200003f0

0800137c <MRT_LPS22HH_Setup>:
 * LPS22HH
 */


stmdev_ctx_t  MRT_LPS22HH_Setup(I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b08d      	sub	sp, #52	; 0x34
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]

	  Guart = uart;
 8001388:	4a4b      	ldr	r2, [pc, #300]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Starts\n\r", 22, HAL_MAX_DELAY);
 800138e:	4b4a      	ldr	r3, [pc, #296]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
 8001396:	2216      	movs	r2, #22
 8001398:	4948      	ldr	r1, [pc, #288]	; (80014bc <MRT_LPS22HH_Setup+0x140>)
 800139a:	f00d f84a 	bl	800e432 <HAL_UART_Transmit>

	  stmdev_ctx_t lps_ctx;

	  lps22hh_reg_t reg;
	  /* Initialize mems driver interface */
	  lps_ctx.write_reg = lps_write;
 800139e:	4b48      	ldr	r3, [pc, #288]	; (80014c0 <MRT_LPS22HH_Setup+0x144>)
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
	  lps_ctx.read_reg = lps_read;
 80013a2:	4b48      	ldr	r3, [pc, #288]	; (80014c4 <MRT_LPS22HH_Setup+0x148>)
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
	  lps_ctx.handle = SENSOR_BUS;
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 80013aa:	2064      	movs	r0, #100	; 0x64
 80013ac:	f007 f808 	bl	80083c0 <HAL_Delay>
	  /* Check device ID */
	  lps_whoamI = 0;
 80013b0:	4b45      	ldr	r3, [pc, #276]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
	  lps22hh_device_id_get(&lps_ctx, &lps_whoamI);
 80013b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ba:	4943      	ldr	r1, [pc, #268]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013bc:	4618      	mov	r0, r3
 80013be:	f005 fddc 	bl	8006f7a <lps22hh_device_id_get>



  	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 22, HAL_MAX_DELAY);
 80013c2:	4b3d      	ldr	r3, [pc, #244]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 80013c4:	6818      	ldr	r0, [r3, #0]
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	2216      	movs	r2, #22
 80013cc:	493f      	ldr	r1, [pc, #252]	; (80014cc <MRT_LPS22HH_Setup+0x150>)
 80013ce:	f00d f830 	bl	800e432 <HAL_UART_Transmit>
	  if ( lps_whoamI != LPS22HH_ID ){
 80013d2:	4b3d      	ldr	r3, [pc, #244]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2bb3      	cmp	r3, #179	; 0xb3
 80013d8:	d031      	beq.n	800143e <MRT_LPS22HH_Setup+0xc2>
		  HAL_UART_Transmit(Guart,"NOT OK\n\r", 8, HAL_MAX_DELAY);
 80013da:	4b37      	ldr	r3, [pc, #220]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
 80013e2:	2208      	movs	r2, #8
 80013e4:	493a      	ldr	r1, [pc, #232]	; (80014d0 <MRT_LPS22HH_Setup+0x154>)
 80013e6:	f00d f824 	bl	800e432 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"This Device is: " , 16, HAL_MAX_DELAY);
 80013ea:	4b33      	ldr	r3, [pc, #204]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 80013ec:	6818      	ldr	r0, [r3, #0]
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	2210      	movs	r2, #16
 80013f4:	4937      	ldr	r1, [pc, #220]	; (80014d4 <MRT_LPS22HH_Setup+0x158>)
 80013f6:	f00d f81c 	bl	800e432 <HAL_UART_Transmit>
		  char buffer[10];
		  sprintf(buffer, "%X\r\n", lps_whoamI);
 80013fa:	4b33      	ldr	r3, [pc, #204]	; (80014c8 <MRT_LPS22HH_Setup+0x14c>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4934      	ldr	r1, [pc, #208]	; (80014d8 <MRT_LPS22HH_Setup+0x15c>)
 8001406:	4618      	mov	r0, r3
 8001408:	f01a fa36 	bl	801b878 <siprintf>
		  HAL_UART_Transmit(Guart,buffer, strlen(buffer), HAL_MAX_DELAY);
 800140c:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 800140e:	681c      	ldr	r4, [r3, #0]
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4618      	mov	r0, r3
 8001416:	f7fe feeb 	bl	80001f0 <strlen>
 800141a:	4603      	mov	r3, r0
 800141c:	b29a      	uxth	r2, r3
 800141e:	f107 0114 	add.w	r1, r7, #20
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	4620      	mov	r0, r4
 8001428:	f00d f803 	bl	800e432 <HAL_UART_Transmit>
		  HAL_UART_Transmit(Guart,"\n\rProgram Terminated\n\r", 22, HAL_MAX_DELAY);
 800142c:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 800142e:	6818      	ldr	r0, [r3, #0]
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
 8001434:	2216      	movs	r2, #22
 8001436:	4929      	ldr	r1, [pc, #164]	; (80014dc <MRT_LPS22HH_Setup+0x160>)
 8001438:	f00c fffb 	bl	800e432 <HAL_UART_Transmit>
		  while(1);
 800143c:	e7fe      	b.n	800143c <MRT_LPS22HH_Setup+0xc0>
	  }
	  HAL_UART_Transmit(Guart,"OK\n\r", 4, HAL_MAX_DELAY);
 800143e:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 8001440:	6818      	ldr	r0, [r3, #0]
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	2204      	movs	r2, #4
 8001448:	4925      	ldr	r1, [pc, #148]	; (80014e0 <MRT_LPS22HH_Setup+0x164>)
 800144a:	f00c fff2 	bl	800e432 <HAL_UART_Transmit>

	  /* Restore default configuration */
	  lps22hh_reset_set(&lps_ctx, PROPERTY_ENABLE);
 800144e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001452:	2101      	movs	r1, #1
 8001454:	4618      	mov	r0, r3
 8001456:	f005 fda1 	bl	8006f9c <lps22hh_reset_set>

	  HAL_Delay(1000);
 800145a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800145e:	f006 ffaf 	bl	80083c0 <HAL_Delay>

	  do {
	    lps22hh_reset_get(&lps_ctx, &lps_rst);
 8001462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001466:	491f      	ldr	r1, [pc, #124]	; (80014e4 <MRT_LPS22HH_Setup+0x168>)
 8001468:	4618      	mov	r0, r3
 800146a:	f005 fdbd 	bl	8006fe8 <lps22hh_reset_get>
	  } while (lps_rst);
 800146e:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <MRT_LPS22HH_Setup+0x168>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f5      	bne.n	8001462 <MRT_LPS22HH_Setup+0xe6>


	  /* Enable Block Data Update */
	  lps22hh_block_data_update_set(&lps_ctx, PROPERTY_ENABLE);
 8001476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147a:	2101      	movs	r1, #1
 800147c:	4618      	mov	r0, r3
 800147e:	f005 fca3 	bl	8006dc8 <lps22hh_block_data_update_set>
	  /* Set Output Data Rate */
	  lps22hh_data_rate_set(&lps_ctx, LPS22HH_75_Hz_LOW_NOISE);
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	2115      	movs	r1, #21
 8001488:	4618      	mov	r0, r3
 800148a:	f005 fcc3 	bl	8006e14 <lps22hh_data_rate_set>
	  HAL_UART_Transmit(Guart,"LPS22HH Setup Ends\n\r", 24, HAL_MAX_DELAY);
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <MRT_LPS22HH_Setup+0x13c>)
 8001490:	6818      	ldr	r0, [r3, #0]
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
 8001496:	2218      	movs	r2, #24
 8001498:	4913      	ldr	r1, [pc, #76]	; (80014e8 <MRT_LPS22HH_Setup+0x16c>)
 800149a:	f00c ffca 	bl	800e432 <HAL_UART_Transmit>

	  return lps_ctx;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	461c      	mov	r4, r3
 80014a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	}
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	3734      	adds	r7, #52	; 0x34
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd90      	pop	{r4, r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20005f08 	.word	0x20005f08
 80014bc:	0801f928 	.word	0x0801f928
 80014c0:	08001599 	.word	0x08001599
 80014c4:	080015d3 	.word	0x080015d3
 80014c8:	20000402 	.word	0x20000402
 80014cc:	0801f8b0 	.word	0x0801f8b0
 80014d0:	0801f8c8 	.word	0x0801f8c8
 80014d4:	0801f8d4 	.word	0x0801f8d4
 80014d8:	0801f8e8 	.word	0x0801f8e8
 80014dc:	0801f8f0 	.word	0x0801f8f0
 80014e0:	0801f908 	.word	0x0801f908
 80014e4:	20000403 	.word	0x20000403
 80014e8:	0801f940 	.word	0x0801f940

080014ec <MRT_LPS22HH_getPressure>:



void MRT_LPS22HH_getPressure(stmdev_ctx_t lps_ctx,float* pressure){
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b087      	sub	sp, #28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	1d3c      	adds	r4, r7, #4
 80014f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014f8:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 80014fa:	f107 0214 	add.w	r2, r7, #20
 80014fe:	1d38      	adds	r0, r7, #4
 8001500:	2301      	movs	r3, #1
 8001502:	2127      	movs	r1, #39	; 0x27
 8001504:	f005 fbfe 	bl	8006d04 <lps22hh_read_reg>

	//uint8_t reg;
	//lps22hh_press_flag_data_ready_get(&lps_ctx, &reg);

	if (reg.status.p_da) {
 8001508:	7d3b      	ldrb	r3, [r7, #20]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d011      	beq.n	8001538 <MRT_LPS22HH_getPressure+0x4c>
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <MRT_LPS22HH_getPressure+0x54>)
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
	//if (reg) {
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t)); //TODO CAN CAUSE AN HARDFAULT
	  lps22hh_pressure_raw_get(&lps_ctx, &data_raw_pressure);
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	4908      	ldr	r1, [pc, #32]	; (8001540 <MRT_LPS22HH_getPressure+0x54>)
 800151e:	4618      	mov	r0, r3
 8001520:	f005 fcdf 	bl	8006ee2 <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MRT_LPS22HH_getPressure+0x54>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f005 fc1b 	bl	8006d64 <lps22hh_from_lsb_to_hpa>
 800152e:	eef0 7a40 	vmov.f32	s15, s0
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001538:	bf00      	nop
 800153a:	371c      	adds	r7, #28
 800153c:	46bd      	mov	sp, r7
 800153e:	bd90      	pop	{r4, r7, pc}
 8001540:	200003fc 	.word	0x200003fc

08001544 <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(stmdev_ctx_t lps_ctx,float* temperature_degC){
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b087      	sub	sp, #28
 8001548:	af00      	add	r7, sp, #0
 800154a:	1d3c      	adds	r4, r7, #4
 800154c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001550:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	//lps22hh_reg_t reg;
	//lps22hh_read_reg(&lps_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);

	uint8_t reg;
	lps22hh_temp_flag_data_ready_get(&lps_ctx, &reg);
 8001552:	f107 0217 	add.w	r2, r7, #23
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f005 fca8 	bl	8006eb0 <lps22hh_temp_flag_data_ready_get>

	//if (reg.status.t_da) {
	if (reg) {
 8001560:	7dfb      	ldrb	r3, [r7, #23]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d012      	beq.n	800158c <MRT_LPS22HH_getTemperature+0x48>
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <MRT_LPS22HH_getTemperature+0x50>)
 8001568:	2200      	movs	r2, #0
 800156a:	801a      	strh	r2, [r3, #0]
	  memset(&lps_data_raw_temperature, 0x00, sizeof(int16_t));
	  lps22hh_temperature_raw_get(&lps_ctx, &lps_data_raw_temperature);
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	4909      	ldr	r1, [pc, #36]	; (8001594 <MRT_LPS22HH_getTemperature+0x50>)
 8001570:	4618      	mov	r0, r3
 8001572:	f005 fcdf 	bl	8006f34 <lps22hh_temperature_raw_get>
	  *temperature_degC = lps22hh_from_lsb_to_celsius(lps_data_raw_temperature);
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <MRT_LPS22HH_getTemperature+0x50>)
 8001578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157c:	4618      	mov	r0, r3
 800157e:	f005 fc09 	bl	8006d94 <lps22hh_from_lsb_to_celsius>
 8001582:	eef0 7a40 	vmov.f32	s15, s0
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800158c:	bf00      	nop
 800158e:	371c      	adds	r7, #28
 8001590:	46bd      	mov	sp, r7
 8001592:	bd90      	pop	{r4, r7, pc}
 8001594:	20000400 	.word	0x20000400

08001598 <lps_write>:




static int32_t lps_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af04      	add	r7, sp, #16
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	461a      	mov	r2, r3
 80015a4:	460b      	mov	r3, r1
 80015a6:	72fb      	strb	r3, [r7, #11]
 80015a8:	4613      	mov	r3, r2
 80015aa:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80015ac:	7afb      	ldrb	r3, [r7, #11]
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b4:	9302      	str	r3, [sp, #8]
 80015b6:	893b      	ldrh	r3, [r7, #8]
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	2301      	movs	r3, #1
 80015c0:	21b9      	movs	r1, #185	; 0xb9
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f007 fde0 	bl	8009188 <HAL_I2C_Mem_Write>
  return 0;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <lps_read>:

static int32_t lps_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b088      	sub	sp, #32
 80015d6:	af04      	add	r7, sp, #16
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	461a      	mov	r2, r3
 80015de:	460b      	mov	r3, r1
 80015e0:	72fb      	strb	r3, [r7, #11]
 80015e2:	4613      	mov	r3, r2
 80015e4:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80015e6:	7afb      	ldrb	r3, [r7, #11]
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ee:	9302      	str	r3, [sp, #8]
 80015f0:	893b      	ldrh	r3, [r7, #8]
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2301      	movs	r3, #1
 80015fa:	21b9      	movs	r1, #185	; 0xb9
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f007 febd 	bl	800937c <HAL_I2C_Mem_Read>
  return 0;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001610:	f3bf 8f4f 	dsb	sy
}
 8001614:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <__NVIC_SystemReset+0x24>)
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800161e:	4904      	ldr	r1, [pc, #16]	; (8001630 <__NVIC_SystemReset+0x24>)
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <__NVIC_SystemReset+0x28>)
 8001622:	4313      	orrs	r3, r2
 8001624:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001626:	f3bf 8f4f 	dsb	sy
}
 800162a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <__NVIC_SystemReset+0x20>
 8001630:	e000ed00 	.word	0xe000ed00
 8001634:	05fa0004 	.word	0x05fa0004

08001638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800163a:	b099      	sub	sp, #100	; 0x64
 800163c:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800163e:	f006 fe7d 	bl	800833c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001642:	f000 f999 	bl	8001978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001646:	f000 fd33 	bl	80020b0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800164a:	f000 fa01 	bl	8001a50 <MX_ADC1_Init>
  MX_I2C1_Init();
 800164e:	f000 fa51 	bl	8001af4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001652:	f000 fa8f 	bl	8001b74 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001656:	f000 facd 	bl	8001bf4 <MX_I2C3_Init>
  MX_SPI2_Init();
 800165a:	f000 fbb1 	bl	8001dc0 <MX_SPI2_Init>
  MX_SPI4_Init();
 800165e:	f000 fbe5 	bl	8001e2c <MX_SPI4_Init>
  MX_SPI5_Init();
 8001662:	f000 fc19 	bl	8001e98 <MX_SPI5_Init>
  MX_TIM2_Init();
 8001666:	f000 fc4d 	bl	8001f04 <MX_TIM2_Init>
  MX_UART8_Init();
 800166a:	f000 fca3 	bl	8001fb4 <MX_UART8_Init>
  MX_USART3_UART_Init();
 800166e:	f000 fccb 	bl	8002008 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001672:	f000 fcf3 	bl	800205c <MX_USART6_UART_Init>
  MX_RTC_Init();
 8001676:	f000 fb17 	bl	8001ca8 <MX_RTC_Init>
  //MX_IWDG_Init(); TODO remove
  MX_FATFS_Init();
 800167a:	f00e fe2f 	bl	80102dc <MX_FATFS_Init>
  /*
   * Reinitialize all peripherals
   */

  // reset LEDs
  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800167e:	2200      	movs	r2, #0
 8001680:	2102      	movs	r1, #2
 8001682:	4896      	ldr	r0, [pc, #600]	; (80018dc <main+0x2a4>)
 8001684:	f007 fc0a 	bl	8008e9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001688:	2200      	movs	r2, #0
 800168a:	2104      	movs	r1, #4
 800168c:	4893      	ldr	r0, [pc, #588]	; (80018dc <main+0x2a4>)
 800168e:	f007 fc05 	bl	8008e9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	2108      	movs	r1, #8
 8001696:	4891      	ldr	r0, [pc, #580]	; (80018dc <main+0x2a4>)
 8001698:	f007 fc00 	bl	8008e9c <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 800169c:	2201      	movs	r2, #1
 800169e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016a2:	488f      	ldr	r0, [pc, #572]	; (80018e0 <main+0x2a8>)
 80016a4:	f007 fbfa 	bl	8008e9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 80016a8:	2200      	movs	r2, #0
 80016aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ae:	488c      	ldr	r0, [pc, #560]	; (80018e0 <main+0x2a8>)
 80016b0:	f007 fbf4 	bl	8008e9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 80016b4:	2200      	movs	r2, #0
 80016b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ba:	4889      	ldr	r0, [pc, #548]	; (80018e0 <main+0x2a8>)
 80016bc:	f007 fbee 	bl	8008e9c <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET); //PG1 ARMING_PROP
 80016c0:	2201      	movs	r2, #1
 80016c2:	2102      	movs	r1, #2
 80016c4:	4886      	ldr	r0, [pc, #536]	; (80018e0 <main+0x2a8>)
 80016c6:	f007 fbe9 	bl	8008e9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 80016ca:	2200      	movs	r2, #0
 80016cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016d0:	4884      	ldr	r0, [pc, #528]	; (80018e4 <main+0x2ac>)
 80016d2:	f007 fbe3 	bl	8008e9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 80016d6:	2200      	movs	r2, #0
 80016d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016dc:	4881      	ldr	r0, [pc, #516]	; (80018e4 <main+0x2ac>)
 80016de:	f007 fbdd 	bl	8008e9c <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 80016e2:	2200      	movs	r2, #0
 80016e4:	2104      	movs	r1, #4
 80016e6:	4880      	ldr	r0, [pc, #512]	; (80018e8 <main+0x2b0>)
 80016e8:	f007 fbd8 	bl	8008e9c <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


  // reset payload EN signal
  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 80016ec:	2200      	movs	r2, #0
 80016ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016f2:	487d      	ldr	r0, [pc, #500]	; (80018e8 <main+0x2b0>)
 80016f4:	f007 fbd2 	bl	8008e9c <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high
  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

  // set power off for VR
  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 80016f8:	2200      	movs	r2, #0
 80016fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016fe:	4878      	ldr	r0, [pc, #480]	; (80018e0 <main+0x2a8>)
 8001700:	f007 fbcc 	bl	8008e9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 8001704:	2200      	movs	r2, #0
 8001706:	2180      	movs	r1, #128	; 0x80
 8001708:	4878      	ldr	r0, [pc, #480]	; (80018ec <main+0x2b4>)
 800170a:	f007 fbc7 	bl	8008e9c <HAL_GPIO_WritePin>

  // FLASH set CS, WP and IO3 pins high
  HAL_GPIO_WritePin(OUT_FLASH_CS_GPIO_Port, OUT_FLASH_CS_Pin, SET);
 800170e:	2201      	movs	r2, #1
 8001710:	2140      	movs	r1, #64	; 0x40
 8001712:	4876      	ldr	r0, [pc, #472]	; (80018ec <main+0x2b4>)
 8001714:	f007 fbc2 	bl	8008e9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_FLASH_WP_GPIO_Port, OUT_FLASH_WP_Pin, SET);
 8001718:	2201      	movs	r2, #1
 800171a:	2120      	movs	r1, #32
 800171c:	4873      	ldr	r0, [pc, #460]	; (80018ec <main+0x2b4>)
 800171e:	f007 fbbd 	bl	8008e9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_FLASH_IO3_GPIO_Port, OUT_FLASH_IO3_Pin, SET);
 8001722:	2201      	movs	r2, #1
 8001724:	2110      	movs	r1, #16
 8001726:	4871      	ldr	r0, [pc, #452]	; (80018ec <main+0x2b4>)
 8001728:	f007 fbb8 	bl	8008e9c <HAL_GPIO_WritePin>
   *-Activate freeRTOS
   *-Change SysTic to any other timer (done in .ioc)
   *-Include the path to all includes folders of the drivers (for C and C++ linkers)
   */

  HAL_UART_Transmit(&DEBUG_UART,"\r\n\r\nStarting FC\r\n\r\n",19,HAL_MAX_DELAY);
 800172c:	f04f 33ff 	mov.w	r3, #4294967295
 8001730:	2213      	movs	r2, #19
 8001732:	496f      	ldr	r1, [pc, #444]	; (80018f0 <main+0x2b8>)
 8001734:	486f      	ldr	r0, [pc, #444]	; (80018f4 <main+0x2bc>)
 8001736:	f00c fe7c 	bl	800e432 <HAL_UART_Transmit>

  /*
   * For external FLASH memory
   *-Put before RTOS setup because you need the external flash in its setup
   */
    MRT_SetupRTOS(&hrtc, DEBUG_UART,SLEEP_TIME); //Put here so we can pass the uart value to the setup
 800173a:	4e6e      	ldr	r6, [pc, #440]	; (80018f4 <main+0x2bc>)
 800173c:	2305      	movs	r3, #5
 800173e:	930e      	str	r3, [sp, #56]	; 0x38
 8001740:	466d      	mov	r5, sp
 8001742:	f106 040c 	add.w	r4, r6, #12
 8001746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800174c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001750:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001752:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001756:	e885 0003 	stmia.w	r5, {r0, r1}
 800175a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800175e:	4866      	ldr	r0, [pc, #408]	; (80018f8 <main+0x2c0>)
 8001760:	f006 f948 	bl	80079f4 <MRT_SetupRTOS>
	MRT_externalFlashSetup(&DEBUG_UART);
 8001764:	4863      	ldr	r0, [pc, #396]	; (80018f4 <main+0x2bc>)
 8001766:	f002 f87f 	bl	8003868 <MRT_externalFlashSetup>
	   *random resets. Now the problem is how do we start the FC from the beginning if we have a random
	   *amount of resets?
	   *Solution : We use the external IN_Button has an external reset that resets the board from
	   *the beginning using the callback function (defined in MRT_Helpers.c)
	   */
	  MX_IWDG_Init();
 800176a:	f000 fa83 	bl	8001c74 <MX_IWDG_Init>
   * -(Optional) Use MCU APB1 freeze register to freeze the WD in StandByMode instead of resetting the FC
   * -(Optional) Setup alarm A and the clock time in .ioc (not recommend because random resets)
   * The rest have been taken care of
   * You can access the flag of both alarm A and B with the variables flagA and flagB
   */
  MRT_setRTC(prev_hours,prev_min,prev_sec);
 800176e:	4b63      	ldr	r3, [pc, #396]	; (80018fc <main+0x2c4>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	4a63      	ldr	r2, [pc, #396]	; (8001900 <main+0x2c8>)
 8001774:	7811      	ldrb	r1, [r2, #0]
 8001776:	4a63      	ldr	r2, [pc, #396]	; (8001904 <main+0x2cc>)
 8001778:	7812      	ldrb	r2, [r2, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f006 fab8 	bl	8007cf0 <MRT_setRTC>
  HAL_Delay(2000); //To make sure that when you set the Alarm it doesn't go off automatically
 8001780:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001784:	f006 fe1c 	bl	80083c0 <HAL_Delay>
  MRT_setAlarmA(WHEN_SLEEP_TIME_HOURS, WHEN_SLEEP_TIME_MIN, WHEN_SLEEP_TIME_SEC);
 8001788:	2200      	movs	r2, #0
 800178a:	2102      	movs	r1, #2
 800178c:	2000      	movs	r0, #0
 800178e:	f006 fa67 	bl	8007c60 <MRT_setAlarmA>

  /*
   * For Iridium:
   * -Set the project as c++
   */
    HAL_IWDG_Refresh(&hiwdg);
 8001792:	485d      	ldr	r0, [pc, #372]	; (8001908 <main+0x2d0>)
 8001794:	f008 fc66 	bl	800a064 <HAL_IWDG_Refresh>
	HAL_GPIO_WritePin(Iridium_RST_GPIO_Port, Iridium_RST_Pin, SET);
 8001798:	2201      	movs	r2, #1
 800179a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800179e:	4852      	ldr	r0, [pc, #328]	; (80018e8 <main+0x2b0>)
 80017a0:	f007 fb7c 	bl	8008e9c <HAL_GPIO_WritePin>
    uint8_t lol = MRT_Static_Iridium_Setup(DEBUG_UART);
 80017a4:	4e53      	ldr	r6, [pc, #332]	; (80018f4 <main+0x2bc>)
 80017a6:	466d      	mov	r5, sp
 80017a8:	f106 0410 	add.w	r4, r6, #16
 80017ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b8:	6823      	ldr	r3, [r4, #0]
 80017ba:	602b      	str	r3, [r5, #0]
 80017bc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80017c0:	f004 fd06 	bl	80061d0 <MRT_Static_Iridium_Setup>
 80017c4:	4603      	mov	r3, r0
 80017c6:	75fb      	strb	r3, [r7, #23]

  /*
   * For LSM6DSR
   *-Enable float formatting for sprintf (go to Project->Properties->C/C++ Build->Settings->MCU Settings->Check the box "Use float with printf")
   */
  HAL_IWDG_Refresh(&hiwdg);
 80017c8:	484f      	ldr	r0, [pc, #316]	; (8001908 <main+0x2d0>)
 80017ca:	f008 fc4b 	bl	800a064 <HAL_IWDG_Refresh>
  lsm_ctx = MRT_LSM6DSR_Setup(&LSM_I2C, &DEBUG_UART);
 80017ce:	4c4f      	ldr	r4, [pc, #316]	; (800190c <main+0x2d4>)
 80017d0:	463b      	mov	r3, r7
 80017d2:	4a48      	ldr	r2, [pc, #288]	; (80018f4 <main+0x2bc>)
 80017d4:	494e      	ldr	r1, [pc, #312]	; (8001910 <main+0x2d8>)
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fc52 	bl	8001080 <MRT_LSM6DSR_Setup>
 80017dc:	463b      	mov	r3, r7
 80017de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

   /*
    * For LPS22HH
    *-Enable float formatting for sprintf (go to Project->Properties->C/C++ Build->Settings->MCU Settings->Check the box "Use float with printf")
    */
  HAL_IWDG_Refresh(&hiwdg);
 80017e6:	4848      	ldr	r0, [pc, #288]	; (8001908 <main+0x2d0>)
 80017e8:	f008 fc3c 	bl	800a064 <HAL_IWDG_Refresh>
  lps_ctx = MRT_LPS22HH_Setup(&LPS_I2C, &DEBUG_UART);
 80017ec:	4c49      	ldr	r4, [pc, #292]	; (8001914 <main+0x2dc>)
 80017ee:	463b      	mov	r3, r7
 80017f0:	4a40      	ldr	r2, [pc, #256]	; (80018f4 <main+0x2bc>)
 80017f2:	4947      	ldr	r1, [pc, #284]	; (8001910 <main+0x2d8>)
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fdc1 	bl	800137c <MRT_LPS22HH_Setup>
 80017fa:	463b      	mov	r3, r7
 80017fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001800:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    * For the GPS:
    * -huart6 on v4.3
    * -Set its uart to 9600
    *
    */
  HAL_IWDG_Refresh(&hiwdg);
 8001804:	4840      	ldr	r0, [pc, #256]	; (8001908 <main+0x2d0>)
 8001806:	f008 fc2d 	bl	800a064 <HAL_IWDG_Refresh>
  GPS_init(&GPS_UART, &DEBUG_UART);
 800180a:	493a      	ldr	r1, [pc, #232]	; (80018f4 <main+0x2bc>)
 800180c:	4842      	ldr	r0, [pc, #264]	; (8001918 <main+0x2e0>)
 800180e:	f001 fff7 	bl	8003800 <GPS_init>

   /*
    * For the xtend
    * -huart3 on v4.3
    */
   HAL_GPIO_WritePin(XTend_CTS_Pin, GPIO_PIN_10, GPIO_PIN_RESET); //TODO is it necessary?
 8001812:	2200      	movs	r2, #0
 8001814:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001818:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800181c:	f007 fb3e 	bl	8008e9c <HAL_GPIO_WritePin>

   /*
    * For the SRadio
    * -SPI2 on v4.3
    */
  HAL_IWDG_Refresh(&hiwdg);
 8001820:	4839      	ldr	r0, [pc, #228]	; (8001908 <main+0x2d0>)
 8001822:	f008 fc1f 	bl	800a064 <HAL_IWDG_Refresh>
  set_hspi(SRADIO_SPI);
 8001826:	4c3d      	ldr	r4, [pc, #244]	; (800191c <main+0x2e4>)
 8001828:	4668      	mov	r0, sp
 800182a:	f104 0310 	add.w	r3, r4, #16
 800182e:	2248      	movs	r2, #72	; 0x48
 8001830:	4619      	mov	r1, r3
 8001832:	f018 ff7b 	bl	801a72c <memcpy>
 8001836:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800183a:	f00e fd37 	bl	80102ac <set_hspi>
  // SPI2_SX_CS_GPIO_Port
  set_NSS_pin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin);
 800183e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001842:	4837      	ldr	r0, [pc, #220]	; (8001920 <main+0x2e8>)
 8001844:	f00e fcda 	bl	80101fc <set_NSS_pin>
  set_BUSY_pin(SX_BUSY_GPIO_Port, SX_BUSY_Pin);
 8001848:	2108      	movs	r1, #8
 800184a:	4825      	ldr	r0, [pc, #148]	; (80018e0 <main+0x2a8>)
 800184c:	f00e fcec 	bl	8010228 <set_BUSY_pin>
  set_NRESET_pin(SX_RST_GPIO_Port, SX_RST_Pin);
 8001850:	2104      	movs	r1, #4
 8001852:	4823      	ldr	r0, [pc, #140]	; (80018e0 <main+0x2a8>)
 8001854:	f00e fcfe 	bl	8010254 <set_NRESET_pin>
  set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
 8001858:	2110      	movs	r1, #16
 800185a:	4821      	ldr	r0, [pc, #132]	; (80018e0 <main+0x2a8>)
 800185c:	f00e fd10 	bl	8010280 <set_DIO1_pin>

	/*
	* For the SD card
	*
	*/
    HAL_IWDG_Refresh(&hiwdg);
 8001860:	4829      	ldr	r0, [pc, #164]	; (8001908 <main+0x2d0>)
 8001862:	f008 fbff 	bl	800a064 <HAL_IWDG_Refresh>
    sd_init_dynamic_filename("FC", "", filename);
 8001866:	4a2f      	ldr	r2, [pc, #188]	; (8001924 <main+0x2ec>)
 8001868:	492f      	ldr	r1, [pc, #188]	; (8001928 <main+0x2f0>)
 800186a:	4830      	ldr	r0, [pc, #192]	; (800192c <main+0x2f4>)
 800186c:	f006 fb40 	bl	8007ef0 <sd_init_dynamic_filename>
//TODO DISABLE EXTERNAL BUTTON INTERRUPT ONCE ROCKET IS ARMED (or find other way to completely reset the board)

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001870:	f013 fdd2 	bl	8015418 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 8001874:	4a2e      	ldr	r2, [pc, #184]	; (8001930 <main+0x2f8>)
 8001876:	2100      	movs	r1, #0
 8001878:	482e      	ldr	r0, [pc, #184]	; (8001934 <main+0x2fc>)
 800187a:	f013 fe17 	bl	80154ac <osThreadNew>
 800187e:	4603      	mov	r3, r0
 8001880:	4a2d      	ldr	r2, [pc, #180]	; (8001938 <main+0x300>)
 8001882:	6013      	str	r3, [r2, #0]

  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 8001884:	4a2d      	ldr	r2, [pc, #180]	; (800193c <main+0x304>)
 8001886:	2100      	movs	r1, #0
 8001888:	482d      	ldr	r0, [pc, #180]	; (8001940 <main+0x308>)
 800188a:	f013 fe0f 	bl	80154ac <osThreadNew>
 800188e:	4603      	mov	r3, r0
 8001890:	4a2c      	ldr	r2, [pc, #176]	; (8001944 <main+0x30c>)
 8001892:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 8001894:	4a2c      	ldr	r2, [pc, #176]	; (8001948 <main+0x310>)
 8001896:	2100      	movs	r1, #0
 8001898:	482c      	ldr	r0, [pc, #176]	; (800194c <main+0x314>)
 800189a:	f013 fe07 	bl	80154ac <osThreadNew>
 800189e:	4603      	mov	r3, r0
 80018a0:	4a2b      	ldr	r2, [pc, #172]	; (8001950 <main+0x318>)
 80018a2:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 80018a4:	4a2b      	ldr	r2, [pc, #172]	; (8001954 <main+0x31c>)
 80018a6:	2100      	movs	r1, #0
 80018a8:	482b      	ldr	r0, [pc, #172]	; (8001958 <main+0x320>)
 80018aa:	f013 fdff 	bl	80154ac <osThreadNew>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4a2a      	ldr	r2, [pc, #168]	; (800195c <main+0x324>)
 80018b2:	6013      	str	r3, [r2, #0]

  /* creation of Printing */
  PrintingHandle = osThreadNew(StartPrinting, NULL, &Printing_attributes);
 80018b4:	4a2a      	ldr	r2, [pc, #168]	; (8001960 <main+0x328>)
 80018b6:	2100      	movs	r1, #0
 80018b8:	482a      	ldr	r0, [pc, #168]	; (8001964 <main+0x32c>)
 80018ba:	f013 fdf7 	bl	80154ac <osThreadNew>
 80018be:	4603      	mov	r3, r0
 80018c0:	4a29      	ldr	r2, [pc, #164]	; (8001968 <main+0x330>)
 80018c2:	6013      	str	r3, [r2, #0]

  /* creation of WatchDog */
  WatchDogHandle = osThreadNew(StartWatchDog, NULL, &WatchDog_attributes);
 80018c4:	4a29      	ldr	r2, [pc, #164]	; (800196c <main+0x334>)
 80018c6:	2100      	movs	r1, #0
 80018c8:	4829      	ldr	r0, [pc, #164]	; (8001970 <main+0x338>)
 80018ca:	f013 fdef 	bl	80154ac <osThreadNew>
 80018ce:	4603      	mov	r3, r0
 80018d0:	4a28      	ldr	r2, [pc, #160]	; (8001974 <main+0x33c>)
 80018d2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80018d4:	f013 fdc4 	bl	8015460 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <main+0x2a0>
 80018da:	bf00      	nop
 80018dc:	40020800 	.word	0x40020800
 80018e0:	40021800 	.word	0x40021800
 80018e4:	40021400 	.word	0x40021400
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40020c00 	.word	0x40020c00
 80018f0:	0801f99c 	.word	0x0801f99c
 80018f4:	20005ec4 	.word	0x20005ec4
 80018f8:	20006920 	.word	0x20006920
 80018fc:	20000434 	.word	0x20000434
 8001900:	20000435 	.word	0x20000435
 8001904:	20000436 	.word	0x20000436
 8001908:	200062f8 	.word	0x200062f8
 800190c:	20006a60 	.word	0x20006a60
 8001910:	20005f0c 	.word	0x20005f0c
 8001914:	20006a50 	.word	0x20006a50
 8001918:	200069b8 	.word	0x200069b8
 800191c:	20005f60 	.word	0x20005f60
 8001920:	40020400 	.word	0x40020400
 8001924:	20006370 	.word	0x20006370
 8001928:	0801f9b0 	.word	0x0801f9b0
 800192c:	0801f9b4 	.word	0x0801f9b4
 8001930:	080214fc 	.word	0x080214fc
 8001934:	080023d5 	.word	0x080023d5
 8001938:	2000636c 	.word	0x2000636c
 800193c:	08021520 	.word	0x08021520
 8001940:	0800247d 	.word	0x0800247d
 8001944:	200069b0 	.word	0x200069b0
 8001948:	08021544 	.word	0x08021544
 800194c:	0800248d 	.word	0x0800248d
 8001950:	200069b4 	.word	0x200069b4
 8001954:	08021568 	.word	0x08021568
 8001958:	080024a9 	.word	0x080024a9
 800195c:	20006a4c 	.word	0x20006a4c
 8001960:	0802158c 	.word	0x0802158c
 8001964:	08002579 	.word	0x08002579
 8001968:	20006940 	.word	0x20006940
 800196c:	080215b0 	.word	0x080215b0
 8001970:	08002831 	.word	0x08002831
 8001974:	20006358 	.word	0x20006358

08001978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b094      	sub	sp, #80	; 0x50
 800197c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800197e:	f107 0320 	add.w	r3, r7, #32
 8001982:	2230      	movs	r2, #48	; 0x30
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f018 fef8 	bl	801a77c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800198c:	f107 030c 	add.w	r3, r7, #12
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800199c:	2300      	movs	r3, #0
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	4b29      	ldr	r3, [pc, #164]	; (8001a48 <SystemClock_Config+0xd0>)
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	4a28      	ldr	r2, [pc, #160]	; (8001a48 <SystemClock_Config+0xd0>)
 80019a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019aa:	6413      	str	r3, [r2, #64]	; 0x40
 80019ac:	4b26      	ldr	r3, [pc, #152]	; (8001a48 <SystemClock_Config+0xd0>)
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019b8:	2300      	movs	r3, #0
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <SystemClock_Config+0xd4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019c4:	4a21      	ldr	r2, [pc, #132]	; (8001a4c <SystemClock_Config+0xd4>)
 80019c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <SystemClock_Config+0xd4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80019d8:	2309      	movs	r3, #9
 80019da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019e2:	2301      	movs	r3, #1
 80019e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e6:	2302      	movs	r3, #2
 80019e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019f0:	2308      	movs	r3, #8
 80019f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80019f4:	2348      	movs	r3, #72	; 0x48
 80019f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019f8:	2302      	movs	r3, #2
 80019fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80019fc:	2303      	movs	r3, #3
 80019fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a00:	f107 0320 	add.w	r3, r7, #32
 8001a04:	4618      	mov	r0, r3
 8001a06:	f009 fcff 	bl	800b408 <HAL_RCC_OscConfig>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001a10:	f000 ffb2 	bl	8002978 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a14:	230f      	movs	r3, #15
 8001a16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a2a:	f107 030c 	add.w	r3, r7, #12
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f009 ff61 	bl	800b8f8 <HAL_RCC_ClockConfig>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001a3c:	f000 ff9c 	bl	8002978 <Error_Handler>
  }
}
 8001a40:	bf00      	nop
 8001a42:	3750      	adds	r7, #80	; 0x50
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40007000 	.word	0x40007000

08001a50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a56:	463b      	mov	r3, r7
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a62:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <MX_ADC1_Init+0x98>)
 8001a64:	4a21      	ldr	r2, [pc, #132]	; (8001aec <MX_ADC1_Init+0x9c>)
 8001a66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a68:	4b1f      	ldr	r3, [pc, #124]	; (8001ae8 <MX_ADC1_Init+0x98>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <MX_ADC1_Init+0x98>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a74:	4b1c      	ldr	r3, [pc, #112]	; (8001ae8 <MX_ADC1_Init+0x98>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ae8 <MX_ADC1_Init+0x98>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a80:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <MX_ADC1_Init+0x98>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a88:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <MX_ADC1_Init+0x98>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a8e:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <MX_ADC1_Init+0x98>)
 8001a90:	4a17      	ldr	r2, [pc, #92]	; (8001af0 <MX_ADC1_Init+0xa0>)
 8001a92:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a94:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <MX_ADC1_Init+0x98>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a9a:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <MX_ADC1_Init+0x98>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <MX_ADC1_Init+0x98>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <MX_ADC1_Init+0x98>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001aae:	480e      	ldr	r0, [pc, #56]	; (8001ae8 <MX_ADC1_Init+0x98>)
 8001ab0:	f006 fcaa 	bl	8008408 <HAL_ADC_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001aba:	f000 ff5d 	bl	8002978 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001abe:	2306      	movs	r3, #6
 8001ac0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aca:	463b      	mov	r3, r7
 8001acc:	4619      	mov	r1, r3
 8001ace:	4806      	ldr	r0, [pc, #24]	; (8001ae8 <MX_ADC1_Init+0x98>)
 8001ad0:	f006 fcde 	bl	8008490 <HAL_ADC_ConfigChannel>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001ada:	f000 ff4d 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	2000676c 	.word	0x2000676c
 8001aec:	40012000 	.word	0x40012000
 8001af0:	0f000001 	.word	0x0f000001

08001af4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001af8:	4b1b      	ldr	r3, [pc, #108]	; (8001b68 <MX_I2C1_Init+0x74>)
 8001afa:	4a1c      	ldr	r2, [pc, #112]	; (8001b6c <MX_I2C1_Init+0x78>)
 8001afc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001afe:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <MX_I2C1_Init+0x74>)
 8001b00:	4a1b      	ldr	r2, [pc, #108]	; (8001b70 <MX_I2C1_Init+0x7c>)
 8001b02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b04:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <MX_I2C1_Init+0x74>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b0a:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <MX_I2C1_Init+0x74>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b10:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <MX_I2C1_Init+0x74>)
 8001b12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b18:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <MX_I2C1_Init+0x74>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <MX_I2C1_Init+0x74>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b24:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <MX_I2C1_Init+0x74>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <MX_I2C1_Init+0x74>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b30:	480d      	ldr	r0, [pc, #52]	; (8001b68 <MX_I2C1_Init+0x74>)
 8001b32:	f007 f9e5 	bl	8008f00 <HAL_I2C_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b3c:	f000 ff1c 	bl	8002978 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b40:	2100      	movs	r1, #0
 8001b42:	4809      	ldr	r0, [pc, #36]	; (8001b68 <MX_I2C1_Init+0x74>)
 8001b44:	f008 f9d1 	bl	8009eea <HAL_I2CEx_ConfigAnalogFilter>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001b4e:	f000 ff13 	bl	8002978 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b52:	2100      	movs	r1, #0
 8001b54:	4804      	ldr	r0, [pc, #16]	; (8001b68 <MX_I2C1_Init+0x74>)
 8001b56:	f008 fa04 	bl	8009f62 <HAL_I2CEx_ConfigDigitalFilter>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001b60:	f000 ff0a 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	200062a4 	.word	0x200062a4
 8001b6c:	40005400 	.word	0x40005400
 8001b70:	000186a0 	.word	0x000186a0

08001b74 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b78:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <MX_I2C2_Init+0x74>)
 8001b7a:	4a1c      	ldr	r2, [pc, #112]	; (8001bec <MX_I2C2_Init+0x78>)
 8001b7c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b7e:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <MX_I2C2_Init+0x74>)
 8001b80:	4a1b      	ldr	r2, [pc, #108]	; (8001bf0 <MX_I2C2_Init+0x7c>)
 8001b82:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b84:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <MX_I2C2_Init+0x74>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b8a:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <MX_I2C2_Init+0x74>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b90:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <MX_I2C2_Init+0x74>)
 8001b92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b96:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b98:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <MX_I2C2_Init+0x74>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b9e:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <MX_I2C2_Init+0x74>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ba4:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <MX_I2C2_Init+0x74>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001baa:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <MX_I2C2_Init+0x74>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001bb0:	480d      	ldr	r0, [pc, #52]	; (8001be8 <MX_I2C2_Init+0x74>)
 8001bb2:	f007 f9a5 	bl	8008f00 <HAL_I2C_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001bbc:	f000 fedc 	bl	8002978 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4809      	ldr	r0, [pc, #36]	; (8001be8 <MX_I2C2_Init+0x74>)
 8001bc4:	f008 f991 	bl	8009eea <HAL_I2CEx_ConfigAnalogFilter>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001bce:	f000 fed3 	bl	8002978 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4804      	ldr	r0, [pc, #16]	; (8001be8 <MX_I2C2_Init+0x74>)
 8001bd6:	f008 f9c4 	bl	8009f62 <HAL_I2CEx_ConfigDigitalFilter>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001be0:	f000 feca 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20006304 	.word	0x20006304
 8001bec:	40005800 	.word	0x40005800
 8001bf0:	000186a0 	.word	0x000186a0

08001bf4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <MX_I2C3_Init+0x74>)
 8001bfa:	4a1c      	ldr	r2, [pc, #112]	; (8001c6c <MX_I2C3_Init+0x78>)
 8001bfc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <MX_I2C3_Init+0x74>)
 8001c00:	4a1b      	ldr	r2, [pc, #108]	; (8001c70 <MX_I2C3_Init+0x7c>)
 8001c02:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c04:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <MX_I2C3_Init+0x74>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001c0a:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <MX_I2C3_Init+0x74>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c10:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <MX_I2C3_Init+0x74>)
 8001c12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c16:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c18:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <MX_I2C3_Init+0x74>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001c1e:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <MX_I2C3_Init+0x74>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c24:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <MX_I2C3_Init+0x74>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c2a:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <MX_I2C3_Init+0x74>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c30:	480d      	ldr	r0, [pc, #52]	; (8001c68 <MX_I2C3_Init+0x74>)
 8001c32:	f007 f965 	bl	8008f00 <HAL_I2C_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001c3c:	f000 fe9c 	bl	8002978 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c40:	2100      	movs	r1, #0
 8001c42:	4809      	ldr	r0, [pc, #36]	; (8001c68 <MX_I2C3_Init+0x74>)
 8001c44:	f008 f951 	bl	8009eea <HAL_I2CEx_ConfigAnalogFilter>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001c4e:	f000 fe93 	bl	8002978 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001c52:	2100      	movs	r1, #0
 8001c54:	4804      	ldr	r0, [pc, #16]	; (8001c68 <MX_I2C3_Init+0x74>)
 8001c56:	f008 f984 	bl	8009f62 <HAL_I2CEx_ConfigDigitalFilter>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001c60:	f000 fe8a 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20005f0c 	.word	0x20005f0c
 8001c6c:	40005c00 	.word	0x40005c00
 8001c70:	000186a0 	.word	0x000186a0

08001c74 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <MX_IWDG_Init+0x2c>)
 8001c7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <MX_IWDG_Init+0x30>)
 8001c7c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001c7e:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <MX_IWDG_Init+0x2c>)
 8001c80:	2204      	movs	r2, #4
 8001c82:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2499;
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <MX_IWDG_Init+0x2c>)
 8001c86:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001c8a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001c8c:	4804      	ldr	r0, [pc, #16]	; (8001ca0 <MX_IWDG_Init+0x2c>)
 8001c8e:	f008 f9a7 	bl	8009fe0 <HAL_IWDG_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001c98:	f000 fe6e 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	200062f8 	.word	0x200062f8
 8001ca4:	40003000 	.word	0x40003000

08001ca8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b090      	sub	sp, #64	; 0x40
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001cae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	60da      	str	r2, [r3, #12]
 8001cbc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001cc2:	463b      	mov	r3, r7
 8001cc4:	2228      	movs	r2, #40	; 0x28
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f018 fd57 	bl	801a77c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001cce:	4b3a      	ldr	r3, [pc, #232]	; (8001db8 <MX_RTC_Init+0x110>)
 8001cd0:	4a3a      	ldr	r2, [pc, #232]	; (8001dbc <MX_RTC_Init+0x114>)
 8001cd2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001cd4:	4b38      	ldr	r3, [pc, #224]	; (8001db8 <MX_RTC_Init+0x110>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001cda:	4b37      	ldr	r3, [pc, #220]	; (8001db8 <MX_RTC_Init+0x110>)
 8001cdc:	227f      	movs	r2, #127	; 0x7f
 8001cde:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001ce0:	4b35      	ldr	r3, [pc, #212]	; (8001db8 <MX_RTC_Init+0x110>)
 8001ce2:	22ff      	movs	r2, #255	; 0xff
 8001ce4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ce6:	4b34      	ldr	r3, [pc, #208]	; (8001db8 <MX_RTC_Init+0x110>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001cec:	4b32      	ldr	r3, [pc, #200]	; (8001db8 <MX_RTC_Init+0x110>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001cf2:	4b31      	ldr	r3, [pc, #196]	; (8001db8 <MX_RTC_Init+0x110>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001cf8:	482f      	ldr	r0, [pc, #188]	; (8001db8 <MX_RTC_Init+0x110>)
 8001cfa:	f00a f9e7 	bl	800c0cc <HAL_RTC_Init>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001d04:	f000 fe38 	bl	8002978 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d26:	2201      	movs	r2, #1
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4823      	ldr	r0, [pc, #140]	; (8001db8 <MX_RTC_Init+0x110>)
 8001d2c:	f00a fa5f 	bl	800c1ee <HAL_RTC_SetTime>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001d36:	f000 fe1f 	bl	8002978 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001d40:	2301      	movs	r3, #1
 8001d42:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001d46:	2301      	movs	r3, #1
 8001d48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d56:	2201      	movs	r2, #1
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4817      	ldr	r0, [pc, #92]	; (8001db8 <MX_RTC_Init+0x110>)
 8001d5c:	f00a fb62 	bl	800c424 <HAL_RTC_SetDate>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001d66:	f000 fe07 	bl	8002978 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001d94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d9a:	463b      	mov	r3, r7
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4805      	ldr	r0, [pc, #20]	; (8001db8 <MX_RTC_Init+0x110>)
 8001da2:	f00a fc35 	bl	800c610 <HAL_RTC_SetAlarm_IT>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001dac:	f000 fde4 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001db0:	bf00      	nop
 8001db2:	3740      	adds	r7, #64	; 0x40
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20006920 	.word	0x20006920
 8001dbc:	40002800 	.word	0x40002800

08001dc0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001dc4:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <MX_SPI2_Init+0x64>)
 8001dc6:	4a18      	ldr	r2, [pc, #96]	; (8001e28 <MX_SPI2_Init+0x68>)
 8001dc8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001dca:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <MX_SPI2_Init+0x64>)
 8001dcc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001dd0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001dd2:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <MX_SPI2_Init+0x64>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <MX_SPI2_Init+0x64>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <MX_SPI2_Init+0x64>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001de4:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <MX_SPI2_Init+0x64>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <MX_SPI2_Init+0x64>)
 8001dec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001df0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001df2:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <MX_SPI2_Init+0x64>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001df8:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <MX_SPI2_Init+0x64>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <MX_SPI2_Init+0x64>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e04:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <MX_SPI2_Init+0x64>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <MX_SPI2_Init+0x64>)
 8001e0c:	220a      	movs	r2, #10
 8001e0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e10:	4804      	ldr	r0, [pc, #16]	; (8001e24 <MX_SPI2_Init+0x64>)
 8001e12:	f00a ff2d 	bl	800cc70 <HAL_SPI_Init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001e1c:	f000 fdac 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20005f60 	.word	0x20005f60
 8001e28:	40003800 	.word	0x40003800

08001e2c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001e30:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <MX_SPI4_Init+0x64>)
 8001e32:	4a18      	ldr	r2, [pc, #96]	; (8001e94 <MX_SPI4_Init+0x68>)
 8001e34:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001e36:	4b16      	ldr	r3, [pc, #88]	; (8001e90 <MX_SPI4_Init+0x64>)
 8001e38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e3c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001e3e:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <MX_SPI4_Init+0x64>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e44:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <MX_SPI4_Init+0x64>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e4a:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <MX_SPI4_Init+0x64>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e50:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <MX_SPI4_Init+0x64>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001e56:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <MX_SPI4_Init+0x64>)
 8001e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e5c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <MX_SPI4_Init+0x64>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <MX_SPI4_Init+0x64>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <MX_SPI4_Init+0x64>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e70:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <MX_SPI4_Init+0x64>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <MX_SPI4_Init+0x64>)
 8001e78:	220a      	movs	r2, #10
 8001e7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001e7c:	4804      	ldr	r0, [pc, #16]	; (8001e90 <MX_SPI4_Init+0x64>)
 8001e7e:	f00a fef7 	bl	800cc70 <HAL_SPI_Init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001e88:	f000 fd76 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	200068c4 	.word	0x200068c4
 8001e94:	40013400 	.word	0x40013400

08001e98 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001e9c:	4b17      	ldr	r3, [pc, #92]	; (8001efc <MX_SPI5_Init+0x64>)
 8001e9e:	4a18      	ldr	r2, [pc, #96]	; (8001f00 <MX_SPI5_Init+0x68>)
 8001ea0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001ea2:	4b16      	ldr	r3, [pc, #88]	; (8001efc <MX_SPI5_Init+0x64>)
 8001ea4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ea8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001eaa:	4b14      	ldr	r3, [pc, #80]	; (8001efc <MX_SPI5_Init+0x64>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001eb0:	4b12      	ldr	r3, [pc, #72]	; (8001efc <MX_SPI5_Init+0x64>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eb6:	4b11      	ldr	r3, [pc, #68]	; (8001efc <MX_SPI5_Init+0x64>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <MX_SPI5_Init+0x64>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <MX_SPI5_Init+0x64>)
 8001ec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ec8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001eca:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <MX_SPI5_Init+0x64>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <MX_SPI5_Init+0x64>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ed6:	4b09      	ldr	r3, [pc, #36]	; (8001efc <MX_SPI5_Init+0x64>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001edc:	4b07      	ldr	r3, [pc, #28]	; (8001efc <MX_SPI5_Init+0x64>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <MX_SPI5_Init+0x64>)
 8001ee4:	220a      	movs	r2, #10
 8001ee6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001ee8:	4804      	ldr	r0, [pc, #16]	; (8001efc <MX_SPI5_Init+0x64>)
 8001eea:	f00a fec1 	bl	800cc70 <HAL_SPI_Init>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001ef4:	f000 fd40 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001ef8:	bf00      	nop
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20005fbc 	.word	0x20005fbc
 8001f00:	40015000 	.word	0x40015000

08001f04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	; 0x28
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f0a:	f107 0320 	add.w	r3, r7, #32
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	60da      	str	r2, [r3, #12]
 8001f20:	611a      	str	r2, [r3, #16]
 8001f22:	615a      	str	r2, [r3, #20]
 8001f24:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f26:	4b22      	ldr	r3, [pc, #136]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f2e:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f34:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f42:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f4e:	4818      	ldr	r0, [pc, #96]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f50:	f00b fd00 	bl	800d954 <HAL_TIM_PWM_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001f5a:	f000 fd0d 	bl	8002978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f66:	f107 0320 	add.w	r3, r7, #32
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4810      	ldr	r0, [pc, #64]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f6e:	f00c f983 	bl	800e278 <HAL_TIMEx_MasterConfigSynchronization>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001f78:	f000 fcfe 	bl	8002978 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f7c:	2360      	movs	r3, #96	; 0x60
 8001f7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	2208      	movs	r2, #8
 8001f90:	4619      	mov	r1, r3
 8001f92:	4807      	ldr	r0, [pc, #28]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f94:	f00b fe36 	bl	800dc04 <HAL_TIM_PWM_ConfigChannel>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001f9e:	f000 fceb 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001fa2:	4803      	ldr	r0, [pc, #12]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001fa4:	f000 ff3e 	bl	8002e24 <HAL_TIM_MspPostInit>

}
 8001fa8:	bf00      	nop
 8001faa:	3728      	adds	r7, #40	; 0x28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20006a04 	.word	0x20006a04

08001fb4 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001fb8:	4b11      	ldr	r3, [pc, #68]	; (8002000 <MX_UART8_Init+0x4c>)
 8001fba:	4a12      	ldr	r2, [pc, #72]	; (8002004 <MX_UART8_Init+0x50>)
 8001fbc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <MX_UART8_Init+0x4c>)
 8001fc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fc4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <MX_UART8_Init+0x4c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <MX_UART8_Init+0x4c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <MX_UART8_Init+0x4c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <MX_UART8_Init+0x4c>)
 8001fda:	220c      	movs	r2, #12
 8001fdc:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fde:	4b08      	ldr	r3, [pc, #32]	; (8002000 <MX_UART8_Init+0x4c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <MX_UART8_Init+0x4c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001fea:	4805      	ldr	r0, [pc, #20]	; (8002000 <MX_UART8_Init+0x4c>)
 8001fec:	f00c f9d4 	bl	800e398 <HAL_UART_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8001ff6:	f000 fcbf 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20005ec4 	.word	0x20005ec4
 8002004:	40007c00 	.word	0x40007c00

08002008 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800200c:	4b11      	ldr	r3, [pc, #68]	; (8002054 <MX_USART3_UART_Init+0x4c>)
 800200e:	4a12      	ldr	r2, [pc, #72]	; (8002058 <MX_USART3_UART_Init+0x50>)
 8002010:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <MX_USART3_UART_Init+0x4c>)
 8002014:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002018:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800201a:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <MX_USART3_UART_Init+0x4c>)
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <MX_USART3_UART_Init+0x4c>)
 8002022:	2200      	movs	r2, #0
 8002024:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002026:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <MX_USART3_UART_Init+0x4c>)
 8002028:	2200      	movs	r2, #0
 800202a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800202c:	4b09      	ldr	r3, [pc, #36]	; (8002054 <MX_USART3_UART_Init+0x4c>)
 800202e:	220c      	movs	r2, #12
 8002030:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002032:	4b08      	ldr	r3, [pc, #32]	; (8002054 <MX_USART3_UART_Init+0x4c>)
 8002034:	2200      	movs	r2, #0
 8002036:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <MX_USART3_UART_Init+0x4c>)
 800203a:	2200      	movs	r2, #0
 800203c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800203e:	4805      	ldr	r0, [pc, #20]	; (8002054 <MX_USART3_UART_Init+0x4c>)
 8002040:	f00c f9aa 	bl	800e398 <HAL_UART_Init>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800204a:	f000 fc95 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20006014 	.word	0x20006014
 8002058:	40004800 	.word	0x40004800

0800205c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <MX_USART6_UART_Init+0x4c>)
 8002062:	4a12      	ldr	r2, [pc, #72]	; (80020ac <MX_USART6_UART_Init+0x50>)
 8002064:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002066:	4b10      	ldr	r3, [pc, #64]	; (80020a8 <MX_USART6_UART_Init+0x4c>)
 8002068:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800206c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800206e:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <MX_USART6_UART_Init+0x4c>)
 8002070:	2200      	movs	r2, #0
 8002072:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002074:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <MX_USART6_UART_Init+0x4c>)
 8002076:	2200      	movs	r2, #0
 8002078:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800207a:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <MX_USART6_UART_Init+0x4c>)
 800207c:	2200      	movs	r2, #0
 800207e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002080:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <MX_USART6_UART_Init+0x4c>)
 8002082:	220c      	movs	r2, #12
 8002084:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002086:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <MX_USART6_UART_Init+0x4c>)
 8002088:	2200      	movs	r2, #0
 800208a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <MX_USART6_UART_Init+0x4c>)
 800208e:	2200      	movs	r2, #0
 8002090:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002092:	4805      	ldr	r0, [pc, #20]	; (80020a8 <MX_USART6_UART_Init+0x4c>)
 8002094:	f00c f980 	bl	800e398 <HAL_UART_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800209e:	f000 fc6b 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	200069b8 	.word	0x200069b8
 80020ac:	40011400 	.word	0x40011400

080020b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08e      	sub	sp, #56	; 0x38
 80020b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	605a      	str	r2, [r3, #4]
 80020c0:	609a      	str	r2, [r3, #8]
 80020c2:	60da      	str	r2, [r3, #12]
 80020c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	623b      	str	r3, [r7, #32]
 80020ca:	4bb5      	ldr	r3, [pc, #724]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	4ab4      	ldr	r2, [pc, #720]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 80020d0:	f043 0310 	orr.w	r3, r3, #16
 80020d4:	6313      	str	r3, [r2, #48]	; 0x30
 80020d6:	4bb2      	ldr	r3, [pc, #712]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f003 0310 	and.w	r3, r3, #16
 80020de:	623b      	str	r3, [r7, #32]
 80020e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
 80020e6:	4bae      	ldr	r3, [pc, #696]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4aad      	ldr	r2, [pc, #692]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 80020ec:	f043 0304 	orr.w	r3, r3, #4
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4bab      	ldr	r3, [pc, #684]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	61fb      	str	r3, [r7, #28]
 80020fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	61bb      	str	r3, [r7, #24]
 8002102:	4ba7      	ldr	r3, [pc, #668]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4aa6      	ldr	r2, [pc, #664]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 8002108:	f043 0320 	orr.w	r3, r3, #32
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4ba4      	ldr	r3, [pc, #656]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0320 	and.w	r3, r3, #32
 8002116:	61bb      	str	r3, [r7, #24]
 8002118:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	4ba0      	ldr	r3, [pc, #640]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	4a9f      	ldr	r2, [pc, #636]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 8002124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002128:	6313      	str	r3, [r2, #48]	; 0x30
 800212a:	4b9d      	ldr	r3, [pc, #628]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	4b99      	ldr	r3, [pc, #612]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4a98      	ldr	r2, [pc, #608]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4b96      	ldr	r3, [pc, #600]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	4b92      	ldr	r3, [pc, #584]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a91      	ldr	r2, [pc, #580]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 800215c:	f043 0302 	orr.w	r3, r3, #2
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b8f      	ldr	r3, [pc, #572]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	4b8b      	ldr	r3, [pc, #556]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a8a      	ldr	r2, [pc, #552]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 8002178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b88      	ldr	r3, [pc, #544]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	607b      	str	r3, [r7, #4]
 800218e:	4b84      	ldr	r3, [pc, #528]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	4a83      	ldr	r2, [pc, #524]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 8002194:	f043 0308 	orr.w	r3, r3, #8
 8002198:	6313      	str	r3, [r2, #48]	; 0x30
 800219a:	4b81      	ldr	r3, [pc, #516]	; (80023a0 <MX_GPIO_Init+0x2f0>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 80021a6:	2200      	movs	r2, #0
 80021a8:	f248 4184 	movw	r1, #33924	; 0x8484
 80021ac:	487d      	ldr	r0, [pc, #500]	; (80023a4 <MX_GPIO_Init+0x2f4>)
 80021ae:	f006 fe75 	bl	8008e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 80021b2:	2200      	movs	r2, #0
 80021b4:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 80021b8:	487b      	ldr	r0, [pc, #492]	; (80023a8 <MX_GPIO_Init+0x2f8>)
 80021ba:	f006 fe6f 	bl	8008e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 80021be:	2200      	movs	r2, #0
 80021c0:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80021c4:	4879      	ldr	r0, [pc, #484]	; (80023ac <MX_GPIO_Init+0x2fc>)
 80021c6:	f006 fe69 	bl	8008e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2108      	movs	r1, #8
 80021ce:	4878      	ldr	r0, [pc, #480]	; (80023b0 <MX_GPIO_Init+0x300>)
 80021d0:	f006 fe64 	bl	8008e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 80021d4:	2200      	movs	r2, #0
 80021d6:	f645 2126 	movw	r1, #23078	; 0x5a26
 80021da:	4876      	ldr	r0, [pc, #472]	; (80023b4 <MX_GPIO_Init+0x304>)
 80021dc:	f006 fe5e 	bl	8008e9c <HAL_GPIO_WritePin>
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin, GPIO_PIN_RESET);
 80021e0:	2200      	movs	r2, #0
 80021e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021e6:	4874      	ldr	r0, [pc, #464]	; (80023b8 <MX_GPIO_Init+0x308>)
 80021e8:	f006 fe58 	bl	8008e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80021ec:	2200      	movs	r2, #0
 80021ee:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 80021f2:	4872      	ldr	r0, [pc, #456]	; (80023bc <MX_GPIO_Init+0x30c>)
 80021f4:	f006 fe52 	bl	8008e9c <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_12V_Buck_Pin OUT_Prop_ActuatedVent_Gate_Pin SPI4_CS_Thermocouple_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 80021f8:	f248 4384 	movw	r3, #33924	; 0x8484
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021fe:	2301      	movs	r3, #1
 8002200:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002206:	2300      	movs	r3, #0
 8002208:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800220a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800220e:	4619      	mov	r1, r3
 8002210:	4864      	ldr	r0, [pc, #400]	; (80023a4 <MX_GPIO_Init+0x2f4>)
 8002212:	f006 fc7f 	bl	8008b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin OUT_PyroValve_Gate_2_Pin OUT_PyroValve_Gate_1_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 8002216:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800221c:	2301      	movs	r3, #1
 800221e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002224:	2300      	movs	r3, #0
 8002226:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800222c:	4619      	mov	r1, r3
 800222e:	485e      	ldr	r0, [pc, #376]	; (80023a8 <MX_GPIO_Init+0x2f8>)
 8002230:	f006 fc70 	bl	8008b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 8002234:	2301      	movs	r3, #1
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002238:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800223c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 8002242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002246:	4619      	mov	r1, r3
 8002248:	4858      	ldr	r0, [pc, #352]	; (80023ac <MX_GPIO_Init+0x2fc>)
 800224a:	f006 fc63 	bl	8008b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LED1_Pin OUT_LED2_Pin OUT_LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 800224e:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002254:	2301      	movs	r3, #1
 8002256:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225c:	2300      	movs	r3, #0
 800225e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002264:	4619      	mov	r1, r3
 8002266:	4851      	ldr	r0, [pc, #324]	; (80023ac <MX_GPIO_Init+0x2fc>)
 8002268:	f006 fc54 	bl	8008b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LEDF_Pin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 800226c:	2308      	movs	r3, #8
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002270:	2301      	movs	r3, #1
 8002272:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002278:	2300      	movs	r3, #0
 800227a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 800227c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002280:	4619      	mov	r1, r3
 8002282:	484b      	ldr	r0, [pc, #300]	; (80023b0 <MX_GPIO_Init+0x300>)
 8002284:	f006 fc46 	bl	8008b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_Prop_PyroTurboValve_LimitSwitch_Pin IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8002288:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800228e:	2300      	movs	r3, #0
 8002290:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800229a:	4619      	mov	r1, r3
 800229c:	4843      	ldr	r0, [pc, #268]	; (80023ac <MX_GPIO_Init+0x2fc>)
 800229e:	f006 fc39 	bl	8008b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 80022a2:	2302      	movs	r3, #2
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a6:	2300      	movs	r3, #0
 80022a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 80022ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b2:	4619      	mov	r1, r3
 80022b4:	4840      	ldr	r0, [pc, #256]	; (80023b8 <MX_GPIO_Init+0x308>)
 80022b6:	f006 fc2d 	bl	8008b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_PyroValve_Cont_2_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 80022ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c0:	2300      	movs	r3, #0
 80022c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 80022c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022cc:	4619      	mov	r1, r3
 80022ce:	4836      	ldr	r0, [pc, #216]	; (80023a8 <MX_GPIO_Init+0x2f8>)
 80022d0:	f006 fc20 	bl	8008b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_PyroValve_Cont_1_Pin SX_BUSY_Pin SX_DIO_Pin IN_EJ_Main_Cont_Pin
                           IN_EJ_Drogue_Cont_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|IN_EJ_Main_Cont_Pin
 80022d4:	f242 4319 	movw	r3, #9241	; 0x2419
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
                          |IN_EJ_Drogue_Cont_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022da:	2300      	movs	r3, #0
 80022dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e6:	4619      	mov	r1, r3
 80022e8:	4832      	ldr	r0, [pc, #200]	; (80023b4 <MX_GPIO_Init+0x304>)
 80022ea:	f006 fc13 	bl	8008b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_PyroValve_Arming_Pin SX_RST_Pin SX_RF_SW_Pin OUT_VR_PWR_Pin
                           OUT_EJ_Main_Gate_Pin OUT_EJ_Drogue_Gate_Pin OUT_EJ_Arming_Pin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 80022ee:	f645 2326 	movw	r3, #23078	; 0x5a26
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f4:	2301      	movs	r3, #1
 80022f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fc:	2300      	movs	r3, #0
 80022fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002304:	4619      	mov	r1, r3
 8002306:	482b      	ldr	r0, [pc, #172]	; (80023b4 <MX_GPIO_Init+0x304>)
 8002308:	f006 fc04 	bl	8008b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAYLOAD_I2C_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 800230c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002312:	2300      	movs	r3, #0
 8002314:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800231a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800231e:	4619      	mov	r1, r3
 8002320:	4820      	ldr	r0, [pc, #128]	; (80023a4 <MX_GPIO_Init+0x2f4>)
 8002322:	f006 fbf7 	bl	8008b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SX_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin;
 8002326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800232c:	2301      	movs	r3, #1
 800232e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002334:	2300      	movs	r3, #0
 8002336:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_SX_CS_GPIO_Port, &GPIO_InitStruct);
 8002338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800233c:	4619      	mov	r1, r3
 800233e:	481e      	ldr	r0, [pc, #120]	; (80023b8 <MX_GPIO_Init+0x308>)
 8002340:	f006 fbe8 	bl	8008b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin OUT_FLASH_IO3_Pin OUT_FLASH_WP_Pin OUT_FLASH_CS_Pin
                           OUT_VR_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8002344:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234a:	2301      	movs	r3, #1
 800234c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002352:	2300      	movs	r3, #0
 8002354:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800235a:	4619      	mov	r1, r3
 800235c:	4817      	ldr	r0, [pc, #92]	; (80023bc <MX_GPIO_Init+0x30c>)
 800235e:	f006 fbd9 	bl	8008b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 8002362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002368:	2300      	movs	r3, #0
 800236a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8002370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002374:	4619      	mov	r1, r3
 8002376:	4811      	ldr	r0, [pc, #68]	; (80023bc <MX_GPIO_Init+0x30c>)
 8002378:	f006 fbcc 	bl	8008b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_LSM6DSR_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 800237c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002382:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002386:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800238c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002390:	4619      	mov	r1, r3
 8002392:	4808      	ldr	r0, [pc, #32]	; (80023b4 <MX_GPIO_Init+0x304>)
 8002394:	f006 fbbe 	bl	8008b14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002398:	2200      	movs	r2, #0
 800239a:	2105      	movs	r1, #5
 800239c:	2006      	movs	r0, #6
 800239e:	e00f      	b.n	80023c0 <MX_GPIO_Init+0x310>
 80023a0:	40023800 	.word	0x40023800
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40021400 	.word	0x40021400
 80023ac:	40020800 	.word	0x40020800
 80023b0:	40020000 	.word	0x40020000
 80023b4:	40021800 	.word	0x40021800
 80023b8:	40020400 	.word	0x40020400
 80023bc:	40020c00 	.word	0x40020c00
 80023c0:	f006 fb70 	bl	8008aa4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80023c4:	2006      	movs	r0, #6
 80023c6:	f006 fb89 	bl	8008adc <HAL_NVIC_EnableIRQ>

}
 80023ca:	bf00      	nop
 80023cc:	3738      	adds	r7, #56	; 0x38
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop

080023d4 <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 80023d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023d8:	b088      	sub	sp, #32
 80023da:	af06      	add	r7, sp, #24
 80023dc:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80023de:	f016 fb8d 	bl	8018afc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */

	//osThreadExit();

	//Add thread id to the list
	threadID[0]=osThreadGetId();
 80023e2:	f013 f8f5 	bl	80155d0 <osThreadGetId>
 80023e6:	4603      	mov	r3, r0
 80023e8:	4a1b      	ldr	r2, [pc, #108]	; (8002458 <StartMemory0+0x84>)
 80023ea:	6013      	str	r3, [r2, #0]
	  for(;;)
	  {


		  //Write data to sd and flash
		  sd_open_file(&filename);
 80023ec:	481b      	ldr	r0, [pc, #108]	; (800245c <StartMemory0+0x88>)
 80023ee:	f005 fdfd 	bl	8007fec <sd_open_file>
		  sprintf((char*)writeBuf, "Data: %f, %f, %f, %f\r\n", PRESSURE, MIN, SEC, SUBSEC);
 80023f2:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <StartMemory0+0x8c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe f8b6 	bl	8000568 <__aeabi_f2d>
 80023fc:	4682      	mov	sl, r0
 80023fe:	468b      	mov	fp, r1
 8002400:	4b18      	ldr	r3, [pc, #96]	; (8002464 <StartMemory0+0x90>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe f8af 	bl	8000568 <__aeabi_f2d>
 800240a:	4604      	mov	r4, r0
 800240c:	460d      	mov	r5, r1
 800240e:	4b16      	ldr	r3, [pc, #88]	; (8002468 <StartMemory0+0x94>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe f8a8 	bl	8000568 <__aeabi_f2d>
 8002418:	4680      	mov	r8, r0
 800241a:	4689      	mov	r9, r1
 800241c:	4b13      	ldr	r3, [pc, #76]	; (800246c <StartMemory0+0x98>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe f8a1 	bl	8000568 <__aeabi_f2d>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800242e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002432:	e9cd 4500 	strd	r4, r5, [sp]
 8002436:	4652      	mov	r2, sl
 8002438:	465b      	mov	r3, fp
 800243a:	490d      	ldr	r1, [pc, #52]	; (8002470 <StartMemory0+0x9c>)
 800243c:	480d      	ldr	r0, [pc, #52]	; (8002474 <StartMemory0+0xa0>)
 800243e:	f019 fa1b 	bl	801b878 <siprintf>
		  sd_write(&fil, writeBuf);
 8002442:	490c      	ldr	r1, [pc, #48]	; (8002474 <StartMemory0+0xa0>)
 8002444:	480c      	ldr	r0, [pc, #48]	; (8002478 <StartMemory0+0xa4>)
 8002446:	f005 fde9 	bl	800801c <sd_write>
		  f_close(&fil);
 800244a:	480b      	ldr	r0, [pc, #44]	; (8002478 <StartMemory0+0xa4>)
 800244c:	f012 fb94 	bl	8014b78 <f_close>

		  osDelay(1000/DATA_FREQ);
 8002450:	2064      	movs	r0, #100	; 0x64
 8002452:	f013 f8ce 	bl	80155f2 <osDelay>
	  {
 8002456:	e7c9      	b.n	80023ec <StartMemory0+0x18>
 8002458:	2000605c 	.word	0x2000605c
 800245c:	20006370 	.word	0x20006370
 8002460:	20006360 	.word	0x20006360
 8002464:	20006ca4 	.word	0x20006ca4
 8002468:	20006368 	.word	0x20006368
 800246c:	20006ca0 	.word	0x20006ca0
 8002470:	0801f9b8 	.word	0x0801f9b8
 8002474:	20006384 	.word	0x20006384
 8002478:	20006a70 	.word	0x20006a70

0800247c <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b0c2      	sub	sp, #264	; 0x108
 8002480:	af00      	add	r7, sp, #0
 8002482:	1d3b      	adds	r3, r7, #4
 8002484:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartEjection1 */

	osThreadExit();
 8002486:	f013 f8ae 	bl	80155e6 <osThreadExit>
	...

0800248c <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemetry2 */

	//Add thread id to the list
	threadID[2]=osThreadGetId();
 8002494:	f013 f89c 	bl	80155d0 <osThreadGetId>
 8002498:	4603      	mov	r3, r0
 800249a:	4a02      	ldr	r2, [pc, #8]	; (80024a4 <StartTelemetry2+0x18>)
 800249c:	6093      	str	r3, [r2, #8]

	osThreadExit();
 800249e:	f013 f8a2 	bl	80155e6 <osThreadExit>
 80024a2:	bf00      	nop
 80024a4:	2000605c 	.word	0x2000605c

080024a8 <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	uint8_t counter = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	73fb      	strb	r3, [r7, #15]

	//osThreadExit();

	//Add thread id to the list
	threadID[3]=osThreadGetId();
 80024b4:	f013 f88c 	bl	80155d0 <osThreadGetId>
 80024b8:	4603      	mov	r3, r0
 80024ba:	4a22      	ldr	r2, [pc, #136]	; (8002544 <StartSensors3+0x9c>)
 80024bc:	60d3      	str	r3, [r2, #12]

  for(;;)
  {

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 80024be:	2201      	movs	r2, #1
 80024c0:	2102      	movs	r1, #2
 80024c2:	4821      	ldr	r0, [pc, #132]	; (8002548 <StartSensors3+0xa0>)
 80024c4:	f006 fcea 	bl	8008e9c <HAL_GPIO_WritePin>

	  if (counter == 10){
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	2b0a      	cmp	r3, #10
 80024cc:	d12d      	bne.n	800252a <StartSensors3+0x82>
		  counter=0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	73fb      	strb	r3, [r7, #15]

		  //GPS
		  GPS_Poll(&LATITUDE, &LONGITUDE, &time);
 80024d2:	4a1e      	ldr	r2, [pc, #120]	; (800254c <StartSensors3+0xa4>)
 80024d4:	491e      	ldr	r1, [pc, #120]	; (8002550 <StartSensors3+0xa8>)
 80024d6:	481f      	ldr	r0, [pc, #124]	; (8002554 <StartSensors3+0xac>)
 80024d8:	f000 ff30 	bl	800333c <GPS_Poll>

	  	  //LSM6DSR
	  	  MRT_LSM6DSR_getAcceleration(lsm_ctx,acceleration_mg);
 80024dc:	4a1e      	ldr	r2, [pc, #120]	; (8002558 <StartSensors3+0xb0>)
 80024de:	4b1f      	ldr	r3, [pc, #124]	; (800255c <StartSensors3+0xb4>)
 80024e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80024e2:	f7fe fe95 	bl	8001210 <MRT_LSM6DSR_getAcceleration>
	  	  MRT_LSM6DSR_getAngularRate(lsm_ctx,angular_rate_mdps);
 80024e6:	4a1c      	ldr	r2, [pc, #112]	; (8002558 <StartSensors3+0xb0>)
 80024e8:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <StartSensors3+0xb8>)
 80024ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80024ec:	f7fe ff00 	bl	80012f0 <MRT_LSM6DSR_getAngularRate>
		  MRT_LSM6DSR_getTemperature(lsm_ctx,&lsm_temperature_degC);
 80024f0:	4a19      	ldr	r2, [pc, #100]	; (8002558 <StartSensors3+0xb0>)
 80024f2:	4b1c      	ldr	r3, [pc, #112]	; (8002564 <StartSensors3+0xbc>)
 80024f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80024f6:	f7fe fed1 	bl	800129c <MRT_LSM6DSR_getTemperature>

		  //LPS22HH
	  	  MRT_LPS22HH_getPressure(lps_ctx,&pressure_hPa);
 80024fa:	4a1b      	ldr	r2, [pc, #108]	; (8002568 <StartSensors3+0xc0>)
 80024fc:	4b1b      	ldr	r3, [pc, #108]	; (800256c <StartSensors3+0xc4>)
 80024fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8002500:	f7fe fff4 	bl	80014ec <MRT_LPS22HH_getPressure>
		  MRT_LPS22HH_getTemperature(lps_ctx,&lps_temperature_degC);
 8002504:	4a18      	ldr	r2, [pc, #96]	; (8002568 <StartSensors3+0xc0>)
 8002506:	4b1a      	ldr	r3, [pc, #104]	; (8002570 <StartSensors3+0xc8>)
 8002508:	ca07      	ldmia	r2, {r0, r1, r2}
 800250a:	f7ff f81b 	bl	8001544 <MRT_LPS22HH_getTemperature>
		  altitude_m = MRT_getAltitude(pressure_hPa); //Update altitude
 800250e:	4b17      	ldr	r3, [pc, #92]	; (800256c <StartSensors3+0xc4>)
 8002510:	edd3 7a00 	vldr	s15, [r3]
 8002514:	eeb0 0a67 	vmov.f32	s0, s15
 8002518:	f001 fbf6 	bl	8003d08 <MRT_getAltitude>
 800251c:	eef0 7a40 	vmov.f32	s15, s0
 8002520:	4b14      	ldr	r3, [pc, #80]	; (8002574 <StartSensors3+0xcc>)
 8002522:	edc3 7a00 	vstr	s15, [r3]

		  //TODO Pressure tank (just use an analog sensor if you don't have it)

		  //Thermocouple
		  Max31855_Read_Temp();
 8002526:	f005 fc2b 	bl	8007d80 <Max31855_Read_Temp>
	  }
	  counter++;
 800252a:	7bfb      	ldrb	r3, [r7, #15]
 800252c:	3301      	adds	r3, #1
 800252e:	73fb      	strb	r3, [r7, #15]

	  //TODO Poll propulsion sensor


	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 8002530:	2200      	movs	r2, #0
 8002532:	2102      	movs	r1, #2
 8002534:	4804      	ldr	r0, [pc, #16]	; (8002548 <StartSensors3+0xa0>)
 8002536:	f006 fcb1 	bl	8008e9c <HAL_GPIO_WritePin>

	  osDelay(1000/POLL_FREQ);
 800253a:	2032      	movs	r0, #50	; 0x32
 800253c:	f013 f859 	bl	80155f2 <osDelay>
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8002540:	e7bd      	b.n	80024be <StartSensors3+0x16>
 8002542:	bf00      	nop
 8002544:	2000605c 	.word	0x2000605c
 8002548:	40020800 	.word	0x40020800
 800254c:	200069a8 	.word	0x200069a8
 8002550:	200067b4 	.word	0x200067b4
 8002554:	2000691c 	.word	0x2000691c
 8002558:	20006a60 	.word	0x20006a60
 800255c:	2000040c 	.word	0x2000040c
 8002560:	20000418 	.word	0x20000418
 8002564:	20000424 	.word	0x20000424
 8002568:	20006a50 	.word	0x20006a50
 800256c:	20000404 	.word	0x20000404
 8002570:	20000408 	.word	0x20000408
 8002574:	20000428 	.word	0x20000428

08002578 <StartPrinting>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrinting */
void StartPrinting(void *argument)
{
 8002578:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800257c:	b0c6      	sub	sp, #280	; 0x118
 800257e:	af04      	add	r7, sp, #16
 8002580:	1d3b      	adds	r3, r7, #4
 8002582:	6018      	str	r0, [r3, #0]
	char buffer[TX_BUF_DIM];

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 8002584:	2201      	movs	r2, #1
 8002586:	2108      	movs	r1, #8
 8002588:	4897      	ldr	r0, [pc, #604]	; (80027e8 <StartPrinting+0x270>)
 800258a:	f006 fc87 	bl	8008e9c <HAL_GPIO_WritePin>

	  //GPS
  	  /*
  	   * TODO HOW DO WE RESET THE TIME
  	   */
	  memset(gps_data, 0, GPS_DATA_BUF_DIM);
 800258e:	2264      	movs	r2, #100	; 0x64
 8002590:	2100      	movs	r1, #0
 8002592:	4896      	ldr	r0, [pc, #600]	; (80027ec <StartPrinting+0x274>)
 8002594:	f018 f8f2 	bl	801a77c <memset>
	  sprintf(gps_data,"Alt: %.2f   Long: %.2f   Time: %.0f\r\n",LATITUDE, LONGITUDE, time);
 8002598:	4b95      	ldr	r3, [pc, #596]	; (80027f0 <StartPrinting+0x278>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd ffe3 	bl	8000568 <__aeabi_f2d>
 80025a2:	4680      	mov	r8, r0
 80025a4:	4689      	mov	r9, r1
 80025a6:	4b93      	ldr	r3, [pc, #588]	; (80027f4 <StartPrinting+0x27c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fd ffdc 	bl	8000568 <__aeabi_f2d>
 80025b0:	4604      	mov	r4, r0
 80025b2:	460d      	mov	r5, r1
 80025b4:	4b90      	ldr	r3, [pc, #576]	; (80027f8 <StartPrinting+0x280>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fd ffd5 	bl	8000568 <__aeabi_f2d>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80025c6:	e9cd 4500 	strd	r4, r5, [sp]
 80025ca:	4642      	mov	r2, r8
 80025cc:	464b      	mov	r3, r9
 80025ce:	498b      	ldr	r1, [pc, #556]	; (80027fc <StartPrinting+0x284>)
 80025d0:	4886      	ldr	r0, [pc, #536]	; (80027ec <StartPrinting+0x274>)
 80025d2:	f019 f951 	bl	801b878 <siprintf>
	  HAL_UART_Transmit(&DEBUG_UART,gps_data,strlen(gps_data),HAL_MAX_DELAY);
 80025d6:	4885      	ldr	r0, [pc, #532]	; (80027ec <StartPrinting+0x274>)
 80025d8:	f7fd fe0a 	bl	80001f0 <strlen>
 80025dc:	4603      	mov	r3, r0
 80025de:	b29a      	uxth	r2, r3
 80025e0:	f04f 33ff 	mov.w	r3, #4294967295
 80025e4:	4981      	ldr	r1, [pc, #516]	; (80027ec <StartPrinting+0x274>)
 80025e6:	4886      	ldr	r0, [pc, #536]	; (8002800 <StartPrinting+0x288>)
 80025e8:	f00b ff23 	bl	800e432 <HAL_UART_Transmit>

  	  //LSM6DSR
  	  memset(buffer, 0, TX_BUF_DIM);
 80025ec:	f107 0308 	add.w	r3, r7, #8
 80025f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025f4:	2100      	movs	r1, #0
 80025f6:	4618      	mov	r0, r3
 80025f8:	f018 f8c0 	bl	801a77c <memset>
  	  sprintf(buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 80025fc:	4b81      	ldr	r3, [pc, #516]	; (8002804 <StartPrinting+0x28c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f7fd ffb1 	bl	8000568 <__aeabi_f2d>
 8002606:	4680      	mov	r8, r0
 8002608:	4689      	mov	r9, r1
 800260a:	4b7e      	ldr	r3, [pc, #504]	; (8002804 <StartPrinting+0x28c>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	4618      	mov	r0, r3
 8002610:	f7fd ffaa 	bl	8000568 <__aeabi_f2d>
 8002614:	4604      	mov	r4, r0
 8002616:	460d      	mov	r5, r1
 8002618:	4b7a      	ldr	r3, [pc, #488]	; (8002804 <StartPrinting+0x28c>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	4618      	mov	r0, r3
 800261e:	f7fd ffa3 	bl	8000568 <__aeabi_f2d>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	f107 0008 	add.w	r0, r7, #8
 800262a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800262e:	e9cd 4500 	strd	r4, r5, [sp]
 8002632:	4642      	mov	r2, r8
 8002634:	464b      	mov	r3, r9
 8002636:	4974      	ldr	r1, [pc, #464]	; (8002808 <StartPrinting+0x290>)
 8002638:	f019 f91e 	bl	801b878 <siprintf>
  	  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 800263c:	f107 0308 	add.w	r3, r7, #8
 8002640:	4618      	mov	r0, r3
 8002642:	f7fd fdd5 	bl	80001f0 <strlen>
 8002646:	4603      	mov	r3, r0
 8002648:	b29a      	uxth	r2, r3
 800264a:	f107 0108 	add.w	r1, r7, #8
 800264e:	f04f 33ff 	mov.w	r3, #4294967295
 8002652:	486b      	ldr	r0, [pc, #428]	; (8002800 <StartPrinting+0x288>)
 8002654:	f00b feed 	bl	800e432 <HAL_UART_Transmit>

  	  /*
  	   * TODO NEEDS FILTERING BUT WORKS (maybe acceleration needs filtering too)
  	   */
  	  memset(buffer, 0, TX_BUF_DIM);
 8002658:	f107 0308 	add.w	r3, r7, #8
 800265c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f018 f88a 	bl	801a77c <memset>
  	  sprintf(buffer,"Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8002668:	4b68      	ldr	r3, [pc, #416]	; (800280c <StartPrinting+0x294>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f7fd ff7b 	bl	8000568 <__aeabi_f2d>
 8002672:	4680      	mov	r8, r0
 8002674:	4689      	mov	r9, r1
 8002676:	4b65      	ldr	r3, [pc, #404]	; (800280c <StartPrinting+0x294>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	4618      	mov	r0, r3
 800267c:	f7fd ff74 	bl	8000568 <__aeabi_f2d>
 8002680:	4604      	mov	r4, r0
 8002682:	460d      	mov	r5, r1
 8002684:	4b61      	ldr	r3, [pc, #388]	; (800280c <StartPrinting+0x294>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	4618      	mov	r0, r3
 800268a:	f7fd ff6d 	bl	8000568 <__aeabi_f2d>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	f107 0008 	add.w	r0, r7, #8
 8002696:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800269a:	e9cd 4500 	strd	r4, r5, [sp]
 800269e:	4642      	mov	r2, r8
 80026a0:	464b      	mov	r3, r9
 80026a2:	495b      	ldr	r1, [pc, #364]	; (8002810 <StartPrinting+0x298>)
 80026a4:	f019 f8e8 	bl	801b878 <siprintf>
  	  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 80026a8:	f107 0308 	add.w	r3, r7, #8
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fd fd9f 	bl	80001f0 <strlen>
 80026b2:	4603      	mov	r3, r0
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	f107 0108 	add.w	r1, r7, #8
 80026ba:	f04f 33ff 	mov.w	r3, #4294967295
 80026be:	4850      	ldr	r0, [pc, #320]	; (8002800 <StartPrinting+0x288>)
 80026c0:	f00b feb7 	bl	800e432 <HAL_UART_Transmit>

	  memset(buffer, 0, TX_BUF_DIM);
 80026c4:	f107 0308 	add.w	r3, r7, #8
 80026c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026cc:	2100      	movs	r1, #0
 80026ce:	4618      	mov	r0, r3
 80026d0:	f018 f854 	bl	801a77c <memset>
	  sprintf(buffer, "Temperature [degC]:%6.2f\r\n", lsm_temperature_degC);
 80026d4:	4b4f      	ldr	r3, [pc, #316]	; (8002814 <StartPrinting+0x29c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fd ff45 	bl	8000568 <__aeabi_f2d>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	f107 0008 	add.w	r0, r7, #8
 80026e6:	494c      	ldr	r1, [pc, #304]	; (8002818 <StartPrinting+0x2a0>)
 80026e8:	f019 f8c6 	bl	801b878 <siprintf>
	  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 80026ec:	f107 0308 	add.w	r3, r7, #8
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fd fd7d 	bl	80001f0 <strlen>
 80026f6:	4603      	mov	r3, r0
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	f107 0108 	add.w	r1, r7, #8
 80026fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002702:	483f      	ldr	r0, [pc, #252]	; (8002800 <StartPrinting+0x288>)
 8002704:	f00b fe95 	bl	800e432 <HAL_UART_Transmit>


	  //LPS22HH
  	  memset(buffer, 0, TX_BUF_DIM);
 8002708:	f107 0308 	add.w	r3, r7, #8
 800270c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002710:	2100      	movs	r1, #0
 8002712:	4618      	mov	r0, r3
 8002714:	f018 f832 	bl	801a77c <memset>
  	  sprintf(buffer,"Pressure [hPa]:%6.2f\r\n",pressure_hPa);
 8002718:	4b40      	ldr	r3, [pc, #256]	; (800281c <StartPrinting+0x2a4>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	f7fd ff23 	bl	8000568 <__aeabi_f2d>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	f107 0008 	add.w	r0, r7, #8
 800272a:	493d      	ldr	r1, [pc, #244]	; (8002820 <StartPrinting+0x2a8>)
 800272c:	f019 f8a4 	bl	801b878 <siprintf>
  	  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 8002730:	f107 0308 	add.w	r3, r7, #8
 8002734:	4618      	mov	r0, r3
 8002736:	f7fd fd5b 	bl	80001f0 <strlen>
 800273a:	4603      	mov	r3, r0
 800273c:	b29a      	uxth	r2, r3
 800273e:	f107 0108 	add.w	r1, r7, #8
 8002742:	f04f 33ff 	mov.w	r3, #4294967295
 8002746:	482e      	ldr	r0, [pc, #184]	; (8002800 <StartPrinting+0x288>)
 8002748:	f00b fe73 	bl	800e432 <HAL_UART_Transmit>

	  memset(buffer, 0, TX_BUF_DIM);
 800274c:	f107 0308 	add.w	r3, r7, #8
 8002750:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002754:	2100      	movs	r1, #0
 8002756:	4618      	mov	r0, r3
 8002758:	f018 f810 	bl	801a77c <memset>
	  sprintf(buffer, "Temperature [degC]:%6.2f\r\n", lps_temperature_degC);
 800275c:	4b31      	ldr	r3, [pc, #196]	; (8002824 <StartPrinting+0x2ac>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f7fd ff01 	bl	8000568 <__aeabi_f2d>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	f107 0008 	add.w	r0, r7, #8
 800276e:	492a      	ldr	r1, [pc, #168]	; (8002818 <StartPrinting+0x2a0>)
 8002770:	f019 f882 	bl	801b878 <siprintf>
	  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 8002774:	f107 0308 	add.w	r3, r7, #8
 8002778:	4618      	mov	r0, r3
 800277a:	f7fd fd39 	bl	80001f0 <strlen>
 800277e:	4603      	mov	r3, r0
 8002780:	b29a      	uxth	r2, r3
 8002782:	f107 0108 	add.w	r1, r7, #8
 8002786:	f04f 33ff 	mov.w	r3, #4294967295
 800278a:	481d      	ldr	r0, [pc, #116]	; (8002800 <StartPrinting+0x288>)
 800278c:	f00b fe51 	bl	800e432 <HAL_UART_Transmit>


	  //Thermocouple
	  memset(buffer, 0, TX_BUF_DIM);
 8002790:	f107 0308 	add.w	r3, r7, #8
 8002794:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002798:	2100      	movs	r1, #0
 800279a:	4618      	mov	r0, r3
 800279c:	f017 ffee 	bl	801a77c <memset>
	  sprintf(buffer, "Thermocouple temperature [degC]: %6.2f\r\n", THERMO_TEMP);
 80027a0:	4b21      	ldr	r3, [pc, #132]	; (8002828 <StartPrinting+0x2b0>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fd fedf 	bl	8000568 <__aeabi_f2d>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	f107 0008 	add.w	r0, r7, #8
 80027b2:	491e      	ldr	r1, [pc, #120]	; (800282c <StartPrinting+0x2b4>)
 80027b4:	f019 f860 	bl	801b878 <siprintf>
	  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 80027b8:	f107 0308 	add.w	r3, r7, #8
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fd fd17 	bl	80001f0 <strlen>
 80027c2:	4603      	mov	r3, r0
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	f107 0108 	add.w	r1, r7, #8
 80027ca:	f04f 33ff 	mov.w	r3, #4294967295
 80027ce:	480c      	ldr	r0, [pc, #48]	; (8002800 <StartPrinting+0x288>)
 80027d0:	f00b fe2f 	bl	800e432 <HAL_UART_Transmit>


	  //Iridium
	  //MRT_Static_Iridium_getTime(); //TODO Can get stuck for some time (SHOULD CHANGE TIMEOUT)

	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 80027d4:	2200      	movs	r2, #0
 80027d6:	2108      	movs	r1, #8
 80027d8:	4803      	ldr	r0, [pc, #12]	; (80027e8 <StartPrinting+0x270>)
 80027da:	f006 fb5f 	bl	8008e9c <HAL_GPIO_WritePin>

	  osDelay(1000/SEND_FREQ);
 80027de:	2032      	movs	r0, #50	; 0x32
 80027e0:	f012 ff07 	bl	80155f2 <osDelay>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 80027e4:	e6ce      	b.n	8002584 <StartPrinting+0xc>
 80027e6:	bf00      	nop
 80027e8:	40020800 	.word	0x40020800
 80027ec:	20006944 	.word	0x20006944
 80027f0:	2000691c 	.word	0x2000691c
 80027f4:	200067b4 	.word	0x200067b4
 80027f8:	200069a8 	.word	0x200069a8
 80027fc:	0801f9d0 	.word	0x0801f9d0
 8002800:	20005ec4 	.word	0x20005ec4
 8002804:	2000040c 	.word	0x2000040c
 8002808:	0801f9f8 	.word	0x0801f9f8
 800280c:	20000418 	.word	0x20000418
 8002810:	0801fa20 	.word	0x0801fa20
 8002814:	20000424 	.word	0x20000424
 8002818:	0801fa48 	.word	0x0801fa48
 800281c:	20000404 	.word	0x20000404
 8002820:	0801fa64 	.word	0x0801fa64
 8002824:	20000408 	.word	0x20000408
 8002828:	20006a00 	.word	0x20006a00
 800282c:	0801fa7c 	.word	0x0801fa7c

08002830 <StartWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchDog */
void StartWatchDog(void *argument)
{
 8002830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002832:	b0c7      	sub	sp, #284	; 0x11c
 8002834:	af04      	add	r7, sp, #16
 8002836:	1d3b      	adds	r3, r7, #4
 8002838:	6018      	str	r0, [r3, #0]

	char buffer[TX_BUF_DIM];
  /* Infinite loop */
  for(;;)
  {
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 800283a:	2201      	movs	r2, #1
 800283c:	2104      	movs	r1, #4
 800283e:	4837      	ldr	r0, [pc, #220]	; (800291c <StartWatchDog+0xec>)
 8002840:	f006 fb2c 	bl	8008e9c <HAL_GPIO_WritePin>
	 HAL_IWDG_Refresh(&hiwdg);
 8002844:	4836      	ldr	r0, [pc, #216]	; (8002920 <StartWatchDog+0xf0>)
 8002846:	f007 fc0d 	bl	800a064 <HAL_IWDG_Refresh>

	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800284a:	2200      	movs	r2, #0
 800284c:	4935      	ldr	r1, [pc, #212]	; (8002924 <StartWatchDog+0xf4>)
 800284e:	4836      	ldr	r0, [pc, #216]	; (8002928 <StartWatchDog+0xf8>)
 8002850:	f009 fd8a 	bl	800c368 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002854:	2200      	movs	r2, #0
 8002856:	4935      	ldr	r1, [pc, #212]	; (800292c <StartWatchDog+0xfc>)
 8002858:	4833      	ldr	r0, [pc, #204]	; (8002928 <StartWatchDog+0xf8>)
 800285a:	f009 fe8a 	bl	800c572 <HAL_RTC_GetDate>

	 prev_hours = sTime.Hours;
 800285e:	4b31      	ldr	r3, [pc, #196]	; (8002924 <StartWatchDog+0xf4>)
 8002860:	781a      	ldrb	r2, [r3, #0]
 8002862:	4b33      	ldr	r3, [pc, #204]	; (8002930 <StartWatchDog+0x100>)
 8002864:	701a      	strb	r2, [r3, #0]
	 prev_min = sTime.Minutes;
 8002866:	4b2f      	ldr	r3, [pc, #188]	; (8002924 <StartWatchDog+0xf4>)
 8002868:	785a      	ldrb	r2, [r3, #1]
 800286a:	4b32      	ldr	r3, [pc, #200]	; (8002934 <StartWatchDog+0x104>)
 800286c:	701a      	strb	r2, [r3, #0]
	 prev_sec = sTime.Seconds;
 800286e:	4b2d      	ldr	r3, [pc, #180]	; (8002924 <StartWatchDog+0xf4>)
 8002870:	789a      	ldrb	r2, [r3, #2]
 8002872:	4b31      	ldr	r3, [pc, #196]	; (8002938 <StartWatchDog+0x108>)
 8002874:	701a      	strb	r2, [r3, #0]

	  memset(buffer, 0, TX_BUF_DIM);
 8002876:	f107 0308 	add.w	r3, r7, #8
 800287a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800287e:	2100      	movs	r1, #0
 8002880:	4618      	mov	r0, r3
 8002882:	f017 ff7b 	bl	801a77c <memset>
	  sprintf(buffer, "Time: %i:%i:%i	Date: \r\n %f\r\n", prev_hours,prev_min,prev_sec, altitude_m);
 8002886:	4b2a      	ldr	r3, [pc, #168]	; (8002930 <StartWatchDog+0x100>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	461d      	mov	r5, r3
 800288c:	4b29      	ldr	r3, [pc, #164]	; (8002934 <StartWatchDog+0x104>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	461e      	mov	r6, r3
 8002892:	4b29      	ldr	r3, [pc, #164]	; (8002938 <StartWatchDog+0x108>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	461c      	mov	r4, r3
 8002898:	4b28      	ldr	r3, [pc, #160]	; (800293c <StartWatchDog+0x10c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f7fd fe63 	bl	8000568 <__aeabi_f2d>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	f107 0008 	add.w	r0, r7, #8
 80028aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80028ae:	9400      	str	r4, [sp, #0]
 80028b0:	4633      	mov	r3, r6
 80028b2:	462a      	mov	r2, r5
 80028b4:	4922      	ldr	r1, [pc, #136]	; (8002940 <StartWatchDog+0x110>)
 80028b6:	f018 ffdf 	bl	801b878 <siprintf>
	  HAL_UART_Transmit(&DEBUG_UART, buffer, strlen(buffer), HAL_MAX_DELAY);
 80028ba:	f107 0308 	add.w	r3, r7, #8
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fd fc96 	bl	80001f0 <strlen>
 80028c4:	4603      	mov	r3, r0
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	f107 0108 	add.w	r1, r7, #8
 80028cc:	f04f 33ff 	mov.w	r3, #4294967295
 80028d0:	481c      	ldr	r0, [pc, #112]	; (8002944 <StartWatchDog+0x114>)
 80028d2:	f00b fdae 	bl	800e432 <HAL_UART_Transmit>
	   * does it at the same time or it's a hardfault crash
	   *
	   * Moved the other code where we write to external flash to this thread (when going to sleep)
	   */
	  //Save the time
	  MRT_saveRTCTime();
 80028d6:	f001 fa03 	bl	8003ce0 <MRT_saveRTCTime>

	  //Check if it's sleep time
	  if (flagA==1){
 80028da:	4b1b      	ldr	r3, [pc, #108]	; (8002948 <StartWatchDog+0x118>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d111      	bne.n	8002906 <StartWatchDog+0xd6>
		//Update iwdg_flag
		iwdg_flag = 1;
 80028e2:	4b1a      	ldr	r3, [pc, #104]	; (800294c <StartWatchDog+0x11c>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 80028e8:	4b18      	ldr	r3, [pc, #96]	; (800294c <StartWatchDog+0x11c>)
 80028ea:	781a      	ldrb	r2, [r3, #0]
 80028ec:	4b18      	ldr	r3, [pc, #96]	; (8002950 <StartWatchDog+0x120>)
 80028ee:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(1);
 80028f0:	2001      	movs	r0, #1
 80028f2:	f001 fcb1 	bl	8004258 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80028f6:	2303      	movs	r3, #3
 80028f8:	2200      	movs	r2, #0
 80028fa:	2101      	movs	r1, #1
 80028fc:	4814      	ldr	r0, [pc, #80]	; (8002950 <StartWatchDog+0x120>)
 80028fe:	f001 fdf5 	bl	80044ec <W25qxx_WriteSector>

		//Reset to deactivate IWDG
		NVIC_SystemReset();
 8002902:	f7fe fe83 	bl	800160c <__NVIC_SystemReset>
	  }

	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8002906:	2200      	movs	r2, #0
 8002908:	2104      	movs	r1, #4
 800290a:	4804      	ldr	r0, [pc, #16]	; (800291c <StartWatchDog+0xec>)
 800290c:	f006 fac6 	bl	8008e9c <HAL_GPIO_WritePin>

	  osDelay(1000/WD_FREQ);
 8002910:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002914:	f012 fe6d 	bl	80155f2 <osDelay>
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8002918:	e78f      	b.n	800283a <StartWatchDog+0xa>
 800291a:	bf00      	nop
 800291c:	40020800 	.word	0x40020800
 8002920:	200062f8 	.word	0x200062f8
 8002924:	20000668 	.word	0x20000668
 8002928:	20006920 	.word	0x20006920
 800292c:	2000067c 	.word	0x2000067c
 8002930:	20000434 	.word	0x20000434
 8002934:	20000435 	.word	0x20000435
 8002938:	20000436 	.word	0x20000436
 800293c:	20000428 	.word	0x20000428
 8002940:	0801faa8 	.word	0x0801faa8
 8002944:	20005ec4 	.word	0x20005ec4
 8002948:	200006a8 	.word	0x200006a8
 800294c:	20000433 	.word	0x20000433
 8002950:	20006058 	.word	0x20006058

08002954 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a04      	ldr	r2, [pc, #16]	; (8002974 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d101      	bne.n	800296a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002966:	f005 fd0b 	bl	8008380 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800296a:	bf00      	nop
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40001000 	.word	0x40001000

08002978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	607b      	str	r3, [r7, #4]
 8002992:	4b12      	ldr	r3, [pc, #72]	; (80029dc <HAL_MspInit+0x54>)
 8002994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002996:	4a11      	ldr	r2, [pc, #68]	; (80029dc <HAL_MspInit+0x54>)
 8002998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800299c:	6453      	str	r3, [r2, #68]	; 0x44
 800299e:	4b0f      	ldr	r3, [pc, #60]	; (80029dc <HAL_MspInit+0x54>)
 80029a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a6:	607b      	str	r3, [r7, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	603b      	str	r3, [r7, #0]
 80029ae:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <HAL_MspInit+0x54>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	4a0a      	ldr	r2, [pc, #40]	; (80029dc <HAL_MspInit+0x54>)
 80029b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ba:	4b08      	ldr	r3, [pc, #32]	; (80029dc <HAL_MspInit+0x54>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c2:	603b      	str	r3, [r7, #0]
 80029c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80029c6:	2200      	movs	r2, #0
 80029c8:	210f      	movs	r1, #15
 80029ca:	f06f 0001 	mvn.w	r0, #1
 80029ce:	f006 f869 	bl	8008aa4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40023800 	.word	0x40023800

080029e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08a      	sub	sp, #40	; 0x28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	f107 0314 	add.w	r3, r7, #20
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a17      	ldr	r2, [pc, #92]	; (8002a5c <HAL_ADC_MspInit+0x7c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d127      	bne.n	8002a52 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	4b16      	ldr	r3, [pc, #88]	; (8002a60 <HAL_ADC_MspInit+0x80>)
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	4a15      	ldr	r2, [pc, #84]	; (8002a60 <HAL_ADC_MspInit+0x80>)
 8002a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a10:	6453      	str	r3, [r2, #68]	; 0x44
 8002a12:	4b13      	ldr	r3, [pc, #76]	; (8002a60 <HAL_ADC_MspInit+0x80>)
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	4b0f      	ldr	r3, [pc, #60]	; (8002a60 <HAL_ADC_MspInit+0x80>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	4a0e      	ldr	r2, [pc, #56]	; (8002a60 <HAL_ADC_MspInit+0x80>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2e:	4b0c      	ldr	r3, [pc, #48]	; (8002a60 <HAL_ADC_MspInit+0x80>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 8002a3a:	2340      	movs	r3, #64	; 0x40
 8002a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 8002a46:	f107 0314 	add.w	r3, r7, #20
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4805      	ldr	r0, [pc, #20]	; (8002a64 <HAL_ADC_MspInit+0x84>)
 8002a4e:	f006 f861 	bl	8008b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a52:	bf00      	nop
 8002a54:	3728      	adds	r7, #40	; 0x28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40012000 	.word	0x40012000
 8002a60:	40023800 	.word	0x40023800
 8002a64:	40020000 	.word	0x40020000

08002a68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b08e      	sub	sp, #56	; 0x38
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
 8002a7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a5c      	ldr	r2, [pc, #368]	; (8002bf8 <HAL_I2C_MspInit+0x190>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d12d      	bne.n	8002ae6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	623b      	str	r3, [r7, #32]
 8002a8e:	4b5b      	ldr	r3, [pc, #364]	; (8002bfc <HAL_I2C_MspInit+0x194>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	4a5a      	ldr	r2, [pc, #360]	; (8002bfc <HAL_I2C_MspInit+0x194>)
 8002a94:	f043 0302 	orr.w	r3, r3, #2
 8002a98:	6313      	str	r3, [r2, #48]	; 0x30
 8002a9a:	4b58      	ldr	r3, [pc, #352]	; (8002bfc <HAL_I2C_MspInit+0x194>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	623b      	str	r3, [r7, #32]
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002aa6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002aaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002aac:	2312      	movs	r3, #18
 8002aae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ab8:	2304      	movs	r3, #4
 8002aba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	484f      	ldr	r0, [pc, #316]	; (8002c00 <HAL_I2C_MspInit+0x198>)
 8002ac4:	f006 f826 	bl	8008b14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ac8:	2300      	movs	r3, #0
 8002aca:	61fb      	str	r3, [r7, #28]
 8002acc:	4b4b      	ldr	r3, [pc, #300]	; (8002bfc <HAL_I2C_MspInit+0x194>)
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	4a4a      	ldr	r2, [pc, #296]	; (8002bfc <HAL_I2C_MspInit+0x194>)
 8002ad2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ad6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ad8:	4b48      	ldr	r3, [pc, #288]	; (8002bfc <HAL_I2C_MspInit+0x194>)
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae0:	61fb      	str	r3, [r7, #28]
 8002ae2:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002ae4:	e083      	b.n	8002bee <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a46      	ldr	r2, [pc, #280]	; (8002c04 <HAL_I2C_MspInit+0x19c>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d12d      	bne.n	8002b4c <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af0:	2300      	movs	r3, #0
 8002af2:	61bb      	str	r3, [r7, #24]
 8002af4:	4b41      	ldr	r3, [pc, #260]	; (8002bfc <HAL_I2C_MspInit+0x194>)
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	4a40      	ldr	r2, [pc, #256]	; (8002bfc <HAL_I2C_MspInit+0x194>)
 8002afa:	f043 0302 	orr.w	r3, r3, #2
 8002afe:	6313      	str	r3, [r2, #48]	; 0x30
 8002b00:	4b3e      	ldr	r3, [pc, #248]	; (8002bfc <HAL_I2C_MspInit+0x194>)
 8002b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	61bb      	str	r3, [r7, #24]
 8002b0a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b0c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b12:	2312      	movs	r3, #18
 8002b14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b16:	2301      	movs	r3, #1
 8002b18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002b1e:	2304      	movs	r3, #4
 8002b20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b26:	4619      	mov	r1, r3
 8002b28:	4835      	ldr	r0, [pc, #212]	; (8002c00 <HAL_I2C_MspInit+0x198>)
 8002b2a:	f005 fff3 	bl	8008b14 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	4b32      	ldr	r3, [pc, #200]	; (8002bfc <HAL_I2C_MspInit+0x194>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	4a31      	ldr	r2, [pc, #196]	; (8002bfc <HAL_I2C_MspInit+0x194>)
 8002b38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b3e:	4b2f      	ldr	r3, [pc, #188]	; (8002bfc <HAL_I2C_MspInit+0x194>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	697b      	ldr	r3, [r7, #20]
}
 8002b4a:	e050      	b.n	8002bee <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a2d      	ldr	r2, [pc, #180]	; (8002c08 <HAL_I2C_MspInit+0x1a0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d14b      	bne.n	8002bee <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	4b28      	ldr	r3, [pc, #160]	; (8002bfc <HAL_I2C_MspInit+0x194>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	4a27      	ldr	r2, [pc, #156]	; (8002bfc <HAL_I2C_MspInit+0x194>)
 8002b60:	f043 0304 	orr.w	r3, r3, #4
 8002b64:	6313      	str	r3, [r2, #48]	; 0x30
 8002b66:	4b25      	ldr	r3, [pc, #148]	; (8002bfc <HAL_I2C_MspInit+0x194>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	4b21      	ldr	r3, [pc, #132]	; (8002bfc <HAL_I2C_MspInit+0x194>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	4a20      	ldr	r2, [pc, #128]	; (8002bfc <HAL_I2C_MspInit+0x194>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	6313      	str	r3, [r2, #48]	; 0x30
 8002b82:	4b1e      	ldr	r3, [pc, #120]	; (8002bfc <HAL_I2C_MspInit+0x194>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b94:	2312      	movs	r3, #18
 8002b96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ba0:	2304      	movs	r3, #4
 8002ba2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4818      	ldr	r0, [pc, #96]	; (8002c0c <HAL_I2C_MspInit+0x1a4>)
 8002bac:	f005 ffb2 	bl	8008b14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002bb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bb6:	2312      	movs	r3, #18
 8002bb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002bc2:	2304      	movs	r3, #4
 8002bc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4810      	ldr	r0, [pc, #64]	; (8002c10 <HAL_I2C_MspInit+0x1a8>)
 8002bce:	f005 ffa1 	bl	8008b14 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <HAL_I2C_MspInit+0x194>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	4a08      	ldr	r2, [pc, #32]	; (8002bfc <HAL_I2C_MspInit+0x194>)
 8002bdc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002be0:	6413      	str	r3, [r2, #64]	; 0x40
 8002be2:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <HAL_I2C_MspInit+0x194>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bea:	60bb      	str	r3, [r7, #8]
 8002bec:	68bb      	ldr	r3, [r7, #8]
}
 8002bee:	bf00      	nop
 8002bf0:	3738      	adds	r7, #56	; 0x38
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40005400 	.word	0x40005400
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	40020400 	.word	0x40020400
 8002c04:	40005800 	.word	0x40005800
 8002c08:	40005c00 	.word	0x40005c00
 8002c0c:	40020800 	.word	0x40020800
 8002c10:	40020000 	.word	0x40020000

08002c14 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08e      	sub	sp, #56	; 0x38
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c1c:	f107 0308 	add.w	r3, r7, #8
 8002c20:	2230      	movs	r2, #48	; 0x30
 8002c22:	2100      	movs	r1, #0
 8002c24:	4618      	mov	r0, r3
 8002c26:	f017 fda9 	bl	801a77c <memset>
  if(hrtc->Instance==RTC)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a10      	ldr	r2, [pc, #64]	; (8002c70 <HAL_RTC_MspInit+0x5c>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d119      	bne.n	8002c68 <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002c34:	2320      	movs	r3, #32
 8002c36:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002c38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c3c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c3e:	f107 0308 	add.w	r3, r7, #8
 8002c42:	4618      	mov	r0, r3
 8002c44:	f009 f884 	bl	800bd50 <HAL_RCCEx_PeriphCLKConfig>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002c4e:	f7ff fe93 	bl	8002978 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c52:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <HAL_RTC_MspInit+0x60>)
 8002c54:	2201      	movs	r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8002c58:	2200      	movs	r2, #0
 8002c5a:	2105      	movs	r1, #5
 8002c5c:	2029      	movs	r0, #41	; 0x29
 8002c5e:	f005 ff21 	bl	8008aa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002c62:	2029      	movs	r0, #41	; 0x29
 8002c64:	f005 ff3a 	bl	8008adc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002c68:	bf00      	nop
 8002c6a:	3738      	adds	r7, #56	; 0x38
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40002800 	.word	0x40002800
 8002c74:	42470e3c 	.word	0x42470e3c

08002c78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08e      	sub	sp, #56	; 0x38
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a4c      	ldr	r2, [pc, #304]	; (8002dc8 <HAL_SPI_MspInit+0x150>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d12d      	bne.n	8002cf6 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	623b      	str	r3, [r7, #32]
 8002c9e:	4b4b      	ldr	r3, [pc, #300]	; (8002dcc <HAL_SPI_MspInit+0x154>)
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	4a4a      	ldr	r2, [pc, #296]	; (8002dcc <HAL_SPI_MspInit+0x154>)
 8002ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8002caa:	4b48      	ldr	r3, [pc, #288]	; (8002dcc <HAL_SPI_MspInit+0x154>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb2:	623b      	str	r3, [r7, #32]
 8002cb4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61fb      	str	r3, [r7, #28]
 8002cba:	4b44      	ldr	r3, [pc, #272]	; (8002dcc <HAL_SPI_MspInit+0x154>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	4a43      	ldr	r2, [pc, #268]	; (8002dcc <HAL_SPI_MspInit+0x154>)
 8002cc0:	f043 0302 	orr.w	r3, r3, #2
 8002cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc6:	4b41      	ldr	r3, [pc, #260]	; (8002dcc <HAL_SPI_MspInit+0x154>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	61fb      	str	r3, [r7, #28]
 8002cd0:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002cd2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002cd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd8:	2302      	movs	r3, #2
 8002cda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ce4:	2305      	movs	r3, #5
 8002ce6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cec:	4619      	mov	r1, r3
 8002cee:	4838      	ldr	r0, [pc, #224]	; (8002dd0 <HAL_SPI_MspInit+0x158>)
 8002cf0:	f005 ff10 	bl	8008b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002cf4:	e064      	b.n	8002dc0 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a36      	ldr	r2, [pc, #216]	; (8002dd4 <HAL_SPI_MspInit+0x15c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d12d      	bne.n	8002d5c <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002d00:	2300      	movs	r3, #0
 8002d02:	61bb      	str	r3, [r7, #24]
 8002d04:	4b31      	ldr	r3, [pc, #196]	; (8002dcc <HAL_SPI_MspInit+0x154>)
 8002d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d08:	4a30      	ldr	r2, [pc, #192]	; (8002dcc <HAL_SPI_MspInit+0x154>)
 8002d0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d0e:	6453      	str	r3, [r2, #68]	; 0x44
 8002d10:	4b2e      	ldr	r3, [pc, #184]	; (8002dcc <HAL_SPI_MspInit+0x154>)
 8002d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d18:	61bb      	str	r3, [r7, #24]
 8002d1a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	4b2a      	ldr	r3, [pc, #168]	; (8002dcc <HAL_SPI_MspInit+0x154>)
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	4a29      	ldr	r2, [pc, #164]	; (8002dcc <HAL_SPI_MspInit+0x154>)
 8002d26:	f043 0310 	orr.w	r3, r3, #16
 8002d2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2c:	4b27      	ldr	r3, [pc, #156]	; (8002dcc <HAL_SPI_MspInit+0x154>)
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002d38:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d46:	2303      	movs	r3, #3
 8002d48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002d4a:	2305      	movs	r3, #5
 8002d4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d52:	4619      	mov	r1, r3
 8002d54:	4820      	ldr	r0, [pc, #128]	; (8002dd8 <HAL_SPI_MspInit+0x160>)
 8002d56:	f005 fedd 	bl	8008b14 <HAL_GPIO_Init>
}
 8002d5a:	e031      	b.n	8002dc0 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a1e      	ldr	r2, [pc, #120]	; (8002ddc <HAL_SPI_MspInit+0x164>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d12c      	bne.n	8002dc0 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	613b      	str	r3, [r7, #16]
 8002d6a:	4b18      	ldr	r3, [pc, #96]	; (8002dcc <HAL_SPI_MspInit+0x154>)
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	4a17      	ldr	r2, [pc, #92]	; (8002dcc <HAL_SPI_MspInit+0x154>)
 8002d70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d74:	6453      	str	r3, [r2, #68]	; 0x44
 8002d76:	4b15      	ldr	r3, [pc, #84]	; (8002dcc <HAL_SPI_MspInit+0x154>)
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d7e:	613b      	str	r3, [r7, #16]
 8002d80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <HAL_SPI_MspInit+0x154>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	4a10      	ldr	r2, [pc, #64]	; (8002dcc <HAL_SPI_MspInit+0x154>)
 8002d8c:	f043 0320 	orr.w	r3, r3, #32
 8002d90:	6313      	str	r3, [r2, #48]	; 0x30
 8002d92:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <HAL_SPI_MspInit+0x154>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	f003 0320 	and.w	r3, r3, #32
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002d9e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da4:	2302      	movs	r3, #2
 8002da6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dac:	2303      	movs	r3, #3
 8002dae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002db0:	2305      	movs	r3, #5
 8002db2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002db8:	4619      	mov	r1, r3
 8002dba:	4809      	ldr	r0, [pc, #36]	; (8002de0 <HAL_SPI_MspInit+0x168>)
 8002dbc:	f005 feaa 	bl	8008b14 <HAL_GPIO_Init>
}
 8002dc0:	bf00      	nop
 8002dc2:	3738      	adds	r7, #56	; 0x38
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40003800 	.word	0x40003800
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40020400 	.word	0x40020400
 8002dd4:	40013400 	.word	0x40013400
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	40015000 	.word	0x40015000
 8002de0:	40021400 	.word	0x40021400

08002de4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df4:	d10d      	bne.n	8002e12 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <HAL_TIM_PWM_MspInit+0x3c>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	4a08      	ldr	r2, [pc, #32]	; (8002e20 <HAL_TIM_PWM_MspInit+0x3c>)
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	6413      	str	r3, [r2, #64]	; 0x40
 8002e06:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <HAL_TIM_PWM_MspInit+0x3c>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002e12:	bf00      	nop
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	40023800 	.word	0x40023800

08002e24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e2c:	f107 030c 	add.w	r3, r7, #12
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	609a      	str	r2, [r3, #8]
 8002e38:	60da      	str	r2, [r3, #12]
 8002e3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e44:	d11d      	bne.n	8002e82 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	4b10      	ldr	r3, [pc, #64]	; (8002e8c <HAL_TIM_MspPostInit+0x68>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	4a0f      	ldr	r2, [pc, #60]	; (8002e8c <HAL_TIM_MspPostInit+0x68>)
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	6313      	str	r3, [r2, #48]	; 0x30
 8002e56:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <HAL_TIM_MspPostInit+0x68>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	60bb      	str	r3, [r7, #8]
 8002e60:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8002e62:	2304      	movs	r3, #4
 8002e64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e66:	2302      	movs	r3, #2
 8002e68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e72:	2301      	movs	r3, #1
 8002e74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8002e76:	f107 030c 	add.w	r3, r7, #12
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4804      	ldr	r0, [pc, #16]	; (8002e90 <HAL_TIM_MspPostInit+0x6c>)
 8002e7e:	f005 fe49 	bl	8008b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002e82:	bf00      	nop
 8002e84:	3720      	adds	r7, #32
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	40020000 	.word	0x40020000

08002e94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08e      	sub	sp, #56	; 0x38
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	605a      	str	r2, [r3, #4]
 8002ea6:	609a      	str	r2, [r3, #8]
 8002ea8:	60da      	str	r2, [r3, #12]
 8002eaa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a4b      	ldr	r2, [pc, #300]	; (8002fe0 <HAL_UART_MspInit+0x14c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d12c      	bne.n	8002f10 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	623b      	str	r3, [r7, #32]
 8002eba:	4b4a      	ldr	r3, [pc, #296]	; (8002fe4 <HAL_UART_MspInit+0x150>)
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	4a49      	ldr	r2, [pc, #292]	; (8002fe4 <HAL_UART_MspInit+0x150>)
 8002ec0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec6:	4b47      	ldr	r3, [pc, #284]	; (8002fe4 <HAL_UART_MspInit+0x150>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ece:	623b      	str	r3, [r7, #32]
 8002ed0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61fb      	str	r3, [r7, #28]
 8002ed6:	4b43      	ldr	r3, [pc, #268]	; (8002fe4 <HAL_UART_MspInit+0x150>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	4a42      	ldr	r2, [pc, #264]	; (8002fe4 <HAL_UART_MspInit+0x150>)
 8002edc:	f043 0310 	orr.w	r3, r3, #16
 8002ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee2:	4b40      	ldr	r3, [pc, #256]	; (8002fe4 <HAL_UART_MspInit+0x150>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	f003 0310 	and.w	r3, r3, #16
 8002eea:	61fb      	str	r3, [r7, #28]
 8002eec:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efa:	2303      	movs	r3, #3
 8002efc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002efe:	2308      	movs	r3, #8
 8002f00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f06:	4619      	mov	r1, r3
 8002f08:	4837      	ldr	r0, [pc, #220]	; (8002fe8 <HAL_UART_MspInit+0x154>)
 8002f0a:	f005 fe03 	bl	8008b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002f0e:	e063      	b.n	8002fd8 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a35      	ldr	r2, [pc, #212]	; (8002fec <HAL_UART_MspInit+0x158>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d12d      	bne.n	8002f76 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61bb      	str	r3, [r7, #24]
 8002f1e:	4b31      	ldr	r3, [pc, #196]	; (8002fe4 <HAL_UART_MspInit+0x150>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	4a30      	ldr	r2, [pc, #192]	; (8002fe4 <HAL_UART_MspInit+0x150>)
 8002f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f28:	6413      	str	r3, [r2, #64]	; 0x40
 8002f2a:	4b2e      	ldr	r3, [pc, #184]	; (8002fe4 <HAL_UART_MspInit+0x150>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f32:	61bb      	str	r3, [r7, #24]
 8002f34:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	4b2a      	ldr	r3, [pc, #168]	; (8002fe4 <HAL_UART_MspInit+0x150>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	4a29      	ldr	r2, [pc, #164]	; (8002fe4 <HAL_UART_MspInit+0x150>)
 8002f40:	f043 0308 	orr.w	r3, r3, #8
 8002f44:	6313      	str	r3, [r2, #48]	; 0x30
 8002f46:	4b27      	ldr	r3, [pc, #156]	; (8002fe4 <HAL_UART_MspInit+0x150>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8002f52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f60:	2303      	movs	r3, #3
 8002f62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f64:	2307      	movs	r3, #7
 8002f66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4820      	ldr	r0, [pc, #128]	; (8002ff0 <HAL_UART_MspInit+0x15c>)
 8002f70:	f005 fdd0 	bl	8008b14 <HAL_GPIO_Init>
}
 8002f74:	e030      	b.n	8002fd8 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a1e      	ldr	r2, [pc, #120]	; (8002ff4 <HAL_UART_MspInit+0x160>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d12b      	bne.n	8002fd8 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002f80:	2300      	movs	r3, #0
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	4b17      	ldr	r3, [pc, #92]	; (8002fe4 <HAL_UART_MspInit+0x150>)
 8002f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f88:	4a16      	ldr	r2, [pc, #88]	; (8002fe4 <HAL_UART_MspInit+0x150>)
 8002f8a:	f043 0320 	orr.w	r3, r3, #32
 8002f8e:	6453      	str	r3, [r2, #68]	; 0x44
 8002f90:	4b14      	ldr	r3, [pc, #80]	; (8002fe4 <HAL_UART_MspInit+0x150>)
 8002f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f94:	f003 0320 	and.w	r3, r3, #32
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	4b10      	ldr	r3, [pc, #64]	; (8002fe4 <HAL_UART_MspInit+0x150>)
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa4:	4a0f      	ldr	r2, [pc, #60]	; (8002fe4 <HAL_UART_MspInit+0x150>)
 8002fa6:	f043 0304 	orr.w	r3, r3, #4
 8002faa:	6313      	str	r3, [r2, #48]	; 0x30
 8002fac:	4b0d      	ldr	r3, [pc, #52]	; (8002fe4 <HAL_UART_MspInit+0x150>)
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8002fb8:	23c0      	movs	r3, #192	; 0xc0
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002fc8:	2308      	movs	r3, #8
 8002fca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4809      	ldr	r0, [pc, #36]	; (8002ff8 <HAL_UART_MspInit+0x164>)
 8002fd4:	f005 fd9e 	bl	8008b14 <HAL_GPIO_Init>
}
 8002fd8:	bf00      	nop
 8002fda:	3738      	adds	r7, #56	; 0x38
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40007c00 	.word	0x40007c00
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	40004800 	.word	0x40004800
 8002ff0:	40020c00 	.word	0x40020c00
 8002ff4:	40011400 	.word	0x40011400
 8002ff8:	40020800 	.word	0x40020800

08002ffc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08c      	sub	sp, #48	; 0x30
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003008:	2300      	movs	r3, #0
 800300a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800300c:	2200      	movs	r2, #0
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	2036      	movs	r0, #54	; 0x36
 8003012:	f005 fd47 	bl	8008aa4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003016:	2036      	movs	r0, #54	; 0x36
 8003018:	f005 fd60 	bl	8008adc <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800301c:	2300      	movs	r3, #0
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	4b1f      	ldr	r3, [pc, #124]	; (80030a0 <HAL_InitTick+0xa4>)
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	4a1e      	ldr	r2, [pc, #120]	; (80030a0 <HAL_InitTick+0xa4>)
 8003026:	f043 0310 	orr.w	r3, r3, #16
 800302a:	6413      	str	r3, [r2, #64]	; 0x40
 800302c:	4b1c      	ldr	r3, [pc, #112]	; (80030a0 <HAL_InitTick+0xa4>)
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	f003 0310 	and.w	r3, r3, #16
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003038:	f107 0210 	add.w	r2, r7, #16
 800303c:	f107 0314 	add.w	r3, r7, #20
 8003040:	4611      	mov	r1, r2
 8003042:	4618      	mov	r0, r3
 8003044:	f008 fe52 	bl	800bcec <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003048:	f008 fe28 	bl	800bc9c <HAL_RCC_GetPCLK1Freq>
 800304c:	4603      	mov	r3, r0
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003054:	4a13      	ldr	r2, [pc, #76]	; (80030a4 <HAL_InitTick+0xa8>)
 8003056:	fba2 2303 	umull	r2, r3, r2, r3
 800305a:	0c9b      	lsrs	r3, r3, #18
 800305c:	3b01      	subs	r3, #1
 800305e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003060:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <HAL_InitTick+0xac>)
 8003062:	4a12      	ldr	r2, [pc, #72]	; (80030ac <HAL_InitTick+0xb0>)
 8003064:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003066:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <HAL_InitTick+0xac>)
 8003068:	f240 32e7 	movw	r2, #999	; 0x3e7
 800306c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800306e:	4a0e      	ldr	r2, [pc, #56]	; (80030a8 <HAL_InitTick+0xac>)
 8003070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003072:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003074:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <HAL_InitTick+0xac>)
 8003076:	2200      	movs	r2, #0
 8003078:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800307a:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <HAL_InitTick+0xac>)
 800307c:	2200      	movs	r2, #0
 800307e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003080:	4809      	ldr	r0, [pc, #36]	; (80030a8 <HAL_InitTick+0xac>)
 8003082:	f00a fb9d 	bl	800d7c0 <HAL_TIM_Base_Init>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d104      	bne.n	8003096 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800308c:	4806      	ldr	r0, [pc, #24]	; (80030a8 <HAL_InitTick+0xac>)
 800308e:	f00a fbf1 	bl	800d874 <HAL_TIM_Base_Start_IT>
 8003092:	4603      	mov	r3, r0
 8003094:	e000      	b.n	8003098 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
}
 8003098:	4618      	mov	r0, r3
 800309a:	3730      	adds	r7, #48	; 0x30
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40023800 	.word	0x40023800
 80030a4:	431bde83 	.word	0x431bde83
 80030a8:	20006ca8 	.word	0x20006ca8
 80030ac:	40001000 	.word	0x40001000

080030b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80030b4:	bf00      	nop
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030be:	b480      	push	{r7}
 80030c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030c2:	e7fe      	b.n	80030c2 <HardFault_Handler+0x4>

080030c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030c8:	e7fe      	b.n	80030c8 <MemManage_Handler+0x4>

080030ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030ca:	b480      	push	{r7}
 80030cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030ce:	e7fe      	b.n	80030ce <BusFault_Handler+0x4>

080030d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030d4:	e7fe      	b.n	80030d4 <UsageFault_Handler+0x4>

080030d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030d6:	b480      	push	{r7}
 80030d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030da:	bf00      	nop
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80030e8:	2001      	movs	r0, #1
 80030ea:	f005 fef1 	bl	8008ed0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80030ee:	bf00      	nop
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80030f8:	4802      	ldr	r0, [pc, #8]	; (8003104 <RTC_Alarm_IRQHandler+0x10>)
 80030fa:	f009 fbc1 	bl	800c880 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20006920 	.word	0x20006920

08003108 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800310c:	4802      	ldr	r0, [pc, #8]	; (8003118 <TIM6_DAC_IRQHandler+0x10>)
 800310e:	f00a fc70 	bl	800d9f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20006ca8 	.word	0x20006ca8

0800311c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003120:	4802      	ldr	r0, [pc, #8]	; (800312c <OTG_FS_IRQHandler+0x10>)
 8003122:	f007 f8ff 	bl	800a324 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20008b9c 	.word	0x20008b9c

08003130 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
	return 1;
 8003134:	2301      	movs	r3, #1
}
 8003136:	4618      	mov	r0, r3
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <_kill>:

int _kill(int pid, int sig)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800314a:	f017 f9c3 	bl	801a4d4 <__errno>
 800314e:	4603      	mov	r3, r0
 8003150:	2216      	movs	r2, #22
 8003152:	601a      	str	r2, [r3, #0]
	return -1;
 8003154:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003158:	4618      	mov	r0, r3
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <_exit>:

void _exit (int status)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003168:	f04f 31ff 	mov.w	r1, #4294967295
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7ff ffe7 	bl	8003140 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003172:	e7fe      	b.n	8003172 <_exit+0x12>

08003174 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	e00a      	b.n	800319c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003186:	f3af 8000 	nop.w
 800318a:	4601      	mov	r1, r0
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	60ba      	str	r2, [r7, #8]
 8003192:	b2ca      	uxtb	r2, r1
 8003194:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	3301      	adds	r3, #1
 800319a:	617b      	str	r3, [r7, #20]
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	dbf0      	blt.n	8003186 <_read+0x12>
	}

return len;
 80031a4:	687b      	ldr	r3, [r7, #4]
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b086      	sub	sp, #24
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]
 80031be:	e009      	b.n	80031d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	1c5a      	adds	r2, r3, #1
 80031c4:	60ba      	str	r2, [r7, #8]
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	3301      	adds	r3, #1
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	429a      	cmp	r2, r3
 80031da:	dbf1      	blt.n	80031c0 <_write+0x12>
	}
	return len;
 80031dc:	687b      	ldr	r3, [r7, #4]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <_close>:

int _close(int file)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
	return -1;
 80031ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800320e:	605a      	str	r2, [r3, #4]
	return 0;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <_isatty>:

int _isatty(int file)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
	return 1;
 8003226:	2301      	movs	r3, #1
}
 8003228:	4618      	mov	r0, r3
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
	return 0;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
	...

08003250 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003258:	4a14      	ldr	r2, [pc, #80]	; (80032ac <_sbrk+0x5c>)
 800325a:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <_sbrk+0x60>)
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003264:	4b13      	ldr	r3, [pc, #76]	; (80032b4 <_sbrk+0x64>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d102      	bne.n	8003272 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800326c:	4b11      	ldr	r3, [pc, #68]	; (80032b4 <_sbrk+0x64>)
 800326e:	4a12      	ldr	r2, [pc, #72]	; (80032b8 <_sbrk+0x68>)
 8003270:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003272:	4b10      	ldr	r3, [pc, #64]	; (80032b4 <_sbrk+0x64>)
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4413      	add	r3, r2
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	429a      	cmp	r2, r3
 800327e:	d207      	bcs.n	8003290 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003280:	f017 f928 	bl	801a4d4 <__errno>
 8003284:	4603      	mov	r3, r0
 8003286:	220c      	movs	r2, #12
 8003288:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800328a:	f04f 33ff 	mov.w	r3, #4294967295
 800328e:	e009      	b.n	80032a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003290:	4b08      	ldr	r3, [pc, #32]	; (80032b4 <_sbrk+0x64>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003296:	4b07      	ldr	r3, [pc, #28]	; (80032b4 <_sbrk+0x64>)
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4413      	add	r3, r2
 800329e:	4a05      	ldr	r2, [pc, #20]	; (80032b4 <_sbrk+0x64>)
 80032a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032a2:	68fb      	ldr	r3, [r7, #12]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	20030000 	.word	0x20030000
 80032b0:	00000400 	.word	0x00000400
 80032b4:	2000042c 	.word	0x2000042c
 80032b8:	20008fb8 	.word	0x20008fb8

080032bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032c0:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <SystemInit+0x28>)
 80032c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c6:	4a07      	ldr	r2, [pc, #28]	; (80032e4 <SystemInit+0x28>)
 80032c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032d0:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <SystemInit+0x28>)
 80032d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032d6:	609a      	str	r2, [r3, #8]
#endif
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	e000ed00 	.word	0xe000ed00

080032e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80032e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003320 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80032ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80032ee:	e003      	b.n	80032f8 <LoopCopyDataInit>

080032f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80032f0:	4b0c      	ldr	r3, [pc, #48]	; (8003324 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80032f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80032f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80032f6:	3104      	adds	r1, #4

080032f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80032f8:	480b      	ldr	r0, [pc, #44]	; (8003328 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80032fa:	4b0c      	ldr	r3, [pc, #48]	; (800332c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80032fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80032fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003300:	d3f6      	bcc.n	80032f0 <CopyDataInit>
  ldr  r2, =_sbss
 8003302:	4a0b      	ldr	r2, [pc, #44]	; (8003330 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003304:	e002      	b.n	800330c <LoopFillZerobss>

08003306 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003306:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003308:	f842 3b04 	str.w	r3, [r2], #4

0800330c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800330c:	4b09      	ldr	r3, [pc, #36]	; (8003334 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800330e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003310:	d3f9      	bcc.n	8003306 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003312:	f7ff ffd3 	bl	80032bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003316:	f017 f9d9 	bl	801a6cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800331a:	f7fe f98d 	bl	8001638 <main>
  bx  lr    
 800331e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003320:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003324:	08021be4 	.word	0x08021be4
  ldr  r0, =_sdata
 8003328:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800332c:	200003cc 	.word	0x200003cc
  ldr  r2, =_sbss
 8003330:	200003cc 	.word	0x200003cc
  ldr  r3, = _ebss
 8003334:	20008fb4 	.word	0x20008fb4

08003338 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003338:	e7fe      	b.n	8003338 <ADC_IRQHandler>
	...

0800333c <GPS_Poll>:
UART_HandleTypeDef* SERIAL_USART;



void GPS_Poll(float *latitude, float *longitude, float *time)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b08c      	sub	sp, #48	; 0x30
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 8003348:	2364      	movs	r3, #100	; 0x64
 800334a:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 800334c:	2300      	movs	r3, #0
 800334e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 8003350:	2300      	movs	r3, #0
 8003352:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 8003354:	e073      	b.n	800343e <GPS_Poll+0x102>
		HAL_UART_Receive(GPS_USART, (uint8_t*)&rx_current, 1, 100);
 8003356:	4b3f      	ldr	r3, [pc, #252]	; (8003454 <GPS_Poll+0x118>)
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	2364      	movs	r3, #100	; 0x64
 800335c:	2201      	movs	r2, #1
 800335e:	493e      	ldr	r1, [pc, #248]	; (8003458 <GPS_Poll+0x11c>)
 8003360:	f00b f8f9 	bl	800e556 <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 8003364:	4b3c      	ldr	r3, [pc, #240]	; (8003458 <GPS_Poll+0x11c>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2b0a      	cmp	r3, #10
 800336a:	d00f      	beq.n	800338c <GPS_Poll+0x50>
 800336c:	4b3b      	ldr	r3, [pc, #236]	; (800345c <GPS_Poll+0x120>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b63      	cmp	r3, #99	; 0x63
 8003372:	d80b      	bhi.n	800338c <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 8003374:	4b39      	ldr	r3, [pc, #228]	; (800345c <GPS_Poll+0x120>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	1c5a      	adds	r2, r3, #1
 800337a:	b2d1      	uxtb	r1, r2
 800337c:	4a37      	ldr	r2, [pc, #220]	; (800345c <GPS_Poll+0x120>)
 800337e:	7011      	strb	r1, [r2, #0]
 8003380:	461a      	mov	r2, r3
 8003382:	4b35      	ldr	r3, [pc, #212]	; (8003458 <GPS_Poll+0x11c>)
 8003384:	7819      	ldrb	r1, [r3, #0]
 8003386:	4b36      	ldr	r3, [pc, #216]	; (8003460 <GPS_Poll+0x124>)
 8003388:	5499      	strb	r1, [r3, r2]
 800338a:	e021      	b.n	80033d0 <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 800338c:	4834      	ldr	r0, [pc, #208]	; (8003460 <GPS_Poll+0x124>)
 800338e:	f000 f86b 	bl	8003468 <GPS_validate>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d013      	beq.n	80033c0 <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 8003398:	4831      	ldr	r0, [pc, #196]	; (8003460 <GPS_Poll+0x124>)
 800339a:	f000 f8c7 	bl	800352c <GPS_parse>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00d      	beq.n	80033c0 <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 80033a4:	4b2f      	ldr	r3, [pc, #188]	; (8003464 <GPS_Poll+0x128>)
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 80033ac:	4b2d      	ldr	r3, [pc, #180]	; (8003464 <GPS_Poll+0x128>)
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 80033b4:	4b2b      	ldr	r3, [pc, #172]	; (8003464 <GPS_Poll+0x128>)
 80033b6:	695a      	ldr	r2, [r3, #20]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	601a      	str	r2, [r3, #0]
					done = 1;
 80033bc:	2301      	movs	r3, #1
 80033be:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 80033c0:	4b26      	ldr	r3, [pc, #152]	; (800345c <GPS_Poll+0x120>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 80033c6:	2264      	movs	r2, #100	; 0x64
 80033c8:	2100      	movs	r1, #0
 80033ca:	4825      	ldr	r0, [pc, #148]	; (8003460 <GPS_Poll+0x124>)
 80033cc:	f017 f9d6 	bl	801a77c <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS_USART);
 80033d0:	2300      	movs	r3, #0
 80033d2:	623b      	str	r3, [r7, #32]
 80033d4:	4b1f      	ldr	r3, [pc, #124]	; (8003454 <GPS_Poll+0x118>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	623b      	str	r3, [r7, #32]
 80033de:	4b1d      	ldr	r3, [pc, #116]	; (8003454 <GPS_Poll+0x118>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	623b      	str	r3, [r7, #32]
 80033e8:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS_USART);
 80033ea:	2300      	movs	r3, #0
 80033ec:	61fb      	str	r3, [r7, #28]
 80033ee:	4b19      	ldr	r3, [pc, #100]	; (8003454 <GPS_Poll+0x118>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	61fb      	str	r3, [r7, #28]
 80033f8:	4b16      	ldr	r3, [pc, #88]	; (8003454 <GPS_Poll+0x118>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	61fb      	str	r3, [r7, #28]
 8003402:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS_USART);
 8003404:	2300      	movs	r3, #0
 8003406:	61bb      	str	r3, [r7, #24]
 8003408:	4b12      	ldr	r3, [pc, #72]	; (8003454 <GPS_Poll+0x118>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	61bb      	str	r3, [r7, #24]
 8003412:	4b10      	ldr	r3, [pc, #64]	; (8003454 <GPS_Poll+0x118>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	61bb      	str	r3, [r7, #24]
 800341c:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS_USART);
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	4b0c      	ldr	r3, [pc, #48]	; (8003454 <GPS_Poll+0x118>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	617b      	str	r3, [r7, #20]
 800342c:	4b09      	ldr	r3, [pc, #36]	; (8003454 <GPS_Poll+0x118>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	617b      	str	r3, [r7, #20]
 8003436:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 8003438:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800343a:	3301      	adds	r3, #1
 800343c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 800343e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003440:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003442:	429a      	cmp	r2, r3
 8003444:	d202      	bcs.n	800344c <GPS_Poll+0x110>
 8003446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003448:	2b00      	cmp	r3, #0
 800344a:	d084      	beq.n	8003356 <GPS_Poll+0x1a>
	}
}
 800344c:	bf00      	nop
 800344e:	3730      	adds	r7, #48	; 0x30
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	20005fb8 	.word	0x20005fb8
 8003458:	20000430 	.word	0x20000430
 800345c:	20000431 	.word	0x20000431
 8003460:	20006d48 	.word	0x20006d48
 8003464:	20006cf0 	.word	0x20006cf0

08003468 <GPS_validate>:

int GPS_validate(char *nmeastr){
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8003474:	2300      	movs	r3, #0
 8003476:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	4413      	add	r3, r2
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b24      	cmp	r3, #36	; 0x24
 8003482:	d103      	bne.n	800348c <GPS_validate+0x24>
        i++;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	3301      	adds	r3, #1
 8003488:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800348a:	e00c      	b.n	80034a6 <GPS_validate+0x3e>
        return 0;
 800348c:	2300      	movs	r3, #0
 800348e:	e047      	b.n	8003520 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	4413      	add	r3, r2
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	461a      	mov	r2, r3
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	4053      	eors	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
        i++;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	3301      	adds	r3, #1
 80034a4:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	4413      	add	r3, r2
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d008      	beq.n	80034c4 <GPS_validate+0x5c>
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	4413      	add	r3, r2
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	2b2a      	cmp	r3, #42	; 0x2a
 80034bc:	d002      	beq.n	80034c4 <GPS_validate+0x5c>
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	2b4a      	cmp	r3, #74	; 0x4a
 80034c2:	dde5      	ble.n	8003490 <GPS_validate+0x28>
    }

    if(i >= 75){
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	2b4a      	cmp	r3, #74	; 0x4a
 80034c8:	dd01      	ble.n	80034ce <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 80034ca:	2300      	movs	r3, #0
 80034cc:	e028      	b.n	8003520 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	4413      	add	r3, r2
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b2a      	cmp	r3, #42	; 0x2a
 80034d8:	d119      	bne.n	800350e <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	3301      	adds	r3, #1
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	4413      	add	r3, r2
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	3302      	adds	r3, #2
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	4413      	add	r3, r2
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 80034f2:	2300      	movs	r3, #0
 80034f4:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 80034f6:	f107 0308 	add.w	r3, r7, #8
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	490a      	ldr	r1, [pc, #40]	; (8003528 <GPS_validate+0xc0>)
 80034fe:	4618      	mov	r0, r3
 8003500:	f018 f9ba 	bl	801b878 <siprintf>
    return((checkcalcstr[0] == check[0])
 8003504:	7a3a      	ldrb	r2, [r7, #8]
 8003506:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8003508:	429a      	cmp	r2, r3
 800350a:	d108      	bne.n	800351e <GPS_validate+0xb6>
 800350c:	e001      	b.n	8003512 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 800350e:	2300      	movs	r3, #0
 8003510:	e006      	b.n	8003520 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8003512:	7a7a      	ldrb	r2, [r7, #9]
 8003514:	7b7b      	ldrb	r3, [r7, #13]
 8003516:	429a      	cmp	r2, r3
 8003518:	d101      	bne.n	800351e <GPS_validate+0xb6>
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <GPS_validate+0xb8>
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	0801fac8 	.word	0x0801fac8

0800352c <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 800352c:	b580      	push	{r7, lr}
 800352e:	b08a      	sub	sp, #40	; 0x28
 8003530:	af08      	add	r7, sp, #32
 8003532:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 8003534:	2206      	movs	r2, #6
 8003536:	496d      	ldr	r1, [pc, #436]	; (80036ec <GPS_parse+0x1c0>)
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f018 fa36 	bl	801b9aa <strncmp>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d139      	bne.n	80035b8 <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8003544:	4b6a      	ldr	r3, [pc, #424]	; (80036f0 <GPS_parse+0x1c4>)
 8003546:	9307      	str	r3, [sp, #28]
 8003548:	4b6a      	ldr	r3, [pc, #424]	; (80036f4 <GPS_parse+0x1c8>)
 800354a:	9306      	str	r3, [sp, #24]
 800354c:	4b6a      	ldr	r3, [pc, #424]	; (80036f8 <GPS_parse+0x1cc>)
 800354e:	9305      	str	r3, [sp, #20]
 8003550:	4b6a      	ldr	r3, [pc, #424]	; (80036fc <GPS_parse+0x1d0>)
 8003552:	9304      	str	r3, [sp, #16]
 8003554:	4b6a      	ldr	r3, [pc, #424]	; (8003700 <GPS_parse+0x1d4>)
 8003556:	9303      	str	r3, [sp, #12]
 8003558:	4b6a      	ldr	r3, [pc, #424]	; (8003704 <GPS_parse+0x1d8>)
 800355a:	9302      	str	r3, [sp, #8]
 800355c:	4b6a      	ldr	r3, [pc, #424]	; (8003708 <GPS_parse+0x1dc>)
 800355e:	9301      	str	r3, [sp, #4]
 8003560:	4b6a      	ldr	r3, [pc, #424]	; (800370c <GPS_parse+0x1e0>)
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	4b6a      	ldr	r3, [pc, #424]	; (8003710 <GPS_parse+0x1e4>)
 8003566:	4a6b      	ldr	r2, [pc, #428]	; (8003714 <GPS_parse+0x1e8>)
 8003568:	496b      	ldr	r1, [pc, #428]	; (8003718 <GPS_parse+0x1ec>)
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f018 f9a4 	bl	801b8b8 <siscanf>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	f340 80b5 	ble.w	80036e2 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8003578:	4b68      	ldr	r3, [pc, #416]	; (800371c <GPS_parse+0x1f0>)
 800357a:	edd3 7a04 	vldr	s15, [r3, #16]
 800357e:	4b67      	ldr	r3, [pc, #412]	; (800371c <GPS_parse+0x1f0>)
 8003580:	7e1b      	ldrb	r3, [r3, #24]
 8003582:	4618      	mov	r0, r3
 8003584:	eeb0 0a67 	vmov.f32	s0, s15
 8003588:	f000 f8ec 	bl	8003764 <GPS_nmea_to_dec>
 800358c:	eef0 7a40 	vmov.f32	s15, s0
 8003590:	4b62      	ldr	r3, [pc, #392]	; (800371c <GPS_parse+0x1f0>)
 8003592:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8003596:	4b61      	ldr	r3, [pc, #388]	; (800371c <GPS_parse+0x1f0>)
 8003598:	edd3 7a03 	vldr	s15, [r3, #12]
 800359c:	4b5f      	ldr	r3, [pc, #380]	; (800371c <GPS_parse+0x1f0>)
 800359e:	7e5b      	ldrb	r3, [r3, #25]
 80035a0:	4618      	mov	r0, r3
 80035a2:	eeb0 0a67 	vmov.f32	s0, s15
 80035a6:	f000 f8dd 	bl	8003764 <GPS_nmea_to_dec>
 80035aa:	eef0 7a40 	vmov.f32	s15, s0
 80035ae:	4b5b      	ldr	r3, [pc, #364]	; (800371c <GPS_parse+0x1f0>)
 80035b0:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e095      	b.n	80036e4 <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 80035b8:	2206      	movs	r2, #6
 80035ba:	4959      	ldr	r1, [pc, #356]	; (8003720 <GPS_parse+0x1f4>)
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f018 f9f4 	bl	801b9aa <strncmp>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d134      	bne.n	8003632 <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 80035c8:	4b56      	ldr	r3, [pc, #344]	; (8003724 <GPS_parse+0x1f8>)
 80035ca:	9305      	str	r3, [sp, #20]
 80035cc:	4b56      	ldr	r3, [pc, #344]	; (8003728 <GPS_parse+0x1fc>)
 80035ce:	9304      	str	r3, [sp, #16]
 80035d0:	4b56      	ldr	r3, [pc, #344]	; (800372c <GPS_parse+0x200>)
 80035d2:	9303      	str	r3, [sp, #12]
 80035d4:	4b4b      	ldr	r3, [pc, #300]	; (8003704 <GPS_parse+0x1d8>)
 80035d6:	9302      	str	r3, [sp, #8]
 80035d8:	4b4b      	ldr	r3, [pc, #300]	; (8003708 <GPS_parse+0x1dc>)
 80035da:	9301      	str	r3, [sp, #4]
 80035dc:	4b4b      	ldr	r3, [pc, #300]	; (800370c <GPS_parse+0x1e0>)
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	4b4b      	ldr	r3, [pc, #300]	; (8003710 <GPS_parse+0x1e4>)
 80035e2:	4a4c      	ldr	r2, [pc, #304]	; (8003714 <GPS_parse+0x1e8>)
 80035e4:	4952      	ldr	r1, [pc, #328]	; (8003730 <GPS_parse+0x204>)
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f018 f966 	bl	801b8b8 <siscanf>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	dd77      	ble.n	80036e2 <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80035f2:	4b4a      	ldr	r3, [pc, #296]	; (800371c <GPS_parse+0x1f0>)
 80035f4:	edd3 7a04 	vldr	s15, [r3, #16]
 80035f8:	4b48      	ldr	r3, [pc, #288]	; (800371c <GPS_parse+0x1f0>)
 80035fa:	7e1b      	ldrb	r3, [r3, #24]
 80035fc:	4618      	mov	r0, r3
 80035fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003602:	f000 f8af 	bl	8003764 <GPS_nmea_to_dec>
 8003606:	eef0 7a40 	vmov.f32	s15, s0
 800360a:	4b44      	ldr	r3, [pc, #272]	; (800371c <GPS_parse+0x1f0>)
 800360c:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8003610:	4b42      	ldr	r3, [pc, #264]	; (800371c <GPS_parse+0x1f0>)
 8003612:	edd3 7a03 	vldr	s15, [r3, #12]
 8003616:	4b41      	ldr	r3, [pc, #260]	; (800371c <GPS_parse+0x1f0>)
 8003618:	7e5b      	ldrb	r3, [r3, #25]
 800361a:	4618      	mov	r0, r3
 800361c:	eeb0 0a67 	vmov.f32	s0, s15
 8003620:	f000 f8a0 	bl	8003764 <GPS_nmea_to_dec>
 8003624:	eef0 7a40 	vmov.f32	s15, s0
 8003628:	4b3c      	ldr	r3, [pc, #240]	; (800371c <GPS_parse+0x1f0>)
 800362a:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 800362e:	2301      	movs	r3, #1
 8003630:	e058      	b.n	80036e4 <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 8003632:	2206      	movs	r2, #6
 8003634:	493f      	ldr	r1, [pc, #252]	; (8003734 <GPS_parse+0x208>)
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f018 f9b7 	bl	801b9aa <strncmp>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d130      	bne.n	80036a4 <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 8003642:	4b3d      	ldr	r3, [pc, #244]	; (8003738 <GPS_parse+0x20c>)
 8003644:	9303      	str	r3, [sp, #12]
 8003646:	4b33      	ldr	r3, [pc, #204]	; (8003714 <GPS_parse+0x1e8>)
 8003648:	9302      	str	r3, [sp, #8]
 800364a:	4b2e      	ldr	r3, [pc, #184]	; (8003704 <GPS_parse+0x1d8>)
 800364c:	9301      	str	r3, [sp, #4]
 800364e:	4b2e      	ldr	r3, [pc, #184]	; (8003708 <GPS_parse+0x1dc>)
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	4b2e      	ldr	r3, [pc, #184]	; (800370c <GPS_parse+0x1e0>)
 8003654:	4a2e      	ldr	r2, [pc, #184]	; (8003710 <GPS_parse+0x1e4>)
 8003656:	4939      	ldr	r1, [pc, #228]	; (800373c <GPS_parse+0x210>)
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f018 f92d 	bl	801b8b8 <siscanf>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	dd3e      	ble.n	80036e2 <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8003664:	4b2d      	ldr	r3, [pc, #180]	; (800371c <GPS_parse+0x1f0>)
 8003666:	edd3 7a04 	vldr	s15, [r3, #16]
 800366a:	4b2c      	ldr	r3, [pc, #176]	; (800371c <GPS_parse+0x1f0>)
 800366c:	7e1b      	ldrb	r3, [r3, #24]
 800366e:	4618      	mov	r0, r3
 8003670:	eeb0 0a67 	vmov.f32	s0, s15
 8003674:	f000 f876 	bl	8003764 <GPS_nmea_to_dec>
 8003678:	eef0 7a40 	vmov.f32	s15, s0
 800367c:	4b27      	ldr	r3, [pc, #156]	; (800371c <GPS_parse+0x1f0>)
 800367e:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8003682:	4b26      	ldr	r3, [pc, #152]	; (800371c <GPS_parse+0x1f0>)
 8003684:	edd3 7a03 	vldr	s15, [r3, #12]
 8003688:	4b24      	ldr	r3, [pc, #144]	; (800371c <GPS_parse+0x1f0>)
 800368a:	7e5b      	ldrb	r3, [r3, #25]
 800368c:	4618      	mov	r0, r3
 800368e:	eeb0 0a67 	vmov.f32	s0, s15
 8003692:	f000 f867 	bl	8003764 <GPS_nmea_to_dec>
 8003696:	eef0 7a40 	vmov.f32	s15, s0
 800369a:	4b20      	ldr	r3, [pc, #128]	; (800371c <GPS_parse+0x1f0>)
 800369c:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e01f      	b.n	80036e4 <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 80036a4:	2206      	movs	r2, #6
 80036a6:	4926      	ldr	r1, [pc, #152]	; (8003740 <GPS_parse+0x214>)
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f018 f97e 	bl	801b9aa <strncmp>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d116      	bne.n	80036e2 <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 80036b4:	4b23      	ldr	r3, [pc, #140]	; (8003744 <GPS_parse+0x218>)
 80036b6:	9305      	str	r3, [sp, #20]
 80036b8:	4b23      	ldr	r3, [pc, #140]	; (8003748 <GPS_parse+0x21c>)
 80036ba:	9304      	str	r3, [sp, #16]
 80036bc:	4b23      	ldr	r3, [pc, #140]	; (800374c <GPS_parse+0x220>)
 80036be:	9303      	str	r3, [sp, #12]
 80036c0:	4b1a      	ldr	r3, [pc, #104]	; (800372c <GPS_parse+0x200>)
 80036c2:	9302      	str	r3, [sp, #8]
 80036c4:	4b22      	ldr	r3, [pc, #136]	; (8003750 <GPS_parse+0x224>)
 80036c6:	9301      	str	r3, [sp, #4]
 80036c8:	4b22      	ldr	r3, [pc, #136]	; (8003754 <GPS_parse+0x228>)
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	4b22      	ldr	r3, [pc, #136]	; (8003758 <GPS_parse+0x22c>)
 80036ce:	4a23      	ldr	r2, [pc, #140]	; (800375c <GPS_parse+0x230>)
 80036d0:	4923      	ldr	r1, [pc, #140]	; (8003760 <GPS_parse+0x234>)
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f018 f8f0 	bl	801b8b8 <siscanf>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	dd01      	ble.n	80036e2 <GPS_parse+0x1b6>
            return 0;
 80036de:	2300      	movs	r3, #0
 80036e0:	e000      	b.n	80036e4 <GPS_parse+0x1b8>
    }
    return 0;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	0801fad0 	.word	0x0801fad0
 80036f0:	20006d1c 	.word	0x20006d1c
 80036f4:	20006d18 	.word	0x20006d18
 80036f8:	20006d14 	.word	0x20006d14
 80036fc:	20006d10 	.word	0x20006d10
 8003700:	20006d0c 	.word	0x20006d0c
 8003704:	20006d09 	.word	0x20006d09
 8003708:	20006cfc 	.word	0x20006cfc
 800370c:	20006d08 	.word	0x20006d08
 8003710:	20006d00 	.word	0x20006d00
 8003714:	20006d04 	.word	0x20006d04
 8003718:	0801fad8 	.word	0x0801fad8
 800371c:	20006cf0 	.word	0x20006cf0
 8003720:	0801fb00 	.word	0x0801fb00
 8003724:	20006d28 	.word	0x20006d28
 8003728:	20006d24 	.word	0x20006d24
 800372c:	20006d20 	.word	0x20006d20
 8003730:	0801fb08 	.word	0x0801fb08
 8003734:	0801fb28 	.word	0x0801fb28
 8003738:	20006d2c 	.word	0x20006d2c
 800373c:	0801fb30 	.word	0x0801fb30
 8003740:	0801fb4c 	.word	0x0801fb4c
 8003744:	20006d44 	.word	0x20006d44
 8003748:	20006d40 	.word	0x20006d40
 800374c:	20006d3d 	.word	0x20006d3d
 8003750:	20006d3c 	.word	0x20006d3c
 8003754:	20006d38 	.word	0x20006d38
 8003758:	20006d34 	.word	0x20006d34
 800375c:	20006d30 	.word	0x20006d30
 8003760:	0801fb54 	.word	0x0801fb54

08003764 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8003764:	b480      	push	{r7}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
 800376a:	ed87 0a01 	vstr	s0, [r7, #4]
 800376e:	4603      	mov	r3, r0
 8003770:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8003772:	ed97 7a01 	vldr	s14, [r7, #4]
 8003776:	eddf 6a20 	vldr	s13, [pc, #128]	; 80037f8 <GPS_nmea_to_dec+0x94>
 800377a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800377e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003782:	ee17 3a90 	vmov	r3, s15
 8003786:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	2264      	movs	r2, #100	; 0x64
 800378c:	fb02 f303 	mul.w	r3, r2, r3
 8003790:	ee07 3a90 	vmov	s15, r3
 8003794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003798:	ed97 7a01 	vldr	s14, [r7, #4]
 800379c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037a0:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 80037a4:	ed97 7a03 	vldr	s14, [r7, #12]
 80037a8:	eddf 6a14 	vldr	s13, [pc, #80]	; 80037fc <GPS_nmea_to_dec+0x98>
 80037ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037b0:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	ee07 3a90 	vmov	s15, r3
 80037ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037be:	ed97 7a02 	vldr	s14, [r7, #8]
 80037c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037c6:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 80037ca:	78fb      	ldrb	r3, [r7, #3]
 80037cc:	2b53      	cmp	r3, #83	; 0x53
 80037ce:	d002      	beq.n	80037d6 <GPS_nmea_to_dec+0x72>
 80037d0:	78fb      	ldrb	r3, [r7, #3]
 80037d2:	2b57      	cmp	r3, #87	; 0x57
 80037d4:	d105      	bne.n	80037e2 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 80037d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80037da:	eef1 7a67 	vneg.f32	s15, s15
 80037de:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	ee07 3a90 	vmov	s15, r3
}
 80037e8:	eeb0 0a67 	vmov.f32	s0, s15
 80037ec:	371c      	adds	r7, #28
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	42c80000 	.word	0x42c80000
 80037fc:	42700000 	.word	0x42700000

08003800 <GPS_init>:

/*
 * TODO MRT code
 */

void GPS_init(UART_HandleTypeDef* data_uart, UART_HandleTypeDef* transmit_uart){
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
	GPS_USART = data_uart;
 800380a:	4a09      	ldr	r2, [pc, #36]	; (8003830 <GPS_init+0x30>)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6013      	str	r3, [r2, #0]
	SERIAL_USART = transmit_uart;
 8003810:	4a08      	ldr	r2, [pc, #32]	; (8003834 <GPS_init+0x34>)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(SERIAL_USART,"\r\n\r\nGPS Init\r\n\r\n",16,HAL_MAX_DELAY);
 8003816:	4b07      	ldr	r3, [pc, #28]	; (8003834 <GPS_init+0x34>)
 8003818:	6818      	ldr	r0, [r3, #0]
 800381a:	f04f 33ff 	mov.w	r3, #4294967295
 800381e:	2210      	movs	r2, #16
 8003820:	4905      	ldr	r1, [pc, #20]	; (8003838 <GPS_init+0x38>)
 8003822:	f00a fe06 	bl	800e432 <HAL_UART_Transmit>
}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20005fb8 	.word	0x20005fb8
 8003834:	20006dac 	.word	0x20006dac
 8003838:	0801fb74 	.word	0x0801fb74

0800383c <__NVIC_SystemReset>:
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003840:	f3bf 8f4f 	dsb	sy
}
 8003844:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003846:	4b06      	ldr	r3, [pc, #24]	; (8003860 <__NVIC_SystemReset+0x24>)
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800384e:	4904      	ldr	r1, [pc, #16]	; (8003860 <__NVIC_SystemReset+0x24>)
 8003850:	4b04      	ldr	r3, [pc, #16]	; (8003864 <__NVIC_SystemReset+0x28>)
 8003852:	4313      	orrs	r3, r2
 8003854:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003856:	f3bf 8f4f 	dsb	sy
}
 800385a:	bf00      	nop
    __NOP();
 800385c:	bf00      	nop
 800385e:	e7fd      	b.n	800385c <__NVIC_SystemReset+0x20>
 8003860:	e000ed00 	.word	0xe000ed00
 8003864:	05fa0004 	.word	0x05fa0004

08003868 <MRT_externalFlashSetup>:


/*
 * User functions
 */
void MRT_externalFlashSetup(UART_HandleTypeDef* uart){
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003870:	2300      	movs	r3, #0
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	e007      	b.n	8003886 <MRT_externalFlashSetup+0x1e>
		FLAGS_NULL_BUFFER[i] = 0; //Setup the flags null buffer for the correct number of values
 8003876:	4a10      	ldr	r2, [pc, #64]	; (80038b8 <MRT_externalFlashSetup+0x50>)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4413      	add	r3, r2
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	3301      	adds	r3, #1
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b02      	cmp	r3, #2
 800388a:	ddf4      	ble.n	8003876 <MRT_externalFlashSetup+0xe>
	}

	if (!W25qxx_Init()) {
 800388c:	f000 fb92 	bl	8003fb4 <W25qxx_Init>
 8003890:	4603      	mov	r3, r0
 8003892:	f083 0301 	eor.w	r3, r3, #1
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <MRT_externalFlashSetup+0x38>
		Error_Handler(); // hangs and blinks LEDF
 800389c:	f7ff f86c 	bl	8002978 <Error_Handler>
	}
	MRT_WUProcedure(); //Needs to be called before getFlags() and after the W25xx_Init()
 80038a0:	f004 f8d6 	bl	8007a50 <MRT_WUProcedure>
	MRT_getFlags();
 80038a4:	f000 f86c 	bl	8003980 <MRT_getFlags>
	MRT_resetInfo(uart);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f94f 	bl	8003b4c <MRT_resetInfo>
}
 80038ae:	bf00      	nop
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	20006db0 	.word	0x20006db0

080038bc <HAL_GPIO_EXTI_Callback>:


/*
 * Helper functions
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4603      	mov	r3, r0
 80038c4:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == IN_Button_Pin){
 80038c6:	88fb      	ldrh	r3, [r7, #6]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d101      	bne.n	80038d0 <HAL_GPIO_EXTI_Callback+0x14>
		//Manual reset from external button
		MRT_resetFromStart();
 80038cc:	f000 f804 	bl	80038d8 <MRT_resetFromStart>
	}

}
 80038d0:	bf00      	nop
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <MRT_resetFromStart>:


void MRT_resetFromStart(void){
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
	//Clear wakeup and reset flags
	W25qxx_EraseSector(1);
 80038dc:	2001      	movs	r0, #1
 80038de:	f000 fcbb 	bl	8004258 <W25qxx_EraseSector>
	W25qxx_WriteSector(FLAGS_NULL_BUFFER, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80038e2:	2303      	movs	r3, #3
 80038e4:	2200      	movs	r2, #0
 80038e6:	2101      	movs	r1, #1
 80038e8:	4807      	ldr	r0, [pc, #28]	; (8003908 <MRT_resetFromStart+0x30>)
 80038ea:	f000 fdff 	bl	80044ec <W25qxx_WriteSector>

	//Clear RTC time (last recorded)
	W25qxx_EraseSector(2);
 80038ee:	2002      	movs	r0, #2
 80038f0:	f000 fcb2 	bl	8004258 <W25qxx_EraseSector>
	W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, 2, RTC_TIME_OFFSET, 3);
 80038f4:	2303      	movs	r3, #3
 80038f6:	2200      	movs	r2, #0
 80038f8:	2102      	movs	r1, #2
 80038fa:	4804      	ldr	r0, [pc, #16]	; (800390c <MRT_resetFromStart+0x34>)
 80038fc:	f000 fdf6 	bl	80044ec <W25qxx_WriteSector>

	//Clear all saved data of ejection stages
	//TODO

	//Shutdown Iridium
	MRT_Static_Iridium_Shutdown();
 8003900:	f002 fc90 	bl	8006224 <MRT_Static_Iridium_Shutdown>

	//Reset function
	NVIC_SystemReset();
 8003904:	f7ff ff9a 	bl	800383c <__NVIC_SystemReset>
 8003908:	20006db0 	.word	0x20006db0
 800390c:	20000438 	.word	0x20000438

08003910 <MRT_updateExternalFlashBuffers>:
}


void MRT_updateExternalFlashBuffers(void){
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003916:	2300      	movs	r3, #0
 8003918:	607b      	str	r3, [r7, #4]
 800391a:	e00c      	b.n	8003936 <MRT_updateExternalFlashBuffers+0x26>
		flash_flags_buffer[i] = *flash_flags[i];
 800391c:	4a14      	ldr	r2, [pc, #80]	; (8003970 <MRT_updateExternalFlashBuffers+0x60>)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003924:	7819      	ldrb	r1, [r3, #0]
 8003926:	4a13      	ldr	r2, [pc, #76]	; (8003974 <MRT_updateExternalFlashBuffers+0x64>)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4413      	add	r3, r2
 800392c:	460a      	mov	r2, r1
 800392e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3301      	adds	r3, #1
 8003934:	607b      	str	r3, [r7, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b02      	cmp	r3, #2
 800393a:	ddef      	ble.n	800391c <MRT_updateExternalFlashBuffers+0xc>
	}
	for (int i = 0; i < 3; i++){
 800393c:	2300      	movs	r3, #0
 800393e:	603b      	str	r3, [r7, #0]
 8003940:	e00c      	b.n	800395c <MRT_updateExternalFlashBuffers+0x4c>
		flash_time_buffer[i] = *flash_time[i];
 8003942:	4a0d      	ldr	r2, [pc, #52]	; (8003978 <MRT_updateExternalFlashBuffers+0x68>)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800394a:	7819      	ldrb	r1, [r3, #0]
 800394c:	4a0b      	ldr	r2, [pc, #44]	; (800397c <MRT_updateExternalFlashBuffers+0x6c>)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	4413      	add	r3, r2
 8003952:	460a      	mov	r2, r1
 8003954:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++){
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	3301      	adds	r3, #1
 800395a:	603b      	str	r3, [r7, #0]
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	2b02      	cmp	r3, #2
 8003960:	ddef      	ble.n	8003942 <MRT_updateExternalFlashBuffers+0x32>
	}
}
 8003962:	bf00      	nop
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	20000004 	.word	0x20000004
 8003974:	20006058 	.word	0x20006058
 8003978:	20000010 	.word	0x20000010
 800397c:	200067b8 	.word	0x200067b8

08003980 <MRT_getFlags>:


void MRT_getFlags(void){
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0

	//Retrieve flags
	W25qxx_ReadSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003986:	2303      	movs	r3, #3
 8003988:	2200      	movs	r2, #0
 800398a:	2101      	movs	r1, #1
 800398c:	4865      	ldr	r0, [pc, #404]	; (8003b24 <MRT_getFlags+0x1a4>)
 800398e:	f000 feeb 	bl	8004768 <W25qxx_ReadSector>

	//Retrieve RTC time (last recorded)
	W25qxx_ReadSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003992:	2303      	movs	r3, #3
 8003994:	2200      	movs	r2, #0
 8003996:	2102      	movs	r1, #2
 8003998:	4863      	ldr	r0, [pc, #396]	; (8003b28 <MRT_getFlags+0x1a8>)
 800399a:	f000 fee5 	bl	8004768 <W25qxx_ReadSector>

	//If RTC detected a wake up, update the flash memory
	if (wu_flag == 1){
 800399e:	4b63      	ldr	r3, [pc, #396]	; (8003b2c <MRT_getFlags+0x1ac>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d10e      	bne.n	80039c4 <MRT_getFlags+0x44>
		//Write the new number of wake up to external flash
		flash_flags_buffer[WU_FLAG_OFFSET] = flash_flags_buffer[WU_FLAG_OFFSET] + 1; //Update number of wake up
 80039a6:	4b5f      	ldr	r3, [pc, #380]	; (8003b24 <MRT_getFlags+0x1a4>)
 80039a8:	785b      	ldrb	r3, [r3, #1]
 80039aa:	3301      	adds	r3, #1
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	4b5d      	ldr	r3, [pc, #372]	; (8003b24 <MRT_getFlags+0x1a4>)
 80039b0:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 80039b2:	2001      	movs	r0, #1
 80039b4:	f000 fc50 	bl	8004258 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80039b8:	2303      	movs	r3, #3
 80039ba:	2200      	movs	r2, #0
 80039bc:	2101      	movs	r1, #1
 80039be:	4859      	ldr	r0, [pc, #356]	; (8003b24 <MRT_getFlags+0x1a4>)
 80039c0:	f000 fd94 	bl	80044ec <W25qxx_WriteSector>
	}

	//Assign each value read to their variable
	for (int i = 0; i < NB_OF_FLAGS; i++){
 80039c4:	2300      	movs	r3, #0
 80039c6:	607b      	str	r3, [r7, #4]
 80039c8:	e00b      	b.n	80039e2 <MRT_getFlags+0x62>
		*flash_flags[i] = flash_flags_buffer[i];
 80039ca:	4a59      	ldr	r2, [pc, #356]	; (8003b30 <MRT_getFlags+0x1b0>)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039d2:	4954      	ldr	r1, [pc, #336]	; (8003b24 <MRT_getFlags+0x1a4>)
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	440a      	add	r2, r1
 80039d8:	7812      	ldrb	r2, [r2, #0]
 80039da:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3301      	adds	r3, #1
 80039e0:	607b      	str	r3, [r7, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	ddf0      	ble.n	80039ca <MRT_getFlags+0x4a>
	}
	for (int i = 0; i < 3; i++){
 80039e8:	2300      	movs	r3, #0
 80039ea:	603b      	str	r3, [r7, #0]
 80039ec:	e00b      	b.n	8003a06 <MRT_getFlags+0x86>
		*flash_time[i] = flash_time_buffer[i];
 80039ee:	4a51      	ldr	r2, [pc, #324]	; (8003b34 <MRT_getFlags+0x1b4>)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f6:	494c      	ldr	r1, [pc, #304]	; (8003b28 <MRT_getFlags+0x1a8>)
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	440a      	add	r2, r1
 80039fc:	7812      	ldrb	r2, [r2, #0]
 80039fe:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++){
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	3301      	adds	r3, #1
 8003a04:	603b      	str	r3, [r7, #0]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	ddf0      	ble.n	80039ee <MRT_getFlags+0x6e>
	}


	//Check flags values
	//Reset flag
	if (reset_flag != 0 && reset_flag !=1){ //If random value (none was written)
 8003a0c:	4b4a      	ldr	r3, [pc, #296]	; (8003b38 <MRT_getFlags+0x1b8>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d013      	beq.n	8003a3c <MRT_getFlags+0xbc>
 8003a14:	4b48      	ldr	r3, [pc, #288]	; (8003b38 <MRT_getFlags+0x1b8>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d00f      	beq.n	8003a3c <MRT_getFlags+0xbc>
		reset_flag = 0;
 8003a1c:	4b46      	ldr	r3, [pc, #280]	; (8003b38 <MRT_getFlags+0x1b8>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 8003a22:	4b45      	ldr	r3, [pc, #276]	; (8003b38 <MRT_getFlags+0x1b8>)
 8003a24:	781a      	ldrb	r2, [r3, #0]
 8003a26:	4b3f      	ldr	r3, [pc, #252]	; (8003b24 <MRT_getFlags+0x1a4>)
 8003a28:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(1);
 8003a2a:	2001      	movs	r0, #1
 8003a2c:	f000 fc14 	bl	8004258 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003a30:	2303      	movs	r3, #3
 8003a32:	2200      	movs	r2, #0
 8003a34:	2101      	movs	r1, #1
 8003a36:	483b      	ldr	r0, [pc, #236]	; (8003b24 <MRT_getFlags+0x1a4>)
 8003a38:	f000 fd58 	bl	80044ec <W25qxx_WriteSector>
	}

	//Wake up flag
	if (wu_flag != 0 && wu_flag !=1 && wu_flag !=2){ //If random value (none was written)
 8003a3c:	4b3b      	ldr	r3, [pc, #236]	; (8003b2c <MRT_getFlags+0x1ac>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d017      	beq.n	8003a74 <MRT_getFlags+0xf4>
 8003a44:	4b39      	ldr	r3, [pc, #228]	; (8003b2c <MRT_getFlags+0x1ac>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d013      	beq.n	8003a74 <MRT_getFlags+0xf4>
 8003a4c:	4b37      	ldr	r3, [pc, #220]	; (8003b2c <MRT_getFlags+0x1ac>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d00f      	beq.n	8003a74 <MRT_getFlags+0xf4>
		wu_flag = 0;
 8003a54:	4b35      	ldr	r3, [pc, #212]	; (8003b2c <MRT_getFlags+0x1ac>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[WU_FLAG_OFFSET] = wu_flag;
 8003a5a:	4b34      	ldr	r3, [pc, #208]	; (8003b2c <MRT_getFlags+0x1ac>)
 8003a5c:	781a      	ldrb	r2, [r3, #0]
 8003a5e:	4b31      	ldr	r3, [pc, #196]	; (8003b24 <MRT_getFlags+0x1a4>)
 8003a60:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 8003a62:	2001      	movs	r0, #1
 8003a64:	f000 fbf8 	bl	8004258 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003a68:	2303      	movs	r3, #3
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	482d      	ldr	r0, [pc, #180]	; (8003b24 <MRT_getFlags+0x1a4>)
 8003a70:	f000 fd3c 	bl	80044ec <W25qxx_WriteSector>
	}

	//IWDG flag
	if (iwdg_flag != 0 && iwdg_flag !=1){ //If random value (none was written)
 8003a74:	4b31      	ldr	r3, [pc, #196]	; (8003b3c <MRT_getFlags+0x1bc>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d013      	beq.n	8003aa4 <MRT_getFlags+0x124>
 8003a7c:	4b2f      	ldr	r3, [pc, #188]	; (8003b3c <MRT_getFlags+0x1bc>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d00f      	beq.n	8003aa4 <MRT_getFlags+0x124>
		iwdg_flag = 0;
 8003a84:	4b2d      	ldr	r3, [pc, #180]	; (8003b3c <MRT_getFlags+0x1bc>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8003a8a:	4b2c      	ldr	r3, [pc, #176]	; (8003b3c <MRT_getFlags+0x1bc>)
 8003a8c:	781a      	ldrb	r2, [r3, #0]
 8003a8e:	4b25      	ldr	r3, [pc, #148]	; (8003b24 <MRT_getFlags+0x1a4>)
 8003a90:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(1);
 8003a92:	2001      	movs	r0, #1
 8003a94:	f000 fbe0 	bl	8004258 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003a98:	2303      	movs	r3, #3
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	4821      	ldr	r0, [pc, #132]	; (8003b24 <MRT_getFlags+0x1a4>)
 8003aa0:	f000 fd24 	bl	80044ec <W25qxx_WriteSector>
	}


	//Check RTC time values
	//Hours
	if (!(prev_hours >= 0 && prev_hours < 24)){ //If random value (none was written)
 8003aa4:	4b26      	ldr	r3, [pc, #152]	; (8003b40 <MRT_getFlags+0x1c0>)
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	2b17      	cmp	r3, #23
 8003aaa:	d90f      	bls.n	8003acc <MRT_getFlags+0x14c>
		prev_hours = 0;
 8003aac:	4b24      	ldr	r3, [pc, #144]	; (8003b40 <MRT_getFlags+0x1c0>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_HOURS_OFFSET] = prev_hours;
 8003ab2:	4b23      	ldr	r3, [pc, #140]	; (8003b40 <MRT_getFlags+0x1c0>)
 8003ab4:	781a      	ldrb	r2, [r3, #0]
 8003ab6:	4b1c      	ldr	r3, [pc, #112]	; (8003b28 <MRT_getFlags+0x1a8>)
 8003ab8:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(2);
 8003aba:	2002      	movs	r0, #2
 8003abc:	f000 fbcc 	bl	8004258 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2102      	movs	r1, #2
 8003ac6:	4818      	ldr	r0, [pc, #96]	; (8003b28 <MRT_getFlags+0x1a8>)
 8003ac8:	f000 fd10 	bl	80044ec <W25qxx_WriteSector>
	}

	//Minutes
	if (!(prev_min >= 0 && prev_min < 60)){ //If random value (none was written)
 8003acc:	4b1d      	ldr	r3, [pc, #116]	; (8003b44 <MRT_getFlags+0x1c4>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b3b      	cmp	r3, #59	; 0x3b
 8003ad2:	d90f      	bls.n	8003af4 <MRT_getFlags+0x174>
		prev_min = 0;
 8003ad4:	4b1b      	ldr	r3, [pc, #108]	; (8003b44 <MRT_getFlags+0x1c4>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_MIN_OFFSET] = prev_min;
 8003ada:	4b1a      	ldr	r3, [pc, #104]	; (8003b44 <MRT_getFlags+0x1c4>)
 8003adc:	781a      	ldrb	r2, [r3, #0]
 8003ade:	4b12      	ldr	r3, [pc, #72]	; (8003b28 <MRT_getFlags+0x1a8>)
 8003ae0:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(2);
 8003ae2:	2002      	movs	r0, #2
 8003ae4:	f000 fbb8 	bl	8004258 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003ae8:	2303      	movs	r3, #3
 8003aea:	2200      	movs	r2, #0
 8003aec:	2102      	movs	r1, #2
 8003aee:	480e      	ldr	r0, [pc, #56]	; (8003b28 <MRT_getFlags+0x1a8>)
 8003af0:	f000 fcfc 	bl	80044ec <W25qxx_WriteSector>
	}

	//Seconds
	if (!(prev_sec >= 0 && prev_sec < 60)){ //If random value (none was written)
 8003af4:	4b14      	ldr	r3, [pc, #80]	; (8003b48 <MRT_getFlags+0x1c8>)
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b3b      	cmp	r3, #59	; 0x3b
 8003afa:	d90f      	bls.n	8003b1c <MRT_getFlags+0x19c>
		prev_sec = 0;
 8003afc:	4b12      	ldr	r3, [pc, #72]	; (8003b48 <MRT_getFlags+0x1c8>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_SEC_OFFSET] = prev_sec;
 8003b02:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <MRT_getFlags+0x1c8>)
 8003b04:	781a      	ldrb	r2, [r3, #0]
 8003b06:	4b08      	ldr	r3, [pc, #32]	; (8003b28 <MRT_getFlags+0x1a8>)
 8003b08:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(2);
 8003b0a:	2002      	movs	r0, #2
 8003b0c:	f000 fba4 	bl	8004258 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003b10:	2303      	movs	r3, #3
 8003b12:	2200      	movs	r2, #0
 8003b14:	2102      	movs	r1, #2
 8003b16:	4804      	ldr	r0, [pc, #16]	; (8003b28 <MRT_getFlags+0x1a8>)
 8003b18:	f000 fce8 	bl	80044ec <W25qxx_WriteSector>
	}
}
 8003b1c:	bf00      	nop
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	20006058 	.word	0x20006058
 8003b28:	200067b8 	.word	0x200067b8
 8003b2c:	200006a9 	.word	0x200006a9
 8003b30:	20000004 	.word	0x20000004
 8003b34:	20000010 	.word	0x20000010
 8003b38:	20000432 	.word	0x20000432
 8003b3c:	20000433 	.word	0x20000433
 8003b40:	20000434 	.word	0x20000434
 8003b44:	20000435 	.word	0x20000435
 8003b48:	20000436 	.word	0x20000436

08003b4c <MRT_resetInfo>:


void MRT_resetInfo(UART_HandleTypeDef* uart){
 8003b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b4e:	b0a7      	sub	sp, #156	; 0x9c
 8003b50:	af04      	add	r7, sp, #16
 8003b52:	6078      	str	r0, [r7, #4]

	  char buffer[100];
	  sprintf(buffer,"Reset: %i,  WU: %i,  IWDG: %i\r\nPrevious RTC time: %i:%i:%i\r\n",reset_flag, wu_flag, iwdg_flag, prev_hours, prev_min, prev_sec);
 8003b54:	4b54      	ldr	r3, [pc, #336]	; (8003ca8 <MRT_resetInfo+0x15c>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	461d      	mov	r5, r3
 8003b5a:	4b54      	ldr	r3, [pc, #336]	; (8003cac <MRT_resetInfo+0x160>)
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	461e      	mov	r6, r3
 8003b60:	4b53      	ldr	r3, [pc, #332]	; (8003cb0 <MRT_resetInfo+0x164>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	461a      	mov	r2, r3
 8003b66:	4b53      	ldr	r3, [pc, #332]	; (8003cb4 <MRT_resetInfo+0x168>)
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4b52      	ldr	r3, [pc, #328]	; (8003cb8 <MRT_resetInfo+0x16c>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	461c      	mov	r4, r3
 8003b72:	4b52      	ldr	r3, [pc, #328]	; (8003cbc <MRT_resetInfo+0x170>)
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	f107 0020 	add.w	r0, r7, #32
 8003b7a:	9303      	str	r3, [sp, #12]
 8003b7c:	9402      	str	r4, [sp, #8]
 8003b7e:	9101      	str	r1, [sp, #4]
 8003b80:	9200      	str	r2, [sp, #0]
 8003b82:	4633      	mov	r3, r6
 8003b84:	462a      	mov	r2, r5
 8003b86:	494e      	ldr	r1, [pc, #312]	; (8003cc0 <MRT_resetInfo+0x174>)
 8003b88:	f017 fe76 	bl	801b878 <siprintf>
	  HAL_UART_Transmit(uart, buffer, strlen(buffer), HAL_MAX_DELAY);
 8003b8c:	f107 0320 	add.w	r3, r7, #32
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7fc fb2d 	bl	80001f0 <strlen>
 8003b96:	4603      	mov	r3, r0
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	f107 0120 	add.w	r1, r7, #32
 8003b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f00a fc45 	bl	800e432 <HAL_UART_Transmit>

	  //Check if IWDG is being deactivated
	  if (iwdg_flag==1){
 8003ba8:	4b41      	ldr	r3, [pc, #260]	; (8003cb0 <MRT_resetInfo+0x164>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d11d      	bne.n	8003bec <MRT_resetInfo+0xa0>
		  HAL_UART_Transmit(uart, "Deactivating IWDG\r\n", 19, HAL_MAX_DELAY);
 8003bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb4:	2213      	movs	r2, #19
 8003bb6:	4943      	ldr	r1, [pc, #268]	; (8003cc4 <MRT_resetInfo+0x178>)
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f00a fc3a 	bl	800e432 <HAL_UART_Transmit>

		  iwdg_flag = 0; //Flip flag
 8003bbe:	4b3c      	ldr	r3, [pc, #240]	; (8003cb0 <MRT_resetInfo+0x164>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
		  flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8003bc4:	4b3a      	ldr	r3, [pc, #232]	; (8003cb0 <MRT_resetInfo+0x164>)
 8003bc6:	781a      	ldrb	r2, [r3, #0]
 8003bc8:	4b3f      	ldr	r3, [pc, #252]	; (8003cc8 <MRT_resetInfo+0x17c>)
 8003bca:	709a      	strb	r2, [r3, #2]
		  W25qxx_EraseSector(1);
 8003bcc:	2001      	movs	r0, #1
 8003bce:	f000 fb43 	bl	8004258 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	483b      	ldr	r0, [pc, #236]	; (8003cc8 <MRT_resetInfo+0x17c>)
 8003bda:	f000 fc87 	bl	80044ec <W25qxx_WriteSector>

		  HAL_Delay(1000);
 8003bde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003be2:	f004 fbed 	bl	80083c0 <HAL_Delay>

		  //Go to sleep
		  MRT_StandByMode(SLEEP_TIME);
 8003be6:	2005      	movs	r0, #5
 8003be8:	f003 fff0 	bl	8007bcc <MRT_StandByMode>
	  }


	  //Check if we are after waking up (and at which wake up we are at)
	  if (wu_flag>0){
 8003bec:	4b2f      	ldr	r3, [pc, #188]	; (8003cac <MRT_resetInfo+0x160>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d03a      	beq.n	8003c6a <MRT_resetInfo+0x11e>
		  char buf[20];
		  sprintf(buf, "FC wake up %i\r\n", wu_flag);
 8003bf4:	4b2d      	ldr	r3, [pc, #180]	; (8003cac <MRT_resetInfo+0x160>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	f107 030c 	add.w	r3, r7, #12
 8003bfe:	4933      	ldr	r1, [pc, #204]	; (8003ccc <MRT_resetInfo+0x180>)
 8003c00:	4618      	mov	r0, r3
 8003c02:	f017 fe39 	bl	801b878 <siprintf>
		  HAL_UART_Transmit(uart, buf, strlen(buf), HAL_MAX_DELAY);
 8003c06:	f107 030c 	add.w	r3, r7, #12
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fc faf0 	bl	80001f0 <strlen>
 8003c10:	4603      	mov	r3, r0
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	f107 010c 	add.w	r1, r7, #12
 8003c18:	f04f 33ff 	mov.w	r3, #4294967295
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f00a fc08 	bl	800e432 <HAL_UART_Transmit>

		  HAL_UART_Transmit(uart, "Resetting RTC time\r\n", 20, HAL_MAX_DELAY);
 8003c22:	f04f 33ff 	mov.w	r3, #4294967295
 8003c26:	2214      	movs	r2, #20
 8003c28:	4929      	ldr	r1, [pc, #164]	; (8003cd0 <MRT_resetInfo+0x184>)
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f00a fc01 	bl	800e432 <HAL_UART_Transmit>


		  //Clear RTC time (last recorded)
		  W25qxx_EraseSector(2);
 8003c30:	2002      	movs	r0, #2
 8003c32:	f000 fb11 	bl	8004258 <W25qxx_EraseSector>
		  W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, 2, RTC_TIME_OFFSET, 3);
 8003c36:	2303      	movs	r3, #3
 8003c38:	2200      	movs	r2, #0
 8003c3a:	2102      	movs	r1, #2
 8003c3c:	4825      	ldr	r0, [pc, #148]	; (8003cd4 <MRT_resetInfo+0x188>)
 8003c3e:	f000 fc55 	bl	80044ec <W25qxx_WriteSector>

		  //Update variables (to 0)
		  for (int i = 0; i < 3; i++){
 8003c42:	2300      	movs	r3, #0
 8003c44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c48:	e00b      	b.n	8003c62 <MRT_resetInfo+0x116>
			  *flash_time[i] = 0x0;
 8003c4a:	4a23      	ldr	r2, [pc, #140]	; (8003cd8 <MRT_resetInfo+0x18c>)
 8003c4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c54:	2200      	movs	r2, #0
 8003c56:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 3; i++){
 8003c58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	ddef      	ble.n	8003c4a <MRT_resetInfo+0xfe>

	  }


	  //Check if we start from the beginning
	  if (reset_flag==0){
 8003c6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ca8 <MRT_resetInfo+0x15c>)
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d116      	bne.n	8003ca0 <MRT_resetInfo+0x154>
		  HAL_UART_Transmit(uart, "FC restarted\r\n", 14, HAL_MAX_DELAY);
 8003c72:	f04f 33ff 	mov.w	r3, #4294967295
 8003c76:	220e      	movs	r2, #14
 8003c78:	4918      	ldr	r1, [pc, #96]	; (8003cdc <MRT_resetInfo+0x190>)
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f00a fbd9 	bl	800e432 <HAL_UART_Transmit>

		  reset_flag = 1; //Flip flag
 8003c80:	4b09      	ldr	r3, [pc, #36]	; (8003ca8 <MRT_resetInfo+0x15c>)
 8003c82:	2201      	movs	r2, #1
 8003c84:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
	      flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 8003c86:	4b08      	ldr	r3, [pc, #32]	; (8003ca8 <MRT_resetInfo+0x15c>)
 8003c88:	781a      	ldrb	r2, [r3, #0]
 8003c8a:	4b0f      	ldr	r3, [pc, #60]	; (8003cc8 <MRT_resetInfo+0x17c>)
 8003c8c:	701a      	strb	r2, [r3, #0]
		  W25qxx_EraseSector(1);
 8003c8e:	2001      	movs	r0, #1
 8003c90:	f000 fae2 	bl	8004258 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8003c94:	2303      	movs	r3, #3
 8003c96:	2200      	movs	r2, #0
 8003c98:	2101      	movs	r1, #1
 8003c9a:	480b      	ldr	r0, [pc, #44]	; (8003cc8 <MRT_resetInfo+0x17c>)
 8003c9c:	f000 fc26 	bl	80044ec <W25qxx_WriteSector>
	  }
}
 8003ca0:	bf00      	nop
 8003ca2:	378c      	adds	r7, #140	; 0x8c
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ca8:	20000432 	.word	0x20000432
 8003cac:	200006a9 	.word	0x200006a9
 8003cb0:	20000433 	.word	0x20000433
 8003cb4:	20000434 	.word	0x20000434
 8003cb8:	20000435 	.word	0x20000435
 8003cbc:	20000436 	.word	0x20000436
 8003cc0:	0801fbb8 	.word	0x0801fbb8
 8003cc4:	0801fbf8 	.word	0x0801fbf8
 8003cc8:	20006058 	.word	0x20006058
 8003ccc:	0801fc0c 	.word	0x0801fc0c
 8003cd0:	0801fc1c 	.word	0x0801fc1c
 8003cd4:	20000438 	.word	0x20000438
 8003cd8:	20000010 	.word	0x20000010
 8003cdc:	0801fc34 	.word	0x0801fc34

08003ce0 <MRT_saveRTCTime>:


/*
 * Update and save the RTC time in external flash memory
 */
void MRT_saveRTCTime(void){
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
	MRT_updateExternalFlashBuffers();
 8003ce4:	f7ff fe14 	bl	8003910 <MRT_updateExternalFlashBuffers>

	//Write new RTC time to flash memory
	W25qxx_EraseSector(2);
 8003ce8:	2002      	movs	r0, #2
 8003cea:	f000 fab5 	bl	8004258 <W25qxx_EraseSector>
	W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 8003cee:	2303      	movs	r3, #3
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	2102      	movs	r1, #2
 8003cf4:	4802      	ldr	r0, [pc, #8]	; (8003d00 <MRT_saveRTCTime+0x20>)
 8003cf6:	f000 fbf9 	bl	80044ec <W25qxx_WriteSector>
}
 8003cfa:	bf00      	nop
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	200067b8 	.word	0x200067b8
 8003d04:	00000000 	.word	0x00000000

08003d08 <MRT_getAltitude>:

/*
 * Gets the altitude using temperature, pressure and sea-level pressure
 *https://www.mide.com/air-pressure-at-altitude-calculator
 */
float MRT_getAltitude(float pressure){
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	ed87 0a01 	vstr	s0, [r7, #4]
	return BASE_HEIGHT+(SEA_LEVEL_TEMPERATURE/-0.0065)*(pow(pressure/SEA_LEVEL_PRESSURE,(-R*-0.0065/(go*M)))-1);
 8003d12:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d16:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003d98 <MRT_getAltitude+0x90>
 8003d1a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003d1e:	ee16 0a90 	vmov	r0, s13
 8003d22:	f7fc fc21 	bl	8000568 <__aeabi_f2d>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8003d88 <MRT_getAltitude+0x80>
 8003d2e:	ec43 2b10 	vmov	d0, r2, r3
 8003d32:	f015 fc13 	bl	801955c <pow>
 8003d36:	ec51 0b10 	vmov	r0, r1, d0
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	4b17      	ldr	r3, [pc, #92]	; (8003d9c <MRT_getAltitude+0x94>)
 8003d40:	f7fc fab2 	bl	80002a8 <__aeabi_dsub>
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	4610      	mov	r0, r2
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	a310      	add	r3, pc, #64	; (adr r3, 8003d90 <MRT_getAltitude+0x88>)
 8003d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d52:	f7fc fc61 	bl	8000618 <__aeabi_dmul>
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	4b0f      	ldr	r3, [pc, #60]	; (8003da0 <MRT_getAltitude+0x98>)
 8003d64:	f7fc faa2 	bl	80002ac <__adddf3>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	4619      	mov	r1, r3
 8003d70:	f7fc ff4a 	bl	8000c08 <__aeabi_d2f>
 8003d74:	4603      	mov	r3, r0
 8003d76:	ee07 3a90 	vmov	s15, r3
}
 8003d7a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	f3af 8000 	nop.w
 8003d88:	b537afba 	.word	0xb537afba
 8003d8c:	3fc85a8b 	.word	0x3fc85a8b
 8003d90:	76276276 	.word	0x76276276
 8003d94:	c0e481c2 	.word	0xc0e481c2
 8003d98:	447d8000 	.word	0x447d8000
 8003d9c:	3ff00000 	.word	0x3ff00000
 8003da0:	40590000 	.word	0x40590000

08003da4 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af02      	add	r7, sp, #8
 8003daa:	4603      	mov	r3, r0
 8003dac:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8003dae:	f107 020f 	add.w	r2, r7, #15
 8003db2:	1df9      	adds	r1, r7, #7
 8003db4:	2364      	movs	r3, #100	; 0x64
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	2301      	movs	r3, #1
 8003dba:	4804      	ldr	r0, [pc, #16]	; (8003dcc <W25qxx_Spi+0x28>)
 8003dbc:	f009 fa2e 	bl	800d21c <HAL_SPI_TransmitReceive>
	return ret;
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	20005fbc 	.word	0x20005fbc

08003dd0 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	2300      	movs	r3, #0
 8003de0:	607b      	str	r3, [r7, #4]
 8003de2:	2300      	movs	r3, #0
 8003de4:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003de6:	2200      	movs	r2, #0
 8003de8:	2140      	movs	r1, #64	; 0x40
 8003dea:	4813      	ldr	r0, [pc, #76]	; (8003e38 <W25qxx_ReadID+0x68>)
 8003dec:	f005 f856 	bl	8008e9c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8003df0:	209f      	movs	r0, #159	; 0x9f
 8003df2:	f7ff ffd7 	bl	8003da4 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003df6:	20a5      	movs	r0, #165	; 0xa5
 8003df8:	f7ff ffd4 	bl	8003da4 <W25qxx_Spi>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003e00:	20a5      	movs	r0, #165	; 0xa5
 8003e02:	f7ff ffcf 	bl	8003da4 <W25qxx_Spi>
 8003e06:	4603      	mov	r3, r0
 8003e08:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003e0a:	20a5      	movs	r0, #165	; 0xa5
 8003e0c:	f7ff ffca 	bl	8003da4 <W25qxx_Spi>
 8003e10:	4603      	mov	r3, r0
 8003e12:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003e14:	2201      	movs	r2, #1
 8003e16:	2140      	movs	r1, #64	; 0x40
 8003e18:	4807      	ldr	r0, [pc, #28]	; (8003e38 <W25qxx_ReadID+0x68>)
 8003e1a:	f005 f83f 	bl	8008e9c <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	041a      	lsls	r2, r3, #16
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	021b      	lsls	r3, r3, #8
 8003e26:	4313      	orrs	r3, r2
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]
	return Temp;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40020c00 	.word	0x40020c00

08003e3c <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8003e3c:	b590      	push	{r4, r7, lr}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003e42:	2200      	movs	r2, #0
 8003e44:	2140      	movs	r1, #64	; 0x40
 8003e46:	4816      	ldr	r0, [pc, #88]	; (8003ea0 <W25qxx_ReadUniqID+0x64>)
 8003e48:	f005 f828 	bl	8008e9c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8003e4c:	204b      	movs	r0, #75	; 0x4b
 8003e4e:	f7ff ffa9 	bl	8003da4 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003e52:	2300      	movs	r3, #0
 8003e54:	71fb      	strb	r3, [r7, #7]
 8003e56:	e005      	b.n	8003e64 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003e58:	20a5      	movs	r0, #165	; 0xa5
 8003e5a:	f7ff ffa3 	bl	8003da4 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003e5e:	79fb      	ldrb	r3, [r7, #7]
 8003e60:	3301      	adds	r3, #1
 8003e62:	71fb      	strb	r3, [r7, #7]
 8003e64:	79fb      	ldrb	r3, [r7, #7]
 8003e66:	2b03      	cmp	r3, #3
 8003e68:	d9f6      	bls.n	8003e58 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	71bb      	strb	r3, [r7, #6]
 8003e6e:	e00b      	b.n	8003e88 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003e70:	79bc      	ldrb	r4, [r7, #6]
 8003e72:	20a5      	movs	r0, #165	; 0xa5
 8003e74:	f7ff ff96 	bl	8003da4 <W25qxx_Spi>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <W25qxx_ReadUniqID+0x68>)
 8003e7e:	4423      	add	r3, r4
 8003e80:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8003e82:	79bb      	ldrb	r3, [r7, #6]
 8003e84:	3301      	adds	r3, #1
 8003e86:	71bb      	strb	r3, [r7, #6]
 8003e88:	79bb      	ldrb	r3, [r7, #6]
 8003e8a:	2b07      	cmp	r3, #7
 8003e8c:	d9f0      	bls.n	8003e70 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003e8e:	2201      	movs	r2, #1
 8003e90:	2140      	movs	r1, #64	; 0x40
 8003e92:	4803      	ldr	r0, [pc, #12]	; (8003ea0 <W25qxx_ReadUniqID+0x64>)
 8003e94:	f005 f802 	bl	8008e9c <HAL_GPIO_WritePin>
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd90      	pop	{r4, r7, pc}
 8003ea0:	40020c00 	.word	0x40020c00
 8003ea4:	20006db4 	.word	0x20006db4

08003ea8 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003eac:	2200      	movs	r2, #0
 8003eae:	2140      	movs	r1, #64	; 0x40
 8003eb0:	4807      	ldr	r0, [pc, #28]	; (8003ed0 <W25qxx_WriteEnable+0x28>)
 8003eb2:	f004 fff3 	bl	8008e9c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8003eb6:	2006      	movs	r0, #6
 8003eb8:	f7ff ff74 	bl	8003da4 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	2140      	movs	r1, #64	; 0x40
 8003ec0:	4803      	ldr	r0, [pc, #12]	; (8003ed0 <W25qxx_WriteEnable+0x28>)
 8003ec2:	f004 ffeb 	bl	8008e9c <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8003ec6:	2001      	movs	r0, #1
 8003ec8:	f011 fb93 	bl	80155f2 <osDelay>
}
 8003ecc:	bf00      	nop
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40020c00 	.word	0x40020c00

08003ed4 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	2140      	movs	r1, #64	; 0x40
 8003ee6:	481c      	ldr	r0, [pc, #112]	; (8003f58 <W25qxx_ReadStatusRegister+0x84>)
 8003ee8:	f004 ffd8 	bl	8008e9c <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8003eec:	79fb      	ldrb	r3, [r7, #7]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d10c      	bne.n	8003f0c <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8003ef2:	2005      	movs	r0, #5
 8003ef4:	f7ff ff56 	bl	8003da4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003ef8:	20a5      	movs	r0, #165	; 0xa5
 8003efa:	f7ff ff53 	bl	8003da4 <W25qxx_Spi>
 8003efe:	4603      	mov	r3, r0
 8003f00:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8003f02:	4a16      	ldr	r2, [pc, #88]	; (8003f5c <W25qxx_ReadStatusRegister+0x88>)
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
 8003f06:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8003f0a:	e01b      	b.n	8003f44 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8003f0c:	79fb      	ldrb	r3, [r7, #7]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d10c      	bne.n	8003f2c <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8003f12:	2035      	movs	r0, #53	; 0x35
 8003f14:	f7ff ff46 	bl	8003da4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003f18:	20a5      	movs	r0, #165	; 0xa5
 8003f1a:	f7ff ff43 	bl	8003da4 <W25qxx_Spi>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8003f22:	4a0e      	ldr	r2, [pc, #56]	; (8003f5c <W25qxx_ReadStatusRegister+0x88>)
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
 8003f26:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8003f2a:	e00b      	b.n	8003f44 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8003f2c:	2015      	movs	r0, #21
 8003f2e:	f7ff ff39 	bl	8003da4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003f32:	20a5      	movs	r0, #165	; 0xa5
 8003f34:	f7ff ff36 	bl	8003da4 <W25qxx_Spi>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8003f3c:	4a07      	ldr	r2, [pc, #28]	; (8003f5c <W25qxx_ReadStatusRegister+0x88>)
 8003f3e:	7bfb      	ldrb	r3, [r7, #15]
 8003f40:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003f44:	2201      	movs	r2, #1
 8003f46:	2140      	movs	r1, #64	; 0x40
 8003f48:	4803      	ldr	r0, [pc, #12]	; (8003f58 <W25qxx_ReadStatusRegister+0x84>)
 8003f4a:	f004 ffa7 	bl	8008e9c <HAL_GPIO_WritePin>
	return status;
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40020c00 	.word	0x40020c00
 8003f5c:	20006db4 	.word	0x20006db4

08003f60 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8003f64:	2001      	movs	r0, #1
 8003f66:	f011 fb44 	bl	80155f2 <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	2140      	movs	r1, #64	; 0x40
 8003f6e:	480f      	ldr	r0, [pc, #60]	; (8003fac <W25qxx_WaitForWriteEnd+0x4c>)
 8003f70:	f004 ff94 	bl	8008e9c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8003f74:	2005      	movs	r0, #5
 8003f76:	f7ff ff15 	bl	8003da4 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003f7a:	20a5      	movs	r0, #165	; 0xa5
 8003f7c:	f7ff ff12 	bl	8003da4 <W25qxx_Spi>
 8003f80:	4603      	mov	r3, r0
 8003f82:	461a      	mov	r2, r3
 8003f84:	4b0a      	ldr	r3, [pc, #40]	; (8003fb0 <W25qxx_WaitForWriteEnd+0x50>)
 8003f86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8003f8a:	2001      	movs	r0, #1
 8003f8c:	f011 fb31 	bl	80155f2 <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8003f90:	4b07      	ldr	r3, [pc, #28]	; (8003fb0 <W25qxx_WaitForWriteEnd+0x50>)
 8003f92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1ed      	bne.n	8003f7a <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	2140      	movs	r1, #64	; 0x40
 8003fa2:	4802      	ldr	r0, [pc, #8]	; (8003fac <W25qxx_WaitForWriteEnd+0x4c>)
 8003fa4:	f004 ff7a 	bl	8008e9c <HAL_GPIO_WritePin>
}
 8003fa8:	bf00      	nop
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	40020c00 	.word	0x40020c00
 8003fb0:	20006db4 	.word	0x20006db4

08003fb4 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8003fba:	4b90      	ldr	r3, [pc, #576]	; (80041fc <W25qxx_Init+0x248>)
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8003fc2:	e002      	b.n	8003fca <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8003fc4:	2001      	movs	r0, #1
 8003fc6:	f011 fb14 	bl	80155f2 <osDelay>
	while (HAL_GetTick() < 100)
 8003fca:	f004 f9ed 	bl	80083a8 <HAL_GetTick>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b63      	cmp	r3, #99	; 0x63
 8003fd2:	d9f7      	bls.n	8003fc4 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	2140      	movs	r1, #64	; 0x40
 8003fd8:	4889      	ldr	r0, [pc, #548]	; (8004200 <W25qxx_Init+0x24c>)
 8003fda:	f004 ff5f 	bl	8008e9c <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8003fde:	2064      	movs	r0, #100	; 0x64
 8003fe0:	f011 fb07 	bl	80155f2 <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 8003fe4:	4887      	ldr	r0, [pc, #540]	; (8004204 <W25qxx_Init+0x250>)
 8003fe6:	f017 fb7b 	bl	801b6e0 <puts>
#endif
	id = W25qxx_ReadID();
 8003fea:	f7ff fef1 	bl	8003dd0 <W25qxx_ReadID>
 8003fee:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	4885      	ldr	r0, [pc, #532]	; (8004208 <W25qxx_Init+0x254>)
 8003ff4:	f017 faee 	bl	801b5d4 <iprintf>
#endif
	switch (id & 0x000000FF)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	3b11      	subs	r3, #17
 8003ffe:	2b0f      	cmp	r3, #15
 8004000:	f200 808b 	bhi.w	800411a <W25qxx_Init+0x166>
 8004004:	a201      	add	r2, pc, #4	; (adr r2, 800400c <W25qxx_Init+0x58>)
 8004006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400a:	bf00      	nop
 800400c:	08004107 	.word	0x08004107
 8004010:	080040f3 	.word	0x080040f3
 8004014:	080040df 	.word	0x080040df
 8004018:	080040cb 	.word	0x080040cb
 800401c:	080040b7 	.word	0x080040b7
 8004020:	080040a3 	.word	0x080040a3
 8004024:	0800408f 	.word	0x0800408f
 8004028:	08004079 	.word	0x08004079
 800402c:	08004063 	.word	0x08004063
 8004030:	0800411b 	.word	0x0800411b
 8004034:	0800411b 	.word	0x0800411b
 8004038:	0800411b 	.word	0x0800411b
 800403c:	0800411b 	.word	0x0800411b
 8004040:	0800411b 	.word	0x0800411b
 8004044:	0800411b 	.word	0x0800411b
 8004048:	0800404d 	.word	0x0800404d
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 800404c:	4b6b      	ldr	r3, [pc, #428]	; (80041fc <W25qxx_Init+0x248>)
 800404e:	220a      	movs	r2, #10
 8004050:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8004052:	4b6a      	ldr	r3, [pc, #424]	; (80041fc <W25qxx_Init+0x248>)
 8004054:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004058:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 800405a:	486c      	ldr	r0, [pc, #432]	; (800420c <W25qxx_Init+0x258>)
 800405c:	f017 fb40 	bl	801b6e0 <puts>
#endif
		break;
 8004060:	e064      	b.n	800412c <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8004062:	4b66      	ldr	r3, [pc, #408]	; (80041fc <W25qxx_Init+0x248>)
 8004064:	2209      	movs	r2, #9
 8004066:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8004068:	4b64      	ldr	r3, [pc, #400]	; (80041fc <W25qxx_Init+0x248>)
 800406a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800406e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 8004070:	4867      	ldr	r0, [pc, #412]	; (8004210 <W25qxx_Init+0x25c>)
 8004072:	f017 fb35 	bl	801b6e0 <puts>
#endif
		break;
 8004076:	e059      	b.n	800412c <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8004078:	4b60      	ldr	r3, [pc, #384]	; (80041fc <W25qxx_Init+0x248>)
 800407a:	2208      	movs	r2, #8
 800407c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 800407e:	4b5f      	ldr	r3, [pc, #380]	; (80041fc <W25qxx_Init+0x248>)
 8004080:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004084:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 8004086:	4863      	ldr	r0, [pc, #396]	; (8004214 <W25qxx_Init+0x260>)
 8004088:	f017 fb2a 	bl	801b6e0 <puts>
#endif
		break;
 800408c:	e04e      	b.n	800412c <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 800408e:	4b5b      	ldr	r3, [pc, #364]	; (80041fc <W25qxx_Init+0x248>)
 8004090:	2207      	movs	r2, #7
 8004092:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8004094:	4b59      	ldr	r3, [pc, #356]	; (80041fc <W25qxx_Init+0x248>)
 8004096:	2280      	movs	r2, #128	; 0x80
 8004098:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 800409a:	485f      	ldr	r0, [pc, #380]	; (8004218 <W25qxx_Init+0x264>)
 800409c:	f017 fb20 	bl	801b6e0 <puts>
#endif
		break;
 80040a0:	e044      	b.n	800412c <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 80040a2:	4b56      	ldr	r3, [pc, #344]	; (80041fc <W25qxx_Init+0x248>)
 80040a4:	2206      	movs	r2, #6
 80040a6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 80040a8:	4b54      	ldr	r3, [pc, #336]	; (80041fc <W25qxx_Init+0x248>)
 80040aa:	2240      	movs	r2, #64	; 0x40
 80040ac:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 80040ae:	485b      	ldr	r0, [pc, #364]	; (800421c <W25qxx_Init+0x268>)
 80040b0:	f017 fb16 	bl	801b6e0 <puts>
#endif
		break;
 80040b4:	e03a      	b.n	800412c <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 80040b6:	4b51      	ldr	r3, [pc, #324]	; (80041fc <W25qxx_Init+0x248>)
 80040b8:	2205      	movs	r2, #5
 80040ba:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 80040bc:	4b4f      	ldr	r3, [pc, #316]	; (80041fc <W25qxx_Init+0x248>)
 80040be:	2220      	movs	r2, #32
 80040c0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 80040c2:	4857      	ldr	r0, [pc, #348]	; (8004220 <W25qxx_Init+0x26c>)
 80040c4:	f017 fb0c 	bl	801b6e0 <puts>
#endif
		break;
 80040c8:	e030      	b.n	800412c <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 80040ca:	4b4c      	ldr	r3, [pc, #304]	; (80041fc <W25qxx_Init+0x248>)
 80040cc:	2204      	movs	r2, #4
 80040ce:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 80040d0:	4b4a      	ldr	r3, [pc, #296]	; (80041fc <W25qxx_Init+0x248>)
 80040d2:	2210      	movs	r2, #16
 80040d4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 80040d6:	4853      	ldr	r0, [pc, #332]	; (8004224 <W25qxx_Init+0x270>)
 80040d8:	f017 fb02 	bl	801b6e0 <puts>
#endif
		break;
 80040dc:	e026      	b.n	800412c <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 80040de:	4b47      	ldr	r3, [pc, #284]	; (80041fc <W25qxx_Init+0x248>)
 80040e0:	2203      	movs	r2, #3
 80040e2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 80040e4:	4b45      	ldr	r3, [pc, #276]	; (80041fc <W25qxx_Init+0x248>)
 80040e6:	2208      	movs	r2, #8
 80040e8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 80040ea:	484f      	ldr	r0, [pc, #316]	; (8004228 <W25qxx_Init+0x274>)
 80040ec:	f017 faf8 	bl	801b6e0 <puts>
#endif
		break;
 80040f0:	e01c      	b.n	800412c <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 80040f2:	4b42      	ldr	r3, [pc, #264]	; (80041fc <W25qxx_Init+0x248>)
 80040f4:	2202      	movs	r2, #2
 80040f6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 80040f8:	4b40      	ldr	r3, [pc, #256]	; (80041fc <W25qxx_Init+0x248>)
 80040fa:	2204      	movs	r2, #4
 80040fc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 80040fe:	484b      	ldr	r0, [pc, #300]	; (800422c <W25qxx_Init+0x278>)
 8004100:	f017 faee 	bl	801b6e0 <puts>
#endif
		break;
 8004104:	e012      	b.n	800412c <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8004106:	4b3d      	ldr	r3, [pc, #244]	; (80041fc <W25qxx_Init+0x248>)
 8004108:	2201      	movs	r2, #1
 800410a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 800410c:	4b3b      	ldr	r3, [pc, #236]	; (80041fc <W25qxx_Init+0x248>)
 800410e:	2202      	movs	r2, #2
 8004110:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 8004112:	4847      	ldr	r0, [pc, #284]	; (8004230 <W25qxx_Init+0x27c>)
 8004114:	f017 fae4 	bl	801b6e0 <puts>
#endif
		break;
 8004118:	e008      	b.n	800412c <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 800411a:	4846      	ldr	r0, [pc, #280]	; (8004234 <W25qxx_Init+0x280>)
 800411c:	f017 fae0 	bl	801b6e0 <puts>
#endif
		w25qxx.Lock = 0;
 8004120:	4b36      	ldr	r3, [pc, #216]	; (80041fc <W25qxx_Init+0x248>)
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8004128:	2300      	movs	r3, #0
 800412a:	e063      	b.n	80041f4 <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 800412c:	4b33      	ldr	r3, [pc, #204]	; (80041fc <W25qxx_Init+0x248>)
 800412e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004132:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8004134:	4b31      	ldr	r3, [pc, #196]	; (80041fc <W25qxx_Init+0x248>)
 8004136:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800413a:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 800413c:	4b2f      	ldr	r3, [pc, #188]	; (80041fc <W25qxx_Init+0x248>)
 800413e:	69db      	ldr	r3, [r3, #28]
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	4a2e      	ldr	r2, [pc, #184]	; (80041fc <W25qxx_Init+0x248>)
 8004144:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8004146:	4b2d      	ldr	r3, [pc, #180]	; (80041fc <W25qxx_Init+0x248>)
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	4a2c      	ldr	r2, [pc, #176]	; (80041fc <W25qxx_Init+0x248>)
 800414c:	6912      	ldr	r2, [r2, #16]
 800414e:	fb02 f303 	mul.w	r3, r2, r3
 8004152:	4a2a      	ldr	r2, [pc, #168]	; (80041fc <W25qxx_Init+0x248>)
 8004154:	8952      	ldrh	r2, [r2, #10]
 8004156:	fbb3 f3f2 	udiv	r3, r3, r2
 800415a:	4a28      	ldr	r2, [pc, #160]	; (80041fc <W25qxx_Init+0x248>)
 800415c:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 800415e:	4b27      	ldr	r3, [pc, #156]	; (80041fc <W25qxx_Init+0x248>)
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	4a25      	ldr	r2, [pc, #148]	; (80041fc <W25qxx_Init+0x248>)
 8004166:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8004168:	4b24      	ldr	r3, [pc, #144]	; (80041fc <W25qxx_Init+0x248>)
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	4a23      	ldr	r2, [pc, #140]	; (80041fc <W25qxx_Init+0x248>)
 800416e:	6912      	ldr	r2, [r2, #16]
 8004170:	fb02 f303 	mul.w	r3, r2, r3
 8004174:	0a9b      	lsrs	r3, r3, #10
 8004176:	4a21      	ldr	r2, [pc, #132]	; (80041fc <W25qxx_Init+0x248>)
 8004178:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 800417a:	f7ff fe5f 	bl	8003e3c <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 800417e:	2001      	movs	r0, #1
 8004180:	f7ff fea8 	bl	8003ed4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8004184:	2002      	movs	r0, #2
 8004186:	f7ff fea5 	bl	8003ed4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 800418a:	2003      	movs	r0, #3
 800418c:	f7ff fea2 	bl	8003ed4 <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 8004190:	4b1a      	ldr	r3, [pc, #104]	; (80041fc <W25qxx_Init+0x248>)
 8004192:	895b      	ldrh	r3, [r3, #10]
 8004194:	4619      	mov	r1, r3
 8004196:	4828      	ldr	r0, [pc, #160]	; (8004238 <W25qxx_Init+0x284>)
 8004198:	f017 fa1c 	bl	801b5d4 <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 800419c:	4b17      	ldr	r3, [pc, #92]	; (80041fc <W25qxx_Init+0x248>)
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	4619      	mov	r1, r3
 80041a2:	4826      	ldr	r0, [pc, #152]	; (800423c <W25qxx_Init+0x288>)
 80041a4:	f017 fa16 	bl	801b5d4 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 80041a8:	4b14      	ldr	r3, [pc, #80]	; (80041fc <W25qxx_Init+0x248>)
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	4619      	mov	r1, r3
 80041ae:	4824      	ldr	r0, [pc, #144]	; (8004240 <W25qxx_Init+0x28c>)
 80041b0:	f017 fa10 	bl	801b5d4 <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 80041b4:	4b11      	ldr	r3, [pc, #68]	; (80041fc <W25qxx_Init+0x248>)
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	4619      	mov	r1, r3
 80041ba:	4822      	ldr	r0, [pc, #136]	; (8004244 <W25qxx_Init+0x290>)
 80041bc:	f017 fa0a 	bl	801b5d4 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 80041c0:	4b0e      	ldr	r3, [pc, #56]	; (80041fc <W25qxx_Init+0x248>)
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	4619      	mov	r1, r3
 80041c6:	4820      	ldr	r0, [pc, #128]	; (8004248 <W25qxx_Init+0x294>)
 80041c8:	f017 fa04 	bl	801b5d4 <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 80041cc:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <W25qxx_Init+0x248>)
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	4619      	mov	r1, r3
 80041d2:	481e      	ldr	r0, [pc, #120]	; (800424c <W25qxx_Init+0x298>)
 80041d4:	f017 f9fe 	bl	801b5d4 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 80041d8:	4b08      	ldr	r3, [pc, #32]	; (80041fc <W25qxx_Init+0x248>)
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	4619      	mov	r1, r3
 80041de:	481c      	ldr	r0, [pc, #112]	; (8004250 <W25qxx_Init+0x29c>)
 80041e0:	f017 f9f8 	bl	801b5d4 <iprintf>
	printf("w25qxx Init Done\r\n");
 80041e4:	481b      	ldr	r0, [pc, #108]	; (8004254 <W25qxx_Init+0x2a0>)
 80041e6:	f017 fa7b 	bl	801b6e0 <puts>
#endif
	w25qxx.Lock = 0;
 80041ea:	4b04      	ldr	r3, [pc, #16]	; (80041fc <W25qxx_Init+0x248>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 80041f2:	2301      	movs	r3, #1
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	20006db4 	.word	0x20006db4
 8004200:	40020c00 	.word	0x40020c00
 8004204:	0801fc44 	.word	0x0801fc44
 8004208:	0801fc5c 	.word	0x0801fc5c
 800420c:	0801fc70 	.word	0x0801fc70
 8004210:	0801fc88 	.word	0x0801fc88
 8004214:	0801fca0 	.word	0x0801fca0
 8004218:	0801fcb8 	.word	0x0801fcb8
 800421c:	0801fcd0 	.word	0x0801fcd0
 8004220:	0801fce8 	.word	0x0801fce8
 8004224:	0801fd00 	.word	0x0801fd00
 8004228:	0801fd18 	.word	0x0801fd18
 800422c:	0801fd30 	.word	0x0801fd30
 8004230:	0801fd48 	.word	0x0801fd48
 8004234:	0801fd60 	.word	0x0801fd60
 8004238:	0801fd74 	.word	0x0801fd74
 800423c:	0801fd94 	.word	0x0801fd94
 8004240:	0801fdac 	.word	0x0801fdac
 8004244:	0801fdcc 	.word	0x0801fdcc
 8004248:	0801fde8 	.word	0x0801fde8
 800424c:	0801fe08 	.word	0x0801fe08
 8004250:	0801fe24 	.word	0x0801fe24
 8004254:	0801fe44 	.word	0x0801fe44

08004258 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8004260:	e002      	b.n	8004268 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8004262:	2001      	movs	r0, #1
 8004264:	f011 f9c5 	bl	80155f2 <osDelay>
	while (w25qxx.Lock == 1)
 8004268:	4b2d      	ldr	r3, [pc, #180]	; (8004320 <W25qxx_EraseSector+0xc8>)
 800426a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800426e:	2b01      	cmp	r3, #1
 8004270:	d0f7      	beq.n	8004262 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8004272:	4b2b      	ldr	r3, [pc, #172]	; (8004320 <W25qxx_EraseSector+0xc8>)
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 800427a:	f004 f895 	bl	80083a8 <HAL_GetTick>
 800427e:	60f8      	str	r0, [r7, #12]
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	4828      	ldr	r0, [pc, #160]	; (8004324 <W25qxx_EraseSector+0xcc>)
 8004284:	f017 f9a6 	bl	801b5d4 <iprintf>
#endif
	W25qxx_WaitForWriteEnd();
 8004288:	f7ff fe6a 	bl	8003f60 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 800428c:	4b24      	ldr	r3, [pc, #144]	; (8004320 <W25qxx_EraseSector+0xc8>)
 800428e:	691a      	ldr	r2, [r3, #16]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	fb02 f303 	mul.w	r3, r2, r3
 8004296:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8004298:	f7ff fe06 	bl	8003ea8 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800429c:	2200      	movs	r2, #0
 800429e:	2140      	movs	r1, #64	; 0x40
 80042a0:	4821      	ldr	r0, [pc, #132]	; (8004328 <W25qxx_EraseSector+0xd0>)
 80042a2:	f004 fdfb 	bl	8008e9c <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80042a6:	4b1e      	ldr	r3, [pc, #120]	; (8004320 <W25qxx_EraseSector+0xc8>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b08      	cmp	r3, #8
 80042ac:	d909      	bls.n	80042c2 <W25qxx_EraseSector+0x6a>
	{
		W25qxx_Spi(0x21);
 80042ae:	2021      	movs	r0, #33	; 0x21
 80042b0:	f7ff fd78 	bl	8003da4 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	0e1b      	lsrs	r3, r3, #24
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff fd72 	bl	8003da4 <W25qxx_Spi>
 80042c0:	e002      	b.n	80042c8 <W25qxx_EraseSector+0x70>
	}
	else
	{
		W25qxx_Spi(0x20);
 80042c2:	2020      	movs	r0, #32
 80042c4:	f7ff fd6e 	bl	8003da4 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	0c1b      	lsrs	r3, r3, #16
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7ff fd68 	bl	8003da4 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	0a1b      	lsrs	r3, r3, #8
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff fd62 	bl	8003da4 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff fd5d 	bl	8003da4 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80042ea:	2201      	movs	r2, #1
 80042ec:	2140      	movs	r1, #64	; 0x40
 80042ee:	480e      	ldr	r0, [pc, #56]	; (8004328 <W25qxx_EraseSector+0xd0>)
 80042f0:	f004 fdd4 	bl	8008e9c <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80042f4:	f7ff fe34 	bl	8003f60 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
 80042f8:	f004 f856 	bl	80083a8 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	4619      	mov	r1, r3
 8004304:	4809      	ldr	r0, [pc, #36]	; (800432c <W25qxx_EraseSector+0xd4>)
 8004306:	f017 f965 	bl	801b5d4 <iprintf>
#endif
	W25qxx_Delay(1);
 800430a:	2001      	movs	r0, #1
 800430c:	f011 f971 	bl	80155f2 <osDelay>
	w25qxx.Lock = 0;
 8004310:	4b03      	ldr	r3, [pc, #12]	; (8004320 <W25qxx_EraseSector+0xc8>)
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004318:	bf00      	nop
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	20006db4 	.word	0x20006db4
 8004324:	0801fe9c 	.word	0x0801fe9c
 8004328:	40020c00 	.word	0x40020c00
 800432c:	0801fec0 	.word	0x0801fec0

08004330 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8004338:	4b07      	ldr	r3, [pc, #28]	; (8004358 <W25qxx_SectorToPage+0x28>)
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	fb02 f303 	mul.w	r3, r2, r3
 8004342:	4a05      	ldr	r2, [pc, #20]	; (8004358 <W25qxx_SectorToPage+0x28>)
 8004344:	8952      	ldrh	r2, [r2, #10]
 8004346:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800434a:	4618      	mov	r0, r3
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	20006db4 	.word	0x20006db4

0800435c <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
 8004368:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800436a:	e002      	b.n	8004372 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 800436c:	2001      	movs	r0, #1
 800436e:	f011 f940 	bl	80155f2 <osDelay>
	while (w25qxx.Lock == 1)
 8004372:	4b57      	ldr	r3, [pc, #348]	; (80044d0 <W25qxx_WritePage+0x174>)
 8004374:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004378:	2b01      	cmp	r3, #1
 800437a:	d0f7      	beq.n	800436c <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 800437c:	4b54      	ldr	r3, [pc, #336]	; (80044d0 <W25qxx_WritePage+0x174>)
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4413      	add	r3, r2
 800438a:	4a51      	ldr	r2, [pc, #324]	; (80044d0 <W25qxx_WritePage+0x174>)
 800438c:	8952      	ldrh	r2, [r2, #10]
 800438e:	4293      	cmp	r3, r2
 8004390:	d802      	bhi.n	8004398 <W25qxx_WritePage+0x3c>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d105      	bne.n	80043a4 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004398:	4b4d      	ldr	r3, [pc, #308]	; (80044d0 <W25qxx_WritePage+0x174>)
 800439a:	895b      	ldrh	r3, [r3, #10]
 800439c:	461a      	mov	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	4413      	add	r3, r2
 80043aa:	4a49      	ldr	r2, [pc, #292]	; (80044d0 <W25qxx_WritePage+0x174>)
 80043ac:	8952      	ldrh	r2, [r2, #10]
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d905      	bls.n	80043be <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80043b2:	4b47      	ldr	r3, [pc, #284]	; (80044d0 <W25qxx_WritePage+0x174>)
 80043b4:	895b      	ldrh	r3, [r3, #10]
 80043b6:	461a      	mov	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	68b9      	ldr	r1, [r7, #8]
 80043c4:	4843      	ldr	r0, [pc, #268]	; (80044d4 <W25qxx_WritePage+0x178>)
 80043c6:	f017 f905 	bl	801b5d4 <iprintf>
	W25qxx_Delay(100);
 80043ca:	2064      	movs	r0, #100	; 0x64
 80043cc:	f011 f911 	bl	80155f2 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 80043d0:	f003 ffea 	bl	80083a8 <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 80043d6:	f7ff fdc3 	bl	8003f60 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 80043da:	f7ff fd65 	bl	8003ea8 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80043de:	2200      	movs	r2, #0
 80043e0:	2140      	movs	r1, #64	; 0x40
 80043e2:	483d      	ldr	r0, [pc, #244]	; (80044d8 <W25qxx_WritePage+0x17c>)
 80043e4:	f004 fd5a 	bl	8008e9c <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 80043e8:	4b39      	ldr	r3, [pc, #228]	; (80044d0 <W25qxx_WritePage+0x174>)
 80043ea:	895b      	ldrh	r3, [r3, #10]
 80043ec:	461a      	mov	r2, r3
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	fb03 f302 	mul.w	r3, r3, r2
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	4413      	add	r3, r2
 80043f8:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 80043fa:	4b35      	ldr	r3, [pc, #212]	; (80044d0 <W25qxx_WritePage+0x174>)
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	2b08      	cmp	r3, #8
 8004400:	d909      	bls.n	8004416 <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 8004402:	2012      	movs	r0, #18
 8004404:	f7ff fcce 	bl	8003da4 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	0e1b      	lsrs	r3, r3, #24
 800440c:	b2db      	uxtb	r3, r3
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff fcc8 	bl	8003da4 <W25qxx_Spi>
 8004414:	e002      	b.n	800441c <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 8004416:	2002      	movs	r0, #2
 8004418:	f7ff fcc4 	bl	8003da4 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	0c1b      	lsrs	r3, r3, #16
 8004420:	b2db      	uxtb	r3, r3
 8004422:	4618      	mov	r0, r3
 8004424:	f7ff fcbe 	bl	8003da4 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	0a1b      	lsrs	r3, r3, #8
 800442c:	b2db      	uxtb	r3, r3
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff fcb8 	bl	8003da4 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	b2db      	uxtb	r3, r3
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff fcb3 	bl	8003da4 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	b29a      	uxth	r2, r3
 8004442:	2364      	movs	r3, #100	; 0x64
 8004444:	68f9      	ldr	r1, [r7, #12]
 8004446:	4825      	ldr	r0, [pc, #148]	; (80044dc <W25qxx_WritePage+0x180>)
 8004448:	f008 fc9b 	bl	800cd82 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800444c:	2201      	movs	r2, #1
 800444e:	2140      	movs	r1, #64	; 0x40
 8004450:	4821      	ldr	r0, [pc, #132]	; (80044d8 <W25qxx_WritePage+0x17c>)
 8004452:	f004 fd23 	bl	8008e9c <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004456:	f7ff fd83 	bl	8003f60 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 800445a:	f003 ffa5 	bl	80083a8 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 8004466:	2300      	movs	r3, #0
 8004468:	617b      	str	r3, [r7, #20]
 800446a:	e018      	b.n	800449e <W25qxx_WritePage+0x142>
	{
		if ((i % 8 == 0) && (i > 2))
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	2b00      	cmp	r3, #0
 8004474:	d108      	bne.n	8004488 <W25qxx_WritePage+0x12c>
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2b02      	cmp	r3, #2
 800447a:	d905      	bls.n	8004488 <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 800447c:	4818      	ldr	r0, [pc, #96]	; (80044e0 <W25qxx_WritePage+0x184>)
 800447e:	f017 f92f 	bl	801b6e0 <puts>
			W25qxx_Delay(10);
 8004482:	200a      	movs	r0, #10
 8004484:	f011 f8b5 	bl	80155f2 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	4413      	add	r3, r2
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	4619      	mov	r1, r3
 8004492:	4814      	ldr	r0, [pc, #80]	; (80044e4 <W25qxx_WritePage+0x188>)
 8004494:	f017 f89e 	bl	801b5d4 <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	3301      	adds	r3, #1
 800449c:	617b      	str	r3, [r7, #20]
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d3e2      	bcc.n	800446c <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 80044a6:	480e      	ldr	r0, [pc, #56]	; (80044e0 <W25qxx_WritePage+0x184>)
 80044a8:	f017 f91a 	bl	801b6e0 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 80044ac:	6939      	ldr	r1, [r7, #16]
 80044ae:	480e      	ldr	r0, [pc, #56]	; (80044e8 <W25qxx_WritePage+0x18c>)
 80044b0:	f017 f890 	bl	801b5d4 <iprintf>
	W25qxx_Delay(100);
 80044b4:	2064      	movs	r0, #100	; 0x64
 80044b6:	f011 f89c 	bl	80155f2 <osDelay>
#endif
	W25qxx_Delay(1);
 80044ba:	2001      	movs	r0, #1
 80044bc:	f011 f899 	bl	80155f2 <osDelay>
	w25qxx.Lock = 0;
 80044c0:	4b03      	ldr	r3, [pc, #12]	; (80044d0 <W25qxx_WritePage+0x174>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80044c8:	bf00      	nop
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	20006db4 	.word	0x20006db4
 80044d4:	08020124 	.word	0x08020124
 80044d8:	40020c00 	.word	0x40020c00
 80044dc:	20005fbc 	.word	0x20005fbc
 80044e0:	08020160 	.word	0x08020160
 80044e4:	08020164 	.word	0x08020164
 80044e8:	0802016c 	.word	0x0802016c

080044ec <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b088      	sub	sp, #32
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 80044fa:	4b36      	ldr	r3, [pc, #216]	; (80045d4 <W25qxx_WriteSector+0xe8>)
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	429a      	cmp	r2, r3
 8004502:	d802      	bhi.n	800450a <W25qxx_WriteSector+0x1e>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d102      	bne.n	8004510 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 800450a:	4b32      	ldr	r3, [pc, #200]	; (80045d4 <W25qxx_WriteSector+0xe8>)
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	68b9      	ldr	r1, [r7, #8]
 8004516:	4830      	ldr	r0, [pc, #192]	; (80045d8 <W25qxx_WriteSector+0xec>)
 8004518:	f017 f85c 	bl	801b5d4 <iprintf>
	W25qxx_Delay(100);
 800451c:	2064      	movs	r0, #100	; 0x64
 800451e:	f011 f868 	bl	80155f2 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004522:	4b2c      	ldr	r3, [pc, #176]	; (80045d4 <W25qxx_WriteSector+0xe8>)
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	429a      	cmp	r2, r3
 800452a:	d306      	bcc.n	800453a <W25qxx_WriteSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
 800452c:	482b      	ldr	r0, [pc, #172]	; (80045dc <W25qxx_WriteSector+0xf0>)
 800452e:	f017 f8d7 	bl	801b6e0 <puts>
		W25qxx_Delay(100);
 8004532:	2064      	movs	r0, #100	; 0x64
 8004534:	f011 f85d 	bl	80155f2 <osDelay>
#endif
		return;
 8004538:	e048      	b.n	80045cc <W25qxx_WriteSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	441a      	add	r2, r3
 8004540:	4b24      	ldr	r3, [pc, #144]	; (80045d4 <W25qxx_WriteSector+0xe8>)
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	429a      	cmp	r2, r3
 8004546:	d905      	bls.n	8004554 <W25qxx_WriteSector+0x68>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8004548:	4b22      	ldr	r3, [pc, #136]	; (80045d4 <W25qxx_WriteSector+0xe8>)
 800454a:	691a      	ldr	r2, [r3, #16]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	61bb      	str	r3, [r7, #24]
 8004552:	e001      	b.n	8004558 <W25qxx_WriteSector+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004558:	68b8      	ldr	r0, [r7, #8]
 800455a:	f7ff fee9 	bl	8004330 <W25qxx_SectorToPage>
 800455e:	4602      	mov	r2, r0
 8004560:	4b1c      	ldr	r3, [pc, #112]	; (80045d4 <W25qxx_WriteSector+0xe8>)
 8004562:	895b      	ldrh	r3, [r3, #10]
 8004564:	4619      	mov	r1, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	fbb3 f3f1 	udiv	r3, r3, r1
 800456c:	4413      	add	r3, r2
 800456e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004570:	4b18      	ldr	r3, [pc, #96]	; (80045d4 <W25qxx_WriteSector+0xe8>)
 8004572:	895b      	ldrh	r3, [r3, #10]
 8004574:	461a      	mov	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	fbb3 f1f2 	udiv	r1, r3, r2
 800457c:	fb02 f201 	mul.w	r2, r2, r1
 8004580:	1a9b      	subs	r3, r3, r2
 8004582:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	69f9      	ldr	r1, [r7, #28]
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f7ff fee6 	bl	800435c <W25qxx_WritePage>
		StartPage++;
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	3301      	adds	r3, #1
 8004594:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8004596:	4b0f      	ldr	r3, [pc, #60]	; (80045d4 <W25qxx_WriteSector+0xe8>)
 8004598:	895b      	ldrh	r3, [r3, #10]
 800459a:	461a      	mov	r2, r3
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	1a9a      	subs	r2, r3, r2
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	4413      	add	r3, r2
 80045a4:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80045a6:	4b0b      	ldr	r3, [pc, #44]	; (80045d4 <W25qxx_WriteSector+0xe8>)
 80045a8:	895b      	ldrh	r3, [r3, #10]
 80045aa:	461a      	mov	r2, r3
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	4413      	add	r3, r2
 80045b4:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80045b6:	2300      	movs	r3, #0
 80045b8:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	dce1      	bgt.n	8004584 <W25qxx_WriteSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
 80045c0:	4807      	ldr	r0, [pc, #28]	; (80045e0 <W25qxx_WriteSector+0xf4>)
 80045c2:	f017 f88d 	bl	801b6e0 <puts>
	W25qxx_Delay(100);
 80045c6:	2064      	movs	r0, #100	; 0x64
 80045c8:	f011 f813 	bl	80155f2 <osDelay>
#endif
}
 80045cc:	3720      	adds	r7, #32
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20006db4 	.word	0x20006db4
 80045d8:	08020190 	.word	0x08020190
 80045dc:	080201d0 	.word	0x080201d0
 80045e0:	080201f0 	.word	0x080201f0

080045e4 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
 80045f0:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80045f2:	e002      	b.n	80045fa <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 80045f4:	2001      	movs	r0, #1
 80045f6:	f010 fffc 	bl	80155f2 <osDelay>
	while (w25qxx.Lock == 1)
 80045fa:	4b54      	ldr	r3, [pc, #336]	; (800474c <W25qxx_ReadPage+0x168>)
 80045fc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004600:	2b01      	cmp	r3, #1
 8004602:	d0f7      	beq.n	80045f4 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8004604:	4b51      	ldr	r3, [pc, #324]	; (800474c <W25qxx_ReadPage+0x168>)
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 800460c:	4b4f      	ldr	r3, [pc, #316]	; (800474c <W25qxx_ReadPage+0x168>)
 800460e:	895b      	ldrh	r3, [r3, #10]
 8004610:	461a      	mov	r2, r3
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	4293      	cmp	r3, r2
 8004616:	d802      	bhi.n	800461e <W25qxx_ReadPage+0x3a>
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d102      	bne.n	8004624 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 800461e:	4b4b      	ldr	r3, [pc, #300]	; (800474c <W25qxx_ReadPage+0x168>)
 8004620:	895b      	ldrh	r3, [r3, #10]
 8004622:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	4413      	add	r3, r2
 800462a:	4a48      	ldr	r2, [pc, #288]	; (800474c <W25qxx_ReadPage+0x168>)
 800462c:	8952      	ldrh	r2, [r2, #10]
 800462e:	4293      	cmp	r3, r2
 8004630:	d905      	bls.n	800463e <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004632:	4b46      	ldr	r3, [pc, #280]	; (800474c <W25qxx_ReadPage+0x168>)
 8004634:	895b      	ldrh	r3, [r3, #10]
 8004636:	461a      	mov	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	68b9      	ldr	r1, [r7, #8]
 8004644:	4842      	ldr	r0, [pc, #264]	; (8004750 <W25qxx_ReadPage+0x16c>)
 8004646:	f016 ffc5 	bl	801b5d4 <iprintf>
	W25qxx_Delay(100);
 800464a:	2064      	movs	r0, #100	; 0x64
 800464c:	f010 ffd1 	bl	80155f2 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8004650:	f003 feaa 	bl	80083a8 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8004656:	4b3d      	ldr	r3, [pc, #244]	; (800474c <W25qxx_ReadPage+0x168>)
 8004658:	895b      	ldrh	r3, [r3, #10]
 800465a:	461a      	mov	r2, r3
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	fb03 f302 	mul.w	r3, r3, r2
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	4413      	add	r3, r2
 8004666:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004668:	2200      	movs	r2, #0
 800466a:	2140      	movs	r1, #64	; 0x40
 800466c:	4839      	ldr	r0, [pc, #228]	; (8004754 <W25qxx_ReadPage+0x170>)
 800466e:	f004 fc15 	bl	8008e9c <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004672:	4b36      	ldr	r3, [pc, #216]	; (800474c <W25qxx_ReadPage+0x168>)
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	2b08      	cmp	r3, #8
 8004678:	d909      	bls.n	800468e <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 800467a:	200c      	movs	r0, #12
 800467c:	f7ff fb92 	bl	8003da4 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	0e1b      	lsrs	r3, r3, #24
 8004684:	b2db      	uxtb	r3, r3
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff fb8c 	bl	8003da4 <W25qxx_Spi>
 800468c:	e002      	b.n	8004694 <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 800468e:	200b      	movs	r0, #11
 8004690:	f7ff fb88 	bl	8003da4 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	0c1b      	lsrs	r3, r3, #16
 8004698:	b2db      	uxtb	r3, r3
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff fb82 	bl	8003da4 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	0a1b      	lsrs	r3, r3, #8
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff fb7c 	bl	8003da4 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7ff fb77 	bl	8003da4 <W25qxx_Spi>
	W25qxx_Spi(0);
 80046b6:	2000      	movs	r0, #0
 80046b8:	f7ff fb74 	bl	8003da4 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	b29a      	uxth	r2, r3
 80046c0:	2364      	movs	r3, #100	; 0x64
 80046c2:	68f9      	ldr	r1, [r7, #12]
 80046c4:	4824      	ldr	r0, [pc, #144]	; (8004758 <W25qxx_ReadPage+0x174>)
 80046c6:	f008 fc98 	bl	800cffa <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80046ca:	2201      	movs	r2, #1
 80046cc:	2140      	movs	r1, #64	; 0x40
 80046ce:	4821      	ldr	r0, [pc, #132]	; (8004754 <W25qxx_ReadPage+0x170>)
 80046d0:	f004 fbe4 	bl	8008e9c <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 80046d4:	f003 fe68 	bl	80083a8 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 80046e0:	2300      	movs	r3, #0
 80046e2:	617b      	str	r3, [r7, #20]
 80046e4:	e018      	b.n	8004718 <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d108      	bne.n	8004702 <W25qxx_ReadPage+0x11e>
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d905      	bls.n	8004702 <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 80046f6:	4819      	ldr	r0, [pc, #100]	; (800475c <W25qxx_ReadPage+0x178>)
 80046f8:	f016 fff2 	bl	801b6e0 <puts>
			W25qxx_Delay(10);
 80046fc:	200a      	movs	r0, #10
 80046fe:	f010 ff78 	bl	80155f2 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	4413      	add	r3, r2
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	4619      	mov	r1, r3
 800470c:	4814      	ldr	r0, [pc, #80]	; (8004760 <W25qxx_ReadPage+0x17c>)
 800470e:	f016 ff61 	bl	801b5d4 <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	3301      	adds	r3, #1
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	429a      	cmp	r2, r3
 800471e:	d3e2      	bcc.n	80046e6 <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 8004720:	480e      	ldr	r0, [pc, #56]	; (800475c <W25qxx_ReadPage+0x178>)
 8004722:	f016 ffdd 	bl	801b6e0 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 8004726:	6939      	ldr	r1, [r7, #16]
 8004728:	480e      	ldr	r0, [pc, #56]	; (8004764 <W25qxx_ReadPage+0x180>)
 800472a:	f016 ff53 	bl	801b5d4 <iprintf>
	W25qxx_Delay(100);
 800472e:	2064      	movs	r0, #100	; 0x64
 8004730:	f010 ff5f 	bl	80155f2 <osDelay>
#endif
	W25qxx_Delay(1);
 8004734:	2001      	movs	r0, #1
 8004736:	f010 ff5c 	bl	80155f2 <osDelay>
	w25qxx.Lock = 0;
 800473a:	4b04      	ldr	r3, [pc, #16]	; (800474c <W25qxx_ReadPage+0x168>)
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004742:	bf00      	nop
 8004744:	3718      	adds	r7, #24
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	20006db4 	.word	0x20006db4
 8004750:	0802033c 	.word	0x0802033c
 8004754:	40020c00 	.word	0x40020c00
 8004758:	20005fbc 	.word	0x20005fbc
 800475c:	08020160 	.word	0x08020160
 8004760:	08020164 	.word	0x08020164
 8004764:	08020378 	.word	0x08020378

08004768 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b088      	sub	sp, #32
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
 8004774:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8004776:	4b36      	ldr	r3, [pc, #216]	; (8004850 <W25qxx_ReadSector+0xe8>)
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	429a      	cmp	r2, r3
 800477e:	d802      	bhi.n	8004786 <W25qxx_ReadSector+0x1e>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d102      	bne.n	800478c <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8004786:	4b32      	ldr	r3, [pc, #200]	; (8004850 <W25qxx_ReadSector+0xe8>)
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	68b9      	ldr	r1, [r7, #8]
 8004792:	4830      	ldr	r0, [pc, #192]	; (8004854 <W25qxx_ReadSector+0xec>)
 8004794:	f016 ff1e 	bl	801b5d4 <iprintf>
	W25qxx_Delay(100);
 8004798:	2064      	movs	r0, #100	; 0x64
 800479a:	f010 ff2a 	bl	80155f2 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 800479e:	4b2c      	ldr	r3, [pc, #176]	; (8004850 <W25qxx_ReadSector+0xe8>)
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d306      	bcc.n	80047b6 <W25qxx_ReadSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
 80047a8:	482b      	ldr	r0, [pc, #172]	; (8004858 <W25qxx_ReadSector+0xf0>)
 80047aa:	f016 ff99 	bl	801b6e0 <puts>
		W25qxx_Delay(100);
 80047ae:	2064      	movs	r0, #100	; 0x64
 80047b0:	f010 ff1f 	bl	80155f2 <osDelay>
#endif
		return;
 80047b4:	e048      	b.n	8004848 <W25qxx_ReadSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	441a      	add	r2, r3
 80047bc:	4b24      	ldr	r3, [pc, #144]	; (8004850 <W25qxx_ReadSector+0xe8>)
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d905      	bls.n	80047d0 <W25qxx_ReadSector+0x68>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 80047c4:	4b22      	ldr	r3, [pc, #136]	; (8004850 <W25qxx_ReadSector+0xe8>)
 80047c6:	691a      	ldr	r2, [r3, #16]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	61bb      	str	r3, [r7, #24]
 80047ce:	e001      	b.n	80047d4 <W25qxx_ReadSector+0x6c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80047d4:	68b8      	ldr	r0, [r7, #8]
 80047d6:	f7ff fdab 	bl	8004330 <W25qxx_SectorToPage>
 80047da:	4602      	mov	r2, r0
 80047dc:	4b1c      	ldr	r3, [pc, #112]	; (8004850 <W25qxx_ReadSector+0xe8>)
 80047de:	895b      	ldrh	r3, [r3, #10]
 80047e0:	4619      	mov	r1, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80047e8:	4413      	add	r3, r2
 80047ea:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80047ec:	4b18      	ldr	r3, [pc, #96]	; (8004850 <W25qxx_ReadSector+0xe8>)
 80047ee:	895b      	ldrh	r3, [r3, #10]
 80047f0:	461a      	mov	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80047f8:	fb02 f201 	mul.w	r2, r2, r1
 80047fc:	1a9b      	subs	r3, r3, r2
 80047fe:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	69f9      	ldr	r1, [r7, #28]
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f7ff feec 	bl	80045e4 <W25qxx_ReadPage>
		StartPage++;
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	3301      	adds	r3, #1
 8004810:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8004812:	4b0f      	ldr	r3, [pc, #60]	; (8004850 <W25qxx_ReadSector+0xe8>)
 8004814:	895b      	ldrh	r3, [r3, #10]
 8004816:	461a      	mov	r2, r3
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	1a9a      	subs	r2, r3, r2
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	4413      	add	r3, r2
 8004820:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8004822:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <W25qxx_ReadSector+0xe8>)
 8004824:	895b      	ldrh	r3, [r3, #10]
 8004826:	461a      	mov	r2, r3
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	4413      	add	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8004832:	2300      	movs	r3, #0
 8004834:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	2b00      	cmp	r3, #0
 800483a:	dce1      	bgt.n	8004800 <W25qxx_ReadSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
 800483c:	4807      	ldr	r0, [pc, #28]	; (800485c <W25qxx_ReadSector+0xf4>)
 800483e:	f016 ff4f 	bl	801b6e0 <puts>
	W25qxx_Delay(100);
 8004842:	2064      	movs	r0, #100	; 0x64
 8004844:	f010 fed5 	bl	80155f2 <osDelay>
#endif
}
 8004848:	3720      	adds	r7, #32
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	20006db4 	.word	0x20006db4
 8004854:	0802039c 	.word	0x0802039c
 8004858:	080203dc 	.word	0x080203dc
 800485c:	080203fc 	.word	0x080203fc

08004860 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	b2d2      	uxtb	r2, r2
 8004874:	4611      	mov	r1, r2
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	4798      	blx	r3
 800487a:	4603      	mov	r3, r0
 800487c:	4618      	mov	r0, r3
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <_Z12ISBDCallbackv>:

bool ISBDCallback() __attribute__((weak));
void ISBDConsoleCallback(IridiumSBD *device, char c) __attribute__((weak));
void ISBDDiagsCallback(IridiumSBD *device, char c) __attribute__((weak));

bool ISBDCallback() { return true; }
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
 8004888:	2301      	movs	r3, #1
 800488a:	4618      	mov	r0, r3
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <_Z19ISBDConsoleCallbackP10IridiumSBDc>:
void ISBDConsoleCallback(IridiumSBD *device, char c) { }
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	460b      	mov	r3, r1
 800489e:	70fb      	strb	r3, [r7, #3]
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <_Z17ISBDDiagsCallbackP10IridiumSBDc>:
void ISBDDiagsCallback(IridiumSBD *device, char c) { }
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	460b      	mov	r3, r1
 80048b6:	70fb      	strb	r3, [r7, #3]
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <_ZN10IridiumSBD5beginEv>:



// Power on the RockBLOCK or return from sleep
int IridiumSBD::begin()
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <_ZN10IridiumSBD5beginEv+0x16>
      return ISBD_REENTRANT;
 80048d6:	2309      	movs	r3, #9
 80048d8:	e01b      	b.n	8004912 <_ZN10IridiumSBD5beginEv+0x4e>

   this->reentrant = true;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   int ret = internalBegin();
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f9e6 	bl	8004cb4 <_ZN10IridiumSBD13internalBeginEv>
 80048e8:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

   // Absent a successful startup, keep the device turned off
   if (ret != ISBD_SUCCESS)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00b      	beq.n	8004910 <_ZN10IridiumSBD5beginEv+0x4c>
   {
      if (this->useSerial)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <_ZN10IridiumSBD5beginEv+0x44>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 fd1c 	bl	8005340 <_ZN10IridiumSBD13endSerialPortEv>
      power(false);
 8004908:	2100      	movs	r1, #0
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 fc66 	bl	80051dc <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 8004910:	68fb      	ldr	r3, [r7, #12]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <_ZN10IridiumSBD5sleepEv>:
   return ret;
}

// Gracefully put device to lower power mode (if sleep pin provided)
int IridiumSBD::sleep()
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b084      	sub	sp, #16
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <_ZN10IridiumSBD5sleepEv+0x16>
      return ISBD_REENTRANT;
 800492c:	2309      	movs	r3, #9
 800492e:	e028      	b.n	8004982 <_ZN10IridiumSBD5sleepEv+0x68>

   if (this->useSerial && (this->sleepPin == -1))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004936:	2b00      	cmp	r3, #0
 8004938:	d007      	beq.n	800494a <_ZN10IridiumSBD5sleepEv+0x30>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004944:	d101      	bne.n	800494a <_ZN10IridiumSBD5sleepEv+0x30>
      return ISBD_NO_SLEEP_PIN;
 8004946:	230b      	movs	r3, #11
 8004948:	e01b      	b.n	8004982 <_ZN10IridiumSBD5sleepEv+0x68>

   this->reentrant = true;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   int ret = internalSleep();
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fb38 	bl	8004fc8 <_ZN10IridiumSBD13internalSleepEv>
 8004958:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

   if (ret == ISBD_SUCCESS)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10b      	bne.n	8004980 <_ZN10IridiumSBD5sleepEv+0x66>
   {
      if (this->useSerial)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <_ZN10IridiumSBD5sleepEv+0x5e>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fce4 	bl	8005340 <_ZN10IridiumSBD13endSerialPortEv>
      power(false); // power off
 8004978:	2100      	movs	r1, #0
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fc2e 	bl	80051dc <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 8004980:	68fb      	ldr	r3, [r7, #12]
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <_ZN10IridiumSBD16enableRingAlertsEb>:
{
   this->msstmWorkaroundRequested = useWorkAround;
}

void IridiumSBD::enableRingAlerts(bool enable) // true to enable SBDRING alerts and RING signal pin
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b082      	sub	sp, #8
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	460b      	mov	r3, r1
 8004994:	70fb      	strb	r3, [r7, #3]
   this->ringAlertsEnabled = enable;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	78fa      	ldrb	r2, [r7, #3]
 800499a:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
   if (enable)
 800499e:	78fb      	ldrb	r3, [r7, #3]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00e      	beq.n	80049c2 <_ZN10IridiumSBD16enableRingAlertsEb+0x38>
   {
      this->ringAsserted = false;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
      if (!this->useSerial) // If we are using I2C, clear the ring indicator flag
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049b2:	f083 0301 	eor.w	r3, r3, #1
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <_ZN10IridiumSBD16enableRingAlertsEb+0x38>
      {
        clearRingIndicator();
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f923 	bl	8004c08 <_ZN10IridiumSBD18clearRingIndicatorEv>
      }
   }
}
 80049c2:	bf00      	nop
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
	...

080049cc <_ZN10IridiumSBD18getFirmwareVersionEPcj>:
   memcpy(&tm, localtime(&now), sizeof tm);
   return ISBD_SUCCESS;
}

int IridiumSBD::getFirmwareVersion(char *version, size_t bufferSize)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
   if (bufferSize < 8)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b07      	cmp	r3, #7
 80049dc:	d801      	bhi.n	80049e2 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x16>
      return ISBD_RX_OVERFLOW;
 80049de:	2308      	movs	r3, #8
 80049e0:	e01e      	b.n	8004a20 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   send(F("AT+CGMR\r"));
 80049e2:	2301      	movs	r3, #1
 80049e4:	2201      	movs	r2, #1
 80049e6:	4910      	ldr	r1, [pc, #64]	; (8004a28 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x5c>)
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f000 fcb7 	bl	800535c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(version, bufferSize, "Call Processor Version: "))
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	4b0e      	ldr	r3, [pc, #56]	; (8004a2c <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x60>)
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	4b0e      	ldr	r3, [pc, #56]	; (8004a30 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x64>)
 80049f6:	68b9      	ldr	r1, [r7, #8]
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 faf7 	bl	8004fec <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80049fe:	4603      	mov	r3, r0
 8004a00:	f083 0301 	eor.w	r3, r3, #1
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d009      	beq.n	8004a1e <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x52>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 fbb4 	bl	8005178 <_ZN10IridiumSBD9cancelledEv>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x4e>
 8004a16:	2304      	movs	r3, #4
 8004a18:	e002      	b.n	8004a20 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e000      	b.n	8004a20 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   return ISBD_SUCCESS;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	080204d8 	.word	0x080204d8
 8004a2c:	080204d0 	.word	0x080204d0
 8004a30:	080204e4 	.word	0x080204e4

08004a34 <_ZN10IridiumSBD21enableSuperCapChargerEb>:

void IridiumSBD::enableSuperCapCharger(bool enable)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the charger manually)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d004      	beq.n	8004a54 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x20>
  {
    diagprint(F("enableSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004a4a:	4918      	ldr	r1, [pc, #96]	; (8004aac <_ZN10IridiumSBD21enableSuperCapChargerEb+0x78>)
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 fd2d 	bl	80054ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8004a52:	e028      	b.n	8004aa6 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x72>
  }

  // Enable/disable the supercapacitor charger by pulling its SHDN pin high/low
  check9603pins(); // Update IO_REGISTER
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f001 f80b 	bl	8005a70 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8004a5a:	78fb      	ldrb	r3, [r7, #3]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00b      	beq.n	8004a78 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x44>
  {
    IO_REGISTER |= IO_SHDN; // Set the SHDN bit
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004a76:	e00f      	b.n	8004a98 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_SHDN; // Clear the SHDN bit
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004a7e:	b25a      	sxtb	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8004a86:	b25b      	sxtb	r3, r3
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	b25b      	sxtb	r3, r3
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	b25b      	sxtb	r3, r3
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f001 f820 	bl	8005ae6 <_ZN10IridiumSBD11set9603pinsEh>
}
 8004aa6:	3708      	adds	r7, #8
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	08020500 	.word	0x08020500

08004ab0 <_ZN10IridiumSBD20checkSuperCapChargerEv>:

bool IridiumSBD::checkSuperCapCharger()
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial (the user will have to check PGOOD manually)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d005      	beq.n	8004ace <_ZN10IridiumSBD20checkSuperCapChargerEv+0x1e>
  {
    diagprint(F("checkSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004ac2:	4912      	ldr	r1, [pc, #72]	; (8004b0c <_ZN10IridiumSBD20checkSuperCapChargerEv+0x5c>)
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 fcf1 	bl	80054ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return(false);
 8004aca:	2300      	movs	r3, #0
 8004acc:	e01a      	b.n	8004b04 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x54>
  }

  // Check the status of the supercapacitor charger PGOOD pin
  check9603pins(); // Update IO_REGISTER
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 ffce 	bl	8005a70 <_ZN10IridiumSBD13check9603pinsEv>
  if (IO_REGISTER &= IO_PGOOD) // If the PGOOD bit is set, return true
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	b2da      	uxtb	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	bf14      	ite	ne
 8004af4:	2301      	movne	r3, #1
 8004af6:	2300      	moveq	r3, #0
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x52>
  {
    return(true);
 8004afe:	2301      	movs	r3, #1
 8004b00:	e000      	b.n	8004b04 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x54>
  }
  else
  {
    return(false);
 8004b02:	2300      	movs	r3, #0
  }
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3708      	adds	r7, #8
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	0802054c 	.word	0x0802054c

08004b10 <_ZN10IridiumSBD16enable9603NpowerEb>:

void IridiumSBD::enable9603Npower(bool enable)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N power manually)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d004      	beq.n	8004b30 <_ZN10IridiumSBD16enable9603NpowerEb+0x20>
  {
    diagprint(F("enable9603Npower is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004b26:	4918      	ldr	r1, [pc, #96]	; (8004b88 <_ZN10IridiumSBD16enable9603NpowerEb+0x78>)
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 fcbf 	bl	80054ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8004b2e:	e028      	b.n	8004b82 <_ZN10IridiumSBD16enable9603NpowerEb+0x72>
  }

  // Enable/disable power to the 9603N by pulling PWR_EN high/low
  check9603pins(); // Update IO_REGISTER
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 ff9d 	bl	8005a70 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8004b36:	78fb      	ldrb	r3, [r7, #3]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00b      	beq.n	8004b54 <_ZN10IridiumSBD16enable9603NpowerEb+0x44>
  {
    IO_REGISTER |= IO_PWR_EN; // Set the PWR_EN bit
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004b52:	e00f      	b.n	8004b74 <_ZN10IridiumSBD16enable9603NpowerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_PWR_EN; // Clear the PWR_EN bit
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004b5a:	b25a      	sxtb	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8004b62:	b25b      	sxtb	r3, r3
 8004b64:	43db      	mvns	r3, r3
 8004b66:	b25b      	sxtb	r3, r3
 8004b68:	4013      	ands	r3, r2
 8004b6a:	b25b      	sxtb	r3, r3
 8004b6c:	b2da      	uxtb	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 ffb2 	bl	8005ae6 <_ZN10IridiumSBD11set9603pinsEh>
}
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	08020598 	.word	0x08020598

08004b8c <_ZN10IridiumSBD10enable9603Eb>:

void IridiumSBD::enable9603(bool enable)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	460b      	mov	r3, r1
 8004b96:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N manually)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d004      	beq.n	8004bac <_ZN10IridiumSBD10enable9603Eb+0x20>
  {
    diagprint(F("enable9603 is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004ba2:	4918      	ldr	r1, [pc, #96]	; (8004c04 <_ZN10IridiumSBD10enable9603Eb+0x78>)
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 fc81 	bl	80054ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8004baa:	e028      	b.n	8004bfe <_ZN10IridiumSBD10enable9603Eb+0x72>
  }

  // Enable/disable the 9603 by pulling ON_OFF high/low
  check9603pins(); // Update IO_REGISTER
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 ff5f 	bl	8005a70 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8004bb2:	78fb      	ldrb	r3, [r7, #3]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00b      	beq.n	8004bd0 <_ZN10IridiumSBD10enable9603Eb+0x44>
  {
    IO_REGISTER |= IO_ON_OFF; // Set the ON_OFF bit
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	b2da      	uxtb	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004bce:	e00f      	b.n	8004bf0 <_ZN10IridiumSBD10enable9603Eb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_ON_OFF; // Clear the ON_OFF bit
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004bd6:	b25a      	sxtb	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8004bde:	b25b      	sxtb	r3, r3
 8004be0:	43db      	mvns	r3, r3
 8004be2:	b25b      	sxtb	r3, r3
 8004be4:	4013      	ands	r3, r2
 8004be6:	b25b      	sxtb	r3, r3
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 ff74 	bl	8005ae6 <_ZN10IridiumSBD11set9603pinsEh>
}
 8004bfe:	3708      	adds	r7, #8
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	080205e0 	.word	0x080205e0

08004c08 <_ZN10IridiumSBD18clearRingIndicatorEv>:
    return(false);
  }
}

void IridiumSBD::clearRingIndicator()
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d004      	beq.n	8004c24 <_ZN10IridiumSBD18clearRingIndicatorEv+0x1c>
  {
    diagprint(F("clearRingIndicator is only valid when using I2C on the Qwiic Iridium\r\n"));
 8004c1a:	4913      	ldr	r1, [pc, #76]	; (8004c68 <_ZN10IridiumSBD18clearRingIndicatorEv+0x60>)
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 fc45 	bl	80054ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8004c22:	e01d      	b.n	8004c60 <_ZN10IridiumSBD18clearRingIndicatorEv+0x58>
  }

  // Clear the 9603 RI flag
  check9603pins(); // Update IO_REGISTER
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 ff23 	bl	8005a70 <_ZN10IridiumSBD13check9603pinsEv>
  IO_REGISTER &= ~IO_RI; // Clear the RI bit
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004c30:	b25a      	sxtb	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8004c38:	b25b      	sxtb	r3, r3
 8004c3a:	43db      	mvns	r3, r3
 8004c3c:	b25b      	sxtb	r3, r3
 8004c3e:	4013      	ands	r3, r2
 8004c40:	b25b      	sxtb	r3, r3
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  set9603pins(IO_REGISTER); // Update the pins
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004c50:	4619      	mov	r1, r3
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 ff47 	bl	8005ae6 <_ZN10IridiumSBD11set9603pinsEh>
  this->ringAsserted = false; // Also clear the ringAsserted flag
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
}
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	080206b0 	.word	0x080206b0

08004c6c <_ZN10IridiumSBD11isConnectedEv>:

//Returns true if the I2C device is connected
//Always returns true for serial
//boolean IridiumSBD::isConnected() TODO
bool IridiumSBD::isConnected()
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
   if (this->useSerial) // If we are using Serial
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <_ZN10IridiumSBD11isConnectedEv+0x16>
   {
		return true;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e013      	b.n	8004caa <_ZN10IridiumSBD11isConnectedEv+0x3e>
   }
   else
   {
		wireport->beginTransmission((uint8_t)deviceaddress);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4610      	mov	r0, r2
 8004c90:	f001 fbee 	bl	8006470 <_ZN7TwoWire17beginTransmissionEh>
		return (wireport->endTransmission() == 0); // Check that the device ack's
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f001 fc33 	bl	8006504 <_ZN7TwoWire15endTransmissionEv>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	bf0c      	ite	eq
 8004ca4:	2301      	moveq	r3, #1
 8004ca6:	2300      	movne	r3, #0
 8004ca8:	b2db      	uxtb	r3, r3
   }
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
	...

08004cb4 <_ZN10IridiumSBD13internalBeginEv>:
/*
Private interface
*/

int IridiumSBD::internalBegin()
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b090      	sub	sp, #64	; 0x40
 8004cb8:	af02      	add	r7, sp, #8
 8004cba:	6078      	str	r0, [r7, #4]
   diagprint(F("Calling internalBegin\r\n"));
 8004cbc:	49b1      	ldr	r1, [pc, #708]	; (8004f84 <_ZN10IridiumSBD13internalBeginEv+0x2d0>)
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 fbf4 	bl	80054ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (!this->asleep)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8004cca:	f083 0301 	eor.w	r3, r3, #1
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d001      	beq.n	8004cd8 <_ZN10IridiumSBD13internalBeginEv+0x24>
      return ISBD_ALREADY_AWAKE;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e150      	b.n	8004f7a <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   if (!this->useSerial) // If we are using I2C
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cde:	f083 0301 	eor.w	r3, r3, #1
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d005      	beq.n	8004cf4 <_ZN10IridiumSBD13internalBeginEv+0x40>
   {
      check9603pins(); // Update IO_REGISTER with the status of the 9603 pins
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 fec1 	bl	8005a70 <_ZN10IridiumSBD13check9603pinsEv>
      check9603data(); // Get any waiting 9603 serial data
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fde6 	bl	80058c0 <_ZN10IridiumSBD13check9603dataEv>
   }

   power(true); // power on
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 fa70 	bl	80051dc <_ZN10IridiumSBD5powerEb>

   bool modemAlive = false;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

   unsigned long startupTime = 500; //ms
 8004d02:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004d06:	62fb      	str	r3, [r7, #44]	; 0x2c
   for (unsigned long start = millis(); millis() - start < startupTime;)
 8004d08:	f003 fb4e 	bl	80083a8 <HAL_GetTick>
 8004d0c:	62b8      	str	r0, [r7, #40]	; 0x28
 8004d0e:	f003 fb4b 	bl	80083a8 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	bf8c      	ite	hi
 8004d1e:	2301      	movhi	r3, #1
 8004d20:	2300      	movls	r3, #0
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d007      	beq.n	8004d38 <_ZN10IridiumSBD13internalBeginEv+0x84>
      if (cancelled())
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 fa25 	bl	8005178 <_ZN10IridiumSBD9cancelledEv>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0ec      	beq.n	8004d0e <_ZN10IridiumSBD13internalBeginEv+0x5a>
         return ISBD_CANCELLED;
 8004d34:	2304      	movs	r3, #4
 8004d36:	e120      	b.n	8004f7a <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   if (this->useSerial) // If we are using Serial
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <_ZN10IridiumSBD13internalBeginEv+0x94>
      beginSerialPort(); // Apollo3 v2.1 Serial fix - begin the Serial port 500ms after power(true)
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 faee 	bl	8005324 <_ZN10IridiumSBD15beginSerialPortEv>

   // Turn on modem and wait for a response from "AT" command to begin
   for (unsigned long start = millis(); !modemAlive && millis() - start < 1000UL * this->startupTimeout;)
 8004d48:	f003 fb2e 	bl	80083a8 <HAL_GetTick>
 8004d4c:	6278      	str	r0, [r7, #36]	; 0x24
 8004d4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004d52:	f083 0301 	eor.w	r3, r3, #1
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d010      	beq.n	8004d7e <_ZN10IridiumSBD13internalBeginEv+0xca>
 8004d5c:	f003 fb24 	bl	80083a8 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	1ad2      	subs	r2, r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d72:	fb03 f301 	mul.w	r3, r3, r1
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d201      	bcs.n	8004d7e <_ZN10IridiumSBD13internalBeginEv+0xca>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e000      	b.n	8004d80 <_ZN10IridiumSBD13internalBeginEv+0xcc>
 8004d7e:	2300      	movs	r3, #0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d018      	beq.n	8004db6 <_ZN10IridiumSBD13internalBeginEv+0x102>
   {
      send(F("AT\r"));
 8004d84:	2301      	movs	r3, #1
 8004d86:	2201      	movs	r2, #1
 8004d88:	497f      	ldr	r1, [pc, #508]	; (8004f88 <_ZN10IridiumSBD13internalBeginEv+0x2d4>)
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 fae6 	bl	800535c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      modemAlive = waitForATResponse();
 8004d90:	4b7e      	ldr	r3, [pc, #504]	; (8004f8c <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	2300      	movs	r3, #0
 8004d96:	2200      	movs	r2, #0
 8004d98:	2100      	movs	r1, #0
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f926 	bl	8004fec <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8004da0:	4603      	mov	r3, r0
 8004da2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (cancelled())
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f9e6 	bl	8005178 <_ZN10IridiumSBD9cancelledEv>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0cd      	beq.n	8004d4e <_ZN10IridiumSBD13internalBeginEv+0x9a>
         return ISBD_CANCELLED;
 8004db2:	2304      	movs	r3, #4
 8004db4:	e0e1      	b.n	8004f7a <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   }

   if (!modemAlive)
 8004db6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004dba:	f083 0301 	eor.w	r3, r3, #1
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d005      	beq.n	8004dd0 <_ZN10IridiumSBD13internalBeginEv+0x11c>
   {
      diagprint(F("No modem detected.\r\n"));
 8004dc4:	4972      	ldr	r1, [pc, #456]	; (8004f90 <_ZN10IridiumSBD13internalBeginEv+0x2dc>)
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fb70 	bl	80054ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      return ISBD_NO_MODEM_DETECTED;
 8004dcc:	2305      	movs	r3, #5
 8004dce:	e0d4      	b.n	8004f7a <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   }

   // The usual initialization sequence
   const char *strings[3] = { "ATE1\r", "AT&D0\r", "AT&K0\r" };
 8004dd0:	4a70      	ldr	r2, [pc, #448]	; (8004f94 <_ZN10IridiumSBD13internalBeginEv+0x2e0>)
 8004dd2:	f107 0310 	add.w	r3, r7, #16
 8004dd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8004dd8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   for (int i=0; i<3; ++i)
 8004ddc:	2300      	movs	r3, #0
 8004dde:	633b      	str	r3, [r7, #48]	; 0x30
 8004de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	dc26      	bgt.n	8004e34 <_ZN10IridiumSBD13internalBeginEv+0x180>
   {
      send(strings[i]);
 8004de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004dee:	4413      	add	r3, r2
 8004df0:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8004df4:	4619      	mov	r1, r3
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 fb0a 	bl	8005410 <_ZN10IridiumSBD4sendEPKc>
      if (!waitForATResponse())
 8004dfc:	4b63      	ldr	r3, [pc, #396]	; (8004f8c <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	2300      	movs	r3, #0
 8004e02:	2200      	movs	r2, #0
 8004e04:	2100      	movs	r1, #0
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f8f0 	bl	8004fec <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	f083 0301 	eor.w	r3, r3, #1
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d009      	beq.n	8004e2c <_ZN10IridiumSBD13internalBeginEv+0x178>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f9ad 	bl	8005178 <_ZN10IridiumSBD9cancelledEv>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d001      	beq.n	8004e28 <_ZN10IridiumSBD13internalBeginEv+0x174>
 8004e24:	2304      	movs	r3, #4
 8004e26:	e0a8      	b.n	8004f7a <_ZN10IridiumSBD13internalBeginEv+0x2c6>
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e0a6      	b.n	8004f7a <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   for (int i=0; i<3; ++i)
 8004e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2e:	3301      	adds	r3, #1
 8004e30:	633b      	str	r3, [r7, #48]	; 0x30
 8004e32:	e7d5      	b.n	8004de0 <_ZN10IridiumSBD13internalBeginEv+0x12c>
   }

   // Enable or disable RING alerts as requested by user
   // By default they are on if a RING pin was supplied on constructor
   diagprint(F("Ring alerts are")); diagprint(ringAlertsEnabled ? F("") : F(" NOT")); diagprint(F(" enabled.\r\n"));
 8004e34:	4958      	ldr	r1, [pc, #352]	; (8004f98 <_ZN10IridiumSBD13internalBeginEv+0x2e4>)
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 fb38 	bl	80054ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <_ZN10IridiumSBD13internalBeginEv+0x196>
 8004e46:	4b55      	ldr	r3, [pc, #340]	; (8004f9c <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 8004e48:	e000      	b.n	8004e4c <_ZN10IridiumSBD13internalBeginEv+0x198>
 8004e4a:	4b55      	ldr	r3, [pc, #340]	; (8004fa0 <_ZN10IridiumSBD13internalBeginEv+0x2ec>)
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fb2c 	bl	80054ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8004e54:	4953      	ldr	r1, [pc, #332]	; (8004fa4 <_ZN10IridiumSBD13internalBeginEv+0x2f0>)
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 fb28 	bl	80054ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (ringAlertsEnabled) enableRingAlerts(true); // This will clear ringAsserted and the Ring Indicator flag
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d004      	beq.n	8004e70 <_ZN10IridiumSBD13internalBeginEv+0x1bc>
 8004e66:	2101      	movs	r1, #1
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7ff fd8e 	bl	800498a <_ZN10IridiumSBD16enableRingAlertsEb>
 8004e6e:	e00a      	b.n	8004e86 <_ZN10IridiumSBD13internalBeginEv+0x1d2>
   else {
	   if (!this->useSerial) clearRingIndicator(); // If ring alerts are not enabled and using I2C, make sure the Ring Indicator flag is clear
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e76:	f083 0301 	eor.w	r3, r3, #1
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d002      	beq.n	8004e86 <_ZN10IridiumSBD13internalBeginEv+0x1d2>
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7ff fec1 	bl	8004c08 <_ZN10IridiumSBD18clearRingIndicatorEv>
   }

   send(ringAlertsEnabled ? F("AT+SBDMTA=1\r") : F("AT+SBDMTA=0\r"));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <_ZN10IridiumSBD13internalBeginEv+0x1e0>
 8004e90:	4945      	ldr	r1, [pc, #276]	; (8004fa8 <_ZN10IridiumSBD13internalBeginEv+0x2f4>)
 8004e92:	e000      	b.n	8004e96 <_ZN10IridiumSBD13internalBeginEv+0x1e2>
 8004e94:	4945      	ldr	r1, [pc, #276]	; (8004fac <_ZN10IridiumSBD13internalBeginEv+0x2f8>)
 8004e96:	2301      	movs	r3, #1
 8004e98:	2201      	movs	r2, #1
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fa5e 	bl	800535c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse())
 8004ea0:	4b3a      	ldr	r3, [pc, #232]	; (8004f8c <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f89e 	bl	8004fec <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	f083 0301 	eor.w	r3, r3, #1
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d009      	beq.n	8004ed0 <_ZN10IridiumSBD13internalBeginEv+0x21c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f95b 	bl	8005178 <_ZN10IridiumSBD9cancelledEv>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <_ZN10IridiumSBD13internalBeginEv+0x218>
 8004ec8:	2304      	movs	r3, #4
 8004eca:	e056      	b.n	8004f7a <_ZN10IridiumSBD13internalBeginEv+0x2c6>
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e054      	b.n	8004f7a <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   // Decide whether the internal MSSTM workaround should be enforced on TX/RX
   // By default it is unless the firmware rev is >= TA13001
   char version[8];
   int ret = getFirmwareVersion(version, sizeof(version));
 8004ed0:	f107 0308 	add.w	r3, r7, #8
 8004ed4:	2208      	movs	r2, #8
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7ff fd77 	bl	80049cc <_ZN10IridiumSBD18getFirmwareVersionEPcj>
 8004ede:	6238      	str	r0, [r7, #32]
   if (ret != ISBD_SUCCESS)
 8004ee0:	6a3b      	ldr	r3, [r7, #32]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d008      	beq.n	8004ef8 <_ZN10IridiumSBD13internalBeginEv+0x244>
   {
      diagprint(F("Unknown FW version\r\n"));
 8004ee6:	4932      	ldr	r1, [pc, #200]	; (8004fb0 <_ZN10IridiumSBD13internalBeginEv+0x2fc>)
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 fadf 	bl	80054ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      msstmWorkaroundRequested = true;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8004ef6:	e027      	b.n	8004f48 <_ZN10IridiumSBD13internalBeginEv+0x294>
   }
   else
   {
      diagprint(F("Firmware version is ")); diagprint(version); diagprint(F("\r\n"));
 8004ef8:	492e      	ldr	r1, [pc, #184]	; (8004fb4 <_ZN10IridiumSBD13internalBeginEv+0x300>)
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 fad6 	bl	80054ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8004f00:	f107 0308 	add.w	r3, r7, #8
 8004f04:	4619      	mov	r1, r3
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 faf6 	bl	80054f8 <_ZN10IridiumSBD9diagprintEPKc>
 8004f0c:	492a      	ldr	r1, [pc, #168]	; (8004fb8 <_ZN10IridiumSBD13internalBeginEv+0x304>)
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 facc 	bl	80054ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (version[0] == 'T' && version[1] == 'A')
 8004f14:	7a3b      	ldrb	r3, [r7, #8]
 8004f16:	2b54      	cmp	r3, #84	; 0x54
 8004f18:	d116      	bne.n	8004f48 <_ZN10IridiumSBD13internalBeginEv+0x294>
 8004f1a:	7a7b      	ldrb	r3, [r7, #9]
 8004f1c:	2b41      	cmp	r3, #65	; 0x41
 8004f1e:	d113      	bne.n	8004f48 <_ZN10IridiumSBD13internalBeginEv+0x294>
      {
         unsigned long ver = strtoul(version + 2, NULL, 10);
 8004f20:	f107 0308 	add.w	r3, r7, #8
 8004f24:	3302      	adds	r3, #2
 8004f26:	220a      	movs	r2, #10
 8004f28:	2100      	movs	r1, #0
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f017 fc8a 	bl	801c844 <strtoul>
 8004f30:	61f8      	str	r0, [r7, #28]
         msstmWorkaroundRequested = ver < ISBD_MSSTM_WORKAROUND_FW_VER;
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	bf94      	ite	ls
 8004f3c:	2301      	movls	r3, #1
 8004f3e:	2300      	movhi	r3, #0
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
      }
   }
   diagprint(F("MSSTM workaround is")); diagprint(msstmWorkaroundRequested ? F("") : F(" NOT")); diagprint(F(" enforced.\r\n"));
 8004f48:	491c      	ldr	r1, [pc, #112]	; (8004fbc <_ZN10IridiumSBD13internalBeginEv+0x308>)
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 faae 	bl	80054ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <_ZN10IridiumSBD13internalBeginEv+0x2aa>
 8004f5a:	4b10      	ldr	r3, [pc, #64]	; (8004f9c <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 8004f5c:	e000      	b.n	8004f60 <_ZN10IridiumSBD13internalBeginEv+0x2ac>
 8004f5e:	4b10      	ldr	r3, [pc, #64]	; (8004fa0 <_ZN10IridiumSBD13internalBeginEv+0x2ec>)
 8004f60:	4619      	mov	r1, r3
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 faa2 	bl	80054ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8004f68:	4915      	ldr	r1, [pc, #84]	; (8004fc0 <_ZN10IridiumSBD13internalBeginEv+0x30c>)
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 fa9e 	bl	80054ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   // Done!
   diagprint(F("InternalBegin: success!\r\n"));
 8004f70:	4914      	ldr	r1, [pc, #80]	; (8004fc4 <_ZN10IridiumSBD13internalBeginEv+0x310>)
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 fa9a 	bl	80054ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   return ISBD_SUCCESS;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3738      	adds	r7, #56	; 0x38
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	080207d0 	.word	0x080207d0
 8004f88:	080207e8 	.word	0x080207e8
 8004f8c:	080204d0 	.word	0x080204d0
 8004f90:	080207ec 	.word	0x080207ec
 8004f94:	080208c0 	.word	0x080208c0
 8004f98:	08020804 	.word	0x08020804
 8004f9c:	08020814 	.word	0x08020814
 8004fa0:	08020818 	.word	0x08020818
 8004fa4:	08020820 	.word	0x08020820
 8004fa8:	0802082c 	.word	0x0802082c
 8004fac:	0802083c 	.word	0x0802083c
 8004fb0:	0802084c 	.word	0x0802084c
 8004fb4:	08020864 	.word	0x08020864
 8004fb8:	0802087c 	.word	0x0802087c
 8004fbc:	08020880 	.word	0x08020880
 8004fc0:	08020894 	.word	0x08020894
 8004fc4:	080208a4 	.word	0x080208a4

08004fc8 <_ZN10IridiumSBD13internalSleepEv>:
   okToProceed = isxdigit(msstmResponseBuf[0]);
   return ISBD_SUCCESS;
}

int IridiumSBD::internalSleep()
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
   if (this->asleep)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <_ZN10IridiumSBD13internalSleepEv+0x16>
      return ISBD_IS_ASLEEP;
 8004fda:	230a      	movs	r3, #10
 8004fdc:	e000      	b.n	8004fe0 <_ZN10IridiumSBD13internalSleepEv+0x18>

   if (!waitForATResponse())
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
#endif

   return ISBD_SUCCESS;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>:

// Wait for response from previous AT command.  This process terminates when "terminator" string is seen or upon timeout.
// If "prompt" string is provided (example "+CSQ:"), then all characters following prompt up to the next CRLF are
// stored in response buffer for later parsing by caller.
bool IridiumSBD::waitForATResponse(char *response, int responseSize, const char *prompt, const char *terminator)
{
 8004fec:	b590      	push	{r4, r7, lr}
 8004fee:	b08b      	sub	sp, #44	; 0x2c
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
 8004ff8:	603b      	str	r3, [r7, #0]
   diagprint(F("Waiting for response "));
 8004ffa:	495d      	ldr	r1, [pc, #372]	; (8005170 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x184>)
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 fa55 	bl	80054ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   diagprint(terminator);
 8005002:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 fa77 	bl	80054f8 <_ZN10IridiumSBD9diagprintEPKc>
   HAL_UART_Transmit(&(this->uart),(uint8_t*) terminator, strlen(terminator), HAL_MAX_DELAY); //TODO doesn't print otherwise
 800500a:	68fc      	ldr	r4, [r7, #12]
 800500c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800500e:	f7fb f8ef 	bl	80001f0 <strlen>
 8005012:	4603      	mov	r3, r0
 8005014:	b29a      	uxth	r2, r3
 8005016:	f04f 33ff 	mov.w	r3, #4294967295
 800501a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800501c:	4620      	mov	r0, r4
 800501e:	f009 fa08 	bl	800e432 <HAL_UART_Transmit>
   diagprint(F("\r\n"));
 8005022:	4954      	ldr	r1, [pc, #336]	; (8005174 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x188>)
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f000 fa41 	bl	80054ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (response)
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d005      	beq.n	800503c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x50>
      memset(response, 0, responseSize);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	461a      	mov	r2, r3
 8005034:	2100      	movs	r1, #0
 8005036:	68b8      	ldr	r0, [r7, #8]
 8005038:	f015 fba0 	bl	801a77c <memset>

   int matchPromptPos = 0; // Matches chars in prompt
 800503c:	2300      	movs	r3, #0
 800503e:	627b      	str	r3, [r7, #36]	; 0x24
   int matchTerminatorPos = 0; // Matches chars in terminator
 8005040:	2300      	movs	r3, #0
 8005042:	623b      	str	r3, [r7, #32]
   enum {LOOKING_FOR_PROMPT, GATHERING_RESPONSE, LOOKING_FOR_TERMINATOR};
   int promptState = prompt ? LOOKING_FOR_PROMPT : LOOKING_FOR_TERMINATOR;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x62>
 800504a:	2300      	movs	r3, #0
 800504c:	e000      	b.n	8005050 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x64>
 800504e:	2302      	movs	r3, #2
 8005050:	61fb      	str	r3, [r7, #28]
   //consoleprint(F("<< ")); //TODO If we comment out this it looks cleaner in the serial
   for (unsigned long start=millis(); millis() - start < 1000UL * atTimeout;)
 8005052:	f003 f9a9 	bl	80083a8 <HAL_GetTick>
 8005056:	61b8      	str	r0, [r7, #24]
 8005058:	f003 f9a6 	bl	80083a8 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	1ad2      	subs	r2, r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005068:	4619      	mov	r1, r3
 800506a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800506e:	fb03 f301 	mul.w	r3, r3, r1
 8005072:	429a      	cmp	r2, r3
 8005074:	bf34      	ite	cc
 8005076:	2301      	movcc	r3, #1
 8005078:	2300      	movcs	r3, #0
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	d072      	beq.n	8005166 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x17a>
   {
      if (cancelled())
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 f879 	bl	8005178 <_ZN10IridiumSBD9cancelledEv>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xa4>
         return false;
 800508c:	2300      	movs	r3, #0
 800508e:	e06b      	b.n	8005168 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x17c>

      while (filteredavailable() > 0)
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 fbb3 	bl	80057fc <_ZN10IridiumSBD17filteredavailableEv>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	bfcc      	ite	gt
 800509c:	2301      	movgt	r3, #1
 800509e:	2300      	movle	r3, #0
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0d8      	beq.n	8005058 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x6c>
      {
         char c = filteredread();
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 fbc4 	bl	8005834 <_ZN10IridiumSBD12filteredreadEv>
 80050ac:	4603      	mov	r3, r0
 80050ae:	75fb      	strb	r3, [r7, #23]
         if (prompt)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d03b      	beq.n	800512e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x142>
         {
            switch (promptState)
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d003      	beq.n	80050c4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xd8>
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d01d      	beq.n	80050fe <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x112>
 80050c2:	e034      	b.n	800512e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x142>
            {
            case LOOKING_FOR_PROMPT:
               if (c == prompt[matchPromptPos])
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	4413      	add	r3, r2
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	7dfa      	ldrb	r2, [r7, #23]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d10b      	bne.n	80050ea <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xfe>
               {
                  ++matchPromptPos;
 80050d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d4:	3301      	adds	r3, #1
 80050d6:	627b      	str	r3, [r7, #36]	; 0x24
                  if (prompt[matchPromptPos] == '\0')
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	4413      	add	r3, r2
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d121      	bne.n	8005128 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x13c>
                     promptState = GATHERING_RESPONSE;
 80050e4:	2301      	movs	r3, #1
 80050e6:	61fb      	str	r3, [r7, #28]
               else
               {
                  matchPromptPos = c == prompt[0] ? 1 : 0;
               }

               break;
 80050e8:	e01e      	b.n	8005128 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x13c>
                  matchPromptPos = c == prompt[0] ? 1 : 0;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	7dfa      	ldrb	r2, [r7, #23]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d101      	bne.n	80050f8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x10c>
 80050f4:	2301      	movs	r3, #1
 80050f6:	e000      	b.n	80050fa <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x10e>
 80050f8:	2300      	movs	r3, #0
 80050fa:	627b      	str	r3, [r7, #36]	; 0x24
               break;
 80050fc:	e014      	b.n	8005128 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x13c>
            case GATHERING_RESPONSE: // gathering response from end of prompt to first \r
               if (response)
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d013      	beq.n	800512c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x140>
               {
                  if (c == '\r' || responseSize < 2)
 8005104:	7dfb      	ldrb	r3, [r7, #23]
 8005106:	2b0d      	cmp	r3, #13
 8005108:	d002      	beq.n	8005110 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x124>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2b01      	cmp	r3, #1
 800510e:	dc02      	bgt.n	8005116 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
                  {
                     promptState = LOOKING_FOR_TERMINATOR;
 8005110:	2302      	movs	r3, #2
 8005112:	61fb      	str	r3, [r7, #28]
                  {
                     *response++ = c;
                     responseSize--;
                  }
               }
               break;
 8005114:	e00a      	b.n	800512c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x140>
                     *response++ = c;
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	1c5a      	adds	r2, r3, #1
 800511a:	60ba      	str	r2, [r7, #8]
 800511c:	7dfa      	ldrb	r2, [r7, #23]
 800511e:	701a      	strb	r2, [r3, #0]
                     responseSize--;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	3b01      	subs	r3, #1
 8005124:	607b      	str	r3, [r7, #4]
               break;
 8005126:	e001      	b.n	800512c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x140>
               break;
 8005128:	bf00      	nop
 800512a:	e000      	b.n	800512e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x142>
               break;
 800512c:	bf00      	nop
            }
         }

         if (c == terminator[matchTerminatorPos])
 800512e:	6a3b      	ldr	r3, [r7, #32]
 8005130:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005132:	4413      	add	r3, r2
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	7dfa      	ldrb	r2, [r7, #23]
 8005138:	429a      	cmp	r2, r3
 800513a:	d10a      	bne.n	8005152 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x166>
         {
            ++matchTerminatorPos;
 800513c:	6a3b      	ldr	r3, [r7, #32]
 800513e:	3301      	adds	r3, #1
 8005140:	623b      	str	r3, [r7, #32]
            if (terminator[matchTerminatorPos] == '\0')
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005146:	4413      	add	r3, r2
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1a0      	bne.n	8005090 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xa4>
               return true;
 800514e:	2301      	movs	r3, #1
 8005150:	e00a      	b.n	8005168 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x17c>
         }
         else
         {
            matchTerminatorPos = c == terminator[0] ? 1 : 0;
 8005152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	7dfa      	ldrb	r2, [r7, #23]
 8005158:	429a      	cmp	r2, r3
 800515a:	d101      	bne.n	8005160 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x174>
 800515c:	2301      	movs	r3, #1
 800515e:	e000      	b.n	8005162 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x176>
 8005160:	2300      	movs	r3, #0
 8005162:	623b      	str	r3, [r7, #32]
      while (filteredavailable() > 0)
 8005164:	e794      	b.n	8005090 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xa4>
         }
      } // while (filteredavailable() > 0)
   } // timer loop
   return false;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	372c      	adds	r7, #44	; 0x2c
 800516c:	46bd      	mov	sp, r7
 800516e:	bd90      	pop	{r4, r7, pc}
 8005170:	08020a04 	.word	0x08020a04
 8005174:	0802087c 	.word	0x0802087c

08005178 <_ZN10IridiumSBD9cancelledEv>:

bool IridiumSBD::cancelled()
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
   if (this->useSerial)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005186:	2b00      	cmp	r3, #0
 8005188:	d019      	beq.n	80051be <_ZN10IridiumSBD9cancelledEv+0x46>
   {
	   //TODO For some reason when using digitalRead here it didn't work so simply replaced with HAL function
	   //if ((ringPin != -1) && digitalRead(ringPin) == LOW)
	     if ((ringPin != -1) && HAL_GPIO_ReadPin(ringPin_GPIO_Port,ringPin_Pin) == LOW)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005194:	d008      	beq.n	80051a8 <_ZN10IridiumSBD9cancelledEv+0x30>
 8005196:	2110      	movs	r1, #16
 8005198:	480e      	ldr	r0, [pc, #56]	; (80051d4 <_ZN10IridiumSBD9cancelledEv+0x5c>)
 800519a:	f003 fe67 	bl	8008e6c <HAL_GPIO_ReadPin>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <_ZN10IridiumSBD9cancelledEv+0x30>
 80051a4:	2301      	movs	r3, #1
 80051a6:	e000      	b.n	80051aa <_ZN10IridiumSBD9cancelledEv+0x32>
 80051a8:	2300      	movs	r3, #0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d007      	beq.n	80051be <_ZN10IridiumSBD9cancelledEv+0x46>
	  {
         ringAsserted = true;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
		 diagprint(F("ringPin seen!\r\n"));
 80051b6:	4908      	ldr	r1, [pc, #32]	; (80051d8 <_ZN10IridiumSBD9cancelledEv+0x60>)
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 f977 	bl	80054ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
	  }
   }

   return !ISBDCallback();
 80051be:	f7ff fb61 	bl	8004884 <_Z12ISBDCallbackv>
 80051c2:	4603      	mov	r3, r0
 80051c4:	f083 0301 	eor.w	r3, r3, #1
 80051c8:	b2db      	uxtb	r3, r3
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	40020800 	.word	0x40020800
 80051d8:	08020a1c 	.word	0x08020a1c

080051dc <_ZN10IridiumSBD5powerEb>:

   return rxOverflow ? ISBD_RX_OVERFLOW : ISBD_SUCCESS;
}

void IridiumSBD::power(bool on)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	460b      	mov	r3, r1
 80051e6:	70fb      	strb	r3, [r7, #3]
   this->asleep = !on;
 80051e8:	78fb      	ldrb	r3, [r7, #3]
 80051ea:	f083 0301 	eor.w	r3, r3, #1
 80051ee:	b2da      	uxtb	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

   if (this->useSerial)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d011      	beq.n	8005224 <_ZN10IridiumSBD5powerEb+0x48>
   {
      if (this->sleepPin == -1)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520a:	d04c      	beq.n	80052a6 <_ZN10IridiumSBD5powerEb+0xca>
      {
         return;
      }
      else
      {
          if (this->sleepPinConfigured == false)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d106      	bne.n	8005224 <_ZN10IridiumSBD5powerEb+0x48>
          {
             configureSleepPin();
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f84e 	bl	80052b8 <_ZN10IridiumSBD17configureSleepPinEv>
             this->sleepPinConfigured = true;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
          }
      }
   }

   if (on)
 8005224:	78fb      	ldrb	r3, [r7, #3]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d018      	beq.n	800525c <_ZN10IridiumSBD5powerEb+0x80>
   {
      diagprint(F("Powering on modem...\r\n"));
 800522a:	4921      	ldr	r1, [pc, #132]	; (80052b0 <_ZN10IridiumSBD5powerEb+0xd4>)
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f93d 	bl	80054ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005238:	2b00      	cmp	r3, #0
 800523a:	d004      	beq.n	8005246 <_ZN10IridiumSBD5powerEb+0x6a>
      {
         setSleepPin(HIGH); // HIGH = awake
 800523c:	2101      	movs	r1, #1
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f848 	bl	80052d4 <_ZN10IridiumSBD11setSleepPinEh>
 8005244:	e003      	b.n	800524e <_ZN10IridiumSBD5powerEb+0x72>
      }
      else
      {
         enable9603(true);
 8005246:	2101      	movs	r1, #1
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f7ff fc9f 	bl	8004b8c <_ZN10IridiumSBD10enable9603Eb>
      }
      lastPowerOnTime = millis();
 800524e:	f003 f8ab 	bl	80083a8 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800525a:	e025      	b.n	80052a8 <_ZN10IridiumSBD5powerEb+0xcc>
   }
   else
   {
      // Best Practices Guide suggests waiting at least 2 seconds
      // before powering off again
      unsigned long elapsed = millis() - lastPowerOnTime;
 800525c:	f003 f8a4 	bl	80083a8 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	60fb      	str	r3, [r7, #12]
      if (elapsed < 2000UL)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005272:	d205      	bcs.n	8005280 <_ZN10IridiumSBD5powerEb+0xa4>
         //delay(2000UL - elapsed); TODO
    	  HAL_Delay(2000UL - elapsed);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 800527a:	4618      	mov	r0, r3
 800527c:	f003 f8a0 	bl	80083c0 <HAL_Delay>

      diagprint(F("Powering off modem...\r\n"));
 8005280:	490c      	ldr	r1, [pc, #48]	; (80052b4 <_ZN10IridiumSBD5powerEb+0xd8>)
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f912 	bl	80054ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800528e:	2b00      	cmp	r3, #0
 8005290:	d004      	beq.n	800529c <_ZN10IridiumSBD5powerEb+0xc0>
      {
         setSleepPin(LOW); // LOW = asleep
 8005292:	2100      	movs	r1, #0
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f81d 	bl	80052d4 <_ZN10IridiumSBD11setSleepPinEh>
 800529a:	e005      	b.n	80052a8 <_ZN10IridiumSBD5powerEb+0xcc>
      }
      else
      {
         enable9603(false);
 800529c:	2100      	movs	r1, #0
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f7ff fc74 	bl	8004b8c <_ZN10IridiumSBD10enable9603Eb>
 80052a4:	e000      	b.n	80052a8 <_ZN10IridiumSBD5powerEb+0xcc>
         return;
 80052a6:	bf00      	nop
      }
   }
}
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	08020a70 	.word	0x08020a70
 80052b4:	08020a88 	.word	0x08020a88

080052b8 <_ZN10IridiumSBD17configureSleepPinEv>:

void IridiumSBD::configureSleepPin()
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
	//pinMode(sleepPin, OUTPUT); // Make the sleep pin an output TODO (doesnt work with this)
   //pinMode(sleepPin, OUTPUT_PP); // Make the sleep pin an output
   diagprint(F("configureSleepPin: sleepPin configured\r\n"));
 80052c0:	4903      	ldr	r1, [pc, #12]	; (80052d0 <_ZN10IridiumSBD17configureSleepPinEv+0x18>)
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f8f2 	bl	80054ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80052c8:	bf00      	nop
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	08020aa0 	.word	0x08020aa0

080052d4 <_ZN10IridiumSBD11setSleepPinEh>:

void IridiumSBD::setSleepPin(uint8_t enable)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	460b      	mov	r3, r1
 80052de:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(sleepPin_GPIO_Port,sleepPin_Pin,GPIO_PIN_SET);
 80052e0:	2201      	movs	r2, #1
 80052e2:	2108      	movs	r1, #8
 80052e4:	480b      	ldr	r0, [pc, #44]	; (8005314 <_ZN10IridiumSBD11setSleepPinEh+0x40>)
 80052e6:	f003 fdd9 	bl	8008e9c <HAL_GPIO_WritePin>
   //digitalWrite(this->sleepPin, enable); // HIGH = awake, LOW = asleep TODO
   diagprint(F("setSleepPin: sleepPin set "));
 80052ea:	490b      	ldr	r1, [pc, #44]	; (8005318 <_ZN10IridiumSBD11setSleepPinEh+0x44>)
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 f8dd 	bl	80054ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   if (enable == HIGH)
 80052f2:	78fb      	ldrb	r3, [r7, #3]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d104      	bne.n	8005302 <_ZN10IridiumSBD11setSleepPinEh+0x2e>
      diagprint(F("HIGH\r\n"));
 80052f8:	4908      	ldr	r1, [pc, #32]	; (800531c <_ZN10IridiumSBD11setSleepPinEh+0x48>)
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f8d6 	bl	80054ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   else
      diagprint(F("LOW\r\n"));
}
 8005300:	e003      	b.n	800530a <_ZN10IridiumSBD11setSleepPinEh+0x36>
      diagprint(F("LOW\r\n"));
 8005302:	4907      	ldr	r1, [pc, #28]	; (8005320 <_ZN10IridiumSBD11setSleepPinEh+0x4c>)
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 f8d1 	bl	80054ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 800530a:	bf00      	nop
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	40020800 	.word	0x40020800
 8005318:	08020acc 	.word	0x08020acc
 800531c:	08020ae8 	.word	0x08020ae8
 8005320:	08020af0 	.word	0x08020af0

08005324 <_ZN10IridiumSBD15beginSerialPortEv>:

void IridiumSBD::beginSerialPort()
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::beginSerialPort\r\n"));
 800532c:	4903      	ldr	r1, [pc, #12]	; (800533c <_ZN10IridiumSBD15beginSerialPortEv+0x18>)
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f8bc 	bl	80054ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8005334:	bf00      	nop
 8005336:	3708      	adds	r7, #8
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	08020af8 	.word	0x08020af8

08005340 <_ZN10IridiumSBD13endSerialPortEv>:

void IridiumSBD::endSerialPort()
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::endSerialPort\r\n"));
 8005348:	4903      	ldr	r1, [pc, #12]	; (8005358 <_ZN10IridiumSBD13endSerialPortEv+0x18>)
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f8ae 	bl	80054ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8005350:	bf00      	nop
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	08020b18 	.word	0x08020b18

0800535c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>:

void IridiumSBD::send(FlashString str, bool beginLine, bool endLine)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	4611      	mov	r1, r2
 8005368:	461a      	mov	r2, r3
 800536a:	460b      	mov	r3, r1
 800536c:	71fb      	strb	r3, [r7, #7]
 800536e:	4613      	mov	r3, r2
 8005370:	71bb      	strb	r3, [r7, #6]
   if (beginLine)
 8005372:	79fb      	ldrb	r3, [r7, #7]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x24>
      consoleprint(F(">> "));
 8005378:	4922      	ldr	r1, [pc, #136]	; (8005404 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xa8>)
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 f8de 	bl	800553c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 8005380:	68b9      	ldr	r1, [r7, #8]
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f000 f8da 	bl	800553c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (endLine)
 8005388:	79bb      	ldrb	r3, [r7, #6]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x3a>
      consoleprint(F("\r\n"));
 800538e:	491e      	ldr	r1, [pc, #120]	; (8005408 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xac>)
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f000 f8d3 	bl	800553c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800539c:	2b00      	cmp	r3, #0
 800539e:	d006      	beq.n	80053ae <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x52>
   {
      stream->print(str);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053a4:	68b9      	ldr	r1, [r7, #8]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 ff96 	bl	80062d8 <_ZN5Print5printEPK19__FlashStringHelper>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 80053ac:	e025      	b.n	80053fa <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x9e>
      wireport->beginTransmission((uint8_t)deviceaddress);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053b8:	4619      	mov	r1, r3
 80053ba:	4610      	mov	r0, r2
 80053bc:	f001 f858 	bl	8006470 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053c4:	21ff      	movs	r1, #255	; 0xff
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7ff fa4a 	bl	8004860 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d0:	68b9      	ldr	r1, [r7, #8]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 ff80 	bl	80062d8 <_ZN5Print5printEPK19__FlashStringHelper>
      if (wireport->endTransmission() != 0) //Release bus
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053dc:	4618      	mov	r0, r3
 80053de:	f001 f891 	bl	8006504 <_ZN7TwoWire15endTransmissionEv>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	bf14      	ite	ne
 80053e8:	2301      	movne	r3, #1
 80053ea:	2300      	moveq	r3, #0
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x9e>
         diagprint(F("I2C write was not successful!\r\n"));
 80053f2:	4906      	ldr	r1, [pc, #24]	; (800540c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xb0>)
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 f859 	bl	80054ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80053fa:	bf00      	nop
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	08020b34 	.word	0x08020b34
 8005408:	0802087c 	.word	0x0802087c
 800540c:	080208fc 	.word	0x080208fc

08005410 <_ZN10IridiumSBD4sendEPKc>:

void IridiumSBD::send(const char *str)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
   consoleprint(F(">> "));
 800541a:	4921      	ldr	r1, [pc, #132]	; (80054a0 <_ZN10IridiumSBD4sendEPKc+0x90>)
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f88d 	bl	800553c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 8005422:	6839      	ldr	r1, [r7, #0]
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f8af 	bl	8005588 <_ZN10IridiumSBD12consoleprintEPKc>
   consoleprint(F("\r\n"));
 800542a:	491e      	ldr	r1, [pc, #120]	; (80054a4 <_ZN10IridiumSBD4sendEPKc+0x94>)
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f885 	bl	800553c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005438:	2b00      	cmp	r3, #0
 800543a:	d006      	beq.n	800544a <_ZN10IridiumSBD4sendEPKc+0x3a>
   {
      stream->print(str);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005440:	6839      	ldr	r1, [r7, #0]
 8005442:	4618      	mov	r0, r3
 8005444:	f000 ff56 	bl	80062f4 <_ZN5Print5printEPKc>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8005448:	e025      	b.n	8005496 <_ZN10IridiumSBD4sendEPKc+0x86>
      wireport->beginTransmission((uint8_t)deviceaddress);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005454:	4619      	mov	r1, r3
 8005456:	4610      	mov	r0, r2
 8005458:	f001 f80a 	bl	8006470 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005460:	21ff      	movs	r1, #255	; 0xff
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff f9fc 	bl	8004860 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800546c:	6839      	ldr	r1, [r7, #0]
 800546e:	4618      	mov	r0, r3
 8005470:	f000 ff40 	bl	80062f4 <_ZN5Print5printEPKc>
      if (wireport->endTransmission() != 0) //Release bus
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005478:	4618      	mov	r0, r3
 800547a:	f001 f843 	bl	8006504 <_ZN7TwoWire15endTransmissionEv>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	bf14      	ite	ne
 8005484:	2301      	movne	r3, #1
 8005486:	2300      	moveq	r3, #0
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d003      	beq.n	8005496 <_ZN10IridiumSBD4sendEPKc+0x86>
         diagprint(F("I2C write was not successful!\r\n"));
 800548e:	4906      	ldr	r1, [pc, #24]	; (80054a8 <_ZN10IridiumSBD4sendEPKc+0x98>)
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f80b 	bl	80054ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8005496:	bf00      	nop
 8005498:	3708      	adds	r7, #8
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	08020b34 	.word	0x08020b34
 80054a4:	0802087c 	.word	0x0802087c
 80054a8:	080208fc 	.word	0x080208fc

080054ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>:
         diagprint(F("I2C write was not successful!\r\n"));
   }
}

void IridiumSBD::diagprint(FlashString str)
{
 80054ac:	b590      	push	{r4, r7, lr}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	1c5a      	adds	r2, r3, #1
 80054be:	60fa      	str	r2, [r7, #12]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 80054c4:	7afb      	ldrb	r3, [r7, #11]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d005      	beq.n	80054d6 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0x2a>
      ISBDDiagsCallback(this, c);
 80054ca:	7afb      	ldrb	r3, [r7, #11]
 80054cc:	4619      	mov	r1, r3
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7ff f9ec 	bl	80048ac <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   }
 80054d4:	e7f1      	b.n	80054ba <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 80054d6:	bf00      	nop

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen((const char*)str), HAL_MAX_DELAY);
 80054d8:	687c      	ldr	r4, [r7, #4]
 80054da:	6838      	ldr	r0, [r7, #0]
 80054dc:	f7fa fe88 	bl	80001f0 <strlen>
 80054e0:	4603      	mov	r3, r0
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	f04f 33ff 	mov.w	r3, #4294967295
 80054e8:	6839      	ldr	r1, [r7, #0]
 80054ea:	4620      	mov	r0, r4
 80054ec:	f008 ffa1 	bl	800e432 <HAL_UART_Transmit>
}
 80054f0:	bf00      	nop
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd90      	pop	{r4, r7, pc}

080054f8 <_ZN10IridiumSBD9diagprintEPKc>:

void IridiumSBD::diagprint(const char *str)
{
 80054f8:	b590      	push	{r4, r7, lr}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
   while (*str)
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d008      	beq.n	800551c <_ZN10IridiumSBD9diagprintEPKc+0x24>
      ISBDDiagsCallback(this, *str++);
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	1c5a      	adds	r2, r3, #1
 800550e:	603a      	str	r2, [r7, #0]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	4619      	mov	r1, r3
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f7ff f9c9 	bl	80048ac <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   while (*str)
 800551a:	e7f2      	b.n	8005502 <_ZN10IridiumSBD9diagprintEPKc+0xa>

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 800551c:	687c      	ldr	r4, [r7, #4]
 800551e:	6838      	ldr	r0, [r7, #0]
 8005520:	f7fa fe66 	bl	80001f0 <strlen>
 8005524:	4603      	mov	r3, r0
 8005526:	b29a      	uxth	r2, r3
 8005528:	f04f 33ff 	mov.w	r3, #4294967295
 800552c:	6839      	ldr	r1, [r7, #0]
 800552e:	4620      	mov	r0, r4
 8005530:	f008 ff7f 	bl	800e432 <HAL_UART_Transmit>
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	bd90      	pop	{r4, r7, pc}

0800553c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>:
   diagprint(str); //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
}

void IridiumSBD::consoleprint(FlashString str)
{
 800553c:	b590      	push	{r4, r7, lr}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	60fa      	str	r2, [r7, #12]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 8005554:	7afb      	ldrb	r3, [r7, #11]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d005      	beq.n	8005566 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0x2a>
      ISBDConsoleCallback(this, c);
 800555a:	7afb      	ldrb	r3, [r7, #11]
 800555c:	4619      	mov	r1, r3
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7ff f998 	bl	8004894 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   }
 8005564:	e7f1      	b.n	800554a <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 8005566:	bf00      	nop

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen((const char*) str), HAL_MAX_DELAY);
 8005568:	687c      	ldr	r4, [r7, #4]
 800556a:	6838      	ldr	r0, [r7, #0]
 800556c:	f7fa fe40 	bl	80001f0 <strlen>
 8005570:	4603      	mov	r3, r0
 8005572:	b29a      	uxth	r2, r3
 8005574:	f04f 33ff 	mov.w	r3, #4294967295
 8005578:	6839      	ldr	r1, [r7, #0]
 800557a:	4620      	mov	r0, r4
 800557c:	f008 ff59 	bl	800e432 <HAL_UART_Transmit>
}
 8005580:	bf00      	nop
 8005582:	3714      	adds	r7, #20
 8005584:	46bd      	mov	sp, r7
 8005586:	bd90      	pop	{r4, r7, pc}

08005588 <_ZN10IridiumSBD12consoleprintEPKc>:

void IridiumSBD::consoleprint(const char *str)
{
 8005588:	b590      	push	{r4, r7, lr}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
   while (*str)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d008      	beq.n	80055ac <_ZN10IridiumSBD12consoleprintEPKc+0x24>
      ISBDConsoleCallback(this, *str++);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	1c5a      	adds	r2, r3, #1
 800559e:	603a      	str	r2, [r7, #0]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	4619      	mov	r1, r3
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f7ff f975 	bl	8004894 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   while (*str)
 80055aa:	e7f2      	b.n	8005592 <_ZN10IridiumSBD12consoleprintEPKc+0xa>

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 80055ac:	687c      	ldr	r4, [r7, #4]
 80055ae:	6838      	ldr	r0, [r7, #0]
 80055b0:	f7fa fe1e 	bl	80001f0 <strlen>
 80055b4:	4603      	mov	r3, r0
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	f04f 33ff 	mov.w	r3, #4294967295
 80055bc:	6839      	ldr	r1, [r7, #0]
 80055be:	4620      	mov	r0, r4
 80055c0:	f008 ff37 	bl	800e432 <HAL_UART_Transmit>
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd90      	pop	{r4, r7, pc}

080055cc <_ZN10IridiumSBD12consoleprintEc>:
   //consoleprint((const char*) str);
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
}

void IridiumSBD::consoleprint(char c)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	460b      	mov	r3, r1
 80055d6:	70fb      	strb	r3, [r7, #3]
   ISBDConsoleCallback(this, c);
 80055d8:	78fb      	ldrb	r3, [r7, #3]
 80055da:	4619      	mov	r1, r3
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f7ff f959 	bl	8004894 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
}
 80055e2:	bf00      	nop
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
	...

080055ec <_ZN10IridiumSBD11SBDRINGSeenEv>:

void IridiumSBD::SBDRINGSeen()
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
   ringAsserted = true;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
   diagprint(F("SBDRING alert seen!\r\n"));
 80055fc:	4903      	ldr	r1, [pc, #12]	; (800560c <_ZN10IridiumSBD11SBDRINGSeenEv+0x20>)
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7ff ff54 	bl	80054ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8005604:	bf00      	nop
 8005606:	3708      	adds	r7, #8
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	08020b3c 	.word	0x08020b3c

08005610 <_ZN10IridiumSBD13filterSBDRINGEv>:
// Read characters until we find one that doesn't match SBDRING
// If nextChar is -1 it means we are still entertaining a possible
// match with SBDRING\r\n.  Once we find a mismatch, stuff it into
// nextChar.
void IridiumSBD::filterSBDRING()
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
   if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800561e:	f083 0301 	eor.w	r3, r3, #1
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 f949 	bl	80058c0 <_ZN10IridiumSBD13check9603dataEv>
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00b      	beq.n	8005650 <_ZN10IridiumSBD13filterSBDRINGEv+0x40>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3308      	adds	r3, #8
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4610      	mov	r0, r2
 8005648:	4798      	blx	r3
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	dc0d      	bgt.n	800566c <_ZN10IridiumSBD13filterSBDRINGEv+0x5c>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005656:	f083 0301 	eor.w	r3, r3, #1
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00d      	beq.n	800567c <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 fa67 	bl	8005b34 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	dd07      	ble.n	800567c <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005676:	d101      	bne.n	800567c <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 8005678:	2301      	movs	r3, #1
 800567a:	e000      	b.n	800567e <_ZN10IridiumSBD13filterSBDRINGEv+0x6e>
 800567c:	2300      	movs	r3, #0
 800567e:	2b00      	cmp	r3, #0
 8005680:	f000 80b6 	beq.w	80057f0 <_ZN10IridiumSBD13filterSBDRINGEv+0x1e0>
   {
      char c;
      if (this->useSerial)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00b      	beq.n	80056a6 <_ZN10IridiumSBD13filterSBDRINGEv+0x96>
      {
         c = stream->read();
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	330c      	adds	r3, #12
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4610      	mov	r0, r2
 800569e:	4798      	blx	r3
 80056a0:	4603      	mov	r3, r0
 80056a2:	73fb      	strb	r3, [r7, #15]
 80056a4:	e004      	b.n	80056b0 <_ZN10IridiumSBD13filterSBDRINGEv+0xa0>
      }
      else
      {
         c = i2cSerRead();
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fa5e 	bl	8005b68 <_ZN10IridiumSBD10i2cSerReadEv>
 80056ac:	4603      	mov	r3, r0
 80056ae:	73fb      	strb	r3, [r7, #15]
      }
      consoleprint(c);
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
 80056b2:	4619      	mov	r1, r3
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7ff ff89 	bl	80055cc <_ZN10IridiumSBD12consoleprintEc>
      if (*head != 0 && c == *head)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 808d 	beq.w	80057e2 <_ZN10IridiumSBD13filterSBDRINGEv+0x1d2>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	7bfa      	ldrb	r2, [r7, #15]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	f040 8085 	bne.w	80057e2 <_ZN10IridiumSBD13filterSBDRINGEv+0x1d2>
      {
         ++head;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80056de:	1c5a      	adds	r2, r3, #1
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
         if (*head == 0)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10d      	bne.n	800570e <_ZN10IridiumSBD13filterSBDRINGEv+0xfe>
         {
            SBDRINGSeen();
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7ff ff7a 	bl	80055ec <_ZN10IridiumSBD11SBDRINGSeenEv>
            head = tail = SBDRING;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a3f      	ldr	r2, [pc, #252]	; (80057f8 <_ZN10IridiumSBD13filterSBDRINGEv+0x1e8>)
 80056fc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
            {
               --head;
               nextChar = c;
            }
         }
 800570c:	e06e      	b.n	80057ec <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
            for (unsigned long start = millis(); ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) && millis() - start < FILTERTIMEOUT; );
 800570e:	f002 fe4b 	bl	80083a8 <HAL_GetTick>
 8005712:	60b8      	str	r0, [r7, #8]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00b      	beq.n	8005736 <_ZN10IridiumSBD13filterSBDRINGEv+0x126>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	3308      	adds	r3, #8
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4610      	mov	r0, r2
 800572e:	4798      	blx	r3
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00d      	beq.n	8005752 <_ZN10IridiumSBD13filterSBDRINGEv+0x142>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800573c:	f083 0301 	eor.w	r3, r3, #1
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00e      	beq.n	8005764 <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f9f4 	bl	8005b34 <_ZN10IridiumSBD15i2cSerAvailableEv>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d108      	bne.n	8005764 <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 8005752:	f002 fe29 	bl	80083a8 <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	2b09      	cmp	r3, #9
 800575e:	d801      	bhi.n	8005764 <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 8005760:	2301      	movs	r3, #1
 8005762:	e000      	b.n	8005766 <_ZN10IridiumSBD13filterSBDRINGEv+0x156>
 8005764:	2300      	movs	r3, #0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d000      	beq.n	800576c <_ZN10IridiumSBD13filterSBDRINGEv+0x15c>
 800576a:	e7d3      	b.n	8005714 <_ZN10IridiumSBD13filterSBDRINGEv+0x104>
            if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005772:	f083 0301 	eor.w	r3, r3, #1
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	d002      	beq.n	8005782 <_ZN10IridiumSBD13filterSBDRINGEv+0x172>
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f89f 	bl	80058c0 <_ZN10IridiumSBD13check9603dataEv>
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00b      	beq.n	80057a4 <_ZN10IridiumSBD13filterSBDRINGEv+0x194>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3308      	adds	r3, #8
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4610      	mov	r0, r2
 800579c:	4798      	blx	r3
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00d      	beq.n	80057c0 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b0>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057aa:	f083 0301 	eor.w	r3, r3, #1
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d007      	beq.n	80057c4 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b4>
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f9bd 	bl	8005b34 <_ZN10IridiumSBD15i2cSerAvailableEv>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b4>
 80057c0:	2301      	movs	r3, #1
 80057c2:	e000      	b.n	80057c6 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b6>
 80057c4:	2300      	movs	r3, #0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d010      	beq.n	80057ec <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
               --head;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80057d0:	1e5a      	subs	r2, r3, #1
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
               nextChar = c;
 80057d8:	7bfa      	ldrb	r2, [r7, #15]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
         }
 80057e0:	e004      	b.n	80057ec <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
      }
      else
      {
         nextChar = c;
 80057e2:	7bfa      	ldrb	r2, [r7, #15]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80057ea:	e720      	b.n	800562e <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
         }
 80057ec:	bf00      	nop
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 80057ee:	e71e      	b.n	800562e <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
      }
   }
}
 80057f0:	bf00      	nop
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	080215ec 	.word	0x080215ec

080057fc <_ZN10IridiumSBD17filteredavailableEv>:

const char IridiumSBD::SBDRING[] = "SBDRING\r\n";

int IridiumSBD::filteredavailable()
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7ff ff03 	bl	8005610 <_ZN10IridiumSBD13filterSBDRINGEv>
   return head - tail + (nextChar != -1 ? 1 : 0);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	f8d2 20d8 	ldr.w	r2, [r2, #216]	; 0xd8
 800581e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005822:	d001      	beq.n	8005828 <_ZN10IridiumSBD17filteredavailableEv+0x2c>
 8005824:	2201      	movs	r2, #1
 8005826:	e000      	b.n	800582a <_ZN10IridiumSBD17filteredavailableEv+0x2e>
 8005828:	2200      	movs	r2, #0
 800582a:	4413      	add	r3, r2
}
 800582c:	4618      	mov	r0, r3
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <_ZN10IridiumSBD12filteredreadEv>:

int IridiumSBD::filteredread()
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f7ff fee7 	bl	8005610 <_ZN10IridiumSBD13filterSBDRINGEv>

   // Use up the queue first
   if (head > tail)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800584e:	429a      	cmp	r2, r3
 8005850:	d91c      	bls.n	800588c <_ZN10IridiumSBD12filteredreadEv+0x58>
   {
      char c = *tail++;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005858:	1c59      	adds	r1, r3, #1
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	f8c2 10d4 	str.w	r1, [r2, #212]	; 0xd4
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	73bb      	strb	r3, [r7, #14]
      if (head == tail)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005870:	429a      	cmp	r2, r3
 8005872:	d109      	bne.n	8005888 <_ZN10IridiumSBD12filteredreadEv+0x54>
         head = tail = SBDRING;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a11      	ldr	r2, [pc, #68]	; (80058bc <_ZN10IridiumSBD12filteredreadEv+0x88>)
 8005878:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
      return c;
 8005888:	7bbb      	ldrb	r3, [r7, #14]
 800588a:	e012      	b.n	80058b2 <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   // Then the "extra" char
   else if (nextChar != -1)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005896:	d00a      	beq.n	80058ae <_ZN10IridiumSBD12filteredreadEv+0x7a>
   {
      char c = (char)nextChar;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800589e:	73fb      	strb	r3, [r7, #15]
      nextChar = -1;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f04f 32ff 	mov.w	r2, #4294967295
 80058a6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
      return c;
 80058aa:	7bfb      	ldrb	r3, [r7, #15]
 80058ac:	e001      	b.n	80058b2 <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   return -1;
 80058ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	080215ec 	.word	0x080215ec

080058c0 <_ZN10IridiumSBD13check9603dataEv>:

//Checks the number of available serial bytes
//Reads the available serial bytes (if any) and stores them in i2c_ser_buffer
void IridiumSBD::check9603data()
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  if (millis() - lastCheck >= I2C_POLLING_WAIT_MS)
 80058c8:	f002 fd6e 	bl	80083a8 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 80058dc:	4293      	cmp	r3, r2
 80058de:	bf2c      	ite	cs
 80058e0:	2301      	movcs	r3, #1
 80058e2:	2300      	movcc	r3, #0
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 80be 	beq.w	8005a68 <_ZN10IridiumSBD13check9603dataEv+0x1a8>
  {
    //Check how many serial bytes are waiting to be read
    uint16_t bytesAvailable = 0;
 80058ec:	2300      	movs	r3, #0
 80058ee:	81fb      	strh	r3, [r7, #14]
    wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058fa:	4619      	mov	r1, r3
 80058fc:	4610      	mov	r0, r2
 80058fe:	f000 fdb7 	bl	8006470 <_ZN7TwoWire17beginTransmissionEh>
    wireport->write(LEN_REG); // Point to the serial buffer length
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005906:	21fd      	movs	r1, #253	; 0xfd
 8005908:	4618      	mov	r0, r3
 800590a:	f7fe ffa9 	bl	8004860 <_ZN7TwoWire5writeEi>
    wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005912:	4618      	mov	r0, r3
 8005914:	f000 fdf6 	bl	8006504 <_ZN7TwoWire15endTransmissionEv>
    if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)2) == 2) // Request two bytes
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005922:	2202      	movs	r2, #2
 8005924:	4619      	mov	r1, r3
 8005926:	f000 fd90 	bl	800644a <_ZN7TwoWire11requestFromEhh>
 800592a:	4603      	mov	r3, r0
 800592c:	2b02      	cmp	r3, #2
 800592e:	bf0c      	ite	eq
 8005930:	2301      	moveq	r3, #1
 8005932:	2300      	movne	r3, #0
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d01d      	beq.n	8005976 <_ZN10IridiumSBD13check9603dataEv+0xb6>
    {
      uint8_t msb = wireport->read();
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	330c      	adds	r3, #12
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4610      	mov	r0, r2
 800594a:	4798      	blx	r3
 800594c:	4603      	mov	r3, r0
 800594e:	737b      	strb	r3, [r7, #13]
      uint8_t lsb = wireport->read();
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	330c      	adds	r3, #12
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4610      	mov	r0, r2
 8005960:	4798      	blx	r3
 8005962:	4603      	mov	r3, r0
 8005964:	733b      	strb	r3, [r7, #12]
      bytesAvailable = (((uint16_t)msb) << 8) | lsb;
 8005966:	7b7b      	ldrb	r3, [r7, #13]
 8005968:	021b      	lsls	r3, r3, #8
 800596a:	b21a      	sxth	r2, r3
 800596c:	7b3b      	ldrb	r3, [r7, #12]
 800596e:	b21b      	sxth	r3, r3
 8005970:	4313      	orrs	r3, r2
 8005972:	b21b      	sxth	r3, r3
 8005974:	81fb      	strh	r3, [r7, #14]
    }

    //Now read the serial bytes (if any)
    if (bytesAvailable > 0)
 8005976:	89fb      	ldrh	r3, [r7, #14]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d06f      	beq.n	8005a5c <_ZN10IridiumSBD13check9603dataEv+0x19c>
    {
      // Request the bytes
      // Poke them into the i2c_serial buffer
      // Release the bus afterwards
      wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005986:	4619      	mov	r1, r3
 8005988:	4610      	mov	r0, r2
 800598a:	f000 fd71 	bl	8006470 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the serial buffer
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005992:	21ff      	movs	r1, #255	; 0xff
 8005994:	4618      	mov	r0, r3
 8005996:	f7fe ff63 	bl	8004860 <_ZN7TwoWire5writeEi>
      wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 fdb0 	bl	8006504 <_ZN7TwoWire15endTransmissionEv>
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 80059a4:	89fb      	ldrh	r3, [r7, #14]
 80059a6:	2b08      	cmp	r3, #8
 80059a8:	d92d      	bls.n	8005a06 <_ZN10IridiumSBD13check9603dataEv+0x146>
      {
        wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)SER_PACKET_SIZE, (uint8_t)false); // Request SER_PACKET_SIZE bytes, don't release the bus
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 80059b4:	2300      	movs	r3, #0
 80059b6:	2208      	movs	r2, #8
 80059b8:	f000 fd0c 	bl	80063d4 <_ZN7TwoWire11requestFromEhhh>
        while (wireport->available())
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	3308      	adds	r3, #8
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4610      	mov	r0, r2
 80059cc:	4798      	blx	r3
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	bf14      	ite	ne
 80059d4:	2301      	movne	r3, #1
 80059d6:	2300      	moveq	r3, #0
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00f      	beq.n	80059fe <_ZN10IridiumSBD13check9603dataEv+0x13e>
        {
          i2cSerPoke(wireport->read()); // Read and store each byte
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	330c      	adds	r3, #12
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4610      	mov	r0, r2
 80059ee:	4798      	blx	r3
 80059f0:	4603      	mov	r3, r0
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	4619      	mov	r1, r3
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f8e2 	bl	8005bc0 <_ZN10IridiumSBD10i2cSerPokeEc>
        while (wireport->available())
 80059fc:	e7de      	b.n	80059bc <_ZN10IridiumSBD13check9603dataEv+0xfc>
        }
        bytesAvailable -= SER_PACKET_SIZE; // Decrease the number of bytes available by SER_PACKET_SIZE
 80059fe:	89fb      	ldrh	r3, [r7, #14]
 8005a00:	3b08      	subs	r3, #8
 8005a02:	81fb      	strh	r3, [r7, #14]
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 8005a04:	e7ce      	b.n	80059a4 <_ZN10IridiumSBD13check9603dataEv+0xe4>
      }
      wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)bytesAvailable); // Request remaining bytes, release the bus
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a10:	89fa      	ldrh	r2, [r7, #14]
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	4619      	mov	r1, r3
 8005a16:	f000 fd18 	bl	800644a <_ZN7TwoWire11requestFromEhh>
      while (wireport->available())
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	3308      	adds	r3, #8
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4610      	mov	r0, r2
 8005a2a:	4798      	blx	r3
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	bf14      	ite	ne
 8005a32:	2301      	movne	r3, #1
 8005a34:	2300      	moveq	r3, #0
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00f      	beq.n	8005a5c <_ZN10IridiumSBD13check9603dataEv+0x19c>
      {
        i2cSerPoke(wireport->read()); // Read and store each byte
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	330c      	adds	r3, #12
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4610      	mov	r0, r2
 8005a4c:	4798      	blx	r3
 8005a4e:	4603      	mov	r3, r0
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	4619      	mov	r1, r3
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 f8b3 	bl	8005bc0 <_ZN10IridiumSBD10i2cSerPokeEc>
      while (wireport->available())
 8005a5a:	e7de      	b.n	8005a1a <_ZN10IridiumSBD13check9603dataEv+0x15a>
      }
    }

    lastCheck = millis(); //Put off checking to avoid excessive I2C bus traffic
 8005a5c:	f002 fca4 	bl	80083a8 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  }
}
 8005a68:	bf00      	nop
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <_ZN10IridiumSBD13check9603pinsEv>:

//Reads the IO pins and update IO_REGISTER
void IridiumSBD::check9603pins()
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  //Read the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a82:	4619      	mov	r1, r3
 8005a84:	4610      	mov	r0, r2
 8005a86:	f000 fcf3 	bl	8006470 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a8e:	2110      	movs	r1, #16
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7fe fee5 	bl	8004860 <_ZN7TwoWire5writeEi>
  wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 fd32 	bl	8006504 <_ZN7TwoWire15endTransmissionEv>
  if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)1) == 1) // Request one byte from the IO register
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005aaa:	2201      	movs	r2, #1
 8005aac:	4619      	mov	r1, r3
 8005aae:	f000 fccc 	bl	800644a <_ZN7TwoWire11requestFromEhh>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	bf0c      	ite	eq
 8005ab8:	2301      	moveq	r3, #1
 8005aba:	2300      	movne	r3, #0
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00d      	beq.n	8005ade <_ZN10IridiumSBD13check9603pinsEv+0x6e>
  {
    IO_REGISTER = wireport->read(); // Read the IO register
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	330c      	adds	r3, #12
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4610      	mov	r0, r2
 8005ad2:	4798      	blx	r3
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
}
 8005ade:	bf00      	nop
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <_ZN10IridiumSBD11set9603pinsEh>:

//Set the IO pins
void IridiumSBD::set9603pins(uint8_t pins)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b082      	sub	sp, #8
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
 8005aee:	460b      	mov	r3, r1
 8005af0:	70fb      	strb	r3, [r7, #3]
  //Write to the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005afc:	4619      	mov	r1, r3
 8005afe:	4610      	mov	r0, r2
 8005b00:	f000 fcb6 	bl	8006470 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b08:	2110      	movs	r1, #16
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7fe fea8 	bl	8004860 <_ZN7TwoWire5writeEi>
  wireport->write(pins); // Set the pins
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	78f9      	ldrb	r1, [r7, #3]
 8005b1e:	4610      	mov	r0, r2
 8005b20:	4798      	blx	r3
  wireport->endTransmission(); // Send data and surrender the bus
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 fcec 	bl	8006504 <_ZN7TwoWire15endTransmissionEv>
}
 8005b2c:	bf00      	nop
 8005b2e:	3708      	adds	r7, #8
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <_ZN10IridiumSBD15i2cSerAvailableEv>:
    return(ISBD_SUCCESS);
}

// I2C_SER functions
int IridiumSBD::i2cSerAvailable()
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  return (i2c_ser_buffer_tail + I2C_SER_MAX_BUFF - i2c_ser_buffer_head) % I2C_SER_MAX_BUFF;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b42:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	425a      	negs	r2, r3
 8005b50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b54:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005b58:	bf58      	it	pl
 8005b5a:	4253      	negpl	r3, r2
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <_ZN10IridiumSBD10i2cSerReadEv>:

int IridiumSBD::i2cSerRead()
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  // Empty buffer?
  if (i2c_ser_buffer_head == i2c_ser_buffer_tail)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d102      	bne.n	8005b86 <_ZN10IridiumSBD10i2cSerReadEv+0x1e>
    return -1;
 8005b80:	f04f 33ff 	mov.w	r3, #4294967295
 8005b84:	e016      	b.n	8005bb4 <_ZN10IridiumSBD10i2cSerReadEv+0x4c>

  // Read from "head"
  uint8_t d = i2c_ser_buffer[i2c_ser_buffer_head]; // grab next byte
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8005b94:	73fb      	strb	r3, [r7, #15]
  i2c_ser_buffer_head = (i2c_ser_buffer_head + 1) % I2C_SER_MAX_BUFF; // update head
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	425a      	negs	r2, r3
 8005ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ba4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005ba8:	bf58      	it	pl
 8005baa:	4253      	negpl	r3, r2
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  return d;
 8005bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <_ZN10IridiumSBD10i2cSerPokeEc>:

void IridiumSBD::i2cSerPoke(char serChar)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	460b      	mov	r3, r1
 8005bca:	70fb      	strb	r3, [r7, #3]
  // Calculate the new value for the tail
  int next = (i2c_ser_buffer_tail + 1) % I2C_SER_MAX_BUFF;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	425a      	negs	r2, r3
 8005bd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bda:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005bde:	bf58      	it	pl
 8005be0:	4253      	negpl	r3, r2
 8005be2:	60fb      	str	r3, [r7, #12]
  // If the buffer is not full (i.e. we are not about to overwrite the head byte)
  // If the buffer is full, the byte is lost
  if (next != i2c_ser_buffer_head)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d00b      	beq.n	8005c08 <_ZN10IridiumSBD10i2cSerPokeEc+0x48>
  {
    // save new data in buffer: tail points to where byte goes
    i2c_ser_buffer[i2c_ser_buffer_tail] = serChar; // save new byte
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	78fa      	ldrb	r2, [r7, #3]
 8005bfc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    i2c_ser_buffer_tail = next;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }
}
 8005c08:	bf00      	nop
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef>:
	#endif
}


//uint8_t IridiumSBD::MRT_Iridium_setup(UART_HandleTypeDef huart,POWERPROFILE profile){ TODO
uint8_t IridiumSBD::MRT_Iridium_setup(UART_HandleTypeDef huart){
 8005c14:	b084      	sub	sp, #16
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b084      	sub	sp, #16
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
 8005c1e:	f107 001c 	add.w	r0, r7, #28
 8005c22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->uart = huart;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f107 031c 	add.w	r3, r7, #28
 8005c2e:	2244      	movs	r2, #68	; 0x44
 8005c30:	4619      	mov	r1, r3
 8005c32:	f014 fd7b 	bl	801a72c <memcpy>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nSetting up the Iridium 9603N\r\n", 32, HAL_MAX_DELAY);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f04f 33ff 	mov.w	r3, #4294967295
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	4962      	ldr	r1, [pc, #392]	; (8005dc8 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1b4>)
 8005c40:	f008 fbf7 	bl	800e432 <HAL_UART_Transmit>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Checking for the device...", 28, HAL_MAX_DELAY);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f04f 33ff 	mov.w	r3, #4294967295
 8005c4a:	221c      	movs	r2, #28
 8005c4c:	495f      	ldr	r1, [pc, #380]	; (8005dcc <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1b8>)
 8005c4e:	f008 fbf0 	bl	800e432 <HAL_UART_Transmit>
	while(!this->isConnected()){
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7ff f80a 	bl	8004c6c <_ZN10IridiumSBD11isConnectedEv>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	f083 0301 	eor.w	r3, r3, #1
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d02c      	beq.n	8005cbe <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0xaa>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Check if the device is connected. Trying again in\r\n", 53, HAL_MAX_DELAY);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f04f 33ff 	mov.w	r3, #4294967295
 8005c6a:	2235      	movs	r2, #53	; 0x35
 8005c6c:	4958      	ldr	r1, [pc, #352]	; (8005dd0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1bc>)
 8005c6e:	f008 fbe0 	bl	800e432 <HAL_UART_Transmit>
		HAL_Delay(500);
 8005c72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005c76:	f002 fba3 	bl	80083c0 <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r3", 3, HAL_MAX_DELAY);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c80:	2203      	movs	r2, #3
 8005c82:	4954      	ldr	r1, [pc, #336]	; (8005dd4 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1c0>)
 8005c84:	f008 fbd5 	bl	800e432 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8005c88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c8c:	f002 fb98 	bl	80083c0 <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r2", 3, HAL_MAX_DELAY);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f04f 33ff 	mov.w	r3, #4294967295
 8005c96:	2203      	movs	r2, #3
 8005c98:	494f      	ldr	r1, [pc, #316]	; (8005dd8 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1c4>)
 8005c9a:	f008 fbca 	bl	800e432 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8005c9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ca2:	f002 fb8d 	bl	80083c0 <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r1\r\n", 7, HAL_MAX_DELAY);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8005cac:	2207      	movs	r2, #7
 8005cae:	494b      	ldr	r1, [pc, #300]	; (8005ddc <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1c8>)
 8005cb0:	f008 fbbf 	bl	800e432 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8005cb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005cb8:	f002 fb82 	bl	80083c0 <HAL_Delay>
	while(!this->isConnected()){
 8005cbc:	e7c9      	b.n	8005c52 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x3e>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8005cc4:	2206      	movs	r2, #6
 8005cc6:	4946      	ldr	r1, [pc, #280]	; (8005de0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1cc>)
 8005cc8:	f008 fbb3 	bl	800e432 <HAL_UART_Transmit>

	//Activate the superchargers
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Activating the superchargers...", 31, HAL_MAX_DELAY);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd2:	221f      	movs	r2, #31
 8005cd4:	4943      	ldr	r1, [pc, #268]	; (8005de4 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1d0>)
 8005cd6:	f008 fbac 	bl	800e432 <HAL_UART_Transmit>
	this->enableSuperCapCharger(true);
 8005cda:	2101      	movs	r1, #1
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f7fe fea9 	bl	8004a34 <_ZN10IridiumSBD21enableSuperCapChargerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ce8:	2206      	movs	r2, #6
 8005cea:	493d      	ldr	r1, [pc, #244]	; (8005de0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1cc>)
 8005cec:	f008 fba1 	bl	800e432 <HAL_UART_Transmit>


	//Wait for the supercapacitors to charge
	//int start=millis();
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Waiting for the supercapacitors to charge...", 44, HAL_MAX_DELAY);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8005cf6:	222c      	movs	r2, #44	; 0x2c
 8005cf8:	493b      	ldr	r1, [pc, #236]	; (8005de8 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1d4>)
 8005cfa:	f008 fb9a 	bl	800e432 <HAL_UART_Transmit>
	while (!this->checkSuperCapCharger()){
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7fe fed6 	bl	8004ab0 <_ZN10IridiumSBD20checkSuperCapChargerEv>
 8005d04:	4603      	mov	r3, r0
 8005d06:	f083 0301 	eor.w	r3, r3, #1
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d004      	beq.n	8005d1a <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x106>
		HAL_Delay(333);
 8005d10:	f240 104d 	movw	r0, #333	; 0x14d
 8005d14:	f002 fb54 	bl	80083c0 <HAL_Delay>
	while (!this->checkSuperCapCharger()){
 8005d18:	e7f1      	b.n	8005cfe <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0xea>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d20:	2206      	movs	r2, #6
 8005d22:	492f      	ldr	r1, [pc, #188]	; (8005de0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1cc>)
 8005d24:	f008 fb85 	bl	800e432 <HAL_UART_Transmit>


	//Enable power for the 9603N
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Enabling 9603N power...", 23, HAL_MAX_DELAY);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d2e:	2217      	movs	r2, #23
 8005d30:	492e      	ldr	r1, [pc, #184]	; (8005dec <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1d8>)
 8005d32:	f008 fb7e 	bl	800e432 <HAL_UART_Transmit>
	this->enable9603Npower(true);
 8005d36:	2101      	movs	r1, #1
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f7fe fee9 	bl	8004b10 <_ZN10IridiumSBD16enable9603NpowerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f04f 33ff 	mov.w	r3, #4294967295
 8005d44:	2206      	movs	r2, #6
 8005d46:	4926      	ldr	r1, [pc, #152]	; (8005de0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1cc>)
 8005d48:	f008 fb73 	bl	800e432 <HAL_UART_Transmit>
	/*
	 * Begin satellite modem operation
	 */

	//Power on the rockblock
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Starting Modem...", 17, HAL_MAX_DELAY);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d52:	2211      	movs	r2, #17
 8005d54:	4926      	ldr	r1, [pc, #152]	; (8005df0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1dc>)
 8005d56:	f008 fb6c 	bl	800e432 <HAL_UART_Transmit>
	//this->setPowerProfile(profile);
	int err = this->begin();
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7fe fdb2 	bl	80048c4 <_ZN10IridiumSBD5beginEv>
 8005d60:	60f8      	str	r0, [r7, #12]
	if (err != ISBD_SUCCESS)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d015      	beq.n	8005d94 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x180>
	  {
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Failed: ", 8, HAL_MAX_DELAY);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d6e:	2208      	movs	r2, #8
 8005d70:	4920      	ldr	r1, [pc, #128]	; (8005df4 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1e0>)
 8005d72:	f008 fb5e 	bl	800e432 <HAL_UART_Transmit>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) err, 4, HAL_MAX_DELAY);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	68f9      	ldr	r1, [r7, #12]
 8005d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d7e:	2204      	movs	r2, #4
 8005d80:	f008 fb57 	bl	800e432 <HAL_UART_Transmit>
		this->MRT_Iridium_ErrorMessage(err);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	4619      	mov	r1, r3
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f8b0 	bl	8005ef0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>

	    return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e011      	b.n	8005db8 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1a4>
	  }
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "...OK\r\n", 7, HAL_MAX_DELAY);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f04f 33ff 	mov.w	r3, #4294967295
 8005d9a:	2207      	movs	r2, #7
 8005d9c:	4916      	ldr	r1, [pc, #88]	; (8005df8 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1e4>)
 8005d9e:	f008 fb48 	bl	800e432 <HAL_UART_Transmit>

	//Setup default IMEI to 000000000000000 (no IMEI)
	IMEI="000000000000000";
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a15      	ldr	r2, [pc, #84]	; (8005dfc <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1e8>)
 8005da6:	645a      	str	r2, [r3, #68]	; 0x44

	HAL_UART_Transmit(&(this->uart),(uint8_t*) "End of setup\r\n\r\n", 16, HAL_MAX_DELAY);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f04f 33ff 	mov.w	r3, #4294967295
 8005dae:	2210      	movs	r2, #16
 8005db0:	4913      	ldr	r1, [pc, #76]	; (8005e00 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1ec>)
 8005db2:	f008 fb3e 	bl	800e432 <HAL_UART_Transmit>

	return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dc2:	b004      	add	sp, #16
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	08020bbc 	.word	0x08020bbc
 8005dcc:	08020be0 	.word	0x08020be0
 8005dd0:	08020bfc 	.word	0x08020bfc
 8005dd4:	08020c30 	.word	0x08020c30
 8005dd8:	08020c34 	.word	0x08020c34
 8005ddc:	08020c38 	.word	0x08020c38
 8005de0:	080204d0 	.word	0x080204d0
 8005de4:	08020c40 	.word	0x08020c40
 8005de8:	08020c60 	.word	0x08020c60
 8005dec:	08020c90 	.word	0x08020c90
 8005df0:	08020ca8 	.word	0x08020ca8
 8005df4:	08020cbc 	.word	0x08020cbc
 8005df8:	08020cc8 	.word	0x08020cc8
 8005dfc:	08020cd0 	.word	0x08020cd0
 8005e00:	08020ce0 	.word	0x08020ce0

08005e04 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>:


boolean IridiumSBD::MRT_Iridium_shutdown(void){
 8005e04:	b590      	push	{r4, r7, lr}
 8005e06:	b08b      	sub	sp, #44	; 0x2c
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nShutting down the Iridium\r\n", 29, HAL_MAX_DELAY);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e12:	221d      	movs	r2, #29
 8005e14:	492f      	ldr	r1, [pc, #188]	; (8005ed4 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd0>)
 8005e16:	f008 fb0c 	bl	800e432 <HAL_UART_Transmit>

	// Power down the modem
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Putting the 9603N to sleep...", 29, HAL_MAX_DELAY);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e20:	221d      	movs	r2, #29
 8005e22:	492d      	ldr	r1, [pc, #180]	; (8005ed8 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd4>)
 8005e24:	f008 fb05 	bl	800e432 <HAL_UART_Transmit>
	int err = this->sleep();
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7fe fd76 	bl	800491a <_ZN10IridiumSBD5sleepEv>
 8005e2e:	6278      	str	r0, [r7, #36]	; 0x24
	if (err != ISBD_SUCCESS)
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d017      	beq.n	8005e66 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x62>
	{
		char str[24+sizeof(int)];
		sprintf(str, "sleep failed: error  %i\r\n", err);
 8005e36:	f107 0308 	add.w	r3, r7, #8
 8005e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e3c:	4927      	ldr	r1, [pc, #156]	; (8005edc <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd8>)
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f015 fd1a 	bl	801b878 <siprintf>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8005e44:	687c      	ldr	r4, [r7, #4]
 8005e46:	f107 0308 	add.w	r3, r7, #8
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7fa f9d0 	bl	80001f0 <strlen>
 8005e50:	4603      	mov	r3, r0
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	f107 0108 	add.w	r1, r7, #8
 8005e58:	f04f 33ff 	mov.w	r3, #4294967295
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	f008 fae8 	bl	800e432 <HAL_UART_Transmit>
		return false;
 8005e62:	2300      	movs	r3, #0
 8005e64:	e032      	b.n	8005ecc <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xc8>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f04f 33ff 	mov.w	r3, #4294967295
 8005e6c:	2204      	movs	r2, #4
 8005e6e:	491c      	ldr	r1, [pc, #112]	; (8005ee0 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8005e70:	f008 fadf 	bl	800e432 <HAL_UART_Transmit>

	// Disable 9603N power
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Disabling 9603N power...", 24, HAL_MAX_DELAY);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f04f 33ff 	mov.w	r3, #4294967295
 8005e7a:	2218      	movs	r2, #24
 8005e7c:	4919      	ldr	r1, [pc, #100]	; (8005ee4 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe0>)
 8005e7e:	f008 fad8 	bl	800e432 <HAL_UART_Transmit>
	this->enable9603Npower(false);
 8005e82:	2100      	movs	r1, #0
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7fe fe43 	bl	8004b10 <_ZN10IridiumSBD16enable9603NpowerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e90:	2204      	movs	r2, #4
 8005e92:	4913      	ldr	r1, [pc, #76]	; (8005ee0 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8005e94:	f008 facd 	bl	800e432 <HAL_UART_Transmit>

	// Disable the supercapacitor charger
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Disabling the supercapacitor charger...", 39, HAL_MAX_DELAY);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e9e:	2227      	movs	r2, #39	; 0x27
 8005ea0:	4911      	ldr	r1, [pc, #68]	; (8005ee8 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe4>)
 8005ea2:	f008 fac6 	bl	800e432 <HAL_UART_Transmit>
	this->enableSuperCapCharger(false);
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7fe fdc3 	bl	8004a34 <_ZN10IridiumSBD21enableSuperCapChargerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8005eb4:	2204      	movs	r2, #4
 8005eb6:	490a      	ldr	r1, [pc, #40]	; (8005ee0 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8005eb8:	f008 fabb 	bl	800e432 <HAL_UART_Transmit>

	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Iridium successfully shutdown\r\n", 32, HAL_MAX_DELAY);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	4909      	ldr	r1, [pc, #36]	; (8005eec <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe8>)
 8005ec6:	f008 fab4 	bl	800e432 <HAL_UART_Transmit>
	return true;
 8005eca:	2301      	movs	r3, #1
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	372c      	adds	r7, #44	; 0x2c
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd90      	pop	{r4, r7, pc}
 8005ed4:	08020cf4 	.word	0x08020cf4
 8005ed8:	08020d14 	.word	0x08020d14
 8005edc:	08020d34 	.word	0x08020d34
 8005ee0:	080204d0 	.word	0x080204d0
 8005ee4:	08020d50 	.word	0x08020d50
 8005ee8:	08020d6c 	.word	0x08020d6c
 8005eec:	08020d94 	.word	0x08020d94

08005ef0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>:



void IridiumSBD::MRT_Iridium_ErrorMessage(uint8_t error){
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nError:\t", 12, HAL_MAX_DELAY);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f04f 33ff 	mov.w	r3, #4294967295
 8005f02:	220c      	movs	r2, #12
 8005f04:	4948      	ldr	r1, [pc, #288]	; (8006028 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x138>)
 8005f06:	f008 fa94 	bl	800e432 <HAL_UART_Transmit>
	if (error == ISBD_ALREADY_AWAKE){
 8005f0a:	78fb      	ldrb	r3, [r7, #3]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d107      	bne.n	8005f20 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x30>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Already Awake\r\n", 17, HAL_MAX_DELAY);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f04f 33ff 	mov.w	r3, #4294967295
 8005f16:	2211      	movs	r2, #17
 8005f18:	4944      	ldr	r1, [pc, #272]	; (800602c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x13c>)
 8005f1a:	f008 fa8a 	bl	800e432 <HAL_UART_Transmit>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "DEBUG LINE REACHED\r\n", 22, HAL_MAX_DELAY);
	}
	else{
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "UNKNOWN\r\n", 11, HAL_MAX_DELAY);
	}
}
 8005f1e:	e07f      	b.n	8006020 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_SERIAL_FAILURE){
 8005f20:	78fb      	ldrb	r3, [r7, #3]
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d107      	bne.n	8005f36 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x46>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Serial Failure\r\n", 18, HAL_MAX_DELAY);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f04f 33ff 	mov.w	r3, #4294967295
 8005f2c:	2212      	movs	r2, #18
 8005f2e:	4940      	ldr	r1, [pc, #256]	; (8006030 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x140>)
 8005f30:	f008 fa7f 	bl	800e432 <HAL_UART_Transmit>
}
 8005f34:	e074      	b.n	8006020 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_PROTOCOL_ERROR){
 8005f36:	78fb      	ldrb	r3, [r7, #3]
 8005f38:	2b03      	cmp	r3, #3
 8005f3a:	d107      	bne.n	8005f4c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x5c>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Protocol Error\r\n", 18, HAL_MAX_DELAY);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f42:	2212      	movs	r2, #18
 8005f44:	493b      	ldr	r1, [pc, #236]	; (8006034 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x144>)
 8005f46:	f008 fa74 	bl	800e432 <HAL_UART_Transmit>
}
 8005f4a:	e069      	b.n	8006020 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_CANCELLED){
 8005f4c:	78fb      	ldrb	r3, [r7, #3]
 8005f4e:	2b04      	cmp	r3, #4
 8005f50:	d107      	bne.n	8005f62 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x72>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nCancelled", 13, HAL_MAX_DELAY);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f04f 33ff 	mov.w	r3, #4294967295
 8005f58:	220d      	movs	r2, #13
 8005f5a:	4937      	ldr	r1, [pc, #220]	; (8006038 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x148>)
 8005f5c:	f008 fa69 	bl	800e432 <HAL_UART_Transmit>
}
 8005f60:	e05e      	b.n	8006020 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_NO_MODEM_DETECTED){
 8005f62:	78fb      	ldrb	r3, [r7, #3]
 8005f64:	2b05      	cmp	r3, #5
 8005f66:	d107      	bne.n	8005f78 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x88>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nNo modem detected: check wiring.", 36, HAL_MAX_DELAY);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f6e:	2224      	movs	r2, #36	; 0x24
 8005f70:	4932      	ldr	r1, [pc, #200]	; (800603c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x14c>)
 8005f72:	f008 fa5e 	bl	800e432 <HAL_UART_Transmit>
}
 8005f76:	e053      	b.n	8006020 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_SBDIX_FATAL_ERROR){
 8005f78:	78fb      	ldrb	r3, [r7, #3]
 8005f7a:	2b06      	cmp	r3, #6
 8005f7c:	d107      	bne.n	8005f8e <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x9e>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "SDBIX Fatal Error\r\n", 21, HAL_MAX_DELAY);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f04f 33ff 	mov.w	r3, #4294967295
 8005f84:	2215      	movs	r2, #21
 8005f86:	492e      	ldr	r1, [pc, #184]	; (8006040 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x150>)
 8005f88:	f008 fa53 	bl	800e432 <HAL_UART_Transmit>
}
 8005f8c:	e048      	b.n	8006020 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_SENDRECEIVE_TIMEOUT){
 8005f8e:	78fb      	ldrb	r3, [r7, #3]
 8005f90:	2b07      	cmp	r3, #7
 8005f92:	d107      	bne.n	8005fa4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xb4>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Send-Receive Timeout\r\n", 24, HAL_MAX_DELAY);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f04f 33ff 	mov.w	r3, #4294967295
 8005f9a:	2218      	movs	r2, #24
 8005f9c:	4929      	ldr	r1, [pc, #164]	; (8006044 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x154>)
 8005f9e:	f008 fa48 	bl	800e432 <HAL_UART_Transmit>
}
 8005fa2:	e03d      	b.n	8006020 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_RX_OVERFLOW){
 8005fa4:	78fb      	ldrb	r3, [r7, #3]
 8005fa6:	2b08      	cmp	r3, #8
 8005fa8:	d107      	bne.n	8005fba <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xca>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "RX Overflow\r\n", 15, HAL_MAX_DELAY);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb0:	220f      	movs	r2, #15
 8005fb2:	4925      	ldr	r1, [pc, #148]	; (8006048 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x158>)
 8005fb4:	f008 fa3d 	bl	800e432 <HAL_UART_Transmit>
}
 8005fb8:	e032      	b.n	8006020 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_REENTRANT){
 8005fba:	78fb      	ldrb	r3, [r7, #3]
 8005fbc:	2b09      	cmp	r3, #9
 8005fbe:	d107      	bne.n	8005fd0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xe0>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "REENTRANT\r\n", 13, HAL_MAX_DELAY);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fc6:	220d      	movs	r2, #13
 8005fc8:	4920      	ldr	r1, [pc, #128]	; (800604c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x15c>)
 8005fca:	f008 fa32 	bl	800e432 <HAL_UART_Transmit>
}
 8005fce:	e027      	b.n	8006020 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_IS_ASLEEP){
 8005fd0:	78fb      	ldrb	r3, [r7, #3]
 8005fd2:	2b0a      	cmp	r3, #10
 8005fd4:	d107      	bne.n	8005fe6 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf6>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Is Asleep\r\n", 13, HAL_MAX_DELAY);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fdc:	220d      	movs	r2, #13
 8005fde:	491c      	ldr	r1, [pc, #112]	; (8006050 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x160>)
 8005fe0:	f008 fa27 	bl	800e432 <HAL_UART_Transmit>
}
 8005fe4:	e01c      	b.n	8006020 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_NO_SLEEP_PIN){
 8005fe6:	78fb      	ldrb	r3, [r7, #3]
 8005fe8:	2b0b      	cmp	r3, #11
 8005fea:	d107      	bne.n	8005ffc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x10c>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "No Sleep Pin\r\n", 16, HAL_MAX_DELAY);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f04f 33ff 	mov.w	r3, #4294967295
 8005ff2:	2210      	movs	r2, #16
 8005ff4:	4917      	ldr	r1, [pc, #92]	; (8006054 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x164>)
 8005ff6:	f008 fa1c 	bl	800e432 <HAL_UART_Transmit>
}
 8005ffa:	e011      	b.n	8006020 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if(error == 20){
 8005ffc:	78fb      	ldrb	r3, [r7, #3]
 8005ffe:	2b14      	cmp	r3, #20
 8006000:	d107      	bne.n	8006012 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x122>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "DEBUG LINE REACHED\r\n", 22, HAL_MAX_DELAY);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f04f 33ff 	mov.w	r3, #4294967295
 8006008:	2216      	movs	r2, #22
 800600a:	4913      	ldr	r1, [pc, #76]	; (8006058 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x168>)
 800600c:	f008 fa11 	bl	800e432 <HAL_UART_Transmit>
}
 8006010:	e006      	b.n	8006020 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "UNKNOWN\r\n", 11, HAL_MAX_DELAY);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f04f 33ff 	mov.w	r3, #4294967295
 8006018:	220b      	movs	r2, #11
 800601a:	4910      	ldr	r1, [pc, #64]	; (800605c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x16c>)
 800601c:	f008 fa09 	bl	800e432 <HAL_UART_Transmit>
}
 8006020:	bf00      	nop
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	08020db4 	.word	0x08020db4
 800602c:	08020dc0 	.word	0x08020dc0
 8006030:	08020dd0 	.word	0x08020dd0
 8006034:	08020de4 	.word	0x08020de4
 8006038:	08020df8 	.word	0x08020df8
 800603c:	08020e04 	.word	0x08020e04
 8006040:	08020e28 	.word	0x08020e28
 8006044:	08020e3c 	.word	0x08020e3c
 8006048:	08020e54 	.word	0x08020e54
 800604c:	08020e64 	.word	0x08020e64
 8006050:	08020e70 	.word	0x08020e70
 8006054:	08020e7c 	.word	0x08020e7c
 8006058:	08020e8c 	.word	0x08020e8c
 800605c:	08020ea4 	.word	0x08020ea4

08006060 <_ZN10IridiumSBDC1ER7TwoWireh>:
      if (ringPin != -1)
         pinMode(ringPin, INPUT);
   }
   */

IridiumSBD(TwoWire &wirePort = MRT_IRIDIUM_I2C, uint8_t deviceAddress = 0x63)
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	4613      	mov	r3, r2
 800606c:	71fb      	strb	r3, [r7, #7]
   {
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2205      	movs	r2, #5
 800607a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2202      	movs	r2, #2
 800608a:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2204      	movs	r2, #4
 8006092:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2208      	movs	r2, #8
 800609a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2210      	movs	r2, #16
 80060a2:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2240      	movs	r2, #64	; 0x40
 80060b2:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
      useSerial = false;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      wireport = &wirePort;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	64da      	str	r2, [r3, #76]	; 0x4c
      deviceaddress = deviceAddress;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	79fa      	ldrb	r2, [r7, #7]
 80060c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      sbdixInterval = ISBD_USB_SBDIX_INTERVAL;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	221e      	movs	r2, #30
 80060d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      atTimeout = ISBD_DEFAULT_AT_TIMEOUT;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	221e      	movs	r2, #30
 80060d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      sendReceiveTimeout = ISBD_DEFAULT_SENDRECEIVE_TIME;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80060e2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
      startupTimeout = ISBD_STARTUP_MAX_TIME;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	22f0      	movs	r2, #240	; 0xf0
 80060ea:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
      remainingMessages = -1;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f04f 32ff 	mov.w	r2, #4294967295
 80060f4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
      asleep = true;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
      reentrant = false;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
      sleepPin = -1;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f04f 32ff 	mov.w	r2, #4294967295
 800610e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
      sleepPinConfigured = false;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
      ringPin = -1;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f04f 32ff 	mov.w	r2, #4294967295
 8006120:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
      msstmWorkaroundRequested = false;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
      ringAlertsEnabled = true;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
      ringAsserted = false;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
      lastPowerOnTime = 0UL;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
      head = SBDRING;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4a0d      	ldr	r2, [pc, #52]	; (800617c <_ZN10IridiumSBDC1ER7TwoWireh+0x11c>)
 8006148:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
      tail = SBDRING;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	4a0b      	ldr	r2, [pc, #44]	; (800617c <_ZN10IridiumSBDC1ER7TwoWireh+0x11c>)
 8006150:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
      nextChar = -1;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f04f 32ff 	mov.w	r2, #4294967295
 800615a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
      i2c_ser_buffer_tail = 0;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      i2c_ser_buffer_head = 0;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   }
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4618      	mov	r0, r3
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	080215ec 	.word	0x080215ec

08006180 <MRT_Static_Iridium_Constructor>:
#endif

static IridiumSBD *E_T = NULL;


void MRT_Static_Iridium_Constructor(){
 8006180:	b598      	push	{r3, r4, r7, lr}
 8006182:	af00      	add	r7, sp, #0
	if (E_T==NULL){
 8006184:	4b08      	ldr	r3, [pc, #32]	; (80061a8 <MRT_Static_Iridium_Constructor+0x28>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10b      	bne.n	80061a4 <MRT_Static_Iridium_Constructor+0x24>
		E_T = new IridiumSBD();
 800618c:	20e4      	movs	r0, #228	; 0xe4
 800618e:	f013 f9b7 	bl	8019500 <_Znwj>
 8006192:	4603      	mov	r3, r0
 8006194:	461c      	mov	r4, r3
 8006196:	2263      	movs	r2, #99	; 0x63
 8006198:	4904      	ldr	r1, [pc, #16]	; (80061ac <MRT_Static_Iridium_Constructor+0x2c>)
 800619a:	4620      	mov	r0, r4
 800619c:	f7ff ff60 	bl	8006060 <_ZN10IridiumSBDC1ER7TwoWireh>
 80061a0:	4b01      	ldr	r3, [pc, #4]	; (80061a8 <MRT_Static_Iridium_Constructor+0x28>)
 80061a2:	601c      	str	r4, [r3, #0]
	}
}
 80061a4:	bf00      	nop
 80061a6:	bd98      	pop	{r3, r4, r7, pc}
 80061a8:	2000043c 	.word	0x2000043c
 80061ac:	200004f8 	.word	0x200004f8

080061b0 <MRT_Static_Iridium_Destructor>:

void MRT_Static_Iridium_Destructor(){
 80061b0:	b480      	push	{r7}
 80061b2:	af00      	add	r7, sp, #0
	if (E_T!=NULL){
 80061b4:	4b05      	ldr	r3, [pc, #20]	; (80061cc <MRT_Static_Iridium_Destructor+0x1c>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d002      	beq.n	80061c2 <MRT_Static_Iridium_Destructor+0x12>
		E_T = NULL;
 80061bc:	4b03      	ldr	r3, [pc, #12]	; (80061cc <MRT_Static_Iridium_Destructor+0x1c>)
 80061be:	2200      	movs	r2, #0
 80061c0:	601a      	str	r2, [r3, #0]
	}
}
 80061c2:	bf00      	nop
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	2000043c 	.word	0x2000043c

080061d0 <MRT_Static_Iridium_Setup>:


uint8_t MRT_Static_Iridium_Setup(UART_HandleTypeDef huart){
 80061d0:	b084      	sub	sp, #16
 80061d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061d4:	b08f      	sub	sp, #60	; 0x3c
 80061d6:	af0e      	add	r7, sp, #56	; 0x38
 80061d8:	f107 0418 	add.w	r4, r7, #24
 80061dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MRT_Static_Iridium_Constructor();
 80061e0:	f7ff ffce 	bl	8006180 <MRT_Static_Iridium_Constructor>
	return E_T->MRT_Iridium_setup(huart);
 80061e4:	4b0e      	ldr	r3, [pc, #56]	; (8006220 <MRT_Static_Iridium_Setup+0x50>)
 80061e6:	681e      	ldr	r6, [r3, #0]
 80061e8:	466d      	mov	r5, sp
 80061ea:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80061ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80061fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8006202:	f107 0318 	add.w	r3, r7, #24
 8006206:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006208:	4630      	mov	r0, r6
 800620a:	f7ff fd03 	bl	8005c14 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef>
 800620e:	4603      	mov	r3, r0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3704      	adds	r7, #4
 8006214:	46bd      	mov	sp, r7
 8006216:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800621a:	b004      	add	sp, #16
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	2000043c 	.word	0x2000043c

08006224 <MRT_Static_Iridium_Shutdown>:

bool MRT_Static_Iridium_Shutdown(void){
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
	bool b = E_T->MRT_Iridium_shutdown();
 800622a:	4b09      	ldr	r3, [pc, #36]	; (8006250 <MRT_Static_Iridium_Shutdown+0x2c>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4618      	mov	r0, r3
 8006230:	f7ff fde8 	bl	8005e04 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	bf14      	ite	ne
 800623a:	2301      	movne	r3, #1
 800623c:	2300      	moveq	r3, #0
 800623e:	71fb      	strb	r3, [r7, #7]
	MRT_Static_Iridium_Destructor();
 8006240:	f7ff ffb6 	bl	80061b0 <MRT_Static_Iridium_Destructor>
	return b;
 8006244:	79fb      	ldrb	r3, [r7, #7]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3708      	adds	r7, #8
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	2000043c 	.word	0x2000043c

08006254 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8006254:	b590      	push	{r4, r7, lr}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d101      	bne.n	8006268 <_ZN5Print5writeEPKc+0x14>
 8006264:	2300      	movs	r3, #0
 8006266:	e00d      	b.n	8006284 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3304      	adds	r3, #4
 800626e:	681c      	ldr	r4, [r3, #0]
 8006270:	6838      	ldr	r0, [r7, #0]
 8006272:	f7f9 ffbd 	bl	80001f0 <strlen>
 8006276:	4603      	mov	r3, r0
 8006278:	461a      	mov	r2, r3
 800627a:	6839      	ldr	r1, [r7, #0]
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	47a0      	blx	r4
 8006280:	4603      	mov	r3, r0
 8006282:	bf00      	nop
    }
 8006284:	4618      	mov	r0, r3
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	bd90      	pop	{r4, r7, pc}

0800628c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8006298:	2300      	movs	r3, #0
 800629a:	617b      	str	r3, [r7, #20]
  while (size--) {
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	1e5a      	subs	r2, r3, #1
 80062a0:	607a      	str	r2, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	bf14      	ite	ne
 80062a6:	2301      	movne	r3, #1
 80062a8:	2300      	moveq	r3, #0
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00e      	beq.n	80062ce <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	1c59      	adds	r1, r3, #1
 80062ba:	60b9      	str	r1, [r7, #8]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	4619      	mov	r1, r3
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	4790      	blx	r2
 80062c4:	4602      	mov	r2, r0
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	4413      	add	r3, r2
 80062ca:	617b      	str	r3, [r7, #20]
  while (size--) {
 80062cc:	e7e6      	b.n	800629c <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 80062ce:	697b      	ldr	r3, [r7, #20]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3718      	adds	r7, #24
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 80062e2:	6839      	ldr	r1, [r7, #0]
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f805 	bl	80062f4 <_ZN5Print5printEPKc>
 80062ea:	4603      	mov	r3, r0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3708      	adds	r7, #8
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
  return write(str);
 80062fe:	6839      	ldr	r1, [r7, #0]
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7ff ffa7 	bl	8006254 <_ZN5Print5writeEPKc>
 8006306:	4603      	mov	r3, r0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3708      	adds	r7, #8
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	4a06      	ldr	r2, [pc, #24]	; (8006334 <_ZN5PrintC1Ev+0x24>)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	601a      	str	r2, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	605a      	str	r2, [r3, #4]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4618      	mov	r0, r3
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	08021600 	.word	0x08021600

08006338 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4618      	mov	r0, r3
 8006344:	f7ff ffe4 	bl	8006310 <_ZN5PrintC1Ev>
 8006348:	4a05      	ldr	r2, [pc, #20]	; (8006360 <_ZN6StreamC1Ev+0x28>)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	601a      	str	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006354:	609a      	str	r2, [r3, #8]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4618      	mov	r0, r3
 800635a:	3708      	adds	r7, #8
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	08021630 	.word	0x08021630

08006364 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4618      	mov	r0, r3
 8006372:	f7ff ffe1 	bl	8006338 <_ZN6StreamC1Ev>
 8006376:	4a16      	ldr	r2, [pc, #88]	; (80063d0 <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	3390      	adds	r3, #144	; 0x90
 8006386:	2220      	movs	r2, #32
 8006388:	2100      	movs	r1, #0
 800638a:	4618      	mov	r0, r3
 800638c:	f014 f9f6 	bl	801a77c <memset>
  rxBufferIndex = 0;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4618      	mov	r0, r3
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	08021610 	.word	0x08021610

080063d4 <_ZN7TwoWire11requestFromEhhh>:
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  HAL_I2C_Init(&I2cHandle);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af02      	add	r7, sp, #8
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	4608      	mov	r0, r1
 80063de:	4611      	mov	r1, r2
 80063e0:	461a      	mov	r2, r3
 80063e2:	4603      	mov	r3, r0
 80063e4:	70fb      	strb	r3, [r7, #3]
 80063e6:	460b      	mov	r3, r1
 80063e8:	70bb      	strb	r3, [r7, #2]
 80063ea:	4613      	mov	r3, r2
 80063ec:	707b      	strb	r3, [r7, #1]
  uint8_t ret_val;

  disableInterrupt();
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fc24 	bl	8006c3c <_ZN7TwoWire16disableInterruptEv>

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
 80063f4:	78bb      	ldrb	r3, [r7, #2]
 80063f6:	2b20      	cmp	r3, #32
 80063f8:	d901      	bls.n	80063fe <_ZN7TwoWire11requestFromEhhh+0x2a>
    quantity = BUFFER_LENGTH;
 80063fa:	2320      	movs	r3, #32
 80063fc:	70bb      	strb	r3, [r7, #2]
  }
  // perform blocking read into buffer
  int read = i2c_master_read((address << 1), (char *)rxBuffer, quantity, sendStop);
 80063fe:	78fb      	ldrb	r3, [r7, #3]
 8006400:	005b      	lsls	r3, r3, #1
 8006402:	b2d9      	uxtb	r1, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f103 0290 	add.w	r2, r3, #144	; 0x90
 800640a:	78b8      	ldrb	r0, [r7, #2]
 800640c:	787b      	ldrb	r3, [r7, #1]
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	4603      	mov	r3, r0
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f9cf 	bl	80067b6 <_ZN7TwoWire15i2c_master_readEhPchh>
 8006418:	60b8      	str	r0, [r7, #8]

  if(read < 0)
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	2b00      	cmp	r3, #0
 800641e:	da02      	bge.n	8006426 <_ZN7TwoWire11requestFromEhhh+0x52>
  {
    ret_val = 0;
 8006420:	2300      	movs	r3, #0
 8006422:	73fb      	strb	r3, [r7, #15]
 8006424:	e001      	b.n	800642a <_ZN7TwoWire11requestFromEhhh+0x56>
  }else
  {
    ret_val = read;
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	73fb      	strb	r3, [r7, #15]
  }

  // set rx buffer iterator vars
  rxBufferIndex = 0;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = ret_val;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	7bfa      	ldrb	r2, [r7, #15]
 8006436:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

  enableInterrupt();
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 fbcc 	bl	8006bd8 <_ZN7TwoWire15enableInterruptEv>

  return ret_val;
 8006440:	7bfb      	ldrb	r3, [r7, #15]
}
 8006442:	4618      	mov	r0, r3
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b082      	sub	sp, #8
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	460b      	mov	r3, r1
 8006454:	70fb      	strb	r3, [r7, #3]
 8006456:	4613      	mov	r3, r2
 8006458:	70bb      	strb	r3, [r7, #2]
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 800645a:	78ba      	ldrb	r2, [r7, #2]
 800645c:	78f9      	ldrb	r1, [r7, #3]
 800645e:	2301      	movs	r3, #1
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f7ff ffb7 	bl	80063d4 <_ZN7TwoWire11requestFromEhhh>
 8006466:	4603      	mov	r3, r0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3708      	adds	r7, #8
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <_ZN7TwoWire17beginTransmissionEh>:
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	460b      	mov	r3, r1
 800647a:	70fb      	strb	r3, [r7, #3]
  // indicate that we are transmitting
  transmitting = 1;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  // set address of targeted slave
  txAddress = address;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	78fa      	ldrb	r2, [r7, #3]
 8006488:	741a      	strb	r2, [r3, #16]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 800649a:	bf00      	nop
 800649c:	370c      	adds	r7, #12
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <_ZN7TwoWire15endTransmissionEh>:
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b086      	sub	sp, #24
 80064aa:	af02      	add	r7, sp, #8
 80064ac:	6078      	str	r0, [r7, #4]
 80064ae:	460b      	mov	r3, r1
 80064b0:	70fb      	strb	r3, [r7, #3]
  // transmit buffer (blocking)
  disableInterrupt();
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fbc2 	bl	8006c3c <_ZN7TwoWire16disableInterruptEv>

  int8_t ret = i2c_master_write((txAddress << 1), (const char *)txBuffer, txBufferLength, sendStop);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	7c1b      	ldrb	r3, [r3, #16]
 80064bc:	0059      	lsls	r1, r3, #1
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f103 0211 	add.w	r2, r3, #17
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80064ca:	4618      	mov	r0, r3
 80064cc:	78fb      	ldrb	r3, [r7, #3]
 80064ce:	9300      	str	r3, [sp, #0]
 80064d0:	4603      	mov	r3, r0
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 fa00 	bl	80068d8 <_ZN7TwoWire16i2c_master_writeEiPKcii>
 80064d8:	4603      	mov	r3, r0
 80064da:	73fb      	strb	r3, [r7, #15]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  // indicate that we are done transmitting
  transmitting = 0;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  enableInterrupt();
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 fb6f 	bl	8006bd8 <_ZN7TwoWire15enableInterruptEv>

  return ret;
 80064fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <_ZN7TwoWire15endTransmissionEv>:

//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  return endTransmission(true);
 800650c:	2101      	movs	r1, #1
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7ff ffc9 	bl	80064a6 <_ZN7TwoWire15endTransmissionEh>
 8006514:	4603      	mov	r3, r0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b082      	sub	sp, #8
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	460b      	mov	r3, r1
 8006528:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006530:	2b00      	cmp	r3, #0
 8006532:	d01d      	beq.n	8006570 <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800653a:	2b1f      	cmp	r3, #31
 800653c:	d901      	bls.n	8006542 <_ZN7TwoWire5writeEh+0x24>
      return 0;
 800653e:	2300      	movs	r3, #0
 8006540:	e028      	b.n	8006594 <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006548:	4619      	mov	r1, r3
 800654a:	78fa      	ldrb	r2, [r7, #3]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	440b      	add	r3, r1
 8006550:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006558:	3301      	adds	r3, #1
 800655a:	b2da      	uxtb	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800656e:	e010      	b.n	8006592 <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 fb63 	bl	8006c3c <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 8006576:	1cfb      	adds	r3, r7, #3
 8006578:	2201      	movs	r2, #1
 800657a:	4619      	mov	r1, r3
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 fa95 	bl	8006aac <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fb28 	bl	8006bd8 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	333c      	adds	r3, #60	; 0x3c
 800658c:	4618      	mov	r0, r3
 800658e:	f003 f91b 	bl	80097c8 <HAL_I2C_EnableListen_IT>
  }
  return 1;
 8006592:	2301      	movs	r3, #1
}
 8006594:	4618      	mov	r0, r3
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
  if(transmitting){
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d013      	beq.n	80065da <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 80065b2:	2300      	movs	r3, #0
 80065b4:	617b      	str	r3, [r7, #20]
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d21e      	bcs.n	80065fc <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68b9      	ldr	r1, [r7, #8]
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	440a      	add	r2, r1
 80065ca:	7812      	ldrb	r2, [r2, #0]
 80065cc:	4611      	mov	r1, r2
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	3301      	adds	r3, #1
 80065d6:	617b      	str	r3, [r7, #20]
 80065d8:	e7ed      	b.n	80065b6 <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f000 fb2e 	bl	8006c3c <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	461a      	mov	r2, r3
 80065e4:	68b9      	ldr	r1, [r7, #8]
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f000 fa60 	bl	8006aac <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f000 faf3 	bl	8006bd8 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	333c      	adds	r3, #60	; 0x3c
 80065f6:	4618      	mov	r0, r3
 80065f8:	f003 f8e6 	bl	80097c8 <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 80065fc:	687b      	ldr	r3, [r7, #4]
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3718      	adds	r7, #24
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 8006606:	b480      	push	{r7}
 8006608:	b083      	sub	sp, #12
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006614:	b2db      	uxtb	r3, r3
 8006616:	461a      	mov	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800661e:	b2db      	uxtb	r3, r3
 8006620:	1ad3      	subs	r3, r2, r3
}
 8006622:	4618      	mov	r0, r3
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 800662e:	b480      	push	{r7}
 8006630:	b085      	sub	sp, #20
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  int value = -1;
 8006636:	f04f 33ff 	mov.w	r3, #4294967295
 800663a:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006642:	b2da      	uxtb	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800664a:	b2db      	uxtb	r3, r3
 800664c:	429a      	cmp	r2, r3
 800664e:	bf34      	ite	cc
 8006650:	2301      	movcc	r3, #1
 8006652:	2300      	movcs	r3, #0
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d012      	beq.n	8006680 <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006660:	b2db      	uxtb	r3, r3
 8006662:	461a      	mov	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4413      	add	r3, r2
 8006668:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800666c:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006674:	b2db      	uxtb	r3, r3
 8006676:	3301      	adds	r3, #1
 8006678:	b2da      	uxtb	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 8006680:	68fb      	ldr	r3, [r7, #12]
}
 8006682:	4618      	mov	r0, r3
 8006684:	3714      	adds	r7, #20
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr

0800668e <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 800668e:	b480      	push	{r7}
 8006690:	b085      	sub	sp, #20
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  int value = -1;
 8006696:	f04f 33ff 	mov.w	r3, #4294967295
 800669a:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	429a      	cmp	r2, r3
 80066ae:	bf34      	ite	cc
 80066b0:	2301      	movcc	r3, #1
 80066b2:	2300      	movcs	r3, #0
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d009      	beq.n	80066ce <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	461a      	mov	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4413      	add	r3, r2
 80066c8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80066cc:	60fb      	str	r3, [r7, #12]
  }

  return value;
 80066ce:	68fb      	ldr	r3, [r7, #12]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3714      	adds	r7, #20
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <_ZN7TwoWire16i2c_master_startEv>:
{
  user_onRequest = function;
}

int TwoWire::i2c_master_start()
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066fc:	60bb      	str	r3, [r7, #8]

    int timeout;

    // Clear Acknowledge failure flag
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006702:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006706:	615a      	str	r2, [r3, #20]

    // Wait the STOP condition has been previously correctly sent
  // This timeout can be avoid in some specific cases by simply clearing the STOP bit
    timeout = FLAG_TIMEOUT;
 8006708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800670c:	60fb      	str	r3, [r7, #12]
    while ((i2c->CR1 & I2C_CR1_STOP) == I2C_CR1_STOP) {
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800671a:	bf0c      	ite	eq
 800671c:	2301      	moveq	r3, #1
 800671e:	2300      	movne	r3, #0
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00b      	beq.n	800673e <_ZN7TwoWire16i2c_master_startEv+0x4e>
        if ((timeout--) == 0) {
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	1e5a      	subs	r2, r3, #1
 800672a:	60fa      	str	r2, [r7, #12]
 800672c:	2b00      	cmp	r3, #0
 800672e:	bf0c      	ite	eq
 8006730:	2301      	moveq	r3, #1
 8006732:	2300      	movne	r3, #0
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d0e9      	beq.n	800670e <_ZN7TwoWire16i2c_master_startEv+0x1e>
            return 1;
 800673a:	2301      	movs	r3, #1
 800673c:	e021      	b.n	8006782 <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    // Generate the START condition
    i2c->CR1 |= I2C_CR1_START;
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	601a      	str	r2, [r3, #0]

    // Wait the START condition has been correctly sent
    timeout = FLAG_TIMEOUT;
 800674a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800674e:	60fb      	str	r3, [r7, #12]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	2b01      	cmp	r3, #1
 800675c:	bf14      	ite	ne
 800675e:	2301      	movne	r3, #1
 8006760:	2300      	moveq	r3, #0
 8006762:	b2db      	uxtb	r3, r3
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00b      	beq.n	8006780 <_ZN7TwoWire16i2c_master_startEv+0x90>
        if ((timeout--) == 0) {
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	1e5a      	subs	r2, r3, #1
 800676c:	60fa      	str	r2, [r7, #12]
 800676e:	2b00      	cmp	r3, #0
 8006770:	bf0c      	ite	eq
 8006772:	2301      	moveq	r3, #1
 8006774:	2300      	movne	r3, #0
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b00      	cmp	r3, #0
 800677a:	d0e9      	beq.n	8006750 <_ZN7TwoWire16i2c_master_startEv+0x60>
            return 1;
 800677c:	2301      	movs	r3, #1
 800677e:	e000      	b.n	8006782 <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    return 0;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <_ZN7TwoWire15i2c_master_stopEv>:

int TwoWire::i2c_master_stop()
{
 800678e:	b480      	push	{r7}
 8006790:	b085      	sub	sp, #20
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800679a:	60fb      	str	r3, [r7, #12]

    // Generate the STOP condition
    i2c->CR1 |= I2C_CR1_STOP;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	601a      	str	r2, [r3, #0]

    return 0;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <_ZN7TwoWire15i2c_master_readEhPchh>:

int TwoWire::i2c_master_read(uint8_t address, char *data, uint8_t length, uint8_t stop)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b08a      	sub	sp, #40	; 0x28
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	60f8      	str	r0, [r7, #12]
 80067be:	607a      	str	r2, [r7, #4]
 80067c0:	461a      	mov	r2, r3
 80067c2:	460b      	mov	r3, r1
 80067c4:	72fb      	strb	r3, [r7, #11]
 80067c6:	4613      	mov	r3, r2
 80067c8:	72bb      	strb	r3, [r7, #10]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ce:	61fb      	str	r3, [r7, #28]
    int timeout;
    int count;
    int value;
    int ret;

    i2c_master_start();
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f7ff ff8d 	bl	80066f0 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 80067d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067da:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	bf14      	ite	ne
 80067ea:	2301      	movne	r3, #1
 80067ec:	2300      	moveq	r3, #0
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d008      	beq.n	8006806 <_ZN7TwoWire15i2c_master_readEhPchh+0x50>
        timeout--;
 80067f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f6:	3b01      	subs	r3, #1
 80067f8:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 80067fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1ed      	bne.n	80067dc <_ZN7TwoWire15i2c_master_readEhPchh+0x26>
            return -1;
 8006800:	f04f 33ff 	mov.w	r3, #4294967295
 8006804:	e064      	b.n	80068d0 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_READ(address);
 8006806:	7afb      	ldrb	r3, [r7, #11]
 8006808:	f043 0301 	orr.w	r3, r3, #1
 800680c:	b2db      	uxtb	r3, r3
 800680e:	461a      	mov	r2, r3
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 8006814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006818:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	f003 0302 	and.w	r3, r3, #2
 8006824:	2b02      	cmp	r3, #2
 8006826:	bf14      	ite	ne
 8006828:	2301      	movne	r3, #1
 800682a:	2300      	moveq	r3, #0
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d008      	beq.n	8006844 <_ZN7TwoWire15i2c_master_readEhPchh+0x8e>
        timeout--;
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	3b01      	subs	r3, #1
 8006836:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1ed      	bne.n	800681a <_ZN7TwoWire15i2c_master_readEhPchh+0x64>
            return -1;
 800683e:	f04f 33ff 	mov.w	r3, #4294967295
 8006842:	e045      	b.n	80068d0 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 8006844:	2300      	movs	r3, #0
 8006846:	613b      	str	r3, [r7, #16]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	613b      	str	r3, [r7, #16]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	613b      	str	r3, [r7, #16]
 8006858:	693b      	ldr	r3, [r7, #16]

    // Read all bytes except last one
    for (count = 0; count < (length - 1); count++) {
 800685a:	2300      	movs	r3, #0
 800685c:	623b      	str	r3, [r7, #32]
 800685e:	7abb      	ldrb	r3, [r7, #10]
 8006860:	3b01      	subs	r3, #1
 8006862:	6a3a      	ldr	r2, [r7, #32]
 8006864:	429a      	cmp	r2, r3
 8006866:	da17      	bge.n	8006898 <_ZN7TwoWire15i2c_master_readEhPchh+0xe2>
        ret = i2c_master_byte_read(&value, 0);
 8006868:	f107 0314 	add.w	r3, r7, #20
 800686c:	2200      	movs	r2, #0
 800686e:	4619      	mov	r1, r3
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f000 f8a4 	bl	80069be <_ZN7TwoWire20i2c_master_byte_readEPii>
 8006876:	61b8      	str	r0, [r7, #24]
        if(ret)
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d002      	beq.n	8006884 <_ZN7TwoWire15i2c_master_readEhPchh+0xce>
        {
          return -1;
 800687e:	f04f 33ff 	mov.w	r3, #4294967295
 8006882:	e025      	b.n	80068d0 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
        data[count] = (char)value;
 8006884:	6979      	ldr	r1, [r7, #20]
 8006886:	6a3b      	ldr	r3, [r7, #32]
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	4413      	add	r3, r2
 800688c:	b2ca      	uxtb	r2, r1
 800688e:	701a      	strb	r2, [r3, #0]
    for (count = 0; count < (length - 1); count++) {
 8006890:	6a3b      	ldr	r3, [r7, #32]
 8006892:	3301      	adds	r3, #1
 8006894:	623b      	str	r3, [r7, #32]
 8006896:	e7e2      	b.n	800685e <_ZN7TwoWire15i2c_master_readEhPchh+0xa8>
    }

    // If not repeated start, send stop.
    // Warning: must be done BEFORE the data is read.
    if (stop) {
 8006898:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800689c:	2b00      	cmp	r3, #0
 800689e:	d002      	beq.n	80068a6 <_ZN7TwoWire15i2c_master_readEhPchh+0xf0>
        i2c_master_stop();
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f7ff ff74 	bl	800678e <_ZN7TwoWire15i2c_master_stopEv>
    }

    // Read the last byte
    ret = i2c_master_byte_read(&value, 1);
 80068a6:	f107 0314 	add.w	r3, r7, #20
 80068aa:	2201      	movs	r2, #1
 80068ac:	4619      	mov	r1, r3
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f000 f885 	bl	80069be <_ZN7TwoWire20i2c_master_byte_readEPii>
 80068b4:	61b8      	str	r0, [r7, #24]
    if(ret)
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d002      	beq.n	80068c2 <_ZN7TwoWire15i2c_master_readEhPchh+0x10c>
    {
      return -1;
 80068bc:	f04f 33ff 	mov.w	r3, #4294967295
 80068c0:	e006      	b.n	80068d0 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
    }
    data[count] = (char)value;
 80068c2:	6979      	ldr	r1, [r7, #20]
 80068c4:	6a3b      	ldr	r3, [r7, #32]
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	4413      	add	r3, r2
 80068ca:	b2ca      	uxtb	r2, r1
 80068cc:	701a      	strb	r2, [r3, #0]

    return length;
 80068ce:	7abb      	ldrb	r3, [r7, #10]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3728      	adds	r7, #40	; 0x28
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <_ZN7TwoWire16i2c_master_writeEiPKcii>:

int TwoWire::i2c_master_write(int address, const char *data, int length, int stop)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b088      	sub	sp, #32
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
 80068e4:	603b      	str	r3, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ea:	617b      	str	r3, [r7, #20]
    int timeout;
    int count;

    i2c_master_start();
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f7ff feff 	bl	80066f0 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 80068f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068f6:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	2b01      	cmp	r3, #1
 8006904:	bf14      	ite	ne
 8006906:	2301      	movne	r3, #1
 8006908:	2300      	moveq	r3, #0
 800690a:	b2db      	uxtb	r3, r3
 800690c:	2b00      	cmp	r3, #0
 800690e:	d007      	beq.n	8006920 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x48>
        timeout--;
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	3b01      	subs	r3, #1
 8006914:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1ed      	bne.n	80068f8 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x20>
            return 4;
 800691c:	2304      	movs	r3, #4
 800691e:	e04a      	b.n	80069b6 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_WRITE(address);
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	b2db      	uxtb	r3, r3
 8006924:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 800692c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006930:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	f003 0302 	and.w	r3, r3, #2
 800693c:	2b02      	cmp	r3, #2
 800693e:	bf14      	ite	ne
 8006940:	2301      	movne	r3, #1
 8006942:	2300      	moveq	r3, #0
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d007      	beq.n	800695a <_ZN7TwoWire16i2c_master_writeEiPKcii+0x82>
        timeout--;
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	3b01      	subs	r3, #1
 800694e:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1ed      	bne.n	8006932 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x5a>
            return 2;
 8006956:	2302      	movs	r3, #2
 8006958:	e02d      	b.n	80069b6 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 800695a:	2300      	movs	r3, #0
 800695c:	613b      	str	r3, [r7, #16]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006962:	695b      	ldr	r3, [r3, #20]
 8006964:	613b      	str	r3, [r7, #16]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	613b      	str	r3, [r7, #16]
 800696e:	693b      	ldr	r3, [r7, #16]

    for (count = 0; count < length; count++) {
 8006970:	2300      	movs	r3, #0
 8006972:	61bb      	str	r3, [r7, #24]
 8006974:	69ba      	ldr	r2, [r7, #24]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	429a      	cmp	r2, r3
 800697a:	da15      	bge.n	80069a8 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xd0>
        if (i2c_master_byte_write(data[count]) != 1) {
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	4413      	add	r3, r2
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	4619      	mov	r1, r3
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f000 f85a 	bl	8006a40 <_ZN7TwoWire21i2c_master_byte_writeEi>
 800698c:	4603      	mov	r3, r0
 800698e:	2b01      	cmp	r3, #1
 8006990:	bf14      	ite	ne
 8006992:	2301      	movne	r3, #1
 8006994:	2300      	moveq	r3, #0
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b00      	cmp	r3, #0
 800699a:	d001      	beq.n	80069a0 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xc8>
            return 3;
 800699c:	2303      	movs	r3, #3
 800699e:	e00a      	b.n	80069b6 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
    for (count = 0; count < length; count++) {
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	3301      	adds	r3, #1
 80069a4:	61bb      	str	r3, [r7, #24]
 80069a6:	e7e5      	b.n	8006974 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x9c>
        }
    }

    // If not repeated start, send stop.
    if (stop) {
 80069a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d002      	beq.n	80069b4 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xdc>
        i2c_master_stop();
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f7ff feed 	bl	800678e <_ZN7TwoWire15i2c_master_stopEv>
    }

    return 0;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3720      	adds	r7, #32
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <_ZN7TwoWire20i2c_master_byte_readEPii>:

int TwoWire::i2c_master_byte_read(int *value, int last)
{
 80069be:	b480      	push	{r7}
 80069c0:	b087      	sub	sp, #28
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	60f8      	str	r0, [r7, #12]
 80069c6:	60b9      	str	r1, [r7, #8]
 80069c8:	607a      	str	r2, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ce:	613b      	str	r3, [r7, #16]
    int timeout;

    if (last) {
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d006      	beq.n	80069e4 <_ZN7TwoWire20i2c_master_byte_readEPii+0x26>
        // Don't acknowledge the last byte
        i2c->CR1 &= ~I2C_CR1_ACK;
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	601a      	str	r2, [r3, #0]
 80069e2:	e005      	b.n	80069f0 <_ZN7TwoWire20i2c_master_byte_readEPii+0x32>
    } else {
        // Acknowledge the byte
        i2c->CR1 |= I2C_CR1_ACK;
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	601a      	str	r2, [r3, #0]
    }

    // Wait until the byte is received
    timeout = FLAG_TIMEOUT;
 80069f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069f4:	617b      	str	r3, [r7, #20]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_RXNE) == RESET) {
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069fa:	695b      	ldr	r3, [r3, #20]
 80069fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a00:	2b40      	cmp	r3, #64	; 0x40
 8006a02:	bf14      	ite	ne
 8006a04:	2301      	movne	r3, #1
 8006a06:	2300      	moveq	r3, #0
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00c      	beq.n	8006a28 <_ZN7TwoWire20i2c_master_byte_readEPii+0x6a>
        if ((timeout--) == 0) {
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	1e5a      	subs	r2, r3, #1
 8006a12:	617a      	str	r2, [r7, #20]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	bf0c      	ite	eq
 8006a18:	2301      	moveq	r3, #1
 8006a1a:	2300      	movne	r3, #0
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d0e9      	beq.n	80069f6 <_ZN7TwoWire20i2c_master_byte_readEPii+0x38>
            return -1;
 8006a22:	f04f 33ff 	mov.w	r3, #4294967295
 8006a26:	e005      	b.n	8006a34 <_ZN7TwoWire20i2c_master_byte_readEPii+0x76>
        }
    }

    *value = (int)i2c->DR;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	601a      	str	r2, [r3, #0]

    return 0;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	371c      	adds	r7, #28
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <_ZN7TwoWire21i2c_master_byte_writeEi>:

int TwoWire::i2c_master_byte_write(int data)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a4e:	60bb      	str	r3, [r7, #8]
    int timeout;

    i2c->DR = (uint8_t)data;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	461a      	mov	r2, r3
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	611a      	str	r2, [r3, #16]

    // Wait until the byte is transmitted
    timeout = FLAG_TIMEOUT;
 8006a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a5e:	60fb      	str	r3, [r7, #12]
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a6a:	2b80      	cmp	r3, #128	; 0x80
 8006a6c:	d008      	beq.n	8006a80 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
            (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == RESET)) {
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	f003 0304 	and.w	r3, r3, #4
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8006a78:	2b04      	cmp	r3, #4
 8006a7a:	d001      	beq.n	8006a80 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e000      	b.n	8006a82 <_ZN7TwoWire21i2c_master_byte_writeEi+0x42>
 8006a80:	2300      	movs	r3, #0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00b      	beq.n	8006a9e <_ZN7TwoWire21i2c_master_byte_writeEi+0x5e>
        if ((timeout--) == 0) {
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	1e5a      	subs	r2, r3, #1
 8006a8a:	60fa      	str	r2, [r7, #12]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	bf0c      	ite	eq
 8006a90:	2301      	moveq	r3, #1
 8006a92:	2300      	movne	r3, #0
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d0e2      	beq.n	8006a60 <_ZN7TwoWire21i2c_master_byte_writeEi+0x20>
            return 0;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	e000      	b.n	8006aa0 <_ZN7TwoWire21i2c_master_byte_writeEi+0x60>
        }
    }

    return 1;
 8006a9e:	2301      	movs	r3, #1
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3714      	adds	r7, #20
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <_ZN7TwoWire15i2c_slave_writeEPKci>:

int TwoWire::i2c_slave_write(const char *data, int length)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b089      	sub	sp, #36	; 0x24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac0:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	dd41      	ble.n	8006b4c <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 8006ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006acc:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad2:	695b      	ldr	r3, [r3, #20]
 8006ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad8:	2b80      	cmp	r3, #128	; 0x80
 8006ada:	bf14      	ite	ne
 8006adc:	2301      	movne	r3, #1
 8006ade:	2300      	moveq	r3, #0
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d008      	beq.n	8006af8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1ed      	bne.n	8006ace <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 8006af2:	f04f 33ff 	mov.w	r3, #4294967295
 8006af6:	e068      	b.n	8006bca <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	1c5a      	adds	r2, r3, #1
 8006afc:	60ba      	str	r2, [r7, #8]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	461a      	mov	r2, r3
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	611a      	str	r2, [r3, #16]
        length--;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	607b      	str	r3, [r7, #4]
        size++;
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b16:	695b      	ldr	r3, [r3, #20]
 8006b18:	f003 0304 	and.w	r3, r3, #4
 8006b1c:	2b04      	cmp	r3, #4
 8006b1e:	d104      	bne.n	8006b2a <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d001      	beq.n	8006b2a <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8006b26:	2301      	movs	r3, #1
 8006b28:	e000      	b.n	8006b2c <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d0c8      	beq.n	8006ac2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	1c5a      	adds	r2, r3, #1
 8006b34:	60ba      	str	r2, [r7, #8]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	461a      	mov	r2, r3
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	611a      	str	r2, [r3, #16]
            length--;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	3b01      	subs	r3, #1
 8006b42:	607b      	str	r3, [r7, #4]
            size++;
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	3301      	adds	r3, #1
 8006b48:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 8006b4a:	e7ba      	b.n	8006ac2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 8006b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b50:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b56:	695b      	ldr	r3, [r3, #20]
 8006b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b60:	bf14      	ite	ne
 8006b62:	2301      	movne	r3, #1
 8006b64:	2300      	moveq	r3, #0
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d008      	beq.n	8006b7e <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1ec      	bne.n	8006b52 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 8006b78:	f04f 33ff 	mov.w	r3, #4294967295
 8006b7c:	e025      	b.n	8006bca <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b86:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 8006b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b8c:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	f003 0302 	and.w	r3, r3, #2
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	bf0c      	ite	eq
 8006b9c:	2301      	moveq	r3, #1
 8006b9e:	2300      	movne	r3, #0
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d008      	beq.n	8006bb8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1ed      	bne.n	8006b8e <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 8006bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8006bb6:	e008      	b.n	8006bca <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 8006bc8:	69bb      	ldr	r3, [r7, #24]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3724      	adds	r7, #36	; 0x24
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
	...

08006bd8 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be4:	4a12      	ldr	r2, [pc, #72]	; (8006c30 <_ZN7TwoWire15enableInterruptEv+0x58>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d106      	bne.n	8006bf8 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8006bea:	2049      	movs	r0, #73	; 0x49
 8006bec:	f001 ff76 	bl	8008adc <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8006bf0:	2048      	movs	r0, #72	; 0x48
 8006bf2:	f001 ff73 	bl	8008adc <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8006bf6:	e016      	b.n	8006c26 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bfc:	4a0d      	ldr	r2, [pc, #52]	; (8006c34 <_ZN7TwoWire15enableInterruptEv+0x5c>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d106      	bne.n	8006c10 <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8006c02:	2022      	movs	r0, #34	; 0x22
 8006c04:	f001 ff6a 	bl	8008adc <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8006c08:	2021      	movs	r0, #33	; 0x21
 8006c0a:	f001 ff67 	bl	8008adc <HAL_NVIC_EnableIRQ>
}
 8006c0e:	e00a      	b.n	8006c26 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c14:	4a08      	ldr	r2, [pc, #32]	; (8006c38 <_ZN7TwoWire15enableInterruptEv+0x60>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d105      	bne.n	8006c26 <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8006c1a:	2020      	movs	r0, #32
 8006c1c:	f001 ff5e 	bl	8008adc <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8006c20:	201f      	movs	r0, #31
 8006c22:	f001 ff5b 	bl	8008adc <HAL_NVIC_EnableIRQ>
}
 8006c26:	bf00      	nop
 8006c28:	3708      	adds	r7, #8
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	40005c00 	.word	0x40005c00
 8006c34:	40005800 	.word	0x40005800
 8006c38:	40005400 	.word	0x40005400

08006c3c <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c48:	4a12      	ldr	r2, [pc, #72]	; (8006c94 <_ZN7TwoWire16disableInterruptEv+0x58>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d106      	bne.n	8006c5c <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8006c4e:	2049      	movs	r0, #73	; 0x49
 8006c50:	f001 ff52 	bl	8008af8 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8006c54:	2048      	movs	r0, #72	; 0x48
 8006c56:	f001 ff4f 	bl	8008af8 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8006c5a:	e016      	b.n	8006c8a <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c60:	4a0d      	ldr	r2, [pc, #52]	; (8006c98 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d106      	bne.n	8006c74 <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8006c66:	2022      	movs	r0, #34	; 0x22
 8006c68:	f001 ff46 	bl	8008af8 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8006c6c:	2021      	movs	r0, #33	; 0x21
 8006c6e:	f001 ff43 	bl	8008af8 <HAL_NVIC_DisableIRQ>
}
 8006c72:	e00a      	b.n	8006c8a <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c78:	4a08      	ldr	r2, [pc, #32]	; (8006c9c <_ZN7TwoWire16disableInterruptEv+0x60>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d105      	bne.n	8006c8a <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8006c7e:	2020      	movs	r0, #32
 8006c80:	f001 ff3a 	bl	8008af8 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8006c84:	201f      	movs	r0, #31
 8006c86:	f001 ff37 	bl	8008af8 <HAL_NVIC_DisableIRQ>
}
 8006c8a:	bf00      	nop
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	40005c00 	.word	0x40005c00
 8006c98:	40005800 	.word	0x40005800
 8006c9c:	40005400 	.word	0x40005400

08006ca0 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d110      	bne.n	8006cd2 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d10b      	bne.n	8006cd2 <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 8006cba:	4908      	ldr	r1, [pc, #32]	; (8006cdc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8006cbc:	4808      	ldr	r0, [pc, #32]	; (8006ce0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006cbe:	f7ff fb51 	bl	8006364 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 8006cc2:	4908      	ldr	r1, [pc, #32]	; (8006ce4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8006cc4:	4808      	ldr	r0, [pc, #32]	; (8006ce8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8006cc6:	f7ff fb4d 	bl	8006364 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 8006cca:	4908      	ldr	r1, [pc, #32]	; (8006cec <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8006ccc:	4808      	ldr	r0, [pc, #32]	; (8006cf0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8006cce:	f7ff fb49 	bl	8006364 <_ZN7TwoWireC1EP11I2C_TypeDef>
 8006cd2:	bf00      	nop
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	40005400 	.word	0x40005400
 8006ce0:	20000440 	.word	0x20000440
 8006ce4:	40005800 	.word	0x40005800
 8006ce8:	200004f8 	.word	0x200004f8
 8006cec:	40005c00 	.word	0x40005c00
 8006cf0:	200005b0 	.word	0x200005b0

08006cf4 <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006cfc:	2001      	movs	r0, #1
 8006cfe:	f7ff ffcf 	bl	8006ca0 <_Z41__static_initialization_and_destruction_0ii>
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8006d04:	b590      	push	{r4, r7, lr}
 8006d06:	b087      	sub	sp, #28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	607a      	str	r2, [r7, #4]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	460b      	mov	r3, r1
 8006d12:	72fb      	strb	r3, [r7, #11]
 8006d14:	4613      	mov	r3, r2
 8006d16:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	685c      	ldr	r4, [r3, #4]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6898      	ldr	r0, [r3, #8]
 8006d20:	893b      	ldrh	r3, [r7, #8]
 8006d22:	7af9      	ldrb	r1, [r7, #11]
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	47a0      	blx	r4
 8006d28:	6178      	str	r0, [r7, #20]

  return ret;
 8006d2a:	697b      	ldr	r3, [r7, #20]
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	371c      	adds	r7, #28
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd90      	pop	{r4, r7, pc}

08006d34 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8006d34:	b590      	push	{r4, r7, lr}
 8006d36:	b087      	sub	sp, #28
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	607a      	str	r2, [r7, #4]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	460b      	mov	r3, r1
 8006d42:	72fb      	strb	r3, [r7, #11]
 8006d44:	4613      	mov	r3, r2
 8006d46:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681c      	ldr	r4, [r3, #0]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6898      	ldr	r0, [r3, #8]
 8006d50:	893b      	ldrh	r3, [r7, #8]
 8006d52:	7af9      	ldrb	r1, [r7, #11]
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	47a0      	blx	r4
 8006d58:	6178      	str	r0, [r7, #20]

  return ret;
 8006d5a:	697b      	ldr	r3, [r7, #20]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	371c      	adds	r7, #28
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd90      	pop	{r4, r7, pc}

08006d64 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	ee07 3a90 	vmov	s15, r3
 8006d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d76:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006d90 <lps22hh_from_lsb_to_hpa+0x2c>
 8006d7a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006d7e:	eef0 7a66 	vmov.f32	s15, s13
}
 8006d82:	eeb0 0a67 	vmov.f32	s0, s15
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr
 8006d90:	49800000 	.word	0x49800000

08006d94 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8006d9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006da2:	ee07 3a90 	vmov	s15, r3
 8006da6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006daa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006dc4 <lps22hh_from_lsb_to_celsius+0x30>
 8006dae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006db2:	eef0 7a66 	vmov.f32	s15, s13
}
 8006db6:	eeb0 0a67 	vmov.f32	s0, s15
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr
 8006dc4:	42c80000 	.word	0x42c80000

08006dc8 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006dd4:	f107 0208 	add.w	r2, r7, #8
 8006dd8:	2301      	movs	r3, #1
 8006dda:	2110      	movs	r1, #16
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f7ff ff91 	bl	8006d04 <lps22hh_read_reg>
 8006de2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10f      	bne.n	8006e0a <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8006dea:	78fb      	ldrb	r3, [r7, #3]
 8006dec:	f003 0301 	and.w	r3, r3, #1
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	7a3b      	ldrb	r3, [r7, #8]
 8006df4:	f362 0341 	bfi	r3, r2, #1, #1
 8006df8:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006dfa:	f107 0208 	add.w	r2, r7, #8
 8006dfe:	2301      	movs	r3, #1
 8006e00:	2110      	movs	r1, #16
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f7ff ff96 	bl	8006d34 <lps22hh_write_reg>
 8006e08:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b086      	sub	sp, #24
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8006e20:	f107 0210 	add.w	r2, r7, #16
 8006e24:	2301      	movs	r3, #1
 8006e26:	2110      	movs	r1, #16
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f7ff ff6b 	bl	8006d04 <lps22hh_read_reg>
 8006e2e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d107      	bne.n	8006e46 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006e36:	f107 020c 	add.w	r2, r7, #12
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	2111      	movs	r1, #17
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7ff ff60 	bl	8006d04 <lps22hh_read_reg>
 8006e44:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10f      	bne.n	8006e6c <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8006e4c:	78fb      	ldrb	r3, [r7, #3]
 8006e4e:	f003 0307 	and.w	r3, r3, #7
 8006e52:	b2da      	uxtb	r2, r3
 8006e54:	7c3b      	ldrb	r3, [r7, #16]
 8006e56:	f362 1306 	bfi	r3, r2, #4, #3
 8006e5a:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8006e5c:	f107 0210 	add.w	r2, r7, #16
 8006e60:	2301      	movs	r3, #1
 8006e62:	2110      	movs	r1, #16
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7ff ff65 	bl	8006d34 <lps22hh_write_reg>
 8006e6a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d119      	bne.n	8006ea6 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8006e72:	78fb      	ldrb	r3, [r7, #3]
 8006e74:	091b      	lsrs	r3, r3, #4
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	b2da      	uxtb	r2, r3
 8006e7c:	7b3b      	ldrb	r3, [r7, #12]
 8006e7e:	f362 0341 	bfi	r3, r2, #1, #1
 8006e82:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8006e84:	78fb      	ldrb	r3, [r7, #3]
 8006e86:	08db      	lsrs	r3, r3, #3
 8006e88:	f003 0301 	and.w	r3, r3, #1
 8006e8c:	b2da      	uxtb	r2, r3
 8006e8e:	7b3b      	ldrb	r3, [r7, #12]
 8006e90:	f362 0300 	bfi	r3, r2, #0, #1
 8006e94:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006e96:	f107 020c 	add.w	r2, r7, #12
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	2111      	movs	r1, #17
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f7ff ff48 	bl	8006d34 <lps22hh_write_reg>
 8006ea4:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8006ea6:	697b      	ldr	r3, [r7, #20]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3718      	adds	r7, #24
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8006eba:	f107 0208 	add.w	r2, r7, #8
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	2127      	movs	r1, #39	; 0x27
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7ff ff1e 	bl	8006d04 <lps22hh_read_reg>
 8006ec8:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 8006eca:	7a3b      	ldrb	r3, [r7, #8]
 8006ecc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	701a      	strb	r2, [r3, #0]

  return ret;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b084      	sub	sp, #16
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8006eec:	f107 0208 	add.w	r2, r7, #8
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	2128      	movs	r1, #40	; 0x28
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f7ff ff05 	bl	8006d04 <lps22hh_read_reg>
 8006efa:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8006efc:	7abb      	ldrb	r3, [r7, #10]
 8006efe:	461a      	mov	r2, r3
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	021b      	lsls	r3, r3, #8
 8006f0a:	7a7a      	ldrb	r2, [r7, #9]
 8006f0c:	441a      	add	r2, r3
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	021b      	lsls	r3, r3, #8
 8006f18:	7a3a      	ldrb	r2, [r7, #8]
 8006f1a:	441a      	add	r2, r3
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	021a      	lsls	r2, r3, #8
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	601a      	str	r2, [r3, #0]

  return ret;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8006f3e:	f107 0208 	add.w	r2, r7, #8
 8006f42:	2302      	movs	r3, #2
 8006f44:	212b      	movs	r1, #43	; 0x2b
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7ff fedc 	bl	8006d04 <lps22hh_read_reg>
 8006f4c:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8006f4e:	7a7b      	ldrb	r3, [r7, #9]
 8006f50:	b21a      	sxth	r2, r3
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	021b      	lsls	r3, r3, #8
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	7a3b      	ldrb	r3, [r7, #8]
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	4413      	add	r3, r2
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	b21a      	sxth	r2, r3
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	801a      	strh	r2, [r3, #0]

  return ret;
 8006f70:	68fb      	ldr	r3, [r7, #12]
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8006f84:	2301      	movs	r3, #1
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	210f      	movs	r1, #15
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7ff feba 	bl	8006d04 <lps22hh_read_reg>
 8006f90:	60f8      	str	r0, [r7, #12]

  return ret;
 8006f92:	68fb      	ldr	r3, [r7, #12]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8006fa8:	f107 0208 	add.w	r2, r7, #8
 8006fac:	2301      	movs	r3, #1
 8006fae:	2111      	movs	r1, #17
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f7ff fea7 	bl	8006d04 <lps22hh_read_reg>
 8006fb6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10f      	bne.n	8006fde <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8006fbe:	78fb      	ldrb	r3, [r7, #3]
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	b2da      	uxtb	r2, r3
 8006fc6:	7a3b      	ldrb	r3, [r7, #8]
 8006fc8:	f362 0382 	bfi	r3, r2, #2, #1
 8006fcc:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8006fce:	f107 0208 	add.w	r2, r7, #8
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	2111      	movs	r1, #17
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f7ff feac 	bl	8006d34 <lps22hh_write_reg>
 8006fdc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006fde:	68fb      	ldr	r3, [r7, #12]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8006ff2:	f107 0208 	add.w	r2, r7, #8
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	2111      	movs	r1, #17
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f7ff fe82 	bl	8006d04 <lps22hh_read_reg>
 8007000:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8007002:	7a3b      	ldrb	r3, [r7, #8]
 8007004:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007008:	b2db      	uxtb	r3, r3
 800700a:	461a      	mov	r2, r3
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	701a      	strb	r2, [r3, #0]

  return ret;
 8007010:	68fb      	ldr	r3, [r7, #12]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800701a:	b590      	push	{r4, r7, lr}
 800701c:	b087      	sub	sp, #28
 800701e:	af00      	add	r7, sp, #0
 8007020:	60f8      	str	r0, [r7, #12]
 8007022:	607a      	str	r2, [r7, #4]
 8007024:	461a      	mov	r2, r3
 8007026:	460b      	mov	r3, r1
 8007028:	72fb      	strb	r3, [r7, #11]
 800702a:	4613      	mov	r3, r2
 800702c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	685c      	ldr	r4, [r3, #4]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6898      	ldr	r0, [r3, #8]
 8007036:	893b      	ldrh	r3, [r7, #8]
 8007038:	7af9      	ldrb	r1, [r7, #11]
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	47a0      	blx	r4
 800703e:	6178      	str	r0, [r7, #20]

  return ret;
 8007040:	697b      	ldr	r3, [r7, #20]
}
 8007042:	4618      	mov	r0, r3
 8007044:	371c      	adds	r7, #28
 8007046:	46bd      	mov	sp, r7
 8007048:	bd90      	pop	{r4, r7, pc}

0800704a <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800704a:	b590      	push	{r4, r7, lr}
 800704c:	b087      	sub	sp, #28
 800704e:	af00      	add	r7, sp, #0
 8007050:	60f8      	str	r0, [r7, #12]
 8007052:	607a      	str	r2, [r7, #4]
 8007054:	461a      	mov	r2, r3
 8007056:	460b      	mov	r3, r1
 8007058:	72fb      	strb	r3, [r7, #11]
 800705a:	4613      	mov	r3, r2
 800705c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681c      	ldr	r4, [r3, #0]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6898      	ldr	r0, [r3, #8]
 8007066:	893b      	ldrh	r3, [r7, #8]
 8007068:	7af9      	ldrb	r1, [r7, #11]
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	47a0      	blx	r4
 800706e:	6178      	str	r0, [r7, #20]

  return ret;
 8007070:	697b      	ldr	r3, [r7, #20]
}
 8007072:	4618      	mov	r0, r3
 8007074:	371c      	adds	r7, #28
 8007076:	46bd      	mov	sp, r7
 8007078:	bd90      	pop	{r4, r7, pc}
	...

0800707c <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	4603      	mov	r3, r0
 8007084:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8007086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800708a:	ee07 3a90 	vmov	s15, r3
 800708e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007092:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80070a8 <lsm6dsr_from_fs2g_to_mg+0x2c>
 8007096:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800709a:	eeb0 0a67 	vmov.f32	s0, s15
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	3d79db23 	.word	0x3d79db23

080070ac <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	4603      	mov	r3, r0
 80070b4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 80070b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070ba:	ee07 3a90 	vmov	s15, r3
 80070be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070c2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80070d8 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 80070c6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80070ca:	eeb0 0a67 	vmov.f32	s0, s15
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr
 80070d8:	428c0000 	.word	0x428c0000

080070dc <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	4603      	mov	r3, r0
 80070e4:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 80070e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070ea:	ee07 3a90 	vmov	s15, r3
 80070ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80070f2:	eddf 6a07 	vldr	s13, [pc, #28]	; 8007110 <lsm6dsr_from_lsb_to_celsius+0x34>
 80070f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80070fa:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80070fe:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8007102:	eeb0 0a67 	vmov.f32	s0, s15
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	43800000 	.word	0x43800000

08007114 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	460b      	mov	r3, r1
 800711e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8007120:	f107 0208 	add.w	r2, r7, #8
 8007124:	2301      	movs	r3, #1
 8007126:	2110      	movs	r1, #16
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7ff ff76 	bl	800701a <lsm6dsr_read_reg>
 800712e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10f      	bne.n	8007156 <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8007136:	78fb      	ldrb	r3, [r7, #3]
 8007138:	f003 0303 	and.w	r3, r3, #3
 800713c:	b2da      	uxtb	r2, r3
 800713e:	7a3b      	ldrb	r3, [r7, #8]
 8007140:	f362 0383 	bfi	r3, r2, #2, #2
 8007144:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8007146:	f107 0208 	add.w	r2, r7, #8
 800714a:	2301      	movs	r3, #1
 800714c:	2110      	movs	r1, #16
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7ff ff7b 	bl	800704a <lsm6dsr_write_reg>
 8007154:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8007156:	68fb      	ldr	r3, [r7, #12]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b086      	sub	sp, #24
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	460b      	mov	r3, r1
 800716a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 800716c:	78fb      	ldrb	r3, [r7, #3]
 800716e:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8007170:	f107 030c 	add.w	r3, r7, #12
 8007174:	4619      	mov	r1, r3
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fbb0 	bl	80078dc <lsm6dsr_fsm_enable_get>
 800717c:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	2b00      	cmp	r3, #0
 8007182:	f040 80c4 	bne.w	800730e <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007186:	7b3b      	ldrb	r3, [r7, #12]
 8007188:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800718c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800718e:	7b3b      	ldrb	r3, [r7, #12]
 8007190:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007194:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007196:	4313      	orrs	r3, r2
 8007198:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800719a:	7b3b      	ldrb	r3, [r7, #12]
 800719c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80071a0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80071a2:	4313      	orrs	r3, r2
 80071a4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80071a6:	7b3b      	ldrb	r3, [r7, #12]
 80071a8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80071ac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80071ae:	4313      	orrs	r3, r2
 80071b0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80071b2:	7b3b      	ldrb	r3, [r7, #12]
 80071b4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80071b8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80071ba:	4313      	orrs	r3, r2
 80071bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80071be:	7b3b      	ldrb	r3, [r7, #12]
 80071c0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80071c4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80071c6:	4313      	orrs	r3, r2
 80071c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80071ca:	7b3b      	ldrb	r3, [r7, #12]
 80071cc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80071d0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80071d2:	4313      	orrs	r3, r2
 80071d4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80071d6:	7b3b      	ldrb	r3, [r7, #12]
 80071d8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80071dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80071de:	4313      	orrs	r3, r2
 80071e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80071e2:	7b7b      	ldrb	r3, [r7, #13]
 80071e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80071e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80071ea:	4313      	orrs	r3, r2
 80071ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80071ee:	7b7b      	ldrb	r3, [r7, #13]
 80071f0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80071f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80071f6:	4313      	orrs	r3, r2
 80071f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80071fa:	7b7b      	ldrb	r3, [r7, #13]
 80071fc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007200:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8007202:	4313      	orrs	r3, r2
 8007204:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8007206:	7b7b      	ldrb	r3, [r7, #13]
 8007208:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800720c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800720e:	4313      	orrs	r3, r2
 8007210:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8007212:	7b7b      	ldrb	r3, [r7, #13]
 8007214:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007218:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800721a:	4313      	orrs	r3, r2
 800721c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800721e:	7b7b      	ldrb	r3, [r7, #13]
 8007220:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007224:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8007226:	4313      	orrs	r3, r2
 8007228:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800722a:	7b7b      	ldrb	r3, [r7, #13]
 800722c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007230:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8007232:	4313      	orrs	r3, r2
 8007234:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8007236:	7b7b      	ldrb	r3, [r7, #13]
 8007238:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800723c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800723e:	4313      	orrs	r3, r2
 8007240:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007242:	2b01      	cmp	r3, #1
 8007244:	d163      	bne.n	800730e <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8007246:	f107 030b 	add.w	r3, r7, #11
 800724a:	4619      	mov	r1, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 fb71 	bl	8007934 <lsm6dsr_fsm_data_rate_get>
 8007252:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d159      	bne.n	800730e <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800725a:	7afb      	ldrb	r3, [r7, #11]
 800725c:	2b03      	cmp	r3, #3
 800725e:	d853      	bhi.n	8007308 <lsm6dsr_xl_data_rate_set+0x1a8>
 8007260:	a201      	add	r2, pc, #4	; (adr r2, 8007268 <lsm6dsr_xl_data_rate_set+0x108>)
 8007262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007266:	bf00      	nop
 8007268:	08007279 	.word	0x08007279
 800726c:	0800728b 	.word	0x0800728b
 8007270:	080072a9 	.word	0x080072a9
 8007274:	080072d3 	.word	0x080072d3
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8007278:	78fb      	ldrb	r3, [r7, #3]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d102      	bne.n	8007284 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 800727e:	2301      	movs	r3, #1
 8007280:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8007282:	e045      	b.n	8007310 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8007284:	78fb      	ldrb	r3, [r7, #3]
 8007286:	75fb      	strb	r3, [r7, #23]
            break;
 8007288:	e042      	b.n	8007310 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 800728a:	78fb      	ldrb	r3, [r7, #3]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d102      	bne.n	8007296 <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8007290:	2302      	movs	r3, #2
 8007292:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8007294:	e03c      	b.n	8007310 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8007296:	78fb      	ldrb	r3, [r7, #3]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d102      	bne.n	80072a2 <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 800729c:	2302      	movs	r3, #2
 800729e:	75fb      	strb	r3, [r7, #23]
            break;
 80072a0:	e036      	b.n	8007310 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80072a2:	78fb      	ldrb	r3, [r7, #3]
 80072a4:	75fb      	strb	r3, [r7, #23]
            break;
 80072a6:	e033      	b.n	8007310 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80072a8:	78fb      	ldrb	r3, [r7, #3]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d102      	bne.n	80072b4 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80072ae:	2303      	movs	r3, #3
 80072b0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80072b2:	e02d      	b.n	8007310 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80072b4:	78fb      	ldrb	r3, [r7, #3]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d102      	bne.n	80072c0 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80072ba:	2303      	movs	r3, #3
 80072bc:	75fb      	strb	r3, [r7, #23]
            break;
 80072be:	e027      	b.n	8007310 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 80072c0:	78fb      	ldrb	r3, [r7, #3]
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d102      	bne.n	80072cc <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80072c6:	2303      	movs	r3, #3
 80072c8:	75fb      	strb	r3, [r7, #23]
            break;
 80072ca:	e021      	b.n	8007310 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80072cc:	78fb      	ldrb	r3, [r7, #3]
 80072ce:	75fb      	strb	r3, [r7, #23]
            break;
 80072d0:	e01e      	b.n	8007310 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80072d2:	78fb      	ldrb	r3, [r7, #3]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d102      	bne.n	80072de <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80072d8:	2304      	movs	r3, #4
 80072da:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80072dc:	e018      	b.n	8007310 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80072de:	78fb      	ldrb	r3, [r7, #3]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d102      	bne.n	80072ea <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80072e4:	2304      	movs	r3, #4
 80072e6:	75fb      	strb	r3, [r7, #23]
            break;
 80072e8:	e012      	b.n	8007310 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 80072ea:	78fb      	ldrb	r3, [r7, #3]
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d102      	bne.n	80072f6 <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80072f0:	2304      	movs	r3, #4
 80072f2:	75fb      	strb	r3, [r7, #23]
            break;
 80072f4:	e00c      	b.n	8007310 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 80072f6:	78fb      	ldrb	r3, [r7, #3]
 80072f8:	2b03      	cmp	r3, #3
 80072fa:	d102      	bne.n	8007302 <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80072fc:	2304      	movs	r3, #4
 80072fe:	75fb      	strb	r3, [r7, #23]
            break;
 8007300:	e006      	b.n	8007310 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8007302:	78fb      	ldrb	r3, [r7, #3]
 8007304:	75fb      	strb	r3, [r7, #23]
            break;
 8007306:	e003      	b.n	8007310 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8007308:	78fb      	ldrb	r3, [r7, #3]
 800730a:	75fb      	strb	r3, [r7, #23]
            break;
 800730c:	e000      	b.n	8007310 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 800730e:	bf00      	nop
    }
  }

  if (ret == 0)
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d107      	bne.n	8007326 <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8007316:	f107 0208 	add.w	r2, r7, #8
 800731a:	2301      	movs	r3, #1
 800731c:	2110      	movs	r1, #16
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7ff fe7b 	bl	800701a <lsm6dsr_read_reg>
 8007324:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10f      	bne.n	800734c <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 800732c:	7dfb      	ldrb	r3, [r7, #23]
 800732e:	f003 030f 	and.w	r3, r3, #15
 8007332:	b2da      	uxtb	r2, r3
 8007334:	7a3b      	ldrb	r3, [r7, #8]
 8007336:	f362 1307 	bfi	r3, r2, #4, #4
 800733a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 800733c:	f107 0208 	add.w	r2, r7, #8
 8007340:	2301      	movs	r3, #1
 8007342:	2110      	movs	r1, #16
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f7ff fe80 	bl	800704a <lsm6dsr_write_reg>
 800734a:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800734c:	693b      	ldr	r3, [r7, #16]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3718      	adds	r7, #24
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop

08007358 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	460b      	mov	r3, r1
 8007362:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007364:	f107 0208 	add.w	r2, r7, #8
 8007368:	2301      	movs	r3, #1
 800736a:	2111      	movs	r1, #17
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f7ff fe54 	bl	800701a <lsm6dsr_read_reg>
 8007372:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10f      	bne.n	800739a <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 800737a:	78fb      	ldrb	r3, [r7, #3]
 800737c:	f003 030f 	and.w	r3, r3, #15
 8007380:	b2da      	uxtb	r2, r3
 8007382:	7a3b      	ldrb	r3, [r7, #8]
 8007384:	f362 0303 	bfi	r3, r2, #0, #4
 8007388:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800738a:	f107 0208 	add.w	r2, r7, #8
 800738e:	2301      	movs	r3, #1
 8007390:	2111      	movs	r1, #17
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f7ff fe59 	bl	800704a <lsm6dsr_write_reg>
 8007398:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800739a:	68fb      	ldr	r3, [r7, #12]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	460b      	mov	r3, r1
 80073ae:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 80073b0:	78fb      	ldrb	r3, [r7, #3]
 80073b2:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 80073b4:	f107 030c 	add.w	r3, r7, #12
 80073b8:	4619      	mov	r1, r3
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 fa8e 	bl	80078dc <lsm6dsr_fsm_enable_get>
 80073c0:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f040 80c4 	bne.w	8007552 <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80073ca:	7b3b      	ldrb	r3, [r7, #12]
 80073cc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80073d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80073d2:	7b3b      	ldrb	r3, [r7, #12]
 80073d4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80073d8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80073da:	4313      	orrs	r3, r2
 80073dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80073de:	7b3b      	ldrb	r3, [r7, #12]
 80073e0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80073e4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80073e6:	4313      	orrs	r3, r2
 80073e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80073ea:	7b3b      	ldrb	r3, [r7, #12]
 80073ec:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80073f0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80073f2:	4313      	orrs	r3, r2
 80073f4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80073f6:	7b3b      	ldrb	r3, [r7, #12]
 80073f8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80073fc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80073fe:	4313      	orrs	r3, r2
 8007400:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8007402:	7b3b      	ldrb	r3, [r7, #12]
 8007404:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007408:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800740a:	4313      	orrs	r3, r2
 800740c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800740e:	7b3b      	ldrb	r3, [r7, #12]
 8007410:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007414:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8007416:	4313      	orrs	r3, r2
 8007418:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800741a:	7b3b      	ldrb	r3, [r7, #12]
 800741c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007420:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8007422:	4313      	orrs	r3, r2
 8007424:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8007426:	7b7b      	ldrb	r3, [r7, #13]
 8007428:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800742c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800742e:	4313      	orrs	r3, r2
 8007430:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8007432:	7b7b      	ldrb	r3, [r7, #13]
 8007434:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007438:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800743a:	4313      	orrs	r3, r2
 800743c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800743e:	7b7b      	ldrb	r3, [r7, #13]
 8007440:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007444:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8007446:	4313      	orrs	r3, r2
 8007448:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800744a:	7b7b      	ldrb	r3, [r7, #13]
 800744c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007450:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8007452:	4313      	orrs	r3, r2
 8007454:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8007456:	7b7b      	ldrb	r3, [r7, #13]
 8007458:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800745c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800745e:	4313      	orrs	r3, r2
 8007460:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8007462:	7b7b      	ldrb	r3, [r7, #13]
 8007464:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007468:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800746a:	4313      	orrs	r3, r2
 800746c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800746e:	7b7b      	ldrb	r3, [r7, #13]
 8007470:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007474:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8007476:	4313      	orrs	r3, r2
 8007478:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800747a:	7b7b      	ldrb	r3, [r7, #13]
 800747c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007480:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8007482:	4313      	orrs	r3, r2
 8007484:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007486:	2b01      	cmp	r3, #1
 8007488:	d163      	bne.n	8007552 <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 800748a:	f107 030b 	add.w	r3, r7, #11
 800748e:	4619      	mov	r1, r3
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fa4f 	bl	8007934 <lsm6dsr_fsm_data_rate_get>
 8007496:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d159      	bne.n	8007552 <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800749e:	7afb      	ldrb	r3, [r7, #11]
 80074a0:	2b03      	cmp	r3, #3
 80074a2:	d853      	bhi.n	800754c <lsm6dsr_gy_data_rate_set+0x1a8>
 80074a4:	a201      	add	r2, pc, #4	; (adr r2, 80074ac <lsm6dsr_gy_data_rate_set+0x108>)
 80074a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074aa:	bf00      	nop
 80074ac:	080074bd 	.word	0x080074bd
 80074b0:	080074cf 	.word	0x080074cf
 80074b4:	080074ed 	.word	0x080074ed
 80074b8:	08007517 	.word	0x08007517
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 80074bc:	78fb      	ldrb	r3, [r7, #3]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d102      	bne.n	80074c8 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 80074c2:	2301      	movs	r3, #1
 80074c4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80074c6:	e045      	b.n	8007554 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80074c8:	78fb      	ldrb	r3, [r7, #3]
 80074ca:	75fb      	strb	r3, [r7, #23]
            break;
 80074cc:	e042      	b.n	8007554 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80074ce:	78fb      	ldrb	r3, [r7, #3]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d102      	bne.n	80074da <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 80074d4:	2302      	movs	r3, #2
 80074d6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80074d8:	e03c      	b.n	8007554 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80074da:	78fb      	ldrb	r3, [r7, #3]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d102      	bne.n	80074e6 <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 80074e0:	2302      	movs	r3, #2
 80074e2:	75fb      	strb	r3, [r7, #23]
            break;
 80074e4:	e036      	b.n	8007554 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80074e6:	78fb      	ldrb	r3, [r7, #3]
 80074e8:	75fb      	strb	r3, [r7, #23]
            break;
 80074ea:	e033      	b.n	8007554 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80074ec:	78fb      	ldrb	r3, [r7, #3]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d102      	bne.n	80074f8 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80074f2:	2303      	movs	r3, #3
 80074f4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80074f6:	e02d      	b.n	8007554 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80074f8:	78fb      	ldrb	r3, [r7, #3]
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d102      	bne.n	8007504 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80074fe:	2303      	movs	r3, #3
 8007500:	75fb      	strb	r3, [r7, #23]
            break;
 8007502:	e027      	b.n	8007554 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8007504:	78fb      	ldrb	r3, [r7, #3]
 8007506:	2b02      	cmp	r3, #2
 8007508:	d102      	bne.n	8007510 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800750a:	2303      	movs	r3, #3
 800750c:	75fb      	strb	r3, [r7, #23]
            break;
 800750e:	e021      	b.n	8007554 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8007510:	78fb      	ldrb	r3, [r7, #3]
 8007512:	75fb      	strb	r3, [r7, #23]
            break;
 8007514:	e01e      	b.n	8007554 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8007516:	78fb      	ldrb	r3, [r7, #3]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d102      	bne.n	8007522 <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 800751c:	2304      	movs	r3, #4
 800751e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8007520:	e018      	b.n	8007554 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8007522:	78fb      	ldrb	r3, [r7, #3]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d102      	bne.n	800752e <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8007528:	2304      	movs	r3, #4
 800752a:	75fb      	strb	r3, [r7, #23]
            break;
 800752c:	e012      	b.n	8007554 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 800752e:	78fb      	ldrb	r3, [r7, #3]
 8007530:	2b02      	cmp	r3, #2
 8007532:	d102      	bne.n	800753a <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8007534:	2304      	movs	r3, #4
 8007536:	75fb      	strb	r3, [r7, #23]
            break;
 8007538:	e00c      	b.n	8007554 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 800753a:	78fb      	ldrb	r3, [r7, #3]
 800753c:	2b03      	cmp	r3, #3
 800753e:	d102      	bne.n	8007546 <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8007540:	2304      	movs	r3, #4
 8007542:	75fb      	strb	r3, [r7, #23]
            break;
 8007544:	e006      	b.n	8007554 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8007546:	78fb      	ldrb	r3, [r7, #3]
 8007548:	75fb      	strb	r3, [r7, #23]
            break;
 800754a:	e003      	b.n	8007554 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 800754c:	78fb      	ldrb	r3, [r7, #3]
 800754e:	75fb      	strb	r3, [r7, #23]
            break;
 8007550:	e000      	b.n	8007554 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 8007552:	bf00      	nop
    }
  }

  if (ret == 0)
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d107      	bne.n	800756a <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800755a:	f107 0208 	add.w	r2, r7, #8
 800755e:	2301      	movs	r3, #1
 8007560:	2111      	movs	r1, #17
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f7ff fd59 	bl	800701a <lsm6dsr_read_reg>
 8007568:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d10f      	bne.n	8007590 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8007570:	7dfb      	ldrb	r3, [r7, #23]
 8007572:	f003 030f 	and.w	r3, r3, #15
 8007576:	b2da      	uxtb	r2, r3
 8007578:	7a3b      	ldrb	r3, [r7, #8]
 800757a:	f362 1307 	bfi	r3, r2, #4, #4
 800757e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007580:	f107 0208 	add.w	r2, r7, #8
 8007584:	2301      	movs	r3, #1
 8007586:	2111      	movs	r1, #17
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f7ff fd5e 	bl	800704a <lsm6dsr_write_reg>
 800758e:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8007590:	693b      	ldr	r3, [r7, #16]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3718      	adds	r7, #24
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop

0800759c <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	460b      	mov	r3, r1
 80075a6:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80075a8:	f107 0208 	add.w	r2, r7, #8
 80075ac:	2301      	movs	r3, #1
 80075ae:	2112      	movs	r1, #18
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f7ff fd32 	bl	800701a <lsm6dsr_read_reg>
 80075b6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10f      	bne.n	80075de <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 80075be:	78fb      	ldrb	r3, [r7, #3]
 80075c0:	f003 0301 	and.w	r3, r3, #1
 80075c4:	b2da      	uxtb	r2, r3
 80075c6:	7a3b      	ldrb	r3, [r7, #8]
 80075c8:	f362 1386 	bfi	r3, r2, #6, #1
 80075cc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80075ce:	f107 0208 	add.w	r2, r7, #8
 80075d2:	2301      	movs	r3, #1
 80075d4:	2112      	movs	r1, #18
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f7ff fd37 	bl	800704a <lsm6dsr_write_reg>
 80075dc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80075de:	68fb      	ldr	r3, [r7, #12]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3710      	adds	r7, #16
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 80075f2:	f107 0208 	add.w	r2, r7, #8
 80075f6:	2301      	movs	r3, #1
 80075f8:	211e      	movs	r1, #30
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f7ff fd0d 	bl	800701a <lsm6dsr_read_reg>
 8007600:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 8007602:	7a3b      	ldrb	r3, [r7, #8]
 8007604:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007608:	b2db      	uxtb	r3, r3
 800760a:	461a      	mov	r2, r3
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	701a      	strb	r2, [r3, #0]

  return ret;
 8007610:	68fb      	ldr	r3, [r7, #12]
}
 8007612:	4618      	mov	r0, r3
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b084      	sub	sp, #16
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
 8007622:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8007624:	f107 0208 	add.w	r2, r7, #8
 8007628:	2301      	movs	r3, #1
 800762a:	211e      	movs	r1, #30
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f7ff fcf4 	bl	800701a <lsm6dsr_read_reg>
 8007632:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8007634:	7a3b      	ldrb	r3, [r7, #8]
 8007636:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800763a:	b2db      	uxtb	r3, r3
 800763c:	461a      	mov	r2, r3
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	701a      	strb	r2, [r3, #0]

  return ret;
 8007642:	68fb      	ldr	r3, [r7, #12]
}
 8007644:	4618      	mov	r0, r3
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8007656:	f107 0208 	add.w	r2, r7, #8
 800765a:	2301      	movs	r3, #1
 800765c:	211e      	movs	r1, #30
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f7ff fcdb 	bl	800701a <lsm6dsr_read_reg>
 8007664:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 8007666:	7a3b      	ldrb	r3, [r7, #8]
 8007668:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800766c:	b2db      	uxtb	r3, r3
 800766e:	461a      	mov	r2, r3
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	701a      	strb	r2, [r3, #0]

  return ret;
 8007674:	68fb      	ldr	r3, [r7, #12]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b084      	sub	sp, #16
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
 8007686:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 8007688:	f107 0208 	add.w	r2, r7, #8
 800768c:	2302      	movs	r3, #2
 800768e:	2120      	movs	r1, #32
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f7ff fcc2 	bl	800701a <lsm6dsr_read_reg>
 8007696:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 8007698:	7a7b      	ldrb	r3, [r7, #9]
 800769a:	b21a      	sxth	r2, r3
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	021b      	lsls	r3, r3, #8
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	7a3b      	ldrb	r3, [r7, #8]
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	4413      	add	r3, r2
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	b21a      	sxth	r2, r3
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	801a      	strh	r2, [r3, #0]

  return ret;
 80076ba:	68fb      	ldr	r3, [r7, #12]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b086      	sub	sp, #24
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 80076ce:	f107 020c 	add.w	r2, r7, #12
 80076d2:	2306      	movs	r3, #6
 80076d4:	2122      	movs	r1, #34	; 0x22
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f7ff fc9f 	bl	800701a <lsm6dsr_read_reg>
 80076dc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80076de:	7b7b      	ldrb	r3, [r7, #13]
 80076e0:	b21a      	sxth	r2, r3
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	021b      	lsls	r3, r3, #8
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	7b3b      	ldrb	r3, [r7, #12]
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	4413      	add	r3, r2
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	b21a      	sxth	r2, r3
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007700:	7bfa      	ldrb	r2, [r7, #15]
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	3302      	adds	r3, #2
 8007706:	b212      	sxth	r2, r2
 8007708:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	3302      	adds	r3, #2
 800770e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007712:	b29b      	uxth	r3, r3
 8007714:	021b      	lsls	r3, r3, #8
 8007716:	b29a      	uxth	r2, r3
 8007718:	7bbb      	ldrb	r3, [r7, #14]
 800771a:	b29b      	uxth	r3, r3
 800771c:	4413      	add	r3, r2
 800771e:	b29a      	uxth	r2, r3
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	3302      	adds	r3, #2
 8007724:	b212      	sxth	r2, r2
 8007726:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007728:	7c7a      	ldrb	r2, [r7, #17]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	3304      	adds	r3, #4
 800772e:	b212      	sxth	r2, r2
 8007730:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	3304      	adds	r3, #4
 8007736:	f9b3 3000 	ldrsh.w	r3, [r3]
 800773a:	b29b      	uxth	r3, r3
 800773c:	021b      	lsls	r3, r3, #8
 800773e:	b29a      	uxth	r2, r3
 8007740:	7c3b      	ldrb	r3, [r7, #16]
 8007742:	b29b      	uxth	r3, r3
 8007744:	4413      	add	r3, r2
 8007746:	b29a      	uxth	r2, r3
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	3304      	adds	r3, #4
 800774c:	b212      	sxth	r2, r2
 800774e:	801a      	strh	r2, [r3, #0]

  return ret;
 8007750:	697b      	ldr	r3, [r7, #20]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3718      	adds	r7, #24
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b086      	sub	sp, #24
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
 8007762:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 8007764:	f107 020c 	add.w	r2, r7, #12
 8007768:	2306      	movs	r3, #6
 800776a:	2128      	movs	r1, #40	; 0x28
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f7ff fc54 	bl	800701a <lsm6dsr_read_reg>
 8007772:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007774:	7b7b      	ldrb	r3, [r7, #13]
 8007776:	b21a      	sxth	r2, r3
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007782:	b29b      	uxth	r3, r3
 8007784:	021b      	lsls	r3, r3, #8
 8007786:	b29a      	uxth	r2, r3
 8007788:	7b3b      	ldrb	r3, [r7, #12]
 800778a:	b29b      	uxth	r3, r3
 800778c:	4413      	add	r3, r2
 800778e:	b29b      	uxth	r3, r3
 8007790:	b21a      	sxth	r2, r3
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007796:	7bfa      	ldrb	r2, [r7, #15]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	3302      	adds	r3, #2
 800779c:	b212      	sxth	r2, r2
 800779e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	3302      	adds	r3, #2
 80077a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	021b      	lsls	r3, r3, #8
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	7bbb      	ldrb	r3, [r7, #14]
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	4413      	add	r3, r2
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	3302      	adds	r3, #2
 80077ba:	b212      	sxth	r2, r2
 80077bc:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80077be:	7c7a      	ldrb	r2, [r7, #17]
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	3304      	adds	r3, #4
 80077c4:	b212      	sxth	r2, r2
 80077c6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	3304      	adds	r3, #4
 80077cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	021b      	lsls	r3, r3, #8
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	7c3b      	ldrb	r3, [r7, #16]
 80077d8:	b29b      	uxth	r3, r3
 80077da:	4413      	add	r3, r2
 80077dc:	b29a      	uxth	r2, r3
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	3304      	adds	r3, #4
 80077e2:	b212      	sxth	r2, r2
 80077e4:	801a      	strh	r2, [r3, #0]

  return ret;
 80077e6:	697b      	ldr	r3, [r7, #20]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3718      	adds	r7, #24
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	460b      	mov	r3, r1
 80077fa:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 80077fc:	f107 0208 	add.w	r2, r7, #8
 8007800:	2301      	movs	r3, #1
 8007802:	2101      	movs	r1, #1
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f7ff fc08 	bl	800701a <lsm6dsr_read_reg>
 800780a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10f      	bne.n	8007832 <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 8007812:	78fb      	ldrb	r3, [r7, #3]
 8007814:	f003 0303 	and.w	r3, r3, #3
 8007818:	b2da      	uxtb	r2, r3
 800781a:	7a3b      	ldrb	r3, [r7, #8]
 800781c:	f362 1387 	bfi	r3, r2, #6, #2
 8007820:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8007822:	f107 0208 	add.w	r2, r7, #8
 8007826:	2301      	movs	r3, #1
 8007828:	2101      	movs	r1, #1
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f7ff fc0d 	bl	800704a <lsm6dsr_write_reg>
 8007830:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8007832:	68fb      	ldr	r3, [r7, #12]
}
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 8007846:	2301      	movs	r3, #1
 8007848:	683a      	ldr	r2, [r7, #0]
 800784a:	210f      	movs	r1, #15
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f7ff fbe4 	bl	800701a <lsm6dsr_read_reg>
 8007852:	60f8      	str	r0, [r7, #12]

  return ret;
 8007854:	68fb      	ldr	r3, [r7, #12]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b084      	sub	sp, #16
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	460b      	mov	r3, r1
 8007868:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800786a:	f107 0208 	add.w	r2, r7, #8
 800786e:	2301      	movs	r3, #1
 8007870:	2112      	movs	r1, #18
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7ff fbd1 	bl	800701a <lsm6dsr_read_reg>
 8007878:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d10f      	bne.n	80078a0 <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8007880:	78fb      	ldrb	r3, [r7, #3]
 8007882:	f003 0301 	and.w	r3, r3, #1
 8007886:	b2da      	uxtb	r2, r3
 8007888:	7a3b      	ldrb	r3, [r7, #8]
 800788a:	f362 0300 	bfi	r3, r2, #0, #1
 800788e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007890:	f107 0208 	add.w	r2, r7, #8
 8007894:	2301      	movs	r3, #1
 8007896:	2112      	movs	r1, #18
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f7ff fbd6 	bl	800704a <lsm6dsr_write_reg>
 800789e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80078a0:	68fb      	ldr	r3, [r7, #12]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b084      	sub	sp, #16
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80078b4:	f107 0208 	add.w	r2, r7, #8
 80078b8:	2301      	movs	r3, #1
 80078ba:	2112      	movs	r1, #18
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f7ff fbac 	bl	800701a <lsm6dsr_read_reg>
 80078c2:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 80078c4:	7a3b      	ldrb	r3, [r7, #8]
 80078c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	461a      	mov	r2, r3
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	701a      	strb	r2, [r3, #0]

  return ret;
 80078d2:	68fb      	ldr	r3, [r7, #12]
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3710      	adds	r7, #16
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80078e6:	2102      	movs	r1, #2
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f7ff ff81 	bl	80077f0 <lsm6dsr_mem_bank_set>
 80078ee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d106      	bne.n	8007904 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 80078f6:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 80078f8:	2301      	movs	r3, #1
 80078fa:	2146      	movs	r1, #70	; 0x46
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f7ff fb8c 	bl	800701a <lsm6dsr_read_reg>
 8007902:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d107      	bne.n	800791a <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 800790e:	2301      	movs	r3, #1
 8007910:	2147      	movs	r1, #71	; 0x47
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f7ff fb81 	bl	800701a <lsm6dsr_read_reg>
 8007918:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d104      	bne.n	800792a <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8007920:	2100      	movs	r1, #0
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7ff ff64 	bl	80077f0 <lsm6dsr_mem_bank_set>
 8007928:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800792a:	68fb      	ldr	r3, [r7, #12]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800793e:	2102      	movs	r1, #2
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f7ff ff55 	bl	80077f0 <lsm6dsr_mem_bank_set>
 8007946:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d107      	bne.n	800795e <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 800794e:	f107 0208 	add.w	r2, r7, #8
 8007952:	2301      	movs	r3, #1
 8007954:	215f      	movs	r1, #95	; 0x5f
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f7ff fb5f 	bl	800701a <lsm6dsr_read_reg>
 800795c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d104      	bne.n	800796e <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8007964:	2100      	movs	r1, #0
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f7ff ff42 	bl	80077f0 <lsm6dsr_mem_bank_set>
 800796c:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 800796e:	7a3b      	ldrb	r3, [r7, #8]
 8007970:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b03      	cmp	r3, #3
 8007978:	d81a      	bhi.n	80079b0 <lsm6dsr_fsm_data_rate_get+0x7c>
 800797a:	a201      	add	r2, pc, #4	; (adr r2, 8007980 <lsm6dsr_fsm_data_rate_get+0x4c>)
 800797c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007980:	08007991 	.word	0x08007991
 8007984:	08007999 	.word	0x08007999
 8007988:	080079a1 	.word	0x080079a1
 800798c:	080079a9 	.word	0x080079a9
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	2200      	movs	r2, #0
 8007994:	701a      	strb	r2, [r3, #0]
      break;
 8007996:	e00f      	b.n	80079b8 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	2201      	movs	r2, #1
 800799c:	701a      	strb	r2, [r3, #0]
      break;
 800799e:	e00b      	b.n	80079b8 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	2202      	movs	r2, #2
 80079a4:	701a      	strb	r2, [r3, #0]
      break;
 80079a6:	e007      	b.n	80079b8 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	2203      	movs	r2, #3
 80079ac:	701a      	strb	r2, [r3, #0]
      break;
 80079ae:	e003      	b.n	80079b8 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	2200      	movs	r2, #0
 80079b4:	701a      	strb	r2, [r3, #0]
      break;
 80079b6:	bf00      	nop
  }

  return ret;
 80079b8:	68fb      	ldr	r3, [r7, #12]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop

080079c4 <HAL_RTC_AlarmAEventCallback>:
								0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
								0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
								0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59};

/*You cannot put these in the user callbacks section and I don't know why (can put in user begin 4)*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),(uint8_t*)"AlarmA\r\n", 8, HAL_MAX_DELAY);
 80079cc:	f04f 33ff 	mov.w	r3, #4294967295
 80079d0:	2208      	movs	r2, #8
 80079d2:	4905      	ldr	r1, [pc, #20]	; (80079e8 <HAL_RTC_AlarmAEventCallback+0x24>)
 80079d4:	4805      	ldr	r0, [pc, #20]	; (80079ec <HAL_RTC_AlarmAEventCallback+0x28>)
 80079d6:	f006 fd2c 	bl	800e432 <HAL_UART_Transmit>
	flagA = 1;
 80079da:	4b05      	ldr	r3, [pc, #20]	; (80079f0 <HAL_RTC_AlarmAEventCallback+0x2c>)
 80079dc:	2201      	movs	r2, #1
 80079de:	701a      	strb	r2, [r3, #0]
}
 80079e0:	bf00      	nop
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	080212ac 	.word	0x080212ac
 80079ec:	20006ddc 	.word	0x20006ddc
 80079f0:	200006a8 	.word	0x200006a8

080079f4 <MRT_SetupRTOS>:
}




void MRT_SetupRTOS(RTC_HandleTypeDef* hrtc, UART_HandleTypeDef uart,uint8_t sleepT){
 80079f4:	b084      	sub	sp, #16
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b082      	sub	sp, #8
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
 80079fe:	f107 0014 	add.w	r0, r7, #20
 8007a02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	rtc = hrtc;
 8007a06:	4a0f      	ldr	r2, [pc, #60]	; (8007a44 <MRT_SetupRTOS+0x50>)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6013      	str	r3, [r2, #0]
	rtos.huart = uart;
 8007a0c:	4b0e      	ldr	r3, [pc, #56]	; (8007a48 <MRT_SetupRTOS+0x54>)
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f107 0314 	add.w	r3, r7, #20
 8007a14:	2244      	movs	r2, #68	; 0x44
 8007a16:	4619      	mov	r1, r3
 8007a18:	f012 fe88 	bl	801a72c <memcpy>
	rtos.sleepTime = sleepT;
 8007a1c:	4a0a      	ldr	r2, [pc, #40]	; (8007a48 <MRT_SetupRTOS+0x54>)
 8007a1e:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8007a22:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTOS\r\n", 17, HAL_MAX_DELAY);
 8007a26:	f04f 33ff 	mov.w	r3, #4294967295
 8007a2a:	2211      	movs	r2, #17
 8007a2c:	4907      	ldr	r1, [pc, #28]	; (8007a4c <MRT_SetupRTOS+0x58>)
 8007a2e:	4806      	ldr	r0, [pc, #24]	; (8007a48 <MRT_SetupRTOS+0x54>)
 8007a30:	f006 fcff 	bl	800e432 <HAL_UART_Transmit>
}
 8007a34:	bf00      	nop
 8007a36:	3708      	adds	r7, #8
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a3e:	b004      	add	sp, #16
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	20006e24 	.word	0x20006e24
 8007a48:	20006ddc 	.word	0x20006ddc
 8007a4c:	080212c4 	.word	0x080212c4

08007a50 <MRT_WUProcedure>:



void MRT_WUProcedure(void){
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8007a56:	4b15      	ldr	r3, [pc, #84]	; (8007aac <MRT_WUProcedure+0x5c>)
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	f003 0302 	and.w	r3, r3, #2
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d11e      	bne.n	8007aa0 <MRT_WUProcedure+0x50>
	{

		wu_flag = 1;
 8007a62:	4b13      	ldr	r3, [pc, #76]	; (8007ab0 <MRT_WUProcedure+0x60>)
 8007a64:	2201      	movs	r2, #1
 8007a66:	701a      	strb	r2, [r3, #0]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8007a68:	4b10      	ldr	r3, [pc, #64]	; (8007aac <MRT_WUProcedure+0x5c>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a0f      	ldr	r2, [pc, #60]	; (8007aac <MRT_WUProcedure+0x5c>)
 8007a6e:	f043 0308 	orr.w	r3, r3, #8
 8007a72:	6013      	str	r3, [r2, #0]

		/** display  the string **/
		char *str = "Wakeup from the STANDBY MODE\r\n";
 8007a74:	4b0f      	ldr	r3, [pc, #60]	; (8007ab4 <MRT_WUProcedure+0x64>)
 8007a76:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit(&(rtos.huart), (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f7f8 fbb9 	bl	80001f0 <strlen>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	f04f 33ff 	mov.w	r3, #4294967295
 8007a86:	6879      	ldr	r1, [r7, #4]
 8007a88:	480b      	ldr	r0, [pc, #44]	; (8007ab8 <MRT_WUProcedure+0x68>)
 8007a8a:	f006 fcd2 	bl	800e432 <HAL_UART_Transmit>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8007a8e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007a92:	f003 fc8d 	bl	800b3b0 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(rtc);
 8007a96:	4b09      	ldr	r3, [pc, #36]	; (8007abc <MRT_WUProcedure+0x6c>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f005 f886 	bl	800cbac <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_ClearFlags();
 8007aa0:	f000 f80e 	bl	8007ac0 <MRT_ClearFlags>
}
 8007aa4:	bf00      	nop
 8007aa6:	3708      	adds	r7, #8
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	40007000 	.word	0x40007000
 8007ab0:	200006a9 	.word	0x200006a9
 8007ab4:	080212d8 	.word	0x080212d8
 8007ab8:	20006ddc 	.word	0x20006ddc
 8007abc:	20006e24 	.word	0x20006e24

08007ac0 <MRT_ClearFlags>:


void MRT_ClearFlags(void){
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	HAL_UART_Transmit(&(rtos.huart),"Clearing the flags\r\n", 20, HAL_MAX_DELAY);
 8007ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ac8:	2214      	movs	r2, #20
 8007aca:	4939      	ldr	r1, [pc, #228]	; (8007bb0 <MRT_ClearFlags+0xf0>)
 8007acc:	4839      	ldr	r0, [pc, #228]	; (8007bb4 <MRT_ClearFlags+0xf4>)
 8007ace:	f006 fcb0 	bl	800e432 <HAL_UART_Transmit>
	  	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(rtc);
 8007ad2:	4b39      	ldr	r3, [pc, #228]	; (8007bb8 <MRT_ClearFlags+0xf8>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	22ca      	movs	r2, #202	; 0xca
 8007ada:	625a      	str	r2, [r3, #36]	; 0x24
 8007adc:	4b36      	ldr	r3, [pc, #216]	; (8007bb8 <MRT_ClearFlags+0xf8>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	2253      	movs	r2, #83	; 0x53
 8007ae4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRAF) != RESET){
 8007ae6:	e011      	b.n	8007b0c <MRT_ClearFlags+0x4c>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm A flag\r\n", 23, HAL_MAX_DELAY);
 8007ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8007aec:	2217      	movs	r2, #23
 8007aee:	4933      	ldr	r1, [pc, #204]	; (8007bbc <MRT_ClearFlags+0xfc>)
 8007af0:	4830      	ldr	r0, [pc, #192]	; (8007bb4 <MRT_ClearFlags+0xf4>)
 8007af2:	f006 fc9e 	bl	800e432 <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(rtc, RTC_FLAG_ALRAF);
 8007af6:	4b30      	ldr	r3, [pc, #192]	; (8007bb8 <MRT_ClearFlags+0xf8>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	b2da      	uxtb	r2, r3
 8007b00:	4b2d      	ldr	r3, [pc, #180]	; (8007bb8 <MRT_ClearFlags+0xf8>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007b0a:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRAF) != RESET){
 8007b0c:	4b2a      	ldr	r3, [pc, #168]	; (8007bb8 <MRT_ClearFlags+0xf8>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1e5      	bne.n	8007ae8 <MRT_ClearFlags+0x28>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(rtc);
 8007b1c:	4b26      	ldr	r3, [pc, #152]	; (8007bb8 <MRT_ClearFlags+0xf8>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	22ff      	movs	r2, #255	; 0xff
 8007b24:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007b26:	4b26      	ldr	r3, [pc, #152]	; (8007bc0 <MRT_ClearFlags+0x100>)
 8007b28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007b2c:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(rtc);
 8007b2e:	4b22      	ldr	r3, [pc, #136]	; (8007bb8 <MRT_ClearFlags+0xf8>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	22ca      	movs	r2, #202	; 0xca
 8007b36:	625a      	str	r2, [r3, #36]	; 0x24
 8007b38:	4b1f      	ldr	r3, [pc, #124]	; (8007bb8 <MRT_ClearFlags+0xf8>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2253      	movs	r2, #83	; 0x53
 8007b40:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRBF) != RESET){
 8007b42:	e011      	b.n	8007b68 <MRT_ClearFlags+0xa8>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm B flag\r\n", 23, HAL_MAX_DELAY);
 8007b44:	f04f 33ff 	mov.w	r3, #4294967295
 8007b48:	2217      	movs	r2, #23
 8007b4a:	491e      	ldr	r1, [pc, #120]	; (8007bc4 <MRT_ClearFlags+0x104>)
 8007b4c:	4819      	ldr	r0, [pc, #100]	; (8007bb4 <MRT_ClearFlags+0xf4>)
 8007b4e:	f006 fc70 	bl	800e432 <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(rtc, RTC_FLAG_ALRBF);
 8007b52:	4b19      	ldr	r3, [pc, #100]	; (8007bb8 <MRT_ClearFlags+0xf8>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	b2da      	uxtb	r2, r3
 8007b5c:	4b16      	ldr	r3, [pc, #88]	; (8007bb8 <MRT_ClearFlags+0xf8>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007b66:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(rtc, RTC_FLAG_ALRBF) != RESET){
 8007b68:	4b13      	ldr	r3, [pc, #76]	; (8007bb8 <MRT_ClearFlags+0xf8>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1e5      	bne.n	8007b44 <MRT_ClearFlags+0x84>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(rtc);
 8007b78:	4b0f      	ldr	r3, [pc, #60]	; (8007bb8 <MRT_ClearFlags+0xf8>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	22ff      	movs	r2, #255	; 0xff
 8007b80:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007b82:	4b0f      	ldr	r3, [pc, #60]	; (8007bc0 <MRT_ClearFlags+0x100>)
 8007b84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007b88:	615a      	str	r2, [r3, #20]


	/* Clear the WU FLAG */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing WU flag\r\n", 18, HAL_MAX_DELAY);
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8007b8a:	4b0f      	ldr	r3, [pc, #60]	; (8007bc8 <MRT_ClearFlags+0x108>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a0e      	ldr	r2, [pc, #56]	; (8007bc8 <MRT_ClearFlags+0x108>)
 8007b90:	f043 0304 	orr.w	r3, r3, #4
 8007b94:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing RTC WU flag\r\n", 22, HAL_MAX_DELAY);
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(rtc, RTC_FLAG_WUTF);
 8007b96:	4b08      	ldr	r3, [pc, #32]	; (8007bb8 <MRT_ClearFlags+0xf8>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	b2da      	uxtb	r2, r3
 8007ba0:	4b05      	ldr	r3, [pc, #20]	; (8007bb8 <MRT_ClearFlags+0xf8>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007baa:	60da      	str	r2, [r3, #12]
}
 8007bac:	bf00      	nop
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	080212f8 	.word	0x080212f8
 8007bb4:	20006ddc 	.word	0x20006ddc
 8007bb8:	20006e24 	.word	0x20006e24
 8007bbc:	08021310 	.word	0x08021310
 8007bc0:	40013c00 	.word	0x40013c00
 8007bc4:	08021328 	.word	0x08021328
 8007bc8:	40007000 	.word	0x40007000

08007bcc <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode( uint32_t seconds){
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b0a4      	sub	sp, #144	; 0x90
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),"\r\nStandByMode\r\n", 15, HAL_MAX_DELAY);
 8007bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8007bd8:	220f      	movs	r2, #15
 8007bda:	491c      	ldr	r1, [pc, #112]	; (8007c4c <MRT_StandByMode+0x80>)
 8007bdc:	481c      	ldr	r0, [pc, #112]	; (8007c50 <MRT_StandByMode+0x84>)
 8007bde:	f006 fc28 	bl	800e432 <HAL_UART_Transmit>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8007be2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007be6:	f003 fbd1 	bl	800b38c <HAL_PWR_EnableWakeUpPin>

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_ClearFlags();
 8007bea:	f7ff ff69 	bl	8007ac0 <MRT_ClearFlags>

	//Setup RTC wake up timer
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTCW\r\n", 17, HAL_MAX_DELAY);
 8007bee:	f04f 33ff 	mov.w	r3, #4294967295
 8007bf2:	2211      	movs	r2, #17
 8007bf4:	4917      	ldr	r1, [pc, #92]	; (8007c54 <MRT_StandByMode+0x88>)
 8007bf6:	4816      	ldr	r0, [pc, #88]	; (8007c50 <MRT_StandByMode+0x84>)
 8007bf8:	f006 fc1b 	bl	800e432 <HAL_UART_Transmit>
	  Error_Handler();
	}
	*/

	char* msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds\r\n",seconds);
 8007bfc:	f107 0308 	add.w	r3, r7, #8
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	4915      	ldr	r1, [pc, #84]	; (8007c58 <MRT_StandByMode+0x8c>)
 8007c04:	4618      	mov	r0, r3
 8007c06:	f013 fe37 	bl	801b878 <siprintf>
	HAL_UART_Transmit(&(rtos.huart), msg,strlen(msg),HAL_MAX_DELAY);
 8007c0a:	f107 0308 	add.w	r3, r7, #8
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7f8 faee 	bl	80001f0 <strlen>
 8007c14:	4603      	mov	r3, r0
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	f107 0108 	add.w	r1, r7, #8
 8007c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c20:	480b      	ldr	r0, [pc, #44]	; (8007c50 <MRT_StandByMode+0x84>)
 8007c22:	f006 fc06 	bl	800e432 <HAL_UART_Transmit>

	if (HAL_RTCEx_SetWakeUpTimer_IT(rtc,seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8007c26:	4b0d      	ldr	r3, [pc, #52]	; (8007c5c <MRT_StandByMode+0x90>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2204      	movs	r2, #4
 8007c2c:	6879      	ldr	r1, [r7, #4]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f004 fefc 	bl	800ca2c <HAL_RTCEx_SetWakeUpTimer_IT>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d001      	beq.n	8007c3e <MRT_StandByMode+0x72>
	{
	  Error_Handler();
 8007c3a:	f7fa fe9d 	bl	8002978 <Error_Handler>
	}

	HAL_PWR_EnterSTANDBYMode();
 8007c3e:	f003 fbcb 	bl	800b3d8 <HAL_PWR_EnterSTANDBYMode>
}
 8007c42:	bf00      	nop
 8007c44:	3790      	adds	r7, #144	; 0x90
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	08021340 	.word	0x08021340
 8007c50:	20006ddc 	.word	0x20006ddc
 8007c54:	08021350 	.word	0x08021350
 8007c58:	08021364 	.word	0x08021364
 8007c5c:	20006e24 	.word	0x20006e24

08007c60 <MRT_setAlarmA>:


void MRT_setAlarmA(uint8_t h, uint8_t m, uint8_t s){
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	4603      	mov	r3, r0
 8007c68:	71fb      	strb	r3, [r7, #7]
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	71bb      	strb	r3, [r7, #6]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	717b      	strb	r3, [r7, #5]
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = int_to_hex_table[h];
 8007c72:	79fb      	ldrb	r3, [r7, #7]
 8007c74:	4a1b      	ldr	r2, [pc, #108]	; (8007ce4 <MRT_setAlarmA+0x84>)
 8007c76:	5cd2      	ldrb	r2, [r2, r3]
 8007c78:	4b1b      	ldr	r3, [pc, #108]	; (8007ce8 <MRT_setAlarmA+0x88>)
 8007c7a:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = int_to_hex_table[m];
 8007c7c:	79bb      	ldrb	r3, [r7, #6]
 8007c7e:	4a19      	ldr	r2, [pc, #100]	; (8007ce4 <MRT_setAlarmA+0x84>)
 8007c80:	5cd2      	ldrb	r2, [r2, r3]
 8007c82:	4b19      	ldr	r3, [pc, #100]	; (8007ce8 <MRT_setAlarmA+0x88>)
 8007c84:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = int_to_hex_table[s];
 8007c86:	797b      	ldrb	r3, [r7, #5]
 8007c88:	4a16      	ldr	r2, [pc, #88]	; (8007ce4 <MRT_setAlarmA+0x84>)
 8007c8a:	5cd2      	ldrb	r2, [r2, r3]
 8007c8c:	4b16      	ldr	r3, [pc, #88]	; (8007ce8 <MRT_setAlarmA+0x88>)
 8007c8e:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 8007c90:	4b15      	ldr	r3, [pc, #84]	; (8007ce8 <MRT_setAlarmA+0x88>)
 8007c92:	2200      	movs	r2, #0
 8007c94:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007c96:	4b14      	ldr	r3, [pc, #80]	; (8007ce8 <MRT_setAlarmA+0x88>)
 8007c98:	2200      	movs	r2, #0
 8007c9a:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8007c9c:	4b12      	ldr	r3, [pc, #72]	; (8007ce8 <MRT_setAlarmA+0x88>)
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8007ca2:	4b11      	ldr	r3, [pc, #68]	; (8007ce8 <MRT_setAlarmA+0x88>)
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8007ca8:	4b0f      	ldr	r3, [pc, #60]	; (8007ce8 <MRT_setAlarmA+0x88>)
 8007caa:	2200      	movs	r2, #0
 8007cac:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8007cae:	4b0e      	ldr	r3, [pc, #56]	; (8007ce8 <MRT_setAlarmA+0x88>)
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 8007cb4:	4b0c      	ldr	r3, [pc, #48]	; (8007ce8 <MRT_setAlarmA+0x88>)
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 8007cbc:	4b0a      	ldr	r3, [pc, #40]	; (8007ce8 <MRT_setAlarmA+0x88>)
 8007cbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cc2:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(rtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8007cc4:	4b09      	ldr	r3, [pc, #36]	; (8007cec <MRT_setAlarmA+0x8c>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	4907      	ldr	r1, [pc, #28]	; (8007ce8 <MRT_setAlarmA+0x88>)
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f004 fc9f 	bl	800c610 <HAL_RTC_SetAlarm_IT>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d001      	beq.n	8007cdc <MRT_setAlarmA+0x7c>
	  {
	    Error_Handler();
 8007cd8:	f7fa fe4e 	bl	8002978 <Error_Handler>
	  }
}
 8007cdc:	bf00      	nop
 8007cde:	3708      	adds	r7, #8
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	2000001c 	.word	0x2000001c
 8007ce8:	20000680 	.word	0x20000680
 8007cec:	20006e24 	.word	0x20006e24

08007cf0 <MRT_setRTC>:


void MRT_setRTC(uint8_t h, uint8_t m, uint8_t s){
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b088      	sub	sp, #32
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	71fb      	strb	r3, [r7, #7]
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	71bb      	strb	r3, [r7, #6]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	717b      	strb	r3, [r7, #5]
	  /** Initialize RTC and set the Time and Date
	  */
	  RTC_TimeTypeDef sTime;

	  sTime.Hours = int_to_hex_table[h];
 8007d02:	79fb      	ldrb	r3, [r7, #7]
 8007d04:	4a1b      	ldr	r2, [pc, #108]	; (8007d74 <MRT_setRTC+0x84>)
 8007d06:	5cd3      	ldrb	r3, [r2, r3]
 8007d08:	733b      	strb	r3, [r7, #12]
	  sTime.Minutes = int_to_hex_table[m];
 8007d0a:	79bb      	ldrb	r3, [r7, #6]
 8007d0c:	4a19      	ldr	r2, [pc, #100]	; (8007d74 <MRT_setRTC+0x84>)
 8007d0e:	5cd3      	ldrb	r3, [r2, r3]
 8007d10:	737b      	strb	r3, [r7, #13]
	  sTime.Seconds = int_to_hex_table[s];
 8007d12:	797b      	ldrb	r3, [r7, #5]
 8007d14:	4a17      	ldr	r2, [pc, #92]	; (8007d74 <MRT_setRTC+0x84>)
 8007d16:	5cd3      	ldrb	r3, [r2, r3]
 8007d18:	73bb      	strb	r3, [r7, #14]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	61bb      	str	r3, [r7, #24]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	61fb      	str	r3, [r7, #28]
	  if (HAL_RTC_SetTime(rtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8007d22:	4b15      	ldr	r3, [pc, #84]	; (8007d78 <MRT_setRTC+0x88>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f107 010c 	add.w	r1, r7, #12
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f004 fa5e 	bl	800c1ee <HAL_RTC_SetTime>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d001      	beq.n	8007d3c <MRT_setRTC+0x4c>
	  {
	    Error_Handler();
 8007d38:	f7fa fe1e 	bl	8002978 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8007d3c:	4b0f      	ldr	r3, [pc, #60]	; (8007d7c <MRT_setRTC+0x8c>)
 8007d3e:	2201      	movs	r2, #1
 8007d40:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 8007d42:	4b0e      	ldr	r3, [pc, #56]	; (8007d7c <MRT_setRTC+0x8c>)
 8007d44:	2201      	movs	r2, #1
 8007d46:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 8007d48:	4b0c      	ldr	r3, [pc, #48]	; (8007d7c <MRT_setRTC+0x8c>)
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 8007d4e:	4b0b      	ldr	r3, [pc, #44]	; (8007d7c <MRT_setRTC+0x8c>)
 8007d50:	2200      	movs	r2, #0
 8007d52:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(rtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8007d54:	4b08      	ldr	r3, [pc, #32]	; (8007d78 <MRT_setRTC+0x88>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	4908      	ldr	r1, [pc, #32]	; (8007d7c <MRT_setRTC+0x8c>)
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f004 fb61 	bl	800c424 <HAL_RTC_SetDate>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d001      	beq.n	8007d6c <MRT_setRTC+0x7c>
	  {
	    Error_Handler();
 8007d68:	f7fa fe06 	bl	8002978 <Error_Handler>
	  }
}
 8007d6c:	bf00      	nop
 8007d6e:	3720      	adds	r7, #32
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	2000001c 	.word	0x2000001c
 8007d78:	20006e24 	.word	0x20006e24
 8007d7c:	2000067c 	.word	0x2000067c

08007d80 <Max31855_Read_Temp>:
uint32_t sign=0;									  // Sign bit
uint8_t DATARX[4];                                    // Raw Data from MAX6675
//uint8_t DATATX = {0xFF, 0xFF, 0xFF, 0xFF};                                    // Raw Data from MAX6675

// ------------------- Functions ----------------
void Max31855_Read_Temp(void) {
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
	int Temp = 0;                                        // Temperature Variable
 8007d86:	2300      	movs	r3, #0
 8007d88:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); // Low State for SPI Communication
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007d90:	483f      	ldr	r0, [pc, #252]	; (8007e90 <Max31855_Read_Temp+0x110>)
 8007d92:	f001 f883 	bl	8008e9c <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, DATARX, 4, 1000);                // DATA Transfer
 8007d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007d9a:	2204      	movs	r2, #4
 8007d9c:	493d      	ldr	r1, [pc, #244]	; (8007e94 <Max31855_Read_Temp+0x114>)
 8007d9e:	483e      	ldr	r0, [pc, #248]	; (8007e98 <Max31855_Read_Temp+0x118>)
 8007da0:	f005 f92b 	bl	800cffa <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET); // High State for SPI Communication
 8007da4:	2201      	movs	r2, #1
 8007da6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007daa:	4839      	ldr	r0, [pc, #228]	; (8007e90 <Max31855_Read_Temp+0x110>)
 8007dac:	f001 f876 	bl	8008e9c <HAL_GPIO_WritePin>


	uint32_t v = DATARX[3] | (DATARX[2] << 8) | (DATARX[1] << 16) | (DATARX[0] << 24);
 8007db0:	4b38      	ldr	r3, [pc, #224]	; (8007e94 <Max31855_Read_Temp+0x114>)
 8007db2:	78db      	ldrb	r3, [r3, #3]
 8007db4:	461a      	mov	r2, r3
 8007db6:	4b37      	ldr	r3, [pc, #220]	; (8007e94 <Max31855_Read_Temp+0x114>)
 8007db8:	789b      	ldrb	r3, [r3, #2]
 8007dba:	021b      	lsls	r3, r3, #8
 8007dbc:	431a      	orrs	r2, r3
 8007dbe:	4b35      	ldr	r3, [pc, #212]	; (8007e94 <Max31855_Read_Temp+0x114>)
 8007dc0:	785b      	ldrb	r3, [r3, #1]
 8007dc2:	041b      	lsls	r3, r3, #16
 8007dc4:	431a      	orrs	r2, r3
 8007dc6:	4b33      	ldr	r3, [pc, #204]	; (8007e94 <Max31855_Read_Temp+0x114>)
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	061b      	lsls	r3, r3, #24
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	603b      	str	r3, [r7, #0]

	Error = v & 0x07;								  // Error Detection
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	f003 0307 	and.w	r3, r3, #7
 8007dd8:	b2da      	uxtb	r2, r3
 8007dda:	4b30      	ldr	r3, [pc, #192]	; (8007e9c <Max31855_Read_Temp+0x11c>)
 8007ddc:	701a      	strb	r2, [r3, #0]



		sign = (DATARX[0] & (0x80)) >> 7;					// Sign Bit calculation
 8007dde:	4b2d      	ldr	r3, [pc, #180]	; (8007e94 <Max31855_Read_Temp+0x114>)
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	09db      	lsrs	r3, r3, #7
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	461a      	mov	r2, r3
 8007de8:	4b2d      	ldr	r3, [pc, #180]	; (8007ea0 <Max31855_Read_Temp+0x120>)
 8007dea:	601a      	str	r2, [r3, #0]

		if (DATARX[3] & 0x07)								 // Returns Error Number
 8007dec:	4b29      	ldr	r3, [pc, #164]	; (8007e94 <Max31855_Read_Temp+0x114>)
 8007dee:	78db      	ldrb	r3, [r3, #3]
 8007df0:	f003 0307 	and.w	r3, r3, #7
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00c      	beq.n	8007e12 <Max31855_Read_Temp+0x92>
			THERMO_TEMP = (-1 * (DATARX[3] & 0x07));
 8007df8:	4b26      	ldr	r3, [pc, #152]	; (8007e94 <Max31855_Read_Temp+0x114>)
 8007dfa:	78db      	ldrb	r3, [r3, #3]
 8007dfc:	f003 0307 	and.w	r3, r3, #7
 8007e00:	425b      	negs	r3, r3
 8007e02:	ee07 3a90 	vmov	s15, r3
 8007e06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e0a:	4b26      	ldr	r3, [pc, #152]	; (8007ea4 <Max31855_Read_Temp+0x124>)
 8007e0c:	edc3 7a00 	vstr	s15, [r3]

	// LSB = 0.25 degrees C
	centigrade *= 0.25;
	return centigrade;
	*/
}
 8007e10:	e039      	b.n	8007e86 <Max31855_Read_Temp+0x106>
		else if (sign == 1) {								// Negative Temperature
 8007e12:	4b23      	ldr	r3, [pc, #140]	; (8007ea0 <Max31855_Read_Temp+0x120>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d120      	bne.n	8007e5c <Max31855_Read_Temp+0xdc>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8007e1a:	4b1e      	ldr	r3, [pc, #120]	; (8007e94 <Max31855_Read_Temp+0x114>)
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	019b      	lsls	r3, r3, #6
 8007e20:	4a1c      	ldr	r2, [pc, #112]	; (8007e94 <Max31855_Read_Temp+0x114>)
 8007e22:	7852      	ldrb	r2, [r2, #1]
 8007e24:	0892      	lsrs	r2, r2, #2
 8007e26:	b2d2      	uxtb	r2, r2
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	607b      	str	r3, [r7, #4]
			Temp &= 0b01111111111111;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e32:	607b      	str	r3, [r7, #4]
			Temp ^= 0b01111111111111;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f483 53ff 	eor.w	r3, r3, #8160	; 0x1fe0
 8007e3a:	f083 031f 	eor.w	r3, r3, #31
 8007e3e:	607b      	str	r3, [r7, #4]
			THERMO_TEMP = ((float) -Temp / 4);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	425b      	negs	r3, r3
 8007e44:	ee07 3a90 	vmov	s15, r3
 8007e48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e4c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8007e50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007e54:	4b13      	ldr	r3, [pc, #76]	; (8007ea4 <Max31855_Read_Temp+0x124>)
 8007e56:	edc3 7a00 	vstr	s15, [r3]
}
 8007e5a:	e014      	b.n	8007e86 <Max31855_Read_Temp+0x106>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8007e5c:	4b0d      	ldr	r3, [pc, #52]	; (8007e94 <Max31855_Read_Temp+0x114>)
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	019b      	lsls	r3, r3, #6
 8007e62:	4a0c      	ldr	r2, [pc, #48]	; (8007e94 <Max31855_Read_Temp+0x114>)
 8007e64:	7852      	ldrb	r2, [r2, #1]
 8007e66:	0892      	lsrs	r2, r2, #2
 8007e68:	b2d2      	uxtb	r2, r2
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	607b      	str	r3, [r7, #4]
			THERMO_TEMP = ((float) Temp / 4.0);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	ee07 3a90 	vmov	s15, r3
 8007e74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e78:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8007e7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007e80:	4b08      	ldr	r3, [pc, #32]	; (8007ea4 <Max31855_Read_Temp+0x124>)
 8007e82:	edc3 7a00 	vstr	s15, [r3]
}
 8007e86:	bf00      	nop
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	40021000 	.word	0x40021000
 8007e94:	20006e28 	.word	0x20006e28
 8007e98:	200068c4 	.word	0x200068c4
 8007e9c:	200006aa 	.word	0x200006aa
 8007ea0:	200006ac 	.word	0x200006ac
 8007ea4:	20006a00 	.word	0x20006a00

08007ea8 <myprintf>:


uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value);
void str2upper(char* string, char* upper);

void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 8007ea8:	b40f      	push	{r0, r1, r2, r3}
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b082      	sub	sp, #8
 8007eae:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8007eb0:	f107 0314 	add.w	r3, r7, #20
 8007eb4:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	693a      	ldr	r2, [r7, #16]
 8007eba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007ebe:	480a      	ldr	r0, [pc, #40]	; (8007ee8 <myprintf+0x40>)
 8007ec0:	f014 fcf6 	bl	801c8b0 <vsniprintf>
  va_end(args);

  //CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
  HAL_UART_Transmit(&DEBUG_UART, (uint8_t*)buffer, strlen(buffer), -1);
 8007ec4:	4808      	ldr	r0, [pc, #32]	; (8007ee8 <myprintf+0x40>)
 8007ec6:	f7f8 f993 	bl	80001f0 <strlen>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	f04f 33ff 	mov.w	r3, #4294967295
 8007ed2:	4905      	ldr	r1, [pc, #20]	; (8007ee8 <myprintf+0x40>)
 8007ed4:	4805      	ldr	r0, [pc, #20]	; (8007eec <myprintf+0x44>)
 8007ed6:	f006 faac 	bl	800e432 <HAL_UART_Transmit>

}
 8007eda:	bf00      	nop
 8007edc:	3708      	adds	r7, #8
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ee4:	b004      	add	sp, #16
 8007ee6:	4770      	bx	lr
 8007ee8:	200006b0 	.word	0x200006b0
 8007eec:	20005ec4 	.word	0x20005ec4

08007ef0 <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b08a      	sub	sp, #40	; 0x28
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 8007efc:	2201      	movs	r2, #1
 8007efe:	4932      	ldr	r1, [pc, #200]	; (8007fc8 <sd_init_dynamic_filename+0xd8>)
 8007f00:	4832      	ldr	r0, [pc, #200]	; (8007fcc <sd_init_dynamic_filename+0xdc>)
 8007f02:	f00c f9e3 	bl	80142cc <f_mount>
 8007f06:	4603      	mov	r3, r0
 8007f08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 8007f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d008      	beq.n	8007f26 <sd_init_dynamic_filename+0x36>
		myprintf("f_mount error (%i)\r\n", fres);
 8007f14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f18:	4619      	mov	r1, r3
 8007f1a:	482d      	ldr	r0, [pc, #180]	; (8007fd0 <sd_init_dynamic_filename+0xe0>)
 8007f1c:	f7ff ffc4 	bl	8007ea8 <myprintf>
		return fres;
 8007f20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f24:	e04b      	b.n	8007fbe <sd_init_dynamic_filename+0xce>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 8007f26:	2300      	movs	r3, #0
 8007f28:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 8007f2a:	f107 0320 	add.w	r3, r7, #32
 8007f2e:	461a      	mov	r2, r3
 8007f30:	68f9      	ldr	r1, [r7, #12]
 8007f32:	4825      	ldr	r0, [pc, #148]	; (8007fc8 <sd_init_dynamic_filename+0xd8>)
 8007f34:	f000 f89c 	bl	8008070 <scan_files>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "fc%06lu.txt", max_used_value + 1);
 8007f3e:	6a3b      	ldr	r3, [r7, #32]
 8007f40:	1c5a      	adds	r2, r3, #1
 8007f42:	f107 0310 	add.w	r3, r7, #16
 8007f46:	4923      	ldr	r1, [pc, #140]	; (8007fd4 <sd_init_dynamic_filename+0xe4>)
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f013 fc95 	bl	801b878 <siprintf>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 8007f4e:	f107 0310 	add.w	r3, r7, #16
 8007f52:	4619      	mov	r1, r3
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f013 fd20 	bl	801b99a <strcpy>
 8007f5a:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8007f5c:	f107 0310 	add.w	r3, r7, #16
 8007f60:	221a      	movs	r2, #26
 8007f62:	4619      	mov	r1, r3
 8007f64:	481c      	ldr	r0, [pc, #112]	; (8007fd8 <sd_init_dynamic_filename+0xe8>)
 8007f66:	f00c fa15 	bl	8014394 <f_open>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 8007f70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d11a      	bne.n	8007fae <sd_init_dynamic_filename+0xbe>
		myprintf("I was able to open filename.txt for writing\r\n");
 8007f78:	4818      	ldr	r0, [pc, #96]	; (8007fdc <sd_init_dynamic_filename+0xec>)
 8007f7a:	f7ff ff95 	bl	8007ea8 <myprintf>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8007f7e:	4b16      	ldr	r3, [pc, #88]	; (8007fd8 <sd_init_dynamic_filename+0xe8>)
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	4619      	mov	r1, r3
 8007f84:	4814      	ldr	r0, [pc, #80]	; (8007fd8 <sd_init_dynamic_filename+0xe8>)
 8007f86:	f00c fe26 	bl	8014bd6 <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 8007f8a:	4915      	ldr	r1, [pc, #84]	; (8007fe0 <sd_init_dynamic_filename+0xf0>)
 8007f8c:	4815      	ldr	r0, [pc, #84]	; (8007fe4 <sd_init_dynamic_filename+0xf4>)
 8007f8e:	f013 fc73 	bl	801b878 <siprintf>
	sd_write(&fil, msg_buffer);
 8007f92:	4914      	ldr	r1, [pc, #80]	; (8007fe4 <sd_init_dynamic_filename+0xf4>)
 8007f94:	4810      	ldr	r0, [pc, #64]	; (8007fd8 <sd_init_dynamic_filename+0xe8>)
 8007f96:	f000 f841 	bl	800801c <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 8007f9a:	68b9      	ldr	r1, [r7, #8]
 8007f9c:	480e      	ldr	r0, [pc, #56]	; (8007fd8 <sd_init_dynamic_filename+0xe8>)
 8007f9e:	f000 f83d 	bl	800801c <sd_write>
	f_close(&fil);
 8007fa2:	480d      	ldr	r0, [pc, #52]	; (8007fd8 <sd_init_dynamic_filename+0xe8>)
 8007fa4:	f00c fde8 	bl	8014b78 <f_close>

	return fres;
 8007fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fac:	e007      	b.n	8007fbe <sd_init_dynamic_filename+0xce>
		myprintf("f_open error (%i)\r\n", fres);
 8007fae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	480c      	ldr	r0, [pc, #48]	; (8007fe8 <sd_init_dynamic_filename+0xf8>)
 8007fb6:	f7ff ff77 	bl	8007ea8 <myprintf>
		return fres;
 8007fba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3728      	adds	r7, #40	; 0x28
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	08021384 	.word	0x08021384
 8007fcc:	20006070 	.word	0x20006070
 8007fd0:	08021388 	.word	0x08021388
 8007fd4:	08021404 	.word	0x08021404
 8007fd8:	20006a70 	.word	0x20006a70
 8007fdc:	080213a0 	.word	0x080213a0
 8007fe0:	080213e4 	.word	0x080213e4
 8007fe4:	20006e2c 	.word	0x20006e2c
 8007fe8:	080213d0 	.word	0x080213d0

08007fec <sd_open_file>:

/*
 * always open in mode FA_WRITE | FA_OPEN_ALWAYS and then appends.
 */
FRESULT sd_open_file(char *filename)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
	// write start to SD card
	FRESULT fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS);
 8007ff4:	2212      	movs	r2, #18
 8007ff6:	6879      	ldr	r1, [r7, #4]
 8007ff8:	4807      	ldr	r0, [pc, #28]	; (8008018 <sd_open_file+0x2c>)
 8007ffa:	f00c f9cb 	bl	8014394 <f_open>
 8007ffe:	4603      	mov	r3, r0
 8008000:	73fb      	strb	r3, [r7, #15]

	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8008002:	4b05      	ldr	r3, [pc, #20]	; (8008018 <sd_open_file+0x2c>)
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	4619      	mov	r1, r3
 8008008:	4803      	ldr	r0, [pc, #12]	; (8008018 <sd_open_file+0x2c>)
 800800a:	f00c fde4 	bl	8014bd6 <f_lseek>

	return fres;
 800800e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	20006a70 	.word	0x20006a70

0800801c <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 8008026:	6838      	ldr	r0, [r7, #0]
 8008028:	f7f8 f8e2 	bl	80001f0 <strlen>
 800802c:	4602      	mov	r2, r0
 800802e:	f107 0308 	add.w	r3, r7, #8
 8008032:	6839      	ldr	r1, [r7, #0]
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f00c fb72 	bl	801471e <f_write>
 800803a:	4603      	mov	r3, r0
 800803c:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 800803e:	7bfb      	ldrb	r3, [r7, #15]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d107      	bne.n	8008054 <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	4619      	mov	r1, r3
 8008048:	4807      	ldr	r0, [pc, #28]	; (8008068 <sd_write+0x4c>)
 800804a:	f7ff ff2d 	bl	8007ea8 <myprintf>
		return bytesWrote;
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	b25b      	sxtb	r3, r3
 8008052:	e004      	b.n	800805e <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 8008054:	4805      	ldr	r0, [pc, #20]	; (800806c <sd_write+0x50>)
 8008056:	f7ff ff27 	bl	8007ea8 <myprintf>
		return -1;
 800805a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800805e:	4618      	mov	r0, r3
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	08021410 	.word	0x08021410
 800806c:	08021434 	.word	0x08021434

08008070 <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 8008070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008072:	b099      	sub	sp, #100	; 0x64
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
 800807c:	466b      	mov	r3, sp
 800807e:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 8008080:	68b8      	ldr	r0, [r7, #8]
 8008082:	f7f8 f8b5 	bl	80001f0 <strlen>
 8008086:	4603      	mov	r3, r0
 8008088:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 800808c:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 8008090:	4623      	mov	r3, r4
 8008092:	3b01      	subs	r3, #1
 8008094:	65bb      	str	r3, [r7, #88]	; 0x58
 8008096:	b2e0      	uxtb	r0, r4
 8008098:	f04f 0100 	mov.w	r1, #0
 800809c:	f04f 0200 	mov.w	r2, #0
 80080a0:	f04f 0300 	mov.w	r3, #0
 80080a4:	00cb      	lsls	r3, r1, #3
 80080a6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80080aa:	00c2      	lsls	r2, r0, #3
 80080ac:	b2e0      	uxtb	r0, r4
 80080ae:	f04f 0100 	mov.w	r1, #0
 80080b2:	f04f 0200 	mov.w	r2, #0
 80080b6:	f04f 0300 	mov.w	r3, #0
 80080ba:	00cb      	lsls	r3, r1, #3
 80080bc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80080c0:	00c2      	lsls	r2, r0, #3
 80080c2:	4623      	mov	r3, r4
 80080c4:	3307      	adds	r3, #7
 80080c6:	08db      	lsrs	r3, r3, #3
 80080c8:	00db      	lsls	r3, r3, #3
 80080ca:	ebad 0d03 	sub.w	sp, sp, r3
 80080ce:	466b      	mov	r3, sp
 80080d0:	3300      	adds	r3, #0
 80080d2:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 80080d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080d6:	4619      	mov	r1, r3
 80080d8:	68b8      	ldr	r0, [r7, #8]
 80080da:	f000 f8ff 	bl	80082dc <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 80080e4:	2300      	movs	r3, #0
 80080e6:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 80080e8:	f107 0318 	add.w	r3, r7, #24
 80080ec:	68f9      	ldr	r1, [r7, #12]
 80080ee:	4618      	mov	r0, r3
 80080f0:	f00c ffc4 	bl	801507c <f_opendir>
 80080f4:	4603      	mov	r3, r0
 80080f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 80080fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d16c      	bne.n	80081dc <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8008102:	f107 0318 	add.w	r3, r7, #24
 8008106:	4939      	ldr	r1, [pc, #228]	; (80081ec <scan_files+0x17c>)
 8008108:	4618      	mov	r0, r3
 800810a:	f00d f85b 	bl	80151c4 <f_readdir>
 800810e:	4603      	mov	r3, r0
 8008110:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8008114:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008118:	2b00      	cmp	r3, #0
 800811a:	d15a      	bne.n	80081d2 <scan_files+0x162>
 800811c:	4b33      	ldr	r3, [pc, #204]	; (80081ec <scan_files+0x17c>)
 800811e:	7a5b      	ldrb	r3, [r3, #9]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d056      	beq.n	80081d2 <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8008124:	4b31      	ldr	r3, [pc, #196]	; (80081ec <scan_files+0x17c>)
 8008126:	7a1b      	ldrb	r3, [r3, #8]
 8008128:	f003 0310 	and.w	r3, r3, #16
 800812c:	2b00      	cmp	r3, #0
 800812e:	d14e      	bne.n	80081ce <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 8008130:	466b      	mov	r3, sp
 8008132:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 8008134:	482e      	ldr	r0, [pc, #184]	; (80081f0 <scan_files+0x180>)
 8008136:	f7f8 f85b 	bl	80001f0 <strlen>
 800813a:	4604      	mov	r4, r0
 800813c:	4623      	mov	r3, r4
 800813e:	3b01      	subs	r3, #1
 8008140:	653b      	str	r3, [r7, #80]	; 0x50
 8008142:	4620      	mov	r0, r4
 8008144:	f04f 0100 	mov.w	r1, #0
 8008148:	f04f 0200 	mov.w	r2, #0
 800814c:	f04f 0300 	mov.w	r3, #0
 8008150:	00cb      	lsls	r3, r1, #3
 8008152:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8008156:	00c2      	lsls	r2, r0, #3
 8008158:	4620      	mov	r0, r4
 800815a:	f04f 0100 	mov.w	r1, #0
 800815e:	f04f 0200 	mov.w	r2, #0
 8008162:	f04f 0300 	mov.w	r3, #0
 8008166:	00cb      	lsls	r3, r1, #3
 8008168:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800816c:	00c2      	lsls	r2, r0, #3
 800816e:	1de3      	adds	r3, r4, #7
 8008170:	08db      	lsrs	r3, r3, #3
 8008172:	00db      	lsls	r3, r3, #3
 8008174:	ebad 0d03 	sub.w	sp, sp, r3
 8008178:	466b      	mov	r3, sp
 800817a:	3300      	adds	r3, #0
 800817c:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 800817e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008180:	4619      	mov	r1, r3
 8008182:	481b      	ldr	r0, [pc, #108]	; (80081f0 <scan_files+0x180>)
 8008184:	f000 f8aa 	bl	80082dc <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 8008188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800818a:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800818e:	4619      	mov	r1, r3
 8008190:	4817      	ldr	r0, [pc, #92]	; (80081f0 <scan_files+0x180>)
 8008192:	f013 fc0a 	bl	801b9aa <strncmp>
 8008196:	4603      	mov	r3, r0
 8008198:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 800819c:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d112      	bne.n	80081ca <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 80081a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081a6:	f107 0214 	add.w	r2, r7, #20
 80081aa:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 80081ae:	4618      	mov	r0, r3
 80081b0:	f000 f820 	bl	80081f4 <extract_filename_suffix>
 80081b4:	4603      	mov	r3, r0
 80081b6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d202      	bcs.n	80081ca <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 80081c4:	697a      	ldr	r2, [r7, #20]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	601a      	str	r2, [r3, #0]
 80081ca:	46b5      	mov	sp, r6
 80081cc:	e799      	b.n	8008102 <scan_files+0x92>
            	continue; // don't enter directory
 80081ce:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80081d0:	e797      	b.n	8008102 <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 80081d2:	f107 0318 	add.w	r3, r7, #24
 80081d6:	4618      	mov	r0, r3
 80081d8:	f00c ffc9 	bl	801516e <f_closedir>
    }

    return res;
 80081dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081e0:	46ad      	mov	sp, r5
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3764      	adds	r7, #100	; 0x64
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081ea:	bf00      	nop
 80081ec:	200007b0 	.word	0x200007b0
 80081f0:	200007b9 	.word	0x200007b9

080081f4 <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 80081f4:	b5b0      	push	{r4, r5, r7, lr}
 80081f6:	b088      	sub	sp, #32
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	460b      	mov	r3, r1
 80081fe:	607a      	str	r2, [r7, #4]
 8008200:	72fb      	strb	r3, [r7, #11]
 8008202:	466b      	mov	r3, sp
 8008204:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 8008206:	68f8      	ldr	r0, [r7, #12]
 8008208:	f7f7 fff2 	bl	80001f0 <strlen>
 800820c:	4603      	mov	r3, r0
 800820e:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 8008210:	2308      	movs	r3, #8
 8008212:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 8008214:	7f7c      	ldrb	r4, [r7, #29]
 8008216:	4623      	mov	r3, r4
 8008218:	3b01      	subs	r3, #1
 800821a:	61bb      	str	r3, [r7, #24]
 800821c:	b2e0      	uxtb	r0, r4
 800821e:	f04f 0100 	mov.w	r1, #0
 8008222:	f04f 0200 	mov.w	r2, #0
 8008226:	f04f 0300 	mov.w	r3, #0
 800822a:	00cb      	lsls	r3, r1, #3
 800822c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8008230:	00c2      	lsls	r2, r0, #3
 8008232:	b2e0      	uxtb	r0, r4
 8008234:	f04f 0100 	mov.w	r1, #0
 8008238:	f04f 0200 	mov.w	r2, #0
 800823c:	f04f 0300 	mov.w	r3, #0
 8008240:	00cb      	lsls	r3, r1, #3
 8008242:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8008246:	00c2      	lsls	r2, r0, #3
 8008248:	4623      	mov	r3, r4
 800824a:	3307      	adds	r3, #7
 800824c:	08db      	lsrs	r3, r3, #3
 800824e:	00db      	lsls	r3, r3, #3
 8008250:	ebad 0d03 	sub.w	sp, sp, r3
 8008254:	466b      	mov	r3, sp
 8008256:	3300      	adds	r3, #0
 8008258:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 800825a:	2300      	movs	r3, #0
 800825c:	77fb      	strb	r3, [r7, #31]
 800825e:	e014      	b.n	800828a <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 8008260:	7afb      	ldrb	r3, [r7, #11]
 8008262:	1e5a      	subs	r2, r3, #1
 8008264:	7ffb      	ldrb	r3, [r7, #31]
 8008266:	441a      	add	r2, r3
 8008268:	7fbb      	ldrb	r3, [r7, #30]
 800826a:	3b01      	subs	r3, #1
 800826c:	429a      	cmp	r2, r3
 800826e:	da11      	bge.n	8008294 <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 8008270:	7afa      	ldrb	r2, [r7, #11]
 8008272:	7ffb      	ldrb	r3, [r7, #31]
 8008274:	4413      	add	r3, r2
 8008276:	461a      	mov	r2, r3
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	441a      	add	r2, r3
 800827c:	7ffb      	ldrb	r3, [r7, #31]
 800827e:	7811      	ldrb	r1, [r2, #0]
 8008280:	697a      	ldr	r2, [r7, #20]
 8008282:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 8008284:	7ffb      	ldrb	r3, [r7, #31]
 8008286:	3301      	adds	r3, #1
 8008288:	77fb      	strb	r3, [r7, #31]
 800828a:	7ffa      	ldrb	r2, [r7, #31]
 800828c:	7f7b      	ldrb	r3, [r7, #29]
 800828e:	429a      	cmp	r2, r3
 8008290:	d3e6      	bcc.n	8008260 <extract_filename_suffix+0x6c>
 8008292:	e000      	b.n	8008296 <extract_filename_suffix+0xa2>
		}
		else break;
 8008294:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	f107 0110 	add.w	r1, r7, #16
 800829c:	220a      	movs	r2, #10
 800829e:	4618      	mov	r0, r3
 80082a0:	f014 fa48 	bl	801c734 <strtol>
 80082a4:	4603      	mov	r3, r0
 80082a6:	461a      	mov	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 80082ac:	697a      	ldr	r2, [r7, #20]
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d00a      	beq.n	80082ca <extract_filename_suffix+0xd6>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082bc:	d005      	beq.n	80082ca <extract_filename_suffix+0xd6>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d101      	bne.n	80082ce <extract_filename_suffix+0xda>
	{
		return 1;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e000      	b.n	80082d0 <extract_filename_suffix+0xdc>
	}

	return 0;
 80082ce:	2300      	movs	r3, #0
 80082d0:	46ad      	mov	sp, r5
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3720      	adds	r7, #32
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080082dc <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 80082dc:	b590      	push	{r4, r7, lr}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 80082e6:	2300      	movs	r3, #0
 80082e8:	73fb      	strb	r3, [r7, #15]
 80082ea:	e019      	b.n	8008320 <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 80082ec:	7bfb      	ldrb	r3, [r7, #15]
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	4413      	add	r3, r2
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	73bb      	strb	r3, [r7, #14]
 80082f6:	7bbb      	ldrb	r3, [r7, #14]
 80082f8:	3301      	adds	r3, #1
 80082fa:	4a0f      	ldr	r2, [pc, #60]	; (8008338 <str2upper+0x5c>)
 80082fc:	4413      	add	r3, r2
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	f003 0303 	and.w	r3, r3, #3
 8008304:	2b02      	cmp	r3, #2
 8008306:	d102      	bne.n	800830e <str2upper+0x32>
 8008308:	7bbb      	ldrb	r3, [r7, #14]
 800830a:	3b20      	subs	r3, #32
 800830c:	e000      	b.n	8008310 <str2upper+0x34>
 800830e:	7bbb      	ldrb	r3, [r7, #14]
 8008310:	7bfa      	ldrb	r2, [r7, #15]
 8008312:	6839      	ldr	r1, [r7, #0]
 8008314:	440a      	add	r2, r1
 8008316:	b2db      	uxtb	r3, r3
 8008318:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 800831a:	7bfb      	ldrb	r3, [r7, #15]
 800831c:	3301      	adds	r3, #1
 800831e:	73fb      	strb	r3, [r7, #15]
 8008320:	7bfc      	ldrb	r4, [r7, #15]
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f7f7 ff64 	bl	80001f0 <strlen>
 8008328:	4603      	mov	r3, r0
 800832a:	429c      	cmp	r4, r3
 800832c:	d3de      	bcc.n	80082ec <str2upper+0x10>
	}
}
 800832e:	bf00      	nop
 8008330:	bf00      	nop
 8008332:	3714      	adds	r7, #20
 8008334:	46bd      	mov	sp, r7
 8008336:	bd90      	pop	{r4, r7, pc}
 8008338:	08021708 	.word	0x08021708

0800833c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008340:	4b0e      	ldr	r3, [pc, #56]	; (800837c <HAL_Init+0x40>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a0d      	ldr	r2, [pc, #52]	; (800837c <HAL_Init+0x40>)
 8008346:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800834a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800834c:	4b0b      	ldr	r3, [pc, #44]	; (800837c <HAL_Init+0x40>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a0a      	ldr	r2, [pc, #40]	; (800837c <HAL_Init+0x40>)
 8008352:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008356:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008358:	4b08      	ldr	r3, [pc, #32]	; (800837c <HAL_Init+0x40>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a07      	ldr	r2, [pc, #28]	; (800837c <HAL_Init+0x40>)
 800835e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008362:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008364:	2003      	movs	r0, #3
 8008366:	f000 fb92 	bl	8008a8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800836a:	2000      	movs	r0, #0
 800836c:	f7fa fe46 	bl	8002ffc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008370:	f7fa fb0a 	bl	8002988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	40023c00 	.word	0x40023c00

08008380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008380:	b480      	push	{r7}
 8008382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008384:	4b06      	ldr	r3, [pc, #24]	; (80083a0 <HAL_IncTick+0x20>)
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	461a      	mov	r2, r3
 800838a:	4b06      	ldr	r3, [pc, #24]	; (80083a4 <HAL_IncTick+0x24>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4413      	add	r3, r2
 8008390:	4a04      	ldr	r2, [pc, #16]	; (80083a4 <HAL_IncTick+0x24>)
 8008392:	6013      	str	r3, [r2, #0]
}
 8008394:	bf00      	nop
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	2000005c 	.word	0x2000005c
 80083a4:	20007214 	.word	0x20007214

080083a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80083a8:	b480      	push	{r7}
 80083aa:	af00      	add	r7, sp, #0
  return uwTick;
 80083ac:	4b03      	ldr	r3, [pc, #12]	; (80083bc <HAL_GetTick+0x14>)
 80083ae:	681b      	ldr	r3, [r3, #0]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	20007214 	.word	0x20007214

080083c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80083c8:	f7ff ffee 	bl	80083a8 <HAL_GetTick>
 80083cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083d8:	d005      	beq.n	80083e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80083da:	4b0a      	ldr	r3, [pc, #40]	; (8008404 <HAL_Delay+0x44>)
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	461a      	mov	r2, r3
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	4413      	add	r3, r2
 80083e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80083e6:	bf00      	nop
 80083e8:	f7ff ffde 	bl	80083a8 <HAL_GetTick>
 80083ec:	4602      	mov	r2, r0
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d8f7      	bhi.n	80083e8 <HAL_Delay+0x28>
  {
  }
}
 80083f8:	bf00      	nop
 80083fa:	bf00      	nop
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	2000005c 	.word	0x2000005c

08008408 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008410:	2300      	movs	r3, #0
 8008412:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d101      	bne.n	800841e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e033      	b.n	8008486 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008422:	2b00      	cmp	r3, #0
 8008424:	d109      	bne.n	800843a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f7fa fada 	bl	80029e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843e:	f003 0310 	and.w	r3, r3, #16
 8008442:	2b00      	cmp	r3, #0
 8008444:	d118      	bne.n	8008478 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800844a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800844e:	f023 0302 	bic.w	r3, r3, #2
 8008452:	f043 0202 	orr.w	r2, r3, #2
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f94a 	bl	80086f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800846a:	f023 0303 	bic.w	r3, r3, #3
 800846e:	f043 0201 	orr.w	r2, r3, #1
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	641a      	str	r2, [r3, #64]	; 0x40
 8008476:	e001      	b.n	800847c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008484:	7bfb      	ldrb	r3, [r7, #15]
}
 8008486:	4618      	mov	r0, r3
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
	...

08008490 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800849a:	2300      	movs	r3, #0
 800849c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d101      	bne.n	80084ac <HAL_ADC_ConfigChannel+0x1c>
 80084a8:	2302      	movs	r3, #2
 80084aa:	e113      	b.n	80086d4 <HAL_ADC_ConfigChannel+0x244>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2b09      	cmp	r3, #9
 80084ba:	d925      	bls.n	8008508 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68d9      	ldr	r1, [r3, #12]
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	461a      	mov	r2, r3
 80084ca:	4613      	mov	r3, r2
 80084cc:	005b      	lsls	r3, r3, #1
 80084ce:	4413      	add	r3, r2
 80084d0:	3b1e      	subs	r3, #30
 80084d2:	2207      	movs	r2, #7
 80084d4:	fa02 f303 	lsl.w	r3, r2, r3
 80084d8:	43da      	mvns	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	400a      	ands	r2, r1
 80084e0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68d9      	ldr	r1, [r3, #12]
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	689a      	ldr	r2, [r3, #8]
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	4618      	mov	r0, r3
 80084f4:	4603      	mov	r3, r0
 80084f6:	005b      	lsls	r3, r3, #1
 80084f8:	4403      	add	r3, r0
 80084fa:	3b1e      	subs	r3, #30
 80084fc:	409a      	lsls	r2, r3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	430a      	orrs	r2, r1
 8008504:	60da      	str	r2, [r3, #12]
 8008506:	e022      	b.n	800854e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	6919      	ldr	r1, [r3, #16]
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	b29b      	uxth	r3, r3
 8008514:	461a      	mov	r2, r3
 8008516:	4613      	mov	r3, r2
 8008518:	005b      	lsls	r3, r3, #1
 800851a:	4413      	add	r3, r2
 800851c:	2207      	movs	r2, #7
 800851e:	fa02 f303 	lsl.w	r3, r2, r3
 8008522:	43da      	mvns	r2, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	400a      	ands	r2, r1
 800852a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	6919      	ldr	r1, [r3, #16]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	689a      	ldr	r2, [r3, #8]
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	b29b      	uxth	r3, r3
 800853c:	4618      	mov	r0, r3
 800853e:	4603      	mov	r3, r0
 8008540:	005b      	lsls	r3, r3, #1
 8008542:	4403      	add	r3, r0
 8008544:	409a      	lsls	r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	430a      	orrs	r2, r1
 800854c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	2b06      	cmp	r3, #6
 8008554:	d824      	bhi.n	80085a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	685a      	ldr	r2, [r3, #4]
 8008560:	4613      	mov	r3, r2
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	4413      	add	r3, r2
 8008566:	3b05      	subs	r3, #5
 8008568:	221f      	movs	r2, #31
 800856a:	fa02 f303 	lsl.w	r3, r2, r3
 800856e:	43da      	mvns	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	400a      	ands	r2, r1
 8008576:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	b29b      	uxth	r3, r3
 8008584:	4618      	mov	r0, r3
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	685a      	ldr	r2, [r3, #4]
 800858a:	4613      	mov	r3, r2
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	4413      	add	r3, r2
 8008590:	3b05      	subs	r3, #5
 8008592:	fa00 f203 	lsl.w	r2, r0, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	430a      	orrs	r2, r1
 800859c:	635a      	str	r2, [r3, #52]	; 0x34
 800859e:	e04c      	b.n	800863a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	2b0c      	cmp	r3, #12
 80085a6:	d824      	bhi.n	80085f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	685a      	ldr	r2, [r3, #4]
 80085b2:	4613      	mov	r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	4413      	add	r3, r2
 80085b8:	3b23      	subs	r3, #35	; 0x23
 80085ba:	221f      	movs	r2, #31
 80085bc:	fa02 f303 	lsl.w	r3, r2, r3
 80085c0:	43da      	mvns	r2, r3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	400a      	ands	r2, r1
 80085c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	4618      	mov	r0, r3
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	685a      	ldr	r2, [r3, #4]
 80085dc:	4613      	mov	r3, r2
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	4413      	add	r3, r2
 80085e2:	3b23      	subs	r3, #35	; 0x23
 80085e4:	fa00 f203 	lsl.w	r2, r0, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	430a      	orrs	r2, r1
 80085ee:	631a      	str	r2, [r3, #48]	; 0x30
 80085f0:	e023      	b.n	800863a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	685a      	ldr	r2, [r3, #4]
 80085fc:	4613      	mov	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	3b41      	subs	r3, #65	; 0x41
 8008604:	221f      	movs	r2, #31
 8008606:	fa02 f303 	lsl.w	r3, r2, r3
 800860a:	43da      	mvns	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	400a      	ands	r2, r1
 8008612:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	b29b      	uxth	r3, r3
 8008620:	4618      	mov	r0, r3
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	685a      	ldr	r2, [r3, #4]
 8008626:	4613      	mov	r3, r2
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	4413      	add	r3, r2
 800862c:	3b41      	subs	r3, #65	; 0x41
 800862e:	fa00 f203 	lsl.w	r2, r0, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	430a      	orrs	r2, r1
 8008638:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800863a:	4b29      	ldr	r3, [pc, #164]	; (80086e0 <HAL_ADC_ConfigChannel+0x250>)
 800863c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a28      	ldr	r2, [pc, #160]	; (80086e4 <HAL_ADC_ConfigChannel+0x254>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d10f      	bne.n	8008668 <HAL_ADC_ConfigChannel+0x1d8>
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2b12      	cmp	r3, #18
 800864e:	d10b      	bne.n	8008668 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a1d      	ldr	r2, [pc, #116]	; (80086e4 <HAL_ADC_ConfigChannel+0x254>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d12b      	bne.n	80086ca <HAL_ADC_ConfigChannel+0x23a>
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a1c      	ldr	r2, [pc, #112]	; (80086e8 <HAL_ADC_ConfigChannel+0x258>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d003      	beq.n	8008684 <HAL_ADC_ConfigChannel+0x1f4>
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2b11      	cmp	r3, #17
 8008682:	d122      	bne.n	80086ca <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a11      	ldr	r2, [pc, #68]	; (80086e8 <HAL_ADC_ConfigChannel+0x258>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d111      	bne.n	80086ca <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80086a6:	4b11      	ldr	r3, [pc, #68]	; (80086ec <HAL_ADC_ConfigChannel+0x25c>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a11      	ldr	r2, [pc, #68]	; (80086f0 <HAL_ADC_ConfigChannel+0x260>)
 80086ac:	fba2 2303 	umull	r2, r3, r2, r3
 80086b0:	0c9a      	lsrs	r2, r3, #18
 80086b2:	4613      	mov	r3, r2
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	4413      	add	r3, r2
 80086b8:	005b      	lsls	r3, r3, #1
 80086ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80086bc:	e002      	b.n	80086c4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	3b01      	subs	r3, #1
 80086c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d1f9      	bne.n	80086be <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80086d2:	2300      	movs	r3, #0
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3714      	adds	r7, #20
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr
 80086e0:	40012300 	.word	0x40012300
 80086e4:	40012000 	.word	0x40012000
 80086e8:	10000012 	.word	0x10000012
 80086ec:	20000000 	.word	0x20000000
 80086f0:	431bde83 	.word	0x431bde83

080086f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80086fc:	4b79      	ldr	r3, [pc, #484]	; (80088e4 <ADC_Init+0x1f0>)
 80086fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	685a      	ldr	r2, [r3, #4]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	431a      	orrs	r2, r3
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	685a      	ldr	r2, [r3, #4]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008728:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	6859      	ldr	r1, [r3, #4]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	021a      	lsls	r2, r3, #8
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	430a      	orrs	r2, r1
 800873c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	685a      	ldr	r2, [r3, #4]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800874c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	6859      	ldr	r1, [r3, #4]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	689a      	ldr	r2, [r3, #8]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	430a      	orrs	r2, r1
 800875e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	689a      	ldr	r2, [r3, #8]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800876e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	6899      	ldr	r1, [r3, #8]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	68da      	ldr	r2, [r3, #12]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	430a      	orrs	r2, r1
 8008780:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008786:	4a58      	ldr	r2, [pc, #352]	; (80088e8 <ADC_Init+0x1f4>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d022      	beq.n	80087d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	689a      	ldr	r2, [r3, #8]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800879a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	6899      	ldr	r1, [r3, #8]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	430a      	orrs	r2, r1
 80087ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	689a      	ldr	r2, [r3, #8]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80087bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	6899      	ldr	r1, [r3, #8]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	430a      	orrs	r2, r1
 80087ce:	609a      	str	r2, [r3, #8]
 80087d0:	e00f      	b.n	80087f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	689a      	ldr	r2, [r3, #8]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80087e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	689a      	ldr	r2, [r3, #8]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80087f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	689a      	ldr	r2, [r3, #8]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f022 0202 	bic.w	r2, r2, #2
 8008800:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	6899      	ldr	r1, [r3, #8]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	7e1b      	ldrb	r3, [r3, #24]
 800880c:	005a      	lsls	r2, r3, #1
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	430a      	orrs	r2, r1
 8008814:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 3020 	ldrb.w	r3, [r3, #32]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d01b      	beq.n	8008858 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	685a      	ldr	r2, [r3, #4]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800882e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	685a      	ldr	r2, [r3, #4]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800883e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	6859      	ldr	r1, [r3, #4]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884a:	3b01      	subs	r3, #1
 800884c:	035a      	lsls	r2, r3, #13
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	430a      	orrs	r2, r1
 8008854:	605a      	str	r2, [r3, #4]
 8008856:	e007      	b.n	8008868 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	685a      	ldr	r2, [r3, #4]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008866:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008876:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	69db      	ldr	r3, [r3, #28]
 8008882:	3b01      	subs	r3, #1
 8008884:	051a      	lsls	r2, r3, #20
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	430a      	orrs	r2, r1
 800888c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	689a      	ldr	r2, [r3, #8]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800889c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	6899      	ldr	r1, [r3, #8]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80088aa:	025a      	lsls	r2, r3, #9
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	430a      	orrs	r2, r1
 80088b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	689a      	ldr	r2, [r3, #8]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	6899      	ldr	r1, [r3, #8]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	029a      	lsls	r2, r3, #10
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	430a      	orrs	r2, r1
 80088d6:	609a      	str	r2, [r3, #8]
}
 80088d8:	bf00      	nop
 80088da:	3714      	adds	r7, #20
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr
 80088e4:	40012300 	.word	0x40012300
 80088e8:	0f000001 	.word	0x0f000001

080088ec <__NVIC_SetPriorityGrouping>:
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f003 0307 	and.w	r3, r3, #7
 80088fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80088fc:	4b0c      	ldr	r3, [pc, #48]	; (8008930 <__NVIC_SetPriorityGrouping+0x44>)
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008908:	4013      	ands	r3, r2
 800890a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800891c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800891e:	4a04      	ldr	r2, [pc, #16]	; (8008930 <__NVIC_SetPriorityGrouping+0x44>)
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	60d3      	str	r3, [r2, #12]
}
 8008924:	bf00      	nop
 8008926:	3714      	adds	r7, #20
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr
 8008930:	e000ed00 	.word	0xe000ed00

08008934 <__NVIC_GetPriorityGrouping>:
{
 8008934:	b480      	push	{r7}
 8008936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008938:	4b04      	ldr	r3, [pc, #16]	; (800894c <__NVIC_GetPriorityGrouping+0x18>)
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	0a1b      	lsrs	r3, r3, #8
 800893e:	f003 0307 	and.w	r3, r3, #7
}
 8008942:	4618      	mov	r0, r3
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr
 800894c:	e000ed00 	.word	0xe000ed00

08008950 <__NVIC_EnableIRQ>:
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	4603      	mov	r3, r0
 8008958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800895a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800895e:	2b00      	cmp	r3, #0
 8008960:	db0b      	blt.n	800897a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008962:	79fb      	ldrb	r3, [r7, #7]
 8008964:	f003 021f 	and.w	r2, r3, #31
 8008968:	4907      	ldr	r1, [pc, #28]	; (8008988 <__NVIC_EnableIRQ+0x38>)
 800896a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800896e:	095b      	lsrs	r3, r3, #5
 8008970:	2001      	movs	r0, #1
 8008972:	fa00 f202 	lsl.w	r2, r0, r2
 8008976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800897a:	bf00      	nop
 800897c:	370c      	adds	r7, #12
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop
 8008988:	e000e100 	.word	0xe000e100

0800898c <__NVIC_DisableIRQ>:
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	4603      	mov	r3, r0
 8008994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800899a:	2b00      	cmp	r3, #0
 800899c:	db12      	blt.n	80089c4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800899e:	79fb      	ldrb	r3, [r7, #7]
 80089a0:	f003 021f 	and.w	r2, r3, #31
 80089a4:	490a      	ldr	r1, [pc, #40]	; (80089d0 <__NVIC_DisableIRQ+0x44>)
 80089a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089aa:	095b      	lsrs	r3, r3, #5
 80089ac:	2001      	movs	r0, #1
 80089ae:	fa00 f202 	lsl.w	r2, r0, r2
 80089b2:	3320      	adds	r3, #32
 80089b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80089b8:	f3bf 8f4f 	dsb	sy
}
 80089bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80089be:	f3bf 8f6f 	isb	sy
}
 80089c2:	bf00      	nop
}
 80089c4:	bf00      	nop
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr
 80089d0:	e000e100 	.word	0xe000e100

080089d4 <__NVIC_SetPriority>:
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	4603      	mov	r3, r0
 80089dc:	6039      	str	r1, [r7, #0]
 80089de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	db0a      	blt.n	80089fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	b2da      	uxtb	r2, r3
 80089ec:	490c      	ldr	r1, [pc, #48]	; (8008a20 <__NVIC_SetPriority+0x4c>)
 80089ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089f2:	0112      	lsls	r2, r2, #4
 80089f4:	b2d2      	uxtb	r2, r2
 80089f6:	440b      	add	r3, r1
 80089f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80089fc:	e00a      	b.n	8008a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	b2da      	uxtb	r2, r3
 8008a02:	4908      	ldr	r1, [pc, #32]	; (8008a24 <__NVIC_SetPriority+0x50>)
 8008a04:	79fb      	ldrb	r3, [r7, #7]
 8008a06:	f003 030f 	and.w	r3, r3, #15
 8008a0a:	3b04      	subs	r3, #4
 8008a0c:	0112      	lsls	r2, r2, #4
 8008a0e:	b2d2      	uxtb	r2, r2
 8008a10:	440b      	add	r3, r1
 8008a12:	761a      	strb	r2, [r3, #24]
}
 8008a14:	bf00      	nop
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr
 8008a20:	e000e100 	.word	0xe000e100
 8008a24:	e000ed00 	.word	0xe000ed00

08008a28 <NVIC_EncodePriority>:
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b089      	sub	sp, #36	; 0x24
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f003 0307 	and.w	r3, r3, #7
 8008a3a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	f1c3 0307 	rsb	r3, r3, #7
 8008a42:	2b04      	cmp	r3, #4
 8008a44:	bf28      	it	cs
 8008a46:	2304      	movcs	r3, #4
 8008a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	3304      	adds	r3, #4
 8008a4e:	2b06      	cmp	r3, #6
 8008a50:	d902      	bls.n	8008a58 <NVIC_EncodePriority+0x30>
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	3b03      	subs	r3, #3
 8008a56:	e000      	b.n	8008a5a <NVIC_EncodePriority+0x32>
 8008a58:	2300      	movs	r3, #0
 8008a5a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a60:	69bb      	ldr	r3, [r7, #24]
 8008a62:	fa02 f303 	lsl.w	r3, r2, r3
 8008a66:	43da      	mvns	r2, r3
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	401a      	ands	r2, r3
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008a70:	f04f 31ff 	mov.w	r1, #4294967295
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	fa01 f303 	lsl.w	r3, r1, r3
 8008a7a:	43d9      	mvns	r1, r3
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a80:	4313      	orrs	r3, r2
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3724      	adds	r7, #36	; 0x24
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr

08008a8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b082      	sub	sp, #8
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f7ff ff28 	bl	80088ec <__NVIC_SetPriorityGrouping>
}
 8008a9c:	bf00      	nop
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	4603      	mov	r3, r0
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	607a      	str	r2, [r7, #4]
 8008ab0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008ab6:	f7ff ff3d 	bl	8008934 <__NVIC_GetPriorityGrouping>
 8008aba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	68b9      	ldr	r1, [r7, #8]
 8008ac0:	6978      	ldr	r0, [r7, #20]
 8008ac2:	f7ff ffb1 	bl	8008a28 <NVIC_EncodePriority>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008acc:	4611      	mov	r1, r2
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7ff ff80 	bl	80089d4 <__NVIC_SetPriority>
}
 8008ad4:	bf00      	nop
 8008ad6:	3718      	adds	r7, #24
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7ff ff30 	bl	8008950 <__NVIC_EnableIRQ>
}
 8008af0:	bf00      	nop
 8008af2:	3708      	adds	r7, #8
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	4603      	mov	r3, r0
 8008b00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7ff ff40 	bl	800898c <__NVIC_DisableIRQ>
}
 8008b0c:	bf00      	nop
 8008b0e:	3708      	adds	r7, #8
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b089      	sub	sp, #36	; 0x24
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008b22:	2300      	movs	r3, #0
 8008b24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008b26:	2300      	movs	r3, #0
 8008b28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	61fb      	str	r3, [r7, #28]
 8008b2e:	e177      	b.n	8008e20 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008b30:	2201      	movs	r2, #1
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	fa02 f303 	lsl.w	r3, r2, r3
 8008b38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	697a      	ldr	r2, [r7, #20]
 8008b40:	4013      	ands	r3, r2
 8008b42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008b44:	693a      	ldr	r2, [r7, #16]
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	f040 8166 	bne.w	8008e1a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	f003 0303 	and.w	r3, r3, #3
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d005      	beq.n	8008b66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d130      	bne.n	8008bc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	005b      	lsls	r3, r3, #1
 8008b70:	2203      	movs	r2, #3
 8008b72:	fa02 f303 	lsl.w	r3, r2, r3
 8008b76:	43db      	mvns	r3, r3
 8008b78:	69ba      	ldr	r2, [r7, #24]
 8008b7a:	4013      	ands	r3, r2
 8008b7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	68da      	ldr	r2, [r3, #12]
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	005b      	lsls	r3, r3, #1
 8008b86:	fa02 f303 	lsl.w	r3, r2, r3
 8008b8a:	69ba      	ldr	r2, [r7, #24]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	69ba      	ldr	r2, [r7, #24]
 8008b94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba4:	43db      	mvns	r3, r3
 8008ba6:	69ba      	ldr	r2, [r7, #24]
 8008ba8:	4013      	ands	r3, r2
 8008baa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	091b      	lsrs	r3, r3, #4
 8008bb2:	f003 0201 	and.w	r2, r3, #1
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bbc:	69ba      	ldr	r2, [r7, #24]
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	69ba      	ldr	r2, [r7, #24]
 8008bc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	f003 0303 	and.w	r3, r3, #3
 8008bd0:	2b03      	cmp	r3, #3
 8008bd2:	d017      	beq.n	8008c04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	005b      	lsls	r3, r3, #1
 8008bde:	2203      	movs	r2, #3
 8008be0:	fa02 f303 	lsl.w	r3, r2, r3
 8008be4:	43db      	mvns	r3, r3
 8008be6:	69ba      	ldr	r2, [r7, #24]
 8008be8:	4013      	ands	r3, r2
 8008bea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	689a      	ldr	r2, [r3, #8]
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	005b      	lsls	r3, r3, #1
 8008bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf8:	69ba      	ldr	r2, [r7, #24]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	69ba      	ldr	r2, [r7, #24]
 8008c02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	f003 0303 	and.w	r3, r3, #3
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d123      	bne.n	8008c58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	08da      	lsrs	r2, r3, #3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	3208      	adds	r2, #8
 8008c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	f003 0307 	and.w	r3, r3, #7
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	220f      	movs	r2, #15
 8008c28:	fa02 f303 	lsl.w	r3, r2, r3
 8008c2c:	43db      	mvns	r3, r3
 8008c2e:	69ba      	ldr	r2, [r7, #24]
 8008c30:	4013      	ands	r3, r2
 8008c32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	691a      	ldr	r2, [r3, #16]
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	f003 0307 	and.w	r3, r3, #7
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	fa02 f303 	lsl.w	r3, r2, r3
 8008c44:	69ba      	ldr	r2, [r7, #24]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	08da      	lsrs	r2, r3, #3
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	3208      	adds	r2, #8
 8008c52:	69b9      	ldr	r1, [r7, #24]
 8008c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	005b      	lsls	r3, r3, #1
 8008c62:	2203      	movs	r2, #3
 8008c64:	fa02 f303 	lsl.w	r3, r2, r3
 8008c68:	43db      	mvns	r3, r3
 8008c6a:	69ba      	ldr	r2, [r7, #24]
 8008c6c:	4013      	ands	r3, r2
 8008c6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	f003 0203 	and.w	r2, r3, #3
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	005b      	lsls	r3, r3, #1
 8008c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c80:	69ba      	ldr	r2, [r7, #24]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	69ba      	ldr	r2, [r7, #24]
 8008c8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f000 80c0 	beq.w	8008e1a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	60fb      	str	r3, [r7, #12]
 8008c9e:	4b66      	ldr	r3, [pc, #408]	; (8008e38 <HAL_GPIO_Init+0x324>)
 8008ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ca2:	4a65      	ldr	r2, [pc, #404]	; (8008e38 <HAL_GPIO_Init+0x324>)
 8008ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8008caa:	4b63      	ldr	r3, [pc, #396]	; (8008e38 <HAL_GPIO_Init+0x324>)
 8008cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cb2:	60fb      	str	r3, [r7, #12]
 8008cb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008cb6:	4a61      	ldr	r2, [pc, #388]	; (8008e3c <HAL_GPIO_Init+0x328>)
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	089b      	lsrs	r3, r3, #2
 8008cbc:	3302      	adds	r3, #2
 8008cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	f003 0303 	and.w	r3, r3, #3
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	220f      	movs	r2, #15
 8008cce:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd2:	43db      	mvns	r3, r3
 8008cd4:	69ba      	ldr	r2, [r7, #24]
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a58      	ldr	r2, [pc, #352]	; (8008e40 <HAL_GPIO_Init+0x32c>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d037      	beq.n	8008d52 <HAL_GPIO_Init+0x23e>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4a57      	ldr	r2, [pc, #348]	; (8008e44 <HAL_GPIO_Init+0x330>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d031      	beq.n	8008d4e <HAL_GPIO_Init+0x23a>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a56      	ldr	r2, [pc, #344]	; (8008e48 <HAL_GPIO_Init+0x334>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d02b      	beq.n	8008d4a <HAL_GPIO_Init+0x236>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4a55      	ldr	r2, [pc, #340]	; (8008e4c <HAL_GPIO_Init+0x338>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d025      	beq.n	8008d46 <HAL_GPIO_Init+0x232>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a54      	ldr	r2, [pc, #336]	; (8008e50 <HAL_GPIO_Init+0x33c>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d01f      	beq.n	8008d42 <HAL_GPIO_Init+0x22e>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a53      	ldr	r2, [pc, #332]	; (8008e54 <HAL_GPIO_Init+0x340>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d019      	beq.n	8008d3e <HAL_GPIO_Init+0x22a>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a52      	ldr	r2, [pc, #328]	; (8008e58 <HAL_GPIO_Init+0x344>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d013      	beq.n	8008d3a <HAL_GPIO_Init+0x226>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a51      	ldr	r2, [pc, #324]	; (8008e5c <HAL_GPIO_Init+0x348>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d00d      	beq.n	8008d36 <HAL_GPIO_Init+0x222>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a50      	ldr	r2, [pc, #320]	; (8008e60 <HAL_GPIO_Init+0x34c>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d007      	beq.n	8008d32 <HAL_GPIO_Init+0x21e>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a4f      	ldr	r2, [pc, #316]	; (8008e64 <HAL_GPIO_Init+0x350>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d101      	bne.n	8008d2e <HAL_GPIO_Init+0x21a>
 8008d2a:	2309      	movs	r3, #9
 8008d2c:	e012      	b.n	8008d54 <HAL_GPIO_Init+0x240>
 8008d2e:	230a      	movs	r3, #10
 8008d30:	e010      	b.n	8008d54 <HAL_GPIO_Init+0x240>
 8008d32:	2308      	movs	r3, #8
 8008d34:	e00e      	b.n	8008d54 <HAL_GPIO_Init+0x240>
 8008d36:	2307      	movs	r3, #7
 8008d38:	e00c      	b.n	8008d54 <HAL_GPIO_Init+0x240>
 8008d3a:	2306      	movs	r3, #6
 8008d3c:	e00a      	b.n	8008d54 <HAL_GPIO_Init+0x240>
 8008d3e:	2305      	movs	r3, #5
 8008d40:	e008      	b.n	8008d54 <HAL_GPIO_Init+0x240>
 8008d42:	2304      	movs	r3, #4
 8008d44:	e006      	b.n	8008d54 <HAL_GPIO_Init+0x240>
 8008d46:	2303      	movs	r3, #3
 8008d48:	e004      	b.n	8008d54 <HAL_GPIO_Init+0x240>
 8008d4a:	2302      	movs	r3, #2
 8008d4c:	e002      	b.n	8008d54 <HAL_GPIO_Init+0x240>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e000      	b.n	8008d54 <HAL_GPIO_Init+0x240>
 8008d52:	2300      	movs	r3, #0
 8008d54:	69fa      	ldr	r2, [r7, #28]
 8008d56:	f002 0203 	and.w	r2, r2, #3
 8008d5a:	0092      	lsls	r2, r2, #2
 8008d5c:	4093      	lsls	r3, r2
 8008d5e:	69ba      	ldr	r2, [r7, #24]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008d64:	4935      	ldr	r1, [pc, #212]	; (8008e3c <HAL_GPIO_Init+0x328>)
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	089b      	lsrs	r3, r3, #2
 8008d6a:	3302      	adds	r3, #2
 8008d6c:	69ba      	ldr	r2, [r7, #24]
 8008d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008d72:	4b3d      	ldr	r3, [pc, #244]	; (8008e68 <HAL_GPIO_Init+0x354>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	43db      	mvns	r3, r3
 8008d7c:	69ba      	ldr	r2, [r7, #24]
 8008d7e:	4013      	ands	r3, r2
 8008d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d003      	beq.n	8008d96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008d8e:	69ba      	ldr	r2, [r7, #24]
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008d96:	4a34      	ldr	r2, [pc, #208]	; (8008e68 <HAL_GPIO_Init+0x354>)
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008d9c:	4b32      	ldr	r3, [pc, #200]	; (8008e68 <HAL_GPIO_Init+0x354>)
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	43db      	mvns	r3, r3
 8008da6:	69ba      	ldr	r2, [r7, #24]
 8008da8:	4013      	ands	r3, r2
 8008daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d003      	beq.n	8008dc0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008db8:	69ba      	ldr	r2, [r7, #24]
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008dc0:	4a29      	ldr	r2, [pc, #164]	; (8008e68 <HAL_GPIO_Init+0x354>)
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008dc6:	4b28      	ldr	r3, [pc, #160]	; (8008e68 <HAL_GPIO_Init+0x354>)
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	43db      	mvns	r3, r3
 8008dd0:	69ba      	ldr	r2, [r7, #24]
 8008dd2:	4013      	ands	r3, r2
 8008dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d003      	beq.n	8008dea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008de2:	69ba      	ldr	r2, [r7, #24]
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008dea:	4a1f      	ldr	r2, [pc, #124]	; (8008e68 <HAL_GPIO_Init+0x354>)
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008df0:	4b1d      	ldr	r3, [pc, #116]	; (8008e68 <HAL_GPIO_Init+0x354>)
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	43db      	mvns	r3, r3
 8008dfa:	69ba      	ldr	r2, [r7, #24]
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d003      	beq.n	8008e14 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008e0c:	69ba      	ldr	r2, [r7, #24]
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008e14:	4a14      	ldr	r2, [pc, #80]	; (8008e68 <HAL_GPIO_Init+0x354>)
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	61fb      	str	r3, [r7, #28]
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	2b0f      	cmp	r3, #15
 8008e24:	f67f ae84 	bls.w	8008b30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008e28:	bf00      	nop
 8008e2a:	bf00      	nop
 8008e2c:	3724      	adds	r7, #36	; 0x24
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop
 8008e38:	40023800 	.word	0x40023800
 8008e3c:	40013800 	.word	0x40013800
 8008e40:	40020000 	.word	0x40020000
 8008e44:	40020400 	.word	0x40020400
 8008e48:	40020800 	.word	0x40020800
 8008e4c:	40020c00 	.word	0x40020c00
 8008e50:	40021000 	.word	0x40021000
 8008e54:	40021400 	.word	0x40021400
 8008e58:	40021800 	.word	0x40021800
 8008e5c:	40021c00 	.word	0x40021c00
 8008e60:	40022000 	.word	0x40022000
 8008e64:	40022400 	.word	0x40022400
 8008e68:	40013c00 	.word	0x40013c00

08008e6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	460b      	mov	r3, r1
 8008e76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	691a      	ldr	r2, [r3, #16]
 8008e7c:	887b      	ldrh	r3, [r7, #2]
 8008e7e:	4013      	ands	r3, r2
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d002      	beq.n	8008e8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008e84:	2301      	movs	r3, #1
 8008e86:	73fb      	strb	r3, [r7, #15]
 8008e88:	e001      	b.n	8008e8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3714      	adds	r7, #20
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	807b      	strh	r3, [r7, #2]
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008eac:	787b      	ldrb	r3, [r7, #1]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d003      	beq.n	8008eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008eb2:	887a      	ldrh	r2, [r7, #2]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008eb8:	e003      	b.n	8008ec2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008eba:	887b      	ldrh	r3, [r7, #2]
 8008ebc:	041a      	lsls	r2, r3, #16
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	619a      	str	r2, [r3, #24]
}
 8008ec2:	bf00      	nop
 8008ec4:	370c      	adds	r7, #12
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr
	...

08008ed0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008eda:	4b08      	ldr	r3, [pc, #32]	; (8008efc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008edc:	695a      	ldr	r2, [r3, #20]
 8008ede:	88fb      	ldrh	r3, [r7, #6]
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d006      	beq.n	8008ef4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008ee6:	4a05      	ldr	r2, [pc, #20]	; (8008efc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008ee8:	88fb      	ldrh	r3, [r7, #6]
 8008eea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008eec:	88fb      	ldrh	r3, [r7, #6]
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7fa fce4 	bl	80038bc <HAL_GPIO_EXTI_Callback>
  }
}
 8008ef4:	bf00      	nop
 8008ef6:	3708      	adds	r7, #8
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	40013c00 	.word	0x40013c00

08008f00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d101      	bne.n	8008f12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e12b      	b.n	800916a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d106      	bne.n	8008f2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f7f9 fd9e 	bl	8002a68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2224      	movs	r2, #36	; 0x24
 8008f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f022 0201 	bic.w	r2, r2, #1
 8008f42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008f64:	f002 fe9a 	bl	800bc9c <HAL_RCC_GetPCLK1Freq>
 8008f68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	4a81      	ldr	r2, [pc, #516]	; (8009174 <HAL_I2C_Init+0x274>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d807      	bhi.n	8008f84 <HAL_I2C_Init+0x84>
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	4a80      	ldr	r2, [pc, #512]	; (8009178 <HAL_I2C_Init+0x278>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	bf94      	ite	ls
 8008f7c:	2301      	movls	r3, #1
 8008f7e:	2300      	movhi	r3, #0
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	e006      	b.n	8008f92 <HAL_I2C_Init+0x92>
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	4a7d      	ldr	r2, [pc, #500]	; (800917c <HAL_I2C_Init+0x27c>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	bf94      	ite	ls
 8008f8c:	2301      	movls	r3, #1
 8008f8e:	2300      	movhi	r3, #0
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d001      	beq.n	8008f9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	e0e7      	b.n	800916a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	4a78      	ldr	r2, [pc, #480]	; (8009180 <HAL_I2C_Init+0x280>)
 8008f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8008fa2:	0c9b      	lsrs	r3, r3, #18
 8008fa4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	68ba      	ldr	r2, [r7, #8]
 8008fb6:	430a      	orrs	r2, r1
 8008fb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	6a1b      	ldr	r3, [r3, #32]
 8008fc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	4a6a      	ldr	r2, [pc, #424]	; (8009174 <HAL_I2C_Init+0x274>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d802      	bhi.n	8008fd4 <HAL_I2C_Init+0xd4>
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	e009      	b.n	8008fe8 <HAL_I2C_Init+0xe8>
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008fda:	fb02 f303 	mul.w	r3, r2, r3
 8008fde:	4a69      	ldr	r2, [pc, #420]	; (8009184 <HAL_I2C_Init+0x284>)
 8008fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8008fe4:	099b      	lsrs	r3, r3, #6
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	6812      	ldr	r2, [r2, #0]
 8008fec:	430b      	orrs	r3, r1
 8008fee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	69db      	ldr	r3, [r3, #28]
 8008ff6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008ffa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	495c      	ldr	r1, [pc, #368]	; (8009174 <HAL_I2C_Init+0x274>)
 8009004:	428b      	cmp	r3, r1
 8009006:	d819      	bhi.n	800903c <HAL_I2C_Init+0x13c>
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	1e59      	subs	r1, r3, #1
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	005b      	lsls	r3, r3, #1
 8009012:	fbb1 f3f3 	udiv	r3, r1, r3
 8009016:	1c59      	adds	r1, r3, #1
 8009018:	f640 73fc 	movw	r3, #4092	; 0xffc
 800901c:	400b      	ands	r3, r1
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00a      	beq.n	8009038 <HAL_I2C_Init+0x138>
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	1e59      	subs	r1, r3, #1
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	005b      	lsls	r3, r3, #1
 800902c:	fbb1 f3f3 	udiv	r3, r1, r3
 8009030:	3301      	adds	r3, #1
 8009032:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009036:	e051      	b.n	80090dc <HAL_I2C_Init+0x1dc>
 8009038:	2304      	movs	r3, #4
 800903a:	e04f      	b.n	80090dc <HAL_I2C_Init+0x1dc>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d111      	bne.n	8009068 <HAL_I2C_Init+0x168>
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	1e58      	subs	r0, r3, #1
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6859      	ldr	r1, [r3, #4]
 800904c:	460b      	mov	r3, r1
 800904e:	005b      	lsls	r3, r3, #1
 8009050:	440b      	add	r3, r1
 8009052:	fbb0 f3f3 	udiv	r3, r0, r3
 8009056:	3301      	adds	r3, #1
 8009058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800905c:	2b00      	cmp	r3, #0
 800905e:	bf0c      	ite	eq
 8009060:	2301      	moveq	r3, #1
 8009062:	2300      	movne	r3, #0
 8009064:	b2db      	uxtb	r3, r3
 8009066:	e012      	b.n	800908e <HAL_I2C_Init+0x18e>
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	1e58      	subs	r0, r3, #1
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6859      	ldr	r1, [r3, #4]
 8009070:	460b      	mov	r3, r1
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	440b      	add	r3, r1
 8009076:	0099      	lsls	r1, r3, #2
 8009078:	440b      	add	r3, r1
 800907a:	fbb0 f3f3 	udiv	r3, r0, r3
 800907e:	3301      	adds	r3, #1
 8009080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009084:	2b00      	cmp	r3, #0
 8009086:	bf0c      	ite	eq
 8009088:	2301      	moveq	r3, #1
 800908a:	2300      	movne	r3, #0
 800908c:	b2db      	uxtb	r3, r3
 800908e:	2b00      	cmp	r3, #0
 8009090:	d001      	beq.n	8009096 <HAL_I2C_Init+0x196>
 8009092:	2301      	movs	r3, #1
 8009094:	e022      	b.n	80090dc <HAL_I2C_Init+0x1dc>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10e      	bne.n	80090bc <HAL_I2C_Init+0x1bc>
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	1e58      	subs	r0, r3, #1
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6859      	ldr	r1, [r3, #4]
 80090a6:	460b      	mov	r3, r1
 80090a8:	005b      	lsls	r3, r3, #1
 80090aa:	440b      	add	r3, r1
 80090ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80090b0:	3301      	adds	r3, #1
 80090b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090ba:	e00f      	b.n	80090dc <HAL_I2C_Init+0x1dc>
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	1e58      	subs	r0, r3, #1
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6859      	ldr	r1, [r3, #4]
 80090c4:	460b      	mov	r3, r1
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	440b      	add	r3, r1
 80090ca:	0099      	lsls	r1, r3, #2
 80090cc:	440b      	add	r3, r1
 80090ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80090d2:	3301      	adds	r3, #1
 80090d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80090dc:	6879      	ldr	r1, [r7, #4]
 80090de:	6809      	ldr	r1, [r1, #0]
 80090e0:	4313      	orrs	r3, r2
 80090e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	69da      	ldr	r2, [r3, #28]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6a1b      	ldr	r3, [r3, #32]
 80090f6:	431a      	orrs	r2, r3
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	430a      	orrs	r2, r1
 80090fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800910a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	6911      	ldr	r1, [r2, #16]
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	68d2      	ldr	r2, [r2, #12]
 8009116:	4311      	orrs	r1, r2
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	6812      	ldr	r2, [r2, #0]
 800911c:	430b      	orrs	r3, r1
 800911e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	695a      	ldr	r2, [r3, #20]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	699b      	ldr	r3, [r3, #24]
 8009132:	431a      	orrs	r2, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	430a      	orrs	r2, r1
 800913a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f042 0201 	orr.w	r2, r2, #1
 800914a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2220      	movs	r2, #32
 8009156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009168:	2300      	movs	r3, #0
}
 800916a:	4618      	mov	r0, r3
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	000186a0 	.word	0x000186a0
 8009178:	001e847f 	.word	0x001e847f
 800917c:	003d08ff 	.word	0x003d08ff
 8009180:	431bde83 	.word	0x431bde83
 8009184:	10624dd3 	.word	0x10624dd3

08009188 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b088      	sub	sp, #32
 800918c:	af02      	add	r7, sp, #8
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	4608      	mov	r0, r1
 8009192:	4611      	mov	r1, r2
 8009194:	461a      	mov	r2, r3
 8009196:	4603      	mov	r3, r0
 8009198:	817b      	strh	r3, [r7, #10]
 800919a:	460b      	mov	r3, r1
 800919c:	813b      	strh	r3, [r7, #8]
 800919e:	4613      	mov	r3, r2
 80091a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80091a2:	f7ff f901 	bl	80083a8 <HAL_GetTick>
 80091a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091ae:	b2db      	uxtb	r3, r3
 80091b0:	2b20      	cmp	r3, #32
 80091b2:	f040 80d9 	bne.w	8009368 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	9300      	str	r3, [sp, #0]
 80091ba:	2319      	movs	r3, #25
 80091bc:	2201      	movs	r2, #1
 80091be:	496d      	ldr	r1, [pc, #436]	; (8009374 <HAL_I2C_Mem_Write+0x1ec>)
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f000 fcb5 	bl	8009b30 <I2C_WaitOnFlagUntilTimeout>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d001      	beq.n	80091d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80091cc:	2302      	movs	r3, #2
 80091ce:	e0cc      	b.n	800936a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d101      	bne.n	80091de <HAL_I2C_Mem_Write+0x56>
 80091da:	2302      	movs	r3, #2
 80091dc:	e0c5      	b.n	800936a <HAL_I2C_Mem_Write+0x1e2>
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2201      	movs	r2, #1
 80091e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f003 0301 	and.w	r3, r3, #1
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d007      	beq.n	8009204 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f042 0201 	orr.w	r2, r2, #1
 8009202:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009212:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2221      	movs	r2, #33	; 0x21
 8009218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2240      	movs	r2, #64	; 0x40
 8009220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	6a3a      	ldr	r2, [r7, #32]
 800922e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009234:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800923a:	b29a      	uxth	r2, r3
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	4a4d      	ldr	r2, [pc, #308]	; (8009378 <HAL_I2C_Mem_Write+0x1f0>)
 8009244:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009246:	88f8      	ldrh	r0, [r7, #6]
 8009248:	893a      	ldrh	r2, [r7, #8]
 800924a:	8979      	ldrh	r1, [r7, #10]
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	9301      	str	r3, [sp, #4]
 8009250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009252:	9300      	str	r3, [sp, #0]
 8009254:	4603      	mov	r3, r0
 8009256:	68f8      	ldr	r0, [r7, #12]
 8009258:	f000 faec 	bl	8009834 <I2C_RequestMemoryWrite>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d052      	beq.n	8009308 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	e081      	b.n	800936a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800926a:	68f8      	ldr	r0, [r7, #12]
 800926c:	f000 fd36 	bl	8009cdc <I2C_WaitOnTXEFlagUntilTimeout>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d00d      	beq.n	8009292 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800927a:	2b04      	cmp	r3, #4
 800927c:	d107      	bne.n	800928e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800928c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	e06b      	b.n	800936a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009296:	781a      	ldrb	r2, [r3, #0]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a2:	1c5a      	adds	r2, r3, #1
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092ac:	3b01      	subs	r3, #1
 80092ae:	b29a      	uxth	r2, r3
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	3b01      	subs	r3, #1
 80092bc:	b29a      	uxth	r2, r3
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	695b      	ldr	r3, [r3, #20]
 80092c8:	f003 0304 	and.w	r3, r3, #4
 80092cc:	2b04      	cmp	r3, #4
 80092ce:	d11b      	bne.n	8009308 <HAL_I2C_Mem_Write+0x180>
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d017      	beq.n	8009308 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092dc:	781a      	ldrb	r2, [r3, #0]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e8:	1c5a      	adds	r2, r3, #1
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092f2:	3b01      	subs	r3, #1
 80092f4:	b29a      	uxth	r2, r3
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092fe:	b29b      	uxth	r3, r3
 8009300:	3b01      	subs	r3, #1
 8009302:	b29a      	uxth	r2, r3
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800930c:	2b00      	cmp	r3, #0
 800930e:	d1aa      	bne.n	8009266 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009310:	697a      	ldr	r2, [r7, #20]
 8009312:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f000 fd22 	bl	8009d5e <I2C_WaitOnBTFFlagUntilTimeout>
 800931a:	4603      	mov	r3, r0
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00d      	beq.n	800933c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009324:	2b04      	cmp	r3, #4
 8009326:	d107      	bne.n	8009338 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009336:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009338:	2301      	movs	r3, #1
 800933a:	e016      	b.n	800936a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800934a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2220      	movs	r2, #32
 8009350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2200      	movs	r2, #0
 8009358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2200      	movs	r2, #0
 8009360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009364:	2300      	movs	r3, #0
 8009366:	e000      	b.n	800936a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009368:	2302      	movs	r3, #2
  }
}
 800936a:	4618      	mov	r0, r3
 800936c:	3718      	adds	r7, #24
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	00100002 	.word	0x00100002
 8009378:	ffff0000 	.word	0xffff0000

0800937c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b08c      	sub	sp, #48	; 0x30
 8009380:	af02      	add	r7, sp, #8
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	4608      	mov	r0, r1
 8009386:	4611      	mov	r1, r2
 8009388:	461a      	mov	r2, r3
 800938a:	4603      	mov	r3, r0
 800938c:	817b      	strh	r3, [r7, #10]
 800938e:	460b      	mov	r3, r1
 8009390:	813b      	strh	r3, [r7, #8]
 8009392:	4613      	mov	r3, r2
 8009394:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009396:	f7ff f807 	bl	80083a8 <HAL_GetTick>
 800939a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	2b20      	cmp	r3, #32
 80093a6:	f040 8208 	bne.w	80097ba <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80093aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ac:	9300      	str	r3, [sp, #0]
 80093ae:	2319      	movs	r3, #25
 80093b0:	2201      	movs	r2, #1
 80093b2:	497b      	ldr	r1, [pc, #492]	; (80095a0 <HAL_I2C_Mem_Read+0x224>)
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	f000 fbbb 	bl	8009b30 <I2C_WaitOnFlagUntilTimeout>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d001      	beq.n	80093c4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80093c0:	2302      	movs	r3, #2
 80093c2:	e1fb      	b.n	80097bc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d101      	bne.n	80093d2 <HAL_I2C_Mem_Read+0x56>
 80093ce:	2302      	movs	r3, #2
 80093d0:	e1f4      	b.n	80097bc <HAL_I2C_Mem_Read+0x440>
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2201      	movs	r2, #1
 80093d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f003 0301 	and.w	r3, r3, #1
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d007      	beq.n	80093f8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f042 0201 	orr.w	r2, r2, #1
 80093f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009406:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2222      	movs	r2, #34	; 0x22
 800940c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2240      	movs	r2, #64	; 0x40
 8009414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2200      	movs	r2, #0
 800941c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009422:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009428:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800942e:	b29a      	uxth	r2, r3
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	4a5b      	ldr	r2, [pc, #364]	; (80095a4 <HAL_I2C_Mem_Read+0x228>)
 8009438:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800943a:	88f8      	ldrh	r0, [r7, #6]
 800943c:	893a      	ldrh	r2, [r7, #8]
 800943e:	8979      	ldrh	r1, [r7, #10]
 8009440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009442:	9301      	str	r3, [sp, #4]
 8009444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009446:	9300      	str	r3, [sp, #0]
 8009448:	4603      	mov	r3, r0
 800944a:	68f8      	ldr	r0, [r7, #12]
 800944c:	f000 fa88 	bl	8009960 <I2C_RequestMemoryRead>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d001      	beq.n	800945a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	e1b0      	b.n	80097bc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800945e:	2b00      	cmp	r3, #0
 8009460:	d113      	bne.n	800948a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009462:	2300      	movs	r3, #0
 8009464:	623b      	str	r3, [r7, #32]
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	695b      	ldr	r3, [r3, #20]
 800946c:	623b      	str	r3, [r7, #32]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	699b      	ldr	r3, [r3, #24]
 8009474:	623b      	str	r3, [r7, #32]
 8009476:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009486:	601a      	str	r2, [r3, #0]
 8009488:	e184      	b.n	8009794 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800948e:	2b01      	cmp	r3, #1
 8009490:	d11b      	bne.n	80094ca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094a2:	2300      	movs	r3, #0
 80094a4:	61fb      	str	r3, [r7, #28]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	695b      	ldr	r3, [r3, #20]
 80094ac:	61fb      	str	r3, [r7, #28]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	699b      	ldr	r3, [r3, #24]
 80094b4:	61fb      	str	r3, [r7, #28]
 80094b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094c6:	601a      	str	r2, [r3, #0]
 80094c8:	e164      	b.n	8009794 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094ce:	2b02      	cmp	r3, #2
 80094d0:	d11b      	bne.n	800950a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094f2:	2300      	movs	r3, #0
 80094f4:	61bb      	str	r3, [r7, #24]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	695b      	ldr	r3, [r3, #20]
 80094fc:	61bb      	str	r3, [r7, #24]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	699b      	ldr	r3, [r3, #24]
 8009504:	61bb      	str	r3, [r7, #24]
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	e144      	b.n	8009794 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800950a:	2300      	movs	r3, #0
 800950c:	617b      	str	r3, [r7, #20]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	695b      	ldr	r3, [r3, #20]
 8009514:	617b      	str	r3, [r7, #20]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	699b      	ldr	r3, [r3, #24]
 800951c:	617b      	str	r3, [r7, #20]
 800951e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009520:	e138      	b.n	8009794 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009526:	2b03      	cmp	r3, #3
 8009528:	f200 80f1 	bhi.w	800970e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009530:	2b01      	cmp	r3, #1
 8009532:	d123      	bne.n	800957c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009536:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f000 fc51 	bl	8009de0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d001      	beq.n	8009548 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	e139      	b.n	80097bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	691a      	ldr	r2, [r3, #16]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009552:	b2d2      	uxtb	r2, r2
 8009554:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800955a:	1c5a      	adds	r2, r3, #1
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009564:	3b01      	subs	r3, #1
 8009566:	b29a      	uxth	r2, r3
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009570:	b29b      	uxth	r3, r3
 8009572:	3b01      	subs	r3, #1
 8009574:	b29a      	uxth	r2, r3
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	855a      	strh	r2, [r3, #42]	; 0x2a
 800957a:	e10b      	b.n	8009794 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009580:	2b02      	cmp	r3, #2
 8009582:	d14e      	bne.n	8009622 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009586:	9300      	str	r3, [sp, #0]
 8009588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800958a:	2200      	movs	r2, #0
 800958c:	4906      	ldr	r1, [pc, #24]	; (80095a8 <HAL_I2C_Mem_Read+0x22c>)
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	f000 face 	bl	8009b30 <I2C_WaitOnFlagUntilTimeout>
 8009594:	4603      	mov	r3, r0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d008      	beq.n	80095ac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800959a:	2301      	movs	r3, #1
 800959c:	e10e      	b.n	80097bc <HAL_I2C_Mem_Read+0x440>
 800959e:	bf00      	nop
 80095a0:	00100002 	.word	0x00100002
 80095a4:	ffff0000 	.word	0xffff0000
 80095a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	691a      	ldr	r2, [r3, #16]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c6:	b2d2      	uxtb	r2, r2
 80095c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ce:	1c5a      	adds	r2, r3, #1
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095d8:	3b01      	subs	r3, #1
 80095da:	b29a      	uxth	r2, r3
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	3b01      	subs	r3, #1
 80095e8:	b29a      	uxth	r2, r3
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	691a      	ldr	r2, [r3, #16]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f8:	b2d2      	uxtb	r2, r2
 80095fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009600:	1c5a      	adds	r2, r3, #1
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800960a:	3b01      	subs	r3, #1
 800960c:	b29a      	uxth	r2, r3
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009616:	b29b      	uxth	r3, r3
 8009618:	3b01      	subs	r3, #1
 800961a:	b29a      	uxth	r2, r3
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009620:	e0b8      	b.n	8009794 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009624:	9300      	str	r3, [sp, #0]
 8009626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009628:	2200      	movs	r2, #0
 800962a:	4966      	ldr	r1, [pc, #408]	; (80097c4 <HAL_I2C_Mem_Read+0x448>)
 800962c:	68f8      	ldr	r0, [r7, #12]
 800962e:	f000 fa7f 	bl	8009b30 <I2C_WaitOnFlagUntilTimeout>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d001      	beq.n	800963c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009638:	2301      	movs	r3, #1
 800963a:	e0bf      	b.n	80097bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800964a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	691a      	ldr	r2, [r3, #16]
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009656:	b2d2      	uxtb	r2, r2
 8009658:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965e:	1c5a      	adds	r2, r3, #1
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009668:	3b01      	subs	r3, #1
 800966a:	b29a      	uxth	r2, r3
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009674:	b29b      	uxth	r3, r3
 8009676:	3b01      	subs	r3, #1
 8009678:	b29a      	uxth	r2, r3
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800967e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009680:	9300      	str	r3, [sp, #0]
 8009682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009684:	2200      	movs	r2, #0
 8009686:	494f      	ldr	r1, [pc, #316]	; (80097c4 <HAL_I2C_Mem_Read+0x448>)
 8009688:	68f8      	ldr	r0, [r7, #12]
 800968a:	f000 fa51 	bl	8009b30 <I2C_WaitOnFlagUntilTimeout>
 800968e:	4603      	mov	r3, r0
 8009690:	2b00      	cmp	r3, #0
 8009692:	d001      	beq.n	8009698 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009694:	2301      	movs	r3, #1
 8009696:	e091      	b.n	80097bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	691a      	ldr	r2, [r3, #16]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b2:	b2d2      	uxtb	r2, r2
 80096b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ba:	1c5a      	adds	r2, r3, #1
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096c4:	3b01      	subs	r3, #1
 80096c6:	b29a      	uxth	r2, r3
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	3b01      	subs	r3, #1
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	691a      	ldr	r2, [r3, #16]
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e4:	b2d2      	uxtb	r2, r2
 80096e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ec:	1c5a      	adds	r2, r3, #1
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096f6:	3b01      	subs	r3, #1
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009702:	b29b      	uxth	r3, r3
 8009704:	3b01      	subs	r3, #1
 8009706:	b29a      	uxth	r2, r3
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800970c:	e042      	b.n	8009794 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800970e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009710:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f000 fb64 	bl	8009de0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	d001      	beq.n	8009722 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	e04c      	b.n	80097bc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	691a      	ldr	r2, [r3, #16]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972c:	b2d2      	uxtb	r2, r2
 800972e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009734:	1c5a      	adds	r2, r3, #1
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800973e:	3b01      	subs	r3, #1
 8009740:	b29a      	uxth	r2, r3
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800974a:	b29b      	uxth	r3, r3
 800974c:	3b01      	subs	r3, #1
 800974e:	b29a      	uxth	r2, r3
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	695b      	ldr	r3, [r3, #20]
 800975a:	f003 0304 	and.w	r3, r3, #4
 800975e:	2b04      	cmp	r3, #4
 8009760:	d118      	bne.n	8009794 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	691a      	ldr	r2, [r3, #16]
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800976c:	b2d2      	uxtb	r2, r2
 800976e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009774:	1c5a      	adds	r2, r3, #1
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800977e:	3b01      	subs	r3, #1
 8009780:	b29a      	uxth	r2, r3
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800978a:	b29b      	uxth	r3, r3
 800978c:	3b01      	subs	r3, #1
 800978e:	b29a      	uxth	r2, r3
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009798:	2b00      	cmp	r3, #0
 800979a:	f47f aec2 	bne.w	8009522 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2220      	movs	r2, #32
 80097a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80097b6:	2300      	movs	r3, #0
 80097b8:	e000      	b.n	80097bc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80097ba:	2302      	movs	r3, #2
  }
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3728      	adds	r7, #40	; 0x28
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	00010004 	.word	0x00010004

080097c8 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	2b20      	cmp	r3, #32
 80097da:	d124      	bne.n	8009826 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2228      	movs	r2, #40	; 0x28
 80097e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f003 0301 	and.w	r3, r3, #1
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d007      	beq.n	8009802 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f042 0201 	orr.w	r2, r2, #1
 8009800:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009810:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	685a      	ldr	r2, [r3, #4]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8009820:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8009822:	2300      	movs	r3, #0
 8009824:	e000      	b.n	8009828 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8009826:	2302      	movs	r3, #2
  }
}
 8009828:	4618      	mov	r0, r3
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b088      	sub	sp, #32
 8009838:	af02      	add	r7, sp, #8
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	4608      	mov	r0, r1
 800983e:	4611      	mov	r1, r2
 8009840:	461a      	mov	r2, r3
 8009842:	4603      	mov	r3, r0
 8009844:	817b      	strh	r3, [r7, #10]
 8009846:	460b      	mov	r3, r1
 8009848:	813b      	strh	r3, [r7, #8]
 800984a:	4613      	mov	r3, r2
 800984c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800985c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800985e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009860:	9300      	str	r3, [sp, #0]
 8009862:	6a3b      	ldr	r3, [r7, #32]
 8009864:	2200      	movs	r2, #0
 8009866:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f000 f960 	bl	8009b30 <I2C_WaitOnFlagUntilTimeout>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00d      	beq.n	8009892 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009884:	d103      	bne.n	800988e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800988c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800988e:	2303      	movs	r3, #3
 8009890:	e05f      	b.n	8009952 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009892:	897b      	ldrh	r3, [r7, #10]
 8009894:	b2db      	uxtb	r3, r3
 8009896:	461a      	mov	r2, r3
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80098a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80098a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a4:	6a3a      	ldr	r2, [r7, #32]
 80098a6:	492d      	ldr	r1, [pc, #180]	; (800995c <I2C_RequestMemoryWrite+0x128>)
 80098a8:	68f8      	ldr	r0, [r7, #12]
 80098aa:	f000 f998 	bl	8009bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d001      	beq.n	80098b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80098b4:	2301      	movs	r3, #1
 80098b6:	e04c      	b.n	8009952 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098b8:	2300      	movs	r3, #0
 80098ba:	617b      	str	r3, [r7, #20]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	695b      	ldr	r3, [r3, #20]
 80098c2:	617b      	str	r3, [r7, #20]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	699b      	ldr	r3, [r3, #24]
 80098ca:	617b      	str	r3, [r7, #20]
 80098cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80098ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098d0:	6a39      	ldr	r1, [r7, #32]
 80098d2:	68f8      	ldr	r0, [r7, #12]
 80098d4:	f000 fa02 	bl	8009cdc <I2C_WaitOnTXEFlagUntilTimeout>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00d      	beq.n	80098fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e2:	2b04      	cmp	r3, #4
 80098e4:	d107      	bne.n	80098f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	e02b      	b.n	8009952 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80098fa:	88fb      	ldrh	r3, [r7, #6]
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d105      	bne.n	800990c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009900:	893b      	ldrh	r3, [r7, #8]
 8009902:	b2da      	uxtb	r2, r3
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	611a      	str	r2, [r3, #16]
 800990a:	e021      	b.n	8009950 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800990c:	893b      	ldrh	r3, [r7, #8]
 800990e:	0a1b      	lsrs	r3, r3, #8
 8009910:	b29b      	uxth	r3, r3
 8009912:	b2da      	uxtb	r2, r3
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800991a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800991c:	6a39      	ldr	r1, [r7, #32]
 800991e:	68f8      	ldr	r0, [r7, #12]
 8009920:	f000 f9dc 	bl	8009cdc <I2C_WaitOnTXEFlagUntilTimeout>
 8009924:	4603      	mov	r3, r0
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00d      	beq.n	8009946 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800992e:	2b04      	cmp	r3, #4
 8009930:	d107      	bne.n	8009942 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009940:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	e005      	b.n	8009952 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009946:	893b      	ldrh	r3, [r7, #8]
 8009948:	b2da      	uxtb	r2, r3
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009950:	2300      	movs	r3, #0
}
 8009952:	4618      	mov	r0, r3
 8009954:	3718      	adds	r7, #24
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	00010002 	.word	0x00010002

08009960 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b088      	sub	sp, #32
 8009964:	af02      	add	r7, sp, #8
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	4608      	mov	r0, r1
 800996a:	4611      	mov	r1, r2
 800996c:	461a      	mov	r2, r3
 800996e:	4603      	mov	r3, r0
 8009970:	817b      	strh	r3, [r7, #10]
 8009972:	460b      	mov	r3, r1
 8009974:	813b      	strh	r3, [r7, #8]
 8009976:	4613      	mov	r3, r2
 8009978:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009988:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009998:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800999a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999c:	9300      	str	r3, [sp, #0]
 800999e:	6a3b      	ldr	r3, [r7, #32]
 80099a0:	2200      	movs	r2, #0
 80099a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80099a6:	68f8      	ldr	r0, [r7, #12]
 80099a8:	f000 f8c2 	bl	8009b30 <I2C_WaitOnFlagUntilTimeout>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00d      	beq.n	80099ce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099c0:	d103      	bne.n	80099ca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80099ca:	2303      	movs	r3, #3
 80099cc:	e0aa      	b.n	8009b24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80099ce:	897b      	ldrh	r3, [r7, #10]
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	461a      	mov	r2, r3
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80099dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80099de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e0:	6a3a      	ldr	r2, [r7, #32]
 80099e2:	4952      	ldr	r1, [pc, #328]	; (8009b2c <I2C_RequestMemoryRead+0x1cc>)
 80099e4:	68f8      	ldr	r0, [r7, #12]
 80099e6:	f000 f8fa 	bl	8009bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d001      	beq.n	80099f4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	e097      	b.n	8009b24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099f4:	2300      	movs	r3, #0
 80099f6:	617b      	str	r3, [r7, #20]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	695b      	ldr	r3, [r3, #20]
 80099fe:	617b      	str	r3, [r7, #20]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	699b      	ldr	r3, [r3, #24]
 8009a06:	617b      	str	r3, [r7, #20]
 8009a08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a0c:	6a39      	ldr	r1, [r7, #32]
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f000 f964 	bl	8009cdc <I2C_WaitOnTXEFlagUntilTimeout>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00d      	beq.n	8009a36 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1e:	2b04      	cmp	r3, #4
 8009a20:	d107      	bne.n	8009a32 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009a32:	2301      	movs	r3, #1
 8009a34:	e076      	b.n	8009b24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009a36:	88fb      	ldrh	r3, [r7, #6]
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d105      	bne.n	8009a48 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a3c:	893b      	ldrh	r3, [r7, #8]
 8009a3e:	b2da      	uxtb	r2, r3
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	611a      	str	r2, [r3, #16]
 8009a46:	e021      	b.n	8009a8c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009a48:	893b      	ldrh	r3, [r7, #8]
 8009a4a:	0a1b      	lsrs	r3, r3, #8
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	b2da      	uxtb	r2, r3
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a58:	6a39      	ldr	r1, [r7, #32]
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	f000 f93e 	bl	8009cdc <I2C_WaitOnTXEFlagUntilTimeout>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d00d      	beq.n	8009a82 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a6a:	2b04      	cmp	r3, #4
 8009a6c:	d107      	bne.n	8009a7e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e050      	b.n	8009b24 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a82:	893b      	ldrh	r3, [r7, #8]
 8009a84:	b2da      	uxtb	r2, r3
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a8e:	6a39      	ldr	r1, [r7, #32]
 8009a90:	68f8      	ldr	r0, [r7, #12]
 8009a92:	f000 f923 	bl	8009cdc <I2C_WaitOnTXEFlagUntilTimeout>
 8009a96:	4603      	mov	r3, r0
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d00d      	beq.n	8009ab8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa0:	2b04      	cmp	r3, #4
 8009aa2:	d107      	bne.n	8009ab4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ab2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	e035      	b.n	8009b24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ac6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aca:	9300      	str	r3, [sp, #0]
 8009acc:	6a3b      	ldr	r3, [r7, #32]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009ad4:	68f8      	ldr	r0, [r7, #12]
 8009ad6:	f000 f82b 	bl	8009b30 <I2C_WaitOnFlagUntilTimeout>
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d00d      	beq.n	8009afc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009aee:	d103      	bne.n	8009af8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009af6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009af8:	2303      	movs	r3, #3
 8009afa:	e013      	b.n	8009b24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009afc:	897b      	ldrh	r3, [r7, #10]
 8009afe:	b2db      	uxtb	r3, r3
 8009b00:	f043 0301 	orr.w	r3, r3, #1
 8009b04:	b2da      	uxtb	r2, r3
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0e:	6a3a      	ldr	r2, [r7, #32]
 8009b10:	4906      	ldr	r1, [pc, #24]	; (8009b2c <I2C_RequestMemoryRead+0x1cc>)
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	f000 f863 	bl	8009bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d001      	beq.n	8009b22 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e000      	b.n	8009b24 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3718      	adds	r7, #24
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	00010002 	.word	0x00010002

08009b30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	603b      	str	r3, [r7, #0]
 8009b3c:	4613      	mov	r3, r2
 8009b3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b40:	e025      	b.n	8009b8e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b48:	d021      	beq.n	8009b8e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b4a:	f7fe fc2d 	bl	80083a8 <HAL_GetTick>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	1ad3      	subs	r3, r2, r3
 8009b54:	683a      	ldr	r2, [r7, #0]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d302      	bcc.n	8009b60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d116      	bne.n	8009b8e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2200      	movs	r2, #0
 8009b64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2220      	movs	r2, #32
 8009b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2200      	movs	r2, #0
 8009b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b7a:	f043 0220 	orr.w	r2, r3, #32
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	e023      	b.n	8009bd6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	0c1b      	lsrs	r3, r3, #16
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d10d      	bne.n	8009bb4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	695b      	ldr	r3, [r3, #20]
 8009b9e:	43da      	mvns	r2, r3
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	4013      	ands	r3, r2
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	bf0c      	ite	eq
 8009baa:	2301      	moveq	r3, #1
 8009bac:	2300      	movne	r3, #0
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	e00c      	b.n	8009bce <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	699b      	ldr	r3, [r3, #24]
 8009bba:	43da      	mvns	r2, r3
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	4013      	ands	r3, r2
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	bf0c      	ite	eq
 8009bc6:	2301      	moveq	r3, #1
 8009bc8:	2300      	movne	r3, #0
 8009bca:	b2db      	uxtb	r3, r3
 8009bcc:	461a      	mov	r2, r3
 8009bce:	79fb      	ldrb	r3, [r7, #7]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d0b6      	beq.n	8009b42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009bd4:	2300      	movs	r3, #0
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3710      	adds	r7, #16
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b084      	sub	sp, #16
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	60f8      	str	r0, [r7, #12]
 8009be6:	60b9      	str	r1, [r7, #8]
 8009be8:	607a      	str	r2, [r7, #4]
 8009bea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009bec:	e051      	b.n	8009c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	695b      	ldr	r3, [r3, #20]
 8009bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bfc:	d123      	bne.n	8009c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c0c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009c16:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2220      	movs	r2, #32
 8009c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c32:	f043 0204 	orr.w	r2, r3, #4
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	e046      	b.n	8009cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c4c:	d021      	beq.n	8009c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c4e:	f7fe fbab 	bl	80083a8 <HAL_GetTick>
 8009c52:	4602      	mov	r2, r0
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	1ad3      	subs	r3, r2, r3
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d302      	bcc.n	8009c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d116      	bne.n	8009c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2200      	movs	r2, #0
 8009c68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2220      	movs	r2, #32
 8009c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2200      	movs	r2, #0
 8009c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c7e:	f043 0220 	orr.w	r2, r3, #32
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	e020      	b.n	8009cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	0c1b      	lsrs	r3, r3, #16
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d10c      	bne.n	8009cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	695b      	ldr	r3, [r3, #20]
 8009ca2:	43da      	mvns	r2, r3
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	4013      	ands	r3, r2
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	bf14      	ite	ne
 8009cae:	2301      	movne	r3, #1
 8009cb0:	2300      	moveq	r3, #0
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	e00b      	b.n	8009cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	699b      	ldr	r3, [r3, #24]
 8009cbc:	43da      	mvns	r2, r3
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	4013      	ands	r3, r2
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	bf14      	ite	ne
 8009cc8:	2301      	movne	r3, #1
 8009cca:	2300      	moveq	r3, #0
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d18d      	bne.n	8009bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009cd2:	2300      	movs	r3, #0
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3710      	adds	r7, #16
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	60f8      	str	r0, [r7, #12]
 8009ce4:	60b9      	str	r1, [r7, #8]
 8009ce6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009ce8:	e02d      	b.n	8009d46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f000 f8ce 	bl	8009e8c <I2C_IsAcknowledgeFailed>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d001      	beq.n	8009cfa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	e02d      	b.n	8009d56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d00:	d021      	beq.n	8009d46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d02:	f7fe fb51 	bl	80083a8 <HAL_GetTick>
 8009d06:	4602      	mov	r2, r0
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	1ad3      	subs	r3, r2, r3
 8009d0c:	68ba      	ldr	r2, [r7, #8]
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d302      	bcc.n	8009d18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d116      	bne.n	8009d46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2220      	movs	r2, #32
 8009d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d32:	f043 0220 	orr.w	r2, r3, #32
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009d42:	2301      	movs	r3, #1
 8009d44:	e007      	b.n	8009d56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	695b      	ldr	r3, [r3, #20]
 8009d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d50:	2b80      	cmp	r3, #128	; 0x80
 8009d52:	d1ca      	bne.n	8009cea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009d54:	2300      	movs	r3, #0
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b084      	sub	sp, #16
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	60f8      	str	r0, [r7, #12]
 8009d66:	60b9      	str	r1, [r7, #8]
 8009d68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009d6a:	e02d      	b.n	8009dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f000 f88d 	bl	8009e8c <I2C_IsAcknowledgeFailed>
 8009d72:	4603      	mov	r3, r0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d001      	beq.n	8009d7c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009d78:	2301      	movs	r3, #1
 8009d7a:	e02d      	b.n	8009dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d82:	d021      	beq.n	8009dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d84:	f7fe fb10 	bl	80083a8 <HAL_GetTick>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	1ad3      	subs	r3, r2, r3
 8009d8e:	68ba      	ldr	r2, [r7, #8]
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d302      	bcc.n	8009d9a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d116      	bne.n	8009dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2220      	movs	r2, #32
 8009da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db4:	f043 0220 	orr.w	r2, r3, #32
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	e007      	b.n	8009dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	695b      	ldr	r3, [r3, #20]
 8009dce:	f003 0304 	and.w	r3, r3, #4
 8009dd2:	2b04      	cmp	r3, #4
 8009dd4:	d1ca      	bne.n	8009d6c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009dd6:	2300      	movs	r3, #0
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3710      	adds	r7, #16
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009dec:	e042      	b.n	8009e74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	695b      	ldr	r3, [r3, #20]
 8009df4:	f003 0310 	and.w	r3, r3, #16
 8009df8:	2b10      	cmp	r3, #16
 8009dfa:	d119      	bne.n	8009e30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f06f 0210 	mvn.w	r2, #16
 8009e04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2220      	movs	r2, #32
 8009e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e029      	b.n	8009e84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e30:	f7fe faba 	bl	80083a8 <HAL_GetTick>
 8009e34:	4602      	mov	r2, r0
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	1ad3      	subs	r3, r2, r3
 8009e3a:	68ba      	ldr	r2, [r7, #8]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d302      	bcc.n	8009e46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d116      	bne.n	8009e74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2220      	movs	r2, #32
 8009e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2200      	movs	r2, #0
 8009e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e60:	f043 0220 	orr.w	r2, r3, #32
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	e007      	b.n	8009e84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	695b      	ldr	r3, [r3, #20]
 8009e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e7e:	2b40      	cmp	r3, #64	; 0x40
 8009e80:	d1b5      	bne.n	8009dee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009e82:	2300      	movs	r3, #0
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3710      	adds	r7, #16
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	695b      	ldr	r3, [r3, #20]
 8009e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ea2:	d11b      	bne.n	8009edc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009eac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2220      	movs	r2, #32
 8009eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec8:	f043 0204 	orr.w	r2, r3, #4
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	e000      	b.n	8009ede <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009edc:	2300      	movs	r3, #0
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	370c      	adds	r7, #12
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr

08009eea <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009eea:	b480      	push	{r7}
 8009eec:	b083      	sub	sp, #12
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
 8009ef2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	2b20      	cmp	r3, #32
 8009efe:	d129      	bne.n	8009f54 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2224      	movs	r2, #36	; 0x24
 8009f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f022 0201 	bic.w	r2, r2, #1
 8009f16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f022 0210 	bic.w	r2, r2, #16
 8009f26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	683a      	ldr	r2, [r7, #0]
 8009f34:	430a      	orrs	r2, r1
 8009f36:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f042 0201 	orr.w	r2, r2, #1
 8009f46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2220      	movs	r2, #32
 8009f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009f50:	2300      	movs	r3, #0
 8009f52:	e000      	b.n	8009f56 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8009f54:	2302      	movs	r3, #2
  }
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	370c      	adds	r7, #12
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr

08009f62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009f62:	b480      	push	{r7}
 8009f64:	b085      	sub	sp, #20
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
 8009f6a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	2b20      	cmp	r3, #32
 8009f7a:	d12a      	bne.n	8009fd2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2224      	movs	r2, #36	; 0x24
 8009f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f022 0201 	bic.w	r2, r2, #1
 8009f92:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f9a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8009f9c:	89fb      	ldrh	r3, [r7, #14]
 8009f9e:	f023 030f 	bic.w	r3, r3, #15
 8009fa2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	b29a      	uxth	r2, r3
 8009fa8:	89fb      	ldrh	r3, [r7, #14]
 8009faa:	4313      	orrs	r3, r2
 8009fac:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	89fa      	ldrh	r2, [r7, #14]
 8009fb4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f042 0201 	orr.w	r2, r2, #1
 8009fc4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2220      	movs	r2, #32
 8009fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	e000      	b.n	8009fd4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8009fd2:	2302      	movs	r3, #2
  }
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3714      	adds	r7, #20
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d101      	bne.n	8009ff2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e034      	b.n	800a05c <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8009ffa:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f245 5255 	movw	r2, #21845	; 0x5555
 800a004:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	687a      	ldr	r2, [r7, #4]
 800a00c:	6852      	ldr	r2, [r2, #4]
 800a00e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	6892      	ldr	r2, [r2, #8]
 800a018:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800a01a:	f7fe f9c5 	bl	80083a8 <HAL_GetTick>
 800a01e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a020:	e00f      	b.n	800a042 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800a022:	f7fe f9c1 	bl	80083a8 <HAL_GetTick>
 800a026:	4602      	mov	r2, r0
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	1ad3      	subs	r3, r2, r3
 800a02c:	2b31      	cmp	r3, #49	; 0x31
 800a02e:	d908      	bls.n	800a042 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	68db      	ldr	r3, [r3, #12]
 800a036:	f003 0303 	and.w	r3, r3, #3
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d001      	beq.n	800a042 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800a03e:	2303      	movs	r3, #3
 800a040:	e00c      	b.n	800a05c <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	f003 0303 	and.w	r3, r3, #3
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d1e8      	bne.n	800a022 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a058:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a05a:	2300      	movs	r3, #0
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3710      	adds	r7, #16
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800a064:	b480      	push	{r7}
 800a066:	b083      	sub	sp, #12
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a074:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a076:	2300      	movs	r3, #0
}
 800a078:	4618      	mov	r0, r3
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a084:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a086:	b08f      	sub	sp, #60	; 0x3c
 800a088:	af0a      	add	r7, sp, #40	; 0x28
 800a08a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d101      	bne.n	800a096 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a092:	2301      	movs	r3, #1
 800a094:	e10f      	b.n	800a2b6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d106      	bne.n	800a0b6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f00e ff03 	bl	8018ebc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2203      	movs	r2, #3
 800a0ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d102      	bne.n	800a0d0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f004 fe2c 	bl	800ed32 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	603b      	str	r3, [r7, #0]
 800a0e0:	687e      	ldr	r6, [r7, #4]
 800a0e2:	466d      	mov	r5, sp
 800a0e4:	f106 0410 	add.w	r4, r6, #16
 800a0e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a0ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a0ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a0ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a0f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a0f4:	e885 0003 	stmia.w	r5, {r0, r1}
 800a0f8:	1d33      	adds	r3, r6, #4
 800a0fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a0fc:	6838      	ldr	r0, [r7, #0]
 800a0fe:	f004 fd03 	bl	800eb08 <USB_CoreInit>
 800a102:	4603      	mov	r3, r0
 800a104:	2b00      	cmp	r3, #0
 800a106:	d005      	beq.n	800a114 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2202      	movs	r2, #2
 800a10c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800a110:	2301      	movs	r3, #1
 800a112:	e0d0      	b.n	800a2b6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	2100      	movs	r1, #0
 800a11a:	4618      	mov	r0, r3
 800a11c:	f004 fe1a 	bl	800ed54 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a120:	2300      	movs	r3, #0
 800a122:	73fb      	strb	r3, [r7, #15]
 800a124:	e04a      	b.n	800a1bc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a126:	7bfa      	ldrb	r2, [r7, #15]
 800a128:	6879      	ldr	r1, [r7, #4]
 800a12a:	4613      	mov	r3, r2
 800a12c:	00db      	lsls	r3, r3, #3
 800a12e:	1a9b      	subs	r3, r3, r2
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	440b      	add	r3, r1
 800a134:	333d      	adds	r3, #61	; 0x3d
 800a136:	2201      	movs	r2, #1
 800a138:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a13a:	7bfa      	ldrb	r2, [r7, #15]
 800a13c:	6879      	ldr	r1, [r7, #4]
 800a13e:	4613      	mov	r3, r2
 800a140:	00db      	lsls	r3, r3, #3
 800a142:	1a9b      	subs	r3, r3, r2
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	440b      	add	r3, r1
 800a148:	333c      	adds	r3, #60	; 0x3c
 800a14a:	7bfa      	ldrb	r2, [r7, #15]
 800a14c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a14e:	7bfa      	ldrb	r2, [r7, #15]
 800a150:	7bfb      	ldrb	r3, [r7, #15]
 800a152:	b298      	uxth	r0, r3
 800a154:	6879      	ldr	r1, [r7, #4]
 800a156:	4613      	mov	r3, r2
 800a158:	00db      	lsls	r3, r3, #3
 800a15a:	1a9b      	subs	r3, r3, r2
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	440b      	add	r3, r1
 800a160:	3342      	adds	r3, #66	; 0x42
 800a162:	4602      	mov	r2, r0
 800a164:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a166:	7bfa      	ldrb	r2, [r7, #15]
 800a168:	6879      	ldr	r1, [r7, #4]
 800a16a:	4613      	mov	r3, r2
 800a16c:	00db      	lsls	r3, r3, #3
 800a16e:	1a9b      	subs	r3, r3, r2
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	440b      	add	r3, r1
 800a174:	333f      	adds	r3, #63	; 0x3f
 800a176:	2200      	movs	r2, #0
 800a178:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a17a:	7bfa      	ldrb	r2, [r7, #15]
 800a17c:	6879      	ldr	r1, [r7, #4]
 800a17e:	4613      	mov	r3, r2
 800a180:	00db      	lsls	r3, r3, #3
 800a182:	1a9b      	subs	r3, r3, r2
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	440b      	add	r3, r1
 800a188:	3344      	adds	r3, #68	; 0x44
 800a18a:	2200      	movs	r2, #0
 800a18c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a18e:	7bfa      	ldrb	r2, [r7, #15]
 800a190:	6879      	ldr	r1, [r7, #4]
 800a192:	4613      	mov	r3, r2
 800a194:	00db      	lsls	r3, r3, #3
 800a196:	1a9b      	subs	r3, r3, r2
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	440b      	add	r3, r1
 800a19c:	3348      	adds	r3, #72	; 0x48
 800a19e:	2200      	movs	r2, #0
 800a1a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a1a2:	7bfa      	ldrb	r2, [r7, #15]
 800a1a4:	6879      	ldr	r1, [r7, #4]
 800a1a6:	4613      	mov	r3, r2
 800a1a8:	00db      	lsls	r3, r3, #3
 800a1aa:	1a9b      	subs	r3, r3, r2
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	440b      	add	r3, r1
 800a1b0:	3350      	adds	r3, #80	; 0x50
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a1b6:	7bfb      	ldrb	r3, [r7, #15]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	73fb      	strb	r3, [r7, #15]
 800a1bc:	7bfa      	ldrb	r2, [r7, #15]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d3af      	bcc.n	800a126 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	73fb      	strb	r3, [r7, #15]
 800a1ca:	e044      	b.n	800a256 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a1cc:	7bfa      	ldrb	r2, [r7, #15]
 800a1ce:	6879      	ldr	r1, [r7, #4]
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	00db      	lsls	r3, r3, #3
 800a1d4:	1a9b      	subs	r3, r3, r2
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	440b      	add	r3, r1
 800a1da:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800a1de:	2200      	movs	r2, #0
 800a1e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a1e2:	7bfa      	ldrb	r2, [r7, #15]
 800a1e4:	6879      	ldr	r1, [r7, #4]
 800a1e6:	4613      	mov	r3, r2
 800a1e8:	00db      	lsls	r3, r3, #3
 800a1ea:	1a9b      	subs	r3, r3, r2
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	440b      	add	r3, r1
 800a1f0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800a1f4:	7bfa      	ldrb	r2, [r7, #15]
 800a1f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a1f8:	7bfa      	ldrb	r2, [r7, #15]
 800a1fa:	6879      	ldr	r1, [r7, #4]
 800a1fc:	4613      	mov	r3, r2
 800a1fe:	00db      	lsls	r3, r3, #3
 800a200:	1a9b      	subs	r3, r3, r2
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	440b      	add	r3, r1
 800a206:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a20a:	2200      	movs	r2, #0
 800a20c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a20e:	7bfa      	ldrb	r2, [r7, #15]
 800a210:	6879      	ldr	r1, [r7, #4]
 800a212:	4613      	mov	r3, r2
 800a214:	00db      	lsls	r3, r3, #3
 800a216:	1a9b      	subs	r3, r3, r2
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	440b      	add	r3, r1
 800a21c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a220:	2200      	movs	r2, #0
 800a222:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a224:	7bfa      	ldrb	r2, [r7, #15]
 800a226:	6879      	ldr	r1, [r7, #4]
 800a228:	4613      	mov	r3, r2
 800a22a:	00db      	lsls	r3, r3, #3
 800a22c:	1a9b      	subs	r3, r3, r2
 800a22e:	009b      	lsls	r3, r3, #2
 800a230:	440b      	add	r3, r1
 800a232:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a236:	2200      	movs	r2, #0
 800a238:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a23a:	7bfa      	ldrb	r2, [r7, #15]
 800a23c:	6879      	ldr	r1, [r7, #4]
 800a23e:	4613      	mov	r3, r2
 800a240:	00db      	lsls	r3, r3, #3
 800a242:	1a9b      	subs	r3, r3, r2
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	440b      	add	r3, r1
 800a248:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a24c:	2200      	movs	r2, #0
 800a24e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a250:	7bfb      	ldrb	r3, [r7, #15]
 800a252:	3301      	adds	r3, #1
 800a254:	73fb      	strb	r3, [r7, #15]
 800a256:	7bfa      	ldrb	r2, [r7, #15]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d3b5      	bcc.n	800a1cc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	603b      	str	r3, [r7, #0]
 800a266:	687e      	ldr	r6, [r7, #4]
 800a268:	466d      	mov	r5, sp
 800a26a:	f106 0410 	add.w	r4, r6, #16
 800a26e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a276:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a27a:	e885 0003 	stmia.w	r5, {r0, r1}
 800a27e:	1d33      	adds	r3, r6, #4
 800a280:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a282:	6838      	ldr	r0, [r7, #0]
 800a284:	f004 fdb2 	bl	800edec <USB_DevInit>
 800a288:	4603      	mov	r3, r0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d005      	beq.n	800a29a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2202      	movs	r2, #2
 800a292:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800a296:	2301      	movs	r3, #1
 800a298:	e00d      	b.n	800a2b6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f005 fe2e 	bl	800ff10 <USB_DevDisconnect>

  return HAL_OK;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3714      	adds	r7, #20
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a2be <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b084      	sub	sp, #16
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d101      	bne.n	800a2da <HAL_PCD_Start+0x1c>
 800a2d6:	2302      	movs	r3, #2
 800a2d8:	e020      	b.n	800a31c <HAL_PCD_Start+0x5e>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2201      	movs	r2, #1
 800a2de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d109      	bne.n	800a2fe <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	d005      	beq.n	800a2fe <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4618      	mov	r0, r3
 800a304:	f004 fd04 	bl	800ed10 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4618      	mov	r0, r3
 800a30e:	f005 fdde 	bl	800fece <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2200      	movs	r2, #0
 800a316:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a31a:	2300      	movs	r3, #0
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3710      	adds	r7, #16
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a324:	b590      	push	{r4, r7, lr}
 800a326:	b08d      	sub	sp, #52	; 0x34
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a332:	6a3b      	ldr	r3, [r7, #32]
 800a334:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4618      	mov	r0, r3
 800a33c:	f005 fe9c 	bl	8010078 <USB_GetMode>
 800a340:	4603      	mov	r3, r0
 800a342:	2b00      	cmp	r3, #0
 800a344:	f040 839d 	bne.w	800aa82 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4618      	mov	r0, r3
 800a34e:	f005 fe00 	bl	800ff52 <USB_ReadInterrupts>
 800a352:	4603      	mov	r3, r0
 800a354:	2b00      	cmp	r3, #0
 800a356:	f000 8393 	beq.w	800aa80 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4618      	mov	r0, r3
 800a360:	f005 fdf7 	bl	800ff52 <USB_ReadInterrupts>
 800a364:	4603      	mov	r3, r0
 800a366:	f003 0302 	and.w	r3, r3, #2
 800a36a:	2b02      	cmp	r3, #2
 800a36c:	d107      	bne.n	800a37e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	695a      	ldr	r2, [r3, #20]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f002 0202 	and.w	r2, r2, #2
 800a37c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4618      	mov	r0, r3
 800a384:	f005 fde5 	bl	800ff52 <USB_ReadInterrupts>
 800a388:	4603      	mov	r3, r0
 800a38a:	f003 0310 	and.w	r3, r3, #16
 800a38e:	2b10      	cmp	r3, #16
 800a390:	d161      	bne.n	800a456 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	699a      	ldr	r2, [r3, #24]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f022 0210 	bic.w	r2, r2, #16
 800a3a0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800a3a2:	6a3b      	ldr	r3, [r7, #32]
 800a3a4:	6a1b      	ldr	r3, [r3, #32]
 800a3a6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800a3a8:	69bb      	ldr	r3, [r7, #24]
 800a3aa:	f003 020f 	and.w	r2, r3, #15
 800a3ae:	4613      	mov	r3, r2
 800a3b0:	00db      	lsls	r3, r3, #3
 800a3b2:	1a9b      	subs	r3, r3, r2
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	4413      	add	r3, r2
 800a3be:	3304      	adds	r3, #4
 800a3c0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	0c5b      	lsrs	r3, r3, #17
 800a3c6:	f003 030f 	and.w	r3, r3, #15
 800a3ca:	2b02      	cmp	r3, #2
 800a3cc:	d124      	bne.n	800a418 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a3ce:	69ba      	ldr	r2, [r7, #24]
 800a3d0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d035      	beq.n	800a446 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800a3de:	69bb      	ldr	r3, [r7, #24]
 800a3e0:	091b      	lsrs	r3, r3, #4
 800a3e2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a3e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	6a38      	ldr	r0, [r7, #32]
 800a3ee:	f005 fc1c 	bl	800fc2a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	68da      	ldr	r2, [r3, #12]
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	091b      	lsrs	r3, r3, #4
 800a3fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a3fe:	441a      	add	r2, r3
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	699a      	ldr	r2, [r3, #24]
 800a408:	69bb      	ldr	r3, [r7, #24]
 800a40a:	091b      	lsrs	r3, r3, #4
 800a40c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a410:	441a      	add	r2, r3
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	619a      	str	r2, [r3, #24]
 800a416:	e016      	b.n	800a446 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800a418:	69bb      	ldr	r3, [r7, #24]
 800a41a:	0c5b      	lsrs	r3, r3, #17
 800a41c:	f003 030f 	and.w	r3, r3, #15
 800a420:	2b06      	cmp	r3, #6
 800a422:	d110      	bne.n	800a446 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a42a:	2208      	movs	r2, #8
 800a42c:	4619      	mov	r1, r3
 800a42e:	6a38      	ldr	r0, [r7, #32]
 800a430:	f005 fbfb 	bl	800fc2a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	699a      	ldr	r2, [r3, #24]
 800a438:	69bb      	ldr	r3, [r7, #24]
 800a43a:	091b      	lsrs	r3, r3, #4
 800a43c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a440:	441a      	add	r2, r3
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	699a      	ldr	r2, [r3, #24]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f042 0210 	orr.w	r2, r2, #16
 800a454:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4618      	mov	r0, r3
 800a45c:	f005 fd79 	bl	800ff52 <USB_ReadInterrupts>
 800a460:	4603      	mov	r3, r0
 800a462:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a466:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a46a:	d16e      	bne.n	800a54a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800a46c:	2300      	movs	r3, #0
 800a46e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4618      	mov	r0, r3
 800a476:	f005 fd7f 	bl	800ff78 <USB_ReadDevAllOutEpInterrupt>
 800a47a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800a47c:	e062      	b.n	800a544 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800a47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a480:	f003 0301 	and.w	r3, r3, #1
 800a484:	2b00      	cmp	r3, #0
 800a486:	d057      	beq.n	800a538 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a48e:	b2d2      	uxtb	r2, r2
 800a490:	4611      	mov	r1, r2
 800a492:	4618      	mov	r0, r3
 800a494:	f005 fda4 	bl	800ffe0 <USB_ReadDevOutEPInterrupt>
 800a498:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	f003 0301 	and.w	r3, r3, #1
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d00c      	beq.n	800a4be <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a6:	015a      	lsls	r2, r3, #5
 800a4a8:	69fb      	ldr	r3, [r7, #28]
 800a4aa:	4413      	add	r3, r2
 800a4ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800a4b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 fdb1 	bl	800b020 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	f003 0308 	and.w	r3, r3, #8
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d00c      	beq.n	800a4e2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ca:	015a      	lsls	r2, r3, #5
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	4413      	add	r3, r2
 800a4d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	2308      	movs	r3, #8
 800a4d8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800a4da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 feab 	bl	800b238 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	f003 0310 	and.w	r3, r3, #16
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d008      	beq.n	800a4fe <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800a4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ee:	015a      	lsls	r2, r3, #5
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4f8:	461a      	mov	r2, r3
 800a4fa:	2310      	movs	r3, #16
 800a4fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	f003 0320 	and.w	r3, r3, #32
 800a504:	2b00      	cmp	r3, #0
 800a506:	d008      	beq.n	800a51a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50a:	015a      	lsls	r2, r3, #5
 800a50c:	69fb      	ldr	r3, [r7, #28]
 800a50e:	4413      	add	r3, r2
 800a510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a514:	461a      	mov	r2, r3
 800a516:	2320      	movs	r3, #32
 800a518:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a520:	2b00      	cmp	r3, #0
 800a522:	d009      	beq.n	800a538 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800a524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a526:	015a      	lsls	r2, r3, #5
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	4413      	add	r3, r2
 800a52c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a530:	461a      	mov	r2, r3
 800a532:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a536:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800a538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53a:	3301      	adds	r3, #1
 800a53c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a540:	085b      	lsrs	r3, r3, #1
 800a542:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a546:	2b00      	cmp	r3, #0
 800a548:	d199      	bne.n	800a47e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4618      	mov	r0, r3
 800a550:	f005 fcff 	bl	800ff52 <USB_ReadInterrupts>
 800a554:	4603      	mov	r3, r0
 800a556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a55a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a55e:	f040 80c0 	bne.w	800a6e2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4618      	mov	r0, r3
 800a568:	f005 fd20 	bl	800ffac <USB_ReadDevAllInEpInterrupt>
 800a56c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800a56e:	2300      	movs	r3, #0
 800a570:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800a572:	e0b2      	b.n	800a6da <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a576:	f003 0301 	and.w	r3, r3, #1
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	f000 80a7 	beq.w	800a6ce <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a586:	b2d2      	uxtb	r2, r2
 800a588:	4611      	mov	r1, r2
 800a58a:	4618      	mov	r0, r3
 800a58c:	f005 fd46 	bl	801001c <USB_ReadDevInEPInterrupt>
 800a590:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	f003 0301 	and.w	r3, r3, #1
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d057      	beq.n	800a64c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59e:	f003 030f 	and.w	r3, r3, #15
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a5a8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a5aa:	69fb      	ldr	r3, [r7, #28]
 800a5ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	43db      	mvns	r3, r3
 800a5b6:	69f9      	ldr	r1, [r7, #28]
 800a5b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a5bc:	4013      	ands	r3, r2
 800a5be:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c2:	015a      	lsls	r2, r3, #5
 800a5c4:	69fb      	ldr	r3, [r7, #28]
 800a5c6:	4413      	add	r3, r2
 800a5c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	691b      	ldr	r3, [r3, #16]
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d132      	bne.n	800a640 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a5da:	6879      	ldr	r1, [r7, #4]
 800a5dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5de:	4613      	mov	r3, r2
 800a5e0:	00db      	lsls	r3, r3, #3
 800a5e2:	1a9b      	subs	r3, r3, r2
 800a5e4:	009b      	lsls	r3, r3, #2
 800a5e6:	440b      	add	r3, r1
 800a5e8:	3348      	adds	r3, #72	; 0x48
 800a5ea:	6819      	ldr	r1, [r3, #0]
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5f0:	4613      	mov	r3, r2
 800a5f2:	00db      	lsls	r3, r3, #3
 800a5f4:	1a9b      	subs	r3, r3, r2
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	4403      	add	r3, r0
 800a5fa:	3344      	adds	r3, #68	; 0x44
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4419      	add	r1, r3
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a604:	4613      	mov	r3, r2
 800a606:	00db      	lsls	r3, r3, #3
 800a608:	1a9b      	subs	r3, r3, r2
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	4403      	add	r3, r0
 800a60e:	3348      	adds	r3, #72	; 0x48
 800a610:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a614:	2b00      	cmp	r3, #0
 800a616:	d113      	bne.n	800a640 <HAL_PCD_IRQHandler+0x31c>
 800a618:	6879      	ldr	r1, [r7, #4]
 800a61a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a61c:	4613      	mov	r3, r2
 800a61e:	00db      	lsls	r3, r3, #3
 800a620:	1a9b      	subs	r3, r3, r2
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	440b      	add	r3, r1
 800a626:	3350      	adds	r3, #80	; 0x50
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d108      	bne.n	800a640 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6818      	ldr	r0, [r3, #0]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a638:	461a      	mov	r2, r3
 800a63a:	2101      	movs	r1, #1
 800a63c:	f005 fd4e 	bl	80100dc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a642:	b2db      	uxtb	r3, r3
 800a644:	4619      	mov	r1, r3
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f00e fcc7 	bl	8018fda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	f003 0308 	and.w	r3, r3, #8
 800a652:	2b00      	cmp	r3, #0
 800a654:	d008      	beq.n	800a668 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a658:	015a      	lsls	r2, r3, #5
 800a65a:	69fb      	ldr	r3, [r7, #28]
 800a65c:	4413      	add	r3, r2
 800a65e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a662:	461a      	mov	r2, r3
 800a664:	2308      	movs	r3, #8
 800a666:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	f003 0310 	and.w	r3, r3, #16
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d008      	beq.n	800a684 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a674:	015a      	lsls	r2, r3, #5
 800a676:	69fb      	ldr	r3, [r7, #28]
 800a678:	4413      	add	r3, r2
 800a67a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a67e:	461a      	mov	r2, r3
 800a680:	2310      	movs	r3, #16
 800a682:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d008      	beq.n	800a6a0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a690:	015a      	lsls	r2, r3, #5
 800a692:	69fb      	ldr	r3, [r7, #28]
 800a694:	4413      	add	r3, r2
 800a696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a69a:	461a      	mov	r2, r3
 800a69c:	2340      	movs	r3, #64	; 0x40
 800a69e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	f003 0302 	and.w	r3, r3, #2
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d008      	beq.n	800a6bc <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ac:	015a      	lsls	r2, r3, #5
 800a6ae:	69fb      	ldr	r3, [r7, #28]
 800a6b0:	4413      	add	r3, r2
 800a6b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	2302      	movs	r3, #2
 800a6ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d003      	beq.n	800a6ce <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a6c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 fc1b 	bl	800af04 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d6:	085b      	lsrs	r3, r3, #1
 800a6d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	f47f af49 	bne.w	800a574 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f005 fc33 	bl	800ff52 <USB_ReadInterrupts>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a6f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a6f6:	d122      	bne.n	800a73e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a6f8:	69fb      	ldr	r3, [r7, #28]
 800a6fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	69fa      	ldr	r2, [r7, #28]
 800a702:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a706:	f023 0301 	bic.w	r3, r3, #1
 800a70a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800a712:	2b01      	cmp	r3, #1
 800a714:	d108      	bne.n	800a728 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a71e:	2100      	movs	r1, #0
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f000 fe27 	bl	800b374 <HAL_PCDEx_LPM_Callback>
 800a726:	e002      	b.n	800a72e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f00e fccd 	bl	80190c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	695a      	ldr	r2, [r3, #20]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a73c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	4618      	mov	r0, r3
 800a744:	f005 fc05 	bl	800ff52 <USB_ReadInterrupts>
 800a748:	4603      	mov	r3, r0
 800a74a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a74e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a752:	d112      	bne.n	800a77a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a754:	69fb      	ldr	r3, [r7, #28]
 800a756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a75a:	689b      	ldr	r3, [r3, #8]
 800a75c:	f003 0301 	and.w	r3, r3, #1
 800a760:	2b01      	cmp	r3, #1
 800a762:	d102      	bne.n	800a76a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f00e fc89 	bl	801907c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	695a      	ldr	r2, [r3, #20]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800a778:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4618      	mov	r0, r3
 800a780:	f005 fbe7 	bl	800ff52 <USB_ReadInterrupts>
 800a784:	4603      	mov	r3, r0
 800a786:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a78a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a78e:	f040 80c7 	bne.w	800a920 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a792:	69fb      	ldr	r3, [r7, #28]
 800a794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	69fa      	ldr	r2, [r7, #28]
 800a79c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a7a0:	f023 0301 	bic.w	r3, r3, #1
 800a7a4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	2110      	movs	r1, #16
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f004 fc81 	bl	800f0b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7b6:	e056      	b.n	800a866 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ba:	015a      	lsls	r2, r3, #5
 800a7bc:	69fb      	ldr	r3, [r7, #28]
 800a7be:	4413      	add	r3, r2
 800a7c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a7ca:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ce:	015a      	lsls	r2, r3, #5
 800a7d0:	69fb      	ldr	r3, [r7, #28]
 800a7d2:	4413      	add	r3, r2
 800a7d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7dc:	0151      	lsls	r1, r2, #5
 800a7de:	69fa      	ldr	r2, [r7, #28]
 800a7e0:	440a      	add	r2, r1
 800a7e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a7ea:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ee:	015a      	lsls	r2, r3, #5
 800a7f0:	69fb      	ldr	r3, [r7, #28]
 800a7f2:	4413      	add	r3, r2
 800a7f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7fc:	0151      	lsls	r1, r2, #5
 800a7fe:	69fa      	ldr	r2, [r7, #28]
 800a800:	440a      	add	r2, r1
 800a802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a806:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a80a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a80e:	015a      	lsls	r2, r3, #5
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	4413      	add	r3, r2
 800a814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a818:	461a      	mov	r2, r3
 800a81a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a81e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a822:	015a      	lsls	r2, r3, #5
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	4413      	add	r3, r2
 800a828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a830:	0151      	lsls	r1, r2, #5
 800a832:	69fa      	ldr	r2, [r7, #28]
 800a834:	440a      	add	r2, r1
 800a836:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a83a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a83e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a842:	015a      	lsls	r2, r3, #5
 800a844:	69fb      	ldr	r3, [r7, #28]
 800a846:	4413      	add	r3, r2
 800a848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a850:	0151      	lsls	r1, r2, #5
 800a852:	69fa      	ldr	r2, [r7, #28]
 800a854:	440a      	add	r2, r1
 800a856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a85a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a85e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a862:	3301      	adds	r3, #1
 800a864:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	685b      	ldr	r3, [r3, #4]
 800a86a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d3a3      	bcc.n	800a7b8 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a870:	69fb      	ldr	r3, [r7, #28]
 800a872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a876:	69db      	ldr	r3, [r3, #28]
 800a878:	69fa      	ldr	r2, [r7, #28]
 800a87a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a87e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a882:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d016      	beq.n	800a8ba <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a892:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a896:	69fa      	ldr	r2, [r7, #28]
 800a898:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a89c:	f043 030b 	orr.w	r3, r3, #11
 800a8a0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a8a4:	69fb      	ldr	r3, [r7, #28]
 800a8a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8ac:	69fa      	ldr	r2, [r7, #28]
 800a8ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8b2:	f043 030b 	orr.w	r3, r3, #11
 800a8b6:	6453      	str	r3, [r2, #68]	; 0x44
 800a8b8:	e015      	b.n	800a8e6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a8ba:	69fb      	ldr	r3, [r7, #28]
 800a8bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8c0:	695b      	ldr	r3, [r3, #20]
 800a8c2:	69fa      	ldr	r2, [r7, #28]
 800a8c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a8cc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800a8d0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a8d2:	69fb      	ldr	r3, [r7, #28]
 800a8d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8d8:	691b      	ldr	r3, [r3, #16]
 800a8da:	69fa      	ldr	r2, [r7, #28]
 800a8dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8e0:	f043 030b 	orr.w	r3, r3, #11
 800a8e4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a8e6:	69fb      	ldr	r3, [r7, #28]
 800a8e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	69fa      	ldr	r2, [r7, #28]
 800a8f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8f4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a8f8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6818      	ldr	r0, [r3, #0]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	691b      	ldr	r3, [r3, #16]
 800a902:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a90a:	461a      	mov	r2, r3
 800a90c:	f005 fbe6 	bl	80100dc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	695a      	ldr	r2, [r3, #20]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a91e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4618      	mov	r0, r3
 800a926:	f005 fb14 	bl	800ff52 <USB_ReadInterrupts>
 800a92a:	4603      	mov	r3, r0
 800a92c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a930:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a934:	d124      	bne.n	800a980 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4618      	mov	r0, r3
 800a93c:	f005 fbaa 	bl	8010094 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4618      	mov	r0, r3
 800a946:	f004 fc12 	bl	800f16e <USB_GetDevSpeed>
 800a94a:	4603      	mov	r3, r0
 800a94c:	461a      	mov	r2, r3
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681c      	ldr	r4, [r3, #0]
 800a956:	f001 f995 	bl	800bc84 <HAL_RCC_GetHCLKFreq>
 800a95a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a960:	b2db      	uxtb	r3, r3
 800a962:	461a      	mov	r2, r3
 800a964:	4620      	mov	r0, r4
 800a966:	f004 f931 	bl	800ebcc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f00e fb5d 	bl	801902a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	695a      	ldr	r2, [r3, #20]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a97e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4618      	mov	r0, r3
 800a986:	f005 fae4 	bl	800ff52 <USB_ReadInterrupts>
 800a98a:	4603      	mov	r3, r0
 800a98c:	f003 0308 	and.w	r3, r3, #8
 800a990:	2b08      	cmp	r3, #8
 800a992:	d10a      	bne.n	800a9aa <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f00e fb3a 	bl	801900e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	695a      	ldr	r2, [r3, #20]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f002 0208 	and.w	r2, r2, #8
 800a9a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f005 facf 	bl	800ff52 <USB_ReadInterrupts>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a9ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9be:	d10f      	bne.n	800a9e0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f00e fb9c 	bl	8019108 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	695a      	ldr	r2, [r3, #20]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a9de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f005 fab4 	bl	800ff52 <USB_ReadInterrupts>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a9f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9f4:	d10f      	bne.n	800aa16 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	4619      	mov	r1, r3
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f00e fb6f 	bl	80190e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	695a      	ldr	r2, [r3, #20]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800aa14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f005 fa99 	bl	800ff52 <USB_ReadInterrupts>
 800aa20:	4603      	mov	r3, r0
 800aa22:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aa26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa2a:	d10a      	bne.n	800aa42 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f00e fb7d 	bl	801912c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	695a      	ldr	r2, [r3, #20]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800aa40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4618      	mov	r0, r3
 800aa48:	f005 fa83 	bl	800ff52 <USB_ReadInterrupts>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	f003 0304 	and.w	r3, r3, #4
 800aa52:	2b04      	cmp	r3, #4
 800aa54:	d115      	bne.n	800aa82 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800aa5e:	69bb      	ldr	r3, [r7, #24]
 800aa60:	f003 0304 	and.w	r3, r3, #4
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d002      	beq.n	800aa6e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f00e fb6d 	bl	8019148 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	6859      	ldr	r1, [r3, #4]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	69ba      	ldr	r2, [r7, #24]
 800aa7a:	430a      	orrs	r2, r1
 800aa7c:	605a      	str	r2, [r3, #4]
 800aa7e:	e000      	b.n	800aa82 <HAL_PCD_IRQHandler+0x75e>
      return;
 800aa80:	bf00      	nop
    }
  }
}
 800aa82:	3734      	adds	r7, #52	; 0x34
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd90      	pop	{r4, r7, pc}

0800aa88 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	460b      	mov	r3, r1
 800aa92:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d101      	bne.n	800aaa2 <HAL_PCD_SetAddress+0x1a>
 800aa9e:	2302      	movs	r3, #2
 800aaa0:	e013      	b.n	800aaca <HAL_PCD_SetAddress+0x42>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	78fa      	ldrb	r2, [r7, #3]
 800aaae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	78fa      	ldrb	r2, [r7, #3]
 800aab8:	4611      	mov	r1, r2
 800aaba:	4618      	mov	r0, r3
 800aabc:	f005 f9e1 	bl	800fe82 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2200      	movs	r2, #0
 800aac4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800aac8:	2300      	movs	r3, #0
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3708      	adds	r7, #8
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}

0800aad2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800aad2:	b580      	push	{r7, lr}
 800aad4:	b084      	sub	sp, #16
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
 800aada:	4608      	mov	r0, r1
 800aadc:	4611      	mov	r1, r2
 800aade:	461a      	mov	r2, r3
 800aae0:	4603      	mov	r3, r0
 800aae2:	70fb      	strb	r3, [r7, #3]
 800aae4:	460b      	mov	r3, r1
 800aae6:	803b      	strh	r3, [r7, #0]
 800aae8:	4613      	mov	r3, r2
 800aaea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800aaec:	2300      	movs	r3, #0
 800aaee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800aaf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	da0f      	bge.n	800ab18 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aaf8:	78fb      	ldrb	r3, [r7, #3]
 800aafa:	f003 020f 	and.w	r2, r3, #15
 800aafe:	4613      	mov	r3, r2
 800ab00:	00db      	lsls	r3, r3, #3
 800ab02:	1a9b      	subs	r3, r3, r2
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	3338      	adds	r3, #56	; 0x38
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	4413      	add	r3, r2
 800ab0c:	3304      	adds	r3, #4
 800ab0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2201      	movs	r2, #1
 800ab14:	705a      	strb	r2, [r3, #1]
 800ab16:	e00f      	b.n	800ab38 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ab18:	78fb      	ldrb	r3, [r7, #3]
 800ab1a:	f003 020f 	and.w	r2, r3, #15
 800ab1e:	4613      	mov	r3, r2
 800ab20:	00db      	lsls	r3, r3, #3
 800ab22:	1a9b      	subs	r3, r3, r2
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	4413      	add	r3, r2
 800ab2e:	3304      	adds	r3, #4
 800ab30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2200      	movs	r2, #0
 800ab36:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800ab38:	78fb      	ldrb	r3, [r7, #3]
 800ab3a:	f003 030f 	and.w	r3, r3, #15
 800ab3e:	b2da      	uxtb	r2, r3
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800ab44:	883a      	ldrh	r2, [r7, #0]
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	78ba      	ldrb	r2, [r7, #2]
 800ab4e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	785b      	ldrb	r3, [r3, #1]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d004      	beq.n	800ab62 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	b29a      	uxth	r2, r3
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ab62:	78bb      	ldrb	r3, [r7, #2]
 800ab64:	2b02      	cmp	r3, #2
 800ab66:	d102      	bne.n	800ab6e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d101      	bne.n	800ab7c <HAL_PCD_EP_Open+0xaa>
 800ab78:	2302      	movs	r3, #2
 800ab7a:	e00e      	b.n	800ab9a <HAL_PCD_EP_Open+0xc8>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	68f9      	ldr	r1, [r7, #12]
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f004 fb14 	bl	800f1b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2200      	movs	r2, #0
 800ab94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800ab98:	7afb      	ldrb	r3, [r7, #11]
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3710      	adds	r7, #16
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800aba2:	b580      	push	{r7, lr}
 800aba4:	b084      	sub	sp, #16
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
 800abaa:	460b      	mov	r3, r1
 800abac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800abae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	da0f      	bge.n	800abd6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800abb6:	78fb      	ldrb	r3, [r7, #3]
 800abb8:	f003 020f 	and.w	r2, r3, #15
 800abbc:	4613      	mov	r3, r2
 800abbe:	00db      	lsls	r3, r3, #3
 800abc0:	1a9b      	subs	r3, r3, r2
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	3338      	adds	r3, #56	; 0x38
 800abc6:	687a      	ldr	r2, [r7, #4]
 800abc8:	4413      	add	r3, r2
 800abca:	3304      	adds	r3, #4
 800abcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2201      	movs	r2, #1
 800abd2:	705a      	strb	r2, [r3, #1]
 800abd4:	e00f      	b.n	800abf6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800abd6:	78fb      	ldrb	r3, [r7, #3]
 800abd8:	f003 020f 	and.w	r2, r3, #15
 800abdc:	4613      	mov	r3, r2
 800abde:	00db      	lsls	r3, r3, #3
 800abe0:	1a9b      	subs	r3, r3, r2
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	4413      	add	r3, r2
 800abec:	3304      	adds	r3, #4
 800abee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2200      	movs	r2, #0
 800abf4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800abf6:	78fb      	ldrb	r3, [r7, #3]
 800abf8:	f003 030f 	and.w	r3, r3, #15
 800abfc:	b2da      	uxtb	r2, r3
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	d101      	bne.n	800ac10 <HAL_PCD_EP_Close+0x6e>
 800ac0c:	2302      	movs	r3, #2
 800ac0e:	e00e      	b.n	800ac2e <HAL_PCD_EP_Close+0x8c>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2201      	movs	r2, #1
 800ac14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	68f9      	ldr	r1, [r7, #12]
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f004 fb52 	bl	800f2c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2200      	movs	r2, #0
 800ac28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800ac2c:	2300      	movs	r3, #0
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3710      	adds	r7, #16
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}

0800ac36 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ac36:	b580      	push	{r7, lr}
 800ac38:	b086      	sub	sp, #24
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	60f8      	str	r0, [r7, #12]
 800ac3e:	607a      	str	r2, [r7, #4]
 800ac40:	603b      	str	r3, [r7, #0]
 800ac42:	460b      	mov	r3, r1
 800ac44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ac46:	7afb      	ldrb	r3, [r7, #11]
 800ac48:	f003 020f 	and.w	r2, r3, #15
 800ac4c:	4613      	mov	r3, r2
 800ac4e:	00db      	lsls	r3, r3, #3
 800ac50:	1a9b      	subs	r3, r3, r2
 800ac52:	009b      	lsls	r3, r3, #2
 800ac54:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ac58:	68fa      	ldr	r2, [r7, #12]
 800ac5a:	4413      	add	r3, r2
 800ac5c:	3304      	adds	r3, #4
 800ac5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	683a      	ldr	r2, [r7, #0]
 800ac6a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	2200      	movs	r2, #0
 800ac76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ac78:	7afb      	ldrb	r3, [r7, #11]
 800ac7a:	f003 030f 	and.w	r3, r3, #15
 800ac7e:	b2da      	uxtb	r2, r3
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	691b      	ldr	r3, [r3, #16]
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d102      	bne.n	800ac92 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ac92:	7afb      	ldrb	r3, [r7, #11]
 800ac94:	f003 030f 	and.w	r3, r3, #15
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d109      	bne.n	800acb0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	6818      	ldr	r0, [r3, #0]
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	691b      	ldr	r3, [r3, #16]
 800aca4:	b2db      	uxtb	r3, r3
 800aca6:	461a      	mov	r2, r3
 800aca8:	6979      	ldr	r1, [r7, #20]
 800acaa:	f004 fe2d 	bl	800f908 <USB_EP0StartXfer>
 800acae:	e008      	b.n	800acc2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	6818      	ldr	r0, [r3, #0]
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	691b      	ldr	r3, [r3, #16]
 800acb8:	b2db      	uxtb	r3, r3
 800acba:	461a      	mov	r2, r3
 800acbc:	6979      	ldr	r1, [r7, #20]
 800acbe:	f004 fbdf 	bl	800f480 <USB_EPStartXfer>
  }

  return HAL_OK;
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3718      	adds	r7, #24
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	460b      	mov	r3, r1
 800acd6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800acd8:	78fb      	ldrb	r3, [r7, #3]
 800acda:	f003 020f 	and.w	r2, r3, #15
 800acde:	6879      	ldr	r1, [r7, #4]
 800ace0:	4613      	mov	r3, r2
 800ace2:	00db      	lsls	r3, r3, #3
 800ace4:	1a9b      	subs	r3, r3, r2
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	440b      	add	r3, r1
 800acea:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800acee:	681b      	ldr	r3, [r3, #0]
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	370c      	adds	r7, #12
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b086      	sub	sp, #24
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	60f8      	str	r0, [r7, #12]
 800ad04:	607a      	str	r2, [r7, #4]
 800ad06:	603b      	str	r3, [r7, #0]
 800ad08:	460b      	mov	r3, r1
 800ad0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ad0c:	7afb      	ldrb	r3, [r7, #11]
 800ad0e:	f003 020f 	and.w	r2, r3, #15
 800ad12:	4613      	mov	r3, r2
 800ad14:	00db      	lsls	r3, r3, #3
 800ad16:	1a9b      	subs	r3, r3, r2
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	3338      	adds	r3, #56	; 0x38
 800ad1c:	68fa      	ldr	r2, [r7, #12]
 800ad1e:	4413      	add	r3, r2
 800ad20:	3304      	adds	r3, #4
 800ad22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	683a      	ldr	r2, [r7, #0]
 800ad2e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	2200      	movs	r2, #0
 800ad34:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	2201      	movs	r2, #1
 800ad3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ad3c:	7afb      	ldrb	r3, [r7, #11]
 800ad3e:	f003 030f 	and.w	r3, r3, #15
 800ad42:	b2da      	uxtb	r2, r3
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	691b      	ldr	r3, [r3, #16]
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d102      	bne.n	800ad56 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ad56:	7afb      	ldrb	r3, [r7, #11]
 800ad58:	f003 030f 	and.w	r3, r3, #15
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d109      	bne.n	800ad74 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	6818      	ldr	r0, [r3, #0]
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	691b      	ldr	r3, [r3, #16]
 800ad68:	b2db      	uxtb	r3, r3
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	6979      	ldr	r1, [r7, #20]
 800ad6e:	f004 fdcb 	bl	800f908 <USB_EP0StartXfer>
 800ad72:	e008      	b.n	800ad86 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	6818      	ldr	r0, [r3, #0]
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	691b      	ldr	r3, [r3, #16]
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	461a      	mov	r2, r3
 800ad80:	6979      	ldr	r1, [r7, #20]
 800ad82:	f004 fb7d 	bl	800f480 <USB_EPStartXfer>
  }

  return HAL_OK;
 800ad86:	2300      	movs	r3, #0
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3718      	adds	r7, #24
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	460b      	mov	r3, r1
 800ad9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ad9c:	78fb      	ldrb	r3, [r7, #3]
 800ad9e:	f003 020f 	and.w	r2, r3, #15
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d901      	bls.n	800adae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800adaa:	2301      	movs	r3, #1
 800adac:	e050      	b.n	800ae50 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800adae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	da0f      	bge.n	800add6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800adb6:	78fb      	ldrb	r3, [r7, #3]
 800adb8:	f003 020f 	and.w	r2, r3, #15
 800adbc:	4613      	mov	r3, r2
 800adbe:	00db      	lsls	r3, r3, #3
 800adc0:	1a9b      	subs	r3, r3, r2
 800adc2:	009b      	lsls	r3, r3, #2
 800adc4:	3338      	adds	r3, #56	; 0x38
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	4413      	add	r3, r2
 800adca:	3304      	adds	r3, #4
 800adcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2201      	movs	r2, #1
 800add2:	705a      	strb	r2, [r3, #1]
 800add4:	e00d      	b.n	800adf2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800add6:	78fa      	ldrb	r2, [r7, #3]
 800add8:	4613      	mov	r3, r2
 800adda:	00db      	lsls	r3, r3, #3
 800addc:	1a9b      	subs	r3, r3, r2
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ade4:	687a      	ldr	r2, [r7, #4]
 800ade6:	4413      	add	r3, r2
 800ade8:	3304      	adds	r3, #4
 800adea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	2200      	movs	r2, #0
 800adf0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2201      	movs	r2, #1
 800adf6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800adf8:	78fb      	ldrb	r3, [r7, #3]
 800adfa:	f003 030f 	and.w	r3, r3, #15
 800adfe:	b2da      	uxtb	r2, r3
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ae0a:	2b01      	cmp	r3, #1
 800ae0c:	d101      	bne.n	800ae12 <HAL_PCD_EP_SetStall+0x82>
 800ae0e:	2302      	movs	r3, #2
 800ae10:	e01e      	b.n	800ae50 <HAL_PCD_EP_SetStall+0xc0>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2201      	movs	r2, #1
 800ae16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	68f9      	ldr	r1, [r7, #12]
 800ae20:	4618      	mov	r0, r3
 800ae22:	f004 ff5a 	bl	800fcda <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ae26:	78fb      	ldrb	r3, [r7, #3]
 800ae28:	f003 030f 	and.w	r3, r3, #15
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d10a      	bne.n	800ae46 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6818      	ldr	r0, [r3, #0]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	691b      	ldr	r3, [r3, #16]
 800ae38:	b2d9      	uxtb	r1, r3
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ae40:	461a      	mov	r2, r3
 800ae42:	f005 f94b 	bl	80100dc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ae4e:	2300      	movs	r3, #0
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3710      	adds	r7, #16
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b084      	sub	sp, #16
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	460b      	mov	r3, r1
 800ae62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ae64:	78fb      	ldrb	r3, [r7, #3]
 800ae66:	f003 020f 	and.w	r2, r3, #15
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d901      	bls.n	800ae76 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800ae72:	2301      	movs	r3, #1
 800ae74:	e042      	b.n	800aefc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ae76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	da0f      	bge.n	800ae9e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ae7e:	78fb      	ldrb	r3, [r7, #3]
 800ae80:	f003 020f 	and.w	r2, r3, #15
 800ae84:	4613      	mov	r3, r2
 800ae86:	00db      	lsls	r3, r3, #3
 800ae88:	1a9b      	subs	r3, r3, r2
 800ae8a:	009b      	lsls	r3, r3, #2
 800ae8c:	3338      	adds	r3, #56	; 0x38
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	4413      	add	r3, r2
 800ae92:	3304      	adds	r3, #4
 800ae94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2201      	movs	r2, #1
 800ae9a:	705a      	strb	r2, [r3, #1]
 800ae9c:	e00f      	b.n	800aebe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ae9e:	78fb      	ldrb	r3, [r7, #3]
 800aea0:	f003 020f 	and.w	r2, r3, #15
 800aea4:	4613      	mov	r3, r2
 800aea6:	00db      	lsls	r3, r3, #3
 800aea8:	1a9b      	subs	r3, r3, r2
 800aeaa:	009b      	lsls	r3, r3, #2
 800aeac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	4413      	add	r3, r2
 800aeb4:	3304      	adds	r3, #4
 800aeb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2200      	movs	r2, #0
 800aebc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2200      	movs	r2, #0
 800aec2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800aec4:	78fb      	ldrb	r3, [r7, #3]
 800aec6:	f003 030f 	and.w	r3, r3, #15
 800aeca:	b2da      	uxtb	r2, r3
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d101      	bne.n	800aede <HAL_PCD_EP_ClrStall+0x86>
 800aeda:	2302      	movs	r3, #2
 800aedc:	e00e      	b.n	800aefc <HAL_PCD_EP_ClrStall+0xa4>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2201      	movs	r2, #1
 800aee2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	68f9      	ldr	r1, [r7, #12]
 800aeec:	4618      	mov	r0, r3
 800aeee:	f004 ff62 	bl	800fdb6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2200      	movs	r2, #0
 800aef6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800aefa:	2300      	movs	r3, #0
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3710      	adds	r7, #16
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b08a      	sub	sp, #40	; 0x28
 800af08:	af02      	add	r7, sp, #8
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800af18:	683a      	ldr	r2, [r7, #0]
 800af1a:	4613      	mov	r3, r2
 800af1c:	00db      	lsls	r3, r3, #3
 800af1e:	1a9b      	subs	r3, r3, r2
 800af20:	009b      	lsls	r3, r3, #2
 800af22:	3338      	adds	r3, #56	; 0x38
 800af24:	687a      	ldr	r2, [r7, #4]
 800af26:	4413      	add	r3, r2
 800af28:	3304      	adds	r3, #4
 800af2a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	699a      	ldr	r2, [r3, #24]
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	695b      	ldr	r3, [r3, #20]
 800af34:	429a      	cmp	r2, r3
 800af36:	d901      	bls.n	800af3c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800af38:	2301      	movs	r3, #1
 800af3a:	e06c      	b.n	800b016 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	695a      	ldr	r2, [r3, #20]
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	699b      	ldr	r3, [r3, #24]
 800af44:	1ad3      	subs	r3, r2, r3
 800af46:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	69fa      	ldr	r2, [r7, #28]
 800af4e:	429a      	cmp	r2, r3
 800af50:	d902      	bls.n	800af58 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800af58:	69fb      	ldr	r3, [r7, #28]
 800af5a:	3303      	adds	r3, #3
 800af5c:	089b      	lsrs	r3, r3, #2
 800af5e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800af60:	e02b      	b.n	800afba <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	695a      	ldr	r2, [r3, #20]
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	699b      	ldr	r3, [r3, #24]
 800af6a:	1ad3      	subs	r3, r2, r3
 800af6c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	689b      	ldr	r3, [r3, #8]
 800af72:	69fa      	ldr	r2, [r7, #28]
 800af74:	429a      	cmp	r2, r3
 800af76:	d902      	bls.n	800af7e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800af7e:	69fb      	ldr	r3, [r7, #28]
 800af80:	3303      	adds	r3, #3
 800af82:	089b      	lsrs	r3, r3, #2
 800af84:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	68d9      	ldr	r1, [r3, #12]
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	b2da      	uxtb	r2, r3
 800af8e:	69fb      	ldr	r3, [r7, #28]
 800af90:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800af96:	b2db      	uxtb	r3, r3
 800af98:	9300      	str	r3, [sp, #0]
 800af9a:	4603      	mov	r3, r0
 800af9c:	6978      	ldr	r0, [r7, #20]
 800af9e:	f004 fe06 	bl	800fbae <USB_WritePacket>

    ep->xfer_buff  += len;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	68da      	ldr	r2, [r3, #12]
 800afa6:	69fb      	ldr	r3, [r7, #28]
 800afa8:	441a      	add	r2, r3
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	699a      	ldr	r2, [r3, #24]
 800afb2:	69fb      	ldr	r3, [r7, #28]
 800afb4:	441a      	add	r2, r3
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	015a      	lsls	r2, r3, #5
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	4413      	add	r3, r2
 800afc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afc6:	699b      	ldr	r3, [r3, #24]
 800afc8:	b29b      	uxth	r3, r3
 800afca:	69ba      	ldr	r2, [r7, #24]
 800afcc:	429a      	cmp	r2, r3
 800afce:	d809      	bhi.n	800afe4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	699a      	ldr	r2, [r3, #24]
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800afd8:	429a      	cmp	r2, r3
 800afda:	d203      	bcs.n	800afe4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	695b      	ldr	r3, [r3, #20]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d1be      	bne.n	800af62 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	695a      	ldr	r2, [r3, #20]
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	699b      	ldr	r3, [r3, #24]
 800afec:	429a      	cmp	r2, r3
 800afee:	d811      	bhi.n	800b014 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	f003 030f 	and.w	r3, r3, #15
 800aff6:	2201      	movs	r2, #1
 800aff8:	fa02 f303 	lsl.w	r3, r2, r3
 800affc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b004:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	43db      	mvns	r3, r3
 800b00a:	6939      	ldr	r1, [r7, #16]
 800b00c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b010:	4013      	ands	r3, r2
 800b012:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800b014:	2300      	movs	r3, #0
}
 800b016:	4618      	mov	r0, r3
 800b018:	3720      	adds	r7, #32
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
	...

0800b020 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b086      	sub	sp, #24
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	333c      	adds	r3, #60	; 0x3c
 800b038:	3304      	adds	r3, #4
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	015a      	lsls	r2, r3, #5
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	4413      	add	r3, r2
 800b046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b04a:	689b      	ldr	r3, [r3, #8]
 800b04c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	691b      	ldr	r3, [r3, #16]
 800b052:	2b01      	cmp	r3, #1
 800b054:	f040 80a0 	bne.w	800b198 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	f003 0308 	and.w	r3, r3, #8
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d015      	beq.n	800b08e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	4a72      	ldr	r2, [pc, #456]	; (800b230 <PCD_EP_OutXfrComplete_int+0x210>)
 800b066:	4293      	cmp	r3, r2
 800b068:	f240 80dd 	bls.w	800b226 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b072:	2b00      	cmp	r3, #0
 800b074:	f000 80d7 	beq.w	800b226 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	015a      	lsls	r2, r3, #5
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	4413      	add	r3, r2
 800b080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b084:	461a      	mov	r2, r3
 800b086:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b08a:	6093      	str	r3, [r2, #8]
 800b08c:	e0cb      	b.n	800b226 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	f003 0320 	and.w	r3, r3, #32
 800b094:	2b00      	cmp	r3, #0
 800b096:	d009      	beq.n	800b0ac <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	015a      	lsls	r2, r3, #5
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	4413      	add	r3, r2
 800b0a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	2320      	movs	r3, #32
 800b0a8:	6093      	str	r3, [r2, #8]
 800b0aa:	e0bc      	b.n	800b226 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	f040 80b7 	bne.w	800b226 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	4a5d      	ldr	r2, [pc, #372]	; (800b230 <PCD_EP_OutXfrComplete_int+0x210>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d90f      	bls.n	800b0e0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d00a      	beq.n	800b0e0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	015a      	lsls	r2, r3, #5
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	4413      	add	r3, r2
 800b0d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0dc:	6093      	str	r3, [r2, #8]
 800b0de:	e0a2      	b.n	800b226 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800b0e0:	6879      	ldr	r1, [r7, #4]
 800b0e2:	683a      	ldr	r2, [r7, #0]
 800b0e4:	4613      	mov	r3, r2
 800b0e6:	00db      	lsls	r3, r3, #3
 800b0e8:	1a9b      	subs	r3, r3, r2
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	440b      	add	r3, r1
 800b0ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800b0f2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	0159      	lsls	r1, r3, #5
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	440b      	add	r3, r1
 800b0fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b100:	691b      	ldr	r3, [r3, #16]
 800b102:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800b106:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	683a      	ldr	r2, [r7, #0]
 800b10c:	4613      	mov	r3, r2
 800b10e:	00db      	lsls	r3, r3, #3
 800b110:	1a9b      	subs	r3, r3, r2
 800b112:	009b      	lsls	r3, r3, #2
 800b114:	4403      	add	r3, r0
 800b116:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800b11a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800b11c:	6879      	ldr	r1, [r7, #4]
 800b11e:	683a      	ldr	r2, [r7, #0]
 800b120:	4613      	mov	r3, r2
 800b122:	00db      	lsls	r3, r3, #3
 800b124:	1a9b      	subs	r3, r3, r2
 800b126:	009b      	lsls	r3, r3, #2
 800b128:	440b      	add	r3, r1
 800b12a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b12e:	6819      	ldr	r1, [r3, #0]
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	683a      	ldr	r2, [r7, #0]
 800b134:	4613      	mov	r3, r2
 800b136:	00db      	lsls	r3, r3, #3
 800b138:	1a9b      	subs	r3, r3, r2
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	4403      	add	r3, r0
 800b13e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4419      	add	r1, r3
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	683a      	ldr	r2, [r7, #0]
 800b14a:	4613      	mov	r3, r2
 800b14c:	00db      	lsls	r3, r3, #3
 800b14e:	1a9b      	subs	r3, r3, r2
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	4403      	add	r3, r0
 800b154:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b158:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d114      	bne.n	800b18a <PCD_EP_OutXfrComplete_int+0x16a>
 800b160:	6879      	ldr	r1, [r7, #4]
 800b162:	683a      	ldr	r2, [r7, #0]
 800b164:	4613      	mov	r3, r2
 800b166:	00db      	lsls	r3, r3, #3
 800b168:	1a9b      	subs	r3, r3, r2
 800b16a:	009b      	lsls	r3, r3, #2
 800b16c:	440b      	add	r3, r1
 800b16e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d108      	bne.n	800b18a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6818      	ldr	r0, [r3, #0]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b182:	461a      	mov	r2, r3
 800b184:	2101      	movs	r1, #1
 800b186:	f004 ffa9 	bl	80100dc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	b2db      	uxtb	r3, r3
 800b18e:	4619      	mov	r1, r3
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f00d ff07 	bl	8018fa4 <HAL_PCD_DataOutStageCallback>
 800b196:	e046      	b.n	800b226 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	4a26      	ldr	r2, [pc, #152]	; (800b234 <PCD_EP_OutXfrComplete_int+0x214>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d124      	bne.n	800b1ea <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d00a      	beq.n	800b1c0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	015a      	lsls	r2, r3, #5
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	4413      	add	r3, r2
 800b1b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b1bc:	6093      	str	r3, [r2, #8]
 800b1be:	e032      	b.n	800b226 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	f003 0320 	and.w	r3, r3, #32
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d008      	beq.n	800b1dc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	015a      	lsls	r2, r3, #5
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	4413      	add	r3, r2
 800b1d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	2320      	movs	r3, #32
 800b1da:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	b2db      	uxtb	r3, r3
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f00d fede 	bl	8018fa4 <HAL_PCD_DataOutStageCallback>
 800b1e8:	e01d      	b.n	800b226 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d114      	bne.n	800b21a <PCD_EP_OutXfrComplete_int+0x1fa>
 800b1f0:	6879      	ldr	r1, [r7, #4]
 800b1f2:	683a      	ldr	r2, [r7, #0]
 800b1f4:	4613      	mov	r3, r2
 800b1f6:	00db      	lsls	r3, r3, #3
 800b1f8:	1a9b      	subs	r3, r3, r2
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	440b      	add	r3, r1
 800b1fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d108      	bne.n	800b21a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6818      	ldr	r0, [r3, #0]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b212:	461a      	mov	r2, r3
 800b214:	2100      	movs	r1, #0
 800b216:	f004 ff61 	bl	80100dc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	b2db      	uxtb	r3, r3
 800b21e:	4619      	mov	r1, r3
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f00d febf 	bl	8018fa4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800b226:	2300      	movs	r3, #0
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3718      	adds	r7, #24
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	4f54300a 	.word	0x4f54300a
 800b234:	4f54310a 	.word	0x4f54310a

0800b238 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b086      	sub	sp, #24
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	333c      	adds	r3, #60	; 0x3c
 800b250:	3304      	adds	r3, #4
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	015a      	lsls	r2, r3, #5
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	4413      	add	r3, r2
 800b25e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b262:	689b      	ldr	r3, [r3, #8]
 800b264:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	4a15      	ldr	r2, [pc, #84]	; (800b2c0 <PCD_EP_OutSetupPacket_int+0x88>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d90e      	bls.n	800b28c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b274:	2b00      	cmp	r3, #0
 800b276:	d009      	beq.n	800b28c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	015a      	lsls	r2, r3, #5
 800b27c:	693b      	ldr	r3, [r7, #16]
 800b27e:	4413      	add	r3, r2
 800b280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b284:	461a      	mov	r2, r3
 800b286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b28a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f00d fe77 	bl	8018f80 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	4a0a      	ldr	r2, [pc, #40]	; (800b2c0 <PCD_EP_OutSetupPacket_int+0x88>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d90c      	bls.n	800b2b4 <PCD_EP_OutSetupPacket_int+0x7c>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	691b      	ldr	r3, [r3, #16]
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d108      	bne.n	800b2b4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6818      	ldr	r0, [r3, #0]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	2101      	movs	r1, #1
 800b2b0:	f004 ff14 	bl	80100dc <USB_EP0_OutStart>
  }

  return HAL_OK;
 800b2b4:	2300      	movs	r3, #0
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3718      	adds	r7, #24
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	4f54300a 	.word	0x4f54300a

0800b2c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b085      	sub	sp, #20
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	70fb      	strb	r3, [r7, #3]
 800b2d0:	4613      	mov	r3, r2
 800b2d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800b2dc:	78fb      	ldrb	r3, [r7, #3]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d107      	bne.n	800b2f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800b2e2:	883b      	ldrh	r3, [r7, #0]
 800b2e4:	0419      	lsls	r1, r3, #16
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	68ba      	ldr	r2, [r7, #8]
 800b2ec:	430a      	orrs	r2, r1
 800b2ee:	629a      	str	r2, [r3, #40]	; 0x28
 800b2f0:	e028      	b.n	800b344 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2f8:	0c1b      	lsrs	r3, r3, #16
 800b2fa:	68ba      	ldr	r2, [r7, #8]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b300:	2300      	movs	r3, #0
 800b302:	73fb      	strb	r3, [r7, #15]
 800b304:	e00d      	b.n	800b322 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	7bfb      	ldrb	r3, [r7, #15]
 800b30c:	3340      	adds	r3, #64	; 0x40
 800b30e:	009b      	lsls	r3, r3, #2
 800b310:	4413      	add	r3, r2
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	0c1b      	lsrs	r3, r3, #16
 800b316:	68ba      	ldr	r2, [r7, #8]
 800b318:	4413      	add	r3, r2
 800b31a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b31c:	7bfb      	ldrb	r3, [r7, #15]
 800b31e:	3301      	adds	r3, #1
 800b320:	73fb      	strb	r3, [r7, #15]
 800b322:	7bfa      	ldrb	r2, [r7, #15]
 800b324:	78fb      	ldrb	r3, [r7, #3]
 800b326:	3b01      	subs	r3, #1
 800b328:	429a      	cmp	r2, r3
 800b32a:	d3ec      	bcc.n	800b306 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800b32c:	883b      	ldrh	r3, [r7, #0]
 800b32e:	0418      	lsls	r0, r3, #16
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6819      	ldr	r1, [r3, #0]
 800b334:	78fb      	ldrb	r3, [r7, #3]
 800b336:	3b01      	subs	r3, #1
 800b338:	68ba      	ldr	r2, [r7, #8]
 800b33a:	4302      	orrs	r2, r0
 800b33c:	3340      	adds	r3, #64	; 0x40
 800b33e:	009b      	lsls	r3, r3, #2
 800b340:	440b      	add	r3, r1
 800b342:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b344:	2300      	movs	r3, #0
}
 800b346:	4618      	mov	r0, r3
 800b348:	3714      	adds	r7, #20
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr

0800b352 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800b352:	b480      	push	{r7}
 800b354:	b083      	sub	sp, #12
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]
 800b35a:	460b      	mov	r3, r1
 800b35c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	887a      	ldrh	r2, [r7, #2]
 800b364:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b366:	2300      	movs	r3, #0
}
 800b368:	4618      	mov	r0, r3
 800b36a:	370c      	adds	r7, #12
 800b36c:	46bd      	mov	sp, r7
 800b36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b372:	4770      	bx	lr

0800b374 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	460b      	mov	r3, r1
 800b37e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800b380:	bf00      	nop
 800b382:	370c      	adds	r7, #12
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b083      	sub	sp, #12
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 800b394:	4b05      	ldr	r3, [pc, #20]	; (800b3ac <HAL_PWR_EnableWakeUpPin+0x20>)
 800b396:	685a      	ldr	r2, [r3, #4]
 800b398:	4904      	ldr	r1, [pc, #16]	; (800b3ac <HAL_PWR_EnableWakeUpPin+0x20>)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	4313      	orrs	r3, r2
 800b39e:	604b      	str	r3, [r1, #4]
}
 800b3a0:	bf00      	nop
 800b3a2:	370c      	adds	r7, #12
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr
 800b3ac:	40007000 	.word	0x40007000

0800b3b0 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 800b3b8:	4b06      	ldr	r3, [pc, #24]	; (800b3d4 <HAL_PWR_DisableWakeUpPin+0x24>)
 800b3ba:	685a      	ldr	r2, [r3, #4]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	43db      	mvns	r3, r3
 800b3c0:	4904      	ldr	r1, [pc, #16]	; (800b3d4 <HAL_PWR_DisableWakeUpPin+0x24>)
 800b3c2:	4013      	ands	r3, r2
 800b3c4:	604b      	str	r3, [r1, #4]
}
 800b3c6:	bf00      	nop
 800b3c8:	370c      	adds	r7, #12
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr
 800b3d2:	bf00      	nop
 800b3d4:	40007000 	.word	0x40007000

0800b3d8 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800b3dc:	4b08      	ldr	r3, [pc, #32]	; (800b400 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4a07      	ldr	r2, [pc, #28]	; (800b400 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800b3e2:	f043 0302 	orr.w	r3, r3, #2
 800b3e6:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800b3e8:	4b06      	ldr	r3, [pc, #24]	; (800b404 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800b3ea:	691b      	ldr	r3, [r3, #16]
 800b3ec:	4a05      	ldr	r2, [pc, #20]	; (800b404 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800b3ee:	f043 0304 	orr.w	r3, r3, #4
 800b3f2:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800b3f4:	bf30      	wfi
}
 800b3f6:	bf00      	nop
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr
 800b400:	40007000 	.word	0x40007000
 800b404:	e000ed00 	.word	0xe000ed00

0800b408 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b086      	sub	sp, #24
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d101      	bne.n	800b41a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b416:	2301      	movs	r3, #1
 800b418:	e264      	b.n	800b8e4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f003 0301 	and.w	r3, r3, #1
 800b422:	2b00      	cmp	r3, #0
 800b424:	d075      	beq.n	800b512 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b426:	4ba3      	ldr	r3, [pc, #652]	; (800b6b4 <HAL_RCC_OscConfig+0x2ac>)
 800b428:	689b      	ldr	r3, [r3, #8]
 800b42a:	f003 030c 	and.w	r3, r3, #12
 800b42e:	2b04      	cmp	r3, #4
 800b430:	d00c      	beq.n	800b44c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b432:	4ba0      	ldr	r3, [pc, #640]	; (800b6b4 <HAL_RCC_OscConfig+0x2ac>)
 800b434:	689b      	ldr	r3, [r3, #8]
 800b436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b43a:	2b08      	cmp	r3, #8
 800b43c:	d112      	bne.n	800b464 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b43e:	4b9d      	ldr	r3, [pc, #628]	; (800b6b4 <HAL_RCC_OscConfig+0x2ac>)
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b446:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b44a:	d10b      	bne.n	800b464 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b44c:	4b99      	ldr	r3, [pc, #612]	; (800b6b4 <HAL_RCC_OscConfig+0x2ac>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b454:	2b00      	cmp	r3, #0
 800b456:	d05b      	beq.n	800b510 <HAL_RCC_OscConfig+0x108>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d157      	bne.n	800b510 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b460:	2301      	movs	r3, #1
 800b462:	e23f      	b.n	800b8e4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b46c:	d106      	bne.n	800b47c <HAL_RCC_OscConfig+0x74>
 800b46e:	4b91      	ldr	r3, [pc, #580]	; (800b6b4 <HAL_RCC_OscConfig+0x2ac>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	4a90      	ldr	r2, [pc, #576]	; (800b6b4 <HAL_RCC_OscConfig+0x2ac>)
 800b474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b478:	6013      	str	r3, [r2, #0]
 800b47a:	e01d      	b.n	800b4b8 <HAL_RCC_OscConfig+0xb0>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b484:	d10c      	bne.n	800b4a0 <HAL_RCC_OscConfig+0x98>
 800b486:	4b8b      	ldr	r3, [pc, #556]	; (800b6b4 <HAL_RCC_OscConfig+0x2ac>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a8a      	ldr	r2, [pc, #552]	; (800b6b4 <HAL_RCC_OscConfig+0x2ac>)
 800b48c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b490:	6013      	str	r3, [r2, #0]
 800b492:	4b88      	ldr	r3, [pc, #544]	; (800b6b4 <HAL_RCC_OscConfig+0x2ac>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4a87      	ldr	r2, [pc, #540]	; (800b6b4 <HAL_RCC_OscConfig+0x2ac>)
 800b498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b49c:	6013      	str	r3, [r2, #0]
 800b49e:	e00b      	b.n	800b4b8 <HAL_RCC_OscConfig+0xb0>
 800b4a0:	4b84      	ldr	r3, [pc, #528]	; (800b6b4 <HAL_RCC_OscConfig+0x2ac>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4a83      	ldr	r2, [pc, #524]	; (800b6b4 <HAL_RCC_OscConfig+0x2ac>)
 800b4a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b4aa:	6013      	str	r3, [r2, #0]
 800b4ac:	4b81      	ldr	r3, [pc, #516]	; (800b6b4 <HAL_RCC_OscConfig+0x2ac>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4a80      	ldr	r2, [pc, #512]	; (800b6b4 <HAL_RCC_OscConfig+0x2ac>)
 800b4b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b4b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d013      	beq.n	800b4e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b4c0:	f7fc ff72 	bl	80083a8 <HAL_GetTick>
 800b4c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b4c6:	e008      	b.n	800b4da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b4c8:	f7fc ff6e 	bl	80083a8 <HAL_GetTick>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	1ad3      	subs	r3, r2, r3
 800b4d2:	2b64      	cmp	r3, #100	; 0x64
 800b4d4:	d901      	bls.n	800b4da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b4d6:	2303      	movs	r3, #3
 800b4d8:	e204      	b.n	800b8e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b4da:	4b76      	ldr	r3, [pc, #472]	; (800b6b4 <HAL_RCC_OscConfig+0x2ac>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d0f0      	beq.n	800b4c8 <HAL_RCC_OscConfig+0xc0>
 800b4e6:	e014      	b.n	800b512 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b4e8:	f7fc ff5e 	bl	80083a8 <HAL_GetTick>
 800b4ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b4ee:	e008      	b.n	800b502 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b4f0:	f7fc ff5a 	bl	80083a8 <HAL_GetTick>
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	1ad3      	subs	r3, r2, r3
 800b4fa:	2b64      	cmp	r3, #100	; 0x64
 800b4fc:	d901      	bls.n	800b502 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b4fe:	2303      	movs	r3, #3
 800b500:	e1f0      	b.n	800b8e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b502:	4b6c      	ldr	r3, [pc, #432]	; (800b6b4 <HAL_RCC_OscConfig+0x2ac>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d1f0      	bne.n	800b4f0 <HAL_RCC_OscConfig+0xe8>
 800b50e:	e000      	b.n	800b512 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f003 0302 	and.w	r3, r3, #2
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d063      	beq.n	800b5e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b51e:	4b65      	ldr	r3, [pc, #404]	; (800b6b4 <HAL_RCC_OscConfig+0x2ac>)
 800b520:	689b      	ldr	r3, [r3, #8]
 800b522:	f003 030c 	and.w	r3, r3, #12
 800b526:	2b00      	cmp	r3, #0
 800b528:	d00b      	beq.n	800b542 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b52a:	4b62      	ldr	r3, [pc, #392]	; (800b6b4 <HAL_RCC_OscConfig+0x2ac>)
 800b52c:	689b      	ldr	r3, [r3, #8]
 800b52e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b532:	2b08      	cmp	r3, #8
 800b534:	d11c      	bne.n	800b570 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b536:	4b5f      	ldr	r3, [pc, #380]	; (800b6b4 <HAL_RCC_OscConfig+0x2ac>)
 800b538:	685b      	ldr	r3, [r3, #4]
 800b53a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d116      	bne.n	800b570 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b542:	4b5c      	ldr	r3, [pc, #368]	; (800b6b4 <HAL_RCC_OscConfig+0x2ac>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f003 0302 	and.w	r3, r3, #2
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d005      	beq.n	800b55a <HAL_RCC_OscConfig+0x152>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	68db      	ldr	r3, [r3, #12]
 800b552:	2b01      	cmp	r3, #1
 800b554:	d001      	beq.n	800b55a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b556:	2301      	movs	r3, #1
 800b558:	e1c4      	b.n	800b8e4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b55a:	4b56      	ldr	r3, [pc, #344]	; (800b6b4 <HAL_RCC_OscConfig+0x2ac>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	691b      	ldr	r3, [r3, #16]
 800b566:	00db      	lsls	r3, r3, #3
 800b568:	4952      	ldr	r1, [pc, #328]	; (800b6b4 <HAL_RCC_OscConfig+0x2ac>)
 800b56a:	4313      	orrs	r3, r2
 800b56c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b56e:	e03a      	b.n	800b5e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	68db      	ldr	r3, [r3, #12]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d020      	beq.n	800b5ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b578:	4b4f      	ldr	r3, [pc, #316]	; (800b6b8 <HAL_RCC_OscConfig+0x2b0>)
 800b57a:	2201      	movs	r2, #1
 800b57c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b57e:	f7fc ff13 	bl	80083a8 <HAL_GetTick>
 800b582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b584:	e008      	b.n	800b598 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b586:	f7fc ff0f 	bl	80083a8 <HAL_GetTick>
 800b58a:	4602      	mov	r2, r0
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	1ad3      	subs	r3, r2, r3
 800b590:	2b02      	cmp	r3, #2
 800b592:	d901      	bls.n	800b598 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b594:	2303      	movs	r3, #3
 800b596:	e1a5      	b.n	800b8e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b598:	4b46      	ldr	r3, [pc, #280]	; (800b6b4 <HAL_RCC_OscConfig+0x2ac>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f003 0302 	and.w	r3, r3, #2
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d0f0      	beq.n	800b586 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b5a4:	4b43      	ldr	r3, [pc, #268]	; (800b6b4 <HAL_RCC_OscConfig+0x2ac>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	691b      	ldr	r3, [r3, #16]
 800b5b0:	00db      	lsls	r3, r3, #3
 800b5b2:	4940      	ldr	r1, [pc, #256]	; (800b6b4 <HAL_RCC_OscConfig+0x2ac>)
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	600b      	str	r3, [r1, #0]
 800b5b8:	e015      	b.n	800b5e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b5ba:	4b3f      	ldr	r3, [pc, #252]	; (800b6b8 <HAL_RCC_OscConfig+0x2b0>)
 800b5bc:	2200      	movs	r2, #0
 800b5be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5c0:	f7fc fef2 	bl	80083a8 <HAL_GetTick>
 800b5c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b5c6:	e008      	b.n	800b5da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b5c8:	f7fc feee 	bl	80083a8 <HAL_GetTick>
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	1ad3      	subs	r3, r2, r3
 800b5d2:	2b02      	cmp	r3, #2
 800b5d4:	d901      	bls.n	800b5da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b5d6:	2303      	movs	r3, #3
 800b5d8:	e184      	b.n	800b8e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b5da:	4b36      	ldr	r3, [pc, #216]	; (800b6b4 <HAL_RCC_OscConfig+0x2ac>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f003 0302 	and.w	r3, r3, #2
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d1f0      	bne.n	800b5c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f003 0308 	and.w	r3, r3, #8
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d030      	beq.n	800b654 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	695b      	ldr	r3, [r3, #20]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d016      	beq.n	800b628 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b5fa:	4b30      	ldr	r3, [pc, #192]	; (800b6bc <HAL_RCC_OscConfig+0x2b4>)
 800b5fc:	2201      	movs	r2, #1
 800b5fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b600:	f7fc fed2 	bl	80083a8 <HAL_GetTick>
 800b604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b606:	e008      	b.n	800b61a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b608:	f7fc fece 	bl	80083a8 <HAL_GetTick>
 800b60c:	4602      	mov	r2, r0
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	1ad3      	subs	r3, r2, r3
 800b612:	2b02      	cmp	r3, #2
 800b614:	d901      	bls.n	800b61a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b616:	2303      	movs	r3, #3
 800b618:	e164      	b.n	800b8e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b61a:	4b26      	ldr	r3, [pc, #152]	; (800b6b4 <HAL_RCC_OscConfig+0x2ac>)
 800b61c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b61e:	f003 0302 	and.w	r3, r3, #2
 800b622:	2b00      	cmp	r3, #0
 800b624:	d0f0      	beq.n	800b608 <HAL_RCC_OscConfig+0x200>
 800b626:	e015      	b.n	800b654 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b628:	4b24      	ldr	r3, [pc, #144]	; (800b6bc <HAL_RCC_OscConfig+0x2b4>)
 800b62a:	2200      	movs	r2, #0
 800b62c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b62e:	f7fc febb 	bl	80083a8 <HAL_GetTick>
 800b632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b634:	e008      	b.n	800b648 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b636:	f7fc feb7 	bl	80083a8 <HAL_GetTick>
 800b63a:	4602      	mov	r2, r0
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	1ad3      	subs	r3, r2, r3
 800b640:	2b02      	cmp	r3, #2
 800b642:	d901      	bls.n	800b648 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b644:	2303      	movs	r3, #3
 800b646:	e14d      	b.n	800b8e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b648:	4b1a      	ldr	r3, [pc, #104]	; (800b6b4 <HAL_RCC_OscConfig+0x2ac>)
 800b64a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b64c:	f003 0302 	and.w	r3, r3, #2
 800b650:	2b00      	cmp	r3, #0
 800b652:	d1f0      	bne.n	800b636 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f003 0304 	and.w	r3, r3, #4
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	f000 80a0 	beq.w	800b7a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b662:	2300      	movs	r3, #0
 800b664:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b666:	4b13      	ldr	r3, [pc, #76]	; (800b6b4 <HAL_RCC_OscConfig+0x2ac>)
 800b668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b66a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d10f      	bne.n	800b692 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b672:	2300      	movs	r3, #0
 800b674:	60bb      	str	r3, [r7, #8]
 800b676:	4b0f      	ldr	r3, [pc, #60]	; (800b6b4 <HAL_RCC_OscConfig+0x2ac>)
 800b678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b67a:	4a0e      	ldr	r2, [pc, #56]	; (800b6b4 <HAL_RCC_OscConfig+0x2ac>)
 800b67c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b680:	6413      	str	r3, [r2, #64]	; 0x40
 800b682:	4b0c      	ldr	r3, [pc, #48]	; (800b6b4 <HAL_RCC_OscConfig+0x2ac>)
 800b684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b68a:	60bb      	str	r3, [r7, #8]
 800b68c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b68e:	2301      	movs	r3, #1
 800b690:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b692:	4b0b      	ldr	r3, [pc, #44]	; (800b6c0 <HAL_RCC_OscConfig+0x2b8>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d121      	bne.n	800b6e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b69e:	4b08      	ldr	r3, [pc, #32]	; (800b6c0 <HAL_RCC_OscConfig+0x2b8>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	4a07      	ldr	r2, [pc, #28]	; (800b6c0 <HAL_RCC_OscConfig+0x2b8>)
 800b6a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b6aa:	f7fc fe7d 	bl	80083a8 <HAL_GetTick>
 800b6ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b6b0:	e011      	b.n	800b6d6 <HAL_RCC_OscConfig+0x2ce>
 800b6b2:	bf00      	nop
 800b6b4:	40023800 	.word	0x40023800
 800b6b8:	42470000 	.word	0x42470000
 800b6bc:	42470e80 	.word	0x42470e80
 800b6c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b6c4:	f7fc fe70 	bl	80083a8 <HAL_GetTick>
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	1ad3      	subs	r3, r2, r3
 800b6ce:	2b02      	cmp	r3, #2
 800b6d0:	d901      	bls.n	800b6d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800b6d2:	2303      	movs	r3, #3
 800b6d4:	e106      	b.n	800b8e4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b6d6:	4b85      	ldr	r3, [pc, #532]	; (800b8ec <HAL_RCC_OscConfig+0x4e4>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d0f0      	beq.n	800b6c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	689b      	ldr	r3, [r3, #8]
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d106      	bne.n	800b6f8 <HAL_RCC_OscConfig+0x2f0>
 800b6ea:	4b81      	ldr	r3, [pc, #516]	; (800b8f0 <HAL_RCC_OscConfig+0x4e8>)
 800b6ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6ee:	4a80      	ldr	r2, [pc, #512]	; (800b8f0 <HAL_RCC_OscConfig+0x4e8>)
 800b6f0:	f043 0301 	orr.w	r3, r3, #1
 800b6f4:	6713      	str	r3, [r2, #112]	; 0x70
 800b6f6:	e01c      	b.n	800b732 <HAL_RCC_OscConfig+0x32a>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	689b      	ldr	r3, [r3, #8]
 800b6fc:	2b05      	cmp	r3, #5
 800b6fe:	d10c      	bne.n	800b71a <HAL_RCC_OscConfig+0x312>
 800b700:	4b7b      	ldr	r3, [pc, #492]	; (800b8f0 <HAL_RCC_OscConfig+0x4e8>)
 800b702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b704:	4a7a      	ldr	r2, [pc, #488]	; (800b8f0 <HAL_RCC_OscConfig+0x4e8>)
 800b706:	f043 0304 	orr.w	r3, r3, #4
 800b70a:	6713      	str	r3, [r2, #112]	; 0x70
 800b70c:	4b78      	ldr	r3, [pc, #480]	; (800b8f0 <HAL_RCC_OscConfig+0x4e8>)
 800b70e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b710:	4a77      	ldr	r2, [pc, #476]	; (800b8f0 <HAL_RCC_OscConfig+0x4e8>)
 800b712:	f043 0301 	orr.w	r3, r3, #1
 800b716:	6713      	str	r3, [r2, #112]	; 0x70
 800b718:	e00b      	b.n	800b732 <HAL_RCC_OscConfig+0x32a>
 800b71a:	4b75      	ldr	r3, [pc, #468]	; (800b8f0 <HAL_RCC_OscConfig+0x4e8>)
 800b71c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b71e:	4a74      	ldr	r2, [pc, #464]	; (800b8f0 <HAL_RCC_OscConfig+0x4e8>)
 800b720:	f023 0301 	bic.w	r3, r3, #1
 800b724:	6713      	str	r3, [r2, #112]	; 0x70
 800b726:	4b72      	ldr	r3, [pc, #456]	; (800b8f0 <HAL_RCC_OscConfig+0x4e8>)
 800b728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b72a:	4a71      	ldr	r2, [pc, #452]	; (800b8f0 <HAL_RCC_OscConfig+0x4e8>)
 800b72c:	f023 0304 	bic.w	r3, r3, #4
 800b730:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	689b      	ldr	r3, [r3, #8]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d015      	beq.n	800b766 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b73a:	f7fc fe35 	bl	80083a8 <HAL_GetTick>
 800b73e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b740:	e00a      	b.n	800b758 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b742:	f7fc fe31 	bl	80083a8 <HAL_GetTick>
 800b746:	4602      	mov	r2, r0
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	1ad3      	subs	r3, r2, r3
 800b74c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b750:	4293      	cmp	r3, r2
 800b752:	d901      	bls.n	800b758 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800b754:	2303      	movs	r3, #3
 800b756:	e0c5      	b.n	800b8e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b758:	4b65      	ldr	r3, [pc, #404]	; (800b8f0 <HAL_RCC_OscConfig+0x4e8>)
 800b75a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b75c:	f003 0302 	and.w	r3, r3, #2
 800b760:	2b00      	cmp	r3, #0
 800b762:	d0ee      	beq.n	800b742 <HAL_RCC_OscConfig+0x33a>
 800b764:	e014      	b.n	800b790 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b766:	f7fc fe1f 	bl	80083a8 <HAL_GetTick>
 800b76a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b76c:	e00a      	b.n	800b784 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b76e:	f7fc fe1b 	bl	80083a8 <HAL_GetTick>
 800b772:	4602      	mov	r2, r0
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	1ad3      	subs	r3, r2, r3
 800b778:	f241 3288 	movw	r2, #5000	; 0x1388
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d901      	bls.n	800b784 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800b780:	2303      	movs	r3, #3
 800b782:	e0af      	b.n	800b8e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b784:	4b5a      	ldr	r3, [pc, #360]	; (800b8f0 <HAL_RCC_OscConfig+0x4e8>)
 800b786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b788:	f003 0302 	and.w	r3, r3, #2
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d1ee      	bne.n	800b76e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b790:	7dfb      	ldrb	r3, [r7, #23]
 800b792:	2b01      	cmp	r3, #1
 800b794:	d105      	bne.n	800b7a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b796:	4b56      	ldr	r3, [pc, #344]	; (800b8f0 <HAL_RCC_OscConfig+0x4e8>)
 800b798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b79a:	4a55      	ldr	r2, [pc, #340]	; (800b8f0 <HAL_RCC_OscConfig+0x4e8>)
 800b79c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b7a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	699b      	ldr	r3, [r3, #24]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	f000 809b 	beq.w	800b8e2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b7ac:	4b50      	ldr	r3, [pc, #320]	; (800b8f0 <HAL_RCC_OscConfig+0x4e8>)
 800b7ae:	689b      	ldr	r3, [r3, #8]
 800b7b0:	f003 030c 	and.w	r3, r3, #12
 800b7b4:	2b08      	cmp	r3, #8
 800b7b6:	d05c      	beq.n	800b872 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	699b      	ldr	r3, [r3, #24]
 800b7bc:	2b02      	cmp	r3, #2
 800b7be:	d141      	bne.n	800b844 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b7c0:	4b4c      	ldr	r3, [pc, #304]	; (800b8f4 <HAL_RCC_OscConfig+0x4ec>)
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b7c6:	f7fc fdef 	bl	80083a8 <HAL_GetTick>
 800b7ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b7cc:	e008      	b.n	800b7e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b7ce:	f7fc fdeb 	bl	80083a8 <HAL_GetTick>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	1ad3      	subs	r3, r2, r3
 800b7d8:	2b02      	cmp	r3, #2
 800b7da:	d901      	bls.n	800b7e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800b7dc:	2303      	movs	r3, #3
 800b7de:	e081      	b.n	800b8e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b7e0:	4b43      	ldr	r3, [pc, #268]	; (800b8f0 <HAL_RCC_OscConfig+0x4e8>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d1f0      	bne.n	800b7ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	69da      	ldr	r2, [r3, #28]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6a1b      	ldr	r3, [r3, #32]
 800b7f4:	431a      	orrs	r2, r3
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7fa:	019b      	lsls	r3, r3, #6
 800b7fc:	431a      	orrs	r2, r3
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b802:	085b      	lsrs	r3, r3, #1
 800b804:	3b01      	subs	r3, #1
 800b806:	041b      	lsls	r3, r3, #16
 800b808:	431a      	orrs	r2, r3
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b80e:	061b      	lsls	r3, r3, #24
 800b810:	4937      	ldr	r1, [pc, #220]	; (800b8f0 <HAL_RCC_OscConfig+0x4e8>)
 800b812:	4313      	orrs	r3, r2
 800b814:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b816:	4b37      	ldr	r3, [pc, #220]	; (800b8f4 <HAL_RCC_OscConfig+0x4ec>)
 800b818:	2201      	movs	r2, #1
 800b81a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b81c:	f7fc fdc4 	bl	80083a8 <HAL_GetTick>
 800b820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b822:	e008      	b.n	800b836 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b824:	f7fc fdc0 	bl	80083a8 <HAL_GetTick>
 800b828:	4602      	mov	r2, r0
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	1ad3      	subs	r3, r2, r3
 800b82e:	2b02      	cmp	r3, #2
 800b830:	d901      	bls.n	800b836 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800b832:	2303      	movs	r3, #3
 800b834:	e056      	b.n	800b8e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b836:	4b2e      	ldr	r3, [pc, #184]	; (800b8f0 <HAL_RCC_OscConfig+0x4e8>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d0f0      	beq.n	800b824 <HAL_RCC_OscConfig+0x41c>
 800b842:	e04e      	b.n	800b8e2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b844:	4b2b      	ldr	r3, [pc, #172]	; (800b8f4 <HAL_RCC_OscConfig+0x4ec>)
 800b846:	2200      	movs	r2, #0
 800b848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b84a:	f7fc fdad 	bl	80083a8 <HAL_GetTick>
 800b84e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b850:	e008      	b.n	800b864 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b852:	f7fc fda9 	bl	80083a8 <HAL_GetTick>
 800b856:	4602      	mov	r2, r0
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	1ad3      	subs	r3, r2, r3
 800b85c:	2b02      	cmp	r3, #2
 800b85e:	d901      	bls.n	800b864 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800b860:	2303      	movs	r3, #3
 800b862:	e03f      	b.n	800b8e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b864:	4b22      	ldr	r3, [pc, #136]	; (800b8f0 <HAL_RCC_OscConfig+0x4e8>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d1f0      	bne.n	800b852 <HAL_RCC_OscConfig+0x44a>
 800b870:	e037      	b.n	800b8e2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	699b      	ldr	r3, [r3, #24]
 800b876:	2b01      	cmp	r3, #1
 800b878:	d101      	bne.n	800b87e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800b87a:	2301      	movs	r3, #1
 800b87c:	e032      	b.n	800b8e4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b87e:	4b1c      	ldr	r3, [pc, #112]	; (800b8f0 <HAL_RCC_OscConfig+0x4e8>)
 800b880:	685b      	ldr	r3, [r3, #4]
 800b882:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	699b      	ldr	r3, [r3, #24]
 800b888:	2b01      	cmp	r3, #1
 800b88a:	d028      	beq.n	800b8de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b896:	429a      	cmp	r2, r3
 800b898:	d121      	bne.n	800b8de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d11a      	bne.n	800b8de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b8a8:	68fa      	ldr	r2, [r7, #12]
 800b8aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b8ae:	4013      	ands	r3, r2
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b8b4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d111      	bne.n	800b8de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8c4:	085b      	lsrs	r3, r3, #1
 800b8c6:	3b01      	subs	r3, #1
 800b8c8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d107      	bne.n	800b8de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d001      	beq.n	800b8e2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800b8de:	2301      	movs	r3, #1
 800b8e0:	e000      	b.n	800b8e4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800b8e2:	2300      	movs	r3, #0
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3718      	adds	r7, #24
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}
 800b8ec:	40007000 	.word	0x40007000
 800b8f0:	40023800 	.word	0x40023800
 800b8f4:	42470060 	.word	0x42470060

0800b8f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b084      	sub	sp, #16
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d101      	bne.n	800b90c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b908:	2301      	movs	r3, #1
 800b90a:	e0cc      	b.n	800baa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b90c:	4b68      	ldr	r3, [pc, #416]	; (800bab0 <HAL_RCC_ClockConfig+0x1b8>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f003 030f 	and.w	r3, r3, #15
 800b914:	683a      	ldr	r2, [r7, #0]
 800b916:	429a      	cmp	r2, r3
 800b918:	d90c      	bls.n	800b934 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b91a:	4b65      	ldr	r3, [pc, #404]	; (800bab0 <HAL_RCC_ClockConfig+0x1b8>)
 800b91c:	683a      	ldr	r2, [r7, #0]
 800b91e:	b2d2      	uxtb	r2, r2
 800b920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b922:	4b63      	ldr	r3, [pc, #396]	; (800bab0 <HAL_RCC_ClockConfig+0x1b8>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f003 030f 	and.w	r3, r3, #15
 800b92a:	683a      	ldr	r2, [r7, #0]
 800b92c:	429a      	cmp	r2, r3
 800b92e:	d001      	beq.n	800b934 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b930:	2301      	movs	r3, #1
 800b932:	e0b8      	b.n	800baa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f003 0302 	and.w	r3, r3, #2
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d020      	beq.n	800b982 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f003 0304 	and.w	r3, r3, #4
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d005      	beq.n	800b958 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b94c:	4b59      	ldr	r3, [pc, #356]	; (800bab4 <HAL_RCC_ClockConfig+0x1bc>)
 800b94e:	689b      	ldr	r3, [r3, #8]
 800b950:	4a58      	ldr	r2, [pc, #352]	; (800bab4 <HAL_RCC_ClockConfig+0x1bc>)
 800b952:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b956:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f003 0308 	and.w	r3, r3, #8
 800b960:	2b00      	cmp	r3, #0
 800b962:	d005      	beq.n	800b970 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b964:	4b53      	ldr	r3, [pc, #332]	; (800bab4 <HAL_RCC_ClockConfig+0x1bc>)
 800b966:	689b      	ldr	r3, [r3, #8]
 800b968:	4a52      	ldr	r2, [pc, #328]	; (800bab4 <HAL_RCC_ClockConfig+0x1bc>)
 800b96a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b96e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b970:	4b50      	ldr	r3, [pc, #320]	; (800bab4 <HAL_RCC_ClockConfig+0x1bc>)
 800b972:	689b      	ldr	r3, [r3, #8]
 800b974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	689b      	ldr	r3, [r3, #8]
 800b97c:	494d      	ldr	r1, [pc, #308]	; (800bab4 <HAL_RCC_ClockConfig+0x1bc>)
 800b97e:	4313      	orrs	r3, r2
 800b980:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f003 0301 	and.w	r3, r3, #1
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d044      	beq.n	800ba18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	2b01      	cmp	r3, #1
 800b994:	d107      	bne.n	800b9a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b996:	4b47      	ldr	r3, [pc, #284]	; (800bab4 <HAL_RCC_ClockConfig+0x1bc>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d119      	bne.n	800b9d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	e07f      	b.n	800baa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	685b      	ldr	r3, [r3, #4]
 800b9aa:	2b02      	cmp	r3, #2
 800b9ac:	d003      	beq.n	800b9b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b9b2:	2b03      	cmp	r3, #3
 800b9b4:	d107      	bne.n	800b9c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b9b6:	4b3f      	ldr	r3, [pc, #252]	; (800bab4 <HAL_RCC_ClockConfig+0x1bc>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d109      	bne.n	800b9d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	e06f      	b.n	800baa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b9c6:	4b3b      	ldr	r3, [pc, #236]	; (800bab4 <HAL_RCC_ClockConfig+0x1bc>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f003 0302 	and.w	r3, r3, #2
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d101      	bne.n	800b9d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	e067      	b.n	800baa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b9d6:	4b37      	ldr	r3, [pc, #220]	; (800bab4 <HAL_RCC_ClockConfig+0x1bc>)
 800b9d8:	689b      	ldr	r3, [r3, #8]
 800b9da:	f023 0203 	bic.w	r2, r3, #3
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	685b      	ldr	r3, [r3, #4]
 800b9e2:	4934      	ldr	r1, [pc, #208]	; (800bab4 <HAL_RCC_ClockConfig+0x1bc>)
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b9e8:	f7fc fcde 	bl	80083a8 <HAL_GetTick>
 800b9ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b9ee:	e00a      	b.n	800ba06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b9f0:	f7fc fcda 	bl	80083a8 <HAL_GetTick>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	1ad3      	subs	r3, r2, r3
 800b9fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d901      	bls.n	800ba06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ba02:	2303      	movs	r3, #3
 800ba04:	e04f      	b.n	800baa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ba06:	4b2b      	ldr	r3, [pc, #172]	; (800bab4 <HAL_RCC_ClockConfig+0x1bc>)
 800ba08:	689b      	ldr	r3, [r3, #8]
 800ba0a:	f003 020c 	and.w	r2, r3, #12
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	009b      	lsls	r3, r3, #2
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d1eb      	bne.n	800b9f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ba18:	4b25      	ldr	r3, [pc, #148]	; (800bab0 <HAL_RCC_ClockConfig+0x1b8>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f003 030f 	and.w	r3, r3, #15
 800ba20:	683a      	ldr	r2, [r7, #0]
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d20c      	bcs.n	800ba40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba26:	4b22      	ldr	r3, [pc, #136]	; (800bab0 <HAL_RCC_ClockConfig+0x1b8>)
 800ba28:	683a      	ldr	r2, [r7, #0]
 800ba2a:	b2d2      	uxtb	r2, r2
 800ba2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba2e:	4b20      	ldr	r3, [pc, #128]	; (800bab0 <HAL_RCC_ClockConfig+0x1b8>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f003 030f 	and.w	r3, r3, #15
 800ba36:	683a      	ldr	r2, [r7, #0]
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d001      	beq.n	800ba40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	e032      	b.n	800baa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f003 0304 	and.w	r3, r3, #4
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d008      	beq.n	800ba5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ba4c:	4b19      	ldr	r3, [pc, #100]	; (800bab4 <HAL_RCC_ClockConfig+0x1bc>)
 800ba4e:	689b      	ldr	r3, [r3, #8]
 800ba50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	68db      	ldr	r3, [r3, #12]
 800ba58:	4916      	ldr	r1, [pc, #88]	; (800bab4 <HAL_RCC_ClockConfig+0x1bc>)
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f003 0308 	and.w	r3, r3, #8
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d009      	beq.n	800ba7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ba6a:	4b12      	ldr	r3, [pc, #72]	; (800bab4 <HAL_RCC_ClockConfig+0x1bc>)
 800ba6c:	689b      	ldr	r3, [r3, #8]
 800ba6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	691b      	ldr	r3, [r3, #16]
 800ba76:	00db      	lsls	r3, r3, #3
 800ba78:	490e      	ldr	r1, [pc, #56]	; (800bab4 <HAL_RCC_ClockConfig+0x1bc>)
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ba7e:	f000 f821 	bl	800bac4 <HAL_RCC_GetSysClockFreq>
 800ba82:	4602      	mov	r2, r0
 800ba84:	4b0b      	ldr	r3, [pc, #44]	; (800bab4 <HAL_RCC_ClockConfig+0x1bc>)
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	091b      	lsrs	r3, r3, #4
 800ba8a:	f003 030f 	and.w	r3, r3, #15
 800ba8e:	490a      	ldr	r1, [pc, #40]	; (800bab8 <HAL_RCC_ClockConfig+0x1c0>)
 800ba90:	5ccb      	ldrb	r3, [r1, r3]
 800ba92:	fa22 f303 	lsr.w	r3, r2, r3
 800ba96:	4a09      	ldr	r2, [pc, #36]	; (800babc <HAL_RCC_ClockConfig+0x1c4>)
 800ba98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ba9a:	4b09      	ldr	r3, [pc, #36]	; (800bac0 <HAL_RCC_ClockConfig+0x1c8>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f7f7 faac 	bl	8002ffc <HAL_InitTick>

  return HAL_OK;
 800baa4:	2300      	movs	r3, #0
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3710      	adds	r7, #16
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop
 800bab0:	40023c00 	.word	0x40023c00
 800bab4:	40023800 	.word	0x40023800
 800bab8:	080215d4 	.word	0x080215d4
 800babc:	20000000 	.word	0x20000000
 800bac0:	20000058 	.word	0x20000058

0800bac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bac4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800bac8:	b084      	sub	sp, #16
 800baca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800bacc:	2300      	movs	r3, #0
 800bace:	607b      	str	r3, [r7, #4]
 800bad0:	2300      	movs	r3, #0
 800bad2:	60fb      	str	r3, [r7, #12]
 800bad4:	2300      	movs	r3, #0
 800bad6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800bad8:	2300      	movs	r3, #0
 800bada:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800badc:	4b67      	ldr	r3, [pc, #412]	; (800bc7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800bade:	689b      	ldr	r3, [r3, #8]
 800bae0:	f003 030c 	and.w	r3, r3, #12
 800bae4:	2b08      	cmp	r3, #8
 800bae6:	d00d      	beq.n	800bb04 <HAL_RCC_GetSysClockFreq+0x40>
 800bae8:	2b08      	cmp	r3, #8
 800baea:	f200 80bd 	bhi.w	800bc68 <HAL_RCC_GetSysClockFreq+0x1a4>
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d002      	beq.n	800baf8 <HAL_RCC_GetSysClockFreq+0x34>
 800baf2:	2b04      	cmp	r3, #4
 800baf4:	d003      	beq.n	800bafe <HAL_RCC_GetSysClockFreq+0x3a>
 800baf6:	e0b7      	b.n	800bc68 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800baf8:	4b61      	ldr	r3, [pc, #388]	; (800bc80 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800bafa:	60bb      	str	r3, [r7, #8]
       break;
 800bafc:	e0b7      	b.n	800bc6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bafe:	4b60      	ldr	r3, [pc, #384]	; (800bc80 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800bb00:	60bb      	str	r3, [r7, #8]
      break;
 800bb02:	e0b4      	b.n	800bc6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bb04:	4b5d      	ldr	r3, [pc, #372]	; (800bc7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb0c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800bb0e:	4b5b      	ldr	r3, [pc, #364]	; (800bc7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d04d      	beq.n	800bbb6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bb1a:	4b58      	ldr	r3, [pc, #352]	; (800bc7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	099b      	lsrs	r3, r3, #6
 800bb20:	461a      	mov	r2, r3
 800bb22:	f04f 0300 	mov.w	r3, #0
 800bb26:	f240 10ff 	movw	r0, #511	; 0x1ff
 800bb2a:	f04f 0100 	mov.w	r1, #0
 800bb2e:	ea02 0800 	and.w	r8, r2, r0
 800bb32:	ea03 0901 	and.w	r9, r3, r1
 800bb36:	4640      	mov	r0, r8
 800bb38:	4649      	mov	r1, r9
 800bb3a:	f04f 0200 	mov.w	r2, #0
 800bb3e:	f04f 0300 	mov.w	r3, #0
 800bb42:	014b      	lsls	r3, r1, #5
 800bb44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800bb48:	0142      	lsls	r2, r0, #5
 800bb4a:	4610      	mov	r0, r2
 800bb4c:	4619      	mov	r1, r3
 800bb4e:	ebb0 0008 	subs.w	r0, r0, r8
 800bb52:	eb61 0109 	sbc.w	r1, r1, r9
 800bb56:	f04f 0200 	mov.w	r2, #0
 800bb5a:	f04f 0300 	mov.w	r3, #0
 800bb5e:	018b      	lsls	r3, r1, #6
 800bb60:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800bb64:	0182      	lsls	r2, r0, #6
 800bb66:	1a12      	subs	r2, r2, r0
 800bb68:	eb63 0301 	sbc.w	r3, r3, r1
 800bb6c:	f04f 0000 	mov.w	r0, #0
 800bb70:	f04f 0100 	mov.w	r1, #0
 800bb74:	00d9      	lsls	r1, r3, #3
 800bb76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bb7a:	00d0      	lsls	r0, r2, #3
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	460b      	mov	r3, r1
 800bb80:	eb12 0208 	adds.w	r2, r2, r8
 800bb84:	eb43 0309 	adc.w	r3, r3, r9
 800bb88:	f04f 0000 	mov.w	r0, #0
 800bb8c:	f04f 0100 	mov.w	r1, #0
 800bb90:	0299      	lsls	r1, r3, #10
 800bb92:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800bb96:	0290      	lsls	r0, r2, #10
 800bb98:	4602      	mov	r2, r0
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	4610      	mov	r0, r2
 800bb9e:	4619      	mov	r1, r3
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	461a      	mov	r2, r3
 800bba4:	f04f 0300 	mov.w	r3, #0
 800bba8:	f7f5 f87e 	bl	8000ca8 <__aeabi_uldivmod>
 800bbac:	4602      	mov	r2, r0
 800bbae:	460b      	mov	r3, r1
 800bbb0:	4613      	mov	r3, r2
 800bbb2:	60fb      	str	r3, [r7, #12]
 800bbb4:	e04a      	b.n	800bc4c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bbb6:	4b31      	ldr	r3, [pc, #196]	; (800bc7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	099b      	lsrs	r3, r3, #6
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	f04f 0300 	mov.w	r3, #0
 800bbc2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800bbc6:	f04f 0100 	mov.w	r1, #0
 800bbca:	ea02 0400 	and.w	r4, r2, r0
 800bbce:	ea03 0501 	and.w	r5, r3, r1
 800bbd2:	4620      	mov	r0, r4
 800bbd4:	4629      	mov	r1, r5
 800bbd6:	f04f 0200 	mov.w	r2, #0
 800bbda:	f04f 0300 	mov.w	r3, #0
 800bbde:	014b      	lsls	r3, r1, #5
 800bbe0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800bbe4:	0142      	lsls	r2, r0, #5
 800bbe6:	4610      	mov	r0, r2
 800bbe8:	4619      	mov	r1, r3
 800bbea:	1b00      	subs	r0, r0, r4
 800bbec:	eb61 0105 	sbc.w	r1, r1, r5
 800bbf0:	f04f 0200 	mov.w	r2, #0
 800bbf4:	f04f 0300 	mov.w	r3, #0
 800bbf8:	018b      	lsls	r3, r1, #6
 800bbfa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800bbfe:	0182      	lsls	r2, r0, #6
 800bc00:	1a12      	subs	r2, r2, r0
 800bc02:	eb63 0301 	sbc.w	r3, r3, r1
 800bc06:	f04f 0000 	mov.w	r0, #0
 800bc0a:	f04f 0100 	mov.w	r1, #0
 800bc0e:	00d9      	lsls	r1, r3, #3
 800bc10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bc14:	00d0      	lsls	r0, r2, #3
 800bc16:	4602      	mov	r2, r0
 800bc18:	460b      	mov	r3, r1
 800bc1a:	1912      	adds	r2, r2, r4
 800bc1c:	eb45 0303 	adc.w	r3, r5, r3
 800bc20:	f04f 0000 	mov.w	r0, #0
 800bc24:	f04f 0100 	mov.w	r1, #0
 800bc28:	0299      	lsls	r1, r3, #10
 800bc2a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800bc2e:	0290      	lsls	r0, r2, #10
 800bc30:	4602      	mov	r2, r0
 800bc32:	460b      	mov	r3, r1
 800bc34:	4610      	mov	r0, r2
 800bc36:	4619      	mov	r1, r3
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	f04f 0300 	mov.w	r3, #0
 800bc40:	f7f5 f832 	bl	8000ca8 <__aeabi_uldivmod>
 800bc44:	4602      	mov	r2, r0
 800bc46:	460b      	mov	r3, r1
 800bc48:	4613      	mov	r3, r2
 800bc4a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800bc4c:	4b0b      	ldr	r3, [pc, #44]	; (800bc7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	0c1b      	lsrs	r3, r3, #16
 800bc52:	f003 0303 	and.w	r3, r3, #3
 800bc56:	3301      	adds	r3, #1
 800bc58:	005b      	lsls	r3, r3, #1
 800bc5a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800bc5c:	68fa      	ldr	r2, [r7, #12]
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc64:	60bb      	str	r3, [r7, #8]
      break;
 800bc66:	e002      	b.n	800bc6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bc68:	4b05      	ldr	r3, [pc, #20]	; (800bc80 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800bc6a:	60bb      	str	r3, [r7, #8]
      break;
 800bc6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bc6e:	68bb      	ldr	r3, [r7, #8]
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3710      	adds	r7, #16
 800bc74:	46bd      	mov	sp, r7
 800bc76:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800bc7a:	bf00      	nop
 800bc7c:	40023800 	.word	0x40023800
 800bc80:	00f42400 	.word	0x00f42400

0800bc84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bc84:	b480      	push	{r7}
 800bc86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bc88:	4b03      	ldr	r3, [pc, #12]	; (800bc98 <HAL_RCC_GetHCLKFreq+0x14>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr
 800bc96:	bf00      	nop
 800bc98:	20000000 	.word	0x20000000

0800bc9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800bca0:	f7ff fff0 	bl	800bc84 <HAL_RCC_GetHCLKFreq>
 800bca4:	4602      	mov	r2, r0
 800bca6:	4b05      	ldr	r3, [pc, #20]	; (800bcbc <HAL_RCC_GetPCLK1Freq+0x20>)
 800bca8:	689b      	ldr	r3, [r3, #8]
 800bcaa:	0a9b      	lsrs	r3, r3, #10
 800bcac:	f003 0307 	and.w	r3, r3, #7
 800bcb0:	4903      	ldr	r1, [pc, #12]	; (800bcc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bcb2:	5ccb      	ldrb	r3, [r1, r3]
 800bcb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	bd80      	pop	{r7, pc}
 800bcbc:	40023800 	.word	0x40023800
 800bcc0:	080215e4 	.word	0x080215e4

0800bcc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800bcc8:	f7ff ffdc 	bl	800bc84 <HAL_RCC_GetHCLKFreq>
 800bccc:	4602      	mov	r2, r0
 800bcce:	4b05      	ldr	r3, [pc, #20]	; (800bce4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bcd0:	689b      	ldr	r3, [r3, #8]
 800bcd2:	0b5b      	lsrs	r3, r3, #13
 800bcd4:	f003 0307 	and.w	r3, r3, #7
 800bcd8:	4903      	ldr	r1, [pc, #12]	; (800bce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bcda:	5ccb      	ldrb	r3, [r1, r3]
 800bcdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	bd80      	pop	{r7, pc}
 800bce4:	40023800 	.word	0x40023800
 800bce8:	080215e4 	.word	0x080215e4

0800bcec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b083      	sub	sp, #12
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	220f      	movs	r2, #15
 800bcfa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800bcfc:	4b12      	ldr	r3, [pc, #72]	; (800bd48 <HAL_RCC_GetClockConfig+0x5c>)
 800bcfe:	689b      	ldr	r3, [r3, #8]
 800bd00:	f003 0203 	and.w	r2, r3, #3
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800bd08:	4b0f      	ldr	r3, [pc, #60]	; (800bd48 <HAL_RCC_GetClockConfig+0x5c>)
 800bd0a:	689b      	ldr	r3, [r3, #8]
 800bd0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800bd14:	4b0c      	ldr	r3, [pc, #48]	; (800bd48 <HAL_RCC_GetClockConfig+0x5c>)
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800bd20:	4b09      	ldr	r3, [pc, #36]	; (800bd48 <HAL_RCC_GetClockConfig+0x5c>)
 800bd22:	689b      	ldr	r3, [r3, #8]
 800bd24:	08db      	lsrs	r3, r3, #3
 800bd26:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800bd2e:	4b07      	ldr	r3, [pc, #28]	; (800bd4c <HAL_RCC_GetClockConfig+0x60>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f003 020f 	and.w	r2, r3, #15
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	601a      	str	r2, [r3, #0]
}
 800bd3a:	bf00      	nop
 800bd3c:	370c      	adds	r7, #12
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd44:	4770      	bx	lr
 800bd46:	bf00      	nop
 800bd48:	40023800 	.word	0x40023800
 800bd4c:	40023c00 	.word	0x40023c00

0800bd50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b086      	sub	sp, #24
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f003 0301 	and.w	r3, r3, #1
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d10b      	bne.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d105      	bne.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d075      	beq.n	800be70 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800bd84:	4bad      	ldr	r3, [pc, #692]	; (800c03c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800bd86:	2200      	movs	r2, #0
 800bd88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bd8a:	f7fc fb0d 	bl	80083a8 <HAL_GetTick>
 800bd8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bd90:	e008      	b.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800bd92:	f7fc fb09 	bl	80083a8 <HAL_GetTick>
 800bd96:	4602      	mov	r2, r0
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	1ad3      	subs	r3, r2, r3
 800bd9c:	2b02      	cmp	r3, #2
 800bd9e:	d901      	bls.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bda0:	2303      	movs	r3, #3
 800bda2:	e18b      	b.n	800c0bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bda4:	4ba6      	ldr	r3, [pc, #664]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d1f0      	bne.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f003 0301 	and.w	r3, r3, #1
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d009      	beq.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	685b      	ldr	r3, [r3, #4]
 800bdc0:	019a      	lsls	r2, r3, #6
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	689b      	ldr	r3, [r3, #8]
 800bdc6:	071b      	lsls	r3, r3, #28
 800bdc8:	499d      	ldr	r1, [pc, #628]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f003 0302 	and.w	r3, r3, #2
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d01f      	beq.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bddc:	4b98      	ldr	r3, [pc, #608]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bdde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bde2:	0f1b      	lsrs	r3, r3, #28
 800bde4:	f003 0307 	and.w	r3, r3, #7
 800bde8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	685b      	ldr	r3, [r3, #4]
 800bdee:	019a      	lsls	r2, r3, #6
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	68db      	ldr	r3, [r3, #12]
 800bdf4:	061b      	lsls	r3, r3, #24
 800bdf6:	431a      	orrs	r2, r3
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	071b      	lsls	r3, r3, #28
 800bdfc:	4990      	ldr	r1, [pc, #576]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bdfe:	4313      	orrs	r3, r2
 800be00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800be04:	4b8e      	ldr	r3, [pc, #568]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800be06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be0a:	f023 021f 	bic.w	r2, r3, #31
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	69db      	ldr	r3, [r3, #28]
 800be12:	3b01      	subs	r3, #1
 800be14:	498a      	ldr	r1, [pc, #552]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800be16:	4313      	orrs	r3, r2
 800be18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be24:	2b00      	cmp	r3, #0
 800be26:	d00d      	beq.n	800be44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	019a      	lsls	r2, r3, #6
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	68db      	ldr	r3, [r3, #12]
 800be32:	061b      	lsls	r3, r3, #24
 800be34:	431a      	orrs	r2, r3
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	689b      	ldr	r3, [r3, #8]
 800be3a:	071b      	lsls	r3, r3, #28
 800be3c:	4980      	ldr	r1, [pc, #512]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800be3e:	4313      	orrs	r3, r2
 800be40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800be44:	4b7d      	ldr	r3, [pc, #500]	; (800c03c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800be46:	2201      	movs	r2, #1
 800be48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800be4a:	f7fc faad 	bl	80083a8 <HAL_GetTick>
 800be4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800be50:	e008      	b.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800be52:	f7fc faa9 	bl	80083a8 <HAL_GetTick>
 800be56:	4602      	mov	r2, r0
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	1ad3      	subs	r3, r2, r3
 800be5c:	2b02      	cmp	r3, #2
 800be5e:	d901      	bls.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800be60:	2303      	movs	r3, #3
 800be62:	e12b      	b.n	800c0bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800be64:	4b76      	ldr	r3, [pc, #472]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d0f0      	beq.n	800be52 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f003 0304 	and.w	r3, r3, #4
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d105      	bne.n	800be88 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800be84:	2b00      	cmp	r3, #0
 800be86:	d079      	beq.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800be88:	4b6e      	ldr	r3, [pc, #440]	; (800c044 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800be8a:	2200      	movs	r2, #0
 800be8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800be8e:	f7fc fa8b 	bl	80083a8 <HAL_GetTick>
 800be92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800be94:	e008      	b.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800be96:	f7fc fa87 	bl	80083a8 <HAL_GetTick>
 800be9a:	4602      	mov	r2, r0
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	1ad3      	subs	r3, r2, r3
 800bea0:	2b02      	cmp	r3, #2
 800bea2:	d901      	bls.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bea4:	2303      	movs	r3, #3
 800bea6:	e109      	b.n	800c0bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bea8:	4b65      	ldr	r3, [pc, #404]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800beb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800beb4:	d0ef      	beq.n	800be96 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f003 0304 	and.w	r3, r3, #4
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d020      	beq.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bec2:	4b5f      	ldr	r3, [pc, #380]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bec8:	0f1b      	lsrs	r3, r3, #28
 800beca:	f003 0307 	and.w	r3, r3, #7
 800bece:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	691b      	ldr	r3, [r3, #16]
 800bed4:	019a      	lsls	r2, r3, #6
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	695b      	ldr	r3, [r3, #20]
 800beda:	061b      	lsls	r3, r3, #24
 800bedc:	431a      	orrs	r2, r3
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	071b      	lsls	r3, r3, #28
 800bee2:	4957      	ldr	r1, [pc, #348]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bee4:	4313      	orrs	r3, r2
 800bee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800beea:	4b55      	ldr	r3, [pc, #340]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800beec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bef0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6a1b      	ldr	r3, [r3, #32]
 800bef8:	3b01      	subs	r3, #1
 800befa:	021b      	lsls	r3, r3, #8
 800befc:	4950      	ldr	r1, [pc, #320]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800befe:	4313      	orrs	r3, r2
 800bf00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f003 0308 	and.w	r3, r3, #8
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d01e      	beq.n	800bf4e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bf10:	4b4b      	ldr	r3, [pc, #300]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bf12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf16:	0e1b      	lsrs	r3, r3, #24
 800bf18:	f003 030f 	and.w	r3, r3, #15
 800bf1c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	691b      	ldr	r3, [r3, #16]
 800bf22:	019a      	lsls	r2, r3, #6
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	061b      	lsls	r3, r3, #24
 800bf28:	431a      	orrs	r2, r3
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	699b      	ldr	r3, [r3, #24]
 800bf2e:	071b      	lsls	r3, r3, #28
 800bf30:	4943      	ldr	r1, [pc, #268]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bf32:	4313      	orrs	r3, r2
 800bf34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800bf38:	4b41      	ldr	r3, [pc, #260]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bf3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf46:	493e      	ldr	r1, [pc, #248]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bf48:	4313      	orrs	r3, r2
 800bf4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800bf4e:	4b3d      	ldr	r3, [pc, #244]	; (800c044 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bf50:	2201      	movs	r2, #1
 800bf52:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bf54:	f7fc fa28 	bl	80083a8 <HAL_GetTick>
 800bf58:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bf5a:	e008      	b.n	800bf6e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800bf5c:	f7fc fa24 	bl	80083a8 <HAL_GetTick>
 800bf60:	4602      	mov	r2, r0
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	1ad3      	subs	r3, r2, r3
 800bf66:	2b02      	cmp	r3, #2
 800bf68:	d901      	bls.n	800bf6e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bf6a:	2303      	movs	r3, #3
 800bf6c:	e0a6      	b.n	800c0bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bf6e:	4b34      	ldr	r3, [pc, #208]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf7a:	d1ef      	bne.n	800bf5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f003 0320 	and.w	r3, r3, #32
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	f000 808d 	beq.w	800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	60fb      	str	r3, [r7, #12]
 800bf8e:	4b2c      	ldr	r3, [pc, #176]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bf90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf92:	4a2b      	ldr	r2, [pc, #172]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bf94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf98:	6413      	str	r3, [r2, #64]	; 0x40
 800bf9a:	4b29      	ldr	r3, [pc, #164]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bf9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bfa2:	60fb      	str	r3, [r7, #12]
 800bfa4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800bfa6:	4b28      	ldr	r3, [pc, #160]	; (800c048 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4a27      	ldr	r2, [pc, #156]	; (800c048 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800bfac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bfb0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bfb2:	f7fc f9f9 	bl	80083a8 <HAL_GetTick>
 800bfb6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800bfb8:	e008      	b.n	800bfcc <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800bfba:	f7fc f9f5 	bl	80083a8 <HAL_GetTick>
 800bfbe:	4602      	mov	r2, r0
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	1ad3      	subs	r3, r2, r3
 800bfc4:	2b02      	cmp	r3, #2
 800bfc6:	d901      	bls.n	800bfcc <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800bfc8:	2303      	movs	r3, #3
 800bfca:	e077      	b.n	800c0bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800bfcc:	4b1e      	ldr	r3, [pc, #120]	; (800c048 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d0f0      	beq.n	800bfba <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800bfd8:	4b19      	ldr	r3, [pc, #100]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bfda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bfe0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d039      	beq.n	800c05c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bff0:	693a      	ldr	r2, [r7, #16]
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d032      	beq.n	800c05c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bff6:	4b12      	ldr	r3, [pc, #72]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800bff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bffe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c000:	4b12      	ldr	r3, [pc, #72]	; (800c04c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800c002:	2201      	movs	r2, #1
 800c004:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c006:	4b11      	ldr	r3, [pc, #68]	; (800c04c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800c008:	2200      	movs	r2, #0
 800c00a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c00c:	4a0c      	ldr	r2, [pc, #48]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c012:	4b0b      	ldr	r3, [pc, #44]	; (800c040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c016:	f003 0301 	and.w	r3, r3, #1
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	d11e      	bne.n	800c05c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c01e:	f7fc f9c3 	bl	80083a8 <HAL_GetTick>
 800c022:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c024:	e014      	b.n	800c050 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c026:	f7fc f9bf 	bl	80083a8 <HAL_GetTick>
 800c02a:	4602      	mov	r2, r0
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	1ad3      	subs	r3, r2, r3
 800c030:	f241 3288 	movw	r2, #5000	; 0x1388
 800c034:	4293      	cmp	r3, r2
 800c036:	d90b      	bls.n	800c050 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800c038:	2303      	movs	r3, #3
 800c03a:	e03f      	b.n	800c0bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800c03c:	42470068 	.word	0x42470068
 800c040:	40023800 	.word	0x40023800
 800c044:	42470070 	.word	0x42470070
 800c048:	40007000 	.word	0x40007000
 800c04c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c050:	4b1c      	ldr	r3, [pc, #112]	; (800c0c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c054:	f003 0302 	and.w	r3, r3, #2
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d0e4      	beq.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c060:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c064:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c068:	d10d      	bne.n	800c086 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800c06a:	4b16      	ldr	r3, [pc, #88]	; (800c0c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c06c:	689b      	ldr	r3, [r3, #8]
 800c06e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c076:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c07a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c07e:	4911      	ldr	r1, [pc, #68]	; (800c0c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c080:	4313      	orrs	r3, r2
 800c082:	608b      	str	r3, [r1, #8]
 800c084:	e005      	b.n	800c092 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800c086:	4b0f      	ldr	r3, [pc, #60]	; (800c0c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c088:	689b      	ldr	r3, [r3, #8]
 800c08a:	4a0e      	ldr	r2, [pc, #56]	; (800c0c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c08c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c090:	6093      	str	r3, [r2, #8]
 800c092:	4b0c      	ldr	r3, [pc, #48]	; (800c0c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c094:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c09a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c09e:	4909      	ldr	r1, [pc, #36]	; (800c0c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c0a0:	4313      	orrs	r3, r2
 800c0a2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f003 0310 	and.w	r3, r3, #16
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d004      	beq.n	800c0ba <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800c0b6:	4b04      	ldr	r3, [pc, #16]	; (800c0c8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800c0b8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800c0ba:	2300      	movs	r3, #0
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3718      	adds	r7, #24
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}
 800c0c4:	40023800 	.word	0x40023800
 800c0c8:	424711e0 	.word	0x424711e0

0800c0cc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d101      	bne.n	800c0de <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800c0da:	2301      	movs	r3, #1
 800c0dc:	e083      	b.n	800c1e6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	7f5b      	ldrb	r3, [r3, #29]
 800c0e2:	b2db      	uxtb	r3, r3
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d105      	bne.n	800c0f4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f7f6 fd90 	bl	8002c14 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2202      	movs	r2, #2
 800c0f8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	22ca      	movs	r2, #202	; 0xca
 800c100:	625a      	str	r2, [r3, #36]	; 0x24
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	2253      	movs	r2, #83	; 0x53
 800c108:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f000 fc26 	bl	800c95c <RTC_EnterInitMode>
 800c110:	4603      	mov	r3, r0
 800c112:	2b00      	cmp	r3, #0
 800c114:	d008      	beq.n	800c128 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	22ff      	movs	r2, #255	; 0xff
 800c11c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2204      	movs	r2, #4
 800c122:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800c124:	2301      	movs	r3, #1
 800c126:	e05e      	b.n	800c1e6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	689b      	ldr	r3, [r3, #8]
 800c12e:	687a      	ldr	r2, [r7, #4]
 800c130:	6812      	ldr	r2, [r2, #0]
 800c132:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c13a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	6899      	ldr	r1, [r3, #8]
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	685a      	ldr	r2, [r3, #4]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	691b      	ldr	r3, [r3, #16]
 800c14a:	431a      	orrs	r2, r3
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	695b      	ldr	r3, [r3, #20]
 800c150:	431a      	orrs	r2, r3
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	430a      	orrs	r2, r1
 800c158:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	68d2      	ldr	r2, [r2, #12]
 800c162:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	6919      	ldr	r1, [r3, #16]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	689b      	ldr	r3, [r3, #8]
 800c16e:	041a      	lsls	r2, r3, #16
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	430a      	orrs	r2, r1
 800c176:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	68da      	ldr	r2, [r3, #12]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c186:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	689b      	ldr	r3, [r3, #8]
 800c18e:	f003 0320 	and.w	r3, r3, #32
 800c192:	2b00      	cmp	r3, #0
 800c194:	d10e      	bne.n	800c1b4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f000 fbb8 	bl	800c90c <HAL_RTC_WaitForSynchro>
 800c19c:	4603      	mov	r3, r0
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d008      	beq.n	800c1b4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	22ff      	movs	r2, #255	; 0xff
 800c1a8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2204      	movs	r2, #4
 800c1ae:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	e018      	b.n	800c1e6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c1c2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	699a      	ldr	r2, [r3, #24]
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	430a      	orrs	r2, r1
 800c1d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	22ff      	movs	r2, #255	; 0xff
 800c1dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2201      	movs	r2, #1
 800c1e2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800c1e4:	2300      	movs	r3, #0
  }
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3708      	adds	r7, #8
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}

0800c1ee <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c1ee:	b590      	push	{r4, r7, lr}
 800c1f0:	b087      	sub	sp, #28
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	60f8      	str	r0, [r7, #12]
 800c1f6:	60b9      	str	r1, [r7, #8]
 800c1f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	7f1b      	ldrb	r3, [r3, #28]
 800c202:	2b01      	cmp	r3, #1
 800c204:	d101      	bne.n	800c20a <HAL_RTC_SetTime+0x1c>
 800c206:	2302      	movs	r3, #2
 800c208:	e0aa      	b.n	800c360 <HAL_RTC_SetTime+0x172>
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2201      	movs	r2, #1
 800c20e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	2202      	movs	r2, #2
 800c214:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d126      	bne.n	800c26a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	689b      	ldr	r3, [r3, #8]
 800c222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c226:	2b00      	cmp	r3, #0
 800c228:	d102      	bne.n	800c230 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	2200      	movs	r2, #0
 800c22e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	781b      	ldrb	r3, [r3, #0]
 800c234:	4618      	mov	r0, r3
 800c236:	f000 fbbd 	bl	800c9b4 <RTC_ByteToBcd2>
 800c23a:	4603      	mov	r3, r0
 800c23c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	785b      	ldrb	r3, [r3, #1]
 800c242:	4618      	mov	r0, r3
 800c244:	f000 fbb6 	bl	800c9b4 <RTC_ByteToBcd2>
 800c248:	4603      	mov	r3, r0
 800c24a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c24c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	789b      	ldrb	r3, [r3, #2]
 800c252:	4618      	mov	r0, r3
 800c254:	f000 fbae 	bl	800c9b4 <RTC_ByteToBcd2>
 800c258:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c25a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	78db      	ldrb	r3, [r3, #3]
 800c262:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c264:	4313      	orrs	r3, r2
 800c266:	617b      	str	r3, [r7, #20]
 800c268:	e018      	b.n	800c29c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	689b      	ldr	r3, [r3, #8]
 800c270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c274:	2b00      	cmp	r3, #0
 800c276:	d102      	bne.n	800c27e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	2200      	movs	r2, #0
 800c27c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	785b      	ldrb	r3, [r3, #1]
 800c288:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c28a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800c28c:	68ba      	ldr	r2, [r7, #8]
 800c28e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c290:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	78db      	ldrb	r3, [r3, #3]
 800c296:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c298:	4313      	orrs	r3, r2
 800c29a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	22ca      	movs	r2, #202	; 0xca
 800c2a2:	625a      	str	r2, [r3, #36]	; 0x24
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	2253      	movs	r2, #83	; 0x53
 800c2aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c2ac:	68f8      	ldr	r0, [r7, #12]
 800c2ae:	f000 fb55 	bl	800c95c <RTC_EnterInitMode>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d00b      	beq.n	800c2d0 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	22ff      	movs	r2, #255	; 0xff
 800c2be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	2204      	movs	r2, #4
 800c2c4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	e047      	b.n	800c360 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681a      	ldr	r2, [r3, #0]
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c2da:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c2de:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	689a      	ldr	r2, [r3, #8]
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c2ee:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	6899      	ldr	r1, [r3, #8]
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	68da      	ldr	r2, [r3, #12]
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	691b      	ldr	r3, [r3, #16]
 800c2fe:	431a      	orrs	r2, r3
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	430a      	orrs	r2, r1
 800c306:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	68da      	ldr	r2, [r3, #12]
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c316:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	689b      	ldr	r3, [r3, #8]
 800c31e:	f003 0320 	and.w	r3, r3, #32
 800c322:	2b00      	cmp	r3, #0
 800c324:	d111      	bne.n	800c34a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c326:	68f8      	ldr	r0, [r7, #12]
 800c328:	f000 faf0 	bl	800c90c <HAL_RTC_WaitForSynchro>
 800c32c:	4603      	mov	r3, r0
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d00b      	beq.n	800c34a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	22ff      	movs	r2, #255	; 0xff
 800c338:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	2204      	movs	r2, #4
 800c33e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	2200      	movs	r2, #0
 800c344:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c346:	2301      	movs	r3, #1
 800c348:	e00a      	b.n	800c360 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	22ff      	movs	r2, #255	; 0xff
 800c350:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	2201      	movs	r2, #1
 800c356:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2200      	movs	r2, #0
 800c35c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800c35e:	2300      	movs	r3, #0
  }
}
 800c360:	4618      	mov	r0, r3
 800c362:	371c      	adds	r7, #28
 800c364:	46bd      	mov	sp, r7
 800c366:	bd90      	pop	{r4, r7, pc}

0800c368 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b086      	sub	sp, #24
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	60f8      	str	r0, [r7, #12]
 800c370:	60b9      	str	r1, [r7, #8]
 800c372:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c374:	2300      	movs	r3, #0
 800c376:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	691b      	ldr	r3, [r3, #16]
 800c388:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c39a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c39e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	0c1b      	lsrs	r3, r3, #16
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c3aa:	b2da      	uxtb	r2, r3
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	0a1b      	lsrs	r3, r3, #8
 800c3b4:	b2db      	uxtb	r3, r3
 800c3b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3ba:	b2da      	uxtb	r2, r3
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	b2db      	uxtb	r3, r3
 800c3c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3c8:	b2da      	uxtb	r2, r3
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	0c1b      	lsrs	r3, r3, #16
 800c3d2:	b2db      	uxtb	r3, r3
 800c3d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3d8:	b2da      	uxtb	r2, r3
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d11a      	bne.n	800c41a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f000 fb01 	bl	800c9f0 <RTC_Bcd2ToByte>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	785b      	ldrb	r3, [r3, #1]
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f000 faf8 	bl	800c9f0 <RTC_Bcd2ToByte>
 800c400:	4603      	mov	r3, r0
 800c402:	461a      	mov	r2, r3
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	789b      	ldrb	r3, [r3, #2]
 800c40c:	4618      	mov	r0, r3
 800c40e:	f000 faef 	bl	800c9f0 <RTC_Bcd2ToByte>
 800c412:	4603      	mov	r3, r0
 800c414:	461a      	mov	r2, r3
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c41a:	2300      	movs	r3, #0
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3718      	adds	r7, #24
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}

0800c424 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c424:	b590      	push	{r4, r7, lr}
 800c426:	b087      	sub	sp, #28
 800c428:	af00      	add	r7, sp, #0
 800c42a:	60f8      	str	r0, [r7, #12]
 800c42c:	60b9      	str	r1, [r7, #8]
 800c42e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c430:	2300      	movs	r3, #0
 800c432:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	7f1b      	ldrb	r3, [r3, #28]
 800c438:	2b01      	cmp	r3, #1
 800c43a:	d101      	bne.n	800c440 <HAL_RTC_SetDate+0x1c>
 800c43c:	2302      	movs	r3, #2
 800c43e:	e094      	b.n	800c56a <HAL_RTC_SetDate+0x146>
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2201      	movs	r2, #1
 800c444:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2202      	movs	r2, #2
 800c44a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d10e      	bne.n	800c470 <HAL_RTC_SetDate+0x4c>
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	785b      	ldrb	r3, [r3, #1]
 800c456:	f003 0310 	and.w	r3, r3, #16
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d008      	beq.n	800c470 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	785b      	ldrb	r3, [r3, #1]
 800c462:	f023 0310 	bic.w	r3, r3, #16
 800c466:	b2db      	uxtb	r3, r3
 800c468:	330a      	adds	r3, #10
 800c46a:	b2da      	uxtb	r2, r3
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d11c      	bne.n	800c4b0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	78db      	ldrb	r3, [r3, #3]
 800c47a:	4618      	mov	r0, r3
 800c47c:	f000 fa9a 	bl	800c9b4 <RTC_ByteToBcd2>
 800c480:	4603      	mov	r3, r0
 800c482:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	785b      	ldrb	r3, [r3, #1]
 800c488:	4618      	mov	r0, r3
 800c48a:	f000 fa93 	bl	800c9b4 <RTC_ByteToBcd2>
 800c48e:	4603      	mov	r3, r0
 800c490:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c492:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	789b      	ldrb	r3, [r3, #2]
 800c498:	4618      	mov	r0, r3
 800c49a:	f000 fa8b 	bl	800c9b4 <RTC_ByteToBcd2>
 800c49e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c4a0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	781b      	ldrb	r3, [r3, #0]
 800c4a8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	617b      	str	r3, [r7, #20]
 800c4ae:	e00e      	b.n	800c4ce <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	78db      	ldrb	r3, [r3, #3]
 800c4b4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	785b      	ldrb	r3, [r3, #1]
 800c4ba:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c4bc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800c4be:	68ba      	ldr	r2, [r7, #8]
 800c4c0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800c4c2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	781b      	ldrb	r3, [r3, #0]
 800c4c8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c4ca:	4313      	orrs	r3, r2
 800c4cc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	22ca      	movs	r2, #202	; 0xca
 800c4d4:	625a      	str	r2, [r3, #36]	; 0x24
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	2253      	movs	r2, #83	; 0x53
 800c4dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c4de:	68f8      	ldr	r0, [r7, #12]
 800c4e0:	f000 fa3c 	bl	800c95c <RTC_EnterInitMode>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d00b      	beq.n	800c502 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	22ff      	movs	r2, #255	; 0xff
 800c4f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2204      	movs	r2, #4
 800c4f6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800c4fe:	2301      	movs	r3, #1
 800c500:	e033      	b.n	800c56a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681a      	ldr	r2, [r3, #0]
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c50c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c510:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	68da      	ldr	r2, [r3, #12]
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c520:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	689b      	ldr	r3, [r3, #8]
 800c528:	f003 0320 	and.w	r3, r3, #32
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d111      	bne.n	800c554 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c530:	68f8      	ldr	r0, [r7, #12]
 800c532:	f000 f9eb 	bl	800c90c <HAL_RTC_WaitForSynchro>
 800c536:	4603      	mov	r3, r0
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d00b      	beq.n	800c554 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	22ff      	movs	r2, #255	; 0xff
 800c542:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	2204      	movs	r2, #4
 800c548:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	2200      	movs	r2, #0
 800c54e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c550:	2301      	movs	r3, #1
 800c552:	e00a      	b.n	800c56a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	22ff      	movs	r2, #255	; 0xff
 800c55a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2201      	movs	r2, #1
 800c560:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	2200      	movs	r2, #0
 800c566:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800c568:	2300      	movs	r3, #0
  }
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	371c      	adds	r7, #28
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd90      	pop	{r4, r7, pc}

0800c572 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c572:	b580      	push	{r7, lr}
 800c574:	b086      	sub	sp, #24
 800c576:	af00      	add	r7, sp, #0
 800c578:	60f8      	str	r0, [r7, #12]
 800c57a:	60b9      	str	r1, [r7, #8]
 800c57c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c57e:	2300      	movs	r3, #0
 800c580:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	685b      	ldr	r3, [r3, #4]
 800c588:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c58c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c590:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800c592:	697b      	ldr	r3, [r7, #20]
 800c594:	0c1b      	lsrs	r3, r3, #16
 800c596:	b2da      	uxtb	r2, r3
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	0a1b      	lsrs	r3, r3, #8
 800c5a0:	b2db      	uxtb	r3, r3
 800c5a2:	f003 031f 	and.w	r3, r3, #31
 800c5a6:	b2da      	uxtb	r2, r3
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	b2db      	uxtb	r3, r3
 800c5b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c5b4:	b2da      	uxtb	r2, r3
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	0b5b      	lsrs	r3, r3, #13
 800c5be:	b2db      	uxtb	r3, r3
 800c5c0:	f003 0307 	and.w	r3, r3, #7
 800c5c4:	b2da      	uxtb	r2, r3
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d11a      	bne.n	800c606 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	78db      	ldrb	r3, [r3, #3]
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f000 fa0b 	bl	800c9f0 <RTC_Bcd2ToByte>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	461a      	mov	r2, r3
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	785b      	ldrb	r3, [r3, #1]
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f000 fa02 	bl	800c9f0 <RTC_Bcd2ToByte>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	789b      	ldrb	r3, [r3, #2]
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f000 f9f9 	bl	800c9f0 <RTC_Bcd2ToByte>
 800c5fe:	4603      	mov	r3, r0
 800c600:	461a      	mov	r2, r3
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c606:	2300      	movs	r3, #0
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3718      	adds	r7, #24
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800c610:	b590      	push	{r4, r7, lr}
 800c612:	b089      	sub	sp, #36	; 0x24
 800c614:	af00      	add	r7, sp, #0
 800c616:	60f8      	str	r0, [r7, #12]
 800c618:	60b9      	str	r1, [r7, #8]
 800c61a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800c61c:	2300      	movs	r3, #0
 800c61e:	61fb      	str	r3, [r7, #28]
 800c620:	2300      	movs	r3, #0
 800c622:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800c624:	4b93      	ldr	r3, [pc, #588]	; (800c874 <HAL_RTC_SetAlarm_IT+0x264>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	4a93      	ldr	r2, [pc, #588]	; (800c878 <HAL_RTC_SetAlarm_IT+0x268>)
 800c62a:	fba2 2303 	umull	r2, r3, r2, r3
 800c62e:	0adb      	lsrs	r3, r3, #11
 800c630:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c634:	fb02 f303 	mul.w	r3, r2, r3
 800c638:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	7f1b      	ldrb	r3, [r3, #28]
 800c63e:	2b01      	cmp	r3, #1
 800c640:	d101      	bne.n	800c646 <HAL_RTC_SetAlarm_IT+0x36>
 800c642:	2302      	movs	r3, #2
 800c644:	e111      	b.n	800c86a <HAL_RTC_SetAlarm_IT+0x25a>
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	2201      	movs	r2, #1
 800c64a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2202      	movs	r2, #2
 800c650:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d137      	bne.n	800c6c8 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	689b      	ldr	r3, [r3, #8]
 800c65e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c662:	2b00      	cmp	r3, #0
 800c664:	d102      	bne.n	800c66c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	2200      	movs	r2, #0
 800c66a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	4618      	mov	r0, r3
 800c672:	f000 f99f 	bl	800c9b4 <RTC_ByteToBcd2>
 800c676:	4603      	mov	r3, r0
 800c678:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	785b      	ldrb	r3, [r3, #1]
 800c67e:	4618      	mov	r0, r3
 800c680:	f000 f998 	bl	800c9b4 <RTC_ByteToBcd2>
 800c684:	4603      	mov	r3, r0
 800c686:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800c688:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	789b      	ldrb	r3, [r3, #2]
 800c68e:	4618      	mov	r0, r3
 800c690:	f000 f990 	bl	800c9b4 <RTC_ByteToBcd2>
 800c694:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c696:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	78db      	ldrb	r3, [r3, #3]
 800c69e:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800c6a0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f000 f982 	bl	800c9b4 <RTC_ByteToBcd2>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c6b4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c6bc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800c6c2:	4313      	orrs	r3, r2
 800c6c4:	61fb      	str	r3, [r7, #28]
 800c6c6:	e023      	b.n	800c710 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	689b      	ldr	r3, [r3, #8]
 800c6ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d102      	bne.n	800c6dc <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	781b      	ldrb	r3, [r3, #0]
 800c6e0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	785b      	ldrb	r3, [r3, #1]
 800c6e6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800c6e8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800c6ea:	68ba      	ldr	r2, [r7, #8]
 800c6ec:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c6ee:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	78db      	ldrb	r3, [r3, #3]
 800c6f4:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800c6f6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c6fe:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c700:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c706:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800c70c:	4313      	orrs	r3, r2
 800c70e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	685a      	ldr	r2, [r3, #4]
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	699b      	ldr	r3, [r3, #24]
 800c718:	4313      	orrs	r3, r2
 800c71a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	22ca      	movs	r2, #202	; 0xca
 800c722:	625a      	str	r2, [r3, #36]	; 0x24
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	2253      	movs	r2, #83	; 0x53
 800c72a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c730:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c734:	d141      	bne.n	800c7ba <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	689a      	ldr	r2, [r3, #8]
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c744:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	68db      	ldr	r3, [r3, #12]
 800c74c:	b2da      	uxtb	r2, r3
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800c756:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	1e5a      	subs	r2, r3, #1
 800c75c:	617a      	str	r2, [r7, #20]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d10b      	bne.n	800c77a <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	22ff      	movs	r2, #255	; 0xff
 800c768:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	2203      	movs	r2, #3
 800c76e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	2200      	movs	r2, #0
 800c774:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c776:	2303      	movs	r3, #3
 800c778:	e077      	b.n	800c86a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	68db      	ldr	r3, [r3, #12]
 800c780:	f003 0301 	and.w	r3, r3, #1
 800c784:	2b00      	cmp	r3, #0
 800c786:	d0e7      	beq.n	800c758 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	69fa      	ldr	r2, [r7, #28]
 800c78e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	69ba      	ldr	r2, [r7, #24]
 800c796:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	689a      	ldr	r2, [r3, #8]
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c7a6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	689a      	ldr	r2, [r3, #8]
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c7b6:	609a      	str	r2, [r3, #8]
 800c7b8:	e040      	b.n	800c83c <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	689a      	ldr	r2, [r3, #8]
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c7c8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	68db      	ldr	r3, [r3, #12]
 800c7d0:	b2da      	uxtb	r2, r3
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f462 7220 	orn	r2, r2, #640	; 0x280
 800c7da:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	1e5a      	subs	r2, r3, #1
 800c7e0:	617a      	str	r2, [r7, #20]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d10b      	bne.n	800c7fe <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	22ff      	movs	r2, #255	; 0xff
 800c7ec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	2203      	movs	r2, #3
 800c7f2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c7fa:	2303      	movs	r3, #3
 800c7fc:	e035      	b.n	800c86a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	68db      	ldr	r3, [r3, #12]
 800c804:	f003 0302 	and.w	r3, r3, #2
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d0e7      	beq.n	800c7dc <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	69fa      	ldr	r2, [r7, #28]
 800c812:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	69ba      	ldr	r2, [r7, #24]
 800c81a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	689a      	ldr	r2, [r3, #8]
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c82a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	689a      	ldr	r2, [r3, #8]
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c83a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800c83c:	4b0f      	ldr	r3, [pc, #60]	; (800c87c <HAL_RTC_SetAlarm_IT+0x26c>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4a0e      	ldr	r2, [pc, #56]	; (800c87c <HAL_RTC_SetAlarm_IT+0x26c>)
 800c842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c846:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800c848:	4b0c      	ldr	r3, [pc, #48]	; (800c87c <HAL_RTC_SetAlarm_IT+0x26c>)
 800c84a:	689b      	ldr	r3, [r3, #8]
 800c84c:	4a0b      	ldr	r2, [pc, #44]	; (800c87c <HAL_RTC_SetAlarm_IT+0x26c>)
 800c84e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c852:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	22ff      	movs	r2, #255	; 0xff
 800c85a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	2201      	movs	r2, #1
 800c860:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	2200      	movs	r2, #0
 800c866:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c868:	2300      	movs	r3, #0
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3724      	adds	r7, #36	; 0x24
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd90      	pop	{r4, r7, pc}
 800c872:	bf00      	nop
 800c874:	20000000 	.word	0x20000000
 800c878:	10624dd3 	.word	0x10624dd3
 800c87c:	40013c00 	.word	0x40013c00

0800c880 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b082      	sub	sp, #8
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	689b      	ldr	r3, [r3, #8]
 800c88e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c892:	2b00      	cmp	r3, #0
 800c894:	d012      	beq.n	800c8bc <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	68db      	ldr	r3, [r3, #12]
 800c89c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d00b      	beq.n	800c8bc <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f7fb f88d 	bl	80079c4 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	68db      	ldr	r3, [r3, #12]
 800c8b0:	b2da      	uxtb	r2, r3
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800c8ba:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	689b      	ldr	r3, [r3, #8]
 800c8c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d012      	beq.n	800c8f0 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	68db      	ldr	r3, [r3, #12]
 800c8d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d00b      	beq.n	800c8f0 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f000 f9bf 	bl	800cc5c <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	68db      	ldr	r3, [r3, #12]
 800c8e4:	b2da      	uxtb	r2, r3
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f462 7220 	orn	r2, r2, #640	; 0x280
 800c8ee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800c8f0:	4b05      	ldr	r3, [pc, #20]	; (800c908 <HAL_RTC_AlarmIRQHandler+0x88>)
 800c8f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c8f6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	775a      	strb	r2, [r3, #29]
}
 800c8fe:	bf00      	nop
 800c900:	3708      	adds	r7, #8
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
 800c906:	bf00      	nop
 800c908:	40013c00 	.word	0x40013c00

0800c90c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b084      	sub	sp, #16
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c914:	2300      	movs	r3, #0
 800c916:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	68da      	ldr	r2, [r3, #12]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c926:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c928:	f7fb fd3e 	bl	80083a8 <HAL_GetTick>
 800c92c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c92e:	e009      	b.n	800c944 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c930:	f7fb fd3a 	bl	80083a8 <HAL_GetTick>
 800c934:	4602      	mov	r2, r0
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	1ad3      	subs	r3, r2, r3
 800c93a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c93e:	d901      	bls.n	800c944 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800c940:	2303      	movs	r3, #3
 800c942:	e007      	b.n	800c954 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	68db      	ldr	r3, [r3, #12]
 800c94a:	f003 0320 	and.w	r3, r3, #32
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d0ee      	beq.n	800c930 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800c952:	2300      	movs	r3, #0
}
 800c954:	4618      	mov	r0, r3
 800c956:	3710      	adds	r7, #16
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}

0800c95c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b084      	sub	sp, #16
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c964:	2300      	movs	r3, #0
 800c966:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	68db      	ldr	r3, [r3, #12]
 800c96e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c972:	2b00      	cmp	r3, #0
 800c974:	d119      	bne.n	800c9aa <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f04f 32ff 	mov.w	r2, #4294967295
 800c97e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c980:	f7fb fd12 	bl	80083a8 <HAL_GetTick>
 800c984:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c986:	e009      	b.n	800c99c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c988:	f7fb fd0e 	bl	80083a8 <HAL_GetTick>
 800c98c:	4602      	mov	r2, r0
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	1ad3      	subs	r3, r2, r3
 800c992:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c996:	d901      	bls.n	800c99c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800c998:	2303      	movs	r3, #3
 800c99a:	e007      	b.n	800c9ac <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	68db      	ldr	r3, [r3, #12]
 800c9a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d0ee      	beq.n	800c988 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800c9aa:	2300      	movs	r3, #0
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3710      	adds	r7, #16
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}

0800c9b4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b085      	sub	sp, #20
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800c9c2:	e005      	b.n	800c9d0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800c9ca:	79fb      	ldrb	r3, [r7, #7]
 800c9cc:	3b0a      	subs	r3, #10
 800c9ce:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800c9d0:	79fb      	ldrb	r3, [r7, #7]
 800c9d2:	2b09      	cmp	r3, #9
 800c9d4:	d8f6      	bhi.n	800c9c4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	b2db      	uxtb	r3, r3
 800c9da:	011b      	lsls	r3, r3, #4
 800c9dc:	b2da      	uxtb	r2, r3
 800c9de:	79fb      	ldrb	r3, [r7, #7]
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	b2db      	uxtb	r3, r3
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3714      	adds	r7, #20
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr

0800c9f0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b085      	sub	sp, #20
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800c9fe:	79fb      	ldrb	r3, [r7, #7]
 800ca00:	091b      	lsrs	r3, r3, #4
 800ca02:	b2db      	uxtb	r3, r3
 800ca04:	461a      	mov	r2, r3
 800ca06:	4613      	mov	r3, r2
 800ca08:	009b      	lsls	r3, r3, #2
 800ca0a:	4413      	add	r3, r2
 800ca0c:	005b      	lsls	r3, r3, #1
 800ca0e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800ca10:	79fb      	ldrb	r3, [r7, #7]
 800ca12:	f003 030f 	and.w	r3, r3, #15
 800ca16:	b2da      	uxtb	r2, r3
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	b2db      	uxtb	r3, r3
 800ca1c:	4413      	add	r3, r2
 800ca1e:	b2db      	uxtb	r3, r3
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3714      	adds	r7, #20
 800ca24:	46bd      	mov	sp, r7
 800ca26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2a:	4770      	bx	lr

0800ca2c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b087      	sub	sp, #28
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	60f8      	str	r0, [r7, #12]
 800ca34:	60b9      	str	r1, [r7, #8]
 800ca36:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	7f1b      	ldrb	r3, [r3, #28]
 800ca3c:	2b01      	cmp	r3, #1
 800ca3e:	d101      	bne.n	800ca44 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 800ca40:	2302      	movs	r3, #2
 800ca42:	e0a6      	b.n	800cb92 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2201      	movs	r2, #1
 800ca48:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2202      	movs	r2, #2
 800ca4e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	22ca      	movs	r2, #202	; 0xca
 800ca56:	625a      	str	r2, [r3, #36]	; 0x24
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	2253      	movs	r2, #83	; 0x53
 800ca5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	689b      	ldr	r3, [r3, #8]
 800ca66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d022      	beq.n	800cab4 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800ca6e:	4b4c      	ldr	r3, [pc, #304]	; (800cba0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	4a4c      	ldr	r2, [pc, #304]	; (800cba4 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800ca74:	fba2 2303 	umull	r2, r3, r2, r3
 800ca78:	0adb      	lsrs	r3, r3, #11
 800ca7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ca7e:	fb02 f303 	mul.w	r3, r2, r3
 800ca82:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	1e5a      	subs	r2, r3, #1
 800ca88:	617a      	str	r2, [r7, #20]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d10b      	bne.n	800caa6 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	22ff      	movs	r2, #255	; 0xff
 800ca94:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	2203      	movs	r2, #3
 800ca9a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800caa2:	2303      	movs	r3, #3
 800caa4:	e075      	b.n	800cb92 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	68db      	ldr	r3, [r3, #12]
 800caac:	f003 0304 	and.w	r3, r3, #4
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d1e7      	bne.n	800ca84 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	689a      	ldr	r2, [r3, #8]
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cac2:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800cac4:	4b36      	ldr	r3, [pc, #216]	; (800cba0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	4a36      	ldr	r2, [pc, #216]	; (800cba4 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800caca:	fba2 2303 	umull	r2, r3, r2, r3
 800cace:	0adb      	lsrs	r3, r3, #11
 800cad0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cad4:	fb02 f303 	mul.w	r3, r2, r3
 800cad8:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	1e5a      	subs	r2, r3, #1
 800cade:	617a      	str	r2, [r7, #20]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d10b      	bne.n	800cafc <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	22ff      	movs	r2, #255	; 0xff
 800caea:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	2203      	movs	r2, #3
 800caf0:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	2200      	movs	r2, #0
 800caf6:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800caf8:	2303      	movs	r3, #3
 800cafa:	e04a      	b.n	800cb92 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	68db      	ldr	r3, [r3, #12]
 800cb02:	f003 0304 	and.w	r3, r3, #4
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d0e7      	beq.n	800cada <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	68ba      	ldr	r2, [r7, #8]
 800cb10:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	689a      	ldr	r2, [r3, #8]
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f022 0207 	bic.w	r2, r2, #7
 800cb20:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	6899      	ldr	r1, [r3, #8]
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	687a      	ldr	r2, [r7, #4]
 800cb2e:	430a      	orrs	r2, r1
 800cb30:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800cb32:	4b1d      	ldr	r3, [pc, #116]	; (800cba8 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	4a1c      	ldr	r2, [pc, #112]	; (800cba8 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800cb38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cb3c:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800cb3e:	4b1a      	ldr	r3, [pc, #104]	; (800cba8 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800cb40:	689b      	ldr	r3, [r3, #8]
 800cb42:	4a19      	ldr	r2, [pc, #100]	; (800cba8 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800cb44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cb48:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	68db      	ldr	r3, [r3, #12]
 800cb50:	b2da      	uxtb	r2, r3
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800cb5a:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	689a      	ldr	r2, [r3, #8]
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cb6a:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	689a      	ldr	r2, [r3, #8]
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cb7a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	22ff      	movs	r2, #255	; 0xff
 800cb82:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	2201      	movs	r2, #1
 800cb88:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800cb90:	2300      	movs	r3, #0
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	371c      	adds	r7, #28
 800cb96:	46bd      	mov	sp, r7
 800cb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9c:	4770      	bx	lr
 800cb9e:	bf00      	nop
 800cba0:	20000000 	.word	0x20000000
 800cba4:	10624dd3 	.word	0x10624dd3
 800cba8:	40013c00 	.word	0x40013c00

0800cbac <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b084      	sub	sp, #16
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	7f1b      	ldrb	r3, [r3, #28]
 800cbbc:	2b01      	cmp	r3, #1
 800cbbe:	d101      	bne.n	800cbc4 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 800cbc0:	2302      	movs	r3, #2
 800cbc2:	e047      	b.n	800cc54 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2201      	movs	r2, #1
 800cbc8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2202      	movs	r2, #2
 800cbce:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	22ca      	movs	r2, #202	; 0xca
 800cbd6:	625a      	str	r2, [r3, #36]	; 0x24
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	2253      	movs	r2, #83	; 0x53
 800cbde:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	689a      	ldr	r2, [r3, #8]
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cbee:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	689a      	ldr	r2, [r3, #8]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cbfe:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cc00:	f7fb fbd2 	bl	80083a8 <HAL_GetTick>
 800cc04:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800cc06:	e013      	b.n	800cc30 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800cc08:	f7fb fbce 	bl	80083a8 <HAL_GetTick>
 800cc0c:	4602      	mov	r2, r0
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	1ad3      	subs	r3, r2, r3
 800cc12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cc16:	d90b      	bls.n	800cc30 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	22ff      	movs	r2, #255	; 0xff
 800cc1e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2203      	movs	r2, #3
 800cc24:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800cc2c:	2303      	movs	r3, #3
 800cc2e:	e011      	b.n	800cc54 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	68db      	ldr	r3, [r3, #12]
 800cc36:	f003 0304 	and.w	r3, r3, #4
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d0e4      	beq.n	800cc08 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	22ff      	movs	r2, #255	; 0xff
 800cc44:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2201      	movs	r2, #1
 800cc4a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800cc52:	2300      	movs	r3, #0
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3710      	adds	r7, #16
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}

0800cc5c <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	b083      	sub	sp, #12
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 800cc64:	bf00      	nop
 800cc66:	370c      	adds	r7, #12
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6e:	4770      	bx	lr

0800cc70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b082      	sub	sp, #8
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d101      	bne.n	800cc82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cc7e:	2301      	movs	r3, #1
 800cc80:	e07b      	b.n	800cd7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d108      	bne.n	800cc9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cc92:	d009      	beq.n	800cca8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2200      	movs	r2, #0
 800cc98:	61da      	str	r2, [r3, #28]
 800cc9a:	e005      	b.n	800cca8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2200      	movs	r2, #0
 800cca6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ccb4:	b2db      	uxtb	r3, r3
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d106      	bne.n	800ccc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f7f5 ffd8 	bl	8002c78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2202      	movs	r2, #2
 800cccc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	681a      	ldr	r2, [r3, #0]
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ccde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	689b      	ldr	r3, [r3, #8]
 800ccec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ccf0:	431a      	orrs	r2, r3
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	68db      	ldr	r3, [r3, #12]
 800ccf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ccfa:	431a      	orrs	r2, r3
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	691b      	ldr	r3, [r3, #16]
 800cd00:	f003 0302 	and.w	r3, r3, #2
 800cd04:	431a      	orrs	r2, r3
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	695b      	ldr	r3, [r3, #20]
 800cd0a:	f003 0301 	and.w	r3, r3, #1
 800cd0e:	431a      	orrs	r2, r3
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	699b      	ldr	r3, [r3, #24]
 800cd14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cd18:	431a      	orrs	r2, r3
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	69db      	ldr	r3, [r3, #28]
 800cd1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cd22:	431a      	orrs	r2, r3
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	6a1b      	ldr	r3, [r3, #32]
 800cd28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd2c:	ea42 0103 	orr.w	r1, r2, r3
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	430a      	orrs	r2, r1
 800cd3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	699b      	ldr	r3, [r3, #24]
 800cd44:	0c1b      	lsrs	r3, r3, #16
 800cd46:	f003 0104 	and.w	r1, r3, #4
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd4e:	f003 0210 	and.w	r2, r3, #16
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	430a      	orrs	r2, r1
 800cd58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	69da      	ldr	r2, [r3, #28]
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cd68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2201      	movs	r2, #1
 800cd74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800cd78:	2300      	movs	r3, #0
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3708      	adds	r7, #8
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}

0800cd82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cd82:	b580      	push	{r7, lr}
 800cd84:	b088      	sub	sp, #32
 800cd86:	af00      	add	r7, sp, #0
 800cd88:	60f8      	str	r0, [r7, #12]
 800cd8a:	60b9      	str	r1, [r7, #8]
 800cd8c:	603b      	str	r3, [r7, #0]
 800cd8e:	4613      	mov	r3, r2
 800cd90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cd92:	2300      	movs	r3, #0
 800cd94:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	d101      	bne.n	800cda4 <HAL_SPI_Transmit+0x22>
 800cda0:	2302      	movs	r3, #2
 800cda2:	e126      	b.n	800cff2 <HAL_SPI_Transmit+0x270>
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	2201      	movs	r2, #1
 800cda8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cdac:	f7fb fafc 	bl	80083a8 <HAL_GetTick>
 800cdb0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800cdb2:	88fb      	ldrh	r3, [r7, #6]
 800cdb4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cdbc:	b2db      	uxtb	r3, r3
 800cdbe:	2b01      	cmp	r3, #1
 800cdc0:	d002      	beq.n	800cdc8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800cdc2:	2302      	movs	r3, #2
 800cdc4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800cdc6:	e10b      	b.n	800cfe0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d002      	beq.n	800cdd4 <HAL_SPI_Transmit+0x52>
 800cdce:	88fb      	ldrh	r3, [r7, #6]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d102      	bne.n	800cdda <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800cdd8:	e102      	b.n	800cfe0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	2203      	movs	r2, #3
 800cdde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	2200      	movs	r2, #0
 800cde6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	68ba      	ldr	r2, [r7, #8]
 800cdec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	88fa      	ldrh	r2, [r7, #6]
 800cdf2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	88fa      	ldrh	r2, [r7, #6]
 800cdf8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	2200      	movs	r2, #0
 800ce04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	2200      	movs	r2, #0
 800ce0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	2200      	movs	r2, #0
 800ce16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	689b      	ldr	r3, [r3, #8]
 800ce1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce20:	d10f      	bne.n	800ce42 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	681a      	ldr	r2, [r3, #0]
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ce30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	681a      	ldr	r2, [r3, #0]
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ce40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce4c:	2b40      	cmp	r3, #64	; 0x40
 800ce4e:	d007      	beq.n	800ce60 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	681a      	ldr	r2, [r3, #0]
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ce5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	68db      	ldr	r3, [r3, #12]
 800ce64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce68:	d14b      	bne.n	800cf02 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	685b      	ldr	r3, [r3, #4]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d002      	beq.n	800ce78 <HAL_SPI_Transmit+0xf6>
 800ce72:	8afb      	ldrh	r3, [r7, #22]
 800ce74:	2b01      	cmp	r3, #1
 800ce76:	d13e      	bne.n	800cef6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce7c:	881a      	ldrh	r2, [r3, #0]
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce88:	1c9a      	adds	r2, r3, #2
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ce92:	b29b      	uxth	r3, r3
 800ce94:	3b01      	subs	r3, #1
 800ce96:	b29a      	uxth	r2, r3
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ce9c:	e02b      	b.n	800cef6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	689b      	ldr	r3, [r3, #8]
 800cea4:	f003 0302 	and.w	r3, r3, #2
 800cea8:	2b02      	cmp	r3, #2
 800ceaa:	d112      	bne.n	800ced2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceb0:	881a      	ldrh	r2, [r3, #0]
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cebc:	1c9a      	adds	r2, r3, #2
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cec6:	b29b      	uxth	r3, r3
 800cec8:	3b01      	subs	r3, #1
 800ceca:	b29a      	uxth	r2, r3
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	86da      	strh	r2, [r3, #54]	; 0x36
 800ced0:	e011      	b.n	800cef6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ced2:	f7fb fa69 	bl	80083a8 <HAL_GetTick>
 800ced6:	4602      	mov	r2, r0
 800ced8:	69bb      	ldr	r3, [r7, #24]
 800ceda:	1ad3      	subs	r3, r2, r3
 800cedc:	683a      	ldr	r2, [r7, #0]
 800cede:	429a      	cmp	r2, r3
 800cee0:	d803      	bhi.n	800ceea <HAL_SPI_Transmit+0x168>
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cee8:	d102      	bne.n	800cef0 <HAL_SPI_Transmit+0x16e>
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d102      	bne.n	800cef6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800cef0:	2303      	movs	r3, #3
 800cef2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800cef4:	e074      	b.n	800cfe0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cefa:	b29b      	uxth	r3, r3
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d1ce      	bne.n	800ce9e <HAL_SPI_Transmit+0x11c>
 800cf00:	e04c      	b.n	800cf9c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	685b      	ldr	r3, [r3, #4]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d002      	beq.n	800cf10 <HAL_SPI_Transmit+0x18e>
 800cf0a:	8afb      	ldrh	r3, [r7, #22]
 800cf0c:	2b01      	cmp	r3, #1
 800cf0e:	d140      	bne.n	800cf92 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	330c      	adds	r3, #12
 800cf1a:	7812      	ldrb	r2, [r2, #0]
 800cf1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf22:	1c5a      	adds	r2, r3, #1
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cf2c:	b29b      	uxth	r3, r3
 800cf2e:	3b01      	subs	r3, #1
 800cf30:	b29a      	uxth	r2, r3
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800cf36:	e02c      	b.n	800cf92 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	689b      	ldr	r3, [r3, #8]
 800cf3e:	f003 0302 	and.w	r3, r3, #2
 800cf42:	2b02      	cmp	r3, #2
 800cf44:	d113      	bne.n	800cf6e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	330c      	adds	r3, #12
 800cf50:	7812      	ldrb	r2, [r2, #0]
 800cf52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf58:	1c5a      	adds	r2, r3, #1
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cf62:	b29b      	uxth	r3, r3
 800cf64:	3b01      	subs	r3, #1
 800cf66:	b29a      	uxth	r2, r3
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	86da      	strh	r2, [r3, #54]	; 0x36
 800cf6c:	e011      	b.n	800cf92 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cf6e:	f7fb fa1b 	bl	80083a8 <HAL_GetTick>
 800cf72:	4602      	mov	r2, r0
 800cf74:	69bb      	ldr	r3, [r7, #24]
 800cf76:	1ad3      	subs	r3, r2, r3
 800cf78:	683a      	ldr	r2, [r7, #0]
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d803      	bhi.n	800cf86 <HAL_SPI_Transmit+0x204>
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf84:	d102      	bne.n	800cf8c <HAL_SPI_Transmit+0x20a>
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d102      	bne.n	800cf92 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800cf8c:	2303      	movs	r3, #3
 800cf8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800cf90:	e026      	b.n	800cfe0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cf96:	b29b      	uxth	r3, r3
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d1cd      	bne.n	800cf38 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cf9c:	69ba      	ldr	r2, [r7, #24]
 800cf9e:	6839      	ldr	r1, [r7, #0]
 800cfa0:	68f8      	ldr	r0, [r7, #12]
 800cfa2:	f000 fbcb 	bl	800d73c <SPI_EndRxTxTransaction>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d002      	beq.n	800cfb2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	2220      	movs	r2, #32
 800cfb0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	689b      	ldr	r3, [r3, #8]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d10a      	bne.n	800cfd0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cfba:	2300      	movs	r3, #0
 800cfbc:	613b      	str	r3, [r7, #16]
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	68db      	ldr	r3, [r3, #12]
 800cfc4:	613b      	str	r3, [r7, #16]
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	689b      	ldr	r3, [r3, #8]
 800cfcc:	613b      	str	r3, [r7, #16]
 800cfce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d002      	beq.n	800cfde <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800cfd8:	2301      	movs	r3, #1
 800cfda:	77fb      	strb	r3, [r7, #31]
 800cfdc:	e000      	b.n	800cfe0 <HAL_SPI_Transmit+0x25e>
  }

error:
 800cfde:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	2201      	movs	r2, #1
 800cfe4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	2200      	movs	r2, #0
 800cfec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800cff0:	7ffb      	ldrb	r3, [r7, #31]
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	3720      	adds	r7, #32
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}

0800cffa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cffa:	b580      	push	{r7, lr}
 800cffc:	b088      	sub	sp, #32
 800cffe:	af02      	add	r7, sp, #8
 800d000:	60f8      	str	r0, [r7, #12]
 800d002:	60b9      	str	r1, [r7, #8]
 800d004:	603b      	str	r3, [r7, #0]
 800d006:	4613      	mov	r3, r2
 800d008:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d00a:	2300      	movs	r3, #0
 800d00c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	685b      	ldr	r3, [r3, #4]
 800d012:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d016:	d112      	bne.n	800d03e <HAL_SPI_Receive+0x44>
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	689b      	ldr	r3, [r3, #8]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d10e      	bne.n	800d03e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2204      	movs	r2, #4
 800d024:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d028:	88fa      	ldrh	r2, [r7, #6]
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	9300      	str	r3, [sp, #0]
 800d02e:	4613      	mov	r3, r2
 800d030:	68ba      	ldr	r2, [r7, #8]
 800d032:	68b9      	ldr	r1, [r7, #8]
 800d034:	68f8      	ldr	r0, [r7, #12]
 800d036:	f000 f8f1 	bl	800d21c <HAL_SPI_TransmitReceive>
 800d03a:	4603      	mov	r3, r0
 800d03c:	e0ea      	b.n	800d214 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d044:	2b01      	cmp	r3, #1
 800d046:	d101      	bne.n	800d04c <HAL_SPI_Receive+0x52>
 800d048:	2302      	movs	r3, #2
 800d04a:	e0e3      	b.n	800d214 <HAL_SPI_Receive+0x21a>
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	2201      	movs	r2, #1
 800d050:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d054:	f7fb f9a8 	bl	80083a8 <HAL_GetTick>
 800d058:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d060:	b2db      	uxtb	r3, r3
 800d062:	2b01      	cmp	r3, #1
 800d064:	d002      	beq.n	800d06c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800d066:	2302      	movs	r3, #2
 800d068:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d06a:	e0ca      	b.n	800d202 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d002      	beq.n	800d078 <HAL_SPI_Receive+0x7e>
 800d072:	88fb      	ldrh	r3, [r7, #6]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d102      	bne.n	800d07e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800d078:	2301      	movs	r3, #1
 800d07a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d07c:	e0c1      	b.n	800d202 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	2204      	movs	r2, #4
 800d082:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	2200      	movs	r2, #0
 800d08a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	68ba      	ldr	r2, [r7, #8]
 800d090:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	88fa      	ldrh	r2, [r7, #6]
 800d096:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	88fa      	ldrh	r2, [r7, #6]
 800d09c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	689b      	ldr	r3, [r3, #8]
 800d0c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d0c4:	d10f      	bne.n	800d0e6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	681a      	ldr	r2, [r3, #0]
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d0d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	681a      	ldr	r2, [r3, #0]
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d0e4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0f0:	2b40      	cmp	r3, #64	; 0x40
 800d0f2:	d007      	beq.n	800d104 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	681a      	ldr	r2, [r3, #0]
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d102:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	68db      	ldr	r3, [r3, #12]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d162      	bne.n	800d1d2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800d10c:	e02e      	b.n	800d16c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	689b      	ldr	r3, [r3, #8]
 800d114:	f003 0301 	and.w	r3, r3, #1
 800d118:	2b01      	cmp	r3, #1
 800d11a:	d115      	bne.n	800d148 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	f103 020c 	add.w	r2, r3, #12
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d128:	7812      	ldrb	r2, [r2, #0]
 800d12a:	b2d2      	uxtb	r2, r2
 800d12c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d132:	1c5a      	adds	r2, r3, #1
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d13c:	b29b      	uxth	r3, r3
 800d13e:	3b01      	subs	r3, #1
 800d140:	b29a      	uxth	r2, r3
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d146:	e011      	b.n	800d16c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d148:	f7fb f92e 	bl	80083a8 <HAL_GetTick>
 800d14c:	4602      	mov	r2, r0
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	1ad3      	subs	r3, r2, r3
 800d152:	683a      	ldr	r2, [r7, #0]
 800d154:	429a      	cmp	r2, r3
 800d156:	d803      	bhi.n	800d160 <HAL_SPI_Receive+0x166>
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d15e:	d102      	bne.n	800d166 <HAL_SPI_Receive+0x16c>
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d102      	bne.n	800d16c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800d166:	2303      	movs	r3, #3
 800d168:	75fb      	strb	r3, [r7, #23]
          goto error;
 800d16a:	e04a      	b.n	800d202 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d170:	b29b      	uxth	r3, r3
 800d172:	2b00      	cmp	r3, #0
 800d174:	d1cb      	bne.n	800d10e <HAL_SPI_Receive+0x114>
 800d176:	e031      	b.n	800d1dc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	689b      	ldr	r3, [r3, #8]
 800d17e:	f003 0301 	and.w	r3, r3, #1
 800d182:	2b01      	cmp	r3, #1
 800d184:	d113      	bne.n	800d1ae <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	68da      	ldr	r2, [r3, #12]
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d190:	b292      	uxth	r2, r2
 800d192:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d198:	1c9a      	adds	r2, r3, #2
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d1a2:	b29b      	uxth	r3, r3
 800d1a4:	3b01      	subs	r3, #1
 800d1a6:	b29a      	uxth	r2, r3
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d1ac:	e011      	b.n	800d1d2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d1ae:	f7fb f8fb 	bl	80083a8 <HAL_GetTick>
 800d1b2:	4602      	mov	r2, r0
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	1ad3      	subs	r3, r2, r3
 800d1b8:	683a      	ldr	r2, [r7, #0]
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d803      	bhi.n	800d1c6 <HAL_SPI_Receive+0x1cc>
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1c4:	d102      	bne.n	800d1cc <HAL_SPI_Receive+0x1d2>
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d102      	bne.n	800d1d2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800d1cc:	2303      	movs	r3, #3
 800d1ce:	75fb      	strb	r3, [r7, #23]
          goto error;
 800d1d0:	e017      	b.n	800d202 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d1d6:	b29b      	uxth	r3, r3
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d1cd      	bne.n	800d178 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d1dc:	693a      	ldr	r2, [r7, #16]
 800d1de:	6839      	ldr	r1, [r7, #0]
 800d1e0:	68f8      	ldr	r0, [r7, #12]
 800d1e2:	f000 fa45 	bl	800d670 <SPI_EndRxTransaction>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d002      	beq.n	800d1f2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	2220      	movs	r2, #32
 800d1f0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d002      	beq.n	800d200 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	75fb      	strb	r3, [r7, #23]
 800d1fe:	e000      	b.n	800d202 <HAL_SPI_Receive+0x208>
  }

error :
 800d200:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	2201      	movs	r2, #1
 800d206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	2200      	movs	r2, #0
 800d20e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d212:	7dfb      	ldrb	r3, [r7, #23]
}
 800d214:	4618      	mov	r0, r3
 800d216:	3718      	adds	r7, #24
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}

0800d21c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b08c      	sub	sp, #48	; 0x30
 800d220:	af00      	add	r7, sp, #0
 800d222:	60f8      	str	r0, [r7, #12]
 800d224:	60b9      	str	r1, [r7, #8]
 800d226:	607a      	str	r2, [r7, #4]
 800d228:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d22a:	2301      	movs	r3, #1
 800d22c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800d22e:	2300      	movs	r3, #0
 800d230:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d23a:	2b01      	cmp	r3, #1
 800d23c:	d101      	bne.n	800d242 <HAL_SPI_TransmitReceive+0x26>
 800d23e:	2302      	movs	r3, #2
 800d240:	e18a      	b.n	800d558 <HAL_SPI_TransmitReceive+0x33c>
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	2201      	movs	r2, #1
 800d246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d24a:	f7fb f8ad 	bl	80083a8 <HAL_GetTick>
 800d24e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	685b      	ldr	r3, [r3, #4]
 800d25e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800d260:	887b      	ldrh	r3, [r7, #2]
 800d262:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d264:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d268:	2b01      	cmp	r3, #1
 800d26a:	d00f      	beq.n	800d28c <HAL_SPI_TransmitReceive+0x70>
 800d26c:	69fb      	ldr	r3, [r7, #28]
 800d26e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d272:	d107      	bne.n	800d284 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	689b      	ldr	r3, [r3, #8]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d103      	bne.n	800d284 <HAL_SPI_TransmitReceive+0x68>
 800d27c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d280:	2b04      	cmp	r3, #4
 800d282:	d003      	beq.n	800d28c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800d284:	2302      	movs	r3, #2
 800d286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d28a:	e15b      	b.n	800d544 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d005      	beq.n	800d29e <HAL_SPI_TransmitReceive+0x82>
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d002      	beq.n	800d29e <HAL_SPI_TransmitReceive+0x82>
 800d298:	887b      	ldrh	r3, [r7, #2]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d103      	bne.n	800d2a6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800d29e:	2301      	movs	r3, #1
 800d2a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d2a4:	e14e      	b.n	800d544 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d2ac:	b2db      	uxtb	r3, r3
 800d2ae:	2b04      	cmp	r3, #4
 800d2b0:	d003      	beq.n	800d2ba <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	2205      	movs	r2, #5
 800d2b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	687a      	ldr	r2, [r7, #4]
 800d2c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	887a      	ldrh	r2, [r7, #2]
 800d2ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	887a      	ldrh	r2, [r7, #2]
 800d2d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	68ba      	ldr	r2, [r7, #8]
 800d2d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	887a      	ldrh	r2, [r7, #2]
 800d2dc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	887a      	ldrh	r2, [r7, #2]
 800d2e2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2fa:	2b40      	cmp	r3, #64	; 0x40
 800d2fc:	d007      	beq.n	800d30e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	681a      	ldr	r2, [r3, #0]
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d30c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	68db      	ldr	r3, [r3, #12]
 800d312:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d316:	d178      	bne.n	800d40a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	685b      	ldr	r3, [r3, #4]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d002      	beq.n	800d326 <HAL_SPI_TransmitReceive+0x10a>
 800d320:	8b7b      	ldrh	r3, [r7, #26]
 800d322:	2b01      	cmp	r3, #1
 800d324:	d166      	bne.n	800d3f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d32a:	881a      	ldrh	r2, [r3, #0]
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d336:	1c9a      	adds	r2, r3, #2
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d340:	b29b      	uxth	r3, r3
 800d342:	3b01      	subs	r3, #1
 800d344:	b29a      	uxth	r2, r3
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d34a:	e053      	b.n	800d3f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	689b      	ldr	r3, [r3, #8]
 800d352:	f003 0302 	and.w	r3, r3, #2
 800d356:	2b02      	cmp	r3, #2
 800d358:	d11b      	bne.n	800d392 <HAL_SPI_TransmitReceive+0x176>
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d35e:	b29b      	uxth	r3, r3
 800d360:	2b00      	cmp	r3, #0
 800d362:	d016      	beq.n	800d392 <HAL_SPI_TransmitReceive+0x176>
 800d364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d366:	2b01      	cmp	r3, #1
 800d368:	d113      	bne.n	800d392 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d36e:	881a      	ldrh	r2, [r3, #0]
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d37a:	1c9a      	adds	r2, r3, #2
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d384:	b29b      	uxth	r3, r3
 800d386:	3b01      	subs	r3, #1
 800d388:	b29a      	uxth	r2, r3
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d38e:	2300      	movs	r3, #0
 800d390:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	689b      	ldr	r3, [r3, #8]
 800d398:	f003 0301 	and.w	r3, r3, #1
 800d39c:	2b01      	cmp	r3, #1
 800d39e:	d119      	bne.n	800d3d4 <HAL_SPI_TransmitReceive+0x1b8>
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d3a4:	b29b      	uxth	r3, r3
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d014      	beq.n	800d3d4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	68da      	ldr	r2, [r3, #12]
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3b4:	b292      	uxth	r2, r2
 800d3b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3bc:	1c9a      	adds	r2, r3, #2
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d3c6:	b29b      	uxth	r3, r3
 800d3c8:	3b01      	subs	r3, #1
 800d3ca:	b29a      	uxth	r2, r3
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d3d4:	f7fa ffe8 	bl	80083a8 <HAL_GetTick>
 800d3d8:	4602      	mov	r2, r0
 800d3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3dc:	1ad3      	subs	r3, r2, r3
 800d3de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d807      	bhi.n	800d3f4 <HAL_SPI_TransmitReceive+0x1d8>
 800d3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3ea:	d003      	beq.n	800d3f4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800d3ec:	2303      	movs	r3, #3
 800d3ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d3f2:	e0a7      	b.n	800d544 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d3f8:	b29b      	uxth	r3, r3
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d1a6      	bne.n	800d34c <HAL_SPI_TransmitReceive+0x130>
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d402:	b29b      	uxth	r3, r3
 800d404:	2b00      	cmp	r3, #0
 800d406:	d1a1      	bne.n	800d34c <HAL_SPI_TransmitReceive+0x130>
 800d408:	e07c      	b.n	800d504 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	685b      	ldr	r3, [r3, #4]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d002      	beq.n	800d418 <HAL_SPI_TransmitReceive+0x1fc>
 800d412:	8b7b      	ldrh	r3, [r7, #26]
 800d414:	2b01      	cmp	r3, #1
 800d416:	d16b      	bne.n	800d4f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	330c      	adds	r3, #12
 800d422:	7812      	ldrb	r2, [r2, #0]
 800d424:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d42a:	1c5a      	adds	r2, r3, #1
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d434:	b29b      	uxth	r3, r3
 800d436:	3b01      	subs	r3, #1
 800d438:	b29a      	uxth	r2, r3
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d43e:	e057      	b.n	800d4f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	689b      	ldr	r3, [r3, #8]
 800d446:	f003 0302 	and.w	r3, r3, #2
 800d44a:	2b02      	cmp	r3, #2
 800d44c:	d11c      	bne.n	800d488 <HAL_SPI_TransmitReceive+0x26c>
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d452:	b29b      	uxth	r3, r3
 800d454:	2b00      	cmp	r3, #0
 800d456:	d017      	beq.n	800d488 <HAL_SPI_TransmitReceive+0x26c>
 800d458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d45a:	2b01      	cmp	r3, #1
 800d45c:	d114      	bne.n	800d488 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	330c      	adds	r3, #12
 800d468:	7812      	ldrb	r2, [r2, #0]
 800d46a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d470:	1c5a      	adds	r2, r3, #1
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d47a:	b29b      	uxth	r3, r3
 800d47c:	3b01      	subs	r3, #1
 800d47e:	b29a      	uxth	r2, r3
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d484:	2300      	movs	r3, #0
 800d486:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	689b      	ldr	r3, [r3, #8]
 800d48e:	f003 0301 	and.w	r3, r3, #1
 800d492:	2b01      	cmp	r3, #1
 800d494:	d119      	bne.n	800d4ca <HAL_SPI_TransmitReceive+0x2ae>
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d49a:	b29b      	uxth	r3, r3
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d014      	beq.n	800d4ca <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	68da      	ldr	r2, [r3, #12]
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4aa:	b2d2      	uxtb	r2, r2
 800d4ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4b2:	1c5a      	adds	r2, r3, #1
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d4bc:	b29b      	uxth	r3, r3
 800d4be:	3b01      	subs	r3, #1
 800d4c0:	b29a      	uxth	r2, r3
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d4ca:	f7fa ff6d 	bl	80083a8 <HAL_GetTick>
 800d4ce:	4602      	mov	r2, r0
 800d4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d2:	1ad3      	subs	r3, r2, r3
 800d4d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d4d6:	429a      	cmp	r2, r3
 800d4d8:	d803      	bhi.n	800d4e2 <HAL_SPI_TransmitReceive+0x2c6>
 800d4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4e0:	d102      	bne.n	800d4e8 <HAL_SPI_TransmitReceive+0x2cc>
 800d4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d103      	bne.n	800d4f0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800d4e8:	2303      	movs	r3, #3
 800d4ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d4ee:	e029      	b.n	800d544 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d4f4:	b29b      	uxth	r3, r3
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d1a2      	bne.n	800d440 <HAL_SPI_TransmitReceive+0x224>
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d4fe:	b29b      	uxth	r3, r3
 800d500:	2b00      	cmp	r3, #0
 800d502:	d19d      	bne.n	800d440 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d506:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d508:	68f8      	ldr	r0, [r7, #12]
 800d50a:	f000 f917 	bl	800d73c <SPI_EndRxTxTransaction>
 800d50e:	4603      	mov	r3, r0
 800d510:	2b00      	cmp	r3, #0
 800d512:	d006      	beq.n	800d522 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800d514:	2301      	movs	r3, #1
 800d516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	2220      	movs	r2, #32
 800d51e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800d520:	e010      	b.n	800d544 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	689b      	ldr	r3, [r3, #8]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d10b      	bne.n	800d542 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d52a:	2300      	movs	r3, #0
 800d52c:	617b      	str	r3, [r7, #20]
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	68db      	ldr	r3, [r3, #12]
 800d534:	617b      	str	r3, [r7, #20]
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	689b      	ldr	r3, [r3, #8]
 800d53c:	617b      	str	r3, [r7, #20]
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	e000      	b.n	800d544 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800d542:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	2201      	movs	r2, #1
 800d548:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	2200      	movs	r2, #0
 800d550:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d554:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3730      	adds	r7, #48	; 0x30
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}

0800d560 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b088      	sub	sp, #32
 800d564:	af00      	add	r7, sp, #0
 800d566:	60f8      	str	r0, [r7, #12]
 800d568:	60b9      	str	r1, [r7, #8]
 800d56a:	603b      	str	r3, [r7, #0]
 800d56c:	4613      	mov	r3, r2
 800d56e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d570:	f7fa ff1a 	bl	80083a8 <HAL_GetTick>
 800d574:	4602      	mov	r2, r0
 800d576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d578:	1a9b      	subs	r3, r3, r2
 800d57a:	683a      	ldr	r2, [r7, #0]
 800d57c:	4413      	add	r3, r2
 800d57e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d580:	f7fa ff12 	bl	80083a8 <HAL_GetTick>
 800d584:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d586:	4b39      	ldr	r3, [pc, #228]	; (800d66c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	015b      	lsls	r3, r3, #5
 800d58c:	0d1b      	lsrs	r3, r3, #20
 800d58e:	69fa      	ldr	r2, [r7, #28]
 800d590:	fb02 f303 	mul.w	r3, r2, r3
 800d594:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d596:	e054      	b.n	800d642 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d59e:	d050      	beq.n	800d642 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d5a0:	f7fa ff02 	bl	80083a8 <HAL_GetTick>
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	69bb      	ldr	r3, [r7, #24]
 800d5a8:	1ad3      	subs	r3, r2, r3
 800d5aa:	69fa      	ldr	r2, [r7, #28]
 800d5ac:	429a      	cmp	r2, r3
 800d5ae:	d902      	bls.n	800d5b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800d5b0:	69fb      	ldr	r3, [r7, #28]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d13d      	bne.n	800d632 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	685a      	ldr	r2, [r3, #4]
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d5c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	685b      	ldr	r3, [r3, #4]
 800d5ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d5ce:	d111      	bne.n	800d5f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	689b      	ldr	r3, [r3, #8]
 800d5d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d5d8:	d004      	beq.n	800d5e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	689b      	ldr	r3, [r3, #8]
 800d5de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d5e2:	d107      	bne.n	800d5f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	681a      	ldr	r2, [r3, #0]
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d5f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d5fc:	d10f      	bne.n	800d61e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	681a      	ldr	r2, [r3, #0]
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d60c:	601a      	str	r2, [r3, #0]
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	681a      	ldr	r2, [r3, #0]
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d61c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	2201      	movs	r2, #1
 800d622:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	2200      	movs	r2, #0
 800d62a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800d62e:	2303      	movs	r3, #3
 800d630:	e017      	b.n	800d662 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d101      	bne.n	800d63c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d638:	2300      	movs	r3, #0
 800d63a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	3b01      	subs	r3, #1
 800d640:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	689a      	ldr	r2, [r3, #8]
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	4013      	ands	r3, r2
 800d64c:	68ba      	ldr	r2, [r7, #8]
 800d64e:	429a      	cmp	r2, r3
 800d650:	bf0c      	ite	eq
 800d652:	2301      	moveq	r3, #1
 800d654:	2300      	movne	r3, #0
 800d656:	b2db      	uxtb	r3, r3
 800d658:	461a      	mov	r2, r3
 800d65a:	79fb      	ldrb	r3, [r7, #7]
 800d65c:	429a      	cmp	r2, r3
 800d65e:	d19b      	bne.n	800d598 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d660:	2300      	movs	r3, #0
}
 800d662:	4618      	mov	r0, r3
 800d664:	3720      	adds	r7, #32
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}
 800d66a:	bf00      	nop
 800d66c:	20000000 	.word	0x20000000

0800d670 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b086      	sub	sp, #24
 800d674:	af02      	add	r7, sp, #8
 800d676:	60f8      	str	r0, [r7, #12]
 800d678:	60b9      	str	r1, [r7, #8]
 800d67a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	685b      	ldr	r3, [r3, #4]
 800d680:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d684:	d111      	bne.n	800d6aa <SPI_EndRxTransaction+0x3a>
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	689b      	ldr	r3, [r3, #8]
 800d68a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d68e:	d004      	beq.n	800d69a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	689b      	ldr	r3, [r3, #8]
 800d694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d698:	d107      	bne.n	800d6aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	681a      	ldr	r2, [r3, #0]
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d6a8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d6b2:	d12a      	bne.n	800d70a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	689b      	ldr	r3, [r3, #8]
 800d6b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d6bc:	d012      	beq.n	800d6e4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	9300      	str	r3, [sp, #0]
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	2180      	movs	r1, #128	; 0x80
 800d6c8:	68f8      	ldr	r0, [r7, #12]
 800d6ca:	f7ff ff49 	bl	800d560 <SPI_WaitFlagStateUntilTimeout>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d02d      	beq.n	800d730 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6d8:	f043 0220 	orr.w	r2, r3, #32
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d6e0:	2303      	movs	r3, #3
 800d6e2:	e026      	b.n	800d732 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	9300      	str	r3, [sp, #0]
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	2101      	movs	r1, #1
 800d6ee:	68f8      	ldr	r0, [r7, #12]
 800d6f0:	f7ff ff36 	bl	800d560 <SPI_WaitFlagStateUntilTimeout>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d01a      	beq.n	800d730 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6fe:	f043 0220 	orr.w	r2, r3, #32
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d706:	2303      	movs	r3, #3
 800d708:	e013      	b.n	800d732 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	9300      	str	r3, [sp, #0]
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	2200      	movs	r2, #0
 800d712:	2101      	movs	r1, #1
 800d714:	68f8      	ldr	r0, [r7, #12]
 800d716:	f7ff ff23 	bl	800d560 <SPI_WaitFlagStateUntilTimeout>
 800d71a:	4603      	mov	r3, r0
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d007      	beq.n	800d730 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d724:	f043 0220 	orr.w	r2, r3, #32
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d72c:	2303      	movs	r3, #3
 800d72e:	e000      	b.n	800d732 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800d730:	2300      	movs	r3, #0
}
 800d732:	4618      	mov	r0, r3
 800d734:	3710      	adds	r7, #16
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}
	...

0800d73c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b088      	sub	sp, #32
 800d740:	af02      	add	r7, sp, #8
 800d742:	60f8      	str	r0, [r7, #12]
 800d744:	60b9      	str	r1, [r7, #8]
 800d746:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800d748:	4b1b      	ldr	r3, [pc, #108]	; (800d7b8 <SPI_EndRxTxTransaction+0x7c>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	4a1b      	ldr	r2, [pc, #108]	; (800d7bc <SPI_EndRxTxTransaction+0x80>)
 800d74e:	fba2 2303 	umull	r2, r3, r2, r3
 800d752:	0d5b      	lsrs	r3, r3, #21
 800d754:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d758:	fb02 f303 	mul.w	r3, r2, r3
 800d75c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	685b      	ldr	r3, [r3, #4]
 800d762:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d766:	d112      	bne.n	800d78e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	9300      	str	r3, [sp, #0]
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	2200      	movs	r2, #0
 800d770:	2180      	movs	r1, #128	; 0x80
 800d772:	68f8      	ldr	r0, [r7, #12]
 800d774:	f7ff fef4 	bl	800d560 <SPI_WaitFlagStateUntilTimeout>
 800d778:	4603      	mov	r3, r0
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d016      	beq.n	800d7ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d782:	f043 0220 	orr.w	r2, r3, #32
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d78a:	2303      	movs	r3, #3
 800d78c:	e00f      	b.n	800d7ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800d78e:	697b      	ldr	r3, [r7, #20]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d00a      	beq.n	800d7aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800d794:	697b      	ldr	r3, [r7, #20]
 800d796:	3b01      	subs	r3, #1
 800d798:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	689b      	ldr	r3, [r3, #8]
 800d7a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7a4:	2b80      	cmp	r3, #128	; 0x80
 800d7a6:	d0f2      	beq.n	800d78e <SPI_EndRxTxTransaction+0x52>
 800d7a8:	e000      	b.n	800d7ac <SPI_EndRxTxTransaction+0x70>
        break;
 800d7aa:	bf00      	nop
  }

  return HAL_OK;
 800d7ac:	2300      	movs	r3, #0
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3718      	adds	r7, #24
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}
 800d7b6:	bf00      	nop
 800d7b8:	20000000 	.word	0x20000000
 800d7bc:	165e9f81 	.word	0x165e9f81

0800d7c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b082      	sub	sp, #8
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d101      	bne.n	800d7d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	e041      	b.n	800d856 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d7d8:	b2db      	uxtb	r3, r3
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d106      	bne.n	800d7ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f000 f839 	bl	800d85e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2202      	movs	r2, #2
 800d7f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681a      	ldr	r2, [r3, #0]
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	3304      	adds	r3, #4
 800d7fc:	4619      	mov	r1, r3
 800d7fe:	4610      	mov	r0, r2
 800d800:	f000 faea 	bl	800ddd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2201      	movs	r2, #1
 800d808:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2201      	movs	r2, #1
 800d810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2201      	movs	r2, #1
 800d818:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2201      	movs	r2, #1
 800d820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2201      	movs	r2, #1
 800d828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2201      	movs	r2, #1
 800d830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2201      	movs	r2, #1
 800d838:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2201      	movs	r2, #1
 800d840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2201      	movs	r2, #1
 800d848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2201      	movs	r2, #1
 800d850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d854:	2300      	movs	r3, #0
}
 800d856:	4618      	mov	r0, r3
 800d858:	3708      	adds	r7, #8
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}

0800d85e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d85e:	b480      	push	{r7}
 800d860:	b083      	sub	sp, #12
 800d862:	af00      	add	r7, sp, #0
 800d864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d866:	bf00      	nop
 800d868:	370c      	adds	r7, #12
 800d86a:	46bd      	mov	sp, r7
 800d86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d870:	4770      	bx	lr
	...

0800d874 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d874:	b480      	push	{r7}
 800d876:	b085      	sub	sp, #20
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d882:	b2db      	uxtb	r3, r3
 800d884:	2b01      	cmp	r3, #1
 800d886:	d001      	beq.n	800d88c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d888:	2301      	movs	r3, #1
 800d88a:	e04e      	b.n	800d92a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2202      	movs	r2, #2
 800d890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	68da      	ldr	r2, [r3, #12]
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	f042 0201 	orr.w	r2, r2, #1
 800d8a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	4a23      	ldr	r2, [pc, #140]	; (800d938 <HAL_TIM_Base_Start_IT+0xc4>)
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d022      	beq.n	800d8f4 <HAL_TIM_Base_Start_IT+0x80>
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d8b6:	d01d      	beq.n	800d8f4 <HAL_TIM_Base_Start_IT+0x80>
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	4a1f      	ldr	r2, [pc, #124]	; (800d93c <HAL_TIM_Base_Start_IT+0xc8>)
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	d018      	beq.n	800d8f4 <HAL_TIM_Base_Start_IT+0x80>
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	4a1e      	ldr	r2, [pc, #120]	; (800d940 <HAL_TIM_Base_Start_IT+0xcc>)
 800d8c8:	4293      	cmp	r3, r2
 800d8ca:	d013      	beq.n	800d8f4 <HAL_TIM_Base_Start_IT+0x80>
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	4a1c      	ldr	r2, [pc, #112]	; (800d944 <HAL_TIM_Base_Start_IT+0xd0>)
 800d8d2:	4293      	cmp	r3, r2
 800d8d4:	d00e      	beq.n	800d8f4 <HAL_TIM_Base_Start_IT+0x80>
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	4a1b      	ldr	r2, [pc, #108]	; (800d948 <HAL_TIM_Base_Start_IT+0xd4>)
 800d8dc:	4293      	cmp	r3, r2
 800d8de:	d009      	beq.n	800d8f4 <HAL_TIM_Base_Start_IT+0x80>
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	4a19      	ldr	r2, [pc, #100]	; (800d94c <HAL_TIM_Base_Start_IT+0xd8>)
 800d8e6:	4293      	cmp	r3, r2
 800d8e8:	d004      	beq.n	800d8f4 <HAL_TIM_Base_Start_IT+0x80>
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	4a18      	ldr	r2, [pc, #96]	; (800d950 <HAL_TIM_Base_Start_IT+0xdc>)
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	d111      	bne.n	800d918 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	689b      	ldr	r3, [r3, #8]
 800d8fa:	f003 0307 	and.w	r3, r3, #7
 800d8fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	2b06      	cmp	r3, #6
 800d904:	d010      	beq.n	800d928 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	681a      	ldr	r2, [r3, #0]
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f042 0201 	orr.w	r2, r2, #1
 800d914:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d916:	e007      	b.n	800d928 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	681a      	ldr	r2, [r3, #0]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	f042 0201 	orr.w	r2, r2, #1
 800d926:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d928:	2300      	movs	r3, #0
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	3714      	adds	r7, #20
 800d92e:	46bd      	mov	sp, r7
 800d930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d934:	4770      	bx	lr
 800d936:	bf00      	nop
 800d938:	40010000 	.word	0x40010000
 800d93c:	40000400 	.word	0x40000400
 800d940:	40000800 	.word	0x40000800
 800d944:	40000c00 	.word	0x40000c00
 800d948:	40010400 	.word	0x40010400
 800d94c:	40014000 	.word	0x40014000
 800d950:	40001800 	.word	0x40001800

0800d954 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b082      	sub	sp, #8
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d101      	bne.n	800d966 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d962:	2301      	movs	r3, #1
 800d964:	e041      	b.n	800d9ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d96c:	b2db      	uxtb	r3, r3
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d106      	bne.n	800d980 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2200      	movs	r2, #0
 800d976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f7f5 fa32 	bl	8002de4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2202      	movs	r2, #2
 800d984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681a      	ldr	r2, [r3, #0]
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	3304      	adds	r3, #4
 800d990:	4619      	mov	r1, r3
 800d992:	4610      	mov	r0, r2
 800d994:	f000 fa20 	bl	800ddd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2201      	movs	r2, #1
 800d99c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2201      	movs	r2, #1
 800d9a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2201      	movs	r2, #1
 800d9ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2201      	movs	r2, #1
 800d9b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2201      	movs	r2, #1
 800d9bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2201      	movs	r2, #1
 800d9c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2201      	movs	r2, #1
 800d9cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2201      	movs	r2, #1
 800d9d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2201      	movs	r2, #1
 800d9dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2201      	movs	r2, #1
 800d9e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d9e8:	2300      	movs	r3, #0
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3708      	adds	r7, #8
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}

0800d9f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d9f2:	b580      	push	{r7, lr}
 800d9f4:	b082      	sub	sp, #8
 800d9f6:	af00      	add	r7, sp, #0
 800d9f8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	691b      	ldr	r3, [r3, #16]
 800da00:	f003 0302 	and.w	r3, r3, #2
 800da04:	2b02      	cmp	r3, #2
 800da06:	d122      	bne.n	800da4e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	68db      	ldr	r3, [r3, #12]
 800da0e:	f003 0302 	and.w	r3, r3, #2
 800da12:	2b02      	cmp	r3, #2
 800da14:	d11b      	bne.n	800da4e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f06f 0202 	mvn.w	r2, #2
 800da1e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2201      	movs	r2, #1
 800da24:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	699b      	ldr	r3, [r3, #24]
 800da2c:	f003 0303 	and.w	r3, r3, #3
 800da30:	2b00      	cmp	r3, #0
 800da32:	d003      	beq.n	800da3c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f000 f9b1 	bl	800dd9c <HAL_TIM_IC_CaptureCallback>
 800da3a:	e005      	b.n	800da48 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	f000 f9a3 	bl	800dd88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f000 f9b4 	bl	800ddb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2200      	movs	r2, #0
 800da4c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	691b      	ldr	r3, [r3, #16]
 800da54:	f003 0304 	and.w	r3, r3, #4
 800da58:	2b04      	cmp	r3, #4
 800da5a:	d122      	bne.n	800daa2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	68db      	ldr	r3, [r3, #12]
 800da62:	f003 0304 	and.w	r3, r3, #4
 800da66:	2b04      	cmp	r3, #4
 800da68:	d11b      	bne.n	800daa2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	f06f 0204 	mvn.w	r2, #4
 800da72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2202      	movs	r2, #2
 800da78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	699b      	ldr	r3, [r3, #24]
 800da80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800da84:	2b00      	cmp	r3, #0
 800da86:	d003      	beq.n	800da90 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f000 f987 	bl	800dd9c <HAL_TIM_IC_CaptureCallback>
 800da8e:	e005      	b.n	800da9c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f000 f979 	bl	800dd88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f000 f98a 	bl	800ddb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2200      	movs	r2, #0
 800daa0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	691b      	ldr	r3, [r3, #16]
 800daa8:	f003 0308 	and.w	r3, r3, #8
 800daac:	2b08      	cmp	r3, #8
 800daae:	d122      	bne.n	800daf6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	68db      	ldr	r3, [r3, #12]
 800dab6:	f003 0308 	and.w	r3, r3, #8
 800daba:	2b08      	cmp	r3, #8
 800dabc:	d11b      	bne.n	800daf6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	f06f 0208 	mvn.w	r2, #8
 800dac6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2204      	movs	r2, #4
 800dacc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	69db      	ldr	r3, [r3, #28]
 800dad4:	f003 0303 	and.w	r3, r3, #3
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d003      	beq.n	800dae4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f000 f95d 	bl	800dd9c <HAL_TIM_IC_CaptureCallback>
 800dae2:	e005      	b.n	800daf0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	f000 f94f 	bl	800dd88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f000 f960 	bl	800ddb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2200      	movs	r2, #0
 800daf4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	691b      	ldr	r3, [r3, #16]
 800dafc:	f003 0310 	and.w	r3, r3, #16
 800db00:	2b10      	cmp	r3, #16
 800db02:	d122      	bne.n	800db4a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	68db      	ldr	r3, [r3, #12]
 800db0a:	f003 0310 	and.w	r3, r3, #16
 800db0e:	2b10      	cmp	r3, #16
 800db10:	d11b      	bne.n	800db4a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	f06f 0210 	mvn.w	r2, #16
 800db1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2208      	movs	r2, #8
 800db20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	69db      	ldr	r3, [r3, #28]
 800db28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d003      	beq.n	800db38 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db30:	6878      	ldr	r0, [r7, #4]
 800db32:	f000 f933 	bl	800dd9c <HAL_TIM_IC_CaptureCallback>
 800db36:	e005      	b.n	800db44 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f000 f925 	bl	800dd88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f000 f936 	bl	800ddb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2200      	movs	r2, #0
 800db48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	691b      	ldr	r3, [r3, #16]
 800db50:	f003 0301 	and.w	r3, r3, #1
 800db54:	2b01      	cmp	r3, #1
 800db56:	d10e      	bne.n	800db76 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	68db      	ldr	r3, [r3, #12]
 800db5e:	f003 0301 	and.w	r3, r3, #1
 800db62:	2b01      	cmp	r3, #1
 800db64:	d107      	bne.n	800db76 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	f06f 0201 	mvn.w	r2, #1
 800db6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f7f4 feef 	bl	8002954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	691b      	ldr	r3, [r3, #16]
 800db7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db80:	2b80      	cmp	r3, #128	; 0x80
 800db82:	d10e      	bne.n	800dba2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	68db      	ldr	r3, [r3, #12]
 800db8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db8e:	2b80      	cmp	r3, #128	; 0x80
 800db90:	d107      	bne.n	800dba2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800db9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f000 fbf1 	bl	800e384 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	691b      	ldr	r3, [r3, #16]
 800dba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbac:	2b40      	cmp	r3, #64	; 0x40
 800dbae:	d10e      	bne.n	800dbce <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	68db      	ldr	r3, [r3, #12]
 800dbb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbba:	2b40      	cmp	r3, #64	; 0x40
 800dbbc:	d107      	bne.n	800dbce <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dbc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	f000 f8fb 	bl	800ddc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	691b      	ldr	r3, [r3, #16]
 800dbd4:	f003 0320 	and.w	r3, r3, #32
 800dbd8:	2b20      	cmp	r3, #32
 800dbda:	d10e      	bne.n	800dbfa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	68db      	ldr	r3, [r3, #12]
 800dbe2:	f003 0320 	and.w	r3, r3, #32
 800dbe6:	2b20      	cmp	r3, #32
 800dbe8:	d107      	bne.n	800dbfa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	f06f 0220 	mvn.w	r2, #32
 800dbf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dbf4:	6878      	ldr	r0, [r7, #4]
 800dbf6:	f000 fbbb 	bl	800e370 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dbfa:	bf00      	nop
 800dbfc:	3708      	adds	r7, #8
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}
	...

0800dc04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b086      	sub	sp, #24
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	60f8      	str	r0, [r7, #12]
 800dc0c:	60b9      	str	r1, [r7, #8]
 800dc0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dc10:	2300      	movs	r3, #0
 800dc12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc1a:	2b01      	cmp	r3, #1
 800dc1c:	d101      	bne.n	800dc22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800dc1e:	2302      	movs	r3, #2
 800dc20:	e0ae      	b.n	800dd80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2201      	movs	r2, #1
 800dc26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2b0c      	cmp	r3, #12
 800dc2e:	f200 809f 	bhi.w	800dd70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800dc32:	a201      	add	r2, pc, #4	; (adr r2, 800dc38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800dc34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc38:	0800dc6d 	.word	0x0800dc6d
 800dc3c:	0800dd71 	.word	0x0800dd71
 800dc40:	0800dd71 	.word	0x0800dd71
 800dc44:	0800dd71 	.word	0x0800dd71
 800dc48:	0800dcad 	.word	0x0800dcad
 800dc4c:	0800dd71 	.word	0x0800dd71
 800dc50:	0800dd71 	.word	0x0800dd71
 800dc54:	0800dd71 	.word	0x0800dd71
 800dc58:	0800dcef 	.word	0x0800dcef
 800dc5c:	0800dd71 	.word	0x0800dd71
 800dc60:	0800dd71 	.word	0x0800dd71
 800dc64:	0800dd71 	.word	0x0800dd71
 800dc68:	0800dd2f 	.word	0x0800dd2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	68b9      	ldr	r1, [r7, #8]
 800dc72:	4618      	mov	r0, r3
 800dc74:	f000 f950 	bl	800df18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	699a      	ldr	r2, [r3, #24]
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	f042 0208 	orr.w	r2, r2, #8
 800dc86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	699a      	ldr	r2, [r3, #24]
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f022 0204 	bic.w	r2, r2, #4
 800dc96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	6999      	ldr	r1, [r3, #24]
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	691a      	ldr	r2, [r3, #16]
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	430a      	orrs	r2, r1
 800dca8:	619a      	str	r2, [r3, #24]
      break;
 800dcaa:	e064      	b.n	800dd76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	68b9      	ldr	r1, [r7, #8]
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f000 f9a0 	bl	800dff8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	699a      	ldr	r2, [r3, #24]
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dcc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	699a      	ldr	r2, [r3, #24]
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dcd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	6999      	ldr	r1, [r3, #24]
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	691b      	ldr	r3, [r3, #16]
 800dce2:	021a      	lsls	r2, r3, #8
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	430a      	orrs	r2, r1
 800dcea:	619a      	str	r2, [r3, #24]
      break;
 800dcec:	e043      	b.n	800dd76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	68b9      	ldr	r1, [r7, #8]
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f000 f9f5 	bl	800e0e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	69da      	ldr	r2, [r3, #28]
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	f042 0208 	orr.w	r2, r2, #8
 800dd08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	69da      	ldr	r2, [r3, #28]
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	f022 0204 	bic.w	r2, r2, #4
 800dd18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	69d9      	ldr	r1, [r3, #28]
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	691a      	ldr	r2, [r3, #16]
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	430a      	orrs	r2, r1
 800dd2a:	61da      	str	r2, [r3, #28]
      break;
 800dd2c:	e023      	b.n	800dd76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	68b9      	ldr	r1, [r7, #8]
 800dd34:	4618      	mov	r0, r3
 800dd36:	f000 fa49 	bl	800e1cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	69da      	ldr	r2, [r3, #28]
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dd48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	69da      	ldr	r2, [r3, #28]
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dd58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	69d9      	ldr	r1, [r3, #28]
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	691b      	ldr	r3, [r3, #16]
 800dd64:	021a      	lsls	r2, r3, #8
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	430a      	orrs	r2, r1
 800dd6c:	61da      	str	r2, [r3, #28]
      break;
 800dd6e:	e002      	b.n	800dd76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800dd70:	2301      	movs	r3, #1
 800dd72:	75fb      	strb	r3, [r7, #23]
      break;
 800dd74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	2200      	movs	r2, #0
 800dd7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dd7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3718      	adds	r7, #24
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}

0800dd88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b083      	sub	sp, #12
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dd90:	bf00      	nop
 800dd92:	370c      	adds	r7, #12
 800dd94:	46bd      	mov	sp, r7
 800dd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9a:	4770      	bx	lr

0800dd9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	b083      	sub	sp, #12
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dda4:	bf00      	nop
 800dda6:	370c      	adds	r7, #12
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddae:	4770      	bx	lr

0800ddb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ddb0:	b480      	push	{r7}
 800ddb2:	b083      	sub	sp, #12
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ddb8:	bf00      	nop
 800ddba:	370c      	adds	r7, #12
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc2:	4770      	bx	lr

0800ddc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ddc4:	b480      	push	{r7}
 800ddc6:	b083      	sub	sp, #12
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ddcc:	bf00      	nop
 800ddce:	370c      	adds	r7, #12
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd6:	4770      	bx	lr

0800ddd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ddd8:	b480      	push	{r7}
 800ddda:	b085      	sub	sp, #20
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	4a40      	ldr	r2, [pc, #256]	; (800deec <TIM_Base_SetConfig+0x114>)
 800ddec:	4293      	cmp	r3, r2
 800ddee:	d013      	beq.n	800de18 <TIM_Base_SetConfig+0x40>
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ddf6:	d00f      	beq.n	800de18 <TIM_Base_SetConfig+0x40>
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	4a3d      	ldr	r2, [pc, #244]	; (800def0 <TIM_Base_SetConfig+0x118>)
 800ddfc:	4293      	cmp	r3, r2
 800ddfe:	d00b      	beq.n	800de18 <TIM_Base_SetConfig+0x40>
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	4a3c      	ldr	r2, [pc, #240]	; (800def4 <TIM_Base_SetConfig+0x11c>)
 800de04:	4293      	cmp	r3, r2
 800de06:	d007      	beq.n	800de18 <TIM_Base_SetConfig+0x40>
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	4a3b      	ldr	r2, [pc, #236]	; (800def8 <TIM_Base_SetConfig+0x120>)
 800de0c:	4293      	cmp	r3, r2
 800de0e:	d003      	beq.n	800de18 <TIM_Base_SetConfig+0x40>
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	4a3a      	ldr	r2, [pc, #232]	; (800defc <TIM_Base_SetConfig+0x124>)
 800de14:	4293      	cmp	r3, r2
 800de16:	d108      	bne.n	800de2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	685b      	ldr	r3, [r3, #4]
 800de24:	68fa      	ldr	r2, [r7, #12]
 800de26:	4313      	orrs	r3, r2
 800de28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	4a2f      	ldr	r2, [pc, #188]	; (800deec <TIM_Base_SetConfig+0x114>)
 800de2e:	4293      	cmp	r3, r2
 800de30:	d02b      	beq.n	800de8a <TIM_Base_SetConfig+0xb2>
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de38:	d027      	beq.n	800de8a <TIM_Base_SetConfig+0xb2>
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	4a2c      	ldr	r2, [pc, #176]	; (800def0 <TIM_Base_SetConfig+0x118>)
 800de3e:	4293      	cmp	r3, r2
 800de40:	d023      	beq.n	800de8a <TIM_Base_SetConfig+0xb2>
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	4a2b      	ldr	r2, [pc, #172]	; (800def4 <TIM_Base_SetConfig+0x11c>)
 800de46:	4293      	cmp	r3, r2
 800de48:	d01f      	beq.n	800de8a <TIM_Base_SetConfig+0xb2>
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	4a2a      	ldr	r2, [pc, #168]	; (800def8 <TIM_Base_SetConfig+0x120>)
 800de4e:	4293      	cmp	r3, r2
 800de50:	d01b      	beq.n	800de8a <TIM_Base_SetConfig+0xb2>
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	4a29      	ldr	r2, [pc, #164]	; (800defc <TIM_Base_SetConfig+0x124>)
 800de56:	4293      	cmp	r3, r2
 800de58:	d017      	beq.n	800de8a <TIM_Base_SetConfig+0xb2>
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	4a28      	ldr	r2, [pc, #160]	; (800df00 <TIM_Base_SetConfig+0x128>)
 800de5e:	4293      	cmp	r3, r2
 800de60:	d013      	beq.n	800de8a <TIM_Base_SetConfig+0xb2>
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	4a27      	ldr	r2, [pc, #156]	; (800df04 <TIM_Base_SetConfig+0x12c>)
 800de66:	4293      	cmp	r3, r2
 800de68:	d00f      	beq.n	800de8a <TIM_Base_SetConfig+0xb2>
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	4a26      	ldr	r2, [pc, #152]	; (800df08 <TIM_Base_SetConfig+0x130>)
 800de6e:	4293      	cmp	r3, r2
 800de70:	d00b      	beq.n	800de8a <TIM_Base_SetConfig+0xb2>
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	4a25      	ldr	r2, [pc, #148]	; (800df0c <TIM_Base_SetConfig+0x134>)
 800de76:	4293      	cmp	r3, r2
 800de78:	d007      	beq.n	800de8a <TIM_Base_SetConfig+0xb2>
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	4a24      	ldr	r2, [pc, #144]	; (800df10 <TIM_Base_SetConfig+0x138>)
 800de7e:	4293      	cmp	r3, r2
 800de80:	d003      	beq.n	800de8a <TIM_Base_SetConfig+0xb2>
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	4a23      	ldr	r2, [pc, #140]	; (800df14 <TIM_Base_SetConfig+0x13c>)
 800de86:	4293      	cmp	r3, r2
 800de88:	d108      	bne.n	800de9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800de90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	68db      	ldr	r3, [r3, #12]
 800de96:	68fa      	ldr	r2, [r7, #12]
 800de98:	4313      	orrs	r3, r2
 800de9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	695b      	ldr	r3, [r3, #20]
 800dea6:	4313      	orrs	r3, r2
 800dea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	68fa      	ldr	r2, [r7, #12]
 800deae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	689a      	ldr	r2, [r3, #8]
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	681a      	ldr	r2, [r3, #0]
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	4a0a      	ldr	r2, [pc, #40]	; (800deec <TIM_Base_SetConfig+0x114>)
 800dec4:	4293      	cmp	r3, r2
 800dec6:	d003      	beq.n	800ded0 <TIM_Base_SetConfig+0xf8>
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	4a0c      	ldr	r2, [pc, #48]	; (800defc <TIM_Base_SetConfig+0x124>)
 800decc:	4293      	cmp	r3, r2
 800dece:	d103      	bne.n	800ded8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	691a      	ldr	r2, [r3, #16]
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2201      	movs	r2, #1
 800dedc:	615a      	str	r2, [r3, #20]
}
 800dede:	bf00      	nop
 800dee0:	3714      	adds	r7, #20
 800dee2:	46bd      	mov	sp, r7
 800dee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee8:	4770      	bx	lr
 800deea:	bf00      	nop
 800deec:	40010000 	.word	0x40010000
 800def0:	40000400 	.word	0x40000400
 800def4:	40000800 	.word	0x40000800
 800def8:	40000c00 	.word	0x40000c00
 800defc:	40010400 	.word	0x40010400
 800df00:	40014000 	.word	0x40014000
 800df04:	40014400 	.word	0x40014400
 800df08:	40014800 	.word	0x40014800
 800df0c:	40001800 	.word	0x40001800
 800df10:	40001c00 	.word	0x40001c00
 800df14:	40002000 	.word	0x40002000

0800df18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800df18:	b480      	push	{r7}
 800df1a:	b087      	sub	sp, #28
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
 800df20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	6a1b      	ldr	r3, [r3, #32]
 800df26:	f023 0201 	bic.w	r2, r3, #1
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6a1b      	ldr	r3, [r3, #32]
 800df32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	685b      	ldr	r3, [r3, #4]
 800df38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	699b      	ldr	r3, [r3, #24]
 800df3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	f023 0303 	bic.w	r3, r3, #3
 800df4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	68fa      	ldr	r2, [r7, #12]
 800df56:	4313      	orrs	r3, r2
 800df58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800df5a:	697b      	ldr	r3, [r7, #20]
 800df5c:	f023 0302 	bic.w	r3, r3, #2
 800df60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	689b      	ldr	r3, [r3, #8]
 800df66:	697a      	ldr	r2, [r7, #20]
 800df68:	4313      	orrs	r3, r2
 800df6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	4a20      	ldr	r2, [pc, #128]	; (800dff0 <TIM_OC1_SetConfig+0xd8>)
 800df70:	4293      	cmp	r3, r2
 800df72:	d003      	beq.n	800df7c <TIM_OC1_SetConfig+0x64>
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	4a1f      	ldr	r2, [pc, #124]	; (800dff4 <TIM_OC1_SetConfig+0xdc>)
 800df78:	4293      	cmp	r3, r2
 800df7a:	d10c      	bne.n	800df96 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	f023 0308 	bic.w	r3, r3, #8
 800df82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	68db      	ldr	r3, [r3, #12]
 800df88:	697a      	ldr	r2, [r7, #20]
 800df8a:	4313      	orrs	r3, r2
 800df8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	f023 0304 	bic.w	r3, r3, #4
 800df94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	4a15      	ldr	r2, [pc, #84]	; (800dff0 <TIM_OC1_SetConfig+0xd8>)
 800df9a:	4293      	cmp	r3, r2
 800df9c:	d003      	beq.n	800dfa6 <TIM_OC1_SetConfig+0x8e>
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	4a14      	ldr	r2, [pc, #80]	; (800dff4 <TIM_OC1_SetConfig+0xdc>)
 800dfa2:	4293      	cmp	r3, r2
 800dfa4:	d111      	bne.n	800dfca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dfa6:	693b      	ldr	r3, [r7, #16]
 800dfa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dfac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dfae:	693b      	ldr	r3, [r7, #16]
 800dfb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dfb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	695b      	ldr	r3, [r3, #20]
 800dfba:	693a      	ldr	r2, [r7, #16]
 800dfbc:	4313      	orrs	r3, r2
 800dfbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	699b      	ldr	r3, [r3, #24]
 800dfc4:	693a      	ldr	r2, [r7, #16]
 800dfc6:	4313      	orrs	r3, r2
 800dfc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	693a      	ldr	r2, [r7, #16]
 800dfce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	68fa      	ldr	r2, [r7, #12]
 800dfd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	685a      	ldr	r2, [r3, #4]
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	697a      	ldr	r2, [r7, #20]
 800dfe2:	621a      	str	r2, [r3, #32]
}
 800dfe4:	bf00      	nop
 800dfe6:	371c      	adds	r7, #28
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfee:	4770      	bx	lr
 800dff0:	40010000 	.word	0x40010000
 800dff4:	40010400 	.word	0x40010400

0800dff8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dff8:	b480      	push	{r7}
 800dffa:	b087      	sub	sp, #28
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
 800e000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	6a1b      	ldr	r3, [r3, #32]
 800e006:	f023 0210 	bic.w	r2, r3, #16
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6a1b      	ldr	r3, [r3, #32]
 800e012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	685b      	ldr	r3, [r3, #4]
 800e018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	699b      	ldr	r3, [r3, #24]
 800e01e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e02e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	021b      	lsls	r3, r3, #8
 800e036:	68fa      	ldr	r2, [r7, #12]
 800e038:	4313      	orrs	r3, r2
 800e03a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e03c:	697b      	ldr	r3, [r7, #20]
 800e03e:	f023 0320 	bic.w	r3, r3, #32
 800e042:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	689b      	ldr	r3, [r3, #8]
 800e048:	011b      	lsls	r3, r3, #4
 800e04a:	697a      	ldr	r2, [r7, #20]
 800e04c:	4313      	orrs	r3, r2
 800e04e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	4a22      	ldr	r2, [pc, #136]	; (800e0dc <TIM_OC2_SetConfig+0xe4>)
 800e054:	4293      	cmp	r3, r2
 800e056:	d003      	beq.n	800e060 <TIM_OC2_SetConfig+0x68>
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	4a21      	ldr	r2, [pc, #132]	; (800e0e0 <TIM_OC2_SetConfig+0xe8>)
 800e05c:	4293      	cmp	r3, r2
 800e05e:	d10d      	bne.n	800e07c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	68db      	ldr	r3, [r3, #12]
 800e06c:	011b      	lsls	r3, r3, #4
 800e06e:	697a      	ldr	r2, [r7, #20]
 800e070:	4313      	orrs	r3, r2
 800e072:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e074:	697b      	ldr	r3, [r7, #20]
 800e076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e07a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	4a17      	ldr	r2, [pc, #92]	; (800e0dc <TIM_OC2_SetConfig+0xe4>)
 800e080:	4293      	cmp	r3, r2
 800e082:	d003      	beq.n	800e08c <TIM_OC2_SetConfig+0x94>
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	4a16      	ldr	r2, [pc, #88]	; (800e0e0 <TIM_OC2_SetConfig+0xe8>)
 800e088:	4293      	cmp	r3, r2
 800e08a:	d113      	bne.n	800e0b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e08c:	693b      	ldr	r3, [r7, #16]
 800e08e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e092:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e09a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	695b      	ldr	r3, [r3, #20]
 800e0a0:	009b      	lsls	r3, r3, #2
 800e0a2:	693a      	ldr	r2, [r7, #16]
 800e0a4:	4313      	orrs	r3, r2
 800e0a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	699b      	ldr	r3, [r3, #24]
 800e0ac:	009b      	lsls	r3, r3, #2
 800e0ae:	693a      	ldr	r2, [r7, #16]
 800e0b0:	4313      	orrs	r3, r2
 800e0b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	693a      	ldr	r2, [r7, #16]
 800e0b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	68fa      	ldr	r2, [r7, #12]
 800e0be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	685a      	ldr	r2, [r3, #4]
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	697a      	ldr	r2, [r7, #20]
 800e0cc:	621a      	str	r2, [r3, #32]
}
 800e0ce:	bf00      	nop
 800e0d0:	371c      	adds	r7, #28
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d8:	4770      	bx	lr
 800e0da:	bf00      	nop
 800e0dc:	40010000 	.word	0x40010000
 800e0e0:	40010400 	.word	0x40010400

0800e0e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e0e4:	b480      	push	{r7}
 800e0e6:	b087      	sub	sp, #28
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
 800e0ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6a1b      	ldr	r3, [r3, #32]
 800e0f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6a1b      	ldr	r3, [r3, #32]
 800e0fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	685b      	ldr	r3, [r3, #4]
 800e104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	69db      	ldr	r3, [r3, #28]
 800e10a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	f023 0303 	bic.w	r3, r3, #3
 800e11a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	68fa      	ldr	r2, [r7, #12]
 800e122:	4313      	orrs	r3, r2
 800e124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e12c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	689b      	ldr	r3, [r3, #8]
 800e132:	021b      	lsls	r3, r3, #8
 800e134:	697a      	ldr	r2, [r7, #20]
 800e136:	4313      	orrs	r3, r2
 800e138:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	4a21      	ldr	r2, [pc, #132]	; (800e1c4 <TIM_OC3_SetConfig+0xe0>)
 800e13e:	4293      	cmp	r3, r2
 800e140:	d003      	beq.n	800e14a <TIM_OC3_SetConfig+0x66>
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	4a20      	ldr	r2, [pc, #128]	; (800e1c8 <TIM_OC3_SetConfig+0xe4>)
 800e146:	4293      	cmp	r3, r2
 800e148:	d10d      	bne.n	800e166 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e14a:	697b      	ldr	r3, [r7, #20]
 800e14c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e150:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	68db      	ldr	r3, [r3, #12]
 800e156:	021b      	lsls	r3, r3, #8
 800e158:	697a      	ldr	r2, [r7, #20]
 800e15a:	4313      	orrs	r3, r2
 800e15c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	4a16      	ldr	r2, [pc, #88]	; (800e1c4 <TIM_OC3_SetConfig+0xe0>)
 800e16a:	4293      	cmp	r3, r2
 800e16c:	d003      	beq.n	800e176 <TIM_OC3_SetConfig+0x92>
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	4a15      	ldr	r2, [pc, #84]	; (800e1c8 <TIM_OC3_SetConfig+0xe4>)
 800e172:	4293      	cmp	r3, r2
 800e174:	d113      	bne.n	800e19e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e17c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e17e:	693b      	ldr	r3, [r7, #16]
 800e180:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	695b      	ldr	r3, [r3, #20]
 800e18a:	011b      	lsls	r3, r3, #4
 800e18c:	693a      	ldr	r2, [r7, #16]
 800e18e:	4313      	orrs	r3, r2
 800e190:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	699b      	ldr	r3, [r3, #24]
 800e196:	011b      	lsls	r3, r3, #4
 800e198:	693a      	ldr	r2, [r7, #16]
 800e19a:	4313      	orrs	r3, r2
 800e19c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	693a      	ldr	r2, [r7, #16]
 800e1a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	68fa      	ldr	r2, [r7, #12]
 800e1a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	685a      	ldr	r2, [r3, #4]
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	697a      	ldr	r2, [r7, #20]
 800e1b6:	621a      	str	r2, [r3, #32]
}
 800e1b8:	bf00      	nop
 800e1ba:	371c      	adds	r7, #28
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c2:	4770      	bx	lr
 800e1c4:	40010000 	.word	0x40010000
 800e1c8:	40010400 	.word	0x40010400

0800e1cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e1cc:	b480      	push	{r7}
 800e1ce:	b087      	sub	sp, #28
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
 800e1d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6a1b      	ldr	r3, [r3, #32]
 800e1da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6a1b      	ldr	r3, [r3, #32]
 800e1e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	685b      	ldr	r3, [r3, #4]
 800e1ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	69db      	ldr	r3, [r3, #28]
 800e1f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e1fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	021b      	lsls	r3, r3, #8
 800e20a:	68fa      	ldr	r2, [r7, #12]
 800e20c:	4313      	orrs	r3, r2
 800e20e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e216:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e218:	683b      	ldr	r3, [r7, #0]
 800e21a:	689b      	ldr	r3, [r3, #8]
 800e21c:	031b      	lsls	r3, r3, #12
 800e21e:	693a      	ldr	r2, [r7, #16]
 800e220:	4313      	orrs	r3, r2
 800e222:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	4a12      	ldr	r2, [pc, #72]	; (800e270 <TIM_OC4_SetConfig+0xa4>)
 800e228:	4293      	cmp	r3, r2
 800e22a:	d003      	beq.n	800e234 <TIM_OC4_SetConfig+0x68>
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	4a11      	ldr	r2, [pc, #68]	; (800e274 <TIM_OC4_SetConfig+0xa8>)
 800e230:	4293      	cmp	r3, r2
 800e232:	d109      	bne.n	800e248 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e23a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	695b      	ldr	r3, [r3, #20]
 800e240:	019b      	lsls	r3, r3, #6
 800e242:	697a      	ldr	r2, [r7, #20]
 800e244:	4313      	orrs	r3, r2
 800e246:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	697a      	ldr	r2, [r7, #20]
 800e24c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	68fa      	ldr	r2, [r7, #12]
 800e252:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	685a      	ldr	r2, [r3, #4]
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	693a      	ldr	r2, [r7, #16]
 800e260:	621a      	str	r2, [r3, #32]
}
 800e262:	bf00      	nop
 800e264:	371c      	adds	r7, #28
 800e266:	46bd      	mov	sp, r7
 800e268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26c:	4770      	bx	lr
 800e26e:	bf00      	nop
 800e270:	40010000 	.word	0x40010000
 800e274:	40010400 	.word	0x40010400

0800e278 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e278:	b480      	push	{r7}
 800e27a:	b085      	sub	sp, #20
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e288:	2b01      	cmp	r3, #1
 800e28a:	d101      	bne.n	800e290 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e28c:	2302      	movs	r3, #2
 800e28e:	e05a      	b.n	800e346 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2201      	movs	r2, #1
 800e294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2202      	movs	r2, #2
 800e29c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	685b      	ldr	r3, [r3, #4]
 800e2a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	689b      	ldr	r3, [r3, #8]
 800e2ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e2b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	68fa      	ldr	r2, [r7, #12]
 800e2be:	4313      	orrs	r3, r2
 800e2c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	68fa      	ldr	r2, [r7, #12]
 800e2c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	4a21      	ldr	r2, [pc, #132]	; (800e354 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e2d0:	4293      	cmp	r3, r2
 800e2d2:	d022      	beq.n	800e31a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2dc:	d01d      	beq.n	800e31a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	4a1d      	ldr	r2, [pc, #116]	; (800e358 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e2e4:	4293      	cmp	r3, r2
 800e2e6:	d018      	beq.n	800e31a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	4a1b      	ldr	r2, [pc, #108]	; (800e35c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e2ee:	4293      	cmp	r3, r2
 800e2f0:	d013      	beq.n	800e31a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	4a1a      	ldr	r2, [pc, #104]	; (800e360 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e2f8:	4293      	cmp	r3, r2
 800e2fa:	d00e      	beq.n	800e31a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	4a18      	ldr	r2, [pc, #96]	; (800e364 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e302:	4293      	cmp	r3, r2
 800e304:	d009      	beq.n	800e31a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	4a17      	ldr	r2, [pc, #92]	; (800e368 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e30c:	4293      	cmp	r3, r2
 800e30e:	d004      	beq.n	800e31a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	4a15      	ldr	r2, [pc, #84]	; (800e36c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e316:	4293      	cmp	r3, r2
 800e318:	d10c      	bne.n	800e334 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e320:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	685b      	ldr	r3, [r3, #4]
 800e326:	68ba      	ldr	r2, [r7, #8]
 800e328:	4313      	orrs	r3, r2
 800e32a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	68ba      	ldr	r2, [r7, #8]
 800e332:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2201      	movs	r2, #1
 800e338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2200      	movs	r2, #0
 800e340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e344:	2300      	movs	r3, #0
}
 800e346:	4618      	mov	r0, r3
 800e348:	3714      	adds	r7, #20
 800e34a:	46bd      	mov	sp, r7
 800e34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e350:	4770      	bx	lr
 800e352:	bf00      	nop
 800e354:	40010000 	.word	0x40010000
 800e358:	40000400 	.word	0x40000400
 800e35c:	40000800 	.word	0x40000800
 800e360:	40000c00 	.word	0x40000c00
 800e364:	40010400 	.word	0x40010400
 800e368:	40014000 	.word	0x40014000
 800e36c:	40001800 	.word	0x40001800

0800e370 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e370:	b480      	push	{r7}
 800e372:	b083      	sub	sp, #12
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e378:	bf00      	nop
 800e37a:	370c      	adds	r7, #12
 800e37c:	46bd      	mov	sp, r7
 800e37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e382:	4770      	bx	lr

0800e384 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e384:	b480      	push	{r7}
 800e386:	b083      	sub	sp, #12
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e38c:	bf00      	nop
 800e38e:	370c      	adds	r7, #12
 800e390:	46bd      	mov	sp, r7
 800e392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e396:	4770      	bx	lr

0800e398 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b082      	sub	sp, #8
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d101      	bne.n	800e3aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e3a6:	2301      	movs	r3, #1
 800e3a8:	e03f      	b.n	800e42a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e3b0:	b2db      	uxtb	r3, r3
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d106      	bne.n	800e3c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f7f4 fd68 	bl	8002e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2224      	movs	r2, #36	; 0x24
 800e3c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	68da      	ldr	r2, [r3, #12]
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e3da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f000 f9cb 	bl	800e778 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	691a      	ldr	r2, [r3, #16]
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e3f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	695a      	ldr	r2, [r3, #20]
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e400:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	68da      	ldr	r2, [r3, #12]
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e410:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2200      	movs	r2, #0
 800e416:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2220      	movs	r2, #32
 800e41c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2220      	movs	r2, #32
 800e424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800e428:	2300      	movs	r3, #0
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	3708      	adds	r7, #8
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}

0800e432 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e432:	b580      	push	{r7, lr}
 800e434:	b08a      	sub	sp, #40	; 0x28
 800e436:	af02      	add	r7, sp, #8
 800e438:	60f8      	str	r0, [r7, #12]
 800e43a:	60b9      	str	r1, [r7, #8]
 800e43c:	603b      	str	r3, [r7, #0]
 800e43e:	4613      	mov	r3, r2
 800e440:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800e442:	2300      	movs	r3, #0
 800e444:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e44c:	b2db      	uxtb	r3, r3
 800e44e:	2b20      	cmp	r3, #32
 800e450:	d17c      	bne.n	800e54c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e452:	68bb      	ldr	r3, [r7, #8]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d002      	beq.n	800e45e <HAL_UART_Transmit+0x2c>
 800e458:	88fb      	ldrh	r3, [r7, #6]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d101      	bne.n	800e462 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800e45e:	2301      	movs	r3, #1
 800e460:	e075      	b.n	800e54e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e468:	2b01      	cmp	r3, #1
 800e46a:	d101      	bne.n	800e470 <HAL_UART_Transmit+0x3e>
 800e46c:	2302      	movs	r3, #2
 800e46e:	e06e      	b.n	800e54e <HAL_UART_Transmit+0x11c>
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	2201      	movs	r2, #1
 800e474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	2200      	movs	r2, #0
 800e47c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	2221      	movs	r2, #33	; 0x21
 800e482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e486:	f7f9 ff8f 	bl	80083a8 <HAL_GetTick>
 800e48a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	88fa      	ldrh	r2, [r7, #6]
 800e490:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	88fa      	ldrh	r2, [r7, #6]
 800e496:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	689b      	ldr	r3, [r3, #8]
 800e49c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e4a0:	d108      	bne.n	800e4b4 <HAL_UART_Transmit+0x82>
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	691b      	ldr	r3, [r3, #16]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d104      	bne.n	800e4b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	61bb      	str	r3, [r7, #24]
 800e4b2:	e003      	b.n	800e4bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	2200      	movs	r2, #0
 800e4c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800e4c4:	e02a      	b.n	800e51c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e4c6:	683b      	ldr	r3, [r7, #0]
 800e4c8:	9300      	str	r3, [sp, #0]
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	2180      	movs	r1, #128	; 0x80
 800e4d0:	68f8      	ldr	r0, [r7, #12]
 800e4d2:	f000 f8e2 	bl	800e69a <UART_WaitOnFlagUntilTimeout>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d001      	beq.n	800e4e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800e4dc:	2303      	movs	r3, #3
 800e4de:	e036      	b.n	800e54e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800e4e0:	69fb      	ldr	r3, [r7, #28]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d10b      	bne.n	800e4fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e4e6:	69bb      	ldr	r3, [r7, #24]
 800e4e8:	881b      	ldrh	r3, [r3, #0]
 800e4ea:	461a      	mov	r2, r3
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e4f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800e4f6:	69bb      	ldr	r3, [r7, #24]
 800e4f8:	3302      	adds	r3, #2
 800e4fa:	61bb      	str	r3, [r7, #24]
 800e4fc:	e007      	b.n	800e50e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800e4fe:	69fb      	ldr	r3, [r7, #28]
 800e500:	781a      	ldrb	r2, [r3, #0]
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800e508:	69fb      	ldr	r3, [r7, #28]
 800e50a:	3301      	adds	r3, #1
 800e50c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e512:	b29b      	uxth	r3, r3
 800e514:	3b01      	subs	r3, #1
 800e516:	b29a      	uxth	r2, r3
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e520:	b29b      	uxth	r3, r3
 800e522:	2b00      	cmp	r3, #0
 800e524:	d1cf      	bne.n	800e4c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	9300      	str	r3, [sp, #0]
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	2200      	movs	r2, #0
 800e52e:	2140      	movs	r1, #64	; 0x40
 800e530:	68f8      	ldr	r0, [r7, #12]
 800e532:	f000 f8b2 	bl	800e69a <UART_WaitOnFlagUntilTimeout>
 800e536:	4603      	mov	r3, r0
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d001      	beq.n	800e540 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800e53c:	2303      	movs	r3, #3
 800e53e:	e006      	b.n	800e54e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	2220      	movs	r2, #32
 800e544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800e548:	2300      	movs	r3, #0
 800e54a:	e000      	b.n	800e54e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800e54c:	2302      	movs	r3, #2
  }
}
 800e54e:	4618      	mov	r0, r3
 800e550:	3720      	adds	r7, #32
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}

0800e556 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e556:	b580      	push	{r7, lr}
 800e558:	b08a      	sub	sp, #40	; 0x28
 800e55a:	af02      	add	r7, sp, #8
 800e55c:	60f8      	str	r0, [r7, #12]
 800e55e:	60b9      	str	r1, [r7, #8]
 800e560:	603b      	str	r3, [r7, #0]
 800e562:	4613      	mov	r3, r2
 800e564:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800e566:	2300      	movs	r3, #0
 800e568:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e570:	b2db      	uxtb	r3, r3
 800e572:	2b20      	cmp	r3, #32
 800e574:	f040 808c 	bne.w	800e690 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d002      	beq.n	800e584 <HAL_UART_Receive+0x2e>
 800e57e:	88fb      	ldrh	r3, [r7, #6]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d101      	bne.n	800e588 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800e584:	2301      	movs	r3, #1
 800e586:	e084      	b.n	800e692 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e58e:	2b01      	cmp	r3, #1
 800e590:	d101      	bne.n	800e596 <HAL_UART_Receive+0x40>
 800e592:	2302      	movs	r3, #2
 800e594:	e07d      	b.n	800e692 <HAL_UART_Receive+0x13c>
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	2201      	movs	r2, #1
 800e59a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	2222      	movs	r2, #34	; 0x22
 800e5a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e5b2:	f7f9 fef9 	bl	80083a8 <HAL_GetTick>
 800e5b6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	88fa      	ldrh	r2, [r7, #6]
 800e5bc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	88fa      	ldrh	r2, [r7, #6]
 800e5c2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	689b      	ldr	r3, [r3, #8]
 800e5c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e5cc:	d108      	bne.n	800e5e0 <HAL_UART_Receive+0x8a>
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	691b      	ldr	r3, [r3, #16]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d104      	bne.n	800e5e0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e5da:	68bb      	ldr	r3, [r7, #8]
 800e5dc:	61bb      	str	r3, [r7, #24]
 800e5de:	e003      	b.n	800e5e8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800e5f0:	e043      	b.n	800e67a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	9300      	str	r3, [sp, #0]
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	2120      	movs	r1, #32
 800e5fc:	68f8      	ldr	r0, [r7, #12]
 800e5fe:	f000 f84c 	bl	800e69a <UART_WaitOnFlagUntilTimeout>
 800e602:	4603      	mov	r3, r0
 800e604:	2b00      	cmp	r3, #0
 800e606:	d001      	beq.n	800e60c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800e608:	2303      	movs	r3, #3
 800e60a:	e042      	b.n	800e692 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800e60c:	69fb      	ldr	r3, [r7, #28]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d10c      	bne.n	800e62c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	685b      	ldr	r3, [r3, #4]
 800e618:	b29b      	uxth	r3, r3
 800e61a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e61e:	b29a      	uxth	r2, r3
 800e620:	69bb      	ldr	r3, [r7, #24]
 800e622:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800e624:	69bb      	ldr	r3, [r7, #24]
 800e626:	3302      	adds	r3, #2
 800e628:	61bb      	str	r3, [r7, #24]
 800e62a:	e01f      	b.n	800e66c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	689b      	ldr	r3, [r3, #8]
 800e630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e634:	d007      	beq.n	800e646 <HAL_UART_Receive+0xf0>
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	689b      	ldr	r3, [r3, #8]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d10a      	bne.n	800e654 <HAL_UART_Receive+0xfe>
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	691b      	ldr	r3, [r3, #16]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d106      	bne.n	800e654 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	685b      	ldr	r3, [r3, #4]
 800e64c:	b2da      	uxtb	r2, r3
 800e64e:	69fb      	ldr	r3, [r7, #28]
 800e650:	701a      	strb	r2, [r3, #0]
 800e652:	e008      	b.n	800e666 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	685b      	ldr	r3, [r3, #4]
 800e65a:	b2db      	uxtb	r3, r3
 800e65c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e660:	b2da      	uxtb	r2, r3
 800e662:	69fb      	ldr	r3, [r7, #28]
 800e664:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800e666:	69fb      	ldr	r3, [r7, #28]
 800e668:	3301      	adds	r3, #1
 800e66a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e670:	b29b      	uxth	r3, r3
 800e672:	3b01      	subs	r3, #1
 800e674:	b29a      	uxth	r2, r3
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e67e:	b29b      	uxth	r3, r3
 800e680:	2b00      	cmp	r3, #0
 800e682:	d1b6      	bne.n	800e5f2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	2220      	movs	r2, #32
 800e688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800e68c:	2300      	movs	r3, #0
 800e68e:	e000      	b.n	800e692 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800e690:	2302      	movs	r3, #2
  }
}
 800e692:	4618      	mov	r0, r3
 800e694:	3720      	adds	r7, #32
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}

0800e69a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800e69a:	b580      	push	{r7, lr}
 800e69c:	b090      	sub	sp, #64	; 0x40
 800e69e:	af00      	add	r7, sp, #0
 800e6a0:	60f8      	str	r0, [r7, #12]
 800e6a2:	60b9      	str	r1, [r7, #8]
 800e6a4:	603b      	str	r3, [r7, #0]
 800e6a6:	4613      	mov	r3, r2
 800e6a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e6aa:	e050      	b.n	800e74e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e6ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6b2:	d04c      	beq.n	800e74e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800e6b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d007      	beq.n	800e6ca <UART_WaitOnFlagUntilTimeout+0x30>
 800e6ba:	f7f9 fe75 	bl	80083a8 <HAL_GetTick>
 800e6be:	4602      	mov	r2, r0
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	1ad3      	subs	r3, r2, r3
 800e6c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e6c6:	429a      	cmp	r2, r3
 800e6c8:	d241      	bcs.n	800e74e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	330c      	adds	r3, #12
 800e6d0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d4:	e853 3f00 	ldrex	r3, [r3]
 800e6d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e6e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	330c      	adds	r3, #12
 800e6e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e6ea:	637a      	str	r2, [r7, #52]	; 0x34
 800e6ec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e6f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6f2:	e841 2300 	strex	r3, r2, [r1]
 800e6f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d1e5      	bne.n	800e6ca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	3314      	adds	r3, #20
 800e704:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e706:	697b      	ldr	r3, [r7, #20]
 800e708:	e853 3f00 	ldrex	r3, [r3]
 800e70c:	613b      	str	r3, [r7, #16]
   return(result);
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	f023 0301 	bic.w	r3, r3, #1
 800e714:	63bb      	str	r3, [r7, #56]	; 0x38
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	3314      	adds	r3, #20
 800e71c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e71e:	623a      	str	r2, [r7, #32]
 800e720:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e722:	69f9      	ldr	r1, [r7, #28]
 800e724:	6a3a      	ldr	r2, [r7, #32]
 800e726:	e841 2300 	strex	r3, r2, [r1]
 800e72a:	61bb      	str	r3, [r7, #24]
   return(result);
 800e72c:	69bb      	ldr	r3, [r7, #24]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d1e5      	bne.n	800e6fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	2220      	movs	r2, #32
 800e736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	2220      	movs	r2, #32
 800e73e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	2200      	movs	r2, #0
 800e746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800e74a:	2303      	movs	r3, #3
 800e74c:	e00f      	b.n	800e76e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	681a      	ldr	r2, [r3, #0]
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	4013      	ands	r3, r2
 800e758:	68ba      	ldr	r2, [r7, #8]
 800e75a:	429a      	cmp	r2, r3
 800e75c:	bf0c      	ite	eq
 800e75e:	2301      	moveq	r3, #1
 800e760:	2300      	movne	r3, #0
 800e762:	b2db      	uxtb	r3, r3
 800e764:	461a      	mov	r2, r3
 800e766:	79fb      	ldrb	r3, [r7, #7]
 800e768:	429a      	cmp	r2, r3
 800e76a:	d09f      	beq.n	800e6ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e76c:	2300      	movs	r3, #0
}
 800e76e:	4618      	mov	r0, r3
 800e770:	3740      	adds	r7, #64	; 0x40
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}
	...

0800e778 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e77c:	b09f      	sub	sp, #124	; 0x7c
 800e77e:	af00      	add	r7, sp, #0
 800e780:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	691b      	ldr	r3, [r3, #16]
 800e788:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e78c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e78e:	68d9      	ldr	r1, [r3, #12]
 800e790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e792:	681a      	ldr	r2, [r3, #0]
 800e794:	ea40 0301 	orr.w	r3, r0, r1
 800e798:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e79a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e79c:	689a      	ldr	r2, [r3, #8]
 800e79e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7a0:	691b      	ldr	r3, [r3, #16]
 800e7a2:	431a      	orrs	r2, r3
 800e7a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7a6:	695b      	ldr	r3, [r3, #20]
 800e7a8:	431a      	orrs	r2, r3
 800e7aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7ac:	69db      	ldr	r3, [r3, #28]
 800e7ae:	4313      	orrs	r3, r2
 800e7b0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800e7b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	68db      	ldr	r3, [r3, #12]
 800e7b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800e7bc:	f021 010c 	bic.w	r1, r1, #12
 800e7c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7c2:	681a      	ldr	r2, [r3, #0]
 800e7c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e7c6:	430b      	orrs	r3, r1
 800e7c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e7ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	695b      	ldr	r3, [r3, #20]
 800e7d0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800e7d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7d6:	6999      	ldr	r1, [r3, #24]
 800e7d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7da:	681a      	ldr	r2, [r3, #0]
 800e7dc:	ea40 0301 	orr.w	r3, r0, r1
 800e7e0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e7e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7e4:	681a      	ldr	r2, [r3, #0]
 800e7e6:	4bc5      	ldr	r3, [pc, #788]	; (800eafc <UART_SetConfig+0x384>)
 800e7e8:	429a      	cmp	r2, r3
 800e7ea:	d004      	beq.n	800e7f6 <UART_SetConfig+0x7e>
 800e7ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7ee:	681a      	ldr	r2, [r3, #0]
 800e7f0:	4bc3      	ldr	r3, [pc, #780]	; (800eb00 <UART_SetConfig+0x388>)
 800e7f2:	429a      	cmp	r2, r3
 800e7f4:	d103      	bne.n	800e7fe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e7f6:	f7fd fa65 	bl	800bcc4 <HAL_RCC_GetPCLK2Freq>
 800e7fa:	6778      	str	r0, [r7, #116]	; 0x74
 800e7fc:	e002      	b.n	800e804 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e7fe:	f7fd fa4d 	bl	800bc9c <HAL_RCC_GetPCLK1Freq>
 800e802:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e804:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e806:	69db      	ldr	r3, [r3, #28]
 800e808:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e80c:	f040 80b6 	bne.w	800e97c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e810:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e812:	461c      	mov	r4, r3
 800e814:	f04f 0500 	mov.w	r5, #0
 800e818:	4622      	mov	r2, r4
 800e81a:	462b      	mov	r3, r5
 800e81c:	1891      	adds	r1, r2, r2
 800e81e:	6439      	str	r1, [r7, #64]	; 0x40
 800e820:	415b      	adcs	r3, r3
 800e822:	647b      	str	r3, [r7, #68]	; 0x44
 800e824:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e828:	1912      	adds	r2, r2, r4
 800e82a:	eb45 0303 	adc.w	r3, r5, r3
 800e82e:	f04f 0000 	mov.w	r0, #0
 800e832:	f04f 0100 	mov.w	r1, #0
 800e836:	00d9      	lsls	r1, r3, #3
 800e838:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e83c:	00d0      	lsls	r0, r2, #3
 800e83e:	4602      	mov	r2, r0
 800e840:	460b      	mov	r3, r1
 800e842:	1911      	adds	r1, r2, r4
 800e844:	6639      	str	r1, [r7, #96]	; 0x60
 800e846:	416b      	adcs	r3, r5
 800e848:	667b      	str	r3, [r7, #100]	; 0x64
 800e84a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e84c:	685b      	ldr	r3, [r3, #4]
 800e84e:	461a      	mov	r2, r3
 800e850:	f04f 0300 	mov.w	r3, #0
 800e854:	1891      	adds	r1, r2, r2
 800e856:	63b9      	str	r1, [r7, #56]	; 0x38
 800e858:	415b      	adcs	r3, r3
 800e85a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e85c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e860:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800e864:	f7f2 fa20 	bl	8000ca8 <__aeabi_uldivmod>
 800e868:	4602      	mov	r2, r0
 800e86a:	460b      	mov	r3, r1
 800e86c:	4ba5      	ldr	r3, [pc, #660]	; (800eb04 <UART_SetConfig+0x38c>)
 800e86e:	fba3 2302 	umull	r2, r3, r3, r2
 800e872:	095b      	lsrs	r3, r3, #5
 800e874:	011e      	lsls	r6, r3, #4
 800e876:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e878:	461c      	mov	r4, r3
 800e87a:	f04f 0500 	mov.w	r5, #0
 800e87e:	4622      	mov	r2, r4
 800e880:	462b      	mov	r3, r5
 800e882:	1891      	adds	r1, r2, r2
 800e884:	6339      	str	r1, [r7, #48]	; 0x30
 800e886:	415b      	adcs	r3, r3
 800e888:	637b      	str	r3, [r7, #52]	; 0x34
 800e88a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800e88e:	1912      	adds	r2, r2, r4
 800e890:	eb45 0303 	adc.w	r3, r5, r3
 800e894:	f04f 0000 	mov.w	r0, #0
 800e898:	f04f 0100 	mov.w	r1, #0
 800e89c:	00d9      	lsls	r1, r3, #3
 800e89e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e8a2:	00d0      	lsls	r0, r2, #3
 800e8a4:	4602      	mov	r2, r0
 800e8a6:	460b      	mov	r3, r1
 800e8a8:	1911      	adds	r1, r2, r4
 800e8aa:	65b9      	str	r1, [r7, #88]	; 0x58
 800e8ac:	416b      	adcs	r3, r5
 800e8ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e8b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8b2:	685b      	ldr	r3, [r3, #4]
 800e8b4:	461a      	mov	r2, r3
 800e8b6:	f04f 0300 	mov.w	r3, #0
 800e8ba:	1891      	adds	r1, r2, r2
 800e8bc:	62b9      	str	r1, [r7, #40]	; 0x28
 800e8be:	415b      	adcs	r3, r3
 800e8c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e8c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e8c6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800e8ca:	f7f2 f9ed 	bl	8000ca8 <__aeabi_uldivmod>
 800e8ce:	4602      	mov	r2, r0
 800e8d0:	460b      	mov	r3, r1
 800e8d2:	4b8c      	ldr	r3, [pc, #560]	; (800eb04 <UART_SetConfig+0x38c>)
 800e8d4:	fba3 1302 	umull	r1, r3, r3, r2
 800e8d8:	095b      	lsrs	r3, r3, #5
 800e8da:	2164      	movs	r1, #100	; 0x64
 800e8dc:	fb01 f303 	mul.w	r3, r1, r3
 800e8e0:	1ad3      	subs	r3, r2, r3
 800e8e2:	00db      	lsls	r3, r3, #3
 800e8e4:	3332      	adds	r3, #50	; 0x32
 800e8e6:	4a87      	ldr	r2, [pc, #540]	; (800eb04 <UART_SetConfig+0x38c>)
 800e8e8:	fba2 2303 	umull	r2, r3, r2, r3
 800e8ec:	095b      	lsrs	r3, r3, #5
 800e8ee:	005b      	lsls	r3, r3, #1
 800e8f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e8f4:	441e      	add	r6, r3
 800e8f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f04f 0100 	mov.w	r1, #0
 800e8fe:	4602      	mov	r2, r0
 800e900:	460b      	mov	r3, r1
 800e902:	1894      	adds	r4, r2, r2
 800e904:	623c      	str	r4, [r7, #32]
 800e906:	415b      	adcs	r3, r3
 800e908:	627b      	str	r3, [r7, #36]	; 0x24
 800e90a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e90e:	1812      	adds	r2, r2, r0
 800e910:	eb41 0303 	adc.w	r3, r1, r3
 800e914:	f04f 0400 	mov.w	r4, #0
 800e918:	f04f 0500 	mov.w	r5, #0
 800e91c:	00dd      	lsls	r5, r3, #3
 800e91e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e922:	00d4      	lsls	r4, r2, #3
 800e924:	4622      	mov	r2, r4
 800e926:	462b      	mov	r3, r5
 800e928:	1814      	adds	r4, r2, r0
 800e92a:	653c      	str	r4, [r7, #80]	; 0x50
 800e92c:	414b      	adcs	r3, r1
 800e92e:	657b      	str	r3, [r7, #84]	; 0x54
 800e930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e932:	685b      	ldr	r3, [r3, #4]
 800e934:	461a      	mov	r2, r3
 800e936:	f04f 0300 	mov.w	r3, #0
 800e93a:	1891      	adds	r1, r2, r2
 800e93c:	61b9      	str	r1, [r7, #24]
 800e93e:	415b      	adcs	r3, r3
 800e940:	61fb      	str	r3, [r7, #28]
 800e942:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e946:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e94a:	f7f2 f9ad 	bl	8000ca8 <__aeabi_uldivmod>
 800e94e:	4602      	mov	r2, r0
 800e950:	460b      	mov	r3, r1
 800e952:	4b6c      	ldr	r3, [pc, #432]	; (800eb04 <UART_SetConfig+0x38c>)
 800e954:	fba3 1302 	umull	r1, r3, r3, r2
 800e958:	095b      	lsrs	r3, r3, #5
 800e95a:	2164      	movs	r1, #100	; 0x64
 800e95c:	fb01 f303 	mul.w	r3, r1, r3
 800e960:	1ad3      	subs	r3, r2, r3
 800e962:	00db      	lsls	r3, r3, #3
 800e964:	3332      	adds	r3, #50	; 0x32
 800e966:	4a67      	ldr	r2, [pc, #412]	; (800eb04 <UART_SetConfig+0x38c>)
 800e968:	fba2 2303 	umull	r2, r3, r2, r3
 800e96c:	095b      	lsrs	r3, r3, #5
 800e96e:	f003 0207 	and.w	r2, r3, #7
 800e972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	4432      	add	r2, r6
 800e978:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e97a:	e0b9      	b.n	800eaf0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e97c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e97e:	461c      	mov	r4, r3
 800e980:	f04f 0500 	mov.w	r5, #0
 800e984:	4622      	mov	r2, r4
 800e986:	462b      	mov	r3, r5
 800e988:	1891      	adds	r1, r2, r2
 800e98a:	6139      	str	r1, [r7, #16]
 800e98c:	415b      	adcs	r3, r3
 800e98e:	617b      	str	r3, [r7, #20]
 800e990:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e994:	1912      	adds	r2, r2, r4
 800e996:	eb45 0303 	adc.w	r3, r5, r3
 800e99a:	f04f 0000 	mov.w	r0, #0
 800e99e:	f04f 0100 	mov.w	r1, #0
 800e9a2:	00d9      	lsls	r1, r3, #3
 800e9a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e9a8:	00d0      	lsls	r0, r2, #3
 800e9aa:	4602      	mov	r2, r0
 800e9ac:	460b      	mov	r3, r1
 800e9ae:	eb12 0804 	adds.w	r8, r2, r4
 800e9b2:	eb43 0905 	adc.w	r9, r3, r5
 800e9b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9b8:	685b      	ldr	r3, [r3, #4]
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f04f 0100 	mov.w	r1, #0
 800e9c0:	f04f 0200 	mov.w	r2, #0
 800e9c4:	f04f 0300 	mov.w	r3, #0
 800e9c8:	008b      	lsls	r3, r1, #2
 800e9ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e9ce:	0082      	lsls	r2, r0, #2
 800e9d0:	4640      	mov	r0, r8
 800e9d2:	4649      	mov	r1, r9
 800e9d4:	f7f2 f968 	bl	8000ca8 <__aeabi_uldivmod>
 800e9d8:	4602      	mov	r2, r0
 800e9da:	460b      	mov	r3, r1
 800e9dc:	4b49      	ldr	r3, [pc, #292]	; (800eb04 <UART_SetConfig+0x38c>)
 800e9de:	fba3 2302 	umull	r2, r3, r3, r2
 800e9e2:	095b      	lsrs	r3, r3, #5
 800e9e4:	011e      	lsls	r6, r3, #4
 800e9e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f04f 0100 	mov.w	r1, #0
 800e9ee:	4602      	mov	r2, r0
 800e9f0:	460b      	mov	r3, r1
 800e9f2:	1894      	adds	r4, r2, r2
 800e9f4:	60bc      	str	r4, [r7, #8]
 800e9f6:	415b      	adcs	r3, r3
 800e9f8:	60fb      	str	r3, [r7, #12]
 800e9fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e9fe:	1812      	adds	r2, r2, r0
 800ea00:	eb41 0303 	adc.w	r3, r1, r3
 800ea04:	f04f 0400 	mov.w	r4, #0
 800ea08:	f04f 0500 	mov.w	r5, #0
 800ea0c:	00dd      	lsls	r5, r3, #3
 800ea0e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ea12:	00d4      	lsls	r4, r2, #3
 800ea14:	4622      	mov	r2, r4
 800ea16:	462b      	mov	r3, r5
 800ea18:	1814      	adds	r4, r2, r0
 800ea1a:	64bc      	str	r4, [r7, #72]	; 0x48
 800ea1c:	414b      	adcs	r3, r1
 800ea1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea22:	685b      	ldr	r3, [r3, #4]
 800ea24:	4618      	mov	r0, r3
 800ea26:	f04f 0100 	mov.w	r1, #0
 800ea2a:	f04f 0200 	mov.w	r2, #0
 800ea2e:	f04f 0300 	mov.w	r3, #0
 800ea32:	008b      	lsls	r3, r1, #2
 800ea34:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ea38:	0082      	lsls	r2, r0, #2
 800ea3a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800ea3e:	f7f2 f933 	bl	8000ca8 <__aeabi_uldivmod>
 800ea42:	4602      	mov	r2, r0
 800ea44:	460b      	mov	r3, r1
 800ea46:	4b2f      	ldr	r3, [pc, #188]	; (800eb04 <UART_SetConfig+0x38c>)
 800ea48:	fba3 1302 	umull	r1, r3, r3, r2
 800ea4c:	095b      	lsrs	r3, r3, #5
 800ea4e:	2164      	movs	r1, #100	; 0x64
 800ea50:	fb01 f303 	mul.w	r3, r1, r3
 800ea54:	1ad3      	subs	r3, r2, r3
 800ea56:	011b      	lsls	r3, r3, #4
 800ea58:	3332      	adds	r3, #50	; 0x32
 800ea5a:	4a2a      	ldr	r2, [pc, #168]	; (800eb04 <UART_SetConfig+0x38c>)
 800ea5c:	fba2 2303 	umull	r2, r3, r2, r3
 800ea60:	095b      	lsrs	r3, r3, #5
 800ea62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ea66:	441e      	add	r6, r3
 800ea68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f04f 0100 	mov.w	r1, #0
 800ea70:	4602      	mov	r2, r0
 800ea72:	460b      	mov	r3, r1
 800ea74:	1894      	adds	r4, r2, r2
 800ea76:	603c      	str	r4, [r7, #0]
 800ea78:	415b      	adcs	r3, r3
 800ea7a:	607b      	str	r3, [r7, #4]
 800ea7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea80:	1812      	adds	r2, r2, r0
 800ea82:	eb41 0303 	adc.w	r3, r1, r3
 800ea86:	f04f 0400 	mov.w	r4, #0
 800ea8a:	f04f 0500 	mov.w	r5, #0
 800ea8e:	00dd      	lsls	r5, r3, #3
 800ea90:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ea94:	00d4      	lsls	r4, r2, #3
 800ea96:	4622      	mov	r2, r4
 800ea98:	462b      	mov	r3, r5
 800ea9a:	eb12 0a00 	adds.w	sl, r2, r0
 800ea9e:	eb43 0b01 	adc.w	fp, r3, r1
 800eaa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eaa4:	685b      	ldr	r3, [r3, #4]
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f04f 0100 	mov.w	r1, #0
 800eaac:	f04f 0200 	mov.w	r2, #0
 800eab0:	f04f 0300 	mov.w	r3, #0
 800eab4:	008b      	lsls	r3, r1, #2
 800eab6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800eaba:	0082      	lsls	r2, r0, #2
 800eabc:	4650      	mov	r0, sl
 800eabe:	4659      	mov	r1, fp
 800eac0:	f7f2 f8f2 	bl	8000ca8 <__aeabi_uldivmod>
 800eac4:	4602      	mov	r2, r0
 800eac6:	460b      	mov	r3, r1
 800eac8:	4b0e      	ldr	r3, [pc, #56]	; (800eb04 <UART_SetConfig+0x38c>)
 800eaca:	fba3 1302 	umull	r1, r3, r3, r2
 800eace:	095b      	lsrs	r3, r3, #5
 800ead0:	2164      	movs	r1, #100	; 0x64
 800ead2:	fb01 f303 	mul.w	r3, r1, r3
 800ead6:	1ad3      	subs	r3, r2, r3
 800ead8:	011b      	lsls	r3, r3, #4
 800eada:	3332      	adds	r3, #50	; 0x32
 800eadc:	4a09      	ldr	r2, [pc, #36]	; (800eb04 <UART_SetConfig+0x38c>)
 800eade:	fba2 2303 	umull	r2, r3, r2, r3
 800eae2:	095b      	lsrs	r3, r3, #5
 800eae4:	f003 020f 	and.w	r2, r3, #15
 800eae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	4432      	add	r2, r6
 800eaee:	609a      	str	r2, [r3, #8]
}
 800eaf0:	bf00      	nop
 800eaf2:	377c      	adds	r7, #124	; 0x7c
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eafa:	bf00      	nop
 800eafc:	40011000 	.word	0x40011000
 800eb00:	40011400 	.word	0x40011400
 800eb04:	51eb851f 	.word	0x51eb851f

0800eb08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800eb08:	b084      	sub	sp, #16
 800eb0a:	b580      	push	{r7, lr}
 800eb0c:	b084      	sub	sp, #16
 800eb0e:	af00      	add	r7, sp, #0
 800eb10:	6078      	str	r0, [r7, #4]
 800eb12:	f107 001c 	add.w	r0, r7, #28
 800eb16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800eb1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb1c:	2b01      	cmp	r3, #1
 800eb1e:	d122      	bne.n	800eb66 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	68db      	ldr	r3, [r3, #12]
 800eb30:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800eb34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb38:	687a      	ldr	r2, [r7, #4]
 800eb3a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	68db      	ldr	r3, [r3, #12]
 800eb40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800eb48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb4a:	2b01      	cmp	r3, #1
 800eb4c:	d105      	bne.n	800eb5a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	68db      	ldr	r3, [r3, #12]
 800eb52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800eb5a:	6878      	ldr	r0, [r7, #4]
 800eb5c:	f001 fb1c 	bl	8010198 <USB_CoreReset>
 800eb60:	4603      	mov	r3, r0
 800eb62:	73fb      	strb	r3, [r7, #15]
 800eb64:	e01a      	b.n	800eb9c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	68db      	ldr	r3, [r3, #12]
 800eb6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f001 fb10 	bl	8010198 <USB_CoreReset>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800eb7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d106      	bne.n	800eb90 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb86:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	639a      	str	r2, [r3, #56]	; 0x38
 800eb8e:	e005      	b.n	800eb9c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800eb9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb9e:	2b01      	cmp	r3, #1
 800eba0:	d10b      	bne.n	800ebba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	689b      	ldr	r3, [r3, #8]
 800eba6:	f043 0206 	orr.w	r2, r3, #6
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	689b      	ldr	r3, [r3, #8]
 800ebb2:	f043 0220 	orr.w	r2, r3, #32
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ebba:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	3710      	adds	r7, #16
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ebc6:	b004      	add	sp, #16
 800ebc8:	4770      	bx	lr
	...

0800ebcc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ebcc:	b480      	push	{r7}
 800ebce:	b087      	sub	sp, #28
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	60f8      	str	r0, [r7, #12]
 800ebd4:	60b9      	str	r1, [r7, #8]
 800ebd6:	4613      	mov	r3, r2
 800ebd8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ebda:	79fb      	ldrb	r3, [r7, #7]
 800ebdc:	2b02      	cmp	r3, #2
 800ebde:	d165      	bne.n	800ecac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	4a41      	ldr	r2, [pc, #260]	; (800ece8 <USB_SetTurnaroundTime+0x11c>)
 800ebe4:	4293      	cmp	r3, r2
 800ebe6:	d906      	bls.n	800ebf6 <USB_SetTurnaroundTime+0x2a>
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	4a40      	ldr	r2, [pc, #256]	; (800ecec <USB_SetTurnaroundTime+0x120>)
 800ebec:	4293      	cmp	r3, r2
 800ebee:	d202      	bcs.n	800ebf6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ebf0:	230f      	movs	r3, #15
 800ebf2:	617b      	str	r3, [r7, #20]
 800ebf4:	e062      	b.n	800ecbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	4a3c      	ldr	r2, [pc, #240]	; (800ecec <USB_SetTurnaroundTime+0x120>)
 800ebfa:	4293      	cmp	r3, r2
 800ebfc:	d306      	bcc.n	800ec0c <USB_SetTurnaroundTime+0x40>
 800ebfe:	68bb      	ldr	r3, [r7, #8]
 800ec00:	4a3b      	ldr	r2, [pc, #236]	; (800ecf0 <USB_SetTurnaroundTime+0x124>)
 800ec02:	4293      	cmp	r3, r2
 800ec04:	d202      	bcs.n	800ec0c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ec06:	230e      	movs	r3, #14
 800ec08:	617b      	str	r3, [r7, #20]
 800ec0a:	e057      	b.n	800ecbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	4a38      	ldr	r2, [pc, #224]	; (800ecf0 <USB_SetTurnaroundTime+0x124>)
 800ec10:	4293      	cmp	r3, r2
 800ec12:	d306      	bcc.n	800ec22 <USB_SetTurnaroundTime+0x56>
 800ec14:	68bb      	ldr	r3, [r7, #8]
 800ec16:	4a37      	ldr	r2, [pc, #220]	; (800ecf4 <USB_SetTurnaroundTime+0x128>)
 800ec18:	4293      	cmp	r3, r2
 800ec1a:	d202      	bcs.n	800ec22 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ec1c:	230d      	movs	r3, #13
 800ec1e:	617b      	str	r3, [r7, #20]
 800ec20:	e04c      	b.n	800ecbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ec22:	68bb      	ldr	r3, [r7, #8]
 800ec24:	4a33      	ldr	r2, [pc, #204]	; (800ecf4 <USB_SetTurnaroundTime+0x128>)
 800ec26:	4293      	cmp	r3, r2
 800ec28:	d306      	bcc.n	800ec38 <USB_SetTurnaroundTime+0x6c>
 800ec2a:	68bb      	ldr	r3, [r7, #8]
 800ec2c:	4a32      	ldr	r2, [pc, #200]	; (800ecf8 <USB_SetTurnaroundTime+0x12c>)
 800ec2e:	4293      	cmp	r3, r2
 800ec30:	d802      	bhi.n	800ec38 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ec32:	230c      	movs	r3, #12
 800ec34:	617b      	str	r3, [r7, #20]
 800ec36:	e041      	b.n	800ecbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ec38:	68bb      	ldr	r3, [r7, #8]
 800ec3a:	4a2f      	ldr	r2, [pc, #188]	; (800ecf8 <USB_SetTurnaroundTime+0x12c>)
 800ec3c:	4293      	cmp	r3, r2
 800ec3e:	d906      	bls.n	800ec4e <USB_SetTurnaroundTime+0x82>
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	4a2e      	ldr	r2, [pc, #184]	; (800ecfc <USB_SetTurnaroundTime+0x130>)
 800ec44:	4293      	cmp	r3, r2
 800ec46:	d802      	bhi.n	800ec4e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ec48:	230b      	movs	r3, #11
 800ec4a:	617b      	str	r3, [r7, #20]
 800ec4c:	e036      	b.n	800ecbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	4a2a      	ldr	r2, [pc, #168]	; (800ecfc <USB_SetTurnaroundTime+0x130>)
 800ec52:	4293      	cmp	r3, r2
 800ec54:	d906      	bls.n	800ec64 <USB_SetTurnaroundTime+0x98>
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	4a29      	ldr	r2, [pc, #164]	; (800ed00 <USB_SetTurnaroundTime+0x134>)
 800ec5a:	4293      	cmp	r3, r2
 800ec5c:	d802      	bhi.n	800ec64 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ec5e:	230a      	movs	r3, #10
 800ec60:	617b      	str	r3, [r7, #20]
 800ec62:	e02b      	b.n	800ecbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ec64:	68bb      	ldr	r3, [r7, #8]
 800ec66:	4a26      	ldr	r2, [pc, #152]	; (800ed00 <USB_SetTurnaroundTime+0x134>)
 800ec68:	4293      	cmp	r3, r2
 800ec6a:	d906      	bls.n	800ec7a <USB_SetTurnaroundTime+0xae>
 800ec6c:	68bb      	ldr	r3, [r7, #8]
 800ec6e:	4a25      	ldr	r2, [pc, #148]	; (800ed04 <USB_SetTurnaroundTime+0x138>)
 800ec70:	4293      	cmp	r3, r2
 800ec72:	d202      	bcs.n	800ec7a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ec74:	2309      	movs	r3, #9
 800ec76:	617b      	str	r3, [r7, #20]
 800ec78:	e020      	b.n	800ecbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	4a21      	ldr	r2, [pc, #132]	; (800ed04 <USB_SetTurnaroundTime+0x138>)
 800ec7e:	4293      	cmp	r3, r2
 800ec80:	d306      	bcc.n	800ec90 <USB_SetTurnaroundTime+0xc4>
 800ec82:	68bb      	ldr	r3, [r7, #8]
 800ec84:	4a20      	ldr	r2, [pc, #128]	; (800ed08 <USB_SetTurnaroundTime+0x13c>)
 800ec86:	4293      	cmp	r3, r2
 800ec88:	d802      	bhi.n	800ec90 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ec8a:	2308      	movs	r3, #8
 800ec8c:	617b      	str	r3, [r7, #20]
 800ec8e:	e015      	b.n	800ecbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	4a1d      	ldr	r2, [pc, #116]	; (800ed08 <USB_SetTurnaroundTime+0x13c>)
 800ec94:	4293      	cmp	r3, r2
 800ec96:	d906      	bls.n	800eca6 <USB_SetTurnaroundTime+0xda>
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	4a1c      	ldr	r2, [pc, #112]	; (800ed0c <USB_SetTurnaroundTime+0x140>)
 800ec9c:	4293      	cmp	r3, r2
 800ec9e:	d202      	bcs.n	800eca6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800eca0:	2307      	movs	r3, #7
 800eca2:	617b      	str	r3, [r7, #20]
 800eca4:	e00a      	b.n	800ecbc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800eca6:	2306      	movs	r3, #6
 800eca8:	617b      	str	r3, [r7, #20]
 800ecaa:	e007      	b.n	800ecbc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ecac:	79fb      	ldrb	r3, [r7, #7]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d102      	bne.n	800ecb8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ecb2:	2309      	movs	r3, #9
 800ecb4:	617b      	str	r3, [r7, #20]
 800ecb6:	e001      	b.n	800ecbc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ecb8:	2309      	movs	r3, #9
 800ecba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	68db      	ldr	r3, [r3, #12]
 800ecc0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	68da      	ldr	r2, [r3, #12]
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	029b      	lsls	r3, r3, #10
 800ecd0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ecd4:	431a      	orrs	r2, r3
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ecda:	2300      	movs	r3, #0
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	371c      	adds	r7, #28
 800ece0:	46bd      	mov	sp, r7
 800ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece6:	4770      	bx	lr
 800ece8:	00d8acbf 	.word	0x00d8acbf
 800ecec:	00e4e1c0 	.word	0x00e4e1c0
 800ecf0:	00f42400 	.word	0x00f42400
 800ecf4:	01067380 	.word	0x01067380
 800ecf8:	011a499f 	.word	0x011a499f
 800ecfc:	01312cff 	.word	0x01312cff
 800ed00:	014ca43f 	.word	0x014ca43f
 800ed04:	016e3600 	.word	0x016e3600
 800ed08:	01a6ab1f 	.word	0x01a6ab1f
 800ed0c:	01e84800 	.word	0x01e84800

0800ed10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ed10:	b480      	push	{r7}
 800ed12:	b083      	sub	sp, #12
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	689b      	ldr	r3, [r3, #8]
 800ed1c:	f043 0201 	orr.w	r2, r3, #1
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ed24:	2300      	movs	r3, #0
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	370c      	adds	r7, #12
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed30:	4770      	bx	lr

0800ed32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ed32:	b480      	push	{r7}
 800ed34:	b083      	sub	sp, #12
 800ed36:	af00      	add	r7, sp, #0
 800ed38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	689b      	ldr	r3, [r3, #8]
 800ed3e:	f023 0201 	bic.w	r2, r3, #1
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ed46:	2300      	movs	r3, #0
}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	370c      	adds	r7, #12
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed52:	4770      	bx	lr

0800ed54 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b084      	sub	sp, #16
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
 800ed5c:	460b      	mov	r3, r1
 800ed5e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ed60:	2300      	movs	r3, #0
 800ed62:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	68db      	ldr	r3, [r3, #12]
 800ed68:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ed70:	78fb      	ldrb	r3, [r7, #3]
 800ed72:	2b01      	cmp	r3, #1
 800ed74:	d115      	bne.n	800eda2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	68db      	ldr	r3, [r3, #12]
 800ed7a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ed82:	2001      	movs	r0, #1
 800ed84:	f7f9 fb1c 	bl	80083c0 <HAL_Delay>
      ms++;
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	3301      	adds	r3, #1
 800ed8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f001 f972 	bl	8010078 <USB_GetMode>
 800ed94:	4603      	mov	r3, r0
 800ed96:	2b01      	cmp	r3, #1
 800ed98:	d01e      	beq.n	800edd8 <USB_SetCurrentMode+0x84>
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	2b31      	cmp	r3, #49	; 0x31
 800ed9e:	d9f0      	bls.n	800ed82 <USB_SetCurrentMode+0x2e>
 800eda0:	e01a      	b.n	800edd8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800eda2:	78fb      	ldrb	r3, [r7, #3]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d115      	bne.n	800edd4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	68db      	ldr	r3, [r3, #12]
 800edac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800edb4:	2001      	movs	r0, #1
 800edb6:	f7f9 fb03 	bl	80083c0 <HAL_Delay>
      ms++;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	3301      	adds	r3, #1
 800edbe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f001 f959 	bl	8010078 <USB_GetMode>
 800edc6:	4603      	mov	r3, r0
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d005      	beq.n	800edd8 <USB_SetCurrentMode+0x84>
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	2b31      	cmp	r3, #49	; 0x31
 800edd0:	d9f0      	bls.n	800edb4 <USB_SetCurrentMode+0x60>
 800edd2:	e001      	b.n	800edd8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800edd4:	2301      	movs	r3, #1
 800edd6:	e005      	b.n	800ede4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	2b32      	cmp	r3, #50	; 0x32
 800eddc:	d101      	bne.n	800ede2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800edde:	2301      	movs	r3, #1
 800ede0:	e000      	b.n	800ede4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ede2:	2300      	movs	r3, #0
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	3710      	adds	r7, #16
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}

0800edec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800edec:	b084      	sub	sp, #16
 800edee:	b580      	push	{r7, lr}
 800edf0:	b086      	sub	sp, #24
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	6078      	str	r0, [r7, #4]
 800edf6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800edfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800edfe:	2300      	movs	r3, #0
 800ee00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ee06:	2300      	movs	r3, #0
 800ee08:	613b      	str	r3, [r7, #16]
 800ee0a:	e009      	b.n	800ee20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ee0c:	687a      	ldr	r2, [r7, #4]
 800ee0e:	693b      	ldr	r3, [r7, #16]
 800ee10:	3340      	adds	r3, #64	; 0x40
 800ee12:	009b      	lsls	r3, r3, #2
 800ee14:	4413      	add	r3, r2
 800ee16:	2200      	movs	r2, #0
 800ee18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ee1a:	693b      	ldr	r3, [r7, #16]
 800ee1c:	3301      	adds	r3, #1
 800ee1e:	613b      	str	r3, [r7, #16]
 800ee20:	693b      	ldr	r3, [r7, #16]
 800ee22:	2b0e      	cmp	r3, #14
 800ee24:	d9f2      	bls.n	800ee0c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ee26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d11c      	bne.n	800ee66 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee32:	685b      	ldr	r3, [r3, #4]
 800ee34:	68fa      	ldr	r2, [r7, #12]
 800ee36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ee3a:	f043 0302 	orr.w	r3, r3, #2
 800ee3e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee44:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee50:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee5c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	639a      	str	r2, [r3, #56]	; 0x38
 800ee64:	e00b      	b.n	800ee7e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee6a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee76:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ee84:	461a      	mov	r2, r3
 800ee86:	2300      	movs	r3, #0
 800ee88:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee90:	4619      	mov	r1, r3
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee98:	461a      	mov	r2, r3
 800ee9a:	680b      	ldr	r3, [r1, #0]
 800ee9c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ee9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea0:	2b01      	cmp	r3, #1
 800eea2:	d10c      	bne.n	800eebe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800eea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d104      	bne.n	800eeb4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800eeaa:	2100      	movs	r1, #0
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f000 f945 	bl	800f13c <USB_SetDevSpeed>
 800eeb2:	e008      	b.n	800eec6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800eeb4:	2101      	movs	r1, #1
 800eeb6:	6878      	ldr	r0, [r7, #4]
 800eeb8:	f000 f940 	bl	800f13c <USB_SetDevSpeed>
 800eebc:	e003      	b.n	800eec6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800eebe:	2103      	movs	r1, #3
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	f000 f93b 	bl	800f13c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800eec6:	2110      	movs	r1, #16
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f000 f8f3 	bl	800f0b4 <USB_FlushTxFifo>
 800eece:	4603      	mov	r3, r0
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d001      	beq.n	800eed8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800eed4:	2301      	movs	r3, #1
 800eed6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800eed8:	6878      	ldr	r0, [r7, #4]
 800eeda:	f000 f90f 	bl	800f0fc <USB_FlushRxFifo>
 800eede:	4603      	mov	r3, r0
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d001      	beq.n	800eee8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800eee4:	2301      	movs	r3, #1
 800eee6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eeee:	461a      	mov	r2, r3
 800eef0:	2300      	movs	r3, #0
 800eef2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eefa:	461a      	mov	r2, r3
 800eefc:	2300      	movs	r3, #0
 800eefe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef06:	461a      	mov	r2, r3
 800ef08:	2300      	movs	r3, #0
 800ef0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	613b      	str	r3, [r7, #16]
 800ef10:	e043      	b.n	800ef9a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ef12:	693b      	ldr	r3, [r7, #16]
 800ef14:	015a      	lsls	r2, r3, #5
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	4413      	add	r3, r2
 800ef1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ef24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ef28:	d118      	bne.n	800ef5c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800ef2a:	693b      	ldr	r3, [r7, #16]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d10a      	bne.n	800ef46 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ef30:	693b      	ldr	r3, [r7, #16]
 800ef32:	015a      	lsls	r2, r3, #5
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	4413      	add	r3, r2
 800ef38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef3c:	461a      	mov	r2, r3
 800ef3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ef42:	6013      	str	r3, [r2, #0]
 800ef44:	e013      	b.n	800ef6e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ef46:	693b      	ldr	r3, [r7, #16]
 800ef48:	015a      	lsls	r2, r3, #5
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	4413      	add	r3, r2
 800ef4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef52:	461a      	mov	r2, r3
 800ef54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ef58:	6013      	str	r3, [r2, #0]
 800ef5a:	e008      	b.n	800ef6e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ef5c:	693b      	ldr	r3, [r7, #16]
 800ef5e:	015a      	lsls	r2, r3, #5
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	4413      	add	r3, r2
 800ef64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef68:	461a      	mov	r2, r3
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ef6e:	693b      	ldr	r3, [r7, #16]
 800ef70:	015a      	lsls	r2, r3, #5
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	4413      	add	r3, r2
 800ef76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef7a:	461a      	mov	r2, r3
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ef80:	693b      	ldr	r3, [r7, #16]
 800ef82:	015a      	lsls	r2, r3, #5
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	4413      	add	r3, r2
 800ef88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef8c:	461a      	mov	r2, r3
 800ef8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ef92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ef94:	693b      	ldr	r3, [r7, #16]
 800ef96:	3301      	adds	r3, #1
 800ef98:	613b      	str	r3, [r7, #16]
 800ef9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef9c:	693a      	ldr	r2, [r7, #16]
 800ef9e:	429a      	cmp	r2, r3
 800efa0:	d3b7      	bcc.n	800ef12 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800efa2:	2300      	movs	r3, #0
 800efa4:	613b      	str	r3, [r7, #16]
 800efa6:	e043      	b.n	800f030 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800efa8:	693b      	ldr	r3, [r7, #16]
 800efaa:	015a      	lsls	r2, r3, #5
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	4413      	add	r3, r2
 800efb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800efba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800efbe:	d118      	bne.n	800eff2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800efc0:	693b      	ldr	r3, [r7, #16]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d10a      	bne.n	800efdc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800efc6:	693b      	ldr	r3, [r7, #16]
 800efc8:	015a      	lsls	r2, r3, #5
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	4413      	add	r3, r2
 800efce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efd2:	461a      	mov	r2, r3
 800efd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800efd8:	6013      	str	r3, [r2, #0]
 800efda:	e013      	b.n	800f004 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800efdc:	693b      	ldr	r3, [r7, #16]
 800efde:	015a      	lsls	r2, r3, #5
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	4413      	add	r3, r2
 800efe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efe8:	461a      	mov	r2, r3
 800efea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800efee:	6013      	str	r3, [r2, #0]
 800eff0:	e008      	b.n	800f004 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800eff2:	693b      	ldr	r3, [r7, #16]
 800eff4:	015a      	lsls	r2, r3, #5
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	4413      	add	r3, r2
 800effa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800effe:	461a      	mov	r2, r3
 800f000:	2300      	movs	r3, #0
 800f002:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f004:	693b      	ldr	r3, [r7, #16]
 800f006:	015a      	lsls	r2, r3, #5
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	4413      	add	r3, r2
 800f00c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f010:	461a      	mov	r2, r3
 800f012:	2300      	movs	r3, #0
 800f014:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f016:	693b      	ldr	r3, [r7, #16]
 800f018:	015a      	lsls	r2, r3, #5
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	4413      	add	r3, r2
 800f01e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f022:	461a      	mov	r2, r3
 800f024:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f028:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f02a:	693b      	ldr	r3, [r7, #16]
 800f02c:	3301      	adds	r3, #1
 800f02e:	613b      	str	r3, [r7, #16]
 800f030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f032:	693a      	ldr	r2, [r7, #16]
 800f034:	429a      	cmp	r2, r3
 800f036:	d3b7      	bcc.n	800efa8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f03e:	691b      	ldr	r3, [r3, #16]
 800f040:	68fa      	ldr	r2, [r7, #12]
 800f042:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f046:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f04a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2200      	movs	r2, #0
 800f050:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f058:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d105      	bne.n	800f06c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	699b      	ldr	r3, [r3, #24]
 800f064:	f043 0210 	orr.w	r2, r3, #16
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	699a      	ldr	r2, [r3, #24]
 800f070:	4b0f      	ldr	r3, [pc, #60]	; (800f0b0 <USB_DevInit+0x2c4>)
 800f072:	4313      	orrs	r3, r2
 800f074:	687a      	ldr	r2, [r7, #4]
 800f076:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d005      	beq.n	800f08a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	699b      	ldr	r3, [r3, #24]
 800f082:	f043 0208 	orr.w	r2, r3, #8
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f08a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f08c:	2b01      	cmp	r3, #1
 800f08e:	d107      	bne.n	800f0a0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	699b      	ldr	r3, [r3, #24]
 800f094:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f098:	f043 0304 	orr.w	r3, r3, #4
 800f09c:	687a      	ldr	r2, [r7, #4]
 800f09e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f0a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	3718      	adds	r7, #24
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f0ac:	b004      	add	sp, #16
 800f0ae:	4770      	bx	lr
 800f0b0:	803c3800 	.word	0x803c3800

0800f0b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f0b4:	b480      	push	{r7}
 800f0b6:	b085      	sub	sp, #20
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
 800f0bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	019b      	lsls	r3, r3, #6
 800f0c6:	f043 0220 	orr.w	r2, r3, #32
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	3301      	adds	r3, #1
 800f0d2:	60fb      	str	r3, [r7, #12]
 800f0d4:	4a08      	ldr	r2, [pc, #32]	; (800f0f8 <USB_FlushTxFifo+0x44>)
 800f0d6:	4293      	cmp	r3, r2
 800f0d8:	d901      	bls.n	800f0de <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800f0da:	2303      	movs	r3, #3
 800f0dc:	e006      	b.n	800f0ec <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	691b      	ldr	r3, [r3, #16]
 800f0e2:	f003 0320 	and.w	r3, r3, #32
 800f0e6:	2b20      	cmp	r3, #32
 800f0e8:	d0f1      	beq.n	800f0ce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f0ea:	2300      	movs	r3, #0
}
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	3714      	adds	r7, #20
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f6:	4770      	bx	lr
 800f0f8:	00030d40 	.word	0x00030d40

0800f0fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f0fc:	b480      	push	{r7}
 800f0fe:	b085      	sub	sp, #20
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f104:	2300      	movs	r3, #0
 800f106:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2210      	movs	r2, #16
 800f10c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	3301      	adds	r3, #1
 800f112:	60fb      	str	r3, [r7, #12]
 800f114:	4a08      	ldr	r2, [pc, #32]	; (800f138 <USB_FlushRxFifo+0x3c>)
 800f116:	4293      	cmp	r3, r2
 800f118:	d901      	bls.n	800f11e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800f11a:	2303      	movs	r3, #3
 800f11c:	e006      	b.n	800f12c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	691b      	ldr	r3, [r3, #16]
 800f122:	f003 0310 	and.w	r3, r3, #16
 800f126:	2b10      	cmp	r3, #16
 800f128:	d0f1      	beq.n	800f10e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f12a:	2300      	movs	r3, #0
}
 800f12c:	4618      	mov	r0, r3
 800f12e:	3714      	adds	r7, #20
 800f130:	46bd      	mov	sp, r7
 800f132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f136:	4770      	bx	lr
 800f138:	00030d40 	.word	0x00030d40

0800f13c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f13c:	b480      	push	{r7}
 800f13e:	b085      	sub	sp, #20
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
 800f144:	460b      	mov	r3, r1
 800f146:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f152:	681a      	ldr	r2, [r3, #0]
 800f154:	78fb      	ldrb	r3, [r7, #3]
 800f156:	68f9      	ldr	r1, [r7, #12]
 800f158:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f15c:	4313      	orrs	r3, r2
 800f15e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f160:	2300      	movs	r3, #0
}
 800f162:	4618      	mov	r0, r3
 800f164:	3714      	adds	r7, #20
 800f166:	46bd      	mov	sp, r7
 800f168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16c:	4770      	bx	lr

0800f16e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f16e:	b480      	push	{r7}
 800f170:	b087      	sub	sp, #28
 800f172:	af00      	add	r7, sp, #0
 800f174:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f17a:	693b      	ldr	r3, [r7, #16]
 800f17c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f180:	689b      	ldr	r3, [r3, #8]
 800f182:	f003 0306 	and.w	r3, r3, #6
 800f186:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d102      	bne.n	800f194 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800f18e:	2300      	movs	r3, #0
 800f190:	75fb      	strb	r3, [r7, #23]
 800f192:	e00a      	b.n	800f1aa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	2b02      	cmp	r3, #2
 800f198:	d002      	beq.n	800f1a0 <USB_GetDevSpeed+0x32>
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	2b06      	cmp	r3, #6
 800f19e:	d102      	bne.n	800f1a6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f1a0:	2302      	movs	r3, #2
 800f1a2:	75fb      	strb	r3, [r7, #23]
 800f1a4:	e001      	b.n	800f1aa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800f1a6:	230f      	movs	r3, #15
 800f1a8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f1aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	371c      	adds	r7, #28
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b6:	4770      	bx	lr

0800f1b8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f1b8:	b480      	push	{r7}
 800f1ba:	b085      	sub	sp, #20
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
 800f1c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	781b      	ldrb	r3, [r3, #0]
 800f1ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	785b      	ldrb	r3, [r3, #1]
 800f1d0:	2b01      	cmp	r3, #1
 800f1d2:	d13a      	bne.n	800f24a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1da:	69da      	ldr	r2, [r3, #28]
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	781b      	ldrb	r3, [r3, #0]
 800f1e0:	f003 030f 	and.w	r3, r3, #15
 800f1e4:	2101      	movs	r1, #1
 800f1e6:	fa01 f303 	lsl.w	r3, r1, r3
 800f1ea:	b29b      	uxth	r3, r3
 800f1ec:	68f9      	ldr	r1, [r7, #12]
 800f1ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f1f2:	4313      	orrs	r3, r2
 800f1f4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f1f6:	68bb      	ldr	r3, [r7, #8]
 800f1f8:	015a      	lsls	r2, r3, #5
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	4413      	add	r3, r2
 800f1fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d155      	bne.n	800f2b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	015a      	lsls	r2, r3, #5
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	4413      	add	r3, r2
 800f214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f218:	681a      	ldr	r2, [r3, #0]
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	689b      	ldr	r3, [r3, #8]
 800f21e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	78db      	ldrb	r3, [r3, #3]
 800f226:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f228:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	059b      	lsls	r3, r3, #22
 800f22e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f230:	4313      	orrs	r3, r2
 800f232:	68ba      	ldr	r2, [r7, #8]
 800f234:	0151      	lsls	r1, r2, #5
 800f236:	68fa      	ldr	r2, [r7, #12]
 800f238:	440a      	add	r2, r1
 800f23a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f23e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f246:	6013      	str	r3, [r2, #0]
 800f248:	e036      	b.n	800f2b8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f250:	69da      	ldr	r2, [r3, #28]
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	781b      	ldrb	r3, [r3, #0]
 800f256:	f003 030f 	and.w	r3, r3, #15
 800f25a:	2101      	movs	r1, #1
 800f25c:	fa01 f303 	lsl.w	r3, r1, r3
 800f260:	041b      	lsls	r3, r3, #16
 800f262:	68f9      	ldr	r1, [r7, #12]
 800f264:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f268:	4313      	orrs	r3, r2
 800f26a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	015a      	lsls	r2, r3, #5
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	4413      	add	r3, r2
 800f274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d11a      	bne.n	800f2b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	015a      	lsls	r2, r3, #5
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	4413      	add	r3, r2
 800f28a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f28e:	681a      	ldr	r2, [r3, #0]
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	689b      	ldr	r3, [r3, #8]
 800f294:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	78db      	ldrb	r3, [r3, #3]
 800f29c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f29e:	430b      	orrs	r3, r1
 800f2a0:	4313      	orrs	r3, r2
 800f2a2:	68ba      	ldr	r2, [r7, #8]
 800f2a4:	0151      	lsls	r1, r2, #5
 800f2a6:	68fa      	ldr	r2, [r7, #12]
 800f2a8:	440a      	add	r2, r1
 800f2aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f2ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f2b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f2b6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f2b8:	2300      	movs	r3, #0
}
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	3714      	adds	r7, #20
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c4:	4770      	bx	lr
	...

0800f2c8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	b085      	sub	sp, #20
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
 800f2d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f2d6:	683b      	ldr	r3, [r7, #0]
 800f2d8:	781b      	ldrb	r3, [r3, #0]
 800f2da:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	785b      	ldrb	r3, [r3, #1]
 800f2e0:	2b01      	cmp	r3, #1
 800f2e2:	d161      	bne.n	800f3a8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	015a      	lsls	r2, r3, #5
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	4413      	add	r3, r2
 800f2ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f2f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f2fa:	d11f      	bne.n	800f33c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f2fc:	68bb      	ldr	r3, [r7, #8]
 800f2fe:	015a      	lsls	r2, r3, #5
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	4413      	add	r3, r2
 800f304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	68ba      	ldr	r2, [r7, #8]
 800f30c:	0151      	lsls	r1, r2, #5
 800f30e:	68fa      	ldr	r2, [r7, #12]
 800f310:	440a      	add	r2, r1
 800f312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f316:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f31a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f31c:	68bb      	ldr	r3, [r7, #8]
 800f31e:	015a      	lsls	r2, r3, #5
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	4413      	add	r3, r2
 800f324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	68ba      	ldr	r2, [r7, #8]
 800f32c:	0151      	lsls	r1, r2, #5
 800f32e:	68fa      	ldr	r2, [r7, #12]
 800f330:	440a      	add	r2, r1
 800f332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f336:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f33a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f342:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	781b      	ldrb	r3, [r3, #0]
 800f348:	f003 030f 	and.w	r3, r3, #15
 800f34c:	2101      	movs	r1, #1
 800f34e:	fa01 f303 	lsl.w	r3, r1, r3
 800f352:	b29b      	uxth	r3, r3
 800f354:	43db      	mvns	r3, r3
 800f356:	68f9      	ldr	r1, [r7, #12]
 800f358:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f35c:	4013      	ands	r3, r2
 800f35e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f366:	69da      	ldr	r2, [r3, #28]
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	781b      	ldrb	r3, [r3, #0]
 800f36c:	f003 030f 	and.w	r3, r3, #15
 800f370:	2101      	movs	r1, #1
 800f372:	fa01 f303 	lsl.w	r3, r1, r3
 800f376:	b29b      	uxth	r3, r3
 800f378:	43db      	mvns	r3, r3
 800f37a:	68f9      	ldr	r1, [r7, #12]
 800f37c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f380:	4013      	ands	r3, r2
 800f382:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f384:	68bb      	ldr	r3, [r7, #8]
 800f386:	015a      	lsls	r2, r3, #5
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	4413      	add	r3, r2
 800f38c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f390:	681a      	ldr	r2, [r3, #0]
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	0159      	lsls	r1, r3, #5
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	440b      	add	r3, r1
 800f39a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f39e:	4619      	mov	r1, r3
 800f3a0:	4b35      	ldr	r3, [pc, #212]	; (800f478 <USB_DeactivateEndpoint+0x1b0>)
 800f3a2:	4013      	ands	r3, r2
 800f3a4:	600b      	str	r3, [r1, #0]
 800f3a6:	e060      	b.n	800f46a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f3a8:	68bb      	ldr	r3, [r7, #8]
 800f3aa:	015a      	lsls	r2, r3, #5
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	4413      	add	r3, r2
 800f3b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f3ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f3be:	d11f      	bne.n	800f400 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	015a      	lsls	r2, r3, #5
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	4413      	add	r3, r2
 800f3c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	68ba      	ldr	r2, [r7, #8]
 800f3d0:	0151      	lsls	r1, r2, #5
 800f3d2:	68fa      	ldr	r2, [r7, #12]
 800f3d4:	440a      	add	r2, r1
 800f3d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f3de:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	015a      	lsls	r2, r3, #5
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	4413      	add	r3, r2
 800f3e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	68ba      	ldr	r2, [r7, #8]
 800f3f0:	0151      	lsls	r1, r2, #5
 800f3f2:	68fa      	ldr	r2, [r7, #12]
 800f3f4:	440a      	add	r2, r1
 800f3f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f3fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f406:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	781b      	ldrb	r3, [r3, #0]
 800f40c:	f003 030f 	and.w	r3, r3, #15
 800f410:	2101      	movs	r1, #1
 800f412:	fa01 f303 	lsl.w	r3, r1, r3
 800f416:	041b      	lsls	r3, r3, #16
 800f418:	43db      	mvns	r3, r3
 800f41a:	68f9      	ldr	r1, [r7, #12]
 800f41c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f420:	4013      	ands	r3, r2
 800f422:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f42a:	69da      	ldr	r2, [r3, #28]
 800f42c:	683b      	ldr	r3, [r7, #0]
 800f42e:	781b      	ldrb	r3, [r3, #0]
 800f430:	f003 030f 	and.w	r3, r3, #15
 800f434:	2101      	movs	r1, #1
 800f436:	fa01 f303 	lsl.w	r3, r1, r3
 800f43a:	041b      	lsls	r3, r3, #16
 800f43c:	43db      	mvns	r3, r3
 800f43e:	68f9      	ldr	r1, [r7, #12]
 800f440:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f444:	4013      	ands	r3, r2
 800f446:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f448:	68bb      	ldr	r3, [r7, #8]
 800f44a:	015a      	lsls	r2, r3, #5
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	4413      	add	r3, r2
 800f450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f454:	681a      	ldr	r2, [r3, #0]
 800f456:	68bb      	ldr	r3, [r7, #8]
 800f458:	0159      	lsls	r1, r3, #5
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	440b      	add	r3, r1
 800f45e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f462:	4619      	mov	r1, r3
 800f464:	4b05      	ldr	r3, [pc, #20]	; (800f47c <USB_DeactivateEndpoint+0x1b4>)
 800f466:	4013      	ands	r3, r2
 800f468:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f46a:	2300      	movs	r3, #0
}
 800f46c:	4618      	mov	r0, r3
 800f46e:	3714      	adds	r7, #20
 800f470:	46bd      	mov	sp, r7
 800f472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f476:	4770      	bx	lr
 800f478:	ec337800 	.word	0xec337800
 800f47c:	eff37800 	.word	0xeff37800

0800f480 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b08a      	sub	sp, #40	; 0x28
 800f484:	af02      	add	r7, sp, #8
 800f486:	60f8      	str	r0, [r7, #12]
 800f488:	60b9      	str	r1, [r7, #8]
 800f48a:	4613      	mov	r3, r2
 800f48c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	785b      	ldrb	r3, [r3, #1]
 800f49c:	2b01      	cmp	r3, #1
 800f49e:	f040 815c 	bne.w	800f75a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	695b      	ldr	r3, [r3, #20]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d132      	bne.n	800f510 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f4aa:	69bb      	ldr	r3, [r7, #24]
 800f4ac:	015a      	lsls	r2, r3, #5
 800f4ae:	69fb      	ldr	r3, [r7, #28]
 800f4b0:	4413      	add	r3, r2
 800f4b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4b6:	691b      	ldr	r3, [r3, #16]
 800f4b8:	69ba      	ldr	r2, [r7, #24]
 800f4ba:	0151      	lsls	r1, r2, #5
 800f4bc:	69fa      	ldr	r2, [r7, #28]
 800f4be:	440a      	add	r2, r1
 800f4c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f4c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f4c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f4cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f4ce:	69bb      	ldr	r3, [r7, #24]
 800f4d0:	015a      	lsls	r2, r3, #5
 800f4d2:	69fb      	ldr	r3, [r7, #28]
 800f4d4:	4413      	add	r3, r2
 800f4d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4da:	691b      	ldr	r3, [r3, #16]
 800f4dc:	69ba      	ldr	r2, [r7, #24]
 800f4de:	0151      	lsls	r1, r2, #5
 800f4e0:	69fa      	ldr	r2, [r7, #28]
 800f4e2:	440a      	add	r2, r1
 800f4e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f4e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f4ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f4ee:	69bb      	ldr	r3, [r7, #24]
 800f4f0:	015a      	lsls	r2, r3, #5
 800f4f2:	69fb      	ldr	r3, [r7, #28]
 800f4f4:	4413      	add	r3, r2
 800f4f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4fa:	691b      	ldr	r3, [r3, #16]
 800f4fc:	69ba      	ldr	r2, [r7, #24]
 800f4fe:	0151      	lsls	r1, r2, #5
 800f500:	69fa      	ldr	r2, [r7, #28]
 800f502:	440a      	add	r2, r1
 800f504:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f508:	0cdb      	lsrs	r3, r3, #19
 800f50a:	04db      	lsls	r3, r3, #19
 800f50c:	6113      	str	r3, [r2, #16]
 800f50e:	e074      	b.n	800f5fa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f510:	69bb      	ldr	r3, [r7, #24]
 800f512:	015a      	lsls	r2, r3, #5
 800f514:	69fb      	ldr	r3, [r7, #28]
 800f516:	4413      	add	r3, r2
 800f518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f51c:	691b      	ldr	r3, [r3, #16]
 800f51e:	69ba      	ldr	r2, [r7, #24]
 800f520:	0151      	lsls	r1, r2, #5
 800f522:	69fa      	ldr	r2, [r7, #28]
 800f524:	440a      	add	r2, r1
 800f526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f52a:	0cdb      	lsrs	r3, r3, #19
 800f52c:	04db      	lsls	r3, r3, #19
 800f52e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f530:	69bb      	ldr	r3, [r7, #24]
 800f532:	015a      	lsls	r2, r3, #5
 800f534:	69fb      	ldr	r3, [r7, #28]
 800f536:	4413      	add	r3, r2
 800f538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f53c:	691b      	ldr	r3, [r3, #16]
 800f53e:	69ba      	ldr	r2, [r7, #24]
 800f540:	0151      	lsls	r1, r2, #5
 800f542:	69fa      	ldr	r2, [r7, #28]
 800f544:	440a      	add	r2, r1
 800f546:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f54a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f54e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f552:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f554:	69bb      	ldr	r3, [r7, #24]
 800f556:	015a      	lsls	r2, r3, #5
 800f558:	69fb      	ldr	r3, [r7, #28]
 800f55a:	4413      	add	r3, r2
 800f55c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f560:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	6959      	ldr	r1, [r3, #20]
 800f566:	68bb      	ldr	r3, [r7, #8]
 800f568:	689b      	ldr	r3, [r3, #8]
 800f56a:	440b      	add	r3, r1
 800f56c:	1e59      	subs	r1, r3, #1
 800f56e:	68bb      	ldr	r3, [r7, #8]
 800f570:	689b      	ldr	r3, [r3, #8]
 800f572:	fbb1 f3f3 	udiv	r3, r1, r3
 800f576:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f578:	4b9d      	ldr	r3, [pc, #628]	; (800f7f0 <USB_EPStartXfer+0x370>)
 800f57a:	400b      	ands	r3, r1
 800f57c:	69b9      	ldr	r1, [r7, #24]
 800f57e:	0148      	lsls	r0, r1, #5
 800f580:	69f9      	ldr	r1, [r7, #28]
 800f582:	4401      	add	r1, r0
 800f584:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f588:	4313      	orrs	r3, r2
 800f58a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f58c:	69bb      	ldr	r3, [r7, #24]
 800f58e:	015a      	lsls	r2, r3, #5
 800f590:	69fb      	ldr	r3, [r7, #28]
 800f592:	4413      	add	r3, r2
 800f594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f598:	691a      	ldr	r2, [r3, #16]
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	695b      	ldr	r3, [r3, #20]
 800f59e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f5a2:	69b9      	ldr	r1, [r7, #24]
 800f5a4:	0148      	lsls	r0, r1, #5
 800f5a6:	69f9      	ldr	r1, [r7, #28]
 800f5a8:	4401      	add	r1, r0
 800f5aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f5ae:	4313      	orrs	r3, r2
 800f5b0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	78db      	ldrb	r3, [r3, #3]
 800f5b6:	2b01      	cmp	r3, #1
 800f5b8:	d11f      	bne.n	800f5fa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f5ba:	69bb      	ldr	r3, [r7, #24]
 800f5bc:	015a      	lsls	r2, r3, #5
 800f5be:	69fb      	ldr	r3, [r7, #28]
 800f5c0:	4413      	add	r3, r2
 800f5c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5c6:	691b      	ldr	r3, [r3, #16]
 800f5c8:	69ba      	ldr	r2, [r7, #24]
 800f5ca:	0151      	lsls	r1, r2, #5
 800f5cc:	69fa      	ldr	r2, [r7, #28]
 800f5ce:	440a      	add	r2, r1
 800f5d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5d4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f5d8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f5da:	69bb      	ldr	r3, [r7, #24]
 800f5dc:	015a      	lsls	r2, r3, #5
 800f5de:	69fb      	ldr	r3, [r7, #28]
 800f5e0:	4413      	add	r3, r2
 800f5e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5e6:	691b      	ldr	r3, [r3, #16]
 800f5e8:	69ba      	ldr	r2, [r7, #24]
 800f5ea:	0151      	lsls	r1, r2, #5
 800f5ec:	69fa      	ldr	r2, [r7, #28]
 800f5ee:	440a      	add	r2, r1
 800f5f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f5f8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f5fa:	79fb      	ldrb	r3, [r7, #7]
 800f5fc:	2b01      	cmp	r3, #1
 800f5fe:	d14b      	bne.n	800f698 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	691b      	ldr	r3, [r3, #16]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d009      	beq.n	800f61c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f608:	69bb      	ldr	r3, [r7, #24]
 800f60a:	015a      	lsls	r2, r3, #5
 800f60c:	69fb      	ldr	r3, [r7, #28]
 800f60e:	4413      	add	r3, r2
 800f610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f614:	461a      	mov	r2, r3
 800f616:	68bb      	ldr	r3, [r7, #8]
 800f618:	691b      	ldr	r3, [r3, #16]
 800f61a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	78db      	ldrb	r3, [r3, #3]
 800f620:	2b01      	cmp	r3, #1
 800f622:	d128      	bne.n	800f676 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f624:	69fb      	ldr	r3, [r7, #28]
 800f626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f62a:	689b      	ldr	r3, [r3, #8]
 800f62c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f630:	2b00      	cmp	r3, #0
 800f632:	d110      	bne.n	800f656 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f634:	69bb      	ldr	r3, [r7, #24]
 800f636:	015a      	lsls	r2, r3, #5
 800f638:	69fb      	ldr	r3, [r7, #28]
 800f63a:	4413      	add	r3, r2
 800f63c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	69ba      	ldr	r2, [r7, #24]
 800f644:	0151      	lsls	r1, r2, #5
 800f646:	69fa      	ldr	r2, [r7, #28]
 800f648:	440a      	add	r2, r1
 800f64a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f64e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f652:	6013      	str	r3, [r2, #0]
 800f654:	e00f      	b.n	800f676 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f656:	69bb      	ldr	r3, [r7, #24]
 800f658:	015a      	lsls	r2, r3, #5
 800f65a:	69fb      	ldr	r3, [r7, #28]
 800f65c:	4413      	add	r3, r2
 800f65e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	69ba      	ldr	r2, [r7, #24]
 800f666:	0151      	lsls	r1, r2, #5
 800f668:	69fa      	ldr	r2, [r7, #28]
 800f66a:	440a      	add	r2, r1
 800f66c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f674:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f676:	69bb      	ldr	r3, [r7, #24]
 800f678:	015a      	lsls	r2, r3, #5
 800f67a:	69fb      	ldr	r3, [r7, #28]
 800f67c:	4413      	add	r3, r2
 800f67e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	69ba      	ldr	r2, [r7, #24]
 800f686:	0151      	lsls	r1, r2, #5
 800f688:	69fa      	ldr	r2, [r7, #28]
 800f68a:	440a      	add	r2, r1
 800f68c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f690:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f694:	6013      	str	r3, [r2, #0]
 800f696:	e12f      	b.n	800f8f8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f698:	69bb      	ldr	r3, [r7, #24]
 800f69a:	015a      	lsls	r2, r3, #5
 800f69c:	69fb      	ldr	r3, [r7, #28]
 800f69e:	4413      	add	r3, r2
 800f6a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	69ba      	ldr	r2, [r7, #24]
 800f6a8:	0151      	lsls	r1, r2, #5
 800f6aa:	69fa      	ldr	r2, [r7, #28]
 800f6ac:	440a      	add	r2, r1
 800f6ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f6b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f6b6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f6b8:	68bb      	ldr	r3, [r7, #8]
 800f6ba:	78db      	ldrb	r3, [r3, #3]
 800f6bc:	2b01      	cmp	r3, #1
 800f6be:	d015      	beq.n	800f6ec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f6c0:	68bb      	ldr	r3, [r7, #8]
 800f6c2:	695b      	ldr	r3, [r3, #20]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	f000 8117 	beq.w	800f8f8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f6ca:	69fb      	ldr	r3, [r7, #28]
 800f6cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f6d2:	68bb      	ldr	r3, [r7, #8]
 800f6d4:	781b      	ldrb	r3, [r3, #0]
 800f6d6:	f003 030f 	and.w	r3, r3, #15
 800f6da:	2101      	movs	r1, #1
 800f6dc:	fa01 f303 	lsl.w	r3, r1, r3
 800f6e0:	69f9      	ldr	r1, [r7, #28]
 800f6e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f6e6:	4313      	orrs	r3, r2
 800f6e8:	634b      	str	r3, [r1, #52]	; 0x34
 800f6ea:	e105      	b.n	800f8f8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f6ec:	69fb      	ldr	r3, [r7, #28]
 800f6ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6f2:	689b      	ldr	r3, [r3, #8]
 800f6f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d110      	bne.n	800f71e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f6fc:	69bb      	ldr	r3, [r7, #24]
 800f6fe:	015a      	lsls	r2, r3, #5
 800f700:	69fb      	ldr	r3, [r7, #28]
 800f702:	4413      	add	r3, r2
 800f704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	69ba      	ldr	r2, [r7, #24]
 800f70c:	0151      	lsls	r1, r2, #5
 800f70e:	69fa      	ldr	r2, [r7, #28]
 800f710:	440a      	add	r2, r1
 800f712:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f716:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f71a:	6013      	str	r3, [r2, #0]
 800f71c:	e00f      	b.n	800f73e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f71e:	69bb      	ldr	r3, [r7, #24]
 800f720:	015a      	lsls	r2, r3, #5
 800f722:	69fb      	ldr	r3, [r7, #28]
 800f724:	4413      	add	r3, r2
 800f726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	69ba      	ldr	r2, [r7, #24]
 800f72e:	0151      	lsls	r1, r2, #5
 800f730:	69fa      	ldr	r2, [r7, #28]
 800f732:	440a      	add	r2, r1
 800f734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f73c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f73e:	68bb      	ldr	r3, [r7, #8]
 800f740:	68d9      	ldr	r1, [r3, #12]
 800f742:	68bb      	ldr	r3, [r7, #8]
 800f744:	781a      	ldrb	r2, [r3, #0]
 800f746:	68bb      	ldr	r3, [r7, #8]
 800f748:	695b      	ldr	r3, [r3, #20]
 800f74a:	b298      	uxth	r0, r3
 800f74c:	79fb      	ldrb	r3, [r7, #7]
 800f74e:	9300      	str	r3, [sp, #0]
 800f750:	4603      	mov	r3, r0
 800f752:	68f8      	ldr	r0, [r7, #12]
 800f754:	f000 fa2b 	bl	800fbae <USB_WritePacket>
 800f758:	e0ce      	b.n	800f8f8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f75a:	69bb      	ldr	r3, [r7, #24]
 800f75c:	015a      	lsls	r2, r3, #5
 800f75e:	69fb      	ldr	r3, [r7, #28]
 800f760:	4413      	add	r3, r2
 800f762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f766:	691b      	ldr	r3, [r3, #16]
 800f768:	69ba      	ldr	r2, [r7, #24]
 800f76a:	0151      	lsls	r1, r2, #5
 800f76c:	69fa      	ldr	r2, [r7, #28]
 800f76e:	440a      	add	r2, r1
 800f770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f774:	0cdb      	lsrs	r3, r3, #19
 800f776:	04db      	lsls	r3, r3, #19
 800f778:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f77a:	69bb      	ldr	r3, [r7, #24]
 800f77c:	015a      	lsls	r2, r3, #5
 800f77e:	69fb      	ldr	r3, [r7, #28]
 800f780:	4413      	add	r3, r2
 800f782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f786:	691b      	ldr	r3, [r3, #16]
 800f788:	69ba      	ldr	r2, [r7, #24]
 800f78a:	0151      	lsls	r1, r2, #5
 800f78c:	69fa      	ldr	r2, [r7, #28]
 800f78e:	440a      	add	r2, r1
 800f790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f794:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f798:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f79c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800f79e:	68bb      	ldr	r3, [r7, #8]
 800f7a0:	695b      	ldr	r3, [r3, #20]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d126      	bne.n	800f7f4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f7a6:	69bb      	ldr	r3, [r7, #24]
 800f7a8:	015a      	lsls	r2, r3, #5
 800f7aa:	69fb      	ldr	r3, [r7, #28]
 800f7ac:	4413      	add	r3, r2
 800f7ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7b2:	691a      	ldr	r2, [r3, #16]
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	689b      	ldr	r3, [r3, #8]
 800f7b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f7bc:	69b9      	ldr	r1, [r7, #24]
 800f7be:	0148      	lsls	r0, r1, #5
 800f7c0:	69f9      	ldr	r1, [r7, #28]
 800f7c2:	4401      	add	r1, r0
 800f7c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f7c8:	4313      	orrs	r3, r2
 800f7ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f7cc:	69bb      	ldr	r3, [r7, #24]
 800f7ce:	015a      	lsls	r2, r3, #5
 800f7d0:	69fb      	ldr	r3, [r7, #28]
 800f7d2:	4413      	add	r3, r2
 800f7d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7d8:	691b      	ldr	r3, [r3, #16]
 800f7da:	69ba      	ldr	r2, [r7, #24]
 800f7dc:	0151      	lsls	r1, r2, #5
 800f7de:	69fa      	ldr	r2, [r7, #28]
 800f7e0:	440a      	add	r2, r1
 800f7e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f7e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f7ea:	6113      	str	r3, [r2, #16]
 800f7ec:	e036      	b.n	800f85c <USB_EPStartXfer+0x3dc>
 800f7ee:	bf00      	nop
 800f7f0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f7f4:	68bb      	ldr	r3, [r7, #8]
 800f7f6:	695a      	ldr	r2, [r3, #20]
 800f7f8:	68bb      	ldr	r3, [r7, #8]
 800f7fa:	689b      	ldr	r3, [r3, #8]
 800f7fc:	4413      	add	r3, r2
 800f7fe:	1e5a      	subs	r2, r3, #1
 800f800:	68bb      	ldr	r3, [r7, #8]
 800f802:	689b      	ldr	r3, [r3, #8]
 800f804:	fbb2 f3f3 	udiv	r3, r2, r3
 800f808:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f80a:	69bb      	ldr	r3, [r7, #24]
 800f80c:	015a      	lsls	r2, r3, #5
 800f80e:	69fb      	ldr	r3, [r7, #28]
 800f810:	4413      	add	r3, r2
 800f812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f816:	691a      	ldr	r2, [r3, #16]
 800f818:	8afb      	ldrh	r3, [r7, #22]
 800f81a:	04d9      	lsls	r1, r3, #19
 800f81c:	4b39      	ldr	r3, [pc, #228]	; (800f904 <USB_EPStartXfer+0x484>)
 800f81e:	400b      	ands	r3, r1
 800f820:	69b9      	ldr	r1, [r7, #24]
 800f822:	0148      	lsls	r0, r1, #5
 800f824:	69f9      	ldr	r1, [r7, #28]
 800f826:	4401      	add	r1, r0
 800f828:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f82c:	4313      	orrs	r3, r2
 800f82e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f830:	69bb      	ldr	r3, [r7, #24]
 800f832:	015a      	lsls	r2, r3, #5
 800f834:	69fb      	ldr	r3, [r7, #28]
 800f836:	4413      	add	r3, r2
 800f838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f83c:	691a      	ldr	r2, [r3, #16]
 800f83e:	68bb      	ldr	r3, [r7, #8]
 800f840:	689b      	ldr	r3, [r3, #8]
 800f842:	8af9      	ldrh	r1, [r7, #22]
 800f844:	fb01 f303 	mul.w	r3, r1, r3
 800f848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f84c:	69b9      	ldr	r1, [r7, #24]
 800f84e:	0148      	lsls	r0, r1, #5
 800f850:	69f9      	ldr	r1, [r7, #28]
 800f852:	4401      	add	r1, r0
 800f854:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f858:	4313      	orrs	r3, r2
 800f85a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f85c:	79fb      	ldrb	r3, [r7, #7]
 800f85e:	2b01      	cmp	r3, #1
 800f860:	d10d      	bne.n	800f87e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	68db      	ldr	r3, [r3, #12]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d009      	beq.n	800f87e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f86a:	68bb      	ldr	r3, [r7, #8]
 800f86c:	68d9      	ldr	r1, [r3, #12]
 800f86e:	69bb      	ldr	r3, [r7, #24]
 800f870:	015a      	lsls	r2, r3, #5
 800f872:	69fb      	ldr	r3, [r7, #28]
 800f874:	4413      	add	r3, r2
 800f876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f87a:	460a      	mov	r2, r1
 800f87c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f87e:	68bb      	ldr	r3, [r7, #8]
 800f880:	78db      	ldrb	r3, [r3, #3]
 800f882:	2b01      	cmp	r3, #1
 800f884:	d128      	bne.n	800f8d8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f886:	69fb      	ldr	r3, [r7, #28]
 800f888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f88c:	689b      	ldr	r3, [r3, #8]
 800f88e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f892:	2b00      	cmp	r3, #0
 800f894:	d110      	bne.n	800f8b8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f896:	69bb      	ldr	r3, [r7, #24]
 800f898:	015a      	lsls	r2, r3, #5
 800f89a:	69fb      	ldr	r3, [r7, #28]
 800f89c:	4413      	add	r3, r2
 800f89e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	69ba      	ldr	r2, [r7, #24]
 800f8a6:	0151      	lsls	r1, r2, #5
 800f8a8:	69fa      	ldr	r2, [r7, #28]
 800f8aa:	440a      	add	r2, r1
 800f8ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f8b4:	6013      	str	r3, [r2, #0]
 800f8b6:	e00f      	b.n	800f8d8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f8b8:	69bb      	ldr	r3, [r7, #24]
 800f8ba:	015a      	lsls	r2, r3, #5
 800f8bc:	69fb      	ldr	r3, [r7, #28]
 800f8be:	4413      	add	r3, r2
 800f8c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	69ba      	ldr	r2, [r7, #24]
 800f8c8:	0151      	lsls	r1, r2, #5
 800f8ca:	69fa      	ldr	r2, [r7, #28]
 800f8cc:	440a      	add	r2, r1
 800f8ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f8d6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f8d8:	69bb      	ldr	r3, [r7, #24]
 800f8da:	015a      	lsls	r2, r3, #5
 800f8dc:	69fb      	ldr	r3, [r7, #28]
 800f8de:	4413      	add	r3, r2
 800f8e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	69ba      	ldr	r2, [r7, #24]
 800f8e8:	0151      	lsls	r1, r2, #5
 800f8ea:	69fa      	ldr	r2, [r7, #28]
 800f8ec:	440a      	add	r2, r1
 800f8ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f8f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f8f8:	2300      	movs	r3, #0
}
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	3720      	adds	r7, #32
 800f8fe:	46bd      	mov	sp, r7
 800f900:	bd80      	pop	{r7, pc}
 800f902:	bf00      	nop
 800f904:	1ff80000 	.word	0x1ff80000

0800f908 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f908:	b480      	push	{r7}
 800f90a:	b087      	sub	sp, #28
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	60f8      	str	r0, [r7, #12]
 800f910:	60b9      	str	r1, [r7, #8]
 800f912:	4613      	mov	r3, r2
 800f914:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	781b      	ldrb	r3, [r3, #0]
 800f91e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	785b      	ldrb	r3, [r3, #1]
 800f924:	2b01      	cmp	r3, #1
 800f926:	f040 80cd 	bne.w	800fac4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	695b      	ldr	r3, [r3, #20]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d132      	bne.n	800f998 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f932:	693b      	ldr	r3, [r7, #16]
 800f934:	015a      	lsls	r2, r3, #5
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	4413      	add	r3, r2
 800f93a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f93e:	691b      	ldr	r3, [r3, #16]
 800f940:	693a      	ldr	r2, [r7, #16]
 800f942:	0151      	lsls	r1, r2, #5
 800f944:	697a      	ldr	r2, [r7, #20]
 800f946:	440a      	add	r2, r1
 800f948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f94c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f950:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f954:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f956:	693b      	ldr	r3, [r7, #16]
 800f958:	015a      	lsls	r2, r3, #5
 800f95a:	697b      	ldr	r3, [r7, #20]
 800f95c:	4413      	add	r3, r2
 800f95e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f962:	691b      	ldr	r3, [r3, #16]
 800f964:	693a      	ldr	r2, [r7, #16]
 800f966:	0151      	lsls	r1, r2, #5
 800f968:	697a      	ldr	r2, [r7, #20]
 800f96a:	440a      	add	r2, r1
 800f96c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f970:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f974:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f976:	693b      	ldr	r3, [r7, #16]
 800f978:	015a      	lsls	r2, r3, #5
 800f97a:	697b      	ldr	r3, [r7, #20]
 800f97c:	4413      	add	r3, r2
 800f97e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f982:	691b      	ldr	r3, [r3, #16]
 800f984:	693a      	ldr	r2, [r7, #16]
 800f986:	0151      	lsls	r1, r2, #5
 800f988:	697a      	ldr	r2, [r7, #20]
 800f98a:	440a      	add	r2, r1
 800f98c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f990:	0cdb      	lsrs	r3, r3, #19
 800f992:	04db      	lsls	r3, r3, #19
 800f994:	6113      	str	r3, [r2, #16]
 800f996:	e04e      	b.n	800fa36 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f998:	693b      	ldr	r3, [r7, #16]
 800f99a:	015a      	lsls	r2, r3, #5
 800f99c:	697b      	ldr	r3, [r7, #20]
 800f99e:	4413      	add	r3, r2
 800f9a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9a4:	691b      	ldr	r3, [r3, #16]
 800f9a6:	693a      	ldr	r2, [r7, #16]
 800f9a8:	0151      	lsls	r1, r2, #5
 800f9aa:	697a      	ldr	r2, [r7, #20]
 800f9ac:	440a      	add	r2, r1
 800f9ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9b2:	0cdb      	lsrs	r3, r3, #19
 800f9b4:	04db      	lsls	r3, r3, #19
 800f9b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f9b8:	693b      	ldr	r3, [r7, #16]
 800f9ba:	015a      	lsls	r2, r3, #5
 800f9bc:	697b      	ldr	r3, [r7, #20]
 800f9be:	4413      	add	r3, r2
 800f9c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9c4:	691b      	ldr	r3, [r3, #16]
 800f9c6:	693a      	ldr	r2, [r7, #16]
 800f9c8:	0151      	lsls	r1, r2, #5
 800f9ca:	697a      	ldr	r2, [r7, #20]
 800f9cc:	440a      	add	r2, r1
 800f9ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f9d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f9da:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800f9dc:	68bb      	ldr	r3, [r7, #8]
 800f9de:	695a      	ldr	r2, [r3, #20]
 800f9e0:	68bb      	ldr	r3, [r7, #8]
 800f9e2:	689b      	ldr	r3, [r3, #8]
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	d903      	bls.n	800f9f0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800f9e8:	68bb      	ldr	r3, [r7, #8]
 800f9ea:	689a      	ldr	r2, [r3, #8]
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f9f0:	693b      	ldr	r3, [r7, #16]
 800f9f2:	015a      	lsls	r2, r3, #5
 800f9f4:	697b      	ldr	r3, [r7, #20]
 800f9f6:	4413      	add	r3, r2
 800f9f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9fc:	691b      	ldr	r3, [r3, #16]
 800f9fe:	693a      	ldr	r2, [r7, #16]
 800fa00:	0151      	lsls	r1, r2, #5
 800fa02:	697a      	ldr	r2, [r7, #20]
 800fa04:	440a      	add	r2, r1
 800fa06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fa0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fa10:	693b      	ldr	r3, [r7, #16]
 800fa12:	015a      	lsls	r2, r3, #5
 800fa14:	697b      	ldr	r3, [r7, #20]
 800fa16:	4413      	add	r3, r2
 800fa18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa1c:	691a      	ldr	r2, [r3, #16]
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	695b      	ldr	r3, [r3, #20]
 800fa22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fa26:	6939      	ldr	r1, [r7, #16]
 800fa28:	0148      	lsls	r0, r1, #5
 800fa2a:	6979      	ldr	r1, [r7, #20]
 800fa2c:	4401      	add	r1, r0
 800fa2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fa32:	4313      	orrs	r3, r2
 800fa34:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800fa36:	79fb      	ldrb	r3, [r7, #7]
 800fa38:	2b01      	cmp	r3, #1
 800fa3a:	d11e      	bne.n	800fa7a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800fa3c:	68bb      	ldr	r3, [r7, #8]
 800fa3e:	691b      	ldr	r3, [r3, #16]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d009      	beq.n	800fa58 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fa44:	693b      	ldr	r3, [r7, #16]
 800fa46:	015a      	lsls	r2, r3, #5
 800fa48:	697b      	ldr	r3, [r7, #20]
 800fa4a:	4413      	add	r3, r2
 800fa4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa50:	461a      	mov	r2, r3
 800fa52:	68bb      	ldr	r3, [r7, #8]
 800fa54:	691b      	ldr	r3, [r3, #16]
 800fa56:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fa58:	693b      	ldr	r3, [r7, #16]
 800fa5a:	015a      	lsls	r2, r3, #5
 800fa5c:	697b      	ldr	r3, [r7, #20]
 800fa5e:	4413      	add	r3, r2
 800fa60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	693a      	ldr	r2, [r7, #16]
 800fa68:	0151      	lsls	r1, r2, #5
 800fa6a:	697a      	ldr	r2, [r7, #20]
 800fa6c:	440a      	add	r2, r1
 800fa6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fa76:	6013      	str	r3, [r2, #0]
 800fa78:	e092      	b.n	800fba0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fa7a:	693b      	ldr	r3, [r7, #16]
 800fa7c:	015a      	lsls	r2, r3, #5
 800fa7e:	697b      	ldr	r3, [r7, #20]
 800fa80:	4413      	add	r3, r2
 800fa82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	693a      	ldr	r2, [r7, #16]
 800fa8a:	0151      	lsls	r1, r2, #5
 800fa8c:	697a      	ldr	r2, [r7, #20]
 800fa8e:	440a      	add	r2, r1
 800fa90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fa98:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	695b      	ldr	r3, [r3, #20]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d07e      	beq.n	800fba0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800faa2:	697b      	ldr	r3, [r7, #20]
 800faa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800faa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	781b      	ldrb	r3, [r3, #0]
 800faae:	f003 030f 	and.w	r3, r3, #15
 800fab2:	2101      	movs	r1, #1
 800fab4:	fa01 f303 	lsl.w	r3, r1, r3
 800fab8:	6979      	ldr	r1, [r7, #20]
 800faba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fabe:	4313      	orrs	r3, r2
 800fac0:	634b      	str	r3, [r1, #52]	; 0x34
 800fac2:	e06d      	b.n	800fba0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fac4:	693b      	ldr	r3, [r7, #16]
 800fac6:	015a      	lsls	r2, r3, #5
 800fac8:	697b      	ldr	r3, [r7, #20]
 800faca:	4413      	add	r3, r2
 800facc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fad0:	691b      	ldr	r3, [r3, #16]
 800fad2:	693a      	ldr	r2, [r7, #16]
 800fad4:	0151      	lsls	r1, r2, #5
 800fad6:	697a      	ldr	r2, [r7, #20]
 800fad8:	440a      	add	r2, r1
 800fada:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fade:	0cdb      	lsrs	r3, r3, #19
 800fae0:	04db      	lsls	r3, r3, #19
 800fae2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800fae4:	693b      	ldr	r3, [r7, #16]
 800fae6:	015a      	lsls	r2, r3, #5
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	4413      	add	r3, r2
 800faec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800faf0:	691b      	ldr	r3, [r3, #16]
 800faf2:	693a      	ldr	r2, [r7, #16]
 800faf4:	0151      	lsls	r1, r2, #5
 800faf6:	697a      	ldr	r2, [r7, #20]
 800faf8:	440a      	add	r2, r1
 800fafa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fafe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fb02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fb06:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	695b      	ldr	r3, [r3, #20]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d003      	beq.n	800fb18 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800fb10:	68bb      	ldr	r3, [r7, #8]
 800fb12:	689a      	ldr	r2, [r3, #8]
 800fb14:	68bb      	ldr	r3, [r7, #8]
 800fb16:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fb18:	693b      	ldr	r3, [r7, #16]
 800fb1a:	015a      	lsls	r2, r3, #5
 800fb1c:	697b      	ldr	r3, [r7, #20]
 800fb1e:	4413      	add	r3, r2
 800fb20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb24:	691b      	ldr	r3, [r3, #16]
 800fb26:	693a      	ldr	r2, [r7, #16]
 800fb28:	0151      	lsls	r1, r2, #5
 800fb2a:	697a      	ldr	r2, [r7, #20]
 800fb2c:	440a      	add	r2, r1
 800fb2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fb36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800fb38:	693b      	ldr	r3, [r7, #16]
 800fb3a:	015a      	lsls	r2, r3, #5
 800fb3c:	697b      	ldr	r3, [r7, #20]
 800fb3e:	4413      	add	r3, r2
 800fb40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb44:	691a      	ldr	r2, [r3, #16]
 800fb46:	68bb      	ldr	r3, [r7, #8]
 800fb48:	689b      	ldr	r3, [r3, #8]
 800fb4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fb4e:	6939      	ldr	r1, [r7, #16]
 800fb50:	0148      	lsls	r0, r1, #5
 800fb52:	6979      	ldr	r1, [r7, #20]
 800fb54:	4401      	add	r1, r0
 800fb56:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fb5a:	4313      	orrs	r3, r2
 800fb5c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800fb5e:	79fb      	ldrb	r3, [r7, #7]
 800fb60:	2b01      	cmp	r3, #1
 800fb62:	d10d      	bne.n	800fb80 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	68db      	ldr	r3, [r3, #12]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d009      	beq.n	800fb80 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	68d9      	ldr	r1, [r3, #12]
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	015a      	lsls	r2, r3, #5
 800fb74:	697b      	ldr	r3, [r7, #20]
 800fb76:	4413      	add	r3, r2
 800fb78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb7c:	460a      	mov	r2, r1
 800fb7e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fb80:	693b      	ldr	r3, [r7, #16]
 800fb82:	015a      	lsls	r2, r3, #5
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	4413      	add	r3, r2
 800fb88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	693a      	ldr	r2, [r7, #16]
 800fb90:	0151      	lsls	r1, r2, #5
 800fb92:	697a      	ldr	r2, [r7, #20]
 800fb94:	440a      	add	r2, r1
 800fb96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fb9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fba0:	2300      	movs	r3, #0
}
 800fba2:	4618      	mov	r0, r3
 800fba4:	371c      	adds	r7, #28
 800fba6:	46bd      	mov	sp, r7
 800fba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbac:	4770      	bx	lr

0800fbae <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800fbae:	b480      	push	{r7}
 800fbb0:	b089      	sub	sp, #36	; 0x24
 800fbb2:	af00      	add	r7, sp, #0
 800fbb4:	60f8      	str	r0, [r7, #12]
 800fbb6:	60b9      	str	r1, [r7, #8]
 800fbb8:	4611      	mov	r1, r2
 800fbba:	461a      	mov	r2, r3
 800fbbc:	460b      	mov	r3, r1
 800fbbe:	71fb      	strb	r3, [r7, #7]
 800fbc0:	4613      	mov	r3, r2
 800fbc2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800fbc8:	68bb      	ldr	r3, [r7, #8]
 800fbca:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800fbcc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d123      	bne.n	800fc1c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800fbd4:	88bb      	ldrh	r3, [r7, #4]
 800fbd6:	3303      	adds	r3, #3
 800fbd8:	089b      	lsrs	r3, r3, #2
 800fbda:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800fbdc:	2300      	movs	r3, #0
 800fbde:	61bb      	str	r3, [r7, #24]
 800fbe0:	e018      	b.n	800fc14 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800fbe2:	79fb      	ldrb	r3, [r7, #7]
 800fbe4:	031a      	lsls	r2, r3, #12
 800fbe6:	697b      	ldr	r3, [r7, #20]
 800fbe8:	4413      	add	r3, r2
 800fbea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fbee:	461a      	mov	r2, r3
 800fbf0:	69fb      	ldr	r3, [r7, #28]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	6013      	str	r3, [r2, #0]
      pSrc++;
 800fbf6:	69fb      	ldr	r3, [r7, #28]
 800fbf8:	3301      	adds	r3, #1
 800fbfa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fbfc:	69fb      	ldr	r3, [r7, #28]
 800fbfe:	3301      	adds	r3, #1
 800fc00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fc02:	69fb      	ldr	r3, [r7, #28]
 800fc04:	3301      	adds	r3, #1
 800fc06:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fc08:	69fb      	ldr	r3, [r7, #28]
 800fc0a:	3301      	adds	r3, #1
 800fc0c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800fc0e:	69bb      	ldr	r3, [r7, #24]
 800fc10:	3301      	adds	r3, #1
 800fc12:	61bb      	str	r3, [r7, #24]
 800fc14:	69ba      	ldr	r2, [r7, #24]
 800fc16:	693b      	ldr	r3, [r7, #16]
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	d3e2      	bcc.n	800fbe2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800fc1c:	2300      	movs	r3, #0
}
 800fc1e:	4618      	mov	r0, r3
 800fc20:	3724      	adds	r7, #36	; 0x24
 800fc22:	46bd      	mov	sp, r7
 800fc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc28:	4770      	bx	lr

0800fc2a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800fc2a:	b480      	push	{r7}
 800fc2c:	b08b      	sub	sp, #44	; 0x2c
 800fc2e:	af00      	add	r7, sp, #0
 800fc30:	60f8      	str	r0, [r7, #12]
 800fc32:	60b9      	str	r1, [r7, #8]
 800fc34:	4613      	mov	r3, r2
 800fc36:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800fc3c:	68bb      	ldr	r3, [r7, #8]
 800fc3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800fc40:	88fb      	ldrh	r3, [r7, #6]
 800fc42:	089b      	lsrs	r3, r3, #2
 800fc44:	b29b      	uxth	r3, r3
 800fc46:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800fc48:	88fb      	ldrh	r3, [r7, #6]
 800fc4a:	f003 0303 	and.w	r3, r3, #3
 800fc4e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800fc50:	2300      	movs	r3, #0
 800fc52:	623b      	str	r3, [r7, #32]
 800fc54:	e014      	b.n	800fc80 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800fc56:	69bb      	ldr	r3, [r7, #24]
 800fc58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc5c:	681a      	ldr	r2, [r3, #0]
 800fc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc60:	601a      	str	r2, [r3, #0]
    pDest++;
 800fc62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc64:	3301      	adds	r3, #1
 800fc66:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc6a:	3301      	adds	r3, #1
 800fc6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fc6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc70:	3301      	adds	r3, #1
 800fc72:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc76:	3301      	adds	r3, #1
 800fc78:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800fc7a:	6a3b      	ldr	r3, [r7, #32]
 800fc7c:	3301      	adds	r3, #1
 800fc7e:	623b      	str	r3, [r7, #32]
 800fc80:	6a3a      	ldr	r2, [r7, #32]
 800fc82:	697b      	ldr	r3, [r7, #20]
 800fc84:	429a      	cmp	r2, r3
 800fc86:	d3e6      	bcc.n	800fc56 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800fc88:	8bfb      	ldrh	r3, [r7, #30]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d01e      	beq.n	800fccc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800fc8e:	2300      	movs	r3, #0
 800fc90:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800fc92:	69bb      	ldr	r3, [r7, #24]
 800fc94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc98:	461a      	mov	r2, r3
 800fc9a:	f107 0310 	add.w	r3, r7, #16
 800fc9e:	6812      	ldr	r2, [r2, #0]
 800fca0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800fca2:	693a      	ldr	r2, [r7, #16]
 800fca4:	6a3b      	ldr	r3, [r7, #32]
 800fca6:	b2db      	uxtb	r3, r3
 800fca8:	00db      	lsls	r3, r3, #3
 800fcaa:	fa22 f303 	lsr.w	r3, r2, r3
 800fcae:	b2da      	uxtb	r2, r3
 800fcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb2:	701a      	strb	r2, [r3, #0]
      i++;
 800fcb4:	6a3b      	ldr	r3, [r7, #32]
 800fcb6:	3301      	adds	r3, #1
 800fcb8:	623b      	str	r3, [r7, #32]
      pDest++;
 800fcba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcbc:	3301      	adds	r3, #1
 800fcbe:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800fcc0:	8bfb      	ldrh	r3, [r7, #30]
 800fcc2:	3b01      	subs	r3, #1
 800fcc4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800fcc6:	8bfb      	ldrh	r3, [r7, #30]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d1ea      	bne.n	800fca2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800fccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fcce:	4618      	mov	r0, r3
 800fcd0:	372c      	adds	r7, #44	; 0x2c
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd8:	4770      	bx	lr

0800fcda <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fcda:	b480      	push	{r7}
 800fcdc:	b085      	sub	sp, #20
 800fcde:	af00      	add	r7, sp, #0
 800fce0:	6078      	str	r0, [r7, #4]
 800fce2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	781b      	ldrb	r3, [r3, #0]
 800fcec:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	785b      	ldrb	r3, [r3, #1]
 800fcf2:	2b01      	cmp	r3, #1
 800fcf4:	d12c      	bne.n	800fd50 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fcf6:	68bb      	ldr	r3, [r7, #8]
 800fcf8:	015a      	lsls	r2, r3, #5
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	4413      	add	r3, r2
 800fcfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	db12      	blt.n	800fd2e <USB_EPSetStall+0x54>
 800fd08:	68bb      	ldr	r3, [r7, #8]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d00f      	beq.n	800fd2e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800fd0e:	68bb      	ldr	r3, [r7, #8]
 800fd10:	015a      	lsls	r2, r3, #5
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	4413      	add	r3, r2
 800fd16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	68ba      	ldr	r2, [r7, #8]
 800fd1e:	0151      	lsls	r1, r2, #5
 800fd20:	68fa      	ldr	r2, [r7, #12]
 800fd22:	440a      	add	r2, r1
 800fd24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fd2c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800fd2e:	68bb      	ldr	r3, [r7, #8]
 800fd30:	015a      	lsls	r2, r3, #5
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	4413      	add	r3, r2
 800fd36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	68ba      	ldr	r2, [r7, #8]
 800fd3e:	0151      	lsls	r1, r2, #5
 800fd40:	68fa      	ldr	r2, [r7, #12]
 800fd42:	440a      	add	r2, r1
 800fd44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fd4c:	6013      	str	r3, [r2, #0]
 800fd4e:	e02b      	b.n	800fda8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	015a      	lsls	r2, r3, #5
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	4413      	add	r3, r2
 800fd58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	db12      	blt.n	800fd88 <USB_EPSetStall+0xae>
 800fd62:	68bb      	ldr	r3, [r7, #8]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d00f      	beq.n	800fd88 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800fd68:	68bb      	ldr	r3, [r7, #8]
 800fd6a:	015a      	lsls	r2, r3, #5
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	4413      	add	r3, r2
 800fd70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	68ba      	ldr	r2, [r7, #8]
 800fd78:	0151      	lsls	r1, r2, #5
 800fd7a:	68fa      	ldr	r2, [r7, #12]
 800fd7c:	440a      	add	r2, r1
 800fd7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fd86:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	015a      	lsls	r2, r3, #5
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	4413      	add	r3, r2
 800fd90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	68ba      	ldr	r2, [r7, #8]
 800fd98:	0151      	lsls	r1, r2, #5
 800fd9a:	68fa      	ldr	r2, [r7, #12]
 800fd9c:	440a      	add	r2, r1
 800fd9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fda2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fda6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fda8:	2300      	movs	r3, #0
}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	3714      	adds	r7, #20
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb4:	4770      	bx	lr

0800fdb6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fdb6:	b480      	push	{r7}
 800fdb8:	b085      	sub	sp, #20
 800fdba:	af00      	add	r7, sp, #0
 800fdbc:	6078      	str	r0, [r7, #4]
 800fdbe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	781b      	ldrb	r3, [r3, #0]
 800fdc8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fdca:	683b      	ldr	r3, [r7, #0]
 800fdcc:	785b      	ldrb	r3, [r3, #1]
 800fdce:	2b01      	cmp	r3, #1
 800fdd0:	d128      	bne.n	800fe24 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800fdd2:	68bb      	ldr	r3, [r7, #8]
 800fdd4:	015a      	lsls	r2, r3, #5
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	4413      	add	r3, r2
 800fdda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	68ba      	ldr	r2, [r7, #8]
 800fde2:	0151      	lsls	r1, r2, #5
 800fde4:	68fa      	ldr	r2, [r7, #12]
 800fde6:	440a      	add	r2, r1
 800fde8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fdec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fdf0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fdf2:	683b      	ldr	r3, [r7, #0]
 800fdf4:	78db      	ldrb	r3, [r3, #3]
 800fdf6:	2b03      	cmp	r3, #3
 800fdf8:	d003      	beq.n	800fe02 <USB_EPClearStall+0x4c>
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	78db      	ldrb	r3, [r3, #3]
 800fdfe:	2b02      	cmp	r3, #2
 800fe00:	d138      	bne.n	800fe74 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fe02:	68bb      	ldr	r3, [r7, #8]
 800fe04:	015a      	lsls	r2, r3, #5
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	4413      	add	r3, r2
 800fe0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	68ba      	ldr	r2, [r7, #8]
 800fe12:	0151      	lsls	r1, r2, #5
 800fe14:	68fa      	ldr	r2, [r7, #12]
 800fe16:	440a      	add	r2, r1
 800fe18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fe20:	6013      	str	r3, [r2, #0]
 800fe22:	e027      	b.n	800fe74 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800fe24:	68bb      	ldr	r3, [r7, #8]
 800fe26:	015a      	lsls	r2, r3, #5
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	4413      	add	r3, r2
 800fe2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	68ba      	ldr	r2, [r7, #8]
 800fe34:	0151      	lsls	r1, r2, #5
 800fe36:	68fa      	ldr	r2, [r7, #12]
 800fe38:	440a      	add	r2, r1
 800fe3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fe42:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	78db      	ldrb	r3, [r3, #3]
 800fe48:	2b03      	cmp	r3, #3
 800fe4a:	d003      	beq.n	800fe54 <USB_EPClearStall+0x9e>
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	78db      	ldrb	r3, [r3, #3]
 800fe50:	2b02      	cmp	r3, #2
 800fe52:	d10f      	bne.n	800fe74 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fe54:	68bb      	ldr	r3, [r7, #8]
 800fe56:	015a      	lsls	r2, r3, #5
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	4413      	add	r3, r2
 800fe5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	68ba      	ldr	r2, [r7, #8]
 800fe64:	0151      	lsls	r1, r2, #5
 800fe66:	68fa      	ldr	r2, [r7, #12]
 800fe68:	440a      	add	r2, r1
 800fe6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fe72:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800fe74:	2300      	movs	r3, #0
}
 800fe76:	4618      	mov	r0, r3
 800fe78:	3714      	adds	r7, #20
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe80:	4770      	bx	lr

0800fe82 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800fe82:	b480      	push	{r7}
 800fe84:	b085      	sub	sp, #20
 800fe86:	af00      	add	r7, sp, #0
 800fe88:	6078      	str	r0, [r7, #4]
 800fe8a:	460b      	mov	r3, r1
 800fe8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	68fa      	ldr	r2, [r7, #12]
 800fe9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fea0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800fea4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800feac:	681a      	ldr	r2, [r3, #0]
 800feae:	78fb      	ldrb	r3, [r7, #3]
 800feb0:	011b      	lsls	r3, r3, #4
 800feb2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800feb6:	68f9      	ldr	r1, [r7, #12]
 800feb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800febc:	4313      	orrs	r3, r2
 800febe:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800fec0:	2300      	movs	r3, #0
}
 800fec2:	4618      	mov	r0, r3
 800fec4:	3714      	adds	r7, #20
 800fec6:	46bd      	mov	sp, r7
 800fec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fecc:	4770      	bx	lr

0800fece <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fece:	b480      	push	{r7}
 800fed0:	b085      	sub	sp, #20
 800fed2:	af00      	add	r7, sp, #0
 800fed4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	68fa      	ldr	r2, [r7, #12]
 800fee4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fee8:	f023 0303 	bic.w	r3, r3, #3
 800feec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fef4:	685b      	ldr	r3, [r3, #4]
 800fef6:	68fa      	ldr	r2, [r7, #12]
 800fef8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fefc:	f023 0302 	bic.w	r3, r3, #2
 800ff00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ff02:	2300      	movs	r3, #0
}
 800ff04:	4618      	mov	r0, r3
 800ff06:	3714      	adds	r7, #20
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0e:	4770      	bx	lr

0800ff10 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ff10:	b480      	push	{r7}
 800ff12:	b085      	sub	sp, #20
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	68fa      	ldr	r2, [r7, #12]
 800ff26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ff2a:	f023 0303 	bic.w	r3, r3, #3
 800ff2e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff36:	685b      	ldr	r3, [r3, #4]
 800ff38:	68fa      	ldr	r2, [r7, #12]
 800ff3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ff3e:	f043 0302 	orr.w	r3, r3, #2
 800ff42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ff44:	2300      	movs	r3, #0
}
 800ff46:	4618      	mov	r0, r3
 800ff48:	3714      	adds	r7, #20
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff50:	4770      	bx	lr

0800ff52 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ff52:	b480      	push	{r7}
 800ff54:	b085      	sub	sp, #20
 800ff56:	af00      	add	r7, sp, #0
 800ff58:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	695b      	ldr	r3, [r3, #20]
 800ff5e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	699b      	ldr	r3, [r3, #24]
 800ff64:	68fa      	ldr	r2, [r7, #12]
 800ff66:	4013      	ands	r3, r2
 800ff68:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ff6a:	68fb      	ldr	r3, [r7, #12]
}
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	3714      	adds	r7, #20
 800ff70:	46bd      	mov	sp, r7
 800ff72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff76:	4770      	bx	lr

0800ff78 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ff78:	b480      	push	{r7}
 800ff7a:	b085      	sub	sp, #20
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff8a:	699b      	ldr	r3, [r3, #24]
 800ff8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff94:	69db      	ldr	r3, [r3, #28]
 800ff96:	68ba      	ldr	r2, [r7, #8]
 800ff98:	4013      	ands	r3, r2
 800ff9a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	0c1b      	lsrs	r3, r3, #16
}
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	3714      	adds	r7, #20
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffaa:	4770      	bx	lr

0800ffac <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ffac:	b480      	push	{r7}
 800ffae:	b085      	sub	sp, #20
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffbe:	699b      	ldr	r3, [r3, #24]
 800ffc0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffc8:	69db      	ldr	r3, [r3, #28]
 800ffca:	68ba      	ldr	r2, [r7, #8]
 800ffcc:	4013      	ands	r3, r2
 800ffce:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	b29b      	uxth	r3, r3
}
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	3714      	adds	r7, #20
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffde:	4770      	bx	lr

0800ffe0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ffe0:	b480      	push	{r7}
 800ffe2:	b085      	sub	sp, #20
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
 800ffe8:	460b      	mov	r3, r1
 800ffea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800fff0:	78fb      	ldrb	r3, [r7, #3]
 800fff2:	015a      	lsls	r2, r3, #5
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	4413      	add	r3, r2
 800fff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fffc:	689b      	ldr	r3, [r3, #8]
 800fffe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010006:	695b      	ldr	r3, [r3, #20]
 8010008:	68ba      	ldr	r2, [r7, #8]
 801000a:	4013      	ands	r3, r2
 801000c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801000e:	68bb      	ldr	r3, [r7, #8]
}
 8010010:	4618      	mov	r0, r3
 8010012:	3714      	adds	r7, #20
 8010014:	46bd      	mov	sp, r7
 8010016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001a:	4770      	bx	lr

0801001c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801001c:	b480      	push	{r7}
 801001e:	b087      	sub	sp, #28
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
 8010024:	460b      	mov	r3, r1
 8010026:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801002c:	697b      	ldr	r3, [r7, #20]
 801002e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010032:	691b      	ldr	r3, [r3, #16]
 8010034:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010036:	697b      	ldr	r3, [r7, #20]
 8010038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801003c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801003e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010040:	78fb      	ldrb	r3, [r7, #3]
 8010042:	f003 030f 	and.w	r3, r3, #15
 8010046:	68fa      	ldr	r2, [r7, #12]
 8010048:	fa22 f303 	lsr.w	r3, r2, r3
 801004c:	01db      	lsls	r3, r3, #7
 801004e:	b2db      	uxtb	r3, r3
 8010050:	693a      	ldr	r2, [r7, #16]
 8010052:	4313      	orrs	r3, r2
 8010054:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010056:	78fb      	ldrb	r3, [r7, #3]
 8010058:	015a      	lsls	r2, r3, #5
 801005a:	697b      	ldr	r3, [r7, #20]
 801005c:	4413      	add	r3, r2
 801005e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010062:	689b      	ldr	r3, [r3, #8]
 8010064:	693a      	ldr	r2, [r7, #16]
 8010066:	4013      	ands	r3, r2
 8010068:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801006a:	68bb      	ldr	r3, [r7, #8]
}
 801006c:	4618      	mov	r0, r3
 801006e:	371c      	adds	r7, #28
 8010070:	46bd      	mov	sp, r7
 8010072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010076:	4770      	bx	lr

08010078 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010078:	b480      	push	{r7}
 801007a:	b083      	sub	sp, #12
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	695b      	ldr	r3, [r3, #20]
 8010084:	f003 0301 	and.w	r3, r3, #1
}
 8010088:	4618      	mov	r0, r3
 801008a:	370c      	adds	r7, #12
 801008c:	46bd      	mov	sp, r7
 801008e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010092:	4770      	bx	lr

08010094 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010094:	b480      	push	{r7}
 8010096:	b085      	sub	sp, #20
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	68fa      	ldr	r2, [r7, #12]
 80100aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100ae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80100b2:	f023 0307 	bic.w	r3, r3, #7
 80100b6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100be:	685b      	ldr	r3, [r3, #4]
 80100c0:	68fa      	ldr	r2, [r7, #12]
 80100c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80100c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80100ca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80100cc:	2300      	movs	r3, #0
}
 80100ce:	4618      	mov	r0, r3
 80100d0:	3714      	adds	r7, #20
 80100d2:	46bd      	mov	sp, r7
 80100d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d8:	4770      	bx	lr
	...

080100dc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80100dc:	b480      	push	{r7}
 80100de:	b087      	sub	sp, #28
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	60f8      	str	r0, [r7, #12]
 80100e4:	460b      	mov	r3, r1
 80100e6:	607a      	str	r2, [r7, #4]
 80100e8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	333c      	adds	r3, #60	; 0x3c
 80100f2:	3304      	adds	r3, #4
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80100f8:	693b      	ldr	r3, [r7, #16]
 80100fa:	4a26      	ldr	r2, [pc, #152]	; (8010194 <USB_EP0_OutStart+0xb8>)
 80100fc:	4293      	cmp	r3, r2
 80100fe:	d90a      	bls.n	8010116 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010100:	697b      	ldr	r3, [r7, #20]
 8010102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801010c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010110:	d101      	bne.n	8010116 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010112:	2300      	movs	r3, #0
 8010114:	e037      	b.n	8010186 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010116:	697b      	ldr	r3, [r7, #20]
 8010118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801011c:	461a      	mov	r2, r3
 801011e:	2300      	movs	r3, #0
 8010120:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010122:	697b      	ldr	r3, [r7, #20]
 8010124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010128:	691b      	ldr	r3, [r3, #16]
 801012a:	697a      	ldr	r2, [r7, #20]
 801012c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010130:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010134:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010136:	697b      	ldr	r3, [r7, #20]
 8010138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801013c:	691b      	ldr	r3, [r3, #16]
 801013e:	697a      	ldr	r2, [r7, #20]
 8010140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010144:	f043 0318 	orr.w	r3, r3, #24
 8010148:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801014a:	697b      	ldr	r3, [r7, #20]
 801014c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010150:	691b      	ldr	r3, [r3, #16]
 8010152:	697a      	ldr	r2, [r7, #20]
 8010154:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010158:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801015c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801015e:	7afb      	ldrb	r3, [r7, #11]
 8010160:	2b01      	cmp	r3, #1
 8010162:	d10f      	bne.n	8010184 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010164:	697b      	ldr	r3, [r7, #20]
 8010166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801016a:	461a      	mov	r2, r3
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010170:	697b      	ldr	r3, [r7, #20]
 8010172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	697a      	ldr	r2, [r7, #20]
 801017a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801017e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010182:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010184:	2300      	movs	r3, #0
}
 8010186:	4618      	mov	r0, r3
 8010188:	371c      	adds	r7, #28
 801018a:	46bd      	mov	sp, r7
 801018c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010190:	4770      	bx	lr
 8010192:	bf00      	nop
 8010194:	4f54300a 	.word	0x4f54300a

08010198 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010198:	b480      	push	{r7}
 801019a:	b085      	sub	sp, #20
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80101a0:	2300      	movs	r3, #0
 80101a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	3301      	adds	r3, #1
 80101a8:	60fb      	str	r3, [r7, #12]
 80101aa:	4a13      	ldr	r2, [pc, #76]	; (80101f8 <USB_CoreReset+0x60>)
 80101ac:	4293      	cmp	r3, r2
 80101ae:	d901      	bls.n	80101b4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80101b0:	2303      	movs	r3, #3
 80101b2:	e01a      	b.n	80101ea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	691b      	ldr	r3, [r3, #16]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	daf3      	bge.n	80101a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80101bc:	2300      	movs	r3, #0
 80101be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	691b      	ldr	r3, [r3, #16]
 80101c4:	f043 0201 	orr.w	r2, r3, #1
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	3301      	adds	r3, #1
 80101d0:	60fb      	str	r3, [r7, #12]
 80101d2:	4a09      	ldr	r2, [pc, #36]	; (80101f8 <USB_CoreReset+0x60>)
 80101d4:	4293      	cmp	r3, r2
 80101d6:	d901      	bls.n	80101dc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80101d8:	2303      	movs	r3, #3
 80101da:	e006      	b.n	80101ea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	691b      	ldr	r3, [r3, #16]
 80101e0:	f003 0301 	and.w	r3, r3, #1
 80101e4:	2b01      	cmp	r3, #1
 80101e6:	d0f1      	beq.n	80101cc <USB_CoreReset+0x34>

  return HAL_OK;
 80101e8:	2300      	movs	r3, #0
}
 80101ea:	4618      	mov	r0, r3
 80101ec:	3714      	adds	r7, #20
 80101ee:	46bd      	mov	sp, r7
 80101f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f4:	4770      	bx	lr
 80101f6:	bf00      	nop
 80101f8:	00030d40 	.word	0x00030d40

080101fc <set_NSS_pin>:
    status = HAL_SPI_TransmitReceive(&hspi, (uint8_t*)params, (uint8_t*)response, numOfParams, 100);
    HAL_GPIO_WritePin(NSS_GPIO, NSS, GPIO_PIN_SET);
    return status;
}

void set_NSS_pin(GPIO_TypeDef* _NSS_GPIO, uint16_t _NSS){
 80101fc:	b480      	push	{r7}
 80101fe:	b083      	sub	sp, #12
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
 8010204:	460b      	mov	r3, r1
 8010206:	807b      	strh	r3, [r7, #2]
    NSS = _NSS;
 8010208:	4a05      	ldr	r2, [pc, #20]	; (8010220 <set_NSS_pin+0x24>)
 801020a:	887b      	ldrh	r3, [r7, #2]
 801020c:	8013      	strh	r3, [r2, #0]
    NSS_GPIO = _NSS_GPIO;
 801020e:	4a05      	ldr	r2, [pc, #20]	; (8010224 <set_NSS_pin+0x28>)
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	6013      	str	r3, [r2, #0]
}
 8010214:	bf00      	nop
 8010216:	370c      	adds	r7, #12
 8010218:	46bd      	mov	sp, r7
 801021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021e:	4770      	bx	lr
 8010220:	200007c8 	.word	0x200007c8
 8010224:	200007cc 	.word	0x200007cc

08010228 <set_BUSY_pin>:

void set_BUSY_pin(GPIO_TypeDef* _BUSY_GPIO, uint16_t _BUSY){
 8010228:	b480      	push	{r7}
 801022a:	b083      	sub	sp, #12
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
 8010230:	460b      	mov	r3, r1
 8010232:	807b      	strh	r3, [r7, #2]
    BUSY = _BUSY;
 8010234:	4a05      	ldr	r2, [pc, #20]	; (801024c <set_BUSY_pin+0x24>)
 8010236:	887b      	ldrh	r3, [r7, #2]
 8010238:	8013      	strh	r3, [r2, #0]
    BUSY_GPIO = _BUSY_GPIO;
 801023a:	4a05      	ldr	r2, [pc, #20]	; (8010250 <set_BUSY_pin+0x28>)
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	6013      	str	r3, [r2, #0]
}
 8010240:	bf00      	nop
 8010242:	370c      	adds	r7, #12
 8010244:	46bd      	mov	sp, r7
 8010246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024a:	4770      	bx	lr
 801024c:	200007d8 	.word	0x200007d8
 8010250:	200007dc 	.word	0x200007dc

08010254 <set_NRESET_pin>:

void set_NRESET_pin(GPIO_TypeDef* _NRESET_GPIO, uint16_t _NRESET){
 8010254:	b480      	push	{r7}
 8010256:	b083      	sub	sp, #12
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
 801025c:	460b      	mov	r3, r1
 801025e:	807b      	strh	r3, [r7, #2]
    NRESET = _NRESET;
 8010260:	4a05      	ldr	r2, [pc, #20]	; (8010278 <set_NRESET_pin+0x24>)
 8010262:	887b      	ldrh	r3, [r7, #2]
 8010264:	8013      	strh	r3, [r2, #0]
    NRESET_GPIO = _NRESET_GPIO;
 8010266:	4a05      	ldr	r2, [pc, #20]	; (801027c <set_NRESET_pin+0x28>)
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	6013      	str	r3, [r2, #0]
}
 801026c:	bf00      	nop
 801026e:	370c      	adds	r7, #12
 8010270:	46bd      	mov	sp, r7
 8010272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010276:	4770      	bx	lr
 8010278:	200007d0 	.word	0x200007d0
 801027c:	200007d4 	.word	0x200007d4

08010280 <set_DIO1_pin>:

void set_DIO1_pin(GPIO_TypeDef* _DIO1_GPIO, uint16_t _DIO1){
 8010280:	b480      	push	{r7}
 8010282:	b083      	sub	sp, #12
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
 8010288:	460b      	mov	r3, r1
 801028a:	807b      	strh	r3, [r7, #2]
    DIO1 = _DIO1;
 801028c:	4a05      	ldr	r2, [pc, #20]	; (80102a4 <set_DIO1_pin+0x24>)
 801028e:	887b      	ldrh	r3, [r7, #2]
 8010290:	8013      	strh	r3, [r2, #0]
    DIO1_GPIO = _DIO1_GPIO;
 8010292:	4a05      	ldr	r2, [pc, #20]	; (80102a8 <set_DIO1_pin+0x28>)
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	6013      	str	r3, [r2, #0]
}
 8010298:	bf00      	nop
 801029a:	370c      	adds	r7, #12
 801029c:	46bd      	mov	sp, r7
 801029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a2:	4770      	bx	lr
 80102a4:	200007e0 	.word	0x200007e0
 80102a8:	200007e4 	.word	0x200007e4

080102ac <set_hspi>:
void set_DIO3_pin(GPIO_TypeDef* _DIO3_GPIO, uint16_t _DIO3){
    DIO3 = _DIO3;
    DIO3_GPIO = _DIO3_GPIO;
}

void set_hspi(SPI_HandleTypeDef _hspi){
 80102ac:	b084      	sub	sp, #16
 80102ae:	b580      	push	{r7, lr}
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	f107 0c08 	add.w	ip, r7, #8
 80102b6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    hspi = _hspi;
 80102ba:	4b07      	ldr	r3, [pc, #28]	; (80102d8 <set_hspi+0x2c>)
 80102bc:	4618      	mov	r0, r3
 80102be:	f107 0308 	add.w	r3, r7, #8
 80102c2:	2258      	movs	r2, #88	; 0x58
 80102c4:	4619      	mov	r1, r3
 80102c6:	f00a fa31 	bl	801a72c <memcpy>
}
 80102ca:	bf00      	nop
 80102cc:	46bd      	mov	sp, r7
 80102ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80102d2:	b004      	add	sp, #16
 80102d4:	4770      	bx	lr
 80102d6:	bf00      	nop
 80102d8:	200007e8 	.word	0x200007e8

080102dc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80102e0:	4904      	ldr	r1, [pc, #16]	; (80102f4 <MX_FATFS_Init+0x18>)
 80102e2:	4805      	ldr	r0, [pc, #20]	; (80102f8 <MX_FATFS_Init+0x1c>)
 80102e4:	f004 fffe 	bl	80152e4 <FATFS_LinkDriver>
 80102e8:	4603      	mov	r3, r0
 80102ea:	461a      	mov	r2, r3
 80102ec:	4b03      	ldr	r3, [pc, #12]	; (80102fc <MX_FATFS_Init+0x20>)
 80102ee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80102f0:	bf00      	nop
 80102f2:	bd80      	pop	{r7, pc}
 80102f4:	20007218 	.word	0x20007218
 80102f8:	20000060 	.word	0x20000060
 80102fc:	2000721c 	.word	0x2000721c

08010300 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010300:	b480      	push	{r7}
 8010302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8010304:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8010306:	4618      	mov	r0, r3
 8010308:	46bd      	mov	sp, r7
 801030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030e:	4770      	bx	lr

08010310 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b082      	sub	sp, #8
 8010314:	af00      	add	r7, sp, #0
 8010316:	4603      	mov	r3, r0
 8010318:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 801031a:	79fb      	ldrb	r3, [r7, #7]
 801031c:	4618      	mov	r0, r3
 801031e:	f000 f9dd 	bl	80106dc <USER_SPI_initialize>
 8010322:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8010324:	4618      	mov	r0, r3
 8010326:	3708      	adds	r7, #8
 8010328:	46bd      	mov	sp, r7
 801032a:	bd80      	pop	{r7, pc}

0801032c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b082      	sub	sp, #8
 8010330:	af00      	add	r7, sp, #0
 8010332:	4603      	mov	r3, r0
 8010334:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8010336:	79fb      	ldrb	r3, [r7, #7]
 8010338:	4618      	mov	r0, r3
 801033a:	f000 fab9 	bl	80108b0 <USER_SPI_status>
 801033e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8010340:	4618      	mov	r0, r3
 8010342:	3708      	adds	r7, #8
 8010344:	46bd      	mov	sp, r7
 8010346:	bd80      	pop	{r7, pc}

08010348 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b084      	sub	sp, #16
 801034c:	af00      	add	r7, sp, #0
 801034e:	60b9      	str	r1, [r7, #8]
 8010350:	607a      	str	r2, [r7, #4]
 8010352:	603b      	str	r3, [r7, #0]
 8010354:	4603      	mov	r3, r0
 8010356:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8010358:	7bf8      	ldrb	r0, [r7, #15]
 801035a:	683b      	ldr	r3, [r7, #0]
 801035c:	687a      	ldr	r2, [r7, #4]
 801035e:	68b9      	ldr	r1, [r7, #8]
 8010360:	f000 fabc 	bl	80108dc <USER_SPI_read>
 8010364:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8010366:	4618      	mov	r0, r3
 8010368:	3710      	adds	r7, #16
 801036a:	46bd      	mov	sp, r7
 801036c:	bd80      	pop	{r7, pc}

0801036e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801036e:	b580      	push	{r7, lr}
 8010370:	b084      	sub	sp, #16
 8010372:	af00      	add	r7, sp, #0
 8010374:	60b9      	str	r1, [r7, #8]
 8010376:	607a      	str	r2, [r7, #4]
 8010378:	603b      	str	r3, [r7, #0]
 801037a:	4603      	mov	r3, r0
 801037c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 801037e:	7bf8      	ldrb	r0, [r7, #15]
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	687a      	ldr	r2, [r7, #4]
 8010384:	68b9      	ldr	r1, [r7, #8]
 8010386:	f000 fb0f 	bl	80109a8 <USER_SPI_write>
 801038a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 801038c:	4618      	mov	r0, r3
 801038e:	3710      	adds	r7, #16
 8010390:	46bd      	mov	sp, r7
 8010392:	bd80      	pop	{r7, pc}

08010394 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8010394:	b580      	push	{r7, lr}
 8010396:	b082      	sub	sp, #8
 8010398:	af00      	add	r7, sp, #0
 801039a:	4603      	mov	r3, r0
 801039c:	603a      	str	r2, [r7, #0]
 801039e:	71fb      	strb	r3, [r7, #7]
 80103a0:	460b      	mov	r3, r1
 80103a2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 80103a4:	79b9      	ldrb	r1, [r7, #6]
 80103a6:	79fb      	ldrb	r3, [r7, #7]
 80103a8:	683a      	ldr	r2, [r7, #0]
 80103aa:	4618      	mov	r0, r3
 80103ac:	f000 fb78 	bl	8010aa0 <USER_SPI_ioctl>
 80103b0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80103b2:	4618      	mov	r0, r3
 80103b4:	3708      	adds	r7, #8
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}
	...

080103bc <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80103bc:	b580      	push	{r7, lr}
 80103be:	b082      	sub	sp, #8
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80103c4:	f7f7 fff0 	bl	80083a8 <HAL_GetTick>
 80103c8:	4603      	mov	r3, r0
 80103ca:	4a04      	ldr	r2, [pc, #16]	; (80103dc <SPI_Timer_On+0x20>)
 80103cc:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80103ce:	4a04      	ldr	r2, [pc, #16]	; (80103e0 <SPI_Timer_On+0x24>)
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	6013      	str	r3, [r2, #0]
}
 80103d4:	bf00      	nop
 80103d6:	3708      	adds	r7, #8
 80103d8:	46bd      	mov	sp, r7
 80103da:	bd80      	pop	{r7, pc}
 80103dc:	20007684 	.word	0x20007684
 80103e0:	20007688 	.word	0x20007688

080103e4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80103e4:	b580      	push	{r7, lr}
 80103e6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80103e8:	f7f7 ffde 	bl	80083a8 <HAL_GetTick>
 80103ec:	4602      	mov	r2, r0
 80103ee:	4b06      	ldr	r3, [pc, #24]	; (8010408 <SPI_Timer_Status+0x24>)
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	1ad2      	subs	r2, r2, r3
 80103f4:	4b05      	ldr	r3, [pc, #20]	; (801040c <SPI_Timer_Status+0x28>)
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	429a      	cmp	r2, r3
 80103fa:	bf34      	ite	cc
 80103fc:	2301      	movcc	r3, #1
 80103fe:	2300      	movcs	r3, #0
 8010400:	b2db      	uxtb	r3, r3
}
 8010402:	4618      	mov	r0, r3
 8010404:	bd80      	pop	{r7, pc}
 8010406:	bf00      	nop
 8010408:	20007684 	.word	0x20007684
 801040c:	20007688 	.word	0x20007688

08010410 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b086      	sub	sp, #24
 8010414:	af02      	add	r7, sp, #8
 8010416:	4603      	mov	r3, r0
 8010418:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 801041a:	f107 020f 	add.w	r2, r7, #15
 801041e:	1df9      	adds	r1, r7, #7
 8010420:	2332      	movs	r3, #50	; 0x32
 8010422:	9300      	str	r3, [sp, #0]
 8010424:	2301      	movs	r3, #1
 8010426:	4804      	ldr	r0, [pc, #16]	; (8010438 <xchg_spi+0x28>)
 8010428:	f7fc fef8 	bl	800d21c <HAL_SPI_TransmitReceive>
    return rxDat;
 801042c:	7bfb      	ldrb	r3, [r7, #15]
}
 801042e:	4618      	mov	r0, r3
 8010430:	3710      	adds	r7, #16
 8010432:	46bd      	mov	sp, r7
 8010434:	bd80      	pop	{r7, pc}
 8010436:	bf00      	nop
 8010438:	20005fbc 	.word	0x20005fbc

0801043c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 801043c:	b590      	push	{r4, r7, lr}
 801043e:	b085      	sub	sp, #20
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
 8010444:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8010446:	2300      	movs	r3, #0
 8010448:	60fb      	str	r3, [r7, #12]
 801044a:	e00a      	b.n	8010462 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 801044c:	687a      	ldr	r2, [r7, #4]
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	18d4      	adds	r4, r2, r3
 8010452:	20ff      	movs	r0, #255	; 0xff
 8010454:	f7ff ffdc 	bl	8010410 <xchg_spi>
 8010458:	4603      	mov	r3, r0
 801045a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	3301      	adds	r3, #1
 8010460:	60fb      	str	r3, [r7, #12]
 8010462:	68fa      	ldr	r2, [r7, #12]
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	429a      	cmp	r2, r3
 8010468:	d3f0      	bcc.n	801044c <rcvr_spi_multi+0x10>
	}
}
 801046a:	bf00      	nop
 801046c:	bf00      	nop
 801046e:	3714      	adds	r7, #20
 8010470:	46bd      	mov	sp, r7
 8010472:	bd90      	pop	{r4, r7, pc}

08010474 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b084      	sub	sp, #16
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
 801047c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 801047e:	2300      	movs	r3, #0
 8010480:	60fb      	str	r3, [r7, #12]
 8010482:	e009      	b.n	8010498 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8010484:	687a      	ldr	r2, [r7, #4]
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	4413      	add	r3, r2
 801048a:	781b      	ldrb	r3, [r3, #0]
 801048c:	4618      	mov	r0, r3
 801048e:	f7ff ffbf 	bl	8010410 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	3301      	adds	r3, #1
 8010496:	60fb      	str	r3, [r7, #12]
 8010498:	68fa      	ldr	r2, [r7, #12]
 801049a:	683b      	ldr	r3, [r7, #0]
 801049c:	429a      	cmp	r2, r3
 801049e:	d3f1      	bcc.n	8010484 <xmit_spi_multi+0x10>
	}
}
 80104a0:	bf00      	nop
 80104a2:	bf00      	nop
 80104a4:	3710      	adds	r7, #16
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}

080104aa <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80104aa:	b580      	push	{r7, lr}
 80104ac:	b086      	sub	sp, #24
 80104ae:	af00      	add	r7, sp, #0
 80104b0:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80104b2:	f7f7 ff79 	bl	80083a8 <HAL_GetTick>
 80104b6:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80104bc:	20ff      	movs	r0, #255	; 0xff
 80104be:	f7ff ffa7 	bl	8010410 <xchg_spi>
 80104c2:	4603      	mov	r3, r0
 80104c4:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80104c6:	7bfb      	ldrb	r3, [r7, #15]
 80104c8:	2bff      	cmp	r3, #255	; 0xff
 80104ca:	d007      	beq.n	80104dc <wait_ready+0x32>
 80104cc:	f7f7 ff6c 	bl	80083a8 <HAL_GetTick>
 80104d0:	4602      	mov	r2, r0
 80104d2:	697b      	ldr	r3, [r7, #20]
 80104d4:	1ad3      	subs	r3, r2, r3
 80104d6:	693a      	ldr	r2, [r7, #16]
 80104d8:	429a      	cmp	r2, r3
 80104da:	d8ef      	bhi.n	80104bc <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80104dc:	7bfb      	ldrb	r3, [r7, #15]
 80104de:	2bff      	cmp	r3, #255	; 0xff
 80104e0:	bf0c      	ite	eq
 80104e2:	2301      	moveq	r3, #1
 80104e4:	2300      	movne	r3, #0
 80104e6:	b2db      	uxtb	r3, r3
}
 80104e8:	4618      	mov	r0, r3
 80104ea:	3718      	adds	r7, #24
 80104ec:	46bd      	mov	sp, r7
 80104ee:	bd80      	pop	{r7, pc}

080104f0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80104f4:	2201      	movs	r2, #1
 80104f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80104fa:	4804      	ldr	r0, [pc, #16]	; (801050c <despiselect+0x1c>)
 80104fc:	f7f8 fcce 	bl	8008e9c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8010500:	20ff      	movs	r0, #255	; 0xff
 8010502:	f7ff ff85 	bl	8010410 <xchg_spi>

}
 8010506:	bf00      	nop
 8010508:	bd80      	pop	{r7, pc}
 801050a:	bf00      	nop
 801050c:	40021400 	.word	0x40021400

08010510 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8010510:	b580      	push	{r7, lr}
 8010512:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8010514:	2200      	movs	r2, #0
 8010516:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801051a:	480a      	ldr	r0, [pc, #40]	; (8010544 <spiselect+0x34>)
 801051c:	f7f8 fcbe 	bl	8008e9c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8010520:	20ff      	movs	r0, #255	; 0xff
 8010522:	f7ff ff75 	bl	8010410 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8010526:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801052a:	f7ff ffbe 	bl	80104aa <wait_ready>
 801052e:	4603      	mov	r3, r0
 8010530:	2b00      	cmp	r3, #0
 8010532:	d001      	beq.n	8010538 <spiselect+0x28>
 8010534:	2301      	movs	r3, #1
 8010536:	e002      	b.n	801053e <spiselect+0x2e>

	despiselect();
 8010538:	f7ff ffda 	bl	80104f0 <despiselect>
	return 0;	/* Timeout */
 801053c:	2300      	movs	r3, #0
}
 801053e:	4618      	mov	r0, r3
 8010540:	bd80      	pop	{r7, pc}
 8010542:	bf00      	nop
 8010544:	40021400 	.word	0x40021400

08010548 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b084      	sub	sp, #16
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
 8010550:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8010552:	20c8      	movs	r0, #200	; 0xc8
 8010554:	f7ff ff32 	bl	80103bc <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8010558:	20ff      	movs	r0, #255	; 0xff
 801055a:	f7ff ff59 	bl	8010410 <xchg_spi>
 801055e:	4603      	mov	r3, r0
 8010560:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8010562:	7bfb      	ldrb	r3, [r7, #15]
 8010564:	2bff      	cmp	r3, #255	; 0xff
 8010566:	d104      	bne.n	8010572 <rcvr_datablock+0x2a>
 8010568:	f7ff ff3c 	bl	80103e4 <SPI_Timer_Status>
 801056c:	4603      	mov	r3, r0
 801056e:	2b00      	cmp	r3, #0
 8010570:	d1f2      	bne.n	8010558 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8010572:	7bfb      	ldrb	r3, [r7, #15]
 8010574:	2bfe      	cmp	r3, #254	; 0xfe
 8010576:	d001      	beq.n	801057c <rcvr_datablock+0x34>
 8010578:	2300      	movs	r3, #0
 801057a:	e00a      	b.n	8010592 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 801057c:	6839      	ldr	r1, [r7, #0]
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f7ff ff5c 	bl	801043c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8010584:	20ff      	movs	r0, #255	; 0xff
 8010586:	f7ff ff43 	bl	8010410 <xchg_spi>
 801058a:	20ff      	movs	r0, #255	; 0xff
 801058c:	f7ff ff40 	bl	8010410 <xchg_spi>

	return 1;						/* Function succeeded */
 8010590:	2301      	movs	r3, #1
}
 8010592:	4618      	mov	r0, r3
 8010594:	3710      	adds	r7, #16
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}

0801059a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 801059a:	b580      	push	{r7, lr}
 801059c:	b084      	sub	sp, #16
 801059e:	af00      	add	r7, sp, #0
 80105a0:	6078      	str	r0, [r7, #4]
 80105a2:	460b      	mov	r3, r1
 80105a4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80105a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80105aa:	f7ff ff7e 	bl	80104aa <wait_ready>
 80105ae:	4603      	mov	r3, r0
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d101      	bne.n	80105b8 <xmit_datablock+0x1e>
 80105b4:	2300      	movs	r3, #0
 80105b6:	e01e      	b.n	80105f6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80105b8:	78fb      	ldrb	r3, [r7, #3]
 80105ba:	4618      	mov	r0, r3
 80105bc:	f7ff ff28 	bl	8010410 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80105c0:	78fb      	ldrb	r3, [r7, #3]
 80105c2:	2bfd      	cmp	r3, #253	; 0xfd
 80105c4:	d016      	beq.n	80105f4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80105c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f7ff ff52 	bl	8010474 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80105d0:	20ff      	movs	r0, #255	; 0xff
 80105d2:	f7ff ff1d 	bl	8010410 <xchg_spi>
 80105d6:	20ff      	movs	r0, #255	; 0xff
 80105d8:	f7ff ff1a 	bl	8010410 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80105dc:	20ff      	movs	r0, #255	; 0xff
 80105de:	f7ff ff17 	bl	8010410 <xchg_spi>
 80105e2:	4603      	mov	r3, r0
 80105e4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80105e6:	7bfb      	ldrb	r3, [r7, #15]
 80105e8:	f003 031f 	and.w	r3, r3, #31
 80105ec:	2b05      	cmp	r3, #5
 80105ee:	d001      	beq.n	80105f4 <xmit_datablock+0x5a>
 80105f0:	2300      	movs	r3, #0
 80105f2:	e000      	b.n	80105f6 <xmit_datablock+0x5c>
	}
	return 1;
 80105f4:	2301      	movs	r3, #1
}
 80105f6:	4618      	mov	r0, r3
 80105f8:	3710      	adds	r7, #16
 80105fa:	46bd      	mov	sp, r7
 80105fc:	bd80      	pop	{r7, pc}

080105fe <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80105fe:	b580      	push	{r7, lr}
 8010600:	b084      	sub	sp, #16
 8010602:	af00      	add	r7, sp, #0
 8010604:	4603      	mov	r3, r0
 8010606:	6039      	str	r1, [r7, #0]
 8010608:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 801060a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801060e:	2b00      	cmp	r3, #0
 8010610:	da0e      	bge.n	8010630 <send_cmd+0x32>
		cmd &= 0x7F;
 8010612:	79fb      	ldrb	r3, [r7, #7]
 8010614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010618:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 801061a:	2100      	movs	r1, #0
 801061c:	2037      	movs	r0, #55	; 0x37
 801061e:	f7ff ffee 	bl	80105fe <send_cmd>
 8010622:	4603      	mov	r3, r0
 8010624:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8010626:	7bbb      	ldrb	r3, [r7, #14]
 8010628:	2b01      	cmp	r3, #1
 801062a:	d901      	bls.n	8010630 <send_cmd+0x32>
 801062c:	7bbb      	ldrb	r3, [r7, #14]
 801062e:	e051      	b.n	80106d4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8010630:	79fb      	ldrb	r3, [r7, #7]
 8010632:	2b0c      	cmp	r3, #12
 8010634:	d008      	beq.n	8010648 <send_cmd+0x4a>
		despiselect();
 8010636:	f7ff ff5b 	bl	80104f0 <despiselect>
		if (!spiselect()) return 0xFF;
 801063a:	f7ff ff69 	bl	8010510 <spiselect>
 801063e:	4603      	mov	r3, r0
 8010640:	2b00      	cmp	r3, #0
 8010642:	d101      	bne.n	8010648 <send_cmd+0x4a>
 8010644:	23ff      	movs	r3, #255	; 0xff
 8010646:	e045      	b.n	80106d4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8010648:	79fb      	ldrb	r3, [r7, #7]
 801064a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801064e:	b2db      	uxtb	r3, r3
 8010650:	4618      	mov	r0, r3
 8010652:	f7ff fedd 	bl	8010410 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	0e1b      	lsrs	r3, r3, #24
 801065a:	b2db      	uxtb	r3, r3
 801065c:	4618      	mov	r0, r3
 801065e:	f7ff fed7 	bl	8010410 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8010662:	683b      	ldr	r3, [r7, #0]
 8010664:	0c1b      	lsrs	r3, r3, #16
 8010666:	b2db      	uxtb	r3, r3
 8010668:	4618      	mov	r0, r3
 801066a:	f7ff fed1 	bl	8010410 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 801066e:	683b      	ldr	r3, [r7, #0]
 8010670:	0a1b      	lsrs	r3, r3, #8
 8010672:	b2db      	uxtb	r3, r3
 8010674:	4618      	mov	r0, r3
 8010676:	f7ff fecb 	bl	8010410 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 801067a:	683b      	ldr	r3, [r7, #0]
 801067c:	b2db      	uxtb	r3, r3
 801067e:	4618      	mov	r0, r3
 8010680:	f7ff fec6 	bl	8010410 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8010684:	2301      	movs	r3, #1
 8010686:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8010688:	79fb      	ldrb	r3, [r7, #7]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d101      	bne.n	8010692 <send_cmd+0x94>
 801068e:	2395      	movs	r3, #149	; 0x95
 8010690:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8010692:	79fb      	ldrb	r3, [r7, #7]
 8010694:	2b08      	cmp	r3, #8
 8010696:	d101      	bne.n	801069c <send_cmd+0x9e>
 8010698:	2387      	movs	r3, #135	; 0x87
 801069a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 801069c:	7bfb      	ldrb	r3, [r7, #15]
 801069e:	4618      	mov	r0, r3
 80106a0:	f7ff feb6 	bl	8010410 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80106a4:	79fb      	ldrb	r3, [r7, #7]
 80106a6:	2b0c      	cmp	r3, #12
 80106a8:	d102      	bne.n	80106b0 <send_cmd+0xb2>
 80106aa:	20ff      	movs	r0, #255	; 0xff
 80106ac:	f7ff feb0 	bl	8010410 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80106b0:	230a      	movs	r3, #10
 80106b2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80106b4:	20ff      	movs	r0, #255	; 0xff
 80106b6:	f7ff feab 	bl	8010410 <xchg_spi>
 80106ba:	4603      	mov	r3, r0
 80106bc:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80106be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	da05      	bge.n	80106d2 <send_cmd+0xd4>
 80106c6:	7bfb      	ldrb	r3, [r7, #15]
 80106c8:	3b01      	subs	r3, #1
 80106ca:	73fb      	strb	r3, [r7, #15]
 80106cc:	7bfb      	ldrb	r3, [r7, #15]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d1f0      	bne.n	80106b4 <send_cmd+0xb6>

	return res;							/* Return received response */
 80106d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80106d4:	4618      	mov	r0, r3
 80106d6:	3710      	adds	r7, #16
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd80      	pop	{r7, pc}

080106dc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80106dc:	b590      	push	{r4, r7, lr}
 80106de:	b085      	sub	sp, #20
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	4603      	mov	r3, r0
 80106e4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80106e6:	79fb      	ldrb	r3, [r7, #7]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d001      	beq.n	80106f0 <USER_SPI_initialize+0x14>
 80106ec:	2301      	movs	r3, #1
 80106ee:	e0d4      	b.n	801089a <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80106f0:	4b6c      	ldr	r3, [pc, #432]	; (80108a4 <USER_SPI_initialize+0x1c8>)
 80106f2:	781b      	ldrb	r3, [r3, #0]
 80106f4:	b2db      	uxtb	r3, r3
 80106f6:	f003 0302 	and.w	r3, r3, #2
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d003      	beq.n	8010706 <USER_SPI_initialize+0x2a>
 80106fe:	4b69      	ldr	r3, [pc, #420]	; (80108a4 <USER_SPI_initialize+0x1c8>)
 8010700:	781b      	ldrb	r3, [r3, #0]
 8010702:	b2db      	uxtb	r3, r3
 8010704:	e0c9      	b.n	801089a <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 8010706:	4b68      	ldr	r3, [pc, #416]	; (80108a8 <USER_SPI_initialize+0x1cc>)
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	681a      	ldr	r2, [r3, #0]
 801070c:	4b66      	ldr	r3, [pc, #408]	; (80108a8 <USER_SPI_initialize+0x1cc>)
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8010714:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8010716:	230a      	movs	r3, #10
 8010718:	73fb      	strb	r3, [r7, #15]
 801071a:	e005      	b.n	8010728 <USER_SPI_initialize+0x4c>
 801071c:	20ff      	movs	r0, #255	; 0xff
 801071e:	f7ff fe77 	bl	8010410 <xchg_spi>
 8010722:	7bfb      	ldrb	r3, [r7, #15]
 8010724:	3b01      	subs	r3, #1
 8010726:	73fb      	strb	r3, [r7, #15]
 8010728:	7bfb      	ldrb	r3, [r7, #15]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d1f6      	bne.n	801071c <USER_SPI_initialize+0x40>

	ty = 0;
 801072e:	2300      	movs	r3, #0
 8010730:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8010732:	2100      	movs	r1, #0
 8010734:	2000      	movs	r0, #0
 8010736:	f7ff ff62 	bl	80105fe <send_cmd>
 801073a:	4603      	mov	r3, r0
 801073c:	2b01      	cmp	r3, #1
 801073e:	f040 808b 	bne.w	8010858 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8010742:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010746:	f7ff fe39 	bl	80103bc <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 801074a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801074e:	2008      	movs	r0, #8
 8010750:	f7ff ff55 	bl	80105fe <send_cmd>
 8010754:	4603      	mov	r3, r0
 8010756:	2b01      	cmp	r3, #1
 8010758:	d151      	bne.n	80107fe <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 801075a:	2300      	movs	r3, #0
 801075c:	73fb      	strb	r3, [r7, #15]
 801075e:	e00d      	b.n	801077c <USER_SPI_initialize+0xa0>
 8010760:	7bfc      	ldrb	r4, [r7, #15]
 8010762:	20ff      	movs	r0, #255	; 0xff
 8010764:	f7ff fe54 	bl	8010410 <xchg_spi>
 8010768:	4603      	mov	r3, r0
 801076a:	461a      	mov	r2, r3
 801076c:	f107 0310 	add.w	r3, r7, #16
 8010770:	4423      	add	r3, r4
 8010772:	f803 2c08 	strb.w	r2, [r3, #-8]
 8010776:	7bfb      	ldrb	r3, [r7, #15]
 8010778:	3301      	adds	r3, #1
 801077a:	73fb      	strb	r3, [r7, #15]
 801077c:	7bfb      	ldrb	r3, [r7, #15]
 801077e:	2b03      	cmp	r3, #3
 8010780:	d9ee      	bls.n	8010760 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8010782:	7abb      	ldrb	r3, [r7, #10]
 8010784:	2b01      	cmp	r3, #1
 8010786:	d167      	bne.n	8010858 <USER_SPI_initialize+0x17c>
 8010788:	7afb      	ldrb	r3, [r7, #11]
 801078a:	2baa      	cmp	r3, #170	; 0xaa
 801078c:	d164      	bne.n	8010858 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 801078e:	bf00      	nop
 8010790:	f7ff fe28 	bl	80103e4 <SPI_Timer_Status>
 8010794:	4603      	mov	r3, r0
 8010796:	2b00      	cmp	r3, #0
 8010798:	d007      	beq.n	80107aa <USER_SPI_initialize+0xce>
 801079a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 801079e:	20a9      	movs	r0, #169	; 0xa9
 80107a0:	f7ff ff2d 	bl	80105fe <send_cmd>
 80107a4:	4603      	mov	r3, r0
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d1f2      	bne.n	8010790 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80107aa:	f7ff fe1b 	bl	80103e4 <SPI_Timer_Status>
 80107ae:	4603      	mov	r3, r0
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d051      	beq.n	8010858 <USER_SPI_initialize+0x17c>
 80107b4:	2100      	movs	r1, #0
 80107b6:	203a      	movs	r0, #58	; 0x3a
 80107b8:	f7ff ff21 	bl	80105fe <send_cmd>
 80107bc:	4603      	mov	r3, r0
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d14a      	bne.n	8010858 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80107c2:	2300      	movs	r3, #0
 80107c4:	73fb      	strb	r3, [r7, #15]
 80107c6:	e00d      	b.n	80107e4 <USER_SPI_initialize+0x108>
 80107c8:	7bfc      	ldrb	r4, [r7, #15]
 80107ca:	20ff      	movs	r0, #255	; 0xff
 80107cc:	f7ff fe20 	bl	8010410 <xchg_spi>
 80107d0:	4603      	mov	r3, r0
 80107d2:	461a      	mov	r2, r3
 80107d4:	f107 0310 	add.w	r3, r7, #16
 80107d8:	4423      	add	r3, r4
 80107da:	f803 2c08 	strb.w	r2, [r3, #-8]
 80107de:	7bfb      	ldrb	r3, [r7, #15]
 80107e0:	3301      	adds	r3, #1
 80107e2:	73fb      	strb	r3, [r7, #15]
 80107e4:	7bfb      	ldrb	r3, [r7, #15]
 80107e6:	2b03      	cmp	r3, #3
 80107e8:	d9ee      	bls.n	80107c8 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80107ea:	7a3b      	ldrb	r3, [r7, #8]
 80107ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d001      	beq.n	80107f8 <USER_SPI_initialize+0x11c>
 80107f4:	230c      	movs	r3, #12
 80107f6:	e000      	b.n	80107fa <USER_SPI_initialize+0x11e>
 80107f8:	2304      	movs	r3, #4
 80107fa:	737b      	strb	r3, [r7, #13]
 80107fc:	e02c      	b.n	8010858 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80107fe:	2100      	movs	r1, #0
 8010800:	20a9      	movs	r0, #169	; 0xa9
 8010802:	f7ff fefc 	bl	80105fe <send_cmd>
 8010806:	4603      	mov	r3, r0
 8010808:	2b01      	cmp	r3, #1
 801080a:	d804      	bhi.n	8010816 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 801080c:	2302      	movs	r3, #2
 801080e:	737b      	strb	r3, [r7, #13]
 8010810:	23a9      	movs	r3, #169	; 0xa9
 8010812:	73bb      	strb	r3, [r7, #14]
 8010814:	e003      	b.n	801081e <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8010816:	2301      	movs	r3, #1
 8010818:	737b      	strb	r3, [r7, #13]
 801081a:	2301      	movs	r3, #1
 801081c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 801081e:	bf00      	nop
 8010820:	f7ff fde0 	bl	80103e4 <SPI_Timer_Status>
 8010824:	4603      	mov	r3, r0
 8010826:	2b00      	cmp	r3, #0
 8010828:	d007      	beq.n	801083a <USER_SPI_initialize+0x15e>
 801082a:	7bbb      	ldrb	r3, [r7, #14]
 801082c:	2100      	movs	r1, #0
 801082e:	4618      	mov	r0, r3
 8010830:	f7ff fee5 	bl	80105fe <send_cmd>
 8010834:	4603      	mov	r3, r0
 8010836:	2b00      	cmp	r3, #0
 8010838:	d1f2      	bne.n	8010820 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 801083a:	f7ff fdd3 	bl	80103e4 <SPI_Timer_Status>
 801083e:	4603      	mov	r3, r0
 8010840:	2b00      	cmp	r3, #0
 8010842:	d007      	beq.n	8010854 <USER_SPI_initialize+0x178>
 8010844:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010848:	2010      	movs	r0, #16
 801084a:	f7ff fed8 	bl	80105fe <send_cmd>
 801084e:	4603      	mov	r3, r0
 8010850:	2b00      	cmp	r3, #0
 8010852:	d001      	beq.n	8010858 <USER_SPI_initialize+0x17c>
				ty = 0;
 8010854:	2300      	movs	r3, #0
 8010856:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8010858:	4a14      	ldr	r2, [pc, #80]	; (80108ac <USER_SPI_initialize+0x1d0>)
 801085a:	7b7b      	ldrb	r3, [r7, #13]
 801085c:	7013      	strb	r3, [r2, #0]
	despiselect();
 801085e:	f7ff fe47 	bl	80104f0 <despiselect>

	if (ty) {			/* OK */
 8010862:	7b7b      	ldrb	r3, [r7, #13]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d012      	beq.n	801088e <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 8010868:	4b0f      	ldr	r3, [pc, #60]	; (80108a8 <USER_SPI_initialize+0x1cc>)
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8010872:	4b0d      	ldr	r3, [pc, #52]	; (80108a8 <USER_SPI_initialize+0x1cc>)
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	f042 0218 	orr.w	r2, r2, #24
 801087a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 801087c:	4b09      	ldr	r3, [pc, #36]	; (80108a4 <USER_SPI_initialize+0x1c8>)
 801087e:	781b      	ldrb	r3, [r3, #0]
 8010880:	b2db      	uxtb	r3, r3
 8010882:	f023 0301 	bic.w	r3, r3, #1
 8010886:	b2da      	uxtb	r2, r3
 8010888:	4b06      	ldr	r3, [pc, #24]	; (80108a4 <USER_SPI_initialize+0x1c8>)
 801088a:	701a      	strb	r2, [r3, #0]
 801088c:	e002      	b.n	8010894 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 801088e:	4b05      	ldr	r3, [pc, #20]	; (80108a4 <USER_SPI_initialize+0x1c8>)
 8010890:	2201      	movs	r2, #1
 8010892:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8010894:	4b03      	ldr	r3, [pc, #12]	; (80108a4 <USER_SPI_initialize+0x1c8>)
 8010896:	781b      	ldrb	r3, [r3, #0]
 8010898:	b2db      	uxtb	r3, r3
}
 801089a:	4618      	mov	r0, r3
 801089c:	3714      	adds	r7, #20
 801089e:	46bd      	mov	sp, r7
 80108a0:	bd90      	pop	{r4, r7, pc}
 80108a2:	bf00      	nop
 80108a4:	20000074 	.word	0x20000074
 80108a8:	20005fbc 	.word	0x20005fbc
 80108ac:	20000840 	.word	0x20000840

080108b0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80108b0:	b480      	push	{r7}
 80108b2:	b083      	sub	sp, #12
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	4603      	mov	r3, r0
 80108b8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80108ba:	79fb      	ldrb	r3, [r7, #7]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d001      	beq.n	80108c4 <USER_SPI_status+0x14>
 80108c0:	2301      	movs	r3, #1
 80108c2:	e002      	b.n	80108ca <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80108c4:	4b04      	ldr	r3, [pc, #16]	; (80108d8 <USER_SPI_status+0x28>)
 80108c6:	781b      	ldrb	r3, [r3, #0]
 80108c8:	b2db      	uxtb	r3, r3
}
 80108ca:	4618      	mov	r0, r3
 80108cc:	370c      	adds	r7, #12
 80108ce:	46bd      	mov	sp, r7
 80108d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d4:	4770      	bx	lr
 80108d6:	bf00      	nop
 80108d8:	20000074 	.word	0x20000074

080108dc <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b084      	sub	sp, #16
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	60b9      	str	r1, [r7, #8]
 80108e4:	607a      	str	r2, [r7, #4]
 80108e6:	603b      	str	r3, [r7, #0]
 80108e8:	4603      	mov	r3, r0
 80108ea:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80108ec:	7bfb      	ldrb	r3, [r7, #15]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d102      	bne.n	80108f8 <USER_SPI_read+0x1c>
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d101      	bne.n	80108fc <USER_SPI_read+0x20>
 80108f8:	2304      	movs	r3, #4
 80108fa:	e04d      	b.n	8010998 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80108fc:	4b28      	ldr	r3, [pc, #160]	; (80109a0 <USER_SPI_read+0xc4>)
 80108fe:	781b      	ldrb	r3, [r3, #0]
 8010900:	b2db      	uxtb	r3, r3
 8010902:	f003 0301 	and.w	r3, r3, #1
 8010906:	2b00      	cmp	r3, #0
 8010908:	d001      	beq.n	801090e <USER_SPI_read+0x32>
 801090a:	2303      	movs	r3, #3
 801090c:	e044      	b.n	8010998 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 801090e:	4b25      	ldr	r3, [pc, #148]	; (80109a4 <USER_SPI_read+0xc8>)
 8010910:	781b      	ldrb	r3, [r3, #0]
 8010912:	f003 0308 	and.w	r3, r3, #8
 8010916:	2b00      	cmp	r3, #0
 8010918:	d102      	bne.n	8010920 <USER_SPI_read+0x44>
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	025b      	lsls	r3, r3, #9
 801091e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8010920:	683b      	ldr	r3, [r7, #0]
 8010922:	2b01      	cmp	r3, #1
 8010924:	d111      	bne.n	801094a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8010926:	6879      	ldr	r1, [r7, #4]
 8010928:	2011      	movs	r0, #17
 801092a:	f7ff fe68 	bl	80105fe <send_cmd>
 801092e:	4603      	mov	r3, r0
 8010930:	2b00      	cmp	r3, #0
 8010932:	d129      	bne.n	8010988 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8010934:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010938:	68b8      	ldr	r0, [r7, #8]
 801093a:	f7ff fe05 	bl	8010548 <rcvr_datablock>
 801093e:	4603      	mov	r3, r0
 8010940:	2b00      	cmp	r3, #0
 8010942:	d021      	beq.n	8010988 <USER_SPI_read+0xac>
			count = 0;
 8010944:	2300      	movs	r3, #0
 8010946:	603b      	str	r3, [r7, #0]
 8010948:	e01e      	b.n	8010988 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 801094a:	6879      	ldr	r1, [r7, #4]
 801094c:	2012      	movs	r0, #18
 801094e:	f7ff fe56 	bl	80105fe <send_cmd>
 8010952:	4603      	mov	r3, r0
 8010954:	2b00      	cmp	r3, #0
 8010956:	d117      	bne.n	8010988 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8010958:	f44f 7100 	mov.w	r1, #512	; 0x200
 801095c:	68b8      	ldr	r0, [r7, #8]
 801095e:	f7ff fdf3 	bl	8010548 <rcvr_datablock>
 8010962:	4603      	mov	r3, r0
 8010964:	2b00      	cmp	r3, #0
 8010966:	d00a      	beq.n	801097e <USER_SPI_read+0xa2>
				buff += 512;
 8010968:	68bb      	ldr	r3, [r7, #8]
 801096a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801096e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8010970:	683b      	ldr	r3, [r7, #0]
 8010972:	3b01      	subs	r3, #1
 8010974:	603b      	str	r3, [r7, #0]
 8010976:	683b      	ldr	r3, [r7, #0]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d1ed      	bne.n	8010958 <USER_SPI_read+0x7c>
 801097c:	e000      	b.n	8010980 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 801097e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8010980:	2100      	movs	r1, #0
 8010982:	200c      	movs	r0, #12
 8010984:	f7ff fe3b 	bl	80105fe <send_cmd>
		}
	}
	despiselect();
 8010988:	f7ff fdb2 	bl	80104f0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 801098c:	683b      	ldr	r3, [r7, #0]
 801098e:	2b00      	cmp	r3, #0
 8010990:	bf14      	ite	ne
 8010992:	2301      	movne	r3, #1
 8010994:	2300      	moveq	r3, #0
 8010996:	b2db      	uxtb	r3, r3
}
 8010998:	4618      	mov	r0, r3
 801099a:	3710      	adds	r7, #16
 801099c:	46bd      	mov	sp, r7
 801099e:	bd80      	pop	{r7, pc}
 80109a0:	20000074 	.word	0x20000074
 80109a4:	20000840 	.word	0x20000840

080109a8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b084      	sub	sp, #16
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	60b9      	str	r1, [r7, #8]
 80109b0:	607a      	str	r2, [r7, #4]
 80109b2:	603b      	str	r3, [r7, #0]
 80109b4:	4603      	mov	r3, r0
 80109b6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80109b8:	7bfb      	ldrb	r3, [r7, #15]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d102      	bne.n	80109c4 <USER_SPI_write+0x1c>
 80109be:	683b      	ldr	r3, [r7, #0]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d101      	bne.n	80109c8 <USER_SPI_write+0x20>
 80109c4:	2304      	movs	r3, #4
 80109c6:	e063      	b.n	8010a90 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80109c8:	4b33      	ldr	r3, [pc, #204]	; (8010a98 <USER_SPI_write+0xf0>)
 80109ca:	781b      	ldrb	r3, [r3, #0]
 80109cc:	b2db      	uxtb	r3, r3
 80109ce:	f003 0301 	and.w	r3, r3, #1
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d001      	beq.n	80109da <USER_SPI_write+0x32>
 80109d6:	2303      	movs	r3, #3
 80109d8:	e05a      	b.n	8010a90 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80109da:	4b2f      	ldr	r3, [pc, #188]	; (8010a98 <USER_SPI_write+0xf0>)
 80109dc:	781b      	ldrb	r3, [r3, #0]
 80109de:	b2db      	uxtb	r3, r3
 80109e0:	f003 0304 	and.w	r3, r3, #4
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d001      	beq.n	80109ec <USER_SPI_write+0x44>
 80109e8:	2302      	movs	r3, #2
 80109ea:	e051      	b.n	8010a90 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80109ec:	4b2b      	ldr	r3, [pc, #172]	; (8010a9c <USER_SPI_write+0xf4>)
 80109ee:	781b      	ldrb	r3, [r3, #0]
 80109f0:	f003 0308 	and.w	r3, r3, #8
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d102      	bne.n	80109fe <USER_SPI_write+0x56>
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	025b      	lsls	r3, r3, #9
 80109fc:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80109fe:	683b      	ldr	r3, [r7, #0]
 8010a00:	2b01      	cmp	r3, #1
 8010a02:	d110      	bne.n	8010a26 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8010a04:	6879      	ldr	r1, [r7, #4]
 8010a06:	2018      	movs	r0, #24
 8010a08:	f7ff fdf9 	bl	80105fe <send_cmd>
 8010a0c:	4603      	mov	r3, r0
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d136      	bne.n	8010a80 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8010a12:	21fe      	movs	r1, #254	; 0xfe
 8010a14:	68b8      	ldr	r0, [r7, #8]
 8010a16:	f7ff fdc0 	bl	801059a <xmit_datablock>
 8010a1a:	4603      	mov	r3, r0
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d02f      	beq.n	8010a80 <USER_SPI_write+0xd8>
			count = 0;
 8010a20:	2300      	movs	r3, #0
 8010a22:	603b      	str	r3, [r7, #0]
 8010a24:	e02c      	b.n	8010a80 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8010a26:	4b1d      	ldr	r3, [pc, #116]	; (8010a9c <USER_SPI_write+0xf4>)
 8010a28:	781b      	ldrb	r3, [r3, #0]
 8010a2a:	f003 0306 	and.w	r3, r3, #6
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d003      	beq.n	8010a3a <USER_SPI_write+0x92>
 8010a32:	6839      	ldr	r1, [r7, #0]
 8010a34:	2097      	movs	r0, #151	; 0x97
 8010a36:	f7ff fde2 	bl	80105fe <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8010a3a:	6879      	ldr	r1, [r7, #4]
 8010a3c:	2019      	movs	r0, #25
 8010a3e:	f7ff fdde 	bl	80105fe <send_cmd>
 8010a42:	4603      	mov	r3, r0
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d11b      	bne.n	8010a80 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8010a48:	21fc      	movs	r1, #252	; 0xfc
 8010a4a:	68b8      	ldr	r0, [r7, #8]
 8010a4c:	f7ff fda5 	bl	801059a <xmit_datablock>
 8010a50:	4603      	mov	r3, r0
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d00a      	beq.n	8010a6c <USER_SPI_write+0xc4>
				buff += 512;
 8010a56:	68bb      	ldr	r3, [r7, #8]
 8010a58:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8010a5c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8010a5e:	683b      	ldr	r3, [r7, #0]
 8010a60:	3b01      	subs	r3, #1
 8010a62:	603b      	str	r3, [r7, #0]
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d1ee      	bne.n	8010a48 <USER_SPI_write+0xa0>
 8010a6a:	e000      	b.n	8010a6e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8010a6c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8010a6e:	21fd      	movs	r1, #253	; 0xfd
 8010a70:	2000      	movs	r0, #0
 8010a72:	f7ff fd92 	bl	801059a <xmit_datablock>
 8010a76:	4603      	mov	r3, r0
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d101      	bne.n	8010a80 <USER_SPI_write+0xd8>
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8010a80:	f7ff fd36 	bl	80104f0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8010a84:	683b      	ldr	r3, [r7, #0]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	bf14      	ite	ne
 8010a8a:	2301      	movne	r3, #1
 8010a8c:	2300      	moveq	r3, #0
 8010a8e:	b2db      	uxtb	r3, r3
}
 8010a90:	4618      	mov	r0, r3
 8010a92:	3710      	adds	r7, #16
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd80      	pop	{r7, pc}
 8010a98:	20000074 	.word	0x20000074
 8010a9c:	20000840 	.word	0x20000840

08010aa0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b08c      	sub	sp, #48	; 0x30
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	603a      	str	r2, [r7, #0]
 8010aaa:	71fb      	strb	r3, [r7, #7]
 8010aac:	460b      	mov	r3, r1
 8010aae:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8010ab0:	79fb      	ldrb	r3, [r7, #7]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d001      	beq.n	8010aba <USER_SPI_ioctl+0x1a>
 8010ab6:	2304      	movs	r3, #4
 8010ab8:	e15a      	b.n	8010d70 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8010aba:	4baf      	ldr	r3, [pc, #700]	; (8010d78 <USER_SPI_ioctl+0x2d8>)
 8010abc:	781b      	ldrb	r3, [r3, #0]
 8010abe:	b2db      	uxtb	r3, r3
 8010ac0:	f003 0301 	and.w	r3, r3, #1
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d001      	beq.n	8010acc <USER_SPI_ioctl+0x2c>
 8010ac8:	2303      	movs	r3, #3
 8010aca:	e151      	b.n	8010d70 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8010acc:	2301      	movs	r3, #1
 8010ace:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8010ad2:	79bb      	ldrb	r3, [r7, #6]
 8010ad4:	2b04      	cmp	r3, #4
 8010ad6:	f200 8136 	bhi.w	8010d46 <USER_SPI_ioctl+0x2a6>
 8010ada:	a201      	add	r2, pc, #4	; (adr r2, 8010ae0 <USER_SPI_ioctl+0x40>)
 8010adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ae0:	08010af5 	.word	0x08010af5
 8010ae4:	08010b09 	.word	0x08010b09
 8010ae8:	08010d47 	.word	0x08010d47
 8010aec:	08010bb5 	.word	0x08010bb5
 8010af0:	08010cab 	.word	0x08010cab
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8010af4:	f7ff fd0c 	bl	8010510 <spiselect>
 8010af8:	4603      	mov	r3, r0
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	f000 8127 	beq.w	8010d4e <USER_SPI_ioctl+0x2ae>
 8010b00:	2300      	movs	r3, #0
 8010b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8010b06:	e122      	b.n	8010d4e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8010b08:	2100      	movs	r1, #0
 8010b0a:	2009      	movs	r0, #9
 8010b0c:	f7ff fd77 	bl	80105fe <send_cmd>
 8010b10:	4603      	mov	r3, r0
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	f040 811d 	bne.w	8010d52 <USER_SPI_ioctl+0x2b2>
 8010b18:	f107 030c 	add.w	r3, r7, #12
 8010b1c:	2110      	movs	r1, #16
 8010b1e:	4618      	mov	r0, r3
 8010b20:	f7ff fd12 	bl	8010548 <rcvr_datablock>
 8010b24:	4603      	mov	r3, r0
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	f000 8113 	beq.w	8010d52 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8010b2c:	7b3b      	ldrb	r3, [r7, #12]
 8010b2e:	099b      	lsrs	r3, r3, #6
 8010b30:	b2db      	uxtb	r3, r3
 8010b32:	2b01      	cmp	r3, #1
 8010b34:	d111      	bne.n	8010b5a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8010b36:	7d7b      	ldrb	r3, [r7, #21]
 8010b38:	461a      	mov	r2, r3
 8010b3a:	7d3b      	ldrb	r3, [r7, #20]
 8010b3c:	021b      	lsls	r3, r3, #8
 8010b3e:	4413      	add	r3, r2
 8010b40:	461a      	mov	r2, r3
 8010b42:	7cfb      	ldrb	r3, [r7, #19]
 8010b44:	041b      	lsls	r3, r3, #16
 8010b46:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8010b4a:	4413      	add	r3, r2
 8010b4c:	3301      	adds	r3, #1
 8010b4e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8010b50:	69fb      	ldr	r3, [r7, #28]
 8010b52:	029a      	lsls	r2, r3, #10
 8010b54:	683b      	ldr	r3, [r7, #0]
 8010b56:	601a      	str	r2, [r3, #0]
 8010b58:	e028      	b.n	8010bac <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8010b5a:	7c7b      	ldrb	r3, [r7, #17]
 8010b5c:	f003 030f 	and.w	r3, r3, #15
 8010b60:	b2da      	uxtb	r2, r3
 8010b62:	7dbb      	ldrb	r3, [r7, #22]
 8010b64:	09db      	lsrs	r3, r3, #7
 8010b66:	b2db      	uxtb	r3, r3
 8010b68:	4413      	add	r3, r2
 8010b6a:	b2da      	uxtb	r2, r3
 8010b6c:	7d7b      	ldrb	r3, [r7, #21]
 8010b6e:	005b      	lsls	r3, r3, #1
 8010b70:	b2db      	uxtb	r3, r3
 8010b72:	f003 0306 	and.w	r3, r3, #6
 8010b76:	b2db      	uxtb	r3, r3
 8010b78:	4413      	add	r3, r2
 8010b7a:	b2db      	uxtb	r3, r3
 8010b7c:	3302      	adds	r3, #2
 8010b7e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8010b82:	7d3b      	ldrb	r3, [r7, #20]
 8010b84:	099b      	lsrs	r3, r3, #6
 8010b86:	b2db      	uxtb	r3, r3
 8010b88:	461a      	mov	r2, r3
 8010b8a:	7cfb      	ldrb	r3, [r7, #19]
 8010b8c:	009b      	lsls	r3, r3, #2
 8010b8e:	441a      	add	r2, r3
 8010b90:	7cbb      	ldrb	r3, [r7, #18]
 8010b92:	029b      	lsls	r3, r3, #10
 8010b94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010b98:	4413      	add	r3, r2
 8010b9a:	3301      	adds	r3, #1
 8010b9c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8010b9e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010ba2:	3b09      	subs	r3, #9
 8010ba4:	69fa      	ldr	r2, [r7, #28]
 8010ba6:	409a      	lsls	r2, r3
 8010ba8:	683b      	ldr	r3, [r7, #0]
 8010baa:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8010bac:	2300      	movs	r3, #0
 8010bae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8010bb2:	e0ce      	b.n	8010d52 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8010bb4:	4b71      	ldr	r3, [pc, #452]	; (8010d7c <USER_SPI_ioctl+0x2dc>)
 8010bb6:	781b      	ldrb	r3, [r3, #0]
 8010bb8:	f003 0304 	and.w	r3, r3, #4
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d031      	beq.n	8010c24 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8010bc0:	2100      	movs	r1, #0
 8010bc2:	208d      	movs	r0, #141	; 0x8d
 8010bc4:	f7ff fd1b 	bl	80105fe <send_cmd>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	f040 80c3 	bne.w	8010d56 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8010bd0:	20ff      	movs	r0, #255	; 0xff
 8010bd2:	f7ff fc1d 	bl	8010410 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8010bd6:	f107 030c 	add.w	r3, r7, #12
 8010bda:	2110      	movs	r1, #16
 8010bdc:	4618      	mov	r0, r3
 8010bde:	f7ff fcb3 	bl	8010548 <rcvr_datablock>
 8010be2:	4603      	mov	r3, r0
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	f000 80b6 	beq.w	8010d56 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8010bea:	2330      	movs	r3, #48	; 0x30
 8010bec:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8010bf0:	e007      	b.n	8010c02 <USER_SPI_ioctl+0x162>
 8010bf2:	20ff      	movs	r0, #255	; 0xff
 8010bf4:	f7ff fc0c 	bl	8010410 <xchg_spi>
 8010bf8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010bfc:	3b01      	subs	r3, #1
 8010bfe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8010c02:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d1f3      	bne.n	8010bf2 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8010c0a:	7dbb      	ldrb	r3, [r7, #22]
 8010c0c:	091b      	lsrs	r3, r3, #4
 8010c0e:	b2db      	uxtb	r3, r3
 8010c10:	461a      	mov	r2, r3
 8010c12:	2310      	movs	r3, #16
 8010c14:	fa03 f202 	lsl.w	r2, r3, r2
 8010c18:	683b      	ldr	r3, [r7, #0]
 8010c1a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8010c22:	e098      	b.n	8010d56 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8010c24:	2100      	movs	r1, #0
 8010c26:	2009      	movs	r0, #9
 8010c28:	f7ff fce9 	bl	80105fe <send_cmd>
 8010c2c:	4603      	mov	r3, r0
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	f040 8091 	bne.w	8010d56 <USER_SPI_ioctl+0x2b6>
 8010c34:	f107 030c 	add.w	r3, r7, #12
 8010c38:	2110      	movs	r1, #16
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f7ff fc84 	bl	8010548 <rcvr_datablock>
 8010c40:	4603      	mov	r3, r0
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	f000 8087 	beq.w	8010d56 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8010c48:	4b4c      	ldr	r3, [pc, #304]	; (8010d7c <USER_SPI_ioctl+0x2dc>)
 8010c4a:	781b      	ldrb	r3, [r3, #0]
 8010c4c:	f003 0302 	and.w	r3, r3, #2
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d012      	beq.n	8010c7a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8010c54:	7dbb      	ldrb	r3, [r7, #22]
 8010c56:	005b      	lsls	r3, r3, #1
 8010c58:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8010c5c:	7dfa      	ldrb	r2, [r7, #23]
 8010c5e:	09d2      	lsrs	r2, r2, #7
 8010c60:	b2d2      	uxtb	r2, r2
 8010c62:	4413      	add	r3, r2
 8010c64:	1c5a      	adds	r2, r3, #1
 8010c66:	7e7b      	ldrb	r3, [r7, #25]
 8010c68:	099b      	lsrs	r3, r3, #6
 8010c6a:	b2db      	uxtb	r3, r3
 8010c6c:	3b01      	subs	r3, #1
 8010c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8010c72:	461a      	mov	r2, r3
 8010c74:	683b      	ldr	r3, [r7, #0]
 8010c76:	601a      	str	r2, [r3, #0]
 8010c78:	e013      	b.n	8010ca2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8010c7a:	7dbb      	ldrb	r3, [r7, #22]
 8010c7c:	109b      	asrs	r3, r3, #2
 8010c7e:	b29b      	uxth	r3, r3
 8010c80:	f003 031f 	and.w	r3, r3, #31
 8010c84:	3301      	adds	r3, #1
 8010c86:	7dfa      	ldrb	r2, [r7, #23]
 8010c88:	00d2      	lsls	r2, r2, #3
 8010c8a:	f002 0218 	and.w	r2, r2, #24
 8010c8e:	7df9      	ldrb	r1, [r7, #23]
 8010c90:	0949      	lsrs	r1, r1, #5
 8010c92:	b2c9      	uxtb	r1, r1
 8010c94:	440a      	add	r2, r1
 8010c96:	3201      	adds	r2, #1
 8010c98:	fb02 f303 	mul.w	r3, r2, r3
 8010c9c:	461a      	mov	r2, r3
 8010c9e:	683b      	ldr	r3, [r7, #0]
 8010ca0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8010ca8:	e055      	b.n	8010d56 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8010caa:	4b34      	ldr	r3, [pc, #208]	; (8010d7c <USER_SPI_ioctl+0x2dc>)
 8010cac:	781b      	ldrb	r3, [r3, #0]
 8010cae:	f003 0306 	and.w	r3, r3, #6
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d051      	beq.n	8010d5a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8010cb6:	f107 020c 	add.w	r2, r7, #12
 8010cba:	79fb      	ldrb	r3, [r7, #7]
 8010cbc:	210b      	movs	r1, #11
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	f7ff feee 	bl	8010aa0 <USER_SPI_ioctl>
 8010cc4:	4603      	mov	r3, r0
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d149      	bne.n	8010d5e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8010cca:	7b3b      	ldrb	r3, [r7, #12]
 8010ccc:	099b      	lsrs	r3, r3, #6
 8010cce:	b2db      	uxtb	r3, r3
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d104      	bne.n	8010cde <USER_SPI_ioctl+0x23e>
 8010cd4:	7dbb      	ldrb	r3, [r7, #22]
 8010cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d041      	beq.n	8010d62 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8010cde:	683b      	ldr	r3, [r7, #0]
 8010ce0:	623b      	str	r3, [r7, #32]
 8010ce2:	6a3b      	ldr	r3, [r7, #32]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	62bb      	str	r3, [r7, #40]	; 0x28
 8010ce8:	6a3b      	ldr	r3, [r7, #32]
 8010cea:	685b      	ldr	r3, [r3, #4]
 8010cec:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8010cee:	4b23      	ldr	r3, [pc, #140]	; (8010d7c <USER_SPI_ioctl+0x2dc>)
 8010cf0:	781b      	ldrb	r3, [r3, #0]
 8010cf2:	f003 0308 	and.w	r3, r3, #8
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d105      	bne.n	8010d06 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8010cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cfc:	025b      	lsls	r3, r3, #9
 8010cfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8010d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d02:	025b      	lsls	r3, r3, #9
 8010d04:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8010d06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010d08:	2020      	movs	r0, #32
 8010d0a:	f7ff fc78 	bl	80105fe <send_cmd>
 8010d0e:	4603      	mov	r3, r0
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d128      	bne.n	8010d66 <USER_SPI_ioctl+0x2c6>
 8010d14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010d16:	2021      	movs	r0, #33	; 0x21
 8010d18:	f7ff fc71 	bl	80105fe <send_cmd>
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d121      	bne.n	8010d66 <USER_SPI_ioctl+0x2c6>
 8010d22:	2100      	movs	r1, #0
 8010d24:	2026      	movs	r0, #38	; 0x26
 8010d26:	f7ff fc6a 	bl	80105fe <send_cmd>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d11a      	bne.n	8010d66 <USER_SPI_ioctl+0x2c6>
 8010d30:	f247 5030 	movw	r0, #30000	; 0x7530
 8010d34:	f7ff fbb9 	bl	80104aa <wait_ready>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d013      	beq.n	8010d66 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8010d3e:	2300      	movs	r3, #0
 8010d40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8010d44:	e00f      	b.n	8010d66 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8010d46:	2304      	movs	r3, #4
 8010d48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010d4c:	e00c      	b.n	8010d68 <USER_SPI_ioctl+0x2c8>
		break;
 8010d4e:	bf00      	nop
 8010d50:	e00a      	b.n	8010d68 <USER_SPI_ioctl+0x2c8>
		break;
 8010d52:	bf00      	nop
 8010d54:	e008      	b.n	8010d68 <USER_SPI_ioctl+0x2c8>
		break;
 8010d56:	bf00      	nop
 8010d58:	e006      	b.n	8010d68 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8010d5a:	bf00      	nop
 8010d5c:	e004      	b.n	8010d68 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8010d5e:	bf00      	nop
 8010d60:	e002      	b.n	8010d68 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8010d62:	bf00      	nop
 8010d64:	e000      	b.n	8010d68 <USER_SPI_ioctl+0x2c8>
		break;
 8010d66:	bf00      	nop
	}

	despiselect();
 8010d68:	f7ff fbc2 	bl	80104f0 <despiselect>

	return res;
 8010d6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010d70:	4618      	mov	r0, r3
 8010d72:	3730      	adds	r7, #48	; 0x30
 8010d74:	46bd      	mov	sp, r7
 8010d76:	bd80      	pop	{r7, pc}
 8010d78:	20000074 	.word	0x20000074
 8010d7c:	20000840 	.word	0x20000840

08010d80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b084      	sub	sp, #16
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
 8010d88:	460b      	mov	r3, r1
 8010d8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010d8c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010d90:	f008 fb72 	bl	8019478 <USBD_static_malloc>
 8010d94:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d105      	bne.n	8010da8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	2200      	movs	r2, #0
 8010da0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8010da4:	2302      	movs	r3, #2
 8010da6:	e066      	b.n	8010e76 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	68fa      	ldr	r2, [r7, #12]
 8010dac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	7c1b      	ldrb	r3, [r3, #16]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d119      	bne.n	8010dec <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010db8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010dbc:	2202      	movs	r2, #2
 8010dbe:	2181      	movs	r1, #129	; 0x81
 8010dc0:	6878      	ldr	r0, [r7, #4]
 8010dc2:	f008 fa36 	bl	8019232 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	2201      	movs	r2, #1
 8010dca:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010dcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010dd0:	2202      	movs	r2, #2
 8010dd2:	2101      	movs	r1, #1
 8010dd4:	6878      	ldr	r0, [r7, #4]
 8010dd6:	f008 fa2c 	bl	8019232 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	2201      	movs	r2, #1
 8010dde:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	2210      	movs	r2, #16
 8010de6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8010dea:	e016      	b.n	8010e1a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010dec:	2340      	movs	r3, #64	; 0x40
 8010dee:	2202      	movs	r2, #2
 8010df0:	2181      	movs	r1, #129	; 0x81
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	f008 fa1d 	bl	8019232 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	2201      	movs	r2, #1
 8010dfc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010dfe:	2340      	movs	r3, #64	; 0x40
 8010e00:	2202      	movs	r2, #2
 8010e02:	2101      	movs	r1, #1
 8010e04:	6878      	ldr	r0, [r7, #4]
 8010e06:	f008 fa14 	bl	8019232 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	2201      	movs	r2, #1
 8010e0e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	2210      	movs	r2, #16
 8010e16:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010e1a:	2308      	movs	r3, #8
 8010e1c:	2203      	movs	r2, #3
 8010e1e:	2182      	movs	r1, #130	; 0x82
 8010e20:	6878      	ldr	r0, [r7, #4]
 8010e22:	f008 fa06 	bl	8019232 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	2201      	movs	r2, #1
 8010e2a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	2200      	movs	r2, #0
 8010e44:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	7c1b      	ldrb	r3, [r3, #16]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d109      	bne.n	8010e64 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010e56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010e5a:	2101      	movs	r1, #1
 8010e5c:	6878      	ldr	r0, [r7, #4]
 8010e5e:	f008 fad7 	bl	8019410 <USBD_LL_PrepareReceive>
 8010e62:	e007      	b.n	8010e74 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010e6a:	2340      	movs	r3, #64	; 0x40
 8010e6c:	2101      	movs	r1, #1
 8010e6e:	6878      	ldr	r0, [r7, #4]
 8010e70:	f008 face 	bl	8019410 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010e74:	2300      	movs	r3, #0
}
 8010e76:	4618      	mov	r0, r3
 8010e78:	3710      	adds	r7, #16
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	bd80      	pop	{r7, pc}

08010e7e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010e7e:	b580      	push	{r7, lr}
 8010e80:	b082      	sub	sp, #8
 8010e82:	af00      	add	r7, sp, #0
 8010e84:	6078      	str	r0, [r7, #4]
 8010e86:	460b      	mov	r3, r1
 8010e88:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8010e8a:	2181      	movs	r1, #129	; 0x81
 8010e8c:	6878      	ldr	r0, [r7, #4]
 8010e8e:	f008 f9f6 	bl	801927e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	2200      	movs	r2, #0
 8010e96:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8010e98:	2101      	movs	r1, #1
 8010e9a:	6878      	ldr	r0, [r7, #4]
 8010e9c:	f008 f9ef 	bl	801927e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8010ea8:	2182      	movs	r1, #130	; 0x82
 8010eaa:	6878      	ldr	r0, [r7, #4]
 8010eac:	f008 f9e7 	bl	801927e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	2200      	movs	r2, #0
 8010ebc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d00e      	beq.n	8010ee8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010ed0:	685b      	ldr	r3, [r3, #4]
 8010ed2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010eda:	4618      	mov	r0, r3
 8010edc:	f008 fada 	bl	8019494 <USBD_static_free>
    pdev->pClassData = NULL;
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8010ee8:	2300      	movs	r3, #0
}
 8010eea:	4618      	mov	r0, r3
 8010eec:	3708      	adds	r7, #8
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bd80      	pop	{r7, pc}
	...

08010ef4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b086      	sub	sp, #24
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
 8010efc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010f04:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8010f06:	2300      	movs	r3, #0
 8010f08:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8010f0e:	2300      	movs	r3, #0
 8010f10:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8010f12:	693b      	ldr	r3, [r7, #16]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d101      	bne.n	8010f1c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8010f18:	2303      	movs	r3, #3
 8010f1a:	e0af      	b.n	801107c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	781b      	ldrb	r3, [r3, #0]
 8010f20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d03f      	beq.n	8010fa8 <USBD_CDC_Setup+0xb4>
 8010f28:	2b20      	cmp	r3, #32
 8010f2a:	f040 809f 	bne.w	801106c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8010f2e:	683b      	ldr	r3, [r7, #0]
 8010f30:	88db      	ldrh	r3, [r3, #6]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d02e      	beq.n	8010f94 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8010f36:	683b      	ldr	r3, [r7, #0]
 8010f38:	781b      	ldrb	r3, [r3, #0]
 8010f3a:	b25b      	sxtb	r3, r3
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	da16      	bge.n	8010f6e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010f46:	689b      	ldr	r3, [r3, #8]
 8010f48:	683a      	ldr	r2, [r7, #0]
 8010f4a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8010f4c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010f4e:	683a      	ldr	r2, [r7, #0]
 8010f50:	88d2      	ldrh	r2, [r2, #6]
 8010f52:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8010f54:	683b      	ldr	r3, [r7, #0]
 8010f56:	88db      	ldrh	r3, [r3, #6]
 8010f58:	2b07      	cmp	r3, #7
 8010f5a:	bf28      	it	cs
 8010f5c:	2307      	movcs	r3, #7
 8010f5e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8010f60:	693b      	ldr	r3, [r7, #16]
 8010f62:	89fa      	ldrh	r2, [r7, #14]
 8010f64:	4619      	mov	r1, r3
 8010f66:	6878      	ldr	r0, [r7, #4]
 8010f68:	f001 fae9 	bl	801253e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8010f6c:	e085      	b.n	801107a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8010f6e:	683b      	ldr	r3, [r7, #0]
 8010f70:	785a      	ldrb	r2, [r3, #1]
 8010f72:	693b      	ldr	r3, [r7, #16]
 8010f74:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8010f78:	683b      	ldr	r3, [r7, #0]
 8010f7a:	88db      	ldrh	r3, [r3, #6]
 8010f7c:	b2da      	uxtb	r2, r3
 8010f7e:	693b      	ldr	r3, [r7, #16]
 8010f80:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010f84:	6939      	ldr	r1, [r7, #16]
 8010f86:	683b      	ldr	r3, [r7, #0]
 8010f88:	88db      	ldrh	r3, [r3, #6]
 8010f8a:	461a      	mov	r2, r3
 8010f8c:	6878      	ldr	r0, [r7, #4]
 8010f8e:	f001 fb02 	bl	8012596 <USBD_CtlPrepareRx>
      break;
 8010f92:	e072      	b.n	801107a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010f9a:	689b      	ldr	r3, [r3, #8]
 8010f9c:	683a      	ldr	r2, [r7, #0]
 8010f9e:	7850      	ldrb	r0, [r2, #1]
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	6839      	ldr	r1, [r7, #0]
 8010fa4:	4798      	blx	r3
      break;
 8010fa6:	e068      	b.n	801107a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010fa8:	683b      	ldr	r3, [r7, #0]
 8010faa:	785b      	ldrb	r3, [r3, #1]
 8010fac:	2b0b      	cmp	r3, #11
 8010fae:	d852      	bhi.n	8011056 <USBD_CDC_Setup+0x162>
 8010fb0:	a201      	add	r2, pc, #4	; (adr r2, 8010fb8 <USBD_CDC_Setup+0xc4>)
 8010fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fb6:	bf00      	nop
 8010fb8:	08010fe9 	.word	0x08010fe9
 8010fbc:	08011065 	.word	0x08011065
 8010fc0:	08011057 	.word	0x08011057
 8010fc4:	08011057 	.word	0x08011057
 8010fc8:	08011057 	.word	0x08011057
 8010fcc:	08011057 	.word	0x08011057
 8010fd0:	08011057 	.word	0x08011057
 8010fd4:	08011057 	.word	0x08011057
 8010fd8:	08011057 	.word	0x08011057
 8010fdc:	08011057 	.word	0x08011057
 8010fe0:	08011013 	.word	0x08011013
 8010fe4:	0801103d 	.word	0x0801103d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010fee:	b2db      	uxtb	r3, r3
 8010ff0:	2b03      	cmp	r3, #3
 8010ff2:	d107      	bne.n	8011004 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010ff4:	f107 030a 	add.w	r3, r7, #10
 8010ff8:	2202      	movs	r2, #2
 8010ffa:	4619      	mov	r1, r3
 8010ffc:	6878      	ldr	r0, [r7, #4]
 8010ffe:	f001 fa9e 	bl	801253e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011002:	e032      	b.n	801106a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8011004:	6839      	ldr	r1, [r7, #0]
 8011006:	6878      	ldr	r0, [r7, #4]
 8011008:	f001 fa28 	bl	801245c <USBD_CtlError>
            ret = USBD_FAIL;
 801100c:	2303      	movs	r3, #3
 801100e:	75fb      	strb	r3, [r7, #23]
          break;
 8011010:	e02b      	b.n	801106a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011018:	b2db      	uxtb	r3, r3
 801101a:	2b03      	cmp	r3, #3
 801101c:	d107      	bne.n	801102e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801101e:	f107 030d 	add.w	r3, r7, #13
 8011022:	2201      	movs	r2, #1
 8011024:	4619      	mov	r1, r3
 8011026:	6878      	ldr	r0, [r7, #4]
 8011028:	f001 fa89 	bl	801253e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801102c:	e01d      	b.n	801106a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801102e:	6839      	ldr	r1, [r7, #0]
 8011030:	6878      	ldr	r0, [r7, #4]
 8011032:	f001 fa13 	bl	801245c <USBD_CtlError>
            ret = USBD_FAIL;
 8011036:	2303      	movs	r3, #3
 8011038:	75fb      	strb	r3, [r7, #23]
          break;
 801103a:	e016      	b.n	801106a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011042:	b2db      	uxtb	r3, r3
 8011044:	2b03      	cmp	r3, #3
 8011046:	d00f      	beq.n	8011068 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8011048:	6839      	ldr	r1, [r7, #0]
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f001 fa06 	bl	801245c <USBD_CtlError>
            ret = USBD_FAIL;
 8011050:	2303      	movs	r3, #3
 8011052:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8011054:	e008      	b.n	8011068 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8011056:	6839      	ldr	r1, [r7, #0]
 8011058:	6878      	ldr	r0, [r7, #4]
 801105a:	f001 f9ff 	bl	801245c <USBD_CtlError>
          ret = USBD_FAIL;
 801105e:	2303      	movs	r3, #3
 8011060:	75fb      	strb	r3, [r7, #23]
          break;
 8011062:	e002      	b.n	801106a <USBD_CDC_Setup+0x176>
          break;
 8011064:	bf00      	nop
 8011066:	e008      	b.n	801107a <USBD_CDC_Setup+0x186>
          break;
 8011068:	bf00      	nop
      }
      break;
 801106a:	e006      	b.n	801107a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 801106c:	6839      	ldr	r1, [r7, #0]
 801106e:	6878      	ldr	r0, [r7, #4]
 8011070:	f001 f9f4 	bl	801245c <USBD_CtlError>
      ret = USBD_FAIL;
 8011074:	2303      	movs	r3, #3
 8011076:	75fb      	strb	r3, [r7, #23]
      break;
 8011078:	bf00      	nop
  }

  return (uint8_t)ret;
 801107a:	7dfb      	ldrb	r3, [r7, #23]
}
 801107c:	4618      	mov	r0, r3
 801107e:	3718      	adds	r7, #24
 8011080:	46bd      	mov	sp, r7
 8011082:	bd80      	pop	{r7, pc}

08011084 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b084      	sub	sp, #16
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
 801108c:	460b      	mov	r3, r1
 801108e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011096:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d101      	bne.n	80110a6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80110a2:	2303      	movs	r3, #3
 80110a4:	e04f      	b.n	8011146 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80110ac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80110ae:	78fa      	ldrb	r2, [r7, #3]
 80110b0:	6879      	ldr	r1, [r7, #4]
 80110b2:	4613      	mov	r3, r2
 80110b4:	009b      	lsls	r3, r3, #2
 80110b6:	4413      	add	r3, r2
 80110b8:	009b      	lsls	r3, r3, #2
 80110ba:	440b      	add	r3, r1
 80110bc:	3318      	adds	r3, #24
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d029      	beq.n	8011118 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80110c4:	78fa      	ldrb	r2, [r7, #3]
 80110c6:	6879      	ldr	r1, [r7, #4]
 80110c8:	4613      	mov	r3, r2
 80110ca:	009b      	lsls	r3, r3, #2
 80110cc:	4413      	add	r3, r2
 80110ce:	009b      	lsls	r3, r3, #2
 80110d0:	440b      	add	r3, r1
 80110d2:	3318      	adds	r3, #24
 80110d4:	681a      	ldr	r2, [r3, #0]
 80110d6:	78f9      	ldrb	r1, [r7, #3]
 80110d8:	68f8      	ldr	r0, [r7, #12]
 80110da:	460b      	mov	r3, r1
 80110dc:	00db      	lsls	r3, r3, #3
 80110de:	1a5b      	subs	r3, r3, r1
 80110e0:	009b      	lsls	r3, r3, #2
 80110e2:	4403      	add	r3, r0
 80110e4:	3344      	adds	r3, #68	; 0x44
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80110ec:	fb03 f301 	mul.w	r3, r3, r1
 80110f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d110      	bne.n	8011118 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80110f6:	78fa      	ldrb	r2, [r7, #3]
 80110f8:	6879      	ldr	r1, [r7, #4]
 80110fa:	4613      	mov	r3, r2
 80110fc:	009b      	lsls	r3, r3, #2
 80110fe:	4413      	add	r3, r2
 8011100:	009b      	lsls	r3, r3, #2
 8011102:	440b      	add	r3, r1
 8011104:	3318      	adds	r3, #24
 8011106:	2200      	movs	r2, #0
 8011108:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801110a:	78f9      	ldrb	r1, [r7, #3]
 801110c:	2300      	movs	r3, #0
 801110e:	2200      	movs	r2, #0
 8011110:	6878      	ldr	r0, [r7, #4]
 8011112:	f008 f95c 	bl	80193ce <USBD_LL_Transmit>
 8011116:	e015      	b.n	8011144 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8011118:	68bb      	ldr	r3, [r7, #8]
 801111a:	2200      	movs	r2, #0
 801111c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011126:	691b      	ldr	r3, [r3, #16]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d00b      	beq.n	8011144 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011132:	691b      	ldr	r3, [r3, #16]
 8011134:	68ba      	ldr	r2, [r7, #8]
 8011136:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801113a:	68ba      	ldr	r2, [r7, #8]
 801113c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8011140:	78fa      	ldrb	r2, [r7, #3]
 8011142:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8011144:	2300      	movs	r3, #0
}
 8011146:	4618      	mov	r0, r3
 8011148:	3710      	adds	r7, #16
 801114a:	46bd      	mov	sp, r7
 801114c:	bd80      	pop	{r7, pc}

0801114e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801114e:	b580      	push	{r7, lr}
 8011150:	b084      	sub	sp, #16
 8011152:	af00      	add	r7, sp, #0
 8011154:	6078      	str	r0, [r7, #4]
 8011156:	460b      	mov	r3, r1
 8011158:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011160:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011168:	2b00      	cmp	r3, #0
 801116a:	d101      	bne.n	8011170 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801116c:	2303      	movs	r3, #3
 801116e:	e015      	b.n	801119c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011170:	78fb      	ldrb	r3, [r7, #3]
 8011172:	4619      	mov	r1, r3
 8011174:	6878      	ldr	r0, [r7, #4]
 8011176:	f008 f96c 	bl	8019452 <USBD_LL_GetRxDataSize>
 801117a:	4602      	mov	r2, r0
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011188:	68db      	ldr	r3, [r3, #12]
 801118a:	68fa      	ldr	r2, [r7, #12]
 801118c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8011190:	68fa      	ldr	r2, [r7, #12]
 8011192:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011196:	4611      	mov	r1, r2
 8011198:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801119a:	2300      	movs	r3, #0
}
 801119c:	4618      	mov	r0, r3
 801119e:	3710      	adds	r7, #16
 80111a0:	46bd      	mov	sp, r7
 80111a2:	bd80      	pop	{r7, pc}

080111a4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b084      	sub	sp, #16
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80111b2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d101      	bne.n	80111be <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80111ba:	2303      	movs	r3, #3
 80111bc:	e01b      	b.n	80111f6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d015      	beq.n	80111f4 <USBD_CDC_EP0_RxReady+0x50>
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80111ce:	2bff      	cmp	r3, #255	; 0xff
 80111d0:	d010      	beq.n	80111f4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80111d8:	689b      	ldr	r3, [r3, #8]
 80111da:	68fa      	ldr	r2, [r7, #12]
 80111dc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80111e0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80111e2:	68fa      	ldr	r2, [r7, #12]
 80111e4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80111e8:	b292      	uxth	r2, r2
 80111ea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	22ff      	movs	r2, #255	; 0xff
 80111f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80111f4:	2300      	movs	r3, #0
}
 80111f6:	4618      	mov	r0, r3
 80111f8:	3710      	adds	r7, #16
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd80      	pop	{r7, pc}
	...

08011200 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011200:	b480      	push	{r7}
 8011202:	b083      	sub	sp, #12
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	2243      	movs	r2, #67	; 0x43
 801120c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801120e:	4b03      	ldr	r3, [pc, #12]	; (801121c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8011210:	4618      	mov	r0, r3
 8011212:	370c      	adds	r7, #12
 8011214:	46bd      	mov	sp, r7
 8011216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121a:	4770      	bx	lr
 801121c:	20000100 	.word	0x20000100

08011220 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011220:	b480      	push	{r7}
 8011222:	b083      	sub	sp, #12
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	2243      	movs	r2, #67	; 0x43
 801122c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801122e:	4b03      	ldr	r3, [pc, #12]	; (801123c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011230:	4618      	mov	r0, r3
 8011232:	370c      	adds	r7, #12
 8011234:	46bd      	mov	sp, r7
 8011236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123a:	4770      	bx	lr
 801123c:	200000bc 	.word	0x200000bc

08011240 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011240:	b480      	push	{r7}
 8011242:	b083      	sub	sp, #12
 8011244:	af00      	add	r7, sp, #0
 8011246:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	2243      	movs	r2, #67	; 0x43
 801124c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801124e:	4b03      	ldr	r3, [pc, #12]	; (801125c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011250:	4618      	mov	r0, r3
 8011252:	370c      	adds	r7, #12
 8011254:	46bd      	mov	sp, r7
 8011256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801125a:	4770      	bx	lr
 801125c:	20000144 	.word	0x20000144

08011260 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011260:	b480      	push	{r7}
 8011262:	b083      	sub	sp, #12
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	220a      	movs	r2, #10
 801126c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801126e:	4b03      	ldr	r3, [pc, #12]	; (801127c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011270:	4618      	mov	r0, r3
 8011272:	370c      	adds	r7, #12
 8011274:	46bd      	mov	sp, r7
 8011276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127a:	4770      	bx	lr
 801127c:	20000078 	.word	0x20000078

08011280 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011280:	b480      	push	{r7}
 8011282:	b083      	sub	sp, #12
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
 8011288:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801128a:	683b      	ldr	r3, [r7, #0]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d101      	bne.n	8011294 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011290:	2303      	movs	r3, #3
 8011292:	e004      	b.n	801129e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	683a      	ldr	r2, [r7, #0]
 8011298:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801129c:	2300      	movs	r3, #0
}
 801129e:	4618      	mov	r0, r3
 80112a0:	370c      	adds	r7, #12
 80112a2:	46bd      	mov	sp, r7
 80112a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a8:	4770      	bx	lr

080112aa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80112aa:	b480      	push	{r7}
 80112ac:	b087      	sub	sp, #28
 80112ae:	af00      	add	r7, sp, #0
 80112b0:	60f8      	str	r0, [r7, #12]
 80112b2:	60b9      	str	r1, [r7, #8]
 80112b4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80112bc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80112be:	697b      	ldr	r3, [r7, #20]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d101      	bne.n	80112c8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80112c4:	2303      	movs	r3, #3
 80112c6:	e008      	b.n	80112da <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80112c8:	697b      	ldr	r3, [r7, #20]
 80112ca:	68ba      	ldr	r2, [r7, #8]
 80112cc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80112d0:	697b      	ldr	r3, [r7, #20]
 80112d2:	687a      	ldr	r2, [r7, #4]
 80112d4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80112d8:	2300      	movs	r3, #0
}
 80112da:	4618      	mov	r0, r3
 80112dc:	371c      	adds	r7, #28
 80112de:	46bd      	mov	sp, r7
 80112e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e4:	4770      	bx	lr

080112e6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80112e6:	b480      	push	{r7}
 80112e8:	b085      	sub	sp, #20
 80112ea:	af00      	add	r7, sp, #0
 80112ec:	6078      	str	r0, [r7, #4]
 80112ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80112f6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d101      	bne.n	8011302 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80112fe:	2303      	movs	r3, #3
 8011300:	e004      	b.n	801130c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	683a      	ldr	r2, [r7, #0]
 8011306:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801130a:	2300      	movs	r3, #0
}
 801130c:	4618      	mov	r0, r3
 801130e:	3714      	adds	r7, #20
 8011310:	46bd      	mov	sp, r7
 8011312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011316:	4770      	bx	lr

08011318 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b084      	sub	sp, #16
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011326:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801132e:	2b00      	cmp	r3, #0
 8011330:	d101      	bne.n	8011336 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011332:	2303      	movs	r3, #3
 8011334:	e016      	b.n	8011364 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	7c1b      	ldrb	r3, [r3, #16]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d109      	bne.n	8011352 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011344:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011348:	2101      	movs	r1, #1
 801134a:	6878      	ldr	r0, [r7, #4]
 801134c:	f008 f860 	bl	8019410 <USBD_LL_PrepareReceive>
 8011350:	e007      	b.n	8011362 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011358:	2340      	movs	r3, #64	; 0x40
 801135a:	2101      	movs	r1, #1
 801135c:	6878      	ldr	r0, [r7, #4]
 801135e:	f008 f857 	bl	8019410 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011362:	2300      	movs	r3, #0
}
 8011364:	4618      	mov	r0, r3
 8011366:	3710      	adds	r7, #16
 8011368:	46bd      	mov	sp, r7
 801136a:	bd80      	pop	{r7, pc}

0801136c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b086      	sub	sp, #24
 8011370:	af00      	add	r7, sp, #0
 8011372:	60f8      	str	r0, [r7, #12]
 8011374:	60b9      	str	r1, [r7, #8]
 8011376:	4613      	mov	r3, r2
 8011378:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d101      	bne.n	8011384 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011380:	2303      	movs	r3, #3
 8011382:	e01f      	b.n	80113c4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	2200      	movs	r2, #0
 8011388:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	2200      	movs	r2, #0
 8011390:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	2200      	movs	r2, #0
 8011398:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801139c:	68bb      	ldr	r3, [r7, #8]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d003      	beq.n	80113aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	68ba      	ldr	r2, [r7, #8]
 80113a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	2201      	movs	r2, #1
 80113ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	79fa      	ldrb	r2, [r7, #7]
 80113b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80113b8:	68f8      	ldr	r0, [r7, #12]
 80113ba:	f007 fed3 	bl	8019164 <USBD_LL_Init>
 80113be:	4603      	mov	r3, r0
 80113c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80113c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80113c4:	4618      	mov	r0, r3
 80113c6:	3718      	adds	r7, #24
 80113c8:	46bd      	mov	sp, r7
 80113ca:	bd80      	pop	{r7, pc}

080113cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b084      	sub	sp, #16
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
 80113d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80113d6:	2300      	movs	r3, #0
 80113d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d101      	bne.n	80113e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80113e0:	2303      	movs	r3, #3
 80113e2:	e016      	b.n	8011412 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	683a      	ldr	r2, [r7, #0]
 80113e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d00b      	beq.n	8011410 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011400:	f107 020e 	add.w	r2, r7, #14
 8011404:	4610      	mov	r0, r2
 8011406:	4798      	blx	r3
 8011408:	4602      	mov	r2, r0
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8011410:	2300      	movs	r3, #0
}
 8011412:	4618      	mov	r0, r3
 8011414:	3710      	adds	r7, #16
 8011416:	46bd      	mov	sp, r7
 8011418:	bd80      	pop	{r7, pc}

0801141a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801141a:	b580      	push	{r7, lr}
 801141c:	b082      	sub	sp, #8
 801141e:	af00      	add	r7, sp, #0
 8011420:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011422:	6878      	ldr	r0, [r7, #4]
 8011424:	f007 feea 	bl	80191fc <USBD_LL_Start>
 8011428:	4603      	mov	r3, r0
}
 801142a:	4618      	mov	r0, r3
 801142c:	3708      	adds	r7, #8
 801142e:	46bd      	mov	sp, r7
 8011430:	bd80      	pop	{r7, pc}

08011432 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011432:	b480      	push	{r7}
 8011434:	b083      	sub	sp, #12
 8011436:	af00      	add	r7, sp, #0
 8011438:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801143a:	2300      	movs	r3, #0
}
 801143c:	4618      	mov	r0, r3
 801143e:	370c      	adds	r7, #12
 8011440:	46bd      	mov	sp, r7
 8011442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011446:	4770      	bx	lr

08011448 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011448:	b580      	push	{r7, lr}
 801144a:	b084      	sub	sp, #16
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
 8011450:	460b      	mov	r3, r1
 8011452:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011454:	2303      	movs	r3, #3
 8011456:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801145e:	2b00      	cmp	r3, #0
 8011460:	d009      	beq.n	8011476 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	78fa      	ldrb	r2, [r7, #3]
 801146c:	4611      	mov	r1, r2
 801146e:	6878      	ldr	r0, [r7, #4]
 8011470:	4798      	blx	r3
 8011472:	4603      	mov	r3, r0
 8011474:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011476:	7bfb      	ldrb	r3, [r7, #15]
}
 8011478:	4618      	mov	r0, r3
 801147a:	3710      	adds	r7, #16
 801147c:	46bd      	mov	sp, r7
 801147e:	bd80      	pop	{r7, pc}

08011480 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011480:	b580      	push	{r7, lr}
 8011482:	b082      	sub	sp, #8
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
 8011488:	460b      	mov	r3, r1
 801148a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011492:	2b00      	cmp	r3, #0
 8011494:	d007      	beq.n	80114a6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801149c:	685b      	ldr	r3, [r3, #4]
 801149e:	78fa      	ldrb	r2, [r7, #3]
 80114a0:	4611      	mov	r1, r2
 80114a2:	6878      	ldr	r0, [r7, #4]
 80114a4:	4798      	blx	r3
  }

  return USBD_OK;
 80114a6:	2300      	movs	r3, #0
}
 80114a8:	4618      	mov	r0, r3
 80114aa:	3708      	adds	r7, #8
 80114ac:	46bd      	mov	sp, r7
 80114ae:	bd80      	pop	{r7, pc}

080114b0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80114b0:	b580      	push	{r7, lr}
 80114b2:	b084      	sub	sp, #16
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
 80114b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80114c0:	6839      	ldr	r1, [r7, #0]
 80114c2:	4618      	mov	r0, r3
 80114c4:	f000 ff90 	bl	80123e8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	2201      	movs	r2, #1
 80114cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80114d6:	461a      	mov	r2, r3
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80114e4:	f003 031f 	and.w	r3, r3, #31
 80114e8:	2b02      	cmp	r3, #2
 80114ea:	d01a      	beq.n	8011522 <USBD_LL_SetupStage+0x72>
 80114ec:	2b02      	cmp	r3, #2
 80114ee:	d822      	bhi.n	8011536 <USBD_LL_SetupStage+0x86>
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d002      	beq.n	80114fa <USBD_LL_SetupStage+0x4a>
 80114f4:	2b01      	cmp	r3, #1
 80114f6:	d00a      	beq.n	801150e <USBD_LL_SetupStage+0x5e>
 80114f8:	e01d      	b.n	8011536 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011500:	4619      	mov	r1, r3
 8011502:	6878      	ldr	r0, [r7, #4]
 8011504:	f000 fa62 	bl	80119cc <USBD_StdDevReq>
 8011508:	4603      	mov	r3, r0
 801150a:	73fb      	strb	r3, [r7, #15]
      break;
 801150c:	e020      	b.n	8011550 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011514:	4619      	mov	r1, r3
 8011516:	6878      	ldr	r0, [r7, #4]
 8011518:	f000 fac6 	bl	8011aa8 <USBD_StdItfReq>
 801151c:	4603      	mov	r3, r0
 801151e:	73fb      	strb	r3, [r7, #15]
      break;
 8011520:	e016      	b.n	8011550 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011528:	4619      	mov	r1, r3
 801152a:	6878      	ldr	r0, [r7, #4]
 801152c:	f000 fb05 	bl	8011b3a <USBD_StdEPReq>
 8011530:	4603      	mov	r3, r0
 8011532:	73fb      	strb	r3, [r7, #15]
      break;
 8011534:	e00c      	b.n	8011550 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801153c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011540:	b2db      	uxtb	r3, r3
 8011542:	4619      	mov	r1, r3
 8011544:	6878      	ldr	r0, [r7, #4]
 8011546:	f007 feb9 	bl	80192bc <USBD_LL_StallEP>
 801154a:	4603      	mov	r3, r0
 801154c:	73fb      	strb	r3, [r7, #15]
      break;
 801154e:	bf00      	nop
  }

  return ret;
 8011550:	7bfb      	ldrb	r3, [r7, #15]
}
 8011552:	4618      	mov	r0, r3
 8011554:	3710      	adds	r7, #16
 8011556:	46bd      	mov	sp, r7
 8011558:	bd80      	pop	{r7, pc}

0801155a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801155a:	b580      	push	{r7, lr}
 801155c:	b086      	sub	sp, #24
 801155e:	af00      	add	r7, sp, #0
 8011560:	60f8      	str	r0, [r7, #12]
 8011562:	460b      	mov	r3, r1
 8011564:	607a      	str	r2, [r7, #4]
 8011566:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011568:	7afb      	ldrb	r3, [r7, #11]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d138      	bne.n	80115e0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011574:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801157c:	2b03      	cmp	r3, #3
 801157e:	d14a      	bne.n	8011616 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011580:	693b      	ldr	r3, [r7, #16]
 8011582:	689a      	ldr	r2, [r3, #8]
 8011584:	693b      	ldr	r3, [r7, #16]
 8011586:	68db      	ldr	r3, [r3, #12]
 8011588:	429a      	cmp	r2, r3
 801158a:	d913      	bls.n	80115b4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801158c:	693b      	ldr	r3, [r7, #16]
 801158e:	689a      	ldr	r2, [r3, #8]
 8011590:	693b      	ldr	r3, [r7, #16]
 8011592:	68db      	ldr	r3, [r3, #12]
 8011594:	1ad2      	subs	r2, r2, r3
 8011596:	693b      	ldr	r3, [r7, #16]
 8011598:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801159a:	693b      	ldr	r3, [r7, #16]
 801159c:	68da      	ldr	r2, [r3, #12]
 801159e:	693b      	ldr	r3, [r7, #16]
 80115a0:	689b      	ldr	r3, [r3, #8]
 80115a2:	4293      	cmp	r3, r2
 80115a4:	bf28      	it	cs
 80115a6:	4613      	movcs	r3, r2
 80115a8:	461a      	mov	r2, r3
 80115aa:	6879      	ldr	r1, [r7, #4]
 80115ac:	68f8      	ldr	r0, [r7, #12]
 80115ae:	f001 f80f 	bl	80125d0 <USBD_CtlContinueRx>
 80115b2:	e030      	b.n	8011616 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80115ba:	b2db      	uxtb	r3, r3
 80115bc:	2b03      	cmp	r3, #3
 80115be:	d10b      	bne.n	80115d8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115c6:	691b      	ldr	r3, [r3, #16]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d005      	beq.n	80115d8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115d2:	691b      	ldr	r3, [r3, #16]
 80115d4:	68f8      	ldr	r0, [r7, #12]
 80115d6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80115d8:	68f8      	ldr	r0, [r7, #12]
 80115da:	f001 f80a 	bl	80125f2 <USBD_CtlSendStatus>
 80115de:	e01a      	b.n	8011616 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80115e6:	b2db      	uxtb	r3, r3
 80115e8:	2b03      	cmp	r3, #3
 80115ea:	d114      	bne.n	8011616 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115f2:	699b      	ldr	r3, [r3, #24]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d00e      	beq.n	8011616 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115fe:	699b      	ldr	r3, [r3, #24]
 8011600:	7afa      	ldrb	r2, [r7, #11]
 8011602:	4611      	mov	r1, r2
 8011604:	68f8      	ldr	r0, [r7, #12]
 8011606:	4798      	blx	r3
 8011608:	4603      	mov	r3, r0
 801160a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801160c:	7dfb      	ldrb	r3, [r7, #23]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d001      	beq.n	8011616 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8011612:	7dfb      	ldrb	r3, [r7, #23]
 8011614:	e000      	b.n	8011618 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8011616:	2300      	movs	r3, #0
}
 8011618:	4618      	mov	r0, r3
 801161a:	3718      	adds	r7, #24
 801161c:	46bd      	mov	sp, r7
 801161e:	bd80      	pop	{r7, pc}

08011620 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011620:	b580      	push	{r7, lr}
 8011622:	b086      	sub	sp, #24
 8011624:	af00      	add	r7, sp, #0
 8011626:	60f8      	str	r0, [r7, #12]
 8011628:	460b      	mov	r3, r1
 801162a:	607a      	str	r2, [r7, #4]
 801162c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801162e:	7afb      	ldrb	r3, [r7, #11]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d16b      	bne.n	801170c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	3314      	adds	r3, #20
 8011638:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011640:	2b02      	cmp	r3, #2
 8011642:	d156      	bne.n	80116f2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8011644:	693b      	ldr	r3, [r7, #16]
 8011646:	689a      	ldr	r2, [r3, #8]
 8011648:	693b      	ldr	r3, [r7, #16]
 801164a:	68db      	ldr	r3, [r3, #12]
 801164c:	429a      	cmp	r2, r3
 801164e:	d914      	bls.n	801167a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011650:	693b      	ldr	r3, [r7, #16]
 8011652:	689a      	ldr	r2, [r3, #8]
 8011654:	693b      	ldr	r3, [r7, #16]
 8011656:	68db      	ldr	r3, [r3, #12]
 8011658:	1ad2      	subs	r2, r2, r3
 801165a:	693b      	ldr	r3, [r7, #16]
 801165c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801165e:	693b      	ldr	r3, [r7, #16]
 8011660:	689b      	ldr	r3, [r3, #8]
 8011662:	461a      	mov	r2, r3
 8011664:	6879      	ldr	r1, [r7, #4]
 8011666:	68f8      	ldr	r0, [r7, #12]
 8011668:	f000 ff84 	bl	8012574 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801166c:	2300      	movs	r3, #0
 801166e:	2200      	movs	r2, #0
 8011670:	2100      	movs	r1, #0
 8011672:	68f8      	ldr	r0, [r7, #12]
 8011674:	f007 fecc 	bl	8019410 <USBD_LL_PrepareReceive>
 8011678:	e03b      	b.n	80116f2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801167a:	693b      	ldr	r3, [r7, #16]
 801167c:	68da      	ldr	r2, [r3, #12]
 801167e:	693b      	ldr	r3, [r7, #16]
 8011680:	689b      	ldr	r3, [r3, #8]
 8011682:	429a      	cmp	r2, r3
 8011684:	d11c      	bne.n	80116c0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011686:	693b      	ldr	r3, [r7, #16]
 8011688:	685a      	ldr	r2, [r3, #4]
 801168a:	693b      	ldr	r3, [r7, #16]
 801168c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801168e:	429a      	cmp	r2, r3
 8011690:	d316      	bcc.n	80116c0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011692:	693b      	ldr	r3, [r7, #16]
 8011694:	685a      	ldr	r2, [r3, #4]
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801169c:	429a      	cmp	r2, r3
 801169e:	d20f      	bcs.n	80116c0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80116a0:	2200      	movs	r2, #0
 80116a2:	2100      	movs	r1, #0
 80116a4:	68f8      	ldr	r0, [r7, #12]
 80116a6:	f000 ff65 	bl	8012574 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	2200      	movs	r2, #0
 80116ae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80116b2:	2300      	movs	r3, #0
 80116b4:	2200      	movs	r2, #0
 80116b6:	2100      	movs	r1, #0
 80116b8:	68f8      	ldr	r0, [r7, #12]
 80116ba:	f007 fea9 	bl	8019410 <USBD_LL_PrepareReceive>
 80116be:	e018      	b.n	80116f2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80116c6:	b2db      	uxtb	r3, r3
 80116c8:	2b03      	cmp	r3, #3
 80116ca:	d10b      	bne.n	80116e4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116d2:	68db      	ldr	r3, [r3, #12]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d005      	beq.n	80116e4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116de:	68db      	ldr	r3, [r3, #12]
 80116e0:	68f8      	ldr	r0, [r7, #12]
 80116e2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80116e4:	2180      	movs	r1, #128	; 0x80
 80116e6:	68f8      	ldr	r0, [r7, #12]
 80116e8:	f007 fde8 	bl	80192bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80116ec:	68f8      	ldr	r0, [r7, #12]
 80116ee:	f000 ff93 	bl	8012618 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80116f8:	2b01      	cmp	r3, #1
 80116fa:	d122      	bne.n	8011742 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80116fc:	68f8      	ldr	r0, [r7, #12]
 80116fe:	f7ff fe98 	bl	8011432 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	2200      	movs	r2, #0
 8011706:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801170a:	e01a      	b.n	8011742 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011712:	b2db      	uxtb	r3, r3
 8011714:	2b03      	cmp	r3, #3
 8011716:	d114      	bne.n	8011742 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801171e:	695b      	ldr	r3, [r3, #20]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d00e      	beq.n	8011742 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801172a:	695b      	ldr	r3, [r3, #20]
 801172c:	7afa      	ldrb	r2, [r7, #11]
 801172e:	4611      	mov	r1, r2
 8011730:	68f8      	ldr	r0, [r7, #12]
 8011732:	4798      	blx	r3
 8011734:	4603      	mov	r3, r0
 8011736:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8011738:	7dfb      	ldrb	r3, [r7, #23]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d001      	beq.n	8011742 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801173e:	7dfb      	ldrb	r3, [r7, #23]
 8011740:	e000      	b.n	8011744 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8011742:	2300      	movs	r3, #0
}
 8011744:	4618      	mov	r0, r3
 8011746:	3718      	adds	r7, #24
 8011748:	46bd      	mov	sp, r7
 801174a:	bd80      	pop	{r7, pc}

0801174c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801174c:	b580      	push	{r7, lr}
 801174e:	b082      	sub	sp, #8
 8011750:	af00      	add	r7, sp, #0
 8011752:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	2201      	movs	r2, #1
 8011758:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	2200      	movs	r2, #0
 8011760:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	2200      	movs	r2, #0
 8011768:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	2200      	movs	r2, #0
 801176e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011778:	2b00      	cmp	r3, #0
 801177a:	d101      	bne.n	8011780 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 801177c:	2303      	movs	r3, #3
 801177e:	e02f      	b.n	80117e0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011786:	2b00      	cmp	r3, #0
 8011788:	d00f      	beq.n	80117aa <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011790:	685b      	ldr	r3, [r3, #4]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d009      	beq.n	80117aa <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801179c:	685b      	ldr	r3, [r3, #4]
 801179e:	687a      	ldr	r2, [r7, #4]
 80117a0:	6852      	ldr	r2, [r2, #4]
 80117a2:	b2d2      	uxtb	r2, r2
 80117a4:	4611      	mov	r1, r2
 80117a6:	6878      	ldr	r0, [r7, #4]
 80117a8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80117aa:	2340      	movs	r3, #64	; 0x40
 80117ac:	2200      	movs	r2, #0
 80117ae:	2100      	movs	r1, #0
 80117b0:	6878      	ldr	r0, [r7, #4]
 80117b2:	f007 fd3e 	bl	8019232 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	2201      	movs	r2, #1
 80117ba:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	2240      	movs	r2, #64	; 0x40
 80117c2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80117c6:	2340      	movs	r3, #64	; 0x40
 80117c8:	2200      	movs	r2, #0
 80117ca:	2180      	movs	r1, #128	; 0x80
 80117cc:	6878      	ldr	r0, [r7, #4]
 80117ce:	f007 fd30 	bl	8019232 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	2201      	movs	r2, #1
 80117d6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	2240      	movs	r2, #64	; 0x40
 80117dc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80117de:	2300      	movs	r3, #0
}
 80117e0:	4618      	mov	r0, r3
 80117e2:	3708      	adds	r7, #8
 80117e4:	46bd      	mov	sp, r7
 80117e6:	bd80      	pop	{r7, pc}

080117e8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80117e8:	b480      	push	{r7}
 80117ea:	b083      	sub	sp, #12
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
 80117f0:	460b      	mov	r3, r1
 80117f2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	78fa      	ldrb	r2, [r7, #3]
 80117f8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80117fa:	2300      	movs	r3, #0
}
 80117fc:	4618      	mov	r0, r3
 80117fe:	370c      	adds	r7, #12
 8011800:	46bd      	mov	sp, r7
 8011802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011806:	4770      	bx	lr

08011808 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011808:	b480      	push	{r7}
 801180a:	b083      	sub	sp, #12
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011816:	b2da      	uxtb	r2, r3
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	2204      	movs	r2, #4
 8011822:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011826:	2300      	movs	r3, #0
}
 8011828:	4618      	mov	r0, r3
 801182a:	370c      	adds	r7, #12
 801182c:	46bd      	mov	sp, r7
 801182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011832:	4770      	bx	lr

08011834 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011834:	b480      	push	{r7}
 8011836:	b083      	sub	sp, #12
 8011838:	af00      	add	r7, sp, #0
 801183a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011842:	b2db      	uxtb	r3, r3
 8011844:	2b04      	cmp	r3, #4
 8011846:	d106      	bne.n	8011856 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801184e:	b2da      	uxtb	r2, r3
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011856:	2300      	movs	r3, #0
}
 8011858:	4618      	mov	r0, r3
 801185a:	370c      	adds	r7, #12
 801185c:	46bd      	mov	sp, r7
 801185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011862:	4770      	bx	lr

08011864 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011864:	b580      	push	{r7, lr}
 8011866:	b082      	sub	sp, #8
 8011868:	af00      	add	r7, sp, #0
 801186a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011872:	2b00      	cmp	r3, #0
 8011874:	d101      	bne.n	801187a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8011876:	2303      	movs	r3, #3
 8011878:	e012      	b.n	80118a0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011880:	b2db      	uxtb	r3, r3
 8011882:	2b03      	cmp	r3, #3
 8011884:	d10b      	bne.n	801189e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801188c:	69db      	ldr	r3, [r3, #28]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d005      	beq.n	801189e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011898:	69db      	ldr	r3, [r3, #28]
 801189a:	6878      	ldr	r0, [r7, #4]
 801189c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801189e:	2300      	movs	r3, #0
}
 80118a0:	4618      	mov	r0, r3
 80118a2:	3708      	adds	r7, #8
 80118a4:	46bd      	mov	sp, r7
 80118a6:	bd80      	pop	{r7, pc}

080118a8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b082      	sub	sp, #8
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
 80118b0:	460b      	mov	r3, r1
 80118b2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d101      	bne.n	80118c2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80118be:	2303      	movs	r3, #3
 80118c0:	e014      	b.n	80118ec <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80118c8:	b2db      	uxtb	r3, r3
 80118ca:	2b03      	cmp	r3, #3
 80118cc:	d10d      	bne.n	80118ea <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118d4:	6a1b      	ldr	r3, [r3, #32]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d007      	beq.n	80118ea <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118e0:	6a1b      	ldr	r3, [r3, #32]
 80118e2:	78fa      	ldrb	r2, [r7, #3]
 80118e4:	4611      	mov	r1, r2
 80118e6:	6878      	ldr	r0, [r7, #4]
 80118e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80118ea:	2300      	movs	r3, #0
}
 80118ec:	4618      	mov	r0, r3
 80118ee:	3708      	adds	r7, #8
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}

080118f4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b082      	sub	sp, #8
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
 80118fc:	460b      	mov	r3, r1
 80118fe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011906:	2b00      	cmp	r3, #0
 8011908:	d101      	bne.n	801190e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 801190a:	2303      	movs	r3, #3
 801190c:	e014      	b.n	8011938 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011914:	b2db      	uxtb	r3, r3
 8011916:	2b03      	cmp	r3, #3
 8011918:	d10d      	bne.n	8011936 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011922:	2b00      	cmp	r3, #0
 8011924:	d007      	beq.n	8011936 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801192c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801192e:	78fa      	ldrb	r2, [r7, #3]
 8011930:	4611      	mov	r1, r2
 8011932:	6878      	ldr	r0, [r7, #4]
 8011934:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011936:	2300      	movs	r3, #0
}
 8011938:	4618      	mov	r0, r3
 801193a:	3708      	adds	r7, #8
 801193c:	46bd      	mov	sp, r7
 801193e:	bd80      	pop	{r7, pc}

08011940 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011940:	b480      	push	{r7}
 8011942:	b083      	sub	sp, #12
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011948:	2300      	movs	r3, #0
}
 801194a:	4618      	mov	r0, r3
 801194c:	370c      	adds	r7, #12
 801194e:	46bd      	mov	sp, r7
 8011950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011954:	4770      	bx	lr

08011956 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011956:	b580      	push	{r7, lr}
 8011958:	b082      	sub	sp, #8
 801195a:	af00      	add	r7, sp, #0
 801195c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	2201      	movs	r2, #1
 8011962:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801196c:	2b00      	cmp	r3, #0
 801196e:	d009      	beq.n	8011984 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011976:	685b      	ldr	r3, [r3, #4]
 8011978:	687a      	ldr	r2, [r7, #4]
 801197a:	6852      	ldr	r2, [r2, #4]
 801197c:	b2d2      	uxtb	r2, r2
 801197e:	4611      	mov	r1, r2
 8011980:	6878      	ldr	r0, [r7, #4]
 8011982:	4798      	blx	r3
  }

  return USBD_OK;
 8011984:	2300      	movs	r3, #0
}
 8011986:	4618      	mov	r0, r3
 8011988:	3708      	adds	r7, #8
 801198a:	46bd      	mov	sp, r7
 801198c:	bd80      	pop	{r7, pc}

0801198e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801198e:	b480      	push	{r7}
 8011990:	b087      	sub	sp, #28
 8011992:	af00      	add	r7, sp, #0
 8011994:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801199a:	697b      	ldr	r3, [r7, #20]
 801199c:	781b      	ldrb	r3, [r3, #0]
 801199e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80119a0:	697b      	ldr	r3, [r7, #20]
 80119a2:	3301      	adds	r3, #1
 80119a4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80119a6:	697b      	ldr	r3, [r7, #20]
 80119a8:	781b      	ldrb	r3, [r3, #0]
 80119aa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80119ac:	8a3b      	ldrh	r3, [r7, #16]
 80119ae:	021b      	lsls	r3, r3, #8
 80119b0:	b21a      	sxth	r2, r3
 80119b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80119b6:	4313      	orrs	r3, r2
 80119b8:	b21b      	sxth	r3, r3
 80119ba:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80119bc:	89fb      	ldrh	r3, [r7, #14]
}
 80119be:	4618      	mov	r0, r3
 80119c0:	371c      	adds	r7, #28
 80119c2:	46bd      	mov	sp, r7
 80119c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c8:	4770      	bx	lr
	...

080119cc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b084      	sub	sp, #16
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	6078      	str	r0, [r7, #4]
 80119d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80119d6:	2300      	movs	r3, #0
 80119d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80119da:	683b      	ldr	r3, [r7, #0]
 80119dc:	781b      	ldrb	r3, [r3, #0]
 80119de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80119e2:	2b40      	cmp	r3, #64	; 0x40
 80119e4:	d005      	beq.n	80119f2 <USBD_StdDevReq+0x26>
 80119e6:	2b40      	cmp	r3, #64	; 0x40
 80119e8:	d853      	bhi.n	8011a92 <USBD_StdDevReq+0xc6>
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d00b      	beq.n	8011a06 <USBD_StdDevReq+0x3a>
 80119ee:	2b20      	cmp	r3, #32
 80119f0:	d14f      	bne.n	8011a92 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119f8:	689b      	ldr	r3, [r3, #8]
 80119fa:	6839      	ldr	r1, [r7, #0]
 80119fc:	6878      	ldr	r0, [r7, #4]
 80119fe:	4798      	blx	r3
 8011a00:	4603      	mov	r3, r0
 8011a02:	73fb      	strb	r3, [r7, #15]
      break;
 8011a04:	e04a      	b.n	8011a9c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011a06:	683b      	ldr	r3, [r7, #0]
 8011a08:	785b      	ldrb	r3, [r3, #1]
 8011a0a:	2b09      	cmp	r3, #9
 8011a0c:	d83b      	bhi.n	8011a86 <USBD_StdDevReq+0xba>
 8011a0e:	a201      	add	r2, pc, #4	; (adr r2, 8011a14 <USBD_StdDevReq+0x48>)
 8011a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a14:	08011a69 	.word	0x08011a69
 8011a18:	08011a7d 	.word	0x08011a7d
 8011a1c:	08011a87 	.word	0x08011a87
 8011a20:	08011a73 	.word	0x08011a73
 8011a24:	08011a87 	.word	0x08011a87
 8011a28:	08011a47 	.word	0x08011a47
 8011a2c:	08011a3d 	.word	0x08011a3d
 8011a30:	08011a87 	.word	0x08011a87
 8011a34:	08011a5f 	.word	0x08011a5f
 8011a38:	08011a51 	.word	0x08011a51
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011a3c:	6839      	ldr	r1, [r7, #0]
 8011a3e:	6878      	ldr	r0, [r7, #4]
 8011a40:	f000 f9de 	bl	8011e00 <USBD_GetDescriptor>
          break;
 8011a44:	e024      	b.n	8011a90 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011a46:	6839      	ldr	r1, [r7, #0]
 8011a48:	6878      	ldr	r0, [r7, #4]
 8011a4a:	f000 fb43 	bl	80120d4 <USBD_SetAddress>
          break;
 8011a4e:	e01f      	b.n	8011a90 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011a50:	6839      	ldr	r1, [r7, #0]
 8011a52:	6878      	ldr	r0, [r7, #4]
 8011a54:	f000 fb82 	bl	801215c <USBD_SetConfig>
 8011a58:	4603      	mov	r3, r0
 8011a5a:	73fb      	strb	r3, [r7, #15]
          break;
 8011a5c:	e018      	b.n	8011a90 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011a5e:	6839      	ldr	r1, [r7, #0]
 8011a60:	6878      	ldr	r0, [r7, #4]
 8011a62:	f000 fc21 	bl	80122a8 <USBD_GetConfig>
          break;
 8011a66:	e013      	b.n	8011a90 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011a68:	6839      	ldr	r1, [r7, #0]
 8011a6a:	6878      	ldr	r0, [r7, #4]
 8011a6c:	f000 fc52 	bl	8012314 <USBD_GetStatus>
          break;
 8011a70:	e00e      	b.n	8011a90 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011a72:	6839      	ldr	r1, [r7, #0]
 8011a74:	6878      	ldr	r0, [r7, #4]
 8011a76:	f000 fc81 	bl	801237c <USBD_SetFeature>
          break;
 8011a7a:	e009      	b.n	8011a90 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011a7c:	6839      	ldr	r1, [r7, #0]
 8011a7e:	6878      	ldr	r0, [r7, #4]
 8011a80:	f000 fc90 	bl	80123a4 <USBD_ClrFeature>
          break;
 8011a84:	e004      	b.n	8011a90 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8011a86:	6839      	ldr	r1, [r7, #0]
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	f000 fce7 	bl	801245c <USBD_CtlError>
          break;
 8011a8e:	bf00      	nop
      }
      break;
 8011a90:	e004      	b.n	8011a9c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8011a92:	6839      	ldr	r1, [r7, #0]
 8011a94:	6878      	ldr	r0, [r7, #4]
 8011a96:	f000 fce1 	bl	801245c <USBD_CtlError>
      break;
 8011a9a:	bf00      	nop
  }

  return ret;
 8011a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	3710      	adds	r7, #16
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	bd80      	pop	{r7, pc}
 8011aa6:	bf00      	nop

08011aa8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	b084      	sub	sp, #16
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
 8011ab0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011ab6:	683b      	ldr	r3, [r7, #0]
 8011ab8:	781b      	ldrb	r3, [r3, #0]
 8011aba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011abe:	2b40      	cmp	r3, #64	; 0x40
 8011ac0:	d005      	beq.n	8011ace <USBD_StdItfReq+0x26>
 8011ac2:	2b40      	cmp	r3, #64	; 0x40
 8011ac4:	d82f      	bhi.n	8011b26 <USBD_StdItfReq+0x7e>
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d001      	beq.n	8011ace <USBD_StdItfReq+0x26>
 8011aca:	2b20      	cmp	r3, #32
 8011acc:	d12b      	bne.n	8011b26 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ad4:	b2db      	uxtb	r3, r3
 8011ad6:	3b01      	subs	r3, #1
 8011ad8:	2b02      	cmp	r3, #2
 8011ada:	d81d      	bhi.n	8011b18 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011adc:	683b      	ldr	r3, [r7, #0]
 8011ade:	889b      	ldrh	r3, [r3, #4]
 8011ae0:	b2db      	uxtb	r3, r3
 8011ae2:	2b01      	cmp	r3, #1
 8011ae4:	d813      	bhi.n	8011b0e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011aec:	689b      	ldr	r3, [r3, #8]
 8011aee:	6839      	ldr	r1, [r7, #0]
 8011af0:	6878      	ldr	r0, [r7, #4]
 8011af2:	4798      	blx	r3
 8011af4:	4603      	mov	r3, r0
 8011af6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011af8:	683b      	ldr	r3, [r7, #0]
 8011afa:	88db      	ldrh	r3, [r3, #6]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d110      	bne.n	8011b22 <USBD_StdItfReq+0x7a>
 8011b00:	7bfb      	ldrb	r3, [r7, #15]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d10d      	bne.n	8011b22 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011b06:	6878      	ldr	r0, [r7, #4]
 8011b08:	f000 fd73 	bl	80125f2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011b0c:	e009      	b.n	8011b22 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8011b0e:	6839      	ldr	r1, [r7, #0]
 8011b10:	6878      	ldr	r0, [r7, #4]
 8011b12:	f000 fca3 	bl	801245c <USBD_CtlError>
          break;
 8011b16:	e004      	b.n	8011b22 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8011b18:	6839      	ldr	r1, [r7, #0]
 8011b1a:	6878      	ldr	r0, [r7, #4]
 8011b1c:	f000 fc9e 	bl	801245c <USBD_CtlError>
          break;
 8011b20:	e000      	b.n	8011b24 <USBD_StdItfReq+0x7c>
          break;
 8011b22:	bf00      	nop
      }
      break;
 8011b24:	e004      	b.n	8011b30 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8011b26:	6839      	ldr	r1, [r7, #0]
 8011b28:	6878      	ldr	r0, [r7, #4]
 8011b2a:	f000 fc97 	bl	801245c <USBD_CtlError>
      break;
 8011b2e:	bf00      	nop
  }

  return ret;
 8011b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b32:	4618      	mov	r0, r3
 8011b34:	3710      	adds	r7, #16
 8011b36:	46bd      	mov	sp, r7
 8011b38:	bd80      	pop	{r7, pc}

08011b3a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b3a:	b580      	push	{r7, lr}
 8011b3c:	b084      	sub	sp, #16
 8011b3e:	af00      	add	r7, sp, #0
 8011b40:	6078      	str	r0, [r7, #4]
 8011b42:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011b44:	2300      	movs	r3, #0
 8011b46:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8011b48:	683b      	ldr	r3, [r7, #0]
 8011b4a:	889b      	ldrh	r3, [r3, #4]
 8011b4c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011b4e:	683b      	ldr	r3, [r7, #0]
 8011b50:	781b      	ldrb	r3, [r3, #0]
 8011b52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011b56:	2b40      	cmp	r3, #64	; 0x40
 8011b58:	d007      	beq.n	8011b6a <USBD_StdEPReq+0x30>
 8011b5a:	2b40      	cmp	r3, #64	; 0x40
 8011b5c:	f200 8145 	bhi.w	8011dea <USBD_StdEPReq+0x2b0>
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d00c      	beq.n	8011b7e <USBD_StdEPReq+0x44>
 8011b64:	2b20      	cmp	r3, #32
 8011b66:	f040 8140 	bne.w	8011dea <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b70:	689b      	ldr	r3, [r3, #8]
 8011b72:	6839      	ldr	r1, [r7, #0]
 8011b74:	6878      	ldr	r0, [r7, #4]
 8011b76:	4798      	blx	r3
 8011b78:	4603      	mov	r3, r0
 8011b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8011b7c:	e13a      	b.n	8011df4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011b7e:	683b      	ldr	r3, [r7, #0]
 8011b80:	785b      	ldrb	r3, [r3, #1]
 8011b82:	2b03      	cmp	r3, #3
 8011b84:	d007      	beq.n	8011b96 <USBD_StdEPReq+0x5c>
 8011b86:	2b03      	cmp	r3, #3
 8011b88:	f300 8129 	bgt.w	8011dde <USBD_StdEPReq+0x2a4>
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d07f      	beq.n	8011c90 <USBD_StdEPReq+0x156>
 8011b90:	2b01      	cmp	r3, #1
 8011b92:	d03c      	beq.n	8011c0e <USBD_StdEPReq+0xd4>
 8011b94:	e123      	b.n	8011dde <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b9c:	b2db      	uxtb	r3, r3
 8011b9e:	2b02      	cmp	r3, #2
 8011ba0:	d002      	beq.n	8011ba8 <USBD_StdEPReq+0x6e>
 8011ba2:	2b03      	cmp	r3, #3
 8011ba4:	d016      	beq.n	8011bd4 <USBD_StdEPReq+0x9a>
 8011ba6:	e02c      	b.n	8011c02 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011ba8:	7bbb      	ldrb	r3, [r7, #14]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d00d      	beq.n	8011bca <USBD_StdEPReq+0x90>
 8011bae:	7bbb      	ldrb	r3, [r7, #14]
 8011bb0:	2b80      	cmp	r3, #128	; 0x80
 8011bb2:	d00a      	beq.n	8011bca <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011bb4:	7bbb      	ldrb	r3, [r7, #14]
 8011bb6:	4619      	mov	r1, r3
 8011bb8:	6878      	ldr	r0, [r7, #4]
 8011bba:	f007 fb7f 	bl	80192bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011bbe:	2180      	movs	r1, #128	; 0x80
 8011bc0:	6878      	ldr	r0, [r7, #4]
 8011bc2:	f007 fb7b 	bl	80192bc <USBD_LL_StallEP>
 8011bc6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011bc8:	e020      	b.n	8011c0c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8011bca:	6839      	ldr	r1, [r7, #0]
 8011bcc:	6878      	ldr	r0, [r7, #4]
 8011bce:	f000 fc45 	bl	801245c <USBD_CtlError>
              break;
 8011bd2:	e01b      	b.n	8011c0c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011bd4:	683b      	ldr	r3, [r7, #0]
 8011bd6:	885b      	ldrh	r3, [r3, #2]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d10e      	bne.n	8011bfa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011bdc:	7bbb      	ldrb	r3, [r7, #14]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d00b      	beq.n	8011bfa <USBD_StdEPReq+0xc0>
 8011be2:	7bbb      	ldrb	r3, [r7, #14]
 8011be4:	2b80      	cmp	r3, #128	; 0x80
 8011be6:	d008      	beq.n	8011bfa <USBD_StdEPReq+0xc0>
 8011be8:	683b      	ldr	r3, [r7, #0]
 8011bea:	88db      	ldrh	r3, [r3, #6]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d104      	bne.n	8011bfa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011bf0:	7bbb      	ldrb	r3, [r7, #14]
 8011bf2:	4619      	mov	r1, r3
 8011bf4:	6878      	ldr	r0, [r7, #4]
 8011bf6:	f007 fb61 	bl	80192bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011bfa:	6878      	ldr	r0, [r7, #4]
 8011bfc:	f000 fcf9 	bl	80125f2 <USBD_CtlSendStatus>

              break;
 8011c00:	e004      	b.n	8011c0c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8011c02:	6839      	ldr	r1, [r7, #0]
 8011c04:	6878      	ldr	r0, [r7, #4]
 8011c06:	f000 fc29 	bl	801245c <USBD_CtlError>
              break;
 8011c0a:	bf00      	nop
          }
          break;
 8011c0c:	e0ec      	b.n	8011de8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011c14:	b2db      	uxtb	r3, r3
 8011c16:	2b02      	cmp	r3, #2
 8011c18:	d002      	beq.n	8011c20 <USBD_StdEPReq+0xe6>
 8011c1a:	2b03      	cmp	r3, #3
 8011c1c:	d016      	beq.n	8011c4c <USBD_StdEPReq+0x112>
 8011c1e:	e030      	b.n	8011c82 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011c20:	7bbb      	ldrb	r3, [r7, #14]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d00d      	beq.n	8011c42 <USBD_StdEPReq+0x108>
 8011c26:	7bbb      	ldrb	r3, [r7, #14]
 8011c28:	2b80      	cmp	r3, #128	; 0x80
 8011c2a:	d00a      	beq.n	8011c42 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011c2c:	7bbb      	ldrb	r3, [r7, #14]
 8011c2e:	4619      	mov	r1, r3
 8011c30:	6878      	ldr	r0, [r7, #4]
 8011c32:	f007 fb43 	bl	80192bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011c36:	2180      	movs	r1, #128	; 0x80
 8011c38:	6878      	ldr	r0, [r7, #4]
 8011c3a:	f007 fb3f 	bl	80192bc <USBD_LL_StallEP>
 8011c3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011c40:	e025      	b.n	8011c8e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8011c42:	6839      	ldr	r1, [r7, #0]
 8011c44:	6878      	ldr	r0, [r7, #4]
 8011c46:	f000 fc09 	bl	801245c <USBD_CtlError>
              break;
 8011c4a:	e020      	b.n	8011c8e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011c4c:	683b      	ldr	r3, [r7, #0]
 8011c4e:	885b      	ldrh	r3, [r3, #2]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d11b      	bne.n	8011c8c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011c54:	7bbb      	ldrb	r3, [r7, #14]
 8011c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d004      	beq.n	8011c68 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011c5e:	7bbb      	ldrb	r3, [r7, #14]
 8011c60:	4619      	mov	r1, r3
 8011c62:	6878      	ldr	r0, [r7, #4]
 8011c64:	f007 fb49 	bl	80192fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011c68:	6878      	ldr	r0, [r7, #4]
 8011c6a:	f000 fcc2 	bl	80125f2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c74:	689b      	ldr	r3, [r3, #8]
 8011c76:	6839      	ldr	r1, [r7, #0]
 8011c78:	6878      	ldr	r0, [r7, #4]
 8011c7a:	4798      	blx	r3
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8011c80:	e004      	b.n	8011c8c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8011c82:	6839      	ldr	r1, [r7, #0]
 8011c84:	6878      	ldr	r0, [r7, #4]
 8011c86:	f000 fbe9 	bl	801245c <USBD_CtlError>
              break;
 8011c8a:	e000      	b.n	8011c8e <USBD_StdEPReq+0x154>
              break;
 8011c8c:	bf00      	nop
          }
          break;
 8011c8e:	e0ab      	b.n	8011de8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011c96:	b2db      	uxtb	r3, r3
 8011c98:	2b02      	cmp	r3, #2
 8011c9a:	d002      	beq.n	8011ca2 <USBD_StdEPReq+0x168>
 8011c9c:	2b03      	cmp	r3, #3
 8011c9e:	d032      	beq.n	8011d06 <USBD_StdEPReq+0x1cc>
 8011ca0:	e097      	b.n	8011dd2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011ca2:	7bbb      	ldrb	r3, [r7, #14]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d007      	beq.n	8011cb8 <USBD_StdEPReq+0x17e>
 8011ca8:	7bbb      	ldrb	r3, [r7, #14]
 8011caa:	2b80      	cmp	r3, #128	; 0x80
 8011cac:	d004      	beq.n	8011cb8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8011cae:	6839      	ldr	r1, [r7, #0]
 8011cb0:	6878      	ldr	r0, [r7, #4]
 8011cb2:	f000 fbd3 	bl	801245c <USBD_CtlError>
                break;
 8011cb6:	e091      	b.n	8011ddc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011cb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	da0b      	bge.n	8011cd8 <USBD_StdEPReq+0x19e>
 8011cc0:	7bbb      	ldrb	r3, [r7, #14]
 8011cc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011cc6:	4613      	mov	r3, r2
 8011cc8:	009b      	lsls	r3, r3, #2
 8011cca:	4413      	add	r3, r2
 8011ccc:	009b      	lsls	r3, r3, #2
 8011cce:	3310      	adds	r3, #16
 8011cd0:	687a      	ldr	r2, [r7, #4]
 8011cd2:	4413      	add	r3, r2
 8011cd4:	3304      	adds	r3, #4
 8011cd6:	e00b      	b.n	8011cf0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011cd8:	7bbb      	ldrb	r3, [r7, #14]
 8011cda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011cde:	4613      	mov	r3, r2
 8011ce0:	009b      	lsls	r3, r3, #2
 8011ce2:	4413      	add	r3, r2
 8011ce4:	009b      	lsls	r3, r3, #2
 8011ce6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011cea:	687a      	ldr	r2, [r7, #4]
 8011cec:	4413      	add	r3, r2
 8011cee:	3304      	adds	r3, #4
 8011cf0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011cf2:	68bb      	ldr	r3, [r7, #8]
 8011cf4:	2200      	movs	r2, #0
 8011cf6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011cf8:	68bb      	ldr	r3, [r7, #8]
 8011cfa:	2202      	movs	r2, #2
 8011cfc:	4619      	mov	r1, r3
 8011cfe:	6878      	ldr	r0, [r7, #4]
 8011d00:	f000 fc1d 	bl	801253e <USBD_CtlSendData>
              break;
 8011d04:	e06a      	b.n	8011ddc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011d06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	da11      	bge.n	8011d32 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011d0e:	7bbb      	ldrb	r3, [r7, #14]
 8011d10:	f003 020f 	and.w	r2, r3, #15
 8011d14:	6879      	ldr	r1, [r7, #4]
 8011d16:	4613      	mov	r3, r2
 8011d18:	009b      	lsls	r3, r3, #2
 8011d1a:	4413      	add	r3, r2
 8011d1c:	009b      	lsls	r3, r3, #2
 8011d1e:	440b      	add	r3, r1
 8011d20:	3324      	adds	r3, #36	; 0x24
 8011d22:	881b      	ldrh	r3, [r3, #0]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d117      	bne.n	8011d58 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8011d28:	6839      	ldr	r1, [r7, #0]
 8011d2a:	6878      	ldr	r0, [r7, #4]
 8011d2c:	f000 fb96 	bl	801245c <USBD_CtlError>
                  break;
 8011d30:	e054      	b.n	8011ddc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011d32:	7bbb      	ldrb	r3, [r7, #14]
 8011d34:	f003 020f 	and.w	r2, r3, #15
 8011d38:	6879      	ldr	r1, [r7, #4]
 8011d3a:	4613      	mov	r3, r2
 8011d3c:	009b      	lsls	r3, r3, #2
 8011d3e:	4413      	add	r3, r2
 8011d40:	009b      	lsls	r3, r3, #2
 8011d42:	440b      	add	r3, r1
 8011d44:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011d48:	881b      	ldrh	r3, [r3, #0]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d104      	bne.n	8011d58 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8011d4e:	6839      	ldr	r1, [r7, #0]
 8011d50:	6878      	ldr	r0, [r7, #4]
 8011d52:	f000 fb83 	bl	801245c <USBD_CtlError>
                  break;
 8011d56:	e041      	b.n	8011ddc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011d58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	da0b      	bge.n	8011d78 <USBD_StdEPReq+0x23e>
 8011d60:	7bbb      	ldrb	r3, [r7, #14]
 8011d62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011d66:	4613      	mov	r3, r2
 8011d68:	009b      	lsls	r3, r3, #2
 8011d6a:	4413      	add	r3, r2
 8011d6c:	009b      	lsls	r3, r3, #2
 8011d6e:	3310      	adds	r3, #16
 8011d70:	687a      	ldr	r2, [r7, #4]
 8011d72:	4413      	add	r3, r2
 8011d74:	3304      	adds	r3, #4
 8011d76:	e00b      	b.n	8011d90 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011d78:	7bbb      	ldrb	r3, [r7, #14]
 8011d7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011d7e:	4613      	mov	r3, r2
 8011d80:	009b      	lsls	r3, r3, #2
 8011d82:	4413      	add	r3, r2
 8011d84:	009b      	lsls	r3, r3, #2
 8011d86:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011d8a:	687a      	ldr	r2, [r7, #4]
 8011d8c:	4413      	add	r3, r2
 8011d8e:	3304      	adds	r3, #4
 8011d90:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011d92:	7bbb      	ldrb	r3, [r7, #14]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d002      	beq.n	8011d9e <USBD_StdEPReq+0x264>
 8011d98:	7bbb      	ldrb	r3, [r7, #14]
 8011d9a:	2b80      	cmp	r3, #128	; 0x80
 8011d9c:	d103      	bne.n	8011da6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8011d9e:	68bb      	ldr	r3, [r7, #8]
 8011da0:	2200      	movs	r2, #0
 8011da2:	601a      	str	r2, [r3, #0]
 8011da4:	e00e      	b.n	8011dc4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011da6:	7bbb      	ldrb	r3, [r7, #14]
 8011da8:	4619      	mov	r1, r3
 8011daa:	6878      	ldr	r0, [r7, #4]
 8011dac:	f007 fac4 	bl	8019338 <USBD_LL_IsStallEP>
 8011db0:	4603      	mov	r3, r0
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d003      	beq.n	8011dbe <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8011db6:	68bb      	ldr	r3, [r7, #8]
 8011db8:	2201      	movs	r2, #1
 8011dba:	601a      	str	r2, [r3, #0]
 8011dbc:	e002      	b.n	8011dc4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8011dbe:	68bb      	ldr	r3, [r7, #8]
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011dc4:	68bb      	ldr	r3, [r7, #8]
 8011dc6:	2202      	movs	r2, #2
 8011dc8:	4619      	mov	r1, r3
 8011dca:	6878      	ldr	r0, [r7, #4]
 8011dcc:	f000 fbb7 	bl	801253e <USBD_CtlSendData>
              break;
 8011dd0:	e004      	b.n	8011ddc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8011dd2:	6839      	ldr	r1, [r7, #0]
 8011dd4:	6878      	ldr	r0, [r7, #4]
 8011dd6:	f000 fb41 	bl	801245c <USBD_CtlError>
              break;
 8011dda:	bf00      	nop
          }
          break;
 8011ddc:	e004      	b.n	8011de8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8011dde:	6839      	ldr	r1, [r7, #0]
 8011de0:	6878      	ldr	r0, [r7, #4]
 8011de2:	f000 fb3b 	bl	801245c <USBD_CtlError>
          break;
 8011de6:	bf00      	nop
      }
      break;
 8011de8:	e004      	b.n	8011df4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8011dea:	6839      	ldr	r1, [r7, #0]
 8011dec:	6878      	ldr	r0, [r7, #4]
 8011dee:	f000 fb35 	bl	801245c <USBD_CtlError>
      break;
 8011df2:	bf00      	nop
  }

  return ret;
 8011df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011df6:	4618      	mov	r0, r3
 8011df8:	3710      	adds	r7, #16
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	bd80      	pop	{r7, pc}
	...

08011e00 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b084      	sub	sp, #16
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
 8011e08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011e0e:	2300      	movs	r3, #0
 8011e10:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011e12:	2300      	movs	r3, #0
 8011e14:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011e16:	683b      	ldr	r3, [r7, #0]
 8011e18:	885b      	ldrh	r3, [r3, #2]
 8011e1a:	0a1b      	lsrs	r3, r3, #8
 8011e1c:	b29b      	uxth	r3, r3
 8011e1e:	3b01      	subs	r3, #1
 8011e20:	2b06      	cmp	r3, #6
 8011e22:	f200 8128 	bhi.w	8012076 <USBD_GetDescriptor+0x276>
 8011e26:	a201      	add	r2, pc, #4	; (adr r2, 8011e2c <USBD_GetDescriptor+0x2c>)
 8011e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e2c:	08011e49 	.word	0x08011e49
 8011e30:	08011e61 	.word	0x08011e61
 8011e34:	08011ea1 	.word	0x08011ea1
 8011e38:	08012077 	.word	0x08012077
 8011e3c:	08012077 	.word	0x08012077
 8011e40:	08012017 	.word	0x08012017
 8011e44:	08012043 	.word	0x08012043
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	687a      	ldr	r2, [r7, #4]
 8011e52:	7c12      	ldrb	r2, [r2, #16]
 8011e54:	f107 0108 	add.w	r1, r7, #8
 8011e58:	4610      	mov	r0, r2
 8011e5a:	4798      	blx	r3
 8011e5c:	60f8      	str	r0, [r7, #12]
      break;
 8011e5e:	e112      	b.n	8012086 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	7c1b      	ldrb	r3, [r3, #16]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d10d      	bne.n	8011e84 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e70:	f107 0208 	add.w	r2, r7, #8
 8011e74:	4610      	mov	r0, r2
 8011e76:	4798      	blx	r3
 8011e78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	3301      	adds	r3, #1
 8011e7e:	2202      	movs	r2, #2
 8011e80:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011e82:	e100      	b.n	8012086 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e8c:	f107 0208 	add.w	r2, r7, #8
 8011e90:	4610      	mov	r0, r2
 8011e92:	4798      	blx	r3
 8011e94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	3301      	adds	r3, #1
 8011e9a:	2202      	movs	r2, #2
 8011e9c:	701a      	strb	r2, [r3, #0]
      break;
 8011e9e:	e0f2      	b.n	8012086 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011ea0:	683b      	ldr	r3, [r7, #0]
 8011ea2:	885b      	ldrh	r3, [r3, #2]
 8011ea4:	b2db      	uxtb	r3, r3
 8011ea6:	2b05      	cmp	r3, #5
 8011ea8:	f200 80ac 	bhi.w	8012004 <USBD_GetDescriptor+0x204>
 8011eac:	a201      	add	r2, pc, #4	; (adr r2, 8011eb4 <USBD_GetDescriptor+0xb4>)
 8011eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011eb2:	bf00      	nop
 8011eb4:	08011ecd 	.word	0x08011ecd
 8011eb8:	08011f01 	.word	0x08011f01
 8011ebc:	08011f35 	.word	0x08011f35
 8011ec0:	08011f69 	.word	0x08011f69
 8011ec4:	08011f9d 	.word	0x08011f9d
 8011ec8:	08011fd1 	.word	0x08011fd1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ed2:	685b      	ldr	r3, [r3, #4]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d00b      	beq.n	8011ef0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ede:	685b      	ldr	r3, [r3, #4]
 8011ee0:	687a      	ldr	r2, [r7, #4]
 8011ee2:	7c12      	ldrb	r2, [r2, #16]
 8011ee4:	f107 0108 	add.w	r1, r7, #8
 8011ee8:	4610      	mov	r0, r2
 8011eea:	4798      	blx	r3
 8011eec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011eee:	e091      	b.n	8012014 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011ef0:	6839      	ldr	r1, [r7, #0]
 8011ef2:	6878      	ldr	r0, [r7, #4]
 8011ef4:	f000 fab2 	bl	801245c <USBD_CtlError>
            err++;
 8011ef8:	7afb      	ldrb	r3, [r7, #11]
 8011efa:	3301      	adds	r3, #1
 8011efc:	72fb      	strb	r3, [r7, #11]
          break;
 8011efe:	e089      	b.n	8012014 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f06:	689b      	ldr	r3, [r3, #8]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d00b      	beq.n	8011f24 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f12:	689b      	ldr	r3, [r3, #8]
 8011f14:	687a      	ldr	r2, [r7, #4]
 8011f16:	7c12      	ldrb	r2, [r2, #16]
 8011f18:	f107 0108 	add.w	r1, r7, #8
 8011f1c:	4610      	mov	r0, r2
 8011f1e:	4798      	blx	r3
 8011f20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011f22:	e077      	b.n	8012014 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011f24:	6839      	ldr	r1, [r7, #0]
 8011f26:	6878      	ldr	r0, [r7, #4]
 8011f28:	f000 fa98 	bl	801245c <USBD_CtlError>
            err++;
 8011f2c:	7afb      	ldrb	r3, [r7, #11]
 8011f2e:	3301      	adds	r3, #1
 8011f30:	72fb      	strb	r3, [r7, #11]
          break;
 8011f32:	e06f      	b.n	8012014 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f3a:	68db      	ldr	r3, [r3, #12]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d00b      	beq.n	8011f58 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f46:	68db      	ldr	r3, [r3, #12]
 8011f48:	687a      	ldr	r2, [r7, #4]
 8011f4a:	7c12      	ldrb	r2, [r2, #16]
 8011f4c:	f107 0108 	add.w	r1, r7, #8
 8011f50:	4610      	mov	r0, r2
 8011f52:	4798      	blx	r3
 8011f54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011f56:	e05d      	b.n	8012014 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011f58:	6839      	ldr	r1, [r7, #0]
 8011f5a:	6878      	ldr	r0, [r7, #4]
 8011f5c:	f000 fa7e 	bl	801245c <USBD_CtlError>
            err++;
 8011f60:	7afb      	ldrb	r3, [r7, #11]
 8011f62:	3301      	adds	r3, #1
 8011f64:	72fb      	strb	r3, [r7, #11]
          break;
 8011f66:	e055      	b.n	8012014 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f6e:	691b      	ldr	r3, [r3, #16]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d00b      	beq.n	8011f8c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011f7a:	691b      	ldr	r3, [r3, #16]
 8011f7c:	687a      	ldr	r2, [r7, #4]
 8011f7e:	7c12      	ldrb	r2, [r2, #16]
 8011f80:	f107 0108 	add.w	r1, r7, #8
 8011f84:	4610      	mov	r0, r2
 8011f86:	4798      	blx	r3
 8011f88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011f8a:	e043      	b.n	8012014 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011f8c:	6839      	ldr	r1, [r7, #0]
 8011f8e:	6878      	ldr	r0, [r7, #4]
 8011f90:	f000 fa64 	bl	801245c <USBD_CtlError>
            err++;
 8011f94:	7afb      	ldrb	r3, [r7, #11]
 8011f96:	3301      	adds	r3, #1
 8011f98:	72fb      	strb	r3, [r7, #11]
          break;
 8011f9a:	e03b      	b.n	8012014 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011fa2:	695b      	ldr	r3, [r3, #20]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d00b      	beq.n	8011fc0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011fae:	695b      	ldr	r3, [r3, #20]
 8011fb0:	687a      	ldr	r2, [r7, #4]
 8011fb2:	7c12      	ldrb	r2, [r2, #16]
 8011fb4:	f107 0108 	add.w	r1, r7, #8
 8011fb8:	4610      	mov	r0, r2
 8011fba:	4798      	blx	r3
 8011fbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011fbe:	e029      	b.n	8012014 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011fc0:	6839      	ldr	r1, [r7, #0]
 8011fc2:	6878      	ldr	r0, [r7, #4]
 8011fc4:	f000 fa4a 	bl	801245c <USBD_CtlError>
            err++;
 8011fc8:	7afb      	ldrb	r3, [r7, #11]
 8011fca:	3301      	adds	r3, #1
 8011fcc:	72fb      	strb	r3, [r7, #11]
          break;
 8011fce:	e021      	b.n	8012014 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011fd6:	699b      	ldr	r3, [r3, #24]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d00b      	beq.n	8011ff4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011fe2:	699b      	ldr	r3, [r3, #24]
 8011fe4:	687a      	ldr	r2, [r7, #4]
 8011fe6:	7c12      	ldrb	r2, [r2, #16]
 8011fe8:	f107 0108 	add.w	r1, r7, #8
 8011fec:	4610      	mov	r0, r2
 8011fee:	4798      	blx	r3
 8011ff0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011ff2:	e00f      	b.n	8012014 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011ff4:	6839      	ldr	r1, [r7, #0]
 8011ff6:	6878      	ldr	r0, [r7, #4]
 8011ff8:	f000 fa30 	bl	801245c <USBD_CtlError>
            err++;
 8011ffc:	7afb      	ldrb	r3, [r7, #11]
 8011ffe:	3301      	adds	r3, #1
 8012000:	72fb      	strb	r3, [r7, #11]
          break;
 8012002:	e007      	b.n	8012014 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012004:	6839      	ldr	r1, [r7, #0]
 8012006:	6878      	ldr	r0, [r7, #4]
 8012008:	f000 fa28 	bl	801245c <USBD_CtlError>
          err++;
 801200c:	7afb      	ldrb	r3, [r7, #11]
 801200e:	3301      	adds	r3, #1
 8012010:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8012012:	bf00      	nop
      }
      break;
 8012014:	e037      	b.n	8012086 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	7c1b      	ldrb	r3, [r3, #16]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d109      	bne.n	8012032 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012026:	f107 0208 	add.w	r2, r7, #8
 801202a:	4610      	mov	r0, r2
 801202c:	4798      	blx	r3
 801202e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012030:	e029      	b.n	8012086 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8012032:	6839      	ldr	r1, [r7, #0]
 8012034:	6878      	ldr	r0, [r7, #4]
 8012036:	f000 fa11 	bl	801245c <USBD_CtlError>
        err++;
 801203a:	7afb      	ldrb	r3, [r7, #11]
 801203c:	3301      	adds	r3, #1
 801203e:	72fb      	strb	r3, [r7, #11]
      break;
 8012040:	e021      	b.n	8012086 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	7c1b      	ldrb	r3, [r3, #16]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d10d      	bne.n	8012066 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012052:	f107 0208 	add.w	r2, r7, #8
 8012056:	4610      	mov	r0, r2
 8012058:	4798      	blx	r3
 801205a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	3301      	adds	r3, #1
 8012060:	2207      	movs	r2, #7
 8012062:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012064:	e00f      	b.n	8012086 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8012066:	6839      	ldr	r1, [r7, #0]
 8012068:	6878      	ldr	r0, [r7, #4]
 801206a:	f000 f9f7 	bl	801245c <USBD_CtlError>
        err++;
 801206e:	7afb      	ldrb	r3, [r7, #11]
 8012070:	3301      	adds	r3, #1
 8012072:	72fb      	strb	r3, [r7, #11]
      break;
 8012074:	e007      	b.n	8012086 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8012076:	6839      	ldr	r1, [r7, #0]
 8012078:	6878      	ldr	r0, [r7, #4]
 801207a:	f000 f9ef 	bl	801245c <USBD_CtlError>
      err++;
 801207e:	7afb      	ldrb	r3, [r7, #11]
 8012080:	3301      	adds	r3, #1
 8012082:	72fb      	strb	r3, [r7, #11]
      break;
 8012084:	bf00      	nop
  }

  if (err != 0U)
 8012086:	7afb      	ldrb	r3, [r7, #11]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d11e      	bne.n	80120ca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 801208c:	683b      	ldr	r3, [r7, #0]
 801208e:	88db      	ldrh	r3, [r3, #6]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d016      	beq.n	80120c2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8012094:	893b      	ldrh	r3, [r7, #8]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d00e      	beq.n	80120b8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801209a:	683b      	ldr	r3, [r7, #0]
 801209c:	88da      	ldrh	r2, [r3, #6]
 801209e:	893b      	ldrh	r3, [r7, #8]
 80120a0:	4293      	cmp	r3, r2
 80120a2:	bf28      	it	cs
 80120a4:	4613      	movcs	r3, r2
 80120a6:	b29b      	uxth	r3, r3
 80120a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80120aa:	893b      	ldrh	r3, [r7, #8]
 80120ac:	461a      	mov	r2, r3
 80120ae:	68f9      	ldr	r1, [r7, #12]
 80120b0:	6878      	ldr	r0, [r7, #4]
 80120b2:	f000 fa44 	bl	801253e <USBD_CtlSendData>
 80120b6:	e009      	b.n	80120cc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80120b8:	6839      	ldr	r1, [r7, #0]
 80120ba:	6878      	ldr	r0, [r7, #4]
 80120bc:	f000 f9ce 	bl	801245c <USBD_CtlError>
 80120c0:	e004      	b.n	80120cc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80120c2:	6878      	ldr	r0, [r7, #4]
 80120c4:	f000 fa95 	bl	80125f2 <USBD_CtlSendStatus>
 80120c8:	e000      	b.n	80120cc <USBD_GetDescriptor+0x2cc>
    return;
 80120ca:	bf00      	nop
  }
}
 80120cc:	3710      	adds	r7, #16
 80120ce:	46bd      	mov	sp, r7
 80120d0:	bd80      	pop	{r7, pc}
 80120d2:	bf00      	nop

080120d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80120d4:	b580      	push	{r7, lr}
 80120d6:	b084      	sub	sp, #16
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
 80120dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80120de:	683b      	ldr	r3, [r7, #0]
 80120e0:	889b      	ldrh	r3, [r3, #4]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d131      	bne.n	801214a <USBD_SetAddress+0x76>
 80120e6:	683b      	ldr	r3, [r7, #0]
 80120e8:	88db      	ldrh	r3, [r3, #6]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d12d      	bne.n	801214a <USBD_SetAddress+0x76>
 80120ee:	683b      	ldr	r3, [r7, #0]
 80120f0:	885b      	ldrh	r3, [r3, #2]
 80120f2:	2b7f      	cmp	r3, #127	; 0x7f
 80120f4:	d829      	bhi.n	801214a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80120f6:	683b      	ldr	r3, [r7, #0]
 80120f8:	885b      	ldrh	r3, [r3, #2]
 80120fa:	b2db      	uxtb	r3, r3
 80120fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012100:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012108:	b2db      	uxtb	r3, r3
 801210a:	2b03      	cmp	r3, #3
 801210c:	d104      	bne.n	8012118 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801210e:	6839      	ldr	r1, [r7, #0]
 8012110:	6878      	ldr	r0, [r7, #4]
 8012112:	f000 f9a3 	bl	801245c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012116:	e01d      	b.n	8012154 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	7bfa      	ldrb	r2, [r7, #15]
 801211c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012120:	7bfb      	ldrb	r3, [r7, #15]
 8012122:	4619      	mov	r1, r3
 8012124:	6878      	ldr	r0, [r7, #4]
 8012126:	f007 f933 	bl	8019390 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801212a:	6878      	ldr	r0, [r7, #4]
 801212c:	f000 fa61 	bl	80125f2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012130:	7bfb      	ldrb	r3, [r7, #15]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d004      	beq.n	8012140 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	2202      	movs	r2, #2
 801213a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801213e:	e009      	b.n	8012154 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	2201      	movs	r2, #1
 8012144:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012148:	e004      	b.n	8012154 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801214a:	6839      	ldr	r1, [r7, #0]
 801214c:	6878      	ldr	r0, [r7, #4]
 801214e:	f000 f985 	bl	801245c <USBD_CtlError>
  }
}
 8012152:	bf00      	nop
 8012154:	bf00      	nop
 8012156:	3710      	adds	r7, #16
 8012158:	46bd      	mov	sp, r7
 801215a:	bd80      	pop	{r7, pc}

0801215c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801215c:	b580      	push	{r7, lr}
 801215e:	b084      	sub	sp, #16
 8012160:	af00      	add	r7, sp, #0
 8012162:	6078      	str	r0, [r7, #4]
 8012164:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012166:	2300      	movs	r3, #0
 8012168:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801216a:	683b      	ldr	r3, [r7, #0]
 801216c:	885b      	ldrh	r3, [r3, #2]
 801216e:	b2da      	uxtb	r2, r3
 8012170:	4b4c      	ldr	r3, [pc, #304]	; (80122a4 <USBD_SetConfig+0x148>)
 8012172:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012174:	4b4b      	ldr	r3, [pc, #300]	; (80122a4 <USBD_SetConfig+0x148>)
 8012176:	781b      	ldrb	r3, [r3, #0]
 8012178:	2b01      	cmp	r3, #1
 801217a:	d905      	bls.n	8012188 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801217c:	6839      	ldr	r1, [r7, #0]
 801217e:	6878      	ldr	r0, [r7, #4]
 8012180:	f000 f96c 	bl	801245c <USBD_CtlError>
    return USBD_FAIL;
 8012184:	2303      	movs	r3, #3
 8012186:	e088      	b.n	801229a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801218e:	b2db      	uxtb	r3, r3
 8012190:	2b02      	cmp	r3, #2
 8012192:	d002      	beq.n	801219a <USBD_SetConfig+0x3e>
 8012194:	2b03      	cmp	r3, #3
 8012196:	d025      	beq.n	80121e4 <USBD_SetConfig+0x88>
 8012198:	e071      	b.n	801227e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801219a:	4b42      	ldr	r3, [pc, #264]	; (80122a4 <USBD_SetConfig+0x148>)
 801219c:	781b      	ldrb	r3, [r3, #0]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d01c      	beq.n	80121dc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80121a2:	4b40      	ldr	r3, [pc, #256]	; (80122a4 <USBD_SetConfig+0x148>)
 80121a4:	781b      	ldrb	r3, [r3, #0]
 80121a6:	461a      	mov	r2, r3
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80121ac:	4b3d      	ldr	r3, [pc, #244]	; (80122a4 <USBD_SetConfig+0x148>)
 80121ae:	781b      	ldrb	r3, [r3, #0]
 80121b0:	4619      	mov	r1, r3
 80121b2:	6878      	ldr	r0, [r7, #4]
 80121b4:	f7ff f948 	bl	8011448 <USBD_SetClassConfig>
 80121b8:	4603      	mov	r3, r0
 80121ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80121bc:	7bfb      	ldrb	r3, [r7, #15]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d004      	beq.n	80121cc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80121c2:	6839      	ldr	r1, [r7, #0]
 80121c4:	6878      	ldr	r0, [r7, #4]
 80121c6:	f000 f949 	bl	801245c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80121ca:	e065      	b.n	8012298 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80121cc:	6878      	ldr	r0, [r7, #4]
 80121ce:	f000 fa10 	bl	80125f2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	2203      	movs	r2, #3
 80121d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80121da:	e05d      	b.n	8012298 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80121dc:	6878      	ldr	r0, [r7, #4]
 80121de:	f000 fa08 	bl	80125f2 <USBD_CtlSendStatus>
      break;
 80121e2:	e059      	b.n	8012298 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80121e4:	4b2f      	ldr	r3, [pc, #188]	; (80122a4 <USBD_SetConfig+0x148>)
 80121e6:	781b      	ldrb	r3, [r3, #0]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d112      	bne.n	8012212 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	2202      	movs	r2, #2
 80121f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80121f4:	4b2b      	ldr	r3, [pc, #172]	; (80122a4 <USBD_SetConfig+0x148>)
 80121f6:	781b      	ldrb	r3, [r3, #0]
 80121f8:	461a      	mov	r2, r3
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80121fe:	4b29      	ldr	r3, [pc, #164]	; (80122a4 <USBD_SetConfig+0x148>)
 8012200:	781b      	ldrb	r3, [r3, #0]
 8012202:	4619      	mov	r1, r3
 8012204:	6878      	ldr	r0, [r7, #4]
 8012206:	f7ff f93b 	bl	8011480 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801220a:	6878      	ldr	r0, [r7, #4]
 801220c:	f000 f9f1 	bl	80125f2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012210:	e042      	b.n	8012298 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8012212:	4b24      	ldr	r3, [pc, #144]	; (80122a4 <USBD_SetConfig+0x148>)
 8012214:	781b      	ldrb	r3, [r3, #0]
 8012216:	461a      	mov	r2, r3
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	685b      	ldr	r3, [r3, #4]
 801221c:	429a      	cmp	r2, r3
 801221e:	d02a      	beq.n	8012276 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	685b      	ldr	r3, [r3, #4]
 8012224:	b2db      	uxtb	r3, r3
 8012226:	4619      	mov	r1, r3
 8012228:	6878      	ldr	r0, [r7, #4]
 801222a:	f7ff f929 	bl	8011480 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801222e:	4b1d      	ldr	r3, [pc, #116]	; (80122a4 <USBD_SetConfig+0x148>)
 8012230:	781b      	ldrb	r3, [r3, #0]
 8012232:	461a      	mov	r2, r3
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012238:	4b1a      	ldr	r3, [pc, #104]	; (80122a4 <USBD_SetConfig+0x148>)
 801223a:	781b      	ldrb	r3, [r3, #0]
 801223c:	4619      	mov	r1, r3
 801223e:	6878      	ldr	r0, [r7, #4]
 8012240:	f7ff f902 	bl	8011448 <USBD_SetClassConfig>
 8012244:	4603      	mov	r3, r0
 8012246:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012248:	7bfb      	ldrb	r3, [r7, #15]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d00f      	beq.n	801226e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801224e:	6839      	ldr	r1, [r7, #0]
 8012250:	6878      	ldr	r0, [r7, #4]
 8012252:	f000 f903 	bl	801245c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	685b      	ldr	r3, [r3, #4]
 801225a:	b2db      	uxtb	r3, r3
 801225c:	4619      	mov	r1, r3
 801225e:	6878      	ldr	r0, [r7, #4]
 8012260:	f7ff f90e 	bl	8011480 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	2202      	movs	r2, #2
 8012268:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801226c:	e014      	b.n	8012298 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801226e:	6878      	ldr	r0, [r7, #4]
 8012270:	f000 f9bf 	bl	80125f2 <USBD_CtlSendStatus>
      break;
 8012274:	e010      	b.n	8012298 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012276:	6878      	ldr	r0, [r7, #4]
 8012278:	f000 f9bb 	bl	80125f2 <USBD_CtlSendStatus>
      break;
 801227c:	e00c      	b.n	8012298 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801227e:	6839      	ldr	r1, [r7, #0]
 8012280:	6878      	ldr	r0, [r7, #4]
 8012282:	f000 f8eb 	bl	801245c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012286:	4b07      	ldr	r3, [pc, #28]	; (80122a4 <USBD_SetConfig+0x148>)
 8012288:	781b      	ldrb	r3, [r3, #0]
 801228a:	4619      	mov	r1, r3
 801228c:	6878      	ldr	r0, [r7, #4]
 801228e:	f7ff f8f7 	bl	8011480 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012292:	2303      	movs	r3, #3
 8012294:	73fb      	strb	r3, [r7, #15]
      break;
 8012296:	bf00      	nop
  }

  return ret;
 8012298:	7bfb      	ldrb	r3, [r7, #15]
}
 801229a:	4618      	mov	r0, r3
 801229c:	3710      	adds	r7, #16
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}
 80122a2:	bf00      	nop
 80122a4:	20000841 	.word	0x20000841

080122a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b082      	sub	sp, #8
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	6078      	str	r0, [r7, #4]
 80122b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80122b2:	683b      	ldr	r3, [r7, #0]
 80122b4:	88db      	ldrh	r3, [r3, #6]
 80122b6:	2b01      	cmp	r3, #1
 80122b8:	d004      	beq.n	80122c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80122ba:	6839      	ldr	r1, [r7, #0]
 80122bc:	6878      	ldr	r0, [r7, #4]
 80122be:	f000 f8cd 	bl	801245c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80122c2:	e023      	b.n	801230c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80122ca:	b2db      	uxtb	r3, r3
 80122cc:	2b02      	cmp	r3, #2
 80122ce:	dc02      	bgt.n	80122d6 <USBD_GetConfig+0x2e>
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	dc03      	bgt.n	80122dc <USBD_GetConfig+0x34>
 80122d4:	e015      	b.n	8012302 <USBD_GetConfig+0x5a>
 80122d6:	2b03      	cmp	r3, #3
 80122d8:	d00b      	beq.n	80122f2 <USBD_GetConfig+0x4a>
 80122da:	e012      	b.n	8012302 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	2200      	movs	r2, #0
 80122e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	3308      	adds	r3, #8
 80122e6:	2201      	movs	r2, #1
 80122e8:	4619      	mov	r1, r3
 80122ea:	6878      	ldr	r0, [r7, #4]
 80122ec:	f000 f927 	bl	801253e <USBD_CtlSendData>
        break;
 80122f0:	e00c      	b.n	801230c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	3304      	adds	r3, #4
 80122f6:	2201      	movs	r2, #1
 80122f8:	4619      	mov	r1, r3
 80122fa:	6878      	ldr	r0, [r7, #4]
 80122fc:	f000 f91f 	bl	801253e <USBD_CtlSendData>
        break;
 8012300:	e004      	b.n	801230c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012302:	6839      	ldr	r1, [r7, #0]
 8012304:	6878      	ldr	r0, [r7, #4]
 8012306:	f000 f8a9 	bl	801245c <USBD_CtlError>
        break;
 801230a:	bf00      	nop
}
 801230c:	bf00      	nop
 801230e:	3708      	adds	r7, #8
 8012310:	46bd      	mov	sp, r7
 8012312:	bd80      	pop	{r7, pc}

08012314 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b082      	sub	sp, #8
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
 801231c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012324:	b2db      	uxtb	r3, r3
 8012326:	3b01      	subs	r3, #1
 8012328:	2b02      	cmp	r3, #2
 801232a:	d81e      	bhi.n	801236a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801232c:	683b      	ldr	r3, [r7, #0]
 801232e:	88db      	ldrh	r3, [r3, #6]
 8012330:	2b02      	cmp	r3, #2
 8012332:	d004      	beq.n	801233e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012334:	6839      	ldr	r1, [r7, #0]
 8012336:	6878      	ldr	r0, [r7, #4]
 8012338:	f000 f890 	bl	801245c <USBD_CtlError>
        break;
 801233c:	e01a      	b.n	8012374 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	2201      	movs	r2, #1
 8012342:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801234a:	2b00      	cmp	r3, #0
 801234c:	d005      	beq.n	801235a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	68db      	ldr	r3, [r3, #12]
 8012352:	f043 0202 	orr.w	r2, r3, #2
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	330c      	adds	r3, #12
 801235e:	2202      	movs	r2, #2
 8012360:	4619      	mov	r1, r3
 8012362:	6878      	ldr	r0, [r7, #4]
 8012364:	f000 f8eb 	bl	801253e <USBD_CtlSendData>
      break;
 8012368:	e004      	b.n	8012374 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801236a:	6839      	ldr	r1, [r7, #0]
 801236c:	6878      	ldr	r0, [r7, #4]
 801236e:	f000 f875 	bl	801245c <USBD_CtlError>
      break;
 8012372:	bf00      	nop
  }
}
 8012374:	bf00      	nop
 8012376:	3708      	adds	r7, #8
 8012378:	46bd      	mov	sp, r7
 801237a:	bd80      	pop	{r7, pc}

0801237c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801237c:	b580      	push	{r7, lr}
 801237e:	b082      	sub	sp, #8
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]
 8012384:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012386:	683b      	ldr	r3, [r7, #0]
 8012388:	885b      	ldrh	r3, [r3, #2]
 801238a:	2b01      	cmp	r3, #1
 801238c:	d106      	bne.n	801239c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	2201      	movs	r2, #1
 8012392:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012396:	6878      	ldr	r0, [r7, #4]
 8012398:	f000 f92b 	bl	80125f2 <USBD_CtlSendStatus>
  }
}
 801239c:	bf00      	nop
 801239e:	3708      	adds	r7, #8
 80123a0:	46bd      	mov	sp, r7
 80123a2:	bd80      	pop	{r7, pc}

080123a4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b082      	sub	sp, #8
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
 80123ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80123b4:	b2db      	uxtb	r3, r3
 80123b6:	3b01      	subs	r3, #1
 80123b8:	2b02      	cmp	r3, #2
 80123ba:	d80b      	bhi.n	80123d4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80123bc:	683b      	ldr	r3, [r7, #0]
 80123be:	885b      	ldrh	r3, [r3, #2]
 80123c0:	2b01      	cmp	r3, #1
 80123c2:	d10c      	bne.n	80123de <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	2200      	movs	r2, #0
 80123c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80123cc:	6878      	ldr	r0, [r7, #4]
 80123ce:	f000 f910 	bl	80125f2 <USBD_CtlSendStatus>
      }
      break;
 80123d2:	e004      	b.n	80123de <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80123d4:	6839      	ldr	r1, [r7, #0]
 80123d6:	6878      	ldr	r0, [r7, #4]
 80123d8:	f000 f840 	bl	801245c <USBD_CtlError>
      break;
 80123dc:	e000      	b.n	80123e0 <USBD_ClrFeature+0x3c>
      break;
 80123de:	bf00      	nop
  }
}
 80123e0:	bf00      	nop
 80123e2:	3708      	adds	r7, #8
 80123e4:	46bd      	mov	sp, r7
 80123e6:	bd80      	pop	{r7, pc}

080123e8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b084      	sub	sp, #16
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	6078      	str	r0, [r7, #4]
 80123f0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80123f2:	683b      	ldr	r3, [r7, #0]
 80123f4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	781a      	ldrb	r2, [r3, #0]
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	3301      	adds	r3, #1
 8012402:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	781a      	ldrb	r2, [r3, #0]
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	3301      	adds	r3, #1
 8012410:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012412:	68f8      	ldr	r0, [r7, #12]
 8012414:	f7ff fabb 	bl	801198e <SWAPBYTE>
 8012418:	4603      	mov	r3, r0
 801241a:	461a      	mov	r2, r3
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	3301      	adds	r3, #1
 8012424:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	3301      	adds	r3, #1
 801242a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801242c:	68f8      	ldr	r0, [r7, #12]
 801242e:	f7ff faae 	bl	801198e <SWAPBYTE>
 8012432:	4603      	mov	r3, r0
 8012434:	461a      	mov	r2, r3
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	3301      	adds	r3, #1
 801243e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	3301      	adds	r3, #1
 8012444:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012446:	68f8      	ldr	r0, [r7, #12]
 8012448:	f7ff faa1 	bl	801198e <SWAPBYTE>
 801244c:	4603      	mov	r3, r0
 801244e:	461a      	mov	r2, r3
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	80da      	strh	r2, [r3, #6]
}
 8012454:	bf00      	nop
 8012456:	3710      	adds	r7, #16
 8012458:	46bd      	mov	sp, r7
 801245a:	bd80      	pop	{r7, pc}

0801245c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801245c:	b580      	push	{r7, lr}
 801245e:	b082      	sub	sp, #8
 8012460:	af00      	add	r7, sp, #0
 8012462:	6078      	str	r0, [r7, #4]
 8012464:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012466:	2180      	movs	r1, #128	; 0x80
 8012468:	6878      	ldr	r0, [r7, #4]
 801246a:	f006 ff27 	bl	80192bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801246e:	2100      	movs	r1, #0
 8012470:	6878      	ldr	r0, [r7, #4]
 8012472:	f006 ff23 	bl	80192bc <USBD_LL_StallEP>
}
 8012476:	bf00      	nop
 8012478:	3708      	adds	r7, #8
 801247a:	46bd      	mov	sp, r7
 801247c:	bd80      	pop	{r7, pc}

0801247e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801247e:	b580      	push	{r7, lr}
 8012480:	b086      	sub	sp, #24
 8012482:	af00      	add	r7, sp, #0
 8012484:	60f8      	str	r0, [r7, #12]
 8012486:	60b9      	str	r1, [r7, #8]
 8012488:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801248a:	2300      	movs	r3, #0
 801248c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	2b00      	cmp	r3, #0
 8012492:	d036      	beq.n	8012502 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012498:	6938      	ldr	r0, [r7, #16]
 801249a:	f000 f836 	bl	801250a <USBD_GetLen>
 801249e:	4603      	mov	r3, r0
 80124a0:	3301      	adds	r3, #1
 80124a2:	b29b      	uxth	r3, r3
 80124a4:	005b      	lsls	r3, r3, #1
 80124a6:	b29a      	uxth	r2, r3
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80124ac:	7dfb      	ldrb	r3, [r7, #23]
 80124ae:	68ba      	ldr	r2, [r7, #8]
 80124b0:	4413      	add	r3, r2
 80124b2:	687a      	ldr	r2, [r7, #4]
 80124b4:	7812      	ldrb	r2, [r2, #0]
 80124b6:	701a      	strb	r2, [r3, #0]
  idx++;
 80124b8:	7dfb      	ldrb	r3, [r7, #23]
 80124ba:	3301      	adds	r3, #1
 80124bc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80124be:	7dfb      	ldrb	r3, [r7, #23]
 80124c0:	68ba      	ldr	r2, [r7, #8]
 80124c2:	4413      	add	r3, r2
 80124c4:	2203      	movs	r2, #3
 80124c6:	701a      	strb	r2, [r3, #0]
  idx++;
 80124c8:	7dfb      	ldrb	r3, [r7, #23]
 80124ca:	3301      	adds	r3, #1
 80124cc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80124ce:	e013      	b.n	80124f8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80124d0:	7dfb      	ldrb	r3, [r7, #23]
 80124d2:	68ba      	ldr	r2, [r7, #8]
 80124d4:	4413      	add	r3, r2
 80124d6:	693a      	ldr	r2, [r7, #16]
 80124d8:	7812      	ldrb	r2, [r2, #0]
 80124da:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80124dc:	693b      	ldr	r3, [r7, #16]
 80124de:	3301      	adds	r3, #1
 80124e0:	613b      	str	r3, [r7, #16]
    idx++;
 80124e2:	7dfb      	ldrb	r3, [r7, #23]
 80124e4:	3301      	adds	r3, #1
 80124e6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80124e8:	7dfb      	ldrb	r3, [r7, #23]
 80124ea:	68ba      	ldr	r2, [r7, #8]
 80124ec:	4413      	add	r3, r2
 80124ee:	2200      	movs	r2, #0
 80124f0:	701a      	strb	r2, [r3, #0]
    idx++;
 80124f2:	7dfb      	ldrb	r3, [r7, #23]
 80124f4:	3301      	adds	r3, #1
 80124f6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80124f8:	693b      	ldr	r3, [r7, #16]
 80124fa:	781b      	ldrb	r3, [r3, #0]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d1e7      	bne.n	80124d0 <USBD_GetString+0x52>
 8012500:	e000      	b.n	8012504 <USBD_GetString+0x86>
    return;
 8012502:	bf00      	nop
  }
}
 8012504:	3718      	adds	r7, #24
 8012506:	46bd      	mov	sp, r7
 8012508:	bd80      	pop	{r7, pc}

0801250a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801250a:	b480      	push	{r7}
 801250c:	b085      	sub	sp, #20
 801250e:	af00      	add	r7, sp, #0
 8012510:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012512:	2300      	movs	r3, #0
 8012514:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801251a:	e005      	b.n	8012528 <USBD_GetLen+0x1e>
  {
    len++;
 801251c:	7bfb      	ldrb	r3, [r7, #15]
 801251e:	3301      	adds	r3, #1
 8012520:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012522:	68bb      	ldr	r3, [r7, #8]
 8012524:	3301      	adds	r3, #1
 8012526:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012528:	68bb      	ldr	r3, [r7, #8]
 801252a:	781b      	ldrb	r3, [r3, #0]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d1f5      	bne.n	801251c <USBD_GetLen+0x12>
  }

  return len;
 8012530:	7bfb      	ldrb	r3, [r7, #15]
}
 8012532:	4618      	mov	r0, r3
 8012534:	3714      	adds	r7, #20
 8012536:	46bd      	mov	sp, r7
 8012538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801253c:	4770      	bx	lr

0801253e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801253e:	b580      	push	{r7, lr}
 8012540:	b084      	sub	sp, #16
 8012542:	af00      	add	r7, sp, #0
 8012544:	60f8      	str	r0, [r7, #12]
 8012546:	60b9      	str	r1, [r7, #8]
 8012548:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	2202      	movs	r2, #2
 801254e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	687a      	ldr	r2, [r7, #4]
 8012556:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	687a      	ldr	r2, [r7, #4]
 801255c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	68ba      	ldr	r2, [r7, #8]
 8012562:	2100      	movs	r1, #0
 8012564:	68f8      	ldr	r0, [r7, #12]
 8012566:	f006 ff32 	bl	80193ce <USBD_LL_Transmit>

  return USBD_OK;
 801256a:	2300      	movs	r3, #0
}
 801256c:	4618      	mov	r0, r3
 801256e:	3710      	adds	r7, #16
 8012570:	46bd      	mov	sp, r7
 8012572:	bd80      	pop	{r7, pc}

08012574 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012574:	b580      	push	{r7, lr}
 8012576:	b084      	sub	sp, #16
 8012578:	af00      	add	r7, sp, #0
 801257a:	60f8      	str	r0, [r7, #12]
 801257c:	60b9      	str	r1, [r7, #8]
 801257e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	68ba      	ldr	r2, [r7, #8]
 8012584:	2100      	movs	r1, #0
 8012586:	68f8      	ldr	r0, [r7, #12]
 8012588:	f006 ff21 	bl	80193ce <USBD_LL_Transmit>

  return USBD_OK;
 801258c:	2300      	movs	r3, #0
}
 801258e:	4618      	mov	r0, r3
 8012590:	3710      	adds	r7, #16
 8012592:	46bd      	mov	sp, r7
 8012594:	bd80      	pop	{r7, pc}

08012596 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012596:	b580      	push	{r7, lr}
 8012598:	b084      	sub	sp, #16
 801259a:	af00      	add	r7, sp, #0
 801259c:	60f8      	str	r0, [r7, #12]
 801259e:	60b9      	str	r1, [r7, #8]
 80125a0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	2203      	movs	r2, #3
 80125a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	687a      	ldr	r2, [r7, #4]
 80125ae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	687a      	ldr	r2, [r7, #4]
 80125b6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	68ba      	ldr	r2, [r7, #8]
 80125be:	2100      	movs	r1, #0
 80125c0:	68f8      	ldr	r0, [r7, #12]
 80125c2:	f006 ff25 	bl	8019410 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80125c6:	2300      	movs	r3, #0
}
 80125c8:	4618      	mov	r0, r3
 80125ca:	3710      	adds	r7, #16
 80125cc:	46bd      	mov	sp, r7
 80125ce:	bd80      	pop	{r7, pc}

080125d0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80125d0:	b580      	push	{r7, lr}
 80125d2:	b084      	sub	sp, #16
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	60f8      	str	r0, [r7, #12]
 80125d8:	60b9      	str	r1, [r7, #8]
 80125da:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	68ba      	ldr	r2, [r7, #8]
 80125e0:	2100      	movs	r1, #0
 80125e2:	68f8      	ldr	r0, [r7, #12]
 80125e4:	f006 ff14 	bl	8019410 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80125e8:	2300      	movs	r3, #0
}
 80125ea:	4618      	mov	r0, r3
 80125ec:	3710      	adds	r7, #16
 80125ee:	46bd      	mov	sp, r7
 80125f0:	bd80      	pop	{r7, pc}

080125f2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80125f2:	b580      	push	{r7, lr}
 80125f4:	b082      	sub	sp, #8
 80125f6:	af00      	add	r7, sp, #0
 80125f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	2204      	movs	r2, #4
 80125fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012602:	2300      	movs	r3, #0
 8012604:	2200      	movs	r2, #0
 8012606:	2100      	movs	r1, #0
 8012608:	6878      	ldr	r0, [r7, #4]
 801260a:	f006 fee0 	bl	80193ce <USBD_LL_Transmit>

  return USBD_OK;
 801260e:	2300      	movs	r3, #0
}
 8012610:	4618      	mov	r0, r3
 8012612:	3708      	adds	r7, #8
 8012614:	46bd      	mov	sp, r7
 8012616:	bd80      	pop	{r7, pc}

08012618 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012618:	b580      	push	{r7, lr}
 801261a:	b082      	sub	sp, #8
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	2205      	movs	r2, #5
 8012624:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012628:	2300      	movs	r3, #0
 801262a:	2200      	movs	r2, #0
 801262c:	2100      	movs	r1, #0
 801262e:	6878      	ldr	r0, [r7, #4]
 8012630:	f006 feee 	bl	8019410 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012634:	2300      	movs	r3, #0
}
 8012636:	4618      	mov	r0, r3
 8012638:	3708      	adds	r7, #8
 801263a:	46bd      	mov	sp, r7
 801263c:	bd80      	pop	{r7, pc}
	...

08012640 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b084      	sub	sp, #16
 8012644:	af00      	add	r7, sp, #0
 8012646:	4603      	mov	r3, r0
 8012648:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801264a:	79fb      	ldrb	r3, [r7, #7]
 801264c:	4a08      	ldr	r2, [pc, #32]	; (8012670 <disk_status+0x30>)
 801264e:	009b      	lsls	r3, r3, #2
 8012650:	4413      	add	r3, r2
 8012652:	685b      	ldr	r3, [r3, #4]
 8012654:	685b      	ldr	r3, [r3, #4]
 8012656:	79fa      	ldrb	r2, [r7, #7]
 8012658:	4905      	ldr	r1, [pc, #20]	; (8012670 <disk_status+0x30>)
 801265a:	440a      	add	r2, r1
 801265c:	7a12      	ldrb	r2, [r2, #8]
 801265e:	4610      	mov	r0, r2
 8012660:	4798      	blx	r3
 8012662:	4603      	mov	r3, r0
 8012664:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012666:	7bfb      	ldrb	r3, [r7, #15]
}
 8012668:	4618      	mov	r0, r3
 801266a:	3710      	adds	r7, #16
 801266c:	46bd      	mov	sp, r7
 801266e:	bd80      	pop	{r7, pc}
 8012670:	2000086c 	.word	0x2000086c

08012674 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012674:	b580      	push	{r7, lr}
 8012676:	b084      	sub	sp, #16
 8012678:	af00      	add	r7, sp, #0
 801267a:	4603      	mov	r3, r0
 801267c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801267e:	2300      	movs	r3, #0
 8012680:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8012682:	79fb      	ldrb	r3, [r7, #7]
 8012684:	4a0d      	ldr	r2, [pc, #52]	; (80126bc <disk_initialize+0x48>)
 8012686:	5cd3      	ldrb	r3, [r2, r3]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d111      	bne.n	80126b0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 801268c:	79fb      	ldrb	r3, [r7, #7]
 801268e:	4a0b      	ldr	r2, [pc, #44]	; (80126bc <disk_initialize+0x48>)
 8012690:	2101      	movs	r1, #1
 8012692:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012694:	79fb      	ldrb	r3, [r7, #7]
 8012696:	4a09      	ldr	r2, [pc, #36]	; (80126bc <disk_initialize+0x48>)
 8012698:	009b      	lsls	r3, r3, #2
 801269a:	4413      	add	r3, r2
 801269c:	685b      	ldr	r3, [r3, #4]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	79fa      	ldrb	r2, [r7, #7]
 80126a2:	4906      	ldr	r1, [pc, #24]	; (80126bc <disk_initialize+0x48>)
 80126a4:	440a      	add	r2, r1
 80126a6:	7a12      	ldrb	r2, [r2, #8]
 80126a8:	4610      	mov	r0, r2
 80126aa:	4798      	blx	r3
 80126ac:	4603      	mov	r3, r0
 80126ae:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80126b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80126b2:	4618      	mov	r0, r3
 80126b4:	3710      	adds	r7, #16
 80126b6:	46bd      	mov	sp, r7
 80126b8:	bd80      	pop	{r7, pc}
 80126ba:	bf00      	nop
 80126bc:	2000086c 	.word	0x2000086c

080126c0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80126c0:	b590      	push	{r4, r7, lr}
 80126c2:	b087      	sub	sp, #28
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	60b9      	str	r1, [r7, #8]
 80126c8:	607a      	str	r2, [r7, #4]
 80126ca:	603b      	str	r3, [r7, #0]
 80126cc:	4603      	mov	r3, r0
 80126ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80126d0:	7bfb      	ldrb	r3, [r7, #15]
 80126d2:	4a0a      	ldr	r2, [pc, #40]	; (80126fc <disk_read+0x3c>)
 80126d4:	009b      	lsls	r3, r3, #2
 80126d6:	4413      	add	r3, r2
 80126d8:	685b      	ldr	r3, [r3, #4]
 80126da:	689c      	ldr	r4, [r3, #8]
 80126dc:	7bfb      	ldrb	r3, [r7, #15]
 80126de:	4a07      	ldr	r2, [pc, #28]	; (80126fc <disk_read+0x3c>)
 80126e0:	4413      	add	r3, r2
 80126e2:	7a18      	ldrb	r0, [r3, #8]
 80126e4:	683b      	ldr	r3, [r7, #0]
 80126e6:	687a      	ldr	r2, [r7, #4]
 80126e8:	68b9      	ldr	r1, [r7, #8]
 80126ea:	47a0      	blx	r4
 80126ec:	4603      	mov	r3, r0
 80126ee:	75fb      	strb	r3, [r7, #23]
  return res;
 80126f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80126f2:	4618      	mov	r0, r3
 80126f4:	371c      	adds	r7, #28
 80126f6:	46bd      	mov	sp, r7
 80126f8:	bd90      	pop	{r4, r7, pc}
 80126fa:	bf00      	nop
 80126fc:	2000086c 	.word	0x2000086c

08012700 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012700:	b590      	push	{r4, r7, lr}
 8012702:	b087      	sub	sp, #28
 8012704:	af00      	add	r7, sp, #0
 8012706:	60b9      	str	r1, [r7, #8]
 8012708:	607a      	str	r2, [r7, #4]
 801270a:	603b      	str	r3, [r7, #0]
 801270c:	4603      	mov	r3, r0
 801270e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012710:	7bfb      	ldrb	r3, [r7, #15]
 8012712:	4a0a      	ldr	r2, [pc, #40]	; (801273c <disk_write+0x3c>)
 8012714:	009b      	lsls	r3, r3, #2
 8012716:	4413      	add	r3, r2
 8012718:	685b      	ldr	r3, [r3, #4]
 801271a:	68dc      	ldr	r4, [r3, #12]
 801271c:	7bfb      	ldrb	r3, [r7, #15]
 801271e:	4a07      	ldr	r2, [pc, #28]	; (801273c <disk_write+0x3c>)
 8012720:	4413      	add	r3, r2
 8012722:	7a18      	ldrb	r0, [r3, #8]
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	687a      	ldr	r2, [r7, #4]
 8012728:	68b9      	ldr	r1, [r7, #8]
 801272a:	47a0      	blx	r4
 801272c:	4603      	mov	r3, r0
 801272e:	75fb      	strb	r3, [r7, #23]
  return res;
 8012730:	7dfb      	ldrb	r3, [r7, #23]
}
 8012732:	4618      	mov	r0, r3
 8012734:	371c      	adds	r7, #28
 8012736:	46bd      	mov	sp, r7
 8012738:	bd90      	pop	{r4, r7, pc}
 801273a:	bf00      	nop
 801273c:	2000086c 	.word	0x2000086c

08012740 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012740:	b580      	push	{r7, lr}
 8012742:	b084      	sub	sp, #16
 8012744:	af00      	add	r7, sp, #0
 8012746:	4603      	mov	r3, r0
 8012748:	603a      	str	r2, [r7, #0]
 801274a:	71fb      	strb	r3, [r7, #7]
 801274c:	460b      	mov	r3, r1
 801274e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012750:	79fb      	ldrb	r3, [r7, #7]
 8012752:	4a09      	ldr	r2, [pc, #36]	; (8012778 <disk_ioctl+0x38>)
 8012754:	009b      	lsls	r3, r3, #2
 8012756:	4413      	add	r3, r2
 8012758:	685b      	ldr	r3, [r3, #4]
 801275a:	691b      	ldr	r3, [r3, #16]
 801275c:	79fa      	ldrb	r2, [r7, #7]
 801275e:	4906      	ldr	r1, [pc, #24]	; (8012778 <disk_ioctl+0x38>)
 8012760:	440a      	add	r2, r1
 8012762:	7a10      	ldrb	r0, [r2, #8]
 8012764:	79b9      	ldrb	r1, [r7, #6]
 8012766:	683a      	ldr	r2, [r7, #0]
 8012768:	4798      	blx	r3
 801276a:	4603      	mov	r3, r0
 801276c:	73fb      	strb	r3, [r7, #15]
  return res;
 801276e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012770:	4618      	mov	r0, r3
 8012772:	3710      	adds	r7, #16
 8012774:	46bd      	mov	sp, r7
 8012776:	bd80      	pop	{r7, pc}
 8012778:	2000086c 	.word	0x2000086c

0801277c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801277c:	b480      	push	{r7}
 801277e:	b085      	sub	sp, #20
 8012780:	af00      	add	r7, sp, #0
 8012782:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	3301      	adds	r3, #1
 8012788:	781b      	ldrb	r3, [r3, #0]
 801278a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801278c:	89fb      	ldrh	r3, [r7, #14]
 801278e:	021b      	lsls	r3, r3, #8
 8012790:	b21a      	sxth	r2, r3
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	781b      	ldrb	r3, [r3, #0]
 8012796:	b21b      	sxth	r3, r3
 8012798:	4313      	orrs	r3, r2
 801279a:	b21b      	sxth	r3, r3
 801279c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801279e:	89fb      	ldrh	r3, [r7, #14]
}
 80127a0:	4618      	mov	r0, r3
 80127a2:	3714      	adds	r7, #20
 80127a4:	46bd      	mov	sp, r7
 80127a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127aa:	4770      	bx	lr

080127ac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80127ac:	b480      	push	{r7}
 80127ae:	b085      	sub	sp, #20
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	3303      	adds	r3, #3
 80127b8:	781b      	ldrb	r3, [r3, #0]
 80127ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	021b      	lsls	r3, r3, #8
 80127c0:	687a      	ldr	r2, [r7, #4]
 80127c2:	3202      	adds	r2, #2
 80127c4:	7812      	ldrb	r2, [r2, #0]
 80127c6:	4313      	orrs	r3, r2
 80127c8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	021b      	lsls	r3, r3, #8
 80127ce:	687a      	ldr	r2, [r7, #4]
 80127d0:	3201      	adds	r2, #1
 80127d2:	7812      	ldrb	r2, [r2, #0]
 80127d4:	4313      	orrs	r3, r2
 80127d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	021b      	lsls	r3, r3, #8
 80127dc:	687a      	ldr	r2, [r7, #4]
 80127de:	7812      	ldrb	r2, [r2, #0]
 80127e0:	4313      	orrs	r3, r2
 80127e2:	60fb      	str	r3, [r7, #12]
	return rv;
 80127e4:	68fb      	ldr	r3, [r7, #12]
}
 80127e6:	4618      	mov	r0, r3
 80127e8:	3714      	adds	r7, #20
 80127ea:	46bd      	mov	sp, r7
 80127ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f0:	4770      	bx	lr

080127f2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80127f2:	b480      	push	{r7}
 80127f4:	b083      	sub	sp, #12
 80127f6:	af00      	add	r7, sp, #0
 80127f8:	6078      	str	r0, [r7, #4]
 80127fa:	460b      	mov	r3, r1
 80127fc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	1c5a      	adds	r2, r3, #1
 8012802:	607a      	str	r2, [r7, #4]
 8012804:	887a      	ldrh	r2, [r7, #2]
 8012806:	b2d2      	uxtb	r2, r2
 8012808:	701a      	strb	r2, [r3, #0]
 801280a:	887b      	ldrh	r3, [r7, #2]
 801280c:	0a1b      	lsrs	r3, r3, #8
 801280e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	1c5a      	adds	r2, r3, #1
 8012814:	607a      	str	r2, [r7, #4]
 8012816:	887a      	ldrh	r2, [r7, #2]
 8012818:	b2d2      	uxtb	r2, r2
 801281a:	701a      	strb	r2, [r3, #0]
}
 801281c:	bf00      	nop
 801281e:	370c      	adds	r7, #12
 8012820:	46bd      	mov	sp, r7
 8012822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012826:	4770      	bx	lr

08012828 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012828:	b480      	push	{r7}
 801282a:	b083      	sub	sp, #12
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
 8012830:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	1c5a      	adds	r2, r3, #1
 8012836:	607a      	str	r2, [r7, #4]
 8012838:	683a      	ldr	r2, [r7, #0]
 801283a:	b2d2      	uxtb	r2, r2
 801283c:	701a      	strb	r2, [r3, #0]
 801283e:	683b      	ldr	r3, [r7, #0]
 8012840:	0a1b      	lsrs	r3, r3, #8
 8012842:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	1c5a      	adds	r2, r3, #1
 8012848:	607a      	str	r2, [r7, #4]
 801284a:	683a      	ldr	r2, [r7, #0]
 801284c:	b2d2      	uxtb	r2, r2
 801284e:	701a      	strb	r2, [r3, #0]
 8012850:	683b      	ldr	r3, [r7, #0]
 8012852:	0a1b      	lsrs	r3, r3, #8
 8012854:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	1c5a      	adds	r2, r3, #1
 801285a:	607a      	str	r2, [r7, #4]
 801285c:	683a      	ldr	r2, [r7, #0]
 801285e:	b2d2      	uxtb	r2, r2
 8012860:	701a      	strb	r2, [r3, #0]
 8012862:	683b      	ldr	r3, [r7, #0]
 8012864:	0a1b      	lsrs	r3, r3, #8
 8012866:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	1c5a      	adds	r2, r3, #1
 801286c:	607a      	str	r2, [r7, #4]
 801286e:	683a      	ldr	r2, [r7, #0]
 8012870:	b2d2      	uxtb	r2, r2
 8012872:	701a      	strb	r2, [r3, #0]
}
 8012874:	bf00      	nop
 8012876:	370c      	adds	r7, #12
 8012878:	46bd      	mov	sp, r7
 801287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287e:	4770      	bx	lr

08012880 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012880:	b480      	push	{r7}
 8012882:	b087      	sub	sp, #28
 8012884:	af00      	add	r7, sp, #0
 8012886:	60f8      	str	r0, [r7, #12]
 8012888:	60b9      	str	r1, [r7, #8]
 801288a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012890:	68bb      	ldr	r3, [r7, #8]
 8012892:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d00d      	beq.n	80128b6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801289a:	693a      	ldr	r2, [r7, #16]
 801289c:	1c53      	adds	r3, r2, #1
 801289e:	613b      	str	r3, [r7, #16]
 80128a0:	697b      	ldr	r3, [r7, #20]
 80128a2:	1c59      	adds	r1, r3, #1
 80128a4:	6179      	str	r1, [r7, #20]
 80128a6:	7812      	ldrb	r2, [r2, #0]
 80128a8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	3b01      	subs	r3, #1
 80128ae:	607b      	str	r3, [r7, #4]
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d1f1      	bne.n	801289a <mem_cpy+0x1a>
	}
}
 80128b6:	bf00      	nop
 80128b8:	371c      	adds	r7, #28
 80128ba:	46bd      	mov	sp, r7
 80128bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c0:	4770      	bx	lr

080128c2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80128c2:	b480      	push	{r7}
 80128c4:	b087      	sub	sp, #28
 80128c6:	af00      	add	r7, sp, #0
 80128c8:	60f8      	str	r0, [r7, #12]
 80128ca:	60b9      	str	r1, [r7, #8]
 80128cc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80128d2:	697b      	ldr	r3, [r7, #20]
 80128d4:	1c5a      	adds	r2, r3, #1
 80128d6:	617a      	str	r2, [r7, #20]
 80128d8:	68ba      	ldr	r2, [r7, #8]
 80128da:	b2d2      	uxtb	r2, r2
 80128dc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	3b01      	subs	r3, #1
 80128e2:	607b      	str	r3, [r7, #4]
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d1f3      	bne.n	80128d2 <mem_set+0x10>
}
 80128ea:	bf00      	nop
 80128ec:	bf00      	nop
 80128ee:	371c      	adds	r7, #28
 80128f0:	46bd      	mov	sp, r7
 80128f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f6:	4770      	bx	lr

080128f8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80128f8:	b480      	push	{r7}
 80128fa:	b089      	sub	sp, #36	; 0x24
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	60f8      	str	r0, [r7, #12]
 8012900:	60b9      	str	r1, [r7, #8]
 8012902:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	61fb      	str	r3, [r7, #28]
 8012908:	68bb      	ldr	r3, [r7, #8]
 801290a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801290c:	2300      	movs	r3, #0
 801290e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8012910:	69fb      	ldr	r3, [r7, #28]
 8012912:	1c5a      	adds	r2, r3, #1
 8012914:	61fa      	str	r2, [r7, #28]
 8012916:	781b      	ldrb	r3, [r3, #0]
 8012918:	4619      	mov	r1, r3
 801291a:	69bb      	ldr	r3, [r7, #24]
 801291c:	1c5a      	adds	r2, r3, #1
 801291e:	61ba      	str	r2, [r7, #24]
 8012920:	781b      	ldrb	r3, [r3, #0]
 8012922:	1acb      	subs	r3, r1, r3
 8012924:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	3b01      	subs	r3, #1
 801292a:	607b      	str	r3, [r7, #4]
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d002      	beq.n	8012938 <mem_cmp+0x40>
 8012932:	697b      	ldr	r3, [r7, #20]
 8012934:	2b00      	cmp	r3, #0
 8012936:	d0eb      	beq.n	8012910 <mem_cmp+0x18>

	return r;
 8012938:	697b      	ldr	r3, [r7, #20]
}
 801293a:	4618      	mov	r0, r3
 801293c:	3724      	adds	r7, #36	; 0x24
 801293e:	46bd      	mov	sp, r7
 8012940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012944:	4770      	bx	lr

08012946 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8012946:	b480      	push	{r7}
 8012948:	b083      	sub	sp, #12
 801294a:	af00      	add	r7, sp, #0
 801294c:	6078      	str	r0, [r7, #4]
 801294e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012950:	e002      	b.n	8012958 <chk_chr+0x12>
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	3301      	adds	r3, #1
 8012956:	607b      	str	r3, [r7, #4]
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	781b      	ldrb	r3, [r3, #0]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d005      	beq.n	801296c <chk_chr+0x26>
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	781b      	ldrb	r3, [r3, #0]
 8012964:	461a      	mov	r2, r3
 8012966:	683b      	ldr	r3, [r7, #0]
 8012968:	4293      	cmp	r3, r2
 801296a:	d1f2      	bne.n	8012952 <chk_chr+0xc>
	return *str;
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	781b      	ldrb	r3, [r3, #0]
}
 8012970:	4618      	mov	r0, r3
 8012972:	370c      	adds	r7, #12
 8012974:	46bd      	mov	sp, r7
 8012976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297a:	4770      	bx	lr

0801297c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b082      	sub	sp, #8
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d009      	beq.n	801299e <lock_fs+0x22>
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	68db      	ldr	r3, [r3, #12]
 801298e:	4618      	mov	r0, r3
 8012990:	f002 fcde 	bl	8015350 <ff_req_grant>
 8012994:	4603      	mov	r3, r0
 8012996:	2b00      	cmp	r3, #0
 8012998:	d001      	beq.n	801299e <lock_fs+0x22>
 801299a:	2301      	movs	r3, #1
 801299c:	e000      	b.n	80129a0 <lock_fs+0x24>
 801299e:	2300      	movs	r3, #0
}
 80129a0:	4618      	mov	r0, r3
 80129a2:	3708      	adds	r7, #8
 80129a4:	46bd      	mov	sp, r7
 80129a6:	bd80      	pop	{r7, pc}

080129a8 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b082      	sub	sp, #8
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	6078      	str	r0, [r7, #4]
 80129b0:	460b      	mov	r3, r1
 80129b2:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d00d      	beq.n	80129d6 <unlock_fs+0x2e>
 80129ba:	78fb      	ldrb	r3, [r7, #3]
 80129bc:	2b0c      	cmp	r3, #12
 80129be:	d00a      	beq.n	80129d6 <unlock_fs+0x2e>
 80129c0:	78fb      	ldrb	r3, [r7, #3]
 80129c2:	2b0b      	cmp	r3, #11
 80129c4:	d007      	beq.n	80129d6 <unlock_fs+0x2e>
 80129c6:	78fb      	ldrb	r3, [r7, #3]
 80129c8:	2b0f      	cmp	r3, #15
 80129ca:	d004      	beq.n	80129d6 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	68db      	ldr	r3, [r3, #12]
 80129d0:	4618      	mov	r0, r3
 80129d2:	f002 fcd2 	bl	801537a <ff_rel_grant>
	}
}
 80129d6:	bf00      	nop
 80129d8:	3708      	adds	r7, #8
 80129da:	46bd      	mov	sp, r7
 80129dc:	bd80      	pop	{r7, pc}
	...

080129e0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80129e0:	b480      	push	{r7}
 80129e2:	b085      	sub	sp, #20
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
 80129e8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80129ea:	2300      	movs	r3, #0
 80129ec:	60bb      	str	r3, [r7, #8]
 80129ee:	68bb      	ldr	r3, [r7, #8]
 80129f0:	60fb      	str	r3, [r7, #12]
 80129f2:	e029      	b.n	8012a48 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80129f4:	4a27      	ldr	r2, [pc, #156]	; (8012a94 <chk_lock+0xb4>)
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	011b      	lsls	r3, r3, #4
 80129fa:	4413      	add	r3, r2
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d01d      	beq.n	8012a3e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012a02:	4a24      	ldr	r2, [pc, #144]	; (8012a94 <chk_lock+0xb4>)
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	011b      	lsls	r3, r3, #4
 8012a08:	4413      	add	r3, r2
 8012a0a:	681a      	ldr	r2, [r3, #0]
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	429a      	cmp	r2, r3
 8012a12:	d116      	bne.n	8012a42 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8012a14:	4a1f      	ldr	r2, [pc, #124]	; (8012a94 <chk_lock+0xb4>)
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	011b      	lsls	r3, r3, #4
 8012a1a:	4413      	add	r3, r2
 8012a1c:	3304      	adds	r3, #4
 8012a1e:	681a      	ldr	r2, [r3, #0]
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012a24:	429a      	cmp	r2, r3
 8012a26:	d10c      	bne.n	8012a42 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012a28:	4a1a      	ldr	r2, [pc, #104]	; (8012a94 <chk_lock+0xb4>)
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	011b      	lsls	r3, r3, #4
 8012a2e:	4413      	add	r3, r2
 8012a30:	3308      	adds	r3, #8
 8012a32:	681a      	ldr	r2, [r3, #0]
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8012a38:	429a      	cmp	r2, r3
 8012a3a:	d102      	bne.n	8012a42 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012a3c:	e007      	b.n	8012a4e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8012a3e:	2301      	movs	r3, #1
 8012a40:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	3301      	adds	r3, #1
 8012a46:	60fb      	str	r3, [r7, #12]
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	2b01      	cmp	r3, #1
 8012a4c:	d9d2      	bls.n	80129f4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	2b02      	cmp	r3, #2
 8012a52:	d109      	bne.n	8012a68 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8012a54:	68bb      	ldr	r3, [r7, #8]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d102      	bne.n	8012a60 <chk_lock+0x80>
 8012a5a:	683b      	ldr	r3, [r7, #0]
 8012a5c:	2b02      	cmp	r3, #2
 8012a5e:	d101      	bne.n	8012a64 <chk_lock+0x84>
 8012a60:	2300      	movs	r3, #0
 8012a62:	e010      	b.n	8012a86 <chk_lock+0xa6>
 8012a64:	2312      	movs	r3, #18
 8012a66:	e00e      	b.n	8012a86 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8012a68:	683b      	ldr	r3, [r7, #0]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d108      	bne.n	8012a80 <chk_lock+0xa0>
 8012a6e:	4a09      	ldr	r2, [pc, #36]	; (8012a94 <chk_lock+0xb4>)
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	011b      	lsls	r3, r3, #4
 8012a74:	4413      	add	r3, r2
 8012a76:	330c      	adds	r3, #12
 8012a78:	881b      	ldrh	r3, [r3, #0]
 8012a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012a7e:	d101      	bne.n	8012a84 <chk_lock+0xa4>
 8012a80:	2310      	movs	r3, #16
 8012a82:	e000      	b.n	8012a86 <chk_lock+0xa6>
 8012a84:	2300      	movs	r3, #0
}
 8012a86:	4618      	mov	r0, r3
 8012a88:	3714      	adds	r7, #20
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a90:	4770      	bx	lr
 8012a92:	bf00      	nop
 8012a94:	2000084c 	.word	0x2000084c

08012a98 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8012a98:	b480      	push	{r7}
 8012a9a:	b083      	sub	sp, #12
 8012a9c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012a9e:	2300      	movs	r3, #0
 8012aa0:	607b      	str	r3, [r7, #4]
 8012aa2:	e002      	b.n	8012aaa <enq_lock+0x12>
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	3301      	adds	r3, #1
 8012aa8:	607b      	str	r3, [r7, #4]
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	2b01      	cmp	r3, #1
 8012aae:	d806      	bhi.n	8012abe <enq_lock+0x26>
 8012ab0:	4a09      	ldr	r2, [pc, #36]	; (8012ad8 <enq_lock+0x40>)
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	011b      	lsls	r3, r3, #4
 8012ab6:	4413      	add	r3, r2
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d1f2      	bne.n	8012aa4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	2b02      	cmp	r3, #2
 8012ac2:	bf14      	ite	ne
 8012ac4:	2301      	movne	r3, #1
 8012ac6:	2300      	moveq	r3, #0
 8012ac8:	b2db      	uxtb	r3, r3
}
 8012aca:	4618      	mov	r0, r3
 8012acc:	370c      	adds	r7, #12
 8012ace:	46bd      	mov	sp, r7
 8012ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad4:	4770      	bx	lr
 8012ad6:	bf00      	nop
 8012ad8:	2000084c 	.word	0x2000084c

08012adc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012adc:	b480      	push	{r7}
 8012ade:	b085      	sub	sp, #20
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
 8012ae4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	60fb      	str	r3, [r7, #12]
 8012aea:	e01f      	b.n	8012b2c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8012aec:	4a41      	ldr	r2, [pc, #260]	; (8012bf4 <inc_lock+0x118>)
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	011b      	lsls	r3, r3, #4
 8012af2:	4413      	add	r3, r2
 8012af4:	681a      	ldr	r2, [r3, #0]
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	429a      	cmp	r2, r3
 8012afc:	d113      	bne.n	8012b26 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8012afe:	4a3d      	ldr	r2, [pc, #244]	; (8012bf4 <inc_lock+0x118>)
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	011b      	lsls	r3, r3, #4
 8012b04:	4413      	add	r3, r2
 8012b06:	3304      	adds	r3, #4
 8012b08:	681a      	ldr	r2, [r3, #0]
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8012b0e:	429a      	cmp	r2, r3
 8012b10:	d109      	bne.n	8012b26 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8012b12:	4a38      	ldr	r2, [pc, #224]	; (8012bf4 <inc_lock+0x118>)
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	011b      	lsls	r3, r3, #4
 8012b18:	4413      	add	r3, r2
 8012b1a:	3308      	adds	r3, #8
 8012b1c:	681a      	ldr	r2, [r3, #0]
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8012b22:	429a      	cmp	r2, r3
 8012b24:	d006      	beq.n	8012b34 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	3301      	adds	r3, #1
 8012b2a:	60fb      	str	r3, [r7, #12]
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	2b01      	cmp	r3, #1
 8012b30:	d9dc      	bls.n	8012aec <inc_lock+0x10>
 8012b32:	e000      	b.n	8012b36 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8012b34:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	2b02      	cmp	r3, #2
 8012b3a:	d132      	bne.n	8012ba2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	60fb      	str	r3, [r7, #12]
 8012b40:	e002      	b.n	8012b48 <inc_lock+0x6c>
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	3301      	adds	r3, #1
 8012b46:	60fb      	str	r3, [r7, #12]
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	2b01      	cmp	r3, #1
 8012b4c:	d806      	bhi.n	8012b5c <inc_lock+0x80>
 8012b4e:	4a29      	ldr	r2, [pc, #164]	; (8012bf4 <inc_lock+0x118>)
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	011b      	lsls	r3, r3, #4
 8012b54:	4413      	add	r3, r2
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d1f2      	bne.n	8012b42 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	2b02      	cmp	r3, #2
 8012b60:	d101      	bne.n	8012b66 <inc_lock+0x8a>
 8012b62:	2300      	movs	r3, #0
 8012b64:	e040      	b.n	8012be8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	681a      	ldr	r2, [r3, #0]
 8012b6a:	4922      	ldr	r1, [pc, #136]	; (8012bf4 <inc_lock+0x118>)
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	011b      	lsls	r3, r3, #4
 8012b70:	440b      	add	r3, r1
 8012b72:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	689a      	ldr	r2, [r3, #8]
 8012b78:	491e      	ldr	r1, [pc, #120]	; (8012bf4 <inc_lock+0x118>)
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	011b      	lsls	r3, r3, #4
 8012b7e:	440b      	add	r3, r1
 8012b80:	3304      	adds	r3, #4
 8012b82:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	695a      	ldr	r2, [r3, #20]
 8012b88:	491a      	ldr	r1, [pc, #104]	; (8012bf4 <inc_lock+0x118>)
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	011b      	lsls	r3, r3, #4
 8012b8e:	440b      	add	r3, r1
 8012b90:	3308      	adds	r3, #8
 8012b92:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8012b94:	4a17      	ldr	r2, [pc, #92]	; (8012bf4 <inc_lock+0x118>)
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	011b      	lsls	r3, r3, #4
 8012b9a:	4413      	add	r3, r2
 8012b9c:	330c      	adds	r3, #12
 8012b9e:	2200      	movs	r2, #0
 8012ba0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8012ba2:	683b      	ldr	r3, [r7, #0]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d009      	beq.n	8012bbc <inc_lock+0xe0>
 8012ba8:	4a12      	ldr	r2, [pc, #72]	; (8012bf4 <inc_lock+0x118>)
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	011b      	lsls	r3, r3, #4
 8012bae:	4413      	add	r3, r2
 8012bb0:	330c      	adds	r3, #12
 8012bb2:	881b      	ldrh	r3, [r3, #0]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d001      	beq.n	8012bbc <inc_lock+0xe0>
 8012bb8:	2300      	movs	r3, #0
 8012bba:	e015      	b.n	8012be8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8012bbc:	683b      	ldr	r3, [r7, #0]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d108      	bne.n	8012bd4 <inc_lock+0xf8>
 8012bc2:	4a0c      	ldr	r2, [pc, #48]	; (8012bf4 <inc_lock+0x118>)
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	011b      	lsls	r3, r3, #4
 8012bc8:	4413      	add	r3, r2
 8012bca:	330c      	adds	r3, #12
 8012bcc:	881b      	ldrh	r3, [r3, #0]
 8012bce:	3301      	adds	r3, #1
 8012bd0:	b29a      	uxth	r2, r3
 8012bd2:	e001      	b.n	8012bd8 <inc_lock+0xfc>
 8012bd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012bd8:	4906      	ldr	r1, [pc, #24]	; (8012bf4 <inc_lock+0x118>)
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	011b      	lsls	r3, r3, #4
 8012bde:	440b      	add	r3, r1
 8012be0:	330c      	adds	r3, #12
 8012be2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	3301      	adds	r3, #1
}
 8012be8:	4618      	mov	r0, r3
 8012bea:	3714      	adds	r7, #20
 8012bec:	46bd      	mov	sp, r7
 8012bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf2:	4770      	bx	lr
 8012bf4:	2000084c 	.word	0x2000084c

08012bf8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8012bf8:	b480      	push	{r7}
 8012bfa:	b085      	sub	sp, #20
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	3b01      	subs	r3, #1
 8012c04:	607b      	str	r3, [r7, #4]
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	2b01      	cmp	r3, #1
 8012c0a:	d825      	bhi.n	8012c58 <dec_lock+0x60>
		n = Files[i].ctr;
 8012c0c:	4a17      	ldr	r2, [pc, #92]	; (8012c6c <dec_lock+0x74>)
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	011b      	lsls	r3, r3, #4
 8012c12:	4413      	add	r3, r2
 8012c14:	330c      	adds	r3, #12
 8012c16:	881b      	ldrh	r3, [r3, #0]
 8012c18:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8012c1a:	89fb      	ldrh	r3, [r7, #14]
 8012c1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012c20:	d101      	bne.n	8012c26 <dec_lock+0x2e>
 8012c22:	2300      	movs	r3, #0
 8012c24:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8012c26:	89fb      	ldrh	r3, [r7, #14]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d002      	beq.n	8012c32 <dec_lock+0x3a>
 8012c2c:	89fb      	ldrh	r3, [r7, #14]
 8012c2e:	3b01      	subs	r3, #1
 8012c30:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8012c32:	4a0e      	ldr	r2, [pc, #56]	; (8012c6c <dec_lock+0x74>)
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	011b      	lsls	r3, r3, #4
 8012c38:	4413      	add	r3, r2
 8012c3a:	330c      	adds	r3, #12
 8012c3c:	89fa      	ldrh	r2, [r7, #14]
 8012c3e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8012c40:	89fb      	ldrh	r3, [r7, #14]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d105      	bne.n	8012c52 <dec_lock+0x5a>
 8012c46:	4a09      	ldr	r2, [pc, #36]	; (8012c6c <dec_lock+0x74>)
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	011b      	lsls	r3, r3, #4
 8012c4c:	4413      	add	r3, r2
 8012c4e:	2200      	movs	r2, #0
 8012c50:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8012c52:	2300      	movs	r3, #0
 8012c54:	737b      	strb	r3, [r7, #13]
 8012c56:	e001      	b.n	8012c5c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8012c58:	2302      	movs	r3, #2
 8012c5a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8012c5c:	7b7b      	ldrb	r3, [r7, #13]
}
 8012c5e:	4618      	mov	r0, r3
 8012c60:	3714      	adds	r7, #20
 8012c62:	46bd      	mov	sp, r7
 8012c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c68:	4770      	bx	lr
 8012c6a:	bf00      	nop
 8012c6c:	2000084c 	.word	0x2000084c

08012c70 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8012c70:	b480      	push	{r7}
 8012c72:	b085      	sub	sp, #20
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8012c78:	2300      	movs	r3, #0
 8012c7a:	60fb      	str	r3, [r7, #12]
 8012c7c:	e010      	b.n	8012ca0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8012c7e:	4a0d      	ldr	r2, [pc, #52]	; (8012cb4 <clear_lock+0x44>)
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	011b      	lsls	r3, r3, #4
 8012c84:	4413      	add	r3, r2
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	687a      	ldr	r2, [r7, #4]
 8012c8a:	429a      	cmp	r2, r3
 8012c8c:	d105      	bne.n	8012c9a <clear_lock+0x2a>
 8012c8e:	4a09      	ldr	r2, [pc, #36]	; (8012cb4 <clear_lock+0x44>)
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	011b      	lsls	r3, r3, #4
 8012c94:	4413      	add	r3, r2
 8012c96:	2200      	movs	r2, #0
 8012c98:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	3301      	adds	r3, #1
 8012c9e:	60fb      	str	r3, [r7, #12]
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	2b01      	cmp	r3, #1
 8012ca4:	d9eb      	bls.n	8012c7e <clear_lock+0xe>
	}
}
 8012ca6:	bf00      	nop
 8012ca8:	bf00      	nop
 8012caa:	3714      	adds	r7, #20
 8012cac:	46bd      	mov	sp, r7
 8012cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb2:	4770      	bx	lr
 8012cb4:	2000084c 	.word	0x2000084c

08012cb8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b086      	sub	sp, #24
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	78db      	ldrb	r3, [r3, #3]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d034      	beq.n	8012d36 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cd0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	7858      	ldrb	r0, [r3, #1]
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012cdc:	2301      	movs	r3, #1
 8012cde:	697a      	ldr	r2, [r7, #20]
 8012ce0:	f7ff fd0e 	bl	8012700 <disk_write>
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d002      	beq.n	8012cf0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8012cea:	2301      	movs	r3, #1
 8012cec:	73fb      	strb	r3, [r7, #15]
 8012cee:	e022      	b.n	8012d36 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cfa:	697a      	ldr	r2, [r7, #20]
 8012cfc:	1ad2      	subs	r2, r2, r3
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	69db      	ldr	r3, [r3, #28]
 8012d02:	429a      	cmp	r2, r3
 8012d04:	d217      	bcs.n	8012d36 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	789b      	ldrb	r3, [r3, #2]
 8012d0a:	613b      	str	r3, [r7, #16]
 8012d0c:	e010      	b.n	8012d30 <sync_window+0x78>
					wsect += fs->fsize;
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	69db      	ldr	r3, [r3, #28]
 8012d12:	697a      	ldr	r2, [r7, #20]
 8012d14:	4413      	add	r3, r2
 8012d16:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	7858      	ldrb	r0, [r3, #1]
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012d22:	2301      	movs	r3, #1
 8012d24:	697a      	ldr	r2, [r7, #20]
 8012d26:	f7ff fceb 	bl	8012700 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012d2a:	693b      	ldr	r3, [r7, #16]
 8012d2c:	3b01      	subs	r3, #1
 8012d2e:	613b      	str	r3, [r7, #16]
 8012d30:	693b      	ldr	r3, [r7, #16]
 8012d32:	2b01      	cmp	r3, #1
 8012d34:	d8eb      	bhi.n	8012d0e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8012d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d38:	4618      	mov	r0, r3
 8012d3a:	3718      	adds	r7, #24
 8012d3c:	46bd      	mov	sp, r7
 8012d3e:	bd80      	pop	{r7, pc}

08012d40 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8012d40:	b580      	push	{r7, lr}
 8012d42:	b084      	sub	sp, #16
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	6078      	str	r0, [r7, #4]
 8012d48:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d52:	683a      	ldr	r2, [r7, #0]
 8012d54:	429a      	cmp	r2, r3
 8012d56:	d01b      	beq.n	8012d90 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8012d58:	6878      	ldr	r0, [r7, #4]
 8012d5a:	f7ff ffad 	bl	8012cb8 <sync_window>
 8012d5e:	4603      	mov	r3, r0
 8012d60:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8012d62:	7bfb      	ldrb	r3, [r7, #15]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d113      	bne.n	8012d90 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	7858      	ldrb	r0, [r3, #1]
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012d72:	2301      	movs	r3, #1
 8012d74:	683a      	ldr	r2, [r7, #0]
 8012d76:	f7ff fca3 	bl	80126c0 <disk_read>
 8012d7a:	4603      	mov	r3, r0
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d004      	beq.n	8012d8a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8012d80:	f04f 33ff 	mov.w	r3, #4294967295
 8012d84:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8012d86:	2301      	movs	r3, #1
 8012d88:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	683a      	ldr	r2, [r7, #0]
 8012d8e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8012d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d92:	4618      	mov	r0, r3
 8012d94:	3710      	adds	r7, #16
 8012d96:	46bd      	mov	sp, r7
 8012d98:	bd80      	pop	{r7, pc}
	...

08012d9c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8012d9c:	b580      	push	{r7, lr}
 8012d9e:	b084      	sub	sp, #16
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8012da4:	6878      	ldr	r0, [r7, #4]
 8012da6:	f7ff ff87 	bl	8012cb8 <sync_window>
 8012daa:	4603      	mov	r3, r0
 8012dac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012dae:	7bfb      	ldrb	r3, [r7, #15]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d158      	bne.n	8012e66 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	781b      	ldrb	r3, [r3, #0]
 8012db8:	2b03      	cmp	r3, #3
 8012dba:	d148      	bne.n	8012e4e <sync_fs+0xb2>
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	791b      	ldrb	r3, [r3, #4]
 8012dc0:	2b01      	cmp	r3, #1
 8012dc2:	d144      	bne.n	8012e4e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	3334      	adds	r3, #52	; 0x34
 8012dc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012dcc:	2100      	movs	r1, #0
 8012dce:	4618      	mov	r0, r3
 8012dd0:	f7ff fd77 	bl	80128c2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	3334      	adds	r3, #52	; 0x34
 8012dd8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012ddc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8012de0:	4618      	mov	r0, r3
 8012de2:	f7ff fd06 	bl	80127f2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	3334      	adds	r3, #52	; 0x34
 8012dea:	4921      	ldr	r1, [pc, #132]	; (8012e70 <sync_fs+0xd4>)
 8012dec:	4618      	mov	r0, r3
 8012dee:	f7ff fd1b 	bl	8012828 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	3334      	adds	r3, #52	; 0x34
 8012df6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012dfa:	491e      	ldr	r1, [pc, #120]	; (8012e74 <sync_fs+0xd8>)
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	f7ff fd13 	bl	8012828 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	3334      	adds	r3, #52	; 0x34
 8012e06:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	695b      	ldr	r3, [r3, #20]
 8012e0e:	4619      	mov	r1, r3
 8012e10:	4610      	mov	r0, r2
 8012e12:	f7ff fd09 	bl	8012828 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	3334      	adds	r3, #52	; 0x34
 8012e1a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	691b      	ldr	r3, [r3, #16]
 8012e22:	4619      	mov	r1, r3
 8012e24:	4610      	mov	r0, r2
 8012e26:	f7ff fcff 	bl	8012828 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	6a1b      	ldr	r3, [r3, #32]
 8012e2e:	1c5a      	adds	r2, r3, #1
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	7858      	ldrb	r0, [r3, #1]
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012e42:	2301      	movs	r3, #1
 8012e44:	f7ff fc5c 	bl	8012700 <disk_write>
			fs->fsi_flag = 0;
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	2200      	movs	r2, #0
 8012e4c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	785b      	ldrb	r3, [r3, #1]
 8012e52:	2200      	movs	r2, #0
 8012e54:	2100      	movs	r1, #0
 8012e56:	4618      	mov	r0, r3
 8012e58:	f7ff fc72 	bl	8012740 <disk_ioctl>
 8012e5c:	4603      	mov	r3, r0
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d001      	beq.n	8012e66 <sync_fs+0xca>
 8012e62:	2301      	movs	r3, #1
 8012e64:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8012e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e68:	4618      	mov	r0, r3
 8012e6a:	3710      	adds	r7, #16
 8012e6c:	46bd      	mov	sp, r7
 8012e6e:	bd80      	pop	{r7, pc}
 8012e70:	41615252 	.word	0x41615252
 8012e74:	61417272 	.word	0x61417272

08012e78 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012e78:	b480      	push	{r7}
 8012e7a:	b083      	sub	sp, #12
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	6078      	str	r0, [r7, #4]
 8012e80:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8012e82:	683b      	ldr	r3, [r7, #0]
 8012e84:	3b02      	subs	r3, #2
 8012e86:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	699b      	ldr	r3, [r3, #24]
 8012e8c:	3b02      	subs	r3, #2
 8012e8e:	683a      	ldr	r2, [r7, #0]
 8012e90:	429a      	cmp	r2, r3
 8012e92:	d301      	bcc.n	8012e98 <clust2sect+0x20>
 8012e94:	2300      	movs	r3, #0
 8012e96:	e008      	b.n	8012eaa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	895b      	ldrh	r3, [r3, #10]
 8012e9c:	461a      	mov	r2, r3
 8012e9e:	683b      	ldr	r3, [r7, #0]
 8012ea0:	fb03 f202 	mul.w	r2, r3, r2
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ea8:	4413      	add	r3, r2
}
 8012eaa:	4618      	mov	r0, r3
 8012eac:	370c      	adds	r7, #12
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb4:	4770      	bx	lr

08012eb6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8012eb6:	b580      	push	{r7, lr}
 8012eb8:	b086      	sub	sp, #24
 8012eba:	af00      	add	r7, sp, #0
 8012ebc:	6078      	str	r0, [r7, #4]
 8012ebe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012ec6:	683b      	ldr	r3, [r7, #0]
 8012ec8:	2b01      	cmp	r3, #1
 8012eca:	d904      	bls.n	8012ed6 <get_fat+0x20>
 8012ecc:	693b      	ldr	r3, [r7, #16]
 8012ece:	699b      	ldr	r3, [r3, #24]
 8012ed0:	683a      	ldr	r2, [r7, #0]
 8012ed2:	429a      	cmp	r2, r3
 8012ed4:	d302      	bcc.n	8012edc <get_fat+0x26>
		val = 1;	/* Internal error */
 8012ed6:	2301      	movs	r3, #1
 8012ed8:	617b      	str	r3, [r7, #20]
 8012eda:	e08f      	b.n	8012ffc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012edc:	f04f 33ff 	mov.w	r3, #4294967295
 8012ee0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8012ee2:	693b      	ldr	r3, [r7, #16]
 8012ee4:	781b      	ldrb	r3, [r3, #0]
 8012ee6:	2b03      	cmp	r3, #3
 8012ee8:	d062      	beq.n	8012fb0 <get_fat+0xfa>
 8012eea:	2b03      	cmp	r3, #3
 8012eec:	dc7c      	bgt.n	8012fe8 <get_fat+0x132>
 8012eee:	2b01      	cmp	r3, #1
 8012ef0:	d002      	beq.n	8012ef8 <get_fat+0x42>
 8012ef2:	2b02      	cmp	r3, #2
 8012ef4:	d042      	beq.n	8012f7c <get_fat+0xc6>
 8012ef6:	e077      	b.n	8012fe8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012ef8:	683b      	ldr	r3, [r7, #0]
 8012efa:	60fb      	str	r3, [r7, #12]
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	085b      	lsrs	r3, r3, #1
 8012f00:	68fa      	ldr	r2, [r7, #12]
 8012f02:	4413      	add	r3, r2
 8012f04:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012f06:	693b      	ldr	r3, [r7, #16]
 8012f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	0a5b      	lsrs	r3, r3, #9
 8012f0e:	4413      	add	r3, r2
 8012f10:	4619      	mov	r1, r3
 8012f12:	6938      	ldr	r0, [r7, #16]
 8012f14:	f7ff ff14 	bl	8012d40 <move_window>
 8012f18:	4603      	mov	r3, r0
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d167      	bne.n	8012fee <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	1c5a      	adds	r2, r3, #1
 8012f22:	60fa      	str	r2, [r7, #12]
 8012f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012f28:	693a      	ldr	r2, [r7, #16]
 8012f2a:	4413      	add	r3, r2
 8012f2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012f30:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012f32:	693b      	ldr	r3, [r7, #16]
 8012f34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	0a5b      	lsrs	r3, r3, #9
 8012f3a:	4413      	add	r3, r2
 8012f3c:	4619      	mov	r1, r3
 8012f3e:	6938      	ldr	r0, [r7, #16]
 8012f40:	f7ff fefe 	bl	8012d40 <move_window>
 8012f44:	4603      	mov	r3, r0
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d153      	bne.n	8012ff2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012f50:	693a      	ldr	r2, [r7, #16]
 8012f52:	4413      	add	r3, r2
 8012f54:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012f58:	021b      	lsls	r3, r3, #8
 8012f5a:	461a      	mov	r2, r3
 8012f5c:	68bb      	ldr	r3, [r7, #8]
 8012f5e:	4313      	orrs	r3, r2
 8012f60:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012f62:	683b      	ldr	r3, [r7, #0]
 8012f64:	f003 0301 	and.w	r3, r3, #1
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d002      	beq.n	8012f72 <get_fat+0xbc>
 8012f6c:	68bb      	ldr	r3, [r7, #8]
 8012f6e:	091b      	lsrs	r3, r3, #4
 8012f70:	e002      	b.n	8012f78 <get_fat+0xc2>
 8012f72:	68bb      	ldr	r3, [r7, #8]
 8012f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012f78:	617b      	str	r3, [r7, #20]
			break;
 8012f7a:	e03f      	b.n	8012ffc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012f7c:	693b      	ldr	r3, [r7, #16]
 8012f7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012f80:	683b      	ldr	r3, [r7, #0]
 8012f82:	0a1b      	lsrs	r3, r3, #8
 8012f84:	4413      	add	r3, r2
 8012f86:	4619      	mov	r1, r3
 8012f88:	6938      	ldr	r0, [r7, #16]
 8012f8a:	f7ff fed9 	bl	8012d40 <move_window>
 8012f8e:	4603      	mov	r3, r0
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d130      	bne.n	8012ff6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012f94:	693b      	ldr	r3, [r7, #16]
 8012f96:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012f9a:	683b      	ldr	r3, [r7, #0]
 8012f9c:	005b      	lsls	r3, r3, #1
 8012f9e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012fa2:	4413      	add	r3, r2
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	f7ff fbe9 	bl	801277c <ld_word>
 8012faa:	4603      	mov	r3, r0
 8012fac:	617b      	str	r3, [r7, #20]
			break;
 8012fae:	e025      	b.n	8012ffc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012fb0:	693b      	ldr	r3, [r7, #16]
 8012fb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012fb4:	683b      	ldr	r3, [r7, #0]
 8012fb6:	09db      	lsrs	r3, r3, #7
 8012fb8:	4413      	add	r3, r2
 8012fba:	4619      	mov	r1, r3
 8012fbc:	6938      	ldr	r0, [r7, #16]
 8012fbe:	f7ff febf 	bl	8012d40 <move_window>
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d118      	bne.n	8012ffa <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012fc8:	693b      	ldr	r3, [r7, #16]
 8012fca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	009b      	lsls	r3, r3, #2
 8012fd2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012fd6:	4413      	add	r3, r2
 8012fd8:	4618      	mov	r0, r3
 8012fda:	f7ff fbe7 	bl	80127ac <ld_dword>
 8012fde:	4603      	mov	r3, r0
 8012fe0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012fe4:	617b      	str	r3, [r7, #20]
			break;
 8012fe6:	e009      	b.n	8012ffc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012fe8:	2301      	movs	r3, #1
 8012fea:	617b      	str	r3, [r7, #20]
 8012fec:	e006      	b.n	8012ffc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012fee:	bf00      	nop
 8012ff0:	e004      	b.n	8012ffc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012ff2:	bf00      	nop
 8012ff4:	e002      	b.n	8012ffc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012ff6:	bf00      	nop
 8012ff8:	e000      	b.n	8012ffc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012ffa:	bf00      	nop
		}
	}

	return val;
 8012ffc:	697b      	ldr	r3, [r7, #20]
}
 8012ffe:	4618      	mov	r0, r3
 8013000:	3718      	adds	r7, #24
 8013002:	46bd      	mov	sp, r7
 8013004:	bd80      	pop	{r7, pc}

08013006 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8013006:	b590      	push	{r4, r7, lr}
 8013008:	b089      	sub	sp, #36	; 0x24
 801300a:	af00      	add	r7, sp, #0
 801300c:	60f8      	str	r0, [r7, #12]
 801300e:	60b9      	str	r1, [r7, #8]
 8013010:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8013012:	2302      	movs	r3, #2
 8013014:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8013016:	68bb      	ldr	r3, [r7, #8]
 8013018:	2b01      	cmp	r3, #1
 801301a:	f240 80d2 	bls.w	80131c2 <put_fat+0x1bc>
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	699b      	ldr	r3, [r3, #24]
 8013022:	68ba      	ldr	r2, [r7, #8]
 8013024:	429a      	cmp	r2, r3
 8013026:	f080 80cc 	bcs.w	80131c2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	781b      	ldrb	r3, [r3, #0]
 801302e:	2b03      	cmp	r3, #3
 8013030:	f000 8096 	beq.w	8013160 <put_fat+0x15a>
 8013034:	2b03      	cmp	r3, #3
 8013036:	f300 80cd 	bgt.w	80131d4 <put_fat+0x1ce>
 801303a:	2b01      	cmp	r3, #1
 801303c:	d002      	beq.n	8013044 <put_fat+0x3e>
 801303e:	2b02      	cmp	r3, #2
 8013040:	d06e      	beq.n	8013120 <put_fat+0x11a>
 8013042:	e0c7      	b.n	80131d4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8013044:	68bb      	ldr	r3, [r7, #8]
 8013046:	61bb      	str	r3, [r7, #24]
 8013048:	69bb      	ldr	r3, [r7, #24]
 801304a:	085b      	lsrs	r3, r3, #1
 801304c:	69ba      	ldr	r2, [r7, #24]
 801304e:	4413      	add	r3, r2
 8013050:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013056:	69bb      	ldr	r3, [r7, #24]
 8013058:	0a5b      	lsrs	r3, r3, #9
 801305a:	4413      	add	r3, r2
 801305c:	4619      	mov	r1, r3
 801305e:	68f8      	ldr	r0, [r7, #12]
 8013060:	f7ff fe6e 	bl	8012d40 <move_window>
 8013064:	4603      	mov	r3, r0
 8013066:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013068:	7ffb      	ldrb	r3, [r7, #31]
 801306a:	2b00      	cmp	r3, #0
 801306c:	f040 80ab 	bne.w	80131c6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013076:	69bb      	ldr	r3, [r7, #24]
 8013078:	1c59      	adds	r1, r3, #1
 801307a:	61b9      	str	r1, [r7, #24]
 801307c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013080:	4413      	add	r3, r2
 8013082:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013084:	68bb      	ldr	r3, [r7, #8]
 8013086:	f003 0301 	and.w	r3, r3, #1
 801308a:	2b00      	cmp	r3, #0
 801308c:	d00d      	beq.n	80130aa <put_fat+0xa4>
 801308e:	697b      	ldr	r3, [r7, #20]
 8013090:	781b      	ldrb	r3, [r3, #0]
 8013092:	b25b      	sxtb	r3, r3
 8013094:	f003 030f 	and.w	r3, r3, #15
 8013098:	b25a      	sxtb	r2, r3
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	b2db      	uxtb	r3, r3
 801309e:	011b      	lsls	r3, r3, #4
 80130a0:	b25b      	sxtb	r3, r3
 80130a2:	4313      	orrs	r3, r2
 80130a4:	b25b      	sxtb	r3, r3
 80130a6:	b2db      	uxtb	r3, r3
 80130a8:	e001      	b.n	80130ae <put_fat+0xa8>
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	b2db      	uxtb	r3, r3
 80130ae:	697a      	ldr	r2, [r7, #20]
 80130b0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	2201      	movs	r2, #1
 80130b6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80130bc:	69bb      	ldr	r3, [r7, #24]
 80130be:	0a5b      	lsrs	r3, r3, #9
 80130c0:	4413      	add	r3, r2
 80130c2:	4619      	mov	r1, r3
 80130c4:	68f8      	ldr	r0, [r7, #12]
 80130c6:	f7ff fe3b 	bl	8012d40 <move_window>
 80130ca:	4603      	mov	r3, r0
 80130cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80130ce:	7ffb      	ldrb	r3, [r7, #31]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d17a      	bne.n	80131ca <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80130da:	69bb      	ldr	r3, [r7, #24]
 80130dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80130e0:	4413      	add	r3, r2
 80130e2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80130e4:	68bb      	ldr	r3, [r7, #8]
 80130e6:	f003 0301 	and.w	r3, r3, #1
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d003      	beq.n	80130f6 <put_fat+0xf0>
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	091b      	lsrs	r3, r3, #4
 80130f2:	b2db      	uxtb	r3, r3
 80130f4:	e00e      	b.n	8013114 <put_fat+0x10e>
 80130f6:	697b      	ldr	r3, [r7, #20]
 80130f8:	781b      	ldrb	r3, [r3, #0]
 80130fa:	b25b      	sxtb	r3, r3
 80130fc:	f023 030f 	bic.w	r3, r3, #15
 8013100:	b25a      	sxtb	r2, r3
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	0a1b      	lsrs	r3, r3, #8
 8013106:	b25b      	sxtb	r3, r3
 8013108:	f003 030f 	and.w	r3, r3, #15
 801310c:	b25b      	sxtb	r3, r3
 801310e:	4313      	orrs	r3, r2
 8013110:	b25b      	sxtb	r3, r3
 8013112:	b2db      	uxtb	r3, r3
 8013114:	697a      	ldr	r2, [r7, #20]
 8013116:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	2201      	movs	r2, #1
 801311c:	70da      	strb	r2, [r3, #3]
			break;
 801311e:	e059      	b.n	80131d4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013124:	68bb      	ldr	r3, [r7, #8]
 8013126:	0a1b      	lsrs	r3, r3, #8
 8013128:	4413      	add	r3, r2
 801312a:	4619      	mov	r1, r3
 801312c:	68f8      	ldr	r0, [r7, #12]
 801312e:	f7ff fe07 	bl	8012d40 <move_window>
 8013132:	4603      	mov	r3, r0
 8013134:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013136:	7ffb      	ldrb	r3, [r7, #31]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d148      	bne.n	80131ce <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013142:	68bb      	ldr	r3, [r7, #8]
 8013144:	005b      	lsls	r3, r3, #1
 8013146:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801314a:	4413      	add	r3, r2
 801314c:	687a      	ldr	r2, [r7, #4]
 801314e:	b292      	uxth	r2, r2
 8013150:	4611      	mov	r1, r2
 8013152:	4618      	mov	r0, r3
 8013154:	f7ff fb4d 	bl	80127f2 <st_word>
			fs->wflag = 1;
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	2201      	movs	r2, #1
 801315c:	70da      	strb	r2, [r3, #3]
			break;
 801315e:	e039      	b.n	80131d4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013164:	68bb      	ldr	r3, [r7, #8]
 8013166:	09db      	lsrs	r3, r3, #7
 8013168:	4413      	add	r3, r2
 801316a:	4619      	mov	r1, r3
 801316c:	68f8      	ldr	r0, [r7, #12]
 801316e:	f7ff fde7 	bl	8012d40 <move_window>
 8013172:	4603      	mov	r3, r0
 8013174:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013176:	7ffb      	ldrb	r3, [r7, #31]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d12a      	bne.n	80131d2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013188:	68bb      	ldr	r3, [r7, #8]
 801318a:	009b      	lsls	r3, r3, #2
 801318c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013190:	4413      	add	r3, r2
 8013192:	4618      	mov	r0, r3
 8013194:	f7ff fb0a 	bl	80127ac <ld_dword>
 8013198:	4603      	mov	r3, r0
 801319a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801319e:	4323      	orrs	r3, r4
 80131a0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80131a8:	68bb      	ldr	r3, [r7, #8]
 80131aa:	009b      	lsls	r3, r3, #2
 80131ac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80131b0:	4413      	add	r3, r2
 80131b2:	6879      	ldr	r1, [r7, #4]
 80131b4:	4618      	mov	r0, r3
 80131b6:	f7ff fb37 	bl	8012828 <st_dword>
			fs->wflag = 1;
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	2201      	movs	r2, #1
 80131be:	70da      	strb	r2, [r3, #3]
			break;
 80131c0:	e008      	b.n	80131d4 <put_fat+0x1ce>
		}
	}
 80131c2:	bf00      	nop
 80131c4:	e006      	b.n	80131d4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80131c6:	bf00      	nop
 80131c8:	e004      	b.n	80131d4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80131ca:	bf00      	nop
 80131cc:	e002      	b.n	80131d4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80131ce:	bf00      	nop
 80131d0:	e000      	b.n	80131d4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80131d2:	bf00      	nop
	return res;
 80131d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80131d6:	4618      	mov	r0, r3
 80131d8:	3724      	adds	r7, #36	; 0x24
 80131da:	46bd      	mov	sp, r7
 80131dc:	bd90      	pop	{r4, r7, pc}

080131de <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80131de:	b580      	push	{r7, lr}
 80131e0:	b088      	sub	sp, #32
 80131e2:	af00      	add	r7, sp, #0
 80131e4:	60f8      	str	r0, [r7, #12]
 80131e6:	60b9      	str	r1, [r7, #8]
 80131e8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80131ea:	2300      	movs	r3, #0
 80131ec:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80131f4:	68bb      	ldr	r3, [r7, #8]
 80131f6:	2b01      	cmp	r3, #1
 80131f8:	d904      	bls.n	8013204 <remove_chain+0x26>
 80131fa:	69bb      	ldr	r3, [r7, #24]
 80131fc:	699b      	ldr	r3, [r3, #24]
 80131fe:	68ba      	ldr	r2, [r7, #8]
 8013200:	429a      	cmp	r2, r3
 8013202:	d301      	bcc.n	8013208 <remove_chain+0x2a>
 8013204:	2302      	movs	r3, #2
 8013206:	e04b      	b.n	80132a0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d00c      	beq.n	8013228 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801320e:	f04f 32ff 	mov.w	r2, #4294967295
 8013212:	6879      	ldr	r1, [r7, #4]
 8013214:	69b8      	ldr	r0, [r7, #24]
 8013216:	f7ff fef6 	bl	8013006 <put_fat>
 801321a:	4603      	mov	r3, r0
 801321c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801321e:	7ffb      	ldrb	r3, [r7, #31]
 8013220:	2b00      	cmp	r3, #0
 8013222:	d001      	beq.n	8013228 <remove_chain+0x4a>
 8013224:	7ffb      	ldrb	r3, [r7, #31]
 8013226:	e03b      	b.n	80132a0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8013228:	68b9      	ldr	r1, [r7, #8]
 801322a:	68f8      	ldr	r0, [r7, #12]
 801322c:	f7ff fe43 	bl	8012eb6 <get_fat>
 8013230:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8013232:	697b      	ldr	r3, [r7, #20]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d031      	beq.n	801329c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8013238:	697b      	ldr	r3, [r7, #20]
 801323a:	2b01      	cmp	r3, #1
 801323c:	d101      	bne.n	8013242 <remove_chain+0x64>
 801323e:	2302      	movs	r3, #2
 8013240:	e02e      	b.n	80132a0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013242:	697b      	ldr	r3, [r7, #20]
 8013244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013248:	d101      	bne.n	801324e <remove_chain+0x70>
 801324a:	2301      	movs	r3, #1
 801324c:	e028      	b.n	80132a0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801324e:	2200      	movs	r2, #0
 8013250:	68b9      	ldr	r1, [r7, #8]
 8013252:	69b8      	ldr	r0, [r7, #24]
 8013254:	f7ff fed7 	bl	8013006 <put_fat>
 8013258:	4603      	mov	r3, r0
 801325a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801325c:	7ffb      	ldrb	r3, [r7, #31]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d001      	beq.n	8013266 <remove_chain+0x88>
 8013262:	7ffb      	ldrb	r3, [r7, #31]
 8013264:	e01c      	b.n	80132a0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8013266:	69bb      	ldr	r3, [r7, #24]
 8013268:	695a      	ldr	r2, [r3, #20]
 801326a:	69bb      	ldr	r3, [r7, #24]
 801326c:	699b      	ldr	r3, [r3, #24]
 801326e:	3b02      	subs	r3, #2
 8013270:	429a      	cmp	r2, r3
 8013272:	d20b      	bcs.n	801328c <remove_chain+0xae>
			fs->free_clst++;
 8013274:	69bb      	ldr	r3, [r7, #24]
 8013276:	695b      	ldr	r3, [r3, #20]
 8013278:	1c5a      	adds	r2, r3, #1
 801327a:	69bb      	ldr	r3, [r7, #24]
 801327c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 801327e:	69bb      	ldr	r3, [r7, #24]
 8013280:	791b      	ldrb	r3, [r3, #4]
 8013282:	f043 0301 	orr.w	r3, r3, #1
 8013286:	b2da      	uxtb	r2, r3
 8013288:	69bb      	ldr	r3, [r7, #24]
 801328a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801328c:	697b      	ldr	r3, [r7, #20]
 801328e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8013290:	69bb      	ldr	r3, [r7, #24]
 8013292:	699b      	ldr	r3, [r3, #24]
 8013294:	68ba      	ldr	r2, [r7, #8]
 8013296:	429a      	cmp	r2, r3
 8013298:	d3c6      	bcc.n	8013228 <remove_chain+0x4a>
 801329a:	e000      	b.n	801329e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801329c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801329e:	2300      	movs	r3, #0
}
 80132a0:	4618      	mov	r0, r3
 80132a2:	3720      	adds	r7, #32
 80132a4:	46bd      	mov	sp, r7
 80132a6:	bd80      	pop	{r7, pc}

080132a8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80132a8:	b580      	push	{r7, lr}
 80132aa:	b088      	sub	sp, #32
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6078      	str	r0, [r7, #4]
 80132b0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80132b8:	683b      	ldr	r3, [r7, #0]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d10d      	bne.n	80132da <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80132be:	693b      	ldr	r3, [r7, #16]
 80132c0:	691b      	ldr	r3, [r3, #16]
 80132c2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80132c4:	69bb      	ldr	r3, [r7, #24]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d004      	beq.n	80132d4 <create_chain+0x2c>
 80132ca:	693b      	ldr	r3, [r7, #16]
 80132cc:	699b      	ldr	r3, [r3, #24]
 80132ce:	69ba      	ldr	r2, [r7, #24]
 80132d0:	429a      	cmp	r2, r3
 80132d2:	d31b      	bcc.n	801330c <create_chain+0x64>
 80132d4:	2301      	movs	r3, #1
 80132d6:	61bb      	str	r3, [r7, #24]
 80132d8:	e018      	b.n	801330c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80132da:	6839      	ldr	r1, [r7, #0]
 80132dc:	6878      	ldr	r0, [r7, #4]
 80132de:	f7ff fdea 	bl	8012eb6 <get_fat>
 80132e2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	2b01      	cmp	r3, #1
 80132e8:	d801      	bhi.n	80132ee <create_chain+0x46>
 80132ea:	2301      	movs	r3, #1
 80132ec:	e070      	b.n	80133d0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132f4:	d101      	bne.n	80132fa <create_chain+0x52>
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	e06a      	b.n	80133d0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80132fa:	693b      	ldr	r3, [r7, #16]
 80132fc:	699b      	ldr	r3, [r3, #24]
 80132fe:	68fa      	ldr	r2, [r7, #12]
 8013300:	429a      	cmp	r2, r3
 8013302:	d201      	bcs.n	8013308 <create_chain+0x60>
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	e063      	b.n	80133d0 <create_chain+0x128>
		scl = clst;
 8013308:	683b      	ldr	r3, [r7, #0]
 801330a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801330c:	69bb      	ldr	r3, [r7, #24]
 801330e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8013310:	69fb      	ldr	r3, [r7, #28]
 8013312:	3301      	adds	r3, #1
 8013314:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8013316:	693b      	ldr	r3, [r7, #16]
 8013318:	699b      	ldr	r3, [r3, #24]
 801331a:	69fa      	ldr	r2, [r7, #28]
 801331c:	429a      	cmp	r2, r3
 801331e:	d307      	bcc.n	8013330 <create_chain+0x88>
				ncl = 2;
 8013320:	2302      	movs	r3, #2
 8013322:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8013324:	69fa      	ldr	r2, [r7, #28]
 8013326:	69bb      	ldr	r3, [r7, #24]
 8013328:	429a      	cmp	r2, r3
 801332a:	d901      	bls.n	8013330 <create_chain+0x88>
 801332c:	2300      	movs	r3, #0
 801332e:	e04f      	b.n	80133d0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013330:	69f9      	ldr	r1, [r7, #28]
 8013332:	6878      	ldr	r0, [r7, #4]
 8013334:	f7ff fdbf 	bl	8012eb6 <get_fat>
 8013338:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	2b00      	cmp	r3, #0
 801333e:	d00e      	beq.n	801335e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	2b01      	cmp	r3, #1
 8013344:	d003      	beq.n	801334e <create_chain+0xa6>
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	f1b3 3fff 	cmp.w	r3, #4294967295
 801334c:	d101      	bne.n	8013352 <create_chain+0xaa>
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	e03e      	b.n	80133d0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013352:	69fa      	ldr	r2, [r7, #28]
 8013354:	69bb      	ldr	r3, [r7, #24]
 8013356:	429a      	cmp	r2, r3
 8013358:	d1da      	bne.n	8013310 <create_chain+0x68>
 801335a:	2300      	movs	r3, #0
 801335c:	e038      	b.n	80133d0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801335e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013360:	f04f 32ff 	mov.w	r2, #4294967295
 8013364:	69f9      	ldr	r1, [r7, #28]
 8013366:	6938      	ldr	r0, [r7, #16]
 8013368:	f7ff fe4d 	bl	8013006 <put_fat>
 801336c:	4603      	mov	r3, r0
 801336e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8013370:	7dfb      	ldrb	r3, [r7, #23]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d109      	bne.n	801338a <create_chain+0xe2>
 8013376:	683b      	ldr	r3, [r7, #0]
 8013378:	2b00      	cmp	r3, #0
 801337a:	d006      	beq.n	801338a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801337c:	69fa      	ldr	r2, [r7, #28]
 801337e:	6839      	ldr	r1, [r7, #0]
 8013380:	6938      	ldr	r0, [r7, #16]
 8013382:	f7ff fe40 	bl	8013006 <put_fat>
 8013386:	4603      	mov	r3, r0
 8013388:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801338a:	7dfb      	ldrb	r3, [r7, #23]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d116      	bne.n	80133be <create_chain+0x116>
		fs->last_clst = ncl;
 8013390:	693b      	ldr	r3, [r7, #16]
 8013392:	69fa      	ldr	r2, [r7, #28]
 8013394:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8013396:	693b      	ldr	r3, [r7, #16]
 8013398:	695a      	ldr	r2, [r3, #20]
 801339a:	693b      	ldr	r3, [r7, #16]
 801339c:	699b      	ldr	r3, [r3, #24]
 801339e:	3b02      	subs	r3, #2
 80133a0:	429a      	cmp	r2, r3
 80133a2:	d804      	bhi.n	80133ae <create_chain+0x106>
 80133a4:	693b      	ldr	r3, [r7, #16]
 80133a6:	695b      	ldr	r3, [r3, #20]
 80133a8:	1e5a      	subs	r2, r3, #1
 80133aa:	693b      	ldr	r3, [r7, #16]
 80133ac:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80133ae:	693b      	ldr	r3, [r7, #16]
 80133b0:	791b      	ldrb	r3, [r3, #4]
 80133b2:	f043 0301 	orr.w	r3, r3, #1
 80133b6:	b2da      	uxtb	r2, r3
 80133b8:	693b      	ldr	r3, [r7, #16]
 80133ba:	711a      	strb	r2, [r3, #4]
 80133bc:	e007      	b.n	80133ce <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80133be:	7dfb      	ldrb	r3, [r7, #23]
 80133c0:	2b01      	cmp	r3, #1
 80133c2:	d102      	bne.n	80133ca <create_chain+0x122>
 80133c4:	f04f 33ff 	mov.w	r3, #4294967295
 80133c8:	e000      	b.n	80133cc <create_chain+0x124>
 80133ca:	2301      	movs	r3, #1
 80133cc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80133ce:	69fb      	ldr	r3, [r7, #28]
}
 80133d0:	4618      	mov	r0, r3
 80133d2:	3720      	adds	r7, #32
 80133d4:	46bd      	mov	sp, r7
 80133d6:	bd80      	pop	{r7, pc}

080133d8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80133d8:	b480      	push	{r7}
 80133da:	b087      	sub	sp, #28
 80133dc:	af00      	add	r7, sp, #0
 80133de:	6078      	str	r0, [r7, #4]
 80133e0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133ec:	3304      	adds	r3, #4
 80133ee:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80133f0:	683b      	ldr	r3, [r7, #0]
 80133f2:	0a5b      	lsrs	r3, r3, #9
 80133f4:	68fa      	ldr	r2, [r7, #12]
 80133f6:	8952      	ldrh	r2, [r2, #10]
 80133f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80133fc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80133fe:	693b      	ldr	r3, [r7, #16]
 8013400:	1d1a      	adds	r2, r3, #4
 8013402:	613a      	str	r2, [r7, #16]
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013408:	68bb      	ldr	r3, [r7, #8]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d101      	bne.n	8013412 <clmt_clust+0x3a>
 801340e:	2300      	movs	r3, #0
 8013410:	e010      	b.n	8013434 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8013412:	697a      	ldr	r2, [r7, #20]
 8013414:	68bb      	ldr	r3, [r7, #8]
 8013416:	429a      	cmp	r2, r3
 8013418:	d307      	bcc.n	801342a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801341a:	697a      	ldr	r2, [r7, #20]
 801341c:	68bb      	ldr	r3, [r7, #8]
 801341e:	1ad3      	subs	r3, r2, r3
 8013420:	617b      	str	r3, [r7, #20]
 8013422:	693b      	ldr	r3, [r7, #16]
 8013424:	3304      	adds	r3, #4
 8013426:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013428:	e7e9      	b.n	80133fe <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801342a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801342c:	693b      	ldr	r3, [r7, #16]
 801342e:	681a      	ldr	r2, [r3, #0]
 8013430:	697b      	ldr	r3, [r7, #20]
 8013432:	4413      	add	r3, r2
}
 8013434:	4618      	mov	r0, r3
 8013436:	371c      	adds	r7, #28
 8013438:	46bd      	mov	sp, r7
 801343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801343e:	4770      	bx	lr

08013440 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8013440:	b580      	push	{r7, lr}
 8013442:	b086      	sub	sp, #24
 8013444:	af00      	add	r7, sp, #0
 8013446:	6078      	str	r0, [r7, #4]
 8013448:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8013450:	683b      	ldr	r3, [r7, #0]
 8013452:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013456:	d204      	bcs.n	8013462 <dir_sdi+0x22>
 8013458:	683b      	ldr	r3, [r7, #0]
 801345a:	f003 031f 	and.w	r3, r3, #31
 801345e:	2b00      	cmp	r3, #0
 8013460:	d001      	beq.n	8013466 <dir_sdi+0x26>
		return FR_INT_ERR;
 8013462:	2302      	movs	r3, #2
 8013464:	e063      	b.n	801352e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	683a      	ldr	r2, [r7, #0]
 801346a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	689b      	ldr	r3, [r3, #8]
 8013470:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8013472:	697b      	ldr	r3, [r7, #20]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d106      	bne.n	8013486 <dir_sdi+0x46>
 8013478:	693b      	ldr	r3, [r7, #16]
 801347a:	781b      	ldrb	r3, [r3, #0]
 801347c:	2b02      	cmp	r3, #2
 801347e:	d902      	bls.n	8013486 <dir_sdi+0x46>
		clst = fs->dirbase;
 8013480:	693b      	ldr	r3, [r7, #16]
 8013482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013484:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013486:	697b      	ldr	r3, [r7, #20]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d10c      	bne.n	80134a6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801348c:	683b      	ldr	r3, [r7, #0]
 801348e:	095b      	lsrs	r3, r3, #5
 8013490:	693a      	ldr	r2, [r7, #16]
 8013492:	8912      	ldrh	r2, [r2, #8]
 8013494:	4293      	cmp	r3, r2
 8013496:	d301      	bcc.n	801349c <dir_sdi+0x5c>
 8013498:	2302      	movs	r3, #2
 801349a:	e048      	b.n	801352e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801349c:	693b      	ldr	r3, [r7, #16]
 801349e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	61da      	str	r2, [r3, #28]
 80134a4:	e029      	b.n	80134fa <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80134a6:	693b      	ldr	r3, [r7, #16]
 80134a8:	895b      	ldrh	r3, [r3, #10]
 80134aa:	025b      	lsls	r3, r3, #9
 80134ac:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80134ae:	e019      	b.n	80134e4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	6979      	ldr	r1, [r7, #20]
 80134b4:	4618      	mov	r0, r3
 80134b6:	f7ff fcfe 	bl	8012eb6 <get_fat>
 80134ba:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80134bc:	697b      	ldr	r3, [r7, #20]
 80134be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134c2:	d101      	bne.n	80134c8 <dir_sdi+0x88>
 80134c4:	2301      	movs	r3, #1
 80134c6:	e032      	b.n	801352e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80134c8:	697b      	ldr	r3, [r7, #20]
 80134ca:	2b01      	cmp	r3, #1
 80134cc:	d904      	bls.n	80134d8 <dir_sdi+0x98>
 80134ce:	693b      	ldr	r3, [r7, #16]
 80134d0:	699b      	ldr	r3, [r3, #24]
 80134d2:	697a      	ldr	r2, [r7, #20]
 80134d4:	429a      	cmp	r2, r3
 80134d6:	d301      	bcc.n	80134dc <dir_sdi+0x9c>
 80134d8:	2302      	movs	r3, #2
 80134da:	e028      	b.n	801352e <dir_sdi+0xee>
			ofs -= csz;
 80134dc:	683a      	ldr	r2, [r7, #0]
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	1ad3      	subs	r3, r2, r3
 80134e2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80134e4:	683a      	ldr	r2, [r7, #0]
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	429a      	cmp	r2, r3
 80134ea:	d2e1      	bcs.n	80134b0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80134ec:	6979      	ldr	r1, [r7, #20]
 80134ee:	6938      	ldr	r0, [r7, #16]
 80134f0:	f7ff fcc2 	bl	8012e78 <clust2sect>
 80134f4:	4602      	mov	r2, r0
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	697a      	ldr	r2, [r7, #20]
 80134fe:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	69db      	ldr	r3, [r3, #28]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d101      	bne.n	801350c <dir_sdi+0xcc>
 8013508:	2302      	movs	r3, #2
 801350a:	e010      	b.n	801352e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	69da      	ldr	r2, [r3, #28]
 8013510:	683b      	ldr	r3, [r7, #0]
 8013512:	0a5b      	lsrs	r3, r3, #9
 8013514:	441a      	add	r2, r3
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801351a:	693b      	ldr	r3, [r7, #16]
 801351c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013520:	683b      	ldr	r3, [r7, #0]
 8013522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013526:	441a      	add	r2, r3
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801352c:	2300      	movs	r3, #0
}
 801352e:	4618      	mov	r0, r3
 8013530:	3718      	adds	r7, #24
 8013532:	46bd      	mov	sp, r7
 8013534:	bd80      	pop	{r7, pc}

08013536 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013536:	b580      	push	{r7, lr}
 8013538:	b086      	sub	sp, #24
 801353a:	af00      	add	r7, sp, #0
 801353c:	6078      	str	r0, [r7, #4]
 801353e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	695b      	ldr	r3, [r3, #20]
 801354a:	3320      	adds	r3, #32
 801354c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	69db      	ldr	r3, [r3, #28]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d003      	beq.n	801355e <dir_next+0x28>
 8013556:	68bb      	ldr	r3, [r7, #8]
 8013558:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801355c:	d301      	bcc.n	8013562 <dir_next+0x2c>
 801355e:	2304      	movs	r3, #4
 8013560:	e0aa      	b.n	80136b8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013562:	68bb      	ldr	r3, [r7, #8]
 8013564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013568:	2b00      	cmp	r3, #0
 801356a:	f040 8098 	bne.w	801369e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	69db      	ldr	r3, [r3, #28]
 8013572:	1c5a      	adds	r2, r3, #1
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	699b      	ldr	r3, [r3, #24]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d10b      	bne.n	8013598 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013580:	68bb      	ldr	r3, [r7, #8]
 8013582:	095b      	lsrs	r3, r3, #5
 8013584:	68fa      	ldr	r2, [r7, #12]
 8013586:	8912      	ldrh	r2, [r2, #8]
 8013588:	4293      	cmp	r3, r2
 801358a:	f0c0 8088 	bcc.w	801369e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	2200      	movs	r2, #0
 8013592:	61da      	str	r2, [r3, #28]
 8013594:	2304      	movs	r3, #4
 8013596:	e08f      	b.n	80136b8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013598:	68bb      	ldr	r3, [r7, #8]
 801359a:	0a5b      	lsrs	r3, r3, #9
 801359c:	68fa      	ldr	r2, [r7, #12]
 801359e:	8952      	ldrh	r2, [r2, #10]
 80135a0:	3a01      	subs	r2, #1
 80135a2:	4013      	ands	r3, r2
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d17a      	bne.n	801369e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80135a8:	687a      	ldr	r2, [r7, #4]
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	699b      	ldr	r3, [r3, #24]
 80135ae:	4619      	mov	r1, r3
 80135b0:	4610      	mov	r0, r2
 80135b2:	f7ff fc80 	bl	8012eb6 <get_fat>
 80135b6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80135b8:	697b      	ldr	r3, [r7, #20]
 80135ba:	2b01      	cmp	r3, #1
 80135bc:	d801      	bhi.n	80135c2 <dir_next+0x8c>
 80135be:	2302      	movs	r3, #2
 80135c0:	e07a      	b.n	80136b8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80135c2:	697b      	ldr	r3, [r7, #20]
 80135c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135c8:	d101      	bne.n	80135ce <dir_next+0x98>
 80135ca:	2301      	movs	r3, #1
 80135cc:	e074      	b.n	80136b8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	699b      	ldr	r3, [r3, #24]
 80135d2:	697a      	ldr	r2, [r7, #20]
 80135d4:	429a      	cmp	r2, r3
 80135d6:	d358      	bcc.n	801368a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80135d8:	683b      	ldr	r3, [r7, #0]
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d104      	bne.n	80135e8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	2200      	movs	r2, #0
 80135e2:	61da      	str	r2, [r3, #28]
 80135e4:	2304      	movs	r3, #4
 80135e6:	e067      	b.n	80136b8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80135e8:	687a      	ldr	r2, [r7, #4]
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	699b      	ldr	r3, [r3, #24]
 80135ee:	4619      	mov	r1, r3
 80135f0:	4610      	mov	r0, r2
 80135f2:	f7ff fe59 	bl	80132a8 <create_chain>
 80135f6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80135f8:	697b      	ldr	r3, [r7, #20]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d101      	bne.n	8013602 <dir_next+0xcc>
 80135fe:	2307      	movs	r3, #7
 8013600:	e05a      	b.n	80136b8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013602:	697b      	ldr	r3, [r7, #20]
 8013604:	2b01      	cmp	r3, #1
 8013606:	d101      	bne.n	801360c <dir_next+0xd6>
 8013608:	2302      	movs	r3, #2
 801360a:	e055      	b.n	80136b8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801360c:	697b      	ldr	r3, [r7, #20]
 801360e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013612:	d101      	bne.n	8013618 <dir_next+0xe2>
 8013614:	2301      	movs	r3, #1
 8013616:	e04f      	b.n	80136b8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8013618:	68f8      	ldr	r0, [r7, #12]
 801361a:	f7ff fb4d 	bl	8012cb8 <sync_window>
 801361e:	4603      	mov	r3, r0
 8013620:	2b00      	cmp	r3, #0
 8013622:	d001      	beq.n	8013628 <dir_next+0xf2>
 8013624:	2301      	movs	r3, #1
 8013626:	e047      	b.n	80136b8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	3334      	adds	r3, #52	; 0x34
 801362c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013630:	2100      	movs	r1, #0
 8013632:	4618      	mov	r0, r3
 8013634:	f7ff f945 	bl	80128c2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013638:	2300      	movs	r3, #0
 801363a:	613b      	str	r3, [r7, #16]
 801363c:	6979      	ldr	r1, [r7, #20]
 801363e:	68f8      	ldr	r0, [r7, #12]
 8013640:	f7ff fc1a 	bl	8012e78 <clust2sect>
 8013644:	4602      	mov	r2, r0
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	631a      	str	r2, [r3, #48]	; 0x30
 801364a:	e012      	b.n	8013672 <dir_next+0x13c>
						fs->wflag = 1;
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	2201      	movs	r2, #1
 8013650:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013652:	68f8      	ldr	r0, [r7, #12]
 8013654:	f7ff fb30 	bl	8012cb8 <sync_window>
 8013658:	4603      	mov	r3, r0
 801365a:	2b00      	cmp	r3, #0
 801365c:	d001      	beq.n	8013662 <dir_next+0x12c>
 801365e:	2301      	movs	r3, #1
 8013660:	e02a      	b.n	80136b8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013662:	693b      	ldr	r3, [r7, #16]
 8013664:	3301      	adds	r3, #1
 8013666:	613b      	str	r3, [r7, #16]
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801366c:	1c5a      	adds	r2, r3, #1
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	631a      	str	r2, [r3, #48]	; 0x30
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	895b      	ldrh	r3, [r3, #10]
 8013676:	461a      	mov	r2, r3
 8013678:	693b      	ldr	r3, [r7, #16]
 801367a:	4293      	cmp	r3, r2
 801367c:	d3e6      	bcc.n	801364c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013682:	693b      	ldr	r3, [r7, #16]
 8013684:	1ad2      	subs	r2, r2, r3
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	697a      	ldr	r2, [r7, #20]
 801368e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8013690:	6979      	ldr	r1, [r7, #20]
 8013692:	68f8      	ldr	r0, [r7, #12]
 8013694:	f7ff fbf0 	bl	8012e78 <clust2sect>
 8013698:	4602      	mov	r2, r0
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	68ba      	ldr	r2, [r7, #8]
 80136a2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80136aa:	68bb      	ldr	r3, [r7, #8]
 80136ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80136b0:	441a      	add	r2, r3
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80136b6:	2300      	movs	r3, #0
}
 80136b8:	4618      	mov	r0, r3
 80136ba:	3718      	adds	r7, #24
 80136bc:	46bd      	mov	sp, r7
 80136be:	bd80      	pop	{r7, pc}

080136c0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b086      	sub	sp, #24
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	6078      	str	r0, [r7, #4]
 80136c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80136d0:	2100      	movs	r1, #0
 80136d2:	6878      	ldr	r0, [r7, #4]
 80136d4:	f7ff feb4 	bl	8013440 <dir_sdi>
 80136d8:	4603      	mov	r3, r0
 80136da:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80136dc:	7dfb      	ldrb	r3, [r7, #23]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d12b      	bne.n	801373a <dir_alloc+0x7a>
		n = 0;
 80136e2:	2300      	movs	r3, #0
 80136e4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	69db      	ldr	r3, [r3, #28]
 80136ea:	4619      	mov	r1, r3
 80136ec:	68f8      	ldr	r0, [r7, #12]
 80136ee:	f7ff fb27 	bl	8012d40 <move_window>
 80136f2:	4603      	mov	r3, r0
 80136f4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80136f6:	7dfb      	ldrb	r3, [r7, #23]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d11d      	bne.n	8013738 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	6a1b      	ldr	r3, [r3, #32]
 8013700:	781b      	ldrb	r3, [r3, #0]
 8013702:	2be5      	cmp	r3, #229	; 0xe5
 8013704:	d004      	beq.n	8013710 <dir_alloc+0x50>
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	6a1b      	ldr	r3, [r3, #32]
 801370a:	781b      	ldrb	r3, [r3, #0]
 801370c:	2b00      	cmp	r3, #0
 801370e:	d107      	bne.n	8013720 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013710:	693b      	ldr	r3, [r7, #16]
 8013712:	3301      	adds	r3, #1
 8013714:	613b      	str	r3, [r7, #16]
 8013716:	693a      	ldr	r2, [r7, #16]
 8013718:	683b      	ldr	r3, [r7, #0]
 801371a:	429a      	cmp	r2, r3
 801371c:	d102      	bne.n	8013724 <dir_alloc+0x64>
 801371e:	e00c      	b.n	801373a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013720:	2300      	movs	r3, #0
 8013722:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013724:	2101      	movs	r1, #1
 8013726:	6878      	ldr	r0, [r7, #4]
 8013728:	f7ff ff05 	bl	8013536 <dir_next>
 801372c:	4603      	mov	r3, r0
 801372e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013730:	7dfb      	ldrb	r3, [r7, #23]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d0d7      	beq.n	80136e6 <dir_alloc+0x26>
 8013736:	e000      	b.n	801373a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013738:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801373a:	7dfb      	ldrb	r3, [r7, #23]
 801373c:	2b04      	cmp	r3, #4
 801373e:	d101      	bne.n	8013744 <dir_alloc+0x84>
 8013740:	2307      	movs	r3, #7
 8013742:	75fb      	strb	r3, [r7, #23]
	return res;
 8013744:	7dfb      	ldrb	r3, [r7, #23]
}
 8013746:	4618      	mov	r0, r3
 8013748:	3718      	adds	r7, #24
 801374a:	46bd      	mov	sp, r7
 801374c:	bd80      	pop	{r7, pc}

0801374e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801374e:	b580      	push	{r7, lr}
 8013750:	b084      	sub	sp, #16
 8013752:	af00      	add	r7, sp, #0
 8013754:	6078      	str	r0, [r7, #4]
 8013756:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013758:	683b      	ldr	r3, [r7, #0]
 801375a:	331a      	adds	r3, #26
 801375c:	4618      	mov	r0, r3
 801375e:	f7ff f80d 	bl	801277c <ld_word>
 8013762:	4603      	mov	r3, r0
 8013764:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	781b      	ldrb	r3, [r3, #0]
 801376a:	2b03      	cmp	r3, #3
 801376c:	d109      	bne.n	8013782 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801376e:	683b      	ldr	r3, [r7, #0]
 8013770:	3314      	adds	r3, #20
 8013772:	4618      	mov	r0, r3
 8013774:	f7ff f802 	bl	801277c <ld_word>
 8013778:	4603      	mov	r3, r0
 801377a:	041b      	lsls	r3, r3, #16
 801377c:	68fa      	ldr	r2, [r7, #12]
 801377e:	4313      	orrs	r3, r2
 8013780:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8013782:	68fb      	ldr	r3, [r7, #12]
}
 8013784:	4618      	mov	r0, r3
 8013786:	3710      	adds	r7, #16
 8013788:	46bd      	mov	sp, r7
 801378a:	bd80      	pop	{r7, pc}

0801378c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801378c:	b580      	push	{r7, lr}
 801378e:	b084      	sub	sp, #16
 8013790:	af00      	add	r7, sp, #0
 8013792:	60f8      	str	r0, [r7, #12]
 8013794:	60b9      	str	r1, [r7, #8]
 8013796:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8013798:	68bb      	ldr	r3, [r7, #8]
 801379a:	331a      	adds	r3, #26
 801379c:	687a      	ldr	r2, [r7, #4]
 801379e:	b292      	uxth	r2, r2
 80137a0:	4611      	mov	r1, r2
 80137a2:	4618      	mov	r0, r3
 80137a4:	f7ff f825 	bl	80127f2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	781b      	ldrb	r3, [r3, #0]
 80137ac:	2b03      	cmp	r3, #3
 80137ae:	d109      	bne.n	80137c4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80137b0:	68bb      	ldr	r3, [r7, #8]
 80137b2:	f103 0214 	add.w	r2, r3, #20
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	0c1b      	lsrs	r3, r3, #16
 80137ba:	b29b      	uxth	r3, r3
 80137bc:	4619      	mov	r1, r3
 80137be:	4610      	mov	r0, r2
 80137c0:	f7ff f817 	bl	80127f2 <st_word>
	}
}
 80137c4:	bf00      	nop
 80137c6:	3710      	adds	r7, #16
 80137c8:	46bd      	mov	sp, r7
 80137ca:	bd80      	pop	{r7, pc}

080137cc <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80137cc:	b580      	push	{r7, lr}
 80137ce:	b086      	sub	sp, #24
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	6078      	str	r0, [r7, #4]
 80137d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80137d6:	2304      	movs	r3, #4
 80137d8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80137e0:	e03c      	b.n	801385c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	69db      	ldr	r3, [r3, #28]
 80137e6:	4619      	mov	r1, r3
 80137e8:	6938      	ldr	r0, [r7, #16]
 80137ea:	f7ff faa9 	bl	8012d40 <move_window>
 80137ee:	4603      	mov	r3, r0
 80137f0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80137f2:	7dfb      	ldrb	r3, [r7, #23]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d136      	bne.n	8013866 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	6a1b      	ldr	r3, [r3, #32]
 80137fc:	781b      	ldrb	r3, [r3, #0]
 80137fe:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8013800:	7bfb      	ldrb	r3, [r7, #15]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d102      	bne.n	801380c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8013806:	2304      	movs	r3, #4
 8013808:	75fb      	strb	r3, [r7, #23]
 801380a:	e031      	b.n	8013870 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	6a1b      	ldr	r3, [r3, #32]
 8013810:	330b      	adds	r3, #11
 8013812:	781b      	ldrb	r3, [r3, #0]
 8013814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013818:	73bb      	strb	r3, [r7, #14]
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	7bba      	ldrb	r2, [r7, #14]
 801381e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8013820:	7bfb      	ldrb	r3, [r7, #15]
 8013822:	2be5      	cmp	r3, #229	; 0xe5
 8013824:	d011      	beq.n	801384a <dir_read+0x7e>
 8013826:	7bfb      	ldrb	r3, [r7, #15]
 8013828:	2b2e      	cmp	r3, #46	; 0x2e
 801382a:	d00e      	beq.n	801384a <dir_read+0x7e>
 801382c:	7bbb      	ldrb	r3, [r7, #14]
 801382e:	2b0f      	cmp	r3, #15
 8013830:	d00b      	beq.n	801384a <dir_read+0x7e>
 8013832:	7bbb      	ldrb	r3, [r7, #14]
 8013834:	f023 0320 	bic.w	r3, r3, #32
 8013838:	2b08      	cmp	r3, #8
 801383a:	bf0c      	ite	eq
 801383c:	2301      	moveq	r3, #1
 801383e:	2300      	movne	r3, #0
 8013840:	b2db      	uxtb	r3, r3
 8013842:	461a      	mov	r2, r3
 8013844:	683b      	ldr	r3, [r7, #0]
 8013846:	4293      	cmp	r3, r2
 8013848:	d00f      	beq.n	801386a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801384a:	2100      	movs	r1, #0
 801384c:	6878      	ldr	r0, [r7, #4]
 801384e:	f7ff fe72 	bl	8013536 <dir_next>
 8013852:	4603      	mov	r3, r0
 8013854:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013856:	7dfb      	ldrb	r3, [r7, #23]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d108      	bne.n	801386e <dir_read+0xa2>
	while (dp->sect) {
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	69db      	ldr	r3, [r3, #28]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d1be      	bne.n	80137e2 <dir_read+0x16>
 8013864:	e004      	b.n	8013870 <dir_read+0xa4>
		if (res != FR_OK) break;
 8013866:	bf00      	nop
 8013868:	e002      	b.n	8013870 <dir_read+0xa4>
				break;
 801386a:	bf00      	nop
 801386c:	e000      	b.n	8013870 <dir_read+0xa4>
		if (res != FR_OK) break;
 801386e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8013870:	7dfb      	ldrb	r3, [r7, #23]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d002      	beq.n	801387c <dir_read+0xb0>
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	2200      	movs	r2, #0
 801387a:	61da      	str	r2, [r3, #28]
	return res;
 801387c:	7dfb      	ldrb	r3, [r7, #23]
}
 801387e:	4618      	mov	r0, r3
 8013880:	3718      	adds	r7, #24
 8013882:	46bd      	mov	sp, r7
 8013884:	bd80      	pop	{r7, pc}

08013886 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8013886:	b580      	push	{r7, lr}
 8013888:	b086      	sub	sp, #24
 801388a:	af00      	add	r7, sp, #0
 801388c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8013894:	2100      	movs	r1, #0
 8013896:	6878      	ldr	r0, [r7, #4]
 8013898:	f7ff fdd2 	bl	8013440 <dir_sdi>
 801389c:	4603      	mov	r3, r0
 801389e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80138a0:	7dfb      	ldrb	r3, [r7, #23]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d001      	beq.n	80138aa <dir_find+0x24>
 80138a6:	7dfb      	ldrb	r3, [r7, #23]
 80138a8:	e03e      	b.n	8013928 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	69db      	ldr	r3, [r3, #28]
 80138ae:	4619      	mov	r1, r3
 80138b0:	6938      	ldr	r0, [r7, #16]
 80138b2:	f7ff fa45 	bl	8012d40 <move_window>
 80138b6:	4603      	mov	r3, r0
 80138b8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80138ba:	7dfb      	ldrb	r3, [r7, #23]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d12f      	bne.n	8013920 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	6a1b      	ldr	r3, [r3, #32]
 80138c4:	781b      	ldrb	r3, [r3, #0]
 80138c6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80138c8:	7bfb      	ldrb	r3, [r7, #15]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d102      	bne.n	80138d4 <dir_find+0x4e>
 80138ce:	2304      	movs	r3, #4
 80138d0:	75fb      	strb	r3, [r7, #23]
 80138d2:	e028      	b.n	8013926 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	6a1b      	ldr	r3, [r3, #32]
 80138d8:	330b      	adds	r3, #11
 80138da:	781b      	ldrb	r3, [r3, #0]
 80138dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80138e0:	b2da      	uxtb	r2, r3
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	6a1b      	ldr	r3, [r3, #32]
 80138ea:	330b      	adds	r3, #11
 80138ec:	781b      	ldrb	r3, [r3, #0]
 80138ee:	f003 0308 	and.w	r3, r3, #8
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d10a      	bne.n	801390c <dir_find+0x86>
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	6a18      	ldr	r0, [r3, #32]
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	3324      	adds	r3, #36	; 0x24
 80138fe:	220b      	movs	r2, #11
 8013900:	4619      	mov	r1, r3
 8013902:	f7fe fff9 	bl	80128f8 <mem_cmp>
 8013906:	4603      	mov	r3, r0
 8013908:	2b00      	cmp	r3, #0
 801390a:	d00b      	beq.n	8013924 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801390c:	2100      	movs	r1, #0
 801390e:	6878      	ldr	r0, [r7, #4]
 8013910:	f7ff fe11 	bl	8013536 <dir_next>
 8013914:	4603      	mov	r3, r0
 8013916:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8013918:	7dfb      	ldrb	r3, [r7, #23]
 801391a:	2b00      	cmp	r3, #0
 801391c:	d0c5      	beq.n	80138aa <dir_find+0x24>
 801391e:	e002      	b.n	8013926 <dir_find+0xa0>
		if (res != FR_OK) break;
 8013920:	bf00      	nop
 8013922:	e000      	b.n	8013926 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013924:	bf00      	nop

	return res;
 8013926:	7dfb      	ldrb	r3, [r7, #23]
}
 8013928:	4618      	mov	r0, r3
 801392a:	3718      	adds	r7, #24
 801392c:	46bd      	mov	sp, r7
 801392e:	bd80      	pop	{r7, pc}

08013930 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8013930:	b580      	push	{r7, lr}
 8013932:	b084      	sub	sp, #16
 8013934:	af00      	add	r7, sp, #0
 8013936:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801393e:	2101      	movs	r1, #1
 8013940:	6878      	ldr	r0, [r7, #4]
 8013942:	f7ff febd 	bl	80136c0 <dir_alloc>
 8013946:	4603      	mov	r3, r0
 8013948:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801394a:	7bfb      	ldrb	r3, [r7, #15]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d11c      	bne.n	801398a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	69db      	ldr	r3, [r3, #28]
 8013954:	4619      	mov	r1, r3
 8013956:	68b8      	ldr	r0, [r7, #8]
 8013958:	f7ff f9f2 	bl	8012d40 <move_window>
 801395c:	4603      	mov	r3, r0
 801395e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013960:	7bfb      	ldrb	r3, [r7, #15]
 8013962:	2b00      	cmp	r3, #0
 8013964:	d111      	bne.n	801398a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	6a1b      	ldr	r3, [r3, #32]
 801396a:	2220      	movs	r2, #32
 801396c:	2100      	movs	r1, #0
 801396e:	4618      	mov	r0, r3
 8013970:	f7fe ffa7 	bl	80128c2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	6a18      	ldr	r0, [r3, #32]
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	3324      	adds	r3, #36	; 0x24
 801397c:	220b      	movs	r2, #11
 801397e:	4619      	mov	r1, r3
 8013980:	f7fe ff7e 	bl	8012880 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8013984:	68bb      	ldr	r3, [r7, #8]
 8013986:	2201      	movs	r2, #1
 8013988:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801398a:	7bfb      	ldrb	r3, [r7, #15]
}
 801398c:	4618      	mov	r0, r3
 801398e:	3710      	adds	r7, #16
 8013990:	46bd      	mov	sp, r7
 8013992:	bd80      	pop	{r7, pc}

08013994 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8013994:	b580      	push	{r7, lr}
 8013996:	b086      	sub	sp, #24
 8013998:	af00      	add	r7, sp, #0
 801399a:	6078      	str	r0, [r7, #4]
 801399c:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 801399e:	683b      	ldr	r3, [r7, #0]
 80139a0:	2200      	movs	r2, #0
 80139a2:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	69db      	ldr	r3, [r3, #28]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d04e      	beq.n	8013a4a <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80139ac:	2300      	movs	r3, #0
 80139ae:	613b      	str	r3, [r7, #16]
 80139b0:	693b      	ldr	r3, [r7, #16]
 80139b2:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80139b4:	e021      	b.n	80139fa <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	6a1a      	ldr	r2, [r3, #32]
 80139ba:	697b      	ldr	r3, [r7, #20]
 80139bc:	1c59      	adds	r1, r3, #1
 80139be:	6179      	str	r1, [r7, #20]
 80139c0:	4413      	add	r3, r2
 80139c2:	781b      	ldrb	r3, [r3, #0]
 80139c4:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80139c6:	7bfb      	ldrb	r3, [r7, #15]
 80139c8:	2b20      	cmp	r3, #32
 80139ca:	d100      	bne.n	80139ce <get_fileinfo+0x3a>
 80139cc:	e015      	b.n	80139fa <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80139ce:	7bfb      	ldrb	r3, [r7, #15]
 80139d0:	2b05      	cmp	r3, #5
 80139d2:	d101      	bne.n	80139d8 <get_fileinfo+0x44>
 80139d4:	23e5      	movs	r3, #229	; 0xe5
 80139d6:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80139d8:	697b      	ldr	r3, [r7, #20]
 80139da:	2b09      	cmp	r3, #9
 80139dc:	d106      	bne.n	80139ec <get_fileinfo+0x58>
 80139de:	693b      	ldr	r3, [r7, #16]
 80139e0:	1c5a      	adds	r2, r3, #1
 80139e2:	613a      	str	r2, [r7, #16]
 80139e4:	683a      	ldr	r2, [r7, #0]
 80139e6:	4413      	add	r3, r2
 80139e8:	222e      	movs	r2, #46	; 0x2e
 80139ea:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80139ec:	693b      	ldr	r3, [r7, #16]
 80139ee:	1c5a      	adds	r2, r3, #1
 80139f0:	613a      	str	r2, [r7, #16]
 80139f2:	683a      	ldr	r2, [r7, #0]
 80139f4:	4413      	add	r3, r2
 80139f6:	7bfa      	ldrb	r2, [r7, #15]
 80139f8:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 80139fa:	697b      	ldr	r3, [r7, #20]
 80139fc:	2b0a      	cmp	r3, #10
 80139fe:	d9da      	bls.n	80139b6 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8013a00:	683a      	ldr	r2, [r7, #0]
 8013a02:	693b      	ldr	r3, [r7, #16]
 8013a04:	4413      	add	r3, r2
 8013a06:	3309      	adds	r3, #9
 8013a08:	2200      	movs	r2, #0
 8013a0a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	6a1b      	ldr	r3, [r3, #32]
 8013a10:	7ada      	ldrb	r2, [r3, #11]
 8013a12:	683b      	ldr	r3, [r7, #0]
 8013a14:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	6a1b      	ldr	r3, [r3, #32]
 8013a1a:	331c      	adds	r3, #28
 8013a1c:	4618      	mov	r0, r3
 8013a1e:	f7fe fec5 	bl	80127ac <ld_dword>
 8013a22:	4602      	mov	r2, r0
 8013a24:	683b      	ldr	r3, [r7, #0]
 8013a26:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	6a1b      	ldr	r3, [r3, #32]
 8013a2c:	3316      	adds	r3, #22
 8013a2e:	4618      	mov	r0, r3
 8013a30:	f7fe febc 	bl	80127ac <ld_dword>
 8013a34:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8013a36:	68bb      	ldr	r3, [r7, #8]
 8013a38:	b29a      	uxth	r2, r3
 8013a3a:	683b      	ldr	r3, [r7, #0]
 8013a3c:	80da      	strh	r2, [r3, #6]
 8013a3e:	68bb      	ldr	r3, [r7, #8]
 8013a40:	0c1b      	lsrs	r3, r3, #16
 8013a42:	b29a      	uxth	r2, r3
 8013a44:	683b      	ldr	r3, [r7, #0]
 8013a46:	809a      	strh	r2, [r3, #4]
 8013a48:	e000      	b.n	8013a4c <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8013a4a:	bf00      	nop
}
 8013a4c:	3718      	adds	r7, #24
 8013a4e:	46bd      	mov	sp, r7
 8013a50:	bd80      	pop	{r7, pc}
	...

08013a54 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013a54:	b580      	push	{r7, lr}
 8013a56:	b088      	sub	sp, #32
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	6078      	str	r0, [r7, #4]
 8013a5c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8013a5e:	683b      	ldr	r3, [r7, #0]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	60fb      	str	r3, [r7, #12]
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	3324      	adds	r3, #36	; 0x24
 8013a68:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8013a6a:	220b      	movs	r2, #11
 8013a6c:	2120      	movs	r1, #32
 8013a6e:	68b8      	ldr	r0, [r7, #8]
 8013a70:	f7fe ff27 	bl	80128c2 <mem_set>
	si = i = 0; ni = 8;
 8013a74:	2300      	movs	r3, #0
 8013a76:	613b      	str	r3, [r7, #16]
 8013a78:	693b      	ldr	r3, [r7, #16]
 8013a7a:	61fb      	str	r3, [r7, #28]
 8013a7c:	2308      	movs	r3, #8
 8013a7e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8013a80:	69fb      	ldr	r3, [r7, #28]
 8013a82:	1c5a      	adds	r2, r3, #1
 8013a84:	61fa      	str	r2, [r7, #28]
 8013a86:	68fa      	ldr	r2, [r7, #12]
 8013a88:	4413      	add	r3, r2
 8013a8a:	781b      	ldrb	r3, [r3, #0]
 8013a8c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8013a8e:	7efb      	ldrb	r3, [r7, #27]
 8013a90:	2b20      	cmp	r3, #32
 8013a92:	d94e      	bls.n	8013b32 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8013a94:	7efb      	ldrb	r3, [r7, #27]
 8013a96:	2b2f      	cmp	r3, #47	; 0x2f
 8013a98:	d006      	beq.n	8013aa8 <create_name+0x54>
 8013a9a:	7efb      	ldrb	r3, [r7, #27]
 8013a9c:	2b5c      	cmp	r3, #92	; 0x5c
 8013a9e:	d110      	bne.n	8013ac2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8013aa0:	e002      	b.n	8013aa8 <create_name+0x54>
 8013aa2:	69fb      	ldr	r3, [r7, #28]
 8013aa4:	3301      	adds	r3, #1
 8013aa6:	61fb      	str	r3, [r7, #28]
 8013aa8:	68fa      	ldr	r2, [r7, #12]
 8013aaa:	69fb      	ldr	r3, [r7, #28]
 8013aac:	4413      	add	r3, r2
 8013aae:	781b      	ldrb	r3, [r3, #0]
 8013ab0:	2b2f      	cmp	r3, #47	; 0x2f
 8013ab2:	d0f6      	beq.n	8013aa2 <create_name+0x4e>
 8013ab4:	68fa      	ldr	r2, [r7, #12]
 8013ab6:	69fb      	ldr	r3, [r7, #28]
 8013ab8:	4413      	add	r3, r2
 8013aba:	781b      	ldrb	r3, [r3, #0]
 8013abc:	2b5c      	cmp	r3, #92	; 0x5c
 8013abe:	d0f0      	beq.n	8013aa2 <create_name+0x4e>
			break;
 8013ac0:	e038      	b.n	8013b34 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8013ac2:	7efb      	ldrb	r3, [r7, #27]
 8013ac4:	2b2e      	cmp	r3, #46	; 0x2e
 8013ac6:	d003      	beq.n	8013ad0 <create_name+0x7c>
 8013ac8:	693a      	ldr	r2, [r7, #16]
 8013aca:	697b      	ldr	r3, [r7, #20]
 8013acc:	429a      	cmp	r2, r3
 8013ace:	d30c      	bcc.n	8013aea <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8013ad0:	697b      	ldr	r3, [r7, #20]
 8013ad2:	2b0b      	cmp	r3, #11
 8013ad4:	d002      	beq.n	8013adc <create_name+0x88>
 8013ad6:	7efb      	ldrb	r3, [r7, #27]
 8013ad8:	2b2e      	cmp	r3, #46	; 0x2e
 8013ada:	d001      	beq.n	8013ae0 <create_name+0x8c>
 8013adc:	2306      	movs	r3, #6
 8013ade:	e044      	b.n	8013b6a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8013ae0:	2308      	movs	r3, #8
 8013ae2:	613b      	str	r3, [r7, #16]
 8013ae4:	230b      	movs	r3, #11
 8013ae6:	617b      	str	r3, [r7, #20]
			continue;
 8013ae8:	e022      	b.n	8013b30 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8013aea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	da04      	bge.n	8013afc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8013af2:	7efb      	ldrb	r3, [r7, #27]
 8013af4:	3b80      	subs	r3, #128	; 0x80
 8013af6:	4a1f      	ldr	r2, [pc, #124]	; (8013b74 <create_name+0x120>)
 8013af8:	5cd3      	ldrb	r3, [r2, r3]
 8013afa:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8013afc:	7efb      	ldrb	r3, [r7, #27]
 8013afe:	4619      	mov	r1, r3
 8013b00:	481d      	ldr	r0, [pc, #116]	; (8013b78 <create_name+0x124>)
 8013b02:	f7fe ff20 	bl	8012946 <chk_chr>
 8013b06:	4603      	mov	r3, r0
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d001      	beq.n	8013b10 <create_name+0xbc>
 8013b0c:	2306      	movs	r3, #6
 8013b0e:	e02c      	b.n	8013b6a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8013b10:	7efb      	ldrb	r3, [r7, #27]
 8013b12:	2b60      	cmp	r3, #96	; 0x60
 8013b14:	d905      	bls.n	8013b22 <create_name+0xce>
 8013b16:	7efb      	ldrb	r3, [r7, #27]
 8013b18:	2b7a      	cmp	r3, #122	; 0x7a
 8013b1a:	d802      	bhi.n	8013b22 <create_name+0xce>
 8013b1c:	7efb      	ldrb	r3, [r7, #27]
 8013b1e:	3b20      	subs	r3, #32
 8013b20:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8013b22:	693b      	ldr	r3, [r7, #16]
 8013b24:	1c5a      	adds	r2, r3, #1
 8013b26:	613a      	str	r2, [r7, #16]
 8013b28:	68ba      	ldr	r2, [r7, #8]
 8013b2a:	4413      	add	r3, r2
 8013b2c:	7efa      	ldrb	r2, [r7, #27]
 8013b2e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8013b30:	e7a6      	b.n	8013a80 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8013b32:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8013b34:	68fa      	ldr	r2, [r7, #12]
 8013b36:	69fb      	ldr	r3, [r7, #28]
 8013b38:	441a      	add	r2, r3
 8013b3a:	683b      	ldr	r3, [r7, #0]
 8013b3c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8013b3e:	693b      	ldr	r3, [r7, #16]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d101      	bne.n	8013b48 <create_name+0xf4>
 8013b44:	2306      	movs	r3, #6
 8013b46:	e010      	b.n	8013b6a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013b48:	68bb      	ldr	r3, [r7, #8]
 8013b4a:	781b      	ldrb	r3, [r3, #0]
 8013b4c:	2be5      	cmp	r3, #229	; 0xe5
 8013b4e:	d102      	bne.n	8013b56 <create_name+0x102>
 8013b50:	68bb      	ldr	r3, [r7, #8]
 8013b52:	2205      	movs	r2, #5
 8013b54:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8013b56:	7efb      	ldrb	r3, [r7, #27]
 8013b58:	2b20      	cmp	r3, #32
 8013b5a:	d801      	bhi.n	8013b60 <create_name+0x10c>
 8013b5c:	2204      	movs	r2, #4
 8013b5e:	e000      	b.n	8013b62 <create_name+0x10e>
 8013b60:	2200      	movs	r2, #0
 8013b62:	68bb      	ldr	r3, [r7, #8]
 8013b64:	330b      	adds	r3, #11
 8013b66:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8013b68:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	3720      	adds	r7, #32
 8013b6e:	46bd      	mov	sp, r7
 8013b70:	bd80      	pop	{r7, pc}
 8013b72:	bf00      	nop
 8013b74:	08021648 	.word	0x08021648
 8013b78:	0802144c 	.word	0x0802144c

08013b7c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	b086      	sub	sp, #24
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	6078      	str	r0, [r7, #4]
 8013b84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8013b8a:	693b      	ldr	r3, [r7, #16]
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8013b90:	e002      	b.n	8013b98 <follow_path+0x1c>
 8013b92:	683b      	ldr	r3, [r7, #0]
 8013b94:	3301      	adds	r3, #1
 8013b96:	603b      	str	r3, [r7, #0]
 8013b98:	683b      	ldr	r3, [r7, #0]
 8013b9a:	781b      	ldrb	r3, [r3, #0]
 8013b9c:	2b2f      	cmp	r3, #47	; 0x2f
 8013b9e:	d0f8      	beq.n	8013b92 <follow_path+0x16>
 8013ba0:	683b      	ldr	r3, [r7, #0]
 8013ba2:	781b      	ldrb	r3, [r3, #0]
 8013ba4:	2b5c      	cmp	r3, #92	; 0x5c
 8013ba6:	d0f4      	beq.n	8013b92 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8013ba8:	693b      	ldr	r3, [r7, #16]
 8013baa:	2200      	movs	r2, #0
 8013bac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8013bae:	683b      	ldr	r3, [r7, #0]
 8013bb0:	781b      	ldrb	r3, [r3, #0]
 8013bb2:	2b1f      	cmp	r3, #31
 8013bb4:	d80a      	bhi.n	8013bcc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	2280      	movs	r2, #128	; 0x80
 8013bba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8013bbe:	2100      	movs	r1, #0
 8013bc0:	6878      	ldr	r0, [r7, #4]
 8013bc2:	f7ff fc3d 	bl	8013440 <dir_sdi>
 8013bc6:	4603      	mov	r3, r0
 8013bc8:	75fb      	strb	r3, [r7, #23]
 8013bca:	e043      	b.n	8013c54 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013bcc:	463b      	mov	r3, r7
 8013bce:	4619      	mov	r1, r3
 8013bd0:	6878      	ldr	r0, [r7, #4]
 8013bd2:	f7ff ff3f 	bl	8013a54 <create_name>
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013bda:	7dfb      	ldrb	r3, [r7, #23]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d134      	bne.n	8013c4a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8013be0:	6878      	ldr	r0, [r7, #4]
 8013be2:	f7ff fe50 	bl	8013886 <dir_find>
 8013be6:	4603      	mov	r3, r0
 8013be8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013bf0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8013bf2:	7dfb      	ldrb	r3, [r7, #23]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d00a      	beq.n	8013c0e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013bf8:	7dfb      	ldrb	r3, [r7, #23]
 8013bfa:	2b04      	cmp	r3, #4
 8013bfc:	d127      	bne.n	8013c4e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8013bfe:	7afb      	ldrb	r3, [r7, #11]
 8013c00:	f003 0304 	and.w	r3, r3, #4
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d122      	bne.n	8013c4e <follow_path+0xd2>
 8013c08:	2305      	movs	r3, #5
 8013c0a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013c0c:	e01f      	b.n	8013c4e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013c0e:	7afb      	ldrb	r3, [r7, #11]
 8013c10:	f003 0304 	and.w	r3, r3, #4
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d11c      	bne.n	8013c52 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013c18:	693b      	ldr	r3, [r7, #16]
 8013c1a:	799b      	ldrb	r3, [r3, #6]
 8013c1c:	f003 0310 	and.w	r3, r3, #16
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d102      	bne.n	8013c2a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013c24:	2305      	movs	r3, #5
 8013c26:	75fb      	strb	r3, [r7, #23]
 8013c28:	e014      	b.n	8013c54 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	695b      	ldr	r3, [r3, #20]
 8013c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c38:	4413      	add	r3, r2
 8013c3a:	4619      	mov	r1, r3
 8013c3c:	68f8      	ldr	r0, [r7, #12]
 8013c3e:	f7ff fd86 	bl	801374e <ld_clust>
 8013c42:	4602      	mov	r2, r0
 8013c44:	693b      	ldr	r3, [r7, #16]
 8013c46:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013c48:	e7c0      	b.n	8013bcc <follow_path+0x50>
			if (res != FR_OK) break;
 8013c4a:	bf00      	nop
 8013c4c:	e002      	b.n	8013c54 <follow_path+0xd8>
				break;
 8013c4e:	bf00      	nop
 8013c50:	e000      	b.n	8013c54 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013c52:	bf00      	nop
			}
		}
	}

	return res;
 8013c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c56:	4618      	mov	r0, r3
 8013c58:	3718      	adds	r7, #24
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	bd80      	pop	{r7, pc}

08013c5e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8013c5e:	b480      	push	{r7}
 8013c60:	b087      	sub	sp, #28
 8013c62:	af00      	add	r7, sp, #0
 8013c64:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8013c66:	f04f 33ff 	mov.w	r3, #4294967295
 8013c6a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d031      	beq.n	8013cd8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	617b      	str	r3, [r7, #20]
 8013c7a:	e002      	b.n	8013c82 <get_ldnumber+0x24>
 8013c7c:	697b      	ldr	r3, [r7, #20]
 8013c7e:	3301      	adds	r3, #1
 8013c80:	617b      	str	r3, [r7, #20]
 8013c82:	697b      	ldr	r3, [r7, #20]
 8013c84:	781b      	ldrb	r3, [r3, #0]
 8013c86:	2b20      	cmp	r3, #32
 8013c88:	d903      	bls.n	8013c92 <get_ldnumber+0x34>
 8013c8a:	697b      	ldr	r3, [r7, #20]
 8013c8c:	781b      	ldrb	r3, [r3, #0]
 8013c8e:	2b3a      	cmp	r3, #58	; 0x3a
 8013c90:	d1f4      	bne.n	8013c7c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8013c92:	697b      	ldr	r3, [r7, #20]
 8013c94:	781b      	ldrb	r3, [r3, #0]
 8013c96:	2b3a      	cmp	r3, #58	; 0x3a
 8013c98:	d11c      	bne.n	8013cd4 <get_ldnumber+0x76>
			tp = *path;
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	1c5a      	adds	r2, r3, #1
 8013ca4:	60fa      	str	r2, [r7, #12]
 8013ca6:	781b      	ldrb	r3, [r3, #0]
 8013ca8:	3b30      	subs	r3, #48	; 0x30
 8013caa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013cac:	68bb      	ldr	r3, [r7, #8]
 8013cae:	2b09      	cmp	r3, #9
 8013cb0:	d80e      	bhi.n	8013cd0 <get_ldnumber+0x72>
 8013cb2:	68fa      	ldr	r2, [r7, #12]
 8013cb4:	697b      	ldr	r3, [r7, #20]
 8013cb6:	429a      	cmp	r2, r3
 8013cb8:	d10a      	bne.n	8013cd0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8013cba:	68bb      	ldr	r3, [r7, #8]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d107      	bne.n	8013cd0 <get_ldnumber+0x72>
					vol = (int)i;
 8013cc0:	68bb      	ldr	r3, [r7, #8]
 8013cc2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013cc4:	697b      	ldr	r3, [r7, #20]
 8013cc6:	3301      	adds	r3, #1
 8013cc8:	617b      	str	r3, [r7, #20]
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	697a      	ldr	r2, [r7, #20]
 8013cce:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013cd0:	693b      	ldr	r3, [r7, #16]
 8013cd2:	e002      	b.n	8013cda <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013cd8:	693b      	ldr	r3, [r7, #16]
}
 8013cda:	4618      	mov	r0, r3
 8013cdc:	371c      	adds	r7, #28
 8013cde:	46bd      	mov	sp, r7
 8013ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce4:	4770      	bx	lr
	...

08013ce8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b082      	sub	sp, #8
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	6078      	str	r0, [r7, #4]
 8013cf0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	2200      	movs	r2, #0
 8013cf6:	70da      	strb	r2, [r3, #3]
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8013cfe:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013d00:	6839      	ldr	r1, [r7, #0]
 8013d02:	6878      	ldr	r0, [r7, #4]
 8013d04:	f7ff f81c 	bl	8012d40 <move_window>
 8013d08:	4603      	mov	r3, r0
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d001      	beq.n	8013d12 <check_fs+0x2a>
 8013d0e:	2304      	movs	r3, #4
 8013d10:	e038      	b.n	8013d84 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	3334      	adds	r3, #52	; 0x34
 8013d16:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	f7fe fd2e 	bl	801277c <ld_word>
 8013d20:	4603      	mov	r3, r0
 8013d22:	461a      	mov	r2, r3
 8013d24:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013d28:	429a      	cmp	r2, r3
 8013d2a:	d001      	beq.n	8013d30 <check_fs+0x48>
 8013d2c:	2303      	movs	r3, #3
 8013d2e:	e029      	b.n	8013d84 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013d36:	2be9      	cmp	r3, #233	; 0xe9
 8013d38:	d009      	beq.n	8013d4e <check_fs+0x66>
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013d40:	2beb      	cmp	r3, #235	; 0xeb
 8013d42:	d11e      	bne.n	8013d82 <check_fs+0x9a>
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8013d4a:	2b90      	cmp	r3, #144	; 0x90
 8013d4c:	d119      	bne.n	8013d82 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	3334      	adds	r3, #52	; 0x34
 8013d52:	3336      	adds	r3, #54	; 0x36
 8013d54:	4618      	mov	r0, r3
 8013d56:	f7fe fd29 	bl	80127ac <ld_dword>
 8013d5a:	4603      	mov	r3, r0
 8013d5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013d60:	4a0a      	ldr	r2, [pc, #40]	; (8013d8c <check_fs+0xa4>)
 8013d62:	4293      	cmp	r3, r2
 8013d64:	d101      	bne.n	8013d6a <check_fs+0x82>
 8013d66:	2300      	movs	r3, #0
 8013d68:	e00c      	b.n	8013d84 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	3334      	adds	r3, #52	; 0x34
 8013d6e:	3352      	adds	r3, #82	; 0x52
 8013d70:	4618      	mov	r0, r3
 8013d72:	f7fe fd1b 	bl	80127ac <ld_dword>
 8013d76:	4603      	mov	r3, r0
 8013d78:	4a05      	ldr	r2, [pc, #20]	; (8013d90 <check_fs+0xa8>)
 8013d7a:	4293      	cmp	r3, r2
 8013d7c:	d101      	bne.n	8013d82 <check_fs+0x9a>
 8013d7e:	2300      	movs	r3, #0
 8013d80:	e000      	b.n	8013d84 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8013d82:	2302      	movs	r3, #2
}
 8013d84:	4618      	mov	r0, r3
 8013d86:	3708      	adds	r7, #8
 8013d88:	46bd      	mov	sp, r7
 8013d8a:	bd80      	pop	{r7, pc}
 8013d8c:	00544146 	.word	0x00544146
 8013d90:	33544146 	.word	0x33544146

08013d94 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013d94:	b580      	push	{r7, lr}
 8013d96:	b096      	sub	sp, #88	; 0x58
 8013d98:	af00      	add	r7, sp, #0
 8013d9a:	60f8      	str	r0, [r7, #12]
 8013d9c:	60b9      	str	r1, [r7, #8]
 8013d9e:	4613      	mov	r3, r2
 8013da0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8013da2:	68bb      	ldr	r3, [r7, #8]
 8013da4:	2200      	movs	r2, #0
 8013da6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013da8:	68f8      	ldr	r0, [r7, #12]
 8013daa:	f7ff ff58 	bl	8013c5e <get_ldnumber>
 8013dae:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	da01      	bge.n	8013dba <find_volume+0x26>
 8013db6:	230b      	movs	r3, #11
 8013db8:	e236      	b.n	8014228 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8013dba:	4aac      	ldr	r2, [pc, #688]	; (801406c <find_volume+0x2d8>)
 8013dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013dc2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d101      	bne.n	8013dce <find_volume+0x3a>
 8013dca:	230c      	movs	r3, #12
 8013dcc:	e22c      	b.n	8014228 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8013dce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013dd0:	f7fe fdd4 	bl	801297c <lock_fs>
 8013dd4:	4603      	mov	r3, r0
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d101      	bne.n	8013dde <find_volume+0x4a>
 8013dda:	230f      	movs	r3, #15
 8013ddc:	e224      	b.n	8014228 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8013dde:	68bb      	ldr	r3, [r7, #8]
 8013de0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013de2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013de4:	79fb      	ldrb	r3, [r7, #7]
 8013de6:	f023 0301 	bic.w	r3, r3, #1
 8013dea:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013dee:	781b      	ldrb	r3, [r3, #0]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d01a      	beq.n	8013e2a <find_volume+0x96>
		stat = disk_status(fs->drv);
 8013df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013df6:	785b      	ldrb	r3, [r3, #1]
 8013df8:	4618      	mov	r0, r3
 8013dfa:	f7fe fc21 	bl	8012640 <disk_status>
 8013dfe:	4603      	mov	r3, r0
 8013e00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013e04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013e08:	f003 0301 	and.w	r3, r3, #1
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d10c      	bne.n	8013e2a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013e10:	79fb      	ldrb	r3, [r7, #7]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d007      	beq.n	8013e26 <find_volume+0x92>
 8013e16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013e1a:	f003 0304 	and.w	r3, r3, #4
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d001      	beq.n	8013e26 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8013e22:	230a      	movs	r3, #10
 8013e24:	e200      	b.n	8014228 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8013e26:	2300      	movs	r3, #0
 8013e28:	e1fe      	b.n	8014228 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e2c:	2200      	movs	r2, #0
 8013e2e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e32:	b2da      	uxtb	r2, r3
 8013e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e36:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e3a:	785b      	ldrb	r3, [r3, #1]
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	f7fe fc19 	bl	8012674 <disk_initialize>
 8013e42:	4603      	mov	r3, r0
 8013e44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013e48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013e4c:	f003 0301 	and.w	r3, r3, #1
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d001      	beq.n	8013e58 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013e54:	2303      	movs	r3, #3
 8013e56:	e1e7      	b.n	8014228 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013e58:	79fb      	ldrb	r3, [r7, #7]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d007      	beq.n	8013e6e <find_volume+0xda>
 8013e5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013e62:	f003 0304 	and.w	r3, r3, #4
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d001      	beq.n	8013e6e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8013e6a:	230a      	movs	r3, #10
 8013e6c:	e1dc      	b.n	8014228 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013e6e:	2300      	movs	r3, #0
 8013e70:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013e72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013e74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013e76:	f7ff ff37 	bl	8013ce8 <check_fs>
 8013e7a:	4603      	mov	r3, r0
 8013e7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013e80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e84:	2b02      	cmp	r3, #2
 8013e86:	d14b      	bne.n	8013f20 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013e88:	2300      	movs	r3, #0
 8013e8a:	643b      	str	r3, [r7, #64]	; 0x40
 8013e8c:	e01f      	b.n	8013ece <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8013e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e90:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e96:	011b      	lsls	r3, r3, #4
 8013e98:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8013e9c:	4413      	add	r3, r2
 8013e9e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ea2:	3304      	adds	r3, #4
 8013ea4:	781b      	ldrb	r3, [r3, #0]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d006      	beq.n	8013eb8 <find_volume+0x124>
 8013eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013eac:	3308      	adds	r3, #8
 8013eae:	4618      	mov	r0, r3
 8013eb0:	f7fe fc7c 	bl	80127ac <ld_dword>
 8013eb4:	4602      	mov	r2, r0
 8013eb6:	e000      	b.n	8013eba <find_volume+0x126>
 8013eb8:	2200      	movs	r2, #0
 8013eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ebc:	009b      	lsls	r3, r3, #2
 8013ebe:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8013ec2:	440b      	add	r3, r1
 8013ec4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013eca:	3301      	adds	r3, #1
 8013ecc:	643b      	str	r3, [r7, #64]	; 0x40
 8013ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ed0:	2b03      	cmp	r3, #3
 8013ed2:	d9dc      	bls.n	8013e8e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013ed4:	2300      	movs	r3, #0
 8013ed6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8013ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d002      	beq.n	8013ee4 <find_volume+0x150>
 8013ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ee0:	3b01      	subs	r3, #1
 8013ee2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ee6:	009b      	lsls	r3, r3, #2
 8013ee8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8013eec:	4413      	add	r3, r2
 8013eee:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013ef2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013ef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d005      	beq.n	8013f06 <find_volume+0x172>
 8013efa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013efc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013efe:	f7ff fef3 	bl	8013ce8 <check_fs>
 8013f02:	4603      	mov	r3, r0
 8013f04:	e000      	b.n	8013f08 <find_volume+0x174>
 8013f06:	2303      	movs	r3, #3
 8013f08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013f0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013f10:	2b01      	cmp	r3, #1
 8013f12:	d905      	bls.n	8013f20 <find_volume+0x18c>
 8013f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f16:	3301      	adds	r3, #1
 8013f18:	643b      	str	r3, [r7, #64]	; 0x40
 8013f1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f1c:	2b03      	cmp	r3, #3
 8013f1e:	d9e1      	bls.n	8013ee4 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013f20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013f24:	2b04      	cmp	r3, #4
 8013f26:	d101      	bne.n	8013f2c <find_volume+0x198>
 8013f28:	2301      	movs	r3, #1
 8013f2a:	e17d      	b.n	8014228 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013f2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013f30:	2b01      	cmp	r3, #1
 8013f32:	d901      	bls.n	8013f38 <find_volume+0x1a4>
 8013f34:	230d      	movs	r3, #13
 8013f36:	e177      	b.n	8014228 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f3a:	3334      	adds	r3, #52	; 0x34
 8013f3c:	330b      	adds	r3, #11
 8013f3e:	4618      	mov	r0, r3
 8013f40:	f7fe fc1c 	bl	801277c <ld_word>
 8013f44:	4603      	mov	r3, r0
 8013f46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013f4a:	d001      	beq.n	8013f50 <find_volume+0x1bc>
 8013f4c:	230d      	movs	r3, #13
 8013f4e:	e16b      	b.n	8014228 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f52:	3334      	adds	r3, #52	; 0x34
 8013f54:	3316      	adds	r3, #22
 8013f56:	4618      	mov	r0, r3
 8013f58:	f7fe fc10 	bl	801277c <ld_word>
 8013f5c:	4603      	mov	r3, r0
 8013f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d106      	bne.n	8013f74 <find_volume+0x1e0>
 8013f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f68:	3334      	adds	r3, #52	; 0x34
 8013f6a:	3324      	adds	r3, #36	; 0x24
 8013f6c:	4618      	mov	r0, r3
 8013f6e:	f7fe fc1d 	bl	80127ac <ld_dword>
 8013f72:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8013f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013f78:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f7c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8013f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f82:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f86:	789b      	ldrb	r3, [r3, #2]
 8013f88:	2b01      	cmp	r3, #1
 8013f8a:	d005      	beq.n	8013f98 <find_volume+0x204>
 8013f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f8e:	789b      	ldrb	r3, [r3, #2]
 8013f90:	2b02      	cmp	r3, #2
 8013f92:	d001      	beq.n	8013f98 <find_volume+0x204>
 8013f94:	230d      	movs	r3, #13
 8013f96:	e147      	b.n	8014228 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f9a:	789b      	ldrb	r3, [r3, #2]
 8013f9c:	461a      	mov	r2, r3
 8013f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013fa0:	fb02 f303 	mul.w	r3, r2, r3
 8013fa4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013fac:	b29a      	uxth	r2, r3
 8013fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fb0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fb4:	895b      	ldrh	r3, [r3, #10]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d008      	beq.n	8013fcc <find_volume+0x238>
 8013fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fbc:	895b      	ldrh	r3, [r3, #10]
 8013fbe:	461a      	mov	r2, r3
 8013fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fc2:	895b      	ldrh	r3, [r3, #10]
 8013fc4:	3b01      	subs	r3, #1
 8013fc6:	4013      	ands	r3, r2
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d001      	beq.n	8013fd0 <find_volume+0x23c>
 8013fcc:	230d      	movs	r3, #13
 8013fce:	e12b      	b.n	8014228 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fd2:	3334      	adds	r3, #52	; 0x34
 8013fd4:	3311      	adds	r3, #17
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	f7fe fbd0 	bl	801277c <ld_word>
 8013fdc:	4603      	mov	r3, r0
 8013fde:	461a      	mov	r2, r3
 8013fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fe2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fe6:	891b      	ldrh	r3, [r3, #8]
 8013fe8:	f003 030f 	and.w	r3, r3, #15
 8013fec:	b29b      	uxth	r3, r3
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d001      	beq.n	8013ff6 <find_volume+0x262>
 8013ff2:	230d      	movs	r3, #13
 8013ff4:	e118      	b.n	8014228 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ff8:	3334      	adds	r3, #52	; 0x34
 8013ffa:	3313      	adds	r3, #19
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	f7fe fbbd 	bl	801277c <ld_word>
 8014002:	4603      	mov	r3, r0
 8014004:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8014006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014008:	2b00      	cmp	r3, #0
 801400a:	d106      	bne.n	801401a <find_volume+0x286>
 801400c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801400e:	3334      	adds	r3, #52	; 0x34
 8014010:	3320      	adds	r3, #32
 8014012:	4618      	mov	r0, r3
 8014014:	f7fe fbca 	bl	80127ac <ld_dword>
 8014018:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801401a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801401c:	3334      	adds	r3, #52	; 0x34
 801401e:	330e      	adds	r3, #14
 8014020:	4618      	mov	r0, r3
 8014022:	f7fe fbab 	bl	801277c <ld_word>
 8014026:	4603      	mov	r3, r0
 8014028:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801402a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801402c:	2b00      	cmp	r3, #0
 801402e:	d101      	bne.n	8014034 <find_volume+0x2a0>
 8014030:	230d      	movs	r3, #13
 8014032:	e0f9      	b.n	8014228 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8014034:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014038:	4413      	add	r3, r2
 801403a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801403c:	8912      	ldrh	r2, [r2, #8]
 801403e:	0912      	lsrs	r2, r2, #4
 8014040:	b292      	uxth	r2, r2
 8014042:	4413      	add	r3, r2
 8014044:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8014046:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801404a:	429a      	cmp	r2, r3
 801404c:	d201      	bcs.n	8014052 <find_volume+0x2be>
 801404e:	230d      	movs	r3, #13
 8014050:	e0ea      	b.n	8014228 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8014052:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014056:	1ad3      	subs	r3, r2, r3
 8014058:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801405a:	8952      	ldrh	r2, [r2, #10]
 801405c:	fbb3 f3f2 	udiv	r3, r3, r2
 8014060:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8014062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014064:	2b00      	cmp	r3, #0
 8014066:	d103      	bne.n	8014070 <find_volume+0x2dc>
 8014068:	230d      	movs	r3, #13
 801406a:	e0dd      	b.n	8014228 <find_volume+0x494>
 801406c:	20000844 	.word	0x20000844
		fmt = FS_FAT32;
 8014070:	2303      	movs	r3, #3
 8014072:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8014076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014078:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801407c:	4293      	cmp	r3, r2
 801407e:	d802      	bhi.n	8014086 <find_volume+0x2f2>
 8014080:	2302      	movs	r3, #2
 8014082:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8014086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014088:	f640 72f5 	movw	r2, #4085	; 0xff5
 801408c:	4293      	cmp	r3, r2
 801408e:	d802      	bhi.n	8014096 <find_volume+0x302>
 8014090:	2301      	movs	r3, #1
 8014092:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8014096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014098:	1c9a      	adds	r2, r3, #2
 801409a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801409c:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 801409e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80140a2:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80140a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80140a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80140a8:	441a      	add	r2, r3
 80140aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140ac:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80140ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80140b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140b2:	441a      	add	r2, r3
 80140b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140b6:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80140b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80140bc:	2b03      	cmp	r3, #3
 80140be:	d11e      	bne.n	80140fe <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80140c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140c2:	3334      	adds	r3, #52	; 0x34
 80140c4:	332a      	adds	r3, #42	; 0x2a
 80140c6:	4618      	mov	r0, r3
 80140c8:	f7fe fb58 	bl	801277c <ld_word>
 80140cc:	4603      	mov	r3, r0
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d001      	beq.n	80140d6 <find_volume+0x342>
 80140d2:	230d      	movs	r3, #13
 80140d4:	e0a8      	b.n	8014228 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80140d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140d8:	891b      	ldrh	r3, [r3, #8]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d001      	beq.n	80140e2 <find_volume+0x34e>
 80140de:	230d      	movs	r3, #13
 80140e0:	e0a2      	b.n	8014228 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80140e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140e4:	3334      	adds	r3, #52	; 0x34
 80140e6:	332c      	adds	r3, #44	; 0x2c
 80140e8:	4618      	mov	r0, r3
 80140ea:	f7fe fb5f 	bl	80127ac <ld_dword>
 80140ee:	4602      	mov	r2, r0
 80140f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140f2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80140f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140f6:	699b      	ldr	r3, [r3, #24]
 80140f8:	009b      	lsls	r3, r3, #2
 80140fa:	647b      	str	r3, [r7, #68]	; 0x44
 80140fc:	e01f      	b.n	801413e <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80140fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014100:	891b      	ldrh	r3, [r3, #8]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d101      	bne.n	801410a <find_volume+0x376>
 8014106:	230d      	movs	r3, #13
 8014108:	e08e      	b.n	8014228 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801410a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801410c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801410e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014110:	441a      	add	r2, r3
 8014112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014114:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014116:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801411a:	2b02      	cmp	r3, #2
 801411c:	d103      	bne.n	8014126 <find_volume+0x392>
 801411e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014120:	699b      	ldr	r3, [r3, #24]
 8014122:	005b      	lsls	r3, r3, #1
 8014124:	e00a      	b.n	801413c <find_volume+0x3a8>
 8014126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014128:	699a      	ldr	r2, [r3, #24]
 801412a:	4613      	mov	r3, r2
 801412c:	005b      	lsls	r3, r3, #1
 801412e:	4413      	add	r3, r2
 8014130:	085a      	lsrs	r2, r3, #1
 8014132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014134:	699b      	ldr	r3, [r3, #24]
 8014136:	f003 0301 	and.w	r3, r3, #1
 801413a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801413c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801413e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014140:	69da      	ldr	r2, [r3, #28]
 8014142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014144:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8014148:	0a5b      	lsrs	r3, r3, #9
 801414a:	429a      	cmp	r2, r3
 801414c:	d201      	bcs.n	8014152 <find_volume+0x3be>
 801414e:	230d      	movs	r3, #13
 8014150:	e06a      	b.n	8014228 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8014152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014154:	f04f 32ff 	mov.w	r2, #4294967295
 8014158:	615a      	str	r2, [r3, #20]
 801415a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801415c:	695a      	ldr	r2, [r3, #20]
 801415e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014160:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8014162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014164:	2280      	movs	r2, #128	; 0x80
 8014166:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8014168:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801416c:	2b03      	cmp	r3, #3
 801416e:	d149      	bne.n	8014204 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8014170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014172:	3334      	adds	r3, #52	; 0x34
 8014174:	3330      	adds	r3, #48	; 0x30
 8014176:	4618      	mov	r0, r3
 8014178:	f7fe fb00 	bl	801277c <ld_word>
 801417c:	4603      	mov	r3, r0
 801417e:	2b01      	cmp	r3, #1
 8014180:	d140      	bne.n	8014204 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014184:	3301      	adds	r3, #1
 8014186:	4619      	mov	r1, r3
 8014188:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801418a:	f7fe fdd9 	bl	8012d40 <move_window>
 801418e:	4603      	mov	r3, r0
 8014190:	2b00      	cmp	r3, #0
 8014192:	d137      	bne.n	8014204 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8014194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014196:	2200      	movs	r2, #0
 8014198:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801419a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801419c:	3334      	adds	r3, #52	; 0x34
 801419e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80141a2:	4618      	mov	r0, r3
 80141a4:	f7fe faea 	bl	801277c <ld_word>
 80141a8:	4603      	mov	r3, r0
 80141aa:	461a      	mov	r2, r3
 80141ac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80141b0:	429a      	cmp	r2, r3
 80141b2:	d127      	bne.n	8014204 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80141b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141b6:	3334      	adds	r3, #52	; 0x34
 80141b8:	4618      	mov	r0, r3
 80141ba:	f7fe faf7 	bl	80127ac <ld_dword>
 80141be:	4603      	mov	r3, r0
 80141c0:	4a1b      	ldr	r2, [pc, #108]	; (8014230 <find_volume+0x49c>)
 80141c2:	4293      	cmp	r3, r2
 80141c4:	d11e      	bne.n	8014204 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80141c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141c8:	3334      	adds	r3, #52	; 0x34
 80141ca:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80141ce:	4618      	mov	r0, r3
 80141d0:	f7fe faec 	bl	80127ac <ld_dword>
 80141d4:	4603      	mov	r3, r0
 80141d6:	4a17      	ldr	r2, [pc, #92]	; (8014234 <find_volume+0x4a0>)
 80141d8:	4293      	cmp	r3, r2
 80141da:	d113      	bne.n	8014204 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80141dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141de:	3334      	adds	r3, #52	; 0x34
 80141e0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80141e4:	4618      	mov	r0, r3
 80141e6:	f7fe fae1 	bl	80127ac <ld_dword>
 80141ea:	4602      	mov	r2, r0
 80141ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141ee:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80141f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141f2:	3334      	adds	r3, #52	; 0x34
 80141f4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80141f8:	4618      	mov	r0, r3
 80141fa:	f7fe fad7 	bl	80127ac <ld_dword>
 80141fe:	4602      	mov	r2, r0
 8014200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014202:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8014204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014206:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801420a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801420c:	4b0a      	ldr	r3, [pc, #40]	; (8014238 <find_volume+0x4a4>)
 801420e:	881b      	ldrh	r3, [r3, #0]
 8014210:	3301      	adds	r3, #1
 8014212:	b29a      	uxth	r2, r3
 8014214:	4b08      	ldr	r3, [pc, #32]	; (8014238 <find_volume+0x4a4>)
 8014216:	801a      	strh	r2, [r3, #0]
 8014218:	4b07      	ldr	r3, [pc, #28]	; (8014238 <find_volume+0x4a4>)
 801421a:	881a      	ldrh	r2, [r3, #0]
 801421c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801421e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8014220:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014222:	f7fe fd25 	bl	8012c70 <clear_lock>
#endif
	return FR_OK;
 8014226:	2300      	movs	r3, #0
}
 8014228:	4618      	mov	r0, r3
 801422a:	3758      	adds	r7, #88	; 0x58
 801422c:	46bd      	mov	sp, r7
 801422e:	bd80      	pop	{r7, pc}
 8014230:	41615252 	.word	0x41615252
 8014234:	61417272 	.word	0x61417272
 8014238:	20000848 	.word	0x20000848

0801423c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801423c:	b580      	push	{r7, lr}
 801423e:	b084      	sub	sp, #16
 8014240:	af00      	add	r7, sp, #0
 8014242:	6078      	str	r0, [r7, #4]
 8014244:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8014246:	2309      	movs	r3, #9
 8014248:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d02e      	beq.n	80142ae <validate+0x72>
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	2b00      	cmp	r3, #0
 8014256:	d02a      	beq.n	80142ae <validate+0x72>
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	781b      	ldrb	r3, [r3, #0]
 801425e:	2b00      	cmp	r3, #0
 8014260:	d025      	beq.n	80142ae <validate+0x72>
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	889a      	ldrh	r2, [r3, #4]
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	88db      	ldrh	r3, [r3, #6]
 801426c:	429a      	cmp	r2, r3
 801426e:	d11e      	bne.n	80142ae <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	4618      	mov	r0, r3
 8014276:	f7fe fb81 	bl	801297c <lock_fs>
 801427a:	4603      	mov	r3, r0
 801427c:	2b00      	cmp	r3, #0
 801427e:	d014      	beq.n	80142aa <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	785b      	ldrb	r3, [r3, #1]
 8014286:	4618      	mov	r0, r3
 8014288:	f7fe f9da 	bl	8012640 <disk_status>
 801428c:	4603      	mov	r3, r0
 801428e:	f003 0301 	and.w	r3, r3, #1
 8014292:	2b00      	cmp	r3, #0
 8014294:	d102      	bne.n	801429c <validate+0x60>
				res = FR_OK;
 8014296:	2300      	movs	r3, #0
 8014298:	73fb      	strb	r3, [r7, #15]
 801429a:	e008      	b.n	80142ae <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	2100      	movs	r1, #0
 80142a2:	4618      	mov	r0, r3
 80142a4:	f7fe fb80 	bl	80129a8 <unlock_fs>
 80142a8:	e001      	b.n	80142ae <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80142aa:	230f      	movs	r3, #15
 80142ac:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80142ae:	7bfb      	ldrb	r3, [r7, #15]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d102      	bne.n	80142ba <validate+0x7e>
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	e000      	b.n	80142bc <validate+0x80>
 80142ba:	2300      	movs	r3, #0
 80142bc:	683a      	ldr	r2, [r7, #0]
 80142be:	6013      	str	r3, [r2, #0]
	return res;
 80142c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80142c2:	4618      	mov	r0, r3
 80142c4:	3710      	adds	r7, #16
 80142c6:	46bd      	mov	sp, r7
 80142c8:	bd80      	pop	{r7, pc}
	...

080142cc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80142cc:	b580      	push	{r7, lr}
 80142ce:	b088      	sub	sp, #32
 80142d0:	af00      	add	r7, sp, #0
 80142d2:	60f8      	str	r0, [r7, #12]
 80142d4:	60b9      	str	r1, [r7, #8]
 80142d6:	4613      	mov	r3, r2
 80142d8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80142da:	68bb      	ldr	r3, [r7, #8]
 80142dc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80142de:	f107 0310 	add.w	r3, r7, #16
 80142e2:	4618      	mov	r0, r3
 80142e4:	f7ff fcbb 	bl	8013c5e <get_ldnumber>
 80142e8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80142ea:	69fb      	ldr	r3, [r7, #28]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	da01      	bge.n	80142f4 <f_mount+0x28>
 80142f0:	230b      	movs	r3, #11
 80142f2:	e048      	b.n	8014386 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80142f4:	4a26      	ldr	r2, [pc, #152]	; (8014390 <f_mount+0xc4>)
 80142f6:	69fb      	ldr	r3, [r7, #28]
 80142f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80142fc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80142fe:	69bb      	ldr	r3, [r7, #24]
 8014300:	2b00      	cmp	r3, #0
 8014302:	d00f      	beq.n	8014324 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8014304:	69b8      	ldr	r0, [r7, #24]
 8014306:	f7fe fcb3 	bl	8012c70 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 801430a:	69bb      	ldr	r3, [r7, #24]
 801430c:	68db      	ldr	r3, [r3, #12]
 801430e:	4618      	mov	r0, r3
 8014310:	f001 f812 	bl	8015338 <ff_del_syncobj>
 8014314:	4603      	mov	r3, r0
 8014316:	2b00      	cmp	r3, #0
 8014318:	d101      	bne.n	801431e <f_mount+0x52>
 801431a:	2302      	movs	r3, #2
 801431c:	e033      	b.n	8014386 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801431e:	69bb      	ldr	r3, [r7, #24]
 8014320:	2200      	movs	r2, #0
 8014322:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d00f      	beq.n	801434a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	2200      	movs	r2, #0
 801432e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8014330:	69fb      	ldr	r3, [r7, #28]
 8014332:	b2da      	uxtb	r2, r3
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	330c      	adds	r3, #12
 8014338:	4619      	mov	r1, r3
 801433a:	4610      	mov	r0, r2
 801433c:	f000 ffe1 	bl	8015302 <ff_cre_syncobj>
 8014340:	4603      	mov	r3, r0
 8014342:	2b00      	cmp	r3, #0
 8014344:	d101      	bne.n	801434a <f_mount+0x7e>
 8014346:	2302      	movs	r3, #2
 8014348:	e01d      	b.n	8014386 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801434a:	68fa      	ldr	r2, [r7, #12]
 801434c:	4910      	ldr	r1, [pc, #64]	; (8014390 <f_mount+0xc4>)
 801434e:	69fb      	ldr	r3, [r7, #28]
 8014350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d002      	beq.n	8014360 <f_mount+0x94>
 801435a:	79fb      	ldrb	r3, [r7, #7]
 801435c:	2b01      	cmp	r3, #1
 801435e:	d001      	beq.n	8014364 <f_mount+0x98>
 8014360:	2300      	movs	r3, #0
 8014362:	e010      	b.n	8014386 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014364:	f107 010c 	add.w	r1, r7, #12
 8014368:	f107 0308 	add.w	r3, r7, #8
 801436c:	2200      	movs	r2, #0
 801436e:	4618      	mov	r0, r3
 8014370:	f7ff fd10 	bl	8013d94 <find_volume>
 8014374:	4603      	mov	r3, r0
 8014376:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	7dfa      	ldrb	r2, [r7, #23]
 801437c:	4611      	mov	r1, r2
 801437e:	4618      	mov	r0, r3
 8014380:	f7fe fb12 	bl	80129a8 <unlock_fs>
 8014384:	7dfb      	ldrb	r3, [r7, #23]
}
 8014386:	4618      	mov	r0, r3
 8014388:	3720      	adds	r7, #32
 801438a:	46bd      	mov	sp, r7
 801438c:	bd80      	pop	{r7, pc}
 801438e:	bf00      	nop
 8014390:	20000844 	.word	0x20000844

08014394 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014394:	b580      	push	{r7, lr}
 8014396:	b098      	sub	sp, #96	; 0x60
 8014398:	af00      	add	r7, sp, #0
 801439a:	60f8      	str	r0, [r7, #12]
 801439c:	60b9      	str	r1, [r7, #8]
 801439e:	4613      	mov	r3, r2
 80143a0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d101      	bne.n	80143ac <f_open+0x18>
 80143a8:	2309      	movs	r3, #9
 80143aa:	e1b4      	b.n	8014716 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80143ac:	79fb      	ldrb	r3, [r7, #7]
 80143ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80143b2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80143b4:	79fa      	ldrb	r2, [r7, #7]
 80143b6:	f107 0110 	add.w	r1, r7, #16
 80143ba:	f107 0308 	add.w	r3, r7, #8
 80143be:	4618      	mov	r0, r3
 80143c0:	f7ff fce8 	bl	8013d94 <find_volume>
 80143c4:	4603      	mov	r3, r0
 80143c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80143ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	f040 8191 	bne.w	80146f6 <f_open+0x362>
		dj.obj.fs = fs;
 80143d4:	693b      	ldr	r3, [r7, #16]
 80143d6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80143d8:	68ba      	ldr	r2, [r7, #8]
 80143da:	f107 0314 	add.w	r3, r7, #20
 80143de:	4611      	mov	r1, r2
 80143e0:	4618      	mov	r0, r3
 80143e2:	f7ff fbcb 	bl	8013b7c <follow_path>
 80143e6:	4603      	mov	r3, r0
 80143e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80143ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d11a      	bne.n	801442a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80143f4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80143f8:	b25b      	sxtb	r3, r3
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	da03      	bge.n	8014406 <f_open+0x72>
				res = FR_INVALID_NAME;
 80143fe:	2306      	movs	r3, #6
 8014400:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014404:	e011      	b.n	801442a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014406:	79fb      	ldrb	r3, [r7, #7]
 8014408:	f023 0301 	bic.w	r3, r3, #1
 801440c:	2b00      	cmp	r3, #0
 801440e:	bf14      	ite	ne
 8014410:	2301      	movne	r3, #1
 8014412:	2300      	moveq	r3, #0
 8014414:	b2db      	uxtb	r3, r3
 8014416:	461a      	mov	r2, r3
 8014418:	f107 0314 	add.w	r3, r7, #20
 801441c:	4611      	mov	r1, r2
 801441e:	4618      	mov	r0, r3
 8014420:	f7fe fade 	bl	80129e0 <chk_lock>
 8014424:	4603      	mov	r3, r0
 8014426:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801442a:	79fb      	ldrb	r3, [r7, #7]
 801442c:	f003 031c 	and.w	r3, r3, #28
 8014430:	2b00      	cmp	r3, #0
 8014432:	d07f      	beq.n	8014534 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8014434:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014438:	2b00      	cmp	r3, #0
 801443a:	d017      	beq.n	801446c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801443c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014440:	2b04      	cmp	r3, #4
 8014442:	d10e      	bne.n	8014462 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014444:	f7fe fb28 	bl	8012a98 <enq_lock>
 8014448:	4603      	mov	r3, r0
 801444a:	2b00      	cmp	r3, #0
 801444c:	d006      	beq.n	801445c <f_open+0xc8>
 801444e:	f107 0314 	add.w	r3, r7, #20
 8014452:	4618      	mov	r0, r3
 8014454:	f7ff fa6c 	bl	8013930 <dir_register>
 8014458:	4603      	mov	r3, r0
 801445a:	e000      	b.n	801445e <f_open+0xca>
 801445c:	2312      	movs	r3, #18
 801445e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8014462:	79fb      	ldrb	r3, [r7, #7]
 8014464:	f043 0308 	orr.w	r3, r3, #8
 8014468:	71fb      	strb	r3, [r7, #7]
 801446a:	e010      	b.n	801448e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801446c:	7ebb      	ldrb	r3, [r7, #26]
 801446e:	f003 0311 	and.w	r3, r3, #17
 8014472:	2b00      	cmp	r3, #0
 8014474:	d003      	beq.n	801447e <f_open+0xea>
					res = FR_DENIED;
 8014476:	2307      	movs	r3, #7
 8014478:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801447c:	e007      	b.n	801448e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801447e:	79fb      	ldrb	r3, [r7, #7]
 8014480:	f003 0304 	and.w	r3, r3, #4
 8014484:	2b00      	cmp	r3, #0
 8014486:	d002      	beq.n	801448e <f_open+0xfa>
 8014488:	2308      	movs	r3, #8
 801448a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801448e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014492:	2b00      	cmp	r3, #0
 8014494:	d168      	bne.n	8014568 <f_open+0x1d4>
 8014496:	79fb      	ldrb	r3, [r7, #7]
 8014498:	f003 0308 	and.w	r3, r3, #8
 801449c:	2b00      	cmp	r3, #0
 801449e:	d063      	beq.n	8014568 <f_open+0x1d4>
				dw = GET_FATTIME();
 80144a0:	f7fb ff2e 	bl	8010300 <get_fattime>
 80144a4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80144a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144a8:	330e      	adds	r3, #14
 80144aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80144ac:	4618      	mov	r0, r3
 80144ae:	f7fe f9bb 	bl	8012828 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80144b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144b4:	3316      	adds	r3, #22
 80144b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80144b8:	4618      	mov	r0, r3
 80144ba:	f7fe f9b5 	bl	8012828 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80144be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144c0:	330b      	adds	r3, #11
 80144c2:	2220      	movs	r2, #32
 80144c4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80144c6:	693b      	ldr	r3, [r7, #16]
 80144c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80144ca:	4611      	mov	r1, r2
 80144cc:	4618      	mov	r0, r3
 80144ce:	f7ff f93e 	bl	801374e <ld_clust>
 80144d2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80144d4:	693b      	ldr	r3, [r7, #16]
 80144d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80144d8:	2200      	movs	r2, #0
 80144da:	4618      	mov	r0, r3
 80144dc:	f7ff f956 	bl	801378c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80144e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144e2:	331c      	adds	r3, #28
 80144e4:	2100      	movs	r1, #0
 80144e6:	4618      	mov	r0, r3
 80144e8:	f7fe f99e 	bl	8012828 <st_dword>
					fs->wflag = 1;
 80144ec:	693b      	ldr	r3, [r7, #16]
 80144ee:	2201      	movs	r2, #1
 80144f0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80144f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d037      	beq.n	8014568 <f_open+0x1d4>
						dw = fs->winsect;
 80144f8:	693b      	ldr	r3, [r7, #16]
 80144fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80144fc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80144fe:	f107 0314 	add.w	r3, r7, #20
 8014502:	2200      	movs	r2, #0
 8014504:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8014506:	4618      	mov	r0, r3
 8014508:	f7fe fe69 	bl	80131de <remove_chain>
 801450c:	4603      	mov	r3, r0
 801450e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8014512:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014516:	2b00      	cmp	r3, #0
 8014518:	d126      	bne.n	8014568 <f_open+0x1d4>
							res = move_window(fs, dw);
 801451a:	693b      	ldr	r3, [r7, #16]
 801451c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801451e:	4618      	mov	r0, r3
 8014520:	f7fe fc0e 	bl	8012d40 <move_window>
 8014524:	4603      	mov	r3, r0
 8014526:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801452a:	693b      	ldr	r3, [r7, #16]
 801452c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801452e:	3a01      	subs	r2, #1
 8014530:	611a      	str	r2, [r3, #16]
 8014532:	e019      	b.n	8014568 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014534:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014538:	2b00      	cmp	r3, #0
 801453a:	d115      	bne.n	8014568 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801453c:	7ebb      	ldrb	r3, [r7, #26]
 801453e:	f003 0310 	and.w	r3, r3, #16
 8014542:	2b00      	cmp	r3, #0
 8014544:	d003      	beq.n	801454e <f_open+0x1ba>
					res = FR_NO_FILE;
 8014546:	2304      	movs	r3, #4
 8014548:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801454c:	e00c      	b.n	8014568 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801454e:	79fb      	ldrb	r3, [r7, #7]
 8014550:	f003 0302 	and.w	r3, r3, #2
 8014554:	2b00      	cmp	r3, #0
 8014556:	d007      	beq.n	8014568 <f_open+0x1d4>
 8014558:	7ebb      	ldrb	r3, [r7, #26]
 801455a:	f003 0301 	and.w	r3, r3, #1
 801455e:	2b00      	cmp	r3, #0
 8014560:	d002      	beq.n	8014568 <f_open+0x1d4>
						res = FR_DENIED;
 8014562:	2307      	movs	r3, #7
 8014564:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8014568:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801456c:	2b00      	cmp	r3, #0
 801456e:	d128      	bne.n	80145c2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014570:	79fb      	ldrb	r3, [r7, #7]
 8014572:	f003 0308 	and.w	r3, r3, #8
 8014576:	2b00      	cmp	r3, #0
 8014578:	d003      	beq.n	8014582 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801457a:	79fb      	ldrb	r3, [r7, #7]
 801457c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014580:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014582:	693b      	ldr	r3, [r7, #16]
 8014584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801458a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014590:	79fb      	ldrb	r3, [r7, #7]
 8014592:	f023 0301 	bic.w	r3, r3, #1
 8014596:	2b00      	cmp	r3, #0
 8014598:	bf14      	ite	ne
 801459a:	2301      	movne	r3, #1
 801459c:	2300      	moveq	r3, #0
 801459e:	b2db      	uxtb	r3, r3
 80145a0:	461a      	mov	r2, r3
 80145a2:	f107 0314 	add.w	r3, r7, #20
 80145a6:	4611      	mov	r1, r2
 80145a8:	4618      	mov	r0, r3
 80145aa:	f7fe fa97 	bl	8012adc <inc_lock>
 80145ae:	4602      	mov	r2, r0
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	691b      	ldr	r3, [r3, #16]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d102      	bne.n	80145c2 <f_open+0x22e>
 80145bc:	2302      	movs	r3, #2
 80145be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80145c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	f040 8095 	bne.w	80146f6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80145cc:	693b      	ldr	r3, [r7, #16]
 80145ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80145d0:	4611      	mov	r1, r2
 80145d2:	4618      	mov	r0, r3
 80145d4:	f7ff f8bb 	bl	801374e <ld_clust>
 80145d8:	4602      	mov	r2, r0
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80145de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145e0:	331c      	adds	r3, #28
 80145e2:	4618      	mov	r0, r3
 80145e4:	f7fe f8e2 	bl	80127ac <ld_dword>
 80145e8:	4602      	mov	r2, r0
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	2200      	movs	r2, #0
 80145f2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80145f4:	693a      	ldr	r2, [r7, #16]
 80145f6:	68fb      	ldr	r3, [r7, #12]
 80145f8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80145fa:	693b      	ldr	r3, [r7, #16]
 80145fc:	88da      	ldrh	r2, [r3, #6]
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	79fa      	ldrb	r2, [r7, #7]
 8014606:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	2200      	movs	r2, #0
 801460c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	2200      	movs	r2, #0
 8014612:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	2200      	movs	r2, #0
 8014618:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	3330      	adds	r3, #48	; 0x30
 801461e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014622:	2100      	movs	r1, #0
 8014624:	4618      	mov	r0, r3
 8014626:	f7fe f94c 	bl	80128c2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801462a:	79fb      	ldrb	r3, [r7, #7]
 801462c:	f003 0320 	and.w	r3, r3, #32
 8014630:	2b00      	cmp	r3, #0
 8014632:	d060      	beq.n	80146f6 <f_open+0x362>
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	68db      	ldr	r3, [r3, #12]
 8014638:	2b00      	cmp	r3, #0
 801463a:	d05c      	beq.n	80146f6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	68da      	ldr	r2, [r3, #12]
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014644:	693b      	ldr	r3, [r7, #16]
 8014646:	895b      	ldrh	r3, [r3, #10]
 8014648:	025b      	lsls	r3, r3, #9
 801464a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	689b      	ldr	r3, [r3, #8]
 8014650:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	68db      	ldr	r3, [r3, #12]
 8014656:	657b      	str	r3, [r7, #84]	; 0x54
 8014658:	e016      	b.n	8014688 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801465a:	68fb      	ldr	r3, [r7, #12]
 801465c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801465e:	4618      	mov	r0, r3
 8014660:	f7fe fc29 	bl	8012eb6 <get_fat>
 8014664:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8014666:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014668:	2b01      	cmp	r3, #1
 801466a:	d802      	bhi.n	8014672 <f_open+0x2de>
 801466c:	2302      	movs	r3, #2
 801466e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014672:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014678:	d102      	bne.n	8014680 <f_open+0x2ec>
 801467a:	2301      	movs	r3, #1
 801467c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014680:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014684:	1ad3      	subs	r3, r2, r3
 8014686:	657b      	str	r3, [r7, #84]	; 0x54
 8014688:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801468c:	2b00      	cmp	r3, #0
 801468e:	d103      	bne.n	8014698 <f_open+0x304>
 8014690:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014694:	429a      	cmp	r2, r3
 8014696:	d8e0      	bhi.n	801465a <f_open+0x2c6>
				}
				fp->clust = clst;
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801469c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801469e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d127      	bne.n	80146f6 <f_open+0x362>
 80146a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80146a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d022      	beq.n	80146f6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80146b0:	693b      	ldr	r3, [r7, #16]
 80146b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80146b4:	4618      	mov	r0, r3
 80146b6:	f7fe fbdf 	bl	8012e78 <clust2sect>
 80146ba:	6478      	str	r0, [r7, #68]	; 0x44
 80146bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d103      	bne.n	80146ca <f_open+0x336>
						res = FR_INT_ERR;
 80146c2:	2302      	movs	r3, #2
 80146c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80146c8:	e015      	b.n	80146f6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80146ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80146cc:	0a5a      	lsrs	r2, r3, #9
 80146ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80146d0:	441a      	add	r2, r3
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80146d6:	693b      	ldr	r3, [r7, #16]
 80146d8:	7858      	ldrb	r0, [r3, #1]
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	6a1a      	ldr	r2, [r3, #32]
 80146e4:	2301      	movs	r3, #1
 80146e6:	f7fd ffeb 	bl	80126c0 <disk_read>
 80146ea:	4603      	mov	r3, r0
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d002      	beq.n	80146f6 <f_open+0x362>
 80146f0:	2301      	movs	r3, #1
 80146f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80146f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d002      	beq.n	8014704 <f_open+0x370>
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	2200      	movs	r2, #0
 8014702:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014704:	693b      	ldr	r3, [r7, #16]
 8014706:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801470a:	4611      	mov	r1, r2
 801470c:	4618      	mov	r0, r3
 801470e:	f7fe f94b 	bl	80129a8 <unlock_fs>
 8014712:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8014716:	4618      	mov	r0, r3
 8014718:	3760      	adds	r7, #96	; 0x60
 801471a:	46bd      	mov	sp, r7
 801471c:	bd80      	pop	{r7, pc}

0801471e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801471e:	b580      	push	{r7, lr}
 8014720:	b08c      	sub	sp, #48	; 0x30
 8014722:	af00      	add	r7, sp, #0
 8014724:	60f8      	str	r0, [r7, #12]
 8014726:	60b9      	str	r1, [r7, #8]
 8014728:	607a      	str	r2, [r7, #4]
 801472a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801472c:	68bb      	ldr	r3, [r7, #8]
 801472e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014730:	683b      	ldr	r3, [r7, #0]
 8014732:	2200      	movs	r2, #0
 8014734:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	f107 0210 	add.w	r2, r7, #16
 801473c:	4611      	mov	r1, r2
 801473e:	4618      	mov	r0, r3
 8014740:	f7ff fd7c 	bl	801423c <validate>
 8014744:	4603      	mov	r3, r0
 8014746:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801474a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801474e:	2b00      	cmp	r3, #0
 8014750:	d107      	bne.n	8014762 <f_write+0x44>
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	7d5b      	ldrb	r3, [r3, #21]
 8014756:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801475a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801475e:	2b00      	cmp	r3, #0
 8014760:	d009      	beq.n	8014776 <f_write+0x58>
 8014762:	693b      	ldr	r3, [r7, #16]
 8014764:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8014768:	4611      	mov	r1, r2
 801476a:	4618      	mov	r0, r3
 801476c:	f7fe f91c 	bl	80129a8 <unlock_fs>
 8014770:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014774:	e173      	b.n	8014a5e <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	7d1b      	ldrb	r3, [r3, #20]
 801477a:	f003 0302 	and.w	r3, r3, #2
 801477e:	2b00      	cmp	r3, #0
 8014780:	d106      	bne.n	8014790 <f_write+0x72>
 8014782:	693b      	ldr	r3, [r7, #16]
 8014784:	2107      	movs	r1, #7
 8014786:	4618      	mov	r0, r3
 8014788:	f7fe f90e 	bl	80129a8 <unlock_fs>
 801478c:	2307      	movs	r3, #7
 801478e:	e166      	b.n	8014a5e <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	699a      	ldr	r2, [r3, #24]
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	441a      	add	r2, r3
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	699b      	ldr	r3, [r3, #24]
 801479c:	429a      	cmp	r2, r3
 801479e:	f080 814b 	bcs.w	8014a38 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	699b      	ldr	r3, [r3, #24]
 80147a6:	43db      	mvns	r3, r3
 80147a8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80147aa:	e145      	b.n	8014a38 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	699b      	ldr	r3, [r3, #24]
 80147b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	f040 8101 	bne.w	80149bc <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	699b      	ldr	r3, [r3, #24]
 80147be:	0a5b      	lsrs	r3, r3, #9
 80147c0:	693a      	ldr	r2, [r7, #16]
 80147c2:	8952      	ldrh	r2, [r2, #10]
 80147c4:	3a01      	subs	r2, #1
 80147c6:	4013      	ands	r3, r2
 80147c8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80147ca:	69bb      	ldr	r3, [r7, #24]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d14d      	bne.n	801486c <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	699b      	ldr	r3, [r3, #24]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d10c      	bne.n	80147f2 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	689b      	ldr	r3, [r3, #8]
 80147dc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80147de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d11a      	bne.n	801481a <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	2100      	movs	r1, #0
 80147e8:	4618      	mov	r0, r3
 80147ea:	f7fe fd5d 	bl	80132a8 <create_chain>
 80147ee:	62b8      	str	r0, [r7, #40]	; 0x28
 80147f0:	e013      	b.n	801481a <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d007      	beq.n	801480a <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	699b      	ldr	r3, [r3, #24]
 80147fe:	4619      	mov	r1, r3
 8014800:	68f8      	ldr	r0, [r7, #12]
 8014802:	f7fe fde9 	bl	80133d8 <clmt_clust>
 8014806:	62b8      	str	r0, [r7, #40]	; 0x28
 8014808:	e007      	b.n	801481a <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801480a:	68fa      	ldr	r2, [r7, #12]
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	69db      	ldr	r3, [r3, #28]
 8014810:	4619      	mov	r1, r3
 8014812:	4610      	mov	r0, r2
 8014814:	f7fe fd48 	bl	80132a8 <create_chain>
 8014818:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801481a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801481c:	2b00      	cmp	r3, #0
 801481e:	f000 8110 	beq.w	8014a42 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014824:	2b01      	cmp	r3, #1
 8014826:	d109      	bne.n	801483c <f_write+0x11e>
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	2202      	movs	r2, #2
 801482c:	755a      	strb	r2, [r3, #21]
 801482e:	693b      	ldr	r3, [r7, #16]
 8014830:	2102      	movs	r1, #2
 8014832:	4618      	mov	r0, r3
 8014834:	f7fe f8b8 	bl	80129a8 <unlock_fs>
 8014838:	2302      	movs	r3, #2
 801483a:	e110      	b.n	8014a5e <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801483c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801483e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014842:	d109      	bne.n	8014858 <f_write+0x13a>
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	2201      	movs	r2, #1
 8014848:	755a      	strb	r2, [r3, #21]
 801484a:	693b      	ldr	r3, [r7, #16]
 801484c:	2101      	movs	r1, #1
 801484e:	4618      	mov	r0, r3
 8014850:	f7fe f8aa 	bl	80129a8 <unlock_fs>
 8014854:	2301      	movs	r3, #1
 8014856:	e102      	b.n	8014a5e <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801485c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	689b      	ldr	r3, [r3, #8]
 8014862:	2b00      	cmp	r3, #0
 8014864:	d102      	bne.n	801486c <f_write+0x14e>
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801486a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	7d1b      	ldrb	r3, [r3, #20]
 8014870:	b25b      	sxtb	r3, r3
 8014872:	2b00      	cmp	r3, #0
 8014874:	da1d      	bge.n	80148b2 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014876:	693b      	ldr	r3, [r7, #16]
 8014878:	7858      	ldrb	r0, [r3, #1]
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	6a1a      	ldr	r2, [r3, #32]
 8014884:	2301      	movs	r3, #1
 8014886:	f7fd ff3b 	bl	8012700 <disk_write>
 801488a:	4603      	mov	r3, r0
 801488c:	2b00      	cmp	r3, #0
 801488e:	d009      	beq.n	80148a4 <f_write+0x186>
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	2201      	movs	r2, #1
 8014894:	755a      	strb	r2, [r3, #21]
 8014896:	693b      	ldr	r3, [r7, #16]
 8014898:	2101      	movs	r1, #1
 801489a:	4618      	mov	r0, r3
 801489c:	f7fe f884 	bl	80129a8 <unlock_fs>
 80148a0:	2301      	movs	r3, #1
 80148a2:	e0dc      	b.n	8014a5e <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	7d1b      	ldrb	r3, [r3, #20]
 80148a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80148ac:	b2da      	uxtb	r2, r3
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80148b2:	693a      	ldr	r2, [r7, #16]
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	69db      	ldr	r3, [r3, #28]
 80148b8:	4619      	mov	r1, r3
 80148ba:	4610      	mov	r0, r2
 80148bc:	f7fe fadc 	bl	8012e78 <clust2sect>
 80148c0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80148c2:	697b      	ldr	r3, [r7, #20]
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d109      	bne.n	80148dc <f_write+0x1be>
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	2202      	movs	r2, #2
 80148cc:	755a      	strb	r2, [r3, #21]
 80148ce:	693b      	ldr	r3, [r7, #16]
 80148d0:	2102      	movs	r1, #2
 80148d2:	4618      	mov	r0, r3
 80148d4:	f7fe f868 	bl	80129a8 <unlock_fs>
 80148d8:	2302      	movs	r3, #2
 80148da:	e0c0      	b.n	8014a5e <f_write+0x340>
			sect += csect;
 80148dc:	697a      	ldr	r2, [r7, #20]
 80148de:	69bb      	ldr	r3, [r7, #24]
 80148e0:	4413      	add	r3, r2
 80148e2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	0a5b      	lsrs	r3, r3, #9
 80148e8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80148ea:	6a3b      	ldr	r3, [r7, #32]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d041      	beq.n	8014974 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80148f0:	69ba      	ldr	r2, [r7, #24]
 80148f2:	6a3b      	ldr	r3, [r7, #32]
 80148f4:	4413      	add	r3, r2
 80148f6:	693a      	ldr	r2, [r7, #16]
 80148f8:	8952      	ldrh	r2, [r2, #10]
 80148fa:	4293      	cmp	r3, r2
 80148fc:	d905      	bls.n	801490a <f_write+0x1ec>
					cc = fs->csize - csect;
 80148fe:	693b      	ldr	r3, [r7, #16]
 8014900:	895b      	ldrh	r3, [r3, #10]
 8014902:	461a      	mov	r2, r3
 8014904:	69bb      	ldr	r3, [r7, #24]
 8014906:	1ad3      	subs	r3, r2, r3
 8014908:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801490a:	693b      	ldr	r3, [r7, #16]
 801490c:	7858      	ldrb	r0, [r3, #1]
 801490e:	6a3b      	ldr	r3, [r7, #32]
 8014910:	697a      	ldr	r2, [r7, #20]
 8014912:	69f9      	ldr	r1, [r7, #28]
 8014914:	f7fd fef4 	bl	8012700 <disk_write>
 8014918:	4603      	mov	r3, r0
 801491a:	2b00      	cmp	r3, #0
 801491c:	d009      	beq.n	8014932 <f_write+0x214>
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	2201      	movs	r2, #1
 8014922:	755a      	strb	r2, [r3, #21]
 8014924:	693b      	ldr	r3, [r7, #16]
 8014926:	2101      	movs	r1, #1
 8014928:	4618      	mov	r0, r3
 801492a:	f7fe f83d 	bl	80129a8 <unlock_fs>
 801492e:	2301      	movs	r3, #1
 8014930:	e095      	b.n	8014a5e <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	6a1a      	ldr	r2, [r3, #32]
 8014936:	697b      	ldr	r3, [r7, #20]
 8014938:	1ad3      	subs	r3, r2, r3
 801493a:	6a3a      	ldr	r2, [r7, #32]
 801493c:	429a      	cmp	r2, r3
 801493e:	d915      	bls.n	801496c <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	6a1a      	ldr	r2, [r3, #32]
 801494a:	697b      	ldr	r3, [r7, #20]
 801494c:	1ad3      	subs	r3, r2, r3
 801494e:	025b      	lsls	r3, r3, #9
 8014950:	69fa      	ldr	r2, [r7, #28]
 8014952:	4413      	add	r3, r2
 8014954:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014958:	4619      	mov	r1, r3
 801495a:	f7fd ff91 	bl	8012880 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	7d1b      	ldrb	r3, [r3, #20]
 8014962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014966:	b2da      	uxtb	r2, r3
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801496c:	6a3b      	ldr	r3, [r7, #32]
 801496e:	025b      	lsls	r3, r3, #9
 8014970:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8014972:	e044      	b.n	80149fe <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	6a1b      	ldr	r3, [r3, #32]
 8014978:	697a      	ldr	r2, [r7, #20]
 801497a:	429a      	cmp	r2, r3
 801497c:	d01b      	beq.n	80149b6 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	699a      	ldr	r2, [r3, #24]
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014986:	429a      	cmp	r2, r3
 8014988:	d215      	bcs.n	80149b6 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801498a:	693b      	ldr	r3, [r7, #16]
 801498c:	7858      	ldrb	r0, [r3, #1]
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014994:	2301      	movs	r3, #1
 8014996:	697a      	ldr	r2, [r7, #20]
 8014998:	f7fd fe92 	bl	80126c0 <disk_read>
 801499c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d009      	beq.n	80149b6 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	2201      	movs	r2, #1
 80149a6:	755a      	strb	r2, [r3, #21]
 80149a8:	693b      	ldr	r3, [r7, #16]
 80149aa:	2101      	movs	r1, #1
 80149ac:	4618      	mov	r0, r3
 80149ae:	f7fd fffb 	bl	80129a8 <unlock_fs>
 80149b2:	2301      	movs	r3, #1
 80149b4:	e053      	b.n	8014a5e <f_write+0x340>
			}
#endif
			fp->sect = sect;
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	697a      	ldr	r2, [r7, #20]
 80149ba:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	699b      	ldr	r3, [r3, #24]
 80149c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80149c4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80149c8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80149ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	429a      	cmp	r2, r3
 80149d0:	d901      	bls.n	80149d6 <f_write+0x2b8>
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	699b      	ldr	r3, [r3, #24]
 80149e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80149e4:	4413      	add	r3, r2
 80149e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80149e8:	69f9      	ldr	r1, [r7, #28]
 80149ea:	4618      	mov	r0, r3
 80149ec:	f7fd ff48 	bl	8012880 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	7d1b      	ldrb	r3, [r3, #20]
 80149f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80149f8:	b2da      	uxtb	r2, r3
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80149fe:	69fa      	ldr	r2, [r7, #28]
 8014a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a02:	4413      	add	r3, r2
 8014a04:	61fb      	str	r3, [r7, #28]
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	699a      	ldr	r2, [r3, #24]
 8014a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a0c:	441a      	add	r2, r3
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	619a      	str	r2, [r3, #24]
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	68da      	ldr	r2, [r3, #12]
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	699b      	ldr	r3, [r3, #24]
 8014a1a:	429a      	cmp	r2, r3
 8014a1c:	bf38      	it	cc
 8014a1e:	461a      	movcc	r2, r3
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	60da      	str	r2, [r3, #12]
 8014a24:	683b      	ldr	r3, [r7, #0]
 8014a26:	681a      	ldr	r2, [r3, #0]
 8014a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a2a:	441a      	add	r2, r3
 8014a2c:	683b      	ldr	r3, [r7, #0]
 8014a2e:	601a      	str	r2, [r3, #0]
 8014a30:	687a      	ldr	r2, [r7, #4]
 8014a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a34:	1ad3      	subs	r3, r2, r3
 8014a36:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	f47f aeb6 	bne.w	80147ac <f_write+0x8e>
 8014a40:	e000      	b.n	8014a44 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014a42:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	7d1b      	ldrb	r3, [r3, #20]
 8014a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a4c:	b2da      	uxtb	r2, r3
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8014a52:	693b      	ldr	r3, [r7, #16]
 8014a54:	2100      	movs	r1, #0
 8014a56:	4618      	mov	r0, r3
 8014a58:	f7fd ffa6 	bl	80129a8 <unlock_fs>
 8014a5c:	2300      	movs	r3, #0
}
 8014a5e:	4618      	mov	r0, r3
 8014a60:	3730      	adds	r7, #48	; 0x30
 8014a62:	46bd      	mov	sp, r7
 8014a64:	bd80      	pop	{r7, pc}

08014a66 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014a66:	b580      	push	{r7, lr}
 8014a68:	b086      	sub	sp, #24
 8014a6a:	af00      	add	r7, sp, #0
 8014a6c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	f107 0208 	add.w	r2, r7, #8
 8014a74:	4611      	mov	r1, r2
 8014a76:	4618      	mov	r0, r3
 8014a78:	f7ff fbe0 	bl	801423c <validate>
 8014a7c:	4603      	mov	r3, r0
 8014a7e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014a80:	7dfb      	ldrb	r3, [r7, #23]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d16d      	bne.n	8014b62 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	7d1b      	ldrb	r3, [r3, #20]
 8014a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d067      	beq.n	8014b62 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	7d1b      	ldrb	r3, [r3, #20]
 8014a96:	b25b      	sxtb	r3, r3
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	da1a      	bge.n	8014ad2 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8014a9c:	68bb      	ldr	r3, [r7, #8]
 8014a9e:	7858      	ldrb	r0, [r3, #1]
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	6a1a      	ldr	r2, [r3, #32]
 8014aaa:	2301      	movs	r3, #1
 8014aac:	f7fd fe28 	bl	8012700 <disk_write>
 8014ab0:	4603      	mov	r3, r0
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d006      	beq.n	8014ac4 <f_sync+0x5e>
 8014ab6:	68bb      	ldr	r3, [r7, #8]
 8014ab8:	2101      	movs	r1, #1
 8014aba:	4618      	mov	r0, r3
 8014abc:	f7fd ff74 	bl	80129a8 <unlock_fs>
 8014ac0:	2301      	movs	r3, #1
 8014ac2:	e055      	b.n	8014b70 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	7d1b      	ldrb	r3, [r3, #20]
 8014ac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014acc:	b2da      	uxtb	r2, r3
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8014ad2:	f7fb fc15 	bl	8010300 <get_fattime>
 8014ad6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014ad8:	68ba      	ldr	r2, [r7, #8]
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ade:	4619      	mov	r1, r3
 8014ae0:	4610      	mov	r0, r2
 8014ae2:	f7fe f92d 	bl	8012d40 <move_window>
 8014ae6:	4603      	mov	r3, r0
 8014ae8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8014aea:	7dfb      	ldrb	r3, [r7, #23]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d138      	bne.n	8014b62 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014af4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	330b      	adds	r3, #11
 8014afa:	781a      	ldrb	r2, [r3, #0]
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	330b      	adds	r3, #11
 8014b00:	f042 0220 	orr.w	r2, r2, #32
 8014b04:	b2d2      	uxtb	r2, r2
 8014b06:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	6818      	ldr	r0, [r3, #0]
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	689b      	ldr	r3, [r3, #8]
 8014b10:	461a      	mov	r2, r3
 8014b12:	68f9      	ldr	r1, [r7, #12]
 8014b14:	f7fe fe3a 	bl	801378c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	f103 021c 	add.w	r2, r3, #28
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	68db      	ldr	r3, [r3, #12]
 8014b22:	4619      	mov	r1, r3
 8014b24:	4610      	mov	r0, r2
 8014b26:	f7fd fe7f 	bl	8012828 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	3316      	adds	r3, #22
 8014b2e:	6939      	ldr	r1, [r7, #16]
 8014b30:	4618      	mov	r0, r3
 8014b32:	f7fd fe79 	bl	8012828 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	3312      	adds	r3, #18
 8014b3a:	2100      	movs	r1, #0
 8014b3c:	4618      	mov	r0, r3
 8014b3e:	f7fd fe58 	bl	80127f2 <st_word>
					fs->wflag = 1;
 8014b42:	68bb      	ldr	r3, [r7, #8]
 8014b44:	2201      	movs	r2, #1
 8014b46:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014b48:	68bb      	ldr	r3, [r7, #8]
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	f7fe f926 	bl	8012d9c <sync_fs>
 8014b50:	4603      	mov	r3, r0
 8014b52:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	7d1b      	ldrb	r3, [r3, #20]
 8014b58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014b5c:	b2da      	uxtb	r2, r3
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014b62:	68bb      	ldr	r3, [r7, #8]
 8014b64:	7dfa      	ldrb	r2, [r7, #23]
 8014b66:	4611      	mov	r1, r2
 8014b68:	4618      	mov	r0, r3
 8014b6a:	f7fd ff1d 	bl	80129a8 <unlock_fs>
 8014b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014b70:	4618      	mov	r0, r3
 8014b72:	3718      	adds	r7, #24
 8014b74:	46bd      	mov	sp, r7
 8014b76:	bd80      	pop	{r7, pc}

08014b78 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8014b78:	b580      	push	{r7, lr}
 8014b7a:	b084      	sub	sp, #16
 8014b7c:	af00      	add	r7, sp, #0
 8014b7e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014b80:	6878      	ldr	r0, [r7, #4]
 8014b82:	f7ff ff70 	bl	8014a66 <f_sync>
 8014b86:	4603      	mov	r3, r0
 8014b88:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8014b8a:	7bfb      	ldrb	r3, [r7, #15]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d11d      	bne.n	8014bcc <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	f107 0208 	add.w	r2, r7, #8
 8014b96:	4611      	mov	r1, r2
 8014b98:	4618      	mov	r0, r3
 8014b9a:	f7ff fb4f 	bl	801423c <validate>
 8014b9e:	4603      	mov	r3, r0
 8014ba0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014ba2:	7bfb      	ldrb	r3, [r7, #15]
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d111      	bne.n	8014bcc <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	691b      	ldr	r3, [r3, #16]
 8014bac:	4618      	mov	r0, r3
 8014bae:	f7fe f823 	bl	8012bf8 <dec_lock>
 8014bb2:	4603      	mov	r3, r0
 8014bb4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8014bb6:	7bfb      	ldrb	r3, [r7, #15]
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d102      	bne.n	8014bc2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	2200      	movs	r2, #0
 8014bc0:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8014bc2:	68bb      	ldr	r3, [r7, #8]
 8014bc4:	2100      	movs	r1, #0
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	f7fd feee 	bl	80129a8 <unlock_fs>
#endif
		}
	}
	return res;
 8014bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8014bce:	4618      	mov	r0, r3
 8014bd0:	3710      	adds	r7, #16
 8014bd2:	46bd      	mov	sp, r7
 8014bd4:	bd80      	pop	{r7, pc}

08014bd6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8014bd6:	b580      	push	{r7, lr}
 8014bd8:	b090      	sub	sp, #64	; 0x40
 8014bda:	af00      	add	r7, sp, #0
 8014bdc:	6078      	str	r0, [r7, #4]
 8014bde:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	f107 0208 	add.w	r2, r7, #8
 8014be6:	4611      	mov	r1, r2
 8014be8:	4618      	mov	r0, r3
 8014bea:	f7ff fb27 	bl	801423c <validate>
 8014bee:	4603      	mov	r3, r0
 8014bf0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8014bf4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d103      	bne.n	8014c04 <f_lseek+0x2e>
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	7d5b      	ldrb	r3, [r3, #21]
 8014c00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8014c04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d009      	beq.n	8014c20 <f_lseek+0x4a>
 8014c0c:	68bb      	ldr	r3, [r7, #8]
 8014c0e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8014c12:	4611      	mov	r1, r2
 8014c14:	4618      	mov	r0, r3
 8014c16:	f7fd fec7 	bl	80129a8 <unlock_fs>
 8014c1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014c1e:	e229      	b.n	8015074 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	f000 80ea 	beq.w	8014dfe <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8014c2a:	683b      	ldr	r3, [r7, #0]
 8014c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c30:	d164      	bne.n	8014cfc <f_lseek+0x126>
			tbl = fp->cltbl;
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c36:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8014c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c3a:	1d1a      	adds	r2, r3, #4
 8014c3c:	627a      	str	r2, [r7, #36]	; 0x24
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	617b      	str	r3, [r7, #20]
 8014c42:	2302      	movs	r3, #2
 8014c44:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	689b      	ldr	r3, [r3, #8]
 8014c4a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8014c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d044      	beq.n	8014cdc <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8014c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c54:	613b      	str	r3, [r7, #16]
 8014c56:	2300      	movs	r3, #0
 8014c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c5c:	3302      	adds	r3, #2
 8014c5e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8014c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c62:	60fb      	str	r3, [r7, #12]
 8014c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c66:	3301      	adds	r3, #1
 8014c68:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014c6e:	4618      	mov	r0, r3
 8014c70:	f7fe f921 	bl	8012eb6 <get_fat>
 8014c74:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8014c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c78:	2b01      	cmp	r3, #1
 8014c7a:	d809      	bhi.n	8014c90 <f_lseek+0xba>
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	2202      	movs	r2, #2
 8014c80:	755a      	strb	r2, [r3, #21]
 8014c82:	68bb      	ldr	r3, [r7, #8]
 8014c84:	2102      	movs	r1, #2
 8014c86:	4618      	mov	r0, r3
 8014c88:	f7fd fe8e 	bl	80129a8 <unlock_fs>
 8014c8c:	2302      	movs	r3, #2
 8014c8e:	e1f1      	b.n	8015074 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c96:	d109      	bne.n	8014cac <f_lseek+0xd6>
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	2201      	movs	r2, #1
 8014c9c:	755a      	strb	r2, [r3, #21]
 8014c9e:	68bb      	ldr	r3, [r7, #8]
 8014ca0:	2101      	movs	r1, #1
 8014ca2:	4618      	mov	r0, r3
 8014ca4:	f7fd fe80 	bl	80129a8 <unlock_fs>
 8014ca8:	2301      	movs	r3, #1
 8014caa:	e1e3      	b.n	8015074 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	3301      	adds	r3, #1
 8014cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014cb2:	429a      	cmp	r2, r3
 8014cb4:	d0d4      	beq.n	8014c60 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8014cb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014cb8:	697b      	ldr	r3, [r7, #20]
 8014cba:	429a      	cmp	r2, r3
 8014cbc:	d809      	bhi.n	8014cd2 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8014cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cc0:	1d1a      	adds	r2, r3, #4
 8014cc2:	627a      	str	r2, [r7, #36]	; 0x24
 8014cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014cc6:	601a      	str	r2, [r3, #0]
 8014cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cca:	1d1a      	adds	r2, r3, #4
 8014ccc:	627a      	str	r2, [r7, #36]	; 0x24
 8014cce:	693a      	ldr	r2, [r7, #16]
 8014cd0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8014cd2:	68bb      	ldr	r3, [r7, #8]
 8014cd4:	699b      	ldr	r3, [r3, #24]
 8014cd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014cd8:	429a      	cmp	r2, r3
 8014cda:	d3ba      	bcc.n	8014c52 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ce0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014ce2:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8014ce4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014ce6:	697b      	ldr	r3, [r7, #20]
 8014ce8:	429a      	cmp	r2, r3
 8014cea:	d803      	bhi.n	8014cf4 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8014cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cee:	2200      	movs	r2, #0
 8014cf0:	601a      	str	r2, [r3, #0]
 8014cf2:	e1b6      	b.n	8015062 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8014cf4:	2311      	movs	r3, #17
 8014cf6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8014cfa:	e1b2      	b.n	8015062 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	68db      	ldr	r3, [r3, #12]
 8014d00:	683a      	ldr	r2, [r7, #0]
 8014d02:	429a      	cmp	r2, r3
 8014d04:	d902      	bls.n	8014d0c <f_lseek+0x136>
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	68db      	ldr	r3, [r3, #12]
 8014d0a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	683a      	ldr	r2, [r7, #0]
 8014d10:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8014d12:	683b      	ldr	r3, [r7, #0]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	f000 81a4 	beq.w	8015062 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8014d1a:	683b      	ldr	r3, [r7, #0]
 8014d1c:	3b01      	subs	r3, #1
 8014d1e:	4619      	mov	r1, r3
 8014d20:	6878      	ldr	r0, [r7, #4]
 8014d22:	f7fe fb59 	bl	80133d8 <clmt_clust>
 8014d26:	4602      	mov	r2, r0
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8014d2c:	68ba      	ldr	r2, [r7, #8]
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	69db      	ldr	r3, [r3, #28]
 8014d32:	4619      	mov	r1, r3
 8014d34:	4610      	mov	r0, r2
 8014d36:	f7fe f89f 	bl	8012e78 <clust2sect>
 8014d3a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8014d3c:	69bb      	ldr	r3, [r7, #24]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d109      	bne.n	8014d56 <f_lseek+0x180>
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	2202      	movs	r2, #2
 8014d46:	755a      	strb	r2, [r3, #21]
 8014d48:	68bb      	ldr	r3, [r7, #8]
 8014d4a:	2102      	movs	r1, #2
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	f7fd fe2b 	bl	80129a8 <unlock_fs>
 8014d52:	2302      	movs	r3, #2
 8014d54:	e18e      	b.n	8015074 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8014d56:	683b      	ldr	r3, [r7, #0]
 8014d58:	3b01      	subs	r3, #1
 8014d5a:	0a5b      	lsrs	r3, r3, #9
 8014d5c:	68ba      	ldr	r2, [r7, #8]
 8014d5e:	8952      	ldrh	r2, [r2, #10]
 8014d60:	3a01      	subs	r2, #1
 8014d62:	4013      	ands	r3, r2
 8014d64:	69ba      	ldr	r2, [r7, #24]
 8014d66:	4413      	add	r3, r2
 8014d68:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	699b      	ldr	r3, [r3, #24]
 8014d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	f000 8175 	beq.w	8015062 <f_lseek+0x48c>
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	6a1b      	ldr	r3, [r3, #32]
 8014d7c:	69ba      	ldr	r2, [r7, #24]
 8014d7e:	429a      	cmp	r2, r3
 8014d80:	f000 816f 	beq.w	8015062 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	7d1b      	ldrb	r3, [r3, #20]
 8014d88:	b25b      	sxtb	r3, r3
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	da1d      	bge.n	8014dca <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014d8e:	68bb      	ldr	r3, [r7, #8]
 8014d90:	7858      	ldrb	r0, [r3, #1]
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	6a1a      	ldr	r2, [r3, #32]
 8014d9c:	2301      	movs	r3, #1
 8014d9e:	f7fd fcaf 	bl	8012700 <disk_write>
 8014da2:	4603      	mov	r3, r0
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d009      	beq.n	8014dbc <f_lseek+0x1e6>
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	2201      	movs	r2, #1
 8014dac:	755a      	strb	r2, [r3, #21]
 8014dae:	68bb      	ldr	r3, [r7, #8]
 8014db0:	2101      	movs	r1, #1
 8014db2:	4618      	mov	r0, r3
 8014db4:	f7fd fdf8 	bl	80129a8 <unlock_fs>
 8014db8:	2301      	movs	r3, #1
 8014dba:	e15b      	b.n	8015074 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	7d1b      	ldrb	r3, [r3, #20]
 8014dc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014dc4:	b2da      	uxtb	r2, r3
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8014dca:	68bb      	ldr	r3, [r7, #8]
 8014dcc:	7858      	ldrb	r0, [r3, #1]
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014dd4:	2301      	movs	r3, #1
 8014dd6:	69ba      	ldr	r2, [r7, #24]
 8014dd8:	f7fd fc72 	bl	80126c0 <disk_read>
 8014ddc:	4603      	mov	r3, r0
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d009      	beq.n	8014df6 <f_lseek+0x220>
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	2201      	movs	r2, #1
 8014de6:	755a      	strb	r2, [r3, #21]
 8014de8:	68bb      	ldr	r3, [r7, #8]
 8014dea:	2101      	movs	r1, #1
 8014dec:	4618      	mov	r0, r3
 8014dee:	f7fd fddb 	bl	80129a8 <unlock_fs>
 8014df2:	2301      	movs	r3, #1
 8014df4:	e13e      	b.n	8015074 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	69ba      	ldr	r2, [r7, #24]
 8014dfa:	621a      	str	r2, [r3, #32]
 8014dfc:	e131      	b.n	8015062 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	68db      	ldr	r3, [r3, #12]
 8014e02:	683a      	ldr	r2, [r7, #0]
 8014e04:	429a      	cmp	r2, r3
 8014e06:	d908      	bls.n	8014e1a <f_lseek+0x244>
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	7d1b      	ldrb	r3, [r3, #20]
 8014e0c:	f003 0302 	and.w	r3, r3, #2
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d102      	bne.n	8014e1a <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	68db      	ldr	r3, [r3, #12]
 8014e18:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	699b      	ldr	r3, [r3, #24]
 8014e1e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8014e20:	2300      	movs	r3, #0
 8014e22:	637b      	str	r3, [r7, #52]	; 0x34
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014e28:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8014e2a:	683b      	ldr	r3, [r7, #0]
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	f000 80c0 	beq.w	8014fb2 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8014e32:	68bb      	ldr	r3, [r7, #8]
 8014e34:	895b      	ldrh	r3, [r3, #10]
 8014e36:	025b      	lsls	r3, r3, #9
 8014e38:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8014e3a:	6a3b      	ldr	r3, [r7, #32]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d01b      	beq.n	8014e78 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8014e40:	683b      	ldr	r3, [r7, #0]
 8014e42:	1e5a      	subs	r2, r3, #1
 8014e44:	69fb      	ldr	r3, [r7, #28]
 8014e46:	fbb2 f2f3 	udiv	r2, r2, r3
 8014e4a:	6a3b      	ldr	r3, [r7, #32]
 8014e4c:	1e59      	subs	r1, r3, #1
 8014e4e:	69fb      	ldr	r3, [r7, #28]
 8014e50:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8014e54:	429a      	cmp	r2, r3
 8014e56:	d30f      	bcc.n	8014e78 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8014e58:	6a3b      	ldr	r3, [r7, #32]
 8014e5a:	1e5a      	subs	r2, r3, #1
 8014e5c:	69fb      	ldr	r3, [r7, #28]
 8014e5e:	425b      	negs	r3, r3
 8014e60:	401a      	ands	r2, r3
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	699b      	ldr	r3, [r3, #24]
 8014e6a:	683a      	ldr	r2, [r7, #0]
 8014e6c:	1ad3      	subs	r3, r2, r3
 8014e6e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	69db      	ldr	r3, [r3, #28]
 8014e74:	63bb      	str	r3, [r7, #56]	; 0x38
 8014e76:	e02c      	b.n	8014ed2 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	689b      	ldr	r3, [r3, #8]
 8014e7c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8014e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d123      	bne.n	8014ecc <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	2100      	movs	r1, #0
 8014e88:	4618      	mov	r0, r3
 8014e8a:	f7fe fa0d 	bl	80132a8 <create_chain>
 8014e8e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e92:	2b01      	cmp	r3, #1
 8014e94:	d109      	bne.n	8014eaa <f_lseek+0x2d4>
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	2202      	movs	r2, #2
 8014e9a:	755a      	strb	r2, [r3, #21]
 8014e9c:	68bb      	ldr	r3, [r7, #8]
 8014e9e:	2102      	movs	r1, #2
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	f7fd fd81 	bl	80129a8 <unlock_fs>
 8014ea6:	2302      	movs	r3, #2
 8014ea8:	e0e4      	b.n	8015074 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014eb0:	d109      	bne.n	8014ec6 <f_lseek+0x2f0>
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	2201      	movs	r2, #1
 8014eb6:	755a      	strb	r2, [r3, #21]
 8014eb8:	68bb      	ldr	r3, [r7, #8]
 8014eba:	2101      	movs	r1, #1
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	f7fd fd73 	bl	80129a8 <unlock_fs>
 8014ec2:	2301      	movs	r3, #1
 8014ec4:	e0d6      	b.n	8015074 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014eca:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014ed0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8014ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d06c      	beq.n	8014fb2 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8014ed8:	e044      	b.n	8014f64 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8014eda:	683a      	ldr	r2, [r7, #0]
 8014edc:	69fb      	ldr	r3, [r7, #28]
 8014ede:	1ad3      	subs	r3, r2, r3
 8014ee0:	603b      	str	r3, [r7, #0]
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	699a      	ldr	r2, [r3, #24]
 8014ee6:	69fb      	ldr	r3, [r7, #28]
 8014ee8:	441a      	add	r2, r3
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	7d1b      	ldrb	r3, [r3, #20]
 8014ef2:	f003 0302 	and.w	r3, r3, #2
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d00b      	beq.n	8014f12 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014efe:	4618      	mov	r0, r3
 8014f00:	f7fe f9d2 	bl	80132a8 <create_chain>
 8014f04:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8014f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d108      	bne.n	8014f1e <f_lseek+0x348>
							ofs = 0; break;
 8014f0c:	2300      	movs	r3, #0
 8014f0e:	603b      	str	r3, [r7, #0]
 8014f10:	e02c      	b.n	8014f6c <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014f16:	4618      	mov	r0, r3
 8014f18:	f7fd ffcd 	bl	8012eb6 <get_fat>
 8014f1c:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f24:	d109      	bne.n	8014f3a <f_lseek+0x364>
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	2201      	movs	r2, #1
 8014f2a:	755a      	strb	r2, [r3, #21]
 8014f2c:	68bb      	ldr	r3, [r7, #8]
 8014f2e:	2101      	movs	r1, #1
 8014f30:	4618      	mov	r0, r3
 8014f32:	f7fd fd39 	bl	80129a8 <unlock_fs>
 8014f36:	2301      	movs	r3, #1
 8014f38:	e09c      	b.n	8015074 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8014f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f3c:	2b01      	cmp	r3, #1
 8014f3e:	d904      	bls.n	8014f4a <f_lseek+0x374>
 8014f40:	68bb      	ldr	r3, [r7, #8]
 8014f42:	699b      	ldr	r3, [r3, #24]
 8014f44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014f46:	429a      	cmp	r2, r3
 8014f48:	d309      	bcc.n	8014f5e <f_lseek+0x388>
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	2202      	movs	r2, #2
 8014f4e:	755a      	strb	r2, [r3, #21]
 8014f50:	68bb      	ldr	r3, [r7, #8]
 8014f52:	2102      	movs	r1, #2
 8014f54:	4618      	mov	r0, r3
 8014f56:	f7fd fd27 	bl	80129a8 <unlock_fs>
 8014f5a:	2302      	movs	r3, #2
 8014f5c:	e08a      	b.n	8015074 <f_lseek+0x49e>
					fp->clust = clst;
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014f62:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8014f64:	683a      	ldr	r2, [r7, #0]
 8014f66:	69fb      	ldr	r3, [r7, #28]
 8014f68:	429a      	cmp	r2, r3
 8014f6a:	d8b6      	bhi.n	8014eda <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	699a      	ldr	r2, [r3, #24]
 8014f70:	683b      	ldr	r3, [r7, #0]
 8014f72:	441a      	add	r2, r3
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8014f78:	683b      	ldr	r3, [r7, #0]
 8014f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d017      	beq.n	8014fb2 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8014f82:	68bb      	ldr	r3, [r7, #8]
 8014f84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014f86:	4618      	mov	r0, r3
 8014f88:	f7fd ff76 	bl	8012e78 <clust2sect>
 8014f8c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8014f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d109      	bne.n	8014fa8 <f_lseek+0x3d2>
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	2202      	movs	r2, #2
 8014f98:	755a      	strb	r2, [r3, #21]
 8014f9a:	68bb      	ldr	r3, [r7, #8]
 8014f9c:	2102      	movs	r1, #2
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	f7fd fd02 	bl	80129a8 <unlock_fs>
 8014fa4:	2302      	movs	r3, #2
 8014fa6:	e065      	b.n	8015074 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8014fa8:	683b      	ldr	r3, [r7, #0]
 8014faa:	0a5b      	lsrs	r3, r3, #9
 8014fac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014fae:	4413      	add	r3, r2
 8014fb0:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	699a      	ldr	r2, [r3, #24]
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	68db      	ldr	r3, [r3, #12]
 8014fba:	429a      	cmp	r2, r3
 8014fbc:	d90a      	bls.n	8014fd4 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	699a      	ldr	r2, [r3, #24]
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	7d1b      	ldrb	r3, [r3, #20]
 8014fca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014fce:	b2da      	uxtb	r2, r3
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	699b      	ldr	r3, [r3, #24]
 8014fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d040      	beq.n	8015062 <f_lseek+0x48c>
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	6a1b      	ldr	r3, [r3, #32]
 8014fe4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014fe6:	429a      	cmp	r2, r3
 8014fe8:	d03b      	beq.n	8015062 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	7d1b      	ldrb	r3, [r3, #20]
 8014fee:	b25b      	sxtb	r3, r3
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	da1d      	bge.n	8015030 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014ff4:	68bb      	ldr	r3, [r7, #8]
 8014ff6:	7858      	ldrb	r0, [r3, #1]
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	6a1a      	ldr	r2, [r3, #32]
 8015002:	2301      	movs	r3, #1
 8015004:	f7fd fb7c 	bl	8012700 <disk_write>
 8015008:	4603      	mov	r3, r0
 801500a:	2b00      	cmp	r3, #0
 801500c:	d009      	beq.n	8015022 <f_lseek+0x44c>
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	2201      	movs	r2, #1
 8015012:	755a      	strb	r2, [r3, #21]
 8015014:	68bb      	ldr	r3, [r7, #8]
 8015016:	2101      	movs	r1, #1
 8015018:	4618      	mov	r0, r3
 801501a:	f7fd fcc5 	bl	80129a8 <unlock_fs>
 801501e:	2301      	movs	r3, #1
 8015020:	e028      	b.n	8015074 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	7d1b      	ldrb	r3, [r3, #20]
 8015026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801502a:	b2da      	uxtb	r2, r3
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8015030:	68bb      	ldr	r3, [r7, #8]
 8015032:	7858      	ldrb	r0, [r3, #1]
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801503a:	2301      	movs	r3, #1
 801503c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801503e:	f7fd fb3f 	bl	80126c0 <disk_read>
 8015042:	4603      	mov	r3, r0
 8015044:	2b00      	cmp	r3, #0
 8015046:	d009      	beq.n	801505c <f_lseek+0x486>
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	2201      	movs	r2, #1
 801504c:	755a      	strb	r2, [r3, #21]
 801504e:	68bb      	ldr	r3, [r7, #8]
 8015050:	2101      	movs	r1, #1
 8015052:	4618      	mov	r0, r3
 8015054:	f7fd fca8 	bl	80129a8 <unlock_fs>
 8015058:	2301      	movs	r3, #1
 801505a:	e00b      	b.n	8015074 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015060:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8015062:	68bb      	ldr	r3, [r7, #8]
 8015064:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8015068:	4611      	mov	r1, r2
 801506a:	4618      	mov	r0, r3
 801506c:	f7fd fc9c 	bl	80129a8 <unlock_fs>
 8015070:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8015074:	4618      	mov	r0, r3
 8015076:	3740      	adds	r7, #64	; 0x40
 8015078:	46bd      	mov	sp, r7
 801507a:	bd80      	pop	{r7, pc}

0801507c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801507c:	b580      	push	{r7, lr}
 801507e:	b086      	sub	sp, #24
 8015080:	af00      	add	r7, sp, #0
 8015082:	6078      	str	r0, [r7, #4]
 8015084:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	2b00      	cmp	r3, #0
 801508a:	d101      	bne.n	8015090 <f_opendir+0x14>
 801508c:	2309      	movs	r3, #9
 801508e:	e06a      	b.n	8015166 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8015094:	f107 010c 	add.w	r1, r7, #12
 8015098:	463b      	mov	r3, r7
 801509a:	2200      	movs	r2, #0
 801509c:	4618      	mov	r0, r3
 801509e:	f7fe fe79 	bl	8013d94 <find_volume>
 80150a2:	4603      	mov	r3, r0
 80150a4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80150a6:	7dfb      	ldrb	r3, [r7, #23]
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d14f      	bne.n	801514c <f_opendir+0xd0>
		obj->fs = fs;
 80150ac:	68fa      	ldr	r2, [r7, #12]
 80150ae:	693b      	ldr	r3, [r7, #16]
 80150b0:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80150b2:	683b      	ldr	r3, [r7, #0]
 80150b4:	4619      	mov	r1, r3
 80150b6:	6878      	ldr	r0, [r7, #4]
 80150b8:	f7fe fd60 	bl	8013b7c <follow_path>
 80150bc:	4603      	mov	r3, r0
 80150be:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80150c0:	7dfb      	ldrb	r3, [r7, #23]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d13d      	bne.n	8015142 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80150cc:	b25b      	sxtb	r3, r3
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	db12      	blt.n	80150f8 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80150d2:	693b      	ldr	r3, [r7, #16]
 80150d4:	799b      	ldrb	r3, [r3, #6]
 80150d6:	f003 0310 	and.w	r3, r3, #16
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d00a      	beq.n	80150f4 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80150de:	68fa      	ldr	r2, [r7, #12]
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	6a1b      	ldr	r3, [r3, #32]
 80150e4:	4619      	mov	r1, r3
 80150e6:	4610      	mov	r0, r2
 80150e8:	f7fe fb31 	bl	801374e <ld_clust>
 80150ec:	4602      	mov	r2, r0
 80150ee:	693b      	ldr	r3, [r7, #16]
 80150f0:	609a      	str	r2, [r3, #8]
 80150f2:	e001      	b.n	80150f8 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80150f4:	2305      	movs	r3, #5
 80150f6:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80150f8:	7dfb      	ldrb	r3, [r7, #23]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d121      	bne.n	8015142 <f_opendir+0xc6>
				obj->id = fs->id;
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	88da      	ldrh	r2, [r3, #6]
 8015102:	693b      	ldr	r3, [r7, #16]
 8015104:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8015106:	2100      	movs	r1, #0
 8015108:	6878      	ldr	r0, [r7, #4]
 801510a:	f7fe f999 	bl	8013440 <dir_sdi>
 801510e:	4603      	mov	r3, r0
 8015110:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8015112:	7dfb      	ldrb	r3, [r7, #23]
 8015114:	2b00      	cmp	r3, #0
 8015116:	d114      	bne.n	8015142 <f_opendir+0xc6>
					if (obj->sclust) {
 8015118:	693b      	ldr	r3, [r7, #16]
 801511a:	689b      	ldr	r3, [r3, #8]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d00d      	beq.n	801513c <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8015120:	2100      	movs	r1, #0
 8015122:	6878      	ldr	r0, [r7, #4]
 8015124:	f7fd fcda 	bl	8012adc <inc_lock>
 8015128:	4602      	mov	r2, r0
 801512a:	693b      	ldr	r3, [r7, #16]
 801512c:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801512e:	693b      	ldr	r3, [r7, #16]
 8015130:	691b      	ldr	r3, [r3, #16]
 8015132:	2b00      	cmp	r3, #0
 8015134:	d105      	bne.n	8015142 <f_opendir+0xc6>
 8015136:	2312      	movs	r3, #18
 8015138:	75fb      	strb	r3, [r7, #23]
 801513a:	e002      	b.n	8015142 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 801513c:	693b      	ldr	r3, [r7, #16]
 801513e:	2200      	movs	r2, #0
 8015140:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8015142:	7dfb      	ldrb	r3, [r7, #23]
 8015144:	2b04      	cmp	r3, #4
 8015146:	d101      	bne.n	801514c <f_opendir+0xd0>
 8015148:	2305      	movs	r3, #5
 801514a:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801514c:	7dfb      	ldrb	r3, [r7, #23]
 801514e:	2b00      	cmp	r3, #0
 8015150:	d002      	beq.n	8015158 <f_opendir+0xdc>
 8015152:	693b      	ldr	r3, [r7, #16]
 8015154:	2200      	movs	r2, #0
 8015156:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	7dfa      	ldrb	r2, [r7, #23]
 801515c:	4611      	mov	r1, r2
 801515e:	4618      	mov	r0, r3
 8015160:	f7fd fc22 	bl	80129a8 <unlock_fs>
 8015164:	7dfb      	ldrb	r3, [r7, #23]
}
 8015166:	4618      	mov	r0, r3
 8015168:	3718      	adds	r7, #24
 801516a:	46bd      	mov	sp, r7
 801516c:	bd80      	pop	{r7, pc}

0801516e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801516e:	b580      	push	{r7, lr}
 8015170:	b084      	sub	sp, #16
 8015172:	af00      	add	r7, sp, #0
 8015174:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	f107 0208 	add.w	r2, r7, #8
 801517c:	4611      	mov	r1, r2
 801517e:	4618      	mov	r0, r3
 8015180:	f7ff f85c 	bl	801423c <validate>
 8015184:	4603      	mov	r3, r0
 8015186:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015188:	7bfb      	ldrb	r3, [r7, #15]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d115      	bne.n	80151ba <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	691b      	ldr	r3, [r3, #16]
 8015192:	2b00      	cmp	r3, #0
 8015194:	d006      	beq.n	80151a4 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	691b      	ldr	r3, [r3, #16]
 801519a:	4618      	mov	r0, r3
 801519c:	f7fd fd2c 	bl	8012bf8 <dec_lock>
 80151a0:	4603      	mov	r3, r0
 80151a2:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80151a4:	7bfb      	ldrb	r3, [r7, #15]
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d102      	bne.n	80151b0 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	2200      	movs	r2, #0
 80151ae:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 80151b0:	68bb      	ldr	r3, [r7, #8]
 80151b2:	2100      	movs	r1, #0
 80151b4:	4618      	mov	r0, r3
 80151b6:	f7fd fbf7 	bl	80129a8 <unlock_fs>
#endif
	}
	return res;
 80151ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80151bc:	4618      	mov	r0, r3
 80151be:	3710      	adds	r7, #16
 80151c0:	46bd      	mov	sp, r7
 80151c2:	bd80      	pop	{r7, pc}

080151c4 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80151c4:	b580      	push	{r7, lr}
 80151c6:	b084      	sub	sp, #16
 80151c8:	af00      	add	r7, sp, #0
 80151ca:	6078      	str	r0, [r7, #4]
 80151cc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	f107 0208 	add.w	r2, r7, #8
 80151d4:	4611      	mov	r1, r2
 80151d6:	4618      	mov	r0, r3
 80151d8:	f7ff f830 	bl	801423c <validate>
 80151dc:	4603      	mov	r3, r0
 80151de:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80151e0:	7bfb      	ldrb	r3, [r7, #15]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d126      	bne.n	8015234 <f_readdir+0x70>
		if (!fno) {
 80151e6:	683b      	ldr	r3, [r7, #0]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d106      	bne.n	80151fa <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80151ec:	2100      	movs	r1, #0
 80151ee:	6878      	ldr	r0, [r7, #4]
 80151f0:	f7fe f926 	bl	8013440 <dir_sdi>
 80151f4:	4603      	mov	r3, r0
 80151f6:	73fb      	strb	r3, [r7, #15]
 80151f8:	e01c      	b.n	8015234 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80151fa:	2100      	movs	r1, #0
 80151fc:	6878      	ldr	r0, [r7, #4]
 80151fe:	f7fe fae5 	bl	80137cc <dir_read>
 8015202:	4603      	mov	r3, r0
 8015204:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8015206:	7bfb      	ldrb	r3, [r7, #15]
 8015208:	2b04      	cmp	r3, #4
 801520a:	d101      	bne.n	8015210 <f_readdir+0x4c>
 801520c:	2300      	movs	r3, #0
 801520e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8015210:	7bfb      	ldrb	r3, [r7, #15]
 8015212:	2b00      	cmp	r3, #0
 8015214:	d10e      	bne.n	8015234 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8015216:	6839      	ldr	r1, [r7, #0]
 8015218:	6878      	ldr	r0, [r7, #4]
 801521a:	f7fe fbbb 	bl	8013994 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801521e:	2100      	movs	r1, #0
 8015220:	6878      	ldr	r0, [r7, #4]
 8015222:	f7fe f988 	bl	8013536 <dir_next>
 8015226:	4603      	mov	r3, r0
 8015228:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801522a:	7bfb      	ldrb	r3, [r7, #15]
 801522c:	2b04      	cmp	r3, #4
 801522e:	d101      	bne.n	8015234 <f_readdir+0x70>
 8015230:	2300      	movs	r3, #0
 8015232:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8015234:	68bb      	ldr	r3, [r7, #8]
 8015236:	7bfa      	ldrb	r2, [r7, #15]
 8015238:	4611      	mov	r1, r2
 801523a:	4618      	mov	r0, r3
 801523c:	f7fd fbb4 	bl	80129a8 <unlock_fs>
 8015240:	7bfb      	ldrb	r3, [r7, #15]
}
 8015242:	4618      	mov	r0, r3
 8015244:	3710      	adds	r7, #16
 8015246:	46bd      	mov	sp, r7
 8015248:	bd80      	pop	{r7, pc}
	...

0801524c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801524c:	b480      	push	{r7}
 801524e:	b087      	sub	sp, #28
 8015250:	af00      	add	r7, sp, #0
 8015252:	60f8      	str	r0, [r7, #12]
 8015254:	60b9      	str	r1, [r7, #8]
 8015256:	4613      	mov	r3, r2
 8015258:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801525a:	2301      	movs	r3, #1
 801525c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801525e:	2300      	movs	r3, #0
 8015260:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015262:	4b1f      	ldr	r3, [pc, #124]	; (80152e0 <FATFS_LinkDriverEx+0x94>)
 8015264:	7a5b      	ldrb	r3, [r3, #9]
 8015266:	b2db      	uxtb	r3, r3
 8015268:	2b00      	cmp	r3, #0
 801526a:	d131      	bne.n	80152d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801526c:	4b1c      	ldr	r3, [pc, #112]	; (80152e0 <FATFS_LinkDriverEx+0x94>)
 801526e:	7a5b      	ldrb	r3, [r3, #9]
 8015270:	b2db      	uxtb	r3, r3
 8015272:	461a      	mov	r2, r3
 8015274:	4b1a      	ldr	r3, [pc, #104]	; (80152e0 <FATFS_LinkDriverEx+0x94>)
 8015276:	2100      	movs	r1, #0
 8015278:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801527a:	4b19      	ldr	r3, [pc, #100]	; (80152e0 <FATFS_LinkDriverEx+0x94>)
 801527c:	7a5b      	ldrb	r3, [r3, #9]
 801527e:	b2db      	uxtb	r3, r3
 8015280:	4a17      	ldr	r2, [pc, #92]	; (80152e0 <FATFS_LinkDriverEx+0x94>)
 8015282:	009b      	lsls	r3, r3, #2
 8015284:	4413      	add	r3, r2
 8015286:	68fa      	ldr	r2, [r7, #12]
 8015288:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801528a:	4b15      	ldr	r3, [pc, #84]	; (80152e0 <FATFS_LinkDriverEx+0x94>)
 801528c:	7a5b      	ldrb	r3, [r3, #9]
 801528e:	b2db      	uxtb	r3, r3
 8015290:	461a      	mov	r2, r3
 8015292:	4b13      	ldr	r3, [pc, #76]	; (80152e0 <FATFS_LinkDriverEx+0x94>)
 8015294:	4413      	add	r3, r2
 8015296:	79fa      	ldrb	r2, [r7, #7]
 8015298:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801529a:	4b11      	ldr	r3, [pc, #68]	; (80152e0 <FATFS_LinkDriverEx+0x94>)
 801529c:	7a5b      	ldrb	r3, [r3, #9]
 801529e:	b2db      	uxtb	r3, r3
 80152a0:	1c5a      	adds	r2, r3, #1
 80152a2:	b2d1      	uxtb	r1, r2
 80152a4:	4a0e      	ldr	r2, [pc, #56]	; (80152e0 <FATFS_LinkDriverEx+0x94>)
 80152a6:	7251      	strb	r1, [r2, #9]
 80152a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80152aa:	7dbb      	ldrb	r3, [r7, #22]
 80152ac:	3330      	adds	r3, #48	; 0x30
 80152ae:	b2da      	uxtb	r2, r3
 80152b0:	68bb      	ldr	r3, [r7, #8]
 80152b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80152b4:	68bb      	ldr	r3, [r7, #8]
 80152b6:	3301      	adds	r3, #1
 80152b8:	223a      	movs	r2, #58	; 0x3a
 80152ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80152bc:	68bb      	ldr	r3, [r7, #8]
 80152be:	3302      	adds	r3, #2
 80152c0:	222f      	movs	r2, #47	; 0x2f
 80152c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80152c4:	68bb      	ldr	r3, [r7, #8]
 80152c6:	3303      	adds	r3, #3
 80152c8:	2200      	movs	r2, #0
 80152ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80152cc:	2300      	movs	r3, #0
 80152ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80152d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80152d2:	4618      	mov	r0, r3
 80152d4:	371c      	adds	r7, #28
 80152d6:	46bd      	mov	sp, r7
 80152d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152dc:	4770      	bx	lr
 80152de:	bf00      	nop
 80152e0:	2000086c 	.word	0x2000086c

080152e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80152e4:	b580      	push	{r7, lr}
 80152e6:	b082      	sub	sp, #8
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	6078      	str	r0, [r7, #4]
 80152ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80152ee:	2200      	movs	r2, #0
 80152f0:	6839      	ldr	r1, [r7, #0]
 80152f2:	6878      	ldr	r0, [r7, #4]
 80152f4:	f7ff ffaa 	bl	801524c <FATFS_LinkDriverEx>
 80152f8:	4603      	mov	r3, r0
}
 80152fa:	4618      	mov	r0, r3
 80152fc:	3708      	adds	r7, #8
 80152fe:	46bd      	mov	sp, r7
 8015300:	bd80      	pop	{r7, pc}

08015302 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8015302:	b580      	push	{r7, lr}
 8015304:	b084      	sub	sp, #16
 8015306:	af00      	add	r7, sp, #0
 8015308:	4603      	mov	r3, r0
 801530a:	6039      	str	r1, [r7, #0]
 801530c:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 801530e:	2200      	movs	r2, #0
 8015310:	2101      	movs	r1, #1
 8015312:	2001      	movs	r0, #1
 8015314:	f000 f988 	bl	8015628 <osSemaphoreNew>
 8015318:	4602      	mov	r2, r0
 801531a:	683b      	ldr	r3, [r7, #0]
 801531c:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 801531e:	683b      	ldr	r3, [r7, #0]
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	2b00      	cmp	r3, #0
 8015324:	bf14      	ite	ne
 8015326:	2301      	movne	r3, #1
 8015328:	2300      	moveq	r3, #0
 801532a:	b2db      	uxtb	r3, r3
 801532c:	60fb      	str	r3, [r7, #12]

    return ret;
 801532e:	68fb      	ldr	r3, [r7, #12]
}
 8015330:	4618      	mov	r0, r3
 8015332:	3710      	adds	r7, #16
 8015334:	46bd      	mov	sp, r7
 8015336:	bd80      	pop	{r7, pc}

08015338 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8015338:	b580      	push	{r7, lr}
 801533a:	b082      	sub	sp, #8
 801533c:	af00      	add	r7, sp, #0
 801533e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8015340:	6878      	ldr	r0, [r7, #4]
 8015342:	f000 fa91 	bl	8015868 <osSemaphoreDelete>
#endif
    return 1;
 8015346:	2301      	movs	r3, #1
}
 8015348:	4618      	mov	r0, r3
 801534a:	3708      	adds	r7, #8
 801534c:	46bd      	mov	sp, r7
 801534e:	bd80      	pop	{r7, pc}

08015350 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8015350:	b580      	push	{r7, lr}
 8015352:	b084      	sub	sp, #16
 8015354:	af00      	add	r7, sp, #0
 8015356:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8015358:	2300      	movs	r3, #0
 801535a:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 801535c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8015360:	6878      	ldr	r0, [r7, #4]
 8015362:	f000 f9eb 	bl	801573c <osSemaphoreAcquire>
 8015366:	4603      	mov	r3, r0
 8015368:	2b00      	cmp	r3, #0
 801536a:	d101      	bne.n	8015370 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 801536c:	2301      	movs	r3, #1
 801536e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8015370:	68fb      	ldr	r3, [r7, #12]
}
 8015372:	4618      	mov	r0, r3
 8015374:	3710      	adds	r7, #16
 8015376:	46bd      	mov	sp, r7
 8015378:	bd80      	pop	{r7, pc}

0801537a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 801537a:	b580      	push	{r7, lr}
 801537c:	b082      	sub	sp, #8
 801537e:	af00      	add	r7, sp, #0
 8015380:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8015382:	6878      	ldr	r0, [r7, #4]
 8015384:	f000 fa2c 	bl	80157e0 <osSemaphoreRelease>
#endif
}
 8015388:	bf00      	nop
 801538a:	3708      	adds	r7, #8
 801538c:	46bd      	mov	sp, r7
 801538e:	bd80      	pop	{r7, pc}

08015390 <__NVIC_SetPriority>:
{
 8015390:	b480      	push	{r7}
 8015392:	b083      	sub	sp, #12
 8015394:	af00      	add	r7, sp, #0
 8015396:	4603      	mov	r3, r0
 8015398:	6039      	str	r1, [r7, #0]
 801539a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801539c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	db0a      	blt.n	80153ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80153a4:	683b      	ldr	r3, [r7, #0]
 80153a6:	b2da      	uxtb	r2, r3
 80153a8:	490c      	ldr	r1, [pc, #48]	; (80153dc <__NVIC_SetPriority+0x4c>)
 80153aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80153ae:	0112      	lsls	r2, r2, #4
 80153b0:	b2d2      	uxtb	r2, r2
 80153b2:	440b      	add	r3, r1
 80153b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80153b8:	e00a      	b.n	80153d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80153ba:	683b      	ldr	r3, [r7, #0]
 80153bc:	b2da      	uxtb	r2, r3
 80153be:	4908      	ldr	r1, [pc, #32]	; (80153e0 <__NVIC_SetPriority+0x50>)
 80153c0:	79fb      	ldrb	r3, [r7, #7]
 80153c2:	f003 030f 	and.w	r3, r3, #15
 80153c6:	3b04      	subs	r3, #4
 80153c8:	0112      	lsls	r2, r2, #4
 80153ca:	b2d2      	uxtb	r2, r2
 80153cc:	440b      	add	r3, r1
 80153ce:	761a      	strb	r2, [r3, #24]
}
 80153d0:	bf00      	nop
 80153d2:	370c      	adds	r7, #12
 80153d4:	46bd      	mov	sp, r7
 80153d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153da:	4770      	bx	lr
 80153dc:	e000e100 	.word	0xe000e100
 80153e0:	e000ed00 	.word	0xe000ed00

080153e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80153e4:	b580      	push	{r7, lr}
 80153e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80153e8:	4b05      	ldr	r3, [pc, #20]	; (8015400 <SysTick_Handler+0x1c>)
 80153ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80153ec:	f002 fa20 	bl	8017830 <xTaskGetSchedulerState>
 80153f0:	4603      	mov	r3, r0
 80153f2:	2b01      	cmp	r3, #1
 80153f4:	d001      	beq.n	80153fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80153f6:	f003 f907 	bl	8018608 <xPortSysTickHandler>
  }
}
 80153fa:	bf00      	nop
 80153fc:	bd80      	pop	{r7, pc}
 80153fe:	bf00      	nop
 8015400:	e000e010 	.word	0xe000e010

08015404 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8015404:	b580      	push	{r7, lr}
 8015406:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8015408:	2100      	movs	r1, #0
 801540a:	f06f 0004 	mvn.w	r0, #4
 801540e:	f7ff ffbf 	bl	8015390 <__NVIC_SetPriority>
#endif
}
 8015412:	bf00      	nop
 8015414:	bd80      	pop	{r7, pc}
	...

08015418 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8015418:	b480      	push	{r7}
 801541a:	b083      	sub	sp, #12
 801541c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801541e:	f3ef 8305 	mrs	r3, IPSR
 8015422:	603b      	str	r3, [r7, #0]
  return(result);
 8015424:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015426:	2b00      	cmp	r3, #0
 8015428:	d003      	beq.n	8015432 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801542a:	f06f 0305 	mvn.w	r3, #5
 801542e:	607b      	str	r3, [r7, #4]
 8015430:	e00c      	b.n	801544c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8015432:	4b0a      	ldr	r3, [pc, #40]	; (801545c <osKernelInitialize+0x44>)
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d105      	bne.n	8015446 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801543a:	4b08      	ldr	r3, [pc, #32]	; (801545c <osKernelInitialize+0x44>)
 801543c:	2201      	movs	r2, #1
 801543e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8015440:	2300      	movs	r3, #0
 8015442:	607b      	str	r3, [r7, #4]
 8015444:	e002      	b.n	801544c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8015446:	f04f 33ff 	mov.w	r3, #4294967295
 801544a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801544c:	687b      	ldr	r3, [r7, #4]
}
 801544e:	4618      	mov	r0, r3
 8015450:	370c      	adds	r7, #12
 8015452:	46bd      	mov	sp, r7
 8015454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015458:	4770      	bx	lr
 801545a:	bf00      	nop
 801545c:	20000878 	.word	0x20000878

08015460 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8015460:	b580      	push	{r7, lr}
 8015462:	b082      	sub	sp, #8
 8015464:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015466:	f3ef 8305 	mrs	r3, IPSR
 801546a:	603b      	str	r3, [r7, #0]
  return(result);
 801546c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801546e:	2b00      	cmp	r3, #0
 8015470:	d003      	beq.n	801547a <osKernelStart+0x1a>
    stat = osErrorISR;
 8015472:	f06f 0305 	mvn.w	r3, #5
 8015476:	607b      	str	r3, [r7, #4]
 8015478:	e010      	b.n	801549c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801547a:	4b0b      	ldr	r3, [pc, #44]	; (80154a8 <osKernelStart+0x48>)
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	2b01      	cmp	r3, #1
 8015480:	d109      	bne.n	8015496 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8015482:	f7ff ffbf 	bl	8015404 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8015486:	4b08      	ldr	r3, [pc, #32]	; (80154a8 <osKernelStart+0x48>)
 8015488:	2202      	movs	r2, #2
 801548a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801548c:	f001 fd64 	bl	8016f58 <vTaskStartScheduler>
      stat = osOK;
 8015490:	2300      	movs	r3, #0
 8015492:	607b      	str	r3, [r7, #4]
 8015494:	e002      	b.n	801549c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8015496:	f04f 33ff 	mov.w	r3, #4294967295
 801549a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801549c:	687b      	ldr	r3, [r7, #4]
}
 801549e:	4618      	mov	r0, r3
 80154a0:	3708      	adds	r7, #8
 80154a2:	46bd      	mov	sp, r7
 80154a4:	bd80      	pop	{r7, pc}
 80154a6:	bf00      	nop
 80154a8:	20000878 	.word	0x20000878

080154ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80154ac:	b580      	push	{r7, lr}
 80154ae:	b08e      	sub	sp, #56	; 0x38
 80154b0:	af04      	add	r7, sp, #16
 80154b2:	60f8      	str	r0, [r7, #12]
 80154b4:	60b9      	str	r1, [r7, #8]
 80154b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80154b8:	2300      	movs	r3, #0
 80154ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80154bc:	f3ef 8305 	mrs	r3, IPSR
 80154c0:	617b      	str	r3, [r7, #20]
  return(result);
 80154c2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d17e      	bne.n	80155c6 <osThreadNew+0x11a>
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d07b      	beq.n	80155c6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80154ce:	2380      	movs	r3, #128	; 0x80
 80154d0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80154d2:	2318      	movs	r3, #24
 80154d4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80154d6:	2300      	movs	r3, #0
 80154d8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80154da:	f04f 33ff 	mov.w	r3, #4294967295
 80154de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d045      	beq.n	8015572 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d002      	beq.n	80154f4 <osThreadNew+0x48>
        name = attr->name;
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	699b      	ldr	r3, [r3, #24]
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d002      	beq.n	8015502 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	699b      	ldr	r3, [r3, #24]
 8015500:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8015502:	69fb      	ldr	r3, [r7, #28]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d008      	beq.n	801551a <osThreadNew+0x6e>
 8015508:	69fb      	ldr	r3, [r7, #28]
 801550a:	2b38      	cmp	r3, #56	; 0x38
 801550c:	d805      	bhi.n	801551a <osThreadNew+0x6e>
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	685b      	ldr	r3, [r3, #4]
 8015512:	f003 0301 	and.w	r3, r3, #1
 8015516:	2b00      	cmp	r3, #0
 8015518:	d001      	beq.n	801551e <osThreadNew+0x72>
        return (NULL);
 801551a:	2300      	movs	r3, #0
 801551c:	e054      	b.n	80155c8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	695b      	ldr	r3, [r3, #20]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d003      	beq.n	801552e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	695b      	ldr	r3, [r3, #20]
 801552a:	089b      	lsrs	r3, r3, #2
 801552c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	689b      	ldr	r3, [r3, #8]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d00e      	beq.n	8015554 <osThreadNew+0xa8>
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	68db      	ldr	r3, [r3, #12]
 801553a:	2bbb      	cmp	r3, #187	; 0xbb
 801553c:	d90a      	bls.n	8015554 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015542:	2b00      	cmp	r3, #0
 8015544:	d006      	beq.n	8015554 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	695b      	ldr	r3, [r3, #20]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d002      	beq.n	8015554 <osThreadNew+0xa8>
        mem = 1;
 801554e:	2301      	movs	r3, #1
 8015550:	61bb      	str	r3, [r7, #24]
 8015552:	e010      	b.n	8015576 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	689b      	ldr	r3, [r3, #8]
 8015558:	2b00      	cmp	r3, #0
 801555a:	d10c      	bne.n	8015576 <osThreadNew+0xca>
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	68db      	ldr	r3, [r3, #12]
 8015560:	2b00      	cmp	r3, #0
 8015562:	d108      	bne.n	8015576 <osThreadNew+0xca>
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	691b      	ldr	r3, [r3, #16]
 8015568:	2b00      	cmp	r3, #0
 801556a:	d104      	bne.n	8015576 <osThreadNew+0xca>
          mem = 0;
 801556c:	2300      	movs	r3, #0
 801556e:	61bb      	str	r3, [r7, #24]
 8015570:	e001      	b.n	8015576 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8015572:	2300      	movs	r3, #0
 8015574:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8015576:	69bb      	ldr	r3, [r7, #24]
 8015578:	2b01      	cmp	r3, #1
 801557a:	d110      	bne.n	801559e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8015580:	687a      	ldr	r2, [r7, #4]
 8015582:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015584:	9202      	str	r2, [sp, #8]
 8015586:	9301      	str	r3, [sp, #4]
 8015588:	69fb      	ldr	r3, [r7, #28]
 801558a:	9300      	str	r3, [sp, #0]
 801558c:	68bb      	ldr	r3, [r7, #8]
 801558e:	6a3a      	ldr	r2, [r7, #32]
 8015590:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015592:	68f8      	ldr	r0, [r7, #12]
 8015594:	f001 fa82 	bl	8016a9c <xTaskCreateStatic>
 8015598:	4603      	mov	r3, r0
 801559a:	613b      	str	r3, [r7, #16]
 801559c:	e013      	b.n	80155c6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801559e:	69bb      	ldr	r3, [r7, #24]
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d110      	bne.n	80155c6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80155a4:	6a3b      	ldr	r3, [r7, #32]
 80155a6:	b29a      	uxth	r2, r3
 80155a8:	f107 0310 	add.w	r3, r7, #16
 80155ac:	9301      	str	r3, [sp, #4]
 80155ae:	69fb      	ldr	r3, [r7, #28]
 80155b0:	9300      	str	r3, [sp, #0]
 80155b2:	68bb      	ldr	r3, [r7, #8]
 80155b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80155b6:	68f8      	ldr	r0, [r7, #12]
 80155b8:	f001 facd 	bl	8016b56 <xTaskCreate>
 80155bc:	4603      	mov	r3, r0
 80155be:	2b01      	cmp	r3, #1
 80155c0:	d001      	beq.n	80155c6 <osThreadNew+0x11a>
            hTask = NULL;
 80155c2:	2300      	movs	r3, #0
 80155c4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80155c6:	693b      	ldr	r3, [r7, #16]
}
 80155c8:	4618      	mov	r0, r3
 80155ca:	3728      	adds	r7, #40	; 0x28
 80155cc:	46bd      	mov	sp, r7
 80155ce:	bd80      	pop	{r7, pc}

080155d0 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 80155d0:	b580      	push	{r7, lr}
 80155d2:	b082      	sub	sp, #8
 80155d4:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 80155d6:	f002 f91b 	bl	8017810 <xTaskGetCurrentTaskHandle>
 80155da:	6078      	str	r0, [r7, #4]

  return (id);
 80155dc:	687b      	ldr	r3, [r7, #4]
}
 80155de:	4618      	mov	r0, r3
 80155e0:	3708      	adds	r7, #8
 80155e2:	46bd      	mov	sp, r7
 80155e4:	bd80      	pop	{r7, pc}

080155e6 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 80155e6:	b580      	push	{r7, lr}
 80155e8:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 80155ea:	2000      	movs	r0, #0
 80155ec:	f001 fc0e 	bl	8016e0c <vTaskDelete>
#endif
  for (;;);
 80155f0:	e7fe      	b.n	80155f0 <osThreadExit+0xa>

080155f2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80155f2:	b580      	push	{r7, lr}
 80155f4:	b084      	sub	sp, #16
 80155f6:	af00      	add	r7, sp, #0
 80155f8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80155fa:	f3ef 8305 	mrs	r3, IPSR
 80155fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8015600:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015602:	2b00      	cmp	r3, #0
 8015604:	d003      	beq.n	801560e <osDelay+0x1c>
    stat = osErrorISR;
 8015606:	f06f 0305 	mvn.w	r3, #5
 801560a:	60fb      	str	r3, [r7, #12]
 801560c:	e007      	b.n	801561e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801560e:	2300      	movs	r3, #0
 8015610:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	2b00      	cmp	r3, #0
 8015616:	d002      	beq.n	801561e <osDelay+0x2c>
      vTaskDelay(ticks);
 8015618:	6878      	ldr	r0, [r7, #4]
 801561a:	f001 fc69 	bl	8016ef0 <vTaskDelay>
    }
  }

  return (stat);
 801561e:	68fb      	ldr	r3, [r7, #12]
}
 8015620:	4618      	mov	r0, r3
 8015622:	3710      	adds	r7, #16
 8015624:	46bd      	mov	sp, r7
 8015626:	bd80      	pop	{r7, pc}

08015628 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8015628:	b580      	push	{r7, lr}
 801562a:	b08a      	sub	sp, #40	; 0x28
 801562c:	af02      	add	r7, sp, #8
 801562e:	60f8      	str	r0, [r7, #12]
 8015630:	60b9      	str	r1, [r7, #8]
 8015632:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8015634:	2300      	movs	r3, #0
 8015636:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015638:	f3ef 8305 	mrs	r3, IPSR
 801563c:	613b      	str	r3, [r7, #16]
  return(result);
 801563e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8015640:	2b00      	cmp	r3, #0
 8015642:	d175      	bne.n	8015730 <osSemaphoreNew+0x108>
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	2b00      	cmp	r3, #0
 8015648:	d072      	beq.n	8015730 <osSemaphoreNew+0x108>
 801564a:	68ba      	ldr	r2, [r7, #8]
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	429a      	cmp	r2, r3
 8015650:	d86e      	bhi.n	8015730 <osSemaphoreNew+0x108>
    mem = -1;
 8015652:	f04f 33ff 	mov.w	r3, #4294967295
 8015656:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	2b00      	cmp	r3, #0
 801565c:	d015      	beq.n	801568a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	689b      	ldr	r3, [r3, #8]
 8015662:	2b00      	cmp	r3, #0
 8015664:	d006      	beq.n	8015674 <osSemaphoreNew+0x4c>
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	68db      	ldr	r3, [r3, #12]
 801566a:	2b4f      	cmp	r3, #79	; 0x4f
 801566c:	d902      	bls.n	8015674 <osSemaphoreNew+0x4c>
        mem = 1;
 801566e:	2301      	movs	r3, #1
 8015670:	61bb      	str	r3, [r7, #24]
 8015672:	e00c      	b.n	801568e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	689b      	ldr	r3, [r3, #8]
 8015678:	2b00      	cmp	r3, #0
 801567a:	d108      	bne.n	801568e <osSemaphoreNew+0x66>
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	68db      	ldr	r3, [r3, #12]
 8015680:	2b00      	cmp	r3, #0
 8015682:	d104      	bne.n	801568e <osSemaphoreNew+0x66>
          mem = 0;
 8015684:	2300      	movs	r3, #0
 8015686:	61bb      	str	r3, [r7, #24]
 8015688:	e001      	b.n	801568e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 801568a:	2300      	movs	r3, #0
 801568c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 801568e:	69bb      	ldr	r3, [r7, #24]
 8015690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015694:	d04c      	beq.n	8015730 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	2b01      	cmp	r3, #1
 801569a:	d128      	bne.n	80156ee <osSemaphoreNew+0xc6>
        if (mem == 1) {
 801569c:	69bb      	ldr	r3, [r7, #24]
 801569e:	2b01      	cmp	r3, #1
 80156a0:	d10a      	bne.n	80156b8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	689b      	ldr	r3, [r3, #8]
 80156a6:	2203      	movs	r2, #3
 80156a8:	9200      	str	r2, [sp, #0]
 80156aa:	2200      	movs	r2, #0
 80156ac:	2100      	movs	r1, #0
 80156ae:	2001      	movs	r0, #1
 80156b0:	f000 fa4e 	bl	8015b50 <xQueueGenericCreateStatic>
 80156b4:	61f8      	str	r0, [r7, #28]
 80156b6:	e005      	b.n	80156c4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80156b8:	2203      	movs	r2, #3
 80156ba:	2100      	movs	r1, #0
 80156bc:	2001      	movs	r0, #1
 80156be:	f000 fabf 	bl	8015c40 <xQueueGenericCreate>
 80156c2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80156c4:	69fb      	ldr	r3, [r7, #28]
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d022      	beq.n	8015710 <osSemaphoreNew+0xe8>
 80156ca:	68bb      	ldr	r3, [r7, #8]
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d01f      	beq.n	8015710 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80156d0:	2300      	movs	r3, #0
 80156d2:	2200      	movs	r2, #0
 80156d4:	2100      	movs	r1, #0
 80156d6:	69f8      	ldr	r0, [r7, #28]
 80156d8:	f000 fb7a 	bl	8015dd0 <xQueueGenericSend>
 80156dc:	4603      	mov	r3, r0
 80156de:	2b01      	cmp	r3, #1
 80156e0:	d016      	beq.n	8015710 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80156e2:	69f8      	ldr	r0, [r7, #28]
 80156e4:	f001 f806 	bl	80166f4 <vQueueDelete>
            hSemaphore = NULL;
 80156e8:	2300      	movs	r3, #0
 80156ea:	61fb      	str	r3, [r7, #28]
 80156ec:	e010      	b.n	8015710 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80156ee:	69bb      	ldr	r3, [r7, #24]
 80156f0:	2b01      	cmp	r3, #1
 80156f2:	d108      	bne.n	8015706 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	689b      	ldr	r3, [r3, #8]
 80156f8:	461a      	mov	r2, r3
 80156fa:	68b9      	ldr	r1, [r7, #8]
 80156fc:	68f8      	ldr	r0, [r7, #12]
 80156fe:	f000 fafc 	bl	8015cfa <xQueueCreateCountingSemaphoreStatic>
 8015702:	61f8      	str	r0, [r7, #28]
 8015704:	e004      	b.n	8015710 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8015706:	68b9      	ldr	r1, [r7, #8]
 8015708:	68f8      	ldr	r0, [r7, #12]
 801570a:	f000 fb2d 	bl	8015d68 <xQueueCreateCountingSemaphore>
 801570e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8015710:	69fb      	ldr	r3, [r7, #28]
 8015712:	2b00      	cmp	r3, #0
 8015714:	d00c      	beq.n	8015730 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	2b00      	cmp	r3, #0
 801571a:	d003      	beq.n	8015724 <osSemaphoreNew+0xfc>
          name = attr->name;
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	617b      	str	r3, [r7, #20]
 8015722:	e001      	b.n	8015728 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8015724:	2300      	movs	r3, #0
 8015726:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8015728:	6979      	ldr	r1, [r7, #20]
 801572a:	69f8      	ldr	r0, [r7, #28]
 801572c:	f001 f92e 	bl	801698c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8015730:	69fb      	ldr	r3, [r7, #28]
}
 8015732:	4618      	mov	r0, r3
 8015734:	3720      	adds	r7, #32
 8015736:	46bd      	mov	sp, r7
 8015738:	bd80      	pop	{r7, pc}
	...

0801573c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 801573c:	b580      	push	{r7, lr}
 801573e:	b086      	sub	sp, #24
 8015740:	af00      	add	r7, sp, #0
 8015742:	6078      	str	r0, [r7, #4]
 8015744:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801574a:	2300      	movs	r3, #0
 801574c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801574e:	693b      	ldr	r3, [r7, #16]
 8015750:	2b00      	cmp	r3, #0
 8015752:	d103      	bne.n	801575c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8015754:	f06f 0303 	mvn.w	r3, #3
 8015758:	617b      	str	r3, [r7, #20]
 801575a:	e039      	b.n	80157d0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801575c:	f3ef 8305 	mrs	r3, IPSR
 8015760:	60fb      	str	r3, [r7, #12]
  return(result);
 8015762:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015764:	2b00      	cmp	r3, #0
 8015766:	d022      	beq.n	80157ae <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8015768:	683b      	ldr	r3, [r7, #0]
 801576a:	2b00      	cmp	r3, #0
 801576c:	d003      	beq.n	8015776 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 801576e:	f06f 0303 	mvn.w	r3, #3
 8015772:	617b      	str	r3, [r7, #20]
 8015774:	e02c      	b.n	80157d0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8015776:	2300      	movs	r3, #0
 8015778:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801577a:	f107 0308 	add.w	r3, r7, #8
 801577e:	461a      	mov	r2, r3
 8015780:	2100      	movs	r1, #0
 8015782:	6938      	ldr	r0, [r7, #16]
 8015784:	f000 ff36 	bl	80165f4 <xQueueReceiveFromISR>
 8015788:	4603      	mov	r3, r0
 801578a:	2b01      	cmp	r3, #1
 801578c:	d003      	beq.n	8015796 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 801578e:	f06f 0302 	mvn.w	r3, #2
 8015792:	617b      	str	r3, [r7, #20]
 8015794:	e01c      	b.n	80157d0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8015796:	68bb      	ldr	r3, [r7, #8]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d019      	beq.n	80157d0 <osSemaphoreAcquire+0x94>
 801579c:	4b0f      	ldr	r3, [pc, #60]	; (80157dc <osSemaphoreAcquire+0xa0>)
 801579e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80157a2:	601a      	str	r2, [r3, #0]
 80157a4:	f3bf 8f4f 	dsb	sy
 80157a8:	f3bf 8f6f 	isb	sy
 80157ac:	e010      	b.n	80157d0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80157ae:	6839      	ldr	r1, [r7, #0]
 80157b0:	6938      	ldr	r0, [r7, #16]
 80157b2:	f000 fe13 	bl	80163dc <xQueueSemaphoreTake>
 80157b6:	4603      	mov	r3, r0
 80157b8:	2b01      	cmp	r3, #1
 80157ba:	d009      	beq.n	80157d0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80157bc:	683b      	ldr	r3, [r7, #0]
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d003      	beq.n	80157ca <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80157c2:	f06f 0301 	mvn.w	r3, #1
 80157c6:	617b      	str	r3, [r7, #20]
 80157c8:	e002      	b.n	80157d0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80157ca:	f06f 0302 	mvn.w	r3, #2
 80157ce:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80157d0:	697b      	ldr	r3, [r7, #20]
}
 80157d2:	4618      	mov	r0, r3
 80157d4:	3718      	adds	r7, #24
 80157d6:	46bd      	mov	sp, r7
 80157d8:	bd80      	pop	{r7, pc}
 80157da:	bf00      	nop
 80157dc:	e000ed04 	.word	0xe000ed04

080157e0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80157e0:	b580      	push	{r7, lr}
 80157e2:	b086      	sub	sp, #24
 80157e4:	af00      	add	r7, sp, #0
 80157e6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80157ec:	2300      	movs	r3, #0
 80157ee:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80157f0:	693b      	ldr	r3, [r7, #16]
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d103      	bne.n	80157fe <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80157f6:	f06f 0303 	mvn.w	r3, #3
 80157fa:	617b      	str	r3, [r7, #20]
 80157fc:	e02c      	b.n	8015858 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80157fe:	f3ef 8305 	mrs	r3, IPSR
 8015802:	60fb      	str	r3, [r7, #12]
  return(result);
 8015804:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015806:	2b00      	cmp	r3, #0
 8015808:	d01a      	beq.n	8015840 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 801580a:	2300      	movs	r3, #0
 801580c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801580e:	f107 0308 	add.w	r3, r7, #8
 8015812:	4619      	mov	r1, r3
 8015814:	6938      	ldr	r0, [r7, #16]
 8015816:	f000 fc74 	bl	8016102 <xQueueGiveFromISR>
 801581a:	4603      	mov	r3, r0
 801581c:	2b01      	cmp	r3, #1
 801581e:	d003      	beq.n	8015828 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8015820:	f06f 0302 	mvn.w	r3, #2
 8015824:	617b      	str	r3, [r7, #20]
 8015826:	e017      	b.n	8015858 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8015828:	68bb      	ldr	r3, [r7, #8]
 801582a:	2b00      	cmp	r3, #0
 801582c:	d014      	beq.n	8015858 <osSemaphoreRelease+0x78>
 801582e:	4b0d      	ldr	r3, [pc, #52]	; (8015864 <osSemaphoreRelease+0x84>)
 8015830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015834:	601a      	str	r2, [r3, #0]
 8015836:	f3bf 8f4f 	dsb	sy
 801583a:	f3bf 8f6f 	isb	sy
 801583e:	e00b      	b.n	8015858 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015840:	2300      	movs	r3, #0
 8015842:	2200      	movs	r2, #0
 8015844:	2100      	movs	r1, #0
 8015846:	6938      	ldr	r0, [r7, #16]
 8015848:	f000 fac2 	bl	8015dd0 <xQueueGenericSend>
 801584c:	4603      	mov	r3, r0
 801584e:	2b01      	cmp	r3, #1
 8015850:	d002      	beq.n	8015858 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8015852:	f06f 0302 	mvn.w	r3, #2
 8015856:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8015858:	697b      	ldr	r3, [r7, #20]
}
 801585a:	4618      	mov	r0, r3
 801585c:	3718      	adds	r7, #24
 801585e:	46bd      	mov	sp, r7
 8015860:	bd80      	pop	{r7, pc}
 8015862:	bf00      	nop
 8015864:	e000ed04 	.word	0xe000ed04

08015868 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8015868:	b580      	push	{r7, lr}
 801586a:	b086      	sub	sp, #24
 801586c:	af00      	add	r7, sp, #0
 801586e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015874:	f3ef 8305 	mrs	r3, IPSR
 8015878:	60fb      	str	r3, [r7, #12]
  return(result);
 801587a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 801587c:	2b00      	cmp	r3, #0
 801587e:	d003      	beq.n	8015888 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8015880:	f06f 0305 	mvn.w	r3, #5
 8015884:	617b      	str	r3, [r7, #20]
 8015886:	e00e      	b.n	80158a6 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8015888:	693b      	ldr	r3, [r7, #16]
 801588a:	2b00      	cmp	r3, #0
 801588c:	d103      	bne.n	8015896 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 801588e:	f06f 0303 	mvn.w	r3, #3
 8015892:	617b      	str	r3, [r7, #20]
 8015894:	e007      	b.n	80158a6 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8015896:	6938      	ldr	r0, [r7, #16]
 8015898:	f001 f8a2 	bl	80169e0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 801589c:	2300      	movs	r3, #0
 801589e:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 80158a0:	6938      	ldr	r0, [r7, #16]
 80158a2:	f000 ff27 	bl	80166f4 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80158a6:	697b      	ldr	r3, [r7, #20]
}
 80158a8:	4618      	mov	r0, r3
 80158aa:	3718      	adds	r7, #24
 80158ac:	46bd      	mov	sp, r7
 80158ae:	bd80      	pop	{r7, pc}

080158b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80158b0:	b480      	push	{r7}
 80158b2:	b085      	sub	sp, #20
 80158b4:	af00      	add	r7, sp, #0
 80158b6:	60f8      	str	r0, [r7, #12]
 80158b8:	60b9      	str	r1, [r7, #8]
 80158ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	4a07      	ldr	r2, [pc, #28]	; (80158dc <vApplicationGetIdleTaskMemory+0x2c>)
 80158c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80158c2:	68bb      	ldr	r3, [r7, #8]
 80158c4:	4a06      	ldr	r2, [pc, #24]	; (80158e0 <vApplicationGetIdleTaskMemory+0x30>)
 80158c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	2280      	movs	r2, #128	; 0x80
 80158cc:	601a      	str	r2, [r3, #0]
}
 80158ce:	bf00      	nop
 80158d0:	3714      	adds	r7, #20
 80158d2:	46bd      	mov	sp, r7
 80158d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158d8:	4770      	bx	lr
 80158da:	bf00      	nop
 80158dc:	2000087c 	.word	0x2000087c
 80158e0:	20000938 	.word	0x20000938

080158e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80158e4:	b480      	push	{r7}
 80158e6:	b085      	sub	sp, #20
 80158e8:	af00      	add	r7, sp, #0
 80158ea:	60f8      	str	r0, [r7, #12]
 80158ec:	60b9      	str	r1, [r7, #8]
 80158ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	4a07      	ldr	r2, [pc, #28]	; (8015910 <vApplicationGetTimerTaskMemory+0x2c>)
 80158f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80158f6:	68bb      	ldr	r3, [r7, #8]
 80158f8:	4a06      	ldr	r2, [pc, #24]	; (8015914 <vApplicationGetTimerTaskMemory+0x30>)
 80158fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015902:	601a      	str	r2, [r3, #0]
}
 8015904:	bf00      	nop
 8015906:	3714      	adds	r7, #20
 8015908:	46bd      	mov	sp, r7
 801590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801590e:	4770      	bx	lr
 8015910:	20000b38 	.word	0x20000b38
 8015914:	20000bf4 	.word	0x20000bf4

08015918 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015918:	b480      	push	{r7}
 801591a:	b083      	sub	sp, #12
 801591c:	af00      	add	r7, sp, #0
 801591e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	f103 0208 	add.w	r2, r3, #8
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	f04f 32ff 	mov.w	r2, #4294967295
 8015930:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	f103 0208 	add.w	r2, r3, #8
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	f103 0208 	add.w	r2, r3, #8
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	2200      	movs	r2, #0
 801594a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801594c:	bf00      	nop
 801594e:	370c      	adds	r7, #12
 8015950:	46bd      	mov	sp, r7
 8015952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015956:	4770      	bx	lr

08015958 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8015958:	b480      	push	{r7}
 801595a:	b083      	sub	sp, #12
 801595c:	af00      	add	r7, sp, #0
 801595e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	2200      	movs	r2, #0
 8015964:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8015966:	bf00      	nop
 8015968:	370c      	adds	r7, #12
 801596a:	46bd      	mov	sp, r7
 801596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015970:	4770      	bx	lr

08015972 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015972:	b480      	push	{r7}
 8015974:	b085      	sub	sp, #20
 8015976:	af00      	add	r7, sp, #0
 8015978:	6078      	str	r0, [r7, #4]
 801597a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	685b      	ldr	r3, [r3, #4]
 8015980:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015982:	683b      	ldr	r3, [r7, #0]
 8015984:	68fa      	ldr	r2, [r7, #12]
 8015986:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015988:	68fb      	ldr	r3, [r7, #12]
 801598a:	689a      	ldr	r2, [r3, #8]
 801598c:	683b      	ldr	r3, [r7, #0]
 801598e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	689b      	ldr	r3, [r3, #8]
 8015994:	683a      	ldr	r2, [r7, #0]
 8015996:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015998:	68fb      	ldr	r3, [r7, #12]
 801599a:	683a      	ldr	r2, [r7, #0]
 801599c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801599e:	683b      	ldr	r3, [r7, #0]
 80159a0:	687a      	ldr	r2, [r7, #4]
 80159a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	1c5a      	adds	r2, r3, #1
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	601a      	str	r2, [r3, #0]
}
 80159ae:	bf00      	nop
 80159b0:	3714      	adds	r7, #20
 80159b2:	46bd      	mov	sp, r7
 80159b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159b8:	4770      	bx	lr

080159ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80159ba:	b480      	push	{r7}
 80159bc:	b085      	sub	sp, #20
 80159be:	af00      	add	r7, sp, #0
 80159c0:	6078      	str	r0, [r7, #4]
 80159c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80159c4:	683b      	ldr	r3, [r7, #0]
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80159ca:	68bb      	ldr	r3, [r7, #8]
 80159cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159d0:	d103      	bne.n	80159da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	691b      	ldr	r3, [r3, #16]
 80159d6:	60fb      	str	r3, [r7, #12]
 80159d8:	e00c      	b.n	80159f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	3308      	adds	r3, #8
 80159de:	60fb      	str	r3, [r7, #12]
 80159e0:	e002      	b.n	80159e8 <vListInsert+0x2e>
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	685b      	ldr	r3, [r3, #4]
 80159e6:	60fb      	str	r3, [r7, #12]
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	685b      	ldr	r3, [r3, #4]
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	68ba      	ldr	r2, [r7, #8]
 80159f0:	429a      	cmp	r2, r3
 80159f2:	d2f6      	bcs.n	80159e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	685a      	ldr	r2, [r3, #4]
 80159f8:	683b      	ldr	r3, [r7, #0]
 80159fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80159fc:	683b      	ldr	r3, [r7, #0]
 80159fe:	685b      	ldr	r3, [r3, #4]
 8015a00:	683a      	ldr	r2, [r7, #0]
 8015a02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015a04:	683b      	ldr	r3, [r7, #0]
 8015a06:	68fa      	ldr	r2, [r7, #12]
 8015a08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	683a      	ldr	r2, [r7, #0]
 8015a0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015a10:	683b      	ldr	r3, [r7, #0]
 8015a12:	687a      	ldr	r2, [r7, #4]
 8015a14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	1c5a      	adds	r2, r3, #1
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	601a      	str	r2, [r3, #0]
}
 8015a20:	bf00      	nop
 8015a22:	3714      	adds	r7, #20
 8015a24:	46bd      	mov	sp, r7
 8015a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a2a:	4770      	bx	lr

08015a2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8015a2c:	b480      	push	{r7}
 8015a2e:	b085      	sub	sp, #20
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	691b      	ldr	r3, [r3, #16]
 8015a38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	685b      	ldr	r3, [r3, #4]
 8015a3e:	687a      	ldr	r2, [r7, #4]
 8015a40:	6892      	ldr	r2, [r2, #8]
 8015a42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	689b      	ldr	r3, [r3, #8]
 8015a48:	687a      	ldr	r2, [r7, #4]
 8015a4a:	6852      	ldr	r2, [r2, #4]
 8015a4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	685b      	ldr	r3, [r3, #4]
 8015a52:	687a      	ldr	r2, [r7, #4]
 8015a54:	429a      	cmp	r2, r3
 8015a56:	d103      	bne.n	8015a60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	689a      	ldr	r2, [r3, #8]
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	2200      	movs	r2, #0
 8015a64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	1e5a      	subs	r2, r3, #1
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	681b      	ldr	r3, [r3, #0]
}
 8015a74:	4618      	mov	r0, r3
 8015a76:	3714      	adds	r7, #20
 8015a78:	46bd      	mov	sp, r7
 8015a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a7e:	4770      	bx	lr

08015a80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b084      	sub	sp, #16
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	6078      	str	r0, [r7, #4]
 8015a88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d10a      	bne.n	8015aaa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a98:	f383 8811 	msr	BASEPRI, r3
 8015a9c:	f3bf 8f6f 	isb	sy
 8015aa0:	f3bf 8f4f 	dsb	sy
 8015aa4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8015aa6:	bf00      	nop
 8015aa8:	e7fe      	b.n	8015aa8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8015aaa:	f002 fd1b 	bl	80184e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	681a      	ldr	r2, [r3, #0]
 8015ab2:	68fb      	ldr	r3, [r7, #12]
 8015ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ab6:	68f9      	ldr	r1, [r7, #12]
 8015ab8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015aba:	fb01 f303 	mul.w	r3, r1, r3
 8015abe:	441a      	add	r2, r3
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	2200      	movs	r2, #0
 8015ac8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	681a      	ldr	r2, [r3, #0]
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	681a      	ldr	r2, [r3, #0]
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ada:	3b01      	subs	r3, #1
 8015adc:	68f9      	ldr	r1, [r7, #12]
 8015ade:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015ae0:	fb01 f303 	mul.w	r3, r1, r3
 8015ae4:	441a      	add	r2, r3
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	22ff      	movs	r2, #255	; 0xff
 8015aee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	22ff      	movs	r2, #255	; 0xff
 8015af6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8015afa:	683b      	ldr	r3, [r7, #0]
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d114      	bne.n	8015b2a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015b00:	68fb      	ldr	r3, [r7, #12]
 8015b02:	691b      	ldr	r3, [r3, #16]
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d01a      	beq.n	8015b3e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	3310      	adds	r3, #16
 8015b0c:	4618      	mov	r0, r3
 8015b0e:	f001 fcbd 	bl	801748c <xTaskRemoveFromEventList>
 8015b12:	4603      	mov	r3, r0
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d012      	beq.n	8015b3e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8015b18:	4b0c      	ldr	r3, [pc, #48]	; (8015b4c <xQueueGenericReset+0xcc>)
 8015b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b1e:	601a      	str	r2, [r3, #0]
 8015b20:	f3bf 8f4f 	dsb	sy
 8015b24:	f3bf 8f6f 	isb	sy
 8015b28:	e009      	b.n	8015b3e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015b2a:	68fb      	ldr	r3, [r7, #12]
 8015b2c:	3310      	adds	r3, #16
 8015b2e:	4618      	mov	r0, r3
 8015b30:	f7ff fef2 	bl	8015918 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8015b34:	68fb      	ldr	r3, [r7, #12]
 8015b36:	3324      	adds	r3, #36	; 0x24
 8015b38:	4618      	mov	r0, r3
 8015b3a:	f7ff feed 	bl	8015918 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015b3e:	f002 fd01 	bl	8018544 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8015b42:	2301      	movs	r3, #1
}
 8015b44:	4618      	mov	r0, r3
 8015b46:	3710      	adds	r7, #16
 8015b48:	46bd      	mov	sp, r7
 8015b4a:	bd80      	pop	{r7, pc}
 8015b4c:	e000ed04 	.word	0xe000ed04

08015b50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015b50:	b580      	push	{r7, lr}
 8015b52:	b08e      	sub	sp, #56	; 0x38
 8015b54:	af02      	add	r7, sp, #8
 8015b56:	60f8      	str	r0, [r7, #12]
 8015b58:	60b9      	str	r1, [r7, #8]
 8015b5a:	607a      	str	r2, [r7, #4]
 8015b5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d10a      	bne.n	8015b7a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8015b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b68:	f383 8811 	msr	BASEPRI, r3
 8015b6c:	f3bf 8f6f 	isb	sy
 8015b70:	f3bf 8f4f 	dsb	sy
 8015b74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015b76:	bf00      	nop
 8015b78:	e7fe      	b.n	8015b78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015b7a:	683b      	ldr	r3, [r7, #0]
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d10a      	bne.n	8015b96 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8015b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b84:	f383 8811 	msr	BASEPRI, r3
 8015b88:	f3bf 8f6f 	isb	sy
 8015b8c:	f3bf 8f4f 	dsb	sy
 8015b90:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015b92:	bf00      	nop
 8015b94:	e7fe      	b.n	8015b94 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d002      	beq.n	8015ba2 <xQueueGenericCreateStatic+0x52>
 8015b9c:	68bb      	ldr	r3, [r7, #8]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d001      	beq.n	8015ba6 <xQueueGenericCreateStatic+0x56>
 8015ba2:	2301      	movs	r3, #1
 8015ba4:	e000      	b.n	8015ba8 <xQueueGenericCreateStatic+0x58>
 8015ba6:	2300      	movs	r3, #0
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d10a      	bne.n	8015bc2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8015bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bb0:	f383 8811 	msr	BASEPRI, r3
 8015bb4:	f3bf 8f6f 	isb	sy
 8015bb8:	f3bf 8f4f 	dsb	sy
 8015bbc:	623b      	str	r3, [r7, #32]
}
 8015bbe:	bf00      	nop
 8015bc0:	e7fe      	b.n	8015bc0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d102      	bne.n	8015bce <xQueueGenericCreateStatic+0x7e>
 8015bc8:	68bb      	ldr	r3, [r7, #8]
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d101      	bne.n	8015bd2 <xQueueGenericCreateStatic+0x82>
 8015bce:	2301      	movs	r3, #1
 8015bd0:	e000      	b.n	8015bd4 <xQueueGenericCreateStatic+0x84>
 8015bd2:	2300      	movs	r3, #0
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d10a      	bne.n	8015bee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8015bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bdc:	f383 8811 	msr	BASEPRI, r3
 8015be0:	f3bf 8f6f 	isb	sy
 8015be4:	f3bf 8f4f 	dsb	sy
 8015be8:	61fb      	str	r3, [r7, #28]
}
 8015bea:	bf00      	nop
 8015bec:	e7fe      	b.n	8015bec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015bee:	2350      	movs	r3, #80	; 0x50
 8015bf0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8015bf2:	697b      	ldr	r3, [r7, #20]
 8015bf4:	2b50      	cmp	r3, #80	; 0x50
 8015bf6:	d00a      	beq.n	8015c0e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8015bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bfc:	f383 8811 	msr	BASEPRI, r3
 8015c00:	f3bf 8f6f 	isb	sy
 8015c04:	f3bf 8f4f 	dsb	sy
 8015c08:	61bb      	str	r3, [r7, #24]
}
 8015c0a:	bf00      	nop
 8015c0c:	e7fe      	b.n	8015c0c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015c0e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015c10:	683b      	ldr	r3, [r7, #0]
 8015c12:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8015c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d00d      	beq.n	8015c36 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c1c:	2201      	movs	r2, #1
 8015c1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015c22:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8015c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c28:	9300      	str	r3, [sp, #0]
 8015c2a:	4613      	mov	r3, r2
 8015c2c:	687a      	ldr	r2, [r7, #4]
 8015c2e:	68b9      	ldr	r1, [r7, #8]
 8015c30:	68f8      	ldr	r0, [r7, #12]
 8015c32:	f000 f83f 	bl	8015cb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8015c38:	4618      	mov	r0, r3
 8015c3a:	3730      	adds	r7, #48	; 0x30
 8015c3c:	46bd      	mov	sp, r7
 8015c3e:	bd80      	pop	{r7, pc}

08015c40 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015c40:	b580      	push	{r7, lr}
 8015c42:	b08a      	sub	sp, #40	; 0x28
 8015c44:	af02      	add	r7, sp, #8
 8015c46:	60f8      	str	r0, [r7, #12]
 8015c48:	60b9      	str	r1, [r7, #8]
 8015c4a:	4613      	mov	r3, r2
 8015c4c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d10a      	bne.n	8015c6a <xQueueGenericCreate+0x2a>
	__asm volatile
 8015c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c58:	f383 8811 	msr	BASEPRI, r3
 8015c5c:	f3bf 8f6f 	isb	sy
 8015c60:	f3bf 8f4f 	dsb	sy
 8015c64:	613b      	str	r3, [r7, #16]
}
 8015c66:	bf00      	nop
 8015c68:	e7fe      	b.n	8015c68 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	68ba      	ldr	r2, [r7, #8]
 8015c6e:	fb02 f303 	mul.w	r3, r2, r3
 8015c72:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015c74:	69fb      	ldr	r3, [r7, #28]
 8015c76:	3350      	adds	r3, #80	; 0x50
 8015c78:	4618      	mov	r0, r3
 8015c7a:	f002 fd55 	bl	8018728 <pvPortMalloc>
 8015c7e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015c80:	69bb      	ldr	r3, [r7, #24]
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d011      	beq.n	8015caa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8015c86:	69bb      	ldr	r3, [r7, #24]
 8015c88:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015c8a:	697b      	ldr	r3, [r7, #20]
 8015c8c:	3350      	adds	r3, #80	; 0x50
 8015c8e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015c90:	69bb      	ldr	r3, [r7, #24]
 8015c92:	2200      	movs	r2, #0
 8015c94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015c98:	79fa      	ldrb	r2, [r7, #7]
 8015c9a:	69bb      	ldr	r3, [r7, #24]
 8015c9c:	9300      	str	r3, [sp, #0]
 8015c9e:	4613      	mov	r3, r2
 8015ca0:	697a      	ldr	r2, [r7, #20]
 8015ca2:	68b9      	ldr	r1, [r7, #8]
 8015ca4:	68f8      	ldr	r0, [r7, #12]
 8015ca6:	f000 f805 	bl	8015cb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015caa:	69bb      	ldr	r3, [r7, #24]
	}
 8015cac:	4618      	mov	r0, r3
 8015cae:	3720      	adds	r7, #32
 8015cb0:	46bd      	mov	sp, r7
 8015cb2:	bd80      	pop	{r7, pc}

08015cb4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015cb4:	b580      	push	{r7, lr}
 8015cb6:	b084      	sub	sp, #16
 8015cb8:	af00      	add	r7, sp, #0
 8015cba:	60f8      	str	r0, [r7, #12]
 8015cbc:	60b9      	str	r1, [r7, #8]
 8015cbe:	607a      	str	r2, [r7, #4]
 8015cc0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015cc2:	68bb      	ldr	r3, [r7, #8]
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d103      	bne.n	8015cd0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015cc8:	69bb      	ldr	r3, [r7, #24]
 8015cca:	69ba      	ldr	r2, [r7, #24]
 8015ccc:	601a      	str	r2, [r3, #0]
 8015cce:	e002      	b.n	8015cd6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015cd0:	69bb      	ldr	r3, [r7, #24]
 8015cd2:	687a      	ldr	r2, [r7, #4]
 8015cd4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015cd6:	69bb      	ldr	r3, [r7, #24]
 8015cd8:	68fa      	ldr	r2, [r7, #12]
 8015cda:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015cdc:	69bb      	ldr	r3, [r7, #24]
 8015cde:	68ba      	ldr	r2, [r7, #8]
 8015ce0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015ce2:	2101      	movs	r1, #1
 8015ce4:	69b8      	ldr	r0, [r7, #24]
 8015ce6:	f7ff fecb 	bl	8015a80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8015cea:	69bb      	ldr	r3, [r7, #24]
 8015cec:	78fa      	ldrb	r2, [r7, #3]
 8015cee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8015cf2:	bf00      	nop
 8015cf4:	3710      	adds	r7, #16
 8015cf6:	46bd      	mov	sp, r7
 8015cf8:	bd80      	pop	{r7, pc}

08015cfa <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8015cfa:	b580      	push	{r7, lr}
 8015cfc:	b08a      	sub	sp, #40	; 0x28
 8015cfe:	af02      	add	r7, sp, #8
 8015d00:	60f8      	str	r0, [r7, #12]
 8015d02:	60b9      	str	r1, [r7, #8]
 8015d04:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d10a      	bne.n	8015d22 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8015d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d10:	f383 8811 	msr	BASEPRI, r3
 8015d14:	f3bf 8f6f 	isb	sy
 8015d18:	f3bf 8f4f 	dsb	sy
 8015d1c:	61bb      	str	r3, [r7, #24]
}
 8015d1e:	bf00      	nop
 8015d20:	e7fe      	b.n	8015d20 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8015d22:	68ba      	ldr	r2, [r7, #8]
 8015d24:	68fb      	ldr	r3, [r7, #12]
 8015d26:	429a      	cmp	r2, r3
 8015d28:	d90a      	bls.n	8015d40 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8015d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d2e:	f383 8811 	msr	BASEPRI, r3
 8015d32:	f3bf 8f6f 	isb	sy
 8015d36:	f3bf 8f4f 	dsb	sy
 8015d3a:	617b      	str	r3, [r7, #20]
}
 8015d3c:	bf00      	nop
 8015d3e:	e7fe      	b.n	8015d3e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015d40:	2302      	movs	r3, #2
 8015d42:	9300      	str	r3, [sp, #0]
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	2200      	movs	r2, #0
 8015d48:	2100      	movs	r1, #0
 8015d4a:	68f8      	ldr	r0, [r7, #12]
 8015d4c:	f7ff ff00 	bl	8015b50 <xQueueGenericCreateStatic>
 8015d50:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8015d52:	69fb      	ldr	r3, [r7, #28]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d002      	beq.n	8015d5e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015d58:	69fb      	ldr	r3, [r7, #28]
 8015d5a:	68ba      	ldr	r2, [r7, #8]
 8015d5c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8015d5e:	69fb      	ldr	r3, [r7, #28]
	}
 8015d60:	4618      	mov	r0, r3
 8015d62:	3720      	adds	r7, #32
 8015d64:	46bd      	mov	sp, r7
 8015d66:	bd80      	pop	{r7, pc}

08015d68 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8015d68:	b580      	push	{r7, lr}
 8015d6a:	b086      	sub	sp, #24
 8015d6c:	af00      	add	r7, sp, #0
 8015d6e:	6078      	str	r0, [r7, #4]
 8015d70:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d10a      	bne.n	8015d8e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8015d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d7c:	f383 8811 	msr	BASEPRI, r3
 8015d80:	f3bf 8f6f 	isb	sy
 8015d84:	f3bf 8f4f 	dsb	sy
 8015d88:	613b      	str	r3, [r7, #16]
}
 8015d8a:	bf00      	nop
 8015d8c:	e7fe      	b.n	8015d8c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8015d8e:	683a      	ldr	r2, [r7, #0]
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	429a      	cmp	r2, r3
 8015d94:	d90a      	bls.n	8015dac <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8015d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d9a:	f383 8811 	msr	BASEPRI, r3
 8015d9e:	f3bf 8f6f 	isb	sy
 8015da2:	f3bf 8f4f 	dsb	sy
 8015da6:	60fb      	str	r3, [r7, #12]
}
 8015da8:	bf00      	nop
 8015daa:	e7fe      	b.n	8015daa <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015dac:	2202      	movs	r2, #2
 8015dae:	2100      	movs	r1, #0
 8015db0:	6878      	ldr	r0, [r7, #4]
 8015db2:	f7ff ff45 	bl	8015c40 <xQueueGenericCreate>
 8015db6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8015db8:	697b      	ldr	r3, [r7, #20]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d002      	beq.n	8015dc4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015dbe:	697b      	ldr	r3, [r7, #20]
 8015dc0:	683a      	ldr	r2, [r7, #0]
 8015dc2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8015dc4:	697b      	ldr	r3, [r7, #20]
	}
 8015dc6:	4618      	mov	r0, r3
 8015dc8:	3718      	adds	r7, #24
 8015dca:	46bd      	mov	sp, r7
 8015dcc:	bd80      	pop	{r7, pc}
	...

08015dd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015dd0:	b580      	push	{r7, lr}
 8015dd2:	b08e      	sub	sp, #56	; 0x38
 8015dd4:	af00      	add	r7, sp, #0
 8015dd6:	60f8      	str	r0, [r7, #12]
 8015dd8:	60b9      	str	r1, [r7, #8]
 8015dda:	607a      	str	r2, [r7, #4]
 8015ddc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8015dde:	2300      	movs	r3, #0
 8015de0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d10a      	bne.n	8015e02 <xQueueGenericSend+0x32>
	__asm volatile
 8015dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015df0:	f383 8811 	msr	BASEPRI, r3
 8015df4:	f3bf 8f6f 	isb	sy
 8015df8:	f3bf 8f4f 	dsb	sy
 8015dfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015dfe:	bf00      	nop
 8015e00:	e7fe      	b.n	8015e00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015e02:	68bb      	ldr	r3, [r7, #8]
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d103      	bne.n	8015e10 <xQueueGenericSend+0x40>
 8015e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d101      	bne.n	8015e14 <xQueueGenericSend+0x44>
 8015e10:	2301      	movs	r3, #1
 8015e12:	e000      	b.n	8015e16 <xQueueGenericSend+0x46>
 8015e14:	2300      	movs	r3, #0
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d10a      	bne.n	8015e30 <xQueueGenericSend+0x60>
	__asm volatile
 8015e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e1e:	f383 8811 	msr	BASEPRI, r3
 8015e22:	f3bf 8f6f 	isb	sy
 8015e26:	f3bf 8f4f 	dsb	sy
 8015e2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015e2c:	bf00      	nop
 8015e2e:	e7fe      	b.n	8015e2e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015e30:	683b      	ldr	r3, [r7, #0]
 8015e32:	2b02      	cmp	r3, #2
 8015e34:	d103      	bne.n	8015e3e <xQueueGenericSend+0x6e>
 8015e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015e3a:	2b01      	cmp	r3, #1
 8015e3c:	d101      	bne.n	8015e42 <xQueueGenericSend+0x72>
 8015e3e:	2301      	movs	r3, #1
 8015e40:	e000      	b.n	8015e44 <xQueueGenericSend+0x74>
 8015e42:	2300      	movs	r3, #0
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d10a      	bne.n	8015e5e <xQueueGenericSend+0x8e>
	__asm volatile
 8015e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e4c:	f383 8811 	msr	BASEPRI, r3
 8015e50:	f3bf 8f6f 	isb	sy
 8015e54:	f3bf 8f4f 	dsb	sy
 8015e58:	623b      	str	r3, [r7, #32]
}
 8015e5a:	bf00      	nop
 8015e5c:	e7fe      	b.n	8015e5c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015e5e:	f001 fce7 	bl	8017830 <xTaskGetSchedulerState>
 8015e62:	4603      	mov	r3, r0
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d102      	bne.n	8015e6e <xQueueGenericSend+0x9e>
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d101      	bne.n	8015e72 <xQueueGenericSend+0xa2>
 8015e6e:	2301      	movs	r3, #1
 8015e70:	e000      	b.n	8015e74 <xQueueGenericSend+0xa4>
 8015e72:	2300      	movs	r3, #0
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d10a      	bne.n	8015e8e <xQueueGenericSend+0xbe>
	__asm volatile
 8015e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e7c:	f383 8811 	msr	BASEPRI, r3
 8015e80:	f3bf 8f6f 	isb	sy
 8015e84:	f3bf 8f4f 	dsb	sy
 8015e88:	61fb      	str	r3, [r7, #28]
}
 8015e8a:	bf00      	nop
 8015e8c:	e7fe      	b.n	8015e8c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015e8e:	f002 fb29 	bl	80184e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015e9a:	429a      	cmp	r2, r3
 8015e9c:	d302      	bcc.n	8015ea4 <xQueueGenericSend+0xd4>
 8015e9e:	683b      	ldr	r3, [r7, #0]
 8015ea0:	2b02      	cmp	r3, #2
 8015ea2:	d129      	bne.n	8015ef8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015ea4:	683a      	ldr	r2, [r7, #0]
 8015ea6:	68b9      	ldr	r1, [r7, #8]
 8015ea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015eaa:	f000 fc5e 	bl	801676a <prvCopyDataToQueue>
 8015eae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d010      	beq.n	8015eda <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eba:	3324      	adds	r3, #36	; 0x24
 8015ebc:	4618      	mov	r0, r3
 8015ebe:	f001 fae5 	bl	801748c <xTaskRemoveFromEventList>
 8015ec2:	4603      	mov	r3, r0
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d013      	beq.n	8015ef0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015ec8:	4b3f      	ldr	r3, [pc, #252]	; (8015fc8 <xQueueGenericSend+0x1f8>)
 8015eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ece:	601a      	str	r2, [r3, #0]
 8015ed0:	f3bf 8f4f 	dsb	sy
 8015ed4:	f3bf 8f6f 	isb	sy
 8015ed8:	e00a      	b.n	8015ef0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d007      	beq.n	8015ef0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015ee0:	4b39      	ldr	r3, [pc, #228]	; (8015fc8 <xQueueGenericSend+0x1f8>)
 8015ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ee6:	601a      	str	r2, [r3, #0]
 8015ee8:	f3bf 8f4f 	dsb	sy
 8015eec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015ef0:	f002 fb28 	bl	8018544 <vPortExitCritical>
				return pdPASS;
 8015ef4:	2301      	movs	r3, #1
 8015ef6:	e063      	b.n	8015fc0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d103      	bne.n	8015f06 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015efe:	f002 fb21 	bl	8018544 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8015f02:	2300      	movs	r3, #0
 8015f04:	e05c      	b.n	8015fc0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d106      	bne.n	8015f1a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015f0c:	f107 0314 	add.w	r3, r7, #20
 8015f10:	4618      	mov	r0, r3
 8015f12:	f001 fb1f 	bl	8017554 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015f16:	2301      	movs	r3, #1
 8015f18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015f1a:	f002 fb13 	bl	8018544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015f1e:	f001 f88b 	bl	8017038 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015f22:	f002 fadf 	bl	80184e4 <vPortEnterCritical>
 8015f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015f2c:	b25b      	sxtb	r3, r3
 8015f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f32:	d103      	bne.n	8015f3c <xQueueGenericSend+0x16c>
 8015f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f36:	2200      	movs	r2, #0
 8015f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015f42:	b25b      	sxtb	r3, r3
 8015f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f48:	d103      	bne.n	8015f52 <xQueueGenericSend+0x182>
 8015f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f4c:	2200      	movs	r2, #0
 8015f4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015f52:	f002 faf7 	bl	8018544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015f56:	1d3a      	adds	r2, r7, #4
 8015f58:	f107 0314 	add.w	r3, r7, #20
 8015f5c:	4611      	mov	r1, r2
 8015f5e:	4618      	mov	r0, r3
 8015f60:	f001 fb0e 	bl	8017580 <xTaskCheckForTimeOut>
 8015f64:	4603      	mov	r3, r0
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d124      	bne.n	8015fb4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015f6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f6c:	f000 fcf5 	bl	801695a <prvIsQueueFull>
 8015f70:	4603      	mov	r3, r0
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d018      	beq.n	8015fa8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f78:	3310      	adds	r3, #16
 8015f7a:	687a      	ldr	r2, [r7, #4]
 8015f7c:	4611      	mov	r1, r2
 8015f7e:	4618      	mov	r0, r3
 8015f80:	f001 fa34 	bl	80173ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015f84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f86:	f000 fc80 	bl	801688a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015f8a:	f001 f863 	bl	8017054 <xTaskResumeAll>
 8015f8e:	4603      	mov	r3, r0
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	f47f af7c 	bne.w	8015e8e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8015f96:	4b0c      	ldr	r3, [pc, #48]	; (8015fc8 <xQueueGenericSend+0x1f8>)
 8015f98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015f9c:	601a      	str	r2, [r3, #0]
 8015f9e:	f3bf 8f4f 	dsb	sy
 8015fa2:	f3bf 8f6f 	isb	sy
 8015fa6:	e772      	b.n	8015e8e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015fa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015faa:	f000 fc6e 	bl	801688a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015fae:	f001 f851 	bl	8017054 <xTaskResumeAll>
 8015fb2:	e76c      	b.n	8015e8e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015fb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015fb6:	f000 fc68 	bl	801688a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015fba:	f001 f84b 	bl	8017054 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015fbe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015fc0:	4618      	mov	r0, r3
 8015fc2:	3738      	adds	r7, #56	; 0x38
 8015fc4:	46bd      	mov	sp, r7
 8015fc6:	bd80      	pop	{r7, pc}
 8015fc8:	e000ed04 	.word	0xe000ed04

08015fcc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015fcc:	b580      	push	{r7, lr}
 8015fce:	b090      	sub	sp, #64	; 0x40
 8015fd0:	af00      	add	r7, sp, #0
 8015fd2:	60f8      	str	r0, [r7, #12]
 8015fd4:	60b9      	str	r1, [r7, #8]
 8015fd6:	607a      	str	r2, [r7, #4]
 8015fd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8015fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d10a      	bne.n	8015ffa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8015fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fe8:	f383 8811 	msr	BASEPRI, r3
 8015fec:	f3bf 8f6f 	isb	sy
 8015ff0:	f3bf 8f4f 	dsb	sy
 8015ff4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015ff6:	bf00      	nop
 8015ff8:	e7fe      	b.n	8015ff8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015ffa:	68bb      	ldr	r3, [r7, #8]
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d103      	bne.n	8016008 <xQueueGenericSendFromISR+0x3c>
 8016000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016004:	2b00      	cmp	r3, #0
 8016006:	d101      	bne.n	801600c <xQueueGenericSendFromISR+0x40>
 8016008:	2301      	movs	r3, #1
 801600a:	e000      	b.n	801600e <xQueueGenericSendFromISR+0x42>
 801600c:	2300      	movs	r3, #0
 801600e:	2b00      	cmp	r3, #0
 8016010:	d10a      	bne.n	8016028 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8016012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016016:	f383 8811 	msr	BASEPRI, r3
 801601a:	f3bf 8f6f 	isb	sy
 801601e:	f3bf 8f4f 	dsb	sy
 8016022:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016024:	bf00      	nop
 8016026:	e7fe      	b.n	8016026 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016028:	683b      	ldr	r3, [r7, #0]
 801602a:	2b02      	cmp	r3, #2
 801602c:	d103      	bne.n	8016036 <xQueueGenericSendFromISR+0x6a>
 801602e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016032:	2b01      	cmp	r3, #1
 8016034:	d101      	bne.n	801603a <xQueueGenericSendFromISR+0x6e>
 8016036:	2301      	movs	r3, #1
 8016038:	e000      	b.n	801603c <xQueueGenericSendFromISR+0x70>
 801603a:	2300      	movs	r3, #0
 801603c:	2b00      	cmp	r3, #0
 801603e:	d10a      	bne.n	8016056 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8016040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016044:	f383 8811 	msr	BASEPRI, r3
 8016048:	f3bf 8f6f 	isb	sy
 801604c:	f3bf 8f4f 	dsb	sy
 8016050:	623b      	str	r3, [r7, #32]
}
 8016052:	bf00      	nop
 8016054:	e7fe      	b.n	8016054 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016056:	f002 fb27 	bl	80186a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801605a:	f3ef 8211 	mrs	r2, BASEPRI
 801605e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016062:	f383 8811 	msr	BASEPRI, r3
 8016066:	f3bf 8f6f 	isb	sy
 801606a:	f3bf 8f4f 	dsb	sy
 801606e:	61fa      	str	r2, [r7, #28]
 8016070:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8016072:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016074:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801607a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801607c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801607e:	429a      	cmp	r2, r3
 8016080:	d302      	bcc.n	8016088 <xQueueGenericSendFromISR+0xbc>
 8016082:	683b      	ldr	r3, [r7, #0]
 8016084:	2b02      	cmp	r3, #2
 8016086:	d12f      	bne.n	80160e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801608a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801608e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016096:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016098:	683a      	ldr	r2, [r7, #0]
 801609a:	68b9      	ldr	r1, [r7, #8]
 801609c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801609e:	f000 fb64 	bl	801676a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80160a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80160a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160aa:	d112      	bne.n	80160d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80160ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d016      	beq.n	80160e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80160b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160b6:	3324      	adds	r3, #36	; 0x24
 80160b8:	4618      	mov	r0, r3
 80160ba:	f001 f9e7 	bl	801748c <xTaskRemoveFromEventList>
 80160be:	4603      	mov	r3, r0
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d00e      	beq.n	80160e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d00b      	beq.n	80160e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	2201      	movs	r2, #1
 80160ce:	601a      	str	r2, [r3, #0]
 80160d0:	e007      	b.n	80160e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80160d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80160d6:	3301      	adds	r3, #1
 80160d8:	b2db      	uxtb	r3, r3
 80160da:	b25a      	sxtb	r2, r3
 80160dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80160e2:	2301      	movs	r3, #1
 80160e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80160e6:	e001      	b.n	80160ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80160e8:	2300      	movs	r3, #0
 80160ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80160ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160ee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80160f0:	697b      	ldr	r3, [r7, #20]
 80160f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80160f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80160f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80160fa:	4618      	mov	r0, r3
 80160fc:	3740      	adds	r7, #64	; 0x40
 80160fe:	46bd      	mov	sp, r7
 8016100:	bd80      	pop	{r7, pc}

08016102 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016102:	b580      	push	{r7, lr}
 8016104:	b08e      	sub	sp, #56	; 0x38
 8016106:	af00      	add	r7, sp, #0
 8016108:	6078      	str	r0, [r7, #4]
 801610a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8016110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016112:	2b00      	cmp	r3, #0
 8016114:	d10a      	bne.n	801612c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8016116:	f04f 0350 	mov.w	r3, #80	; 0x50
 801611a:	f383 8811 	msr	BASEPRI, r3
 801611e:	f3bf 8f6f 	isb	sy
 8016122:	f3bf 8f4f 	dsb	sy
 8016126:	623b      	str	r3, [r7, #32]
}
 8016128:	bf00      	nop
 801612a:	e7fe      	b.n	801612a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801612c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801612e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016130:	2b00      	cmp	r3, #0
 8016132:	d00a      	beq.n	801614a <xQueueGiveFromISR+0x48>
	__asm volatile
 8016134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016138:	f383 8811 	msr	BASEPRI, r3
 801613c:	f3bf 8f6f 	isb	sy
 8016140:	f3bf 8f4f 	dsb	sy
 8016144:	61fb      	str	r3, [r7, #28]
}
 8016146:	bf00      	nop
 8016148:	e7fe      	b.n	8016148 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801614a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	2b00      	cmp	r3, #0
 8016150:	d103      	bne.n	801615a <xQueueGiveFromISR+0x58>
 8016152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016154:	689b      	ldr	r3, [r3, #8]
 8016156:	2b00      	cmp	r3, #0
 8016158:	d101      	bne.n	801615e <xQueueGiveFromISR+0x5c>
 801615a:	2301      	movs	r3, #1
 801615c:	e000      	b.n	8016160 <xQueueGiveFromISR+0x5e>
 801615e:	2300      	movs	r3, #0
 8016160:	2b00      	cmp	r3, #0
 8016162:	d10a      	bne.n	801617a <xQueueGiveFromISR+0x78>
	__asm volatile
 8016164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016168:	f383 8811 	msr	BASEPRI, r3
 801616c:	f3bf 8f6f 	isb	sy
 8016170:	f3bf 8f4f 	dsb	sy
 8016174:	61bb      	str	r3, [r7, #24]
}
 8016176:	bf00      	nop
 8016178:	e7fe      	b.n	8016178 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801617a:	f002 fa95 	bl	80186a8 <vPortValidateInterruptPriority>
	__asm volatile
 801617e:	f3ef 8211 	mrs	r2, BASEPRI
 8016182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016186:	f383 8811 	msr	BASEPRI, r3
 801618a:	f3bf 8f6f 	isb	sy
 801618e:	f3bf 8f4f 	dsb	sy
 8016192:	617a      	str	r2, [r7, #20]
 8016194:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8016196:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016198:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801619a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801619c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801619e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80161a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80161a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80161a6:	429a      	cmp	r2, r3
 80161a8:	d22b      	bcs.n	8016202 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80161aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80161b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80161b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161b6:	1c5a      	adds	r2, r3, #1
 80161b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80161bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80161c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161c4:	d112      	bne.n	80161ec <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80161c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d016      	beq.n	80161fc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80161ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161d0:	3324      	adds	r3, #36	; 0x24
 80161d2:	4618      	mov	r0, r3
 80161d4:	f001 f95a 	bl	801748c <xTaskRemoveFromEventList>
 80161d8:	4603      	mov	r3, r0
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d00e      	beq.n	80161fc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80161de:	683b      	ldr	r3, [r7, #0]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d00b      	beq.n	80161fc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80161e4:	683b      	ldr	r3, [r7, #0]
 80161e6:	2201      	movs	r2, #1
 80161e8:	601a      	str	r2, [r3, #0]
 80161ea:	e007      	b.n	80161fc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80161ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80161f0:	3301      	adds	r3, #1
 80161f2:	b2db      	uxtb	r3, r3
 80161f4:	b25a      	sxtb	r2, r3
 80161f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80161fc:	2301      	movs	r3, #1
 80161fe:	637b      	str	r3, [r7, #52]	; 0x34
 8016200:	e001      	b.n	8016206 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016202:	2300      	movs	r3, #0
 8016204:	637b      	str	r3, [r7, #52]	; 0x34
 8016206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016208:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	f383 8811 	msr	BASEPRI, r3
}
 8016210:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016214:	4618      	mov	r0, r3
 8016216:	3738      	adds	r7, #56	; 0x38
 8016218:	46bd      	mov	sp, r7
 801621a:	bd80      	pop	{r7, pc}

0801621c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801621c:	b580      	push	{r7, lr}
 801621e:	b08c      	sub	sp, #48	; 0x30
 8016220:	af00      	add	r7, sp, #0
 8016222:	60f8      	str	r0, [r7, #12]
 8016224:	60b9      	str	r1, [r7, #8]
 8016226:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8016228:	2300      	movs	r3, #0
 801622a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016232:	2b00      	cmp	r3, #0
 8016234:	d10a      	bne.n	801624c <xQueueReceive+0x30>
	__asm volatile
 8016236:	f04f 0350 	mov.w	r3, #80	; 0x50
 801623a:	f383 8811 	msr	BASEPRI, r3
 801623e:	f3bf 8f6f 	isb	sy
 8016242:	f3bf 8f4f 	dsb	sy
 8016246:	623b      	str	r3, [r7, #32]
}
 8016248:	bf00      	nop
 801624a:	e7fe      	b.n	801624a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801624c:	68bb      	ldr	r3, [r7, #8]
 801624e:	2b00      	cmp	r3, #0
 8016250:	d103      	bne.n	801625a <xQueueReceive+0x3e>
 8016252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016256:	2b00      	cmp	r3, #0
 8016258:	d101      	bne.n	801625e <xQueueReceive+0x42>
 801625a:	2301      	movs	r3, #1
 801625c:	e000      	b.n	8016260 <xQueueReceive+0x44>
 801625e:	2300      	movs	r3, #0
 8016260:	2b00      	cmp	r3, #0
 8016262:	d10a      	bne.n	801627a <xQueueReceive+0x5e>
	__asm volatile
 8016264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016268:	f383 8811 	msr	BASEPRI, r3
 801626c:	f3bf 8f6f 	isb	sy
 8016270:	f3bf 8f4f 	dsb	sy
 8016274:	61fb      	str	r3, [r7, #28]
}
 8016276:	bf00      	nop
 8016278:	e7fe      	b.n	8016278 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801627a:	f001 fad9 	bl	8017830 <xTaskGetSchedulerState>
 801627e:	4603      	mov	r3, r0
 8016280:	2b00      	cmp	r3, #0
 8016282:	d102      	bne.n	801628a <xQueueReceive+0x6e>
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	2b00      	cmp	r3, #0
 8016288:	d101      	bne.n	801628e <xQueueReceive+0x72>
 801628a:	2301      	movs	r3, #1
 801628c:	e000      	b.n	8016290 <xQueueReceive+0x74>
 801628e:	2300      	movs	r3, #0
 8016290:	2b00      	cmp	r3, #0
 8016292:	d10a      	bne.n	80162aa <xQueueReceive+0x8e>
	__asm volatile
 8016294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016298:	f383 8811 	msr	BASEPRI, r3
 801629c:	f3bf 8f6f 	isb	sy
 80162a0:	f3bf 8f4f 	dsb	sy
 80162a4:	61bb      	str	r3, [r7, #24]
}
 80162a6:	bf00      	nop
 80162a8:	e7fe      	b.n	80162a8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80162aa:	f002 f91b 	bl	80184e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80162ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80162b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80162b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d01f      	beq.n	80162fa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80162ba:	68b9      	ldr	r1, [r7, #8]
 80162bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80162be:	f000 fabe 	bl	801683e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80162c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162c4:	1e5a      	subs	r2, r3, #1
 80162c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80162ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162cc:	691b      	ldr	r3, [r3, #16]
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d00f      	beq.n	80162f2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80162d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162d4:	3310      	adds	r3, #16
 80162d6:	4618      	mov	r0, r3
 80162d8:	f001 f8d8 	bl	801748c <xTaskRemoveFromEventList>
 80162dc:	4603      	mov	r3, r0
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d007      	beq.n	80162f2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80162e2:	4b3d      	ldr	r3, [pc, #244]	; (80163d8 <xQueueReceive+0x1bc>)
 80162e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80162e8:	601a      	str	r2, [r3, #0]
 80162ea:	f3bf 8f4f 	dsb	sy
 80162ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80162f2:	f002 f927 	bl	8018544 <vPortExitCritical>
				return pdPASS;
 80162f6:	2301      	movs	r3, #1
 80162f8:	e069      	b.n	80163ce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d103      	bne.n	8016308 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016300:	f002 f920 	bl	8018544 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016304:	2300      	movs	r3, #0
 8016306:	e062      	b.n	80163ce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801630a:	2b00      	cmp	r3, #0
 801630c:	d106      	bne.n	801631c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801630e:	f107 0310 	add.w	r3, r7, #16
 8016312:	4618      	mov	r0, r3
 8016314:	f001 f91e 	bl	8017554 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016318:	2301      	movs	r3, #1
 801631a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801631c:	f002 f912 	bl	8018544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016320:	f000 fe8a 	bl	8017038 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016324:	f002 f8de 	bl	80184e4 <vPortEnterCritical>
 8016328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801632a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801632e:	b25b      	sxtb	r3, r3
 8016330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016334:	d103      	bne.n	801633e <xQueueReceive+0x122>
 8016336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016338:	2200      	movs	r2, #0
 801633a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801633e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016340:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016344:	b25b      	sxtb	r3, r3
 8016346:	f1b3 3fff 	cmp.w	r3, #4294967295
 801634a:	d103      	bne.n	8016354 <xQueueReceive+0x138>
 801634c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801634e:	2200      	movs	r2, #0
 8016350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016354:	f002 f8f6 	bl	8018544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016358:	1d3a      	adds	r2, r7, #4
 801635a:	f107 0310 	add.w	r3, r7, #16
 801635e:	4611      	mov	r1, r2
 8016360:	4618      	mov	r0, r3
 8016362:	f001 f90d 	bl	8017580 <xTaskCheckForTimeOut>
 8016366:	4603      	mov	r3, r0
 8016368:	2b00      	cmp	r3, #0
 801636a:	d123      	bne.n	80163b4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801636c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801636e:	f000 fade 	bl	801692e <prvIsQueueEmpty>
 8016372:	4603      	mov	r3, r0
 8016374:	2b00      	cmp	r3, #0
 8016376:	d017      	beq.n	80163a8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801637a:	3324      	adds	r3, #36	; 0x24
 801637c:	687a      	ldr	r2, [r7, #4]
 801637e:	4611      	mov	r1, r2
 8016380:	4618      	mov	r0, r3
 8016382:	f001 f833 	bl	80173ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016386:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016388:	f000 fa7f 	bl	801688a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801638c:	f000 fe62 	bl	8017054 <xTaskResumeAll>
 8016390:	4603      	mov	r3, r0
 8016392:	2b00      	cmp	r3, #0
 8016394:	d189      	bne.n	80162aa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8016396:	4b10      	ldr	r3, [pc, #64]	; (80163d8 <xQueueReceive+0x1bc>)
 8016398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801639c:	601a      	str	r2, [r3, #0]
 801639e:	f3bf 8f4f 	dsb	sy
 80163a2:	f3bf 8f6f 	isb	sy
 80163a6:	e780      	b.n	80162aa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80163a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80163aa:	f000 fa6e 	bl	801688a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80163ae:	f000 fe51 	bl	8017054 <xTaskResumeAll>
 80163b2:	e77a      	b.n	80162aa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80163b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80163b6:	f000 fa68 	bl	801688a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80163ba:	f000 fe4b 	bl	8017054 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80163be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80163c0:	f000 fab5 	bl	801692e <prvIsQueueEmpty>
 80163c4:	4603      	mov	r3, r0
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	f43f af6f 	beq.w	80162aa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80163cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80163ce:	4618      	mov	r0, r3
 80163d0:	3730      	adds	r7, #48	; 0x30
 80163d2:	46bd      	mov	sp, r7
 80163d4:	bd80      	pop	{r7, pc}
 80163d6:	bf00      	nop
 80163d8:	e000ed04 	.word	0xe000ed04

080163dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80163dc:	b580      	push	{r7, lr}
 80163de:	b08e      	sub	sp, #56	; 0x38
 80163e0:	af00      	add	r7, sp, #0
 80163e2:	6078      	str	r0, [r7, #4]
 80163e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80163e6:	2300      	movs	r3, #0
 80163e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80163ee:	2300      	movs	r3, #0
 80163f0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80163f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d10a      	bne.n	801640e <xQueueSemaphoreTake+0x32>
	__asm volatile
 80163f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163fc:	f383 8811 	msr	BASEPRI, r3
 8016400:	f3bf 8f6f 	isb	sy
 8016404:	f3bf 8f4f 	dsb	sy
 8016408:	623b      	str	r3, [r7, #32]
}
 801640a:	bf00      	nop
 801640c:	e7fe      	b.n	801640c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801640e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016412:	2b00      	cmp	r3, #0
 8016414:	d00a      	beq.n	801642c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8016416:	f04f 0350 	mov.w	r3, #80	; 0x50
 801641a:	f383 8811 	msr	BASEPRI, r3
 801641e:	f3bf 8f6f 	isb	sy
 8016422:	f3bf 8f4f 	dsb	sy
 8016426:	61fb      	str	r3, [r7, #28]
}
 8016428:	bf00      	nop
 801642a:	e7fe      	b.n	801642a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801642c:	f001 fa00 	bl	8017830 <xTaskGetSchedulerState>
 8016430:	4603      	mov	r3, r0
 8016432:	2b00      	cmp	r3, #0
 8016434:	d102      	bne.n	801643c <xQueueSemaphoreTake+0x60>
 8016436:	683b      	ldr	r3, [r7, #0]
 8016438:	2b00      	cmp	r3, #0
 801643a:	d101      	bne.n	8016440 <xQueueSemaphoreTake+0x64>
 801643c:	2301      	movs	r3, #1
 801643e:	e000      	b.n	8016442 <xQueueSemaphoreTake+0x66>
 8016440:	2300      	movs	r3, #0
 8016442:	2b00      	cmp	r3, #0
 8016444:	d10a      	bne.n	801645c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8016446:	f04f 0350 	mov.w	r3, #80	; 0x50
 801644a:	f383 8811 	msr	BASEPRI, r3
 801644e:	f3bf 8f6f 	isb	sy
 8016452:	f3bf 8f4f 	dsb	sy
 8016456:	61bb      	str	r3, [r7, #24]
}
 8016458:	bf00      	nop
 801645a:	e7fe      	b.n	801645a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801645c:	f002 f842 	bl	80184e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8016460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016464:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8016466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016468:	2b00      	cmp	r3, #0
 801646a:	d024      	beq.n	80164b6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801646c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801646e:	1e5a      	subs	r2, r3, #1
 8016470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016472:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	2b00      	cmp	r3, #0
 801647a:	d104      	bne.n	8016486 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801647c:	f001 fb4e 	bl	8017b1c <pvTaskIncrementMutexHeldCount>
 8016480:	4602      	mov	r2, r0
 8016482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016484:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016488:	691b      	ldr	r3, [r3, #16]
 801648a:	2b00      	cmp	r3, #0
 801648c:	d00f      	beq.n	80164ae <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801648e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016490:	3310      	adds	r3, #16
 8016492:	4618      	mov	r0, r3
 8016494:	f000 fffa 	bl	801748c <xTaskRemoveFromEventList>
 8016498:	4603      	mov	r3, r0
 801649a:	2b00      	cmp	r3, #0
 801649c:	d007      	beq.n	80164ae <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801649e:	4b54      	ldr	r3, [pc, #336]	; (80165f0 <xQueueSemaphoreTake+0x214>)
 80164a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80164a4:	601a      	str	r2, [r3, #0]
 80164a6:	f3bf 8f4f 	dsb	sy
 80164aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80164ae:	f002 f849 	bl	8018544 <vPortExitCritical>
				return pdPASS;
 80164b2:	2301      	movs	r3, #1
 80164b4:	e097      	b.n	80165e6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80164b6:	683b      	ldr	r3, [r7, #0]
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d111      	bne.n	80164e0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80164bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d00a      	beq.n	80164d8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80164c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164c6:	f383 8811 	msr	BASEPRI, r3
 80164ca:	f3bf 8f6f 	isb	sy
 80164ce:	f3bf 8f4f 	dsb	sy
 80164d2:	617b      	str	r3, [r7, #20]
}
 80164d4:	bf00      	nop
 80164d6:	e7fe      	b.n	80164d6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80164d8:	f002 f834 	bl	8018544 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80164dc:	2300      	movs	r3, #0
 80164de:	e082      	b.n	80165e6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80164e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d106      	bne.n	80164f4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80164e6:	f107 030c 	add.w	r3, r7, #12
 80164ea:	4618      	mov	r0, r3
 80164ec:	f001 f832 	bl	8017554 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80164f0:	2301      	movs	r3, #1
 80164f2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80164f4:	f002 f826 	bl	8018544 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80164f8:	f000 fd9e 	bl	8017038 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80164fc:	f001 fff2 	bl	80184e4 <vPortEnterCritical>
 8016500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016502:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016506:	b25b      	sxtb	r3, r3
 8016508:	f1b3 3fff 	cmp.w	r3, #4294967295
 801650c:	d103      	bne.n	8016516 <xQueueSemaphoreTake+0x13a>
 801650e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016510:	2200      	movs	r2, #0
 8016512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016518:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801651c:	b25b      	sxtb	r3, r3
 801651e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016522:	d103      	bne.n	801652c <xQueueSemaphoreTake+0x150>
 8016524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016526:	2200      	movs	r2, #0
 8016528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801652c:	f002 f80a 	bl	8018544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016530:	463a      	mov	r2, r7
 8016532:	f107 030c 	add.w	r3, r7, #12
 8016536:	4611      	mov	r1, r2
 8016538:	4618      	mov	r0, r3
 801653a:	f001 f821 	bl	8017580 <xTaskCheckForTimeOut>
 801653e:	4603      	mov	r3, r0
 8016540:	2b00      	cmp	r3, #0
 8016542:	d132      	bne.n	80165aa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016544:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016546:	f000 f9f2 	bl	801692e <prvIsQueueEmpty>
 801654a:	4603      	mov	r3, r0
 801654c:	2b00      	cmp	r3, #0
 801654e:	d026      	beq.n	801659e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	2b00      	cmp	r3, #0
 8016556:	d109      	bne.n	801656c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8016558:	f001 ffc4 	bl	80184e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801655c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801655e:	689b      	ldr	r3, [r3, #8]
 8016560:	4618      	mov	r0, r3
 8016562:	f001 f983 	bl	801786c <xTaskPriorityInherit>
 8016566:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8016568:	f001 ffec 	bl	8018544 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801656c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801656e:	3324      	adds	r3, #36	; 0x24
 8016570:	683a      	ldr	r2, [r7, #0]
 8016572:	4611      	mov	r1, r2
 8016574:	4618      	mov	r0, r3
 8016576:	f000 ff39 	bl	80173ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801657a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801657c:	f000 f985 	bl	801688a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016580:	f000 fd68 	bl	8017054 <xTaskResumeAll>
 8016584:	4603      	mov	r3, r0
 8016586:	2b00      	cmp	r3, #0
 8016588:	f47f af68 	bne.w	801645c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 801658c:	4b18      	ldr	r3, [pc, #96]	; (80165f0 <xQueueSemaphoreTake+0x214>)
 801658e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016592:	601a      	str	r2, [r3, #0]
 8016594:	f3bf 8f4f 	dsb	sy
 8016598:	f3bf 8f6f 	isb	sy
 801659c:	e75e      	b.n	801645c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801659e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80165a0:	f000 f973 	bl	801688a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80165a4:	f000 fd56 	bl	8017054 <xTaskResumeAll>
 80165a8:	e758      	b.n	801645c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80165aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80165ac:	f000 f96d 	bl	801688a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80165b0:	f000 fd50 	bl	8017054 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80165b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80165b6:	f000 f9ba 	bl	801692e <prvIsQueueEmpty>
 80165ba:	4603      	mov	r3, r0
 80165bc:	2b00      	cmp	r3, #0
 80165be:	f43f af4d 	beq.w	801645c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80165c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d00d      	beq.n	80165e4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80165c8:	f001 ff8c 	bl	80184e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80165cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80165ce:	f000 f8b4 	bl	801673a <prvGetDisinheritPriorityAfterTimeout>
 80165d2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80165d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165d6:	689b      	ldr	r3, [r3, #8]
 80165d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80165da:	4618      	mov	r0, r3
 80165dc:	f001 fa1c 	bl	8017a18 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80165e0:	f001 ffb0 	bl	8018544 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80165e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80165e6:	4618      	mov	r0, r3
 80165e8:	3738      	adds	r7, #56	; 0x38
 80165ea:	46bd      	mov	sp, r7
 80165ec:	bd80      	pop	{r7, pc}
 80165ee:	bf00      	nop
 80165f0:	e000ed04 	.word	0xe000ed04

080165f4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80165f4:	b580      	push	{r7, lr}
 80165f6:	b08e      	sub	sp, #56	; 0x38
 80165f8:	af00      	add	r7, sp, #0
 80165fa:	60f8      	str	r0, [r7, #12]
 80165fc:	60b9      	str	r1, [r7, #8]
 80165fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016600:	68fb      	ldr	r3, [r7, #12]
 8016602:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016606:	2b00      	cmp	r3, #0
 8016608:	d10a      	bne.n	8016620 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801660a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801660e:	f383 8811 	msr	BASEPRI, r3
 8016612:	f3bf 8f6f 	isb	sy
 8016616:	f3bf 8f4f 	dsb	sy
 801661a:	623b      	str	r3, [r7, #32]
}
 801661c:	bf00      	nop
 801661e:	e7fe      	b.n	801661e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016620:	68bb      	ldr	r3, [r7, #8]
 8016622:	2b00      	cmp	r3, #0
 8016624:	d103      	bne.n	801662e <xQueueReceiveFromISR+0x3a>
 8016626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801662a:	2b00      	cmp	r3, #0
 801662c:	d101      	bne.n	8016632 <xQueueReceiveFromISR+0x3e>
 801662e:	2301      	movs	r3, #1
 8016630:	e000      	b.n	8016634 <xQueueReceiveFromISR+0x40>
 8016632:	2300      	movs	r3, #0
 8016634:	2b00      	cmp	r3, #0
 8016636:	d10a      	bne.n	801664e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8016638:	f04f 0350 	mov.w	r3, #80	; 0x50
 801663c:	f383 8811 	msr	BASEPRI, r3
 8016640:	f3bf 8f6f 	isb	sy
 8016644:	f3bf 8f4f 	dsb	sy
 8016648:	61fb      	str	r3, [r7, #28]
}
 801664a:	bf00      	nop
 801664c:	e7fe      	b.n	801664c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801664e:	f002 f82b 	bl	80186a8 <vPortValidateInterruptPriority>
	__asm volatile
 8016652:	f3ef 8211 	mrs	r2, BASEPRI
 8016656:	f04f 0350 	mov.w	r3, #80	; 0x50
 801665a:	f383 8811 	msr	BASEPRI, r3
 801665e:	f3bf 8f6f 	isb	sy
 8016662:	f3bf 8f4f 	dsb	sy
 8016666:	61ba      	str	r2, [r7, #24]
 8016668:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801666a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801666c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801666e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016672:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016676:	2b00      	cmp	r3, #0
 8016678:	d02f      	beq.n	80166da <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801667a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801667c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016684:	68b9      	ldr	r1, [r7, #8]
 8016686:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016688:	f000 f8d9 	bl	801683e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801668c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801668e:	1e5a      	subs	r2, r3, #1
 8016690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016692:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8016694:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016698:	f1b3 3fff 	cmp.w	r3, #4294967295
 801669c:	d112      	bne.n	80166c4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801669e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166a0:	691b      	ldr	r3, [r3, #16]
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d016      	beq.n	80166d4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80166a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166a8:	3310      	adds	r3, #16
 80166aa:	4618      	mov	r0, r3
 80166ac:	f000 feee 	bl	801748c <xTaskRemoveFromEventList>
 80166b0:	4603      	mov	r3, r0
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d00e      	beq.n	80166d4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	d00b      	beq.n	80166d4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	2201      	movs	r2, #1
 80166c0:	601a      	str	r2, [r3, #0]
 80166c2:	e007      	b.n	80166d4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80166c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80166c8:	3301      	adds	r3, #1
 80166ca:	b2db      	uxtb	r3, r3
 80166cc:	b25a      	sxtb	r2, r3
 80166ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80166d4:	2301      	movs	r3, #1
 80166d6:	637b      	str	r3, [r7, #52]	; 0x34
 80166d8:	e001      	b.n	80166de <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80166da:	2300      	movs	r3, #0
 80166dc:	637b      	str	r3, [r7, #52]	; 0x34
 80166de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80166e2:	693b      	ldr	r3, [r7, #16]
 80166e4:	f383 8811 	msr	BASEPRI, r3
}
 80166e8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80166ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80166ec:	4618      	mov	r0, r3
 80166ee:	3738      	adds	r7, #56	; 0x38
 80166f0:	46bd      	mov	sp, r7
 80166f2:	bd80      	pop	{r7, pc}

080166f4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80166f4:	b580      	push	{r7, lr}
 80166f6:	b084      	sub	sp, #16
 80166f8:	af00      	add	r7, sp, #0
 80166fa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016700:	68fb      	ldr	r3, [r7, #12]
 8016702:	2b00      	cmp	r3, #0
 8016704:	d10a      	bne.n	801671c <vQueueDelete+0x28>
	__asm volatile
 8016706:	f04f 0350 	mov.w	r3, #80	; 0x50
 801670a:	f383 8811 	msr	BASEPRI, r3
 801670e:	f3bf 8f6f 	isb	sy
 8016712:	f3bf 8f4f 	dsb	sy
 8016716:	60bb      	str	r3, [r7, #8]
}
 8016718:	bf00      	nop
 801671a:	e7fe      	b.n	801671a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801671c:	68f8      	ldr	r0, [r7, #12]
 801671e:	f000 f95f 	bl	80169e0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8016722:	68fb      	ldr	r3, [r7, #12]
 8016724:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8016728:	2b00      	cmp	r3, #0
 801672a:	d102      	bne.n	8016732 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 801672c:	68f8      	ldr	r0, [r7, #12]
 801672e:	f002 f8c7 	bl	80188c0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8016732:	bf00      	nop
 8016734:	3710      	adds	r7, #16
 8016736:	46bd      	mov	sp, r7
 8016738:	bd80      	pop	{r7, pc}

0801673a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801673a:	b480      	push	{r7}
 801673c:	b085      	sub	sp, #20
 801673e:	af00      	add	r7, sp, #0
 8016740:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016746:	2b00      	cmp	r3, #0
 8016748:	d006      	beq.n	8016758 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801674e:	681b      	ldr	r3, [r3, #0]
 8016750:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8016754:	60fb      	str	r3, [r7, #12]
 8016756:	e001      	b.n	801675c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8016758:	2300      	movs	r3, #0
 801675a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801675c:	68fb      	ldr	r3, [r7, #12]
	}
 801675e:	4618      	mov	r0, r3
 8016760:	3714      	adds	r7, #20
 8016762:	46bd      	mov	sp, r7
 8016764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016768:	4770      	bx	lr

0801676a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801676a:	b580      	push	{r7, lr}
 801676c:	b086      	sub	sp, #24
 801676e:	af00      	add	r7, sp, #0
 8016770:	60f8      	str	r0, [r7, #12]
 8016772:	60b9      	str	r1, [r7, #8]
 8016774:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8016776:	2300      	movs	r3, #0
 8016778:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801677e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016784:	2b00      	cmp	r3, #0
 8016786:	d10d      	bne.n	80167a4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	2b00      	cmp	r3, #0
 801678e:	d14d      	bne.n	801682c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	689b      	ldr	r3, [r3, #8]
 8016794:	4618      	mov	r0, r3
 8016796:	f001 f8d1 	bl	801793c <xTaskPriorityDisinherit>
 801679a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801679c:	68fb      	ldr	r3, [r7, #12]
 801679e:	2200      	movs	r2, #0
 80167a0:	609a      	str	r2, [r3, #8]
 80167a2:	e043      	b.n	801682c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d119      	bne.n	80167de <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	6858      	ldr	r0, [r3, #4]
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80167b2:	461a      	mov	r2, r3
 80167b4:	68b9      	ldr	r1, [r7, #8]
 80167b6:	f003 ffb9 	bl	801a72c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	685a      	ldr	r2, [r3, #4]
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80167c2:	441a      	add	r2, r3
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	685a      	ldr	r2, [r3, #4]
 80167cc:	68fb      	ldr	r3, [r7, #12]
 80167ce:	689b      	ldr	r3, [r3, #8]
 80167d0:	429a      	cmp	r2, r3
 80167d2:	d32b      	bcc.n	801682c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	681a      	ldr	r2, [r3, #0]
 80167d8:	68fb      	ldr	r3, [r7, #12]
 80167da:	605a      	str	r2, [r3, #4]
 80167dc:	e026      	b.n	801682c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80167de:	68fb      	ldr	r3, [r7, #12]
 80167e0:	68d8      	ldr	r0, [r3, #12]
 80167e2:	68fb      	ldr	r3, [r7, #12]
 80167e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80167e6:	461a      	mov	r2, r3
 80167e8:	68b9      	ldr	r1, [r7, #8]
 80167ea:	f003 ff9f 	bl	801a72c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80167ee:	68fb      	ldr	r3, [r7, #12]
 80167f0:	68da      	ldr	r2, [r3, #12]
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80167f6:	425b      	negs	r3, r3
 80167f8:	441a      	add	r2, r3
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80167fe:	68fb      	ldr	r3, [r7, #12]
 8016800:	68da      	ldr	r2, [r3, #12]
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	429a      	cmp	r2, r3
 8016808:	d207      	bcs.n	801681a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	689a      	ldr	r2, [r3, #8]
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016812:	425b      	negs	r3, r3
 8016814:	441a      	add	r2, r3
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	2b02      	cmp	r3, #2
 801681e:	d105      	bne.n	801682c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016820:	693b      	ldr	r3, [r7, #16]
 8016822:	2b00      	cmp	r3, #0
 8016824:	d002      	beq.n	801682c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8016826:	693b      	ldr	r3, [r7, #16]
 8016828:	3b01      	subs	r3, #1
 801682a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801682c:	693b      	ldr	r3, [r7, #16]
 801682e:	1c5a      	adds	r2, r3, #1
 8016830:	68fb      	ldr	r3, [r7, #12]
 8016832:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8016834:	697b      	ldr	r3, [r7, #20]
}
 8016836:	4618      	mov	r0, r3
 8016838:	3718      	adds	r7, #24
 801683a:	46bd      	mov	sp, r7
 801683c:	bd80      	pop	{r7, pc}

0801683e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801683e:	b580      	push	{r7, lr}
 8016840:	b082      	sub	sp, #8
 8016842:	af00      	add	r7, sp, #0
 8016844:	6078      	str	r0, [r7, #4]
 8016846:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801684c:	2b00      	cmp	r3, #0
 801684e:	d018      	beq.n	8016882 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	68da      	ldr	r2, [r3, #12]
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016858:	441a      	add	r2, r3
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	68da      	ldr	r2, [r3, #12]
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	689b      	ldr	r3, [r3, #8]
 8016866:	429a      	cmp	r2, r3
 8016868:	d303      	bcc.n	8016872 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	681a      	ldr	r2, [r3, #0]
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	68d9      	ldr	r1, [r3, #12]
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801687a:	461a      	mov	r2, r3
 801687c:	6838      	ldr	r0, [r7, #0]
 801687e:	f003 ff55 	bl	801a72c <memcpy>
	}
}
 8016882:	bf00      	nop
 8016884:	3708      	adds	r7, #8
 8016886:	46bd      	mov	sp, r7
 8016888:	bd80      	pop	{r7, pc}

0801688a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801688a:	b580      	push	{r7, lr}
 801688c:	b084      	sub	sp, #16
 801688e:	af00      	add	r7, sp, #0
 8016890:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8016892:	f001 fe27 	bl	80184e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801689c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801689e:	e011      	b.n	80168c4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	d012      	beq.n	80168ce <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	3324      	adds	r3, #36	; 0x24
 80168ac:	4618      	mov	r0, r3
 80168ae:	f000 fded 	bl	801748c <xTaskRemoveFromEventList>
 80168b2:	4603      	mov	r3, r0
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d001      	beq.n	80168bc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80168b8:	f000 fec4 	bl	8017644 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80168bc:	7bfb      	ldrb	r3, [r7, #15]
 80168be:	3b01      	subs	r3, #1
 80168c0:	b2db      	uxtb	r3, r3
 80168c2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80168c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	dce9      	bgt.n	80168a0 <prvUnlockQueue+0x16>
 80168cc:	e000      	b.n	80168d0 <prvUnlockQueue+0x46>
					break;
 80168ce:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	22ff      	movs	r2, #255	; 0xff
 80168d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80168d8:	f001 fe34 	bl	8018544 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80168dc:	f001 fe02 	bl	80184e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80168e6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80168e8:	e011      	b.n	801690e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	691b      	ldr	r3, [r3, #16]
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d012      	beq.n	8016918 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	3310      	adds	r3, #16
 80168f6:	4618      	mov	r0, r3
 80168f8:	f000 fdc8 	bl	801748c <xTaskRemoveFromEventList>
 80168fc:	4603      	mov	r3, r0
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d001      	beq.n	8016906 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8016902:	f000 fe9f 	bl	8017644 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8016906:	7bbb      	ldrb	r3, [r7, #14]
 8016908:	3b01      	subs	r3, #1
 801690a:	b2db      	uxtb	r3, r3
 801690c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801690e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016912:	2b00      	cmp	r3, #0
 8016914:	dce9      	bgt.n	80168ea <prvUnlockQueue+0x60>
 8016916:	e000      	b.n	801691a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8016918:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	22ff      	movs	r2, #255	; 0xff
 801691e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8016922:	f001 fe0f 	bl	8018544 <vPortExitCritical>
}
 8016926:	bf00      	nop
 8016928:	3710      	adds	r7, #16
 801692a:	46bd      	mov	sp, r7
 801692c:	bd80      	pop	{r7, pc}

0801692e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801692e:	b580      	push	{r7, lr}
 8016930:	b084      	sub	sp, #16
 8016932:	af00      	add	r7, sp, #0
 8016934:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016936:	f001 fdd5 	bl	80184e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801693e:	2b00      	cmp	r3, #0
 8016940:	d102      	bne.n	8016948 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8016942:	2301      	movs	r3, #1
 8016944:	60fb      	str	r3, [r7, #12]
 8016946:	e001      	b.n	801694c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8016948:	2300      	movs	r3, #0
 801694a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801694c:	f001 fdfa 	bl	8018544 <vPortExitCritical>

	return xReturn;
 8016950:	68fb      	ldr	r3, [r7, #12]
}
 8016952:	4618      	mov	r0, r3
 8016954:	3710      	adds	r7, #16
 8016956:	46bd      	mov	sp, r7
 8016958:	bd80      	pop	{r7, pc}

0801695a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801695a:	b580      	push	{r7, lr}
 801695c:	b084      	sub	sp, #16
 801695e:	af00      	add	r7, sp, #0
 8016960:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016962:	f001 fdbf 	bl	80184e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801696e:	429a      	cmp	r2, r3
 8016970:	d102      	bne.n	8016978 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8016972:	2301      	movs	r3, #1
 8016974:	60fb      	str	r3, [r7, #12]
 8016976:	e001      	b.n	801697c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8016978:	2300      	movs	r3, #0
 801697a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801697c:	f001 fde2 	bl	8018544 <vPortExitCritical>

	return xReturn;
 8016980:	68fb      	ldr	r3, [r7, #12]
}
 8016982:	4618      	mov	r0, r3
 8016984:	3710      	adds	r7, #16
 8016986:	46bd      	mov	sp, r7
 8016988:	bd80      	pop	{r7, pc}
	...

0801698c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801698c:	b480      	push	{r7}
 801698e:	b085      	sub	sp, #20
 8016990:	af00      	add	r7, sp, #0
 8016992:	6078      	str	r0, [r7, #4]
 8016994:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016996:	2300      	movs	r3, #0
 8016998:	60fb      	str	r3, [r7, #12]
 801699a:	e014      	b.n	80169c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801699c:	4a0f      	ldr	r2, [pc, #60]	; (80169dc <vQueueAddToRegistry+0x50>)
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d10b      	bne.n	80169c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80169a8:	490c      	ldr	r1, [pc, #48]	; (80169dc <vQueueAddToRegistry+0x50>)
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	683a      	ldr	r2, [r7, #0]
 80169ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80169b2:	4a0a      	ldr	r2, [pc, #40]	; (80169dc <vQueueAddToRegistry+0x50>)
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	00db      	lsls	r3, r3, #3
 80169b8:	4413      	add	r3, r2
 80169ba:	687a      	ldr	r2, [r7, #4]
 80169bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80169be:	e006      	b.n	80169ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80169c0:	68fb      	ldr	r3, [r7, #12]
 80169c2:	3301      	adds	r3, #1
 80169c4:	60fb      	str	r3, [r7, #12]
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	2b07      	cmp	r3, #7
 80169ca:	d9e7      	bls.n	801699c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80169cc:	bf00      	nop
 80169ce:	bf00      	nop
 80169d0:	3714      	adds	r7, #20
 80169d2:	46bd      	mov	sp, r7
 80169d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169d8:	4770      	bx	lr
 80169da:	bf00      	nop
 80169dc:	2000768c 	.word	0x2000768c

080169e0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80169e0:	b480      	push	{r7}
 80169e2:	b085      	sub	sp, #20
 80169e4:	af00      	add	r7, sp, #0
 80169e6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80169e8:	2300      	movs	r3, #0
 80169ea:	60fb      	str	r3, [r7, #12]
 80169ec:	e016      	b.n	8016a1c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80169ee:	4a10      	ldr	r2, [pc, #64]	; (8016a30 <vQueueUnregisterQueue+0x50>)
 80169f0:	68fb      	ldr	r3, [r7, #12]
 80169f2:	00db      	lsls	r3, r3, #3
 80169f4:	4413      	add	r3, r2
 80169f6:	685b      	ldr	r3, [r3, #4]
 80169f8:	687a      	ldr	r2, [r7, #4]
 80169fa:	429a      	cmp	r2, r3
 80169fc:	d10b      	bne.n	8016a16 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80169fe:	4a0c      	ldr	r2, [pc, #48]	; (8016a30 <vQueueUnregisterQueue+0x50>)
 8016a00:	68fb      	ldr	r3, [r7, #12]
 8016a02:	2100      	movs	r1, #0
 8016a04:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8016a08:	4a09      	ldr	r2, [pc, #36]	; (8016a30 <vQueueUnregisterQueue+0x50>)
 8016a0a:	68fb      	ldr	r3, [r7, #12]
 8016a0c:	00db      	lsls	r3, r3, #3
 8016a0e:	4413      	add	r3, r2
 8016a10:	2200      	movs	r2, #0
 8016a12:	605a      	str	r2, [r3, #4]
				break;
 8016a14:	e006      	b.n	8016a24 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016a16:	68fb      	ldr	r3, [r7, #12]
 8016a18:	3301      	adds	r3, #1
 8016a1a:	60fb      	str	r3, [r7, #12]
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	2b07      	cmp	r3, #7
 8016a20:	d9e5      	bls.n	80169ee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8016a22:	bf00      	nop
 8016a24:	bf00      	nop
 8016a26:	3714      	adds	r7, #20
 8016a28:	46bd      	mov	sp, r7
 8016a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a2e:	4770      	bx	lr
 8016a30:	2000768c 	.word	0x2000768c

08016a34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016a34:	b580      	push	{r7, lr}
 8016a36:	b086      	sub	sp, #24
 8016a38:	af00      	add	r7, sp, #0
 8016a3a:	60f8      	str	r0, [r7, #12]
 8016a3c:	60b9      	str	r1, [r7, #8]
 8016a3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8016a40:	68fb      	ldr	r3, [r7, #12]
 8016a42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8016a44:	f001 fd4e 	bl	80184e4 <vPortEnterCritical>
 8016a48:	697b      	ldr	r3, [r7, #20]
 8016a4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016a4e:	b25b      	sxtb	r3, r3
 8016a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a54:	d103      	bne.n	8016a5e <vQueueWaitForMessageRestricted+0x2a>
 8016a56:	697b      	ldr	r3, [r7, #20]
 8016a58:	2200      	movs	r2, #0
 8016a5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016a5e:	697b      	ldr	r3, [r7, #20]
 8016a60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016a64:	b25b      	sxtb	r3, r3
 8016a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a6a:	d103      	bne.n	8016a74 <vQueueWaitForMessageRestricted+0x40>
 8016a6c:	697b      	ldr	r3, [r7, #20]
 8016a6e:	2200      	movs	r2, #0
 8016a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016a74:	f001 fd66 	bl	8018544 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8016a78:	697b      	ldr	r3, [r7, #20]
 8016a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d106      	bne.n	8016a8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016a80:	697b      	ldr	r3, [r7, #20]
 8016a82:	3324      	adds	r3, #36	; 0x24
 8016a84:	687a      	ldr	r2, [r7, #4]
 8016a86:	68b9      	ldr	r1, [r7, #8]
 8016a88:	4618      	mov	r0, r3
 8016a8a:	f000 fcd3 	bl	8017434 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8016a8e:	6978      	ldr	r0, [r7, #20]
 8016a90:	f7ff fefb 	bl	801688a <prvUnlockQueue>
	}
 8016a94:	bf00      	nop
 8016a96:	3718      	adds	r7, #24
 8016a98:	46bd      	mov	sp, r7
 8016a9a:	bd80      	pop	{r7, pc}

08016a9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016a9c:	b580      	push	{r7, lr}
 8016a9e:	b08e      	sub	sp, #56	; 0x38
 8016aa0:	af04      	add	r7, sp, #16
 8016aa2:	60f8      	str	r0, [r7, #12]
 8016aa4:	60b9      	str	r1, [r7, #8]
 8016aa6:	607a      	str	r2, [r7, #4]
 8016aa8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8016aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d10a      	bne.n	8016ac6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8016ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ab4:	f383 8811 	msr	BASEPRI, r3
 8016ab8:	f3bf 8f6f 	isb	sy
 8016abc:	f3bf 8f4f 	dsb	sy
 8016ac0:	623b      	str	r3, [r7, #32]
}
 8016ac2:	bf00      	nop
 8016ac4:	e7fe      	b.n	8016ac4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8016ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d10a      	bne.n	8016ae2 <xTaskCreateStatic+0x46>
	__asm volatile
 8016acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ad0:	f383 8811 	msr	BASEPRI, r3
 8016ad4:	f3bf 8f6f 	isb	sy
 8016ad8:	f3bf 8f4f 	dsb	sy
 8016adc:	61fb      	str	r3, [r7, #28]
}
 8016ade:	bf00      	nop
 8016ae0:	e7fe      	b.n	8016ae0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8016ae2:	23bc      	movs	r3, #188	; 0xbc
 8016ae4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8016ae6:	693b      	ldr	r3, [r7, #16]
 8016ae8:	2bbc      	cmp	r3, #188	; 0xbc
 8016aea:	d00a      	beq.n	8016b02 <xTaskCreateStatic+0x66>
	__asm volatile
 8016aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016af0:	f383 8811 	msr	BASEPRI, r3
 8016af4:	f3bf 8f6f 	isb	sy
 8016af8:	f3bf 8f4f 	dsb	sy
 8016afc:	61bb      	str	r3, [r7, #24]
}
 8016afe:	bf00      	nop
 8016b00:	e7fe      	b.n	8016b00 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8016b02:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d01e      	beq.n	8016b48 <xTaskCreateStatic+0xac>
 8016b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d01b      	beq.n	8016b48 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b12:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016b18:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b1c:	2202      	movs	r2, #2
 8016b1e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8016b22:	2300      	movs	r3, #0
 8016b24:	9303      	str	r3, [sp, #12]
 8016b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b28:	9302      	str	r3, [sp, #8]
 8016b2a:	f107 0314 	add.w	r3, r7, #20
 8016b2e:	9301      	str	r3, [sp, #4]
 8016b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b32:	9300      	str	r3, [sp, #0]
 8016b34:	683b      	ldr	r3, [r7, #0]
 8016b36:	687a      	ldr	r2, [r7, #4]
 8016b38:	68b9      	ldr	r1, [r7, #8]
 8016b3a:	68f8      	ldr	r0, [r7, #12]
 8016b3c:	f000 f850 	bl	8016be0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016b40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016b42:	f000 f8f3 	bl	8016d2c <prvAddNewTaskToReadyList>
 8016b46:	e001      	b.n	8016b4c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8016b48:	2300      	movs	r3, #0
 8016b4a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016b4c:	697b      	ldr	r3, [r7, #20]
	}
 8016b4e:	4618      	mov	r0, r3
 8016b50:	3728      	adds	r7, #40	; 0x28
 8016b52:	46bd      	mov	sp, r7
 8016b54:	bd80      	pop	{r7, pc}

08016b56 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016b56:	b580      	push	{r7, lr}
 8016b58:	b08c      	sub	sp, #48	; 0x30
 8016b5a:	af04      	add	r7, sp, #16
 8016b5c:	60f8      	str	r0, [r7, #12]
 8016b5e:	60b9      	str	r1, [r7, #8]
 8016b60:	603b      	str	r3, [r7, #0]
 8016b62:	4613      	mov	r3, r2
 8016b64:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016b66:	88fb      	ldrh	r3, [r7, #6]
 8016b68:	009b      	lsls	r3, r3, #2
 8016b6a:	4618      	mov	r0, r3
 8016b6c:	f001 fddc 	bl	8018728 <pvPortMalloc>
 8016b70:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016b72:	697b      	ldr	r3, [r7, #20]
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d00e      	beq.n	8016b96 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016b78:	20bc      	movs	r0, #188	; 0xbc
 8016b7a:	f001 fdd5 	bl	8018728 <pvPortMalloc>
 8016b7e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016b80:	69fb      	ldr	r3, [r7, #28]
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d003      	beq.n	8016b8e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016b86:	69fb      	ldr	r3, [r7, #28]
 8016b88:	697a      	ldr	r2, [r7, #20]
 8016b8a:	631a      	str	r2, [r3, #48]	; 0x30
 8016b8c:	e005      	b.n	8016b9a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016b8e:	6978      	ldr	r0, [r7, #20]
 8016b90:	f001 fe96 	bl	80188c0 <vPortFree>
 8016b94:	e001      	b.n	8016b9a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016b96:	2300      	movs	r3, #0
 8016b98:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016b9a:	69fb      	ldr	r3, [r7, #28]
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d017      	beq.n	8016bd0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016ba0:	69fb      	ldr	r3, [r7, #28]
 8016ba2:	2200      	movs	r2, #0
 8016ba4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016ba8:	88fa      	ldrh	r2, [r7, #6]
 8016baa:	2300      	movs	r3, #0
 8016bac:	9303      	str	r3, [sp, #12]
 8016bae:	69fb      	ldr	r3, [r7, #28]
 8016bb0:	9302      	str	r3, [sp, #8]
 8016bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bb4:	9301      	str	r3, [sp, #4]
 8016bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bb8:	9300      	str	r3, [sp, #0]
 8016bba:	683b      	ldr	r3, [r7, #0]
 8016bbc:	68b9      	ldr	r1, [r7, #8]
 8016bbe:	68f8      	ldr	r0, [r7, #12]
 8016bc0:	f000 f80e 	bl	8016be0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016bc4:	69f8      	ldr	r0, [r7, #28]
 8016bc6:	f000 f8b1 	bl	8016d2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016bca:	2301      	movs	r3, #1
 8016bcc:	61bb      	str	r3, [r7, #24]
 8016bce:	e002      	b.n	8016bd6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8016bd4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016bd6:	69bb      	ldr	r3, [r7, #24]
	}
 8016bd8:	4618      	mov	r0, r3
 8016bda:	3720      	adds	r7, #32
 8016bdc:	46bd      	mov	sp, r7
 8016bde:	bd80      	pop	{r7, pc}

08016be0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8016be0:	b580      	push	{r7, lr}
 8016be2:	b088      	sub	sp, #32
 8016be4:	af00      	add	r7, sp, #0
 8016be6:	60f8      	str	r0, [r7, #12]
 8016be8:	60b9      	str	r1, [r7, #8]
 8016bea:	607a      	str	r2, [r7, #4]
 8016bec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8016bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bf0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	009b      	lsls	r3, r3, #2
 8016bf6:	461a      	mov	r2, r3
 8016bf8:	21a5      	movs	r1, #165	; 0xa5
 8016bfa:	f003 fdbf 	bl	801a77c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8016bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016c08:	3b01      	subs	r3, #1
 8016c0a:	009b      	lsls	r3, r3, #2
 8016c0c:	4413      	add	r3, r2
 8016c0e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8016c10:	69bb      	ldr	r3, [r7, #24]
 8016c12:	f023 0307 	bic.w	r3, r3, #7
 8016c16:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8016c18:	69bb      	ldr	r3, [r7, #24]
 8016c1a:	f003 0307 	and.w	r3, r3, #7
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d00a      	beq.n	8016c38 <prvInitialiseNewTask+0x58>
	__asm volatile
 8016c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c26:	f383 8811 	msr	BASEPRI, r3
 8016c2a:	f3bf 8f6f 	isb	sy
 8016c2e:	f3bf 8f4f 	dsb	sy
 8016c32:	617b      	str	r3, [r7, #20]
}
 8016c34:	bf00      	nop
 8016c36:	e7fe      	b.n	8016c36 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8016c38:	68bb      	ldr	r3, [r7, #8]
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d01f      	beq.n	8016c7e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016c3e:	2300      	movs	r3, #0
 8016c40:	61fb      	str	r3, [r7, #28]
 8016c42:	e012      	b.n	8016c6a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016c44:	68ba      	ldr	r2, [r7, #8]
 8016c46:	69fb      	ldr	r3, [r7, #28]
 8016c48:	4413      	add	r3, r2
 8016c4a:	7819      	ldrb	r1, [r3, #0]
 8016c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c4e:	69fb      	ldr	r3, [r7, #28]
 8016c50:	4413      	add	r3, r2
 8016c52:	3334      	adds	r3, #52	; 0x34
 8016c54:	460a      	mov	r2, r1
 8016c56:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016c58:	68ba      	ldr	r2, [r7, #8]
 8016c5a:	69fb      	ldr	r3, [r7, #28]
 8016c5c:	4413      	add	r3, r2
 8016c5e:	781b      	ldrb	r3, [r3, #0]
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d006      	beq.n	8016c72 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016c64:	69fb      	ldr	r3, [r7, #28]
 8016c66:	3301      	adds	r3, #1
 8016c68:	61fb      	str	r3, [r7, #28]
 8016c6a:	69fb      	ldr	r3, [r7, #28]
 8016c6c:	2b0f      	cmp	r3, #15
 8016c6e:	d9e9      	bls.n	8016c44 <prvInitialiseNewTask+0x64>
 8016c70:	e000      	b.n	8016c74 <prvInitialiseNewTask+0x94>
			{
				break;
 8016c72:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c76:	2200      	movs	r2, #0
 8016c78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016c7c:	e003      	b.n	8016c86 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c80:	2200      	movs	r2, #0
 8016c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8016c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c88:	2b37      	cmp	r3, #55	; 0x37
 8016c8a:	d901      	bls.n	8016c90 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016c8c:	2337      	movs	r3, #55	; 0x37
 8016c8e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016c94:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8016c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016c9a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8016c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c9e:	2200      	movs	r2, #0
 8016ca0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ca4:	3304      	adds	r3, #4
 8016ca6:	4618      	mov	r0, r3
 8016ca8:	f7fe fe56 	bl	8015958 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cae:	3318      	adds	r3, #24
 8016cb0:	4618      	mov	r0, r3
 8016cb2:	f7fe fe51 	bl	8015958 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016cba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cbe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cc4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8016cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016cca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8016ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cce:	2200      	movs	r2, #0
 8016cd0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cd6:	2200      	movs	r2, #0
 8016cd8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8016cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cde:	3354      	adds	r3, #84	; 0x54
 8016ce0:	2260      	movs	r2, #96	; 0x60
 8016ce2:	2100      	movs	r1, #0
 8016ce4:	4618      	mov	r0, r3
 8016ce6:	f003 fd49 	bl	801a77c <memset>
 8016cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cec:	4a0c      	ldr	r2, [pc, #48]	; (8016d20 <prvInitialiseNewTask+0x140>)
 8016cee:	659a      	str	r2, [r3, #88]	; 0x58
 8016cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cf2:	4a0c      	ldr	r2, [pc, #48]	; (8016d24 <prvInitialiseNewTask+0x144>)
 8016cf4:	65da      	str	r2, [r3, #92]	; 0x5c
 8016cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cf8:	4a0b      	ldr	r2, [pc, #44]	; (8016d28 <prvInitialiseNewTask+0x148>)
 8016cfa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016cfc:	683a      	ldr	r2, [r7, #0]
 8016cfe:	68f9      	ldr	r1, [r7, #12]
 8016d00:	69b8      	ldr	r0, [r7, #24]
 8016d02:	f001 fac1 	bl	8018288 <pxPortInitialiseStack>
 8016d06:	4602      	mov	r2, r0
 8016d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d0a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8016d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d002      	beq.n	8016d18 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016d16:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016d18:	bf00      	nop
 8016d1a:	3720      	adds	r7, #32
 8016d1c:	46bd      	mov	sp, r7
 8016d1e:	bd80      	pop	{r7, pc}
 8016d20:	0802182c 	.word	0x0802182c
 8016d24:	0802184c 	.word	0x0802184c
 8016d28:	0802180c 	.word	0x0802180c

08016d2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	b082      	sub	sp, #8
 8016d30:	af00      	add	r7, sp, #0
 8016d32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8016d34:	f001 fbd6 	bl	80184e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016d38:	4b2d      	ldr	r3, [pc, #180]	; (8016df0 <prvAddNewTaskToReadyList+0xc4>)
 8016d3a:	681b      	ldr	r3, [r3, #0]
 8016d3c:	3301      	adds	r3, #1
 8016d3e:	4a2c      	ldr	r2, [pc, #176]	; (8016df0 <prvAddNewTaskToReadyList+0xc4>)
 8016d40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8016d42:	4b2c      	ldr	r3, [pc, #176]	; (8016df4 <prvAddNewTaskToReadyList+0xc8>)
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d109      	bne.n	8016d5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8016d4a:	4a2a      	ldr	r2, [pc, #168]	; (8016df4 <prvAddNewTaskToReadyList+0xc8>)
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016d50:	4b27      	ldr	r3, [pc, #156]	; (8016df0 <prvAddNewTaskToReadyList+0xc4>)
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	2b01      	cmp	r3, #1
 8016d56:	d110      	bne.n	8016d7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016d58:	f000 fc98 	bl	801768c <prvInitialiseTaskLists>
 8016d5c:	e00d      	b.n	8016d7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8016d5e:	4b26      	ldr	r3, [pc, #152]	; (8016df8 <prvAddNewTaskToReadyList+0xcc>)
 8016d60:	681b      	ldr	r3, [r3, #0]
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d109      	bne.n	8016d7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8016d66:	4b23      	ldr	r3, [pc, #140]	; (8016df4 <prvAddNewTaskToReadyList+0xc8>)
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d70:	429a      	cmp	r2, r3
 8016d72:	d802      	bhi.n	8016d7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016d74:	4a1f      	ldr	r2, [pc, #124]	; (8016df4 <prvAddNewTaskToReadyList+0xc8>)
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8016d7a:	4b20      	ldr	r3, [pc, #128]	; (8016dfc <prvAddNewTaskToReadyList+0xd0>)
 8016d7c:	681b      	ldr	r3, [r3, #0]
 8016d7e:	3301      	adds	r3, #1
 8016d80:	4a1e      	ldr	r2, [pc, #120]	; (8016dfc <prvAddNewTaskToReadyList+0xd0>)
 8016d82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8016d84:	4b1d      	ldr	r3, [pc, #116]	; (8016dfc <prvAddNewTaskToReadyList+0xd0>)
 8016d86:	681a      	ldr	r2, [r3, #0]
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d90:	4b1b      	ldr	r3, [pc, #108]	; (8016e00 <prvAddNewTaskToReadyList+0xd4>)
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	429a      	cmp	r2, r3
 8016d96:	d903      	bls.n	8016da0 <prvAddNewTaskToReadyList+0x74>
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d9c:	4a18      	ldr	r2, [pc, #96]	; (8016e00 <prvAddNewTaskToReadyList+0xd4>)
 8016d9e:	6013      	str	r3, [r2, #0]
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016da4:	4613      	mov	r3, r2
 8016da6:	009b      	lsls	r3, r3, #2
 8016da8:	4413      	add	r3, r2
 8016daa:	009b      	lsls	r3, r3, #2
 8016dac:	4a15      	ldr	r2, [pc, #84]	; (8016e04 <prvAddNewTaskToReadyList+0xd8>)
 8016dae:	441a      	add	r2, r3
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	3304      	adds	r3, #4
 8016db4:	4619      	mov	r1, r3
 8016db6:	4610      	mov	r0, r2
 8016db8:	f7fe fddb 	bl	8015972 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016dbc:	f001 fbc2 	bl	8018544 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8016dc0:	4b0d      	ldr	r3, [pc, #52]	; (8016df8 <prvAddNewTaskToReadyList+0xcc>)
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d00e      	beq.n	8016de6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016dc8:	4b0a      	ldr	r3, [pc, #40]	; (8016df4 <prvAddNewTaskToReadyList+0xc8>)
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016dd2:	429a      	cmp	r2, r3
 8016dd4:	d207      	bcs.n	8016de6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016dd6:	4b0c      	ldr	r3, [pc, #48]	; (8016e08 <prvAddNewTaskToReadyList+0xdc>)
 8016dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016ddc:	601a      	str	r2, [r3, #0]
 8016dde:	f3bf 8f4f 	dsb	sy
 8016de2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016de6:	bf00      	nop
 8016de8:	3708      	adds	r7, #8
 8016dea:	46bd      	mov	sp, r7
 8016dec:	bd80      	pop	{r7, pc}
 8016dee:	bf00      	nop
 8016df0:	200014c8 	.word	0x200014c8
 8016df4:	20000ff4 	.word	0x20000ff4
 8016df8:	200014d4 	.word	0x200014d4
 8016dfc:	200014e4 	.word	0x200014e4
 8016e00:	200014d0 	.word	0x200014d0
 8016e04:	20000ff8 	.word	0x20000ff8
 8016e08:	e000ed04 	.word	0xe000ed04

08016e0c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8016e0c:	b580      	push	{r7, lr}
 8016e0e:	b084      	sub	sp, #16
 8016e10:	af00      	add	r7, sp, #0
 8016e12:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8016e14:	f001 fb66 	bl	80184e4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d102      	bne.n	8016e24 <vTaskDelete+0x18>
 8016e1e:	4b2c      	ldr	r3, [pc, #176]	; (8016ed0 <vTaskDelete+0xc4>)
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	e000      	b.n	8016e26 <vTaskDelete+0x1a>
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016e28:	68fb      	ldr	r3, [r7, #12]
 8016e2a:	3304      	adds	r3, #4
 8016e2c:	4618      	mov	r0, r3
 8016e2e:	f7fe fdfd 	bl	8015a2c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016e32:	68fb      	ldr	r3, [r7, #12]
 8016e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d004      	beq.n	8016e44 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	3318      	adds	r3, #24
 8016e3e:	4618      	mov	r0, r3
 8016e40:	f7fe fdf4 	bl	8015a2c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8016e44:	4b23      	ldr	r3, [pc, #140]	; (8016ed4 <vTaskDelete+0xc8>)
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	3301      	adds	r3, #1
 8016e4a:	4a22      	ldr	r2, [pc, #136]	; (8016ed4 <vTaskDelete+0xc8>)
 8016e4c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8016e4e:	4b20      	ldr	r3, [pc, #128]	; (8016ed0 <vTaskDelete+0xc4>)
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	68fa      	ldr	r2, [r7, #12]
 8016e54:	429a      	cmp	r2, r3
 8016e56:	d10b      	bne.n	8016e70 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8016e58:	68fb      	ldr	r3, [r7, #12]
 8016e5a:	3304      	adds	r3, #4
 8016e5c:	4619      	mov	r1, r3
 8016e5e:	481e      	ldr	r0, [pc, #120]	; (8016ed8 <vTaskDelete+0xcc>)
 8016e60:	f7fe fd87 	bl	8015972 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8016e64:	4b1d      	ldr	r3, [pc, #116]	; (8016edc <vTaskDelete+0xd0>)
 8016e66:	681b      	ldr	r3, [r3, #0]
 8016e68:	3301      	adds	r3, #1
 8016e6a:	4a1c      	ldr	r2, [pc, #112]	; (8016edc <vTaskDelete+0xd0>)
 8016e6c:	6013      	str	r3, [r2, #0]
 8016e6e:	e009      	b.n	8016e84 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8016e70:	4b1b      	ldr	r3, [pc, #108]	; (8016ee0 <vTaskDelete+0xd4>)
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	3b01      	subs	r3, #1
 8016e76:	4a1a      	ldr	r2, [pc, #104]	; (8016ee0 <vTaskDelete+0xd4>)
 8016e78:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8016e7a:	68f8      	ldr	r0, [r7, #12]
 8016e7c:	f000 fc74 	bl	8017768 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8016e80:	f000 fca6 	bl	80177d0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8016e84:	f001 fb5e 	bl	8018544 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8016e88:	4b16      	ldr	r3, [pc, #88]	; (8016ee4 <vTaskDelete+0xd8>)
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d01b      	beq.n	8016ec8 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8016e90:	4b0f      	ldr	r3, [pc, #60]	; (8016ed0 <vTaskDelete+0xc4>)
 8016e92:	681b      	ldr	r3, [r3, #0]
 8016e94:	68fa      	ldr	r2, [r7, #12]
 8016e96:	429a      	cmp	r2, r3
 8016e98:	d116      	bne.n	8016ec8 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8016e9a:	4b13      	ldr	r3, [pc, #76]	; (8016ee8 <vTaskDelete+0xdc>)
 8016e9c:	681b      	ldr	r3, [r3, #0]
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d00a      	beq.n	8016eb8 <vTaskDelete+0xac>
	__asm volatile
 8016ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ea6:	f383 8811 	msr	BASEPRI, r3
 8016eaa:	f3bf 8f6f 	isb	sy
 8016eae:	f3bf 8f4f 	dsb	sy
 8016eb2:	60bb      	str	r3, [r7, #8]
}
 8016eb4:	bf00      	nop
 8016eb6:	e7fe      	b.n	8016eb6 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8016eb8:	4b0c      	ldr	r3, [pc, #48]	; (8016eec <vTaskDelete+0xe0>)
 8016eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016ebe:	601a      	str	r2, [r3, #0]
 8016ec0:	f3bf 8f4f 	dsb	sy
 8016ec4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8016ec8:	bf00      	nop
 8016eca:	3710      	adds	r7, #16
 8016ecc:	46bd      	mov	sp, r7
 8016ece:	bd80      	pop	{r7, pc}
 8016ed0:	20000ff4 	.word	0x20000ff4
 8016ed4:	200014e4 	.word	0x200014e4
 8016ed8:	2000149c 	.word	0x2000149c
 8016edc:	200014b0 	.word	0x200014b0
 8016ee0:	200014c8 	.word	0x200014c8
 8016ee4:	200014d4 	.word	0x200014d4
 8016ee8:	200014f0 	.word	0x200014f0
 8016eec:	e000ed04 	.word	0xe000ed04

08016ef0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8016ef0:	b580      	push	{r7, lr}
 8016ef2:	b084      	sub	sp, #16
 8016ef4:	af00      	add	r7, sp, #0
 8016ef6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8016ef8:	2300      	movs	r3, #0
 8016efa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	d017      	beq.n	8016f32 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8016f02:	4b13      	ldr	r3, [pc, #76]	; (8016f50 <vTaskDelay+0x60>)
 8016f04:	681b      	ldr	r3, [r3, #0]
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d00a      	beq.n	8016f20 <vTaskDelay+0x30>
	__asm volatile
 8016f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f0e:	f383 8811 	msr	BASEPRI, r3
 8016f12:	f3bf 8f6f 	isb	sy
 8016f16:	f3bf 8f4f 	dsb	sy
 8016f1a:	60bb      	str	r3, [r7, #8]
}
 8016f1c:	bf00      	nop
 8016f1e:	e7fe      	b.n	8016f1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8016f20:	f000 f88a 	bl	8017038 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8016f24:	2100      	movs	r1, #0
 8016f26:	6878      	ldr	r0, [r7, #4]
 8016f28:	f000 fe0c 	bl	8017b44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8016f2c:	f000 f892 	bl	8017054 <xTaskResumeAll>
 8016f30:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016f32:	68fb      	ldr	r3, [r7, #12]
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d107      	bne.n	8016f48 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8016f38:	4b06      	ldr	r3, [pc, #24]	; (8016f54 <vTaskDelay+0x64>)
 8016f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016f3e:	601a      	str	r2, [r3, #0]
 8016f40:	f3bf 8f4f 	dsb	sy
 8016f44:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016f48:	bf00      	nop
 8016f4a:	3710      	adds	r7, #16
 8016f4c:	46bd      	mov	sp, r7
 8016f4e:	bd80      	pop	{r7, pc}
 8016f50:	200014f0 	.word	0x200014f0
 8016f54:	e000ed04 	.word	0xe000ed04

08016f58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016f58:	b580      	push	{r7, lr}
 8016f5a:	b08a      	sub	sp, #40	; 0x28
 8016f5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016f5e:	2300      	movs	r3, #0
 8016f60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016f62:	2300      	movs	r3, #0
 8016f64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016f66:	463a      	mov	r2, r7
 8016f68:	1d39      	adds	r1, r7, #4
 8016f6a:	f107 0308 	add.w	r3, r7, #8
 8016f6e:	4618      	mov	r0, r3
 8016f70:	f7fe fc9e 	bl	80158b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016f74:	6839      	ldr	r1, [r7, #0]
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	68ba      	ldr	r2, [r7, #8]
 8016f7a:	9202      	str	r2, [sp, #8]
 8016f7c:	9301      	str	r3, [sp, #4]
 8016f7e:	2300      	movs	r3, #0
 8016f80:	9300      	str	r3, [sp, #0]
 8016f82:	2300      	movs	r3, #0
 8016f84:	460a      	mov	r2, r1
 8016f86:	4924      	ldr	r1, [pc, #144]	; (8017018 <vTaskStartScheduler+0xc0>)
 8016f88:	4824      	ldr	r0, [pc, #144]	; (801701c <vTaskStartScheduler+0xc4>)
 8016f8a:	f7ff fd87 	bl	8016a9c <xTaskCreateStatic>
 8016f8e:	4603      	mov	r3, r0
 8016f90:	4a23      	ldr	r2, [pc, #140]	; (8017020 <vTaskStartScheduler+0xc8>)
 8016f92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016f94:	4b22      	ldr	r3, [pc, #136]	; (8017020 <vTaskStartScheduler+0xc8>)
 8016f96:	681b      	ldr	r3, [r3, #0]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d002      	beq.n	8016fa2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016f9c:	2301      	movs	r3, #1
 8016f9e:	617b      	str	r3, [r7, #20]
 8016fa0:	e001      	b.n	8016fa6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8016fa2:	2300      	movs	r3, #0
 8016fa4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8016fa6:	697b      	ldr	r3, [r7, #20]
 8016fa8:	2b01      	cmp	r3, #1
 8016faa:	d102      	bne.n	8016fb2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8016fac:	f000 fe1e 	bl	8017bec <xTimerCreateTimerTask>
 8016fb0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8016fb2:	697b      	ldr	r3, [r7, #20]
 8016fb4:	2b01      	cmp	r3, #1
 8016fb6:	d11b      	bne.n	8016ff0 <vTaskStartScheduler+0x98>
	__asm volatile
 8016fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fbc:	f383 8811 	msr	BASEPRI, r3
 8016fc0:	f3bf 8f6f 	isb	sy
 8016fc4:	f3bf 8f4f 	dsb	sy
 8016fc8:	613b      	str	r3, [r7, #16]
}
 8016fca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016fcc:	4b15      	ldr	r3, [pc, #84]	; (8017024 <vTaskStartScheduler+0xcc>)
 8016fce:	681b      	ldr	r3, [r3, #0]
 8016fd0:	3354      	adds	r3, #84	; 0x54
 8016fd2:	4a15      	ldr	r2, [pc, #84]	; (8017028 <vTaskStartScheduler+0xd0>)
 8016fd4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8016fd6:	4b15      	ldr	r3, [pc, #84]	; (801702c <vTaskStartScheduler+0xd4>)
 8016fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8016fdc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8016fde:	4b14      	ldr	r3, [pc, #80]	; (8017030 <vTaskStartScheduler+0xd8>)
 8016fe0:	2201      	movs	r2, #1
 8016fe2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8016fe4:	4b13      	ldr	r3, [pc, #76]	; (8017034 <vTaskStartScheduler+0xdc>)
 8016fe6:	2200      	movs	r2, #0
 8016fe8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8016fea:	f001 f9d9 	bl	80183a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8016fee:	e00e      	b.n	801700e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8016ff0:	697b      	ldr	r3, [r7, #20]
 8016ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ff6:	d10a      	bne.n	801700e <vTaskStartScheduler+0xb6>
	__asm volatile
 8016ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ffc:	f383 8811 	msr	BASEPRI, r3
 8017000:	f3bf 8f6f 	isb	sy
 8017004:	f3bf 8f4f 	dsb	sy
 8017008:	60fb      	str	r3, [r7, #12]
}
 801700a:	bf00      	nop
 801700c:	e7fe      	b.n	801700c <vTaskStartScheduler+0xb4>
}
 801700e:	bf00      	nop
 8017010:	3718      	adds	r7, #24
 8017012:	46bd      	mov	sp, r7
 8017014:	bd80      	pop	{r7, pc}
 8017016:	bf00      	nop
 8017018:	08021490 	.word	0x08021490
 801701c:	0801765d 	.word	0x0801765d
 8017020:	200014ec 	.word	0x200014ec
 8017024:	20000ff4 	.word	0x20000ff4
 8017028:	200001f8 	.word	0x200001f8
 801702c:	200014e8 	.word	0x200014e8
 8017030:	200014d4 	.word	0x200014d4
 8017034:	200014cc 	.word	0x200014cc

08017038 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8017038:	b480      	push	{r7}
 801703a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801703c:	4b04      	ldr	r3, [pc, #16]	; (8017050 <vTaskSuspendAll+0x18>)
 801703e:	681b      	ldr	r3, [r3, #0]
 8017040:	3301      	adds	r3, #1
 8017042:	4a03      	ldr	r2, [pc, #12]	; (8017050 <vTaskSuspendAll+0x18>)
 8017044:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8017046:	bf00      	nop
 8017048:	46bd      	mov	sp, r7
 801704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801704e:	4770      	bx	lr
 8017050:	200014f0 	.word	0x200014f0

08017054 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017054:	b580      	push	{r7, lr}
 8017056:	b084      	sub	sp, #16
 8017058:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801705a:	2300      	movs	r3, #0
 801705c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801705e:	2300      	movs	r3, #0
 8017060:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8017062:	4b42      	ldr	r3, [pc, #264]	; (801716c <xTaskResumeAll+0x118>)
 8017064:	681b      	ldr	r3, [r3, #0]
 8017066:	2b00      	cmp	r3, #0
 8017068:	d10a      	bne.n	8017080 <xTaskResumeAll+0x2c>
	__asm volatile
 801706a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801706e:	f383 8811 	msr	BASEPRI, r3
 8017072:	f3bf 8f6f 	isb	sy
 8017076:	f3bf 8f4f 	dsb	sy
 801707a:	603b      	str	r3, [r7, #0]
}
 801707c:	bf00      	nop
 801707e:	e7fe      	b.n	801707e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8017080:	f001 fa30 	bl	80184e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8017084:	4b39      	ldr	r3, [pc, #228]	; (801716c <xTaskResumeAll+0x118>)
 8017086:	681b      	ldr	r3, [r3, #0]
 8017088:	3b01      	subs	r3, #1
 801708a:	4a38      	ldr	r2, [pc, #224]	; (801716c <xTaskResumeAll+0x118>)
 801708c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801708e:	4b37      	ldr	r3, [pc, #220]	; (801716c <xTaskResumeAll+0x118>)
 8017090:	681b      	ldr	r3, [r3, #0]
 8017092:	2b00      	cmp	r3, #0
 8017094:	d162      	bne.n	801715c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8017096:	4b36      	ldr	r3, [pc, #216]	; (8017170 <xTaskResumeAll+0x11c>)
 8017098:	681b      	ldr	r3, [r3, #0]
 801709a:	2b00      	cmp	r3, #0
 801709c:	d05e      	beq.n	801715c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801709e:	e02f      	b.n	8017100 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80170a0:	4b34      	ldr	r3, [pc, #208]	; (8017174 <xTaskResumeAll+0x120>)
 80170a2:	68db      	ldr	r3, [r3, #12]
 80170a4:	68db      	ldr	r3, [r3, #12]
 80170a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80170a8:	68fb      	ldr	r3, [r7, #12]
 80170aa:	3318      	adds	r3, #24
 80170ac:	4618      	mov	r0, r3
 80170ae:	f7fe fcbd 	bl	8015a2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80170b2:	68fb      	ldr	r3, [r7, #12]
 80170b4:	3304      	adds	r3, #4
 80170b6:	4618      	mov	r0, r3
 80170b8:	f7fe fcb8 	bl	8015a2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170c0:	4b2d      	ldr	r3, [pc, #180]	; (8017178 <xTaskResumeAll+0x124>)
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	429a      	cmp	r2, r3
 80170c6:	d903      	bls.n	80170d0 <xTaskResumeAll+0x7c>
 80170c8:	68fb      	ldr	r3, [r7, #12]
 80170ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170cc:	4a2a      	ldr	r2, [pc, #168]	; (8017178 <xTaskResumeAll+0x124>)
 80170ce:	6013      	str	r3, [r2, #0]
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170d4:	4613      	mov	r3, r2
 80170d6:	009b      	lsls	r3, r3, #2
 80170d8:	4413      	add	r3, r2
 80170da:	009b      	lsls	r3, r3, #2
 80170dc:	4a27      	ldr	r2, [pc, #156]	; (801717c <xTaskResumeAll+0x128>)
 80170de:	441a      	add	r2, r3
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	3304      	adds	r3, #4
 80170e4:	4619      	mov	r1, r3
 80170e6:	4610      	mov	r0, r2
 80170e8:	f7fe fc43 	bl	8015972 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170f0:	4b23      	ldr	r3, [pc, #140]	; (8017180 <xTaskResumeAll+0x12c>)
 80170f2:	681b      	ldr	r3, [r3, #0]
 80170f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170f6:	429a      	cmp	r2, r3
 80170f8:	d302      	bcc.n	8017100 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80170fa:	4b22      	ldr	r3, [pc, #136]	; (8017184 <xTaskResumeAll+0x130>)
 80170fc:	2201      	movs	r2, #1
 80170fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017100:	4b1c      	ldr	r3, [pc, #112]	; (8017174 <xTaskResumeAll+0x120>)
 8017102:	681b      	ldr	r3, [r3, #0]
 8017104:	2b00      	cmp	r3, #0
 8017106:	d1cb      	bne.n	80170a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	2b00      	cmp	r3, #0
 801710c:	d001      	beq.n	8017112 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801710e:	f000 fb5f 	bl	80177d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8017112:	4b1d      	ldr	r3, [pc, #116]	; (8017188 <xTaskResumeAll+0x134>)
 8017114:	681b      	ldr	r3, [r3, #0]
 8017116:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	2b00      	cmp	r3, #0
 801711c:	d010      	beq.n	8017140 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801711e:	f000 f847 	bl	80171b0 <xTaskIncrementTick>
 8017122:	4603      	mov	r3, r0
 8017124:	2b00      	cmp	r3, #0
 8017126:	d002      	beq.n	801712e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8017128:	4b16      	ldr	r3, [pc, #88]	; (8017184 <xTaskResumeAll+0x130>)
 801712a:	2201      	movs	r2, #1
 801712c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	3b01      	subs	r3, #1
 8017132:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	2b00      	cmp	r3, #0
 8017138:	d1f1      	bne.n	801711e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801713a:	4b13      	ldr	r3, [pc, #76]	; (8017188 <xTaskResumeAll+0x134>)
 801713c:	2200      	movs	r2, #0
 801713e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8017140:	4b10      	ldr	r3, [pc, #64]	; (8017184 <xTaskResumeAll+0x130>)
 8017142:	681b      	ldr	r3, [r3, #0]
 8017144:	2b00      	cmp	r3, #0
 8017146:	d009      	beq.n	801715c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8017148:	2301      	movs	r3, #1
 801714a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801714c:	4b0f      	ldr	r3, [pc, #60]	; (801718c <xTaskResumeAll+0x138>)
 801714e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017152:	601a      	str	r2, [r3, #0]
 8017154:	f3bf 8f4f 	dsb	sy
 8017158:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801715c:	f001 f9f2 	bl	8018544 <vPortExitCritical>

	return xAlreadyYielded;
 8017160:	68bb      	ldr	r3, [r7, #8]
}
 8017162:	4618      	mov	r0, r3
 8017164:	3710      	adds	r7, #16
 8017166:	46bd      	mov	sp, r7
 8017168:	bd80      	pop	{r7, pc}
 801716a:	bf00      	nop
 801716c:	200014f0 	.word	0x200014f0
 8017170:	200014c8 	.word	0x200014c8
 8017174:	20001488 	.word	0x20001488
 8017178:	200014d0 	.word	0x200014d0
 801717c:	20000ff8 	.word	0x20000ff8
 8017180:	20000ff4 	.word	0x20000ff4
 8017184:	200014dc 	.word	0x200014dc
 8017188:	200014d8 	.word	0x200014d8
 801718c:	e000ed04 	.word	0xe000ed04

08017190 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8017190:	b480      	push	{r7}
 8017192:	b083      	sub	sp, #12
 8017194:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8017196:	4b05      	ldr	r3, [pc, #20]	; (80171ac <xTaskGetTickCount+0x1c>)
 8017198:	681b      	ldr	r3, [r3, #0]
 801719a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801719c:	687b      	ldr	r3, [r7, #4]
}
 801719e:	4618      	mov	r0, r3
 80171a0:	370c      	adds	r7, #12
 80171a2:	46bd      	mov	sp, r7
 80171a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171a8:	4770      	bx	lr
 80171aa:	bf00      	nop
 80171ac:	200014cc 	.word	0x200014cc

080171b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80171b0:	b580      	push	{r7, lr}
 80171b2:	b086      	sub	sp, #24
 80171b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80171b6:	2300      	movs	r3, #0
 80171b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80171ba:	4b4f      	ldr	r3, [pc, #316]	; (80172f8 <xTaskIncrementTick+0x148>)
 80171bc:	681b      	ldr	r3, [r3, #0]
 80171be:	2b00      	cmp	r3, #0
 80171c0:	f040 808f 	bne.w	80172e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80171c4:	4b4d      	ldr	r3, [pc, #308]	; (80172fc <xTaskIncrementTick+0x14c>)
 80171c6:	681b      	ldr	r3, [r3, #0]
 80171c8:	3301      	adds	r3, #1
 80171ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80171cc:	4a4b      	ldr	r2, [pc, #300]	; (80172fc <xTaskIncrementTick+0x14c>)
 80171ce:	693b      	ldr	r3, [r7, #16]
 80171d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80171d2:	693b      	ldr	r3, [r7, #16]
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d120      	bne.n	801721a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80171d8:	4b49      	ldr	r3, [pc, #292]	; (8017300 <xTaskIncrementTick+0x150>)
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	681b      	ldr	r3, [r3, #0]
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d00a      	beq.n	80171f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80171e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171e6:	f383 8811 	msr	BASEPRI, r3
 80171ea:	f3bf 8f6f 	isb	sy
 80171ee:	f3bf 8f4f 	dsb	sy
 80171f2:	603b      	str	r3, [r7, #0]
}
 80171f4:	bf00      	nop
 80171f6:	e7fe      	b.n	80171f6 <xTaskIncrementTick+0x46>
 80171f8:	4b41      	ldr	r3, [pc, #260]	; (8017300 <xTaskIncrementTick+0x150>)
 80171fa:	681b      	ldr	r3, [r3, #0]
 80171fc:	60fb      	str	r3, [r7, #12]
 80171fe:	4b41      	ldr	r3, [pc, #260]	; (8017304 <xTaskIncrementTick+0x154>)
 8017200:	681b      	ldr	r3, [r3, #0]
 8017202:	4a3f      	ldr	r2, [pc, #252]	; (8017300 <xTaskIncrementTick+0x150>)
 8017204:	6013      	str	r3, [r2, #0]
 8017206:	4a3f      	ldr	r2, [pc, #252]	; (8017304 <xTaskIncrementTick+0x154>)
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	6013      	str	r3, [r2, #0]
 801720c:	4b3e      	ldr	r3, [pc, #248]	; (8017308 <xTaskIncrementTick+0x158>)
 801720e:	681b      	ldr	r3, [r3, #0]
 8017210:	3301      	adds	r3, #1
 8017212:	4a3d      	ldr	r2, [pc, #244]	; (8017308 <xTaskIncrementTick+0x158>)
 8017214:	6013      	str	r3, [r2, #0]
 8017216:	f000 fadb 	bl	80177d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801721a:	4b3c      	ldr	r3, [pc, #240]	; (801730c <xTaskIncrementTick+0x15c>)
 801721c:	681b      	ldr	r3, [r3, #0]
 801721e:	693a      	ldr	r2, [r7, #16]
 8017220:	429a      	cmp	r2, r3
 8017222:	d349      	bcc.n	80172b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017224:	4b36      	ldr	r3, [pc, #216]	; (8017300 <xTaskIncrementTick+0x150>)
 8017226:	681b      	ldr	r3, [r3, #0]
 8017228:	681b      	ldr	r3, [r3, #0]
 801722a:	2b00      	cmp	r3, #0
 801722c:	d104      	bne.n	8017238 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801722e:	4b37      	ldr	r3, [pc, #220]	; (801730c <xTaskIncrementTick+0x15c>)
 8017230:	f04f 32ff 	mov.w	r2, #4294967295
 8017234:	601a      	str	r2, [r3, #0]
					break;
 8017236:	e03f      	b.n	80172b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017238:	4b31      	ldr	r3, [pc, #196]	; (8017300 <xTaskIncrementTick+0x150>)
 801723a:	681b      	ldr	r3, [r3, #0]
 801723c:	68db      	ldr	r3, [r3, #12]
 801723e:	68db      	ldr	r3, [r3, #12]
 8017240:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017242:	68bb      	ldr	r3, [r7, #8]
 8017244:	685b      	ldr	r3, [r3, #4]
 8017246:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8017248:	693a      	ldr	r2, [r7, #16]
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	429a      	cmp	r2, r3
 801724e:	d203      	bcs.n	8017258 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8017250:	4a2e      	ldr	r2, [pc, #184]	; (801730c <xTaskIncrementTick+0x15c>)
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8017256:	e02f      	b.n	80172b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017258:	68bb      	ldr	r3, [r7, #8]
 801725a:	3304      	adds	r3, #4
 801725c:	4618      	mov	r0, r3
 801725e:	f7fe fbe5 	bl	8015a2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017262:	68bb      	ldr	r3, [r7, #8]
 8017264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017266:	2b00      	cmp	r3, #0
 8017268:	d004      	beq.n	8017274 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801726a:	68bb      	ldr	r3, [r7, #8]
 801726c:	3318      	adds	r3, #24
 801726e:	4618      	mov	r0, r3
 8017270:	f7fe fbdc 	bl	8015a2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8017274:	68bb      	ldr	r3, [r7, #8]
 8017276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017278:	4b25      	ldr	r3, [pc, #148]	; (8017310 <xTaskIncrementTick+0x160>)
 801727a:	681b      	ldr	r3, [r3, #0]
 801727c:	429a      	cmp	r2, r3
 801727e:	d903      	bls.n	8017288 <xTaskIncrementTick+0xd8>
 8017280:	68bb      	ldr	r3, [r7, #8]
 8017282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017284:	4a22      	ldr	r2, [pc, #136]	; (8017310 <xTaskIncrementTick+0x160>)
 8017286:	6013      	str	r3, [r2, #0]
 8017288:	68bb      	ldr	r3, [r7, #8]
 801728a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801728c:	4613      	mov	r3, r2
 801728e:	009b      	lsls	r3, r3, #2
 8017290:	4413      	add	r3, r2
 8017292:	009b      	lsls	r3, r3, #2
 8017294:	4a1f      	ldr	r2, [pc, #124]	; (8017314 <xTaskIncrementTick+0x164>)
 8017296:	441a      	add	r2, r3
 8017298:	68bb      	ldr	r3, [r7, #8]
 801729a:	3304      	adds	r3, #4
 801729c:	4619      	mov	r1, r3
 801729e:	4610      	mov	r0, r2
 80172a0:	f7fe fb67 	bl	8015972 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80172a4:	68bb      	ldr	r3, [r7, #8]
 80172a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80172a8:	4b1b      	ldr	r3, [pc, #108]	; (8017318 <xTaskIncrementTick+0x168>)
 80172aa:	681b      	ldr	r3, [r3, #0]
 80172ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80172ae:	429a      	cmp	r2, r3
 80172b0:	d3b8      	bcc.n	8017224 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80172b2:	2301      	movs	r3, #1
 80172b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80172b6:	e7b5      	b.n	8017224 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80172b8:	4b17      	ldr	r3, [pc, #92]	; (8017318 <xTaskIncrementTick+0x168>)
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80172be:	4915      	ldr	r1, [pc, #84]	; (8017314 <xTaskIncrementTick+0x164>)
 80172c0:	4613      	mov	r3, r2
 80172c2:	009b      	lsls	r3, r3, #2
 80172c4:	4413      	add	r3, r2
 80172c6:	009b      	lsls	r3, r3, #2
 80172c8:	440b      	add	r3, r1
 80172ca:	681b      	ldr	r3, [r3, #0]
 80172cc:	2b01      	cmp	r3, #1
 80172ce:	d901      	bls.n	80172d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80172d0:	2301      	movs	r3, #1
 80172d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80172d4:	4b11      	ldr	r3, [pc, #68]	; (801731c <xTaskIncrementTick+0x16c>)
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d007      	beq.n	80172ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80172dc:	2301      	movs	r3, #1
 80172de:	617b      	str	r3, [r7, #20]
 80172e0:	e004      	b.n	80172ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80172e2:	4b0f      	ldr	r3, [pc, #60]	; (8017320 <xTaskIncrementTick+0x170>)
 80172e4:	681b      	ldr	r3, [r3, #0]
 80172e6:	3301      	adds	r3, #1
 80172e8:	4a0d      	ldr	r2, [pc, #52]	; (8017320 <xTaskIncrementTick+0x170>)
 80172ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80172ec:	697b      	ldr	r3, [r7, #20]
}
 80172ee:	4618      	mov	r0, r3
 80172f0:	3718      	adds	r7, #24
 80172f2:	46bd      	mov	sp, r7
 80172f4:	bd80      	pop	{r7, pc}
 80172f6:	bf00      	nop
 80172f8:	200014f0 	.word	0x200014f0
 80172fc:	200014cc 	.word	0x200014cc
 8017300:	20001480 	.word	0x20001480
 8017304:	20001484 	.word	0x20001484
 8017308:	200014e0 	.word	0x200014e0
 801730c:	200014e8 	.word	0x200014e8
 8017310:	200014d0 	.word	0x200014d0
 8017314:	20000ff8 	.word	0x20000ff8
 8017318:	20000ff4 	.word	0x20000ff4
 801731c:	200014dc 	.word	0x200014dc
 8017320:	200014d8 	.word	0x200014d8

08017324 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017324:	b480      	push	{r7}
 8017326:	b085      	sub	sp, #20
 8017328:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801732a:	4b2a      	ldr	r3, [pc, #168]	; (80173d4 <vTaskSwitchContext+0xb0>)
 801732c:	681b      	ldr	r3, [r3, #0]
 801732e:	2b00      	cmp	r3, #0
 8017330:	d003      	beq.n	801733a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017332:	4b29      	ldr	r3, [pc, #164]	; (80173d8 <vTaskSwitchContext+0xb4>)
 8017334:	2201      	movs	r2, #1
 8017336:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017338:	e046      	b.n	80173c8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 801733a:	4b27      	ldr	r3, [pc, #156]	; (80173d8 <vTaskSwitchContext+0xb4>)
 801733c:	2200      	movs	r2, #0
 801733e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017340:	4b26      	ldr	r3, [pc, #152]	; (80173dc <vTaskSwitchContext+0xb8>)
 8017342:	681b      	ldr	r3, [r3, #0]
 8017344:	60fb      	str	r3, [r7, #12]
 8017346:	e010      	b.n	801736a <vTaskSwitchContext+0x46>
 8017348:	68fb      	ldr	r3, [r7, #12]
 801734a:	2b00      	cmp	r3, #0
 801734c:	d10a      	bne.n	8017364 <vTaskSwitchContext+0x40>
	__asm volatile
 801734e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017352:	f383 8811 	msr	BASEPRI, r3
 8017356:	f3bf 8f6f 	isb	sy
 801735a:	f3bf 8f4f 	dsb	sy
 801735e:	607b      	str	r3, [r7, #4]
}
 8017360:	bf00      	nop
 8017362:	e7fe      	b.n	8017362 <vTaskSwitchContext+0x3e>
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	3b01      	subs	r3, #1
 8017368:	60fb      	str	r3, [r7, #12]
 801736a:	491d      	ldr	r1, [pc, #116]	; (80173e0 <vTaskSwitchContext+0xbc>)
 801736c:	68fa      	ldr	r2, [r7, #12]
 801736e:	4613      	mov	r3, r2
 8017370:	009b      	lsls	r3, r3, #2
 8017372:	4413      	add	r3, r2
 8017374:	009b      	lsls	r3, r3, #2
 8017376:	440b      	add	r3, r1
 8017378:	681b      	ldr	r3, [r3, #0]
 801737a:	2b00      	cmp	r3, #0
 801737c:	d0e4      	beq.n	8017348 <vTaskSwitchContext+0x24>
 801737e:	68fa      	ldr	r2, [r7, #12]
 8017380:	4613      	mov	r3, r2
 8017382:	009b      	lsls	r3, r3, #2
 8017384:	4413      	add	r3, r2
 8017386:	009b      	lsls	r3, r3, #2
 8017388:	4a15      	ldr	r2, [pc, #84]	; (80173e0 <vTaskSwitchContext+0xbc>)
 801738a:	4413      	add	r3, r2
 801738c:	60bb      	str	r3, [r7, #8]
 801738e:	68bb      	ldr	r3, [r7, #8]
 8017390:	685b      	ldr	r3, [r3, #4]
 8017392:	685a      	ldr	r2, [r3, #4]
 8017394:	68bb      	ldr	r3, [r7, #8]
 8017396:	605a      	str	r2, [r3, #4]
 8017398:	68bb      	ldr	r3, [r7, #8]
 801739a:	685a      	ldr	r2, [r3, #4]
 801739c:	68bb      	ldr	r3, [r7, #8]
 801739e:	3308      	adds	r3, #8
 80173a0:	429a      	cmp	r2, r3
 80173a2:	d104      	bne.n	80173ae <vTaskSwitchContext+0x8a>
 80173a4:	68bb      	ldr	r3, [r7, #8]
 80173a6:	685b      	ldr	r3, [r3, #4]
 80173a8:	685a      	ldr	r2, [r3, #4]
 80173aa:	68bb      	ldr	r3, [r7, #8]
 80173ac:	605a      	str	r2, [r3, #4]
 80173ae:	68bb      	ldr	r3, [r7, #8]
 80173b0:	685b      	ldr	r3, [r3, #4]
 80173b2:	68db      	ldr	r3, [r3, #12]
 80173b4:	4a0b      	ldr	r2, [pc, #44]	; (80173e4 <vTaskSwitchContext+0xc0>)
 80173b6:	6013      	str	r3, [r2, #0]
 80173b8:	4a08      	ldr	r2, [pc, #32]	; (80173dc <vTaskSwitchContext+0xb8>)
 80173ba:	68fb      	ldr	r3, [r7, #12]
 80173bc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80173be:	4b09      	ldr	r3, [pc, #36]	; (80173e4 <vTaskSwitchContext+0xc0>)
 80173c0:	681b      	ldr	r3, [r3, #0]
 80173c2:	3354      	adds	r3, #84	; 0x54
 80173c4:	4a08      	ldr	r2, [pc, #32]	; (80173e8 <vTaskSwitchContext+0xc4>)
 80173c6:	6013      	str	r3, [r2, #0]
}
 80173c8:	bf00      	nop
 80173ca:	3714      	adds	r7, #20
 80173cc:	46bd      	mov	sp, r7
 80173ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173d2:	4770      	bx	lr
 80173d4:	200014f0 	.word	0x200014f0
 80173d8:	200014dc 	.word	0x200014dc
 80173dc:	200014d0 	.word	0x200014d0
 80173e0:	20000ff8 	.word	0x20000ff8
 80173e4:	20000ff4 	.word	0x20000ff4
 80173e8:	200001f8 	.word	0x200001f8

080173ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80173ec:	b580      	push	{r7, lr}
 80173ee:	b084      	sub	sp, #16
 80173f0:	af00      	add	r7, sp, #0
 80173f2:	6078      	str	r0, [r7, #4]
 80173f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d10a      	bne.n	8017412 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80173fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017400:	f383 8811 	msr	BASEPRI, r3
 8017404:	f3bf 8f6f 	isb	sy
 8017408:	f3bf 8f4f 	dsb	sy
 801740c:	60fb      	str	r3, [r7, #12]
}
 801740e:	bf00      	nop
 8017410:	e7fe      	b.n	8017410 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017412:	4b07      	ldr	r3, [pc, #28]	; (8017430 <vTaskPlaceOnEventList+0x44>)
 8017414:	681b      	ldr	r3, [r3, #0]
 8017416:	3318      	adds	r3, #24
 8017418:	4619      	mov	r1, r3
 801741a:	6878      	ldr	r0, [r7, #4]
 801741c:	f7fe facd 	bl	80159ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017420:	2101      	movs	r1, #1
 8017422:	6838      	ldr	r0, [r7, #0]
 8017424:	f000 fb8e 	bl	8017b44 <prvAddCurrentTaskToDelayedList>
}
 8017428:	bf00      	nop
 801742a:	3710      	adds	r7, #16
 801742c:	46bd      	mov	sp, r7
 801742e:	bd80      	pop	{r7, pc}
 8017430:	20000ff4 	.word	0x20000ff4

08017434 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017434:	b580      	push	{r7, lr}
 8017436:	b086      	sub	sp, #24
 8017438:	af00      	add	r7, sp, #0
 801743a:	60f8      	str	r0, [r7, #12]
 801743c:	60b9      	str	r1, [r7, #8]
 801743e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8017440:	68fb      	ldr	r3, [r7, #12]
 8017442:	2b00      	cmp	r3, #0
 8017444:	d10a      	bne.n	801745c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8017446:	f04f 0350 	mov.w	r3, #80	; 0x50
 801744a:	f383 8811 	msr	BASEPRI, r3
 801744e:	f3bf 8f6f 	isb	sy
 8017452:	f3bf 8f4f 	dsb	sy
 8017456:	617b      	str	r3, [r7, #20]
}
 8017458:	bf00      	nop
 801745a:	e7fe      	b.n	801745a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801745c:	4b0a      	ldr	r3, [pc, #40]	; (8017488 <vTaskPlaceOnEventListRestricted+0x54>)
 801745e:	681b      	ldr	r3, [r3, #0]
 8017460:	3318      	adds	r3, #24
 8017462:	4619      	mov	r1, r3
 8017464:	68f8      	ldr	r0, [r7, #12]
 8017466:	f7fe fa84 	bl	8015972 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	2b00      	cmp	r3, #0
 801746e:	d002      	beq.n	8017476 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8017470:	f04f 33ff 	mov.w	r3, #4294967295
 8017474:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017476:	6879      	ldr	r1, [r7, #4]
 8017478:	68b8      	ldr	r0, [r7, #8]
 801747a:	f000 fb63 	bl	8017b44 <prvAddCurrentTaskToDelayedList>
	}
 801747e:	bf00      	nop
 8017480:	3718      	adds	r7, #24
 8017482:	46bd      	mov	sp, r7
 8017484:	bd80      	pop	{r7, pc}
 8017486:	bf00      	nop
 8017488:	20000ff4 	.word	0x20000ff4

0801748c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801748c:	b580      	push	{r7, lr}
 801748e:	b086      	sub	sp, #24
 8017490:	af00      	add	r7, sp, #0
 8017492:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	68db      	ldr	r3, [r3, #12]
 8017498:	68db      	ldr	r3, [r3, #12]
 801749a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801749c:	693b      	ldr	r3, [r7, #16]
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d10a      	bne.n	80174b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80174a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174a6:	f383 8811 	msr	BASEPRI, r3
 80174aa:	f3bf 8f6f 	isb	sy
 80174ae:	f3bf 8f4f 	dsb	sy
 80174b2:	60fb      	str	r3, [r7, #12]
}
 80174b4:	bf00      	nop
 80174b6:	e7fe      	b.n	80174b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80174b8:	693b      	ldr	r3, [r7, #16]
 80174ba:	3318      	adds	r3, #24
 80174bc:	4618      	mov	r0, r3
 80174be:	f7fe fab5 	bl	8015a2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80174c2:	4b1e      	ldr	r3, [pc, #120]	; (801753c <xTaskRemoveFromEventList+0xb0>)
 80174c4:	681b      	ldr	r3, [r3, #0]
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	d11d      	bne.n	8017506 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80174ca:	693b      	ldr	r3, [r7, #16]
 80174cc:	3304      	adds	r3, #4
 80174ce:	4618      	mov	r0, r3
 80174d0:	f7fe faac 	bl	8015a2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80174d4:	693b      	ldr	r3, [r7, #16]
 80174d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174d8:	4b19      	ldr	r3, [pc, #100]	; (8017540 <xTaskRemoveFromEventList+0xb4>)
 80174da:	681b      	ldr	r3, [r3, #0]
 80174dc:	429a      	cmp	r2, r3
 80174de:	d903      	bls.n	80174e8 <xTaskRemoveFromEventList+0x5c>
 80174e0:	693b      	ldr	r3, [r7, #16]
 80174e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174e4:	4a16      	ldr	r2, [pc, #88]	; (8017540 <xTaskRemoveFromEventList+0xb4>)
 80174e6:	6013      	str	r3, [r2, #0]
 80174e8:	693b      	ldr	r3, [r7, #16]
 80174ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174ec:	4613      	mov	r3, r2
 80174ee:	009b      	lsls	r3, r3, #2
 80174f0:	4413      	add	r3, r2
 80174f2:	009b      	lsls	r3, r3, #2
 80174f4:	4a13      	ldr	r2, [pc, #76]	; (8017544 <xTaskRemoveFromEventList+0xb8>)
 80174f6:	441a      	add	r2, r3
 80174f8:	693b      	ldr	r3, [r7, #16]
 80174fa:	3304      	adds	r3, #4
 80174fc:	4619      	mov	r1, r3
 80174fe:	4610      	mov	r0, r2
 8017500:	f7fe fa37 	bl	8015972 <vListInsertEnd>
 8017504:	e005      	b.n	8017512 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017506:	693b      	ldr	r3, [r7, #16]
 8017508:	3318      	adds	r3, #24
 801750a:	4619      	mov	r1, r3
 801750c:	480e      	ldr	r0, [pc, #56]	; (8017548 <xTaskRemoveFromEventList+0xbc>)
 801750e:	f7fe fa30 	bl	8015972 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017512:	693b      	ldr	r3, [r7, #16]
 8017514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017516:	4b0d      	ldr	r3, [pc, #52]	; (801754c <xTaskRemoveFromEventList+0xc0>)
 8017518:	681b      	ldr	r3, [r3, #0]
 801751a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801751c:	429a      	cmp	r2, r3
 801751e:	d905      	bls.n	801752c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8017520:	2301      	movs	r3, #1
 8017522:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8017524:	4b0a      	ldr	r3, [pc, #40]	; (8017550 <xTaskRemoveFromEventList+0xc4>)
 8017526:	2201      	movs	r2, #1
 8017528:	601a      	str	r2, [r3, #0]
 801752a:	e001      	b.n	8017530 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801752c:	2300      	movs	r3, #0
 801752e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8017530:	697b      	ldr	r3, [r7, #20]
}
 8017532:	4618      	mov	r0, r3
 8017534:	3718      	adds	r7, #24
 8017536:	46bd      	mov	sp, r7
 8017538:	bd80      	pop	{r7, pc}
 801753a:	bf00      	nop
 801753c:	200014f0 	.word	0x200014f0
 8017540:	200014d0 	.word	0x200014d0
 8017544:	20000ff8 	.word	0x20000ff8
 8017548:	20001488 	.word	0x20001488
 801754c:	20000ff4 	.word	0x20000ff4
 8017550:	200014dc 	.word	0x200014dc

08017554 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017554:	b480      	push	{r7}
 8017556:	b083      	sub	sp, #12
 8017558:	af00      	add	r7, sp, #0
 801755a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801755c:	4b06      	ldr	r3, [pc, #24]	; (8017578 <vTaskInternalSetTimeOutState+0x24>)
 801755e:	681a      	ldr	r2, [r3, #0]
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017564:	4b05      	ldr	r3, [pc, #20]	; (801757c <vTaskInternalSetTimeOutState+0x28>)
 8017566:	681a      	ldr	r2, [r3, #0]
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	605a      	str	r2, [r3, #4]
}
 801756c:	bf00      	nop
 801756e:	370c      	adds	r7, #12
 8017570:	46bd      	mov	sp, r7
 8017572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017576:	4770      	bx	lr
 8017578:	200014e0 	.word	0x200014e0
 801757c:	200014cc 	.word	0x200014cc

08017580 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017580:	b580      	push	{r7, lr}
 8017582:	b088      	sub	sp, #32
 8017584:	af00      	add	r7, sp, #0
 8017586:	6078      	str	r0, [r7, #4]
 8017588:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	2b00      	cmp	r3, #0
 801758e:	d10a      	bne.n	80175a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8017590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017594:	f383 8811 	msr	BASEPRI, r3
 8017598:	f3bf 8f6f 	isb	sy
 801759c:	f3bf 8f4f 	dsb	sy
 80175a0:	613b      	str	r3, [r7, #16]
}
 80175a2:	bf00      	nop
 80175a4:	e7fe      	b.n	80175a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80175a6:	683b      	ldr	r3, [r7, #0]
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	d10a      	bne.n	80175c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80175ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175b0:	f383 8811 	msr	BASEPRI, r3
 80175b4:	f3bf 8f6f 	isb	sy
 80175b8:	f3bf 8f4f 	dsb	sy
 80175bc:	60fb      	str	r3, [r7, #12]
}
 80175be:	bf00      	nop
 80175c0:	e7fe      	b.n	80175c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80175c2:	f000 ff8f 	bl	80184e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80175c6:	4b1d      	ldr	r3, [pc, #116]	; (801763c <xTaskCheckForTimeOut+0xbc>)
 80175c8:	681b      	ldr	r3, [r3, #0]
 80175ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	685b      	ldr	r3, [r3, #4]
 80175d0:	69ba      	ldr	r2, [r7, #24]
 80175d2:	1ad3      	subs	r3, r2, r3
 80175d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80175d6:	683b      	ldr	r3, [r7, #0]
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80175de:	d102      	bne.n	80175e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80175e0:	2300      	movs	r3, #0
 80175e2:	61fb      	str	r3, [r7, #28]
 80175e4:	e023      	b.n	801762e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	681a      	ldr	r2, [r3, #0]
 80175ea:	4b15      	ldr	r3, [pc, #84]	; (8017640 <xTaskCheckForTimeOut+0xc0>)
 80175ec:	681b      	ldr	r3, [r3, #0]
 80175ee:	429a      	cmp	r2, r3
 80175f0:	d007      	beq.n	8017602 <xTaskCheckForTimeOut+0x82>
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	685b      	ldr	r3, [r3, #4]
 80175f6:	69ba      	ldr	r2, [r7, #24]
 80175f8:	429a      	cmp	r2, r3
 80175fa:	d302      	bcc.n	8017602 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80175fc:	2301      	movs	r3, #1
 80175fe:	61fb      	str	r3, [r7, #28]
 8017600:	e015      	b.n	801762e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8017602:	683b      	ldr	r3, [r7, #0]
 8017604:	681b      	ldr	r3, [r3, #0]
 8017606:	697a      	ldr	r2, [r7, #20]
 8017608:	429a      	cmp	r2, r3
 801760a:	d20b      	bcs.n	8017624 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801760c:	683b      	ldr	r3, [r7, #0]
 801760e:	681a      	ldr	r2, [r3, #0]
 8017610:	697b      	ldr	r3, [r7, #20]
 8017612:	1ad2      	subs	r2, r2, r3
 8017614:	683b      	ldr	r3, [r7, #0]
 8017616:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8017618:	6878      	ldr	r0, [r7, #4]
 801761a:	f7ff ff9b 	bl	8017554 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801761e:	2300      	movs	r3, #0
 8017620:	61fb      	str	r3, [r7, #28]
 8017622:	e004      	b.n	801762e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8017624:	683b      	ldr	r3, [r7, #0]
 8017626:	2200      	movs	r2, #0
 8017628:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801762a:	2301      	movs	r3, #1
 801762c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801762e:	f000 ff89 	bl	8018544 <vPortExitCritical>

	return xReturn;
 8017632:	69fb      	ldr	r3, [r7, #28]
}
 8017634:	4618      	mov	r0, r3
 8017636:	3720      	adds	r7, #32
 8017638:	46bd      	mov	sp, r7
 801763a:	bd80      	pop	{r7, pc}
 801763c:	200014cc 	.word	0x200014cc
 8017640:	200014e0 	.word	0x200014e0

08017644 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017644:	b480      	push	{r7}
 8017646:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8017648:	4b03      	ldr	r3, [pc, #12]	; (8017658 <vTaskMissedYield+0x14>)
 801764a:	2201      	movs	r2, #1
 801764c:	601a      	str	r2, [r3, #0]
}
 801764e:	bf00      	nop
 8017650:	46bd      	mov	sp, r7
 8017652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017656:	4770      	bx	lr
 8017658:	200014dc 	.word	0x200014dc

0801765c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801765c:	b580      	push	{r7, lr}
 801765e:	b082      	sub	sp, #8
 8017660:	af00      	add	r7, sp, #0
 8017662:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017664:	f000 f852 	bl	801770c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017668:	4b06      	ldr	r3, [pc, #24]	; (8017684 <prvIdleTask+0x28>)
 801766a:	681b      	ldr	r3, [r3, #0]
 801766c:	2b01      	cmp	r3, #1
 801766e:	d9f9      	bls.n	8017664 <prvIdleTask+0x8>
			{
				taskYIELD();
 8017670:	4b05      	ldr	r3, [pc, #20]	; (8017688 <prvIdleTask+0x2c>)
 8017672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017676:	601a      	str	r2, [r3, #0]
 8017678:	f3bf 8f4f 	dsb	sy
 801767c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8017680:	e7f0      	b.n	8017664 <prvIdleTask+0x8>
 8017682:	bf00      	nop
 8017684:	20000ff8 	.word	0x20000ff8
 8017688:	e000ed04 	.word	0xe000ed04

0801768c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801768c:	b580      	push	{r7, lr}
 801768e:	b082      	sub	sp, #8
 8017690:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017692:	2300      	movs	r3, #0
 8017694:	607b      	str	r3, [r7, #4]
 8017696:	e00c      	b.n	80176b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017698:	687a      	ldr	r2, [r7, #4]
 801769a:	4613      	mov	r3, r2
 801769c:	009b      	lsls	r3, r3, #2
 801769e:	4413      	add	r3, r2
 80176a0:	009b      	lsls	r3, r3, #2
 80176a2:	4a12      	ldr	r2, [pc, #72]	; (80176ec <prvInitialiseTaskLists+0x60>)
 80176a4:	4413      	add	r3, r2
 80176a6:	4618      	mov	r0, r3
 80176a8:	f7fe f936 	bl	8015918 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	3301      	adds	r3, #1
 80176b0:	607b      	str	r3, [r7, #4]
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	2b37      	cmp	r3, #55	; 0x37
 80176b6:	d9ef      	bls.n	8017698 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80176b8:	480d      	ldr	r0, [pc, #52]	; (80176f0 <prvInitialiseTaskLists+0x64>)
 80176ba:	f7fe f92d 	bl	8015918 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80176be:	480d      	ldr	r0, [pc, #52]	; (80176f4 <prvInitialiseTaskLists+0x68>)
 80176c0:	f7fe f92a 	bl	8015918 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80176c4:	480c      	ldr	r0, [pc, #48]	; (80176f8 <prvInitialiseTaskLists+0x6c>)
 80176c6:	f7fe f927 	bl	8015918 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80176ca:	480c      	ldr	r0, [pc, #48]	; (80176fc <prvInitialiseTaskLists+0x70>)
 80176cc:	f7fe f924 	bl	8015918 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80176d0:	480b      	ldr	r0, [pc, #44]	; (8017700 <prvInitialiseTaskLists+0x74>)
 80176d2:	f7fe f921 	bl	8015918 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80176d6:	4b0b      	ldr	r3, [pc, #44]	; (8017704 <prvInitialiseTaskLists+0x78>)
 80176d8:	4a05      	ldr	r2, [pc, #20]	; (80176f0 <prvInitialiseTaskLists+0x64>)
 80176da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80176dc:	4b0a      	ldr	r3, [pc, #40]	; (8017708 <prvInitialiseTaskLists+0x7c>)
 80176de:	4a05      	ldr	r2, [pc, #20]	; (80176f4 <prvInitialiseTaskLists+0x68>)
 80176e0:	601a      	str	r2, [r3, #0]
}
 80176e2:	bf00      	nop
 80176e4:	3708      	adds	r7, #8
 80176e6:	46bd      	mov	sp, r7
 80176e8:	bd80      	pop	{r7, pc}
 80176ea:	bf00      	nop
 80176ec:	20000ff8 	.word	0x20000ff8
 80176f0:	20001458 	.word	0x20001458
 80176f4:	2000146c 	.word	0x2000146c
 80176f8:	20001488 	.word	0x20001488
 80176fc:	2000149c 	.word	0x2000149c
 8017700:	200014b4 	.word	0x200014b4
 8017704:	20001480 	.word	0x20001480
 8017708:	20001484 	.word	0x20001484

0801770c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801770c:	b580      	push	{r7, lr}
 801770e:	b082      	sub	sp, #8
 8017710:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017712:	e019      	b.n	8017748 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8017714:	f000 fee6 	bl	80184e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017718:	4b10      	ldr	r3, [pc, #64]	; (801775c <prvCheckTasksWaitingTermination+0x50>)
 801771a:	68db      	ldr	r3, [r3, #12]
 801771c:	68db      	ldr	r3, [r3, #12]
 801771e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	3304      	adds	r3, #4
 8017724:	4618      	mov	r0, r3
 8017726:	f7fe f981 	bl	8015a2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801772a:	4b0d      	ldr	r3, [pc, #52]	; (8017760 <prvCheckTasksWaitingTermination+0x54>)
 801772c:	681b      	ldr	r3, [r3, #0]
 801772e:	3b01      	subs	r3, #1
 8017730:	4a0b      	ldr	r2, [pc, #44]	; (8017760 <prvCheckTasksWaitingTermination+0x54>)
 8017732:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017734:	4b0b      	ldr	r3, [pc, #44]	; (8017764 <prvCheckTasksWaitingTermination+0x58>)
 8017736:	681b      	ldr	r3, [r3, #0]
 8017738:	3b01      	subs	r3, #1
 801773a:	4a0a      	ldr	r2, [pc, #40]	; (8017764 <prvCheckTasksWaitingTermination+0x58>)
 801773c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801773e:	f000 ff01 	bl	8018544 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8017742:	6878      	ldr	r0, [r7, #4]
 8017744:	f000 f810 	bl	8017768 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017748:	4b06      	ldr	r3, [pc, #24]	; (8017764 <prvCheckTasksWaitingTermination+0x58>)
 801774a:	681b      	ldr	r3, [r3, #0]
 801774c:	2b00      	cmp	r3, #0
 801774e:	d1e1      	bne.n	8017714 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017750:	bf00      	nop
 8017752:	bf00      	nop
 8017754:	3708      	adds	r7, #8
 8017756:	46bd      	mov	sp, r7
 8017758:	bd80      	pop	{r7, pc}
 801775a:	bf00      	nop
 801775c:	2000149c 	.word	0x2000149c
 8017760:	200014c8 	.word	0x200014c8
 8017764:	200014b0 	.word	0x200014b0

08017768 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8017768:	b580      	push	{r7, lr}
 801776a:	b084      	sub	sp, #16
 801776c:	af00      	add	r7, sp, #0
 801776e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	3354      	adds	r3, #84	; 0x54
 8017774:	4618      	mov	r0, r3
 8017776:	f003 ffc9 	bl	801b70c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8017780:	2b00      	cmp	r3, #0
 8017782:	d108      	bne.n	8017796 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017788:	4618      	mov	r0, r3
 801778a:	f001 f899 	bl	80188c0 <vPortFree>
				vPortFree( pxTCB );
 801778e:	6878      	ldr	r0, [r7, #4]
 8017790:	f001 f896 	bl	80188c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8017794:	e018      	b.n	80177c8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801779c:	2b01      	cmp	r3, #1
 801779e:	d103      	bne.n	80177a8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80177a0:	6878      	ldr	r0, [r7, #4]
 80177a2:	f001 f88d 	bl	80188c0 <vPortFree>
	}
 80177a6:	e00f      	b.n	80177c8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80177ae:	2b02      	cmp	r3, #2
 80177b0:	d00a      	beq.n	80177c8 <prvDeleteTCB+0x60>
	__asm volatile
 80177b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177b6:	f383 8811 	msr	BASEPRI, r3
 80177ba:	f3bf 8f6f 	isb	sy
 80177be:	f3bf 8f4f 	dsb	sy
 80177c2:	60fb      	str	r3, [r7, #12]
}
 80177c4:	bf00      	nop
 80177c6:	e7fe      	b.n	80177c6 <prvDeleteTCB+0x5e>
	}
 80177c8:	bf00      	nop
 80177ca:	3710      	adds	r7, #16
 80177cc:	46bd      	mov	sp, r7
 80177ce:	bd80      	pop	{r7, pc}

080177d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80177d0:	b480      	push	{r7}
 80177d2:	b083      	sub	sp, #12
 80177d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80177d6:	4b0c      	ldr	r3, [pc, #48]	; (8017808 <prvResetNextTaskUnblockTime+0x38>)
 80177d8:	681b      	ldr	r3, [r3, #0]
 80177da:	681b      	ldr	r3, [r3, #0]
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d104      	bne.n	80177ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80177e0:	4b0a      	ldr	r3, [pc, #40]	; (801780c <prvResetNextTaskUnblockTime+0x3c>)
 80177e2:	f04f 32ff 	mov.w	r2, #4294967295
 80177e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80177e8:	e008      	b.n	80177fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80177ea:	4b07      	ldr	r3, [pc, #28]	; (8017808 <prvResetNextTaskUnblockTime+0x38>)
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	68db      	ldr	r3, [r3, #12]
 80177f0:	68db      	ldr	r3, [r3, #12]
 80177f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	685b      	ldr	r3, [r3, #4]
 80177f8:	4a04      	ldr	r2, [pc, #16]	; (801780c <prvResetNextTaskUnblockTime+0x3c>)
 80177fa:	6013      	str	r3, [r2, #0]
}
 80177fc:	bf00      	nop
 80177fe:	370c      	adds	r7, #12
 8017800:	46bd      	mov	sp, r7
 8017802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017806:	4770      	bx	lr
 8017808:	20001480 	.word	0x20001480
 801780c:	200014e8 	.word	0x200014e8

08017810 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8017810:	b480      	push	{r7}
 8017812:	b083      	sub	sp, #12
 8017814:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8017816:	4b05      	ldr	r3, [pc, #20]	; (801782c <xTaskGetCurrentTaskHandle+0x1c>)
 8017818:	681b      	ldr	r3, [r3, #0]
 801781a:	607b      	str	r3, [r7, #4]

		return xReturn;
 801781c:	687b      	ldr	r3, [r7, #4]
	}
 801781e:	4618      	mov	r0, r3
 8017820:	370c      	adds	r7, #12
 8017822:	46bd      	mov	sp, r7
 8017824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017828:	4770      	bx	lr
 801782a:	bf00      	nop
 801782c:	20000ff4 	.word	0x20000ff4

08017830 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017830:	b480      	push	{r7}
 8017832:	b083      	sub	sp, #12
 8017834:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8017836:	4b0b      	ldr	r3, [pc, #44]	; (8017864 <xTaskGetSchedulerState+0x34>)
 8017838:	681b      	ldr	r3, [r3, #0]
 801783a:	2b00      	cmp	r3, #0
 801783c:	d102      	bne.n	8017844 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801783e:	2301      	movs	r3, #1
 8017840:	607b      	str	r3, [r7, #4]
 8017842:	e008      	b.n	8017856 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017844:	4b08      	ldr	r3, [pc, #32]	; (8017868 <xTaskGetSchedulerState+0x38>)
 8017846:	681b      	ldr	r3, [r3, #0]
 8017848:	2b00      	cmp	r3, #0
 801784a:	d102      	bne.n	8017852 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801784c:	2302      	movs	r3, #2
 801784e:	607b      	str	r3, [r7, #4]
 8017850:	e001      	b.n	8017856 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8017852:	2300      	movs	r3, #0
 8017854:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8017856:	687b      	ldr	r3, [r7, #4]
	}
 8017858:	4618      	mov	r0, r3
 801785a:	370c      	adds	r7, #12
 801785c:	46bd      	mov	sp, r7
 801785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017862:	4770      	bx	lr
 8017864:	200014d4 	.word	0x200014d4
 8017868:	200014f0 	.word	0x200014f0

0801786c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801786c:	b580      	push	{r7, lr}
 801786e:	b084      	sub	sp, #16
 8017870:	af00      	add	r7, sp, #0
 8017872:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8017878:	2300      	movs	r3, #0
 801787a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	2b00      	cmp	r3, #0
 8017880:	d051      	beq.n	8017926 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8017882:	68bb      	ldr	r3, [r7, #8]
 8017884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017886:	4b2a      	ldr	r3, [pc, #168]	; (8017930 <xTaskPriorityInherit+0xc4>)
 8017888:	681b      	ldr	r3, [r3, #0]
 801788a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801788c:	429a      	cmp	r2, r3
 801788e:	d241      	bcs.n	8017914 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017890:	68bb      	ldr	r3, [r7, #8]
 8017892:	699b      	ldr	r3, [r3, #24]
 8017894:	2b00      	cmp	r3, #0
 8017896:	db06      	blt.n	80178a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017898:	4b25      	ldr	r3, [pc, #148]	; (8017930 <xTaskPriorityInherit+0xc4>)
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801789e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80178a2:	68bb      	ldr	r3, [r7, #8]
 80178a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80178a6:	68bb      	ldr	r3, [r7, #8]
 80178a8:	6959      	ldr	r1, [r3, #20]
 80178aa:	68bb      	ldr	r3, [r7, #8]
 80178ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80178ae:	4613      	mov	r3, r2
 80178b0:	009b      	lsls	r3, r3, #2
 80178b2:	4413      	add	r3, r2
 80178b4:	009b      	lsls	r3, r3, #2
 80178b6:	4a1f      	ldr	r2, [pc, #124]	; (8017934 <xTaskPriorityInherit+0xc8>)
 80178b8:	4413      	add	r3, r2
 80178ba:	4299      	cmp	r1, r3
 80178bc:	d122      	bne.n	8017904 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80178be:	68bb      	ldr	r3, [r7, #8]
 80178c0:	3304      	adds	r3, #4
 80178c2:	4618      	mov	r0, r3
 80178c4:	f7fe f8b2 	bl	8015a2c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80178c8:	4b19      	ldr	r3, [pc, #100]	; (8017930 <xTaskPriorityInherit+0xc4>)
 80178ca:	681b      	ldr	r3, [r3, #0]
 80178cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80178ce:	68bb      	ldr	r3, [r7, #8]
 80178d0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80178d2:	68bb      	ldr	r3, [r7, #8]
 80178d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80178d6:	4b18      	ldr	r3, [pc, #96]	; (8017938 <xTaskPriorityInherit+0xcc>)
 80178d8:	681b      	ldr	r3, [r3, #0]
 80178da:	429a      	cmp	r2, r3
 80178dc:	d903      	bls.n	80178e6 <xTaskPriorityInherit+0x7a>
 80178de:	68bb      	ldr	r3, [r7, #8]
 80178e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80178e2:	4a15      	ldr	r2, [pc, #84]	; (8017938 <xTaskPriorityInherit+0xcc>)
 80178e4:	6013      	str	r3, [r2, #0]
 80178e6:	68bb      	ldr	r3, [r7, #8]
 80178e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80178ea:	4613      	mov	r3, r2
 80178ec:	009b      	lsls	r3, r3, #2
 80178ee:	4413      	add	r3, r2
 80178f0:	009b      	lsls	r3, r3, #2
 80178f2:	4a10      	ldr	r2, [pc, #64]	; (8017934 <xTaskPriorityInherit+0xc8>)
 80178f4:	441a      	add	r2, r3
 80178f6:	68bb      	ldr	r3, [r7, #8]
 80178f8:	3304      	adds	r3, #4
 80178fa:	4619      	mov	r1, r3
 80178fc:	4610      	mov	r0, r2
 80178fe:	f7fe f838 	bl	8015972 <vListInsertEnd>
 8017902:	e004      	b.n	801790e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017904:	4b0a      	ldr	r3, [pc, #40]	; (8017930 <xTaskPriorityInherit+0xc4>)
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801790a:	68bb      	ldr	r3, [r7, #8]
 801790c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801790e:	2301      	movs	r3, #1
 8017910:	60fb      	str	r3, [r7, #12]
 8017912:	e008      	b.n	8017926 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8017914:	68bb      	ldr	r3, [r7, #8]
 8017916:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017918:	4b05      	ldr	r3, [pc, #20]	; (8017930 <xTaskPriorityInherit+0xc4>)
 801791a:	681b      	ldr	r3, [r3, #0]
 801791c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801791e:	429a      	cmp	r2, r3
 8017920:	d201      	bcs.n	8017926 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8017922:	2301      	movs	r3, #1
 8017924:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017926:	68fb      	ldr	r3, [r7, #12]
	}
 8017928:	4618      	mov	r0, r3
 801792a:	3710      	adds	r7, #16
 801792c:	46bd      	mov	sp, r7
 801792e:	bd80      	pop	{r7, pc}
 8017930:	20000ff4 	.word	0x20000ff4
 8017934:	20000ff8 	.word	0x20000ff8
 8017938:	200014d0 	.word	0x200014d0

0801793c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801793c:	b580      	push	{r7, lr}
 801793e:	b086      	sub	sp, #24
 8017940:	af00      	add	r7, sp, #0
 8017942:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017948:	2300      	movs	r3, #0
 801794a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	2b00      	cmp	r3, #0
 8017950:	d056      	beq.n	8017a00 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8017952:	4b2e      	ldr	r3, [pc, #184]	; (8017a0c <xTaskPriorityDisinherit+0xd0>)
 8017954:	681b      	ldr	r3, [r3, #0]
 8017956:	693a      	ldr	r2, [r7, #16]
 8017958:	429a      	cmp	r2, r3
 801795a:	d00a      	beq.n	8017972 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801795c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017960:	f383 8811 	msr	BASEPRI, r3
 8017964:	f3bf 8f6f 	isb	sy
 8017968:	f3bf 8f4f 	dsb	sy
 801796c:	60fb      	str	r3, [r7, #12]
}
 801796e:	bf00      	nop
 8017970:	e7fe      	b.n	8017970 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8017972:	693b      	ldr	r3, [r7, #16]
 8017974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017976:	2b00      	cmp	r3, #0
 8017978:	d10a      	bne.n	8017990 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801797a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801797e:	f383 8811 	msr	BASEPRI, r3
 8017982:	f3bf 8f6f 	isb	sy
 8017986:	f3bf 8f4f 	dsb	sy
 801798a:	60bb      	str	r3, [r7, #8]
}
 801798c:	bf00      	nop
 801798e:	e7fe      	b.n	801798e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8017990:	693b      	ldr	r3, [r7, #16]
 8017992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017994:	1e5a      	subs	r2, r3, #1
 8017996:	693b      	ldr	r3, [r7, #16]
 8017998:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801799a:	693b      	ldr	r3, [r7, #16]
 801799c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801799e:	693b      	ldr	r3, [r7, #16]
 80179a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80179a2:	429a      	cmp	r2, r3
 80179a4:	d02c      	beq.n	8017a00 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80179a6:	693b      	ldr	r3, [r7, #16]
 80179a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	d128      	bne.n	8017a00 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80179ae:	693b      	ldr	r3, [r7, #16]
 80179b0:	3304      	adds	r3, #4
 80179b2:	4618      	mov	r0, r3
 80179b4:	f7fe f83a 	bl	8015a2c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80179b8:	693b      	ldr	r3, [r7, #16]
 80179ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80179bc:	693b      	ldr	r3, [r7, #16]
 80179be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80179c0:	693b      	ldr	r3, [r7, #16]
 80179c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80179c8:	693b      	ldr	r3, [r7, #16]
 80179ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80179cc:	693b      	ldr	r3, [r7, #16]
 80179ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179d0:	4b0f      	ldr	r3, [pc, #60]	; (8017a10 <xTaskPriorityDisinherit+0xd4>)
 80179d2:	681b      	ldr	r3, [r3, #0]
 80179d4:	429a      	cmp	r2, r3
 80179d6:	d903      	bls.n	80179e0 <xTaskPriorityDisinherit+0xa4>
 80179d8:	693b      	ldr	r3, [r7, #16]
 80179da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179dc:	4a0c      	ldr	r2, [pc, #48]	; (8017a10 <xTaskPriorityDisinherit+0xd4>)
 80179de:	6013      	str	r3, [r2, #0]
 80179e0:	693b      	ldr	r3, [r7, #16]
 80179e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179e4:	4613      	mov	r3, r2
 80179e6:	009b      	lsls	r3, r3, #2
 80179e8:	4413      	add	r3, r2
 80179ea:	009b      	lsls	r3, r3, #2
 80179ec:	4a09      	ldr	r2, [pc, #36]	; (8017a14 <xTaskPriorityDisinherit+0xd8>)
 80179ee:	441a      	add	r2, r3
 80179f0:	693b      	ldr	r3, [r7, #16]
 80179f2:	3304      	adds	r3, #4
 80179f4:	4619      	mov	r1, r3
 80179f6:	4610      	mov	r0, r2
 80179f8:	f7fd ffbb 	bl	8015972 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80179fc:	2301      	movs	r3, #1
 80179fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017a00:	697b      	ldr	r3, [r7, #20]
	}
 8017a02:	4618      	mov	r0, r3
 8017a04:	3718      	adds	r7, #24
 8017a06:	46bd      	mov	sp, r7
 8017a08:	bd80      	pop	{r7, pc}
 8017a0a:	bf00      	nop
 8017a0c:	20000ff4 	.word	0x20000ff4
 8017a10:	200014d0 	.word	0x200014d0
 8017a14:	20000ff8 	.word	0x20000ff8

08017a18 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8017a18:	b580      	push	{r7, lr}
 8017a1a:	b088      	sub	sp, #32
 8017a1c:	af00      	add	r7, sp, #0
 8017a1e:	6078      	str	r0, [r7, #4]
 8017a20:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8017a26:	2301      	movs	r3, #1
 8017a28:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d06a      	beq.n	8017b06 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8017a30:	69bb      	ldr	r3, [r7, #24]
 8017a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	d10a      	bne.n	8017a4e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8017a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a3c:	f383 8811 	msr	BASEPRI, r3
 8017a40:	f3bf 8f6f 	isb	sy
 8017a44:	f3bf 8f4f 	dsb	sy
 8017a48:	60fb      	str	r3, [r7, #12]
}
 8017a4a:	bf00      	nop
 8017a4c:	e7fe      	b.n	8017a4c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8017a4e:	69bb      	ldr	r3, [r7, #24]
 8017a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017a52:	683a      	ldr	r2, [r7, #0]
 8017a54:	429a      	cmp	r2, r3
 8017a56:	d902      	bls.n	8017a5e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8017a58:	683b      	ldr	r3, [r7, #0]
 8017a5a:	61fb      	str	r3, [r7, #28]
 8017a5c:	e002      	b.n	8017a64 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8017a5e:	69bb      	ldr	r3, [r7, #24]
 8017a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017a62:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8017a64:	69bb      	ldr	r3, [r7, #24]
 8017a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a68:	69fa      	ldr	r2, [r7, #28]
 8017a6a:	429a      	cmp	r2, r3
 8017a6c:	d04b      	beq.n	8017b06 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8017a6e:	69bb      	ldr	r3, [r7, #24]
 8017a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017a72:	697a      	ldr	r2, [r7, #20]
 8017a74:	429a      	cmp	r2, r3
 8017a76:	d146      	bne.n	8017b06 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8017a78:	4b25      	ldr	r3, [pc, #148]	; (8017b10 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8017a7a:	681b      	ldr	r3, [r3, #0]
 8017a7c:	69ba      	ldr	r2, [r7, #24]
 8017a7e:	429a      	cmp	r2, r3
 8017a80:	d10a      	bne.n	8017a98 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8017a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a86:	f383 8811 	msr	BASEPRI, r3
 8017a8a:	f3bf 8f6f 	isb	sy
 8017a8e:	f3bf 8f4f 	dsb	sy
 8017a92:	60bb      	str	r3, [r7, #8]
}
 8017a94:	bf00      	nop
 8017a96:	e7fe      	b.n	8017a96 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8017a98:	69bb      	ldr	r3, [r7, #24]
 8017a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a9c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8017a9e:	69bb      	ldr	r3, [r7, #24]
 8017aa0:	69fa      	ldr	r2, [r7, #28]
 8017aa2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017aa4:	69bb      	ldr	r3, [r7, #24]
 8017aa6:	699b      	ldr	r3, [r3, #24]
 8017aa8:	2b00      	cmp	r3, #0
 8017aaa:	db04      	blt.n	8017ab6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017aac:	69fb      	ldr	r3, [r7, #28]
 8017aae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017ab2:	69bb      	ldr	r3, [r7, #24]
 8017ab4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8017ab6:	69bb      	ldr	r3, [r7, #24]
 8017ab8:	6959      	ldr	r1, [r3, #20]
 8017aba:	693a      	ldr	r2, [r7, #16]
 8017abc:	4613      	mov	r3, r2
 8017abe:	009b      	lsls	r3, r3, #2
 8017ac0:	4413      	add	r3, r2
 8017ac2:	009b      	lsls	r3, r3, #2
 8017ac4:	4a13      	ldr	r2, [pc, #76]	; (8017b14 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8017ac6:	4413      	add	r3, r2
 8017ac8:	4299      	cmp	r1, r3
 8017aca:	d11c      	bne.n	8017b06 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017acc:	69bb      	ldr	r3, [r7, #24]
 8017ace:	3304      	adds	r3, #4
 8017ad0:	4618      	mov	r0, r3
 8017ad2:	f7fd ffab 	bl	8015a2c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8017ad6:	69bb      	ldr	r3, [r7, #24]
 8017ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ada:	4b0f      	ldr	r3, [pc, #60]	; (8017b18 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8017adc:	681b      	ldr	r3, [r3, #0]
 8017ade:	429a      	cmp	r2, r3
 8017ae0:	d903      	bls.n	8017aea <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8017ae2:	69bb      	ldr	r3, [r7, #24]
 8017ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ae6:	4a0c      	ldr	r2, [pc, #48]	; (8017b18 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8017ae8:	6013      	str	r3, [r2, #0]
 8017aea:	69bb      	ldr	r3, [r7, #24]
 8017aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017aee:	4613      	mov	r3, r2
 8017af0:	009b      	lsls	r3, r3, #2
 8017af2:	4413      	add	r3, r2
 8017af4:	009b      	lsls	r3, r3, #2
 8017af6:	4a07      	ldr	r2, [pc, #28]	; (8017b14 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8017af8:	441a      	add	r2, r3
 8017afa:	69bb      	ldr	r3, [r7, #24]
 8017afc:	3304      	adds	r3, #4
 8017afe:	4619      	mov	r1, r3
 8017b00:	4610      	mov	r0, r2
 8017b02:	f7fd ff36 	bl	8015972 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017b06:	bf00      	nop
 8017b08:	3720      	adds	r7, #32
 8017b0a:	46bd      	mov	sp, r7
 8017b0c:	bd80      	pop	{r7, pc}
 8017b0e:	bf00      	nop
 8017b10:	20000ff4 	.word	0x20000ff4
 8017b14:	20000ff8 	.word	0x20000ff8
 8017b18:	200014d0 	.word	0x200014d0

08017b1c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8017b1c:	b480      	push	{r7}
 8017b1e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8017b20:	4b07      	ldr	r3, [pc, #28]	; (8017b40 <pvTaskIncrementMutexHeldCount+0x24>)
 8017b22:	681b      	ldr	r3, [r3, #0]
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d004      	beq.n	8017b32 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8017b28:	4b05      	ldr	r3, [pc, #20]	; (8017b40 <pvTaskIncrementMutexHeldCount+0x24>)
 8017b2a:	681b      	ldr	r3, [r3, #0]
 8017b2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017b2e:	3201      	adds	r2, #1
 8017b30:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8017b32:	4b03      	ldr	r3, [pc, #12]	; (8017b40 <pvTaskIncrementMutexHeldCount+0x24>)
 8017b34:	681b      	ldr	r3, [r3, #0]
	}
 8017b36:	4618      	mov	r0, r3
 8017b38:	46bd      	mov	sp, r7
 8017b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b3e:	4770      	bx	lr
 8017b40:	20000ff4 	.word	0x20000ff4

08017b44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017b44:	b580      	push	{r7, lr}
 8017b46:	b084      	sub	sp, #16
 8017b48:	af00      	add	r7, sp, #0
 8017b4a:	6078      	str	r0, [r7, #4]
 8017b4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8017b4e:	4b21      	ldr	r3, [pc, #132]	; (8017bd4 <prvAddCurrentTaskToDelayedList+0x90>)
 8017b50:	681b      	ldr	r3, [r3, #0]
 8017b52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017b54:	4b20      	ldr	r3, [pc, #128]	; (8017bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8017b56:	681b      	ldr	r3, [r3, #0]
 8017b58:	3304      	adds	r3, #4
 8017b5a:	4618      	mov	r0, r3
 8017b5c:	f7fd ff66 	bl	8015a2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b66:	d10a      	bne.n	8017b7e <prvAddCurrentTaskToDelayedList+0x3a>
 8017b68:	683b      	ldr	r3, [r7, #0]
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d007      	beq.n	8017b7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017b6e:	4b1a      	ldr	r3, [pc, #104]	; (8017bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8017b70:	681b      	ldr	r3, [r3, #0]
 8017b72:	3304      	adds	r3, #4
 8017b74:	4619      	mov	r1, r3
 8017b76:	4819      	ldr	r0, [pc, #100]	; (8017bdc <prvAddCurrentTaskToDelayedList+0x98>)
 8017b78:	f7fd fefb 	bl	8015972 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017b7c:	e026      	b.n	8017bcc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8017b7e:	68fa      	ldr	r2, [r7, #12]
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	4413      	add	r3, r2
 8017b84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017b86:	4b14      	ldr	r3, [pc, #80]	; (8017bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	68ba      	ldr	r2, [r7, #8]
 8017b8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8017b8e:	68ba      	ldr	r2, [r7, #8]
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	429a      	cmp	r2, r3
 8017b94:	d209      	bcs.n	8017baa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017b96:	4b12      	ldr	r3, [pc, #72]	; (8017be0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8017b98:	681a      	ldr	r2, [r3, #0]
 8017b9a:	4b0f      	ldr	r3, [pc, #60]	; (8017bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8017b9c:	681b      	ldr	r3, [r3, #0]
 8017b9e:	3304      	adds	r3, #4
 8017ba0:	4619      	mov	r1, r3
 8017ba2:	4610      	mov	r0, r2
 8017ba4:	f7fd ff09 	bl	80159ba <vListInsert>
}
 8017ba8:	e010      	b.n	8017bcc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017baa:	4b0e      	ldr	r3, [pc, #56]	; (8017be4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8017bac:	681a      	ldr	r2, [r3, #0]
 8017bae:	4b0a      	ldr	r3, [pc, #40]	; (8017bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8017bb0:	681b      	ldr	r3, [r3, #0]
 8017bb2:	3304      	adds	r3, #4
 8017bb4:	4619      	mov	r1, r3
 8017bb6:	4610      	mov	r0, r2
 8017bb8:	f7fd feff 	bl	80159ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8017bbc:	4b0a      	ldr	r3, [pc, #40]	; (8017be8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8017bbe:	681b      	ldr	r3, [r3, #0]
 8017bc0:	68ba      	ldr	r2, [r7, #8]
 8017bc2:	429a      	cmp	r2, r3
 8017bc4:	d202      	bcs.n	8017bcc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8017bc6:	4a08      	ldr	r2, [pc, #32]	; (8017be8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8017bc8:	68bb      	ldr	r3, [r7, #8]
 8017bca:	6013      	str	r3, [r2, #0]
}
 8017bcc:	bf00      	nop
 8017bce:	3710      	adds	r7, #16
 8017bd0:	46bd      	mov	sp, r7
 8017bd2:	bd80      	pop	{r7, pc}
 8017bd4:	200014cc 	.word	0x200014cc
 8017bd8:	20000ff4 	.word	0x20000ff4
 8017bdc:	200014b4 	.word	0x200014b4
 8017be0:	20001484 	.word	0x20001484
 8017be4:	20001480 	.word	0x20001480
 8017be8:	200014e8 	.word	0x200014e8

08017bec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8017bec:	b580      	push	{r7, lr}
 8017bee:	b08a      	sub	sp, #40	; 0x28
 8017bf0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8017bf2:	2300      	movs	r3, #0
 8017bf4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8017bf6:	f000 fb07 	bl	8018208 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8017bfa:	4b1c      	ldr	r3, [pc, #112]	; (8017c6c <xTimerCreateTimerTask+0x80>)
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	d021      	beq.n	8017c46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8017c02:	2300      	movs	r3, #0
 8017c04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8017c06:	2300      	movs	r3, #0
 8017c08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8017c0a:	1d3a      	adds	r2, r7, #4
 8017c0c:	f107 0108 	add.w	r1, r7, #8
 8017c10:	f107 030c 	add.w	r3, r7, #12
 8017c14:	4618      	mov	r0, r3
 8017c16:	f7fd fe65 	bl	80158e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8017c1a:	6879      	ldr	r1, [r7, #4]
 8017c1c:	68bb      	ldr	r3, [r7, #8]
 8017c1e:	68fa      	ldr	r2, [r7, #12]
 8017c20:	9202      	str	r2, [sp, #8]
 8017c22:	9301      	str	r3, [sp, #4]
 8017c24:	2302      	movs	r3, #2
 8017c26:	9300      	str	r3, [sp, #0]
 8017c28:	2300      	movs	r3, #0
 8017c2a:	460a      	mov	r2, r1
 8017c2c:	4910      	ldr	r1, [pc, #64]	; (8017c70 <xTimerCreateTimerTask+0x84>)
 8017c2e:	4811      	ldr	r0, [pc, #68]	; (8017c74 <xTimerCreateTimerTask+0x88>)
 8017c30:	f7fe ff34 	bl	8016a9c <xTaskCreateStatic>
 8017c34:	4603      	mov	r3, r0
 8017c36:	4a10      	ldr	r2, [pc, #64]	; (8017c78 <xTimerCreateTimerTask+0x8c>)
 8017c38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8017c3a:	4b0f      	ldr	r3, [pc, #60]	; (8017c78 <xTimerCreateTimerTask+0x8c>)
 8017c3c:	681b      	ldr	r3, [r3, #0]
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d001      	beq.n	8017c46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8017c42:	2301      	movs	r3, #1
 8017c44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8017c46:	697b      	ldr	r3, [r7, #20]
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d10a      	bne.n	8017c62 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8017c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c50:	f383 8811 	msr	BASEPRI, r3
 8017c54:	f3bf 8f6f 	isb	sy
 8017c58:	f3bf 8f4f 	dsb	sy
 8017c5c:	613b      	str	r3, [r7, #16]
}
 8017c5e:	bf00      	nop
 8017c60:	e7fe      	b.n	8017c60 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8017c62:	697b      	ldr	r3, [r7, #20]
}
 8017c64:	4618      	mov	r0, r3
 8017c66:	3718      	adds	r7, #24
 8017c68:	46bd      	mov	sp, r7
 8017c6a:	bd80      	pop	{r7, pc}
 8017c6c:	20001524 	.word	0x20001524
 8017c70:	08021498 	.word	0x08021498
 8017c74:	08017db1 	.word	0x08017db1
 8017c78:	20001528 	.word	0x20001528

08017c7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8017c7c:	b580      	push	{r7, lr}
 8017c7e:	b08a      	sub	sp, #40	; 0x28
 8017c80:	af00      	add	r7, sp, #0
 8017c82:	60f8      	str	r0, [r7, #12]
 8017c84:	60b9      	str	r1, [r7, #8]
 8017c86:	607a      	str	r2, [r7, #4]
 8017c88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8017c8a:	2300      	movs	r3, #0
 8017c8c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8017c8e:	68fb      	ldr	r3, [r7, #12]
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d10a      	bne.n	8017caa <xTimerGenericCommand+0x2e>
	__asm volatile
 8017c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c98:	f383 8811 	msr	BASEPRI, r3
 8017c9c:	f3bf 8f6f 	isb	sy
 8017ca0:	f3bf 8f4f 	dsb	sy
 8017ca4:	623b      	str	r3, [r7, #32]
}
 8017ca6:	bf00      	nop
 8017ca8:	e7fe      	b.n	8017ca8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8017caa:	4b1a      	ldr	r3, [pc, #104]	; (8017d14 <xTimerGenericCommand+0x98>)
 8017cac:	681b      	ldr	r3, [r3, #0]
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d02a      	beq.n	8017d08 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8017cb2:	68bb      	ldr	r3, [r7, #8]
 8017cb4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8017cba:	68fb      	ldr	r3, [r7, #12]
 8017cbc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8017cbe:	68bb      	ldr	r3, [r7, #8]
 8017cc0:	2b05      	cmp	r3, #5
 8017cc2:	dc18      	bgt.n	8017cf6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8017cc4:	f7ff fdb4 	bl	8017830 <xTaskGetSchedulerState>
 8017cc8:	4603      	mov	r3, r0
 8017cca:	2b02      	cmp	r3, #2
 8017ccc:	d109      	bne.n	8017ce2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8017cce:	4b11      	ldr	r3, [pc, #68]	; (8017d14 <xTimerGenericCommand+0x98>)
 8017cd0:	6818      	ldr	r0, [r3, #0]
 8017cd2:	f107 0110 	add.w	r1, r7, #16
 8017cd6:	2300      	movs	r3, #0
 8017cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017cda:	f7fe f879 	bl	8015dd0 <xQueueGenericSend>
 8017cde:	6278      	str	r0, [r7, #36]	; 0x24
 8017ce0:	e012      	b.n	8017d08 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8017ce2:	4b0c      	ldr	r3, [pc, #48]	; (8017d14 <xTimerGenericCommand+0x98>)
 8017ce4:	6818      	ldr	r0, [r3, #0]
 8017ce6:	f107 0110 	add.w	r1, r7, #16
 8017cea:	2300      	movs	r3, #0
 8017cec:	2200      	movs	r2, #0
 8017cee:	f7fe f86f 	bl	8015dd0 <xQueueGenericSend>
 8017cf2:	6278      	str	r0, [r7, #36]	; 0x24
 8017cf4:	e008      	b.n	8017d08 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8017cf6:	4b07      	ldr	r3, [pc, #28]	; (8017d14 <xTimerGenericCommand+0x98>)
 8017cf8:	6818      	ldr	r0, [r3, #0]
 8017cfa:	f107 0110 	add.w	r1, r7, #16
 8017cfe:	2300      	movs	r3, #0
 8017d00:	683a      	ldr	r2, [r7, #0]
 8017d02:	f7fe f963 	bl	8015fcc <xQueueGenericSendFromISR>
 8017d06:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8017d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017d0a:	4618      	mov	r0, r3
 8017d0c:	3728      	adds	r7, #40	; 0x28
 8017d0e:	46bd      	mov	sp, r7
 8017d10:	bd80      	pop	{r7, pc}
 8017d12:	bf00      	nop
 8017d14:	20001524 	.word	0x20001524

08017d18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8017d18:	b580      	push	{r7, lr}
 8017d1a:	b088      	sub	sp, #32
 8017d1c:	af02      	add	r7, sp, #8
 8017d1e:	6078      	str	r0, [r7, #4]
 8017d20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017d22:	4b22      	ldr	r3, [pc, #136]	; (8017dac <prvProcessExpiredTimer+0x94>)
 8017d24:	681b      	ldr	r3, [r3, #0]
 8017d26:	68db      	ldr	r3, [r3, #12]
 8017d28:	68db      	ldr	r3, [r3, #12]
 8017d2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017d2c:	697b      	ldr	r3, [r7, #20]
 8017d2e:	3304      	adds	r3, #4
 8017d30:	4618      	mov	r0, r3
 8017d32:	f7fd fe7b 	bl	8015a2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017d36:	697b      	ldr	r3, [r7, #20]
 8017d38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017d3c:	f003 0304 	and.w	r3, r3, #4
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d022      	beq.n	8017d8a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8017d44:	697b      	ldr	r3, [r7, #20]
 8017d46:	699a      	ldr	r2, [r3, #24]
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	18d1      	adds	r1, r2, r3
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	683a      	ldr	r2, [r7, #0]
 8017d50:	6978      	ldr	r0, [r7, #20]
 8017d52:	f000 f8d1 	bl	8017ef8 <prvInsertTimerInActiveList>
 8017d56:	4603      	mov	r3, r0
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	d01f      	beq.n	8017d9c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017d5c:	2300      	movs	r3, #0
 8017d5e:	9300      	str	r3, [sp, #0]
 8017d60:	2300      	movs	r3, #0
 8017d62:	687a      	ldr	r2, [r7, #4]
 8017d64:	2100      	movs	r1, #0
 8017d66:	6978      	ldr	r0, [r7, #20]
 8017d68:	f7ff ff88 	bl	8017c7c <xTimerGenericCommand>
 8017d6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8017d6e:	693b      	ldr	r3, [r7, #16]
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d113      	bne.n	8017d9c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8017d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d78:	f383 8811 	msr	BASEPRI, r3
 8017d7c:	f3bf 8f6f 	isb	sy
 8017d80:	f3bf 8f4f 	dsb	sy
 8017d84:	60fb      	str	r3, [r7, #12]
}
 8017d86:	bf00      	nop
 8017d88:	e7fe      	b.n	8017d88 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017d8a:	697b      	ldr	r3, [r7, #20]
 8017d8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017d90:	f023 0301 	bic.w	r3, r3, #1
 8017d94:	b2da      	uxtb	r2, r3
 8017d96:	697b      	ldr	r3, [r7, #20]
 8017d98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017d9c:	697b      	ldr	r3, [r7, #20]
 8017d9e:	6a1b      	ldr	r3, [r3, #32]
 8017da0:	6978      	ldr	r0, [r7, #20]
 8017da2:	4798      	blx	r3
}
 8017da4:	bf00      	nop
 8017da6:	3718      	adds	r7, #24
 8017da8:	46bd      	mov	sp, r7
 8017daa:	bd80      	pop	{r7, pc}
 8017dac:	2000151c 	.word	0x2000151c

08017db0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8017db0:	b580      	push	{r7, lr}
 8017db2:	b084      	sub	sp, #16
 8017db4:	af00      	add	r7, sp, #0
 8017db6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017db8:	f107 0308 	add.w	r3, r7, #8
 8017dbc:	4618      	mov	r0, r3
 8017dbe:	f000 f857 	bl	8017e70 <prvGetNextExpireTime>
 8017dc2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8017dc4:	68bb      	ldr	r3, [r7, #8]
 8017dc6:	4619      	mov	r1, r3
 8017dc8:	68f8      	ldr	r0, [r7, #12]
 8017dca:	f000 f803 	bl	8017dd4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8017dce:	f000 f8d5 	bl	8017f7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017dd2:	e7f1      	b.n	8017db8 <prvTimerTask+0x8>

08017dd4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8017dd4:	b580      	push	{r7, lr}
 8017dd6:	b084      	sub	sp, #16
 8017dd8:	af00      	add	r7, sp, #0
 8017dda:	6078      	str	r0, [r7, #4]
 8017ddc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8017dde:	f7ff f92b 	bl	8017038 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017de2:	f107 0308 	add.w	r3, r7, #8
 8017de6:	4618      	mov	r0, r3
 8017de8:	f000 f866 	bl	8017eb8 <prvSampleTimeNow>
 8017dec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8017dee:	68bb      	ldr	r3, [r7, #8]
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d130      	bne.n	8017e56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8017df4:	683b      	ldr	r3, [r7, #0]
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	d10a      	bne.n	8017e10 <prvProcessTimerOrBlockTask+0x3c>
 8017dfa:	687a      	ldr	r2, [r7, #4]
 8017dfc:	68fb      	ldr	r3, [r7, #12]
 8017dfe:	429a      	cmp	r2, r3
 8017e00:	d806      	bhi.n	8017e10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8017e02:	f7ff f927 	bl	8017054 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8017e06:	68f9      	ldr	r1, [r7, #12]
 8017e08:	6878      	ldr	r0, [r7, #4]
 8017e0a:	f7ff ff85 	bl	8017d18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8017e0e:	e024      	b.n	8017e5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8017e10:	683b      	ldr	r3, [r7, #0]
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	d008      	beq.n	8017e28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8017e16:	4b13      	ldr	r3, [pc, #76]	; (8017e64 <prvProcessTimerOrBlockTask+0x90>)
 8017e18:	681b      	ldr	r3, [r3, #0]
 8017e1a:	681b      	ldr	r3, [r3, #0]
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d101      	bne.n	8017e24 <prvProcessTimerOrBlockTask+0x50>
 8017e20:	2301      	movs	r3, #1
 8017e22:	e000      	b.n	8017e26 <prvProcessTimerOrBlockTask+0x52>
 8017e24:	2300      	movs	r3, #0
 8017e26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8017e28:	4b0f      	ldr	r3, [pc, #60]	; (8017e68 <prvProcessTimerOrBlockTask+0x94>)
 8017e2a:	6818      	ldr	r0, [r3, #0]
 8017e2c:	687a      	ldr	r2, [r7, #4]
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	1ad3      	subs	r3, r2, r3
 8017e32:	683a      	ldr	r2, [r7, #0]
 8017e34:	4619      	mov	r1, r3
 8017e36:	f7fe fdfd 	bl	8016a34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8017e3a:	f7ff f90b 	bl	8017054 <xTaskResumeAll>
 8017e3e:	4603      	mov	r3, r0
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	d10a      	bne.n	8017e5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8017e44:	4b09      	ldr	r3, [pc, #36]	; (8017e6c <prvProcessTimerOrBlockTask+0x98>)
 8017e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017e4a:	601a      	str	r2, [r3, #0]
 8017e4c:	f3bf 8f4f 	dsb	sy
 8017e50:	f3bf 8f6f 	isb	sy
}
 8017e54:	e001      	b.n	8017e5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8017e56:	f7ff f8fd 	bl	8017054 <xTaskResumeAll>
}
 8017e5a:	bf00      	nop
 8017e5c:	3710      	adds	r7, #16
 8017e5e:	46bd      	mov	sp, r7
 8017e60:	bd80      	pop	{r7, pc}
 8017e62:	bf00      	nop
 8017e64:	20001520 	.word	0x20001520
 8017e68:	20001524 	.word	0x20001524
 8017e6c:	e000ed04 	.word	0xe000ed04

08017e70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8017e70:	b480      	push	{r7}
 8017e72:	b085      	sub	sp, #20
 8017e74:	af00      	add	r7, sp, #0
 8017e76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8017e78:	4b0e      	ldr	r3, [pc, #56]	; (8017eb4 <prvGetNextExpireTime+0x44>)
 8017e7a:	681b      	ldr	r3, [r3, #0]
 8017e7c:	681b      	ldr	r3, [r3, #0]
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	d101      	bne.n	8017e86 <prvGetNextExpireTime+0x16>
 8017e82:	2201      	movs	r2, #1
 8017e84:	e000      	b.n	8017e88 <prvGetNextExpireTime+0x18>
 8017e86:	2200      	movs	r2, #0
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	681b      	ldr	r3, [r3, #0]
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d105      	bne.n	8017ea0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017e94:	4b07      	ldr	r3, [pc, #28]	; (8017eb4 <prvGetNextExpireTime+0x44>)
 8017e96:	681b      	ldr	r3, [r3, #0]
 8017e98:	68db      	ldr	r3, [r3, #12]
 8017e9a:	681b      	ldr	r3, [r3, #0]
 8017e9c:	60fb      	str	r3, [r7, #12]
 8017e9e:	e001      	b.n	8017ea4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8017ea0:	2300      	movs	r3, #0
 8017ea2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8017ea4:	68fb      	ldr	r3, [r7, #12]
}
 8017ea6:	4618      	mov	r0, r3
 8017ea8:	3714      	adds	r7, #20
 8017eaa:	46bd      	mov	sp, r7
 8017eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eb0:	4770      	bx	lr
 8017eb2:	bf00      	nop
 8017eb4:	2000151c 	.word	0x2000151c

08017eb8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8017eb8:	b580      	push	{r7, lr}
 8017eba:	b084      	sub	sp, #16
 8017ebc:	af00      	add	r7, sp, #0
 8017ebe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8017ec0:	f7ff f966 	bl	8017190 <xTaskGetTickCount>
 8017ec4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8017ec6:	4b0b      	ldr	r3, [pc, #44]	; (8017ef4 <prvSampleTimeNow+0x3c>)
 8017ec8:	681b      	ldr	r3, [r3, #0]
 8017eca:	68fa      	ldr	r2, [r7, #12]
 8017ecc:	429a      	cmp	r2, r3
 8017ece:	d205      	bcs.n	8017edc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8017ed0:	f000 f936 	bl	8018140 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	2201      	movs	r2, #1
 8017ed8:	601a      	str	r2, [r3, #0]
 8017eda:	e002      	b.n	8017ee2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	2200      	movs	r2, #0
 8017ee0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8017ee2:	4a04      	ldr	r2, [pc, #16]	; (8017ef4 <prvSampleTimeNow+0x3c>)
 8017ee4:	68fb      	ldr	r3, [r7, #12]
 8017ee6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8017ee8:	68fb      	ldr	r3, [r7, #12]
}
 8017eea:	4618      	mov	r0, r3
 8017eec:	3710      	adds	r7, #16
 8017eee:	46bd      	mov	sp, r7
 8017ef0:	bd80      	pop	{r7, pc}
 8017ef2:	bf00      	nop
 8017ef4:	2000152c 	.word	0x2000152c

08017ef8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8017ef8:	b580      	push	{r7, lr}
 8017efa:	b086      	sub	sp, #24
 8017efc:	af00      	add	r7, sp, #0
 8017efe:	60f8      	str	r0, [r7, #12]
 8017f00:	60b9      	str	r1, [r7, #8]
 8017f02:	607a      	str	r2, [r7, #4]
 8017f04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8017f06:	2300      	movs	r3, #0
 8017f08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8017f0a:	68fb      	ldr	r3, [r7, #12]
 8017f0c:	68ba      	ldr	r2, [r7, #8]
 8017f0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017f10:	68fb      	ldr	r3, [r7, #12]
 8017f12:	68fa      	ldr	r2, [r7, #12]
 8017f14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8017f16:	68ba      	ldr	r2, [r7, #8]
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	429a      	cmp	r2, r3
 8017f1c:	d812      	bhi.n	8017f44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017f1e:	687a      	ldr	r2, [r7, #4]
 8017f20:	683b      	ldr	r3, [r7, #0]
 8017f22:	1ad2      	subs	r2, r2, r3
 8017f24:	68fb      	ldr	r3, [r7, #12]
 8017f26:	699b      	ldr	r3, [r3, #24]
 8017f28:	429a      	cmp	r2, r3
 8017f2a:	d302      	bcc.n	8017f32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8017f2c:	2301      	movs	r3, #1
 8017f2e:	617b      	str	r3, [r7, #20]
 8017f30:	e01b      	b.n	8017f6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8017f32:	4b10      	ldr	r3, [pc, #64]	; (8017f74 <prvInsertTimerInActiveList+0x7c>)
 8017f34:	681a      	ldr	r2, [r3, #0]
 8017f36:	68fb      	ldr	r3, [r7, #12]
 8017f38:	3304      	adds	r3, #4
 8017f3a:	4619      	mov	r1, r3
 8017f3c:	4610      	mov	r0, r2
 8017f3e:	f7fd fd3c 	bl	80159ba <vListInsert>
 8017f42:	e012      	b.n	8017f6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8017f44:	687a      	ldr	r2, [r7, #4]
 8017f46:	683b      	ldr	r3, [r7, #0]
 8017f48:	429a      	cmp	r2, r3
 8017f4a:	d206      	bcs.n	8017f5a <prvInsertTimerInActiveList+0x62>
 8017f4c:	68ba      	ldr	r2, [r7, #8]
 8017f4e:	683b      	ldr	r3, [r7, #0]
 8017f50:	429a      	cmp	r2, r3
 8017f52:	d302      	bcc.n	8017f5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8017f54:	2301      	movs	r3, #1
 8017f56:	617b      	str	r3, [r7, #20]
 8017f58:	e007      	b.n	8017f6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017f5a:	4b07      	ldr	r3, [pc, #28]	; (8017f78 <prvInsertTimerInActiveList+0x80>)
 8017f5c:	681a      	ldr	r2, [r3, #0]
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	3304      	adds	r3, #4
 8017f62:	4619      	mov	r1, r3
 8017f64:	4610      	mov	r0, r2
 8017f66:	f7fd fd28 	bl	80159ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8017f6a:	697b      	ldr	r3, [r7, #20]
}
 8017f6c:	4618      	mov	r0, r3
 8017f6e:	3718      	adds	r7, #24
 8017f70:	46bd      	mov	sp, r7
 8017f72:	bd80      	pop	{r7, pc}
 8017f74:	20001520 	.word	0x20001520
 8017f78:	2000151c 	.word	0x2000151c

08017f7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8017f7c:	b580      	push	{r7, lr}
 8017f7e:	b08e      	sub	sp, #56	; 0x38
 8017f80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017f82:	e0ca      	b.n	801811a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	da18      	bge.n	8017fbc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8017f8a:	1d3b      	adds	r3, r7, #4
 8017f8c:	3304      	adds	r3, #4
 8017f8e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8017f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d10a      	bne.n	8017fac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8017f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f9a:	f383 8811 	msr	BASEPRI, r3
 8017f9e:	f3bf 8f6f 	isb	sy
 8017fa2:	f3bf 8f4f 	dsb	sy
 8017fa6:	61fb      	str	r3, [r7, #28]
}
 8017fa8:	bf00      	nop
 8017faa:	e7fe      	b.n	8017faa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8017fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017fb2:	6850      	ldr	r0, [r2, #4]
 8017fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017fb6:	6892      	ldr	r2, [r2, #8]
 8017fb8:	4611      	mov	r1, r2
 8017fba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	f2c0 80aa 	blt.w	8018118 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8017fc4:	68fb      	ldr	r3, [r7, #12]
 8017fc6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8017fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fca:	695b      	ldr	r3, [r3, #20]
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d004      	beq.n	8017fda <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fd2:	3304      	adds	r3, #4
 8017fd4:	4618      	mov	r0, r3
 8017fd6:	f7fd fd29 	bl	8015a2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017fda:	463b      	mov	r3, r7
 8017fdc:	4618      	mov	r0, r3
 8017fde:	f7ff ff6b 	bl	8017eb8 <prvSampleTimeNow>
 8017fe2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	2b09      	cmp	r3, #9
 8017fe8:	f200 8097 	bhi.w	801811a <prvProcessReceivedCommands+0x19e>
 8017fec:	a201      	add	r2, pc, #4	; (adr r2, 8017ff4 <prvProcessReceivedCommands+0x78>)
 8017fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017ff2:	bf00      	nop
 8017ff4:	0801801d 	.word	0x0801801d
 8017ff8:	0801801d 	.word	0x0801801d
 8017ffc:	0801801d 	.word	0x0801801d
 8018000:	08018091 	.word	0x08018091
 8018004:	080180a5 	.word	0x080180a5
 8018008:	080180ef 	.word	0x080180ef
 801800c:	0801801d 	.word	0x0801801d
 8018010:	0801801d 	.word	0x0801801d
 8018014:	08018091 	.word	0x08018091
 8018018:	080180a5 	.word	0x080180a5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801801c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801801e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018022:	f043 0301 	orr.w	r3, r3, #1
 8018026:	b2da      	uxtb	r2, r3
 8018028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801802a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801802e:	68ba      	ldr	r2, [r7, #8]
 8018030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018032:	699b      	ldr	r3, [r3, #24]
 8018034:	18d1      	adds	r1, r2, r3
 8018036:	68bb      	ldr	r3, [r7, #8]
 8018038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801803a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801803c:	f7ff ff5c 	bl	8017ef8 <prvInsertTimerInActiveList>
 8018040:	4603      	mov	r3, r0
 8018042:	2b00      	cmp	r3, #0
 8018044:	d069      	beq.n	801811a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018048:	6a1b      	ldr	r3, [r3, #32]
 801804a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801804c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801804e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018050:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018054:	f003 0304 	and.w	r3, r3, #4
 8018058:	2b00      	cmp	r3, #0
 801805a:	d05e      	beq.n	801811a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801805c:	68ba      	ldr	r2, [r7, #8]
 801805e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018060:	699b      	ldr	r3, [r3, #24]
 8018062:	441a      	add	r2, r3
 8018064:	2300      	movs	r3, #0
 8018066:	9300      	str	r3, [sp, #0]
 8018068:	2300      	movs	r3, #0
 801806a:	2100      	movs	r1, #0
 801806c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801806e:	f7ff fe05 	bl	8017c7c <xTimerGenericCommand>
 8018072:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8018074:	6a3b      	ldr	r3, [r7, #32]
 8018076:	2b00      	cmp	r3, #0
 8018078:	d14f      	bne.n	801811a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801807a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801807e:	f383 8811 	msr	BASEPRI, r3
 8018082:	f3bf 8f6f 	isb	sy
 8018086:	f3bf 8f4f 	dsb	sy
 801808a:	61bb      	str	r3, [r7, #24]
}
 801808c:	bf00      	nop
 801808e:	e7fe      	b.n	801808e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018092:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018096:	f023 0301 	bic.w	r3, r3, #1
 801809a:	b2da      	uxtb	r2, r3
 801809c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801809e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80180a2:	e03a      	b.n	801811a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80180a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80180aa:	f043 0301 	orr.w	r3, r3, #1
 80180ae:	b2da      	uxtb	r2, r3
 80180b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80180b6:	68ba      	ldr	r2, [r7, #8]
 80180b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80180bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180be:	699b      	ldr	r3, [r3, #24]
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d10a      	bne.n	80180da <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80180c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180c8:	f383 8811 	msr	BASEPRI, r3
 80180cc:	f3bf 8f6f 	isb	sy
 80180d0:	f3bf 8f4f 	dsb	sy
 80180d4:	617b      	str	r3, [r7, #20]
}
 80180d6:	bf00      	nop
 80180d8:	e7fe      	b.n	80180d8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80180da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180dc:	699a      	ldr	r2, [r3, #24]
 80180de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180e0:	18d1      	adds	r1, r2, r3
 80180e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80180e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80180e8:	f7ff ff06 	bl	8017ef8 <prvInsertTimerInActiveList>
					break;
 80180ec:	e015      	b.n	801811a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80180ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80180f4:	f003 0302 	and.w	r3, r3, #2
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d103      	bne.n	8018104 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80180fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80180fe:	f000 fbdf 	bl	80188c0 <vPortFree>
 8018102:	e00a      	b.n	801811a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018106:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801810a:	f023 0301 	bic.w	r3, r3, #1
 801810e:	b2da      	uxtb	r2, r3
 8018110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018112:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8018116:	e000      	b.n	801811a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8018118:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801811a:	4b08      	ldr	r3, [pc, #32]	; (801813c <prvProcessReceivedCommands+0x1c0>)
 801811c:	681b      	ldr	r3, [r3, #0]
 801811e:	1d39      	adds	r1, r7, #4
 8018120:	2200      	movs	r2, #0
 8018122:	4618      	mov	r0, r3
 8018124:	f7fe f87a 	bl	801621c <xQueueReceive>
 8018128:	4603      	mov	r3, r0
 801812a:	2b00      	cmp	r3, #0
 801812c:	f47f af2a 	bne.w	8017f84 <prvProcessReceivedCommands+0x8>
	}
}
 8018130:	bf00      	nop
 8018132:	bf00      	nop
 8018134:	3730      	adds	r7, #48	; 0x30
 8018136:	46bd      	mov	sp, r7
 8018138:	bd80      	pop	{r7, pc}
 801813a:	bf00      	nop
 801813c:	20001524 	.word	0x20001524

08018140 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8018140:	b580      	push	{r7, lr}
 8018142:	b088      	sub	sp, #32
 8018144:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018146:	e048      	b.n	80181da <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018148:	4b2d      	ldr	r3, [pc, #180]	; (8018200 <prvSwitchTimerLists+0xc0>)
 801814a:	681b      	ldr	r3, [r3, #0]
 801814c:	68db      	ldr	r3, [r3, #12]
 801814e:	681b      	ldr	r3, [r3, #0]
 8018150:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018152:	4b2b      	ldr	r3, [pc, #172]	; (8018200 <prvSwitchTimerLists+0xc0>)
 8018154:	681b      	ldr	r3, [r3, #0]
 8018156:	68db      	ldr	r3, [r3, #12]
 8018158:	68db      	ldr	r3, [r3, #12]
 801815a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801815c:	68fb      	ldr	r3, [r7, #12]
 801815e:	3304      	adds	r3, #4
 8018160:	4618      	mov	r0, r3
 8018162:	f7fd fc63 	bl	8015a2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018166:	68fb      	ldr	r3, [r7, #12]
 8018168:	6a1b      	ldr	r3, [r3, #32]
 801816a:	68f8      	ldr	r0, [r7, #12]
 801816c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801816e:	68fb      	ldr	r3, [r7, #12]
 8018170:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018174:	f003 0304 	and.w	r3, r3, #4
 8018178:	2b00      	cmp	r3, #0
 801817a:	d02e      	beq.n	80181da <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801817c:	68fb      	ldr	r3, [r7, #12]
 801817e:	699b      	ldr	r3, [r3, #24]
 8018180:	693a      	ldr	r2, [r7, #16]
 8018182:	4413      	add	r3, r2
 8018184:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8018186:	68ba      	ldr	r2, [r7, #8]
 8018188:	693b      	ldr	r3, [r7, #16]
 801818a:	429a      	cmp	r2, r3
 801818c:	d90e      	bls.n	80181ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801818e:	68fb      	ldr	r3, [r7, #12]
 8018190:	68ba      	ldr	r2, [r7, #8]
 8018192:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018194:	68fb      	ldr	r3, [r7, #12]
 8018196:	68fa      	ldr	r2, [r7, #12]
 8018198:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801819a:	4b19      	ldr	r3, [pc, #100]	; (8018200 <prvSwitchTimerLists+0xc0>)
 801819c:	681a      	ldr	r2, [r3, #0]
 801819e:	68fb      	ldr	r3, [r7, #12]
 80181a0:	3304      	adds	r3, #4
 80181a2:	4619      	mov	r1, r3
 80181a4:	4610      	mov	r0, r2
 80181a6:	f7fd fc08 	bl	80159ba <vListInsert>
 80181aa:	e016      	b.n	80181da <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80181ac:	2300      	movs	r3, #0
 80181ae:	9300      	str	r3, [sp, #0]
 80181b0:	2300      	movs	r3, #0
 80181b2:	693a      	ldr	r2, [r7, #16]
 80181b4:	2100      	movs	r1, #0
 80181b6:	68f8      	ldr	r0, [r7, #12]
 80181b8:	f7ff fd60 	bl	8017c7c <xTimerGenericCommand>
 80181bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d10a      	bne.n	80181da <prvSwitchTimerLists+0x9a>
	__asm volatile
 80181c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181c8:	f383 8811 	msr	BASEPRI, r3
 80181cc:	f3bf 8f6f 	isb	sy
 80181d0:	f3bf 8f4f 	dsb	sy
 80181d4:	603b      	str	r3, [r7, #0]
}
 80181d6:	bf00      	nop
 80181d8:	e7fe      	b.n	80181d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80181da:	4b09      	ldr	r3, [pc, #36]	; (8018200 <prvSwitchTimerLists+0xc0>)
 80181dc:	681b      	ldr	r3, [r3, #0]
 80181de:	681b      	ldr	r3, [r3, #0]
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	d1b1      	bne.n	8018148 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80181e4:	4b06      	ldr	r3, [pc, #24]	; (8018200 <prvSwitchTimerLists+0xc0>)
 80181e6:	681b      	ldr	r3, [r3, #0]
 80181e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80181ea:	4b06      	ldr	r3, [pc, #24]	; (8018204 <prvSwitchTimerLists+0xc4>)
 80181ec:	681b      	ldr	r3, [r3, #0]
 80181ee:	4a04      	ldr	r2, [pc, #16]	; (8018200 <prvSwitchTimerLists+0xc0>)
 80181f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80181f2:	4a04      	ldr	r2, [pc, #16]	; (8018204 <prvSwitchTimerLists+0xc4>)
 80181f4:	697b      	ldr	r3, [r7, #20]
 80181f6:	6013      	str	r3, [r2, #0]
}
 80181f8:	bf00      	nop
 80181fa:	3718      	adds	r7, #24
 80181fc:	46bd      	mov	sp, r7
 80181fe:	bd80      	pop	{r7, pc}
 8018200:	2000151c 	.word	0x2000151c
 8018204:	20001520 	.word	0x20001520

08018208 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8018208:	b580      	push	{r7, lr}
 801820a:	b082      	sub	sp, #8
 801820c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801820e:	f000 f969 	bl	80184e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8018212:	4b15      	ldr	r3, [pc, #84]	; (8018268 <prvCheckForValidListAndQueue+0x60>)
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	2b00      	cmp	r3, #0
 8018218:	d120      	bne.n	801825c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801821a:	4814      	ldr	r0, [pc, #80]	; (801826c <prvCheckForValidListAndQueue+0x64>)
 801821c:	f7fd fb7c 	bl	8015918 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8018220:	4813      	ldr	r0, [pc, #76]	; (8018270 <prvCheckForValidListAndQueue+0x68>)
 8018222:	f7fd fb79 	bl	8015918 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8018226:	4b13      	ldr	r3, [pc, #76]	; (8018274 <prvCheckForValidListAndQueue+0x6c>)
 8018228:	4a10      	ldr	r2, [pc, #64]	; (801826c <prvCheckForValidListAndQueue+0x64>)
 801822a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801822c:	4b12      	ldr	r3, [pc, #72]	; (8018278 <prvCheckForValidListAndQueue+0x70>)
 801822e:	4a10      	ldr	r2, [pc, #64]	; (8018270 <prvCheckForValidListAndQueue+0x68>)
 8018230:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8018232:	2300      	movs	r3, #0
 8018234:	9300      	str	r3, [sp, #0]
 8018236:	4b11      	ldr	r3, [pc, #68]	; (801827c <prvCheckForValidListAndQueue+0x74>)
 8018238:	4a11      	ldr	r2, [pc, #68]	; (8018280 <prvCheckForValidListAndQueue+0x78>)
 801823a:	2110      	movs	r1, #16
 801823c:	200a      	movs	r0, #10
 801823e:	f7fd fc87 	bl	8015b50 <xQueueGenericCreateStatic>
 8018242:	4603      	mov	r3, r0
 8018244:	4a08      	ldr	r2, [pc, #32]	; (8018268 <prvCheckForValidListAndQueue+0x60>)
 8018246:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8018248:	4b07      	ldr	r3, [pc, #28]	; (8018268 <prvCheckForValidListAndQueue+0x60>)
 801824a:	681b      	ldr	r3, [r3, #0]
 801824c:	2b00      	cmp	r3, #0
 801824e:	d005      	beq.n	801825c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8018250:	4b05      	ldr	r3, [pc, #20]	; (8018268 <prvCheckForValidListAndQueue+0x60>)
 8018252:	681b      	ldr	r3, [r3, #0]
 8018254:	490b      	ldr	r1, [pc, #44]	; (8018284 <prvCheckForValidListAndQueue+0x7c>)
 8018256:	4618      	mov	r0, r3
 8018258:	f7fe fb98 	bl	801698c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801825c:	f000 f972 	bl	8018544 <vPortExitCritical>
}
 8018260:	bf00      	nop
 8018262:	46bd      	mov	sp, r7
 8018264:	bd80      	pop	{r7, pc}
 8018266:	bf00      	nop
 8018268:	20001524 	.word	0x20001524
 801826c:	200014f4 	.word	0x200014f4
 8018270:	20001508 	.word	0x20001508
 8018274:	2000151c 	.word	0x2000151c
 8018278:	20001520 	.word	0x20001520
 801827c:	200015d0 	.word	0x200015d0
 8018280:	20001530 	.word	0x20001530
 8018284:	080214a0 	.word	0x080214a0

08018288 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018288:	b480      	push	{r7}
 801828a:	b085      	sub	sp, #20
 801828c:	af00      	add	r7, sp, #0
 801828e:	60f8      	str	r0, [r7, #12]
 8018290:	60b9      	str	r1, [r7, #8]
 8018292:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018294:	68fb      	ldr	r3, [r7, #12]
 8018296:	3b04      	subs	r3, #4
 8018298:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801829a:	68fb      	ldr	r3, [r7, #12]
 801829c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80182a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80182a2:	68fb      	ldr	r3, [r7, #12]
 80182a4:	3b04      	subs	r3, #4
 80182a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80182a8:	68bb      	ldr	r3, [r7, #8]
 80182aa:	f023 0201 	bic.w	r2, r3, #1
 80182ae:	68fb      	ldr	r3, [r7, #12]
 80182b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80182b2:	68fb      	ldr	r3, [r7, #12]
 80182b4:	3b04      	subs	r3, #4
 80182b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80182b8:	4a0c      	ldr	r2, [pc, #48]	; (80182ec <pxPortInitialiseStack+0x64>)
 80182ba:	68fb      	ldr	r3, [r7, #12]
 80182bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80182be:	68fb      	ldr	r3, [r7, #12]
 80182c0:	3b14      	subs	r3, #20
 80182c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80182c4:	687a      	ldr	r2, [r7, #4]
 80182c6:	68fb      	ldr	r3, [r7, #12]
 80182c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80182ca:	68fb      	ldr	r3, [r7, #12]
 80182cc:	3b04      	subs	r3, #4
 80182ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80182d0:	68fb      	ldr	r3, [r7, #12]
 80182d2:	f06f 0202 	mvn.w	r2, #2
 80182d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80182d8:	68fb      	ldr	r3, [r7, #12]
 80182da:	3b20      	subs	r3, #32
 80182dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80182de:	68fb      	ldr	r3, [r7, #12]
}
 80182e0:	4618      	mov	r0, r3
 80182e2:	3714      	adds	r7, #20
 80182e4:	46bd      	mov	sp, r7
 80182e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182ea:	4770      	bx	lr
 80182ec:	080182f1 	.word	0x080182f1

080182f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80182f0:	b480      	push	{r7}
 80182f2:	b085      	sub	sp, #20
 80182f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80182f6:	2300      	movs	r3, #0
 80182f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80182fa:	4b12      	ldr	r3, [pc, #72]	; (8018344 <prvTaskExitError+0x54>)
 80182fc:	681b      	ldr	r3, [r3, #0]
 80182fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018302:	d00a      	beq.n	801831a <prvTaskExitError+0x2a>
	__asm volatile
 8018304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018308:	f383 8811 	msr	BASEPRI, r3
 801830c:	f3bf 8f6f 	isb	sy
 8018310:	f3bf 8f4f 	dsb	sy
 8018314:	60fb      	str	r3, [r7, #12]
}
 8018316:	bf00      	nop
 8018318:	e7fe      	b.n	8018318 <prvTaskExitError+0x28>
	__asm volatile
 801831a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801831e:	f383 8811 	msr	BASEPRI, r3
 8018322:	f3bf 8f6f 	isb	sy
 8018326:	f3bf 8f4f 	dsb	sy
 801832a:	60bb      	str	r3, [r7, #8]
}
 801832c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801832e:	bf00      	nop
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	2b00      	cmp	r3, #0
 8018334:	d0fc      	beq.n	8018330 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018336:	bf00      	nop
 8018338:	bf00      	nop
 801833a:	3714      	adds	r7, #20
 801833c:	46bd      	mov	sp, r7
 801833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018342:	4770      	bx	lr
 8018344:	20000188 	.word	0x20000188
	...

08018350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018350:	4b07      	ldr	r3, [pc, #28]	; (8018370 <pxCurrentTCBConst2>)
 8018352:	6819      	ldr	r1, [r3, #0]
 8018354:	6808      	ldr	r0, [r1, #0]
 8018356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801835a:	f380 8809 	msr	PSP, r0
 801835e:	f3bf 8f6f 	isb	sy
 8018362:	f04f 0000 	mov.w	r0, #0
 8018366:	f380 8811 	msr	BASEPRI, r0
 801836a:	4770      	bx	lr
 801836c:	f3af 8000 	nop.w

08018370 <pxCurrentTCBConst2>:
 8018370:	20000ff4 	.word	0x20000ff4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018374:	bf00      	nop
 8018376:	bf00      	nop

08018378 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018378:	4808      	ldr	r0, [pc, #32]	; (801839c <prvPortStartFirstTask+0x24>)
 801837a:	6800      	ldr	r0, [r0, #0]
 801837c:	6800      	ldr	r0, [r0, #0]
 801837e:	f380 8808 	msr	MSP, r0
 8018382:	f04f 0000 	mov.w	r0, #0
 8018386:	f380 8814 	msr	CONTROL, r0
 801838a:	b662      	cpsie	i
 801838c:	b661      	cpsie	f
 801838e:	f3bf 8f4f 	dsb	sy
 8018392:	f3bf 8f6f 	isb	sy
 8018396:	df00      	svc	0
 8018398:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801839a:	bf00      	nop
 801839c:	e000ed08 	.word	0xe000ed08

080183a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80183a0:	b580      	push	{r7, lr}
 80183a2:	b086      	sub	sp, #24
 80183a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80183a6:	4b46      	ldr	r3, [pc, #280]	; (80184c0 <xPortStartScheduler+0x120>)
 80183a8:	681b      	ldr	r3, [r3, #0]
 80183aa:	4a46      	ldr	r2, [pc, #280]	; (80184c4 <xPortStartScheduler+0x124>)
 80183ac:	4293      	cmp	r3, r2
 80183ae:	d10a      	bne.n	80183c6 <xPortStartScheduler+0x26>
	__asm volatile
 80183b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183b4:	f383 8811 	msr	BASEPRI, r3
 80183b8:	f3bf 8f6f 	isb	sy
 80183bc:	f3bf 8f4f 	dsb	sy
 80183c0:	613b      	str	r3, [r7, #16]
}
 80183c2:	bf00      	nop
 80183c4:	e7fe      	b.n	80183c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80183c6:	4b3e      	ldr	r3, [pc, #248]	; (80184c0 <xPortStartScheduler+0x120>)
 80183c8:	681b      	ldr	r3, [r3, #0]
 80183ca:	4a3f      	ldr	r2, [pc, #252]	; (80184c8 <xPortStartScheduler+0x128>)
 80183cc:	4293      	cmp	r3, r2
 80183ce:	d10a      	bne.n	80183e6 <xPortStartScheduler+0x46>
	__asm volatile
 80183d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183d4:	f383 8811 	msr	BASEPRI, r3
 80183d8:	f3bf 8f6f 	isb	sy
 80183dc:	f3bf 8f4f 	dsb	sy
 80183e0:	60fb      	str	r3, [r7, #12]
}
 80183e2:	bf00      	nop
 80183e4:	e7fe      	b.n	80183e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80183e6:	4b39      	ldr	r3, [pc, #228]	; (80184cc <xPortStartScheduler+0x12c>)
 80183e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80183ea:	697b      	ldr	r3, [r7, #20]
 80183ec:	781b      	ldrb	r3, [r3, #0]
 80183ee:	b2db      	uxtb	r3, r3
 80183f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80183f2:	697b      	ldr	r3, [r7, #20]
 80183f4:	22ff      	movs	r2, #255	; 0xff
 80183f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80183f8:	697b      	ldr	r3, [r7, #20]
 80183fa:	781b      	ldrb	r3, [r3, #0]
 80183fc:	b2db      	uxtb	r3, r3
 80183fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018400:	78fb      	ldrb	r3, [r7, #3]
 8018402:	b2db      	uxtb	r3, r3
 8018404:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8018408:	b2da      	uxtb	r2, r3
 801840a:	4b31      	ldr	r3, [pc, #196]	; (80184d0 <xPortStartScheduler+0x130>)
 801840c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801840e:	4b31      	ldr	r3, [pc, #196]	; (80184d4 <xPortStartScheduler+0x134>)
 8018410:	2207      	movs	r2, #7
 8018412:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018414:	e009      	b.n	801842a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8018416:	4b2f      	ldr	r3, [pc, #188]	; (80184d4 <xPortStartScheduler+0x134>)
 8018418:	681b      	ldr	r3, [r3, #0]
 801841a:	3b01      	subs	r3, #1
 801841c:	4a2d      	ldr	r2, [pc, #180]	; (80184d4 <xPortStartScheduler+0x134>)
 801841e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018420:	78fb      	ldrb	r3, [r7, #3]
 8018422:	b2db      	uxtb	r3, r3
 8018424:	005b      	lsls	r3, r3, #1
 8018426:	b2db      	uxtb	r3, r3
 8018428:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801842a:	78fb      	ldrb	r3, [r7, #3]
 801842c:	b2db      	uxtb	r3, r3
 801842e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018432:	2b80      	cmp	r3, #128	; 0x80
 8018434:	d0ef      	beq.n	8018416 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018436:	4b27      	ldr	r3, [pc, #156]	; (80184d4 <xPortStartScheduler+0x134>)
 8018438:	681b      	ldr	r3, [r3, #0]
 801843a:	f1c3 0307 	rsb	r3, r3, #7
 801843e:	2b04      	cmp	r3, #4
 8018440:	d00a      	beq.n	8018458 <xPortStartScheduler+0xb8>
	__asm volatile
 8018442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018446:	f383 8811 	msr	BASEPRI, r3
 801844a:	f3bf 8f6f 	isb	sy
 801844e:	f3bf 8f4f 	dsb	sy
 8018452:	60bb      	str	r3, [r7, #8]
}
 8018454:	bf00      	nop
 8018456:	e7fe      	b.n	8018456 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018458:	4b1e      	ldr	r3, [pc, #120]	; (80184d4 <xPortStartScheduler+0x134>)
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	021b      	lsls	r3, r3, #8
 801845e:	4a1d      	ldr	r2, [pc, #116]	; (80184d4 <xPortStartScheduler+0x134>)
 8018460:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018462:	4b1c      	ldr	r3, [pc, #112]	; (80184d4 <xPortStartScheduler+0x134>)
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801846a:	4a1a      	ldr	r2, [pc, #104]	; (80184d4 <xPortStartScheduler+0x134>)
 801846c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	b2da      	uxtb	r2, r3
 8018472:	697b      	ldr	r3, [r7, #20]
 8018474:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018476:	4b18      	ldr	r3, [pc, #96]	; (80184d8 <xPortStartScheduler+0x138>)
 8018478:	681b      	ldr	r3, [r3, #0]
 801847a:	4a17      	ldr	r2, [pc, #92]	; (80184d8 <xPortStartScheduler+0x138>)
 801847c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018480:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018482:	4b15      	ldr	r3, [pc, #84]	; (80184d8 <xPortStartScheduler+0x138>)
 8018484:	681b      	ldr	r3, [r3, #0]
 8018486:	4a14      	ldr	r2, [pc, #80]	; (80184d8 <xPortStartScheduler+0x138>)
 8018488:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801848c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801848e:	f000 f8dd 	bl	801864c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8018492:	4b12      	ldr	r3, [pc, #72]	; (80184dc <xPortStartScheduler+0x13c>)
 8018494:	2200      	movs	r2, #0
 8018496:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8018498:	f000 f8fc 	bl	8018694 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801849c:	4b10      	ldr	r3, [pc, #64]	; (80184e0 <xPortStartScheduler+0x140>)
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	4a0f      	ldr	r2, [pc, #60]	; (80184e0 <xPortStartScheduler+0x140>)
 80184a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80184a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80184a8:	f7ff ff66 	bl	8018378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80184ac:	f7fe ff3a 	bl	8017324 <vTaskSwitchContext>
	prvTaskExitError();
 80184b0:	f7ff ff1e 	bl	80182f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80184b4:	2300      	movs	r3, #0
}
 80184b6:	4618      	mov	r0, r3
 80184b8:	3718      	adds	r7, #24
 80184ba:	46bd      	mov	sp, r7
 80184bc:	bd80      	pop	{r7, pc}
 80184be:	bf00      	nop
 80184c0:	e000ed00 	.word	0xe000ed00
 80184c4:	410fc271 	.word	0x410fc271
 80184c8:	410fc270 	.word	0x410fc270
 80184cc:	e000e400 	.word	0xe000e400
 80184d0:	20001620 	.word	0x20001620
 80184d4:	20001624 	.word	0x20001624
 80184d8:	e000ed20 	.word	0xe000ed20
 80184dc:	20000188 	.word	0x20000188
 80184e0:	e000ef34 	.word	0xe000ef34

080184e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80184e4:	b480      	push	{r7}
 80184e6:	b083      	sub	sp, #12
 80184e8:	af00      	add	r7, sp, #0
	__asm volatile
 80184ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184ee:	f383 8811 	msr	BASEPRI, r3
 80184f2:	f3bf 8f6f 	isb	sy
 80184f6:	f3bf 8f4f 	dsb	sy
 80184fa:	607b      	str	r3, [r7, #4]
}
 80184fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80184fe:	4b0f      	ldr	r3, [pc, #60]	; (801853c <vPortEnterCritical+0x58>)
 8018500:	681b      	ldr	r3, [r3, #0]
 8018502:	3301      	adds	r3, #1
 8018504:	4a0d      	ldr	r2, [pc, #52]	; (801853c <vPortEnterCritical+0x58>)
 8018506:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8018508:	4b0c      	ldr	r3, [pc, #48]	; (801853c <vPortEnterCritical+0x58>)
 801850a:	681b      	ldr	r3, [r3, #0]
 801850c:	2b01      	cmp	r3, #1
 801850e:	d10f      	bne.n	8018530 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018510:	4b0b      	ldr	r3, [pc, #44]	; (8018540 <vPortEnterCritical+0x5c>)
 8018512:	681b      	ldr	r3, [r3, #0]
 8018514:	b2db      	uxtb	r3, r3
 8018516:	2b00      	cmp	r3, #0
 8018518:	d00a      	beq.n	8018530 <vPortEnterCritical+0x4c>
	__asm volatile
 801851a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801851e:	f383 8811 	msr	BASEPRI, r3
 8018522:	f3bf 8f6f 	isb	sy
 8018526:	f3bf 8f4f 	dsb	sy
 801852a:	603b      	str	r3, [r7, #0]
}
 801852c:	bf00      	nop
 801852e:	e7fe      	b.n	801852e <vPortEnterCritical+0x4a>
	}
}
 8018530:	bf00      	nop
 8018532:	370c      	adds	r7, #12
 8018534:	46bd      	mov	sp, r7
 8018536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801853a:	4770      	bx	lr
 801853c:	20000188 	.word	0x20000188
 8018540:	e000ed04 	.word	0xe000ed04

08018544 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018544:	b480      	push	{r7}
 8018546:	b083      	sub	sp, #12
 8018548:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801854a:	4b12      	ldr	r3, [pc, #72]	; (8018594 <vPortExitCritical+0x50>)
 801854c:	681b      	ldr	r3, [r3, #0]
 801854e:	2b00      	cmp	r3, #0
 8018550:	d10a      	bne.n	8018568 <vPortExitCritical+0x24>
	__asm volatile
 8018552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018556:	f383 8811 	msr	BASEPRI, r3
 801855a:	f3bf 8f6f 	isb	sy
 801855e:	f3bf 8f4f 	dsb	sy
 8018562:	607b      	str	r3, [r7, #4]
}
 8018564:	bf00      	nop
 8018566:	e7fe      	b.n	8018566 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8018568:	4b0a      	ldr	r3, [pc, #40]	; (8018594 <vPortExitCritical+0x50>)
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	3b01      	subs	r3, #1
 801856e:	4a09      	ldr	r2, [pc, #36]	; (8018594 <vPortExitCritical+0x50>)
 8018570:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018572:	4b08      	ldr	r3, [pc, #32]	; (8018594 <vPortExitCritical+0x50>)
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	2b00      	cmp	r3, #0
 8018578:	d105      	bne.n	8018586 <vPortExitCritical+0x42>
 801857a:	2300      	movs	r3, #0
 801857c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801857e:	683b      	ldr	r3, [r7, #0]
 8018580:	f383 8811 	msr	BASEPRI, r3
}
 8018584:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8018586:	bf00      	nop
 8018588:	370c      	adds	r7, #12
 801858a:	46bd      	mov	sp, r7
 801858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018590:	4770      	bx	lr
 8018592:	bf00      	nop
 8018594:	20000188 	.word	0x20000188
	...

080185a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80185a0:	f3ef 8009 	mrs	r0, PSP
 80185a4:	f3bf 8f6f 	isb	sy
 80185a8:	4b15      	ldr	r3, [pc, #84]	; (8018600 <pxCurrentTCBConst>)
 80185aa:	681a      	ldr	r2, [r3, #0]
 80185ac:	f01e 0f10 	tst.w	lr, #16
 80185b0:	bf08      	it	eq
 80185b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80185b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185ba:	6010      	str	r0, [r2, #0]
 80185bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80185c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80185c4:	f380 8811 	msr	BASEPRI, r0
 80185c8:	f3bf 8f4f 	dsb	sy
 80185cc:	f3bf 8f6f 	isb	sy
 80185d0:	f7fe fea8 	bl	8017324 <vTaskSwitchContext>
 80185d4:	f04f 0000 	mov.w	r0, #0
 80185d8:	f380 8811 	msr	BASEPRI, r0
 80185dc:	bc09      	pop	{r0, r3}
 80185de:	6819      	ldr	r1, [r3, #0]
 80185e0:	6808      	ldr	r0, [r1, #0]
 80185e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185e6:	f01e 0f10 	tst.w	lr, #16
 80185ea:	bf08      	it	eq
 80185ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80185f0:	f380 8809 	msr	PSP, r0
 80185f4:	f3bf 8f6f 	isb	sy
 80185f8:	4770      	bx	lr
 80185fa:	bf00      	nop
 80185fc:	f3af 8000 	nop.w

08018600 <pxCurrentTCBConst>:
 8018600:	20000ff4 	.word	0x20000ff4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018604:	bf00      	nop
 8018606:	bf00      	nop

08018608 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018608:	b580      	push	{r7, lr}
 801860a:	b082      	sub	sp, #8
 801860c:	af00      	add	r7, sp, #0
	__asm volatile
 801860e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018612:	f383 8811 	msr	BASEPRI, r3
 8018616:	f3bf 8f6f 	isb	sy
 801861a:	f3bf 8f4f 	dsb	sy
 801861e:	607b      	str	r3, [r7, #4]
}
 8018620:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018622:	f7fe fdc5 	bl	80171b0 <xTaskIncrementTick>
 8018626:	4603      	mov	r3, r0
 8018628:	2b00      	cmp	r3, #0
 801862a:	d003      	beq.n	8018634 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801862c:	4b06      	ldr	r3, [pc, #24]	; (8018648 <xPortSysTickHandler+0x40>)
 801862e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018632:	601a      	str	r2, [r3, #0]
 8018634:	2300      	movs	r3, #0
 8018636:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018638:	683b      	ldr	r3, [r7, #0]
 801863a:	f383 8811 	msr	BASEPRI, r3
}
 801863e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018640:	bf00      	nop
 8018642:	3708      	adds	r7, #8
 8018644:	46bd      	mov	sp, r7
 8018646:	bd80      	pop	{r7, pc}
 8018648:	e000ed04 	.word	0xe000ed04

0801864c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801864c:	b480      	push	{r7}
 801864e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018650:	4b0b      	ldr	r3, [pc, #44]	; (8018680 <vPortSetupTimerInterrupt+0x34>)
 8018652:	2200      	movs	r2, #0
 8018654:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018656:	4b0b      	ldr	r3, [pc, #44]	; (8018684 <vPortSetupTimerInterrupt+0x38>)
 8018658:	2200      	movs	r2, #0
 801865a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801865c:	4b0a      	ldr	r3, [pc, #40]	; (8018688 <vPortSetupTimerInterrupt+0x3c>)
 801865e:	681b      	ldr	r3, [r3, #0]
 8018660:	4a0a      	ldr	r2, [pc, #40]	; (801868c <vPortSetupTimerInterrupt+0x40>)
 8018662:	fba2 2303 	umull	r2, r3, r2, r3
 8018666:	099b      	lsrs	r3, r3, #6
 8018668:	4a09      	ldr	r2, [pc, #36]	; (8018690 <vPortSetupTimerInterrupt+0x44>)
 801866a:	3b01      	subs	r3, #1
 801866c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801866e:	4b04      	ldr	r3, [pc, #16]	; (8018680 <vPortSetupTimerInterrupt+0x34>)
 8018670:	2207      	movs	r2, #7
 8018672:	601a      	str	r2, [r3, #0]
}
 8018674:	bf00      	nop
 8018676:	46bd      	mov	sp, r7
 8018678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801867c:	4770      	bx	lr
 801867e:	bf00      	nop
 8018680:	e000e010 	.word	0xe000e010
 8018684:	e000e018 	.word	0xe000e018
 8018688:	20000000 	.word	0x20000000
 801868c:	10624dd3 	.word	0x10624dd3
 8018690:	e000e014 	.word	0xe000e014

08018694 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018694:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80186a4 <vPortEnableVFP+0x10>
 8018698:	6801      	ldr	r1, [r0, #0]
 801869a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801869e:	6001      	str	r1, [r0, #0]
 80186a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80186a2:	bf00      	nop
 80186a4:	e000ed88 	.word	0xe000ed88

080186a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80186a8:	b480      	push	{r7}
 80186aa:	b085      	sub	sp, #20
 80186ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80186ae:	f3ef 8305 	mrs	r3, IPSR
 80186b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80186b4:	68fb      	ldr	r3, [r7, #12]
 80186b6:	2b0f      	cmp	r3, #15
 80186b8:	d914      	bls.n	80186e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80186ba:	4a17      	ldr	r2, [pc, #92]	; (8018718 <vPortValidateInterruptPriority+0x70>)
 80186bc:	68fb      	ldr	r3, [r7, #12]
 80186be:	4413      	add	r3, r2
 80186c0:	781b      	ldrb	r3, [r3, #0]
 80186c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80186c4:	4b15      	ldr	r3, [pc, #84]	; (801871c <vPortValidateInterruptPriority+0x74>)
 80186c6:	781b      	ldrb	r3, [r3, #0]
 80186c8:	7afa      	ldrb	r2, [r7, #11]
 80186ca:	429a      	cmp	r2, r3
 80186cc:	d20a      	bcs.n	80186e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80186ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186d2:	f383 8811 	msr	BASEPRI, r3
 80186d6:	f3bf 8f6f 	isb	sy
 80186da:	f3bf 8f4f 	dsb	sy
 80186de:	607b      	str	r3, [r7, #4]
}
 80186e0:	bf00      	nop
 80186e2:	e7fe      	b.n	80186e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80186e4:	4b0e      	ldr	r3, [pc, #56]	; (8018720 <vPortValidateInterruptPriority+0x78>)
 80186e6:	681b      	ldr	r3, [r3, #0]
 80186e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80186ec:	4b0d      	ldr	r3, [pc, #52]	; (8018724 <vPortValidateInterruptPriority+0x7c>)
 80186ee:	681b      	ldr	r3, [r3, #0]
 80186f0:	429a      	cmp	r2, r3
 80186f2:	d90a      	bls.n	801870a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80186f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186f8:	f383 8811 	msr	BASEPRI, r3
 80186fc:	f3bf 8f6f 	isb	sy
 8018700:	f3bf 8f4f 	dsb	sy
 8018704:	603b      	str	r3, [r7, #0]
}
 8018706:	bf00      	nop
 8018708:	e7fe      	b.n	8018708 <vPortValidateInterruptPriority+0x60>
	}
 801870a:	bf00      	nop
 801870c:	3714      	adds	r7, #20
 801870e:	46bd      	mov	sp, r7
 8018710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018714:	4770      	bx	lr
 8018716:	bf00      	nop
 8018718:	e000e3f0 	.word	0xe000e3f0
 801871c:	20001620 	.word	0x20001620
 8018720:	e000ed0c 	.word	0xe000ed0c
 8018724:	20001624 	.word	0x20001624

08018728 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018728:	b580      	push	{r7, lr}
 801872a:	b08a      	sub	sp, #40	; 0x28
 801872c:	af00      	add	r7, sp, #0
 801872e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018730:	2300      	movs	r3, #0
 8018732:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018734:	f7fe fc80 	bl	8017038 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018738:	4b5b      	ldr	r3, [pc, #364]	; (80188a8 <pvPortMalloc+0x180>)
 801873a:	681b      	ldr	r3, [r3, #0]
 801873c:	2b00      	cmp	r3, #0
 801873e:	d101      	bne.n	8018744 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018740:	f000 f920 	bl	8018984 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018744:	4b59      	ldr	r3, [pc, #356]	; (80188ac <pvPortMalloc+0x184>)
 8018746:	681a      	ldr	r2, [r3, #0]
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	4013      	ands	r3, r2
 801874c:	2b00      	cmp	r3, #0
 801874e:	f040 8093 	bne.w	8018878 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	2b00      	cmp	r3, #0
 8018756:	d01d      	beq.n	8018794 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8018758:	2208      	movs	r2, #8
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	4413      	add	r3, r2
 801875e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	f003 0307 	and.w	r3, r3, #7
 8018766:	2b00      	cmp	r3, #0
 8018768:	d014      	beq.n	8018794 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	f023 0307 	bic.w	r3, r3, #7
 8018770:	3308      	adds	r3, #8
 8018772:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	f003 0307 	and.w	r3, r3, #7
 801877a:	2b00      	cmp	r3, #0
 801877c:	d00a      	beq.n	8018794 <pvPortMalloc+0x6c>
	__asm volatile
 801877e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018782:	f383 8811 	msr	BASEPRI, r3
 8018786:	f3bf 8f6f 	isb	sy
 801878a:	f3bf 8f4f 	dsb	sy
 801878e:	617b      	str	r3, [r7, #20]
}
 8018790:	bf00      	nop
 8018792:	e7fe      	b.n	8018792 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	2b00      	cmp	r3, #0
 8018798:	d06e      	beq.n	8018878 <pvPortMalloc+0x150>
 801879a:	4b45      	ldr	r3, [pc, #276]	; (80188b0 <pvPortMalloc+0x188>)
 801879c:	681b      	ldr	r3, [r3, #0]
 801879e:	687a      	ldr	r2, [r7, #4]
 80187a0:	429a      	cmp	r2, r3
 80187a2:	d869      	bhi.n	8018878 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80187a4:	4b43      	ldr	r3, [pc, #268]	; (80188b4 <pvPortMalloc+0x18c>)
 80187a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80187a8:	4b42      	ldr	r3, [pc, #264]	; (80188b4 <pvPortMalloc+0x18c>)
 80187aa:	681b      	ldr	r3, [r3, #0]
 80187ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80187ae:	e004      	b.n	80187ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80187b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80187b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80187ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187bc:	685b      	ldr	r3, [r3, #4]
 80187be:	687a      	ldr	r2, [r7, #4]
 80187c0:	429a      	cmp	r2, r3
 80187c2:	d903      	bls.n	80187cc <pvPortMalloc+0xa4>
 80187c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187c6:	681b      	ldr	r3, [r3, #0]
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	d1f1      	bne.n	80187b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80187cc:	4b36      	ldr	r3, [pc, #216]	; (80188a8 <pvPortMalloc+0x180>)
 80187ce:	681b      	ldr	r3, [r3, #0]
 80187d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80187d2:	429a      	cmp	r2, r3
 80187d4:	d050      	beq.n	8018878 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80187d6:	6a3b      	ldr	r3, [r7, #32]
 80187d8:	681b      	ldr	r3, [r3, #0]
 80187da:	2208      	movs	r2, #8
 80187dc:	4413      	add	r3, r2
 80187de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80187e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187e2:	681a      	ldr	r2, [r3, #0]
 80187e4:	6a3b      	ldr	r3, [r7, #32]
 80187e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80187e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187ea:	685a      	ldr	r2, [r3, #4]
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	1ad2      	subs	r2, r2, r3
 80187f0:	2308      	movs	r3, #8
 80187f2:	005b      	lsls	r3, r3, #1
 80187f4:	429a      	cmp	r2, r3
 80187f6:	d91f      	bls.n	8018838 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80187f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	4413      	add	r3, r2
 80187fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018800:	69bb      	ldr	r3, [r7, #24]
 8018802:	f003 0307 	and.w	r3, r3, #7
 8018806:	2b00      	cmp	r3, #0
 8018808:	d00a      	beq.n	8018820 <pvPortMalloc+0xf8>
	__asm volatile
 801880a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801880e:	f383 8811 	msr	BASEPRI, r3
 8018812:	f3bf 8f6f 	isb	sy
 8018816:	f3bf 8f4f 	dsb	sy
 801881a:	613b      	str	r3, [r7, #16]
}
 801881c:	bf00      	nop
 801881e:	e7fe      	b.n	801881e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018822:	685a      	ldr	r2, [r3, #4]
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	1ad2      	subs	r2, r2, r3
 8018828:	69bb      	ldr	r3, [r7, #24]
 801882a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801882c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801882e:	687a      	ldr	r2, [r7, #4]
 8018830:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018832:	69b8      	ldr	r0, [r7, #24]
 8018834:	f000 f908 	bl	8018a48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018838:	4b1d      	ldr	r3, [pc, #116]	; (80188b0 <pvPortMalloc+0x188>)
 801883a:	681a      	ldr	r2, [r3, #0]
 801883c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801883e:	685b      	ldr	r3, [r3, #4]
 8018840:	1ad3      	subs	r3, r2, r3
 8018842:	4a1b      	ldr	r2, [pc, #108]	; (80188b0 <pvPortMalloc+0x188>)
 8018844:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018846:	4b1a      	ldr	r3, [pc, #104]	; (80188b0 <pvPortMalloc+0x188>)
 8018848:	681a      	ldr	r2, [r3, #0]
 801884a:	4b1b      	ldr	r3, [pc, #108]	; (80188b8 <pvPortMalloc+0x190>)
 801884c:	681b      	ldr	r3, [r3, #0]
 801884e:	429a      	cmp	r2, r3
 8018850:	d203      	bcs.n	801885a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018852:	4b17      	ldr	r3, [pc, #92]	; (80188b0 <pvPortMalloc+0x188>)
 8018854:	681b      	ldr	r3, [r3, #0]
 8018856:	4a18      	ldr	r2, [pc, #96]	; (80188b8 <pvPortMalloc+0x190>)
 8018858:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801885a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801885c:	685a      	ldr	r2, [r3, #4]
 801885e:	4b13      	ldr	r3, [pc, #76]	; (80188ac <pvPortMalloc+0x184>)
 8018860:	681b      	ldr	r3, [r3, #0]
 8018862:	431a      	orrs	r2, r3
 8018864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018866:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8018868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801886a:	2200      	movs	r2, #0
 801886c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801886e:	4b13      	ldr	r3, [pc, #76]	; (80188bc <pvPortMalloc+0x194>)
 8018870:	681b      	ldr	r3, [r3, #0]
 8018872:	3301      	adds	r3, #1
 8018874:	4a11      	ldr	r2, [pc, #68]	; (80188bc <pvPortMalloc+0x194>)
 8018876:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018878:	f7fe fbec 	bl	8017054 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801887c:	69fb      	ldr	r3, [r7, #28]
 801887e:	f003 0307 	and.w	r3, r3, #7
 8018882:	2b00      	cmp	r3, #0
 8018884:	d00a      	beq.n	801889c <pvPortMalloc+0x174>
	__asm volatile
 8018886:	f04f 0350 	mov.w	r3, #80	; 0x50
 801888a:	f383 8811 	msr	BASEPRI, r3
 801888e:	f3bf 8f6f 	isb	sy
 8018892:	f3bf 8f4f 	dsb	sy
 8018896:	60fb      	str	r3, [r7, #12]
}
 8018898:	bf00      	nop
 801889a:	e7fe      	b.n	801889a <pvPortMalloc+0x172>
	return pvReturn;
 801889c:	69fb      	ldr	r3, [r7, #28]
}
 801889e:	4618      	mov	r0, r3
 80188a0:	3728      	adds	r7, #40	; 0x28
 80188a2:	46bd      	mov	sp, r7
 80188a4:	bd80      	pop	{r7, pc}
 80188a6:	bf00      	nop
 80188a8:	20005c80 	.word	0x20005c80
 80188ac:	20005c94 	.word	0x20005c94
 80188b0:	20005c84 	.word	0x20005c84
 80188b4:	20005c78 	.word	0x20005c78
 80188b8:	20005c88 	.word	0x20005c88
 80188bc:	20005c8c 	.word	0x20005c8c

080188c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80188c0:	b580      	push	{r7, lr}
 80188c2:	b086      	sub	sp, #24
 80188c4:	af00      	add	r7, sp, #0
 80188c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	d04d      	beq.n	801896e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80188d2:	2308      	movs	r3, #8
 80188d4:	425b      	negs	r3, r3
 80188d6:	697a      	ldr	r2, [r7, #20]
 80188d8:	4413      	add	r3, r2
 80188da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80188dc:	697b      	ldr	r3, [r7, #20]
 80188de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80188e0:	693b      	ldr	r3, [r7, #16]
 80188e2:	685a      	ldr	r2, [r3, #4]
 80188e4:	4b24      	ldr	r3, [pc, #144]	; (8018978 <vPortFree+0xb8>)
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	4013      	ands	r3, r2
 80188ea:	2b00      	cmp	r3, #0
 80188ec:	d10a      	bne.n	8018904 <vPortFree+0x44>
	__asm volatile
 80188ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188f2:	f383 8811 	msr	BASEPRI, r3
 80188f6:	f3bf 8f6f 	isb	sy
 80188fa:	f3bf 8f4f 	dsb	sy
 80188fe:	60fb      	str	r3, [r7, #12]
}
 8018900:	bf00      	nop
 8018902:	e7fe      	b.n	8018902 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8018904:	693b      	ldr	r3, [r7, #16]
 8018906:	681b      	ldr	r3, [r3, #0]
 8018908:	2b00      	cmp	r3, #0
 801890a:	d00a      	beq.n	8018922 <vPortFree+0x62>
	__asm volatile
 801890c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018910:	f383 8811 	msr	BASEPRI, r3
 8018914:	f3bf 8f6f 	isb	sy
 8018918:	f3bf 8f4f 	dsb	sy
 801891c:	60bb      	str	r3, [r7, #8]
}
 801891e:	bf00      	nop
 8018920:	e7fe      	b.n	8018920 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8018922:	693b      	ldr	r3, [r7, #16]
 8018924:	685a      	ldr	r2, [r3, #4]
 8018926:	4b14      	ldr	r3, [pc, #80]	; (8018978 <vPortFree+0xb8>)
 8018928:	681b      	ldr	r3, [r3, #0]
 801892a:	4013      	ands	r3, r2
 801892c:	2b00      	cmp	r3, #0
 801892e:	d01e      	beq.n	801896e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8018930:	693b      	ldr	r3, [r7, #16]
 8018932:	681b      	ldr	r3, [r3, #0]
 8018934:	2b00      	cmp	r3, #0
 8018936:	d11a      	bne.n	801896e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018938:	693b      	ldr	r3, [r7, #16]
 801893a:	685a      	ldr	r2, [r3, #4]
 801893c:	4b0e      	ldr	r3, [pc, #56]	; (8018978 <vPortFree+0xb8>)
 801893e:	681b      	ldr	r3, [r3, #0]
 8018940:	43db      	mvns	r3, r3
 8018942:	401a      	ands	r2, r3
 8018944:	693b      	ldr	r3, [r7, #16]
 8018946:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018948:	f7fe fb76 	bl	8017038 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801894c:	693b      	ldr	r3, [r7, #16]
 801894e:	685a      	ldr	r2, [r3, #4]
 8018950:	4b0a      	ldr	r3, [pc, #40]	; (801897c <vPortFree+0xbc>)
 8018952:	681b      	ldr	r3, [r3, #0]
 8018954:	4413      	add	r3, r2
 8018956:	4a09      	ldr	r2, [pc, #36]	; (801897c <vPortFree+0xbc>)
 8018958:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801895a:	6938      	ldr	r0, [r7, #16]
 801895c:	f000 f874 	bl	8018a48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8018960:	4b07      	ldr	r3, [pc, #28]	; (8018980 <vPortFree+0xc0>)
 8018962:	681b      	ldr	r3, [r3, #0]
 8018964:	3301      	adds	r3, #1
 8018966:	4a06      	ldr	r2, [pc, #24]	; (8018980 <vPortFree+0xc0>)
 8018968:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801896a:	f7fe fb73 	bl	8017054 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801896e:	bf00      	nop
 8018970:	3718      	adds	r7, #24
 8018972:	46bd      	mov	sp, r7
 8018974:	bd80      	pop	{r7, pc}
 8018976:	bf00      	nop
 8018978:	20005c94 	.word	0x20005c94
 801897c:	20005c84 	.word	0x20005c84
 8018980:	20005c90 	.word	0x20005c90

08018984 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8018984:	b480      	push	{r7}
 8018986:	b085      	sub	sp, #20
 8018988:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801898a:	f244 6350 	movw	r3, #18000	; 0x4650
 801898e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8018990:	4b27      	ldr	r3, [pc, #156]	; (8018a30 <prvHeapInit+0xac>)
 8018992:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018994:	68fb      	ldr	r3, [r7, #12]
 8018996:	f003 0307 	and.w	r3, r3, #7
 801899a:	2b00      	cmp	r3, #0
 801899c:	d00c      	beq.n	80189b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801899e:	68fb      	ldr	r3, [r7, #12]
 80189a0:	3307      	adds	r3, #7
 80189a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80189a4:	68fb      	ldr	r3, [r7, #12]
 80189a6:	f023 0307 	bic.w	r3, r3, #7
 80189aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80189ac:	68ba      	ldr	r2, [r7, #8]
 80189ae:	68fb      	ldr	r3, [r7, #12]
 80189b0:	1ad3      	subs	r3, r2, r3
 80189b2:	4a1f      	ldr	r2, [pc, #124]	; (8018a30 <prvHeapInit+0xac>)
 80189b4:	4413      	add	r3, r2
 80189b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80189b8:	68fb      	ldr	r3, [r7, #12]
 80189ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80189bc:	4a1d      	ldr	r2, [pc, #116]	; (8018a34 <prvHeapInit+0xb0>)
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80189c2:	4b1c      	ldr	r3, [pc, #112]	; (8018a34 <prvHeapInit+0xb0>)
 80189c4:	2200      	movs	r2, #0
 80189c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	68ba      	ldr	r2, [r7, #8]
 80189cc:	4413      	add	r3, r2
 80189ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80189d0:	2208      	movs	r2, #8
 80189d2:	68fb      	ldr	r3, [r7, #12]
 80189d4:	1a9b      	subs	r3, r3, r2
 80189d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80189d8:	68fb      	ldr	r3, [r7, #12]
 80189da:	f023 0307 	bic.w	r3, r3, #7
 80189de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80189e0:	68fb      	ldr	r3, [r7, #12]
 80189e2:	4a15      	ldr	r2, [pc, #84]	; (8018a38 <prvHeapInit+0xb4>)
 80189e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80189e6:	4b14      	ldr	r3, [pc, #80]	; (8018a38 <prvHeapInit+0xb4>)
 80189e8:	681b      	ldr	r3, [r3, #0]
 80189ea:	2200      	movs	r2, #0
 80189ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80189ee:	4b12      	ldr	r3, [pc, #72]	; (8018a38 <prvHeapInit+0xb4>)
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	2200      	movs	r2, #0
 80189f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80189fa:	683b      	ldr	r3, [r7, #0]
 80189fc:	68fa      	ldr	r2, [r7, #12]
 80189fe:	1ad2      	subs	r2, r2, r3
 8018a00:	683b      	ldr	r3, [r7, #0]
 8018a02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8018a04:	4b0c      	ldr	r3, [pc, #48]	; (8018a38 <prvHeapInit+0xb4>)
 8018a06:	681a      	ldr	r2, [r3, #0]
 8018a08:	683b      	ldr	r3, [r7, #0]
 8018a0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018a0c:	683b      	ldr	r3, [r7, #0]
 8018a0e:	685b      	ldr	r3, [r3, #4]
 8018a10:	4a0a      	ldr	r2, [pc, #40]	; (8018a3c <prvHeapInit+0xb8>)
 8018a12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018a14:	683b      	ldr	r3, [r7, #0]
 8018a16:	685b      	ldr	r3, [r3, #4]
 8018a18:	4a09      	ldr	r2, [pc, #36]	; (8018a40 <prvHeapInit+0xbc>)
 8018a1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8018a1c:	4b09      	ldr	r3, [pc, #36]	; (8018a44 <prvHeapInit+0xc0>)
 8018a1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8018a22:	601a      	str	r2, [r3, #0]
}
 8018a24:	bf00      	nop
 8018a26:	3714      	adds	r7, #20
 8018a28:	46bd      	mov	sp, r7
 8018a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a2e:	4770      	bx	lr
 8018a30:	20001628 	.word	0x20001628
 8018a34:	20005c78 	.word	0x20005c78
 8018a38:	20005c80 	.word	0x20005c80
 8018a3c:	20005c88 	.word	0x20005c88
 8018a40:	20005c84 	.word	0x20005c84
 8018a44:	20005c94 	.word	0x20005c94

08018a48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8018a48:	b480      	push	{r7}
 8018a4a:	b085      	sub	sp, #20
 8018a4c:	af00      	add	r7, sp, #0
 8018a4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018a50:	4b28      	ldr	r3, [pc, #160]	; (8018af4 <prvInsertBlockIntoFreeList+0xac>)
 8018a52:	60fb      	str	r3, [r7, #12]
 8018a54:	e002      	b.n	8018a5c <prvInsertBlockIntoFreeList+0x14>
 8018a56:	68fb      	ldr	r3, [r7, #12]
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	60fb      	str	r3, [r7, #12]
 8018a5c:	68fb      	ldr	r3, [r7, #12]
 8018a5e:	681b      	ldr	r3, [r3, #0]
 8018a60:	687a      	ldr	r2, [r7, #4]
 8018a62:	429a      	cmp	r2, r3
 8018a64:	d8f7      	bhi.n	8018a56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8018a66:	68fb      	ldr	r3, [r7, #12]
 8018a68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8018a6a:	68fb      	ldr	r3, [r7, #12]
 8018a6c:	685b      	ldr	r3, [r3, #4]
 8018a6e:	68ba      	ldr	r2, [r7, #8]
 8018a70:	4413      	add	r3, r2
 8018a72:	687a      	ldr	r2, [r7, #4]
 8018a74:	429a      	cmp	r2, r3
 8018a76:	d108      	bne.n	8018a8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018a78:	68fb      	ldr	r3, [r7, #12]
 8018a7a:	685a      	ldr	r2, [r3, #4]
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	685b      	ldr	r3, [r3, #4]
 8018a80:	441a      	add	r2, r3
 8018a82:	68fb      	ldr	r3, [r7, #12]
 8018a84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8018a86:	68fb      	ldr	r3, [r7, #12]
 8018a88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8018a8e:	687b      	ldr	r3, [r7, #4]
 8018a90:	685b      	ldr	r3, [r3, #4]
 8018a92:	68ba      	ldr	r2, [r7, #8]
 8018a94:	441a      	add	r2, r3
 8018a96:	68fb      	ldr	r3, [r7, #12]
 8018a98:	681b      	ldr	r3, [r3, #0]
 8018a9a:	429a      	cmp	r2, r3
 8018a9c:	d118      	bne.n	8018ad0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8018a9e:	68fb      	ldr	r3, [r7, #12]
 8018aa0:	681a      	ldr	r2, [r3, #0]
 8018aa2:	4b15      	ldr	r3, [pc, #84]	; (8018af8 <prvInsertBlockIntoFreeList+0xb0>)
 8018aa4:	681b      	ldr	r3, [r3, #0]
 8018aa6:	429a      	cmp	r2, r3
 8018aa8:	d00d      	beq.n	8018ac6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8018aaa:	687b      	ldr	r3, [r7, #4]
 8018aac:	685a      	ldr	r2, [r3, #4]
 8018aae:	68fb      	ldr	r3, [r7, #12]
 8018ab0:	681b      	ldr	r3, [r3, #0]
 8018ab2:	685b      	ldr	r3, [r3, #4]
 8018ab4:	441a      	add	r2, r3
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8018aba:	68fb      	ldr	r3, [r7, #12]
 8018abc:	681b      	ldr	r3, [r3, #0]
 8018abe:	681a      	ldr	r2, [r3, #0]
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	601a      	str	r2, [r3, #0]
 8018ac4:	e008      	b.n	8018ad8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8018ac6:	4b0c      	ldr	r3, [pc, #48]	; (8018af8 <prvInsertBlockIntoFreeList+0xb0>)
 8018ac8:	681a      	ldr	r2, [r3, #0]
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	601a      	str	r2, [r3, #0]
 8018ace:	e003      	b.n	8018ad8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	681a      	ldr	r2, [r3, #0]
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8018ad8:	68fa      	ldr	r2, [r7, #12]
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	429a      	cmp	r2, r3
 8018ade:	d002      	beq.n	8018ae6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018ae0:	68fb      	ldr	r3, [r7, #12]
 8018ae2:	687a      	ldr	r2, [r7, #4]
 8018ae4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018ae6:	bf00      	nop
 8018ae8:	3714      	adds	r7, #20
 8018aea:	46bd      	mov	sp, r7
 8018aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018af0:	4770      	bx	lr
 8018af2:	bf00      	nop
 8018af4:	20005c78 	.word	0x20005c78
 8018af8:	20005c80 	.word	0x20005c80

08018afc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8018afc:	b580      	push	{r7, lr}
 8018afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8018b00:	2200      	movs	r2, #0
 8018b02:	4912      	ldr	r1, [pc, #72]	; (8018b4c <MX_USB_DEVICE_Init+0x50>)
 8018b04:	4812      	ldr	r0, [pc, #72]	; (8018b50 <MX_USB_DEVICE_Init+0x54>)
 8018b06:	f7f8 fc31 	bl	801136c <USBD_Init>
 8018b0a:	4603      	mov	r3, r0
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	d001      	beq.n	8018b14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018b10:	f7e9 ff32 	bl	8002978 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8018b14:	490f      	ldr	r1, [pc, #60]	; (8018b54 <MX_USB_DEVICE_Init+0x58>)
 8018b16:	480e      	ldr	r0, [pc, #56]	; (8018b50 <MX_USB_DEVICE_Init+0x54>)
 8018b18:	f7f8 fc58 	bl	80113cc <USBD_RegisterClass>
 8018b1c:	4603      	mov	r3, r0
 8018b1e:	2b00      	cmp	r3, #0
 8018b20:	d001      	beq.n	8018b26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018b22:	f7e9 ff29 	bl	8002978 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8018b26:	490c      	ldr	r1, [pc, #48]	; (8018b58 <MX_USB_DEVICE_Init+0x5c>)
 8018b28:	4809      	ldr	r0, [pc, #36]	; (8018b50 <MX_USB_DEVICE_Init+0x54>)
 8018b2a:	f7f8 fba9 	bl	8011280 <USBD_CDC_RegisterInterface>
 8018b2e:	4603      	mov	r3, r0
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	d001      	beq.n	8018b38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018b34:	f7e9 ff20 	bl	8002978 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8018b38:	4805      	ldr	r0, [pc, #20]	; (8018b50 <MX_USB_DEVICE_Init+0x54>)
 8018b3a:	f7f8 fc6e 	bl	801141a <USBD_Start>
 8018b3e:	4603      	mov	r3, r0
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	d001      	beq.n	8018b48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018b44:	f7e9 ff18 	bl	8002978 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018b48:	bf00      	nop
 8018b4a:	bd80      	pop	{r7, pc}
 8018b4c:	200001a0 	.word	0x200001a0
 8018b50:	200076cc 	.word	0x200076cc
 8018b54:	20000084 	.word	0x20000084
 8018b58:	2000018c 	.word	0x2000018c

08018b5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8018b5c:	b580      	push	{r7, lr}
 8018b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8018b60:	2200      	movs	r2, #0
 8018b62:	4905      	ldr	r1, [pc, #20]	; (8018b78 <CDC_Init_FS+0x1c>)
 8018b64:	4805      	ldr	r0, [pc, #20]	; (8018b7c <CDC_Init_FS+0x20>)
 8018b66:	f7f8 fba0 	bl	80112aa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8018b6a:	4905      	ldr	r1, [pc, #20]	; (8018b80 <CDC_Init_FS+0x24>)
 8018b6c:	4803      	ldr	r0, [pc, #12]	; (8018b7c <CDC_Init_FS+0x20>)
 8018b6e:	f7f8 fbba 	bl	80112e6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8018b72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018b74:	4618      	mov	r0, r3
 8018b76:	bd80      	pop	{r7, pc}
 8018b78:	2000819c 	.word	0x2000819c
 8018b7c:	200076cc 	.word	0x200076cc
 8018b80:	2000799c 	.word	0x2000799c

08018b84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8018b84:	b480      	push	{r7}
 8018b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8018b88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018b8a:	4618      	mov	r0, r3
 8018b8c:	46bd      	mov	sp, r7
 8018b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b92:	4770      	bx	lr

08018b94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8018b94:	b480      	push	{r7}
 8018b96:	b083      	sub	sp, #12
 8018b98:	af00      	add	r7, sp, #0
 8018b9a:	4603      	mov	r3, r0
 8018b9c:	6039      	str	r1, [r7, #0]
 8018b9e:	71fb      	strb	r3, [r7, #7]
 8018ba0:	4613      	mov	r3, r2
 8018ba2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8018ba4:	79fb      	ldrb	r3, [r7, #7]
 8018ba6:	2b23      	cmp	r3, #35	; 0x23
 8018ba8:	d84a      	bhi.n	8018c40 <CDC_Control_FS+0xac>
 8018baa:	a201      	add	r2, pc, #4	; (adr r2, 8018bb0 <CDC_Control_FS+0x1c>)
 8018bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018bb0:	08018c41 	.word	0x08018c41
 8018bb4:	08018c41 	.word	0x08018c41
 8018bb8:	08018c41 	.word	0x08018c41
 8018bbc:	08018c41 	.word	0x08018c41
 8018bc0:	08018c41 	.word	0x08018c41
 8018bc4:	08018c41 	.word	0x08018c41
 8018bc8:	08018c41 	.word	0x08018c41
 8018bcc:	08018c41 	.word	0x08018c41
 8018bd0:	08018c41 	.word	0x08018c41
 8018bd4:	08018c41 	.word	0x08018c41
 8018bd8:	08018c41 	.word	0x08018c41
 8018bdc:	08018c41 	.word	0x08018c41
 8018be0:	08018c41 	.word	0x08018c41
 8018be4:	08018c41 	.word	0x08018c41
 8018be8:	08018c41 	.word	0x08018c41
 8018bec:	08018c41 	.word	0x08018c41
 8018bf0:	08018c41 	.word	0x08018c41
 8018bf4:	08018c41 	.word	0x08018c41
 8018bf8:	08018c41 	.word	0x08018c41
 8018bfc:	08018c41 	.word	0x08018c41
 8018c00:	08018c41 	.word	0x08018c41
 8018c04:	08018c41 	.word	0x08018c41
 8018c08:	08018c41 	.word	0x08018c41
 8018c0c:	08018c41 	.word	0x08018c41
 8018c10:	08018c41 	.word	0x08018c41
 8018c14:	08018c41 	.word	0x08018c41
 8018c18:	08018c41 	.word	0x08018c41
 8018c1c:	08018c41 	.word	0x08018c41
 8018c20:	08018c41 	.word	0x08018c41
 8018c24:	08018c41 	.word	0x08018c41
 8018c28:	08018c41 	.word	0x08018c41
 8018c2c:	08018c41 	.word	0x08018c41
 8018c30:	08018c41 	.word	0x08018c41
 8018c34:	08018c41 	.word	0x08018c41
 8018c38:	08018c41 	.word	0x08018c41
 8018c3c:	08018c41 	.word	0x08018c41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018c40:	bf00      	nop
  }

  return (USBD_OK);
 8018c42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018c44:	4618      	mov	r0, r3
 8018c46:	370c      	adds	r7, #12
 8018c48:	46bd      	mov	sp, r7
 8018c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c4e:	4770      	bx	lr

08018c50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018c50:	b580      	push	{r7, lr}
 8018c52:	b082      	sub	sp, #8
 8018c54:	af00      	add	r7, sp, #0
 8018c56:	6078      	str	r0, [r7, #4]
 8018c58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8018c5a:	6879      	ldr	r1, [r7, #4]
 8018c5c:	4805      	ldr	r0, [pc, #20]	; (8018c74 <CDC_Receive_FS+0x24>)
 8018c5e:	f7f8 fb42 	bl	80112e6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018c62:	4804      	ldr	r0, [pc, #16]	; (8018c74 <CDC_Receive_FS+0x24>)
 8018c64:	f7f8 fb58 	bl	8011318 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8018c68:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8018c6a:	4618      	mov	r0, r3
 8018c6c:	3708      	adds	r7, #8
 8018c6e:	46bd      	mov	sp, r7
 8018c70:	bd80      	pop	{r7, pc}
 8018c72:	bf00      	nop
 8018c74:	200076cc 	.word	0x200076cc

08018c78 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8018c78:	b480      	push	{r7}
 8018c7a:	b087      	sub	sp, #28
 8018c7c:	af00      	add	r7, sp, #0
 8018c7e:	60f8      	str	r0, [r7, #12]
 8018c80:	60b9      	str	r1, [r7, #8]
 8018c82:	4613      	mov	r3, r2
 8018c84:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8018c86:	2300      	movs	r3, #0
 8018c88:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8018c8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018c8e:	4618      	mov	r0, r3
 8018c90:	371c      	adds	r7, #28
 8018c92:	46bd      	mov	sp, r7
 8018c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c98:	4770      	bx	lr
	...

08018c9c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018c9c:	b480      	push	{r7}
 8018c9e:	b083      	sub	sp, #12
 8018ca0:	af00      	add	r7, sp, #0
 8018ca2:	4603      	mov	r3, r0
 8018ca4:	6039      	str	r1, [r7, #0]
 8018ca6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8018ca8:	683b      	ldr	r3, [r7, #0]
 8018caa:	2212      	movs	r2, #18
 8018cac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8018cae:	4b03      	ldr	r3, [pc, #12]	; (8018cbc <USBD_FS_DeviceDescriptor+0x20>)
}
 8018cb0:	4618      	mov	r0, r3
 8018cb2:	370c      	adds	r7, #12
 8018cb4:	46bd      	mov	sp, r7
 8018cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cba:	4770      	bx	lr
 8018cbc:	200001bc 	.word	0x200001bc

08018cc0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018cc0:	b480      	push	{r7}
 8018cc2:	b083      	sub	sp, #12
 8018cc4:	af00      	add	r7, sp, #0
 8018cc6:	4603      	mov	r3, r0
 8018cc8:	6039      	str	r1, [r7, #0]
 8018cca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018ccc:	683b      	ldr	r3, [r7, #0]
 8018cce:	2204      	movs	r2, #4
 8018cd0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018cd2:	4b03      	ldr	r3, [pc, #12]	; (8018ce0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018cd4:	4618      	mov	r0, r3
 8018cd6:	370c      	adds	r7, #12
 8018cd8:	46bd      	mov	sp, r7
 8018cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cde:	4770      	bx	lr
 8018ce0:	200001d0 	.word	0x200001d0

08018ce4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018ce4:	b580      	push	{r7, lr}
 8018ce6:	b082      	sub	sp, #8
 8018ce8:	af00      	add	r7, sp, #0
 8018cea:	4603      	mov	r3, r0
 8018cec:	6039      	str	r1, [r7, #0]
 8018cee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018cf0:	79fb      	ldrb	r3, [r7, #7]
 8018cf2:	2b00      	cmp	r3, #0
 8018cf4:	d105      	bne.n	8018d02 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018cf6:	683a      	ldr	r2, [r7, #0]
 8018cf8:	4907      	ldr	r1, [pc, #28]	; (8018d18 <USBD_FS_ProductStrDescriptor+0x34>)
 8018cfa:	4808      	ldr	r0, [pc, #32]	; (8018d1c <USBD_FS_ProductStrDescriptor+0x38>)
 8018cfc:	f7f9 fbbf 	bl	801247e <USBD_GetString>
 8018d00:	e004      	b.n	8018d0c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018d02:	683a      	ldr	r2, [r7, #0]
 8018d04:	4904      	ldr	r1, [pc, #16]	; (8018d18 <USBD_FS_ProductStrDescriptor+0x34>)
 8018d06:	4805      	ldr	r0, [pc, #20]	; (8018d1c <USBD_FS_ProductStrDescriptor+0x38>)
 8018d08:	f7f9 fbb9 	bl	801247e <USBD_GetString>
  }
  return USBD_StrDesc;
 8018d0c:	4b02      	ldr	r3, [pc, #8]	; (8018d18 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8018d0e:	4618      	mov	r0, r3
 8018d10:	3708      	adds	r7, #8
 8018d12:	46bd      	mov	sp, r7
 8018d14:	bd80      	pop	{r7, pc}
 8018d16:	bf00      	nop
 8018d18:	2000899c 	.word	0x2000899c
 8018d1c:	080214a8 	.word	0x080214a8

08018d20 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018d20:	b580      	push	{r7, lr}
 8018d22:	b082      	sub	sp, #8
 8018d24:	af00      	add	r7, sp, #0
 8018d26:	4603      	mov	r3, r0
 8018d28:	6039      	str	r1, [r7, #0]
 8018d2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018d2c:	683a      	ldr	r2, [r7, #0]
 8018d2e:	4904      	ldr	r1, [pc, #16]	; (8018d40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8018d30:	4804      	ldr	r0, [pc, #16]	; (8018d44 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8018d32:	f7f9 fba4 	bl	801247e <USBD_GetString>
  return USBD_StrDesc;
 8018d36:	4b02      	ldr	r3, [pc, #8]	; (8018d40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8018d38:	4618      	mov	r0, r3
 8018d3a:	3708      	adds	r7, #8
 8018d3c:	46bd      	mov	sp, r7
 8018d3e:	bd80      	pop	{r7, pc}
 8018d40:	2000899c 	.word	0x2000899c
 8018d44:	080214c0 	.word	0x080214c0

08018d48 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018d48:	b580      	push	{r7, lr}
 8018d4a:	b082      	sub	sp, #8
 8018d4c:	af00      	add	r7, sp, #0
 8018d4e:	4603      	mov	r3, r0
 8018d50:	6039      	str	r1, [r7, #0]
 8018d52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018d54:	683b      	ldr	r3, [r7, #0]
 8018d56:	221a      	movs	r2, #26
 8018d58:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018d5a:	f000 f843 	bl	8018de4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8018d5e:	4b02      	ldr	r3, [pc, #8]	; (8018d68 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8018d60:	4618      	mov	r0, r3
 8018d62:	3708      	adds	r7, #8
 8018d64:	46bd      	mov	sp, r7
 8018d66:	bd80      	pop	{r7, pc}
 8018d68:	200001d4 	.word	0x200001d4

08018d6c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018d6c:	b580      	push	{r7, lr}
 8018d6e:	b082      	sub	sp, #8
 8018d70:	af00      	add	r7, sp, #0
 8018d72:	4603      	mov	r3, r0
 8018d74:	6039      	str	r1, [r7, #0]
 8018d76:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018d78:	79fb      	ldrb	r3, [r7, #7]
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	d105      	bne.n	8018d8a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018d7e:	683a      	ldr	r2, [r7, #0]
 8018d80:	4907      	ldr	r1, [pc, #28]	; (8018da0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018d82:	4808      	ldr	r0, [pc, #32]	; (8018da4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018d84:	f7f9 fb7b 	bl	801247e <USBD_GetString>
 8018d88:	e004      	b.n	8018d94 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018d8a:	683a      	ldr	r2, [r7, #0]
 8018d8c:	4904      	ldr	r1, [pc, #16]	; (8018da0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018d8e:	4805      	ldr	r0, [pc, #20]	; (8018da4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018d90:	f7f9 fb75 	bl	801247e <USBD_GetString>
  }
  return USBD_StrDesc;
 8018d94:	4b02      	ldr	r3, [pc, #8]	; (8018da0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8018d96:	4618      	mov	r0, r3
 8018d98:	3708      	adds	r7, #8
 8018d9a:	46bd      	mov	sp, r7
 8018d9c:	bd80      	pop	{r7, pc}
 8018d9e:	bf00      	nop
 8018da0:	2000899c 	.word	0x2000899c
 8018da4:	080214d4 	.word	0x080214d4

08018da8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018da8:	b580      	push	{r7, lr}
 8018daa:	b082      	sub	sp, #8
 8018dac:	af00      	add	r7, sp, #0
 8018dae:	4603      	mov	r3, r0
 8018db0:	6039      	str	r1, [r7, #0]
 8018db2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018db4:	79fb      	ldrb	r3, [r7, #7]
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d105      	bne.n	8018dc6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018dba:	683a      	ldr	r2, [r7, #0]
 8018dbc:	4907      	ldr	r1, [pc, #28]	; (8018ddc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018dbe:	4808      	ldr	r0, [pc, #32]	; (8018de0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018dc0:	f7f9 fb5d 	bl	801247e <USBD_GetString>
 8018dc4:	e004      	b.n	8018dd0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018dc6:	683a      	ldr	r2, [r7, #0]
 8018dc8:	4904      	ldr	r1, [pc, #16]	; (8018ddc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018dca:	4805      	ldr	r0, [pc, #20]	; (8018de0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018dcc:	f7f9 fb57 	bl	801247e <USBD_GetString>
  }
  return USBD_StrDesc;
 8018dd0:	4b02      	ldr	r3, [pc, #8]	; (8018ddc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018dd2:	4618      	mov	r0, r3
 8018dd4:	3708      	adds	r7, #8
 8018dd6:	46bd      	mov	sp, r7
 8018dd8:	bd80      	pop	{r7, pc}
 8018dda:	bf00      	nop
 8018ddc:	2000899c 	.word	0x2000899c
 8018de0:	080214e0 	.word	0x080214e0

08018de4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018de4:	b580      	push	{r7, lr}
 8018de6:	b084      	sub	sp, #16
 8018de8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018dea:	4b0f      	ldr	r3, [pc, #60]	; (8018e28 <Get_SerialNum+0x44>)
 8018dec:	681b      	ldr	r3, [r3, #0]
 8018dee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018df0:	4b0e      	ldr	r3, [pc, #56]	; (8018e2c <Get_SerialNum+0x48>)
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018df6:	4b0e      	ldr	r3, [pc, #56]	; (8018e30 <Get_SerialNum+0x4c>)
 8018df8:	681b      	ldr	r3, [r3, #0]
 8018dfa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018dfc:	68fa      	ldr	r2, [r7, #12]
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	4413      	add	r3, r2
 8018e02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018e04:	68fb      	ldr	r3, [r7, #12]
 8018e06:	2b00      	cmp	r3, #0
 8018e08:	d009      	beq.n	8018e1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018e0a:	2208      	movs	r2, #8
 8018e0c:	4909      	ldr	r1, [pc, #36]	; (8018e34 <Get_SerialNum+0x50>)
 8018e0e:	68f8      	ldr	r0, [r7, #12]
 8018e10:	f000 f814 	bl	8018e3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018e14:	2204      	movs	r2, #4
 8018e16:	4908      	ldr	r1, [pc, #32]	; (8018e38 <Get_SerialNum+0x54>)
 8018e18:	68b8      	ldr	r0, [r7, #8]
 8018e1a:	f000 f80f 	bl	8018e3c <IntToUnicode>
  }
}
 8018e1e:	bf00      	nop
 8018e20:	3710      	adds	r7, #16
 8018e22:	46bd      	mov	sp, r7
 8018e24:	bd80      	pop	{r7, pc}
 8018e26:	bf00      	nop
 8018e28:	1fff7a10 	.word	0x1fff7a10
 8018e2c:	1fff7a14 	.word	0x1fff7a14
 8018e30:	1fff7a18 	.word	0x1fff7a18
 8018e34:	200001d6 	.word	0x200001d6
 8018e38:	200001e6 	.word	0x200001e6

08018e3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018e3c:	b480      	push	{r7}
 8018e3e:	b087      	sub	sp, #28
 8018e40:	af00      	add	r7, sp, #0
 8018e42:	60f8      	str	r0, [r7, #12]
 8018e44:	60b9      	str	r1, [r7, #8]
 8018e46:	4613      	mov	r3, r2
 8018e48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018e4a:	2300      	movs	r3, #0
 8018e4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018e4e:	2300      	movs	r3, #0
 8018e50:	75fb      	strb	r3, [r7, #23]
 8018e52:	e027      	b.n	8018ea4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018e54:	68fb      	ldr	r3, [r7, #12]
 8018e56:	0f1b      	lsrs	r3, r3, #28
 8018e58:	2b09      	cmp	r3, #9
 8018e5a:	d80b      	bhi.n	8018e74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018e5c:	68fb      	ldr	r3, [r7, #12]
 8018e5e:	0f1b      	lsrs	r3, r3, #28
 8018e60:	b2da      	uxtb	r2, r3
 8018e62:	7dfb      	ldrb	r3, [r7, #23]
 8018e64:	005b      	lsls	r3, r3, #1
 8018e66:	4619      	mov	r1, r3
 8018e68:	68bb      	ldr	r3, [r7, #8]
 8018e6a:	440b      	add	r3, r1
 8018e6c:	3230      	adds	r2, #48	; 0x30
 8018e6e:	b2d2      	uxtb	r2, r2
 8018e70:	701a      	strb	r2, [r3, #0]
 8018e72:	e00a      	b.n	8018e8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018e74:	68fb      	ldr	r3, [r7, #12]
 8018e76:	0f1b      	lsrs	r3, r3, #28
 8018e78:	b2da      	uxtb	r2, r3
 8018e7a:	7dfb      	ldrb	r3, [r7, #23]
 8018e7c:	005b      	lsls	r3, r3, #1
 8018e7e:	4619      	mov	r1, r3
 8018e80:	68bb      	ldr	r3, [r7, #8]
 8018e82:	440b      	add	r3, r1
 8018e84:	3237      	adds	r2, #55	; 0x37
 8018e86:	b2d2      	uxtb	r2, r2
 8018e88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018e8a:	68fb      	ldr	r3, [r7, #12]
 8018e8c:	011b      	lsls	r3, r3, #4
 8018e8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018e90:	7dfb      	ldrb	r3, [r7, #23]
 8018e92:	005b      	lsls	r3, r3, #1
 8018e94:	3301      	adds	r3, #1
 8018e96:	68ba      	ldr	r2, [r7, #8]
 8018e98:	4413      	add	r3, r2
 8018e9a:	2200      	movs	r2, #0
 8018e9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018e9e:	7dfb      	ldrb	r3, [r7, #23]
 8018ea0:	3301      	adds	r3, #1
 8018ea2:	75fb      	strb	r3, [r7, #23]
 8018ea4:	7dfa      	ldrb	r2, [r7, #23]
 8018ea6:	79fb      	ldrb	r3, [r7, #7]
 8018ea8:	429a      	cmp	r2, r3
 8018eaa:	d3d3      	bcc.n	8018e54 <IntToUnicode+0x18>
  }
}
 8018eac:	bf00      	nop
 8018eae:	bf00      	nop
 8018eb0:	371c      	adds	r7, #28
 8018eb2:	46bd      	mov	sp, r7
 8018eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eb8:	4770      	bx	lr
	...

08018ebc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018ebc:	b580      	push	{r7, lr}
 8018ebe:	b08a      	sub	sp, #40	; 0x28
 8018ec0:	af00      	add	r7, sp, #0
 8018ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018ec4:	f107 0314 	add.w	r3, r7, #20
 8018ec8:	2200      	movs	r2, #0
 8018eca:	601a      	str	r2, [r3, #0]
 8018ecc:	605a      	str	r2, [r3, #4]
 8018ece:	609a      	str	r2, [r3, #8]
 8018ed0:	60da      	str	r2, [r3, #12]
 8018ed2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018edc:	d147      	bne.n	8018f6e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018ede:	2300      	movs	r3, #0
 8018ee0:	613b      	str	r3, [r7, #16]
 8018ee2:	4b25      	ldr	r3, [pc, #148]	; (8018f78 <HAL_PCD_MspInit+0xbc>)
 8018ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018ee6:	4a24      	ldr	r2, [pc, #144]	; (8018f78 <HAL_PCD_MspInit+0xbc>)
 8018ee8:	f043 0301 	orr.w	r3, r3, #1
 8018eec:	6313      	str	r3, [r2, #48]	; 0x30
 8018eee:	4b22      	ldr	r3, [pc, #136]	; (8018f78 <HAL_PCD_MspInit+0xbc>)
 8018ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018ef2:	f003 0301 	and.w	r3, r3, #1
 8018ef6:	613b      	str	r3, [r7, #16]
 8018ef8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8018efa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018f00:	2300      	movs	r3, #0
 8018f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018f04:	2300      	movs	r3, #0
 8018f06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018f08:	f107 0314 	add.w	r3, r7, #20
 8018f0c:	4619      	mov	r1, r3
 8018f0e:	481b      	ldr	r0, [pc, #108]	; (8018f7c <HAL_PCD_MspInit+0xc0>)
 8018f10:	f7ef fe00 	bl	8008b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018f14:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8018f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018f1a:	2302      	movs	r3, #2
 8018f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018f1e:	2300      	movs	r3, #0
 8018f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018f22:	2303      	movs	r3, #3
 8018f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8018f26:	230a      	movs	r3, #10
 8018f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018f2a:	f107 0314 	add.w	r3, r7, #20
 8018f2e:	4619      	mov	r1, r3
 8018f30:	4812      	ldr	r0, [pc, #72]	; (8018f7c <HAL_PCD_MspInit+0xc0>)
 8018f32:	f7ef fdef 	bl	8008b14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018f36:	4b10      	ldr	r3, [pc, #64]	; (8018f78 <HAL_PCD_MspInit+0xbc>)
 8018f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018f3a:	4a0f      	ldr	r2, [pc, #60]	; (8018f78 <HAL_PCD_MspInit+0xbc>)
 8018f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018f40:	6353      	str	r3, [r2, #52]	; 0x34
 8018f42:	2300      	movs	r3, #0
 8018f44:	60fb      	str	r3, [r7, #12]
 8018f46:	4b0c      	ldr	r3, [pc, #48]	; (8018f78 <HAL_PCD_MspInit+0xbc>)
 8018f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f4a:	4a0b      	ldr	r2, [pc, #44]	; (8018f78 <HAL_PCD_MspInit+0xbc>)
 8018f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018f50:	6453      	str	r3, [r2, #68]	; 0x44
 8018f52:	4b09      	ldr	r3, [pc, #36]	; (8018f78 <HAL_PCD_MspInit+0xbc>)
 8018f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018f5a:	60fb      	str	r3, [r7, #12]
 8018f5c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8018f5e:	2200      	movs	r2, #0
 8018f60:	2105      	movs	r1, #5
 8018f62:	2043      	movs	r0, #67	; 0x43
 8018f64:	f7ef fd9e 	bl	8008aa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018f68:	2043      	movs	r0, #67	; 0x43
 8018f6a:	f7ef fdb7 	bl	8008adc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8018f6e:	bf00      	nop
 8018f70:	3728      	adds	r7, #40	; 0x28
 8018f72:	46bd      	mov	sp, r7
 8018f74:	bd80      	pop	{r7, pc}
 8018f76:	bf00      	nop
 8018f78:	40023800 	.word	0x40023800
 8018f7c:	40020000 	.word	0x40020000

08018f80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f80:	b580      	push	{r7, lr}
 8018f82:	b082      	sub	sp, #8
 8018f84:	af00      	add	r7, sp, #0
 8018f86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8018f94:	4619      	mov	r1, r3
 8018f96:	4610      	mov	r0, r2
 8018f98:	f7f8 fa8a 	bl	80114b0 <USBD_LL_SetupStage>
}
 8018f9c:	bf00      	nop
 8018f9e:	3708      	adds	r7, #8
 8018fa0:	46bd      	mov	sp, r7
 8018fa2:	bd80      	pop	{r7, pc}

08018fa4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018fa4:	b580      	push	{r7, lr}
 8018fa6:	b082      	sub	sp, #8
 8018fa8:	af00      	add	r7, sp, #0
 8018faa:	6078      	str	r0, [r7, #4]
 8018fac:	460b      	mov	r3, r1
 8018fae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8018fb6:	78fa      	ldrb	r2, [r7, #3]
 8018fb8:	6879      	ldr	r1, [r7, #4]
 8018fba:	4613      	mov	r3, r2
 8018fbc:	00db      	lsls	r3, r3, #3
 8018fbe:	1a9b      	subs	r3, r3, r2
 8018fc0:	009b      	lsls	r3, r3, #2
 8018fc2:	440b      	add	r3, r1
 8018fc4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8018fc8:	681a      	ldr	r2, [r3, #0]
 8018fca:	78fb      	ldrb	r3, [r7, #3]
 8018fcc:	4619      	mov	r1, r3
 8018fce:	f7f8 fac4 	bl	801155a <USBD_LL_DataOutStage>
}
 8018fd2:	bf00      	nop
 8018fd4:	3708      	adds	r7, #8
 8018fd6:	46bd      	mov	sp, r7
 8018fd8:	bd80      	pop	{r7, pc}

08018fda <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018fda:	b580      	push	{r7, lr}
 8018fdc:	b082      	sub	sp, #8
 8018fde:	af00      	add	r7, sp, #0
 8018fe0:	6078      	str	r0, [r7, #4]
 8018fe2:	460b      	mov	r3, r1
 8018fe4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8018fec:	78fa      	ldrb	r2, [r7, #3]
 8018fee:	6879      	ldr	r1, [r7, #4]
 8018ff0:	4613      	mov	r3, r2
 8018ff2:	00db      	lsls	r3, r3, #3
 8018ff4:	1a9b      	subs	r3, r3, r2
 8018ff6:	009b      	lsls	r3, r3, #2
 8018ff8:	440b      	add	r3, r1
 8018ffa:	3348      	adds	r3, #72	; 0x48
 8018ffc:	681a      	ldr	r2, [r3, #0]
 8018ffe:	78fb      	ldrb	r3, [r7, #3]
 8019000:	4619      	mov	r1, r3
 8019002:	f7f8 fb0d 	bl	8011620 <USBD_LL_DataInStage>
}
 8019006:	bf00      	nop
 8019008:	3708      	adds	r7, #8
 801900a:	46bd      	mov	sp, r7
 801900c:	bd80      	pop	{r7, pc}

0801900e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801900e:	b580      	push	{r7, lr}
 8019010:	b082      	sub	sp, #8
 8019012:	af00      	add	r7, sp, #0
 8019014:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801901c:	4618      	mov	r0, r3
 801901e:	f7f8 fc21 	bl	8011864 <USBD_LL_SOF>
}
 8019022:	bf00      	nop
 8019024:	3708      	adds	r7, #8
 8019026:	46bd      	mov	sp, r7
 8019028:	bd80      	pop	{r7, pc}

0801902a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801902a:	b580      	push	{r7, lr}
 801902c:	b084      	sub	sp, #16
 801902e:	af00      	add	r7, sp, #0
 8019030:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8019032:	2301      	movs	r3, #1
 8019034:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	68db      	ldr	r3, [r3, #12]
 801903a:	2b00      	cmp	r3, #0
 801903c:	d102      	bne.n	8019044 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801903e:	2300      	movs	r3, #0
 8019040:	73fb      	strb	r3, [r7, #15]
 8019042:	e008      	b.n	8019056 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	68db      	ldr	r3, [r3, #12]
 8019048:	2b02      	cmp	r3, #2
 801904a:	d102      	bne.n	8019052 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801904c:	2301      	movs	r3, #1
 801904e:	73fb      	strb	r3, [r7, #15]
 8019050:	e001      	b.n	8019056 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8019052:	f7e9 fc91 	bl	8002978 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801905c:	7bfa      	ldrb	r2, [r7, #15]
 801905e:	4611      	mov	r1, r2
 8019060:	4618      	mov	r0, r3
 8019062:	f7f8 fbc1 	bl	80117e8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801906c:	4618      	mov	r0, r3
 801906e:	f7f8 fb6d 	bl	801174c <USBD_LL_Reset>
}
 8019072:	bf00      	nop
 8019074:	3710      	adds	r7, #16
 8019076:	46bd      	mov	sp, r7
 8019078:	bd80      	pop	{r7, pc}
	...

0801907c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801907c:	b580      	push	{r7, lr}
 801907e:	b082      	sub	sp, #8
 8019080:	af00      	add	r7, sp, #0
 8019082:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801908a:	4618      	mov	r0, r3
 801908c:	f7f8 fbbc 	bl	8011808 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	681b      	ldr	r3, [r3, #0]
 8019094:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019098:	681b      	ldr	r3, [r3, #0]
 801909a:	687a      	ldr	r2, [r7, #4]
 801909c:	6812      	ldr	r2, [r2, #0]
 801909e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80190a2:	f043 0301 	orr.w	r3, r3, #1
 80190a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	6a1b      	ldr	r3, [r3, #32]
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d005      	beq.n	80190bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80190b0:	4b04      	ldr	r3, [pc, #16]	; (80190c4 <HAL_PCD_SuspendCallback+0x48>)
 80190b2:	691b      	ldr	r3, [r3, #16]
 80190b4:	4a03      	ldr	r2, [pc, #12]	; (80190c4 <HAL_PCD_SuspendCallback+0x48>)
 80190b6:	f043 0306 	orr.w	r3, r3, #6
 80190ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80190bc:	bf00      	nop
 80190be:	3708      	adds	r7, #8
 80190c0:	46bd      	mov	sp, r7
 80190c2:	bd80      	pop	{r7, pc}
 80190c4:	e000ed00 	.word	0xe000ed00

080190c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80190c8:	b580      	push	{r7, lr}
 80190ca:	b082      	sub	sp, #8
 80190cc:	af00      	add	r7, sp, #0
 80190ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80190d6:	4618      	mov	r0, r3
 80190d8:	f7f8 fbac 	bl	8011834 <USBD_LL_Resume>
}
 80190dc:	bf00      	nop
 80190de:	3708      	adds	r7, #8
 80190e0:	46bd      	mov	sp, r7
 80190e2:	bd80      	pop	{r7, pc}

080190e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80190e4:	b580      	push	{r7, lr}
 80190e6:	b082      	sub	sp, #8
 80190e8:	af00      	add	r7, sp, #0
 80190ea:	6078      	str	r0, [r7, #4]
 80190ec:	460b      	mov	r3, r1
 80190ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80190f6:	78fa      	ldrb	r2, [r7, #3]
 80190f8:	4611      	mov	r1, r2
 80190fa:	4618      	mov	r0, r3
 80190fc:	f7f8 fbfa 	bl	80118f4 <USBD_LL_IsoOUTIncomplete>
}
 8019100:	bf00      	nop
 8019102:	3708      	adds	r7, #8
 8019104:	46bd      	mov	sp, r7
 8019106:	bd80      	pop	{r7, pc}

08019108 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019108:	b580      	push	{r7, lr}
 801910a:	b082      	sub	sp, #8
 801910c:	af00      	add	r7, sp, #0
 801910e:	6078      	str	r0, [r7, #4]
 8019110:	460b      	mov	r3, r1
 8019112:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801911a:	78fa      	ldrb	r2, [r7, #3]
 801911c:	4611      	mov	r1, r2
 801911e:	4618      	mov	r0, r3
 8019120:	f7f8 fbc2 	bl	80118a8 <USBD_LL_IsoINIncomplete>
}
 8019124:	bf00      	nop
 8019126:	3708      	adds	r7, #8
 8019128:	46bd      	mov	sp, r7
 801912a:	bd80      	pop	{r7, pc}

0801912c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801912c:	b580      	push	{r7, lr}
 801912e:	b082      	sub	sp, #8
 8019130:	af00      	add	r7, sp, #0
 8019132:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801913a:	4618      	mov	r0, r3
 801913c:	f7f8 fc00 	bl	8011940 <USBD_LL_DevConnected>
}
 8019140:	bf00      	nop
 8019142:	3708      	adds	r7, #8
 8019144:	46bd      	mov	sp, r7
 8019146:	bd80      	pop	{r7, pc}

08019148 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019148:	b580      	push	{r7, lr}
 801914a:	b082      	sub	sp, #8
 801914c:	af00      	add	r7, sp, #0
 801914e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019156:	4618      	mov	r0, r3
 8019158:	f7f8 fbfd 	bl	8011956 <USBD_LL_DevDisconnected>
}
 801915c:	bf00      	nop
 801915e:	3708      	adds	r7, #8
 8019160:	46bd      	mov	sp, r7
 8019162:	bd80      	pop	{r7, pc}

08019164 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019164:	b580      	push	{r7, lr}
 8019166:	b082      	sub	sp, #8
 8019168:	af00      	add	r7, sp, #0
 801916a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	781b      	ldrb	r3, [r3, #0]
 8019170:	2b00      	cmp	r3, #0
 8019172:	d13c      	bne.n	80191ee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8019174:	4a20      	ldr	r2, [pc, #128]	; (80191f8 <USBD_LL_Init+0x94>)
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	4a1e      	ldr	r2, [pc, #120]	; (80191f8 <USBD_LL_Init+0x94>)
 8019180:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019184:	4b1c      	ldr	r3, [pc, #112]	; (80191f8 <USBD_LL_Init+0x94>)
 8019186:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801918a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801918c:	4b1a      	ldr	r3, [pc, #104]	; (80191f8 <USBD_LL_Init+0x94>)
 801918e:	2204      	movs	r2, #4
 8019190:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8019192:	4b19      	ldr	r3, [pc, #100]	; (80191f8 <USBD_LL_Init+0x94>)
 8019194:	2202      	movs	r2, #2
 8019196:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8019198:	4b17      	ldr	r3, [pc, #92]	; (80191f8 <USBD_LL_Init+0x94>)
 801919a:	2200      	movs	r2, #0
 801919c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801919e:	4b16      	ldr	r3, [pc, #88]	; (80191f8 <USBD_LL_Init+0x94>)
 80191a0:	2202      	movs	r2, #2
 80191a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80191a4:	4b14      	ldr	r3, [pc, #80]	; (80191f8 <USBD_LL_Init+0x94>)
 80191a6:	2200      	movs	r2, #0
 80191a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80191aa:	4b13      	ldr	r3, [pc, #76]	; (80191f8 <USBD_LL_Init+0x94>)
 80191ac:	2200      	movs	r2, #0
 80191ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80191b0:	4b11      	ldr	r3, [pc, #68]	; (80191f8 <USBD_LL_Init+0x94>)
 80191b2:	2200      	movs	r2, #0
 80191b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80191b6:	4b10      	ldr	r3, [pc, #64]	; (80191f8 <USBD_LL_Init+0x94>)
 80191b8:	2201      	movs	r2, #1
 80191ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80191bc:	4b0e      	ldr	r3, [pc, #56]	; (80191f8 <USBD_LL_Init+0x94>)
 80191be:	2200      	movs	r2, #0
 80191c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80191c2:	480d      	ldr	r0, [pc, #52]	; (80191f8 <USBD_LL_Init+0x94>)
 80191c4:	f7f0 ff5e 	bl	800a084 <HAL_PCD_Init>
 80191c8:	4603      	mov	r3, r0
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	d001      	beq.n	80191d2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80191ce:	f7e9 fbd3 	bl	8002978 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80191d2:	2180      	movs	r1, #128	; 0x80
 80191d4:	4808      	ldr	r0, [pc, #32]	; (80191f8 <USBD_LL_Init+0x94>)
 80191d6:	f7f2 f8bc 	bl	800b352 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80191da:	2240      	movs	r2, #64	; 0x40
 80191dc:	2100      	movs	r1, #0
 80191de:	4806      	ldr	r0, [pc, #24]	; (80191f8 <USBD_LL_Init+0x94>)
 80191e0:	f7f2 f870 	bl	800b2c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80191e4:	2280      	movs	r2, #128	; 0x80
 80191e6:	2101      	movs	r1, #1
 80191e8:	4803      	ldr	r0, [pc, #12]	; (80191f8 <USBD_LL_Init+0x94>)
 80191ea:	f7f2 f86b 	bl	800b2c4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80191ee:	2300      	movs	r3, #0
}
 80191f0:	4618      	mov	r0, r3
 80191f2:	3708      	adds	r7, #8
 80191f4:	46bd      	mov	sp, r7
 80191f6:	bd80      	pop	{r7, pc}
 80191f8:	20008b9c 	.word	0x20008b9c

080191fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80191fc:	b580      	push	{r7, lr}
 80191fe:	b084      	sub	sp, #16
 8019200:	af00      	add	r7, sp, #0
 8019202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019204:	2300      	movs	r3, #0
 8019206:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019208:	2300      	movs	r3, #0
 801920a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801920c:	687b      	ldr	r3, [r7, #4]
 801920e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019212:	4618      	mov	r0, r3
 8019214:	f7f1 f853 	bl	800a2be <HAL_PCD_Start>
 8019218:	4603      	mov	r3, r0
 801921a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801921c:	7bfb      	ldrb	r3, [r7, #15]
 801921e:	4618      	mov	r0, r3
 8019220:	f000 f942 	bl	80194a8 <USBD_Get_USB_Status>
 8019224:	4603      	mov	r3, r0
 8019226:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019228:	7bbb      	ldrb	r3, [r7, #14]
}
 801922a:	4618      	mov	r0, r3
 801922c:	3710      	adds	r7, #16
 801922e:	46bd      	mov	sp, r7
 8019230:	bd80      	pop	{r7, pc}

08019232 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019232:	b580      	push	{r7, lr}
 8019234:	b084      	sub	sp, #16
 8019236:	af00      	add	r7, sp, #0
 8019238:	6078      	str	r0, [r7, #4]
 801923a:	4608      	mov	r0, r1
 801923c:	4611      	mov	r1, r2
 801923e:	461a      	mov	r2, r3
 8019240:	4603      	mov	r3, r0
 8019242:	70fb      	strb	r3, [r7, #3]
 8019244:	460b      	mov	r3, r1
 8019246:	70bb      	strb	r3, [r7, #2]
 8019248:	4613      	mov	r3, r2
 801924a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801924c:	2300      	movs	r3, #0
 801924e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019250:	2300      	movs	r3, #0
 8019252:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801925a:	78bb      	ldrb	r3, [r7, #2]
 801925c:	883a      	ldrh	r2, [r7, #0]
 801925e:	78f9      	ldrb	r1, [r7, #3]
 8019260:	f7f1 fc37 	bl	800aad2 <HAL_PCD_EP_Open>
 8019264:	4603      	mov	r3, r0
 8019266:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019268:	7bfb      	ldrb	r3, [r7, #15]
 801926a:	4618      	mov	r0, r3
 801926c:	f000 f91c 	bl	80194a8 <USBD_Get_USB_Status>
 8019270:	4603      	mov	r3, r0
 8019272:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019274:	7bbb      	ldrb	r3, [r7, #14]
}
 8019276:	4618      	mov	r0, r3
 8019278:	3710      	adds	r7, #16
 801927a:	46bd      	mov	sp, r7
 801927c:	bd80      	pop	{r7, pc}

0801927e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801927e:	b580      	push	{r7, lr}
 8019280:	b084      	sub	sp, #16
 8019282:	af00      	add	r7, sp, #0
 8019284:	6078      	str	r0, [r7, #4]
 8019286:	460b      	mov	r3, r1
 8019288:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801928a:	2300      	movs	r3, #0
 801928c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801928e:	2300      	movs	r3, #0
 8019290:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019298:	78fa      	ldrb	r2, [r7, #3]
 801929a:	4611      	mov	r1, r2
 801929c:	4618      	mov	r0, r3
 801929e:	f7f1 fc80 	bl	800aba2 <HAL_PCD_EP_Close>
 80192a2:	4603      	mov	r3, r0
 80192a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80192a6:	7bfb      	ldrb	r3, [r7, #15]
 80192a8:	4618      	mov	r0, r3
 80192aa:	f000 f8fd 	bl	80194a8 <USBD_Get_USB_Status>
 80192ae:	4603      	mov	r3, r0
 80192b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80192b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80192b4:	4618      	mov	r0, r3
 80192b6:	3710      	adds	r7, #16
 80192b8:	46bd      	mov	sp, r7
 80192ba:	bd80      	pop	{r7, pc}

080192bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80192bc:	b580      	push	{r7, lr}
 80192be:	b084      	sub	sp, #16
 80192c0:	af00      	add	r7, sp, #0
 80192c2:	6078      	str	r0, [r7, #4]
 80192c4:	460b      	mov	r3, r1
 80192c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80192c8:	2300      	movs	r3, #0
 80192ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80192cc:	2300      	movs	r3, #0
 80192ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80192d6:	78fa      	ldrb	r2, [r7, #3]
 80192d8:	4611      	mov	r1, r2
 80192da:	4618      	mov	r0, r3
 80192dc:	f7f1 fd58 	bl	800ad90 <HAL_PCD_EP_SetStall>
 80192e0:	4603      	mov	r3, r0
 80192e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80192e4:	7bfb      	ldrb	r3, [r7, #15]
 80192e6:	4618      	mov	r0, r3
 80192e8:	f000 f8de 	bl	80194a8 <USBD_Get_USB_Status>
 80192ec:	4603      	mov	r3, r0
 80192ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80192f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80192f2:	4618      	mov	r0, r3
 80192f4:	3710      	adds	r7, #16
 80192f6:	46bd      	mov	sp, r7
 80192f8:	bd80      	pop	{r7, pc}

080192fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80192fa:	b580      	push	{r7, lr}
 80192fc:	b084      	sub	sp, #16
 80192fe:	af00      	add	r7, sp, #0
 8019300:	6078      	str	r0, [r7, #4]
 8019302:	460b      	mov	r3, r1
 8019304:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019306:	2300      	movs	r3, #0
 8019308:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801930a:	2300      	movs	r3, #0
 801930c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801930e:	687b      	ldr	r3, [r7, #4]
 8019310:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019314:	78fa      	ldrb	r2, [r7, #3]
 8019316:	4611      	mov	r1, r2
 8019318:	4618      	mov	r0, r3
 801931a:	f7f1 fd9d 	bl	800ae58 <HAL_PCD_EP_ClrStall>
 801931e:	4603      	mov	r3, r0
 8019320:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019322:	7bfb      	ldrb	r3, [r7, #15]
 8019324:	4618      	mov	r0, r3
 8019326:	f000 f8bf 	bl	80194a8 <USBD_Get_USB_Status>
 801932a:	4603      	mov	r3, r0
 801932c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801932e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019330:	4618      	mov	r0, r3
 8019332:	3710      	adds	r7, #16
 8019334:	46bd      	mov	sp, r7
 8019336:	bd80      	pop	{r7, pc}

08019338 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019338:	b480      	push	{r7}
 801933a:	b085      	sub	sp, #20
 801933c:	af00      	add	r7, sp, #0
 801933e:	6078      	str	r0, [r7, #4]
 8019340:	460b      	mov	r3, r1
 8019342:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801934a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801934c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019350:	2b00      	cmp	r3, #0
 8019352:	da0b      	bge.n	801936c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019354:	78fb      	ldrb	r3, [r7, #3]
 8019356:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801935a:	68f9      	ldr	r1, [r7, #12]
 801935c:	4613      	mov	r3, r2
 801935e:	00db      	lsls	r3, r3, #3
 8019360:	1a9b      	subs	r3, r3, r2
 8019362:	009b      	lsls	r3, r3, #2
 8019364:	440b      	add	r3, r1
 8019366:	333e      	adds	r3, #62	; 0x3e
 8019368:	781b      	ldrb	r3, [r3, #0]
 801936a:	e00b      	b.n	8019384 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801936c:	78fb      	ldrb	r3, [r7, #3]
 801936e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019372:	68f9      	ldr	r1, [r7, #12]
 8019374:	4613      	mov	r3, r2
 8019376:	00db      	lsls	r3, r3, #3
 8019378:	1a9b      	subs	r3, r3, r2
 801937a:	009b      	lsls	r3, r3, #2
 801937c:	440b      	add	r3, r1
 801937e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8019382:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019384:	4618      	mov	r0, r3
 8019386:	3714      	adds	r7, #20
 8019388:	46bd      	mov	sp, r7
 801938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801938e:	4770      	bx	lr

08019390 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019390:	b580      	push	{r7, lr}
 8019392:	b084      	sub	sp, #16
 8019394:	af00      	add	r7, sp, #0
 8019396:	6078      	str	r0, [r7, #4]
 8019398:	460b      	mov	r3, r1
 801939a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801939c:	2300      	movs	r3, #0
 801939e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80193a0:	2300      	movs	r3, #0
 80193a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80193aa:	78fa      	ldrb	r2, [r7, #3]
 80193ac:	4611      	mov	r1, r2
 80193ae:	4618      	mov	r0, r3
 80193b0:	f7f1 fb6a 	bl	800aa88 <HAL_PCD_SetAddress>
 80193b4:	4603      	mov	r3, r0
 80193b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80193b8:	7bfb      	ldrb	r3, [r7, #15]
 80193ba:	4618      	mov	r0, r3
 80193bc:	f000 f874 	bl	80194a8 <USBD_Get_USB_Status>
 80193c0:	4603      	mov	r3, r0
 80193c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80193c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80193c6:	4618      	mov	r0, r3
 80193c8:	3710      	adds	r7, #16
 80193ca:	46bd      	mov	sp, r7
 80193cc:	bd80      	pop	{r7, pc}

080193ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80193ce:	b580      	push	{r7, lr}
 80193d0:	b086      	sub	sp, #24
 80193d2:	af00      	add	r7, sp, #0
 80193d4:	60f8      	str	r0, [r7, #12]
 80193d6:	607a      	str	r2, [r7, #4]
 80193d8:	603b      	str	r3, [r7, #0]
 80193da:	460b      	mov	r3, r1
 80193dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80193de:	2300      	movs	r3, #0
 80193e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80193e2:	2300      	movs	r3, #0
 80193e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80193e6:	68fb      	ldr	r3, [r7, #12]
 80193e8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80193ec:	7af9      	ldrb	r1, [r7, #11]
 80193ee:	683b      	ldr	r3, [r7, #0]
 80193f0:	687a      	ldr	r2, [r7, #4]
 80193f2:	f7f1 fc83 	bl	800acfc <HAL_PCD_EP_Transmit>
 80193f6:	4603      	mov	r3, r0
 80193f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80193fa:	7dfb      	ldrb	r3, [r7, #23]
 80193fc:	4618      	mov	r0, r3
 80193fe:	f000 f853 	bl	80194a8 <USBD_Get_USB_Status>
 8019402:	4603      	mov	r3, r0
 8019404:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019406:	7dbb      	ldrb	r3, [r7, #22]
}
 8019408:	4618      	mov	r0, r3
 801940a:	3718      	adds	r7, #24
 801940c:	46bd      	mov	sp, r7
 801940e:	bd80      	pop	{r7, pc}

08019410 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019410:	b580      	push	{r7, lr}
 8019412:	b086      	sub	sp, #24
 8019414:	af00      	add	r7, sp, #0
 8019416:	60f8      	str	r0, [r7, #12]
 8019418:	607a      	str	r2, [r7, #4]
 801941a:	603b      	str	r3, [r7, #0]
 801941c:	460b      	mov	r3, r1
 801941e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019420:	2300      	movs	r3, #0
 8019422:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019424:	2300      	movs	r3, #0
 8019426:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019428:	68fb      	ldr	r3, [r7, #12]
 801942a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801942e:	7af9      	ldrb	r1, [r7, #11]
 8019430:	683b      	ldr	r3, [r7, #0]
 8019432:	687a      	ldr	r2, [r7, #4]
 8019434:	f7f1 fbff 	bl	800ac36 <HAL_PCD_EP_Receive>
 8019438:	4603      	mov	r3, r0
 801943a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801943c:	7dfb      	ldrb	r3, [r7, #23]
 801943e:	4618      	mov	r0, r3
 8019440:	f000 f832 	bl	80194a8 <USBD_Get_USB_Status>
 8019444:	4603      	mov	r3, r0
 8019446:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019448:	7dbb      	ldrb	r3, [r7, #22]
}
 801944a:	4618      	mov	r0, r3
 801944c:	3718      	adds	r7, #24
 801944e:	46bd      	mov	sp, r7
 8019450:	bd80      	pop	{r7, pc}

08019452 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019452:	b580      	push	{r7, lr}
 8019454:	b082      	sub	sp, #8
 8019456:	af00      	add	r7, sp, #0
 8019458:	6078      	str	r0, [r7, #4]
 801945a:	460b      	mov	r3, r1
 801945c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019464:	78fa      	ldrb	r2, [r7, #3]
 8019466:	4611      	mov	r1, r2
 8019468:	4618      	mov	r0, r3
 801946a:	f7f1 fc2f 	bl	800accc <HAL_PCD_EP_GetRxCount>
 801946e:	4603      	mov	r3, r0
}
 8019470:	4618      	mov	r0, r3
 8019472:	3708      	adds	r7, #8
 8019474:	46bd      	mov	sp, r7
 8019476:	bd80      	pop	{r7, pc}

08019478 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019478:	b480      	push	{r7}
 801947a:	b083      	sub	sp, #12
 801947c:	af00      	add	r7, sp, #0
 801947e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8019480:	4b03      	ldr	r3, [pc, #12]	; (8019490 <USBD_static_malloc+0x18>)
}
 8019482:	4618      	mov	r0, r3
 8019484:	370c      	adds	r7, #12
 8019486:	46bd      	mov	sp, r7
 8019488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801948c:	4770      	bx	lr
 801948e:	bf00      	nop
 8019490:	20005c98 	.word	0x20005c98

08019494 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8019494:	b480      	push	{r7}
 8019496:	b083      	sub	sp, #12
 8019498:	af00      	add	r7, sp, #0
 801949a:	6078      	str	r0, [r7, #4]

}
 801949c:	bf00      	nop
 801949e:	370c      	adds	r7, #12
 80194a0:	46bd      	mov	sp, r7
 80194a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194a6:	4770      	bx	lr

080194a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80194a8:	b480      	push	{r7}
 80194aa:	b085      	sub	sp, #20
 80194ac:	af00      	add	r7, sp, #0
 80194ae:	4603      	mov	r3, r0
 80194b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80194b2:	2300      	movs	r3, #0
 80194b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80194b6:	79fb      	ldrb	r3, [r7, #7]
 80194b8:	2b03      	cmp	r3, #3
 80194ba:	d817      	bhi.n	80194ec <USBD_Get_USB_Status+0x44>
 80194bc:	a201      	add	r2, pc, #4	; (adr r2, 80194c4 <USBD_Get_USB_Status+0x1c>)
 80194be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80194c2:	bf00      	nop
 80194c4:	080194d5 	.word	0x080194d5
 80194c8:	080194db 	.word	0x080194db
 80194cc:	080194e1 	.word	0x080194e1
 80194d0:	080194e7 	.word	0x080194e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80194d4:	2300      	movs	r3, #0
 80194d6:	73fb      	strb	r3, [r7, #15]
    break;
 80194d8:	e00b      	b.n	80194f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80194da:	2303      	movs	r3, #3
 80194dc:	73fb      	strb	r3, [r7, #15]
    break;
 80194de:	e008      	b.n	80194f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80194e0:	2301      	movs	r3, #1
 80194e2:	73fb      	strb	r3, [r7, #15]
    break;
 80194e4:	e005      	b.n	80194f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80194e6:	2303      	movs	r3, #3
 80194e8:	73fb      	strb	r3, [r7, #15]
    break;
 80194ea:	e002      	b.n	80194f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80194ec:	2303      	movs	r3, #3
 80194ee:	73fb      	strb	r3, [r7, #15]
    break;
 80194f0:	bf00      	nop
  }
  return usb_status;
 80194f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80194f4:	4618      	mov	r0, r3
 80194f6:	3714      	adds	r7, #20
 80194f8:	46bd      	mov	sp, r7
 80194fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194fe:	4770      	bx	lr

08019500 <_Znwj>:
 8019500:	2801      	cmp	r0, #1
 8019502:	bf38      	it	cc
 8019504:	2001      	movcc	r0, #1
 8019506:	b510      	push	{r4, lr}
 8019508:	4604      	mov	r4, r0
 801950a:	4620      	mov	r0, r4
 801950c:	f001 f906 	bl	801a71c <malloc>
 8019510:	b930      	cbnz	r0, 8019520 <_Znwj+0x20>
 8019512:	f000 f81b 	bl	801954c <_ZSt15get_new_handlerv>
 8019516:	b908      	cbnz	r0, 801951c <_Znwj+0x1c>
 8019518:	f000 ffd4 	bl	801a4c4 <abort>
 801951c:	4780      	blx	r0
 801951e:	e7f4      	b.n	801950a <_Znwj+0xa>
 8019520:	bd10      	pop	{r4, pc}

08019522 <__cxa_pure_virtual>:
 8019522:	b508      	push	{r3, lr}
 8019524:	f000 f80c 	bl	8019540 <_ZSt9terminatev>

08019528 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8019528:	b508      	push	{r3, lr}
 801952a:	4780      	blx	r0
 801952c:	f000 ffca 	bl	801a4c4 <abort>

08019530 <_ZSt13get_terminatev>:
 8019530:	4b02      	ldr	r3, [pc, #8]	; (801953c <_ZSt13get_terminatev+0xc>)
 8019532:	6818      	ldr	r0, [r3, #0]
 8019534:	f3bf 8f5b 	dmb	ish
 8019538:	4770      	bx	lr
 801953a:	bf00      	nop
 801953c:	200001f0 	.word	0x200001f0

08019540 <_ZSt9terminatev>:
 8019540:	b508      	push	{r3, lr}
 8019542:	f7ff fff5 	bl	8019530 <_ZSt13get_terminatev>
 8019546:	f7ff ffef 	bl	8019528 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0801954c <_ZSt15get_new_handlerv>:
 801954c:	4b02      	ldr	r3, [pc, #8]	; (8019558 <_ZSt15get_new_handlerv+0xc>)
 801954e:	6818      	ldr	r0, [r3, #0]
 8019550:	f3bf 8f5b 	dmb	ish
 8019554:	4770      	bx	lr
 8019556:	bf00      	nop
 8019558:	20005eb8 	.word	0x20005eb8

0801955c <pow>:
 801955c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019560:	ec59 8b10 	vmov	r8, r9, d0
 8019564:	ec57 6b11 	vmov	r6, r7, d1
 8019568:	f000 f8a6 	bl	80196b8 <__ieee754_pow>
 801956c:	4b4e      	ldr	r3, [pc, #312]	; (80196a8 <pow+0x14c>)
 801956e:	f993 3000 	ldrsb.w	r3, [r3]
 8019572:	3301      	adds	r3, #1
 8019574:	ec55 4b10 	vmov	r4, r5, d0
 8019578:	d015      	beq.n	80195a6 <pow+0x4a>
 801957a:	4632      	mov	r2, r6
 801957c:	463b      	mov	r3, r7
 801957e:	4630      	mov	r0, r6
 8019580:	4639      	mov	r1, r7
 8019582:	f7e7 fae3 	bl	8000b4c <__aeabi_dcmpun>
 8019586:	b970      	cbnz	r0, 80195a6 <pow+0x4a>
 8019588:	4642      	mov	r2, r8
 801958a:	464b      	mov	r3, r9
 801958c:	4640      	mov	r0, r8
 801958e:	4649      	mov	r1, r9
 8019590:	f7e7 fadc 	bl	8000b4c <__aeabi_dcmpun>
 8019594:	2200      	movs	r2, #0
 8019596:	2300      	movs	r3, #0
 8019598:	b148      	cbz	r0, 80195ae <pow+0x52>
 801959a:	4630      	mov	r0, r6
 801959c:	4639      	mov	r1, r7
 801959e:	f7e7 faa3 	bl	8000ae8 <__aeabi_dcmpeq>
 80195a2:	2800      	cmp	r0, #0
 80195a4:	d17d      	bne.n	80196a2 <pow+0x146>
 80195a6:	ec45 4b10 	vmov	d0, r4, r5
 80195aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80195ae:	4640      	mov	r0, r8
 80195b0:	4649      	mov	r1, r9
 80195b2:	f7e7 fa99 	bl	8000ae8 <__aeabi_dcmpeq>
 80195b6:	b1e0      	cbz	r0, 80195f2 <pow+0x96>
 80195b8:	2200      	movs	r2, #0
 80195ba:	2300      	movs	r3, #0
 80195bc:	4630      	mov	r0, r6
 80195be:	4639      	mov	r1, r7
 80195c0:	f7e7 fa92 	bl	8000ae8 <__aeabi_dcmpeq>
 80195c4:	2800      	cmp	r0, #0
 80195c6:	d16c      	bne.n	80196a2 <pow+0x146>
 80195c8:	ec47 6b10 	vmov	d0, r6, r7
 80195cc:	f000 fe53 	bl	801a276 <finite>
 80195d0:	2800      	cmp	r0, #0
 80195d2:	d0e8      	beq.n	80195a6 <pow+0x4a>
 80195d4:	2200      	movs	r2, #0
 80195d6:	2300      	movs	r3, #0
 80195d8:	4630      	mov	r0, r6
 80195da:	4639      	mov	r1, r7
 80195dc:	f7e7 fa8e 	bl	8000afc <__aeabi_dcmplt>
 80195e0:	2800      	cmp	r0, #0
 80195e2:	d0e0      	beq.n	80195a6 <pow+0x4a>
 80195e4:	f000 ff76 	bl	801a4d4 <__errno>
 80195e8:	2321      	movs	r3, #33	; 0x21
 80195ea:	6003      	str	r3, [r0, #0]
 80195ec:	2400      	movs	r4, #0
 80195ee:	4d2f      	ldr	r5, [pc, #188]	; (80196ac <pow+0x150>)
 80195f0:	e7d9      	b.n	80195a6 <pow+0x4a>
 80195f2:	ec45 4b10 	vmov	d0, r4, r5
 80195f6:	f000 fe3e 	bl	801a276 <finite>
 80195fa:	bbb8      	cbnz	r0, 801966c <pow+0x110>
 80195fc:	ec49 8b10 	vmov	d0, r8, r9
 8019600:	f000 fe39 	bl	801a276 <finite>
 8019604:	b390      	cbz	r0, 801966c <pow+0x110>
 8019606:	ec47 6b10 	vmov	d0, r6, r7
 801960a:	f000 fe34 	bl	801a276 <finite>
 801960e:	b368      	cbz	r0, 801966c <pow+0x110>
 8019610:	4622      	mov	r2, r4
 8019612:	462b      	mov	r3, r5
 8019614:	4620      	mov	r0, r4
 8019616:	4629      	mov	r1, r5
 8019618:	f7e7 fa98 	bl	8000b4c <__aeabi_dcmpun>
 801961c:	b160      	cbz	r0, 8019638 <pow+0xdc>
 801961e:	f000 ff59 	bl	801a4d4 <__errno>
 8019622:	2321      	movs	r3, #33	; 0x21
 8019624:	6003      	str	r3, [r0, #0]
 8019626:	2200      	movs	r2, #0
 8019628:	2300      	movs	r3, #0
 801962a:	4610      	mov	r0, r2
 801962c:	4619      	mov	r1, r3
 801962e:	f7e7 f91d 	bl	800086c <__aeabi_ddiv>
 8019632:	4604      	mov	r4, r0
 8019634:	460d      	mov	r5, r1
 8019636:	e7b6      	b.n	80195a6 <pow+0x4a>
 8019638:	f000 ff4c 	bl	801a4d4 <__errno>
 801963c:	2322      	movs	r3, #34	; 0x22
 801963e:	6003      	str	r3, [r0, #0]
 8019640:	2200      	movs	r2, #0
 8019642:	2300      	movs	r3, #0
 8019644:	4640      	mov	r0, r8
 8019646:	4649      	mov	r1, r9
 8019648:	f7e7 fa58 	bl	8000afc <__aeabi_dcmplt>
 801964c:	2400      	movs	r4, #0
 801964e:	b158      	cbz	r0, 8019668 <pow+0x10c>
 8019650:	ec47 6b10 	vmov	d0, r6, r7
 8019654:	f000 fe24 	bl	801a2a0 <rint>
 8019658:	4632      	mov	r2, r6
 801965a:	ec51 0b10 	vmov	r0, r1, d0
 801965e:	463b      	mov	r3, r7
 8019660:	f7e7 fa42 	bl	8000ae8 <__aeabi_dcmpeq>
 8019664:	2800      	cmp	r0, #0
 8019666:	d0c2      	beq.n	80195ee <pow+0x92>
 8019668:	4d11      	ldr	r5, [pc, #68]	; (80196b0 <pow+0x154>)
 801966a:	e79c      	b.n	80195a6 <pow+0x4a>
 801966c:	2200      	movs	r2, #0
 801966e:	2300      	movs	r3, #0
 8019670:	4620      	mov	r0, r4
 8019672:	4629      	mov	r1, r5
 8019674:	f7e7 fa38 	bl	8000ae8 <__aeabi_dcmpeq>
 8019678:	2800      	cmp	r0, #0
 801967a:	d094      	beq.n	80195a6 <pow+0x4a>
 801967c:	ec49 8b10 	vmov	d0, r8, r9
 8019680:	f000 fdf9 	bl	801a276 <finite>
 8019684:	2800      	cmp	r0, #0
 8019686:	d08e      	beq.n	80195a6 <pow+0x4a>
 8019688:	ec47 6b10 	vmov	d0, r6, r7
 801968c:	f000 fdf3 	bl	801a276 <finite>
 8019690:	2800      	cmp	r0, #0
 8019692:	d088      	beq.n	80195a6 <pow+0x4a>
 8019694:	f000 ff1e 	bl	801a4d4 <__errno>
 8019698:	2322      	movs	r3, #34	; 0x22
 801969a:	6003      	str	r3, [r0, #0]
 801969c:	2400      	movs	r4, #0
 801969e:	2500      	movs	r5, #0
 80196a0:	e781      	b.n	80195a6 <pow+0x4a>
 80196a2:	4d04      	ldr	r5, [pc, #16]	; (80196b4 <pow+0x158>)
 80196a4:	2400      	movs	r4, #0
 80196a6:	e77e      	b.n	80195a6 <pow+0x4a>
 80196a8:	200001f4 	.word	0x200001f4
 80196ac:	fff00000 	.word	0xfff00000
 80196b0:	7ff00000 	.word	0x7ff00000
 80196b4:	3ff00000 	.word	0x3ff00000

080196b8 <__ieee754_pow>:
 80196b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196bc:	ed2d 8b06 	vpush	{d8-d10}
 80196c0:	b08d      	sub	sp, #52	; 0x34
 80196c2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80196c6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80196ca:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80196ce:	ea56 0100 	orrs.w	r1, r6, r0
 80196d2:	ec53 2b10 	vmov	r2, r3, d0
 80196d6:	f000 84d1 	beq.w	801a07c <__ieee754_pow+0x9c4>
 80196da:	497f      	ldr	r1, [pc, #508]	; (80198d8 <__ieee754_pow+0x220>)
 80196dc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80196e0:	428c      	cmp	r4, r1
 80196e2:	ee10 8a10 	vmov	r8, s0
 80196e6:	4699      	mov	r9, r3
 80196e8:	dc09      	bgt.n	80196fe <__ieee754_pow+0x46>
 80196ea:	d103      	bne.n	80196f4 <__ieee754_pow+0x3c>
 80196ec:	b97a      	cbnz	r2, 801970e <__ieee754_pow+0x56>
 80196ee:	42a6      	cmp	r6, r4
 80196f0:	dd02      	ble.n	80196f8 <__ieee754_pow+0x40>
 80196f2:	e00c      	b.n	801970e <__ieee754_pow+0x56>
 80196f4:	428e      	cmp	r6, r1
 80196f6:	dc02      	bgt.n	80196fe <__ieee754_pow+0x46>
 80196f8:	428e      	cmp	r6, r1
 80196fa:	d110      	bne.n	801971e <__ieee754_pow+0x66>
 80196fc:	b178      	cbz	r0, 801971e <__ieee754_pow+0x66>
 80196fe:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8019702:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019706:	ea54 0308 	orrs.w	r3, r4, r8
 801970a:	f000 84b7 	beq.w	801a07c <__ieee754_pow+0x9c4>
 801970e:	4873      	ldr	r0, [pc, #460]	; (80198dc <__ieee754_pow+0x224>)
 8019710:	b00d      	add	sp, #52	; 0x34
 8019712:	ecbd 8b06 	vpop	{d8-d10}
 8019716:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801971a:	f000 bdb9 	b.w	801a290 <nan>
 801971e:	f1b9 0f00 	cmp.w	r9, #0
 8019722:	da36      	bge.n	8019792 <__ieee754_pow+0xda>
 8019724:	496e      	ldr	r1, [pc, #440]	; (80198e0 <__ieee754_pow+0x228>)
 8019726:	428e      	cmp	r6, r1
 8019728:	dc51      	bgt.n	80197ce <__ieee754_pow+0x116>
 801972a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 801972e:	428e      	cmp	r6, r1
 8019730:	f340 84af 	ble.w	801a092 <__ieee754_pow+0x9da>
 8019734:	1531      	asrs	r1, r6, #20
 8019736:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801973a:	2914      	cmp	r1, #20
 801973c:	dd0f      	ble.n	801975e <__ieee754_pow+0xa6>
 801973e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8019742:	fa20 fc01 	lsr.w	ip, r0, r1
 8019746:	fa0c f101 	lsl.w	r1, ip, r1
 801974a:	4281      	cmp	r1, r0
 801974c:	f040 84a1 	bne.w	801a092 <__ieee754_pow+0x9da>
 8019750:	f00c 0c01 	and.w	ip, ip, #1
 8019754:	f1cc 0102 	rsb	r1, ip, #2
 8019758:	9100      	str	r1, [sp, #0]
 801975a:	b180      	cbz	r0, 801977e <__ieee754_pow+0xc6>
 801975c:	e059      	b.n	8019812 <__ieee754_pow+0x15a>
 801975e:	2800      	cmp	r0, #0
 8019760:	d155      	bne.n	801980e <__ieee754_pow+0x156>
 8019762:	f1c1 0114 	rsb	r1, r1, #20
 8019766:	fa46 fc01 	asr.w	ip, r6, r1
 801976a:	fa0c f101 	lsl.w	r1, ip, r1
 801976e:	42b1      	cmp	r1, r6
 8019770:	f040 848c 	bne.w	801a08c <__ieee754_pow+0x9d4>
 8019774:	f00c 0c01 	and.w	ip, ip, #1
 8019778:	f1cc 0102 	rsb	r1, ip, #2
 801977c:	9100      	str	r1, [sp, #0]
 801977e:	4959      	ldr	r1, [pc, #356]	; (80198e4 <__ieee754_pow+0x22c>)
 8019780:	428e      	cmp	r6, r1
 8019782:	d12d      	bne.n	80197e0 <__ieee754_pow+0x128>
 8019784:	2f00      	cmp	r7, #0
 8019786:	da79      	bge.n	801987c <__ieee754_pow+0x1c4>
 8019788:	4956      	ldr	r1, [pc, #344]	; (80198e4 <__ieee754_pow+0x22c>)
 801978a:	2000      	movs	r0, #0
 801978c:	f7e7 f86e 	bl	800086c <__aeabi_ddiv>
 8019790:	e016      	b.n	80197c0 <__ieee754_pow+0x108>
 8019792:	2100      	movs	r1, #0
 8019794:	9100      	str	r1, [sp, #0]
 8019796:	2800      	cmp	r0, #0
 8019798:	d13b      	bne.n	8019812 <__ieee754_pow+0x15a>
 801979a:	494f      	ldr	r1, [pc, #316]	; (80198d8 <__ieee754_pow+0x220>)
 801979c:	428e      	cmp	r6, r1
 801979e:	d1ee      	bne.n	801977e <__ieee754_pow+0xc6>
 80197a0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80197a4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80197a8:	ea53 0308 	orrs.w	r3, r3, r8
 80197ac:	f000 8466 	beq.w	801a07c <__ieee754_pow+0x9c4>
 80197b0:	4b4d      	ldr	r3, [pc, #308]	; (80198e8 <__ieee754_pow+0x230>)
 80197b2:	429c      	cmp	r4, r3
 80197b4:	dd0d      	ble.n	80197d2 <__ieee754_pow+0x11a>
 80197b6:	2f00      	cmp	r7, #0
 80197b8:	f280 8464 	bge.w	801a084 <__ieee754_pow+0x9cc>
 80197bc:	2000      	movs	r0, #0
 80197be:	2100      	movs	r1, #0
 80197c0:	ec41 0b10 	vmov	d0, r0, r1
 80197c4:	b00d      	add	sp, #52	; 0x34
 80197c6:	ecbd 8b06 	vpop	{d8-d10}
 80197ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197ce:	2102      	movs	r1, #2
 80197d0:	e7e0      	b.n	8019794 <__ieee754_pow+0xdc>
 80197d2:	2f00      	cmp	r7, #0
 80197d4:	daf2      	bge.n	80197bc <__ieee754_pow+0x104>
 80197d6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80197da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80197de:	e7ef      	b.n	80197c0 <__ieee754_pow+0x108>
 80197e0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80197e4:	d104      	bne.n	80197f0 <__ieee754_pow+0x138>
 80197e6:	4610      	mov	r0, r2
 80197e8:	4619      	mov	r1, r3
 80197ea:	f7e6 ff15 	bl	8000618 <__aeabi_dmul>
 80197ee:	e7e7      	b.n	80197c0 <__ieee754_pow+0x108>
 80197f0:	493e      	ldr	r1, [pc, #248]	; (80198ec <__ieee754_pow+0x234>)
 80197f2:	428f      	cmp	r7, r1
 80197f4:	d10d      	bne.n	8019812 <__ieee754_pow+0x15a>
 80197f6:	f1b9 0f00 	cmp.w	r9, #0
 80197fa:	db0a      	blt.n	8019812 <__ieee754_pow+0x15a>
 80197fc:	ec43 2b10 	vmov	d0, r2, r3
 8019800:	b00d      	add	sp, #52	; 0x34
 8019802:	ecbd 8b06 	vpop	{d8-d10}
 8019806:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801980a:	f000 bc77 	b.w	801a0fc <__ieee754_sqrt>
 801980e:	2100      	movs	r1, #0
 8019810:	9100      	str	r1, [sp, #0]
 8019812:	ec43 2b10 	vmov	d0, r2, r3
 8019816:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801981a:	f000 fd23 	bl	801a264 <fabs>
 801981e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019822:	ec51 0b10 	vmov	r0, r1, d0
 8019826:	f1b8 0f00 	cmp.w	r8, #0
 801982a:	d12a      	bne.n	8019882 <__ieee754_pow+0x1ca>
 801982c:	b12c      	cbz	r4, 801983a <__ieee754_pow+0x182>
 801982e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80198e4 <__ieee754_pow+0x22c>
 8019832:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8019836:	45e6      	cmp	lr, ip
 8019838:	d123      	bne.n	8019882 <__ieee754_pow+0x1ca>
 801983a:	2f00      	cmp	r7, #0
 801983c:	da05      	bge.n	801984a <__ieee754_pow+0x192>
 801983e:	4602      	mov	r2, r0
 8019840:	460b      	mov	r3, r1
 8019842:	2000      	movs	r0, #0
 8019844:	4927      	ldr	r1, [pc, #156]	; (80198e4 <__ieee754_pow+0x22c>)
 8019846:	f7e7 f811 	bl	800086c <__aeabi_ddiv>
 801984a:	f1b9 0f00 	cmp.w	r9, #0
 801984e:	dab7      	bge.n	80197c0 <__ieee754_pow+0x108>
 8019850:	9b00      	ldr	r3, [sp, #0]
 8019852:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8019856:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801985a:	4323      	orrs	r3, r4
 801985c:	d108      	bne.n	8019870 <__ieee754_pow+0x1b8>
 801985e:	4602      	mov	r2, r0
 8019860:	460b      	mov	r3, r1
 8019862:	4610      	mov	r0, r2
 8019864:	4619      	mov	r1, r3
 8019866:	f7e6 fd1f 	bl	80002a8 <__aeabi_dsub>
 801986a:	4602      	mov	r2, r0
 801986c:	460b      	mov	r3, r1
 801986e:	e78d      	b.n	801978c <__ieee754_pow+0xd4>
 8019870:	9b00      	ldr	r3, [sp, #0]
 8019872:	2b01      	cmp	r3, #1
 8019874:	d1a4      	bne.n	80197c0 <__ieee754_pow+0x108>
 8019876:	4602      	mov	r2, r0
 8019878:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801987c:	4610      	mov	r0, r2
 801987e:	4619      	mov	r1, r3
 8019880:	e79e      	b.n	80197c0 <__ieee754_pow+0x108>
 8019882:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8019886:	f10c 35ff 	add.w	r5, ip, #4294967295
 801988a:	950a      	str	r5, [sp, #40]	; 0x28
 801988c:	9d00      	ldr	r5, [sp, #0]
 801988e:	46ac      	mov	ip, r5
 8019890:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8019892:	ea5c 0505 	orrs.w	r5, ip, r5
 8019896:	d0e4      	beq.n	8019862 <__ieee754_pow+0x1aa>
 8019898:	4b15      	ldr	r3, [pc, #84]	; (80198f0 <__ieee754_pow+0x238>)
 801989a:	429e      	cmp	r6, r3
 801989c:	f340 80fc 	ble.w	8019a98 <__ieee754_pow+0x3e0>
 80198a0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80198a4:	429e      	cmp	r6, r3
 80198a6:	4b10      	ldr	r3, [pc, #64]	; (80198e8 <__ieee754_pow+0x230>)
 80198a8:	dd07      	ble.n	80198ba <__ieee754_pow+0x202>
 80198aa:	429c      	cmp	r4, r3
 80198ac:	dc0a      	bgt.n	80198c4 <__ieee754_pow+0x20c>
 80198ae:	2f00      	cmp	r7, #0
 80198b0:	da84      	bge.n	80197bc <__ieee754_pow+0x104>
 80198b2:	a307      	add	r3, pc, #28	; (adr r3, 80198d0 <__ieee754_pow+0x218>)
 80198b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198b8:	e795      	b.n	80197e6 <__ieee754_pow+0x12e>
 80198ba:	429c      	cmp	r4, r3
 80198bc:	dbf7      	blt.n	80198ae <__ieee754_pow+0x1f6>
 80198be:	4b09      	ldr	r3, [pc, #36]	; (80198e4 <__ieee754_pow+0x22c>)
 80198c0:	429c      	cmp	r4, r3
 80198c2:	dd17      	ble.n	80198f4 <__ieee754_pow+0x23c>
 80198c4:	2f00      	cmp	r7, #0
 80198c6:	dcf4      	bgt.n	80198b2 <__ieee754_pow+0x1fa>
 80198c8:	e778      	b.n	80197bc <__ieee754_pow+0x104>
 80198ca:	bf00      	nop
 80198cc:	f3af 8000 	nop.w
 80198d0:	8800759c 	.word	0x8800759c
 80198d4:	7e37e43c 	.word	0x7e37e43c
 80198d8:	7ff00000 	.word	0x7ff00000
 80198dc:	08021933 	.word	0x08021933
 80198e0:	433fffff 	.word	0x433fffff
 80198e4:	3ff00000 	.word	0x3ff00000
 80198e8:	3fefffff 	.word	0x3fefffff
 80198ec:	3fe00000 	.word	0x3fe00000
 80198f0:	41e00000 	.word	0x41e00000
 80198f4:	4b64      	ldr	r3, [pc, #400]	; (8019a88 <__ieee754_pow+0x3d0>)
 80198f6:	2200      	movs	r2, #0
 80198f8:	f7e6 fcd6 	bl	80002a8 <__aeabi_dsub>
 80198fc:	a356      	add	r3, pc, #344	; (adr r3, 8019a58 <__ieee754_pow+0x3a0>)
 80198fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019902:	4604      	mov	r4, r0
 8019904:	460d      	mov	r5, r1
 8019906:	f7e6 fe87 	bl	8000618 <__aeabi_dmul>
 801990a:	a355      	add	r3, pc, #340	; (adr r3, 8019a60 <__ieee754_pow+0x3a8>)
 801990c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019910:	4606      	mov	r6, r0
 8019912:	460f      	mov	r7, r1
 8019914:	4620      	mov	r0, r4
 8019916:	4629      	mov	r1, r5
 8019918:	f7e6 fe7e 	bl	8000618 <__aeabi_dmul>
 801991c:	4b5b      	ldr	r3, [pc, #364]	; (8019a8c <__ieee754_pow+0x3d4>)
 801991e:	4682      	mov	sl, r0
 8019920:	468b      	mov	fp, r1
 8019922:	2200      	movs	r2, #0
 8019924:	4620      	mov	r0, r4
 8019926:	4629      	mov	r1, r5
 8019928:	f7e6 fe76 	bl	8000618 <__aeabi_dmul>
 801992c:	4602      	mov	r2, r0
 801992e:	460b      	mov	r3, r1
 8019930:	a14d      	add	r1, pc, #308	; (adr r1, 8019a68 <__ieee754_pow+0x3b0>)
 8019932:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019936:	f7e6 fcb7 	bl	80002a8 <__aeabi_dsub>
 801993a:	4622      	mov	r2, r4
 801993c:	462b      	mov	r3, r5
 801993e:	f7e6 fe6b 	bl	8000618 <__aeabi_dmul>
 8019942:	4602      	mov	r2, r0
 8019944:	460b      	mov	r3, r1
 8019946:	2000      	movs	r0, #0
 8019948:	4951      	ldr	r1, [pc, #324]	; (8019a90 <__ieee754_pow+0x3d8>)
 801994a:	f7e6 fcad 	bl	80002a8 <__aeabi_dsub>
 801994e:	4622      	mov	r2, r4
 8019950:	4680      	mov	r8, r0
 8019952:	4689      	mov	r9, r1
 8019954:	462b      	mov	r3, r5
 8019956:	4620      	mov	r0, r4
 8019958:	4629      	mov	r1, r5
 801995a:	f7e6 fe5d 	bl	8000618 <__aeabi_dmul>
 801995e:	4602      	mov	r2, r0
 8019960:	460b      	mov	r3, r1
 8019962:	4640      	mov	r0, r8
 8019964:	4649      	mov	r1, r9
 8019966:	f7e6 fe57 	bl	8000618 <__aeabi_dmul>
 801996a:	a341      	add	r3, pc, #260	; (adr r3, 8019a70 <__ieee754_pow+0x3b8>)
 801996c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019970:	f7e6 fe52 	bl	8000618 <__aeabi_dmul>
 8019974:	4602      	mov	r2, r0
 8019976:	460b      	mov	r3, r1
 8019978:	4650      	mov	r0, sl
 801997a:	4659      	mov	r1, fp
 801997c:	f7e6 fc94 	bl	80002a8 <__aeabi_dsub>
 8019980:	4602      	mov	r2, r0
 8019982:	460b      	mov	r3, r1
 8019984:	4680      	mov	r8, r0
 8019986:	4689      	mov	r9, r1
 8019988:	4630      	mov	r0, r6
 801998a:	4639      	mov	r1, r7
 801998c:	f7e6 fc8e 	bl	80002ac <__adddf3>
 8019990:	2400      	movs	r4, #0
 8019992:	4632      	mov	r2, r6
 8019994:	463b      	mov	r3, r7
 8019996:	4620      	mov	r0, r4
 8019998:	460d      	mov	r5, r1
 801999a:	f7e6 fc85 	bl	80002a8 <__aeabi_dsub>
 801999e:	4602      	mov	r2, r0
 80199a0:	460b      	mov	r3, r1
 80199a2:	4640      	mov	r0, r8
 80199a4:	4649      	mov	r1, r9
 80199a6:	f7e6 fc7f 	bl	80002a8 <__aeabi_dsub>
 80199aa:	9b00      	ldr	r3, [sp, #0]
 80199ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80199ae:	3b01      	subs	r3, #1
 80199b0:	4313      	orrs	r3, r2
 80199b2:	4682      	mov	sl, r0
 80199b4:	468b      	mov	fp, r1
 80199b6:	f040 81f1 	bne.w	8019d9c <__ieee754_pow+0x6e4>
 80199ba:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8019a78 <__ieee754_pow+0x3c0>
 80199be:	eeb0 8a47 	vmov.f32	s16, s14
 80199c2:	eef0 8a67 	vmov.f32	s17, s15
 80199c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80199ca:	2600      	movs	r6, #0
 80199cc:	4632      	mov	r2, r6
 80199ce:	463b      	mov	r3, r7
 80199d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80199d4:	f7e6 fc68 	bl	80002a8 <__aeabi_dsub>
 80199d8:	4622      	mov	r2, r4
 80199da:	462b      	mov	r3, r5
 80199dc:	f7e6 fe1c 	bl	8000618 <__aeabi_dmul>
 80199e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80199e4:	4680      	mov	r8, r0
 80199e6:	4689      	mov	r9, r1
 80199e8:	4650      	mov	r0, sl
 80199ea:	4659      	mov	r1, fp
 80199ec:	f7e6 fe14 	bl	8000618 <__aeabi_dmul>
 80199f0:	4602      	mov	r2, r0
 80199f2:	460b      	mov	r3, r1
 80199f4:	4640      	mov	r0, r8
 80199f6:	4649      	mov	r1, r9
 80199f8:	f7e6 fc58 	bl	80002ac <__adddf3>
 80199fc:	4632      	mov	r2, r6
 80199fe:	463b      	mov	r3, r7
 8019a00:	4680      	mov	r8, r0
 8019a02:	4689      	mov	r9, r1
 8019a04:	4620      	mov	r0, r4
 8019a06:	4629      	mov	r1, r5
 8019a08:	f7e6 fe06 	bl	8000618 <__aeabi_dmul>
 8019a0c:	460b      	mov	r3, r1
 8019a0e:	4604      	mov	r4, r0
 8019a10:	460d      	mov	r5, r1
 8019a12:	4602      	mov	r2, r0
 8019a14:	4649      	mov	r1, r9
 8019a16:	4640      	mov	r0, r8
 8019a18:	f7e6 fc48 	bl	80002ac <__adddf3>
 8019a1c:	4b1d      	ldr	r3, [pc, #116]	; (8019a94 <__ieee754_pow+0x3dc>)
 8019a1e:	4299      	cmp	r1, r3
 8019a20:	ec45 4b19 	vmov	d9, r4, r5
 8019a24:	4606      	mov	r6, r0
 8019a26:	460f      	mov	r7, r1
 8019a28:	468b      	mov	fp, r1
 8019a2a:	f340 82fe 	ble.w	801a02a <__ieee754_pow+0x972>
 8019a2e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8019a32:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8019a36:	4303      	orrs	r3, r0
 8019a38:	f000 81f0 	beq.w	8019e1c <__ieee754_pow+0x764>
 8019a3c:	a310      	add	r3, pc, #64	; (adr r3, 8019a80 <__ieee754_pow+0x3c8>)
 8019a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a42:	ec51 0b18 	vmov	r0, r1, d8
 8019a46:	f7e6 fde7 	bl	8000618 <__aeabi_dmul>
 8019a4a:	a30d      	add	r3, pc, #52	; (adr r3, 8019a80 <__ieee754_pow+0x3c8>)
 8019a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a50:	e6cb      	b.n	80197ea <__ieee754_pow+0x132>
 8019a52:	bf00      	nop
 8019a54:	f3af 8000 	nop.w
 8019a58:	60000000 	.word	0x60000000
 8019a5c:	3ff71547 	.word	0x3ff71547
 8019a60:	f85ddf44 	.word	0xf85ddf44
 8019a64:	3e54ae0b 	.word	0x3e54ae0b
 8019a68:	55555555 	.word	0x55555555
 8019a6c:	3fd55555 	.word	0x3fd55555
 8019a70:	652b82fe 	.word	0x652b82fe
 8019a74:	3ff71547 	.word	0x3ff71547
 8019a78:	00000000 	.word	0x00000000
 8019a7c:	bff00000 	.word	0xbff00000
 8019a80:	8800759c 	.word	0x8800759c
 8019a84:	7e37e43c 	.word	0x7e37e43c
 8019a88:	3ff00000 	.word	0x3ff00000
 8019a8c:	3fd00000 	.word	0x3fd00000
 8019a90:	3fe00000 	.word	0x3fe00000
 8019a94:	408fffff 	.word	0x408fffff
 8019a98:	4bd7      	ldr	r3, [pc, #860]	; (8019df8 <__ieee754_pow+0x740>)
 8019a9a:	ea03 0309 	and.w	r3, r3, r9
 8019a9e:	2200      	movs	r2, #0
 8019aa0:	b92b      	cbnz	r3, 8019aae <__ieee754_pow+0x3f6>
 8019aa2:	4bd6      	ldr	r3, [pc, #856]	; (8019dfc <__ieee754_pow+0x744>)
 8019aa4:	f7e6 fdb8 	bl	8000618 <__aeabi_dmul>
 8019aa8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8019aac:	460c      	mov	r4, r1
 8019aae:	1523      	asrs	r3, r4, #20
 8019ab0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019ab4:	4413      	add	r3, r2
 8019ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8019ab8:	4bd1      	ldr	r3, [pc, #836]	; (8019e00 <__ieee754_pow+0x748>)
 8019aba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8019abe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8019ac2:	429c      	cmp	r4, r3
 8019ac4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8019ac8:	dd08      	ble.n	8019adc <__ieee754_pow+0x424>
 8019aca:	4bce      	ldr	r3, [pc, #824]	; (8019e04 <__ieee754_pow+0x74c>)
 8019acc:	429c      	cmp	r4, r3
 8019ace:	f340 8163 	ble.w	8019d98 <__ieee754_pow+0x6e0>
 8019ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ad4:	3301      	adds	r3, #1
 8019ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8019ad8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8019adc:	2400      	movs	r4, #0
 8019ade:	00e3      	lsls	r3, r4, #3
 8019ae0:	930b      	str	r3, [sp, #44]	; 0x2c
 8019ae2:	4bc9      	ldr	r3, [pc, #804]	; (8019e08 <__ieee754_pow+0x750>)
 8019ae4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019ae8:	ed93 7b00 	vldr	d7, [r3]
 8019aec:	4629      	mov	r1, r5
 8019aee:	ec53 2b17 	vmov	r2, r3, d7
 8019af2:	eeb0 8a47 	vmov.f32	s16, s14
 8019af6:	eef0 8a67 	vmov.f32	s17, s15
 8019afa:	4682      	mov	sl, r0
 8019afc:	f7e6 fbd4 	bl	80002a8 <__aeabi_dsub>
 8019b00:	4652      	mov	r2, sl
 8019b02:	4606      	mov	r6, r0
 8019b04:	460f      	mov	r7, r1
 8019b06:	462b      	mov	r3, r5
 8019b08:	ec51 0b18 	vmov	r0, r1, d8
 8019b0c:	f7e6 fbce 	bl	80002ac <__adddf3>
 8019b10:	4602      	mov	r2, r0
 8019b12:	460b      	mov	r3, r1
 8019b14:	2000      	movs	r0, #0
 8019b16:	49bd      	ldr	r1, [pc, #756]	; (8019e0c <__ieee754_pow+0x754>)
 8019b18:	f7e6 fea8 	bl	800086c <__aeabi_ddiv>
 8019b1c:	ec41 0b19 	vmov	d9, r0, r1
 8019b20:	4602      	mov	r2, r0
 8019b22:	460b      	mov	r3, r1
 8019b24:	4630      	mov	r0, r6
 8019b26:	4639      	mov	r1, r7
 8019b28:	f7e6 fd76 	bl	8000618 <__aeabi_dmul>
 8019b2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019b30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019b34:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8019b38:	2300      	movs	r3, #0
 8019b3a:	9304      	str	r3, [sp, #16]
 8019b3c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8019b40:	46ab      	mov	fp, r5
 8019b42:	106d      	asrs	r5, r5, #1
 8019b44:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8019b48:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8019b4c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8019b50:	2200      	movs	r2, #0
 8019b52:	4640      	mov	r0, r8
 8019b54:	4649      	mov	r1, r9
 8019b56:	4614      	mov	r4, r2
 8019b58:	461d      	mov	r5, r3
 8019b5a:	f7e6 fd5d 	bl	8000618 <__aeabi_dmul>
 8019b5e:	4602      	mov	r2, r0
 8019b60:	460b      	mov	r3, r1
 8019b62:	4630      	mov	r0, r6
 8019b64:	4639      	mov	r1, r7
 8019b66:	f7e6 fb9f 	bl	80002a8 <__aeabi_dsub>
 8019b6a:	ec53 2b18 	vmov	r2, r3, d8
 8019b6e:	4606      	mov	r6, r0
 8019b70:	460f      	mov	r7, r1
 8019b72:	4620      	mov	r0, r4
 8019b74:	4629      	mov	r1, r5
 8019b76:	f7e6 fb97 	bl	80002a8 <__aeabi_dsub>
 8019b7a:	4602      	mov	r2, r0
 8019b7c:	460b      	mov	r3, r1
 8019b7e:	4650      	mov	r0, sl
 8019b80:	4659      	mov	r1, fp
 8019b82:	f7e6 fb91 	bl	80002a8 <__aeabi_dsub>
 8019b86:	4642      	mov	r2, r8
 8019b88:	464b      	mov	r3, r9
 8019b8a:	f7e6 fd45 	bl	8000618 <__aeabi_dmul>
 8019b8e:	4602      	mov	r2, r0
 8019b90:	460b      	mov	r3, r1
 8019b92:	4630      	mov	r0, r6
 8019b94:	4639      	mov	r1, r7
 8019b96:	f7e6 fb87 	bl	80002a8 <__aeabi_dsub>
 8019b9a:	ec53 2b19 	vmov	r2, r3, d9
 8019b9e:	f7e6 fd3b 	bl	8000618 <__aeabi_dmul>
 8019ba2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019ba6:	ec41 0b18 	vmov	d8, r0, r1
 8019baa:	4610      	mov	r0, r2
 8019bac:	4619      	mov	r1, r3
 8019bae:	f7e6 fd33 	bl	8000618 <__aeabi_dmul>
 8019bb2:	a37d      	add	r3, pc, #500	; (adr r3, 8019da8 <__ieee754_pow+0x6f0>)
 8019bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bb8:	4604      	mov	r4, r0
 8019bba:	460d      	mov	r5, r1
 8019bbc:	f7e6 fd2c 	bl	8000618 <__aeabi_dmul>
 8019bc0:	a37b      	add	r3, pc, #492	; (adr r3, 8019db0 <__ieee754_pow+0x6f8>)
 8019bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bc6:	f7e6 fb71 	bl	80002ac <__adddf3>
 8019bca:	4622      	mov	r2, r4
 8019bcc:	462b      	mov	r3, r5
 8019bce:	f7e6 fd23 	bl	8000618 <__aeabi_dmul>
 8019bd2:	a379      	add	r3, pc, #484	; (adr r3, 8019db8 <__ieee754_pow+0x700>)
 8019bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bd8:	f7e6 fb68 	bl	80002ac <__adddf3>
 8019bdc:	4622      	mov	r2, r4
 8019bde:	462b      	mov	r3, r5
 8019be0:	f7e6 fd1a 	bl	8000618 <__aeabi_dmul>
 8019be4:	a376      	add	r3, pc, #472	; (adr r3, 8019dc0 <__ieee754_pow+0x708>)
 8019be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bea:	f7e6 fb5f 	bl	80002ac <__adddf3>
 8019bee:	4622      	mov	r2, r4
 8019bf0:	462b      	mov	r3, r5
 8019bf2:	f7e6 fd11 	bl	8000618 <__aeabi_dmul>
 8019bf6:	a374      	add	r3, pc, #464	; (adr r3, 8019dc8 <__ieee754_pow+0x710>)
 8019bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bfc:	f7e6 fb56 	bl	80002ac <__adddf3>
 8019c00:	4622      	mov	r2, r4
 8019c02:	462b      	mov	r3, r5
 8019c04:	f7e6 fd08 	bl	8000618 <__aeabi_dmul>
 8019c08:	a371      	add	r3, pc, #452	; (adr r3, 8019dd0 <__ieee754_pow+0x718>)
 8019c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c0e:	f7e6 fb4d 	bl	80002ac <__adddf3>
 8019c12:	4622      	mov	r2, r4
 8019c14:	4606      	mov	r6, r0
 8019c16:	460f      	mov	r7, r1
 8019c18:	462b      	mov	r3, r5
 8019c1a:	4620      	mov	r0, r4
 8019c1c:	4629      	mov	r1, r5
 8019c1e:	f7e6 fcfb 	bl	8000618 <__aeabi_dmul>
 8019c22:	4602      	mov	r2, r0
 8019c24:	460b      	mov	r3, r1
 8019c26:	4630      	mov	r0, r6
 8019c28:	4639      	mov	r1, r7
 8019c2a:	f7e6 fcf5 	bl	8000618 <__aeabi_dmul>
 8019c2e:	4642      	mov	r2, r8
 8019c30:	4604      	mov	r4, r0
 8019c32:	460d      	mov	r5, r1
 8019c34:	464b      	mov	r3, r9
 8019c36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019c3a:	f7e6 fb37 	bl	80002ac <__adddf3>
 8019c3e:	ec53 2b18 	vmov	r2, r3, d8
 8019c42:	f7e6 fce9 	bl	8000618 <__aeabi_dmul>
 8019c46:	4622      	mov	r2, r4
 8019c48:	462b      	mov	r3, r5
 8019c4a:	f7e6 fb2f 	bl	80002ac <__adddf3>
 8019c4e:	4642      	mov	r2, r8
 8019c50:	4682      	mov	sl, r0
 8019c52:	468b      	mov	fp, r1
 8019c54:	464b      	mov	r3, r9
 8019c56:	4640      	mov	r0, r8
 8019c58:	4649      	mov	r1, r9
 8019c5a:	f7e6 fcdd 	bl	8000618 <__aeabi_dmul>
 8019c5e:	4b6c      	ldr	r3, [pc, #432]	; (8019e10 <__ieee754_pow+0x758>)
 8019c60:	2200      	movs	r2, #0
 8019c62:	4606      	mov	r6, r0
 8019c64:	460f      	mov	r7, r1
 8019c66:	f7e6 fb21 	bl	80002ac <__adddf3>
 8019c6a:	4652      	mov	r2, sl
 8019c6c:	465b      	mov	r3, fp
 8019c6e:	f7e6 fb1d 	bl	80002ac <__adddf3>
 8019c72:	9c04      	ldr	r4, [sp, #16]
 8019c74:	460d      	mov	r5, r1
 8019c76:	4622      	mov	r2, r4
 8019c78:	460b      	mov	r3, r1
 8019c7a:	4640      	mov	r0, r8
 8019c7c:	4649      	mov	r1, r9
 8019c7e:	f7e6 fccb 	bl	8000618 <__aeabi_dmul>
 8019c82:	4b63      	ldr	r3, [pc, #396]	; (8019e10 <__ieee754_pow+0x758>)
 8019c84:	4680      	mov	r8, r0
 8019c86:	4689      	mov	r9, r1
 8019c88:	2200      	movs	r2, #0
 8019c8a:	4620      	mov	r0, r4
 8019c8c:	4629      	mov	r1, r5
 8019c8e:	f7e6 fb0b 	bl	80002a8 <__aeabi_dsub>
 8019c92:	4632      	mov	r2, r6
 8019c94:	463b      	mov	r3, r7
 8019c96:	f7e6 fb07 	bl	80002a8 <__aeabi_dsub>
 8019c9a:	4602      	mov	r2, r0
 8019c9c:	460b      	mov	r3, r1
 8019c9e:	4650      	mov	r0, sl
 8019ca0:	4659      	mov	r1, fp
 8019ca2:	f7e6 fb01 	bl	80002a8 <__aeabi_dsub>
 8019ca6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019caa:	f7e6 fcb5 	bl	8000618 <__aeabi_dmul>
 8019cae:	4622      	mov	r2, r4
 8019cb0:	4606      	mov	r6, r0
 8019cb2:	460f      	mov	r7, r1
 8019cb4:	462b      	mov	r3, r5
 8019cb6:	ec51 0b18 	vmov	r0, r1, d8
 8019cba:	f7e6 fcad 	bl	8000618 <__aeabi_dmul>
 8019cbe:	4602      	mov	r2, r0
 8019cc0:	460b      	mov	r3, r1
 8019cc2:	4630      	mov	r0, r6
 8019cc4:	4639      	mov	r1, r7
 8019cc6:	f7e6 faf1 	bl	80002ac <__adddf3>
 8019cca:	4606      	mov	r6, r0
 8019ccc:	460f      	mov	r7, r1
 8019cce:	4602      	mov	r2, r0
 8019cd0:	460b      	mov	r3, r1
 8019cd2:	4640      	mov	r0, r8
 8019cd4:	4649      	mov	r1, r9
 8019cd6:	f7e6 fae9 	bl	80002ac <__adddf3>
 8019cda:	9c04      	ldr	r4, [sp, #16]
 8019cdc:	a33e      	add	r3, pc, #248	; (adr r3, 8019dd8 <__ieee754_pow+0x720>)
 8019cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ce2:	4620      	mov	r0, r4
 8019ce4:	460d      	mov	r5, r1
 8019ce6:	f7e6 fc97 	bl	8000618 <__aeabi_dmul>
 8019cea:	4642      	mov	r2, r8
 8019cec:	ec41 0b18 	vmov	d8, r0, r1
 8019cf0:	464b      	mov	r3, r9
 8019cf2:	4620      	mov	r0, r4
 8019cf4:	4629      	mov	r1, r5
 8019cf6:	f7e6 fad7 	bl	80002a8 <__aeabi_dsub>
 8019cfa:	4602      	mov	r2, r0
 8019cfc:	460b      	mov	r3, r1
 8019cfe:	4630      	mov	r0, r6
 8019d00:	4639      	mov	r1, r7
 8019d02:	f7e6 fad1 	bl	80002a8 <__aeabi_dsub>
 8019d06:	a336      	add	r3, pc, #216	; (adr r3, 8019de0 <__ieee754_pow+0x728>)
 8019d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d0c:	f7e6 fc84 	bl	8000618 <__aeabi_dmul>
 8019d10:	a335      	add	r3, pc, #212	; (adr r3, 8019de8 <__ieee754_pow+0x730>)
 8019d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d16:	4606      	mov	r6, r0
 8019d18:	460f      	mov	r7, r1
 8019d1a:	4620      	mov	r0, r4
 8019d1c:	4629      	mov	r1, r5
 8019d1e:	f7e6 fc7b 	bl	8000618 <__aeabi_dmul>
 8019d22:	4602      	mov	r2, r0
 8019d24:	460b      	mov	r3, r1
 8019d26:	4630      	mov	r0, r6
 8019d28:	4639      	mov	r1, r7
 8019d2a:	f7e6 fabf 	bl	80002ac <__adddf3>
 8019d2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019d30:	4b38      	ldr	r3, [pc, #224]	; (8019e14 <__ieee754_pow+0x75c>)
 8019d32:	4413      	add	r3, r2
 8019d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d38:	f7e6 fab8 	bl	80002ac <__adddf3>
 8019d3c:	4682      	mov	sl, r0
 8019d3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019d40:	468b      	mov	fp, r1
 8019d42:	f7e6 fbff 	bl	8000544 <__aeabi_i2d>
 8019d46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019d48:	4b33      	ldr	r3, [pc, #204]	; (8019e18 <__ieee754_pow+0x760>)
 8019d4a:	4413      	add	r3, r2
 8019d4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019d50:	4606      	mov	r6, r0
 8019d52:	460f      	mov	r7, r1
 8019d54:	4652      	mov	r2, sl
 8019d56:	465b      	mov	r3, fp
 8019d58:	ec51 0b18 	vmov	r0, r1, d8
 8019d5c:	f7e6 faa6 	bl	80002ac <__adddf3>
 8019d60:	4642      	mov	r2, r8
 8019d62:	464b      	mov	r3, r9
 8019d64:	f7e6 faa2 	bl	80002ac <__adddf3>
 8019d68:	4632      	mov	r2, r6
 8019d6a:	463b      	mov	r3, r7
 8019d6c:	f7e6 fa9e 	bl	80002ac <__adddf3>
 8019d70:	9c04      	ldr	r4, [sp, #16]
 8019d72:	4632      	mov	r2, r6
 8019d74:	463b      	mov	r3, r7
 8019d76:	4620      	mov	r0, r4
 8019d78:	460d      	mov	r5, r1
 8019d7a:	f7e6 fa95 	bl	80002a8 <__aeabi_dsub>
 8019d7e:	4642      	mov	r2, r8
 8019d80:	464b      	mov	r3, r9
 8019d82:	f7e6 fa91 	bl	80002a8 <__aeabi_dsub>
 8019d86:	ec53 2b18 	vmov	r2, r3, d8
 8019d8a:	f7e6 fa8d 	bl	80002a8 <__aeabi_dsub>
 8019d8e:	4602      	mov	r2, r0
 8019d90:	460b      	mov	r3, r1
 8019d92:	4650      	mov	r0, sl
 8019d94:	4659      	mov	r1, fp
 8019d96:	e606      	b.n	80199a6 <__ieee754_pow+0x2ee>
 8019d98:	2401      	movs	r4, #1
 8019d9a:	e6a0      	b.n	8019ade <__ieee754_pow+0x426>
 8019d9c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8019df0 <__ieee754_pow+0x738>
 8019da0:	e60d      	b.n	80199be <__ieee754_pow+0x306>
 8019da2:	bf00      	nop
 8019da4:	f3af 8000 	nop.w
 8019da8:	4a454eef 	.word	0x4a454eef
 8019dac:	3fca7e28 	.word	0x3fca7e28
 8019db0:	93c9db65 	.word	0x93c9db65
 8019db4:	3fcd864a 	.word	0x3fcd864a
 8019db8:	a91d4101 	.word	0xa91d4101
 8019dbc:	3fd17460 	.word	0x3fd17460
 8019dc0:	518f264d 	.word	0x518f264d
 8019dc4:	3fd55555 	.word	0x3fd55555
 8019dc8:	db6fabff 	.word	0xdb6fabff
 8019dcc:	3fdb6db6 	.word	0x3fdb6db6
 8019dd0:	33333303 	.word	0x33333303
 8019dd4:	3fe33333 	.word	0x3fe33333
 8019dd8:	e0000000 	.word	0xe0000000
 8019ddc:	3feec709 	.word	0x3feec709
 8019de0:	dc3a03fd 	.word	0xdc3a03fd
 8019de4:	3feec709 	.word	0x3feec709
 8019de8:	145b01f5 	.word	0x145b01f5
 8019dec:	be3e2fe0 	.word	0xbe3e2fe0
 8019df0:	00000000 	.word	0x00000000
 8019df4:	3ff00000 	.word	0x3ff00000
 8019df8:	7ff00000 	.word	0x7ff00000
 8019dfc:	43400000 	.word	0x43400000
 8019e00:	0003988e 	.word	0x0003988e
 8019e04:	000bb679 	.word	0x000bb679
 8019e08:	080216c8 	.word	0x080216c8
 8019e0c:	3ff00000 	.word	0x3ff00000
 8019e10:	40080000 	.word	0x40080000
 8019e14:	080216e8 	.word	0x080216e8
 8019e18:	080216d8 	.word	0x080216d8
 8019e1c:	a3b5      	add	r3, pc, #724	; (adr r3, 801a0f4 <__ieee754_pow+0xa3c>)
 8019e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e22:	4640      	mov	r0, r8
 8019e24:	4649      	mov	r1, r9
 8019e26:	f7e6 fa41 	bl	80002ac <__adddf3>
 8019e2a:	4622      	mov	r2, r4
 8019e2c:	ec41 0b1a 	vmov	d10, r0, r1
 8019e30:	462b      	mov	r3, r5
 8019e32:	4630      	mov	r0, r6
 8019e34:	4639      	mov	r1, r7
 8019e36:	f7e6 fa37 	bl	80002a8 <__aeabi_dsub>
 8019e3a:	4602      	mov	r2, r0
 8019e3c:	460b      	mov	r3, r1
 8019e3e:	ec51 0b1a 	vmov	r0, r1, d10
 8019e42:	f7e6 fe79 	bl	8000b38 <__aeabi_dcmpgt>
 8019e46:	2800      	cmp	r0, #0
 8019e48:	f47f adf8 	bne.w	8019a3c <__ieee754_pow+0x384>
 8019e4c:	4aa4      	ldr	r2, [pc, #656]	; (801a0e0 <__ieee754_pow+0xa28>)
 8019e4e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8019e52:	4293      	cmp	r3, r2
 8019e54:	f340 810b 	ble.w	801a06e <__ieee754_pow+0x9b6>
 8019e58:	151b      	asrs	r3, r3, #20
 8019e5a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8019e5e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8019e62:	fa4a f303 	asr.w	r3, sl, r3
 8019e66:	445b      	add	r3, fp
 8019e68:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8019e6c:	4e9d      	ldr	r6, [pc, #628]	; (801a0e4 <__ieee754_pow+0xa2c>)
 8019e6e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8019e72:	4116      	asrs	r6, r2
 8019e74:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8019e78:	2000      	movs	r0, #0
 8019e7a:	ea23 0106 	bic.w	r1, r3, r6
 8019e7e:	f1c2 0214 	rsb	r2, r2, #20
 8019e82:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8019e86:	fa4a fa02 	asr.w	sl, sl, r2
 8019e8a:	f1bb 0f00 	cmp.w	fp, #0
 8019e8e:	4602      	mov	r2, r0
 8019e90:	460b      	mov	r3, r1
 8019e92:	4620      	mov	r0, r4
 8019e94:	4629      	mov	r1, r5
 8019e96:	bfb8      	it	lt
 8019e98:	f1ca 0a00 	rsblt	sl, sl, #0
 8019e9c:	f7e6 fa04 	bl	80002a8 <__aeabi_dsub>
 8019ea0:	ec41 0b19 	vmov	d9, r0, r1
 8019ea4:	4642      	mov	r2, r8
 8019ea6:	464b      	mov	r3, r9
 8019ea8:	ec51 0b19 	vmov	r0, r1, d9
 8019eac:	f7e6 f9fe 	bl	80002ac <__adddf3>
 8019eb0:	2400      	movs	r4, #0
 8019eb2:	a379      	add	r3, pc, #484	; (adr r3, 801a098 <__ieee754_pow+0x9e0>)
 8019eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019eb8:	4620      	mov	r0, r4
 8019eba:	460d      	mov	r5, r1
 8019ebc:	f7e6 fbac 	bl	8000618 <__aeabi_dmul>
 8019ec0:	ec53 2b19 	vmov	r2, r3, d9
 8019ec4:	4606      	mov	r6, r0
 8019ec6:	460f      	mov	r7, r1
 8019ec8:	4620      	mov	r0, r4
 8019eca:	4629      	mov	r1, r5
 8019ecc:	f7e6 f9ec 	bl	80002a8 <__aeabi_dsub>
 8019ed0:	4602      	mov	r2, r0
 8019ed2:	460b      	mov	r3, r1
 8019ed4:	4640      	mov	r0, r8
 8019ed6:	4649      	mov	r1, r9
 8019ed8:	f7e6 f9e6 	bl	80002a8 <__aeabi_dsub>
 8019edc:	a370      	add	r3, pc, #448	; (adr r3, 801a0a0 <__ieee754_pow+0x9e8>)
 8019ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ee2:	f7e6 fb99 	bl	8000618 <__aeabi_dmul>
 8019ee6:	a370      	add	r3, pc, #448	; (adr r3, 801a0a8 <__ieee754_pow+0x9f0>)
 8019ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019eec:	4680      	mov	r8, r0
 8019eee:	4689      	mov	r9, r1
 8019ef0:	4620      	mov	r0, r4
 8019ef2:	4629      	mov	r1, r5
 8019ef4:	f7e6 fb90 	bl	8000618 <__aeabi_dmul>
 8019ef8:	4602      	mov	r2, r0
 8019efa:	460b      	mov	r3, r1
 8019efc:	4640      	mov	r0, r8
 8019efe:	4649      	mov	r1, r9
 8019f00:	f7e6 f9d4 	bl	80002ac <__adddf3>
 8019f04:	4604      	mov	r4, r0
 8019f06:	460d      	mov	r5, r1
 8019f08:	4602      	mov	r2, r0
 8019f0a:	460b      	mov	r3, r1
 8019f0c:	4630      	mov	r0, r6
 8019f0e:	4639      	mov	r1, r7
 8019f10:	f7e6 f9cc 	bl	80002ac <__adddf3>
 8019f14:	4632      	mov	r2, r6
 8019f16:	463b      	mov	r3, r7
 8019f18:	4680      	mov	r8, r0
 8019f1a:	4689      	mov	r9, r1
 8019f1c:	f7e6 f9c4 	bl	80002a8 <__aeabi_dsub>
 8019f20:	4602      	mov	r2, r0
 8019f22:	460b      	mov	r3, r1
 8019f24:	4620      	mov	r0, r4
 8019f26:	4629      	mov	r1, r5
 8019f28:	f7e6 f9be 	bl	80002a8 <__aeabi_dsub>
 8019f2c:	4642      	mov	r2, r8
 8019f2e:	4606      	mov	r6, r0
 8019f30:	460f      	mov	r7, r1
 8019f32:	464b      	mov	r3, r9
 8019f34:	4640      	mov	r0, r8
 8019f36:	4649      	mov	r1, r9
 8019f38:	f7e6 fb6e 	bl	8000618 <__aeabi_dmul>
 8019f3c:	a35c      	add	r3, pc, #368	; (adr r3, 801a0b0 <__ieee754_pow+0x9f8>)
 8019f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f42:	4604      	mov	r4, r0
 8019f44:	460d      	mov	r5, r1
 8019f46:	f7e6 fb67 	bl	8000618 <__aeabi_dmul>
 8019f4a:	a35b      	add	r3, pc, #364	; (adr r3, 801a0b8 <__ieee754_pow+0xa00>)
 8019f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f50:	f7e6 f9aa 	bl	80002a8 <__aeabi_dsub>
 8019f54:	4622      	mov	r2, r4
 8019f56:	462b      	mov	r3, r5
 8019f58:	f7e6 fb5e 	bl	8000618 <__aeabi_dmul>
 8019f5c:	a358      	add	r3, pc, #352	; (adr r3, 801a0c0 <__ieee754_pow+0xa08>)
 8019f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f62:	f7e6 f9a3 	bl	80002ac <__adddf3>
 8019f66:	4622      	mov	r2, r4
 8019f68:	462b      	mov	r3, r5
 8019f6a:	f7e6 fb55 	bl	8000618 <__aeabi_dmul>
 8019f6e:	a356      	add	r3, pc, #344	; (adr r3, 801a0c8 <__ieee754_pow+0xa10>)
 8019f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f74:	f7e6 f998 	bl	80002a8 <__aeabi_dsub>
 8019f78:	4622      	mov	r2, r4
 8019f7a:	462b      	mov	r3, r5
 8019f7c:	f7e6 fb4c 	bl	8000618 <__aeabi_dmul>
 8019f80:	a353      	add	r3, pc, #332	; (adr r3, 801a0d0 <__ieee754_pow+0xa18>)
 8019f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f86:	f7e6 f991 	bl	80002ac <__adddf3>
 8019f8a:	4622      	mov	r2, r4
 8019f8c:	462b      	mov	r3, r5
 8019f8e:	f7e6 fb43 	bl	8000618 <__aeabi_dmul>
 8019f92:	4602      	mov	r2, r0
 8019f94:	460b      	mov	r3, r1
 8019f96:	4640      	mov	r0, r8
 8019f98:	4649      	mov	r1, r9
 8019f9a:	f7e6 f985 	bl	80002a8 <__aeabi_dsub>
 8019f9e:	4604      	mov	r4, r0
 8019fa0:	460d      	mov	r5, r1
 8019fa2:	4602      	mov	r2, r0
 8019fa4:	460b      	mov	r3, r1
 8019fa6:	4640      	mov	r0, r8
 8019fa8:	4649      	mov	r1, r9
 8019faa:	f7e6 fb35 	bl	8000618 <__aeabi_dmul>
 8019fae:	2200      	movs	r2, #0
 8019fb0:	ec41 0b19 	vmov	d9, r0, r1
 8019fb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019fb8:	4620      	mov	r0, r4
 8019fba:	4629      	mov	r1, r5
 8019fbc:	f7e6 f974 	bl	80002a8 <__aeabi_dsub>
 8019fc0:	4602      	mov	r2, r0
 8019fc2:	460b      	mov	r3, r1
 8019fc4:	ec51 0b19 	vmov	r0, r1, d9
 8019fc8:	f7e6 fc50 	bl	800086c <__aeabi_ddiv>
 8019fcc:	4632      	mov	r2, r6
 8019fce:	4604      	mov	r4, r0
 8019fd0:	460d      	mov	r5, r1
 8019fd2:	463b      	mov	r3, r7
 8019fd4:	4640      	mov	r0, r8
 8019fd6:	4649      	mov	r1, r9
 8019fd8:	f7e6 fb1e 	bl	8000618 <__aeabi_dmul>
 8019fdc:	4632      	mov	r2, r6
 8019fde:	463b      	mov	r3, r7
 8019fe0:	f7e6 f964 	bl	80002ac <__adddf3>
 8019fe4:	4602      	mov	r2, r0
 8019fe6:	460b      	mov	r3, r1
 8019fe8:	4620      	mov	r0, r4
 8019fea:	4629      	mov	r1, r5
 8019fec:	f7e6 f95c 	bl	80002a8 <__aeabi_dsub>
 8019ff0:	4642      	mov	r2, r8
 8019ff2:	464b      	mov	r3, r9
 8019ff4:	f7e6 f958 	bl	80002a8 <__aeabi_dsub>
 8019ff8:	460b      	mov	r3, r1
 8019ffa:	4602      	mov	r2, r0
 8019ffc:	493a      	ldr	r1, [pc, #232]	; (801a0e8 <__ieee754_pow+0xa30>)
 8019ffe:	2000      	movs	r0, #0
 801a000:	f7e6 f952 	bl	80002a8 <__aeabi_dsub>
 801a004:	e9cd 0100 	strd	r0, r1, [sp]
 801a008:	9b01      	ldr	r3, [sp, #4]
 801a00a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801a00e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a012:	da2f      	bge.n	801a074 <__ieee754_pow+0x9bc>
 801a014:	4650      	mov	r0, sl
 801a016:	ed9d 0b00 	vldr	d0, [sp]
 801a01a:	f000 f9cd 	bl	801a3b8 <scalbn>
 801a01e:	ec51 0b10 	vmov	r0, r1, d0
 801a022:	ec53 2b18 	vmov	r2, r3, d8
 801a026:	f7ff bbe0 	b.w	80197ea <__ieee754_pow+0x132>
 801a02a:	4b30      	ldr	r3, [pc, #192]	; (801a0ec <__ieee754_pow+0xa34>)
 801a02c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801a030:	429e      	cmp	r6, r3
 801a032:	f77f af0b 	ble.w	8019e4c <__ieee754_pow+0x794>
 801a036:	4b2e      	ldr	r3, [pc, #184]	; (801a0f0 <__ieee754_pow+0xa38>)
 801a038:	440b      	add	r3, r1
 801a03a:	4303      	orrs	r3, r0
 801a03c:	d00b      	beq.n	801a056 <__ieee754_pow+0x99e>
 801a03e:	a326      	add	r3, pc, #152	; (adr r3, 801a0d8 <__ieee754_pow+0xa20>)
 801a040:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a044:	ec51 0b18 	vmov	r0, r1, d8
 801a048:	f7e6 fae6 	bl	8000618 <__aeabi_dmul>
 801a04c:	a322      	add	r3, pc, #136	; (adr r3, 801a0d8 <__ieee754_pow+0xa20>)
 801a04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a052:	f7ff bbca 	b.w	80197ea <__ieee754_pow+0x132>
 801a056:	4622      	mov	r2, r4
 801a058:	462b      	mov	r3, r5
 801a05a:	f7e6 f925 	bl	80002a8 <__aeabi_dsub>
 801a05e:	4642      	mov	r2, r8
 801a060:	464b      	mov	r3, r9
 801a062:	f7e6 fd5f 	bl	8000b24 <__aeabi_dcmpge>
 801a066:	2800      	cmp	r0, #0
 801a068:	f43f aef0 	beq.w	8019e4c <__ieee754_pow+0x794>
 801a06c:	e7e7      	b.n	801a03e <__ieee754_pow+0x986>
 801a06e:	f04f 0a00 	mov.w	sl, #0
 801a072:	e717      	b.n	8019ea4 <__ieee754_pow+0x7ec>
 801a074:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a078:	4619      	mov	r1, r3
 801a07a:	e7d2      	b.n	801a022 <__ieee754_pow+0x96a>
 801a07c:	491a      	ldr	r1, [pc, #104]	; (801a0e8 <__ieee754_pow+0xa30>)
 801a07e:	2000      	movs	r0, #0
 801a080:	f7ff bb9e 	b.w	80197c0 <__ieee754_pow+0x108>
 801a084:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a088:	f7ff bb9a 	b.w	80197c0 <__ieee754_pow+0x108>
 801a08c:	9000      	str	r0, [sp, #0]
 801a08e:	f7ff bb76 	b.w	801977e <__ieee754_pow+0xc6>
 801a092:	2100      	movs	r1, #0
 801a094:	f7ff bb60 	b.w	8019758 <__ieee754_pow+0xa0>
 801a098:	00000000 	.word	0x00000000
 801a09c:	3fe62e43 	.word	0x3fe62e43
 801a0a0:	fefa39ef 	.word	0xfefa39ef
 801a0a4:	3fe62e42 	.word	0x3fe62e42
 801a0a8:	0ca86c39 	.word	0x0ca86c39
 801a0ac:	be205c61 	.word	0xbe205c61
 801a0b0:	72bea4d0 	.word	0x72bea4d0
 801a0b4:	3e663769 	.word	0x3e663769
 801a0b8:	c5d26bf1 	.word	0xc5d26bf1
 801a0bc:	3ebbbd41 	.word	0x3ebbbd41
 801a0c0:	af25de2c 	.word	0xaf25de2c
 801a0c4:	3f11566a 	.word	0x3f11566a
 801a0c8:	16bebd93 	.word	0x16bebd93
 801a0cc:	3f66c16c 	.word	0x3f66c16c
 801a0d0:	5555553e 	.word	0x5555553e
 801a0d4:	3fc55555 	.word	0x3fc55555
 801a0d8:	c2f8f359 	.word	0xc2f8f359
 801a0dc:	01a56e1f 	.word	0x01a56e1f
 801a0e0:	3fe00000 	.word	0x3fe00000
 801a0e4:	000fffff 	.word	0x000fffff
 801a0e8:	3ff00000 	.word	0x3ff00000
 801a0ec:	4090cbff 	.word	0x4090cbff
 801a0f0:	3f6f3400 	.word	0x3f6f3400
 801a0f4:	652b82fe 	.word	0x652b82fe
 801a0f8:	3c971547 	.word	0x3c971547

0801a0fc <__ieee754_sqrt>:
 801a0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a100:	ec55 4b10 	vmov	r4, r5, d0
 801a104:	4e56      	ldr	r6, [pc, #344]	; (801a260 <__ieee754_sqrt+0x164>)
 801a106:	43ae      	bics	r6, r5
 801a108:	ee10 0a10 	vmov	r0, s0
 801a10c:	ee10 3a10 	vmov	r3, s0
 801a110:	4629      	mov	r1, r5
 801a112:	462a      	mov	r2, r5
 801a114:	d110      	bne.n	801a138 <__ieee754_sqrt+0x3c>
 801a116:	ee10 2a10 	vmov	r2, s0
 801a11a:	462b      	mov	r3, r5
 801a11c:	f7e6 fa7c 	bl	8000618 <__aeabi_dmul>
 801a120:	4602      	mov	r2, r0
 801a122:	460b      	mov	r3, r1
 801a124:	4620      	mov	r0, r4
 801a126:	4629      	mov	r1, r5
 801a128:	f7e6 f8c0 	bl	80002ac <__adddf3>
 801a12c:	4604      	mov	r4, r0
 801a12e:	460d      	mov	r5, r1
 801a130:	ec45 4b10 	vmov	d0, r4, r5
 801a134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a138:	2d00      	cmp	r5, #0
 801a13a:	dc10      	bgt.n	801a15e <__ieee754_sqrt+0x62>
 801a13c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a140:	4330      	orrs	r0, r6
 801a142:	d0f5      	beq.n	801a130 <__ieee754_sqrt+0x34>
 801a144:	b15d      	cbz	r5, 801a15e <__ieee754_sqrt+0x62>
 801a146:	ee10 2a10 	vmov	r2, s0
 801a14a:	462b      	mov	r3, r5
 801a14c:	ee10 0a10 	vmov	r0, s0
 801a150:	f7e6 f8aa 	bl	80002a8 <__aeabi_dsub>
 801a154:	4602      	mov	r2, r0
 801a156:	460b      	mov	r3, r1
 801a158:	f7e6 fb88 	bl	800086c <__aeabi_ddiv>
 801a15c:	e7e6      	b.n	801a12c <__ieee754_sqrt+0x30>
 801a15e:	1509      	asrs	r1, r1, #20
 801a160:	d076      	beq.n	801a250 <__ieee754_sqrt+0x154>
 801a162:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801a166:	07ce      	lsls	r6, r1, #31
 801a168:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801a16c:	bf5e      	ittt	pl
 801a16e:	0fda      	lsrpl	r2, r3, #31
 801a170:	005b      	lslpl	r3, r3, #1
 801a172:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801a176:	0fda      	lsrs	r2, r3, #31
 801a178:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801a17c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801a180:	2000      	movs	r0, #0
 801a182:	106d      	asrs	r5, r5, #1
 801a184:	005b      	lsls	r3, r3, #1
 801a186:	f04f 0e16 	mov.w	lr, #22
 801a18a:	4684      	mov	ip, r0
 801a18c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801a190:	eb0c 0401 	add.w	r4, ip, r1
 801a194:	4294      	cmp	r4, r2
 801a196:	bfde      	ittt	le
 801a198:	1b12      	suble	r2, r2, r4
 801a19a:	eb04 0c01 	addle.w	ip, r4, r1
 801a19e:	1840      	addle	r0, r0, r1
 801a1a0:	0052      	lsls	r2, r2, #1
 801a1a2:	f1be 0e01 	subs.w	lr, lr, #1
 801a1a6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801a1aa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801a1ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a1b2:	d1ed      	bne.n	801a190 <__ieee754_sqrt+0x94>
 801a1b4:	4671      	mov	r1, lr
 801a1b6:	2720      	movs	r7, #32
 801a1b8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801a1bc:	4562      	cmp	r2, ip
 801a1be:	eb04 060e 	add.w	r6, r4, lr
 801a1c2:	dc02      	bgt.n	801a1ca <__ieee754_sqrt+0xce>
 801a1c4:	d113      	bne.n	801a1ee <__ieee754_sqrt+0xf2>
 801a1c6:	429e      	cmp	r6, r3
 801a1c8:	d811      	bhi.n	801a1ee <__ieee754_sqrt+0xf2>
 801a1ca:	2e00      	cmp	r6, #0
 801a1cc:	eb06 0e04 	add.w	lr, r6, r4
 801a1d0:	da43      	bge.n	801a25a <__ieee754_sqrt+0x15e>
 801a1d2:	f1be 0f00 	cmp.w	lr, #0
 801a1d6:	db40      	blt.n	801a25a <__ieee754_sqrt+0x15e>
 801a1d8:	f10c 0801 	add.w	r8, ip, #1
 801a1dc:	eba2 020c 	sub.w	r2, r2, ip
 801a1e0:	429e      	cmp	r6, r3
 801a1e2:	bf88      	it	hi
 801a1e4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801a1e8:	1b9b      	subs	r3, r3, r6
 801a1ea:	4421      	add	r1, r4
 801a1ec:	46c4      	mov	ip, r8
 801a1ee:	0052      	lsls	r2, r2, #1
 801a1f0:	3f01      	subs	r7, #1
 801a1f2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801a1f6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801a1fa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a1fe:	d1dd      	bne.n	801a1bc <__ieee754_sqrt+0xc0>
 801a200:	4313      	orrs	r3, r2
 801a202:	d006      	beq.n	801a212 <__ieee754_sqrt+0x116>
 801a204:	1c4c      	adds	r4, r1, #1
 801a206:	bf13      	iteet	ne
 801a208:	3101      	addne	r1, #1
 801a20a:	3001      	addeq	r0, #1
 801a20c:	4639      	moveq	r1, r7
 801a20e:	f021 0101 	bicne.w	r1, r1, #1
 801a212:	1043      	asrs	r3, r0, #1
 801a214:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801a218:	0849      	lsrs	r1, r1, #1
 801a21a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801a21e:	07c2      	lsls	r2, r0, #31
 801a220:	bf48      	it	mi
 801a222:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801a226:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801a22a:	460c      	mov	r4, r1
 801a22c:	463d      	mov	r5, r7
 801a22e:	e77f      	b.n	801a130 <__ieee754_sqrt+0x34>
 801a230:	0ada      	lsrs	r2, r3, #11
 801a232:	3815      	subs	r0, #21
 801a234:	055b      	lsls	r3, r3, #21
 801a236:	2a00      	cmp	r2, #0
 801a238:	d0fa      	beq.n	801a230 <__ieee754_sqrt+0x134>
 801a23a:	02d7      	lsls	r7, r2, #11
 801a23c:	d50a      	bpl.n	801a254 <__ieee754_sqrt+0x158>
 801a23e:	f1c1 0420 	rsb	r4, r1, #32
 801a242:	fa23 f404 	lsr.w	r4, r3, r4
 801a246:	1e4d      	subs	r5, r1, #1
 801a248:	408b      	lsls	r3, r1
 801a24a:	4322      	orrs	r2, r4
 801a24c:	1b41      	subs	r1, r0, r5
 801a24e:	e788      	b.n	801a162 <__ieee754_sqrt+0x66>
 801a250:	4608      	mov	r0, r1
 801a252:	e7f0      	b.n	801a236 <__ieee754_sqrt+0x13a>
 801a254:	0052      	lsls	r2, r2, #1
 801a256:	3101      	adds	r1, #1
 801a258:	e7ef      	b.n	801a23a <__ieee754_sqrt+0x13e>
 801a25a:	46e0      	mov	r8, ip
 801a25c:	e7be      	b.n	801a1dc <__ieee754_sqrt+0xe0>
 801a25e:	bf00      	nop
 801a260:	7ff00000 	.word	0x7ff00000

0801a264 <fabs>:
 801a264:	ec51 0b10 	vmov	r0, r1, d0
 801a268:	ee10 2a10 	vmov	r2, s0
 801a26c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a270:	ec43 2b10 	vmov	d0, r2, r3
 801a274:	4770      	bx	lr

0801a276 <finite>:
 801a276:	b082      	sub	sp, #8
 801a278:	ed8d 0b00 	vstr	d0, [sp]
 801a27c:	9801      	ldr	r0, [sp, #4]
 801a27e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801a282:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801a286:	0fc0      	lsrs	r0, r0, #31
 801a288:	b002      	add	sp, #8
 801a28a:	4770      	bx	lr
 801a28c:	0000      	movs	r0, r0
	...

0801a290 <nan>:
 801a290:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a298 <nan+0x8>
 801a294:	4770      	bx	lr
 801a296:	bf00      	nop
 801a298:	00000000 	.word	0x00000000
 801a29c:	7ff80000 	.word	0x7ff80000

0801a2a0 <rint>:
 801a2a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a2a2:	ec51 0b10 	vmov	r0, r1, d0
 801a2a6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801a2aa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801a2ae:	2e13      	cmp	r6, #19
 801a2b0:	ee10 4a10 	vmov	r4, s0
 801a2b4:	460b      	mov	r3, r1
 801a2b6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801a2ba:	dc58      	bgt.n	801a36e <rint+0xce>
 801a2bc:	2e00      	cmp	r6, #0
 801a2be:	da2b      	bge.n	801a318 <rint+0x78>
 801a2c0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801a2c4:	4302      	orrs	r2, r0
 801a2c6:	d023      	beq.n	801a310 <rint+0x70>
 801a2c8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801a2cc:	4302      	orrs	r2, r0
 801a2ce:	4254      	negs	r4, r2
 801a2d0:	4314      	orrs	r4, r2
 801a2d2:	0c4b      	lsrs	r3, r1, #17
 801a2d4:	0b24      	lsrs	r4, r4, #12
 801a2d6:	045b      	lsls	r3, r3, #17
 801a2d8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801a2dc:	ea44 0103 	orr.w	r1, r4, r3
 801a2e0:	4b32      	ldr	r3, [pc, #200]	; (801a3ac <rint+0x10c>)
 801a2e2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a2e6:	e9d3 6700 	ldrd	r6, r7, [r3]
 801a2ea:	4602      	mov	r2, r0
 801a2ec:	460b      	mov	r3, r1
 801a2ee:	4630      	mov	r0, r6
 801a2f0:	4639      	mov	r1, r7
 801a2f2:	f7e5 ffdb 	bl	80002ac <__adddf3>
 801a2f6:	e9cd 0100 	strd	r0, r1, [sp]
 801a2fa:	463b      	mov	r3, r7
 801a2fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a300:	4632      	mov	r2, r6
 801a302:	f7e5 ffd1 	bl	80002a8 <__aeabi_dsub>
 801a306:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a30a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801a30e:	4639      	mov	r1, r7
 801a310:	ec41 0b10 	vmov	d0, r0, r1
 801a314:	b003      	add	sp, #12
 801a316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a318:	4a25      	ldr	r2, [pc, #148]	; (801a3b0 <rint+0x110>)
 801a31a:	4132      	asrs	r2, r6
 801a31c:	ea01 0702 	and.w	r7, r1, r2
 801a320:	4307      	orrs	r7, r0
 801a322:	d0f5      	beq.n	801a310 <rint+0x70>
 801a324:	0851      	lsrs	r1, r2, #1
 801a326:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801a32a:	4314      	orrs	r4, r2
 801a32c:	d00c      	beq.n	801a348 <rint+0xa8>
 801a32e:	ea23 0201 	bic.w	r2, r3, r1
 801a332:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801a336:	2e13      	cmp	r6, #19
 801a338:	fa43 f606 	asr.w	r6, r3, r6
 801a33c:	bf0c      	ite	eq
 801a33e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801a342:	2400      	movne	r4, #0
 801a344:	ea42 0306 	orr.w	r3, r2, r6
 801a348:	4918      	ldr	r1, [pc, #96]	; (801a3ac <rint+0x10c>)
 801a34a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801a34e:	4622      	mov	r2, r4
 801a350:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a354:	4620      	mov	r0, r4
 801a356:	4629      	mov	r1, r5
 801a358:	f7e5 ffa8 	bl	80002ac <__adddf3>
 801a35c:	e9cd 0100 	strd	r0, r1, [sp]
 801a360:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a364:	4622      	mov	r2, r4
 801a366:	462b      	mov	r3, r5
 801a368:	f7e5 ff9e 	bl	80002a8 <__aeabi_dsub>
 801a36c:	e7d0      	b.n	801a310 <rint+0x70>
 801a36e:	2e33      	cmp	r6, #51	; 0x33
 801a370:	dd07      	ble.n	801a382 <rint+0xe2>
 801a372:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801a376:	d1cb      	bne.n	801a310 <rint+0x70>
 801a378:	ee10 2a10 	vmov	r2, s0
 801a37c:	f7e5 ff96 	bl	80002ac <__adddf3>
 801a380:	e7c6      	b.n	801a310 <rint+0x70>
 801a382:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801a386:	f04f 36ff 	mov.w	r6, #4294967295
 801a38a:	40d6      	lsrs	r6, r2
 801a38c:	4230      	tst	r0, r6
 801a38e:	d0bf      	beq.n	801a310 <rint+0x70>
 801a390:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 801a394:	ea4f 0156 	mov.w	r1, r6, lsr #1
 801a398:	bf1f      	itttt	ne
 801a39a:	ea24 0101 	bicne.w	r1, r4, r1
 801a39e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801a3a2:	fa44 f202 	asrne.w	r2, r4, r2
 801a3a6:	ea41 0402 	orrne.w	r4, r1, r2
 801a3aa:	e7cd      	b.n	801a348 <rint+0xa8>
 801a3ac:	080216f8 	.word	0x080216f8
 801a3b0:	000fffff 	.word	0x000fffff
 801a3b4:	00000000 	.word	0x00000000

0801a3b8 <scalbn>:
 801a3b8:	b570      	push	{r4, r5, r6, lr}
 801a3ba:	ec55 4b10 	vmov	r4, r5, d0
 801a3be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801a3c2:	4606      	mov	r6, r0
 801a3c4:	462b      	mov	r3, r5
 801a3c6:	b99a      	cbnz	r2, 801a3f0 <scalbn+0x38>
 801a3c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a3cc:	4323      	orrs	r3, r4
 801a3ce:	d036      	beq.n	801a43e <scalbn+0x86>
 801a3d0:	4b39      	ldr	r3, [pc, #228]	; (801a4b8 <scalbn+0x100>)
 801a3d2:	4629      	mov	r1, r5
 801a3d4:	ee10 0a10 	vmov	r0, s0
 801a3d8:	2200      	movs	r2, #0
 801a3da:	f7e6 f91d 	bl	8000618 <__aeabi_dmul>
 801a3de:	4b37      	ldr	r3, [pc, #220]	; (801a4bc <scalbn+0x104>)
 801a3e0:	429e      	cmp	r6, r3
 801a3e2:	4604      	mov	r4, r0
 801a3e4:	460d      	mov	r5, r1
 801a3e6:	da10      	bge.n	801a40a <scalbn+0x52>
 801a3e8:	a32b      	add	r3, pc, #172	; (adr r3, 801a498 <scalbn+0xe0>)
 801a3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3ee:	e03a      	b.n	801a466 <scalbn+0xae>
 801a3f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801a3f4:	428a      	cmp	r2, r1
 801a3f6:	d10c      	bne.n	801a412 <scalbn+0x5a>
 801a3f8:	ee10 2a10 	vmov	r2, s0
 801a3fc:	4620      	mov	r0, r4
 801a3fe:	4629      	mov	r1, r5
 801a400:	f7e5 ff54 	bl	80002ac <__adddf3>
 801a404:	4604      	mov	r4, r0
 801a406:	460d      	mov	r5, r1
 801a408:	e019      	b.n	801a43e <scalbn+0x86>
 801a40a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801a40e:	460b      	mov	r3, r1
 801a410:	3a36      	subs	r2, #54	; 0x36
 801a412:	4432      	add	r2, r6
 801a414:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801a418:	428a      	cmp	r2, r1
 801a41a:	dd08      	ble.n	801a42e <scalbn+0x76>
 801a41c:	2d00      	cmp	r5, #0
 801a41e:	a120      	add	r1, pc, #128	; (adr r1, 801a4a0 <scalbn+0xe8>)
 801a420:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a424:	da1c      	bge.n	801a460 <scalbn+0xa8>
 801a426:	a120      	add	r1, pc, #128	; (adr r1, 801a4a8 <scalbn+0xf0>)
 801a428:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a42c:	e018      	b.n	801a460 <scalbn+0xa8>
 801a42e:	2a00      	cmp	r2, #0
 801a430:	dd08      	ble.n	801a444 <scalbn+0x8c>
 801a432:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a436:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a43a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801a43e:	ec45 4b10 	vmov	d0, r4, r5
 801a442:	bd70      	pop	{r4, r5, r6, pc}
 801a444:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801a448:	da19      	bge.n	801a47e <scalbn+0xc6>
 801a44a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801a44e:	429e      	cmp	r6, r3
 801a450:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801a454:	dd0a      	ble.n	801a46c <scalbn+0xb4>
 801a456:	a112      	add	r1, pc, #72	; (adr r1, 801a4a0 <scalbn+0xe8>)
 801a458:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a45c:	2b00      	cmp	r3, #0
 801a45e:	d1e2      	bne.n	801a426 <scalbn+0x6e>
 801a460:	a30f      	add	r3, pc, #60	; (adr r3, 801a4a0 <scalbn+0xe8>)
 801a462:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a466:	f7e6 f8d7 	bl	8000618 <__aeabi_dmul>
 801a46a:	e7cb      	b.n	801a404 <scalbn+0x4c>
 801a46c:	a10a      	add	r1, pc, #40	; (adr r1, 801a498 <scalbn+0xe0>)
 801a46e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a472:	2b00      	cmp	r3, #0
 801a474:	d0b8      	beq.n	801a3e8 <scalbn+0x30>
 801a476:	a10e      	add	r1, pc, #56	; (adr r1, 801a4b0 <scalbn+0xf8>)
 801a478:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a47c:	e7b4      	b.n	801a3e8 <scalbn+0x30>
 801a47e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a482:	3236      	adds	r2, #54	; 0x36
 801a484:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a488:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801a48c:	4620      	mov	r0, r4
 801a48e:	4b0c      	ldr	r3, [pc, #48]	; (801a4c0 <scalbn+0x108>)
 801a490:	2200      	movs	r2, #0
 801a492:	e7e8      	b.n	801a466 <scalbn+0xae>
 801a494:	f3af 8000 	nop.w
 801a498:	c2f8f359 	.word	0xc2f8f359
 801a49c:	01a56e1f 	.word	0x01a56e1f
 801a4a0:	8800759c 	.word	0x8800759c
 801a4a4:	7e37e43c 	.word	0x7e37e43c
 801a4a8:	8800759c 	.word	0x8800759c
 801a4ac:	fe37e43c 	.word	0xfe37e43c
 801a4b0:	c2f8f359 	.word	0xc2f8f359
 801a4b4:	81a56e1f 	.word	0x81a56e1f
 801a4b8:	43500000 	.word	0x43500000
 801a4bc:	ffff3cb0 	.word	0xffff3cb0
 801a4c0:	3c900000 	.word	0x3c900000

0801a4c4 <abort>:
 801a4c4:	b508      	push	{r3, lr}
 801a4c6:	2006      	movs	r0, #6
 801a4c8:	f001 f9ba 	bl	801b840 <raise>
 801a4cc:	2001      	movs	r0, #1
 801a4ce:	f7e8 fe47 	bl	8003160 <_exit>
	...

0801a4d4 <__errno>:
 801a4d4:	4b01      	ldr	r3, [pc, #4]	; (801a4dc <__errno+0x8>)
 801a4d6:	6818      	ldr	r0, [r3, #0]
 801a4d8:	4770      	bx	lr
 801a4da:	bf00      	nop
 801a4dc:	200001f8 	.word	0x200001f8

0801a4e0 <std>:
 801a4e0:	2300      	movs	r3, #0
 801a4e2:	b510      	push	{r4, lr}
 801a4e4:	4604      	mov	r4, r0
 801a4e6:	e9c0 3300 	strd	r3, r3, [r0]
 801a4ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a4ee:	6083      	str	r3, [r0, #8]
 801a4f0:	8181      	strh	r1, [r0, #12]
 801a4f2:	6643      	str	r3, [r0, #100]	; 0x64
 801a4f4:	81c2      	strh	r2, [r0, #14]
 801a4f6:	6183      	str	r3, [r0, #24]
 801a4f8:	4619      	mov	r1, r3
 801a4fa:	2208      	movs	r2, #8
 801a4fc:	305c      	adds	r0, #92	; 0x5c
 801a4fe:	f000 f93d 	bl	801a77c <memset>
 801a502:	4b05      	ldr	r3, [pc, #20]	; (801a518 <std+0x38>)
 801a504:	6263      	str	r3, [r4, #36]	; 0x24
 801a506:	4b05      	ldr	r3, [pc, #20]	; (801a51c <std+0x3c>)
 801a508:	62a3      	str	r3, [r4, #40]	; 0x28
 801a50a:	4b05      	ldr	r3, [pc, #20]	; (801a520 <std+0x40>)
 801a50c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a50e:	4b05      	ldr	r3, [pc, #20]	; (801a524 <std+0x44>)
 801a510:	6224      	str	r4, [r4, #32]
 801a512:	6323      	str	r3, [r4, #48]	; 0x30
 801a514:	bd10      	pop	{r4, pc}
 801a516:	bf00      	nop
 801a518:	0801b911 	.word	0x0801b911
 801a51c:	0801b937 	.word	0x0801b937
 801a520:	0801b96f 	.word	0x0801b96f
 801a524:	0801b993 	.word	0x0801b993

0801a528 <_cleanup_r>:
 801a528:	4901      	ldr	r1, [pc, #4]	; (801a530 <_cleanup_r+0x8>)
 801a52a:	f000 b8af 	b.w	801a68c <_fwalk_reent>
 801a52e:	bf00      	nop
 801a530:	0801d8cd 	.word	0x0801d8cd

0801a534 <__sfmoreglue>:
 801a534:	b570      	push	{r4, r5, r6, lr}
 801a536:	1e4a      	subs	r2, r1, #1
 801a538:	2568      	movs	r5, #104	; 0x68
 801a53a:	4355      	muls	r5, r2
 801a53c:	460e      	mov	r6, r1
 801a53e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a542:	f000 f973 	bl	801a82c <_malloc_r>
 801a546:	4604      	mov	r4, r0
 801a548:	b140      	cbz	r0, 801a55c <__sfmoreglue+0x28>
 801a54a:	2100      	movs	r1, #0
 801a54c:	e9c0 1600 	strd	r1, r6, [r0]
 801a550:	300c      	adds	r0, #12
 801a552:	60a0      	str	r0, [r4, #8]
 801a554:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a558:	f000 f910 	bl	801a77c <memset>
 801a55c:	4620      	mov	r0, r4
 801a55e:	bd70      	pop	{r4, r5, r6, pc}

0801a560 <__sfp_lock_acquire>:
 801a560:	4801      	ldr	r0, [pc, #4]	; (801a568 <__sfp_lock_acquire+0x8>)
 801a562:	f000 b8d8 	b.w	801a716 <__retarget_lock_acquire_recursive>
 801a566:	bf00      	nop
 801a568:	20008fac 	.word	0x20008fac

0801a56c <__sfp_lock_release>:
 801a56c:	4801      	ldr	r0, [pc, #4]	; (801a574 <__sfp_lock_release+0x8>)
 801a56e:	f000 b8d3 	b.w	801a718 <__retarget_lock_release_recursive>
 801a572:	bf00      	nop
 801a574:	20008fac 	.word	0x20008fac

0801a578 <__sinit_lock_acquire>:
 801a578:	4801      	ldr	r0, [pc, #4]	; (801a580 <__sinit_lock_acquire+0x8>)
 801a57a:	f000 b8cc 	b.w	801a716 <__retarget_lock_acquire_recursive>
 801a57e:	bf00      	nop
 801a580:	20008fa7 	.word	0x20008fa7

0801a584 <__sinit_lock_release>:
 801a584:	4801      	ldr	r0, [pc, #4]	; (801a58c <__sinit_lock_release+0x8>)
 801a586:	f000 b8c7 	b.w	801a718 <__retarget_lock_release_recursive>
 801a58a:	bf00      	nop
 801a58c:	20008fa7 	.word	0x20008fa7

0801a590 <__sinit>:
 801a590:	b510      	push	{r4, lr}
 801a592:	4604      	mov	r4, r0
 801a594:	f7ff fff0 	bl	801a578 <__sinit_lock_acquire>
 801a598:	69a3      	ldr	r3, [r4, #24]
 801a59a:	b11b      	cbz	r3, 801a5a4 <__sinit+0x14>
 801a59c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a5a0:	f7ff bff0 	b.w	801a584 <__sinit_lock_release>
 801a5a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a5a8:	6523      	str	r3, [r4, #80]	; 0x50
 801a5aa:	4b13      	ldr	r3, [pc, #76]	; (801a5f8 <__sinit+0x68>)
 801a5ac:	4a13      	ldr	r2, [pc, #76]	; (801a5fc <__sinit+0x6c>)
 801a5ae:	681b      	ldr	r3, [r3, #0]
 801a5b0:	62a2      	str	r2, [r4, #40]	; 0x28
 801a5b2:	42a3      	cmp	r3, r4
 801a5b4:	bf04      	itt	eq
 801a5b6:	2301      	moveq	r3, #1
 801a5b8:	61a3      	streq	r3, [r4, #24]
 801a5ba:	4620      	mov	r0, r4
 801a5bc:	f000 f820 	bl	801a600 <__sfp>
 801a5c0:	6060      	str	r0, [r4, #4]
 801a5c2:	4620      	mov	r0, r4
 801a5c4:	f000 f81c 	bl	801a600 <__sfp>
 801a5c8:	60a0      	str	r0, [r4, #8]
 801a5ca:	4620      	mov	r0, r4
 801a5cc:	f000 f818 	bl	801a600 <__sfp>
 801a5d0:	2200      	movs	r2, #0
 801a5d2:	60e0      	str	r0, [r4, #12]
 801a5d4:	2104      	movs	r1, #4
 801a5d6:	6860      	ldr	r0, [r4, #4]
 801a5d8:	f7ff ff82 	bl	801a4e0 <std>
 801a5dc:	68a0      	ldr	r0, [r4, #8]
 801a5de:	2201      	movs	r2, #1
 801a5e0:	2109      	movs	r1, #9
 801a5e2:	f7ff ff7d 	bl	801a4e0 <std>
 801a5e6:	68e0      	ldr	r0, [r4, #12]
 801a5e8:	2202      	movs	r2, #2
 801a5ea:	2112      	movs	r1, #18
 801a5ec:	f7ff ff78 	bl	801a4e0 <std>
 801a5f0:	2301      	movs	r3, #1
 801a5f2:	61a3      	str	r3, [r4, #24]
 801a5f4:	e7d2      	b.n	801a59c <__sinit+0xc>
 801a5f6:	bf00      	nop
 801a5f8:	0802186c 	.word	0x0802186c
 801a5fc:	0801a529 	.word	0x0801a529

0801a600 <__sfp>:
 801a600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a602:	4607      	mov	r7, r0
 801a604:	f7ff ffac 	bl	801a560 <__sfp_lock_acquire>
 801a608:	4b1e      	ldr	r3, [pc, #120]	; (801a684 <__sfp+0x84>)
 801a60a:	681e      	ldr	r6, [r3, #0]
 801a60c:	69b3      	ldr	r3, [r6, #24]
 801a60e:	b913      	cbnz	r3, 801a616 <__sfp+0x16>
 801a610:	4630      	mov	r0, r6
 801a612:	f7ff ffbd 	bl	801a590 <__sinit>
 801a616:	3648      	adds	r6, #72	; 0x48
 801a618:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a61c:	3b01      	subs	r3, #1
 801a61e:	d503      	bpl.n	801a628 <__sfp+0x28>
 801a620:	6833      	ldr	r3, [r6, #0]
 801a622:	b30b      	cbz	r3, 801a668 <__sfp+0x68>
 801a624:	6836      	ldr	r6, [r6, #0]
 801a626:	e7f7      	b.n	801a618 <__sfp+0x18>
 801a628:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a62c:	b9d5      	cbnz	r5, 801a664 <__sfp+0x64>
 801a62e:	4b16      	ldr	r3, [pc, #88]	; (801a688 <__sfp+0x88>)
 801a630:	60e3      	str	r3, [r4, #12]
 801a632:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a636:	6665      	str	r5, [r4, #100]	; 0x64
 801a638:	f000 f86c 	bl	801a714 <__retarget_lock_init_recursive>
 801a63c:	f7ff ff96 	bl	801a56c <__sfp_lock_release>
 801a640:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a644:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a648:	6025      	str	r5, [r4, #0]
 801a64a:	61a5      	str	r5, [r4, #24]
 801a64c:	2208      	movs	r2, #8
 801a64e:	4629      	mov	r1, r5
 801a650:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a654:	f000 f892 	bl	801a77c <memset>
 801a658:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a65c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a660:	4620      	mov	r0, r4
 801a662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a664:	3468      	adds	r4, #104	; 0x68
 801a666:	e7d9      	b.n	801a61c <__sfp+0x1c>
 801a668:	2104      	movs	r1, #4
 801a66a:	4638      	mov	r0, r7
 801a66c:	f7ff ff62 	bl	801a534 <__sfmoreglue>
 801a670:	4604      	mov	r4, r0
 801a672:	6030      	str	r0, [r6, #0]
 801a674:	2800      	cmp	r0, #0
 801a676:	d1d5      	bne.n	801a624 <__sfp+0x24>
 801a678:	f7ff ff78 	bl	801a56c <__sfp_lock_release>
 801a67c:	230c      	movs	r3, #12
 801a67e:	603b      	str	r3, [r7, #0]
 801a680:	e7ee      	b.n	801a660 <__sfp+0x60>
 801a682:	bf00      	nop
 801a684:	0802186c 	.word	0x0802186c
 801a688:	ffff0001 	.word	0xffff0001

0801a68c <_fwalk_reent>:
 801a68c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a690:	4606      	mov	r6, r0
 801a692:	4688      	mov	r8, r1
 801a694:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a698:	2700      	movs	r7, #0
 801a69a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a69e:	f1b9 0901 	subs.w	r9, r9, #1
 801a6a2:	d505      	bpl.n	801a6b0 <_fwalk_reent+0x24>
 801a6a4:	6824      	ldr	r4, [r4, #0]
 801a6a6:	2c00      	cmp	r4, #0
 801a6a8:	d1f7      	bne.n	801a69a <_fwalk_reent+0xe>
 801a6aa:	4638      	mov	r0, r7
 801a6ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a6b0:	89ab      	ldrh	r3, [r5, #12]
 801a6b2:	2b01      	cmp	r3, #1
 801a6b4:	d907      	bls.n	801a6c6 <_fwalk_reent+0x3a>
 801a6b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a6ba:	3301      	adds	r3, #1
 801a6bc:	d003      	beq.n	801a6c6 <_fwalk_reent+0x3a>
 801a6be:	4629      	mov	r1, r5
 801a6c0:	4630      	mov	r0, r6
 801a6c2:	47c0      	blx	r8
 801a6c4:	4307      	orrs	r7, r0
 801a6c6:	3568      	adds	r5, #104	; 0x68
 801a6c8:	e7e9      	b.n	801a69e <_fwalk_reent+0x12>
	...

0801a6cc <__libc_init_array>:
 801a6cc:	b570      	push	{r4, r5, r6, lr}
 801a6ce:	4d0d      	ldr	r5, [pc, #52]	; (801a704 <__libc_init_array+0x38>)
 801a6d0:	4c0d      	ldr	r4, [pc, #52]	; (801a708 <__libc_init_array+0x3c>)
 801a6d2:	1b64      	subs	r4, r4, r5
 801a6d4:	10a4      	asrs	r4, r4, #2
 801a6d6:	2600      	movs	r6, #0
 801a6d8:	42a6      	cmp	r6, r4
 801a6da:	d109      	bne.n	801a6f0 <__libc_init_array+0x24>
 801a6dc:	4d0b      	ldr	r5, [pc, #44]	; (801a70c <__libc_init_array+0x40>)
 801a6de:	4c0c      	ldr	r4, [pc, #48]	; (801a710 <__libc_init_array+0x44>)
 801a6e0:	f005 f8cc 	bl	801f87c <_init>
 801a6e4:	1b64      	subs	r4, r4, r5
 801a6e6:	10a4      	asrs	r4, r4, #2
 801a6e8:	2600      	movs	r6, #0
 801a6ea:	42a6      	cmp	r6, r4
 801a6ec:	d105      	bne.n	801a6fa <__libc_init_array+0x2e>
 801a6ee:	bd70      	pop	{r4, r5, r6, pc}
 801a6f0:	f855 3b04 	ldr.w	r3, [r5], #4
 801a6f4:	4798      	blx	r3
 801a6f6:	3601      	adds	r6, #1
 801a6f8:	e7ee      	b.n	801a6d8 <__libc_init_array+0xc>
 801a6fa:	f855 3b04 	ldr.w	r3, [r5], #4
 801a6fe:	4798      	blx	r3
 801a700:	3601      	adds	r6, #1
 801a702:	e7f2      	b.n	801a6ea <__libc_init_array+0x1e>
 801a704:	08021bd8 	.word	0x08021bd8
 801a708:	08021bd8 	.word	0x08021bd8
 801a70c:	08021bd8 	.word	0x08021bd8
 801a710:	08021be0 	.word	0x08021be0

0801a714 <__retarget_lock_init_recursive>:
 801a714:	4770      	bx	lr

0801a716 <__retarget_lock_acquire_recursive>:
 801a716:	4770      	bx	lr

0801a718 <__retarget_lock_release_recursive>:
 801a718:	4770      	bx	lr
	...

0801a71c <malloc>:
 801a71c:	4b02      	ldr	r3, [pc, #8]	; (801a728 <malloc+0xc>)
 801a71e:	4601      	mov	r1, r0
 801a720:	6818      	ldr	r0, [r3, #0]
 801a722:	f000 b883 	b.w	801a82c <_malloc_r>
 801a726:	bf00      	nop
 801a728:	200001f8 	.word	0x200001f8

0801a72c <memcpy>:
 801a72c:	440a      	add	r2, r1
 801a72e:	4291      	cmp	r1, r2
 801a730:	f100 33ff 	add.w	r3, r0, #4294967295
 801a734:	d100      	bne.n	801a738 <memcpy+0xc>
 801a736:	4770      	bx	lr
 801a738:	b510      	push	{r4, lr}
 801a73a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a73e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a742:	4291      	cmp	r1, r2
 801a744:	d1f9      	bne.n	801a73a <memcpy+0xe>
 801a746:	bd10      	pop	{r4, pc}

0801a748 <memmove>:
 801a748:	4288      	cmp	r0, r1
 801a74a:	b510      	push	{r4, lr}
 801a74c:	eb01 0402 	add.w	r4, r1, r2
 801a750:	d902      	bls.n	801a758 <memmove+0x10>
 801a752:	4284      	cmp	r4, r0
 801a754:	4623      	mov	r3, r4
 801a756:	d807      	bhi.n	801a768 <memmove+0x20>
 801a758:	1e43      	subs	r3, r0, #1
 801a75a:	42a1      	cmp	r1, r4
 801a75c:	d008      	beq.n	801a770 <memmove+0x28>
 801a75e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a762:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a766:	e7f8      	b.n	801a75a <memmove+0x12>
 801a768:	4402      	add	r2, r0
 801a76a:	4601      	mov	r1, r0
 801a76c:	428a      	cmp	r2, r1
 801a76e:	d100      	bne.n	801a772 <memmove+0x2a>
 801a770:	bd10      	pop	{r4, pc}
 801a772:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a776:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a77a:	e7f7      	b.n	801a76c <memmove+0x24>

0801a77c <memset>:
 801a77c:	4402      	add	r2, r0
 801a77e:	4603      	mov	r3, r0
 801a780:	4293      	cmp	r3, r2
 801a782:	d100      	bne.n	801a786 <memset+0xa>
 801a784:	4770      	bx	lr
 801a786:	f803 1b01 	strb.w	r1, [r3], #1
 801a78a:	e7f9      	b.n	801a780 <memset+0x4>

0801a78c <_free_r>:
 801a78c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a78e:	2900      	cmp	r1, #0
 801a790:	d048      	beq.n	801a824 <_free_r+0x98>
 801a792:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a796:	9001      	str	r0, [sp, #4]
 801a798:	2b00      	cmp	r3, #0
 801a79a:	f1a1 0404 	sub.w	r4, r1, #4
 801a79e:	bfb8      	it	lt
 801a7a0:	18e4      	addlt	r4, r4, r3
 801a7a2:	f003 fcdd 	bl	801e160 <__malloc_lock>
 801a7a6:	4a20      	ldr	r2, [pc, #128]	; (801a828 <_free_r+0x9c>)
 801a7a8:	9801      	ldr	r0, [sp, #4]
 801a7aa:	6813      	ldr	r3, [r2, #0]
 801a7ac:	4615      	mov	r5, r2
 801a7ae:	b933      	cbnz	r3, 801a7be <_free_r+0x32>
 801a7b0:	6063      	str	r3, [r4, #4]
 801a7b2:	6014      	str	r4, [r2, #0]
 801a7b4:	b003      	add	sp, #12
 801a7b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a7ba:	f003 bcd7 	b.w	801e16c <__malloc_unlock>
 801a7be:	42a3      	cmp	r3, r4
 801a7c0:	d90b      	bls.n	801a7da <_free_r+0x4e>
 801a7c2:	6821      	ldr	r1, [r4, #0]
 801a7c4:	1862      	adds	r2, r4, r1
 801a7c6:	4293      	cmp	r3, r2
 801a7c8:	bf04      	itt	eq
 801a7ca:	681a      	ldreq	r2, [r3, #0]
 801a7cc:	685b      	ldreq	r3, [r3, #4]
 801a7ce:	6063      	str	r3, [r4, #4]
 801a7d0:	bf04      	itt	eq
 801a7d2:	1852      	addeq	r2, r2, r1
 801a7d4:	6022      	streq	r2, [r4, #0]
 801a7d6:	602c      	str	r4, [r5, #0]
 801a7d8:	e7ec      	b.n	801a7b4 <_free_r+0x28>
 801a7da:	461a      	mov	r2, r3
 801a7dc:	685b      	ldr	r3, [r3, #4]
 801a7de:	b10b      	cbz	r3, 801a7e4 <_free_r+0x58>
 801a7e0:	42a3      	cmp	r3, r4
 801a7e2:	d9fa      	bls.n	801a7da <_free_r+0x4e>
 801a7e4:	6811      	ldr	r1, [r2, #0]
 801a7e6:	1855      	adds	r5, r2, r1
 801a7e8:	42a5      	cmp	r5, r4
 801a7ea:	d10b      	bne.n	801a804 <_free_r+0x78>
 801a7ec:	6824      	ldr	r4, [r4, #0]
 801a7ee:	4421      	add	r1, r4
 801a7f0:	1854      	adds	r4, r2, r1
 801a7f2:	42a3      	cmp	r3, r4
 801a7f4:	6011      	str	r1, [r2, #0]
 801a7f6:	d1dd      	bne.n	801a7b4 <_free_r+0x28>
 801a7f8:	681c      	ldr	r4, [r3, #0]
 801a7fa:	685b      	ldr	r3, [r3, #4]
 801a7fc:	6053      	str	r3, [r2, #4]
 801a7fe:	4421      	add	r1, r4
 801a800:	6011      	str	r1, [r2, #0]
 801a802:	e7d7      	b.n	801a7b4 <_free_r+0x28>
 801a804:	d902      	bls.n	801a80c <_free_r+0x80>
 801a806:	230c      	movs	r3, #12
 801a808:	6003      	str	r3, [r0, #0]
 801a80a:	e7d3      	b.n	801a7b4 <_free_r+0x28>
 801a80c:	6825      	ldr	r5, [r4, #0]
 801a80e:	1961      	adds	r1, r4, r5
 801a810:	428b      	cmp	r3, r1
 801a812:	bf04      	itt	eq
 801a814:	6819      	ldreq	r1, [r3, #0]
 801a816:	685b      	ldreq	r3, [r3, #4]
 801a818:	6063      	str	r3, [r4, #4]
 801a81a:	bf04      	itt	eq
 801a81c:	1949      	addeq	r1, r1, r5
 801a81e:	6021      	streq	r1, [r4, #0]
 801a820:	6054      	str	r4, [r2, #4]
 801a822:	e7c7      	b.n	801a7b4 <_free_r+0x28>
 801a824:	b003      	add	sp, #12
 801a826:	bd30      	pop	{r4, r5, pc}
 801a828:	20005ebc 	.word	0x20005ebc

0801a82c <_malloc_r>:
 801a82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a82e:	1ccd      	adds	r5, r1, #3
 801a830:	f025 0503 	bic.w	r5, r5, #3
 801a834:	3508      	adds	r5, #8
 801a836:	2d0c      	cmp	r5, #12
 801a838:	bf38      	it	cc
 801a83a:	250c      	movcc	r5, #12
 801a83c:	2d00      	cmp	r5, #0
 801a83e:	4606      	mov	r6, r0
 801a840:	db01      	blt.n	801a846 <_malloc_r+0x1a>
 801a842:	42a9      	cmp	r1, r5
 801a844:	d903      	bls.n	801a84e <_malloc_r+0x22>
 801a846:	230c      	movs	r3, #12
 801a848:	6033      	str	r3, [r6, #0]
 801a84a:	2000      	movs	r0, #0
 801a84c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a84e:	f003 fc87 	bl	801e160 <__malloc_lock>
 801a852:	4921      	ldr	r1, [pc, #132]	; (801a8d8 <_malloc_r+0xac>)
 801a854:	680a      	ldr	r2, [r1, #0]
 801a856:	4614      	mov	r4, r2
 801a858:	b99c      	cbnz	r4, 801a882 <_malloc_r+0x56>
 801a85a:	4f20      	ldr	r7, [pc, #128]	; (801a8dc <_malloc_r+0xb0>)
 801a85c:	683b      	ldr	r3, [r7, #0]
 801a85e:	b923      	cbnz	r3, 801a86a <_malloc_r+0x3e>
 801a860:	4621      	mov	r1, r4
 801a862:	4630      	mov	r0, r6
 801a864:	f000 ffae 	bl	801b7c4 <_sbrk_r>
 801a868:	6038      	str	r0, [r7, #0]
 801a86a:	4629      	mov	r1, r5
 801a86c:	4630      	mov	r0, r6
 801a86e:	f000 ffa9 	bl	801b7c4 <_sbrk_r>
 801a872:	1c43      	adds	r3, r0, #1
 801a874:	d123      	bne.n	801a8be <_malloc_r+0x92>
 801a876:	230c      	movs	r3, #12
 801a878:	6033      	str	r3, [r6, #0]
 801a87a:	4630      	mov	r0, r6
 801a87c:	f003 fc76 	bl	801e16c <__malloc_unlock>
 801a880:	e7e3      	b.n	801a84a <_malloc_r+0x1e>
 801a882:	6823      	ldr	r3, [r4, #0]
 801a884:	1b5b      	subs	r3, r3, r5
 801a886:	d417      	bmi.n	801a8b8 <_malloc_r+0x8c>
 801a888:	2b0b      	cmp	r3, #11
 801a88a:	d903      	bls.n	801a894 <_malloc_r+0x68>
 801a88c:	6023      	str	r3, [r4, #0]
 801a88e:	441c      	add	r4, r3
 801a890:	6025      	str	r5, [r4, #0]
 801a892:	e004      	b.n	801a89e <_malloc_r+0x72>
 801a894:	6863      	ldr	r3, [r4, #4]
 801a896:	42a2      	cmp	r2, r4
 801a898:	bf0c      	ite	eq
 801a89a:	600b      	streq	r3, [r1, #0]
 801a89c:	6053      	strne	r3, [r2, #4]
 801a89e:	4630      	mov	r0, r6
 801a8a0:	f003 fc64 	bl	801e16c <__malloc_unlock>
 801a8a4:	f104 000b 	add.w	r0, r4, #11
 801a8a8:	1d23      	adds	r3, r4, #4
 801a8aa:	f020 0007 	bic.w	r0, r0, #7
 801a8ae:	1ac2      	subs	r2, r0, r3
 801a8b0:	d0cc      	beq.n	801a84c <_malloc_r+0x20>
 801a8b2:	1a1b      	subs	r3, r3, r0
 801a8b4:	50a3      	str	r3, [r4, r2]
 801a8b6:	e7c9      	b.n	801a84c <_malloc_r+0x20>
 801a8b8:	4622      	mov	r2, r4
 801a8ba:	6864      	ldr	r4, [r4, #4]
 801a8bc:	e7cc      	b.n	801a858 <_malloc_r+0x2c>
 801a8be:	1cc4      	adds	r4, r0, #3
 801a8c0:	f024 0403 	bic.w	r4, r4, #3
 801a8c4:	42a0      	cmp	r0, r4
 801a8c6:	d0e3      	beq.n	801a890 <_malloc_r+0x64>
 801a8c8:	1a21      	subs	r1, r4, r0
 801a8ca:	4630      	mov	r0, r6
 801a8cc:	f000 ff7a 	bl	801b7c4 <_sbrk_r>
 801a8d0:	3001      	adds	r0, #1
 801a8d2:	d1dd      	bne.n	801a890 <_malloc_r+0x64>
 801a8d4:	e7cf      	b.n	801a876 <_malloc_r+0x4a>
 801a8d6:	bf00      	nop
 801a8d8:	20005ebc 	.word	0x20005ebc
 801a8dc:	20005ec0 	.word	0x20005ec0

0801a8e0 <__cvt>:
 801a8e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a8e4:	ec55 4b10 	vmov	r4, r5, d0
 801a8e8:	2d00      	cmp	r5, #0
 801a8ea:	460e      	mov	r6, r1
 801a8ec:	4619      	mov	r1, r3
 801a8ee:	462b      	mov	r3, r5
 801a8f0:	bfbb      	ittet	lt
 801a8f2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801a8f6:	461d      	movlt	r5, r3
 801a8f8:	2300      	movge	r3, #0
 801a8fa:	232d      	movlt	r3, #45	; 0x2d
 801a8fc:	700b      	strb	r3, [r1, #0]
 801a8fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a900:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801a904:	4691      	mov	r9, r2
 801a906:	f023 0820 	bic.w	r8, r3, #32
 801a90a:	bfbc      	itt	lt
 801a90c:	4622      	movlt	r2, r4
 801a90e:	4614      	movlt	r4, r2
 801a910:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a914:	d005      	beq.n	801a922 <__cvt+0x42>
 801a916:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801a91a:	d100      	bne.n	801a91e <__cvt+0x3e>
 801a91c:	3601      	adds	r6, #1
 801a91e:	2102      	movs	r1, #2
 801a920:	e000      	b.n	801a924 <__cvt+0x44>
 801a922:	2103      	movs	r1, #3
 801a924:	ab03      	add	r3, sp, #12
 801a926:	9301      	str	r3, [sp, #4]
 801a928:	ab02      	add	r3, sp, #8
 801a92a:	9300      	str	r3, [sp, #0]
 801a92c:	ec45 4b10 	vmov	d0, r4, r5
 801a930:	4653      	mov	r3, sl
 801a932:	4632      	mov	r2, r6
 801a934:	f002 f958 	bl	801cbe8 <_dtoa_r>
 801a938:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801a93c:	4607      	mov	r7, r0
 801a93e:	d102      	bne.n	801a946 <__cvt+0x66>
 801a940:	f019 0f01 	tst.w	r9, #1
 801a944:	d022      	beq.n	801a98c <__cvt+0xac>
 801a946:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a94a:	eb07 0906 	add.w	r9, r7, r6
 801a94e:	d110      	bne.n	801a972 <__cvt+0x92>
 801a950:	783b      	ldrb	r3, [r7, #0]
 801a952:	2b30      	cmp	r3, #48	; 0x30
 801a954:	d10a      	bne.n	801a96c <__cvt+0x8c>
 801a956:	2200      	movs	r2, #0
 801a958:	2300      	movs	r3, #0
 801a95a:	4620      	mov	r0, r4
 801a95c:	4629      	mov	r1, r5
 801a95e:	f7e6 f8c3 	bl	8000ae8 <__aeabi_dcmpeq>
 801a962:	b918      	cbnz	r0, 801a96c <__cvt+0x8c>
 801a964:	f1c6 0601 	rsb	r6, r6, #1
 801a968:	f8ca 6000 	str.w	r6, [sl]
 801a96c:	f8da 3000 	ldr.w	r3, [sl]
 801a970:	4499      	add	r9, r3
 801a972:	2200      	movs	r2, #0
 801a974:	2300      	movs	r3, #0
 801a976:	4620      	mov	r0, r4
 801a978:	4629      	mov	r1, r5
 801a97a:	f7e6 f8b5 	bl	8000ae8 <__aeabi_dcmpeq>
 801a97e:	b108      	cbz	r0, 801a984 <__cvt+0xa4>
 801a980:	f8cd 900c 	str.w	r9, [sp, #12]
 801a984:	2230      	movs	r2, #48	; 0x30
 801a986:	9b03      	ldr	r3, [sp, #12]
 801a988:	454b      	cmp	r3, r9
 801a98a:	d307      	bcc.n	801a99c <__cvt+0xbc>
 801a98c:	9b03      	ldr	r3, [sp, #12]
 801a98e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a990:	1bdb      	subs	r3, r3, r7
 801a992:	4638      	mov	r0, r7
 801a994:	6013      	str	r3, [r2, #0]
 801a996:	b004      	add	sp, #16
 801a998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a99c:	1c59      	adds	r1, r3, #1
 801a99e:	9103      	str	r1, [sp, #12]
 801a9a0:	701a      	strb	r2, [r3, #0]
 801a9a2:	e7f0      	b.n	801a986 <__cvt+0xa6>

0801a9a4 <__exponent>:
 801a9a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a9a6:	4603      	mov	r3, r0
 801a9a8:	2900      	cmp	r1, #0
 801a9aa:	bfb8      	it	lt
 801a9ac:	4249      	neglt	r1, r1
 801a9ae:	f803 2b02 	strb.w	r2, [r3], #2
 801a9b2:	bfb4      	ite	lt
 801a9b4:	222d      	movlt	r2, #45	; 0x2d
 801a9b6:	222b      	movge	r2, #43	; 0x2b
 801a9b8:	2909      	cmp	r1, #9
 801a9ba:	7042      	strb	r2, [r0, #1]
 801a9bc:	dd2a      	ble.n	801aa14 <__exponent+0x70>
 801a9be:	f10d 0407 	add.w	r4, sp, #7
 801a9c2:	46a4      	mov	ip, r4
 801a9c4:	270a      	movs	r7, #10
 801a9c6:	46a6      	mov	lr, r4
 801a9c8:	460a      	mov	r2, r1
 801a9ca:	fb91 f6f7 	sdiv	r6, r1, r7
 801a9ce:	fb07 1516 	mls	r5, r7, r6, r1
 801a9d2:	3530      	adds	r5, #48	; 0x30
 801a9d4:	2a63      	cmp	r2, #99	; 0x63
 801a9d6:	f104 34ff 	add.w	r4, r4, #4294967295
 801a9da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801a9de:	4631      	mov	r1, r6
 801a9e0:	dcf1      	bgt.n	801a9c6 <__exponent+0x22>
 801a9e2:	3130      	adds	r1, #48	; 0x30
 801a9e4:	f1ae 0502 	sub.w	r5, lr, #2
 801a9e8:	f804 1c01 	strb.w	r1, [r4, #-1]
 801a9ec:	1c44      	adds	r4, r0, #1
 801a9ee:	4629      	mov	r1, r5
 801a9f0:	4561      	cmp	r1, ip
 801a9f2:	d30a      	bcc.n	801aa0a <__exponent+0x66>
 801a9f4:	f10d 0209 	add.w	r2, sp, #9
 801a9f8:	eba2 020e 	sub.w	r2, r2, lr
 801a9fc:	4565      	cmp	r5, ip
 801a9fe:	bf88      	it	hi
 801aa00:	2200      	movhi	r2, #0
 801aa02:	4413      	add	r3, r2
 801aa04:	1a18      	subs	r0, r3, r0
 801aa06:	b003      	add	sp, #12
 801aa08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aa0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801aa0e:	f804 2f01 	strb.w	r2, [r4, #1]!
 801aa12:	e7ed      	b.n	801a9f0 <__exponent+0x4c>
 801aa14:	2330      	movs	r3, #48	; 0x30
 801aa16:	3130      	adds	r1, #48	; 0x30
 801aa18:	7083      	strb	r3, [r0, #2]
 801aa1a:	70c1      	strb	r1, [r0, #3]
 801aa1c:	1d03      	adds	r3, r0, #4
 801aa1e:	e7f1      	b.n	801aa04 <__exponent+0x60>

0801aa20 <_printf_float>:
 801aa20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa24:	ed2d 8b02 	vpush	{d8}
 801aa28:	b08d      	sub	sp, #52	; 0x34
 801aa2a:	460c      	mov	r4, r1
 801aa2c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801aa30:	4616      	mov	r6, r2
 801aa32:	461f      	mov	r7, r3
 801aa34:	4605      	mov	r5, r0
 801aa36:	f003 fb07 	bl	801e048 <_localeconv_r>
 801aa3a:	f8d0 a000 	ldr.w	sl, [r0]
 801aa3e:	4650      	mov	r0, sl
 801aa40:	f7e5 fbd6 	bl	80001f0 <strlen>
 801aa44:	2300      	movs	r3, #0
 801aa46:	930a      	str	r3, [sp, #40]	; 0x28
 801aa48:	6823      	ldr	r3, [r4, #0]
 801aa4a:	9305      	str	r3, [sp, #20]
 801aa4c:	f8d8 3000 	ldr.w	r3, [r8]
 801aa50:	f894 b018 	ldrb.w	fp, [r4, #24]
 801aa54:	3307      	adds	r3, #7
 801aa56:	f023 0307 	bic.w	r3, r3, #7
 801aa5a:	f103 0208 	add.w	r2, r3, #8
 801aa5e:	f8c8 2000 	str.w	r2, [r8]
 801aa62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa66:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801aa6a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801aa6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801aa72:	9307      	str	r3, [sp, #28]
 801aa74:	f8cd 8018 	str.w	r8, [sp, #24]
 801aa78:	ee08 0a10 	vmov	s16, r0
 801aa7c:	4b9f      	ldr	r3, [pc, #636]	; (801acfc <_printf_float+0x2dc>)
 801aa7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801aa82:	f04f 32ff 	mov.w	r2, #4294967295
 801aa86:	f7e6 f861 	bl	8000b4c <__aeabi_dcmpun>
 801aa8a:	bb88      	cbnz	r0, 801aaf0 <_printf_float+0xd0>
 801aa8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801aa90:	4b9a      	ldr	r3, [pc, #616]	; (801acfc <_printf_float+0x2dc>)
 801aa92:	f04f 32ff 	mov.w	r2, #4294967295
 801aa96:	f7e6 f83b 	bl	8000b10 <__aeabi_dcmple>
 801aa9a:	bb48      	cbnz	r0, 801aaf0 <_printf_float+0xd0>
 801aa9c:	2200      	movs	r2, #0
 801aa9e:	2300      	movs	r3, #0
 801aaa0:	4640      	mov	r0, r8
 801aaa2:	4649      	mov	r1, r9
 801aaa4:	f7e6 f82a 	bl	8000afc <__aeabi_dcmplt>
 801aaa8:	b110      	cbz	r0, 801aab0 <_printf_float+0x90>
 801aaaa:	232d      	movs	r3, #45	; 0x2d
 801aaac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aab0:	4b93      	ldr	r3, [pc, #588]	; (801ad00 <_printf_float+0x2e0>)
 801aab2:	4894      	ldr	r0, [pc, #592]	; (801ad04 <_printf_float+0x2e4>)
 801aab4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801aab8:	bf94      	ite	ls
 801aaba:	4698      	movls	r8, r3
 801aabc:	4680      	movhi	r8, r0
 801aabe:	2303      	movs	r3, #3
 801aac0:	6123      	str	r3, [r4, #16]
 801aac2:	9b05      	ldr	r3, [sp, #20]
 801aac4:	f023 0204 	bic.w	r2, r3, #4
 801aac8:	6022      	str	r2, [r4, #0]
 801aaca:	f04f 0900 	mov.w	r9, #0
 801aace:	9700      	str	r7, [sp, #0]
 801aad0:	4633      	mov	r3, r6
 801aad2:	aa0b      	add	r2, sp, #44	; 0x2c
 801aad4:	4621      	mov	r1, r4
 801aad6:	4628      	mov	r0, r5
 801aad8:	f000 f9d8 	bl	801ae8c <_printf_common>
 801aadc:	3001      	adds	r0, #1
 801aade:	f040 8090 	bne.w	801ac02 <_printf_float+0x1e2>
 801aae2:	f04f 30ff 	mov.w	r0, #4294967295
 801aae6:	b00d      	add	sp, #52	; 0x34
 801aae8:	ecbd 8b02 	vpop	{d8}
 801aaec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aaf0:	4642      	mov	r2, r8
 801aaf2:	464b      	mov	r3, r9
 801aaf4:	4640      	mov	r0, r8
 801aaf6:	4649      	mov	r1, r9
 801aaf8:	f7e6 f828 	bl	8000b4c <__aeabi_dcmpun>
 801aafc:	b140      	cbz	r0, 801ab10 <_printf_float+0xf0>
 801aafe:	464b      	mov	r3, r9
 801ab00:	2b00      	cmp	r3, #0
 801ab02:	bfbc      	itt	lt
 801ab04:	232d      	movlt	r3, #45	; 0x2d
 801ab06:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801ab0a:	487f      	ldr	r0, [pc, #508]	; (801ad08 <_printf_float+0x2e8>)
 801ab0c:	4b7f      	ldr	r3, [pc, #508]	; (801ad0c <_printf_float+0x2ec>)
 801ab0e:	e7d1      	b.n	801aab4 <_printf_float+0x94>
 801ab10:	6863      	ldr	r3, [r4, #4]
 801ab12:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801ab16:	9206      	str	r2, [sp, #24]
 801ab18:	1c5a      	adds	r2, r3, #1
 801ab1a:	d13f      	bne.n	801ab9c <_printf_float+0x17c>
 801ab1c:	2306      	movs	r3, #6
 801ab1e:	6063      	str	r3, [r4, #4]
 801ab20:	9b05      	ldr	r3, [sp, #20]
 801ab22:	6861      	ldr	r1, [r4, #4]
 801ab24:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801ab28:	2300      	movs	r3, #0
 801ab2a:	9303      	str	r3, [sp, #12]
 801ab2c:	ab0a      	add	r3, sp, #40	; 0x28
 801ab2e:	e9cd b301 	strd	fp, r3, [sp, #4]
 801ab32:	ab09      	add	r3, sp, #36	; 0x24
 801ab34:	ec49 8b10 	vmov	d0, r8, r9
 801ab38:	9300      	str	r3, [sp, #0]
 801ab3a:	6022      	str	r2, [r4, #0]
 801ab3c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801ab40:	4628      	mov	r0, r5
 801ab42:	f7ff fecd 	bl	801a8e0 <__cvt>
 801ab46:	9b06      	ldr	r3, [sp, #24]
 801ab48:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ab4a:	2b47      	cmp	r3, #71	; 0x47
 801ab4c:	4680      	mov	r8, r0
 801ab4e:	d108      	bne.n	801ab62 <_printf_float+0x142>
 801ab50:	1cc8      	adds	r0, r1, #3
 801ab52:	db02      	blt.n	801ab5a <_printf_float+0x13a>
 801ab54:	6863      	ldr	r3, [r4, #4]
 801ab56:	4299      	cmp	r1, r3
 801ab58:	dd41      	ble.n	801abde <_printf_float+0x1be>
 801ab5a:	f1ab 0b02 	sub.w	fp, fp, #2
 801ab5e:	fa5f fb8b 	uxtb.w	fp, fp
 801ab62:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801ab66:	d820      	bhi.n	801abaa <_printf_float+0x18a>
 801ab68:	3901      	subs	r1, #1
 801ab6a:	465a      	mov	r2, fp
 801ab6c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801ab70:	9109      	str	r1, [sp, #36]	; 0x24
 801ab72:	f7ff ff17 	bl	801a9a4 <__exponent>
 801ab76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ab78:	1813      	adds	r3, r2, r0
 801ab7a:	2a01      	cmp	r2, #1
 801ab7c:	4681      	mov	r9, r0
 801ab7e:	6123      	str	r3, [r4, #16]
 801ab80:	dc02      	bgt.n	801ab88 <_printf_float+0x168>
 801ab82:	6822      	ldr	r2, [r4, #0]
 801ab84:	07d2      	lsls	r2, r2, #31
 801ab86:	d501      	bpl.n	801ab8c <_printf_float+0x16c>
 801ab88:	3301      	adds	r3, #1
 801ab8a:	6123      	str	r3, [r4, #16]
 801ab8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801ab90:	2b00      	cmp	r3, #0
 801ab92:	d09c      	beq.n	801aace <_printf_float+0xae>
 801ab94:	232d      	movs	r3, #45	; 0x2d
 801ab96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ab9a:	e798      	b.n	801aace <_printf_float+0xae>
 801ab9c:	9a06      	ldr	r2, [sp, #24]
 801ab9e:	2a47      	cmp	r2, #71	; 0x47
 801aba0:	d1be      	bne.n	801ab20 <_printf_float+0x100>
 801aba2:	2b00      	cmp	r3, #0
 801aba4:	d1bc      	bne.n	801ab20 <_printf_float+0x100>
 801aba6:	2301      	movs	r3, #1
 801aba8:	e7b9      	b.n	801ab1e <_printf_float+0xfe>
 801abaa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801abae:	d118      	bne.n	801abe2 <_printf_float+0x1c2>
 801abb0:	2900      	cmp	r1, #0
 801abb2:	6863      	ldr	r3, [r4, #4]
 801abb4:	dd0b      	ble.n	801abce <_printf_float+0x1ae>
 801abb6:	6121      	str	r1, [r4, #16]
 801abb8:	b913      	cbnz	r3, 801abc0 <_printf_float+0x1a0>
 801abba:	6822      	ldr	r2, [r4, #0]
 801abbc:	07d0      	lsls	r0, r2, #31
 801abbe:	d502      	bpl.n	801abc6 <_printf_float+0x1a6>
 801abc0:	3301      	adds	r3, #1
 801abc2:	440b      	add	r3, r1
 801abc4:	6123      	str	r3, [r4, #16]
 801abc6:	65a1      	str	r1, [r4, #88]	; 0x58
 801abc8:	f04f 0900 	mov.w	r9, #0
 801abcc:	e7de      	b.n	801ab8c <_printf_float+0x16c>
 801abce:	b913      	cbnz	r3, 801abd6 <_printf_float+0x1b6>
 801abd0:	6822      	ldr	r2, [r4, #0]
 801abd2:	07d2      	lsls	r2, r2, #31
 801abd4:	d501      	bpl.n	801abda <_printf_float+0x1ba>
 801abd6:	3302      	adds	r3, #2
 801abd8:	e7f4      	b.n	801abc4 <_printf_float+0x1a4>
 801abda:	2301      	movs	r3, #1
 801abdc:	e7f2      	b.n	801abc4 <_printf_float+0x1a4>
 801abde:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801abe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801abe4:	4299      	cmp	r1, r3
 801abe6:	db05      	blt.n	801abf4 <_printf_float+0x1d4>
 801abe8:	6823      	ldr	r3, [r4, #0]
 801abea:	6121      	str	r1, [r4, #16]
 801abec:	07d8      	lsls	r0, r3, #31
 801abee:	d5ea      	bpl.n	801abc6 <_printf_float+0x1a6>
 801abf0:	1c4b      	adds	r3, r1, #1
 801abf2:	e7e7      	b.n	801abc4 <_printf_float+0x1a4>
 801abf4:	2900      	cmp	r1, #0
 801abf6:	bfd4      	ite	le
 801abf8:	f1c1 0202 	rsble	r2, r1, #2
 801abfc:	2201      	movgt	r2, #1
 801abfe:	4413      	add	r3, r2
 801ac00:	e7e0      	b.n	801abc4 <_printf_float+0x1a4>
 801ac02:	6823      	ldr	r3, [r4, #0]
 801ac04:	055a      	lsls	r2, r3, #21
 801ac06:	d407      	bmi.n	801ac18 <_printf_float+0x1f8>
 801ac08:	6923      	ldr	r3, [r4, #16]
 801ac0a:	4642      	mov	r2, r8
 801ac0c:	4631      	mov	r1, r6
 801ac0e:	4628      	mov	r0, r5
 801ac10:	47b8      	blx	r7
 801ac12:	3001      	adds	r0, #1
 801ac14:	d12c      	bne.n	801ac70 <_printf_float+0x250>
 801ac16:	e764      	b.n	801aae2 <_printf_float+0xc2>
 801ac18:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801ac1c:	f240 80e0 	bls.w	801ade0 <_printf_float+0x3c0>
 801ac20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801ac24:	2200      	movs	r2, #0
 801ac26:	2300      	movs	r3, #0
 801ac28:	f7e5 ff5e 	bl	8000ae8 <__aeabi_dcmpeq>
 801ac2c:	2800      	cmp	r0, #0
 801ac2e:	d034      	beq.n	801ac9a <_printf_float+0x27a>
 801ac30:	4a37      	ldr	r2, [pc, #220]	; (801ad10 <_printf_float+0x2f0>)
 801ac32:	2301      	movs	r3, #1
 801ac34:	4631      	mov	r1, r6
 801ac36:	4628      	mov	r0, r5
 801ac38:	47b8      	blx	r7
 801ac3a:	3001      	adds	r0, #1
 801ac3c:	f43f af51 	beq.w	801aae2 <_printf_float+0xc2>
 801ac40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ac44:	429a      	cmp	r2, r3
 801ac46:	db02      	blt.n	801ac4e <_printf_float+0x22e>
 801ac48:	6823      	ldr	r3, [r4, #0]
 801ac4a:	07d8      	lsls	r0, r3, #31
 801ac4c:	d510      	bpl.n	801ac70 <_printf_float+0x250>
 801ac4e:	ee18 3a10 	vmov	r3, s16
 801ac52:	4652      	mov	r2, sl
 801ac54:	4631      	mov	r1, r6
 801ac56:	4628      	mov	r0, r5
 801ac58:	47b8      	blx	r7
 801ac5a:	3001      	adds	r0, #1
 801ac5c:	f43f af41 	beq.w	801aae2 <_printf_float+0xc2>
 801ac60:	f04f 0800 	mov.w	r8, #0
 801ac64:	f104 091a 	add.w	r9, r4, #26
 801ac68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ac6a:	3b01      	subs	r3, #1
 801ac6c:	4543      	cmp	r3, r8
 801ac6e:	dc09      	bgt.n	801ac84 <_printf_float+0x264>
 801ac70:	6823      	ldr	r3, [r4, #0]
 801ac72:	079b      	lsls	r3, r3, #30
 801ac74:	f100 8105 	bmi.w	801ae82 <_printf_float+0x462>
 801ac78:	68e0      	ldr	r0, [r4, #12]
 801ac7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ac7c:	4298      	cmp	r0, r3
 801ac7e:	bfb8      	it	lt
 801ac80:	4618      	movlt	r0, r3
 801ac82:	e730      	b.n	801aae6 <_printf_float+0xc6>
 801ac84:	2301      	movs	r3, #1
 801ac86:	464a      	mov	r2, r9
 801ac88:	4631      	mov	r1, r6
 801ac8a:	4628      	mov	r0, r5
 801ac8c:	47b8      	blx	r7
 801ac8e:	3001      	adds	r0, #1
 801ac90:	f43f af27 	beq.w	801aae2 <_printf_float+0xc2>
 801ac94:	f108 0801 	add.w	r8, r8, #1
 801ac98:	e7e6      	b.n	801ac68 <_printf_float+0x248>
 801ac9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac9c:	2b00      	cmp	r3, #0
 801ac9e:	dc39      	bgt.n	801ad14 <_printf_float+0x2f4>
 801aca0:	4a1b      	ldr	r2, [pc, #108]	; (801ad10 <_printf_float+0x2f0>)
 801aca2:	2301      	movs	r3, #1
 801aca4:	4631      	mov	r1, r6
 801aca6:	4628      	mov	r0, r5
 801aca8:	47b8      	blx	r7
 801acaa:	3001      	adds	r0, #1
 801acac:	f43f af19 	beq.w	801aae2 <_printf_float+0xc2>
 801acb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801acb4:	4313      	orrs	r3, r2
 801acb6:	d102      	bne.n	801acbe <_printf_float+0x29e>
 801acb8:	6823      	ldr	r3, [r4, #0]
 801acba:	07d9      	lsls	r1, r3, #31
 801acbc:	d5d8      	bpl.n	801ac70 <_printf_float+0x250>
 801acbe:	ee18 3a10 	vmov	r3, s16
 801acc2:	4652      	mov	r2, sl
 801acc4:	4631      	mov	r1, r6
 801acc6:	4628      	mov	r0, r5
 801acc8:	47b8      	blx	r7
 801acca:	3001      	adds	r0, #1
 801accc:	f43f af09 	beq.w	801aae2 <_printf_float+0xc2>
 801acd0:	f04f 0900 	mov.w	r9, #0
 801acd4:	f104 0a1a 	add.w	sl, r4, #26
 801acd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801acda:	425b      	negs	r3, r3
 801acdc:	454b      	cmp	r3, r9
 801acde:	dc01      	bgt.n	801ace4 <_printf_float+0x2c4>
 801ace0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ace2:	e792      	b.n	801ac0a <_printf_float+0x1ea>
 801ace4:	2301      	movs	r3, #1
 801ace6:	4652      	mov	r2, sl
 801ace8:	4631      	mov	r1, r6
 801acea:	4628      	mov	r0, r5
 801acec:	47b8      	blx	r7
 801acee:	3001      	adds	r0, #1
 801acf0:	f43f aef7 	beq.w	801aae2 <_printf_float+0xc2>
 801acf4:	f109 0901 	add.w	r9, r9, #1
 801acf8:	e7ee      	b.n	801acd8 <_printf_float+0x2b8>
 801acfa:	bf00      	nop
 801acfc:	7fefffff 	.word	0x7fefffff
 801ad00:	08021870 	.word	0x08021870
 801ad04:	08021874 	.word	0x08021874
 801ad08:	0802187c 	.word	0x0802187c
 801ad0c:	08021878 	.word	0x08021878
 801ad10:	08021bb9 	.word	0x08021bb9
 801ad14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ad16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ad18:	429a      	cmp	r2, r3
 801ad1a:	bfa8      	it	ge
 801ad1c:	461a      	movge	r2, r3
 801ad1e:	2a00      	cmp	r2, #0
 801ad20:	4691      	mov	r9, r2
 801ad22:	dc37      	bgt.n	801ad94 <_printf_float+0x374>
 801ad24:	f04f 0b00 	mov.w	fp, #0
 801ad28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ad2c:	f104 021a 	add.w	r2, r4, #26
 801ad30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ad32:	9305      	str	r3, [sp, #20]
 801ad34:	eba3 0309 	sub.w	r3, r3, r9
 801ad38:	455b      	cmp	r3, fp
 801ad3a:	dc33      	bgt.n	801ada4 <_printf_float+0x384>
 801ad3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ad40:	429a      	cmp	r2, r3
 801ad42:	db3b      	blt.n	801adbc <_printf_float+0x39c>
 801ad44:	6823      	ldr	r3, [r4, #0]
 801ad46:	07da      	lsls	r2, r3, #31
 801ad48:	d438      	bmi.n	801adbc <_printf_float+0x39c>
 801ad4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ad4c:	9b05      	ldr	r3, [sp, #20]
 801ad4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ad50:	1ad3      	subs	r3, r2, r3
 801ad52:	eba2 0901 	sub.w	r9, r2, r1
 801ad56:	4599      	cmp	r9, r3
 801ad58:	bfa8      	it	ge
 801ad5a:	4699      	movge	r9, r3
 801ad5c:	f1b9 0f00 	cmp.w	r9, #0
 801ad60:	dc35      	bgt.n	801adce <_printf_float+0x3ae>
 801ad62:	f04f 0800 	mov.w	r8, #0
 801ad66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ad6a:	f104 0a1a 	add.w	sl, r4, #26
 801ad6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ad72:	1a9b      	subs	r3, r3, r2
 801ad74:	eba3 0309 	sub.w	r3, r3, r9
 801ad78:	4543      	cmp	r3, r8
 801ad7a:	f77f af79 	ble.w	801ac70 <_printf_float+0x250>
 801ad7e:	2301      	movs	r3, #1
 801ad80:	4652      	mov	r2, sl
 801ad82:	4631      	mov	r1, r6
 801ad84:	4628      	mov	r0, r5
 801ad86:	47b8      	blx	r7
 801ad88:	3001      	adds	r0, #1
 801ad8a:	f43f aeaa 	beq.w	801aae2 <_printf_float+0xc2>
 801ad8e:	f108 0801 	add.w	r8, r8, #1
 801ad92:	e7ec      	b.n	801ad6e <_printf_float+0x34e>
 801ad94:	4613      	mov	r3, r2
 801ad96:	4631      	mov	r1, r6
 801ad98:	4642      	mov	r2, r8
 801ad9a:	4628      	mov	r0, r5
 801ad9c:	47b8      	blx	r7
 801ad9e:	3001      	adds	r0, #1
 801ada0:	d1c0      	bne.n	801ad24 <_printf_float+0x304>
 801ada2:	e69e      	b.n	801aae2 <_printf_float+0xc2>
 801ada4:	2301      	movs	r3, #1
 801ada6:	4631      	mov	r1, r6
 801ada8:	4628      	mov	r0, r5
 801adaa:	9205      	str	r2, [sp, #20]
 801adac:	47b8      	blx	r7
 801adae:	3001      	adds	r0, #1
 801adb0:	f43f ae97 	beq.w	801aae2 <_printf_float+0xc2>
 801adb4:	9a05      	ldr	r2, [sp, #20]
 801adb6:	f10b 0b01 	add.w	fp, fp, #1
 801adba:	e7b9      	b.n	801ad30 <_printf_float+0x310>
 801adbc:	ee18 3a10 	vmov	r3, s16
 801adc0:	4652      	mov	r2, sl
 801adc2:	4631      	mov	r1, r6
 801adc4:	4628      	mov	r0, r5
 801adc6:	47b8      	blx	r7
 801adc8:	3001      	adds	r0, #1
 801adca:	d1be      	bne.n	801ad4a <_printf_float+0x32a>
 801adcc:	e689      	b.n	801aae2 <_printf_float+0xc2>
 801adce:	9a05      	ldr	r2, [sp, #20]
 801add0:	464b      	mov	r3, r9
 801add2:	4442      	add	r2, r8
 801add4:	4631      	mov	r1, r6
 801add6:	4628      	mov	r0, r5
 801add8:	47b8      	blx	r7
 801adda:	3001      	adds	r0, #1
 801addc:	d1c1      	bne.n	801ad62 <_printf_float+0x342>
 801adde:	e680      	b.n	801aae2 <_printf_float+0xc2>
 801ade0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ade2:	2a01      	cmp	r2, #1
 801ade4:	dc01      	bgt.n	801adea <_printf_float+0x3ca>
 801ade6:	07db      	lsls	r3, r3, #31
 801ade8:	d538      	bpl.n	801ae5c <_printf_float+0x43c>
 801adea:	2301      	movs	r3, #1
 801adec:	4642      	mov	r2, r8
 801adee:	4631      	mov	r1, r6
 801adf0:	4628      	mov	r0, r5
 801adf2:	47b8      	blx	r7
 801adf4:	3001      	adds	r0, #1
 801adf6:	f43f ae74 	beq.w	801aae2 <_printf_float+0xc2>
 801adfa:	ee18 3a10 	vmov	r3, s16
 801adfe:	4652      	mov	r2, sl
 801ae00:	4631      	mov	r1, r6
 801ae02:	4628      	mov	r0, r5
 801ae04:	47b8      	blx	r7
 801ae06:	3001      	adds	r0, #1
 801ae08:	f43f ae6b 	beq.w	801aae2 <_printf_float+0xc2>
 801ae0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801ae10:	2200      	movs	r2, #0
 801ae12:	2300      	movs	r3, #0
 801ae14:	f7e5 fe68 	bl	8000ae8 <__aeabi_dcmpeq>
 801ae18:	b9d8      	cbnz	r0, 801ae52 <_printf_float+0x432>
 801ae1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ae1c:	f108 0201 	add.w	r2, r8, #1
 801ae20:	3b01      	subs	r3, #1
 801ae22:	4631      	mov	r1, r6
 801ae24:	4628      	mov	r0, r5
 801ae26:	47b8      	blx	r7
 801ae28:	3001      	adds	r0, #1
 801ae2a:	d10e      	bne.n	801ae4a <_printf_float+0x42a>
 801ae2c:	e659      	b.n	801aae2 <_printf_float+0xc2>
 801ae2e:	2301      	movs	r3, #1
 801ae30:	4652      	mov	r2, sl
 801ae32:	4631      	mov	r1, r6
 801ae34:	4628      	mov	r0, r5
 801ae36:	47b8      	blx	r7
 801ae38:	3001      	adds	r0, #1
 801ae3a:	f43f ae52 	beq.w	801aae2 <_printf_float+0xc2>
 801ae3e:	f108 0801 	add.w	r8, r8, #1
 801ae42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ae44:	3b01      	subs	r3, #1
 801ae46:	4543      	cmp	r3, r8
 801ae48:	dcf1      	bgt.n	801ae2e <_printf_float+0x40e>
 801ae4a:	464b      	mov	r3, r9
 801ae4c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801ae50:	e6dc      	b.n	801ac0c <_printf_float+0x1ec>
 801ae52:	f04f 0800 	mov.w	r8, #0
 801ae56:	f104 0a1a 	add.w	sl, r4, #26
 801ae5a:	e7f2      	b.n	801ae42 <_printf_float+0x422>
 801ae5c:	2301      	movs	r3, #1
 801ae5e:	4642      	mov	r2, r8
 801ae60:	e7df      	b.n	801ae22 <_printf_float+0x402>
 801ae62:	2301      	movs	r3, #1
 801ae64:	464a      	mov	r2, r9
 801ae66:	4631      	mov	r1, r6
 801ae68:	4628      	mov	r0, r5
 801ae6a:	47b8      	blx	r7
 801ae6c:	3001      	adds	r0, #1
 801ae6e:	f43f ae38 	beq.w	801aae2 <_printf_float+0xc2>
 801ae72:	f108 0801 	add.w	r8, r8, #1
 801ae76:	68e3      	ldr	r3, [r4, #12]
 801ae78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ae7a:	1a5b      	subs	r3, r3, r1
 801ae7c:	4543      	cmp	r3, r8
 801ae7e:	dcf0      	bgt.n	801ae62 <_printf_float+0x442>
 801ae80:	e6fa      	b.n	801ac78 <_printf_float+0x258>
 801ae82:	f04f 0800 	mov.w	r8, #0
 801ae86:	f104 0919 	add.w	r9, r4, #25
 801ae8a:	e7f4      	b.n	801ae76 <_printf_float+0x456>

0801ae8c <_printf_common>:
 801ae8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ae90:	4616      	mov	r6, r2
 801ae92:	4699      	mov	r9, r3
 801ae94:	688a      	ldr	r2, [r1, #8]
 801ae96:	690b      	ldr	r3, [r1, #16]
 801ae98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ae9c:	4293      	cmp	r3, r2
 801ae9e:	bfb8      	it	lt
 801aea0:	4613      	movlt	r3, r2
 801aea2:	6033      	str	r3, [r6, #0]
 801aea4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801aea8:	4607      	mov	r7, r0
 801aeaa:	460c      	mov	r4, r1
 801aeac:	b10a      	cbz	r2, 801aeb2 <_printf_common+0x26>
 801aeae:	3301      	adds	r3, #1
 801aeb0:	6033      	str	r3, [r6, #0]
 801aeb2:	6823      	ldr	r3, [r4, #0]
 801aeb4:	0699      	lsls	r1, r3, #26
 801aeb6:	bf42      	ittt	mi
 801aeb8:	6833      	ldrmi	r3, [r6, #0]
 801aeba:	3302      	addmi	r3, #2
 801aebc:	6033      	strmi	r3, [r6, #0]
 801aebe:	6825      	ldr	r5, [r4, #0]
 801aec0:	f015 0506 	ands.w	r5, r5, #6
 801aec4:	d106      	bne.n	801aed4 <_printf_common+0x48>
 801aec6:	f104 0a19 	add.w	sl, r4, #25
 801aeca:	68e3      	ldr	r3, [r4, #12]
 801aecc:	6832      	ldr	r2, [r6, #0]
 801aece:	1a9b      	subs	r3, r3, r2
 801aed0:	42ab      	cmp	r3, r5
 801aed2:	dc26      	bgt.n	801af22 <_printf_common+0x96>
 801aed4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801aed8:	1e13      	subs	r3, r2, #0
 801aeda:	6822      	ldr	r2, [r4, #0]
 801aedc:	bf18      	it	ne
 801aede:	2301      	movne	r3, #1
 801aee0:	0692      	lsls	r2, r2, #26
 801aee2:	d42b      	bmi.n	801af3c <_printf_common+0xb0>
 801aee4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801aee8:	4649      	mov	r1, r9
 801aeea:	4638      	mov	r0, r7
 801aeec:	47c0      	blx	r8
 801aeee:	3001      	adds	r0, #1
 801aef0:	d01e      	beq.n	801af30 <_printf_common+0xa4>
 801aef2:	6823      	ldr	r3, [r4, #0]
 801aef4:	68e5      	ldr	r5, [r4, #12]
 801aef6:	6832      	ldr	r2, [r6, #0]
 801aef8:	f003 0306 	and.w	r3, r3, #6
 801aefc:	2b04      	cmp	r3, #4
 801aefe:	bf08      	it	eq
 801af00:	1aad      	subeq	r5, r5, r2
 801af02:	68a3      	ldr	r3, [r4, #8]
 801af04:	6922      	ldr	r2, [r4, #16]
 801af06:	bf0c      	ite	eq
 801af08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801af0c:	2500      	movne	r5, #0
 801af0e:	4293      	cmp	r3, r2
 801af10:	bfc4      	itt	gt
 801af12:	1a9b      	subgt	r3, r3, r2
 801af14:	18ed      	addgt	r5, r5, r3
 801af16:	2600      	movs	r6, #0
 801af18:	341a      	adds	r4, #26
 801af1a:	42b5      	cmp	r5, r6
 801af1c:	d11a      	bne.n	801af54 <_printf_common+0xc8>
 801af1e:	2000      	movs	r0, #0
 801af20:	e008      	b.n	801af34 <_printf_common+0xa8>
 801af22:	2301      	movs	r3, #1
 801af24:	4652      	mov	r2, sl
 801af26:	4649      	mov	r1, r9
 801af28:	4638      	mov	r0, r7
 801af2a:	47c0      	blx	r8
 801af2c:	3001      	adds	r0, #1
 801af2e:	d103      	bne.n	801af38 <_printf_common+0xac>
 801af30:	f04f 30ff 	mov.w	r0, #4294967295
 801af34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801af38:	3501      	adds	r5, #1
 801af3a:	e7c6      	b.n	801aeca <_printf_common+0x3e>
 801af3c:	18e1      	adds	r1, r4, r3
 801af3e:	1c5a      	adds	r2, r3, #1
 801af40:	2030      	movs	r0, #48	; 0x30
 801af42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801af46:	4422      	add	r2, r4
 801af48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801af4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801af50:	3302      	adds	r3, #2
 801af52:	e7c7      	b.n	801aee4 <_printf_common+0x58>
 801af54:	2301      	movs	r3, #1
 801af56:	4622      	mov	r2, r4
 801af58:	4649      	mov	r1, r9
 801af5a:	4638      	mov	r0, r7
 801af5c:	47c0      	blx	r8
 801af5e:	3001      	adds	r0, #1
 801af60:	d0e6      	beq.n	801af30 <_printf_common+0xa4>
 801af62:	3601      	adds	r6, #1
 801af64:	e7d9      	b.n	801af1a <_printf_common+0x8e>
	...

0801af68 <_printf_i>:
 801af68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801af6c:	460c      	mov	r4, r1
 801af6e:	4691      	mov	r9, r2
 801af70:	7e27      	ldrb	r7, [r4, #24]
 801af72:	990c      	ldr	r1, [sp, #48]	; 0x30
 801af74:	2f78      	cmp	r7, #120	; 0x78
 801af76:	4680      	mov	r8, r0
 801af78:	469a      	mov	sl, r3
 801af7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801af7e:	d807      	bhi.n	801af90 <_printf_i+0x28>
 801af80:	2f62      	cmp	r7, #98	; 0x62
 801af82:	d80a      	bhi.n	801af9a <_printf_i+0x32>
 801af84:	2f00      	cmp	r7, #0
 801af86:	f000 80d8 	beq.w	801b13a <_printf_i+0x1d2>
 801af8a:	2f58      	cmp	r7, #88	; 0x58
 801af8c:	f000 80a3 	beq.w	801b0d6 <_printf_i+0x16e>
 801af90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801af94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801af98:	e03a      	b.n	801b010 <_printf_i+0xa8>
 801af9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801af9e:	2b15      	cmp	r3, #21
 801afa0:	d8f6      	bhi.n	801af90 <_printf_i+0x28>
 801afa2:	a001      	add	r0, pc, #4	; (adr r0, 801afa8 <_printf_i+0x40>)
 801afa4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801afa8:	0801b001 	.word	0x0801b001
 801afac:	0801b015 	.word	0x0801b015
 801afb0:	0801af91 	.word	0x0801af91
 801afb4:	0801af91 	.word	0x0801af91
 801afb8:	0801af91 	.word	0x0801af91
 801afbc:	0801af91 	.word	0x0801af91
 801afc0:	0801b015 	.word	0x0801b015
 801afc4:	0801af91 	.word	0x0801af91
 801afc8:	0801af91 	.word	0x0801af91
 801afcc:	0801af91 	.word	0x0801af91
 801afd0:	0801af91 	.word	0x0801af91
 801afd4:	0801b121 	.word	0x0801b121
 801afd8:	0801b045 	.word	0x0801b045
 801afdc:	0801b103 	.word	0x0801b103
 801afe0:	0801af91 	.word	0x0801af91
 801afe4:	0801af91 	.word	0x0801af91
 801afe8:	0801b143 	.word	0x0801b143
 801afec:	0801af91 	.word	0x0801af91
 801aff0:	0801b045 	.word	0x0801b045
 801aff4:	0801af91 	.word	0x0801af91
 801aff8:	0801af91 	.word	0x0801af91
 801affc:	0801b10b 	.word	0x0801b10b
 801b000:	680b      	ldr	r3, [r1, #0]
 801b002:	1d1a      	adds	r2, r3, #4
 801b004:	681b      	ldr	r3, [r3, #0]
 801b006:	600a      	str	r2, [r1, #0]
 801b008:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b00c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b010:	2301      	movs	r3, #1
 801b012:	e0a3      	b.n	801b15c <_printf_i+0x1f4>
 801b014:	6825      	ldr	r5, [r4, #0]
 801b016:	6808      	ldr	r0, [r1, #0]
 801b018:	062e      	lsls	r6, r5, #24
 801b01a:	f100 0304 	add.w	r3, r0, #4
 801b01e:	d50a      	bpl.n	801b036 <_printf_i+0xce>
 801b020:	6805      	ldr	r5, [r0, #0]
 801b022:	600b      	str	r3, [r1, #0]
 801b024:	2d00      	cmp	r5, #0
 801b026:	da03      	bge.n	801b030 <_printf_i+0xc8>
 801b028:	232d      	movs	r3, #45	; 0x2d
 801b02a:	426d      	negs	r5, r5
 801b02c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b030:	485e      	ldr	r0, [pc, #376]	; (801b1ac <_printf_i+0x244>)
 801b032:	230a      	movs	r3, #10
 801b034:	e019      	b.n	801b06a <_printf_i+0x102>
 801b036:	f015 0f40 	tst.w	r5, #64	; 0x40
 801b03a:	6805      	ldr	r5, [r0, #0]
 801b03c:	600b      	str	r3, [r1, #0]
 801b03e:	bf18      	it	ne
 801b040:	b22d      	sxthne	r5, r5
 801b042:	e7ef      	b.n	801b024 <_printf_i+0xbc>
 801b044:	680b      	ldr	r3, [r1, #0]
 801b046:	6825      	ldr	r5, [r4, #0]
 801b048:	1d18      	adds	r0, r3, #4
 801b04a:	6008      	str	r0, [r1, #0]
 801b04c:	0628      	lsls	r0, r5, #24
 801b04e:	d501      	bpl.n	801b054 <_printf_i+0xec>
 801b050:	681d      	ldr	r5, [r3, #0]
 801b052:	e002      	b.n	801b05a <_printf_i+0xf2>
 801b054:	0669      	lsls	r1, r5, #25
 801b056:	d5fb      	bpl.n	801b050 <_printf_i+0xe8>
 801b058:	881d      	ldrh	r5, [r3, #0]
 801b05a:	4854      	ldr	r0, [pc, #336]	; (801b1ac <_printf_i+0x244>)
 801b05c:	2f6f      	cmp	r7, #111	; 0x6f
 801b05e:	bf0c      	ite	eq
 801b060:	2308      	moveq	r3, #8
 801b062:	230a      	movne	r3, #10
 801b064:	2100      	movs	r1, #0
 801b066:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b06a:	6866      	ldr	r6, [r4, #4]
 801b06c:	60a6      	str	r6, [r4, #8]
 801b06e:	2e00      	cmp	r6, #0
 801b070:	bfa2      	ittt	ge
 801b072:	6821      	ldrge	r1, [r4, #0]
 801b074:	f021 0104 	bicge.w	r1, r1, #4
 801b078:	6021      	strge	r1, [r4, #0]
 801b07a:	b90d      	cbnz	r5, 801b080 <_printf_i+0x118>
 801b07c:	2e00      	cmp	r6, #0
 801b07e:	d04d      	beq.n	801b11c <_printf_i+0x1b4>
 801b080:	4616      	mov	r6, r2
 801b082:	fbb5 f1f3 	udiv	r1, r5, r3
 801b086:	fb03 5711 	mls	r7, r3, r1, r5
 801b08a:	5dc7      	ldrb	r7, [r0, r7]
 801b08c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b090:	462f      	mov	r7, r5
 801b092:	42bb      	cmp	r3, r7
 801b094:	460d      	mov	r5, r1
 801b096:	d9f4      	bls.n	801b082 <_printf_i+0x11a>
 801b098:	2b08      	cmp	r3, #8
 801b09a:	d10b      	bne.n	801b0b4 <_printf_i+0x14c>
 801b09c:	6823      	ldr	r3, [r4, #0]
 801b09e:	07df      	lsls	r7, r3, #31
 801b0a0:	d508      	bpl.n	801b0b4 <_printf_i+0x14c>
 801b0a2:	6923      	ldr	r3, [r4, #16]
 801b0a4:	6861      	ldr	r1, [r4, #4]
 801b0a6:	4299      	cmp	r1, r3
 801b0a8:	bfde      	ittt	le
 801b0aa:	2330      	movle	r3, #48	; 0x30
 801b0ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b0b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b0b4:	1b92      	subs	r2, r2, r6
 801b0b6:	6122      	str	r2, [r4, #16]
 801b0b8:	f8cd a000 	str.w	sl, [sp]
 801b0bc:	464b      	mov	r3, r9
 801b0be:	aa03      	add	r2, sp, #12
 801b0c0:	4621      	mov	r1, r4
 801b0c2:	4640      	mov	r0, r8
 801b0c4:	f7ff fee2 	bl	801ae8c <_printf_common>
 801b0c8:	3001      	adds	r0, #1
 801b0ca:	d14c      	bne.n	801b166 <_printf_i+0x1fe>
 801b0cc:	f04f 30ff 	mov.w	r0, #4294967295
 801b0d0:	b004      	add	sp, #16
 801b0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b0d6:	4835      	ldr	r0, [pc, #212]	; (801b1ac <_printf_i+0x244>)
 801b0d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b0dc:	6823      	ldr	r3, [r4, #0]
 801b0de:	680e      	ldr	r6, [r1, #0]
 801b0e0:	061f      	lsls	r7, r3, #24
 801b0e2:	f856 5b04 	ldr.w	r5, [r6], #4
 801b0e6:	600e      	str	r6, [r1, #0]
 801b0e8:	d514      	bpl.n	801b114 <_printf_i+0x1ac>
 801b0ea:	07d9      	lsls	r1, r3, #31
 801b0ec:	bf44      	itt	mi
 801b0ee:	f043 0320 	orrmi.w	r3, r3, #32
 801b0f2:	6023      	strmi	r3, [r4, #0]
 801b0f4:	b91d      	cbnz	r5, 801b0fe <_printf_i+0x196>
 801b0f6:	6823      	ldr	r3, [r4, #0]
 801b0f8:	f023 0320 	bic.w	r3, r3, #32
 801b0fc:	6023      	str	r3, [r4, #0]
 801b0fe:	2310      	movs	r3, #16
 801b100:	e7b0      	b.n	801b064 <_printf_i+0xfc>
 801b102:	6823      	ldr	r3, [r4, #0]
 801b104:	f043 0320 	orr.w	r3, r3, #32
 801b108:	6023      	str	r3, [r4, #0]
 801b10a:	2378      	movs	r3, #120	; 0x78
 801b10c:	4828      	ldr	r0, [pc, #160]	; (801b1b0 <_printf_i+0x248>)
 801b10e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b112:	e7e3      	b.n	801b0dc <_printf_i+0x174>
 801b114:	065e      	lsls	r6, r3, #25
 801b116:	bf48      	it	mi
 801b118:	b2ad      	uxthmi	r5, r5
 801b11a:	e7e6      	b.n	801b0ea <_printf_i+0x182>
 801b11c:	4616      	mov	r6, r2
 801b11e:	e7bb      	b.n	801b098 <_printf_i+0x130>
 801b120:	680b      	ldr	r3, [r1, #0]
 801b122:	6826      	ldr	r6, [r4, #0]
 801b124:	6960      	ldr	r0, [r4, #20]
 801b126:	1d1d      	adds	r5, r3, #4
 801b128:	600d      	str	r5, [r1, #0]
 801b12a:	0635      	lsls	r5, r6, #24
 801b12c:	681b      	ldr	r3, [r3, #0]
 801b12e:	d501      	bpl.n	801b134 <_printf_i+0x1cc>
 801b130:	6018      	str	r0, [r3, #0]
 801b132:	e002      	b.n	801b13a <_printf_i+0x1d2>
 801b134:	0671      	lsls	r1, r6, #25
 801b136:	d5fb      	bpl.n	801b130 <_printf_i+0x1c8>
 801b138:	8018      	strh	r0, [r3, #0]
 801b13a:	2300      	movs	r3, #0
 801b13c:	6123      	str	r3, [r4, #16]
 801b13e:	4616      	mov	r6, r2
 801b140:	e7ba      	b.n	801b0b8 <_printf_i+0x150>
 801b142:	680b      	ldr	r3, [r1, #0]
 801b144:	1d1a      	adds	r2, r3, #4
 801b146:	600a      	str	r2, [r1, #0]
 801b148:	681e      	ldr	r6, [r3, #0]
 801b14a:	6862      	ldr	r2, [r4, #4]
 801b14c:	2100      	movs	r1, #0
 801b14e:	4630      	mov	r0, r6
 801b150:	f7e5 f856 	bl	8000200 <memchr>
 801b154:	b108      	cbz	r0, 801b15a <_printf_i+0x1f2>
 801b156:	1b80      	subs	r0, r0, r6
 801b158:	6060      	str	r0, [r4, #4]
 801b15a:	6863      	ldr	r3, [r4, #4]
 801b15c:	6123      	str	r3, [r4, #16]
 801b15e:	2300      	movs	r3, #0
 801b160:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b164:	e7a8      	b.n	801b0b8 <_printf_i+0x150>
 801b166:	6923      	ldr	r3, [r4, #16]
 801b168:	4632      	mov	r2, r6
 801b16a:	4649      	mov	r1, r9
 801b16c:	4640      	mov	r0, r8
 801b16e:	47d0      	blx	sl
 801b170:	3001      	adds	r0, #1
 801b172:	d0ab      	beq.n	801b0cc <_printf_i+0x164>
 801b174:	6823      	ldr	r3, [r4, #0]
 801b176:	079b      	lsls	r3, r3, #30
 801b178:	d413      	bmi.n	801b1a2 <_printf_i+0x23a>
 801b17a:	68e0      	ldr	r0, [r4, #12]
 801b17c:	9b03      	ldr	r3, [sp, #12]
 801b17e:	4298      	cmp	r0, r3
 801b180:	bfb8      	it	lt
 801b182:	4618      	movlt	r0, r3
 801b184:	e7a4      	b.n	801b0d0 <_printf_i+0x168>
 801b186:	2301      	movs	r3, #1
 801b188:	4632      	mov	r2, r6
 801b18a:	4649      	mov	r1, r9
 801b18c:	4640      	mov	r0, r8
 801b18e:	47d0      	blx	sl
 801b190:	3001      	adds	r0, #1
 801b192:	d09b      	beq.n	801b0cc <_printf_i+0x164>
 801b194:	3501      	adds	r5, #1
 801b196:	68e3      	ldr	r3, [r4, #12]
 801b198:	9903      	ldr	r1, [sp, #12]
 801b19a:	1a5b      	subs	r3, r3, r1
 801b19c:	42ab      	cmp	r3, r5
 801b19e:	dcf2      	bgt.n	801b186 <_printf_i+0x21e>
 801b1a0:	e7eb      	b.n	801b17a <_printf_i+0x212>
 801b1a2:	2500      	movs	r5, #0
 801b1a4:	f104 0619 	add.w	r6, r4, #25
 801b1a8:	e7f5      	b.n	801b196 <_printf_i+0x22e>
 801b1aa:	bf00      	nop
 801b1ac:	08021880 	.word	0x08021880
 801b1b0:	08021891 	.word	0x08021891

0801b1b4 <_scanf_float>:
 801b1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1b8:	b087      	sub	sp, #28
 801b1ba:	4617      	mov	r7, r2
 801b1bc:	9303      	str	r3, [sp, #12]
 801b1be:	688b      	ldr	r3, [r1, #8]
 801b1c0:	1e5a      	subs	r2, r3, #1
 801b1c2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801b1c6:	bf83      	ittte	hi
 801b1c8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801b1cc:	195b      	addhi	r3, r3, r5
 801b1ce:	9302      	strhi	r3, [sp, #8]
 801b1d0:	2300      	movls	r3, #0
 801b1d2:	bf86      	itte	hi
 801b1d4:	f240 135d 	movwhi	r3, #349	; 0x15d
 801b1d8:	608b      	strhi	r3, [r1, #8]
 801b1da:	9302      	strls	r3, [sp, #8]
 801b1dc:	680b      	ldr	r3, [r1, #0]
 801b1de:	468b      	mov	fp, r1
 801b1e0:	2500      	movs	r5, #0
 801b1e2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801b1e6:	f84b 3b1c 	str.w	r3, [fp], #28
 801b1ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801b1ee:	4680      	mov	r8, r0
 801b1f0:	460c      	mov	r4, r1
 801b1f2:	465e      	mov	r6, fp
 801b1f4:	46aa      	mov	sl, r5
 801b1f6:	46a9      	mov	r9, r5
 801b1f8:	9501      	str	r5, [sp, #4]
 801b1fa:	68a2      	ldr	r2, [r4, #8]
 801b1fc:	b152      	cbz	r2, 801b214 <_scanf_float+0x60>
 801b1fe:	683b      	ldr	r3, [r7, #0]
 801b200:	781b      	ldrb	r3, [r3, #0]
 801b202:	2b4e      	cmp	r3, #78	; 0x4e
 801b204:	d864      	bhi.n	801b2d0 <_scanf_float+0x11c>
 801b206:	2b40      	cmp	r3, #64	; 0x40
 801b208:	d83c      	bhi.n	801b284 <_scanf_float+0xd0>
 801b20a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801b20e:	b2c8      	uxtb	r0, r1
 801b210:	280e      	cmp	r0, #14
 801b212:	d93a      	bls.n	801b28a <_scanf_float+0xd6>
 801b214:	f1b9 0f00 	cmp.w	r9, #0
 801b218:	d003      	beq.n	801b222 <_scanf_float+0x6e>
 801b21a:	6823      	ldr	r3, [r4, #0]
 801b21c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b220:	6023      	str	r3, [r4, #0]
 801b222:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b226:	f1ba 0f01 	cmp.w	sl, #1
 801b22a:	f200 8113 	bhi.w	801b454 <_scanf_float+0x2a0>
 801b22e:	455e      	cmp	r6, fp
 801b230:	f200 8105 	bhi.w	801b43e <_scanf_float+0x28a>
 801b234:	2501      	movs	r5, #1
 801b236:	4628      	mov	r0, r5
 801b238:	b007      	add	sp, #28
 801b23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b23e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801b242:	2a0d      	cmp	r2, #13
 801b244:	d8e6      	bhi.n	801b214 <_scanf_float+0x60>
 801b246:	a101      	add	r1, pc, #4	; (adr r1, 801b24c <_scanf_float+0x98>)
 801b248:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801b24c:	0801b38b 	.word	0x0801b38b
 801b250:	0801b215 	.word	0x0801b215
 801b254:	0801b215 	.word	0x0801b215
 801b258:	0801b215 	.word	0x0801b215
 801b25c:	0801b3eb 	.word	0x0801b3eb
 801b260:	0801b3c3 	.word	0x0801b3c3
 801b264:	0801b215 	.word	0x0801b215
 801b268:	0801b215 	.word	0x0801b215
 801b26c:	0801b399 	.word	0x0801b399
 801b270:	0801b215 	.word	0x0801b215
 801b274:	0801b215 	.word	0x0801b215
 801b278:	0801b215 	.word	0x0801b215
 801b27c:	0801b215 	.word	0x0801b215
 801b280:	0801b351 	.word	0x0801b351
 801b284:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801b288:	e7db      	b.n	801b242 <_scanf_float+0x8e>
 801b28a:	290e      	cmp	r1, #14
 801b28c:	d8c2      	bhi.n	801b214 <_scanf_float+0x60>
 801b28e:	a001      	add	r0, pc, #4	; (adr r0, 801b294 <_scanf_float+0xe0>)
 801b290:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801b294:	0801b343 	.word	0x0801b343
 801b298:	0801b215 	.word	0x0801b215
 801b29c:	0801b343 	.word	0x0801b343
 801b2a0:	0801b3d7 	.word	0x0801b3d7
 801b2a4:	0801b215 	.word	0x0801b215
 801b2a8:	0801b2f1 	.word	0x0801b2f1
 801b2ac:	0801b32d 	.word	0x0801b32d
 801b2b0:	0801b32d 	.word	0x0801b32d
 801b2b4:	0801b32d 	.word	0x0801b32d
 801b2b8:	0801b32d 	.word	0x0801b32d
 801b2bc:	0801b32d 	.word	0x0801b32d
 801b2c0:	0801b32d 	.word	0x0801b32d
 801b2c4:	0801b32d 	.word	0x0801b32d
 801b2c8:	0801b32d 	.word	0x0801b32d
 801b2cc:	0801b32d 	.word	0x0801b32d
 801b2d0:	2b6e      	cmp	r3, #110	; 0x6e
 801b2d2:	d809      	bhi.n	801b2e8 <_scanf_float+0x134>
 801b2d4:	2b60      	cmp	r3, #96	; 0x60
 801b2d6:	d8b2      	bhi.n	801b23e <_scanf_float+0x8a>
 801b2d8:	2b54      	cmp	r3, #84	; 0x54
 801b2da:	d077      	beq.n	801b3cc <_scanf_float+0x218>
 801b2dc:	2b59      	cmp	r3, #89	; 0x59
 801b2de:	d199      	bne.n	801b214 <_scanf_float+0x60>
 801b2e0:	2d07      	cmp	r5, #7
 801b2e2:	d197      	bne.n	801b214 <_scanf_float+0x60>
 801b2e4:	2508      	movs	r5, #8
 801b2e6:	e029      	b.n	801b33c <_scanf_float+0x188>
 801b2e8:	2b74      	cmp	r3, #116	; 0x74
 801b2ea:	d06f      	beq.n	801b3cc <_scanf_float+0x218>
 801b2ec:	2b79      	cmp	r3, #121	; 0x79
 801b2ee:	e7f6      	b.n	801b2de <_scanf_float+0x12a>
 801b2f0:	6821      	ldr	r1, [r4, #0]
 801b2f2:	05c8      	lsls	r0, r1, #23
 801b2f4:	d51a      	bpl.n	801b32c <_scanf_float+0x178>
 801b2f6:	9b02      	ldr	r3, [sp, #8]
 801b2f8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801b2fc:	6021      	str	r1, [r4, #0]
 801b2fe:	f109 0901 	add.w	r9, r9, #1
 801b302:	b11b      	cbz	r3, 801b30c <_scanf_float+0x158>
 801b304:	3b01      	subs	r3, #1
 801b306:	3201      	adds	r2, #1
 801b308:	9302      	str	r3, [sp, #8]
 801b30a:	60a2      	str	r2, [r4, #8]
 801b30c:	68a3      	ldr	r3, [r4, #8]
 801b30e:	3b01      	subs	r3, #1
 801b310:	60a3      	str	r3, [r4, #8]
 801b312:	6923      	ldr	r3, [r4, #16]
 801b314:	3301      	adds	r3, #1
 801b316:	6123      	str	r3, [r4, #16]
 801b318:	687b      	ldr	r3, [r7, #4]
 801b31a:	3b01      	subs	r3, #1
 801b31c:	2b00      	cmp	r3, #0
 801b31e:	607b      	str	r3, [r7, #4]
 801b320:	f340 8084 	ble.w	801b42c <_scanf_float+0x278>
 801b324:	683b      	ldr	r3, [r7, #0]
 801b326:	3301      	adds	r3, #1
 801b328:	603b      	str	r3, [r7, #0]
 801b32a:	e766      	b.n	801b1fa <_scanf_float+0x46>
 801b32c:	eb1a 0f05 	cmn.w	sl, r5
 801b330:	f47f af70 	bne.w	801b214 <_scanf_float+0x60>
 801b334:	6822      	ldr	r2, [r4, #0]
 801b336:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801b33a:	6022      	str	r2, [r4, #0]
 801b33c:	f806 3b01 	strb.w	r3, [r6], #1
 801b340:	e7e4      	b.n	801b30c <_scanf_float+0x158>
 801b342:	6822      	ldr	r2, [r4, #0]
 801b344:	0610      	lsls	r0, r2, #24
 801b346:	f57f af65 	bpl.w	801b214 <_scanf_float+0x60>
 801b34a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801b34e:	e7f4      	b.n	801b33a <_scanf_float+0x186>
 801b350:	f1ba 0f00 	cmp.w	sl, #0
 801b354:	d10e      	bne.n	801b374 <_scanf_float+0x1c0>
 801b356:	f1b9 0f00 	cmp.w	r9, #0
 801b35a:	d10e      	bne.n	801b37a <_scanf_float+0x1c6>
 801b35c:	6822      	ldr	r2, [r4, #0]
 801b35e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b362:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b366:	d108      	bne.n	801b37a <_scanf_float+0x1c6>
 801b368:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b36c:	6022      	str	r2, [r4, #0]
 801b36e:	f04f 0a01 	mov.w	sl, #1
 801b372:	e7e3      	b.n	801b33c <_scanf_float+0x188>
 801b374:	f1ba 0f02 	cmp.w	sl, #2
 801b378:	d055      	beq.n	801b426 <_scanf_float+0x272>
 801b37a:	2d01      	cmp	r5, #1
 801b37c:	d002      	beq.n	801b384 <_scanf_float+0x1d0>
 801b37e:	2d04      	cmp	r5, #4
 801b380:	f47f af48 	bne.w	801b214 <_scanf_float+0x60>
 801b384:	3501      	adds	r5, #1
 801b386:	b2ed      	uxtb	r5, r5
 801b388:	e7d8      	b.n	801b33c <_scanf_float+0x188>
 801b38a:	f1ba 0f01 	cmp.w	sl, #1
 801b38e:	f47f af41 	bne.w	801b214 <_scanf_float+0x60>
 801b392:	f04f 0a02 	mov.w	sl, #2
 801b396:	e7d1      	b.n	801b33c <_scanf_float+0x188>
 801b398:	b97d      	cbnz	r5, 801b3ba <_scanf_float+0x206>
 801b39a:	f1b9 0f00 	cmp.w	r9, #0
 801b39e:	f47f af3c 	bne.w	801b21a <_scanf_float+0x66>
 801b3a2:	6822      	ldr	r2, [r4, #0]
 801b3a4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b3a8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b3ac:	f47f af39 	bne.w	801b222 <_scanf_float+0x6e>
 801b3b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b3b4:	6022      	str	r2, [r4, #0]
 801b3b6:	2501      	movs	r5, #1
 801b3b8:	e7c0      	b.n	801b33c <_scanf_float+0x188>
 801b3ba:	2d03      	cmp	r5, #3
 801b3bc:	d0e2      	beq.n	801b384 <_scanf_float+0x1d0>
 801b3be:	2d05      	cmp	r5, #5
 801b3c0:	e7de      	b.n	801b380 <_scanf_float+0x1cc>
 801b3c2:	2d02      	cmp	r5, #2
 801b3c4:	f47f af26 	bne.w	801b214 <_scanf_float+0x60>
 801b3c8:	2503      	movs	r5, #3
 801b3ca:	e7b7      	b.n	801b33c <_scanf_float+0x188>
 801b3cc:	2d06      	cmp	r5, #6
 801b3ce:	f47f af21 	bne.w	801b214 <_scanf_float+0x60>
 801b3d2:	2507      	movs	r5, #7
 801b3d4:	e7b2      	b.n	801b33c <_scanf_float+0x188>
 801b3d6:	6822      	ldr	r2, [r4, #0]
 801b3d8:	0591      	lsls	r1, r2, #22
 801b3da:	f57f af1b 	bpl.w	801b214 <_scanf_float+0x60>
 801b3de:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801b3e2:	6022      	str	r2, [r4, #0]
 801b3e4:	f8cd 9004 	str.w	r9, [sp, #4]
 801b3e8:	e7a8      	b.n	801b33c <_scanf_float+0x188>
 801b3ea:	6822      	ldr	r2, [r4, #0]
 801b3ec:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801b3f0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801b3f4:	d006      	beq.n	801b404 <_scanf_float+0x250>
 801b3f6:	0550      	lsls	r0, r2, #21
 801b3f8:	f57f af0c 	bpl.w	801b214 <_scanf_float+0x60>
 801b3fc:	f1b9 0f00 	cmp.w	r9, #0
 801b400:	f43f af0f 	beq.w	801b222 <_scanf_float+0x6e>
 801b404:	0591      	lsls	r1, r2, #22
 801b406:	bf58      	it	pl
 801b408:	9901      	ldrpl	r1, [sp, #4]
 801b40a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b40e:	bf58      	it	pl
 801b410:	eba9 0101 	subpl.w	r1, r9, r1
 801b414:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801b418:	bf58      	it	pl
 801b41a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801b41e:	6022      	str	r2, [r4, #0]
 801b420:	f04f 0900 	mov.w	r9, #0
 801b424:	e78a      	b.n	801b33c <_scanf_float+0x188>
 801b426:	f04f 0a03 	mov.w	sl, #3
 801b42a:	e787      	b.n	801b33c <_scanf_float+0x188>
 801b42c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801b430:	4639      	mov	r1, r7
 801b432:	4640      	mov	r0, r8
 801b434:	4798      	blx	r3
 801b436:	2800      	cmp	r0, #0
 801b438:	f43f aedf 	beq.w	801b1fa <_scanf_float+0x46>
 801b43c:	e6ea      	b.n	801b214 <_scanf_float+0x60>
 801b43e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b442:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b446:	463a      	mov	r2, r7
 801b448:	4640      	mov	r0, r8
 801b44a:	4798      	blx	r3
 801b44c:	6923      	ldr	r3, [r4, #16]
 801b44e:	3b01      	subs	r3, #1
 801b450:	6123      	str	r3, [r4, #16]
 801b452:	e6ec      	b.n	801b22e <_scanf_float+0x7a>
 801b454:	1e6b      	subs	r3, r5, #1
 801b456:	2b06      	cmp	r3, #6
 801b458:	d825      	bhi.n	801b4a6 <_scanf_float+0x2f2>
 801b45a:	2d02      	cmp	r5, #2
 801b45c:	d836      	bhi.n	801b4cc <_scanf_float+0x318>
 801b45e:	455e      	cmp	r6, fp
 801b460:	f67f aee8 	bls.w	801b234 <_scanf_float+0x80>
 801b464:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b468:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b46c:	463a      	mov	r2, r7
 801b46e:	4640      	mov	r0, r8
 801b470:	4798      	blx	r3
 801b472:	6923      	ldr	r3, [r4, #16]
 801b474:	3b01      	subs	r3, #1
 801b476:	6123      	str	r3, [r4, #16]
 801b478:	e7f1      	b.n	801b45e <_scanf_float+0x2aa>
 801b47a:	9802      	ldr	r0, [sp, #8]
 801b47c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b480:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801b484:	9002      	str	r0, [sp, #8]
 801b486:	463a      	mov	r2, r7
 801b488:	4640      	mov	r0, r8
 801b48a:	4798      	blx	r3
 801b48c:	6923      	ldr	r3, [r4, #16]
 801b48e:	3b01      	subs	r3, #1
 801b490:	6123      	str	r3, [r4, #16]
 801b492:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b496:	fa5f fa8a 	uxtb.w	sl, sl
 801b49a:	f1ba 0f02 	cmp.w	sl, #2
 801b49e:	d1ec      	bne.n	801b47a <_scanf_float+0x2c6>
 801b4a0:	3d03      	subs	r5, #3
 801b4a2:	b2ed      	uxtb	r5, r5
 801b4a4:	1b76      	subs	r6, r6, r5
 801b4a6:	6823      	ldr	r3, [r4, #0]
 801b4a8:	05da      	lsls	r2, r3, #23
 801b4aa:	d52f      	bpl.n	801b50c <_scanf_float+0x358>
 801b4ac:	055b      	lsls	r3, r3, #21
 801b4ae:	d510      	bpl.n	801b4d2 <_scanf_float+0x31e>
 801b4b0:	455e      	cmp	r6, fp
 801b4b2:	f67f aebf 	bls.w	801b234 <_scanf_float+0x80>
 801b4b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b4ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b4be:	463a      	mov	r2, r7
 801b4c0:	4640      	mov	r0, r8
 801b4c2:	4798      	blx	r3
 801b4c4:	6923      	ldr	r3, [r4, #16]
 801b4c6:	3b01      	subs	r3, #1
 801b4c8:	6123      	str	r3, [r4, #16]
 801b4ca:	e7f1      	b.n	801b4b0 <_scanf_float+0x2fc>
 801b4cc:	46aa      	mov	sl, r5
 801b4ce:	9602      	str	r6, [sp, #8]
 801b4d0:	e7df      	b.n	801b492 <_scanf_float+0x2de>
 801b4d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801b4d6:	6923      	ldr	r3, [r4, #16]
 801b4d8:	2965      	cmp	r1, #101	; 0x65
 801b4da:	f103 33ff 	add.w	r3, r3, #4294967295
 801b4de:	f106 35ff 	add.w	r5, r6, #4294967295
 801b4e2:	6123      	str	r3, [r4, #16]
 801b4e4:	d00c      	beq.n	801b500 <_scanf_float+0x34c>
 801b4e6:	2945      	cmp	r1, #69	; 0x45
 801b4e8:	d00a      	beq.n	801b500 <_scanf_float+0x34c>
 801b4ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b4ee:	463a      	mov	r2, r7
 801b4f0:	4640      	mov	r0, r8
 801b4f2:	4798      	blx	r3
 801b4f4:	6923      	ldr	r3, [r4, #16]
 801b4f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801b4fa:	3b01      	subs	r3, #1
 801b4fc:	1eb5      	subs	r5, r6, #2
 801b4fe:	6123      	str	r3, [r4, #16]
 801b500:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b504:	463a      	mov	r2, r7
 801b506:	4640      	mov	r0, r8
 801b508:	4798      	blx	r3
 801b50a:	462e      	mov	r6, r5
 801b50c:	6825      	ldr	r5, [r4, #0]
 801b50e:	f015 0510 	ands.w	r5, r5, #16
 801b512:	d158      	bne.n	801b5c6 <_scanf_float+0x412>
 801b514:	7035      	strb	r5, [r6, #0]
 801b516:	6823      	ldr	r3, [r4, #0]
 801b518:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801b51c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b520:	d11c      	bne.n	801b55c <_scanf_float+0x3a8>
 801b522:	9b01      	ldr	r3, [sp, #4]
 801b524:	454b      	cmp	r3, r9
 801b526:	eba3 0209 	sub.w	r2, r3, r9
 801b52a:	d124      	bne.n	801b576 <_scanf_float+0x3c2>
 801b52c:	2200      	movs	r2, #0
 801b52e:	4659      	mov	r1, fp
 801b530:	4640      	mov	r0, r8
 801b532:	f001 f873 	bl	801c61c <_strtod_r>
 801b536:	9b03      	ldr	r3, [sp, #12]
 801b538:	6821      	ldr	r1, [r4, #0]
 801b53a:	681b      	ldr	r3, [r3, #0]
 801b53c:	f011 0f02 	tst.w	r1, #2
 801b540:	ec57 6b10 	vmov	r6, r7, d0
 801b544:	f103 0204 	add.w	r2, r3, #4
 801b548:	d020      	beq.n	801b58c <_scanf_float+0x3d8>
 801b54a:	9903      	ldr	r1, [sp, #12]
 801b54c:	600a      	str	r2, [r1, #0]
 801b54e:	681b      	ldr	r3, [r3, #0]
 801b550:	e9c3 6700 	strd	r6, r7, [r3]
 801b554:	68e3      	ldr	r3, [r4, #12]
 801b556:	3301      	adds	r3, #1
 801b558:	60e3      	str	r3, [r4, #12]
 801b55a:	e66c      	b.n	801b236 <_scanf_float+0x82>
 801b55c:	9b04      	ldr	r3, [sp, #16]
 801b55e:	2b00      	cmp	r3, #0
 801b560:	d0e4      	beq.n	801b52c <_scanf_float+0x378>
 801b562:	9905      	ldr	r1, [sp, #20]
 801b564:	230a      	movs	r3, #10
 801b566:	462a      	mov	r2, r5
 801b568:	3101      	adds	r1, #1
 801b56a:	4640      	mov	r0, r8
 801b56c:	f001 f8e0 	bl	801c730 <_strtol_r>
 801b570:	9b04      	ldr	r3, [sp, #16]
 801b572:	9e05      	ldr	r6, [sp, #20]
 801b574:	1ac2      	subs	r2, r0, r3
 801b576:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801b57a:	429e      	cmp	r6, r3
 801b57c:	bf28      	it	cs
 801b57e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801b582:	4912      	ldr	r1, [pc, #72]	; (801b5cc <_scanf_float+0x418>)
 801b584:	4630      	mov	r0, r6
 801b586:	f000 f977 	bl	801b878 <siprintf>
 801b58a:	e7cf      	b.n	801b52c <_scanf_float+0x378>
 801b58c:	f011 0f04 	tst.w	r1, #4
 801b590:	9903      	ldr	r1, [sp, #12]
 801b592:	600a      	str	r2, [r1, #0]
 801b594:	d1db      	bne.n	801b54e <_scanf_float+0x39a>
 801b596:	f8d3 8000 	ldr.w	r8, [r3]
 801b59a:	ee10 2a10 	vmov	r2, s0
 801b59e:	ee10 0a10 	vmov	r0, s0
 801b5a2:	463b      	mov	r3, r7
 801b5a4:	4639      	mov	r1, r7
 801b5a6:	f7e5 fad1 	bl	8000b4c <__aeabi_dcmpun>
 801b5aa:	b128      	cbz	r0, 801b5b8 <_scanf_float+0x404>
 801b5ac:	4808      	ldr	r0, [pc, #32]	; (801b5d0 <_scanf_float+0x41c>)
 801b5ae:	f000 f919 	bl	801b7e4 <nanf>
 801b5b2:	ed88 0a00 	vstr	s0, [r8]
 801b5b6:	e7cd      	b.n	801b554 <_scanf_float+0x3a0>
 801b5b8:	4630      	mov	r0, r6
 801b5ba:	4639      	mov	r1, r7
 801b5bc:	f7e5 fb24 	bl	8000c08 <__aeabi_d2f>
 801b5c0:	f8c8 0000 	str.w	r0, [r8]
 801b5c4:	e7c6      	b.n	801b554 <_scanf_float+0x3a0>
 801b5c6:	2500      	movs	r5, #0
 801b5c8:	e635      	b.n	801b236 <_scanf_float+0x82>
 801b5ca:	bf00      	nop
 801b5cc:	080218a2 	.word	0x080218a2
 801b5d0:	08021933 	.word	0x08021933

0801b5d4 <iprintf>:
 801b5d4:	b40f      	push	{r0, r1, r2, r3}
 801b5d6:	4b0a      	ldr	r3, [pc, #40]	; (801b600 <iprintf+0x2c>)
 801b5d8:	b513      	push	{r0, r1, r4, lr}
 801b5da:	681c      	ldr	r4, [r3, #0]
 801b5dc:	b124      	cbz	r4, 801b5e8 <iprintf+0x14>
 801b5de:	69a3      	ldr	r3, [r4, #24]
 801b5e0:	b913      	cbnz	r3, 801b5e8 <iprintf+0x14>
 801b5e2:	4620      	mov	r0, r4
 801b5e4:	f7fe ffd4 	bl	801a590 <__sinit>
 801b5e8:	ab05      	add	r3, sp, #20
 801b5ea:	9a04      	ldr	r2, [sp, #16]
 801b5ec:	68a1      	ldr	r1, [r4, #8]
 801b5ee:	9301      	str	r3, [sp, #4]
 801b5f0:	4620      	mov	r0, r4
 801b5f2:	f003 fe09 	bl	801f208 <_vfiprintf_r>
 801b5f6:	b002      	add	sp, #8
 801b5f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b5fc:	b004      	add	sp, #16
 801b5fe:	4770      	bx	lr
 801b600:	200001f8 	.word	0x200001f8

0801b604 <_puts_r>:
 801b604:	b570      	push	{r4, r5, r6, lr}
 801b606:	460e      	mov	r6, r1
 801b608:	4605      	mov	r5, r0
 801b60a:	b118      	cbz	r0, 801b614 <_puts_r+0x10>
 801b60c:	6983      	ldr	r3, [r0, #24]
 801b60e:	b90b      	cbnz	r3, 801b614 <_puts_r+0x10>
 801b610:	f7fe ffbe 	bl	801a590 <__sinit>
 801b614:	69ab      	ldr	r3, [r5, #24]
 801b616:	68ac      	ldr	r4, [r5, #8]
 801b618:	b913      	cbnz	r3, 801b620 <_puts_r+0x1c>
 801b61a:	4628      	mov	r0, r5
 801b61c:	f7fe ffb8 	bl	801a590 <__sinit>
 801b620:	4b2c      	ldr	r3, [pc, #176]	; (801b6d4 <_puts_r+0xd0>)
 801b622:	429c      	cmp	r4, r3
 801b624:	d120      	bne.n	801b668 <_puts_r+0x64>
 801b626:	686c      	ldr	r4, [r5, #4]
 801b628:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b62a:	07db      	lsls	r3, r3, #31
 801b62c:	d405      	bmi.n	801b63a <_puts_r+0x36>
 801b62e:	89a3      	ldrh	r3, [r4, #12]
 801b630:	0598      	lsls	r0, r3, #22
 801b632:	d402      	bmi.n	801b63a <_puts_r+0x36>
 801b634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b636:	f7ff f86e 	bl	801a716 <__retarget_lock_acquire_recursive>
 801b63a:	89a3      	ldrh	r3, [r4, #12]
 801b63c:	0719      	lsls	r1, r3, #28
 801b63e:	d51d      	bpl.n	801b67c <_puts_r+0x78>
 801b640:	6923      	ldr	r3, [r4, #16]
 801b642:	b1db      	cbz	r3, 801b67c <_puts_r+0x78>
 801b644:	3e01      	subs	r6, #1
 801b646:	68a3      	ldr	r3, [r4, #8]
 801b648:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b64c:	3b01      	subs	r3, #1
 801b64e:	60a3      	str	r3, [r4, #8]
 801b650:	bb39      	cbnz	r1, 801b6a2 <_puts_r+0x9e>
 801b652:	2b00      	cmp	r3, #0
 801b654:	da38      	bge.n	801b6c8 <_puts_r+0xc4>
 801b656:	4622      	mov	r2, r4
 801b658:	210a      	movs	r1, #10
 801b65a:	4628      	mov	r0, r5
 801b65c:	f001 f936 	bl	801c8cc <__swbuf_r>
 801b660:	3001      	adds	r0, #1
 801b662:	d011      	beq.n	801b688 <_puts_r+0x84>
 801b664:	250a      	movs	r5, #10
 801b666:	e011      	b.n	801b68c <_puts_r+0x88>
 801b668:	4b1b      	ldr	r3, [pc, #108]	; (801b6d8 <_puts_r+0xd4>)
 801b66a:	429c      	cmp	r4, r3
 801b66c:	d101      	bne.n	801b672 <_puts_r+0x6e>
 801b66e:	68ac      	ldr	r4, [r5, #8]
 801b670:	e7da      	b.n	801b628 <_puts_r+0x24>
 801b672:	4b1a      	ldr	r3, [pc, #104]	; (801b6dc <_puts_r+0xd8>)
 801b674:	429c      	cmp	r4, r3
 801b676:	bf08      	it	eq
 801b678:	68ec      	ldreq	r4, [r5, #12]
 801b67a:	e7d5      	b.n	801b628 <_puts_r+0x24>
 801b67c:	4621      	mov	r1, r4
 801b67e:	4628      	mov	r0, r5
 801b680:	f001 f988 	bl	801c994 <__swsetup_r>
 801b684:	2800      	cmp	r0, #0
 801b686:	d0dd      	beq.n	801b644 <_puts_r+0x40>
 801b688:	f04f 35ff 	mov.w	r5, #4294967295
 801b68c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b68e:	07da      	lsls	r2, r3, #31
 801b690:	d405      	bmi.n	801b69e <_puts_r+0x9a>
 801b692:	89a3      	ldrh	r3, [r4, #12]
 801b694:	059b      	lsls	r3, r3, #22
 801b696:	d402      	bmi.n	801b69e <_puts_r+0x9a>
 801b698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b69a:	f7ff f83d 	bl	801a718 <__retarget_lock_release_recursive>
 801b69e:	4628      	mov	r0, r5
 801b6a0:	bd70      	pop	{r4, r5, r6, pc}
 801b6a2:	2b00      	cmp	r3, #0
 801b6a4:	da04      	bge.n	801b6b0 <_puts_r+0xac>
 801b6a6:	69a2      	ldr	r2, [r4, #24]
 801b6a8:	429a      	cmp	r2, r3
 801b6aa:	dc06      	bgt.n	801b6ba <_puts_r+0xb6>
 801b6ac:	290a      	cmp	r1, #10
 801b6ae:	d004      	beq.n	801b6ba <_puts_r+0xb6>
 801b6b0:	6823      	ldr	r3, [r4, #0]
 801b6b2:	1c5a      	adds	r2, r3, #1
 801b6b4:	6022      	str	r2, [r4, #0]
 801b6b6:	7019      	strb	r1, [r3, #0]
 801b6b8:	e7c5      	b.n	801b646 <_puts_r+0x42>
 801b6ba:	4622      	mov	r2, r4
 801b6bc:	4628      	mov	r0, r5
 801b6be:	f001 f905 	bl	801c8cc <__swbuf_r>
 801b6c2:	3001      	adds	r0, #1
 801b6c4:	d1bf      	bne.n	801b646 <_puts_r+0x42>
 801b6c6:	e7df      	b.n	801b688 <_puts_r+0x84>
 801b6c8:	6823      	ldr	r3, [r4, #0]
 801b6ca:	250a      	movs	r5, #10
 801b6cc:	1c5a      	adds	r2, r3, #1
 801b6ce:	6022      	str	r2, [r4, #0]
 801b6d0:	701d      	strb	r5, [r3, #0]
 801b6d2:	e7db      	b.n	801b68c <_puts_r+0x88>
 801b6d4:	0802182c 	.word	0x0802182c
 801b6d8:	0802184c 	.word	0x0802184c
 801b6dc:	0802180c 	.word	0x0802180c

0801b6e0 <puts>:
 801b6e0:	4b02      	ldr	r3, [pc, #8]	; (801b6ec <puts+0xc>)
 801b6e2:	4601      	mov	r1, r0
 801b6e4:	6818      	ldr	r0, [r3, #0]
 801b6e6:	f7ff bf8d 	b.w	801b604 <_puts_r>
 801b6ea:	bf00      	nop
 801b6ec:	200001f8 	.word	0x200001f8

0801b6f0 <cleanup_glue>:
 801b6f0:	b538      	push	{r3, r4, r5, lr}
 801b6f2:	460c      	mov	r4, r1
 801b6f4:	6809      	ldr	r1, [r1, #0]
 801b6f6:	4605      	mov	r5, r0
 801b6f8:	b109      	cbz	r1, 801b6fe <cleanup_glue+0xe>
 801b6fa:	f7ff fff9 	bl	801b6f0 <cleanup_glue>
 801b6fe:	4621      	mov	r1, r4
 801b700:	4628      	mov	r0, r5
 801b702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b706:	f7ff b841 	b.w	801a78c <_free_r>
	...

0801b70c <_reclaim_reent>:
 801b70c:	4b2c      	ldr	r3, [pc, #176]	; (801b7c0 <_reclaim_reent+0xb4>)
 801b70e:	681b      	ldr	r3, [r3, #0]
 801b710:	4283      	cmp	r3, r0
 801b712:	b570      	push	{r4, r5, r6, lr}
 801b714:	4604      	mov	r4, r0
 801b716:	d051      	beq.n	801b7bc <_reclaim_reent+0xb0>
 801b718:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801b71a:	b143      	cbz	r3, 801b72e <_reclaim_reent+0x22>
 801b71c:	68db      	ldr	r3, [r3, #12]
 801b71e:	2b00      	cmp	r3, #0
 801b720:	d14a      	bne.n	801b7b8 <_reclaim_reent+0xac>
 801b722:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b724:	6819      	ldr	r1, [r3, #0]
 801b726:	b111      	cbz	r1, 801b72e <_reclaim_reent+0x22>
 801b728:	4620      	mov	r0, r4
 801b72a:	f7ff f82f 	bl	801a78c <_free_r>
 801b72e:	6961      	ldr	r1, [r4, #20]
 801b730:	b111      	cbz	r1, 801b738 <_reclaim_reent+0x2c>
 801b732:	4620      	mov	r0, r4
 801b734:	f7ff f82a 	bl	801a78c <_free_r>
 801b738:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b73a:	b111      	cbz	r1, 801b742 <_reclaim_reent+0x36>
 801b73c:	4620      	mov	r0, r4
 801b73e:	f7ff f825 	bl	801a78c <_free_r>
 801b742:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b744:	b111      	cbz	r1, 801b74c <_reclaim_reent+0x40>
 801b746:	4620      	mov	r0, r4
 801b748:	f7ff f820 	bl	801a78c <_free_r>
 801b74c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801b74e:	b111      	cbz	r1, 801b756 <_reclaim_reent+0x4a>
 801b750:	4620      	mov	r0, r4
 801b752:	f7ff f81b 	bl	801a78c <_free_r>
 801b756:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801b758:	b111      	cbz	r1, 801b760 <_reclaim_reent+0x54>
 801b75a:	4620      	mov	r0, r4
 801b75c:	f7ff f816 	bl	801a78c <_free_r>
 801b760:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801b762:	b111      	cbz	r1, 801b76a <_reclaim_reent+0x5e>
 801b764:	4620      	mov	r0, r4
 801b766:	f7ff f811 	bl	801a78c <_free_r>
 801b76a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801b76c:	b111      	cbz	r1, 801b774 <_reclaim_reent+0x68>
 801b76e:	4620      	mov	r0, r4
 801b770:	f7ff f80c 	bl	801a78c <_free_r>
 801b774:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b776:	b111      	cbz	r1, 801b77e <_reclaim_reent+0x72>
 801b778:	4620      	mov	r0, r4
 801b77a:	f7ff f807 	bl	801a78c <_free_r>
 801b77e:	69a3      	ldr	r3, [r4, #24]
 801b780:	b1e3      	cbz	r3, 801b7bc <_reclaim_reent+0xb0>
 801b782:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b784:	4620      	mov	r0, r4
 801b786:	4798      	blx	r3
 801b788:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801b78a:	b1b9      	cbz	r1, 801b7bc <_reclaim_reent+0xb0>
 801b78c:	4620      	mov	r0, r4
 801b78e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b792:	f7ff bfad 	b.w	801b6f0 <cleanup_glue>
 801b796:	5949      	ldr	r1, [r1, r5]
 801b798:	b941      	cbnz	r1, 801b7ac <_reclaim_reent+0xa0>
 801b79a:	3504      	adds	r5, #4
 801b79c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b79e:	2d80      	cmp	r5, #128	; 0x80
 801b7a0:	68d9      	ldr	r1, [r3, #12]
 801b7a2:	d1f8      	bne.n	801b796 <_reclaim_reent+0x8a>
 801b7a4:	4620      	mov	r0, r4
 801b7a6:	f7fe fff1 	bl	801a78c <_free_r>
 801b7aa:	e7ba      	b.n	801b722 <_reclaim_reent+0x16>
 801b7ac:	680e      	ldr	r6, [r1, #0]
 801b7ae:	4620      	mov	r0, r4
 801b7b0:	f7fe ffec 	bl	801a78c <_free_r>
 801b7b4:	4631      	mov	r1, r6
 801b7b6:	e7ef      	b.n	801b798 <_reclaim_reent+0x8c>
 801b7b8:	2500      	movs	r5, #0
 801b7ba:	e7ef      	b.n	801b79c <_reclaim_reent+0x90>
 801b7bc:	bd70      	pop	{r4, r5, r6, pc}
 801b7be:	bf00      	nop
 801b7c0:	200001f8 	.word	0x200001f8

0801b7c4 <_sbrk_r>:
 801b7c4:	b538      	push	{r3, r4, r5, lr}
 801b7c6:	4d06      	ldr	r5, [pc, #24]	; (801b7e0 <_sbrk_r+0x1c>)
 801b7c8:	2300      	movs	r3, #0
 801b7ca:	4604      	mov	r4, r0
 801b7cc:	4608      	mov	r0, r1
 801b7ce:	602b      	str	r3, [r5, #0]
 801b7d0:	f7e7 fd3e 	bl	8003250 <_sbrk>
 801b7d4:	1c43      	adds	r3, r0, #1
 801b7d6:	d102      	bne.n	801b7de <_sbrk_r+0x1a>
 801b7d8:	682b      	ldr	r3, [r5, #0]
 801b7da:	b103      	cbz	r3, 801b7de <_sbrk_r+0x1a>
 801b7dc:	6023      	str	r3, [r4, #0]
 801b7de:	bd38      	pop	{r3, r4, r5, pc}
 801b7e0:	20008fb0 	.word	0x20008fb0

0801b7e4 <nanf>:
 801b7e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b7ec <nanf+0x8>
 801b7e8:	4770      	bx	lr
 801b7ea:	bf00      	nop
 801b7ec:	7fc00000 	.word	0x7fc00000

0801b7f0 <_raise_r>:
 801b7f0:	291f      	cmp	r1, #31
 801b7f2:	b538      	push	{r3, r4, r5, lr}
 801b7f4:	4604      	mov	r4, r0
 801b7f6:	460d      	mov	r5, r1
 801b7f8:	d904      	bls.n	801b804 <_raise_r+0x14>
 801b7fa:	2316      	movs	r3, #22
 801b7fc:	6003      	str	r3, [r0, #0]
 801b7fe:	f04f 30ff 	mov.w	r0, #4294967295
 801b802:	bd38      	pop	{r3, r4, r5, pc}
 801b804:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b806:	b112      	cbz	r2, 801b80e <_raise_r+0x1e>
 801b808:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b80c:	b94b      	cbnz	r3, 801b822 <_raise_r+0x32>
 801b80e:	4620      	mov	r0, r4
 801b810:	f000 f830 	bl	801b874 <_getpid_r>
 801b814:	462a      	mov	r2, r5
 801b816:	4601      	mov	r1, r0
 801b818:	4620      	mov	r0, r4
 801b81a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b81e:	f000 b817 	b.w	801b850 <_kill_r>
 801b822:	2b01      	cmp	r3, #1
 801b824:	d00a      	beq.n	801b83c <_raise_r+0x4c>
 801b826:	1c59      	adds	r1, r3, #1
 801b828:	d103      	bne.n	801b832 <_raise_r+0x42>
 801b82a:	2316      	movs	r3, #22
 801b82c:	6003      	str	r3, [r0, #0]
 801b82e:	2001      	movs	r0, #1
 801b830:	e7e7      	b.n	801b802 <_raise_r+0x12>
 801b832:	2400      	movs	r4, #0
 801b834:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b838:	4628      	mov	r0, r5
 801b83a:	4798      	blx	r3
 801b83c:	2000      	movs	r0, #0
 801b83e:	e7e0      	b.n	801b802 <_raise_r+0x12>

0801b840 <raise>:
 801b840:	4b02      	ldr	r3, [pc, #8]	; (801b84c <raise+0xc>)
 801b842:	4601      	mov	r1, r0
 801b844:	6818      	ldr	r0, [r3, #0]
 801b846:	f7ff bfd3 	b.w	801b7f0 <_raise_r>
 801b84a:	bf00      	nop
 801b84c:	200001f8 	.word	0x200001f8

0801b850 <_kill_r>:
 801b850:	b538      	push	{r3, r4, r5, lr}
 801b852:	4d07      	ldr	r5, [pc, #28]	; (801b870 <_kill_r+0x20>)
 801b854:	2300      	movs	r3, #0
 801b856:	4604      	mov	r4, r0
 801b858:	4608      	mov	r0, r1
 801b85a:	4611      	mov	r1, r2
 801b85c:	602b      	str	r3, [r5, #0]
 801b85e:	f7e7 fc6f 	bl	8003140 <_kill>
 801b862:	1c43      	adds	r3, r0, #1
 801b864:	d102      	bne.n	801b86c <_kill_r+0x1c>
 801b866:	682b      	ldr	r3, [r5, #0]
 801b868:	b103      	cbz	r3, 801b86c <_kill_r+0x1c>
 801b86a:	6023      	str	r3, [r4, #0]
 801b86c:	bd38      	pop	{r3, r4, r5, pc}
 801b86e:	bf00      	nop
 801b870:	20008fb0 	.word	0x20008fb0

0801b874 <_getpid_r>:
 801b874:	f7e7 bc5c 	b.w	8003130 <_getpid>

0801b878 <siprintf>:
 801b878:	b40e      	push	{r1, r2, r3}
 801b87a:	b500      	push	{lr}
 801b87c:	b09c      	sub	sp, #112	; 0x70
 801b87e:	ab1d      	add	r3, sp, #116	; 0x74
 801b880:	9002      	str	r0, [sp, #8]
 801b882:	9006      	str	r0, [sp, #24]
 801b884:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b888:	4809      	ldr	r0, [pc, #36]	; (801b8b0 <siprintf+0x38>)
 801b88a:	9107      	str	r1, [sp, #28]
 801b88c:	9104      	str	r1, [sp, #16]
 801b88e:	4909      	ldr	r1, [pc, #36]	; (801b8b4 <siprintf+0x3c>)
 801b890:	f853 2b04 	ldr.w	r2, [r3], #4
 801b894:	9105      	str	r1, [sp, #20]
 801b896:	6800      	ldr	r0, [r0, #0]
 801b898:	9301      	str	r3, [sp, #4]
 801b89a:	a902      	add	r1, sp, #8
 801b89c:	f003 f9b8 	bl	801ec10 <_svfiprintf_r>
 801b8a0:	9b02      	ldr	r3, [sp, #8]
 801b8a2:	2200      	movs	r2, #0
 801b8a4:	701a      	strb	r2, [r3, #0]
 801b8a6:	b01c      	add	sp, #112	; 0x70
 801b8a8:	f85d eb04 	ldr.w	lr, [sp], #4
 801b8ac:	b003      	add	sp, #12
 801b8ae:	4770      	bx	lr
 801b8b0:	200001f8 	.word	0x200001f8
 801b8b4:	ffff0208 	.word	0xffff0208

0801b8b8 <siscanf>:
 801b8b8:	b40e      	push	{r1, r2, r3}
 801b8ba:	b510      	push	{r4, lr}
 801b8bc:	b09f      	sub	sp, #124	; 0x7c
 801b8be:	ac21      	add	r4, sp, #132	; 0x84
 801b8c0:	f44f 7101 	mov.w	r1, #516	; 0x204
 801b8c4:	f854 2b04 	ldr.w	r2, [r4], #4
 801b8c8:	9201      	str	r2, [sp, #4]
 801b8ca:	f8ad 101c 	strh.w	r1, [sp, #28]
 801b8ce:	9004      	str	r0, [sp, #16]
 801b8d0:	9008      	str	r0, [sp, #32]
 801b8d2:	f7e4 fc8d 	bl	80001f0 <strlen>
 801b8d6:	4b0c      	ldr	r3, [pc, #48]	; (801b908 <siscanf+0x50>)
 801b8d8:	9005      	str	r0, [sp, #20]
 801b8da:	9009      	str	r0, [sp, #36]	; 0x24
 801b8dc:	930d      	str	r3, [sp, #52]	; 0x34
 801b8de:	480b      	ldr	r0, [pc, #44]	; (801b90c <siscanf+0x54>)
 801b8e0:	9a01      	ldr	r2, [sp, #4]
 801b8e2:	6800      	ldr	r0, [r0, #0]
 801b8e4:	9403      	str	r4, [sp, #12]
 801b8e6:	2300      	movs	r3, #0
 801b8e8:	9311      	str	r3, [sp, #68]	; 0x44
 801b8ea:	9316      	str	r3, [sp, #88]	; 0x58
 801b8ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b8f0:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b8f4:	a904      	add	r1, sp, #16
 801b8f6:	4623      	mov	r3, r4
 801b8f8:	f003 fae4 	bl	801eec4 <__ssvfiscanf_r>
 801b8fc:	b01f      	add	sp, #124	; 0x7c
 801b8fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b902:	b003      	add	sp, #12
 801b904:	4770      	bx	lr
 801b906:	bf00      	nop
 801b908:	0801b933 	.word	0x0801b933
 801b90c:	200001f8 	.word	0x200001f8

0801b910 <__sread>:
 801b910:	b510      	push	{r4, lr}
 801b912:	460c      	mov	r4, r1
 801b914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b918:	f003 fef2 	bl	801f700 <_read_r>
 801b91c:	2800      	cmp	r0, #0
 801b91e:	bfab      	itete	ge
 801b920:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b922:	89a3      	ldrhlt	r3, [r4, #12]
 801b924:	181b      	addge	r3, r3, r0
 801b926:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b92a:	bfac      	ite	ge
 801b92c:	6563      	strge	r3, [r4, #84]	; 0x54
 801b92e:	81a3      	strhlt	r3, [r4, #12]
 801b930:	bd10      	pop	{r4, pc}

0801b932 <__seofread>:
 801b932:	2000      	movs	r0, #0
 801b934:	4770      	bx	lr

0801b936 <__swrite>:
 801b936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b93a:	461f      	mov	r7, r3
 801b93c:	898b      	ldrh	r3, [r1, #12]
 801b93e:	05db      	lsls	r3, r3, #23
 801b940:	4605      	mov	r5, r0
 801b942:	460c      	mov	r4, r1
 801b944:	4616      	mov	r6, r2
 801b946:	d505      	bpl.n	801b954 <__swrite+0x1e>
 801b948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b94c:	2302      	movs	r3, #2
 801b94e:	2200      	movs	r2, #0
 801b950:	f002 fb7e 	bl	801e050 <_lseek_r>
 801b954:	89a3      	ldrh	r3, [r4, #12]
 801b956:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b95a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b95e:	81a3      	strh	r3, [r4, #12]
 801b960:	4632      	mov	r2, r6
 801b962:	463b      	mov	r3, r7
 801b964:	4628      	mov	r0, r5
 801b966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b96a:	f001 b801 	b.w	801c970 <_write_r>

0801b96e <__sseek>:
 801b96e:	b510      	push	{r4, lr}
 801b970:	460c      	mov	r4, r1
 801b972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b976:	f002 fb6b 	bl	801e050 <_lseek_r>
 801b97a:	1c43      	adds	r3, r0, #1
 801b97c:	89a3      	ldrh	r3, [r4, #12]
 801b97e:	bf15      	itete	ne
 801b980:	6560      	strne	r0, [r4, #84]	; 0x54
 801b982:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b986:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b98a:	81a3      	strheq	r3, [r4, #12]
 801b98c:	bf18      	it	ne
 801b98e:	81a3      	strhne	r3, [r4, #12]
 801b990:	bd10      	pop	{r4, pc}

0801b992 <__sclose>:
 801b992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b996:	f001 b889 	b.w	801caac <_close_r>

0801b99a <strcpy>:
 801b99a:	4603      	mov	r3, r0
 801b99c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b9a0:	f803 2b01 	strb.w	r2, [r3], #1
 801b9a4:	2a00      	cmp	r2, #0
 801b9a6:	d1f9      	bne.n	801b99c <strcpy+0x2>
 801b9a8:	4770      	bx	lr

0801b9aa <strncmp>:
 801b9aa:	b510      	push	{r4, lr}
 801b9ac:	b16a      	cbz	r2, 801b9ca <strncmp+0x20>
 801b9ae:	3901      	subs	r1, #1
 801b9b0:	1884      	adds	r4, r0, r2
 801b9b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 801b9b6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801b9ba:	4293      	cmp	r3, r2
 801b9bc:	d103      	bne.n	801b9c6 <strncmp+0x1c>
 801b9be:	42a0      	cmp	r0, r4
 801b9c0:	d001      	beq.n	801b9c6 <strncmp+0x1c>
 801b9c2:	2b00      	cmp	r3, #0
 801b9c4:	d1f5      	bne.n	801b9b2 <strncmp+0x8>
 801b9c6:	1a98      	subs	r0, r3, r2
 801b9c8:	bd10      	pop	{r4, pc}
 801b9ca:	4610      	mov	r0, r2
 801b9cc:	e7fc      	b.n	801b9c8 <strncmp+0x1e>

0801b9ce <sulp>:
 801b9ce:	b570      	push	{r4, r5, r6, lr}
 801b9d0:	4604      	mov	r4, r0
 801b9d2:	460d      	mov	r5, r1
 801b9d4:	ec45 4b10 	vmov	d0, r4, r5
 801b9d8:	4616      	mov	r6, r2
 801b9da:	f002 ff39 	bl	801e850 <__ulp>
 801b9de:	ec51 0b10 	vmov	r0, r1, d0
 801b9e2:	b17e      	cbz	r6, 801ba04 <sulp+0x36>
 801b9e4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801b9e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b9ec:	2b00      	cmp	r3, #0
 801b9ee:	dd09      	ble.n	801ba04 <sulp+0x36>
 801b9f0:	051b      	lsls	r3, r3, #20
 801b9f2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801b9f6:	2400      	movs	r4, #0
 801b9f8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801b9fc:	4622      	mov	r2, r4
 801b9fe:	462b      	mov	r3, r5
 801ba00:	f7e4 fe0a 	bl	8000618 <__aeabi_dmul>
 801ba04:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ba08 <_strtod_l>:
 801ba08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba0c:	b0a3      	sub	sp, #140	; 0x8c
 801ba0e:	461f      	mov	r7, r3
 801ba10:	2300      	movs	r3, #0
 801ba12:	931e      	str	r3, [sp, #120]	; 0x78
 801ba14:	4ba4      	ldr	r3, [pc, #656]	; (801bca8 <_strtod_l+0x2a0>)
 801ba16:	9219      	str	r2, [sp, #100]	; 0x64
 801ba18:	681b      	ldr	r3, [r3, #0]
 801ba1a:	9307      	str	r3, [sp, #28]
 801ba1c:	4604      	mov	r4, r0
 801ba1e:	4618      	mov	r0, r3
 801ba20:	4688      	mov	r8, r1
 801ba22:	f7e4 fbe5 	bl	80001f0 <strlen>
 801ba26:	f04f 0a00 	mov.w	sl, #0
 801ba2a:	4605      	mov	r5, r0
 801ba2c:	f04f 0b00 	mov.w	fp, #0
 801ba30:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801ba34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ba36:	781a      	ldrb	r2, [r3, #0]
 801ba38:	2a2b      	cmp	r2, #43	; 0x2b
 801ba3a:	d04c      	beq.n	801bad6 <_strtod_l+0xce>
 801ba3c:	d839      	bhi.n	801bab2 <_strtod_l+0xaa>
 801ba3e:	2a0d      	cmp	r2, #13
 801ba40:	d832      	bhi.n	801baa8 <_strtod_l+0xa0>
 801ba42:	2a08      	cmp	r2, #8
 801ba44:	d832      	bhi.n	801baac <_strtod_l+0xa4>
 801ba46:	2a00      	cmp	r2, #0
 801ba48:	d03c      	beq.n	801bac4 <_strtod_l+0xbc>
 801ba4a:	2300      	movs	r3, #0
 801ba4c:	930e      	str	r3, [sp, #56]	; 0x38
 801ba4e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801ba50:	7833      	ldrb	r3, [r6, #0]
 801ba52:	2b30      	cmp	r3, #48	; 0x30
 801ba54:	f040 80b4 	bne.w	801bbc0 <_strtod_l+0x1b8>
 801ba58:	7873      	ldrb	r3, [r6, #1]
 801ba5a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801ba5e:	2b58      	cmp	r3, #88	; 0x58
 801ba60:	d16c      	bne.n	801bb3c <_strtod_l+0x134>
 801ba62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ba64:	9301      	str	r3, [sp, #4]
 801ba66:	ab1e      	add	r3, sp, #120	; 0x78
 801ba68:	9702      	str	r7, [sp, #8]
 801ba6a:	9300      	str	r3, [sp, #0]
 801ba6c:	4a8f      	ldr	r2, [pc, #572]	; (801bcac <_strtod_l+0x2a4>)
 801ba6e:	ab1f      	add	r3, sp, #124	; 0x7c
 801ba70:	a91d      	add	r1, sp, #116	; 0x74
 801ba72:	4620      	mov	r0, r4
 801ba74:	f001 ffe0 	bl	801da38 <__gethex>
 801ba78:	f010 0707 	ands.w	r7, r0, #7
 801ba7c:	4605      	mov	r5, r0
 801ba7e:	d005      	beq.n	801ba8c <_strtod_l+0x84>
 801ba80:	2f06      	cmp	r7, #6
 801ba82:	d12a      	bne.n	801bada <_strtod_l+0xd2>
 801ba84:	3601      	adds	r6, #1
 801ba86:	2300      	movs	r3, #0
 801ba88:	961d      	str	r6, [sp, #116]	; 0x74
 801ba8a:	930e      	str	r3, [sp, #56]	; 0x38
 801ba8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ba8e:	2b00      	cmp	r3, #0
 801ba90:	f040 8596 	bne.w	801c5c0 <_strtod_l+0xbb8>
 801ba94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ba96:	b1db      	cbz	r3, 801bad0 <_strtod_l+0xc8>
 801ba98:	4652      	mov	r2, sl
 801ba9a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801ba9e:	ec43 2b10 	vmov	d0, r2, r3
 801baa2:	b023      	add	sp, #140	; 0x8c
 801baa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801baa8:	2a20      	cmp	r2, #32
 801baaa:	d1ce      	bne.n	801ba4a <_strtod_l+0x42>
 801baac:	3301      	adds	r3, #1
 801baae:	931d      	str	r3, [sp, #116]	; 0x74
 801bab0:	e7c0      	b.n	801ba34 <_strtod_l+0x2c>
 801bab2:	2a2d      	cmp	r2, #45	; 0x2d
 801bab4:	d1c9      	bne.n	801ba4a <_strtod_l+0x42>
 801bab6:	2201      	movs	r2, #1
 801bab8:	920e      	str	r2, [sp, #56]	; 0x38
 801baba:	1c5a      	adds	r2, r3, #1
 801babc:	921d      	str	r2, [sp, #116]	; 0x74
 801babe:	785b      	ldrb	r3, [r3, #1]
 801bac0:	2b00      	cmp	r3, #0
 801bac2:	d1c4      	bne.n	801ba4e <_strtod_l+0x46>
 801bac4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801bac6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801baca:	2b00      	cmp	r3, #0
 801bacc:	f040 8576 	bne.w	801c5bc <_strtod_l+0xbb4>
 801bad0:	4652      	mov	r2, sl
 801bad2:	465b      	mov	r3, fp
 801bad4:	e7e3      	b.n	801ba9e <_strtod_l+0x96>
 801bad6:	2200      	movs	r2, #0
 801bad8:	e7ee      	b.n	801bab8 <_strtod_l+0xb0>
 801bada:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801badc:	b13a      	cbz	r2, 801baee <_strtod_l+0xe6>
 801bade:	2135      	movs	r1, #53	; 0x35
 801bae0:	a820      	add	r0, sp, #128	; 0x80
 801bae2:	f002 ffc0 	bl	801ea66 <__copybits>
 801bae6:	991e      	ldr	r1, [sp, #120]	; 0x78
 801bae8:	4620      	mov	r0, r4
 801baea:	f002 fb85 	bl	801e1f8 <_Bfree>
 801baee:	3f01      	subs	r7, #1
 801baf0:	2f05      	cmp	r7, #5
 801baf2:	d807      	bhi.n	801bb04 <_strtod_l+0xfc>
 801baf4:	e8df f007 	tbb	[pc, r7]
 801baf8:	1d180b0e 	.word	0x1d180b0e
 801bafc:	030e      	.short	0x030e
 801bafe:	f04f 0b00 	mov.w	fp, #0
 801bb02:	46da      	mov	sl, fp
 801bb04:	0728      	lsls	r0, r5, #28
 801bb06:	d5c1      	bpl.n	801ba8c <_strtod_l+0x84>
 801bb08:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801bb0c:	e7be      	b.n	801ba8c <_strtod_l+0x84>
 801bb0e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801bb12:	e7f7      	b.n	801bb04 <_strtod_l+0xfc>
 801bb14:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801bb18:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801bb1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801bb1e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801bb22:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801bb26:	e7ed      	b.n	801bb04 <_strtod_l+0xfc>
 801bb28:	f8df b184 	ldr.w	fp, [pc, #388]	; 801bcb0 <_strtod_l+0x2a8>
 801bb2c:	f04f 0a00 	mov.w	sl, #0
 801bb30:	e7e8      	b.n	801bb04 <_strtod_l+0xfc>
 801bb32:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801bb36:	f04f 3aff 	mov.w	sl, #4294967295
 801bb3a:	e7e3      	b.n	801bb04 <_strtod_l+0xfc>
 801bb3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bb3e:	1c5a      	adds	r2, r3, #1
 801bb40:	921d      	str	r2, [sp, #116]	; 0x74
 801bb42:	785b      	ldrb	r3, [r3, #1]
 801bb44:	2b30      	cmp	r3, #48	; 0x30
 801bb46:	d0f9      	beq.n	801bb3c <_strtod_l+0x134>
 801bb48:	2b00      	cmp	r3, #0
 801bb4a:	d09f      	beq.n	801ba8c <_strtod_l+0x84>
 801bb4c:	2301      	movs	r3, #1
 801bb4e:	f04f 0900 	mov.w	r9, #0
 801bb52:	9304      	str	r3, [sp, #16]
 801bb54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bb56:	930a      	str	r3, [sp, #40]	; 0x28
 801bb58:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801bb5c:	464f      	mov	r7, r9
 801bb5e:	220a      	movs	r2, #10
 801bb60:	981d      	ldr	r0, [sp, #116]	; 0x74
 801bb62:	7806      	ldrb	r6, [r0, #0]
 801bb64:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801bb68:	b2d9      	uxtb	r1, r3
 801bb6a:	2909      	cmp	r1, #9
 801bb6c:	d92a      	bls.n	801bbc4 <_strtod_l+0x1bc>
 801bb6e:	9907      	ldr	r1, [sp, #28]
 801bb70:	462a      	mov	r2, r5
 801bb72:	f7ff ff1a 	bl	801b9aa <strncmp>
 801bb76:	b398      	cbz	r0, 801bbe0 <_strtod_l+0x1d8>
 801bb78:	2000      	movs	r0, #0
 801bb7a:	4633      	mov	r3, r6
 801bb7c:	463d      	mov	r5, r7
 801bb7e:	9007      	str	r0, [sp, #28]
 801bb80:	4602      	mov	r2, r0
 801bb82:	2b65      	cmp	r3, #101	; 0x65
 801bb84:	d001      	beq.n	801bb8a <_strtod_l+0x182>
 801bb86:	2b45      	cmp	r3, #69	; 0x45
 801bb88:	d118      	bne.n	801bbbc <_strtod_l+0x1b4>
 801bb8a:	b91d      	cbnz	r5, 801bb94 <_strtod_l+0x18c>
 801bb8c:	9b04      	ldr	r3, [sp, #16]
 801bb8e:	4303      	orrs	r3, r0
 801bb90:	d098      	beq.n	801bac4 <_strtod_l+0xbc>
 801bb92:	2500      	movs	r5, #0
 801bb94:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801bb98:	f108 0301 	add.w	r3, r8, #1
 801bb9c:	931d      	str	r3, [sp, #116]	; 0x74
 801bb9e:	f898 3001 	ldrb.w	r3, [r8, #1]
 801bba2:	2b2b      	cmp	r3, #43	; 0x2b
 801bba4:	d075      	beq.n	801bc92 <_strtod_l+0x28a>
 801bba6:	2b2d      	cmp	r3, #45	; 0x2d
 801bba8:	d07b      	beq.n	801bca2 <_strtod_l+0x29a>
 801bbaa:	f04f 0c00 	mov.w	ip, #0
 801bbae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801bbb2:	2909      	cmp	r1, #9
 801bbb4:	f240 8082 	bls.w	801bcbc <_strtod_l+0x2b4>
 801bbb8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801bbbc:	2600      	movs	r6, #0
 801bbbe:	e09d      	b.n	801bcfc <_strtod_l+0x2f4>
 801bbc0:	2300      	movs	r3, #0
 801bbc2:	e7c4      	b.n	801bb4e <_strtod_l+0x146>
 801bbc4:	2f08      	cmp	r7, #8
 801bbc6:	bfd8      	it	le
 801bbc8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801bbca:	f100 0001 	add.w	r0, r0, #1
 801bbce:	bfda      	itte	le
 801bbd0:	fb02 3301 	mlale	r3, r2, r1, r3
 801bbd4:	9309      	strle	r3, [sp, #36]	; 0x24
 801bbd6:	fb02 3909 	mlagt	r9, r2, r9, r3
 801bbda:	3701      	adds	r7, #1
 801bbdc:	901d      	str	r0, [sp, #116]	; 0x74
 801bbde:	e7bf      	b.n	801bb60 <_strtod_l+0x158>
 801bbe0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bbe2:	195a      	adds	r2, r3, r5
 801bbe4:	921d      	str	r2, [sp, #116]	; 0x74
 801bbe6:	5d5b      	ldrb	r3, [r3, r5]
 801bbe8:	2f00      	cmp	r7, #0
 801bbea:	d037      	beq.n	801bc5c <_strtod_l+0x254>
 801bbec:	9007      	str	r0, [sp, #28]
 801bbee:	463d      	mov	r5, r7
 801bbf0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801bbf4:	2a09      	cmp	r2, #9
 801bbf6:	d912      	bls.n	801bc1e <_strtod_l+0x216>
 801bbf8:	2201      	movs	r2, #1
 801bbfa:	e7c2      	b.n	801bb82 <_strtod_l+0x17a>
 801bbfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bbfe:	1c5a      	adds	r2, r3, #1
 801bc00:	921d      	str	r2, [sp, #116]	; 0x74
 801bc02:	785b      	ldrb	r3, [r3, #1]
 801bc04:	3001      	adds	r0, #1
 801bc06:	2b30      	cmp	r3, #48	; 0x30
 801bc08:	d0f8      	beq.n	801bbfc <_strtod_l+0x1f4>
 801bc0a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801bc0e:	2a08      	cmp	r2, #8
 801bc10:	f200 84db 	bhi.w	801c5ca <_strtod_l+0xbc2>
 801bc14:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801bc16:	9007      	str	r0, [sp, #28]
 801bc18:	2000      	movs	r0, #0
 801bc1a:	920a      	str	r2, [sp, #40]	; 0x28
 801bc1c:	4605      	mov	r5, r0
 801bc1e:	3b30      	subs	r3, #48	; 0x30
 801bc20:	f100 0201 	add.w	r2, r0, #1
 801bc24:	d014      	beq.n	801bc50 <_strtod_l+0x248>
 801bc26:	9907      	ldr	r1, [sp, #28]
 801bc28:	4411      	add	r1, r2
 801bc2a:	9107      	str	r1, [sp, #28]
 801bc2c:	462a      	mov	r2, r5
 801bc2e:	eb00 0e05 	add.w	lr, r0, r5
 801bc32:	210a      	movs	r1, #10
 801bc34:	4572      	cmp	r2, lr
 801bc36:	d113      	bne.n	801bc60 <_strtod_l+0x258>
 801bc38:	182a      	adds	r2, r5, r0
 801bc3a:	2a08      	cmp	r2, #8
 801bc3c:	f105 0501 	add.w	r5, r5, #1
 801bc40:	4405      	add	r5, r0
 801bc42:	dc1c      	bgt.n	801bc7e <_strtod_l+0x276>
 801bc44:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bc46:	220a      	movs	r2, #10
 801bc48:	fb02 3301 	mla	r3, r2, r1, r3
 801bc4c:	9309      	str	r3, [sp, #36]	; 0x24
 801bc4e:	2200      	movs	r2, #0
 801bc50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bc52:	1c59      	adds	r1, r3, #1
 801bc54:	911d      	str	r1, [sp, #116]	; 0x74
 801bc56:	785b      	ldrb	r3, [r3, #1]
 801bc58:	4610      	mov	r0, r2
 801bc5a:	e7c9      	b.n	801bbf0 <_strtod_l+0x1e8>
 801bc5c:	4638      	mov	r0, r7
 801bc5e:	e7d2      	b.n	801bc06 <_strtod_l+0x1fe>
 801bc60:	2a08      	cmp	r2, #8
 801bc62:	dc04      	bgt.n	801bc6e <_strtod_l+0x266>
 801bc64:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801bc66:	434e      	muls	r6, r1
 801bc68:	9609      	str	r6, [sp, #36]	; 0x24
 801bc6a:	3201      	adds	r2, #1
 801bc6c:	e7e2      	b.n	801bc34 <_strtod_l+0x22c>
 801bc6e:	f102 0c01 	add.w	ip, r2, #1
 801bc72:	f1bc 0f10 	cmp.w	ip, #16
 801bc76:	bfd8      	it	le
 801bc78:	fb01 f909 	mulle.w	r9, r1, r9
 801bc7c:	e7f5      	b.n	801bc6a <_strtod_l+0x262>
 801bc7e:	2d10      	cmp	r5, #16
 801bc80:	bfdc      	itt	le
 801bc82:	220a      	movle	r2, #10
 801bc84:	fb02 3909 	mlale	r9, r2, r9, r3
 801bc88:	e7e1      	b.n	801bc4e <_strtod_l+0x246>
 801bc8a:	2300      	movs	r3, #0
 801bc8c:	9307      	str	r3, [sp, #28]
 801bc8e:	2201      	movs	r2, #1
 801bc90:	e77c      	b.n	801bb8c <_strtod_l+0x184>
 801bc92:	f04f 0c00 	mov.w	ip, #0
 801bc96:	f108 0302 	add.w	r3, r8, #2
 801bc9a:	931d      	str	r3, [sp, #116]	; 0x74
 801bc9c:	f898 3002 	ldrb.w	r3, [r8, #2]
 801bca0:	e785      	b.n	801bbae <_strtod_l+0x1a6>
 801bca2:	f04f 0c01 	mov.w	ip, #1
 801bca6:	e7f6      	b.n	801bc96 <_strtod_l+0x28e>
 801bca8:	08021a34 	.word	0x08021a34
 801bcac:	080218a8 	.word	0x080218a8
 801bcb0:	7ff00000 	.word	0x7ff00000
 801bcb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bcb6:	1c59      	adds	r1, r3, #1
 801bcb8:	911d      	str	r1, [sp, #116]	; 0x74
 801bcba:	785b      	ldrb	r3, [r3, #1]
 801bcbc:	2b30      	cmp	r3, #48	; 0x30
 801bcbe:	d0f9      	beq.n	801bcb4 <_strtod_l+0x2ac>
 801bcc0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801bcc4:	2908      	cmp	r1, #8
 801bcc6:	f63f af79 	bhi.w	801bbbc <_strtod_l+0x1b4>
 801bcca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801bcce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bcd0:	9308      	str	r3, [sp, #32]
 801bcd2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bcd4:	1c59      	adds	r1, r3, #1
 801bcd6:	911d      	str	r1, [sp, #116]	; 0x74
 801bcd8:	785b      	ldrb	r3, [r3, #1]
 801bcda:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801bcde:	2e09      	cmp	r6, #9
 801bce0:	d937      	bls.n	801bd52 <_strtod_l+0x34a>
 801bce2:	9e08      	ldr	r6, [sp, #32]
 801bce4:	1b89      	subs	r1, r1, r6
 801bce6:	2908      	cmp	r1, #8
 801bce8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801bcec:	dc02      	bgt.n	801bcf4 <_strtod_l+0x2ec>
 801bcee:	4576      	cmp	r6, lr
 801bcf0:	bfa8      	it	ge
 801bcf2:	4676      	movge	r6, lr
 801bcf4:	f1bc 0f00 	cmp.w	ip, #0
 801bcf8:	d000      	beq.n	801bcfc <_strtod_l+0x2f4>
 801bcfa:	4276      	negs	r6, r6
 801bcfc:	2d00      	cmp	r5, #0
 801bcfe:	d14f      	bne.n	801bda0 <_strtod_l+0x398>
 801bd00:	9904      	ldr	r1, [sp, #16]
 801bd02:	4301      	orrs	r1, r0
 801bd04:	f47f aec2 	bne.w	801ba8c <_strtod_l+0x84>
 801bd08:	2a00      	cmp	r2, #0
 801bd0a:	f47f aedb 	bne.w	801bac4 <_strtod_l+0xbc>
 801bd0e:	2b69      	cmp	r3, #105	; 0x69
 801bd10:	d027      	beq.n	801bd62 <_strtod_l+0x35a>
 801bd12:	dc24      	bgt.n	801bd5e <_strtod_l+0x356>
 801bd14:	2b49      	cmp	r3, #73	; 0x49
 801bd16:	d024      	beq.n	801bd62 <_strtod_l+0x35a>
 801bd18:	2b4e      	cmp	r3, #78	; 0x4e
 801bd1a:	f47f aed3 	bne.w	801bac4 <_strtod_l+0xbc>
 801bd1e:	499e      	ldr	r1, [pc, #632]	; (801bf98 <_strtod_l+0x590>)
 801bd20:	a81d      	add	r0, sp, #116	; 0x74
 801bd22:	f002 f8e1 	bl	801dee8 <__match>
 801bd26:	2800      	cmp	r0, #0
 801bd28:	f43f aecc 	beq.w	801bac4 <_strtod_l+0xbc>
 801bd2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bd2e:	781b      	ldrb	r3, [r3, #0]
 801bd30:	2b28      	cmp	r3, #40	; 0x28
 801bd32:	d12d      	bne.n	801bd90 <_strtod_l+0x388>
 801bd34:	4999      	ldr	r1, [pc, #612]	; (801bf9c <_strtod_l+0x594>)
 801bd36:	aa20      	add	r2, sp, #128	; 0x80
 801bd38:	a81d      	add	r0, sp, #116	; 0x74
 801bd3a:	f002 f8e9 	bl	801df10 <__hexnan>
 801bd3e:	2805      	cmp	r0, #5
 801bd40:	d126      	bne.n	801bd90 <_strtod_l+0x388>
 801bd42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bd44:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801bd48:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801bd4c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801bd50:	e69c      	b.n	801ba8c <_strtod_l+0x84>
 801bd52:	210a      	movs	r1, #10
 801bd54:	fb01 3e0e 	mla	lr, r1, lr, r3
 801bd58:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801bd5c:	e7b9      	b.n	801bcd2 <_strtod_l+0x2ca>
 801bd5e:	2b6e      	cmp	r3, #110	; 0x6e
 801bd60:	e7db      	b.n	801bd1a <_strtod_l+0x312>
 801bd62:	498f      	ldr	r1, [pc, #572]	; (801bfa0 <_strtod_l+0x598>)
 801bd64:	a81d      	add	r0, sp, #116	; 0x74
 801bd66:	f002 f8bf 	bl	801dee8 <__match>
 801bd6a:	2800      	cmp	r0, #0
 801bd6c:	f43f aeaa 	beq.w	801bac4 <_strtod_l+0xbc>
 801bd70:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bd72:	498c      	ldr	r1, [pc, #560]	; (801bfa4 <_strtod_l+0x59c>)
 801bd74:	3b01      	subs	r3, #1
 801bd76:	a81d      	add	r0, sp, #116	; 0x74
 801bd78:	931d      	str	r3, [sp, #116]	; 0x74
 801bd7a:	f002 f8b5 	bl	801dee8 <__match>
 801bd7e:	b910      	cbnz	r0, 801bd86 <_strtod_l+0x37e>
 801bd80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bd82:	3301      	adds	r3, #1
 801bd84:	931d      	str	r3, [sp, #116]	; 0x74
 801bd86:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801bfb4 <_strtod_l+0x5ac>
 801bd8a:	f04f 0a00 	mov.w	sl, #0
 801bd8e:	e67d      	b.n	801ba8c <_strtod_l+0x84>
 801bd90:	4885      	ldr	r0, [pc, #532]	; (801bfa8 <_strtod_l+0x5a0>)
 801bd92:	f7fe fa7d 	bl	801a290 <nan>
 801bd96:	ed8d 0b04 	vstr	d0, [sp, #16]
 801bd9a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801bd9e:	e675      	b.n	801ba8c <_strtod_l+0x84>
 801bda0:	9b07      	ldr	r3, [sp, #28]
 801bda2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bda4:	1af3      	subs	r3, r6, r3
 801bda6:	2f00      	cmp	r7, #0
 801bda8:	bf08      	it	eq
 801bdaa:	462f      	moveq	r7, r5
 801bdac:	2d10      	cmp	r5, #16
 801bdae:	9308      	str	r3, [sp, #32]
 801bdb0:	46a8      	mov	r8, r5
 801bdb2:	bfa8      	it	ge
 801bdb4:	f04f 0810 	movge.w	r8, #16
 801bdb8:	f7e4 fbb4 	bl	8000524 <__aeabi_ui2d>
 801bdbc:	2d09      	cmp	r5, #9
 801bdbe:	4682      	mov	sl, r0
 801bdc0:	468b      	mov	fp, r1
 801bdc2:	dd13      	ble.n	801bdec <_strtod_l+0x3e4>
 801bdc4:	4b79      	ldr	r3, [pc, #484]	; (801bfac <_strtod_l+0x5a4>)
 801bdc6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801bdca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801bdce:	f7e4 fc23 	bl	8000618 <__aeabi_dmul>
 801bdd2:	4682      	mov	sl, r0
 801bdd4:	4648      	mov	r0, r9
 801bdd6:	468b      	mov	fp, r1
 801bdd8:	f7e4 fba4 	bl	8000524 <__aeabi_ui2d>
 801bddc:	4602      	mov	r2, r0
 801bdde:	460b      	mov	r3, r1
 801bde0:	4650      	mov	r0, sl
 801bde2:	4659      	mov	r1, fp
 801bde4:	f7e4 fa62 	bl	80002ac <__adddf3>
 801bde8:	4682      	mov	sl, r0
 801bdea:	468b      	mov	fp, r1
 801bdec:	2d0f      	cmp	r5, #15
 801bdee:	dc38      	bgt.n	801be62 <_strtod_l+0x45a>
 801bdf0:	9b08      	ldr	r3, [sp, #32]
 801bdf2:	2b00      	cmp	r3, #0
 801bdf4:	f43f ae4a 	beq.w	801ba8c <_strtod_l+0x84>
 801bdf8:	dd24      	ble.n	801be44 <_strtod_l+0x43c>
 801bdfa:	2b16      	cmp	r3, #22
 801bdfc:	dc0b      	bgt.n	801be16 <_strtod_l+0x40e>
 801bdfe:	4d6b      	ldr	r5, [pc, #428]	; (801bfac <_strtod_l+0x5a4>)
 801be00:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801be04:	e9d5 0100 	ldrd	r0, r1, [r5]
 801be08:	4652      	mov	r2, sl
 801be0a:	465b      	mov	r3, fp
 801be0c:	f7e4 fc04 	bl	8000618 <__aeabi_dmul>
 801be10:	4682      	mov	sl, r0
 801be12:	468b      	mov	fp, r1
 801be14:	e63a      	b.n	801ba8c <_strtod_l+0x84>
 801be16:	9a08      	ldr	r2, [sp, #32]
 801be18:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801be1c:	4293      	cmp	r3, r2
 801be1e:	db20      	blt.n	801be62 <_strtod_l+0x45a>
 801be20:	4c62      	ldr	r4, [pc, #392]	; (801bfac <_strtod_l+0x5a4>)
 801be22:	f1c5 050f 	rsb	r5, r5, #15
 801be26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801be2a:	4652      	mov	r2, sl
 801be2c:	465b      	mov	r3, fp
 801be2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801be32:	f7e4 fbf1 	bl	8000618 <__aeabi_dmul>
 801be36:	9b08      	ldr	r3, [sp, #32]
 801be38:	1b5d      	subs	r5, r3, r5
 801be3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801be3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801be42:	e7e3      	b.n	801be0c <_strtod_l+0x404>
 801be44:	9b08      	ldr	r3, [sp, #32]
 801be46:	3316      	adds	r3, #22
 801be48:	db0b      	blt.n	801be62 <_strtod_l+0x45a>
 801be4a:	9b07      	ldr	r3, [sp, #28]
 801be4c:	4a57      	ldr	r2, [pc, #348]	; (801bfac <_strtod_l+0x5a4>)
 801be4e:	1b9e      	subs	r6, r3, r6
 801be50:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801be54:	e9d6 2300 	ldrd	r2, r3, [r6]
 801be58:	4650      	mov	r0, sl
 801be5a:	4659      	mov	r1, fp
 801be5c:	f7e4 fd06 	bl	800086c <__aeabi_ddiv>
 801be60:	e7d6      	b.n	801be10 <_strtod_l+0x408>
 801be62:	9b08      	ldr	r3, [sp, #32]
 801be64:	eba5 0808 	sub.w	r8, r5, r8
 801be68:	4498      	add	r8, r3
 801be6a:	f1b8 0f00 	cmp.w	r8, #0
 801be6e:	dd71      	ble.n	801bf54 <_strtod_l+0x54c>
 801be70:	f018 030f 	ands.w	r3, r8, #15
 801be74:	d00a      	beq.n	801be8c <_strtod_l+0x484>
 801be76:	494d      	ldr	r1, [pc, #308]	; (801bfac <_strtod_l+0x5a4>)
 801be78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801be7c:	4652      	mov	r2, sl
 801be7e:	465b      	mov	r3, fp
 801be80:	e9d1 0100 	ldrd	r0, r1, [r1]
 801be84:	f7e4 fbc8 	bl	8000618 <__aeabi_dmul>
 801be88:	4682      	mov	sl, r0
 801be8a:	468b      	mov	fp, r1
 801be8c:	f038 080f 	bics.w	r8, r8, #15
 801be90:	d04d      	beq.n	801bf2e <_strtod_l+0x526>
 801be92:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801be96:	dd22      	ble.n	801bede <_strtod_l+0x4d6>
 801be98:	2500      	movs	r5, #0
 801be9a:	462e      	mov	r6, r5
 801be9c:	9509      	str	r5, [sp, #36]	; 0x24
 801be9e:	9507      	str	r5, [sp, #28]
 801bea0:	2322      	movs	r3, #34	; 0x22
 801bea2:	f8df b110 	ldr.w	fp, [pc, #272]	; 801bfb4 <_strtod_l+0x5ac>
 801bea6:	6023      	str	r3, [r4, #0]
 801bea8:	f04f 0a00 	mov.w	sl, #0
 801beac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801beae:	2b00      	cmp	r3, #0
 801beb0:	f43f adec 	beq.w	801ba8c <_strtod_l+0x84>
 801beb4:	991e      	ldr	r1, [sp, #120]	; 0x78
 801beb6:	4620      	mov	r0, r4
 801beb8:	f002 f99e 	bl	801e1f8 <_Bfree>
 801bebc:	9907      	ldr	r1, [sp, #28]
 801bebe:	4620      	mov	r0, r4
 801bec0:	f002 f99a 	bl	801e1f8 <_Bfree>
 801bec4:	4631      	mov	r1, r6
 801bec6:	4620      	mov	r0, r4
 801bec8:	f002 f996 	bl	801e1f8 <_Bfree>
 801becc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bece:	4620      	mov	r0, r4
 801bed0:	f002 f992 	bl	801e1f8 <_Bfree>
 801bed4:	4629      	mov	r1, r5
 801bed6:	4620      	mov	r0, r4
 801bed8:	f002 f98e 	bl	801e1f8 <_Bfree>
 801bedc:	e5d6      	b.n	801ba8c <_strtod_l+0x84>
 801bede:	2300      	movs	r3, #0
 801bee0:	ea4f 1828 	mov.w	r8, r8, asr #4
 801bee4:	4650      	mov	r0, sl
 801bee6:	4659      	mov	r1, fp
 801bee8:	4699      	mov	r9, r3
 801beea:	f1b8 0f01 	cmp.w	r8, #1
 801beee:	dc21      	bgt.n	801bf34 <_strtod_l+0x52c>
 801bef0:	b10b      	cbz	r3, 801bef6 <_strtod_l+0x4ee>
 801bef2:	4682      	mov	sl, r0
 801bef4:	468b      	mov	fp, r1
 801bef6:	4b2e      	ldr	r3, [pc, #184]	; (801bfb0 <_strtod_l+0x5a8>)
 801bef8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801befc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801bf00:	4652      	mov	r2, sl
 801bf02:	465b      	mov	r3, fp
 801bf04:	e9d9 0100 	ldrd	r0, r1, [r9]
 801bf08:	f7e4 fb86 	bl	8000618 <__aeabi_dmul>
 801bf0c:	4b29      	ldr	r3, [pc, #164]	; (801bfb4 <_strtod_l+0x5ac>)
 801bf0e:	460a      	mov	r2, r1
 801bf10:	400b      	ands	r3, r1
 801bf12:	4929      	ldr	r1, [pc, #164]	; (801bfb8 <_strtod_l+0x5b0>)
 801bf14:	428b      	cmp	r3, r1
 801bf16:	4682      	mov	sl, r0
 801bf18:	d8be      	bhi.n	801be98 <_strtod_l+0x490>
 801bf1a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801bf1e:	428b      	cmp	r3, r1
 801bf20:	bf86      	itte	hi
 801bf22:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801bfbc <_strtod_l+0x5b4>
 801bf26:	f04f 3aff 	movhi.w	sl, #4294967295
 801bf2a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801bf2e:	2300      	movs	r3, #0
 801bf30:	9304      	str	r3, [sp, #16]
 801bf32:	e081      	b.n	801c038 <_strtod_l+0x630>
 801bf34:	f018 0f01 	tst.w	r8, #1
 801bf38:	d007      	beq.n	801bf4a <_strtod_l+0x542>
 801bf3a:	4b1d      	ldr	r3, [pc, #116]	; (801bfb0 <_strtod_l+0x5a8>)
 801bf3c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801bf40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf44:	f7e4 fb68 	bl	8000618 <__aeabi_dmul>
 801bf48:	2301      	movs	r3, #1
 801bf4a:	f109 0901 	add.w	r9, r9, #1
 801bf4e:	ea4f 0868 	mov.w	r8, r8, asr #1
 801bf52:	e7ca      	b.n	801beea <_strtod_l+0x4e2>
 801bf54:	d0eb      	beq.n	801bf2e <_strtod_l+0x526>
 801bf56:	f1c8 0800 	rsb	r8, r8, #0
 801bf5a:	f018 020f 	ands.w	r2, r8, #15
 801bf5e:	d00a      	beq.n	801bf76 <_strtod_l+0x56e>
 801bf60:	4b12      	ldr	r3, [pc, #72]	; (801bfac <_strtod_l+0x5a4>)
 801bf62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bf66:	4650      	mov	r0, sl
 801bf68:	4659      	mov	r1, fp
 801bf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf6e:	f7e4 fc7d 	bl	800086c <__aeabi_ddiv>
 801bf72:	4682      	mov	sl, r0
 801bf74:	468b      	mov	fp, r1
 801bf76:	ea5f 1828 	movs.w	r8, r8, asr #4
 801bf7a:	d0d8      	beq.n	801bf2e <_strtod_l+0x526>
 801bf7c:	f1b8 0f1f 	cmp.w	r8, #31
 801bf80:	dd1e      	ble.n	801bfc0 <_strtod_l+0x5b8>
 801bf82:	2500      	movs	r5, #0
 801bf84:	462e      	mov	r6, r5
 801bf86:	9509      	str	r5, [sp, #36]	; 0x24
 801bf88:	9507      	str	r5, [sp, #28]
 801bf8a:	2322      	movs	r3, #34	; 0x22
 801bf8c:	f04f 0a00 	mov.w	sl, #0
 801bf90:	f04f 0b00 	mov.w	fp, #0
 801bf94:	6023      	str	r3, [r4, #0]
 801bf96:	e789      	b.n	801beac <_strtod_l+0x4a4>
 801bf98:	0802187d 	.word	0x0802187d
 801bf9c:	080218bc 	.word	0x080218bc
 801bfa0:	08021875 	.word	0x08021875
 801bfa4:	08021937 	.word	0x08021937
 801bfa8:	08021933 	.word	0x08021933
 801bfac:	08021ad0 	.word	0x08021ad0
 801bfb0:	08021aa8 	.word	0x08021aa8
 801bfb4:	7ff00000 	.word	0x7ff00000
 801bfb8:	7ca00000 	.word	0x7ca00000
 801bfbc:	7fefffff 	.word	0x7fefffff
 801bfc0:	f018 0310 	ands.w	r3, r8, #16
 801bfc4:	bf18      	it	ne
 801bfc6:	236a      	movne	r3, #106	; 0x6a
 801bfc8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801c380 <_strtod_l+0x978>
 801bfcc:	9304      	str	r3, [sp, #16]
 801bfce:	4650      	mov	r0, sl
 801bfd0:	4659      	mov	r1, fp
 801bfd2:	2300      	movs	r3, #0
 801bfd4:	f018 0f01 	tst.w	r8, #1
 801bfd8:	d004      	beq.n	801bfe4 <_strtod_l+0x5dc>
 801bfda:	e9d9 2300 	ldrd	r2, r3, [r9]
 801bfde:	f7e4 fb1b 	bl	8000618 <__aeabi_dmul>
 801bfe2:	2301      	movs	r3, #1
 801bfe4:	ea5f 0868 	movs.w	r8, r8, asr #1
 801bfe8:	f109 0908 	add.w	r9, r9, #8
 801bfec:	d1f2      	bne.n	801bfd4 <_strtod_l+0x5cc>
 801bfee:	b10b      	cbz	r3, 801bff4 <_strtod_l+0x5ec>
 801bff0:	4682      	mov	sl, r0
 801bff2:	468b      	mov	fp, r1
 801bff4:	9b04      	ldr	r3, [sp, #16]
 801bff6:	b1bb      	cbz	r3, 801c028 <_strtod_l+0x620>
 801bff8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801bffc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c000:	2b00      	cmp	r3, #0
 801c002:	4659      	mov	r1, fp
 801c004:	dd10      	ble.n	801c028 <_strtod_l+0x620>
 801c006:	2b1f      	cmp	r3, #31
 801c008:	f340 8128 	ble.w	801c25c <_strtod_l+0x854>
 801c00c:	2b34      	cmp	r3, #52	; 0x34
 801c00e:	bfde      	ittt	le
 801c010:	3b20      	suble	r3, #32
 801c012:	f04f 32ff 	movle.w	r2, #4294967295
 801c016:	fa02 f303 	lslle.w	r3, r2, r3
 801c01a:	f04f 0a00 	mov.w	sl, #0
 801c01e:	bfcc      	ite	gt
 801c020:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801c024:	ea03 0b01 	andle.w	fp, r3, r1
 801c028:	2200      	movs	r2, #0
 801c02a:	2300      	movs	r3, #0
 801c02c:	4650      	mov	r0, sl
 801c02e:	4659      	mov	r1, fp
 801c030:	f7e4 fd5a 	bl	8000ae8 <__aeabi_dcmpeq>
 801c034:	2800      	cmp	r0, #0
 801c036:	d1a4      	bne.n	801bf82 <_strtod_l+0x57a>
 801c038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c03a:	9300      	str	r3, [sp, #0]
 801c03c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801c03e:	462b      	mov	r3, r5
 801c040:	463a      	mov	r2, r7
 801c042:	4620      	mov	r0, r4
 801c044:	f002 f944 	bl	801e2d0 <__s2b>
 801c048:	9009      	str	r0, [sp, #36]	; 0x24
 801c04a:	2800      	cmp	r0, #0
 801c04c:	f43f af24 	beq.w	801be98 <_strtod_l+0x490>
 801c050:	9b07      	ldr	r3, [sp, #28]
 801c052:	1b9e      	subs	r6, r3, r6
 801c054:	9b08      	ldr	r3, [sp, #32]
 801c056:	2b00      	cmp	r3, #0
 801c058:	bfb4      	ite	lt
 801c05a:	4633      	movlt	r3, r6
 801c05c:	2300      	movge	r3, #0
 801c05e:	9310      	str	r3, [sp, #64]	; 0x40
 801c060:	9b08      	ldr	r3, [sp, #32]
 801c062:	2500      	movs	r5, #0
 801c064:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c068:	9318      	str	r3, [sp, #96]	; 0x60
 801c06a:	462e      	mov	r6, r5
 801c06c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c06e:	4620      	mov	r0, r4
 801c070:	6859      	ldr	r1, [r3, #4]
 801c072:	f002 f881 	bl	801e178 <_Balloc>
 801c076:	9007      	str	r0, [sp, #28]
 801c078:	2800      	cmp	r0, #0
 801c07a:	f43f af11 	beq.w	801bea0 <_strtod_l+0x498>
 801c07e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c080:	691a      	ldr	r2, [r3, #16]
 801c082:	3202      	adds	r2, #2
 801c084:	f103 010c 	add.w	r1, r3, #12
 801c088:	0092      	lsls	r2, r2, #2
 801c08a:	300c      	adds	r0, #12
 801c08c:	f7fe fb4e 	bl	801a72c <memcpy>
 801c090:	ec4b ab10 	vmov	d0, sl, fp
 801c094:	aa20      	add	r2, sp, #128	; 0x80
 801c096:	a91f      	add	r1, sp, #124	; 0x7c
 801c098:	4620      	mov	r0, r4
 801c09a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801c09e:	f002 fc53 	bl	801e948 <__d2b>
 801c0a2:	901e      	str	r0, [sp, #120]	; 0x78
 801c0a4:	2800      	cmp	r0, #0
 801c0a6:	f43f aefb 	beq.w	801bea0 <_strtod_l+0x498>
 801c0aa:	2101      	movs	r1, #1
 801c0ac:	4620      	mov	r0, r4
 801c0ae:	f002 f9a9 	bl	801e404 <__i2b>
 801c0b2:	4606      	mov	r6, r0
 801c0b4:	2800      	cmp	r0, #0
 801c0b6:	f43f aef3 	beq.w	801bea0 <_strtod_l+0x498>
 801c0ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c0bc:	9904      	ldr	r1, [sp, #16]
 801c0be:	2b00      	cmp	r3, #0
 801c0c0:	bfab      	itete	ge
 801c0c2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801c0c4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801c0c6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801c0c8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801c0cc:	bfac      	ite	ge
 801c0ce:	eb03 0902 	addge.w	r9, r3, r2
 801c0d2:	1ad7      	sublt	r7, r2, r3
 801c0d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c0d6:	eba3 0801 	sub.w	r8, r3, r1
 801c0da:	4490      	add	r8, r2
 801c0dc:	4ba3      	ldr	r3, [pc, #652]	; (801c36c <_strtod_l+0x964>)
 801c0de:	f108 38ff 	add.w	r8, r8, #4294967295
 801c0e2:	4598      	cmp	r8, r3
 801c0e4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801c0e8:	f280 80cc 	bge.w	801c284 <_strtod_l+0x87c>
 801c0ec:	eba3 0308 	sub.w	r3, r3, r8
 801c0f0:	2b1f      	cmp	r3, #31
 801c0f2:	eba2 0203 	sub.w	r2, r2, r3
 801c0f6:	f04f 0101 	mov.w	r1, #1
 801c0fa:	f300 80b6 	bgt.w	801c26a <_strtod_l+0x862>
 801c0fe:	fa01 f303 	lsl.w	r3, r1, r3
 801c102:	9311      	str	r3, [sp, #68]	; 0x44
 801c104:	2300      	movs	r3, #0
 801c106:	930c      	str	r3, [sp, #48]	; 0x30
 801c108:	eb09 0802 	add.w	r8, r9, r2
 801c10c:	9b04      	ldr	r3, [sp, #16]
 801c10e:	45c1      	cmp	r9, r8
 801c110:	4417      	add	r7, r2
 801c112:	441f      	add	r7, r3
 801c114:	464b      	mov	r3, r9
 801c116:	bfa8      	it	ge
 801c118:	4643      	movge	r3, r8
 801c11a:	42bb      	cmp	r3, r7
 801c11c:	bfa8      	it	ge
 801c11e:	463b      	movge	r3, r7
 801c120:	2b00      	cmp	r3, #0
 801c122:	bfc2      	ittt	gt
 801c124:	eba8 0803 	subgt.w	r8, r8, r3
 801c128:	1aff      	subgt	r7, r7, r3
 801c12a:	eba9 0903 	subgt.w	r9, r9, r3
 801c12e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c130:	2b00      	cmp	r3, #0
 801c132:	dd17      	ble.n	801c164 <_strtod_l+0x75c>
 801c134:	4631      	mov	r1, r6
 801c136:	461a      	mov	r2, r3
 801c138:	4620      	mov	r0, r4
 801c13a:	f002 fa1f 	bl	801e57c <__pow5mult>
 801c13e:	4606      	mov	r6, r0
 801c140:	2800      	cmp	r0, #0
 801c142:	f43f aead 	beq.w	801bea0 <_strtod_l+0x498>
 801c146:	4601      	mov	r1, r0
 801c148:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801c14a:	4620      	mov	r0, r4
 801c14c:	f002 f970 	bl	801e430 <__multiply>
 801c150:	900f      	str	r0, [sp, #60]	; 0x3c
 801c152:	2800      	cmp	r0, #0
 801c154:	f43f aea4 	beq.w	801bea0 <_strtod_l+0x498>
 801c158:	991e      	ldr	r1, [sp, #120]	; 0x78
 801c15a:	4620      	mov	r0, r4
 801c15c:	f002 f84c 	bl	801e1f8 <_Bfree>
 801c160:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c162:	931e      	str	r3, [sp, #120]	; 0x78
 801c164:	f1b8 0f00 	cmp.w	r8, #0
 801c168:	f300 8091 	bgt.w	801c28e <_strtod_l+0x886>
 801c16c:	9b08      	ldr	r3, [sp, #32]
 801c16e:	2b00      	cmp	r3, #0
 801c170:	dd08      	ble.n	801c184 <_strtod_l+0x77c>
 801c172:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c174:	9907      	ldr	r1, [sp, #28]
 801c176:	4620      	mov	r0, r4
 801c178:	f002 fa00 	bl	801e57c <__pow5mult>
 801c17c:	9007      	str	r0, [sp, #28]
 801c17e:	2800      	cmp	r0, #0
 801c180:	f43f ae8e 	beq.w	801bea0 <_strtod_l+0x498>
 801c184:	2f00      	cmp	r7, #0
 801c186:	dd08      	ble.n	801c19a <_strtod_l+0x792>
 801c188:	9907      	ldr	r1, [sp, #28]
 801c18a:	463a      	mov	r2, r7
 801c18c:	4620      	mov	r0, r4
 801c18e:	f002 fa4f 	bl	801e630 <__lshift>
 801c192:	9007      	str	r0, [sp, #28]
 801c194:	2800      	cmp	r0, #0
 801c196:	f43f ae83 	beq.w	801bea0 <_strtod_l+0x498>
 801c19a:	f1b9 0f00 	cmp.w	r9, #0
 801c19e:	dd08      	ble.n	801c1b2 <_strtod_l+0x7aa>
 801c1a0:	4631      	mov	r1, r6
 801c1a2:	464a      	mov	r2, r9
 801c1a4:	4620      	mov	r0, r4
 801c1a6:	f002 fa43 	bl	801e630 <__lshift>
 801c1aa:	4606      	mov	r6, r0
 801c1ac:	2800      	cmp	r0, #0
 801c1ae:	f43f ae77 	beq.w	801bea0 <_strtod_l+0x498>
 801c1b2:	9a07      	ldr	r2, [sp, #28]
 801c1b4:	991e      	ldr	r1, [sp, #120]	; 0x78
 801c1b6:	4620      	mov	r0, r4
 801c1b8:	f002 fac2 	bl	801e740 <__mdiff>
 801c1bc:	4605      	mov	r5, r0
 801c1be:	2800      	cmp	r0, #0
 801c1c0:	f43f ae6e 	beq.w	801bea0 <_strtod_l+0x498>
 801c1c4:	68c3      	ldr	r3, [r0, #12]
 801c1c6:	930f      	str	r3, [sp, #60]	; 0x3c
 801c1c8:	2300      	movs	r3, #0
 801c1ca:	60c3      	str	r3, [r0, #12]
 801c1cc:	4631      	mov	r1, r6
 801c1ce:	f002 fa9b 	bl	801e708 <__mcmp>
 801c1d2:	2800      	cmp	r0, #0
 801c1d4:	da65      	bge.n	801c2a2 <_strtod_l+0x89a>
 801c1d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c1d8:	ea53 030a 	orrs.w	r3, r3, sl
 801c1dc:	f040 8087 	bne.w	801c2ee <_strtod_l+0x8e6>
 801c1e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c1e4:	2b00      	cmp	r3, #0
 801c1e6:	f040 8082 	bne.w	801c2ee <_strtod_l+0x8e6>
 801c1ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c1ee:	0d1b      	lsrs	r3, r3, #20
 801c1f0:	051b      	lsls	r3, r3, #20
 801c1f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801c1f6:	d97a      	bls.n	801c2ee <_strtod_l+0x8e6>
 801c1f8:	696b      	ldr	r3, [r5, #20]
 801c1fa:	b913      	cbnz	r3, 801c202 <_strtod_l+0x7fa>
 801c1fc:	692b      	ldr	r3, [r5, #16]
 801c1fe:	2b01      	cmp	r3, #1
 801c200:	dd75      	ble.n	801c2ee <_strtod_l+0x8e6>
 801c202:	4629      	mov	r1, r5
 801c204:	2201      	movs	r2, #1
 801c206:	4620      	mov	r0, r4
 801c208:	f002 fa12 	bl	801e630 <__lshift>
 801c20c:	4631      	mov	r1, r6
 801c20e:	4605      	mov	r5, r0
 801c210:	f002 fa7a 	bl	801e708 <__mcmp>
 801c214:	2800      	cmp	r0, #0
 801c216:	dd6a      	ble.n	801c2ee <_strtod_l+0x8e6>
 801c218:	9904      	ldr	r1, [sp, #16]
 801c21a:	4a55      	ldr	r2, [pc, #340]	; (801c370 <_strtod_l+0x968>)
 801c21c:	465b      	mov	r3, fp
 801c21e:	2900      	cmp	r1, #0
 801c220:	f000 8085 	beq.w	801c32e <_strtod_l+0x926>
 801c224:	ea02 010b 	and.w	r1, r2, fp
 801c228:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801c22c:	dc7f      	bgt.n	801c32e <_strtod_l+0x926>
 801c22e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801c232:	f77f aeaa 	ble.w	801bf8a <_strtod_l+0x582>
 801c236:	4a4f      	ldr	r2, [pc, #316]	; (801c374 <_strtod_l+0x96c>)
 801c238:	2300      	movs	r3, #0
 801c23a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801c23e:	4650      	mov	r0, sl
 801c240:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801c244:	4659      	mov	r1, fp
 801c246:	f7e4 f9e7 	bl	8000618 <__aeabi_dmul>
 801c24a:	460b      	mov	r3, r1
 801c24c:	4303      	orrs	r3, r0
 801c24e:	bf08      	it	eq
 801c250:	2322      	moveq	r3, #34	; 0x22
 801c252:	4682      	mov	sl, r0
 801c254:	468b      	mov	fp, r1
 801c256:	bf08      	it	eq
 801c258:	6023      	streq	r3, [r4, #0]
 801c25a:	e62b      	b.n	801beb4 <_strtod_l+0x4ac>
 801c25c:	f04f 32ff 	mov.w	r2, #4294967295
 801c260:	fa02 f303 	lsl.w	r3, r2, r3
 801c264:	ea03 0a0a 	and.w	sl, r3, sl
 801c268:	e6de      	b.n	801c028 <_strtod_l+0x620>
 801c26a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801c26e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801c272:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801c276:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801c27a:	fa01 f308 	lsl.w	r3, r1, r8
 801c27e:	930c      	str	r3, [sp, #48]	; 0x30
 801c280:	9111      	str	r1, [sp, #68]	; 0x44
 801c282:	e741      	b.n	801c108 <_strtod_l+0x700>
 801c284:	2300      	movs	r3, #0
 801c286:	930c      	str	r3, [sp, #48]	; 0x30
 801c288:	2301      	movs	r3, #1
 801c28a:	9311      	str	r3, [sp, #68]	; 0x44
 801c28c:	e73c      	b.n	801c108 <_strtod_l+0x700>
 801c28e:	991e      	ldr	r1, [sp, #120]	; 0x78
 801c290:	4642      	mov	r2, r8
 801c292:	4620      	mov	r0, r4
 801c294:	f002 f9cc 	bl	801e630 <__lshift>
 801c298:	901e      	str	r0, [sp, #120]	; 0x78
 801c29a:	2800      	cmp	r0, #0
 801c29c:	f47f af66 	bne.w	801c16c <_strtod_l+0x764>
 801c2a0:	e5fe      	b.n	801bea0 <_strtod_l+0x498>
 801c2a2:	465f      	mov	r7, fp
 801c2a4:	d16e      	bne.n	801c384 <_strtod_l+0x97c>
 801c2a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c2a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c2ac:	b342      	cbz	r2, 801c300 <_strtod_l+0x8f8>
 801c2ae:	4a32      	ldr	r2, [pc, #200]	; (801c378 <_strtod_l+0x970>)
 801c2b0:	4293      	cmp	r3, r2
 801c2b2:	d128      	bne.n	801c306 <_strtod_l+0x8fe>
 801c2b4:	9b04      	ldr	r3, [sp, #16]
 801c2b6:	4650      	mov	r0, sl
 801c2b8:	b1eb      	cbz	r3, 801c2f6 <_strtod_l+0x8ee>
 801c2ba:	4a2d      	ldr	r2, [pc, #180]	; (801c370 <_strtod_l+0x968>)
 801c2bc:	403a      	ands	r2, r7
 801c2be:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801c2c2:	f04f 31ff 	mov.w	r1, #4294967295
 801c2c6:	d819      	bhi.n	801c2fc <_strtod_l+0x8f4>
 801c2c8:	0d12      	lsrs	r2, r2, #20
 801c2ca:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801c2ce:	fa01 f303 	lsl.w	r3, r1, r3
 801c2d2:	4298      	cmp	r0, r3
 801c2d4:	d117      	bne.n	801c306 <_strtod_l+0x8fe>
 801c2d6:	4b29      	ldr	r3, [pc, #164]	; (801c37c <_strtod_l+0x974>)
 801c2d8:	429f      	cmp	r7, r3
 801c2da:	d102      	bne.n	801c2e2 <_strtod_l+0x8da>
 801c2dc:	3001      	adds	r0, #1
 801c2de:	f43f addf 	beq.w	801bea0 <_strtod_l+0x498>
 801c2e2:	4b23      	ldr	r3, [pc, #140]	; (801c370 <_strtod_l+0x968>)
 801c2e4:	403b      	ands	r3, r7
 801c2e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801c2ea:	f04f 0a00 	mov.w	sl, #0
 801c2ee:	9b04      	ldr	r3, [sp, #16]
 801c2f0:	2b00      	cmp	r3, #0
 801c2f2:	d1a0      	bne.n	801c236 <_strtod_l+0x82e>
 801c2f4:	e5de      	b.n	801beb4 <_strtod_l+0x4ac>
 801c2f6:	f04f 33ff 	mov.w	r3, #4294967295
 801c2fa:	e7ea      	b.n	801c2d2 <_strtod_l+0x8ca>
 801c2fc:	460b      	mov	r3, r1
 801c2fe:	e7e8      	b.n	801c2d2 <_strtod_l+0x8ca>
 801c300:	ea53 030a 	orrs.w	r3, r3, sl
 801c304:	d088      	beq.n	801c218 <_strtod_l+0x810>
 801c306:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c308:	b1db      	cbz	r3, 801c342 <_strtod_l+0x93a>
 801c30a:	423b      	tst	r3, r7
 801c30c:	d0ef      	beq.n	801c2ee <_strtod_l+0x8e6>
 801c30e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c310:	9a04      	ldr	r2, [sp, #16]
 801c312:	4650      	mov	r0, sl
 801c314:	4659      	mov	r1, fp
 801c316:	b1c3      	cbz	r3, 801c34a <_strtod_l+0x942>
 801c318:	f7ff fb59 	bl	801b9ce <sulp>
 801c31c:	4602      	mov	r2, r0
 801c31e:	460b      	mov	r3, r1
 801c320:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c324:	f7e3 ffc2 	bl	80002ac <__adddf3>
 801c328:	4682      	mov	sl, r0
 801c32a:	468b      	mov	fp, r1
 801c32c:	e7df      	b.n	801c2ee <_strtod_l+0x8e6>
 801c32e:	4013      	ands	r3, r2
 801c330:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801c334:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801c338:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801c33c:	f04f 3aff 	mov.w	sl, #4294967295
 801c340:	e7d5      	b.n	801c2ee <_strtod_l+0x8e6>
 801c342:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c344:	ea13 0f0a 	tst.w	r3, sl
 801c348:	e7e0      	b.n	801c30c <_strtod_l+0x904>
 801c34a:	f7ff fb40 	bl	801b9ce <sulp>
 801c34e:	4602      	mov	r2, r0
 801c350:	460b      	mov	r3, r1
 801c352:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c356:	f7e3 ffa7 	bl	80002a8 <__aeabi_dsub>
 801c35a:	2200      	movs	r2, #0
 801c35c:	2300      	movs	r3, #0
 801c35e:	4682      	mov	sl, r0
 801c360:	468b      	mov	fp, r1
 801c362:	f7e4 fbc1 	bl	8000ae8 <__aeabi_dcmpeq>
 801c366:	2800      	cmp	r0, #0
 801c368:	d0c1      	beq.n	801c2ee <_strtod_l+0x8e6>
 801c36a:	e60e      	b.n	801bf8a <_strtod_l+0x582>
 801c36c:	fffffc02 	.word	0xfffffc02
 801c370:	7ff00000 	.word	0x7ff00000
 801c374:	39500000 	.word	0x39500000
 801c378:	000fffff 	.word	0x000fffff
 801c37c:	7fefffff 	.word	0x7fefffff
 801c380:	080218d0 	.word	0x080218d0
 801c384:	4631      	mov	r1, r6
 801c386:	4628      	mov	r0, r5
 801c388:	f002 fb3a 	bl	801ea00 <__ratio>
 801c38c:	ec59 8b10 	vmov	r8, r9, d0
 801c390:	ee10 0a10 	vmov	r0, s0
 801c394:	2200      	movs	r2, #0
 801c396:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c39a:	4649      	mov	r1, r9
 801c39c:	f7e4 fbb8 	bl	8000b10 <__aeabi_dcmple>
 801c3a0:	2800      	cmp	r0, #0
 801c3a2:	d07c      	beq.n	801c49e <_strtod_l+0xa96>
 801c3a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c3a6:	2b00      	cmp	r3, #0
 801c3a8:	d04c      	beq.n	801c444 <_strtod_l+0xa3c>
 801c3aa:	4b95      	ldr	r3, [pc, #596]	; (801c600 <_strtod_l+0xbf8>)
 801c3ac:	2200      	movs	r2, #0
 801c3ae:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801c3b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801c600 <_strtod_l+0xbf8>
 801c3b6:	f04f 0800 	mov.w	r8, #0
 801c3ba:	4b92      	ldr	r3, [pc, #584]	; (801c604 <_strtod_l+0xbfc>)
 801c3bc:	403b      	ands	r3, r7
 801c3be:	9311      	str	r3, [sp, #68]	; 0x44
 801c3c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c3c2:	4b91      	ldr	r3, [pc, #580]	; (801c608 <_strtod_l+0xc00>)
 801c3c4:	429a      	cmp	r2, r3
 801c3c6:	f040 80b2 	bne.w	801c52e <_strtod_l+0xb26>
 801c3ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c3ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c3d2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801c3d6:	ec4b ab10 	vmov	d0, sl, fp
 801c3da:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801c3de:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801c3e2:	f002 fa35 	bl	801e850 <__ulp>
 801c3e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c3ea:	ec53 2b10 	vmov	r2, r3, d0
 801c3ee:	f7e4 f913 	bl	8000618 <__aeabi_dmul>
 801c3f2:	4652      	mov	r2, sl
 801c3f4:	465b      	mov	r3, fp
 801c3f6:	f7e3 ff59 	bl	80002ac <__adddf3>
 801c3fa:	460b      	mov	r3, r1
 801c3fc:	4981      	ldr	r1, [pc, #516]	; (801c604 <_strtod_l+0xbfc>)
 801c3fe:	4a83      	ldr	r2, [pc, #524]	; (801c60c <_strtod_l+0xc04>)
 801c400:	4019      	ands	r1, r3
 801c402:	4291      	cmp	r1, r2
 801c404:	4682      	mov	sl, r0
 801c406:	d95e      	bls.n	801c4c6 <_strtod_l+0xabe>
 801c408:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c40a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801c40e:	4293      	cmp	r3, r2
 801c410:	d103      	bne.n	801c41a <_strtod_l+0xa12>
 801c412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c414:	3301      	adds	r3, #1
 801c416:	f43f ad43 	beq.w	801bea0 <_strtod_l+0x498>
 801c41a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801c618 <_strtod_l+0xc10>
 801c41e:	f04f 3aff 	mov.w	sl, #4294967295
 801c422:	991e      	ldr	r1, [sp, #120]	; 0x78
 801c424:	4620      	mov	r0, r4
 801c426:	f001 fee7 	bl	801e1f8 <_Bfree>
 801c42a:	9907      	ldr	r1, [sp, #28]
 801c42c:	4620      	mov	r0, r4
 801c42e:	f001 fee3 	bl	801e1f8 <_Bfree>
 801c432:	4631      	mov	r1, r6
 801c434:	4620      	mov	r0, r4
 801c436:	f001 fedf 	bl	801e1f8 <_Bfree>
 801c43a:	4629      	mov	r1, r5
 801c43c:	4620      	mov	r0, r4
 801c43e:	f001 fedb 	bl	801e1f8 <_Bfree>
 801c442:	e613      	b.n	801c06c <_strtod_l+0x664>
 801c444:	f1ba 0f00 	cmp.w	sl, #0
 801c448:	d11b      	bne.n	801c482 <_strtod_l+0xa7a>
 801c44a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c44e:	b9f3      	cbnz	r3, 801c48e <_strtod_l+0xa86>
 801c450:	4b6b      	ldr	r3, [pc, #428]	; (801c600 <_strtod_l+0xbf8>)
 801c452:	2200      	movs	r2, #0
 801c454:	4640      	mov	r0, r8
 801c456:	4649      	mov	r1, r9
 801c458:	f7e4 fb50 	bl	8000afc <__aeabi_dcmplt>
 801c45c:	b9d0      	cbnz	r0, 801c494 <_strtod_l+0xa8c>
 801c45e:	4640      	mov	r0, r8
 801c460:	4649      	mov	r1, r9
 801c462:	4b6b      	ldr	r3, [pc, #428]	; (801c610 <_strtod_l+0xc08>)
 801c464:	2200      	movs	r2, #0
 801c466:	f7e4 f8d7 	bl	8000618 <__aeabi_dmul>
 801c46a:	4680      	mov	r8, r0
 801c46c:	4689      	mov	r9, r1
 801c46e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801c472:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801c476:	931b      	str	r3, [sp, #108]	; 0x6c
 801c478:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801c47c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801c480:	e79b      	b.n	801c3ba <_strtod_l+0x9b2>
 801c482:	f1ba 0f01 	cmp.w	sl, #1
 801c486:	d102      	bne.n	801c48e <_strtod_l+0xa86>
 801c488:	2f00      	cmp	r7, #0
 801c48a:	f43f ad7e 	beq.w	801bf8a <_strtod_l+0x582>
 801c48e:	4b61      	ldr	r3, [pc, #388]	; (801c614 <_strtod_l+0xc0c>)
 801c490:	2200      	movs	r2, #0
 801c492:	e78c      	b.n	801c3ae <_strtod_l+0x9a6>
 801c494:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801c610 <_strtod_l+0xc08>
 801c498:	f04f 0800 	mov.w	r8, #0
 801c49c:	e7e7      	b.n	801c46e <_strtod_l+0xa66>
 801c49e:	4b5c      	ldr	r3, [pc, #368]	; (801c610 <_strtod_l+0xc08>)
 801c4a0:	4640      	mov	r0, r8
 801c4a2:	4649      	mov	r1, r9
 801c4a4:	2200      	movs	r2, #0
 801c4a6:	f7e4 f8b7 	bl	8000618 <__aeabi_dmul>
 801c4aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c4ac:	4680      	mov	r8, r0
 801c4ae:	4689      	mov	r9, r1
 801c4b0:	b933      	cbnz	r3, 801c4c0 <_strtod_l+0xab8>
 801c4b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c4b6:	9012      	str	r0, [sp, #72]	; 0x48
 801c4b8:	9313      	str	r3, [sp, #76]	; 0x4c
 801c4ba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801c4be:	e7dd      	b.n	801c47c <_strtod_l+0xa74>
 801c4c0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801c4c4:	e7f9      	b.n	801c4ba <_strtod_l+0xab2>
 801c4c6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801c4ca:	9b04      	ldr	r3, [sp, #16]
 801c4cc:	2b00      	cmp	r3, #0
 801c4ce:	d1a8      	bne.n	801c422 <_strtod_l+0xa1a>
 801c4d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c4d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c4d6:	0d1b      	lsrs	r3, r3, #20
 801c4d8:	051b      	lsls	r3, r3, #20
 801c4da:	429a      	cmp	r2, r3
 801c4dc:	d1a1      	bne.n	801c422 <_strtod_l+0xa1a>
 801c4de:	4640      	mov	r0, r8
 801c4e0:	4649      	mov	r1, r9
 801c4e2:	f7e4 fbf9 	bl	8000cd8 <__aeabi_d2lz>
 801c4e6:	f7e4 f869 	bl	80005bc <__aeabi_l2d>
 801c4ea:	4602      	mov	r2, r0
 801c4ec:	460b      	mov	r3, r1
 801c4ee:	4640      	mov	r0, r8
 801c4f0:	4649      	mov	r1, r9
 801c4f2:	f7e3 fed9 	bl	80002a8 <__aeabi_dsub>
 801c4f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c4f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c4fc:	ea43 030a 	orr.w	r3, r3, sl
 801c500:	4313      	orrs	r3, r2
 801c502:	4680      	mov	r8, r0
 801c504:	4689      	mov	r9, r1
 801c506:	d053      	beq.n	801c5b0 <_strtod_l+0xba8>
 801c508:	a335      	add	r3, pc, #212	; (adr r3, 801c5e0 <_strtod_l+0xbd8>)
 801c50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c50e:	f7e4 faf5 	bl	8000afc <__aeabi_dcmplt>
 801c512:	2800      	cmp	r0, #0
 801c514:	f47f acce 	bne.w	801beb4 <_strtod_l+0x4ac>
 801c518:	a333      	add	r3, pc, #204	; (adr r3, 801c5e8 <_strtod_l+0xbe0>)
 801c51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c51e:	4640      	mov	r0, r8
 801c520:	4649      	mov	r1, r9
 801c522:	f7e4 fb09 	bl	8000b38 <__aeabi_dcmpgt>
 801c526:	2800      	cmp	r0, #0
 801c528:	f43f af7b 	beq.w	801c422 <_strtod_l+0xa1a>
 801c52c:	e4c2      	b.n	801beb4 <_strtod_l+0x4ac>
 801c52e:	9b04      	ldr	r3, [sp, #16]
 801c530:	b333      	cbz	r3, 801c580 <_strtod_l+0xb78>
 801c532:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c534:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801c538:	d822      	bhi.n	801c580 <_strtod_l+0xb78>
 801c53a:	a32d      	add	r3, pc, #180	; (adr r3, 801c5f0 <_strtod_l+0xbe8>)
 801c53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c540:	4640      	mov	r0, r8
 801c542:	4649      	mov	r1, r9
 801c544:	f7e4 fae4 	bl	8000b10 <__aeabi_dcmple>
 801c548:	b1a0      	cbz	r0, 801c574 <_strtod_l+0xb6c>
 801c54a:	4649      	mov	r1, r9
 801c54c:	4640      	mov	r0, r8
 801c54e:	f7e4 fb3b 	bl	8000bc8 <__aeabi_d2uiz>
 801c552:	2801      	cmp	r0, #1
 801c554:	bf38      	it	cc
 801c556:	2001      	movcc	r0, #1
 801c558:	f7e3 ffe4 	bl	8000524 <__aeabi_ui2d>
 801c55c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c55e:	4680      	mov	r8, r0
 801c560:	4689      	mov	r9, r1
 801c562:	bb13      	cbnz	r3, 801c5aa <_strtod_l+0xba2>
 801c564:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c568:	9014      	str	r0, [sp, #80]	; 0x50
 801c56a:	9315      	str	r3, [sp, #84]	; 0x54
 801c56c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801c570:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801c574:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c576:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c578:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801c57c:	1a9b      	subs	r3, r3, r2
 801c57e:	930d      	str	r3, [sp, #52]	; 0x34
 801c580:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c584:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801c588:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801c58c:	f002 f960 	bl	801e850 <__ulp>
 801c590:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c594:	ec53 2b10 	vmov	r2, r3, d0
 801c598:	f7e4 f83e 	bl	8000618 <__aeabi_dmul>
 801c59c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c5a0:	f7e3 fe84 	bl	80002ac <__adddf3>
 801c5a4:	4682      	mov	sl, r0
 801c5a6:	468b      	mov	fp, r1
 801c5a8:	e78f      	b.n	801c4ca <_strtod_l+0xac2>
 801c5aa:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801c5ae:	e7dd      	b.n	801c56c <_strtod_l+0xb64>
 801c5b0:	a311      	add	r3, pc, #68	; (adr r3, 801c5f8 <_strtod_l+0xbf0>)
 801c5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5b6:	f7e4 faa1 	bl	8000afc <__aeabi_dcmplt>
 801c5ba:	e7b4      	b.n	801c526 <_strtod_l+0xb1e>
 801c5bc:	2300      	movs	r3, #0
 801c5be:	930e      	str	r3, [sp, #56]	; 0x38
 801c5c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801c5c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c5c4:	6013      	str	r3, [r2, #0]
 801c5c6:	f7ff ba65 	b.w	801ba94 <_strtod_l+0x8c>
 801c5ca:	2b65      	cmp	r3, #101	; 0x65
 801c5cc:	f43f ab5d 	beq.w	801bc8a <_strtod_l+0x282>
 801c5d0:	2b45      	cmp	r3, #69	; 0x45
 801c5d2:	f43f ab5a 	beq.w	801bc8a <_strtod_l+0x282>
 801c5d6:	2201      	movs	r2, #1
 801c5d8:	f7ff bb92 	b.w	801bd00 <_strtod_l+0x2f8>
 801c5dc:	f3af 8000 	nop.w
 801c5e0:	94a03595 	.word	0x94a03595
 801c5e4:	3fdfffff 	.word	0x3fdfffff
 801c5e8:	35afe535 	.word	0x35afe535
 801c5ec:	3fe00000 	.word	0x3fe00000
 801c5f0:	ffc00000 	.word	0xffc00000
 801c5f4:	41dfffff 	.word	0x41dfffff
 801c5f8:	94a03595 	.word	0x94a03595
 801c5fc:	3fcfffff 	.word	0x3fcfffff
 801c600:	3ff00000 	.word	0x3ff00000
 801c604:	7ff00000 	.word	0x7ff00000
 801c608:	7fe00000 	.word	0x7fe00000
 801c60c:	7c9fffff 	.word	0x7c9fffff
 801c610:	3fe00000 	.word	0x3fe00000
 801c614:	bff00000 	.word	0xbff00000
 801c618:	7fefffff 	.word	0x7fefffff

0801c61c <_strtod_r>:
 801c61c:	4b01      	ldr	r3, [pc, #4]	; (801c624 <_strtod_r+0x8>)
 801c61e:	f7ff b9f3 	b.w	801ba08 <_strtod_l>
 801c622:	bf00      	nop
 801c624:	20000260 	.word	0x20000260

0801c628 <_strtol_l.isra.0>:
 801c628:	2b01      	cmp	r3, #1
 801c62a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c62e:	d001      	beq.n	801c634 <_strtol_l.isra.0+0xc>
 801c630:	2b24      	cmp	r3, #36	; 0x24
 801c632:	d906      	bls.n	801c642 <_strtol_l.isra.0+0x1a>
 801c634:	f7fd ff4e 	bl	801a4d4 <__errno>
 801c638:	2316      	movs	r3, #22
 801c63a:	6003      	str	r3, [r0, #0]
 801c63c:	2000      	movs	r0, #0
 801c63e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c642:	4f3a      	ldr	r7, [pc, #232]	; (801c72c <_strtol_l.isra.0+0x104>)
 801c644:	468e      	mov	lr, r1
 801c646:	4676      	mov	r6, lr
 801c648:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801c64c:	5de5      	ldrb	r5, [r4, r7]
 801c64e:	f015 0508 	ands.w	r5, r5, #8
 801c652:	d1f8      	bne.n	801c646 <_strtol_l.isra.0+0x1e>
 801c654:	2c2d      	cmp	r4, #45	; 0x2d
 801c656:	d134      	bne.n	801c6c2 <_strtol_l.isra.0+0x9a>
 801c658:	f89e 4000 	ldrb.w	r4, [lr]
 801c65c:	f04f 0801 	mov.w	r8, #1
 801c660:	f106 0e02 	add.w	lr, r6, #2
 801c664:	2b00      	cmp	r3, #0
 801c666:	d05c      	beq.n	801c722 <_strtol_l.isra.0+0xfa>
 801c668:	2b10      	cmp	r3, #16
 801c66a:	d10c      	bne.n	801c686 <_strtol_l.isra.0+0x5e>
 801c66c:	2c30      	cmp	r4, #48	; 0x30
 801c66e:	d10a      	bne.n	801c686 <_strtol_l.isra.0+0x5e>
 801c670:	f89e 4000 	ldrb.w	r4, [lr]
 801c674:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801c678:	2c58      	cmp	r4, #88	; 0x58
 801c67a:	d14d      	bne.n	801c718 <_strtol_l.isra.0+0xf0>
 801c67c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801c680:	2310      	movs	r3, #16
 801c682:	f10e 0e02 	add.w	lr, lr, #2
 801c686:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801c68a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c68e:	2600      	movs	r6, #0
 801c690:	fbbc f9f3 	udiv	r9, ip, r3
 801c694:	4635      	mov	r5, r6
 801c696:	fb03 ca19 	mls	sl, r3, r9, ip
 801c69a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801c69e:	2f09      	cmp	r7, #9
 801c6a0:	d818      	bhi.n	801c6d4 <_strtol_l.isra.0+0xac>
 801c6a2:	463c      	mov	r4, r7
 801c6a4:	42a3      	cmp	r3, r4
 801c6a6:	dd24      	ble.n	801c6f2 <_strtol_l.isra.0+0xca>
 801c6a8:	2e00      	cmp	r6, #0
 801c6aa:	db1f      	blt.n	801c6ec <_strtol_l.isra.0+0xc4>
 801c6ac:	45a9      	cmp	r9, r5
 801c6ae:	d31d      	bcc.n	801c6ec <_strtol_l.isra.0+0xc4>
 801c6b0:	d101      	bne.n	801c6b6 <_strtol_l.isra.0+0x8e>
 801c6b2:	45a2      	cmp	sl, r4
 801c6b4:	db1a      	blt.n	801c6ec <_strtol_l.isra.0+0xc4>
 801c6b6:	fb05 4503 	mla	r5, r5, r3, r4
 801c6ba:	2601      	movs	r6, #1
 801c6bc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801c6c0:	e7eb      	b.n	801c69a <_strtol_l.isra.0+0x72>
 801c6c2:	2c2b      	cmp	r4, #43	; 0x2b
 801c6c4:	bf08      	it	eq
 801c6c6:	f89e 4000 	ldrbeq.w	r4, [lr]
 801c6ca:	46a8      	mov	r8, r5
 801c6cc:	bf08      	it	eq
 801c6ce:	f106 0e02 	addeq.w	lr, r6, #2
 801c6d2:	e7c7      	b.n	801c664 <_strtol_l.isra.0+0x3c>
 801c6d4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801c6d8:	2f19      	cmp	r7, #25
 801c6da:	d801      	bhi.n	801c6e0 <_strtol_l.isra.0+0xb8>
 801c6dc:	3c37      	subs	r4, #55	; 0x37
 801c6de:	e7e1      	b.n	801c6a4 <_strtol_l.isra.0+0x7c>
 801c6e0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801c6e4:	2f19      	cmp	r7, #25
 801c6e6:	d804      	bhi.n	801c6f2 <_strtol_l.isra.0+0xca>
 801c6e8:	3c57      	subs	r4, #87	; 0x57
 801c6ea:	e7db      	b.n	801c6a4 <_strtol_l.isra.0+0x7c>
 801c6ec:	f04f 36ff 	mov.w	r6, #4294967295
 801c6f0:	e7e4      	b.n	801c6bc <_strtol_l.isra.0+0x94>
 801c6f2:	2e00      	cmp	r6, #0
 801c6f4:	da05      	bge.n	801c702 <_strtol_l.isra.0+0xda>
 801c6f6:	2322      	movs	r3, #34	; 0x22
 801c6f8:	6003      	str	r3, [r0, #0]
 801c6fa:	4665      	mov	r5, ip
 801c6fc:	b942      	cbnz	r2, 801c710 <_strtol_l.isra.0+0xe8>
 801c6fe:	4628      	mov	r0, r5
 801c700:	e79d      	b.n	801c63e <_strtol_l.isra.0+0x16>
 801c702:	f1b8 0f00 	cmp.w	r8, #0
 801c706:	d000      	beq.n	801c70a <_strtol_l.isra.0+0xe2>
 801c708:	426d      	negs	r5, r5
 801c70a:	2a00      	cmp	r2, #0
 801c70c:	d0f7      	beq.n	801c6fe <_strtol_l.isra.0+0xd6>
 801c70e:	b10e      	cbz	r6, 801c714 <_strtol_l.isra.0+0xec>
 801c710:	f10e 31ff 	add.w	r1, lr, #4294967295
 801c714:	6011      	str	r1, [r2, #0]
 801c716:	e7f2      	b.n	801c6fe <_strtol_l.isra.0+0xd6>
 801c718:	2430      	movs	r4, #48	; 0x30
 801c71a:	2b00      	cmp	r3, #0
 801c71c:	d1b3      	bne.n	801c686 <_strtol_l.isra.0+0x5e>
 801c71e:	2308      	movs	r3, #8
 801c720:	e7b1      	b.n	801c686 <_strtol_l.isra.0+0x5e>
 801c722:	2c30      	cmp	r4, #48	; 0x30
 801c724:	d0a4      	beq.n	801c670 <_strtol_l.isra.0+0x48>
 801c726:	230a      	movs	r3, #10
 801c728:	e7ad      	b.n	801c686 <_strtol_l.isra.0+0x5e>
 801c72a:	bf00      	nop
 801c72c:	08021709 	.word	0x08021709

0801c730 <_strtol_r>:
 801c730:	f7ff bf7a 	b.w	801c628 <_strtol_l.isra.0>

0801c734 <strtol>:
 801c734:	4613      	mov	r3, r2
 801c736:	460a      	mov	r2, r1
 801c738:	4601      	mov	r1, r0
 801c73a:	4802      	ldr	r0, [pc, #8]	; (801c744 <strtol+0x10>)
 801c73c:	6800      	ldr	r0, [r0, #0]
 801c73e:	f7ff bf73 	b.w	801c628 <_strtol_l.isra.0>
 801c742:	bf00      	nop
 801c744:	200001f8 	.word	0x200001f8

0801c748 <_strtoul_l.isra.0>:
 801c748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c74c:	4e3b      	ldr	r6, [pc, #236]	; (801c83c <_strtoul_l.isra.0+0xf4>)
 801c74e:	4686      	mov	lr, r0
 801c750:	468c      	mov	ip, r1
 801c752:	4660      	mov	r0, ip
 801c754:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801c758:	5da5      	ldrb	r5, [r4, r6]
 801c75a:	f015 0508 	ands.w	r5, r5, #8
 801c75e:	d1f8      	bne.n	801c752 <_strtoul_l.isra.0+0xa>
 801c760:	2c2d      	cmp	r4, #45	; 0x2d
 801c762:	d134      	bne.n	801c7ce <_strtoul_l.isra.0+0x86>
 801c764:	f89c 4000 	ldrb.w	r4, [ip]
 801c768:	f04f 0801 	mov.w	r8, #1
 801c76c:	f100 0c02 	add.w	ip, r0, #2
 801c770:	2b00      	cmp	r3, #0
 801c772:	d05e      	beq.n	801c832 <_strtoul_l.isra.0+0xea>
 801c774:	2b10      	cmp	r3, #16
 801c776:	d10c      	bne.n	801c792 <_strtoul_l.isra.0+0x4a>
 801c778:	2c30      	cmp	r4, #48	; 0x30
 801c77a:	d10a      	bne.n	801c792 <_strtoul_l.isra.0+0x4a>
 801c77c:	f89c 0000 	ldrb.w	r0, [ip]
 801c780:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801c784:	2858      	cmp	r0, #88	; 0x58
 801c786:	d14f      	bne.n	801c828 <_strtoul_l.isra.0+0xe0>
 801c788:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801c78c:	2310      	movs	r3, #16
 801c78e:	f10c 0c02 	add.w	ip, ip, #2
 801c792:	f04f 37ff 	mov.w	r7, #4294967295
 801c796:	2500      	movs	r5, #0
 801c798:	fbb7 f7f3 	udiv	r7, r7, r3
 801c79c:	fb03 f907 	mul.w	r9, r3, r7
 801c7a0:	ea6f 0909 	mvn.w	r9, r9
 801c7a4:	4628      	mov	r0, r5
 801c7a6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801c7aa:	2e09      	cmp	r6, #9
 801c7ac:	d818      	bhi.n	801c7e0 <_strtoul_l.isra.0+0x98>
 801c7ae:	4634      	mov	r4, r6
 801c7b0:	42a3      	cmp	r3, r4
 801c7b2:	dd24      	ble.n	801c7fe <_strtoul_l.isra.0+0xb6>
 801c7b4:	2d00      	cmp	r5, #0
 801c7b6:	db1f      	blt.n	801c7f8 <_strtoul_l.isra.0+0xb0>
 801c7b8:	4287      	cmp	r7, r0
 801c7ba:	d31d      	bcc.n	801c7f8 <_strtoul_l.isra.0+0xb0>
 801c7bc:	d101      	bne.n	801c7c2 <_strtoul_l.isra.0+0x7a>
 801c7be:	45a1      	cmp	r9, r4
 801c7c0:	db1a      	blt.n	801c7f8 <_strtoul_l.isra.0+0xb0>
 801c7c2:	fb00 4003 	mla	r0, r0, r3, r4
 801c7c6:	2501      	movs	r5, #1
 801c7c8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801c7cc:	e7eb      	b.n	801c7a6 <_strtoul_l.isra.0+0x5e>
 801c7ce:	2c2b      	cmp	r4, #43	; 0x2b
 801c7d0:	bf08      	it	eq
 801c7d2:	f89c 4000 	ldrbeq.w	r4, [ip]
 801c7d6:	46a8      	mov	r8, r5
 801c7d8:	bf08      	it	eq
 801c7da:	f100 0c02 	addeq.w	ip, r0, #2
 801c7de:	e7c7      	b.n	801c770 <_strtoul_l.isra.0+0x28>
 801c7e0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801c7e4:	2e19      	cmp	r6, #25
 801c7e6:	d801      	bhi.n	801c7ec <_strtoul_l.isra.0+0xa4>
 801c7e8:	3c37      	subs	r4, #55	; 0x37
 801c7ea:	e7e1      	b.n	801c7b0 <_strtoul_l.isra.0+0x68>
 801c7ec:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801c7f0:	2e19      	cmp	r6, #25
 801c7f2:	d804      	bhi.n	801c7fe <_strtoul_l.isra.0+0xb6>
 801c7f4:	3c57      	subs	r4, #87	; 0x57
 801c7f6:	e7db      	b.n	801c7b0 <_strtoul_l.isra.0+0x68>
 801c7f8:	f04f 35ff 	mov.w	r5, #4294967295
 801c7fc:	e7e4      	b.n	801c7c8 <_strtoul_l.isra.0+0x80>
 801c7fe:	2d00      	cmp	r5, #0
 801c800:	da07      	bge.n	801c812 <_strtoul_l.isra.0+0xca>
 801c802:	2322      	movs	r3, #34	; 0x22
 801c804:	f8ce 3000 	str.w	r3, [lr]
 801c808:	f04f 30ff 	mov.w	r0, #4294967295
 801c80c:	b942      	cbnz	r2, 801c820 <_strtoul_l.isra.0+0xd8>
 801c80e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c812:	f1b8 0f00 	cmp.w	r8, #0
 801c816:	d000      	beq.n	801c81a <_strtoul_l.isra.0+0xd2>
 801c818:	4240      	negs	r0, r0
 801c81a:	2a00      	cmp	r2, #0
 801c81c:	d0f7      	beq.n	801c80e <_strtoul_l.isra.0+0xc6>
 801c81e:	b10d      	cbz	r5, 801c824 <_strtoul_l.isra.0+0xdc>
 801c820:	f10c 31ff 	add.w	r1, ip, #4294967295
 801c824:	6011      	str	r1, [r2, #0]
 801c826:	e7f2      	b.n	801c80e <_strtoul_l.isra.0+0xc6>
 801c828:	2430      	movs	r4, #48	; 0x30
 801c82a:	2b00      	cmp	r3, #0
 801c82c:	d1b1      	bne.n	801c792 <_strtoul_l.isra.0+0x4a>
 801c82e:	2308      	movs	r3, #8
 801c830:	e7af      	b.n	801c792 <_strtoul_l.isra.0+0x4a>
 801c832:	2c30      	cmp	r4, #48	; 0x30
 801c834:	d0a2      	beq.n	801c77c <_strtoul_l.isra.0+0x34>
 801c836:	230a      	movs	r3, #10
 801c838:	e7ab      	b.n	801c792 <_strtoul_l.isra.0+0x4a>
 801c83a:	bf00      	nop
 801c83c:	08021709 	.word	0x08021709

0801c840 <_strtoul_r>:
 801c840:	f7ff bf82 	b.w	801c748 <_strtoul_l.isra.0>

0801c844 <strtoul>:
 801c844:	4613      	mov	r3, r2
 801c846:	460a      	mov	r2, r1
 801c848:	4601      	mov	r1, r0
 801c84a:	4802      	ldr	r0, [pc, #8]	; (801c854 <strtoul+0x10>)
 801c84c:	6800      	ldr	r0, [r0, #0]
 801c84e:	f7ff bf7b 	b.w	801c748 <_strtoul_l.isra.0>
 801c852:	bf00      	nop
 801c854:	200001f8 	.word	0x200001f8

0801c858 <_vsniprintf_r>:
 801c858:	b530      	push	{r4, r5, lr}
 801c85a:	1e14      	subs	r4, r2, #0
 801c85c:	4605      	mov	r5, r0
 801c85e:	b09b      	sub	sp, #108	; 0x6c
 801c860:	4618      	mov	r0, r3
 801c862:	da05      	bge.n	801c870 <_vsniprintf_r+0x18>
 801c864:	238b      	movs	r3, #139	; 0x8b
 801c866:	602b      	str	r3, [r5, #0]
 801c868:	f04f 30ff 	mov.w	r0, #4294967295
 801c86c:	b01b      	add	sp, #108	; 0x6c
 801c86e:	bd30      	pop	{r4, r5, pc}
 801c870:	f44f 7302 	mov.w	r3, #520	; 0x208
 801c874:	f8ad 300c 	strh.w	r3, [sp, #12]
 801c878:	bf14      	ite	ne
 801c87a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801c87e:	4623      	moveq	r3, r4
 801c880:	9302      	str	r3, [sp, #8]
 801c882:	9305      	str	r3, [sp, #20]
 801c884:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c888:	9100      	str	r1, [sp, #0]
 801c88a:	9104      	str	r1, [sp, #16]
 801c88c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c890:	4602      	mov	r2, r0
 801c892:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c894:	4669      	mov	r1, sp
 801c896:	4628      	mov	r0, r5
 801c898:	f002 f9ba 	bl	801ec10 <_svfiprintf_r>
 801c89c:	1c43      	adds	r3, r0, #1
 801c89e:	bfbc      	itt	lt
 801c8a0:	238b      	movlt	r3, #139	; 0x8b
 801c8a2:	602b      	strlt	r3, [r5, #0]
 801c8a4:	2c00      	cmp	r4, #0
 801c8a6:	d0e1      	beq.n	801c86c <_vsniprintf_r+0x14>
 801c8a8:	9b00      	ldr	r3, [sp, #0]
 801c8aa:	2200      	movs	r2, #0
 801c8ac:	701a      	strb	r2, [r3, #0]
 801c8ae:	e7dd      	b.n	801c86c <_vsniprintf_r+0x14>

0801c8b0 <vsniprintf>:
 801c8b0:	b507      	push	{r0, r1, r2, lr}
 801c8b2:	9300      	str	r3, [sp, #0]
 801c8b4:	4613      	mov	r3, r2
 801c8b6:	460a      	mov	r2, r1
 801c8b8:	4601      	mov	r1, r0
 801c8ba:	4803      	ldr	r0, [pc, #12]	; (801c8c8 <vsniprintf+0x18>)
 801c8bc:	6800      	ldr	r0, [r0, #0]
 801c8be:	f7ff ffcb 	bl	801c858 <_vsniprintf_r>
 801c8c2:	b003      	add	sp, #12
 801c8c4:	f85d fb04 	ldr.w	pc, [sp], #4
 801c8c8:	200001f8 	.word	0x200001f8

0801c8cc <__swbuf_r>:
 801c8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c8ce:	460e      	mov	r6, r1
 801c8d0:	4614      	mov	r4, r2
 801c8d2:	4605      	mov	r5, r0
 801c8d4:	b118      	cbz	r0, 801c8de <__swbuf_r+0x12>
 801c8d6:	6983      	ldr	r3, [r0, #24]
 801c8d8:	b90b      	cbnz	r3, 801c8de <__swbuf_r+0x12>
 801c8da:	f7fd fe59 	bl	801a590 <__sinit>
 801c8de:	4b21      	ldr	r3, [pc, #132]	; (801c964 <__swbuf_r+0x98>)
 801c8e0:	429c      	cmp	r4, r3
 801c8e2:	d12b      	bne.n	801c93c <__swbuf_r+0x70>
 801c8e4:	686c      	ldr	r4, [r5, #4]
 801c8e6:	69a3      	ldr	r3, [r4, #24]
 801c8e8:	60a3      	str	r3, [r4, #8]
 801c8ea:	89a3      	ldrh	r3, [r4, #12]
 801c8ec:	071a      	lsls	r2, r3, #28
 801c8ee:	d52f      	bpl.n	801c950 <__swbuf_r+0x84>
 801c8f0:	6923      	ldr	r3, [r4, #16]
 801c8f2:	b36b      	cbz	r3, 801c950 <__swbuf_r+0x84>
 801c8f4:	6923      	ldr	r3, [r4, #16]
 801c8f6:	6820      	ldr	r0, [r4, #0]
 801c8f8:	1ac0      	subs	r0, r0, r3
 801c8fa:	6963      	ldr	r3, [r4, #20]
 801c8fc:	b2f6      	uxtb	r6, r6
 801c8fe:	4283      	cmp	r3, r0
 801c900:	4637      	mov	r7, r6
 801c902:	dc04      	bgt.n	801c90e <__swbuf_r+0x42>
 801c904:	4621      	mov	r1, r4
 801c906:	4628      	mov	r0, r5
 801c908:	f000 ffe0 	bl	801d8cc <_fflush_r>
 801c90c:	bb30      	cbnz	r0, 801c95c <__swbuf_r+0x90>
 801c90e:	68a3      	ldr	r3, [r4, #8]
 801c910:	3b01      	subs	r3, #1
 801c912:	60a3      	str	r3, [r4, #8]
 801c914:	6823      	ldr	r3, [r4, #0]
 801c916:	1c5a      	adds	r2, r3, #1
 801c918:	6022      	str	r2, [r4, #0]
 801c91a:	701e      	strb	r6, [r3, #0]
 801c91c:	6963      	ldr	r3, [r4, #20]
 801c91e:	3001      	adds	r0, #1
 801c920:	4283      	cmp	r3, r0
 801c922:	d004      	beq.n	801c92e <__swbuf_r+0x62>
 801c924:	89a3      	ldrh	r3, [r4, #12]
 801c926:	07db      	lsls	r3, r3, #31
 801c928:	d506      	bpl.n	801c938 <__swbuf_r+0x6c>
 801c92a:	2e0a      	cmp	r6, #10
 801c92c:	d104      	bne.n	801c938 <__swbuf_r+0x6c>
 801c92e:	4621      	mov	r1, r4
 801c930:	4628      	mov	r0, r5
 801c932:	f000 ffcb 	bl	801d8cc <_fflush_r>
 801c936:	b988      	cbnz	r0, 801c95c <__swbuf_r+0x90>
 801c938:	4638      	mov	r0, r7
 801c93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c93c:	4b0a      	ldr	r3, [pc, #40]	; (801c968 <__swbuf_r+0x9c>)
 801c93e:	429c      	cmp	r4, r3
 801c940:	d101      	bne.n	801c946 <__swbuf_r+0x7a>
 801c942:	68ac      	ldr	r4, [r5, #8]
 801c944:	e7cf      	b.n	801c8e6 <__swbuf_r+0x1a>
 801c946:	4b09      	ldr	r3, [pc, #36]	; (801c96c <__swbuf_r+0xa0>)
 801c948:	429c      	cmp	r4, r3
 801c94a:	bf08      	it	eq
 801c94c:	68ec      	ldreq	r4, [r5, #12]
 801c94e:	e7ca      	b.n	801c8e6 <__swbuf_r+0x1a>
 801c950:	4621      	mov	r1, r4
 801c952:	4628      	mov	r0, r5
 801c954:	f000 f81e 	bl	801c994 <__swsetup_r>
 801c958:	2800      	cmp	r0, #0
 801c95a:	d0cb      	beq.n	801c8f4 <__swbuf_r+0x28>
 801c95c:	f04f 37ff 	mov.w	r7, #4294967295
 801c960:	e7ea      	b.n	801c938 <__swbuf_r+0x6c>
 801c962:	bf00      	nop
 801c964:	0802182c 	.word	0x0802182c
 801c968:	0802184c 	.word	0x0802184c
 801c96c:	0802180c 	.word	0x0802180c

0801c970 <_write_r>:
 801c970:	b538      	push	{r3, r4, r5, lr}
 801c972:	4d07      	ldr	r5, [pc, #28]	; (801c990 <_write_r+0x20>)
 801c974:	4604      	mov	r4, r0
 801c976:	4608      	mov	r0, r1
 801c978:	4611      	mov	r1, r2
 801c97a:	2200      	movs	r2, #0
 801c97c:	602a      	str	r2, [r5, #0]
 801c97e:	461a      	mov	r2, r3
 801c980:	f7e6 fc15 	bl	80031ae <_write>
 801c984:	1c43      	adds	r3, r0, #1
 801c986:	d102      	bne.n	801c98e <_write_r+0x1e>
 801c988:	682b      	ldr	r3, [r5, #0]
 801c98a:	b103      	cbz	r3, 801c98e <_write_r+0x1e>
 801c98c:	6023      	str	r3, [r4, #0]
 801c98e:	bd38      	pop	{r3, r4, r5, pc}
 801c990:	20008fb0 	.word	0x20008fb0

0801c994 <__swsetup_r>:
 801c994:	4b32      	ldr	r3, [pc, #200]	; (801ca60 <__swsetup_r+0xcc>)
 801c996:	b570      	push	{r4, r5, r6, lr}
 801c998:	681d      	ldr	r5, [r3, #0]
 801c99a:	4606      	mov	r6, r0
 801c99c:	460c      	mov	r4, r1
 801c99e:	b125      	cbz	r5, 801c9aa <__swsetup_r+0x16>
 801c9a0:	69ab      	ldr	r3, [r5, #24]
 801c9a2:	b913      	cbnz	r3, 801c9aa <__swsetup_r+0x16>
 801c9a4:	4628      	mov	r0, r5
 801c9a6:	f7fd fdf3 	bl	801a590 <__sinit>
 801c9aa:	4b2e      	ldr	r3, [pc, #184]	; (801ca64 <__swsetup_r+0xd0>)
 801c9ac:	429c      	cmp	r4, r3
 801c9ae:	d10f      	bne.n	801c9d0 <__swsetup_r+0x3c>
 801c9b0:	686c      	ldr	r4, [r5, #4]
 801c9b2:	89a3      	ldrh	r3, [r4, #12]
 801c9b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c9b8:	0719      	lsls	r1, r3, #28
 801c9ba:	d42c      	bmi.n	801ca16 <__swsetup_r+0x82>
 801c9bc:	06dd      	lsls	r5, r3, #27
 801c9be:	d411      	bmi.n	801c9e4 <__swsetup_r+0x50>
 801c9c0:	2309      	movs	r3, #9
 801c9c2:	6033      	str	r3, [r6, #0]
 801c9c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c9c8:	81a3      	strh	r3, [r4, #12]
 801c9ca:	f04f 30ff 	mov.w	r0, #4294967295
 801c9ce:	e03e      	b.n	801ca4e <__swsetup_r+0xba>
 801c9d0:	4b25      	ldr	r3, [pc, #148]	; (801ca68 <__swsetup_r+0xd4>)
 801c9d2:	429c      	cmp	r4, r3
 801c9d4:	d101      	bne.n	801c9da <__swsetup_r+0x46>
 801c9d6:	68ac      	ldr	r4, [r5, #8]
 801c9d8:	e7eb      	b.n	801c9b2 <__swsetup_r+0x1e>
 801c9da:	4b24      	ldr	r3, [pc, #144]	; (801ca6c <__swsetup_r+0xd8>)
 801c9dc:	429c      	cmp	r4, r3
 801c9de:	bf08      	it	eq
 801c9e0:	68ec      	ldreq	r4, [r5, #12]
 801c9e2:	e7e6      	b.n	801c9b2 <__swsetup_r+0x1e>
 801c9e4:	0758      	lsls	r0, r3, #29
 801c9e6:	d512      	bpl.n	801ca0e <__swsetup_r+0x7a>
 801c9e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c9ea:	b141      	cbz	r1, 801c9fe <__swsetup_r+0x6a>
 801c9ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c9f0:	4299      	cmp	r1, r3
 801c9f2:	d002      	beq.n	801c9fa <__swsetup_r+0x66>
 801c9f4:	4630      	mov	r0, r6
 801c9f6:	f7fd fec9 	bl	801a78c <_free_r>
 801c9fa:	2300      	movs	r3, #0
 801c9fc:	6363      	str	r3, [r4, #52]	; 0x34
 801c9fe:	89a3      	ldrh	r3, [r4, #12]
 801ca00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ca04:	81a3      	strh	r3, [r4, #12]
 801ca06:	2300      	movs	r3, #0
 801ca08:	6063      	str	r3, [r4, #4]
 801ca0a:	6923      	ldr	r3, [r4, #16]
 801ca0c:	6023      	str	r3, [r4, #0]
 801ca0e:	89a3      	ldrh	r3, [r4, #12]
 801ca10:	f043 0308 	orr.w	r3, r3, #8
 801ca14:	81a3      	strh	r3, [r4, #12]
 801ca16:	6923      	ldr	r3, [r4, #16]
 801ca18:	b94b      	cbnz	r3, 801ca2e <__swsetup_r+0x9a>
 801ca1a:	89a3      	ldrh	r3, [r4, #12]
 801ca1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ca20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ca24:	d003      	beq.n	801ca2e <__swsetup_r+0x9a>
 801ca26:	4621      	mov	r1, r4
 801ca28:	4630      	mov	r0, r6
 801ca2a:	f001 fb47 	bl	801e0bc <__smakebuf_r>
 801ca2e:	89a0      	ldrh	r0, [r4, #12]
 801ca30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ca34:	f010 0301 	ands.w	r3, r0, #1
 801ca38:	d00a      	beq.n	801ca50 <__swsetup_r+0xbc>
 801ca3a:	2300      	movs	r3, #0
 801ca3c:	60a3      	str	r3, [r4, #8]
 801ca3e:	6963      	ldr	r3, [r4, #20]
 801ca40:	425b      	negs	r3, r3
 801ca42:	61a3      	str	r3, [r4, #24]
 801ca44:	6923      	ldr	r3, [r4, #16]
 801ca46:	b943      	cbnz	r3, 801ca5a <__swsetup_r+0xc6>
 801ca48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ca4c:	d1ba      	bne.n	801c9c4 <__swsetup_r+0x30>
 801ca4e:	bd70      	pop	{r4, r5, r6, pc}
 801ca50:	0781      	lsls	r1, r0, #30
 801ca52:	bf58      	it	pl
 801ca54:	6963      	ldrpl	r3, [r4, #20]
 801ca56:	60a3      	str	r3, [r4, #8]
 801ca58:	e7f4      	b.n	801ca44 <__swsetup_r+0xb0>
 801ca5a:	2000      	movs	r0, #0
 801ca5c:	e7f7      	b.n	801ca4e <__swsetup_r+0xba>
 801ca5e:	bf00      	nop
 801ca60:	200001f8 	.word	0x200001f8
 801ca64:	0802182c 	.word	0x0802182c
 801ca68:	0802184c 	.word	0x0802184c
 801ca6c:	0802180c 	.word	0x0802180c

0801ca70 <__assert_func>:
 801ca70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ca72:	4614      	mov	r4, r2
 801ca74:	461a      	mov	r2, r3
 801ca76:	4b09      	ldr	r3, [pc, #36]	; (801ca9c <__assert_func+0x2c>)
 801ca78:	681b      	ldr	r3, [r3, #0]
 801ca7a:	4605      	mov	r5, r0
 801ca7c:	68d8      	ldr	r0, [r3, #12]
 801ca7e:	b14c      	cbz	r4, 801ca94 <__assert_func+0x24>
 801ca80:	4b07      	ldr	r3, [pc, #28]	; (801caa0 <__assert_func+0x30>)
 801ca82:	9100      	str	r1, [sp, #0]
 801ca84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ca88:	4906      	ldr	r1, [pc, #24]	; (801caa4 <__assert_func+0x34>)
 801ca8a:	462b      	mov	r3, r5
 801ca8c:	f000 ff5a 	bl	801d944 <fiprintf>
 801ca90:	f7fd fd18 	bl	801a4c4 <abort>
 801ca94:	4b04      	ldr	r3, [pc, #16]	; (801caa8 <__assert_func+0x38>)
 801ca96:	461c      	mov	r4, r3
 801ca98:	e7f3      	b.n	801ca82 <__assert_func+0x12>
 801ca9a:	bf00      	nop
 801ca9c:	200001f8 	.word	0x200001f8
 801caa0:	080218f8 	.word	0x080218f8
 801caa4:	08021905 	.word	0x08021905
 801caa8:	08021933 	.word	0x08021933

0801caac <_close_r>:
 801caac:	b538      	push	{r3, r4, r5, lr}
 801caae:	4d06      	ldr	r5, [pc, #24]	; (801cac8 <_close_r+0x1c>)
 801cab0:	2300      	movs	r3, #0
 801cab2:	4604      	mov	r4, r0
 801cab4:	4608      	mov	r0, r1
 801cab6:	602b      	str	r3, [r5, #0]
 801cab8:	f7e6 fb95 	bl	80031e6 <_close>
 801cabc:	1c43      	adds	r3, r0, #1
 801cabe:	d102      	bne.n	801cac6 <_close_r+0x1a>
 801cac0:	682b      	ldr	r3, [r5, #0]
 801cac2:	b103      	cbz	r3, 801cac6 <_close_r+0x1a>
 801cac4:	6023      	str	r3, [r4, #0]
 801cac6:	bd38      	pop	{r3, r4, r5, pc}
 801cac8:	20008fb0 	.word	0x20008fb0

0801cacc <quorem>:
 801cacc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cad0:	6903      	ldr	r3, [r0, #16]
 801cad2:	690c      	ldr	r4, [r1, #16]
 801cad4:	42a3      	cmp	r3, r4
 801cad6:	4607      	mov	r7, r0
 801cad8:	f2c0 8081 	blt.w	801cbde <quorem+0x112>
 801cadc:	3c01      	subs	r4, #1
 801cade:	f101 0814 	add.w	r8, r1, #20
 801cae2:	f100 0514 	add.w	r5, r0, #20
 801cae6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801caea:	9301      	str	r3, [sp, #4]
 801caec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801caf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801caf4:	3301      	adds	r3, #1
 801caf6:	429a      	cmp	r2, r3
 801caf8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801cafc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801cb00:	fbb2 f6f3 	udiv	r6, r2, r3
 801cb04:	d331      	bcc.n	801cb6a <quorem+0x9e>
 801cb06:	f04f 0e00 	mov.w	lr, #0
 801cb0a:	4640      	mov	r0, r8
 801cb0c:	46ac      	mov	ip, r5
 801cb0e:	46f2      	mov	sl, lr
 801cb10:	f850 2b04 	ldr.w	r2, [r0], #4
 801cb14:	b293      	uxth	r3, r2
 801cb16:	fb06 e303 	mla	r3, r6, r3, lr
 801cb1a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801cb1e:	b29b      	uxth	r3, r3
 801cb20:	ebaa 0303 	sub.w	r3, sl, r3
 801cb24:	0c12      	lsrs	r2, r2, #16
 801cb26:	f8dc a000 	ldr.w	sl, [ip]
 801cb2a:	fb06 e202 	mla	r2, r6, r2, lr
 801cb2e:	fa13 f38a 	uxtah	r3, r3, sl
 801cb32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801cb36:	fa1f fa82 	uxth.w	sl, r2
 801cb3a:	f8dc 2000 	ldr.w	r2, [ip]
 801cb3e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801cb42:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801cb46:	b29b      	uxth	r3, r3
 801cb48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cb4c:	4581      	cmp	r9, r0
 801cb4e:	f84c 3b04 	str.w	r3, [ip], #4
 801cb52:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801cb56:	d2db      	bcs.n	801cb10 <quorem+0x44>
 801cb58:	f855 300b 	ldr.w	r3, [r5, fp]
 801cb5c:	b92b      	cbnz	r3, 801cb6a <quorem+0x9e>
 801cb5e:	9b01      	ldr	r3, [sp, #4]
 801cb60:	3b04      	subs	r3, #4
 801cb62:	429d      	cmp	r5, r3
 801cb64:	461a      	mov	r2, r3
 801cb66:	d32e      	bcc.n	801cbc6 <quorem+0xfa>
 801cb68:	613c      	str	r4, [r7, #16]
 801cb6a:	4638      	mov	r0, r7
 801cb6c:	f001 fdcc 	bl	801e708 <__mcmp>
 801cb70:	2800      	cmp	r0, #0
 801cb72:	db24      	blt.n	801cbbe <quorem+0xf2>
 801cb74:	3601      	adds	r6, #1
 801cb76:	4628      	mov	r0, r5
 801cb78:	f04f 0c00 	mov.w	ip, #0
 801cb7c:	f858 2b04 	ldr.w	r2, [r8], #4
 801cb80:	f8d0 e000 	ldr.w	lr, [r0]
 801cb84:	b293      	uxth	r3, r2
 801cb86:	ebac 0303 	sub.w	r3, ip, r3
 801cb8a:	0c12      	lsrs	r2, r2, #16
 801cb8c:	fa13 f38e 	uxtah	r3, r3, lr
 801cb90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801cb94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801cb98:	b29b      	uxth	r3, r3
 801cb9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cb9e:	45c1      	cmp	r9, r8
 801cba0:	f840 3b04 	str.w	r3, [r0], #4
 801cba4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801cba8:	d2e8      	bcs.n	801cb7c <quorem+0xb0>
 801cbaa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801cbae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801cbb2:	b922      	cbnz	r2, 801cbbe <quorem+0xf2>
 801cbb4:	3b04      	subs	r3, #4
 801cbb6:	429d      	cmp	r5, r3
 801cbb8:	461a      	mov	r2, r3
 801cbba:	d30a      	bcc.n	801cbd2 <quorem+0x106>
 801cbbc:	613c      	str	r4, [r7, #16]
 801cbbe:	4630      	mov	r0, r6
 801cbc0:	b003      	add	sp, #12
 801cbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbc6:	6812      	ldr	r2, [r2, #0]
 801cbc8:	3b04      	subs	r3, #4
 801cbca:	2a00      	cmp	r2, #0
 801cbcc:	d1cc      	bne.n	801cb68 <quorem+0x9c>
 801cbce:	3c01      	subs	r4, #1
 801cbd0:	e7c7      	b.n	801cb62 <quorem+0x96>
 801cbd2:	6812      	ldr	r2, [r2, #0]
 801cbd4:	3b04      	subs	r3, #4
 801cbd6:	2a00      	cmp	r2, #0
 801cbd8:	d1f0      	bne.n	801cbbc <quorem+0xf0>
 801cbda:	3c01      	subs	r4, #1
 801cbdc:	e7eb      	b.n	801cbb6 <quorem+0xea>
 801cbde:	2000      	movs	r0, #0
 801cbe0:	e7ee      	b.n	801cbc0 <quorem+0xf4>
 801cbe2:	0000      	movs	r0, r0
 801cbe4:	0000      	movs	r0, r0
	...

0801cbe8 <_dtoa_r>:
 801cbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbec:	ed2d 8b02 	vpush	{d8}
 801cbf0:	ec57 6b10 	vmov	r6, r7, d0
 801cbf4:	b095      	sub	sp, #84	; 0x54
 801cbf6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801cbf8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801cbfc:	9105      	str	r1, [sp, #20]
 801cbfe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801cc02:	4604      	mov	r4, r0
 801cc04:	9209      	str	r2, [sp, #36]	; 0x24
 801cc06:	930f      	str	r3, [sp, #60]	; 0x3c
 801cc08:	b975      	cbnz	r5, 801cc28 <_dtoa_r+0x40>
 801cc0a:	2010      	movs	r0, #16
 801cc0c:	f7fd fd86 	bl	801a71c <malloc>
 801cc10:	4602      	mov	r2, r0
 801cc12:	6260      	str	r0, [r4, #36]	; 0x24
 801cc14:	b920      	cbnz	r0, 801cc20 <_dtoa_r+0x38>
 801cc16:	4bb2      	ldr	r3, [pc, #712]	; (801cee0 <_dtoa_r+0x2f8>)
 801cc18:	21ea      	movs	r1, #234	; 0xea
 801cc1a:	48b2      	ldr	r0, [pc, #712]	; (801cee4 <_dtoa_r+0x2fc>)
 801cc1c:	f7ff ff28 	bl	801ca70 <__assert_func>
 801cc20:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801cc24:	6005      	str	r5, [r0, #0]
 801cc26:	60c5      	str	r5, [r0, #12]
 801cc28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cc2a:	6819      	ldr	r1, [r3, #0]
 801cc2c:	b151      	cbz	r1, 801cc44 <_dtoa_r+0x5c>
 801cc2e:	685a      	ldr	r2, [r3, #4]
 801cc30:	604a      	str	r2, [r1, #4]
 801cc32:	2301      	movs	r3, #1
 801cc34:	4093      	lsls	r3, r2
 801cc36:	608b      	str	r3, [r1, #8]
 801cc38:	4620      	mov	r0, r4
 801cc3a:	f001 fadd 	bl	801e1f8 <_Bfree>
 801cc3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cc40:	2200      	movs	r2, #0
 801cc42:	601a      	str	r2, [r3, #0]
 801cc44:	1e3b      	subs	r3, r7, #0
 801cc46:	bfb9      	ittee	lt
 801cc48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801cc4c:	9303      	strlt	r3, [sp, #12]
 801cc4e:	2300      	movge	r3, #0
 801cc50:	f8c8 3000 	strge.w	r3, [r8]
 801cc54:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801cc58:	4ba3      	ldr	r3, [pc, #652]	; (801cee8 <_dtoa_r+0x300>)
 801cc5a:	bfbc      	itt	lt
 801cc5c:	2201      	movlt	r2, #1
 801cc5e:	f8c8 2000 	strlt.w	r2, [r8]
 801cc62:	ea33 0309 	bics.w	r3, r3, r9
 801cc66:	d11b      	bne.n	801cca0 <_dtoa_r+0xb8>
 801cc68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cc6a:	f242 730f 	movw	r3, #9999	; 0x270f
 801cc6e:	6013      	str	r3, [r2, #0]
 801cc70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801cc74:	4333      	orrs	r3, r6
 801cc76:	f000 857a 	beq.w	801d76e <_dtoa_r+0xb86>
 801cc7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801cc7c:	b963      	cbnz	r3, 801cc98 <_dtoa_r+0xb0>
 801cc7e:	4b9b      	ldr	r3, [pc, #620]	; (801ceec <_dtoa_r+0x304>)
 801cc80:	e024      	b.n	801cccc <_dtoa_r+0xe4>
 801cc82:	4b9b      	ldr	r3, [pc, #620]	; (801cef0 <_dtoa_r+0x308>)
 801cc84:	9300      	str	r3, [sp, #0]
 801cc86:	3308      	adds	r3, #8
 801cc88:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801cc8a:	6013      	str	r3, [r2, #0]
 801cc8c:	9800      	ldr	r0, [sp, #0]
 801cc8e:	b015      	add	sp, #84	; 0x54
 801cc90:	ecbd 8b02 	vpop	{d8}
 801cc94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc98:	4b94      	ldr	r3, [pc, #592]	; (801ceec <_dtoa_r+0x304>)
 801cc9a:	9300      	str	r3, [sp, #0]
 801cc9c:	3303      	adds	r3, #3
 801cc9e:	e7f3      	b.n	801cc88 <_dtoa_r+0xa0>
 801cca0:	ed9d 7b02 	vldr	d7, [sp, #8]
 801cca4:	2200      	movs	r2, #0
 801cca6:	ec51 0b17 	vmov	r0, r1, d7
 801ccaa:	2300      	movs	r3, #0
 801ccac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801ccb0:	f7e3 ff1a 	bl	8000ae8 <__aeabi_dcmpeq>
 801ccb4:	4680      	mov	r8, r0
 801ccb6:	b158      	cbz	r0, 801ccd0 <_dtoa_r+0xe8>
 801ccb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ccba:	2301      	movs	r3, #1
 801ccbc:	6013      	str	r3, [r2, #0]
 801ccbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ccc0:	2b00      	cmp	r3, #0
 801ccc2:	f000 8551 	beq.w	801d768 <_dtoa_r+0xb80>
 801ccc6:	488b      	ldr	r0, [pc, #556]	; (801cef4 <_dtoa_r+0x30c>)
 801ccc8:	6018      	str	r0, [r3, #0]
 801ccca:	1e43      	subs	r3, r0, #1
 801cccc:	9300      	str	r3, [sp, #0]
 801ccce:	e7dd      	b.n	801cc8c <_dtoa_r+0xa4>
 801ccd0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801ccd4:	aa12      	add	r2, sp, #72	; 0x48
 801ccd6:	a913      	add	r1, sp, #76	; 0x4c
 801ccd8:	4620      	mov	r0, r4
 801ccda:	f001 fe35 	bl	801e948 <__d2b>
 801ccde:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801cce2:	4683      	mov	fp, r0
 801cce4:	2d00      	cmp	r5, #0
 801cce6:	d07c      	beq.n	801cde2 <_dtoa_r+0x1fa>
 801cce8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ccea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801ccee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ccf2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801ccf6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801ccfa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801ccfe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801cd02:	4b7d      	ldr	r3, [pc, #500]	; (801cef8 <_dtoa_r+0x310>)
 801cd04:	2200      	movs	r2, #0
 801cd06:	4630      	mov	r0, r6
 801cd08:	4639      	mov	r1, r7
 801cd0a:	f7e3 facd 	bl	80002a8 <__aeabi_dsub>
 801cd0e:	a36e      	add	r3, pc, #440	; (adr r3, 801cec8 <_dtoa_r+0x2e0>)
 801cd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd14:	f7e3 fc80 	bl	8000618 <__aeabi_dmul>
 801cd18:	a36d      	add	r3, pc, #436	; (adr r3, 801ced0 <_dtoa_r+0x2e8>)
 801cd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd1e:	f7e3 fac5 	bl	80002ac <__adddf3>
 801cd22:	4606      	mov	r6, r0
 801cd24:	4628      	mov	r0, r5
 801cd26:	460f      	mov	r7, r1
 801cd28:	f7e3 fc0c 	bl	8000544 <__aeabi_i2d>
 801cd2c:	a36a      	add	r3, pc, #424	; (adr r3, 801ced8 <_dtoa_r+0x2f0>)
 801cd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd32:	f7e3 fc71 	bl	8000618 <__aeabi_dmul>
 801cd36:	4602      	mov	r2, r0
 801cd38:	460b      	mov	r3, r1
 801cd3a:	4630      	mov	r0, r6
 801cd3c:	4639      	mov	r1, r7
 801cd3e:	f7e3 fab5 	bl	80002ac <__adddf3>
 801cd42:	4606      	mov	r6, r0
 801cd44:	460f      	mov	r7, r1
 801cd46:	f7e3 ff17 	bl	8000b78 <__aeabi_d2iz>
 801cd4a:	2200      	movs	r2, #0
 801cd4c:	4682      	mov	sl, r0
 801cd4e:	2300      	movs	r3, #0
 801cd50:	4630      	mov	r0, r6
 801cd52:	4639      	mov	r1, r7
 801cd54:	f7e3 fed2 	bl	8000afc <__aeabi_dcmplt>
 801cd58:	b148      	cbz	r0, 801cd6e <_dtoa_r+0x186>
 801cd5a:	4650      	mov	r0, sl
 801cd5c:	f7e3 fbf2 	bl	8000544 <__aeabi_i2d>
 801cd60:	4632      	mov	r2, r6
 801cd62:	463b      	mov	r3, r7
 801cd64:	f7e3 fec0 	bl	8000ae8 <__aeabi_dcmpeq>
 801cd68:	b908      	cbnz	r0, 801cd6e <_dtoa_r+0x186>
 801cd6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cd6e:	f1ba 0f16 	cmp.w	sl, #22
 801cd72:	d854      	bhi.n	801ce1e <_dtoa_r+0x236>
 801cd74:	4b61      	ldr	r3, [pc, #388]	; (801cefc <_dtoa_r+0x314>)
 801cd76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801cd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801cd82:	f7e3 febb 	bl	8000afc <__aeabi_dcmplt>
 801cd86:	2800      	cmp	r0, #0
 801cd88:	d04b      	beq.n	801ce22 <_dtoa_r+0x23a>
 801cd8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cd8e:	2300      	movs	r3, #0
 801cd90:	930e      	str	r3, [sp, #56]	; 0x38
 801cd92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801cd94:	1b5d      	subs	r5, r3, r5
 801cd96:	1e6b      	subs	r3, r5, #1
 801cd98:	9304      	str	r3, [sp, #16]
 801cd9a:	bf43      	ittte	mi
 801cd9c:	2300      	movmi	r3, #0
 801cd9e:	f1c5 0801 	rsbmi	r8, r5, #1
 801cda2:	9304      	strmi	r3, [sp, #16]
 801cda4:	f04f 0800 	movpl.w	r8, #0
 801cda8:	f1ba 0f00 	cmp.w	sl, #0
 801cdac:	db3b      	blt.n	801ce26 <_dtoa_r+0x23e>
 801cdae:	9b04      	ldr	r3, [sp, #16]
 801cdb0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801cdb4:	4453      	add	r3, sl
 801cdb6:	9304      	str	r3, [sp, #16]
 801cdb8:	2300      	movs	r3, #0
 801cdba:	9306      	str	r3, [sp, #24]
 801cdbc:	9b05      	ldr	r3, [sp, #20]
 801cdbe:	2b09      	cmp	r3, #9
 801cdc0:	d869      	bhi.n	801ce96 <_dtoa_r+0x2ae>
 801cdc2:	2b05      	cmp	r3, #5
 801cdc4:	bfc4      	itt	gt
 801cdc6:	3b04      	subgt	r3, #4
 801cdc8:	9305      	strgt	r3, [sp, #20]
 801cdca:	9b05      	ldr	r3, [sp, #20]
 801cdcc:	f1a3 0302 	sub.w	r3, r3, #2
 801cdd0:	bfcc      	ite	gt
 801cdd2:	2500      	movgt	r5, #0
 801cdd4:	2501      	movle	r5, #1
 801cdd6:	2b03      	cmp	r3, #3
 801cdd8:	d869      	bhi.n	801ceae <_dtoa_r+0x2c6>
 801cdda:	e8df f003 	tbb	[pc, r3]
 801cdde:	4e2c      	.short	0x4e2c
 801cde0:	5a4c      	.short	0x5a4c
 801cde2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801cde6:	441d      	add	r5, r3
 801cde8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801cdec:	2b20      	cmp	r3, #32
 801cdee:	bfc1      	itttt	gt
 801cdf0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801cdf4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801cdf8:	fa09 f303 	lslgt.w	r3, r9, r3
 801cdfc:	fa26 f000 	lsrgt.w	r0, r6, r0
 801ce00:	bfda      	itte	le
 801ce02:	f1c3 0320 	rsble	r3, r3, #32
 801ce06:	fa06 f003 	lslle.w	r0, r6, r3
 801ce0a:	4318      	orrgt	r0, r3
 801ce0c:	f7e3 fb8a 	bl	8000524 <__aeabi_ui2d>
 801ce10:	2301      	movs	r3, #1
 801ce12:	4606      	mov	r6, r0
 801ce14:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801ce18:	3d01      	subs	r5, #1
 801ce1a:	9310      	str	r3, [sp, #64]	; 0x40
 801ce1c:	e771      	b.n	801cd02 <_dtoa_r+0x11a>
 801ce1e:	2301      	movs	r3, #1
 801ce20:	e7b6      	b.n	801cd90 <_dtoa_r+0x1a8>
 801ce22:	900e      	str	r0, [sp, #56]	; 0x38
 801ce24:	e7b5      	b.n	801cd92 <_dtoa_r+0x1aa>
 801ce26:	f1ca 0300 	rsb	r3, sl, #0
 801ce2a:	9306      	str	r3, [sp, #24]
 801ce2c:	2300      	movs	r3, #0
 801ce2e:	eba8 080a 	sub.w	r8, r8, sl
 801ce32:	930d      	str	r3, [sp, #52]	; 0x34
 801ce34:	e7c2      	b.n	801cdbc <_dtoa_r+0x1d4>
 801ce36:	2300      	movs	r3, #0
 801ce38:	9308      	str	r3, [sp, #32]
 801ce3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce3c:	2b00      	cmp	r3, #0
 801ce3e:	dc39      	bgt.n	801ceb4 <_dtoa_r+0x2cc>
 801ce40:	f04f 0901 	mov.w	r9, #1
 801ce44:	f8cd 9004 	str.w	r9, [sp, #4]
 801ce48:	464b      	mov	r3, r9
 801ce4a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801ce4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801ce50:	2200      	movs	r2, #0
 801ce52:	6042      	str	r2, [r0, #4]
 801ce54:	2204      	movs	r2, #4
 801ce56:	f102 0614 	add.w	r6, r2, #20
 801ce5a:	429e      	cmp	r6, r3
 801ce5c:	6841      	ldr	r1, [r0, #4]
 801ce5e:	d92f      	bls.n	801cec0 <_dtoa_r+0x2d8>
 801ce60:	4620      	mov	r0, r4
 801ce62:	f001 f989 	bl	801e178 <_Balloc>
 801ce66:	9000      	str	r0, [sp, #0]
 801ce68:	2800      	cmp	r0, #0
 801ce6a:	d14b      	bne.n	801cf04 <_dtoa_r+0x31c>
 801ce6c:	4b24      	ldr	r3, [pc, #144]	; (801cf00 <_dtoa_r+0x318>)
 801ce6e:	4602      	mov	r2, r0
 801ce70:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801ce74:	e6d1      	b.n	801cc1a <_dtoa_r+0x32>
 801ce76:	2301      	movs	r3, #1
 801ce78:	e7de      	b.n	801ce38 <_dtoa_r+0x250>
 801ce7a:	2300      	movs	r3, #0
 801ce7c:	9308      	str	r3, [sp, #32]
 801ce7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce80:	eb0a 0903 	add.w	r9, sl, r3
 801ce84:	f109 0301 	add.w	r3, r9, #1
 801ce88:	2b01      	cmp	r3, #1
 801ce8a:	9301      	str	r3, [sp, #4]
 801ce8c:	bfb8      	it	lt
 801ce8e:	2301      	movlt	r3, #1
 801ce90:	e7dd      	b.n	801ce4e <_dtoa_r+0x266>
 801ce92:	2301      	movs	r3, #1
 801ce94:	e7f2      	b.n	801ce7c <_dtoa_r+0x294>
 801ce96:	2501      	movs	r5, #1
 801ce98:	2300      	movs	r3, #0
 801ce9a:	9305      	str	r3, [sp, #20]
 801ce9c:	9508      	str	r5, [sp, #32]
 801ce9e:	f04f 39ff 	mov.w	r9, #4294967295
 801cea2:	2200      	movs	r2, #0
 801cea4:	f8cd 9004 	str.w	r9, [sp, #4]
 801cea8:	2312      	movs	r3, #18
 801ceaa:	9209      	str	r2, [sp, #36]	; 0x24
 801ceac:	e7cf      	b.n	801ce4e <_dtoa_r+0x266>
 801ceae:	2301      	movs	r3, #1
 801ceb0:	9308      	str	r3, [sp, #32]
 801ceb2:	e7f4      	b.n	801ce9e <_dtoa_r+0x2b6>
 801ceb4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801ceb8:	f8cd 9004 	str.w	r9, [sp, #4]
 801cebc:	464b      	mov	r3, r9
 801cebe:	e7c6      	b.n	801ce4e <_dtoa_r+0x266>
 801cec0:	3101      	adds	r1, #1
 801cec2:	6041      	str	r1, [r0, #4]
 801cec4:	0052      	lsls	r2, r2, #1
 801cec6:	e7c6      	b.n	801ce56 <_dtoa_r+0x26e>
 801cec8:	636f4361 	.word	0x636f4361
 801cecc:	3fd287a7 	.word	0x3fd287a7
 801ced0:	8b60c8b3 	.word	0x8b60c8b3
 801ced4:	3fc68a28 	.word	0x3fc68a28
 801ced8:	509f79fb 	.word	0x509f79fb
 801cedc:	3fd34413 	.word	0x3fd34413
 801cee0:	08021941 	.word	0x08021941
 801cee4:	08021958 	.word	0x08021958
 801cee8:	7ff00000 	.word	0x7ff00000
 801ceec:	0802193d 	.word	0x0802193d
 801cef0:	08021934 	.word	0x08021934
 801cef4:	08021bba 	.word	0x08021bba
 801cef8:	3ff80000 	.word	0x3ff80000
 801cefc:	08021ad0 	.word	0x08021ad0
 801cf00:	080219b7 	.word	0x080219b7
 801cf04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cf06:	9a00      	ldr	r2, [sp, #0]
 801cf08:	601a      	str	r2, [r3, #0]
 801cf0a:	9b01      	ldr	r3, [sp, #4]
 801cf0c:	2b0e      	cmp	r3, #14
 801cf0e:	f200 80ad 	bhi.w	801d06c <_dtoa_r+0x484>
 801cf12:	2d00      	cmp	r5, #0
 801cf14:	f000 80aa 	beq.w	801d06c <_dtoa_r+0x484>
 801cf18:	f1ba 0f00 	cmp.w	sl, #0
 801cf1c:	dd36      	ble.n	801cf8c <_dtoa_r+0x3a4>
 801cf1e:	4ac3      	ldr	r2, [pc, #780]	; (801d22c <_dtoa_r+0x644>)
 801cf20:	f00a 030f 	and.w	r3, sl, #15
 801cf24:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801cf28:	ed93 7b00 	vldr	d7, [r3]
 801cf2c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801cf30:	ea4f 172a 	mov.w	r7, sl, asr #4
 801cf34:	eeb0 8a47 	vmov.f32	s16, s14
 801cf38:	eef0 8a67 	vmov.f32	s17, s15
 801cf3c:	d016      	beq.n	801cf6c <_dtoa_r+0x384>
 801cf3e:	4bbc      	ldr	r3, [pc, #752]	; (801d230 <_dtoa_r+0x648>)
 801cf40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801cf44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801cf48:	f7e3 fc90 	bl	800086c <__aeabi_ddiv>
 801cf4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cf50:	f007 070f 	and.w	r7, r7, #15
 801cf54:	2503      	movs	r5, #3
 801cf56:	4eb6      	ldr	r6, [pc, #728]	; (801d230 <_dtoa_r+0x648>)
 801cf58:	b957      	cbnz	r7, 801cf70 <_dtoa_r+0x388>
 801cf5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cf5e:	ec53 2b18 	vmov	r2, r3, d8
 801cf62:	f7e3 fc83 	bl	800086c <__aeabi_ddiv>
 801cf66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cf6a:	e029      	b.n	801cfc0 <_dtoa_r+0x3d8>
 801cf6c:	2502      	movs	r5, #2
 801cf6e:	e7f2      	b.n	801cf56 <_dtoa_r+0x36e>
 801cf70:	07f9      	lsls	r1, r7, #31
 801cf72:	d508      	bpl.n	801cf86 <_dtoa_r+0x39e>
 801cf74:	ec51 0b18 	vmov	r0, r1, d8
 801cf78:	e9d6 2300 	ldrd	r2, r3, [r6]
 801cf7c:	f7e3 fb4c 	bl	8000618 <__aeabi_dmul>
 801cf80:	ec41 0b18 	vmov	d8, r0, r1
 801cf84:	3501      	adds	r5, #1
 801cf86:	107f      	asrs	r7, r7, #1
 801cf88:	3608      	adds	r6, #8
 801cf8a:	e7e5      	b.n	801cf58 <_dtoa_r+0x370>
 801cf8c:	f000 80a6 	beq.w	801d0dc <_dtoa_r+0x4f4>
 801cf90:	f1ca 0600 	rsb	r6, sl, #0
 801cf94:	4ba5      	ldr	r3, [pc, #660]	; (801d22c <_dtoa_r+0x644>)
 801cf96:	4fa6      	ldr	r7, [pc, #664]	; (801d230 <_dtoa_r+0x648>)
 801cf98:	f006 020f 	and.w	r2, r6, #15
 801cf9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801cfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfa4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801cfa8:	f7e3 fb36 	bl	8000618 <__aeabi_dmul>
 801cfac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cfb0:	1136      	asrs	r6, r6, #4
 801cfb2:	2300      	movs	r3, #0
 801cfb4:	2502      	movs	r5, #2
 801cfb6:	2e00      	cmp	r6, #0
 801cfb8:	f040 8085 	bne.w	801d0c6 <_dtoa_r+0x4de>
 801cfbc:	2b00      	cmp	r3, #0
 801cfbe:	d1d2      	bne.n	801cf66 <_dtoa_r+0x37e>
 801cfc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cfc2:	2b00      	cmp	r3, #0
 801cfc4:	f000 808c 	beq.w	801d0e0 <_dtoa_r+0x4f8>
 801cfc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801cfcc:	4b99      	ldr	r3, [pc, #612]	; (801d234 <_dtoa_r+0x64c>)
 801cfce:	2200      	movs	r2, #0
 801cfd0:	4630      	mov	r0, r6
 801cfd2:	4639      	mov	r1, r7
 801cfd4:	f7e3 fd92 	bl	8000afc <__aeabi_dcmplt>
 801cfd8:	2800      	cmp	r0, #0
 801cfda:	f000 8081 	beq.w	801d0e0 <_dtoa_r+0x4f8>
 801cfde:	9b01      	ldr	r3, [sp, #4]
 801cfe0:	2b00      	cmp	r3, #0
 801cfe2:	d07d      	beq.n	801d0e0 <_dtoa_r+0x4f8>
 801cfe4:	f1b9 0f00 	cmp.w	r9, #0
 801cfe8:	dd3c      	ble.n	801d064 <_dtoa_r+0x47c>
 801cfea:	f10a 33ff 	add.w	r3, sl, #4294967295
 801cfee:	9307      	str	r3, [sp, #28]
 801cff0:	2200      	movs	r2, #0
 801cff2:	4b91      	ldr	r3, [pc, #580]	; (801d238 <_dtoa_r+0x650>)
 801cff4:	4630      	mov	r0, r6
 801cff6:	4639      	mov	r1, r7
 801cff8:	f7e3 fb0e 	bl	8000618 <__aeabi_dmul>
 801cffc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d000:	3501      	adds	r5, #1
 801d002:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801d006:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801d00a:	4628      	mov	r0, r5
 801d00c:	f7e3 fa9a 	bl	8000544 <__aeabi_i2d>
 801d010:	4632      	mov	r2, r6
 801d012:	463b      	mov	r3, r7
 801d014:	f7e3 fb00 	bl	8000618 <__aeabi_dmul>
 801d018:	4b88      	ldr	r3, [pc, #544]	; (801d23c <_dtoa_r+0x654>)
 801d01a:	2200      	movs	r2, #0
 801d01c:	f7e3 f946 	bl	80002ac <__adddf3>
 801d020:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801d024:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d028:	9303      	str	r3, [sp, #12]
 801d02a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d02c:	2b00      	cmp	r3, #0
 801d02e:	d15c      	bne.n	801d0ea <_dtoa_r+0x502>
 801d030:	4b83      	ldr	r3, [pc, #524]	; (801d240 <_dtoa_r+0x658>)
 801d032:	2200      	movs	r2, #0
 801d034:	4630      	mov	r0, r6
 801d036:	4639      	mov	r1, r7
 801d038:	f7e3 f936 	bl	80002a8 <__aeabi_dsub>
 801d03c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d040:	4606      	mov	r6, r0
 801d042:	460f      	mov	r7, r1
 801d044:	f7e3 fd78 	bl	8000b38 <__aeabi_dcmpgt>
 801d048:	2800      	cmp	r0, #0
 801d04a:	f040 8296 	bne.w	801d57a <_dtoa_r+0x992>
 801d04e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801d052:	4630      	mov	r0, r6
 801d054:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d058:	4639      	mov	r1, r7
 801d05a:	f7e3 fd4f 	bl	8000afc <__aeabi_dcmplt>
 801d05e:	2800      	cmp	r0, #0
 801d060:	f040 8288 	bne.w	801d574 <_dtoa_r+0x98c>
 801d064:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801d068:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801d06c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d06e:	2b00      	cmp	r3, #0
 801d070:	f2c0 8158 	blt.w	801d324 <_dtoa_r+0x73c>
 801d074:	f1ba 0f0e 	cmp.w	sl, #14
 801d078:	f300 8154 	bgt.w	801d324 <_dtoa_r+0x73c>
 801d07c:	4b6b      	ldr	r3, [pc, #428]	; (801d22c <_dtoa_r+0x644>)
 801d07e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801d082:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d088:	2b00      	cmp	r3, #0
 801d08a:	f280 80e3 	bge.w	801d254 <_dtoa_r+0x66c>
 801d08e:	9b01      	ldr	r3, [sp, #4]
 801d090:	2b00      	cmp	r3, #0
 801d092:	f300 80df 	bgt.w	801d254 <_dtoa_r+0x66c>
 801d096:	f040 826d 	bne.w	801d574 <_dtoa_r+0x98c>
 801d09a:	4b69      	ldr	r3, [pc, #420]	; (801d240 <_dtoa_r+0x658>)
 801d09c:	2200      	movs	r2, #0
 801d09e:	4640      	mov	r0, r8
 801d0a0:	4649      	mov	r1, r9
 801d0a2:	f7e3 fab9 	bl	8000618 <__aeabi_dmul>
 801d0a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d0aa:	f7e3 fd3b 	bl	8000b24 <__aeabi_dcmpge>
 801d0ae:	9e01      	ldr	r6, [sp, #4]
 801d0b0:	4637      	mov	r7, r6
 801d0b2:	2800      	cmp	r0, #0
 801d0b4:	f040 8243 	bne.w	801d53e <_dtoa_r+0x956>
 801d0b8:	9d00      	ldr	r5, [sp, #0]
 801d0ba:	2331      	movs	r3, #49	; 0x31
 801d0bc:	f805 3b01 	strb.w	r3, [r5], #1
 801d0c0:	f10a 0a01 	add.w	sl, sl, #1
 801d0c4:	e23f      	b.n	801d546 <_dtoa_r+0x95e>
 801d0c6:	07f2      	lsls	r2, r6, #31
 801d0c8:	d505      	bpl.n	801d0d6 <_dtoa_r+0x4ee>
 801d0ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d0ce:	f7e3 faa3 	bl	8000618 <__aeabi_dmul>
 801d0d2:	3501      	adds	r5, #1
 801d0d4:	2301      	movs	r3, #1
 801d0d6:	1076      	asrs	r6, r6, #1
 801d0d8:	3708      	adds	r7, #8
 801d0da:	e76c      	b.n	801cfb6 <_dtoa_r+0x3ce>
 801d0dc:	2502      	movs	r5, #2
 801d0de:	e76f      	b.n	801cfc0 <_dtoa_r+0x3d8>
 801d0e0:	9b01      	ldr	r3, [sp, #4]
 801d0e2:	f8cd a01c 	str.w	sl, [sp, #28]
 801d0e6:	930c      	str	r3, [sp, #48]	; 0x30
 801d0e8:	e78d      	b.n	801d006 <_dtoa_r+0x41e>
 801d0ea:	9900      	ldr	r1, [sp, #0]
 801d0ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d0ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d0f0:	4b4e      	ldr	r3, [pc, #312]	; (801d22c <_dtoa_r+0x644>)
 801d0f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d0f6:	4401      	add	r1, r0
 801d0f8:	9102      	str	r1, [sp, #8]
 801d0fa:	9908      	ldr	r1, [sp, #32]
 801d0fc:	eeb0 8a47 	vmov.f32	s16, s14
 801d100:	eef0 8a67 	vmov.f32	s17, s15
 801d104:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d108:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d10c:	2900      	cmp	r1, #0
 801d10e:	d045      	beq.n	801d19c <_dtoa_r+0x5b4>
 801d110:	494c      	ldr	r1, [pc, #304]	; (801d244 <_dtoa_r+0x65c>)
 801d112:	2000      	movs	r0, #0
 801d114:	f7e3 fbaa 	bl	800086c <__aeabi_ddiv>
 801d118:	ec53 2b18 	vmov	r2, r3, d8
 801d11c:	f7e3 f8c4 	bl	80002a8 <__aeabi_dsub>
 801d120:	9d00      	ldr	r5, [sp, #0]
 801d122:	ec41 0b18 	vmov	d8, r0, r1
 801d126:	4639      	mov	r1, r7
 801d128:	4630      	mov	r0, r6
 801d12a:	f7e3 fd25 	bl	8000b78 <__aeabi_d2iz>
 801d12e:	900c      	str	r0, [sp, #48]	; 0x30
 801d130:	f7e3 fa08 	bl	8000544 <__aeabi_i2d>
 801d134:	4602      	mov	r2, r0
 801d136:	460b      	mov	r3, r1
 801d138:	4630      	mov	r0, r6
 801d13a:	4639      	mov	r1, r7
 801d13c:	f7e3 f8b4 	bl	80002a8 <__aeabi_dsub>
 801d140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d142:	3330      	adds	r3, #48	; 0x30
 801d144:	f805 3b01 	strb.w	r3, [r5], #1
 801d148:	ec53 2b18 	vmov	r2, r3, d8
 801d14c:	4606      	mov	r6, r0
 801d14e:	460f      	mov	r7, r1
 801d150:	f7e3 fcd4 	bl	8000afc <__aeabi_dcmplt>
 801d154:	2800      	cmp	r0, #0
 801d156:	d165      	bne.n	801d224 <_dtoa_r+0x63c>
 801d158:	4632      	mov	r2, r6
 801d15a:	463b      	mov	r3, r7
 801d15c:	4935      	ldr	r1, [pc, #212]	; (801d234 <_dtoa_r+0x64c>)
 801d15e:	2000      	movs	r0, #0
 801d160:	f7e3 f8a2 	bl	80002a8 <__aeabi_dsub>
 801d164:	ec53 2b18 	vmov	r2, r3, d8
 801d168:	f7e3 fcc8 	bl	8000afc <__aeabi_dcmplt>
 801d16c:	2800      	cmp	r0, #0
 801d16e:	f040 80b9 	bne.w	801d2e4 <_dtoa_r+0x6fc>
 801d172:	9b02      	ldr	r3, [sp, #8]
 801d174:	429d      	cmp	r5, r3
 801d176:	f43f af75 	beq.w	801d064 <_dtoa_r+0x47c>
 801d17a:	4b2f      	ldr	r3, [pc, #188]	; (801d238 <_dtoa_r+0x650>)
 801d17c:	ec51 0b18 	vmov	r0, r1, d8
 801d180:	2200      	movs	r2, #0
 801d182:	f7e3 fa49 	bl	8000618 <__aeabi_dmul>
 801d186:	4b2c      	ldr	r3, [pc, #176]	; (801d238 <_dtoa_r+0x650>)
 801d188:	ec41 0b18 	vmov	d8, r0, r1
 801d18c:	2200      	movs	r2, #0
 801d18e:	4630      	mov	r0, r6
 801d190:	4639      	mov	r1, r7
 801d192:	f7e3 fa41 	bl	8000618 <__aeabi_dmul>
 801d196:	4606      	mov	r6, r0
 801d198:	460f      	mov	r7, r1
 801d19a:	e7c4      	b.n	801d126 <_dtoa_r+0x53e>
 801d19c:	ec51 0b17 	vmov	r0, r1, d7
 801d1a0:	f7e3 fa3a 	bl	8000618 <__aeabi_dmul>
 801d1a4:	9b02      	ldr	r3, [sp, #8]
 801d1a6:	9d00      	ldr	r5, [sp, #0]
 801d1a8:	930c      	str	r3, [sp, #48]	; 0x30
 801d1aa:	ec41 0b18 	vmov	d8, r0, r1
 801d1ae:	4639      	mov	r1, r7
 801d1b0:	4630      	mov	r0, r6
 801d1b2:	f7e3 fce1 	bl	8000b78 <__aeabi_d2iz>
 801d1b6:	9011      	str	r0, [sp, #68]	; 0x44
 801d1b8:	f7e3 f9c4 	bl	8000544 <__aeabi_i2d>
 801d1bc:	4602      	mov	r2, r0
 801d1be:	460b      	mov	r3, r1
 801d1c0:	4630      	mov	r0, r6
 801d1c2:	4639      	mov	r1, r7
 801d1c4:	f7e3 f870 	bl	80002a8 <__aeabi_dsub>
 801d1c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d1ca:	3330      	adds	r3, #48	; 0x30
 801d1cc:	f805 3b01 	strb.w	r3, [r5], #1
 801d1d0:	9b02      	ldr	r3, [sp, #8]
 801d1d2:	429d      	cmp	r5, r3
 801d1d4:	4606      	mov	r6, r0
 801d1d6:	460f      	mov	r7, r1
 801d1d8:	f04f 0200 	mov.w	r2, #0
 801d1dc:	d134      	bne.n	801d248 <_dtoa_r+0x660>
 801d1de:	4b19      	ldr	r3, [pc, #100]	; (801d244 <_dtoa_r+0x65c>)
 801d1e0:	ec51 0b18 	vmov	r0, r1, d8
 801d1e4:	f7e3 f862 	bl	80002ac <__adddf3>
 801d1e8:	4602      	mov	r2, r0
 801d1ea:	460b      	mov	r3, r1
 801d1ec:	4630      	mov	r0, r6
 801d1ee:	4639      	mov	r1, r7
 801d1f0:	f7e3 fca2 	bl	8000b38 <__aeabi_dcmpgt>
 801d1f4:	2800      	cmp	r0, #0
 801d1f6:	d175      	bne.n	801d2e4 <_dtoa_r+0x6fc>
 801d1f8:	ec53 2b18 	vmov	r2, r3, d8
 801d1fc:	4911      	ldr	r1, [pc, #68]	; (801d244 <_dtoa_r+0x65c>)
 801d1fe:	2000      	movs	r0, #0
 801d200:	f7e3 f852 	bl	80002a8 <__aeabi_dsub>
 801d204:	4602      	mov	r2, r0
 801d206:	460b      	mov	r3, r1
 801d208:	4630      	mov	r0, r6
 801d20a:	4639      	mov	r1, r7
 801d20c:	f7e3 fc76 	bl	8000afc <__aeabi_dcmplt>
 801d210:	2800      	cmp	r0, #0
 801d212:	f43f af27 	beq.w	801d064 <_dtoa_r+0x47c>
 801d216:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d218:	1e6b      	subs	r3, r5, #1
 801d21a:	930c      	str	r3, [sp, #48]	; 0x30
 801d21c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801d220:	2b30      	cmp	r3, #48	; 0x30
 801d222:	d0f8      	beq.n	801d216 <_dtoa_r+0x62e>
 801d224:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801d228:	e04a      	b.n	801d2c0 <_dtoa_r+0x6d8>
 801d22a:	bf00      	nop
 801d22c:	08021ad0 	.word	0x08021ad0
 801d230:	08021aa8 	.word	0x08021aa8
 801d234:	3ff00000 	.word	0x3ff00000
 801d238:	40240000 	.word	0x40240000
 801d23c:	401c0000 	.word	0x401c0000
 801d240:	40140000 	.word	0x40140000
 801d244:	3fe00000 	.word	0x3fe00000
 801d248:	4baf      	ldr	r3, [pc, #700]	; (801d508 <_dtoa_r+0x920>)
 801d24a:	f7e3 f9e5 	bl	8000618 <__aeabi_dmul>
 801d24e:	4606      	mov	r6, r0
 801d250:	460f      	mov	r7, r1
 801d252:	e7ac      	b.n	801d1ae <_dtoa_r+0x5c6>
 801d254:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801d258:	9d00      	ldr	r5, [sp, #0]
 801d25a:	4642      	mov	r2, r8
 801d25c:	464b      	mov	r3, r9
 801d25e:	4630      	mov	r0, r6
 801d260:	4639      	mov	r1, r7
 801d262:	f7e3 fb03 	bl	800086c <__aeabi_ddiv>
 801d266:	f7e3 fc87 	bl	8000b78 <__aeabi_d2iz>
 801d26a:	9002      	str	r0, [sp, #8]
 801d26c:	f7e3 f96a 	bl	8000544 <__aeabi_i2d>
 801d270:	4642      	mov	r2, r8
 801d272:	464b      	mov	r3, r9
 801d274:	f7e3 f9d0 	bl	8000618 <__aeabi_dmul>
 801d278:	4602      	mov	r2, r0
 801d27a:	460b      	mov	r3, r1
 801d27c:	4630      	mov	r0, r6
 801d27e:	4639      	mov	r1, r7
 801d280:	f7e3 f812 	bl	80002a8 <__aeabi_dsub>
 801d284:	9e02      	ldr	r6, [sp, #8]
 801d286:	9f01      	ldr	r7, [sp, #4]
 801d288:	3630      	adds	r6, #48	; 0x30
 801d28a:	f805 6b01 	strb.w	r6, [r5], #1
 801d28e:	9e00      	ldr	r6, [sp, #0]
 801d290:	1bae      	subs	r6, r5, r6
 801d292:	42b7      	cmp	r7, r6
 801d294:	4602      	mov	r2, r0
 801d296:	460b      	mov	r3, r1
 801d298:	d137      	bne.n	801d30a <_dtoa_r+0x722>
 801d29a:	f7e3 f807 	bl	80002ac <__adddf3>
 801d29e:	4642      	mov	r2, r8
 801d2a0:	464b      	mov	r3, r9
 801d2a2:	4606      	mov	r6, r0
 801d2a4:	460f      	mov	r7, r1
 801d2a6:	f7e3 fc47 	bl	8000b38 <__aeabi_dcmpgt>
 801d2aa:	b9c8      	cbnz	r0, 801d2e0 <_dtoa_r+0x6f8>
 801d2ac:	4642      	mov	r2, r8
 801d2ae:	464b      	mov	r3, r9
 801d2b0:	4630      	mov	r0, r6
 801d2b2:	4639      	mov	r1, r7
 801d2b4:	f7e3 fc18 	bl	8000ae8 <__aeabi_dcmpeq>
 801d2b8:	b110      	cbz	r0, 801d2c0 <_dtoa_r+0x6d8>
 801d2ba:	9b02      	ldr	r3, [sp, #8]
 801d2bc:	07d9      	lsls	r1, r3, #31
 801d2be:	d40f      	bmi.n	801d2e0 <_dtoa_r+0x6f8>
 801d2c0:	4620      	mov	r0, r4
 801d2c2:	4659      	mov	r1, fp
 801d2c4:	f000 ff98 	bl	801e1f8 <_Bfree>
 801d2c8:	2300      	movs	r3, #0
 801d2ca:	702b      	strb	r3, [r5, #0]
 801d2cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d2ce:	f10a 0001 	add.w	r0, sl, #1
 801d2d2:	6018      	str	r0, [r3, #0]
 801d2d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d2d6:	2b00      	cmp	r3, #0
 801d2d8:	f43f acd8 	beq.w	801cc8c <_dtoa_r+0xa4>
 801d2dc:	601d      	str	r5, [r3, #0]
 801d2de:	e4d5      	b.n	801cc8c <_dtoa_r+0xa4>
 801d2e0:	f8cd a01c 	str.w	sl, [sp, #28]
 801d2e4:	462b      	mov	r3, r5
 801d2e6:	461d      	mov	r5, r3
 801d2e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d2ec:	2a39      	cmp	r2, #57	; 0x39
 801d2ee:	d108      	bne.n	801d302 <_dtoa_r+0x71a>
 801d2f0:	9a00      	ldr	r2, [sp, #0]
 801d2f2:	429a      	cmp	r2, r3
 801d2f4:	d1f7      	bne.n	801d2e6 <_dtoa_r+0x6fe>
 801d2f6:	9a07      	ldr	r2, [sp, #28]
 801d2f8:	9900      	ldr	r1, [sp, #0]
 801d2fa:	3201      	adds	r2, #1
 801d2fc:	9207      	str	r2, [sp, #28]
 801d2fe:	2230      	movs	r2, #48	; 0x30
 801d300:	700a      	strb	r2, [r1, #0]
 801d302:	781a      	ldrb	r2, [r3, #0]
 801d304:	3201      	adds	r2, #1
 801d306:	701a      	strb	r2, [r3, #0]
 801d308:	e78c      	b.n	801d224 <_dtoa_r+0x63c>
 801d30a:	4b7f      	ldr	r3, [pc, #508]	; (801d508 <_dtoa_r+0x920>)
 801d30c:	2200      	movs	r2, #0
 801d30e:	f7e3 f983 	bl	8000618 <__aeabi_dmul>
 801d312:	2200      	movs	r2, #0
 801d314:	2300      	movs	r3, #0
 801d316:	4606      	mov	r6, r0
 801d318:	460f      	mov	r7, r1
 801d31a:	f7e3 fbe5 	bl	8000ae8 <__aeabi_dcmpeq>
 801d31e:	2800      	cmp	r0, #0
 801d320:	d09b      	beq.n	801d25a <_dtoa_r+0x672>
 801d322:	e7cd      	b.n	801d2c0 <_dtoa_r+0x6d8>
 801d324:	9a08      	ldr	r2, [sp, #32]
 801d326:	2a00      	cmp	r2, #0
 801d328:	f000 80c4 	beq.w	801d4b4 <_dtoa_r+0x8cc>
 801d32c:	9a05      	ldr	r2, [sp, #20]
 801d32e:	2a01      	cmp	r2, #1
 801d330:	f300 80a8 	bgt.w	801d484 <_dtoa_r+0x89c>
 801d334:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d336:	2a00      	cmp	r2, #0
 801d338:	f000 80a0 	beq.w	801d47c <_dtoa_r+0x894>
 801d33c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801d340:	9e06      	ldr	r6, [sp, #24]
 801d342:	4645      	mov	r5, r8
 801d344:	9a04      	ldr	r2, [sp, #16]
 801d346:	2101      	movs	r1, #1
 801d348:	441a      	add	r2, r3
 801d34a:	4620      	mov	r0, r4
 801d34c:	4498      	add	r8, r3
 801d34e:	9204      	str	r2, [sp, #16]
 801d350:	f001 f858 	bl	801e404 <__i2b>
 801d354:	4607      	mov	r7, r0
 801d356:	2d00      	cmp	r5, #0
 801d358:	dd0b      	ble.n	801d372 <_dtoa_r+0x78a>
 801d35a:	9b04      	ldr	r3, [sp, #16]
 801d35c:	2b00      	cmp	r3, #0
 801d35e:	dd08      	ble.n	801d372 <_dtoa_r+0x78a>
 801d360:	42ab      	cmp	r3, r5
 801d362:	9a04      	ldr	r2, [sp, #16]
 801d364:	bfa8      	it	ge
 801d366:	462b      	movge	r3, r5
 801d368:	eba8 0803 	sub.w	r8, r8, r3
 801d36c:	1aed      	subs	r5, r5, r3
 801d36e:	1ad3      	subs	r3, r2, r3
 801d370:	9304      	str	r3, [sp, #16]
 801d372:	9b06      	ldr	r3, [sp, #24]
 801d374:	b1fb      	cbz	r3, 801d3b6 <_dtoa_r+0x7ce>
 801d376:	9b08      	ldr	r3, [sp, #32]
 801d378:	2b00      	cmp	r3, #0
 801d37a:	f000 809f 	beq.w	801d4bc <_dtoa_r+0x8d4>
 801d37e:	2e00      	cmp	r6, #0
 801d380:	dd11      	ble.n	801d3a6 <_dtoa_r+0x7be>
 801d382:	4639      	mov	r1, r7
 801d384:	4632      	mov	r2, r6
 801d386:	4620      	mov	r0, r4
 801d388:	f001 f8f8 	bl	801e57c <__pow5mult>
 801d38c:	465a      	mov	r2, fp
 801d38e:	4601      	mov	r1, r0
 801d390:	4607      	mov	r7, r0
 801d392:	4620      	mov	r0, r4
 801d394:	f001 f84c 	bl	801e430 <__multiply>
 801d398:	4659      	mov	r1, fp
 801d39a:	9007      	str	r0, [sp, #28]
 801d39c:	4620      	mov	r0, r4
 801d39e:	f000 ff2b 	bl	801e1f8 <_Bfree>
 801d3a2:	9b07      	ldr	r3, [sp, #28]
 801d3a4:	469b      	mov	fp, r3
 801d3a6:	9b06      	ldr	r3, [sp, #24]
 801d3a8:	1b9a      	subs	r2, r3, r6
 801d3aa:	d004      	beq.n	801d3b6 <_dtoa_r+0x7ce>
 801d3ac:	4659      	mov	r1, fp
 801d3ae:	4620      	mov	r0, r4
 801d3b0:	f001 f8e4 	bl	801e57c <__pow5mult>
 801d3b4:	4683      	mov	fp, r0
 801d3b6:	2101      	movs	r1, #1
 801d3b8:	4620      	mov	r0, r4
 801d3ba:	f001 f823 	bl	801e404 <__i2b>
 801d3be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d3c0:	2b00      	cmp	r3, #0
 801d3c2:	4606      	mov	r6, r0
 801d3c4:	dd7c      	ble.n	801d4c0 <_dtoa_r+0x8d8>
 801d3c6:	461a      	mov	r2, r3
 801d3c8:	4601      	mov	r1, r0
 801d3ca:	4620      	mov	r0, r4
 801d3cc:	f001 f8d6 	bl	801e57c <__pow5mult>
 801d3d0:	9b05      	ldr	r3, [sp, #20]
 801d3d2:	2b01      	cmp	r3, #1
 801d3d4:	4606      	mov	r6, r0
 801d3d6:	dd76      	ble.n	801d4c6 <_dtoa_r+0x8de>
 801d3d8:	2300      	movs	r3, #0
 801d3da:	9306      	str	r3, [sp, #24]
 801d3dc:	6933      	ldr	r3, [r6, #16]
 801d3de:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801d3e2:	6918      	ldr	r0, [r3, #16]
 801d3e4:	f000 ffbe 	bl	801e364 <__hi0bits>
 801d3e8:	f1c0 0020 	rsb	r0, r0, #32
 801d3ec:	9b04      	ldr	r3, [sp, #16]
 801d3ee:	4418      	add	r0, r3
 801d3f0:	f010 001f 	ands.w	r0, r0, #31
 801d3f4:	f000 8086 	beq.w	801d504 <_dtoa_r+0x91c>
 801d3f8:	f1c0 0320 	rsb	r3, r0, #32
 801d3fc:	2b04      	cmp	r3, #4
 801d3fe:	dd7f      	ble.n	801d500 <_dtoa_r+0x918>
 801d400:	f1c0 001c 	rsb	r0, r0, #28
 801d404:	9b04      	ldr	r3, [sp, #16]
 801d406:	4403      	add	r3, r0
 801d408:	4480      	add	r8, r0
 801d40a:	4405      	add	r5, r0
 801d40c:	9304      	str	r3, [sp, #16]
 801d40e:	f1b8 0f00 	cmp.w	r8, #0
 801d412:	dd05      	ble.n	801d420 <_dtoa_r+0x838>
 801d414:	4659      	mov	r1, fp
 801d416:	4642      	mov	r2, r8
 801d418:	4620      	mov	r0, r4
 801d41a:	f001 f909 	bl	801e630 <__lshift>
 801d41e:	4683      	mov	fp, r0
 801d420:	9b04      	ldr	r3, [sp, #16]
 801d422:	2b00      	cmp	r3, #0
 801d424:	dd05      	ble.n	801d432 <_dtoa_r+0x84a>
 801d426:	4631      	mov	r1, r6
 801d428:	461a      	mov	r2, r3
 801d42a:	4620      	mov	r0, r4
 801d42c:	f001 f900 	bl	801e630 <__lshift>
 801d430:	4606      	mov	r6, r0
 801d432:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d434:	2b00      	cmp	r3, #0
 801d436:	d069      	beq.n	801d50c <_dtoa_r+0x924>
 801d438:	4631      	mov	r1, r6
 801d43a:	4658      	mov	r0, fp
 801d43c:	f001 f964 	bl	801e708 <__mcmp>
 801d440:	2800      	cmp	r0, #0
 801d442:	da63      	bge.n	801d50c <_dtoa_r+0x924>
 801d444:	2300      	movs	r3, #0
 801d446:	4659      	mov	r1, fp
 801d448:	220a      	movs	r2, #10
 801d44a:	4620      	mov	r0, r4
 801d44c:	f000 fef6 	bl	801e23c <__multadd>
 801d450:	9b08      	ldr	r3, [sp, #32]
 801d452:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d456:	4683      	mov	fp, r0
 801d458:	2b00      	cmp	r3, #0
 801d45a:	f000 818f 	beq.w	801d77c <_dtoa_r+0xb94>
 801d45e:	4639      	mov	r1, r7
 801d460:	2300      	movs	r3, #0
 801d462:	220a      	movs	r2, #10
 801d464:	4620      	mov	r0, r4
 801d466:	f000 fee9 	bl	801e23c <__multadd>
 801d46a:	f1b9 0f00 	cmp.w	r9, #0
 801d46e:	4607      	mov	r7, r0
 801d470:	f300 808e 	bgt.w	801d590 <_dtoa_r+0x9a8>
 801d474:	9b05      	ldr	r3, [sp, #20]
 801d476:	2b02      	cmp	r3, #2
 801d478:	dc50      	bgt.n	801d51c <_dtoa_r+0x934>
 801d47a:	e089      	b.n	801d590 <_dtoa_r+0x9a8>
 801d47c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d47e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801d482:	e75d      	b.n	801d340 <_dtoa_r+0x758>
 801d484:	9b01      	ldr	r3, [sp, #4]
 801d486:	1e5e      	subs	r6, r3, #1
 801d488:	9b06      	ldr	r3, [sp, #24]
 801d48a:	42b3      	cmp	r3, r6
 801d48c:	bfbf      	itttt	lt
 801d48e:	9b06      	ldrlt	r3, [sp, #24]
 801d490:	9606      	strlt	r6, [sp, #24]
 801d492:	1af2      	sublt	r2, r6, r3
 801d494:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801d496:	bfb6      	itet	lt
 801d498:	189b      	addlt	r3, r3, r2
 801d49a:	1b9e      	subge	r6, r3, r6
 801d49c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801d49e:	9b01      	ldr	r3, [sp, #4]
 801d4a0:	bfb8      	it	lt
 801d4a2:	2600      	movlt	r6, #0
 801d4a4:	2b00      	cmp	r3, #0
 801d4a6:	bfb5      	itete	lt
 801d4a8:	eba8 0503 	sublt.w	r5, r8, r3
 801d4ac:	9b01      	ldrge	r3, [sp, #4]
 801d4ae:	2300      	movlt	r3, #0
 801d4b0:	4645      	movge	r5, r8
 801d4b2:	e747      	b.n	801d344 <_dtoa_r+0x75c>
 801d4b4:	9e06      	ldr	r6, [sp, #24]
 801d4b6:	9f08      	ldr	r7, [sp, #32]
 801d4b8:	4645      	mov	r5, r8
 801d4ba:	e74c      	b.n	801d356 <_dtoa_r+0x76e>
 801d4bc:	9a06      	ldr	r2, [sp, #24]
 801d4be:	e775      	b.n	801d3ac <_dtoa_r+0x7c4>
 801d4c0:	9b05      	ldr	r3, [sp, #20]
 801d4c2:	2b01      	cmp	r3, #1
 801d4c4:	dc18      	bgt.n	801d4f8 <_dtoa_r+0x910>
 801d4c6:	9b02      	ldr	r3, [sp, #8]
 801d4c8:	b9b3      	cbnz	r3, 801d4f8 <_dtoa_r+0x910>
 801d4ca:	9b03      	ldr	r3, [sp, #12]
 801d4cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d4d0:	b9a3      	cbnz	r3, 801d4fc <_dtoa_r+0x914>
 801d4d2:	9b03      	ldr	r3, [sp, #12]
 801d4d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d4d8:	0d1b      	lsrs	r3, r3, #20
 801d4da:	051b      	lsls	r3, r3, #20
 801d4dc:	b12b      	cbz	r3, 801d4ea <_dtoa_r+0x902>
 801d4de:	9b04      	ldr	r3, [sp, #16]
 801d4e0:	3301      	adds	r3, #1
 801d4e2:	9304      	str	r3, [sp, #16]
 801d4e4:	f108 0801 	add.w	r8, r8, #1
 801d4e8:	2301      	movs	r3, #1
 801d4ea:	9306      	str	r3, [sp, #24]
 801d4ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d4ee:	2b00      	cmp	r3, #0
 801d4f0:	f47f af74 	bne.w	801d3dc <_dtoa_r+0x7f4>
 801d4f4:	2001      	movs	r0, #1
 801d4f6:	e779      	b.n	801d3ec <_dtoa_r+0x804>
 801d4f8:	2300      	movs	r3, #0
 801d4fa:	e7f6      	b.n	801d4ea <_dtoa_r+0x902>
 801d4fc:	9b02      	ldr	r3, [sp, #8]
 801d4fe:	e7f4      	b.n	801d4ea <_dtoa_r+0x902>
 801d500:	d085      	beq.n	801d40e <_dtoa_r+0x826>
 801d502:	4618      	mov	r0, r3
 801d504:	301c      	adds	r0, #28
 801d506:	e77d      	b.n	801d404 <_dtoa_r+0x81c>
 801d508:	40240000 	.word	0x40240000
 801d50c:	9b01      	ldr	r3, [sp, #4]
 801d50e:	2b00      	cmp	r3, #0
 801d510:	dc38      	bgt.n	801d584 <_dtoa_r+0x99c>
 801d512:	9b05      	ldr	r3, [sp, #20]
 801d514:	2b02      	cmp	r3, #2
 801d516:	dd35      	ble.n	801d584 <_dtoa_r+0x99c>
 801d518:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801d51c:	f1b9 0f00 	cmp.w	r9, #0
 801d520:	d10d      	bne.n	801d53e <_dtoa_r+0x956>
 801d522:	4631      	mov	r1, r6
 801d524:	464b      	mov	r3, r9
 801d526:	2205      	movs	r2, #5
 801d528:	4620      	mov	r0, r4
 801d52a:	f000 fe87 	bl	801e23c <__multadd>
 801d52e:	4601      	mov	r1, r0
 801d530:	4606      	mov	r6, r0
 801d532:	4658      	mov	r0, fp
 801d534:	f001 f8e8 	bl	801e708 <__mcmp>
 801d538:	2800      	cmp	r0, #0
 801d53a:	f73f adbd 	bgt.w	801d0b8 <_dtoa_r+0x4d0>
 801d53e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d540:	9d00      	ldr	r5, [sp, #0]
 801d542:	ea6f 0a03 	mvn.w	sl, r3
 801d546:	f04f 0800 	mov.w	r8, #0
 801d54a:	4631      	mov	r1, r6
 801d54c:	4620      	mov	r0, r4
 801d54e:	f000 fe53 	bl	801e1f8 <_Bfree>
 801d552:	2f00      	cmp	r7, #0
 801d554:	f43f aeb4 	beq.w	801d2c0 <_dtoa_r+0x6d8>
 801d558:	f1b8 0f00 	cmp.w	r8, #0
 801d55c:	d005      	beq.n	801d56a <_dtoa_r+0x982>
 801d55e:	45b8      	cmp	r8, r7
 801d560:	d003      	beq.n	801d56a <_dtoa_r+0x982>
 801d562:	4641      	mov	r1, r8
 801d564:	4620      	mov	r0, r4
 801d566:	f000 fe47 	bl	801e1f8 <_Bfree>
 801d56a:	4639      	mov	r1, r7
 801d56c:	4620      	mov	r0, r4
 801d56e:	f000 fe43 	bl	801e1f8 <_Bfree>
 801d572:	e6a5      	b.n	801d2c0 <_dtoa_r+0x6d8>
 801d574:	2600      	movs	r6, #0
 801d576:	4637      	mov	r7, r6
 801d578:	e7e1      	b.n	801d53e <_dtoa_r+0x956>
 801d57a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801d57c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801d580:	4637      	mov	r7, r6
 801d582:	e599      	b.n	801d0b8 <_dtoa_r+0x4d0>
 801d584:	9b08      	ldr	r3, [sp, #32]
 801d586:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801d58a:	2b00      	cmp	r3, #0
 801d58c:	f000 80fd 	beq.w	801d78a <_dtoa_r+0xba2>
 801d590:	2d00      	cmp	r5, #0
 801d592:	dd05      	ble.n	801d5a0 <_dtoa_r+0x9b8>
 801d594:	4639      	mov	r1, r7
 801d596:	462a      	mov	r2, r5
 801d598:	4620      	mov	r0, r4
 801d59a:	f001 f849 	bl	801e630 <__lshift>
 801d59e:	4607      	mov	r7, r0
 801d5a0:	9b06      	ldr	r3, [sp, #24]
 801d5a2:	2b00      	cmp	r3, #0
 801d5a4:	d05c      	beq.n	801d660 <_dtoa_r+0xa78>
 801d5a6:	6879      	ldr	r1, [r7, #4]
 801d5a8:	4620      	mov	r0, r4
 801d5aa:	f000 fde5 	bl	801e178 <_Balloc>
 801d5ae:	4605      	mov	r5, r0
 801d5b0:	b928      	cbnz	r0, 801d5be <_dtoa_r+0x9d6>
 801d5b2:	4b80      	ldr	r3, [pc, #512]	; (801d7b4 <_dtoa_r+0xbcc>)
 801d5b4:	4602      	mov	r2, r0
 801d5b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 801d5ba:	f7ff bb2e 	b.w	801cc1a <_dtoa_r+0x32>
 801d5be:	693a      	ldr	r2, [r7, #16]
 801d5c0:	3202      	adds	r2, #2
 801d5c2:	0092      	lsls	r2, r2, #2
 801d5c4:	f107 010c 	add.w	r1, r7, #12
 801d5c8:	300c      	adds	r0, #12
 801d5ca:	f7fd f8af 	bl	801a72c <memcpy>
 801d5ce:	2201      	movs	r2, #1
 801d5d0:	4629      	mov	r1, r5
 801d5d2:	4620      	mov	r0, r4
 801d5d4:	f001 f82c 	bl	801e630 <__lshift>
 801d5d8:	9b00      	ldr	r3, [sp, #0]
 801d5da:	3301      	adds	r3, #1
 801d5dc:	9301      	str	r3, [sp, #4]
 801d5de:	9b00      	ldr	r3, [sp, #0]
 801d5e0:	444b      	add	r3, r9
 801d5e2:	9307      	str	r3, [sp, #28]
 801d5e4:	9b02      	ldr	r3, [sp, #8]
 801d5e6:	f003 0301 	and.w	r3, r3, #1
 801d5ea:	46b8      	mov	r8, r7
 801d5ec:	9306      	str	r3, [sp, #24]
 801d5ee:	4607      	mov	r7, r0
 801d5f0:	9b01      	ldr	r3, [sp, #4]
 801d5f2:	4631      	mov	r1, r6
 801d5f4:	3b01      	subs	r3, #1
 801d5f6:	4658      	mov	r0, fp
 801d5f8:	9302      	str	r3, [sp, #8]
 801d5fa:	f7ff fa67 	bl	801cacc <quorem>
 801d5fe:	4603      	mov	r3, r0
 801d600:	3330      	adds	r3, #48	; 0x30
 801d602:	9004      	str	r0, [sp, #16]
 801d604:	4641      	mov	r1, r8
 801d606:	4658      	mov	r0, fp
 801d608:	9308      	str	r3, [sp, #32]
 801d60a:	f001 f87d 	bl	801e708 <__mcmp>
 801d60e:	463a      	mov	r2, r7
 801d610:	4681      	mov	r9, r0
 801d612:	4631      	mov	r1, r6
 801d614:	4620      	mov	r0, r4
 801d616:	f001 f893 	bl	801e740 <__mdiff>
 801d61a:	68c2      	ldr	r2, [r0, #12]
 801d61c:	9b08      	ldr	r3, [sp, #32]
 801d61e:	4605      	mov	r5, r0
 801d620:	bb02      	cbnz	r2, 801d664 <_dtoa_r+0xa7c>
 801d622:	4601      	mov	r1, r0
 801d624:	4658      	mov	r0, fp
 801d626:	f001 f86f 	bl	801e708 <__mcmp>
 801d62a:	9b08      	ldr	r3, [sp, #32]
 801d62c:	4602      	mov	r2, r0
 801d62e:	4629      	mov	r1, r5
 801d630:	4620      	mov	r0, r4
 801d632:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801d636:	f000 fddf 	bl	801e1f8 <_Bfree>
 801d63a:	9b05      	ldr	r3, [sp, #20]
 801d63c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d63e:	9d01      	ldr	r5, [sp, #4]
 801d640:	ea43 0102 	orr.w	r1, r3, r2
 801d644:	9b06      	ldr	r3, [sp, #24]
 801d646:	430b      	orrs	r3, r1
 801d648:	9b08      	ldr	r3, [sp, #32]
 801d64a:	d10d      	bne.n	801d668 <_dtoa_r+0xa80>
 801d64c:	2b39      	cmp	r3, #57	; 0x39
 801d64e:	d029      	beq.n	801d6a4 <_dtoa_r+0xabc>
 801d650:	f1b9 0f00 	cmp.w	r9, #0
 801d654:	dd01      	ble.n	801d65a <_dtoa_r+0xa72>
 801d656:	9b04      	ldr	r3, [sp, #16]
 801d658:	3331      	adds	r3, #49	; 0x31
 801d65a:	9a02      	ldr	r2, [sp, #8]
 801d65c:	7013      	strb	r3, [r2, #0]
 801d65e:	e774      	b.n	801d54a <_dtoa_r+0x962>
 801d660:	4638      	mov	r0, r7
 801d662:	e7b9      	b.n	801d5d8 <_dtoa_r+0x9f0>
 801d664:	2201      	movs	r2, #1
 801d666:	e7e2      	b.n	801d62e <_dtoa_r+0xa46>
 801d668:	f1b9 0f00 	cmp.w	r9, #0
 801d66c:	db06      	blt.n	801d67c <_dtoa_r+0xa94>
 801d66e:	9905      	ldr	r1, [sp, #20]
 801d670:	ea41 0909 	orr.w	r9, r1, r9
 801d674:	9906      	ldr	r1, [sp, #24]
 801d676:	ea59 0101 	orrs.w	r1, r9, r1
 801d67a:	d120      	bne.n	801d6be <_dtoa_r+0xad6>
 801d67c:	2a00      	cmp	r2, #0
 801d67e:	ddec      	ble.n	801d65a <_dtoa_r+0xa72>
 801d680:	4659      	mov	r1, fp
 801d682:	2201      	movs	r2, #1
 801d684:	4620      	mov	r0, r4
 801d686:	9301      	str	r3, [sp, #4]
 801d688:	f000 ffd2 	bl	801e630 <__lshift>
 801d68c:	4631      	mov	r1, r6
 801d68e:	4683      	mov	fp, r0
 801d690:	f001 f83a 	bl	801e708 <__mcmp>
 801d694:	2800      	cmp	r0, #0
 801d696:	9b01      	ldr	r3, [sp, #4]
 801d698:	dc02      	bgt.n	801d6a0 <_dtoa_r+0xab8>
 801d69a:	d1de      	bne.n	801d65a <_dtoa_r+0xa72>
 801d69c:	07da      	lsls	r2, r3, #31
 801d69e:	d5dc      	bpl.n	801d65a <_dtoa_r+0xa72>
 801d6a0:	2b39      	cmp	r3, #57	; 0x39
 801d6a2:	d1d8      	bne.n	801d656 <_dtoa_r+0xa6e>
 801d6a4:	9a02      	ldr	r2, [sp, #8]
 801d6a6:	2339      	movs	r3, #57	; 0x39
 801d6a8:	7013      	strb	r3, [r2, #0]
 801d6aa:	462b      	mov	r3, r5
 801d6ac:	461d      	mov	r5, r3
 801d6ae:	3b01      	subs	r3, #1
 801d6b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801d6b4:	2a39      	cmp	r2, #57	; 0x39
 801d6b6:	d050      	beq.n	801d75a <_dtoa_r+0xb72>
 801d6b8:	3201      	adds	r2, #1
 801d6ba:	701a      	strb	r2, [r3, #0]
 801d6bc:	e745      	b.n	801d54a <_dtoa_r+0x962>
 801d6be:	2a00      	cmp	r2, #0
 801d6c0:	dd03      	ble.n	801d6ca <_dtoa_r+0xae2>
 801d6c2:	2b39      	cmp	r3, #57	; 0x39
 801d6c4:	d0ee      	beq.n	801d6a4 <_dtoa_r+0xabc>
 801d6c6:	3301      	adds	r3, #1
 801d6c8:	e7c7      	b.n	801d65a <_dtoa_r+0xa72>
 801d6ca:	9a01      	ldr	r2, [sp, #4]
 801d6cc:	9907      	ldr	r1, [sp, #28]
 801d6ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d6d2:	428a      	cmp	r2, r1
 801d6d4:	d02a      	beq.n	801d72c <_dtoa_r+0xb44>
 801d6d6:	4659      	mov	r1, fp
 801d6d8:	2300      	movs	r3, #0
 801d6da:	220a      	movs	r2, #10
 801d6dc:	4620      	mov	r0, r4
 801d6de:	f000 fdad 	bl	801e23c <__multadd>
 801d6e2:	45b8      	cmp	r8, r7
 801d6e4:	4683      	mov	fp, r0
 801d6e6:	f04f 0300 	mov.w	r3, #0
 801d6ea:	f04f 020a 	mov.w	r2, #10
 801d6ee:	4641      	mov	r1, r8
 801d6f0:	4620      	mov	r0, r4
 801d6f2:	d107      	bne.n	801d704 <_dtoa_r+0xb1c>
 801d6f4:	f000 fda2 	bl	801e23c <__multadd>
 801d6f8:	4680      	mov	r8, r0
 801d6fa:	4607      	mov	r7, r0
 801d6fc:	9b01      	ldr	r3, [sp, #4]
 801d6fe:	3301      	adds	r3, #1
 801d700:	9301      	str	r3, [sp, #4]
 801d702:	e775      	b.n	801d5f0 <_dtoa_r+0xa08>
 801d704:	f000 fd9a 	bl	801e23c <__multadd>
 801d708:	4639      	mov	r1, r7
 801d70a:	4680      	mov	r8, r0
 801d70c:	2300      	movs	r3, #0
 801d70e:	220a      	movs	r2, #10
 801d710:	4620      	mov	r0, r4
 801d712:	f000 fd93 	bl	801e23c <__multadd>
 801d716:	4607      	mov	r7, r0
 801d718:	e7f0      	b.n	801d6fc <_dtoa_r+0xb14>
 801d71a:	f1b9 0f00 	cmp.w	r9, #0
 801d71e:	9a00      	ldr	r2, [sp, #0]
 801d720:	bfcc      	ite	gt
 801d722:	464d      	movgt	r5, r9
 801d724:	2501      	movle	r5, #1
 801d726:	4415      	add	r5, r2
 801d728:	f04f 0800 	mov.w	r8, #0
 801d72c:	4659      	mov	r1, fp
 801d72e:	2201      	movs	r2, #1
 801d730:	4620      	mov	r0, r4
 801d732:	9301      	str	r3, [sp, #4]
 801d734:	f000 ff7c 	bl	801e630 <__lshift>
 801d738:	4631      	mov	r1, r6
 801d73a:	4683      	mov	fp, r0
 801d73c:	f000 ffe4 	bl	801e708 <__mcmp>
 801d740:	2800      	cmp	r0, #0
 801d742:	dcb2      	bgt.n	801d6aa <_dtoa_r+0xac2>
 801d744:	d102      	bne.n	801d74c <_dtoa_r+0xb64>
 801d746:	9b01      	ldr	r3, [sp, #4]
 801d748:	07db      	lsls	r3, r3, #31
 801d74a:	d4ae      	bmi.n	801d6aa <_dtoa_r+0xac2>
 801d74c:	462b      	mov	r3, r5
 801d74e:	461d      	mov	r5, r3
 801d750:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d754:	2a30      	cmp	r2, #48	; 0x30
 801d756:	d0fa      	beq.n	801d74e <_dtoa_r+0xb66>
 801d758:	e6f7      	b.n	801d54a <_dtoa_r+0x962>
 801d75a:	9a00      	ldr	r2, [sp, #0]
 801d75c:	429a      	cmp	r2, r3
 801d75e:	d1a5      	bne.n	801d6ac <_dtoa_r+0xac4>
 801d760:	f10a 0a01 	add.w	sl, sl, #1
 801d764:	2331      	movs	r3, #49	; 0x31
 801d766:	e779      	b.n	801d65c <_dtoa_r+0xa74>
 801d768:	4b13      	ldr	r3, [pc, #76]	; (801d7b8 <_dtoa_r+0xbd0>)
 801d76a:	f7ff baaf 	b.w	801cccc <_dtoa_r+0xe4>
 801d76e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d770:	2b00      	cmp	r3, #0
 801d772:	f47f aa86 	bne.w	801cc82 <_dtoa_r+0x9a>
 801d776:	4b11      	ldr	r3, [pc, #68]	; (801d7bc <_dtoa_r+0xbd4>)
 801d778:	f7ff baa8 	b.w	801cccc <_dtoa_r+0xe4>
 801d77c:	f1b9 0f00 	cmp.w	r9, #0
 801d780:	dc03      	bgt.n	801d78a <_dtoa_r+0xba2>
 801d782:	9b05      	ldr	r3, [sp, #20]
 801d784:	2b02      	cmp	r3, #2
 801d786:	f73f aec9 	bgt.w	801d51c <_dtoa_r+0x934>
 801d78a:	9d00      	ldr	r5, [sp, #0]
 801d78c:	4631      	mov	r1, r6
 801d78e:	4658      	mov	r0, fp
 801d790:	f7ff f99c 	bl	801cacc <quorem>
 801d794:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801d798:	f805 3b01 	strb.w	r3, [r5], #1
 801d79c:	9a00      	ldr	r2, [sp, #0]
 801d79e:	1aaa      	subs	r2, r5, r2
 801d7a0:	4591      	cmp	r9, r2
 801d7a2:	ddba      	ble.n	801d71a <_dtoa_r+0xb32>
 801d7a4:	4659      	mov	r1, fp
 801d7a6:	2300      	movs	r3, #0
 801d7a8:	220a      	movs	r2, #10
 801d7aa:	4620      	mov	r0, r4
 801d7ac:	f000 fd46 	bl	801e23c <__multadd>
 801d7b0:	4683      	mov	fp, r0
 801d7b2:	e7eb      	b.n	801d78c <_dtoa_r+0xba4>
 801d7b4:	080219b7 	.word	0x080219b7
 801d7b8:	08021bb9 	.word	0x08021bb9
 801d7bc:	08021934 	.word	0x08021934

0801d7c0 <__sflush_r>:
 801d7c0:	898a      	ldrh	r2, [r1, #12]
 801d7c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d7c6:	4605      	mov	r5, r0
 801d7c8:	0710      	lsls	r0, r2, #28
 801d7ca:	460c      	mov	r4, r1
 801d7cc:	d458      	bmi.n	801d880 <__sflush_r+0xc0>
 801d7ce:	684b      	ldr	r3, [r1, #4]
 801d7d0:	2b00      	cmp	r3, #0
 801d7d2:	dc05      	bgt.n	801d7e0 <__sflush_r+0x20>
 801d7d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d7d6:	2b00      	cmp	r3, #0
 801d7d8:	dc02      	bgt.n	801d7e0 <__sflush_r+0x20>
 801d7da:	2000      	movs	r0, #0
 801d7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d7e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d7e2:	2e00      	cmp	r6, #0
 801d7e4:	d0f9      	beq.n	801d7da <__sflush_r+0x1a>
 801d7e6:	2300      	movs	r3, #0
 801d7e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d7ec:	682f      	ldr	r7, [r5, #0]
 801d7ee:	602b      	str	r3, [r5, #0]
 801d7f0:	d032      	beq.n	801d858 <__sflush_r+0x98>
 801d7f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d7f4:	89a3      	ldrh	r3, [r4, #12]
 801d7f6:	075a      	lsls	r2, r3, #29
 801d7f8:	d505      	bpl.n	801d806 <__sflush_r+0x46>
 801d7fa:	6863      	ldr	r3, [r4, #4]
 801d7fc:	1ac0      	subs	r0, r0, r3
 801d7fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d800:	b10b      	cbz	r3, 801d806 <__sflush_r+0x46>
 801d802:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d804:	1ac0      	subs	r0, r0, r3
 801d806:	2300      	movs	r3, #0
 801d808:	4602      	mov	r2, r0
 801d80a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d80c:	6a21      	ldr	r1, [r4, #32]
 801d80e:	4628      	mov	r0, r5
 801d810:	47b0      	blx	r6
 801d812:	1c43      	adds	r3, r0, #1
 801d814:	89a3      	ldrh	r3, [r4, #12]
 801d816:	d106      	bne.n	801d826 <__sflush_r+0x66>
 801d818:	6829      	ldr	r1, [r5, #0]
 801d81a:	291d      	cmp	r1, #29
 801d81c:	d82c      	bhi.n	801d878 <__sflush_r+0xb8>
 801d81e:	4a2a      	ldr	r2, [pc, #168]	; (801d8c8 <__sflush_r+0x108>)
 801d820:	40ca      	lsrs	r2, r1
 801d822:	07d6      	lsls	r6, r2, #31
 801d824:	d528      	bpl.n	801d878 <__sflush_r+0xb8>
 801d826:	2200      	movs	r2, #0
 801d828:	6062      	str	r2, [r4, #4]
 801d82a:	04d9      	lsls	r1, r3, #19
 801d82c:	6922      	ldr	r2, [r4, #16]
 801d82e:	6022      	str	r2, [r4, #0]
 801d830:	d504      	bpl.n	801d83c <__sflush_r+0x7c>
 801d832:	1c42      	adds	r2, r0, #1
 801d834:	d101      	bne.n	801d83a <__sflush_r+0x7a>
 801d836:	682b      	ldr	r3, [r5, #0]
 801d838:	b903      	cbnz	r3, 801d83c <__sflush_r+0x7c>
 801d83a:	6560      	str	r0, [r4, #84]	; 0x54
 801d83c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d83e:	602f      	str	r7, [r5, #0]
 801d840:	2900      	cmp	r1, #0
 801d842:	d0ca      	beq.n	801d7da <__sflush_r+0x1a>
 801d844:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d848:	4299      	cmp	r1, r3
 801d84a:	d002      	beq.n	801d852 <__sflush_r+0x92>
 801d84c:	4628      	mov	r0, r5
 801d84e:	f7fc ff9d 	bl	801a78c <_free_r>
 801d852:	2000      	movs	r0, #0
 801d854:	6360      	str	r0, [r4, #52]	; 0x34
 801d856:	e7c1      	b.n	801d7dc <__sflush_r+0x1c>
 801d858:	6a21      	ldr	r1, [r4, #32]
 801d85a:	2301      	movs	r3, #1
 801d85c:	4628      	mov	r0, r5
 801d85e:	47b0      	blx	r6
 801d860:	1c41      	adds	r1, r0, #1
 801d862:	d1c7      	bne.n	801d7f4 <__sflush_r+0x34>
 801d864:	682b      	ldr	r3, [r5, #0]
 801d866:	2b00      	cmp	r3, #0
 801d868:	d0c4      	beq.n	801d7f4 <__sflush_r+0x34>
 801d86a:	2b1d      	cmp	r3, #29
 801d86c:	d001      	beq.n	801d872 <__sflush_r+0xb2>
 801d86e:	2b16      	cmp	r3, #22
 801d870:	d101      	bne.n	801d876 <__sflush_r+0xb6>
 801d872:	602f      	str	r7, [r5, #0]
 801d874:	e7b1      	b.n	801d7da <__sflush_r+0x1a>
 801d876:	89a3      	ldrh	r3, [r4, #12]
 801d878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d87c:	81a3      	strh	r3, [r4, #12]
 801d87e:	e7ad      	b.n	801d7dc <__sflush_r+0x1c>
 801d880:	690f      	ldr	r7, [r1, #16]
 801d882:	2f00      	cmp	r7, #0
 801d884:	d0a9      	beq.n	801d7da <__sflush_r+0x1a>
 801d886:	0793      	lsls	r3, r2, #30
 801d888:	680e      	ldr	r6, [r1, #0]
 801d88a:	bf08      	it	eq
 801d88c:	694b      	ldreq	r3, [r1, #20]
 801d88e:	600f      	str	r7, [r1, #0]
 801d890:	bf18      	it	ne
 801d892:	2300      	movne	r3, #0
 801d894:	eba6 0807 	sub.w	r8, r6, r7
 801d898:	608b      	str	r3, [r1, #8]
 801d89a:	f1b8 0f00 	cmp.w	r8, #0
 801d89e:	dd9c      	ble.n	801d7da <__sflush_r+0x1a>
 801d8a0:	6a21      	ldr	r1, [r4, #32]
 801d8a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d8a4:	4643      	mov	r3, r8
 801d8a6:	463a      	mov	r2, r7
 801d8a8:	4628      	mov	r0, r5
 801d8aa:	47b0      	blx	r6
 801d8ac:	2800      	cmp	r0, #0
 801d8ae:	dc06      	bgt.n	801d8be <__sflush_r+0xfe>
 801d8b0:	89a3      	ldrh	r3, [r4, #12]
 801d8b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d8b6:	81a3      	strh	r3, [r4, #12]
 801d8b8:	f04f 30ff 	mov.w	r0, #4294967295
 801d8bc:	e78e      	b.n	801d7dc <__sflush_r+0x1c>
 801d8be:	4407      	add	r7, r0
 801d8c0:	eba8 0800 	sub.w	r8, r8, r0
 801d8c4:	e7e9      	b.n	801d89a <__sflush_r+0xda>
 801d8c6:	bf00      	nop
 801d8c8:	20400001 	.word	0x20400001

0801d8cc <_fflush_r>:
 801d8cc:	b538      	push	{r3, r4, r5, lr}
 801d8ce:	690b      	ldr	r3, [r1, #16]
 801d8d0:	4605      	mov	r5, r0
 801d8d2:	460c      	mov	r4, r1
 801d8d4:	b913      	cbnz	r3, 801d8dc <_fflush_r+0x10>
 801d8d6:	2500      	movs	r5, #0
 801d8d8:	4628      	mov	r0, r5
 801d8da:	bd38      	pop	{r3, r4, r5, pc}
 801d8dc:	b118      	cbz	r0, 801d8e6 <_fflush_r+0x1a>
 801d8de:	6983      	ldr	r3, [r0, #24]
 801d8e0:	b90b      	cbnz	r3, 801d8e6 <_fflush_r+0x1a>
 801d8e2:	f7fc fe55 	bl	801a590 <__sinit>
 801d8e6:	4b14      	ldr	r3, [pc, #80]	; (801d938 <_fflush_r+0x6c>)
 801d8e8:	429c      	cmp	r4, r3
 801d8ea:	d11b      	bne.n	801d924 <_fflush_r+0x58>
 801d8ec:	686c      	ldr	r4, [r5, #4]
 801d8ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d8f2:	2b00      	cmp	r3, #0
 801d8f4:	d0ef      	beq.n	801d8d6 <_fflush_r+0xa>
 801d8f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d8f8:	07d0      	lsls	r0, r2, #31
 801d8fa:	d404      	bmi.n	801d906 <_fflush_r+0x3a>
 801d8fc:	0599      	lsls	r1, r3, #22
 801d8fe:	d402      	bmi.n	801d906 <_fflush_r+0x3a>
 801d900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d902:	f7fc ff08 	bl	801a716 <__retarget_lock_acquire_recursive>
 801d906:	4628      	mov	r0, r5
 801d908:	4621      	mov	r1, r4
 801d90a:	f7ff ff59 	bl	801d7c0 <__sflush_r>
 801d90e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d910:	07da      	lsls	r2, r3, #31
 801d912:	4605      	mov	r5, r0
 801d914:	d4e0      	bmi.n	801d8d8 <_fflush_r+0xc>
 801d916:	89a3      	ldrh	r3, [r4, #12]
 801d918:	059b      	lsls	r3, r3, #22
 801d91a:	d4dd      	bmi.n	801d8d8 <_fflush_r+0xc>
 801d91c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d91e:	f7fc fefb 	bl	801a718 <__retarget_lock_release_recursive>
 801d922:	e7d9      	b.n	801d8d8 <_fflush_r+0xc>
 801d924:	4b05      	ldr	r3, [pc, #20]	; (801d93c <_fflush_r+0x70>)
 801d926:	429c      	cmp	r4, r3
 801d928:	d101      	bne.n	801d92e <_fflush_r+0x62>
 801d92a:	68ac      	ldr	r4, [r5, #8]
 801d92c:	e7df      	b.n	801d8ee <_fflush_r+0x22>
 801d92e:	4b04      	ldr	r3, [pc, #16]	; (801d940 <_fflush_r+0x74>)
 801d930:	429c      	cmp	r4, r3
 801d932:	bf08      	it	eq
 801d934:	68ec      	ldreq	r4, [r5, #12]
 801d936:	e7da      	b.n	801d8ee <_fflush_r+0x22>
 801d938:	0802182c 	.word	0x0802182c
 801d93c:	0802184c 	.word	0x0802184c
 801d940:	0802180c 	.word	0x0802180c

0801d944 <fiprintf>:
 801d944:	b40e      	push	{r1, r2, r3}
 801d946:	b503      	push	{r0, r1, lr}
 801d948:	4601      	mov	r1, r0
 801d94a:	ab03      	add	r3, sp, #12
 801d94c:	4805      	ldr	r0, [pc, #20]	; (801d964 <fiprintf+0x20>)
 801d94e:	f853 2b04 	ldr.w	r2, [r3], #4
 801d952:	6800      	ldr	r0, [r0, #0]
 801d954:	9301      	str	r3, [sp, #4]
 801d956:	f001 fc57 	bl	801f208 <_vfiprintf_r>
 801d95a:	b002      	add	sp, #8
 801d95c:	f85d eb04 	ldr.w	lr, [sp], #4
 801d960:	b003      	add	sp, #12
 801d962:	4770      	bx	lr
 801d964:	200001f8 	.word	0x200001f8

0801d968 <rshift>:
 801d968:	6903      	ldr	r3, [r0, #16]
 801d96a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801d96e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d972:	ea4f 1261 	mov.w	r2, r1, asr #5
 801d976:	f100 0414 	add.w	r4, r0, #20
 801d97a:	dd45      	ble.n	801da08 <rshift+0xa0>
 801d97c:	f011 011f 	ands.w	r1, r1, #31
 801d980:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801d984:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801d988:	d10c      	bne.n	801d9a4 <rshift+0x3c>
 801d98a:	f100 0710 	add.w	r7, r0, #16
 801d98e:	4629      	mov	r1, r5
 801d990:	42b1      	cmp	r1, r6
 801d992:	d334      	bcc.n	801d9fe <rshift+0x96>
 801d994:	1a9b      	subs	r3, r3, r2
 801d996:	009b      	lsls	r3, r3, #2
 801d998:	1eea      	subs	r2, r5, #3
 801d99a:	4296      	cmp	r6, r2
 801d99c:	bf38      	it	cc
 801d99e:	2300      	movcc	r3, #0
 801d9a0:	4423      	add	r3, r4
 801d9a2:	e015      	b.n	801d9d0 <rshift+0x68>
 801d9a4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801d9a8:	f1c1 0820 	rsb	r8, r1, #32
 801d9ac:	40cf      	lsrs	r7, r1
 801d9ae:	f105 0e04 	add.w	lr, r5, #4
 801d9b2:	46a1      	mov	r9, r4
 801d9b4:	4576      	cmp	r6, lr
 801d9b6:	46f4      	mov	ip, lr
 801d9b8:	d815      	bhi.n	801d9e6 <rshift+0x7e>
 801d9ba:	1a9b      	subs	r3, r3, r2
 801d9bc:	009a      	lsls	r2, r3, #2
 801d9be:	3a04      	subs	r2, #4
 801d9c0:	3501      	adds	r5, #1
 801d9c2:	42ae      	cmp	r6, r5
 801d9c4:	bf38      	it	cc
 801d9c6:	2200      	movcc	r2, #0
 801d9c8:	18a3      	adds	r3, r4, r2
 801d9ca:	50a7      	str	r7, [r4, r2]
 801d9cc:	b107      	cbz	r7, 801d9d0 <rshift+0x68>
 801d9ce:	3304      	adds	r3, #4
 801d9d0:	1b1a      	subs	r2, r3, r4
 801d9d2:	42a3      	cmp	r3, r4
 801d9d4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801d9d8:	bf08      	it	eq
 801d9da:	2300      	moveq	r3, #0
 801d9dc:	6102      	str	r2, [r0, #16]
 801d9de:	bf08      	it	eq
 801d9e0:	6143      	streq	r3, [r0, #20]
 801d9e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d9e6:	f8dc c000 	ldr.w	ip, [ip]
 801d9ea:	fa0c fc08 	lsl.w	ip, ip, r8
 801d9ee:	ea4c 0707 	orr.w	r7, ip, r7
 801d9f2:	f849 7b04 	str.w	r7, [r9], #4
 801d9f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 801d9fa:	40cf      	lsrs	r7, r1
 801d9fc:	e7da      	b.n	801d9b4 <rshift+0x4c>
 801d9fe:	f851 cb04 	ldr.w	ip, [r1], #4
 801da02:	f847 cf04 	str.w	ip, [r7, #4]!
 801da06:	e7c3      	b.n	801d990 <rshift+0x28>
 801da08:	4623      	mov	r3, r4
 801da0a:	e7e1      	b.n	801d9d0 <rshift+0x68>

0801da0c <__hexdig_fun>:
 801da0c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801da10:	2b09      	cmp	r3, #9
 801da12:	d802      	bhi.n	801da1a <__hexdig_fun+0xe>
 801da14:	3820      	subs	r0, #32
 801da16:	b2c0      	uxtb	r0, r0
 801da18:	4770      	bx	lr
 801da1a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801da1e:	2b05      	cmp	r3, #5
 801da20:	d801      	bhi.n	801da26 <__hexdig_fun+0x1a>
 801da22:	3847      	subs	r0, #71	; 0x47
 801da24:	e7f7      	b.n	801da16 <__hexdig_fun+0xa>
 801da26:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801da2a:	2b05      	cmp	r3, #5
 801da2c:	d801      	bhi.n	801da32 <__hexdig_fun+0x26>
 801da2e:	3827      	subs	r0, #39	; 0x27
 801da30:	e7f1      	b.n	801da16 <__hexdig_fun+0xa>
 801da32:	2000      	movs	r0, #0
 801da34:	4770      	bx	lr
	...

0801da38 <__gethex>:
 801da38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da3c:	ed2d 8b02 	vpush	{d8}
 801da40:	b089      	sub	sp, #36	; 0x24
 801da42:	ee08 0a10 	vmov	s16, r0
 801da46:	9304      	str	r3, [sp, #16]
 801da48:	4bbc      	ldr	r3, [pc, #752]	; (801dd3c <__gethex+0x304>)
 801da4a:	681b      	ldr	r3, [r3, #0]
 801da4c:	9301      	str	r3, [sp, #4]
 801da4e:	4618      	mov	r0, r3
 801da50:	468b      	mov	fp, r1
 801da52:	4690      	mov	r8, r2
 801da54:	f7e2 fbcc 	bl	80001f0 <strlen>
 801da58:	9b01      	ldr	r3, [sp, #4]
 801da5a:	f8db 2000 	ldr.w	r2, [fp]
 801da5e:	4403      	add	r3, r0
 801da60:	4682      	mov	sl, r0
 801da62:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801da66:	9305      	str	r3, [sp, #20]
 801da68:	1c93      	adds	r3, r2, #2
 801da6a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801da6e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801da72:	32fe      	adds	r2, #254	; 0xfe
 801da74:	18d1      	adds	r1, r2, r3
 801da76:	461f      	mov	r7, r3
 801da78:	f813 0b01 	ldrb.w	r0, [r3], #1
 801da7c:	9100      	str	r1, [sp, #0]
 801da7e:	2830      	cmp	r0, #48	; 0x30
 801da80:	d0f8      	beq.n	801da74 <__gethex+0x3c>
 801da82:	f7ff ffc3 	bl	801da0c <__hexdig_fun>
 801da86:	4604      	mov	r4, r0
 801da88:	2800      	cmp	r0, #0
 801da8a:	d13a      	bne.n	801db02 <__gethex+0xca>
 801da8c:	9901      	ldr	r1, [sp, #4]
 801da8e:	4652      	mov	r2, sl
 801da90:	4638      	mov	r0, r7
 801da92:	f7fd ff8a 	bl	801b9aa <strncmp>
 801da96:	4605      	mov	r5, r0
 801da98:	2800      	cmp	r0, #0
 801da9a:	d168      	bne.n	801db6e <__gethex+0x136>
 801da9c:	f817 000a 	ldrb.w	r0, [r7, sl]
 801daa0:	eb07 060a 	add.w	r6, r7, sl
 801daa4:	f7ff ffb2 	bl	801da0c <__hexdig_fun>
 801daa8:	2800      	cmp	r0, #0
 801daaa:	d062      	beq.n	801db72 <__gethex+0x13a>
 801daac:	4633      	mov	r3, r6
 801daae:	7818      	ldrb	r0, [r3, #0]
 801dab0:	2830      	cmp	r0, #48	; 0x30
 801dab2:	461f      	mov	r7, r3
 801dab4:	f103 0301 	add.w	r3, r3, #1
 801dab8:	d0f9      	beq.n	801daae <__gethex+0x76>
 801daba:	f7ff ffa7 	bl	801da0c <__hexdig_fun>
 801dabe:	2301      	movs	r3, #1
 801dac0:	fab0 f480 	clz	r4, r0
 801dac4:	0964      	lsrs	r4, r4, #5
 801dac6:	4635      	mov	r5, r6
 801dac8:	9300      	str	r3, [sp, #0]
 801daca:	463a      	mov	r2, r7
 801dacc:	4616      	mov	r6, r2
 801dace:	3201      	adds	r2, #1
 801dad0:	7830      	ldrb	r0, [r6, #0]
 801dad2:	f7ff ff9b 	bl	801da0c <__hexdig_fun>
 801dad6:	2800      	cmp	r0, #0
 801dad8:	d1f8      	bne.n	801dacc <__gethex+0x94>
 801dada:	9901      	ldr	r1, [sp, #4]
 801dadc:	4652      	mov	r2, sl
 801dade:	4630      	mov	r0, r6
 801dae0:	f7fd ff63 	bl	801b9aa <strncmp>
 801dae4:	b980      	cbnz	r0, 801db08 <__gethex+0xd0>
 801dae6:	b94d      	cbnz	r5, 801dafc <__gethex+0xc4>
 801dae8:	eb06 050a 	add.w	r5, r6, sl
 801daec:	462a      	mov	r2, r5
 801daee:	4616      	mov	r6, r2
 801daf0:	3201      	adds	r2, #1
 801daf2:	7830      	ldrb	r0, [r6, #0]
 801daf4:	f7ff ff8a 	bl	801da0c <__hexdig_fun>
 801daf8:	2800      	cmp	r0, #0
 801dafa:	d1f8      	bne.n	801daee <__gethex+0xb6>
 801dafc:	1bad      	subs	r5, r5, r6
 801dafe:	00ad      	lsls	r5, r5, #2
 801db00:	e004      	b.n	801db0c <__gethex+0xd4>
 801db02:	2400      	movs	r4, #0
 801db04:	4625      	mov	r5, r4
 801db06:	e7e0      	b.n	801daca <__gethex+0x92>
 801db08:	2d00      	cmp	r5, #0
 801db0a:	d1f7      	bne.n	801dafc <__gethex+0xc4>
 801db0c:	7833      	ldrb	r3, [r6, #0]
 801db0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801db12:	2b50      	cmp	r3, #80	; 0x50
 801db14:	d13b      	bne.n	801db8e <__gethex+0x156>
 801db16:	7873      	ldrb	r3, [r6, #1]
 801db18:	2b2b      	cmp	r3, #43	; 0x2b
 801db1a:	d02c      	beq.n	801db76 <__gethex+0x13e>
 801db1c:	2b2d      	cmp	r3, #45	; 0x2d
 801db1e:	d02e      	beq.n	801db7e <__gethex+0x146>
 801db20:	1c71      	adds	r1, r6, #1
 801db22:	f04f 0900 	mov.w	r9, #0
 801db26:	7808      	ldrb	r0, [r1, #0]
 801db28:	f7ff ff70 	bl	801da0c <__hexdig_fun>
 801db2c:	1e43      	subs	r3, r0, #1
 801db2e:	b2db      	uxtb	r3, r3
 801db30:	2b18      	cmp	r3, #24
 801db32:	d82c      	bhi.n	801db8e <__gethex+0x156>
 801db34:	f1a0 0210 	sub.w	r2, r0, #16
 801db38:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801db3c:	f7ff ff66 	bl	801da0c <__hexdig_fun>
 801db40:	1e43      	subs	r3, r0, #1
 801db42:	b2db      	uxtb	r3, r3
 801db44:	2b18      	cmp	r3, #24
 801db46:	d91d      	bls.n	801db84 <__gethex+0x14c>
 801db48:	f1b9 0f00 	cmp.w	r9, #0
 801db4c:	d000      	beq.n	801db50 <__gethex+0x118>
 801db4e:	4252      	negs	r2, r2
 801db50:	4415      	add	r5, r2
 801db52:	f8cb 1000 	str.w	r1, [fp]
 801db56:	b1e4      	cbz	r4, 801db92 <__gethex+0x15a>
 801db58:	9b00      	ldr	r3, [sp, #0]
 801db5a:	2b00      	cmp	r3, #0
 801db5c:	bf14      	ite	ne
 801db5e:	2700      	movne	r7, #0
 801db60:	2706      	moveq	r7, #6
 801db62:	4638      	mov	r0, r7
 801db64:	b009      	add	sp, #36	; 0x24
 801db66:	ecbd 8b02 	vpop	{d8}
 801db6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db6e:	463e      	mov	r6, r7
 801db70:	4625      	mov	r5, r4
 801db72:	2401      	movs	r4, #1
 801db74:	e7ca      	b.n	801db0c <__gethex+0xd4>
 801db76:	f04f 0900 	mov.w	r9, #0
 801db7a:	1cb1      	adds	r1, r6, #2
 801db7c:	e7d3      	b.n	801db26 <__gethex+0xee>
 801db7e:	f04f 0901 	mov.w	r9, #1
 801db82:	e7fa      	b.n	801db7a <__gethex+0x142>
 801db84:	230a      	movs	r3, #10
 801db86:	fb03 0202 	mla	r2, r3, r2, r0
 801db8a:	3a10      	subs	r2, #16
 801db8c:	e7d4      	b.n	801db38 <__gethex+0x100>
 801db8e:	4631      	mov	r1, r6
 801db90:	e7df      	b.n	801db52 <__gethex+0x11a>
 801db92:	1bf3      	subs	r3, r6, r7
 801db94:	3b01      	subs	r3, #1
 801db96:	4621      	mov	r1, r4
 801db98:	2b07      	cmp	r3, #7
 801db9a:	dc0b      	bgt.n	801dbb4 <__gethex+0x17c>
 801db9c:	ee18 0a10 	vmov	r0, s16
 801dba0:	f000 faea 	bl	801e178 <_Balloc>
 801dba4:	4604      	mov	r4, r0
 801dba6:	b940      	cbnz	r0, 801dbba <__gethex+0x182>
 801dba8:	4b65      	ldr	r3, [pc, #404]	; (801dd40 <__gethex+0x308>)
 801dbaa:	4602      	mov	r2, r0
 801dbac:	21de      	movs	r1, #222	; 0xde
 801dbae:	4865      	ldr	r0, [pc, #404]	; (801dd44 <__gethex+0x30c>)
 801dbb0:	f7fe ff5e 	bl	801ca70 <__assert_func>
 801dbb4:	3101      	adds	r1, #1
 801dbb6:	105b      	asrs	r3, r3, #1
 801dbb8:	e7ee      	b.n	801db98 <__gethex+0x160>
 801dbba:	f100 0914 	add.w	r9, r0, #20
 801dbbe:	f04f 0b00 	mov.w	fp, #0
 801dbc2:	f1ca 0301 	rsb	r3, sl, #1
 801dbc6:	f8cd 9008 	str.w	r9, [sp, #8]
 801dbca:	f8cd b000 	str.w	fp, [sp]
 801dbce:	9306      	str	r3, [sp, #24]
 801dbd0:	42b7      	cmp	r7, r6
 801dbd2:	d340      	bcc.n	801dc56 <__gethex+0x21e>
 801dbd4:	9802      	ldr	r0, [sp, #8]
 801dbd6:	9b00      	ldr	r3, [sp, #0]
 801dbd8:	f840 3b04 	str.w	r3, [r0], #4
 801dbdc:	eba0 0009 	sub.w	r0, r0, r9
 801dbe0:	1080      	asrs	r0, r0, #2
 801dbe2:	0146      	lsls	r6, r0, #5
 801dbe4:	6120      	str	r0, [r4, #16]
 801dbe6:	4618      	mov	r0, r3
 801dbe8:	f000 fbbc 	bl	801e364 <__hi0bits>
 801dbec:	1a30      	subs	r0, r6, r0
 801dbee:	f8d8 6000 	ldr.w	r6, [r8]
 801dbf2:	42b0      	cmp	r0, r6
 801dbf4:	dd63      	ble.n	801dcbe <__gethex+0x286>
 801dbf6:	1b87      	subs	r7, r0, r6
 801dbf8:	4639      	mov	r1, r7
 801dbfa:	4620      	mov	r0, r4
 801dbfc:	f000 ff56 	bl	801eaac <__any_on>
 801dc00:	4682      	mov	sl, r0
 801dc02:	b1a8      	cbz	r0, 801dc30 <__gethex+0x1f8>
 801dc04:	1e7b      	subs	r3, r7, #1
 801dc06:	1159      	asrs	r1, r3, #5
 801dc08:	f003 021f 	and.w	r2, r3, #31
 801dc0c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801dc10:	f04f 0a01 	mov.w	sl, #1
 801dc14:	fa0a f202 	lsl.w	r2, sl, r2
 801dc18:	420a      	tst	r2, r1
 801dc1a:	d009      	beq.n	801dc30 <__gethex+0x1f8>
 801dc1c:	4553      	cmp	r3, sl
 801dc1e:	dd05      	ble.n	801dc2c <__gethex+0x1f4>
 801dc20:	1eb9      	subs	r1, r7, #2
 801dc22:	4620      	mov	r0, r4
 801dc24:	f000 ff42 	bl	801eaac <__any_on>
 801dc28:	2800      	cmp	r0, #0
 801dc2a:	d145      	bne.n	801dcb8 <__gethex+0x280>
 801dc2c:	f04f 0a02 	mov.w	sl, #2
 801dc30:	4639      	mov	r1, r7
 801dc32:	4620      	mov	r0, r4
 801dc34:	f7ff fe98 	bl	801d968 <rshift>
 801dc38:	443d      	add	r5, r7
 801dc3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801dc3e:	42ab      	cmp	r3, r5
 801dc40:	da4c      	bge.n	801dcdc <__gethex+0x2a4>
 801dc42:	ee18 0a10 	vmov	r0, s16
 801dc46:	4621      	mov	r1, r4
 801dc48:	f000 fad6 	bl	801e1f8 <_Bfree>
 801dc4c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dc4e:	2300      	movs	r3, #0
 801dc50:	6013      	str	r3, [r2, #0]
 801dc52:	27a3      	movs	r7, #163	; 0xa3
 801dc54:	e785      	b.n	801db62 <__gethex+0x12a>
 801dc56:	1e73      	subs	r3, r6, #1
 801dc58:	9a05      	ldr	r2, [sp, #20]
 801dc5a:	9303      	str	r3, [sp, #12]
 801dc5c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801dc60:	4293      	cmp	r3, r2
 801dc62:	d019      	beq.n	801dc98 <__gethex+0x260>
 801dc64:	f1bb 0f20 	cmp.w	fp, #32
 801dc68:	d107      	bne.n	801dc7a <__gethex+0x242>
 801dc6a:	9b02      	ldr	r3, [sp, #8]
 801dc6c:	9a00      	ldr	r2, [sp, #0]
 801dc6e:	f843 2b04 	str.w	r2, [r3], #4
 801dc72:	9302      	str	r3, [sp, #8]
 801dc74:	2300      	movs	r3, #0
 801dc76:	9300      	str	r3, [sp, #0]
 801dc78:	469b      	mov	fp, r3
 801dc7a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801dc7e:	f7ff fec5 	bl	801da0c <__hexdig_fun>
 801dc82:	9b00      	ldr	r3, [sp, #0]
 801dc84:	f000 000f 	and.w	r0, r0, #15
 801dc88:	fa00 f00b 	lsl.w	r0, r0, fp
 801dc8c:	4303      	orrs	r3, r0
 801dc8e:	9300      	str	r3, [sp, #0]
 801dc90:	f10b 0b04 	add.w	fp, fp, #4
 801dc94:	9b03      	ldr	r3, [sp, #12]
 801dc96:	e00d      	b.n	801dcb4 <__gethex+0x27c>
 801dc98:	9b03      	ldr	r3, [sp, #12]
 801dc9a:	9a06      	ldr	r2, [sp, #24]
 801dc9c:	4413      	add	r3, r2
 801dc9e:	42bb      	cmp	r3, r7
 801dca0:	d3e0      	bcc.n	801dc64 <__gethex+0x22c>
 801dca2:	4618      	mov	r0, r3
 801dca4:	9901      	ldr	r1, [sp, #4]
 801dca6:	9307      	str	r3, [sp, #28]
 801dca8:	4652      	mov	r2, sl
 801dcaa:	f7fd fe7e 	bl	801b9aa <strncmp>
 801dcae:	9b07      	ldr	r3, [sp, #28]
 801dcb0:	2800      	cmp	r0, #0
 801dcb2:	d1d7      	bne.n	801dc64 <__gethex+0x22c>
 801dcb4:	461e      	mov	r6, r3
 801dcb6:	e78b      	b.n	801dbd0 <__gethex+0x198>
 801dcb8:	f04f 0a03 	mov.w	sl, #3
 801dcbc:	e7b8      	b.n	801dc30 <__gethex+0x1f8>
 801dcbe:	da0a      	bge.n	801dcd6 <__gethex+0x29e>
 801dcc0:	1a37      	subs	r7, r6, r0
 801dcc2:	4621      	mov	r1, r4
 801dcc4:	ee18 0a10 	vmov	r0, s16
 801dcc8:	463a      	mov	r2, r7
 801dcca:	f000 fcb1 	bl	801e630 <__lshift>
 801dcce:	1bed      	subs	r5, r5, r7
 801dcd0:	4604      	mov	r4, r0
 801dcd2:	f100 0914 	add.w	r9, r0, #20
 801dcd6:	f04f 0a00 	mov.w	sl, #0
 801dcda:	e7ae      	b.n	801dc3a <__gethex+0x202>
 801dcdc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801dce0:	42a8      	cmp	r0, r5
 801dce2:	dd72      	ble.n	801ddca <__gethex+0x392>
 801dce4:	1b45      	subs	r5, r0, r5
 801dce6:	42ae      	cmp	r6, r5
 801dce8:	dc36      	bgt.n	801dd58 <__gethex+0x320>
 801dcea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801dcee:	2b02      	cmp	r3, #2
 801dcf0:	d02a      	beq.n	801dd48 <__gethex+0x310>
 801dcf2:	2b03      	cmp	r3, #3
 801dcf4:	d02c      	beq.n	801dd50 <__gethex+0x318>
 801dcf6:	2b01      	cmp	r3, #1
 801dcf8:	d115      	bne.n	801dd26 <__gethex+0x2ee>
 801dcfa:	42ae      	cmp	r6, r5
 801dcfc:	d113      	bne.n	801dd26 <__gethex+0x2ee>
 801dcfe:	2e01      	cmp	r6, #1
 801dd00:	d10b      	bne.n	801dd1a <__gethex+0x2e2>
 801dd02:	9a04      	ldr	r2, [sp, #16]
 801dd04:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801dd08:	6013      	str	r3, [r2, #0]
 801dd0a:	2301      	movs	r3, #1
 801dd0c:	6123      	str	r3, [r4, #16]
 801dd0e:	f8c9 3000 	str.w	r3, [r9]
 801dd12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801dd14:	2762      	movs	r7, #98	; 0x62
 801dd16:	601c      	str	r4, [r3, #0]
 801dd18:	e723      	b.n	801db62 <__gethex+0x12a>
 801dd1a:	1e71      	subs	r1, r6, #1
 801dd1c:	4620      	mov	r0, r4
 801dd1e:	f000 fec5 	bl	801eaac <__any_on>
 801dd22:	2800      	cmp	r0, #0
 801dd24:	d1ed      	bne.n	801dd02 <__gethex+0x2ca>
 801dd26:	ee18 0a10 	vmov	r0, s16
 801dd2a:	4621      	mov	r1, r4
 801dd2c:	f000 fa64 	bl	801e1f8 <_Bfree>
 801dd30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dd32:	2300      	movs	r3, #0
 801dd34:	6013      	str	r3, [r2, #0]
 801dd36:	2750      	movs	r7, #80	; 0x50
 801dd38:	e713      	b.n	801db62 <__gethex+0x12a>
 801dd3a:	bf00      	nop
 801dd3c:	08021a34 	.word	0x08021a34
 801dd40:	080219b7 	.word	0x080219b7
 801dd44:	080219c8 	.word	0x080219c8
 801dd48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dd4a:	2b00      	cmp	r3, #0
 801dd4c:	d1eb      	bne.n	801dd26 <__gethex+0x2ee>
 801dd4e:	e7d8      	b.n	801dd02 <__gethex+0x2ca>
 801dd50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dd52:	2b00      	cmp	r3, #0
 801dd54:	d1d5      	bne.n	801dd02 <__gethex+0x2ca>
 801dd56:	e7e6      	b.n	801dd26 <__gethex+0x2ee>
 801dd58:	1e6f      	subs	r7, r5, #1
 801dd5a:	f1ba 0f00 	cmp.w	sl, #0
 801dd5e:	d131      	bne.n	801ddc4 <__gethex+0x38c>
 801dd60:	b127      	cbz	r7, 801dd6c <__gethex+0x334>
 801dd62:	4639      	mov	r1, r7
 801dd64:	4620      	mov	r0, r4
 801dd66:	f000 fea1 	bl	801eaac <__any_on>
 801dd6a:	4682      	mov	sl, r0
 801dd6c:	117b      	asrs	r3, r7, #5
 801dd6e:	2101      	movs	r1, #1
 801dd70:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801dd74:	f007 071f 	and.w	r7, r7, #31
 801dd78:	fa01 f707 	lsl.w	r7, r1, r7
 801dd7c:	421f      	tst	r7, r3
 801dd7e:	4629      	mov	r1, r5
 801dd80:	4620      	mov	r0, r4
 801dd82:	bf18      	it	ne
 801dd84:	f04a 0a02 	orrne.w	sl, sl, #2
 801dd88:	1b76      	subs	r6, r6, r5
 801dd8a:	f7ff fded 	bl	801d968 <rshift>
 801dd8e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801dd92:	2702      	movs	r7, #2
 801dd94:	f1ba 0f00 	cmp.w	sl, #0
 801dd98:	d048      	beq.n	801de2c <__gethex+0x3f4>
 801dd9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801dd9e:	2b02      	cmp	r3, #2
 801dda0:	d015      	beq.n	801ddce <__gethex+0x396>
 801dda2:	2b03      	cmp	r3, #3
 801dda4:	d017      	beq.n	801ddd6 <__gethex+0x39e>
 801dda6:	2b01      	cmp	r3, #1
 801dda8:	d109      	bne.n	801ddbe <__gethex+0x386>
 801ddaa:	f01a 0f02 	tst.w	sl, #2
 801ddae:	d006      	beq.n	801ddbe <__gethex+0x386>
 801ddb0:	f8d9 0000 	ldr.w	r0, [r9]
 801ddb4:	ea4a 0a00 	orr.w	sl, sl, r0
 801ddb8:	f01a 0f01 	tst.w	sl, #1
 801ddbc:	d10e      	bne.n	801dddc <__gethex+0x3a4>
 801ddbe:	f047 0710 	orr.w	r7, r7, #16
 801ddc2:	e033      	b.n	801de2c <__gethex+0x3f4>
 801ddc4:	f04f 0a01 	mov.w	sl, #1
 801ddc8:	e7d0      	b.n	801dd6c <__gethex+0x334>
 801ddca:	2701      	movs	r7, #1
 801ddcc:	e7e2      	b.n	801dd94 <__gethex+0x35c>
 801ddce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ddd0:	f1c3 0301 	rsb	r3, r3, #1
 801ddd4:	9315      	str	r3, [sp, #84]	; 0x54
 801ddd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ddd8:	2b00      	cmp	r3, #0
 801ddda:	d0f0      	beq.n	801ddbe <__gethex+0x386>
 801dddc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801dde0:	f104 0314 	add.w	r3, r4, #20
 801dde4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801dde8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801ddec:	f04f 0c00 	mov.w	ip, #0
 801ddf0:	4618      	mov	r0, r3
 801ddf2:	f853 2b04 	ldr.w	r2, [r3], #4
 801ddf6:	f1b2 3fff 	cmp.w	r2, #4294967295
 801ddfa:	d01c      	beq.n	801de36 <__gethex+0x3fe>
 801ddfc:	3201      	adds	r2, #1
 801ddfe:	6002      	str	r2, [r0, #0]
 801de00:	2f02      	cmp	r7, #2
 801de02:	f104 0314 	add.w	r3, r4, #20
 801de06:	d13f      	bne.n	801de88 <__gethex+0x450>
 801de08:	f8d8 2000 	ldr.w	r2, [r8]
 801de0c:	3a01      	subs	r2, #1
 801de0e:	42b2      	cmp	r2, r6
 801de10:	d10a      	bne.n	801de28 <__gethex+0x3f0>
 801de12:	1171      	asrs	r1, r6, #5
 801de14:	2201      	movs	r2, #1
 801de16:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801de1a:	f006 061f 	and.w	r6, r6, #31
 801de1e:	fa02 f606 	lsl.w	r6, r2, r6
 801de22:	421e      	tst	r6, r3
 801de24:	bf18      	it	ne
 801de26:	4617      	movne	r7, r2
 801de28:	f047 0720 	orr.w	r7, r7, #32
 801de2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801de2e:	601c      	str	r4, [r3, #0]
 801de30:	9b04      	ldr	r3, [sp, #16]
 801de32:	601d      	str	r5, [r3, #0]
 801de34:	e695      	b.n	801db62 <__gethex+0x12a>
 801de36:	4299      	cmp	r1, r3
 801de38:	f843 cc04 	str.w	ip, [r3, #-4]
 801de3c:	d8d8      	bhi.n	801ddf0 <__gethex+0x3b8>
 801de3e:	68a3      	ldr	r3, [r4, #8]
 801de40:	459b      	cmp	fp, r3
 801de42:	db19      	blt.n	801de78 <__gethex+0x440>
 801de44:	6861      	ldr	r1, [r4, #4]
 801de46:	ee18 0a10 	vmov	r0, s16
 801de4a:	3101      	adds	r1, #1
 801de4c:	f000 f994 	bl	801e178 <_Balloc>
 801de50:	4681      	mov	r9, r0
 801de52:	b918      	cbnz	r0, 801de5c <__gethex+0x424>
 801de54:	4b1a      	ldr	r3, [pc, #104]	; (801dec0 <__gethex+0x488>)
 801de56:	4602      	mov	r2, r0
 801de58:	2184      	movs	r1, #132	; 0x84
 801de5a:	e6a8      	b.n	801dbae <__gethex+0x176>
 801de5c:	6922      	ldr	r2, [r4, #16]
 801de5e:	3202      	adds	r2, #2
 801de60:	f104 010c 	add.w	r1, r4, #12
 801de64:	0092      	lsls	r2, r2, #2
 801de66:	300c      	adds	r0, #12
 801de68:	f7fc fc60 	bl	801a72c <memcpy>
 801de6c:	4621      	mov	r1, r4
 801de6e:	ee18 0a10 	vmov	r0, s16
 801de72:	f000 f9c1 	bl	801e1f8 <_Bfree>
 801de76:	464c      	mov	r4, r9
 801de78:	6923      	ldr	r3, [r4, #16]
 801de7a:	1c5a      	adds	r2, r3, #1
 801de7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801de80:	6122      	str	r2, [r4, #16]
 801de82:	2201      	movs	r2, #1
 801de84:	615a      	str	r2, [r3, #20]
 801de86:	e7bb      	b.n	801de00 <__gethex+0x3c8>
 801de88:	6922      	ldr	r2, [r4, #16]
 801de8a:	455a      	cmp	r2, fp
 801de8c:	dd0b      	ble.n	801dea6 <__gethex+0x46e>
 801de8e:	2101      	movs	r1, #1
 801de90:	4620      	mov	r0, r4
 801de92:	f7ff fd69 	bl	801d968 <rshift>
 801de96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801de9a:	3501      	adds	r5, #1
 801de9c:	42ab      	cmp	r3, r5
 801de9e:	f6ff aed0 	blt.w	801dc42 <__gethex+0x20a>
 801dea2:	2701      	movs	r7, #1
 801dea4:	e7c0      	b.n	801de28 <__gethex+0x3f0>
 801dea6:	f016 061f 	ands.w	r6, r6, #31
 801deaa:	d0fa      	beq.n	801dea2 <__gethex+0x46a>
 801deac:	449a      	add	sl, r3
 801deae:	f1c6 0620 	rsb	r6, r6, #32
 801deb2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801deb6:	f000 fa55 	bl	801e364 <__hi0bits>
 801deba:	42b0      	cmp	r0, r6
 801debc:	dbe7      	blt.n	801de8e <__gethex+0x456>
 801debe:	e7f0      	b.n	801dea2 <__gethex+0x46a>
 801dec0:	080219b7 	.word	0x080219b7

0801dec4 <L_shift>:
 801dec4:	f1c2 0208 	rsb	r2, r2, #8
 801dec8:	0092      	lsls	r2, r2, #2
 801deca:	b570      	push	{r4, r5, r6, lr}
 801decc:	f1c2 0620 	rsb	r6, r2, #32
 801ded0:	6843      	ldr	r3, [r0, #4]
 801ded2:	6804      	ldr	r4, [r0, #0]
 801ded4:	fa03 f506 	lsl.w	r5, r3, r6
 801ded8:	432c      	orrs	r4, r5
 801deda:	40d3      	lsrs	r3, r2
 801dedc:	6004      	str	r4, [r0, #0]
 801dede:	f840 3f04 	str.w	r3, [r0, #4]!
 801dee2:	4288      	cmp	r0, r1
 801dee4:	d3f4      	bcc.n	801ded0 <L_shift+0xc>
 801dee6:	bd70      	pop	{r4, r5, r6, pc}

0801dee8 <__match>:
 801dee8:	b530      	push	{r4, r5, lr}
 801deea:	6803      	ldr	r3, [r0, #0]
 801deec:	3301      	adds	r3, #1
 801deee:	f811 4b01 	ldrb.w	r4, [r1], #1
 801def2:	b914      	cbnz	r4, 801defa <__match+0x12>
 801def4:	6003      	str	r3, [r0, #0]
 801def6:	2001      	movs	r0, #1
 801def8:	bd30      	pop	{r4, r5, pc}
 801defa:	f813 2b01 	ldrb.w	r2, [r3], #1
 801defe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801df02:	2d19      	cmp	r5, #25
 801df04:	bf98      	it	ls
 801df06:	3220      	addls	r2, #32
 801df08:	42a2      	cmp	r2, r4
 801df0a:	d0f0      	beq.n	801deee <__match+0x6>
 801df0c:	2000      	movs	r0, #0
 801df0e:	e7f3      	b.n	801def8 <__match+0x10>

0801df10 <__hexnan>:
 801df10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df14:	680b      	ldr	r3, [r1, #0]
 801df16:	6801      	ldr	r1, [r0, #0]
 801df18:	115e      	asrs	r6, r3, #5
 801df1a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801df1e:	f013 031f 	ands.w	r3, r3, #31
 801df22:	b087      	sub	sp, #28
 801df24:	bf18      	it	ne
 801df26:	3604      	addne	r6, #4
 801df28:	2500      	movs	r5, #0
 801df2a:	1f37      	subs	r7, r6, #4
 801df2c:	4682      	mov	sl, r0
 801df2e:	4690      	mov	r8, r2
 801df30:	9301      	str	r3, [sp, #4]
 801df32:	f846 5c04 	str.w	r5, [r6, #-4]
 801df36:	46b9      	mov	r9, r7
 801df38:	463c      	mov	r4, r7
 801df3a:	9502      	str	r5, [sp, #8]
 801df3c:	46ab      	mov	fp, r5
 801df3e:	784a      	ldrb	r2, [r1, #1]
 801df40:	1c4b      	adds	r3, r1, #1
 801df42:	9303      	str	r3, [sp, #12]
 801df44:	b342      	cbz	r2, 801df98 <__hexnan+0x88>
 801df46:	4610      	mov	r0, r2
 801df48:	9105      	str	r1, [sp, #20]
 801df4a:	9204      	str	r2, [sp, #16]
 801df4c:	f7ff fd5e 	bl	801da0c <__hexdig_fun>
 801df50:	2800      	cmp	r0, #0
 801df52:	d14f      	bne.n	801dff4 <__hexnan+0xe4>
 801df54:	9a04      	ldr	r2, [sp, #16]
 801df56:	9905      	ldr	r1, [sp, #20]
 801df58:	2a20      	cmp	r2, #32
 801df5a:	d818      	bhi.n	801df8e <__hexnan+0x7e>
 801df5c:	9b02      	ldr	r3, [sp, #8]
 801df5e:	459b      	cmp	fp, r3
 801df60:	dd13      	ble.n	801df8a <__hexnan+0x7a>
 801df62:	454c      	cmp	r4, r9
 801df64:	d206      	bcs.n	801df74 <__hexnan+0x64>
 801df66:	2d07      	cmp	r5, #7
 801df68:	dc04      	bgt.n	801df74 <__hexnan+0x64>
 801df6a:	462a      	mov	r2, r5
 801df6c:	4649      	mov	r1, r9
 801df6e:	4620      	mov	r0, r4
 801df70:	f7ff ffa8 	bl	801dec4 <L_shift>
 801df74:	4544      	cmp	r4, r8
 801df76:	d950      	bls.n	801e01a <__hexnan+0x10a>
 801df78:	2300      	movs	r3, #0
 801df7a:	f1a4 0904 	sub.w	r9, r4, #4
 801df7e:	f844 3c04 	str.w	r3, [r4, #-4]
 801df82:	f8cd b008 	str.w	fp, [sp, #8]
 801df86:	464c      	mov	r4, r9
 801df88:	461d      	mov	r5, r3
 801df8a:	9903      	ldr	r1, [sp, #12]
 801df8c:	e7d7      	b.n	801df3e <__hexnan+0x2e>
 801df8e:	2a29      	cmp	r2, #41	; 0x29
 801df90:	d156      	bne.n	801e040 <__hexnan+0x130>
 801df92:	3102      	adds	r1, #2
 801df94:	f8ca 1000 	str.w	r1, [sl]
 801df98:	f1bb 0f00 	cmp.w	fp, #0
 801df9c:	d050      	beq.n	801e040 <__hexnan+0x130>
 801df9e:	454c      	cmp	r4, r9
 801dfa0:	d206      	bcs.n	801dfb0 <__hexnan+0xa0>
 801dfa2:	2d07      	cmp	r5, #7
 801dfa4:	dc04      	bgt.n	801dfb0 <__hexnan+0xa0>
 801dfa6:	462a      	mov	r2, r5
 801dfa8:	4649      	mov	r1, r9
 801dfaa:	4620      	mov	r0, r4
 801dfac:	f7ff ff8a 	bl	801dec4 <L_shift>
 801dfb0:	4544      	cmp	r4, r8
 801dfb2:	d934      	bls.n	801e01e <__hexnan+0x10e>
 801dfb4:	f1a8 0204 	sub.w	r2, r8, #4
 801dfb8:	4623      	mov	r3, r4
 801dfba:	f853 1b04 	ldr.w	r1, [r3], #4
 801dfbe:	f842 1f04 	str.w	r1, [r2, #4]!
 801dfc2:	429f      	cmp	r7, r3
 801dfc4:	d2f9      	bcs.n	801dfba <__hexnan+0xaa>
 801dfc6:	1b3b      	subs	r3, r7, r4
 801dfc8:	f023 0303 	bic.w	r3, r3, #3
 801dfcc:	3304      	adds	r3, #4
 801dfce:	3401      	adds	r4, #1
 801dfd0:	3e03      	subs	r6, #3
 801dfd2:	42b4      	cmp	r4, r6
 801dfd4:	bf88      	it	hi
 801dfd6:	2304      	movhi	r3, #4
 801dfd8:	4443      	add	r3, r8
 801dfda:	2200      	movs	r2, #0
 801dfdc:	f843 2b04 	str.w	r2, [r3], #4
 801dfe0:	429f      	cmp	r7, r3
 801dfe2:	d2fb      	bcs.n	801dfdc <__hexnan+0xcc>
 801dfe4:	683b      	ldr	r3, [r7, #0]
 801dfe6:	b91b      	cbnz	r3, 801dff0 <__hexnan+0xe0>
 801dfe8:	4547      	cmp	r7, r8
 801dfea:	d127      	bne.n	801e03c <__hexnan+0x12c>
 801dfec:	2301      	movs	r3, #1
 801dfee:	603b      	str	r3, [r7, #0]
 801dff0:	2005      	movs	r0, #5
 801dff2:	e026      	b.n	801e042 <__hexnan+0x132>
 801dff4:	3501      	adds	r5, #1
 801dff6:	2d08      	cmp	r5, #8
 801dff8:	f10b 0b01 	add.w	fp, fp, #1
 801dffc:	dd06      	ble.n	801e00c <__hexnan+0xfc>
 801dffe:	4544      	cmp	r4, r8
 801e000:	d9c3      	bls.n	801df8a <__hexnan+0x7a>
 801e002:	2300      	movs	r3, #0
 801e004:	f844 3c04 	str.w	r3, [r4, #-4]
 801e008:	2501      	movs	r5, #1
 801e00a:	3c04      	subs	r4, #4
 801e00c:	6822      	ldr	r2, [r4, #0]
 801e00e:	f000 000f 	and.w	r0, r0, #15
 801e012:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801e016:	6022      	str	r2, [r4, #0]
 801e018:	e7b7      	b.n	801df8a <__hexnan+0x7a>
 801e01a:	2508      	movs	r5, #8
 801e01c:	e7b5      	b.n	801df8a <__hexnan+0x7a>
 801e01e:	9b01      	ldr	r3, [sp, #4]
 801e020:	2b00      	cmp	r3, #0
 801e022:	d0df      	beq.n	801dfe4 <__hexnan+0xd4>
 801e024:	f04f 32ff 	mov.w	r2, #4294967295
 801e028:	f1c3 0320 	rsb	r3, r3, #32
 801e02c:	fa22 f303 	lsr.w	r3, r2, r3
 801e030:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801e034:	401a      	ands	r2, r3
 801e036:	f846 2c04 	str.w	r2, [r6, #-4]
 801e03a:	e7d3      	b.n	801dfe4 <__hexnan+0xd4>
 801e03c:	3f04      	subs	r7, #4
 801e03e:	e7d1      	b.n	801dfe4 <__hexnan+0xd4>
 801e040:	2004      	movs	r0, #4
 801e042:	b007      	add	sp, #28
 801e044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e048 <_localeconv_r>:
 801e048:	4800      	ldr	r0, [pc, #0]	; (801e04c <_localeconv_r+0x4>)
 801e04a:	4770      	bx	lr
 801e04c:	20000350 	.word	0x20000350

0801e050 <_lseek_r>:
 801e050:	b538      	push	{r3, r4, r5, lr}
 801e052:	4d07      	ldr	r5, [pc, #28]	; (801e070 <_lseek_r+0x20>)
 801e054:	4604      	mov	r4, r0
 801e056:	4608      	mov	r0, r1
 801e058:	4611      	mov	r1, r2
 801e05a:	2200      	movs	r2, #0
 801e05c:	602a      	str	r2, [r5, #0]
 801e05e:	461a      	mov	r2, r3
 801e060:	f7e5 f8e8 	bl	8003234 <_lseek>
 801e064:	1c43      	adds	r3, r0, #1
 801e066:	d102      	bne.n	801e06e <_lseek_r+0x1e>
 801e068:	682b      	ldr	r3, [r5, #0]
 801e06a:	b103      	cbz	r3, 801e06e <_lseek_r+0x1e>
 801e06c:	6023      	str	r3, [r4, #0]
 801e06e:	bd38      	pop	{r3, r4, r5, pc}
 801e070:	20008fb0 	.word	0x20008fb0

0801e074 <__swhatbuf_r>:
 801e074:	b570      	push	{r4, r5, r6, lr}
 801e076:	460e      	mov	r6, r1
 801e078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e07c:	2900      	cmp	r1, #0
 801e07e:	b096      	sub	sp, #88	; 0x58
 801e080:	4614      	mov	r4, r2
 801e082:	461d      	mov	r5, r3
 801e084:	da07      	bge.n	801e096 <__swhatbuf_r+0x22>
 801e086:	2300      	movs	r3, #0
 801e088:	602b      	str	r3, [r5, #0]
 801e08a:	89b3      	ldrh	r3, [r6, #12]
 801e08c:	061a      	lsls	r2, r3, #24
 801e08e:	d410      	bmi.n	801e0b2 <__swhatbuf_r+0x3e>
 801e090:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e094:	e00e      	b.n	801e0b4 <__swhatbuf_r+0x40>
 801e096:	466a      	mov	r2, sp
 801e098:	f001 fbc6 	bl	801f828 <_fstat_r>
 801e09c:	2800      	cmp	r0, #0
 801e09e:	dbf2      	blt.n	801e086 <__swhatbuf_r+0x12>
 801e0a0:	9a01      	ldr	r2, [sp, #4]
 801e0a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e0a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e0aa:	425a      	negs	r2, r3
 801e0ac:	415a      	adcs	r2, r3
 801e0ae:	602a      	str	r2, [r5, #0]
 801e0b0:	e7ee      	b.n	801e090 <__swhatbuf_r+0x1c>
 801e0b2:	2340      	movs	r3, #64	; 0x40
 801e0b4:	2000      	movs	r0, #0
 801e0b6:	6023      	str	r3, [r4, #0]
 801e0b8:	b016      	add	sp, #88	; 0x58
 801e0ba:	bd70      	pop	{r4, r5, r6, pc}

0801e0bc <__smakebuf_r>:
 801e0bc:	898b      	ldrh	r3, [r1, #12]
 801e0be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e0c0:	079d      	lsls	r5, r3, #30
 801e0c2:	4606      	mov	r6, r0
 801e0c4:	460c      	mov	r4, r1
 801e0c6:	d507      	bpl.n	801e0d8 <__smakebuf_r+0x1c>
 801e0c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e0cc:	6023      	str	r3, [r4, #0]
 801e0ce:	6123      	str	r3, [r4, #16]
 801e0d0:	2301      	movs	r3, #1
 801e0d2:	6163      	str	r3, [r4, #20]
 801e0d4:	b002      	add	sp, #8
 801e0d6:	bd70      	pop	{r4, r5, r6, pc}
 801e0d8:	ab01      	add	r3, sp, #4
 801e0da:	466a      	mov	r2, sp
 801e0dc:	f7ff ffca 	bl	801e074 <__swhatbuf_r>
 801e0e0:	9900      	ldr	r1, [sp, #0]
 801e0e2:	4605      	mov	r5, r0
 801e0e4:	4630      	mov	r0, r6
 801e0e6:	f7fc fba1 	bl	801a82c <_malloc_r>
 801e0ea:	b948      	cbnz	r0, 801e100 <__smakebuf_r+0x44>
 801e0ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e0f0:	059a      	lsls	r2, r3, #22
 801e0f2:	d4ef      	bmi.n	801e0d4 <__smakebuf_r+0x18>
 801e0f4:	f023 0303 	bic.w	r3, r3, #3
 801e0f8:	f043 0302 	orr.w	r3, r3, #2
 801e0fc:	81a3      	strh	r3, [r4, #12]
 801e0fe:	e7e3      	b.n	801e0c8 <__smakebuf_r+0xc>
 801e100:	4b0d      	ldr	r3, [pc, #52]	; (801e138 <__smakebuf_r+0x7c>)
 801e102:	62b3      	str	r3, [r6, #40]	; 0x28
 801e104:	89a3      	ldrh	r3, [r4, #12]
 801e106:	6020      	str	r0, [r4, #0]
 801e108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e10c:	81a3      	strh	r3, [r4, #12]
 801e10e:	9b00      	ldr	r3, [sp, #0]
 801e110:	6163      	str	r3, [r4, #20]
 801e112:	9b01      	ldr	r3, [sp, #4]
 801e114:	6120      	str	r0, [r4, #16]
 801e116:	b15b      	cbz	r3, 801e130 <__smakebuf_r+0x74>
 801e118:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e11c:	4630      	mov	r0, r6
 801e11e:	f001 fb95 	bl	801f84c <_isatty_r>
 801e122:	b128      	cbz	r0, 801e130 <__smakebuf_r+0x74>
 801e124:	89a3      	ldrh	r3, [r4, #12]
 801e126:	f023 0303 	bic.w	r3, r3, #3
 801e12a:	f043 0301 	orr.w	r3, r3, #1
 801e12e:	81a3      	strh	r3, [r4, #12]
 801e130:	89a0      	ldrh	r0, [r4, #12]
 801e132:	4305      	orrs	r5, r0
 801e134:	81a5      	strh	r5, [r4, #12]
 801e136:	e7cd      	b.n	801e0d4 <__smakebuf_r+0x18>
 801e138:	0801a529 	.word	0x0801a529

0801e13c <__ascii_mbtowc>:
 801e13c:	b082      	sub	sp, #8
 801e13e:	b901      	cbnz	r1, 801e142 <__ascii_mbtowc+0x6>
 801e140:	a901      	add	r1, sp, #4
 801e142:	b142      	cbz	r2, 801e156 <__ascii_mbtowc+0x1a>
 801e144:	b14b      	cbz	r3, 801e15a <__ascii_mbtowc+0x1e>
 801e146:	7813      	ldrb	r3, [r2, #0]
 801e148:	600b      	str	r3, [r1, #0]
 801e14a:	7812      	ldrb	r2, [r2, #0]
 801e14c:	1e10      	subs	r0, r2, #0
 801e14e:	bf18      	it	ne
 801e150:	2001      	movne	r0, #1
 801e152:	b002      	add	sp, #8
 801e154:	4770      	bx	lr
 801e156:	4610      	mov	r0, r2
 801e158:	e7fb      	b.n	801e152 <__ascii_mbtowc+0x16>
 801e15a:	f06f 0001 	mvn.w	r0, #1
 801e15e:	e7f8      	b.n	801e152 <__ascii_mbtowc+0x16>

0801e160 <__malloc_lock>:
 801e160:	4801      	ldr	r0, [pc, #4]	; (801e168 <__malloc_lock+0x8>)
 801e162:	f7fc bad8 	b.w	801a716 <__retarget_lock_acquire_recursive>
 801e166:	bf00      	nop
 801e168:	20008fa8 	.word	0x20008fa8

0801e16c <__malloc_unlock>:
 801e16c:	4801      	ldr	r0, [pc, #4]	; (801e174 <__malloc_unlock+0x8>)
 801e16e:	f7fc bad3 	b.w	801a718 <__retarget_lock_release_recursive>
 801e172:	bf00      	nop
 801e174:	20008fa8 	.word	0x20008fa8

0801e178 <_Balloc>:
 801e178:	b570      	push	{r4, r5, r6, lr}
 801e17a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801e17c:	4604      	mov	r4, r0
 801e17e:	460d      	mov	r5, r1
 801e180:	b976      	cbnz	r6, 801e1a0 <_Balloc+0x28>
 801e182:	2010      	movs	r0, #16
 801e184:	f7fc faca 	bl	801a71c <malloc>
 801e188:	4602      	mov	r2, r0
 801e18a:	6260      	str	r0, [r4, #36]	; 0x24
 801e18c:	b920      	cbnz	r0, 801e198 <_Balloc+0x20>
 801e18e:	4b18      	ldr	r3, [pc, #96]	; (801e1f0 <_Balloc+0x78>)
 801e190:	4818      	ldr	r0, [pc, #96]	; (801e1f4 <_Balloc+0x7c>)
 801e192:	2166      	movs	r1, #102	; 0x66
 801e194:	f7fe fc6c 	bl	801ca70 <__assert_func>
 801e198:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e19c:	6006      	str	r6, [r0, #0]
 801e19e:	60c6      	str	r6, [r0, #12]
 801e1a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801e1a2:	68f3      	ldr	r3, [r6, #12]
 801e1a4:	b183      	cbz	r3, 801e1c8 <_Balloc+0x50>
 801e1a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e1a8:	68db      	ldr	r3, [r3, #12]
 801e1aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e1ae:	b9b8      	cbnz	r0, 801e1e0 <_Balloc+0x68>
 801e1b0:	2101      	movs	r1, #1
 801e1b2:	fa01 f605 	lsl.w	r6, r1, r5
 801e1b6:	1d72      	adds	r2, r6, #5
 801e1b8:	0092      	lsls	r2, r2, #2
 801e1ba:	4620      	mov	r0, r4
 801e1bc:	f000 fc97 	bl	801eaee <_calloc_r>
 801e1c0:	b160      	cbz	r0, 801e1dc <_Balloc+0x64>
 801e1c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e1c6:	e00e      	b.n	801e1e6 <_Balloc+0x6e>
 801e1c8:	2221      	movs	r2, #33	; 0x21
 801e1ca:	2104      	movs	r1, #4
 801e1cc:	4620      	mov	r0, r4
 801e1ce:	f000 fc8e 	bl	801eaee <_calloc_r>
 801e1d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e1d4:	60f0      	str	r0, [r6, #12]
 801e1d6:	68db      	ldr	r3, [r3, #12]
 801e1d8:	2b00      	cmp	r3, #0
 801e1da:	d1e4      	bne.n	801e1a6 <_Balloc+0x2e>
 801e1dc:	2000      	movs	r0, #0
 801e1de:	bd70      	pop	{r4, r5, r6, pc}
 801e1e0:	6802      	ldr	r2, [r0, #0]
 801e1e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e1e6:	2300      	movs	r3, #0
 801e1e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e1ec:	e7f7      	b.n	801e1de <_Balloc+0x66>
 801e1ee:	bf00      	nop
 801e1f0:	08021941 	.word	0x08021941
 801e1f4:	08021a48 	.word	0x08021a48

0801e1f8 <_Bfree>:
 801e1f8:	b570      	push	{r4, r5, r6, lr}
 801e1fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801e1fc:	4605      	mov	r5, r0
 801e1fe:	460c      	mov	r4, r1
 801e200:	b976      	cbnz	r6, 801e220 <_Bfree+0x28>
 801e202:	2010      	movs	r0, #16
 801e204:	f7fc fa8a 	bl	801a71c <malloc>
 801e208:	4602      	mov	r2, r0
 801e20a:	6268      	str	r0, [r5, #36]	; 0x24
 801e20c:	b920      	cbnz	r0, 801e218 <_Bfree+0x20>
 801e20e:	4b09      	ldr	r3, [pc, #36]	; (801e234 <_Bfree+0x3c>)
 801e210:	4809      	ldr	r0, [pc, #36]	; (801e238 <_Bfree+0x40>)
 801e212:	218a      	movs	r1, #138	; 0x8a
 801e214:	f7fe fc2c 	bl	801ca70 <__assert_func>
 801e218:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e21c:	6006      	str	r6, [r0, #0]
 801e21e:	60c6      	str	r6, [r0, #12]
 801e220:	b13c      	cbz	r4, 801e232 <_Bfree+0x3a>
 801e222:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801e224:	6862      	ldr	r2, [r4, #4]
 801e226:	68db      	ldr	r3, [r3, #12]
 801e228:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e22c:	6021      	str	r1, [r4, #0]
 801e22e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e232:	bd70      	pop	{r4, r5, r6, pc}
 801e234:	08021941 	.word	0x08021941
 801e238:	08021a48 	.word	0x08021a48

0801e23c <__multadd>:
 801e23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e240:	690e      	ldr	r6, [r1, #16]
 801e242:	4607      	mov	r7, r0
 801e244:	4698      	mov	r8, r3
 801e246:	460c      	mov	r4, r1
 801e248:	f101 0014 	add.w	r0, r1, #20
 801e24c:	2300      	movs	r3, #0
 801e24e:	6805      	ldr	r5, [r0, #0]
 801e250:	b2a9      	uxth	r1, r5
 801e252:	fb02 8101 	mla	r1, r2, r1, r8
 801e256:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801e25a:	0c2d      	lsrs	r5, r5, #16
 801e25c:	fb02 c505 	mla	r5, r2, r5, ip
 801e260:	b289      	uxth	r1, r1
 801e262:	3301      	adds	r3, #1
 801e264:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801e268:	429e      	cmp	r6, r3
 801e26a:	f840 1b04 	str.w	r1, [r0], #4
 801e26e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801e272:	dcec      	bgt.n	801e24e <__multadd+0x12>
 801e274:	f1b8 0f00 	cmp.w	r8, #0
 801e278:	d022      	beq.n	801e2c0 <__multadd+0x84>
 801e27a:	68a3      	ldr	r3, [r4, #8]
 801e27c:	42b3      	cmp	r3, r6
 801e27e:	dc19      	bgt.n	801e2b4 <__multadd+0x78>
 801e280:	6861      	ldr	r1, [r4, #4]
 801e282:	4638      	mov	r0, r7
 801e284:	3101      	adds	r1, #1
 801e286:	f7ff ff77 	bl	801e178 <_Balloc>
 801e28a:	4605      	mov	r5, r0
 801e28c:	b928      	cbnz	r0, 801e29a <__multadd+0x5e>
 801e28e:	4602      	mov	r2, r0
 801e290:	4b0d      	ldr	r3, [pc, #52]	; (801e2c8 <__multadd+0x8c>)
 801e292:	480e      	ldr	r0, [pc, #56]	; (801e2cc <__multadd+0x90>)
 801e294:	21b5      	movs	r1, #181	; 0xb5
 801e296:	f7fe fbeb 	bl	801ca70 <__assert_func>
 801e29a:	6922      	ldr	r2, [r4, #16]
 801e29c:	3202      	adds	r2, #2
 801e29e:	f104 010c 	add.w	r1, r4, #12
 801e2a2:	0092      	lsls	r2, r2, #2
 801e2a4:	300c      	adds	r0, #12
 801e2a6:	f7fc fa41 	bl	801a72c <memcpy>
 801e2aa:	4621      	mov	r1, r4
 801e2ac:	4638      	mov	r0, r7
 801e2ae:	f7ff ffa3 	bl	801e1f8 <_Bfree>
 801e2b2:	462c      	mov	r4, r5
 801e2b4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801e2b8:	3601      	adds	r6, #1
 801e2ba:	f8c3 8014 	str.w	r8, [r3, #20]
 801e2be:	6126      	str	r6, [r4, #16]
 801e2c0:	4620      	mov	r0, r4
 801e2c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e2c6:	bf00      	nop
 801e2c8:	080219b7 	.word	0x080219b7
 801e2cc:	08021a48 	.word	0x08021a48

0801e2d0 <__s2b>:
 801e2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e2d4:	460c      	mov	r4, r1
 801e2d6:	4615      	mov	r5, r2
 801e2d8:	461f      	mov	r7, r3
 801e2da:	2209      	movs	r2, #9
 801e2dc:	3308      	adds	r3, #8
 801e2de:	4606      	mov	r6, r0
 801e2e0:	fb93 f3f2 	sdiv	r3, r3, r2
 801e2e4:	2100      	movs	r1, #0
 801e2e6:	2201      	movs	r2, #1
 801e2e8:	429a      	cmp	r2, r3
 801e2ea:	db09      	blt.n	801e300 <__s2b+0x30>
 801e2ec:	4630      	mov	r0, r6
 801e2ee:	f7ff ff43 	bl	801e178 <_Balloc>
 801e2f2:	b940      	cbnz	r0, 801e306 <__s2b+0x36>
 801e2f4:	4602      	mov	r2, r0
 801e2f6:	4b19      	ldr	r3, [pc, #100]	; (801e35c <__s2b+0x8c>)
 801e2f8:	4819      	ldr	r0, [pc, #100]	; (801e360 <__s2b+0x90>)
 801e2fa:	21ce      	movs	r1, #206	; 0xce
 801e2fc:	f7fe fbb8 	bl	801ca70 <__assert_func>
 801e300:	0052      	lsls	r2, r2, #1
 801e302:	3101      	adds	r1, #1
 801e304:	e7f0      	b.n	801e2e8 <__s2b+0x18>
 801e306:	9b08      	ldr	r3, [sp, #32]
 801e308:	6143      	str	r3, [r0, #20]
 801e30a:	2d09      	cmp	r5, #9
 801e30c:	f04f 0301 	mov.w	r3, #1
 801e310:	6103      	str	r3, [r0, #16]
 801e312:	dd16      	ble.n	801e342 <__s2b+0x72>
 801e314:	f104 0909 	add.w	r9, r4, #9
 801e318:	46c8      	mov	r8, r9
 801e31a:	442c      	add	r4, r5
 801e31c:	f818 3b01 	ldrb.w	r3, [r8], #1
 801e320:	4601      	mov	r1, r0
 801e322:	3b30      	subs	r3, #48	; 0x30
 801e324:	220a      	movs	r2, #10
 801e326:	4630      	mov	r0, r6
 801e328:	f7ff ff88 	bl	801e23c <__multadd>
 801e32c:	45a0      	cmp	r8, r4
 801e32e:	d1f5      	bne.n	801e31c <__s2b+0x4c>
 801e330:	f1a5 0408 	sub.w	r4, r5, #8
 801e334:	444c      	add	r4, r9
 801e336:	1b2d      	subs	r5, r5, r4
 801e338:	1963      	adds	r3, r4, r5
 801e33a:	42bb      	cmp	r3, r7
 801e33c:	db04      	blt.n	801e348 <__s2b+0x78>
 801e33e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e342:	340a      	adds	r4, #10
 801e344:	2509      	movs	r5, #9
 801e346:	e7f6      	b.n	801e336 <__s2b+0x66>
 801e348:	f814 3b01 	ldrb.w	r3, [r4], #1
 801e34c:	4601      	mov	r1, r0
 801e34e:	3b30      	subs	r3, #48	; 0x30
 801e350:	220a      	movs	r2, #10
 801e352:	4630      	mov	r0, r6
 801e354:	f7ff ff72 	bl	801e23c <__multadd>
 801e358:	e7ee      	b.n	801e338 <__s2b+0x68>
 801e35a:	bf00      	nop
 801e35c:	080219b7 	.word	0x080219b7
 801e360:	08021a48 	.word	0x08021a48

0801e364 <__hi0bits>:
 801e364:	0c03      	lsrs	r3, r0, #16
 801e366:	041b      	lsls	r3, r3, #16
 801e368:	b9d3      	cbnz	r3, 801e3a0 <__hi0bits+0x3c>
 801e36a:	0400      	lsls	r0, r0, #16
 801e36c:	2310      	movs	r3, #16
 801e36e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801e372:	bf04      	itt	eq
 801e374:	0200      	lsleq	r0, r0, #8
 801e376:	3308      	addeq	r3, #8
 801e378:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801e37c:	bf04      	itt	eq
 801e37e:	0100      	lsleq	r0, r0, #4
 801e380:	3304      	addeq	r3, #4
 801e382:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801e386:	bf04      	itt	eq
 801e388:	0080      	lsleq	r0, r0, #2
 801e38a:	3302      	addeq	r3, #2
 801e38c:	2800      	cmp	r0, #0
 801e38e:	db05      	blt.n	801e39c <__hi0bits+0x38>
 801e390:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801e394:	f103 0301 	add.w	r3, r3, #1
 801e398:	bf08      	it	eq
 801e39a:	2320      	moveq	r3, #32
 801e39c:	4618      	mov	r0, r3
 801e39e:	4770      	bx	lr
 801e3a0:	2300      	movs	r3, #0
 801e3a2:	e7e4      	b.n	801e36e <__hi0bits+0xa>

0801e3a4 <__lo0bits>:
 801e3a4:	6803      	ldr	r3, [r0, #0]
 801e3a6:	f013 0207 	ands.w	r2, r3, #7
 801e3aa:	4601      	mov	r1, r0
 801e3ac:	d00b      	beq.n	801e3c6 <__lo0bits+0x22>
 801e3ae:	07da      	lsls	r2, r3, #31
 801e3b0:	d424      	bmi.n	801e3fc <__lo0bits+0x58>
 801e3b2:	0798      	lsls	r0, r3, #30
 801e3b4:	bf49      	itett	mi
 801e3b6:	085b      	lsrmi	r3, r3, #1
 801e3b8:	089b      	lsrpl	r3, r3, #2
 801e3ba:	2001      	movmi	r0, #1
 801e3bc:	600b      	strmi	r3, [r1, #0]
 801e3be:	bf5c      	itt	pl
 801e3c0:	600b      	strpl	r3, [r1, #0]
 801e3c2:	2002      	movpl	r0, #2
 801e3c4:	4770      	bx	lr
 801e3c6:	b298      	uxth	r0, r3
 801e3c8:	b9b0      	cbnz	r0, 801e3f8 <__lo0bits+0x54>
 801e3ca:	0c1b      	lsrs	r3, r3, #16
 801e3cc:	2010      	movs	r0, #16
 801e3ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 801e3d2:	bf04      	itt	eq
 801e3d4:	0a1b      	lsreq	r3, r3, #8
 801e3d6:	3008      	addeq	r0, #8
 801e3d8:	071a      	lsls	r2, r3, #28
 801e3da:	bf04      	itt	eq
 801e3dc:	091b      	lsreq	r3, r3, #4
 801e3de:	3004      	addeq	r0, #4
 801e3e0:	079a      	lsls	r2, r3, #30
 801e3e2:	bf04      	itt	eq
 801e3e4:	089b      	lsreq	r3, r3, #2
 801e3e6:	3002      	addeq	r0, #2
 801e3e8:	07da      	lsls	r2, r3, #31
 801e3ea:	d403      	bmi.n	801e3f4 <__lo0bits+0x50>
 801e3ec:	085b      	lsrs	r3, r3, #1
 801e3ee:	f100 0001 	add.w	r0, r0, #1
 801e3f2:	d005      	beq.n	801e400 <__lo0bits+0x5c>
 801e3f4:	600b      	str	r3, [r1, #0]
 801e3f6:	4770      	bx	lr
 801e3f8:	4610      	mov	r0, r2
 801e3fa:	e7e8      	b.n	801e3ce <__lo0bits+0x2a>
 801e3fc:	2000      	movs	r0, #0
 801e3fe:	4770      	bx	lr
 801e400:	2020      	movs	r0, #32
 801e402:	4770      	bx	lr

0801e404 <__i2b>:
 801e404:	b510      	push	{r4, lr}
 801e406:	460c      	mov	r4, r1
 801e408:	2101      	movs	r1, #1
 801e40a:	f7ff feb5 	bl	801e178 <_Balloc>
 801e40e:	4602      	mov	r2, r0
 801e410:	b928      	cbnz	r0, 801e41e <__i2b+0x1a>
 801e412:	4b05      	ldr	r3, [pc, #20]	; (801e428 <__i2b+0x24>)
 801e414:	4805      	ldr	r0, [pc, #20]	; (801e42c <__i2b+0x28>)
 801e416:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801e41a:	f7fe fb29 	bl	801ca70 <__assert_func>
 801e41e:	2301      	movs	r3, #1
 801e420:	6144      	str	r4, [r0, #20]
 801e422:	6103      	str	r3, [r0, #16]
 801e424:	bd10      	pop	{r4, pc}
 801e426:	bf00      	nop
 801e428:	080219b7 	.word	0x080219b7
 801e42c:	08021a48 	.word	0x08021a48

0801e430 <__multiply>:
 801e430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e434:	4614      	mov	r4, r2
 801e436:	690a      	ldr	r2, [r1, #16]
 801e438:	6923      	ldr	r3, [r4, #16]
 801e43a:	429a      	cmp	r2, r3
 801e43c:	bfb8      	it	lt
 801e43e:	460b      	movlt	r3, r1
 801e440:	460d      	mov	r5, r1
 801e442:	bfbc      	itt	lt
 801e444:	4625      	movlt	r5, r4
 801e446:	461c      	movlt	r4, r3
 801e448:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801e44c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801e450:	68ab      	ldr	r3, [r5, #8]
 801e452:	6869      	ldr	r1, [r5, #4]
 801e454:	eb0a 0709 	add.w	r7, sl, r9
 801e458:	42bb      	cmp	r3, r7
 801e45a:	b085      	sub	sp, #20
 801e45c:	bfb8      	it	lt
 801e45e:	3101      	addlt	r1, #1
 801e460:	f7ff fe8a 	bl	801e178 <_Balloc>
 801e464:	b930      	cbnz	r0, 801e474 <__multiply+0x44>
 801e466:	4602      	mov	r2, r0
 801e468:	4b42      	ldr	r3, [pc, #264]	; (801e574 <__multiply+0x144>)
 801e46a:	4843      	ldr	r0, [pc, #268]	; (801e578 <__multiply+0x148>)
 801e46c:	f240 115d 	movw	r1, #349	; 0x15d
 801e470:	f7fe fafe 	bl	801ca70 <__assert_func>
 801e474:	f100 0614 	add.w	r6, r0, #20
 801e478:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801e47c:	4633      	mov	r3, r6
 801e47e:	2200      	movs	r2, #0
 801e480:	4543      	cmp	r3, r8
 801e482:	d31e      	bcc.n	801e4c2 <__multiply+0x92>
 801e484:	f105 0c14 	add.w	ip, r5, #20
 801e488:	f104 0314 	add.w	r3, r4, #20
 801e48c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801e490:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801e494:	9202      	str	r2, [sp, #8]
 801e496:	ebac 0205 	sub.w	r2, ip, r5
 801e49a:	3a15      	subs	r2, #21
 801e49c:	f022 0203 	bic.w	r2, r2, #3
 801e4a0:	3204      	adds	r2, #4
 801e4a2:	f105 0115 	add.w	r1, r5, #21
 801e4a6:	458c      	cmp	ip, r1
 801e4a8:	bf38      	it	cc
 801e4aa:	2204      	movcc	r2, #4
 801e4ac:	9201      	str	r2, [sp, #4]
 801e4ae:	9a02      	ldr	r2, [sp, #8]
 801e4b0:	9303      	str	r3, [sp, #12]
 801e4b2:	429a      	cmp	r2, r3
 801e4b4:	d808      	bhi.n	801e4c8 <__multiply+0x98>
 801e4b6:	2f00      	cmp	r7, #0
 801e4b8:	dc55      	bgt.n	801e566 <__multiply+0x136>
 801e4ba:	6107      	str	r7, [r0, #16]
 801e4bc:	b005      	add	sp, #20
 801e4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4c2:	f843 2b04 	str.w	r2, [r3], #4
 801e4c6:	e7db      	b.n	801e480 <__multiply+0x50>
 801e4c8:	f8b3 a000 	ldrh.w	sl, [r3]
 801e4cc:	f1ba 0f00 	cmp.w	sl, #0
 801e4d0:	d020      	beq.n	801e514 <__multiply+0xe4>
 801e4d2:	f105 0e14 	add.w	lr, r5, #20
 801e4d6:	46b1      	mov	r9, r6
 801e4d8:	2200      	movs	r2, #0
 801e4da:	f85e 4b04 	ldr.w	r4, [lr], #4
 801e4de:	f8d9 b000 	ldr.w	fp, [r9]
 801e4e2:	b2a1      	uxth	r1, r4
 801e4e4:	fa1f fb8b 	uxth.w	fp, fp
 801e4e8:	fb0a b101 	mla	r1, sl, r1, fp
 801e4ec:	4411      	add	r1, r2
 801e4ee:	f8d9 2000 	ldr.w	r2, [r9]
 801e4f2:	0c24      	lsrs	r4, r4, #16
 801e4f4:	0c12      	lsrs	r2, r2, #16
 801e4f6:	fb0a 2404 	mla	r4, sl, r4, r2
 801e4fa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801e4fe:	b289      	uxth	r1, r1
 801e500:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801e504:	45f4      	cmp	ip, lr
 801e506:	f849 1b04 	str.w	r1, [r9], #4
 801e50a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801e50e:	d8e4      	bhi.n	801e4da <__multiply+0xaa>
 801e510:	9901      	ldr	r1, [sp, #4]
 801e512:	5072      	str	r2, [r6, r1]
 801e514:	9a03      	ldr	r2, [sp, #12]
 801e516:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801e51a:	3304      	adds	r3, #4
 801e51c:	f1b9 0f00 	cmp.w	r9, #0
 801e520:	d01f      	beq.n	801e562 <__multiply+0x132>
 801e522:	6834      	ldr	r4, [r6, #0]
 801e524:	f105 0114 	add.w	r1, r5, #20
 801e528:	46b6      	mov	lr, r6
 801e52a:	f04f 0a00 	mov.w	sl, #0
 801e52e:	880a      	ldrh	r2, [r1, #0]
 801e530:	f8be b002 	ldrh.w	fp, [lr, #2]
 801e534:	fb09 b202 	mla	r2, r9, r2, fp
 801e538:	4492      	add	sl, r2
 801e53a:	b2a4      	uxth	r4, r4
 801e53c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801e540:	f84e 4b04 	str.w	r4, [lr], #4
 801e544:	f851 4b04 	ldr.w	r4, [r1], #4
 801e548:	f8be 2000 	ldrh.w	r2, [lr]
 801e54c:	0c24      	lsrs	r4, r4, #16
 801e54e:	fb09 2404 	mla	r4, r9, r4, r2
 801e552:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801e556:	458c      	cmp	ip, r1
 801e558:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801e55c:	d8e7      	bhi.n	801e52e <__multiply+0xfe>
 801e55e:	9a01      	ldr	r2, [sp, #4]
 801e560:	50b4      	str	r4, [r6, r2]
 801e562:	3604      	adds	r6, #4
 801e564:	e7a3      	b.n	801e4ae <__multiply+0x7e>
 801e566:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801e56a:	2b00      	cmp	r3, #0
 801e56c:	d1a5      	bne.n	801e4ba <__multiply+0x8a>
 801e56e:	3f01      	subs	r7, #1
 801e570:	e7a1      	b.n	801e4b6 <__multiply+0x86>
 801e572:	bf00      	nop
 801e574:	080219b7 	.word	0x080219b7
 801e578:	08021a48 	.word	0x08021a48

0801e57c <__pow5mult>:
 801e57c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e580:	4615      	mov	r5, r2
 801e582:	f012 0203 	ands.w	r2, r2, #3
 801e586:	4606      	mov	r6, r0
 801e588:	460f      	mov	r7, r1
 801e58a:	d007      	beq.n	801e59c <__pow5mult+0x20>
 801e58c:	4c25      	ldr	r4, [pc, #148]	; (801e624 <__pow5mult+0xa8>)
 801e58e:	3a01      	subs	r2, #1
 801e590:	2300      	movs	r3, #0
 801e592:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e596:	f7ff fe51 	bl	801e23c <__multadd>
 801e59a:	4607      	mov	r7, r0
 801e59c:	10ad      	asrs	r5, r5, #2
 801e59e:	d03d      	beq.n	801e61c <__pow5mult+0xa0>
 801e5a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801e5a2:	b97c      	cbnz	r4, 801e5c4 <__pow5mult+0x48>
 801e5a4:	2010      	movs	r0, #16
 801e5a6:	f7fc f8b9 	bl	801a71c <malloc>
 801e5aa:	4602      	mov	r2, r0
 801e5ac:	6270      	str	r0, [r6, #36]	; 0x24
 801e5ae:	b928      	cbnz	r0, 801e5bc <__pow5mult+0x40>
 801e5b0:	4b1d      	ldr	r3, [pc, #116]	; (801e628 <__pow5mult+0xac>)
 801e5b2:	481e      	ldr	r0, [pc, #120]	; (801e62c <__pow5mult+0xb0>)
 801e5b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801e5b8:	f7fe fa5a 	bl	801ca70 <__assert_func>
 801e5bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e5c0:	6004      	str	r4, [r0, #0]
 801e5c2:	60c4      	str	r4, [r0, #12]
 801e5c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801e5c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e5cc:	b94c      	cbnz	r4, 801e5e2 <__pow5mult+0x66>
 801e5ce:	f240 2171 	movw	r1, #625	; 0x271
 801e5d2:	4630      	mov	r0, r6
 801e5d4:	f7ff ff16 	bl	801e404 <__i2b>
 801e5d8:	2300      	movs	r3, #0
 801e5da:	f8c8 0008 	str.w	r0, [r8, #8]
 801e5de:	4604      	mov	r4, r0
 801e5e0:	6003      	str	r3, [r0, #0]
 801e5e2:	f04f 0900 	mov.w	r9, #0
 801e5e6:	07eb      	lsls	r3, r5, #31
 801e5e8:	d50a      	bpl.n	801e600 <__pow5mult+0x84>
 801e5ea:	4639      	mov	r1, r7
 801e5ec:	4622      	mov	r2, r4
 801e5ee:	4630      	mov	r0, r6
 801e5f0:	f7ff ff1e 	bl	801e430 <__multiply>
 801e5f4:	4639      	mov	r1, r7
 801e5f6:	4680      	mov	r8, r0
 801e5f8:	4630      	mov	r0, r6
 801e5fa:	f7ff fdfd 	bl	801e1f8 <_Bfree>
 801e5fe:	4647      	mov	r7, r8
 801e600:	106d      	asrs	r5, r5, #1
 801e602:	d00b      	beq.n	801e61c <__pow5mult+0xa0>
 801e604:	6820      	ldr	r0, [r4, #0]
 801e606:	b938      	cbnz	r0, 801e618 <__pow5mult+0x9c>
 801e608:	4622      	mov	r2, r4
 801e60a:	4621      	mov	r1, r4
 801e60c:	4630      	mov	r0, r6
 801e60e:	f7ff ff0f 	bl	801e430 <__multiply>
 801e612:	6020      	str	r0, [r4, #0]
 801e614:	f8c0 9000 	str.w	r9, [r0]
 801e618:	4604      	mov	r4, r0
 801e61a:	e7e4      	b.n	801e5e6 <__pow5mult+0x6a>
 801e61c:	4638      	mov	r0, r7
 801e61e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e622:	bf00      	nop
 801e624:	08021b98 	.word	0x08021b98
 801e628:	08021941 	.word	0x08021941
 801e62c:	08021a48 	.word	0x08021a48

0801e630 <__lshift>:
 801e630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e634:	460c      	mov	r4, r1
 801e636:	6849      	ldr	r1, [r1, #4]
 801e638:	6923      	ldr	r3, [r4, #16]
 801e63a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801e63e:	68a3      	ldr	r3, [r4, #8]
 801e640:	4607      	mov	r7, r0
 801e642:	4691      	mov	r9, r2
 801e644:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e648:	f108 0601 	add.w	r6, r8, #1
 801e64c:	42b3      	cmp	r3, r6
 801e64e:	db0b      	blt.n	801e668 <__lshift+0x38>
 801e650:	4638      	mov	r0, r7
 801e652:	f7ff fd91 	bl	801e178 <_Balloc>
 801e656:	4605      	mov	r5, r0
 801e658:	b948      	cbnz	r0, 801e66e <__lshift+0x3e>
 801e65a:	4602      	mov	r2, r0
 801e65c:	4b28      	ldr	r3, [pc, #160]	; (801e700 <__lshift+0xd0>)
 801e65e:	4829      	ldr	r0, [pc, #164]	; (801e704 <__lshift+0xd4>)
 801e660:	f240 11d9 	movw	r1, #473	; 0x1d9
 801e664:	f7fe fa04 	bl	801ca70 <__assert_func>
 801e668:	3101      	adds	r1, #1
 801e66a:	005b      	lsls	r3, r3, #1
 801e66c:	e7ee      	b.n	801e64c <__lshift+0x1c>
 801e66e:	2300      	movs	r3, #0
 801e670:	f100 0114 	add.w	r1, r0, #20
 801e674:	f100 0210 	add.w	r2, r0, #16
 801e678:	4618      	mov	r0, r3
 801e67a:	4553      	cmp	r3, sl
 801e67c:	db33      	blt.n	801e6e6 <__lshift+0xb6>
 801e67e:	6920      	ldr	r0, [r4, #16]
 801e680:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e684:	f104 0314 	add.w	r3, r4, #20
 801e688:	f019 091f 	ands.w	r9, r9, #31
 801e68c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e690:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801e694:	d02b      	beq.n	801e6ee <__lshift+0xbe>
 801e696:	f1c9 0e20 	rsb	lr, r9, #32
 801e69a:	468a      	mov	sl, r1
 801e69c:	2200      	movs	r2, #0
 801e69e:	6818      	ldr	r0, [r3, #0]
 801e6a0:	fa00 f009 	lsl.w	r0, r0, r9
 801e6a4:	4302      	orrs	r2, r0
 801e6a6:	f84a 2b04 	str.w	r2, [sl], #4
 801e6aa:	f853 2b04 	ldr.w	r2, [r3], #4
 801e6ae:	459c      	cmp	ip, r3
 801e6b0:	fa22 f20e 	lsr.w	r2, r2, lr
 801e6b4:	d8f3      	bhi.n	801e69e <__lshift+0x6e>
 801e6b6:	ebac 0304 	sub.w	r3, ip, r4
 801e6ba:	3b15      	subs	r3, #21
 801e6bc:	f023 0303 	bic.w	r3, r3, #3
 801e6c0:	3304      	adds	r3, #4
 801e6c2:	f104 0015 	add.w	r0, r4, #21
 801e6c6:	4584      	cmp	ip, r0
 801e6c8:	bf38      	it	cc
 801e6ca:	2304      	movcc	r3, #4
 801e6cc:	50ca      	str	r2, [r1, r3]
 801e6ce:	b10a      	cbz	r2, 801e6d4 <__lshift+0xa4>
 801e6d0:	f108 0602 	add.w	r6, r8, #2
 801e6d4:	3e01      	subs	r6, #1
 801e6d6:	4638      	mov	r0, r7
 801e6d8:	612e      	str	r6, [r5, #16]
 801e6da:	4621      	mov	r1, r4
 801e6dc:	f7ff fd8c 	bl	801e1f8 <_Bfree>
 801e6e0:	4628      	mov	r0, r5
 801e6e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e6e6:	f842 0f04 	str.w	r0, [r2, #4]!
 801e6ea:	3301      	adds	r3, #1
 801e6ec:	e7c5      	b.n	801e67a <__lshift+0x4a>
 801e6ee:	3904      	subs	r1, #4
 801e6f0:	f853 2b04 	ldr.w	r2, [r3], #4
 801e6f4:	f841 2f04 	str.w	r2, [r1, #4]!
 801e6f8:	459c      	cmp	ip, r3
 801e6fa:	d8f9      	bhi.n	801e6f0 <__lshift+0xc0>
 801e6fc:	e7ea      	b.n	801e6d4 <__lshift+0xa4>
 801e6fe:	bf00      	nop
 801e700:	080219b7 	.word	0x080219b7
 801e704:	08021a48 	.word	0x08021a48

0801e708 <__mcmp>:
 801e708:	b530      	push	{r4, r5, lr}
 801e70a:	6902      	ldr	r2, [r0, #16]
 801e70c:	690c      	ldr	r4, [r1, #16]
 801e70e:	1b12      	subs	r2, r2, r4
 801e710:	d10e      	bne.n	801e730 <__mcmp+0x28>
 801e712:	f100 0314 	add.w	r3, r0, #20
 801e716:	3114      	adds	r1, #20
 801e718:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801e71c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801e720:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801e724:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801e728:	42a5      	cmp	r5, r4
 801e72a:	d003      	beq.n	801e734 <__mcmp+0x2c>
 801e72c:	d305      	bcc.n	801e73a <__mcmp+0x32>
 801e72e:	2201      	movs	r2, #1
 801e730:	4610      	mov	r0, r2
 801e732:	bd30      	pop	{r4, r5, pc}
 801e734:	4283      	cmp	r3, r0
 801e736:	d3f3      	bcc.n	801e720 <__mcmp+0x18>
 801e738:	e7fa      	b.n	801e730 <__mcmp+0x28>
 801e73a:	f04f 32ff 	mov.w	r2, #4294967295
 801e73e:	e7f7      	b.n	801e730 <__mcmp+0x28>

0801e740 <__mdiff>:
 801e740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e744:	460c      	mov	r4, r1
 801e746:	4606      	mov	r6, r0
 801e748:	4611      	mov	r1, r2
 801e74a:	4620      	mov	r0, r4
 801e74c:	4617      	mov	r7, r2
 801e74e:	f7ff ffdb 	bl	801e708 <__mcmp>
 801e752:	1e05      	subs	r5, r0, #0
 801e754:	d110      	bne.n	801e778 <__mdiff+0x38>
 801e756:	4629      	mov	r1, r5
 801e758:	4630      	mov	r0, r6
 801e75a:	f7ff fd0d 	bl	801e178 <_Balloc>
 801e75e:	b930      	cbnz	r0, 801e76e <__mdiff+0x2e>
 801e760:	4b39      	ldr	r3, [pc, #228]	; (801e848 <__mdiff+0x108>)
 801e762:	4602      	mov	r2, r0
 801e764:	f240 2132 	movw	r1, #562	; 0x232
 801e768:	4838      	ldr	r0, [pc, #224]	; (801e84c <__mdiff+0x10c>)
 801e76a:	f7fe f981 	bl	801ca70 <__assert_func>
 801e76e:	2301      	movs	r3, #1
 801e770:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801e774:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e778:	bfa4      	itt	ge
 801e77a:	463b      	movge	r3, r7
 801e77c:	4627      	movge	r7, r4
 801e77e:	4630      	mov	r0, r6
 801e780:	6879      	ldr	r1, [r7, #4]
 801e782:	bfa6      	itte	ge
 801e784:	461c      	movge	r4, r3
 801e786:	2500      	movge	r5, #0
 801e788:	2501      	movlt	r5, #1
 801e78a:	f7ff fcf5 	bl	801e178 <_Balloc>
 801e78e:	b920      	cbnz	r0, 801e79a <__mdiff+0x5a>
 801e790:	4b2d      	ldr	r3, [pc, #180]	; (801e848 <__mdiff+0x108>)
 801e792:	4602      	mov	r2, r0
 801e794:	f44f 7110 	mov.w	r1, #576	; 0x240
 801e798:	e7e6      	b.n	801e768 <__mdiff+0x28>
 801e79a:	693e      	ldr	r6, [r7, #16]
 801e79c:	60c5      	str	r5, [r0, #12]
 801e79e:	6925      	ldr	r5, [r4, #16]
 801e7a0:	f107 0114 	add.w	r1, r7, #20
 801e7a4:	f104 0914 	add.w	r9, r4, #20
 801e7a8:	f100 0e14 	add.w	lr, r0, #20
 801e7ac:	f107 0210 	add.w	r2, r7, #16
 801e7b0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801e7b4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801e7b8:	46f2      	mov	sl, lr
 801e7ba:	2700      	movs	r7, #0
 801e7bc:	f859 3b04 	ldr.w	r3, [r9], #4
 801e7c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801e7c4:	fa1f f883 	uxth.w	r8, r3
 801e7c8:	fa17 f78b 	uxtah	r7, r7, fp
 801e7cc:	0c1b      	lsrs	r3, r3, #16
 801e7ce:	eba7 0808 	sub.w	r8, r7, r8
 801e7d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801e7d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801e7da:	fa1f f888 	uxth.w	r8, r8
 801e7de:	141f      	asrs	r7, r3, #16
 801e7e0:	454d      	cmp	r5, r9
 801e7e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801e7e6:	f84a 3b04 	str.w	r3, [sl], #4
 801e7ea:	d8e7      	bhi.n	801e7bc <__mdiff+0x7c>
 801e7ec:	1b2b      	subs	r3, r5, r4
 801e7ee:	3b15      	subs	r3, #21
 801e7f0:	f023 0303 	bic.w	r3, r3, #3
 801e7f4:	3304      	adds	r3, #4
 801e7f6:	3415      	adds	r4, #21
 801e7f8:	42a5      	cmp	r5, r4
 801e7fa:	bf38      	it	cc
 801e7fc:	2304      	movcc	r3, #4
 801e7fe:	4419      	add	r1, r3
 801e800:	4473      	add	r3, lr
 801e802:	469e      	mov	lr, r3
 801e804:	460d      	mov	r5, r1
 801e806:	4565      	cmp	r5, ip
 801e808:	d30e      	bcc.n	801e828 <__mdiff+0xe8>
 801e80a:	f10c 0203 	add.w	r2, ip, #3
 801e80e:	1a52      	subs	r2, r2, r1
 801e810:	f022 0203 	bic.w	r2, r2, #3
 801e814:	3903      	subs	r1, #3
 801e816:	458c      	cmp	ip, r1
 801e818:	bf38      	it	cc
 801e81a:	2200      	movcc	r2, #0
 801e81c:	441a      	add	r2, r3
 801e81e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801e822:	b17b      	cbz	r3, 801e844 <__mdiff+0x104>
 801e824:	6106      	str	r6, [r0, #16]
 801e826:	e7a5      	b.n	801e774 <__mdiff+0x34>
 801e828:	f855 8b04 	ldr.w	r8, [r5], #4
 801e82c:	fa17 f488 	uxtah	r4, r7, r8
 801e830:	1422      	asrs	r2, r4, #16
 801e832:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801e836:	b2a4      	uxth	r4, r4
 801e838:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801e83c:	f84e 4b04 	str.w	r4, [lr], #4
 801e840:	1417      	asrs	r7, r2, #16
 801e842:	e7e0      	b.n	801e806 <__mdiff+0xc6>
 801e844:	3e01      	subs	r6, #1
 801e846:	e7ea      	b.n	801e81e <__mdiff+0xde>
 801e848:	080219b7 	.word	0x080219b7
 801e84c:	08021a48 	.word	0x08021a48

0801e850 <__ulp>:
 801e850:	b082      	sub	sp, #8
 801e852:	ed8d 0b00 	vstr	d0, [sp]
 801e856:	9b01      	ldr	r3, [sp, #4]
 801e858:	4912      	ldr	r1, [pc, #72]	; (801e8a4 <__ulp+0x54>)
 801e85a:	4019      	ands	r1, r3
 801e85c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801e860:	2900      	cmp	r1, #0
 801e862:	dd05      	ble.n	801e870 <__ulp+0x20>
 801e864:	2200      	movs	r2, #0
 801e866:	460b      	mov	r3, r1
 801e868:	ec43 2b10 	vmov	d0, r2, r3
 801e86c:	b002      	add	sp, #8
 801e86e:	4770      	bx	lr
 801e870:	4249      	negs	r1, r1
 801e872:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801e876:	ea4f 5021 	mov.w	r0, r1, asr #20
 801e87a:	f04f 0200 	mov.w	r2, #0
 801e87e:	f04f 0300 	mov.w	r3, #0
 801e882:	da04      	bge.n	801e88e <__ulp+0x3e>
 801e884:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801e888:	fa41 f300 	asr.w	r3, r1, r0
 801e88c:	e7ec      	b.n	801e868 <__ulp+0x18>
 801e88e:	f1a0 0114 	sub.w	r1, r0, #20
 801e892:	291e      	cmp	r1, #30
 801e894:	bfda      	itte	le
 801e896:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801e89a:	fa20 f101 	lsrle.w	r1, r0, r1
 801e89e:	2101      	movgt	r1, #1
 801e8a0:	460a      	mov	r2, r1
 801e8a2:	e7e1      	b.n	801e868 <__ulp+0x18>
 801e8a4:	7ff00000 	.word	0x7ff00000

0801e8a8 <__b2d>:
 801e8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e8aa:	6905      	ldr	r5, [r0, #16]
 801e8ac:	f100 0714 	add.w	r7, r0, #20
 801e8b0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801e8b4:	1f2e      	subs	r6, r5, #4
 801e8b6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801e8ba:	4620      	mov	r0, r4
 801e8bc:	f7ff fd52 	bl	801e364 <__hi0bits>
 801e8c0:	f1c0 0320 	rsb	r3, r0, #32
 801e8c4:	280a      	cmp	r0, #10
 801e8c6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801e944 <__b2d+0x9c>
 801e8ca:	600b      	str	r3, [r1, #0]
 801e8cc:	dc14      	bgt.n	801e8f8 <__b2d+0x50>
 801e8ce:	f1c0 0e0b 	rsb	lr, r0, #11
 801e8d2:	fa24 f10e 	lsr.w	r1, r4, lr
 801e8d6:	42b7      	cmp	r7, r6
 801e8d8:	ea41 030c 	orr.w	r3, r1, ip
 801e8dc:	bf34      	ite	cc
 801e8de:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801e8e2:	2100      	movcs	r1, #0
 801e8e4:	3015      	adds	r0, #21
 801e8e6:	fa04 f000 	lsl.w	r0, r4, r0
 801e8ea:	fa21 f10e 	lsr.w	r1, r1, lr
 801e8ee:	ea40 0201 	orr.w	r2, r0, r1
 801e8f2:	ec43 2b10 	vmov	d0, r2, r3
 801e8f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e8f8:	42b7      	cmp	r7, r6
 801e8fa:	bf3a      	itte	cc
 801e8fc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801e900:	f1a5 0608 	subcc.w	r6, r5, #8
 801e904:	2100      	movcs	r1, #0
 801e906:	380b      	subs	r0, #11
 801e908:	d017      	beq.n	801e93a <__b2d+0x92>
 801e90a:	f1c0 0c20 	rsb	ip, r0, #32
 801e90e:	fa04 f500 	lsl.w	r5, r4, r0
 801e912:	42be      	cmp	r6, r7
 801e914:	fa21 f40c 	lsr.w	r4, r1, ip
 801e918:	ea45 0504 	orr.w	r5, r5, r4
 801e91c:	bf8c      	ite	hi
 801e91e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801e922:	2400      	movls	r4, #0
 801e924:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801e928:	fa01 f000 	lsl.w	r0, r1, r0
 801e92c:	fa24 f40c 	lsr.w	r4, r4, ip
 801e930:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801e934:	ea40 0204 	orr.w	r2, r0, r4
 801e938:	e7db      	b.n	801e8f2 <__b2d+0x4a>
 801e93a:	ea44 030c 	orr.w	r3, r4, ip
 801e93e:	460a      	mov	r2, r1
 801e940:	e7d7      	b.n	801e8f2 <__b2d+0x4a>
 801e942:	bf00      	nop
 801e944:	3ff00000 	.word	0x3ff00000

0801e948 <__d2b>:
 801e948:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e94c:	4689      	mov	r9, r1
 801e94e:	2101      	movs	r1, #1
 801e950:	ec57 6b10 	vmov	r6, r7, d0
 801e954:	4690      	mov	r8, r2
 801e956:	f7ff fc0f 	bl	801e178 <_Balloc>
 801e95a:	4604      	mov	r4, r0
 801e95c:	b930      	cbnz	r0, 801e96c <__d2b+0x24>
 801e95e:	4602      	mov	r2, r0
 801e960:	4b25      	ldr	r3, [pc, #148]	; (801e9f8 <__d2b+0xb0>)
 801e962:	4826      	ldr	r0, [pc, #152]	; (801e9fc <__d2b+0xb4>)
 801e964:	f240 310a 	movw	r1, #778	; 0x30a
 801e968:	f7fe f882 	bl	801ca70 <__assert_func>
 801e96c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801e970:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801e974:	bb35      	cbnz	r5, 801e9c4 <__d2b+0x7c>
 801e976:	2e00      	cmp	r6, #0
 801e978:	9301      	str	r3, [sp, #4]
 801e97a:	d028      	beq.n	801e9ce <__d2b+0x86>
 801e97c:	4668      	mov	r0, sp
 801e97e:	9600      	str	r6, [sp, #0]
 801e980:	f7ff fd10 	bl	801e3a4 <__lo0bits>
 801e984:	9900      	ldr	r1, [sp, #0]
 801e986:	b300      	cbz	r0, 801e9ca <__d2b+0x82>
 801e988:	9a01      	ldr	r2, [sp, #4]
 801e98a:	f1c0 0320 	rsb	r3, r0, #32
 801e98e:	fa02 f303 	lsl.w	r3, r2, r3
 801e992:	430b      	orrs	r3, r1
 801e994:	40c2      	lsrs	r2, r0
 801e996:	6163      	str	r3, [r4, #20]
 801e998:	9201      	str	r2, [sp, #4]
 801e99a:	9b01      	ldr	r3, [sp, #4]
 801e99c:	61a3      	str	r3, [r4, #24]
 801e99e:	2b00      	cmp	r3, #0
 801e9a0:	bf14      	ite	ne
 801e9a2:	2202      	movne	r2, #2
 801e9a4:	2201      	moveq	r2, #1
 801e9a6:	6122      	str	r2, [r4, #16]
 801e9a8:	b1d5      	cbz	r5, 801e9e0 <__d2b+0x98>
 801e9aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801e9ae:	4405      	add	r5, r0
 801e9b0:	f8c9 5000 	str.w	r5, [r9]
 801e9b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801e9b8:	f8c8 0000 	str.w	r0, [r8]
 801e9bc:	4620      	mov	r0, r4
 801e9be:	b003      	add	sp, #12
 801e9c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e9c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801e9c8:	e7d5      	b.n	801e976 <__d2b+0x2e>
 801e9ca:	6161      	str	r1, [r4, #20]
 801e9cc:	e7e5      	b.n	801e99a <__d2b+0x52>
 801e9ce:	a801      	add	r0, sp, #4
 801e9d0:	f7ff fce8 	bl	801e3a4 <__lo0bits>
 801e9d4:	9b01      	ldr	r3, [sp, #4]
 801e9d6:	6163      	str	r3, [r4, #20]
 801e9d8:	2201      	movs	r2, #1
 801e9da:	6122      	str	r2, [r4, #16]
 801e9dc:	3020      	adds	r0, #32
 801e9de:	e7e3      	b.n	801e9a8 <__d2b+0x60>
 801e9e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e9e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801e9e8:	f8c9 0000 	str.w	r0, [r9]
 801e9ec:	6918      	ldr	r0, [r3, #16]
 801e9ee:	f7ff fcb9 	bl	801e364 <__hi0bits>
 801e9f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801e9f6:	e7df      	b.n	801e9b8 <__d2b+0x70>
 801e9f8:	080219b7 	.word	0x080219b7
 801e9fc:	08021a48 	.word	0x08021a48

0801ea00 <__ratio>:
 801ea00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea04:	4688      	mov	r8, r1
 801ea06:	4669      	mov	r1, sp
 801ea08:	4681      	mov	r9, r0
 801ea0a:	f7ff ff4d 	bl	801e8a8 <__b2d>
 801ea0e:	a901      	add	r1, sp, #4
 801ea10:	4640      	mov	r0, r8
 801ea12:	ec55 4b10 	vmov	r4, r5, d0
 801ea16:	f7ff ff47 	bl	801e8a8 <__b2d>
 801ea1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ea1e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801ea22:	eba3 0c02 	sub.w	ip, r3, r2
 801ea26:	e9dd 3200 	ldrd	r3, r2, [sp]
 801ea2a:	1a9b      	subs	r3, r3, r2
 801ea2c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801ea30:	ec51 0b10 	vmov	r0, r1, d0
 801ea34:	2b00      	cmp	r3, #0
 801ea36:	bfd6      	itet	le
 801ea38:	460a      	movle	r2, r1
 801ea3a:	462a      	movgt	r2, r5
 801ea3c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801ea40:	468b      	mov	fp, r1
 801ea42:	462f      	mov	r7, r5
 801ea44:	bfd4      	ite	le
 801ea46:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801ea4a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801ea4e:	4620      	mov	r0, r4
 801ea50:	ee10 2a10 	vmov	r2, s0
 801ea54:	465b      	mov	r3, fp
 801ea56:	4639      	mov	r1, r7
 801ea58:	f7e1 ff08 	bl	800086c <__aeabi_ddiv>
 801ea5c:	ec41 0b10 	vmov	d0, r0, r1
 801ea60:	b003      	add	sp, #12
 801ea62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ea66 <__copybits>:
 801ea66:	3901      	subs	r1, #1
 801ea68:	b570      	push	{r4, r5, r6, lr}
 801ea6a:	1149      	asrs	r1, r1, #5
 801ea6c:	6914      	ldr	r4, [r2, #16]
 801ea6e:	3101      	adds	r1, #1
 801ea70:	f102 0314 	add.w	r3, r2, #20
 801ea74:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801ea78:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801ea7c:	1f05      	subs	r5, r0, #4
 801ea7e:	42a3      	cmp	r3, r4
 801ea80:	d30c      	bcc.n	801ea9c <__copybits+0x36>
 801ea82:	1aa3      	subs	r3, r4, r2
 801ea84:	3b11      	subs	r3, #17
 801ea86:	f023 0303 	bic.w	r3, r3, #3
 801ea8a:	3211      	adds	r2, #17
 801ea8c:	42a2      	cmp	r2, r4
 801ea8e:	bf88      	it	hi
 801ea90:	2300      	movhi	r3, #0
 801ea92:	4418      	add	r0, r3
 801ea94:	2300      	movs	r3, #0
 801ea96:	4288      	cmp	r0, r1
 801ea98:	d305      	bcc.n	801eaa6 <__copybits+0x40>
 801ea9a:	bd70      	pop	{r4, r5, r6, pc}
 801ea9c:	f853 6b04 	ldr.w	r6, [r3], #4
 801eaa0:	f845 6f04 	str.w	r6, [r5, #4]!
 801eaa4:	e7eb      	b.n	801ea7e <__copybits+0x18>
 801eaa6:	f840 3b04 	str.w	r3, [r0], #4
 801eaaa:	e7f4      	b.n	801ea96 <__copybits+0x30>

0801eaac <__any_on>:
 801eaac:	f100 0214 	add.w	r2, r0, #20
 801eab0:	6900      	ldr	r0, [r0, #16]
 801eab2:	114b      	asrs	r3, r1, #5
 801eab4:	4298      	cmp	r0, r3
 801eab6:	b510      	push	{r4, lr}
 801eab8:	db11      	blt.n	801eade <__any_on+0x32>
 801eaba:	dd0a      	ble.n	801ead2 <__any_on+0x26>
 801eabc:	f011 011f 	ands.w	r1, r1, #31
 801eac0:	d007      	beq.n	801ead2 <__any_on+0x26>
 801eac2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801eac6:	fa24 f001 	lsr.w	r0, r4, r1
 801eaca:	fa00 f101 	lsl.w	r1, r0, r1
 801eace:	428c      	cmp	r4, r1
 801ead0:	d10b      	bne.n	801eaea <__any_on+0x3e>
 801ead2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ead6:	4293      	cmp	r3, r2
 801ead8:	d803      	bhi.n	801eae2 <__any_on+0x36>
 801eada:	2000      	movs	r0, #0
 801eadc:	bd10      	pop	{r4, pc}
 801eade:	4603      	mov	r3, r0
 801eae0:	e7f7      	b.n	801ead2 <__any_on+0x26>
 801eae2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801eae6:	2900      	cmp	r1, #0
 801eae8:	d0f5      	beq.n	801ead6 <__any_on+0x2a>
 801eaea:	2001      	movs	r0, #1
 801eaec:	e7f6      	b.n	801eadc <__any_on+0x30>

0801eaee <_calloc_r>:
 801eaee:	b513      	push	{r0, r1, r4, lr}
 801eaf0:	434a      	muls	r2, r1
 801eaf2:	4611      	mov	r1, r2
 801eaf4:	9201      	str	r2, [sp, #4]
 801eaf6:	f7fb fe99 	bl	801a82c <_malloc_r>
 801eafa:	4604      	mov	r4, r0
 801eafc:	b118      	cbz	r0, 801eb06 <_calloc_r+0x18>
 801eafe:	9a01      	ldr	r2, [sp, #4]
 801eb00:	2100      	movs	r1, #0
 801eb02:	f7fb fe3b 	bl	801a77c <memset>
 801eb06:	4620      	mov	r0, r4
 801eb08:	b002      	add	sp, #8
 801eb0a:	bd10      	pop	{r4, pc}

0801eb0c <_realloc_r>:
 801eb0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb0e:	4607      	mov	r7, r0
 801eb10:	4614      	mov	r4, r2
 801eb12:	460e      	mov	r6, r1
 801eb14:	b921      	cbnz	r1, 801eb20 <_realloc_r+0x14>
 801eb16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801eb1a:	4611      	mov	r1, r2
 801eb1c:	f7fb be86 	b.w	801a82c <_malloc_r>
 801eb20:	b922      	cbnz	r2, 801eb2c <_realloc_r+0x20>
 801eb22:	f7fb fe33 	bl	801a78c <_free_r>
 801eb26:	4625      	mov	r5, r4
 801eb28:	4628      	mov	r0, r5
 801eb2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eb2c:	f000 fe9e 	bl	801f86c <_malloc_usable_size_r>
 801eb30:	42a0      	cmp	r0, r4
 801eb32:	d20f      	bcs.n	801eb54 <_realloc_r+0x48>
 801eb34:	4621      	mov	r1, r4
 801eb36:	4638      	mov	r0, r7
 801eb38:	f7fb fe78 	bl	801a82c <_malloc_r>
 801eb3c:	4605      	mov	r5, r0
 801eb3e:	2800      	cmp	r0, #0
 801eb40:	d0f2      	beq.n	801eb28 <_realloc_r+0x1c>
 801eb42:	4631      	mov	r1, r6
 801eb44:	4622      	mov	r2, r4
 801eb46:	f7fb fdf1 	bl	801a72c <memcpy>
 801eb4a:	4631      	mov	r1, r6
 801eb4c:	4638      	mov	r0, r7
 801eb4e:	f7fb fe1d 	bl	801a78c <_free_r>
 801eb52:	e7e9      	b.n	801eb28 <_realloc_r+0x1c>
 801eb54:	4635      	mov	r5, r6
 801eb56:	e7e7      	b.n	801eb28 <_realloc_r+0x1c>

0801eb58 <__ssputs_r>:
 801eb58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eb5c:	688e      	ldr	r6, [r1, #8]
 801eb5e:	429e      	cmp	r6, r3
 801eb60:	4682      	mov	sl, r0
 801eb62:	460c      	mov	r4, r1
 801eb64:	4690      	mov	r8, r2
 801eb66:	461f      	mov	r7, r3
 801eb68:	d838      	bhi.n	801ebdc <__ssputs_r+0x84>
 801eb6a:	898a      	ldrh	r2, [r1, #12]
 801eb6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801eb70:	d032      	beq.n	801ebd8 <__ssputs_r+0x80>
 801eb72:	6825      	ldr	r5, [r4, #0]
 801eb74:	6909      	ldr	r1, [r1, #16]
 801eb76:	eba5 0901 	sub.w	r9, r5, r1
 801eb7a:	6965      	ldr	r5, [r4, #20]
 801eb7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801eb80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801eb84:	3301      	adds	r3, #1
 801eb86:	444b      	add	r3, r9
 801eb88:	106d      	asrs	r5, r5, #1
 801eb8a:	429d      	cmp	r5, r3
 801eb8c:	bf38      	it	cc
 801eb8e:	461d      	movcc	r5, r3
 801eb90:	0553      	lsls	r3, r2, #21
 801eb92:	d531      	bpl.n	801ebf8 <__ssputs_r+0xa0>
 801eb94:	4629      	mov	r1, r5
 801eb96:	f7fb fe49 	bl	801a82c <_malloc_r>
 801eb9a:	4606      	mov	r6, r0
 801eb9c:	b950      	cbnz	r0, 801ebb4 <__ssputs_r+0x5c>
 801eb9e:	230c      	movs	r3, #12
 801eba0:	f8ca 3000 	str.w	r3, [sl]
 801eba4:	89a3      	ldrh	r3, [r4, #12]
 801eba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ebaa:	81a3      	strh	r3, [r4, #12]
 801ebac:	f04f 30ff 	mov.w	r0, #4294967295
 801ebb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ebb4:	6921      	ldr	r1, [r4, #16]
 801ebb6:	464a      	mov	r2, r9
 801ebb8:	f7fb fdb8 	bl	801a72c <memcpy>
 801ebbc:	89a3      	ldrh	r3, [r4, #12]
 801ebbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ebc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ebc6:	81a3      	strh	r3, [r4, #12]
 801ebc8:	6126      	str	r6, [r4, #16]
 801ebca:	6165      	str	r5, [r4, #20]
 801ebcc:	444e      	add	r6, r9
 801ebce:	eba5 0509 	sub.w	r5, r5, r9
 801ebd2:	6026      	str	r6, [r4, #0]
 801ebd4:	60a5      	str	r5, [r4, #8]
 801ebd6:	463e      	mov	r6, r7
 801ebd8:	42be      	cmp	r6, r7
 801ebda:	d900      	bls.n	801ebde <__ssputs_r+0x86>
 801ebdc:	463e      	mov	r6, r7
 801ebde:	4632      	mov	r2, r6
 801ebe0:	6820      	ldr	r0, [r4, #0]
 801ebe2:	4641      	mov	r1, r8
 801ebe4:	f7fb fdb0 	bl	801a748 <memmove>
 801ebe8:	68a3      	ldr	r3, [r4, #8]
 801ebea:	6822      	ldr	r2, [r4, #0]
 801ebec:	1b9b      	subs	r3, r3, r6
 801ebee:	4432      	add	r2, r6
 801ebf0:	60a3      	str	r3, [r4, #8]
 801ebf2:	6022      	str	r2, [r4, #0]
 801ebf4:	2000      	movs	r0, #0
 801ebf6:	e7db      	b.n	801ebb0 <__ssputs_r+0x58>
 801ebf8:	462a      	mov	r2, r5
 801ebfa:	f7ff ff87 	bl	801eb0c <_realloc_r>
 801ebfe:	4606      	mov	r6, r0
 801ec00:	2800      	cmp	r0, #0
 801ec02:	d1e1      	bne.n	801ebc8 <__ssputs_r+0x70>
 801ec04:	6921      	ldr	r1, [r4, #16]
 801ec06:	4650      	mov	r0, sl
 801ec08:	f7fb fdc0 	bl	801a78c <_free_r>
 801ec0c:	e7c7      	b.n	801eb9e <__ssputs_r+0x46>
	...

0801ec10 <_svfiprintf_r>:
 801ec10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec14:	4698      	mov	r8, r3
 801ec16:	898b      	ldrh	r3, [r1, #12]
 801ec18:	061b      	lsls	r3, r3, #24
 801ec1a:	b09d      	sub	sp, #116	; 0x74
 801ec1c:	4607      	mov	r7, r0
 801ec1e:	460d      	mov	r5, r1
 801ec20:	4614      	mov	r4, r2
 801ec22:	d50e      	bpl.n	801ec42 <_svfiprintf_r+0x32>
 801ec24:	690b      	ldr	r3, [r1, #16]
 801ec26:	b963      	cbnz	r3, 801ec42 <_svfiprintf_r+0x32>
 801ec28:	2140      	movs	r1, #64	; 0x40
 801ec2a:	f7fb fdff 	bl	801a82c <_malloc_r>
 801ec2e:	6028      	str	r0, [r5, #0]
 801ec30:	6128      	str	r0, [r5, #16]
 801ec32:	b920      	cbnz	r0, 801ec3e <_svfiprintf_r+0x2e>
 801ec34:	230c      	movs	r3, #12
 801ec36:	603b      	str	r3, [r7, #0]
 801ec38:	f04f 30ff 	mov.w	r0, #4294967295
 801ec3c:	e0d1      	b.n	801ede2 <_svfiprintf_r+0x1d2>
 801ec3e:	2340      	movs	r3, #64	; 0x40
 801ec40:	616b      	str	r3, [r5, #20]
 801ec42:	2300      	movs	r3, #0
 801ec44:	9309      	str	r3, [sp, #36]	; 0x24
 801ec46:	2320      	movs	r3, #32
 801ec48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ec4c:	f8cd 800c 	str.w	r8, [sp, #12]
 801ec50:	2330      	movs	r3, #48	; 0x30
 801ec52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801edfc <_svfiprintf_r+0x1ec>
 801ec56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ec5a:	f04f 0901 	mov.w	r9, #1
 801ec5e:	4623      	mov	r3, r4
 801ec60:	469a      	mov	sl, r3
 801ec62:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ec66:	b10a      	cbz	r2, 801ec6c <_svfiprintf_r+0x5c>
 801ec68:	2a25      	cmp	r2, #37	; 0x25
 801ec6a:	d1f9      	bne.n	801ec60 <_svfiprintf_r+0x50>
 801ec6c:	ebba 0b04 	subs.w	fp, sl, r4
 801ec70:	d00b      	beq.n	801ec8a <_svfiprintf_r+0x7a>
 801ec72:	465b      	mov	r3, fp
 801ec74:	4622      	mov	r2, r4
 801ec76:	4629      	mov	r1, r5
 801ec78:	4638      	mov	r0, r7
 801ec7a:	f7ff ff6d 	bl	801eb58 <__ssputs_r>
 801ec7e:	3001      	adds	r0, #1
 801ec80:	f000 80aa 	beq.w	801edd8 <_svfiprintf_r+0x1c8>
 801ec84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ec86:	445a      	add	r2, fp
 801ec88:	9209      	str	r2, [sp, #36]	; 0x24
 801ec8a:	f89a 3000 	ldrb.w	r3, [sl]
 801ec8e:	2b00      	cmp	r3, #0
 801ec90:	f000 80a2 	beq.w	801edd8 <_svfiprintf_r+0x1c8>
 801ec94:	2300      	movs	r3, #0
 801ec96:	f04f 32ff 	mov.w	r2, #4294967295
 801ec9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ec9e:	f10a 0a01 	add.w	sl, sl, #1
 801eca2:	9304      	str	r3, [sp, #16]
 801eca4:	9307      	str	r3, [sp, #28]
 801eca6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ecaa:	931a      	str	r3, [sp, #104]	; 0x68
 801ecac:	4654      	mov	r4, sl
 801ecae:	2205      	movs	r2, #5
 801ecb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ecb4:	4851      	ldr	r0, [pc, #324]	; (801edfc <_svfiprintf_r+0x1ec>)
 801ecb6:	f7e1 faa3 	bl	8000200 <memchr>
 801ecba:	9a04      	ldr	r2, [sp, #16]
 801ecbc:	b9d8      	cbnz	r0, 801ecf6 <_svfiprintf_r+0xe6>
 801ecbe:	06d0      	lsls	r0, r2, #27
 801ecc0:	bf44      	itt	mi
 801ecc2:	2320      	movmi	r3, #32
 801ecc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ecc8:	0711      	lsls	r1, r2, #28
 801ecca:	bf44      	itt	mi
 801eccc:	232b      	movmi	r3, #43	; 0x2b
 801ecce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ecd2:	f89a 3000 	ldrb.w	r3, [sl]
 801ecd6:	2b2a      	cmp	r3, #42	; 0x2a
 801ecd8:	d015      	beq.n	801ed06 <_svfiprintf_r+0xf6>
 801ecda:	9a07      	ldr	r2, [sp, #28]
 801ecdc:	4654      	mov	r4, sl
 801ecde:	2000      	movs	r0, #0
 801ece0:	f04f 0c0a 	mov.w	ip, #10
 801ece4:	4621      	mov	r1, r4
 801ece6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ecea:	3b30      	subs	r3, #48	; 0x30
 801ecec:	2b09      	cmp	r3, #9
 801ecee:	d94e      	bls.n	801ed8e <_svfiprintf_r+0x17e>
 801ecf0:	b1b0      	cbz	r0, 801ed20 <_svfiprintf_r+0x110>
 801ecf2:	9207      	str	r2, [sp, #28]
 801ecf4:	e014      	b.n	801ed20 <_svfiprintf_r+0x110>
 801ecf6:	eba0 0308 	sub.w	r3, r0, r8
 801ecfa:	fa09 f303 	lsl.w	r3, r9, r3
 801ecfe:	4313      	orrs	r3, r2
 801ed00:	9304      	str	r3, [sp, #16]
 801ed02:	46a2      	mov	sl, r4
 801ed04:	e7d2      	b.n	801ecac <_svfiprintf_r+0x9c>
 801ed06:	9b03      	ldr	r3, [sp, #12]
 801ed08:	1d19      	adds	r1, r3, #4
 801ed0a:	681b      	ldr	r3, [r3, #0]
 801ed0c:	9103      	str	r1, [sp, #12]
 801ed0e:	2b00      	cmp	r3, #0
 801ed10:	bfbb      	ittet	lt
 801ed12:	425b      	neglt	r3, r3
 801ed14:	f042 0202 	orrlt.w	r2, r2, #2
 801ed18:	9307      	strge	r3, [sp, #28]
 801ed1a:	9307      	strlt	r3, [sp, #28]
 801ed1c:	bfb8      	it	lt
 801ed1e:	9204      	strlt	r2, [sp, #16]
 801ed20:	7823      	ldrb	r3, [r4, #0]
 801ed22:	2b2e      	cmp	r3, #46	; 0x2e
 801ed24:	d10c      	bne.n	801ed40 <_svfiprintf_r+0x130>
 801ed26:	7863      	ldrb	r3, [r4, #1]
 801ed28:	2b2a      	cmp	r3, #42	; 0x2a
 801ed2a:	d135      	bne.n	801ed98 <_svfiprintf_r+0x188>
 801ed2c:	9b03      	ldr	r3, [sp, #12]
 801ed2e:	1d1a      	adds	r2, r3, #4
 801ed30:	681b      	ldr	r3, [r3, #0]
 801ed32:	9203      	str	r2, [sp, #12]
 801ed34:	2b00      	cmp	r3, #0
 801ed36:	bfb8      	it	lt
 801ed38:	f04f 33ff 	movlt.w	r3, #4294967295
 801ed3c:	3402      	adds	r4, #2
 801ed3e:	9305      	str	r3, [sp, #20]
 801ed40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801ee0c <_svfiprintf_r+0x1fc>
 801ed44:	7821      	ldrb	r1, [r4, #0]
 801ed46:	2203      	movs	r2, #3
 801ed48:	4650      	mov	r0, sl
 801ed4a:	f7e1 fa59 	bl	8000200 <memchr>
 801ed4e:	b140      	cbz	r0, 801ed62 <_svfiprintf_r+0x152>
 801ed50:	2340      	movs	r3, #64	; 0x40
 801ed52:	eba0 000a 	sub.w	r0, r0, sl
 801ed56:	fa03 f000 	lsl.w	r0, r3, r0
 801ed5a:	9b04      	ldr	r3, [sp, #16]
 801ed5c:	4303      	orrs	r3, r0
 801ed5e:	3401      	adds	r4, #1
 801ed60:	9304      	str	r3, [sp, #16]
 801ed62:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ed66:	4826      	ldr	r0, [pc, #152]	; (801ee00 <_svfiprintf_r+0x1f0>)
 801ed68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ed6c:	2206      	movs	r2, #6
 801ed6e:	f7e1 fa47 	bl	8000200 <memchr>
 801ed72:	2800      	cmp	r0, #0
 801ed74:	d038      	beq.n	801ede8 <_svfiprintf_r+0x1d8>
 801ed76:	4b23      	ldr	r3, [pc, #140]	; (801ee04 <_svfiprintf_r+0x1f4>)
 801ed78:	bb1b      	cbnz	r3, 801edc2 <_svfiprintf_r+0x1b2>
 801ed7a:	9b03      	ldr	r3, [sp, #12]
 801ed7c:	3307      	adds	r3, #7
 801ed7e:	f023 0307 	bic.w	r3, r3, #7
 801ed82:	3308      	adds	r3, #8
 801ed84:	9303      	str	r3, [sp, #12]
 801ed86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ed88:	4433      	add	r3, r6
 801ed8a:	9309      	str	r3, [sp, #36]	; 0x24
 801ed8c:	e767      	b.n	801ec5e <_svfiprintf_r+0x4e>
 801ed8e:	fb0c 3202 	mla	r2, ip, r2, r3
 801ed92:	460c      	mov	r4, r1
 801ed94:	2001      	movs	r0, #1
 801ed96:	e7a5      	b.n	801ece4 <_svfiprintf_r+0xd4>
 801ed98:	2300      	movs	r3, #0
 801ed9a:	3401      	adds	r4, #1
 801ed9c:	9305      	str	r3, [sp, #20]
 801ed9e:	4619      	mov	r1, r3
 801eda0:	f04f 0c0a 	mov.w	ip, #10
 801eda4:	4620      	mov	r0, r4
 801eda6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801edaa:	3a30      	subs	r2, #48	; 0x30
 801edac:	2a09      	cmp	r2, #9
 801edae:	d903      	bls.n	801edb8 <_svfiprintf_r+0x1a8>
 801edb0:	2b00      	cmp	r3, #0
 801edb2:	d0c5      	beq.n	801ed40 <_svfiprintf_r+0x130>
 801edb4:	9105      	str	r1, [sp, #20]
 801edb6:	e7c3      	b.n	801ed40 <_svfiprintf_r+0x130>
 801edb8:	fb0c 2101 	mla	r1, ip, r1, r2
 801edbc:	4604      	mov	r4, r0
 801edbe:	2301      	movs	r3, #1
 801edc0:	e7f0      	b.n	801eda4 <_svfiprintf_r+0x194>
 801edc2:	ab03      	add	r3, sp, #12
 801edc4:	9300      	str	r3, [sp, #0]
 801edc6:	462a      	mov	r2, r5
 801edc8:	4b0f      	ldr	r3, [pc, #60]	; (801ee08 <_svfiprintf_r+0x1f8>)
 801edca:	a904      	add	r1, sp, #16
 801edcc:	4638      	mov	r0, r7
 801edce:	f7fb fe27 	bl	801aa20 <_printf_float>
 801edd2:	1c42      	adds	r2, r0, #1
 801edd4:	4606      	mov	r6, r0
 801edd6:	d1d6      	bne.n	801ed86 <_svfiprintf_r+0x176>
 801edd8:	89ab      	ldrh	r3, [r5, #12]
 801edda:	065b      	lsls	r3, r3, #25
 801eddc:	f53f af2c 	bmi.w	801ec38 <_svfiprintf_r+0x28>
 801ede0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ede2:	b01d      	add	sp, #116	; 0x74
 801ede4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ede8:	ab03      	add	r3, sp, #12
 801edea:	9300      	str	r3, [sp, #0]
 801edec:	462a      	mov	r2, r5
 801edee:	4b06      	ldr	r3, [pc, #24]	; (801ee08 <_svfiprintf_r+0x1f8>)
 801edf0:	a904      	add	r1, sp, #16
 801edf2:	4638      	mov	r0, r7
 801edf4:	f7fc f8b8 	bl	801af68 <_printf_i>
 801edf8:	e7eb      	b.n	801edd2 <_svfiprintf_r+0x1c2>
 801edfa:	bf00      	nop
 801edfc:	08021ba4 	.word	0x08021ba4
 801ee00:	08021bae 	.word	0x08021bae
 801ee04:	0801aa21 	.word	0x0801aa21
 801ee08:	0801eb59 	.word	0x0801eb59
 801ee0c:	08021baa 	.word	0x08021baa

0801ee10 <_sungetc_r>:
 801ee10:	b538      	push	{r3, r4, r5, lr}
 801ee12:	1c4b      	adds	r3, r1, #1
 801ee14:	4614      	mov	r4, r2
 801ee16:	d103      	bne.n	801ee20 <_sungetc_r+0x10>
 801ee18:	f04f 35ff 	mov.w	r5, #4294967295
 801ee1c:	4628      	mov	r0, r5
 801ee1e:	bd38      	pop	{r3, r4, r5, pc}
 801ee20:	8993      	ldrh	r3, [r2, #12]
 801ee22:	f023 0320 	bic.w	r3, r3, #32
 801ee26:	8193      	strh	r3, [r2, #12]
 801ee28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ee2a:	6852      	ldr	r2, [r2, #4]
 801ee2c:	b2cd      	uxtb	r5, r1
 801ee2e:	b18b      	cbz	r3, 801ee54 <_sungetc_r+0x44>
 801ee30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ee32:	4293      	cmp	r3, r2
 801ee34:	dd08      	ble.n	801ee48 <_sungetc_r+0x38>
 801ee36:	6823      	ldr	r3, [r4, #0]
 801ee38:	1e5a      	subs	r2, r3, #1
 801ee3a:	6022      	str	r2, [r4, #0]
 801ee3c:	f803 5c01 	strb.w	r5, [r3, #-1]
 801ee40:	6863      	ldr	r3, [r4, #4]
 801ee42:	3301      	adds	r3, #1
 801ee44:	6063      	str	r3, [r4, #4]
 801ee46:	e7e9      	b.n	801ee1c <_sungetc_r+0xc>
 801ee48:	4621      	mov	r1, r4
 801ee4a:	f000 fca5 	bl	801f798 <__submore>
 801ee4e:	2800      	cmp	r0, #0
 801ee50:	d0f1      	beq.n	801ee36 <_sungetc_r+0x26>
 801ee52:	e7e1      	b.n	801ee18 <_sungetc_r+0x8>
 801ee54:	6921      	ldr	r1, [r4, #16]
 801ee56:	6823      	ldr	r3, [r4, #0]
 801ee58:	b151      	cbz	r1, 801ee70 <_sungetc_r+0x60>
 801ee5a:	4299      	cmp	r1, r3
 801ee5c:	d208      	bcs.n	801ee70 <_sungetc_r+0x60>
 801ee5e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801ee62:	42a9      	cmp	r1, r5
 801ee64:	d104      	bne.n	801ee70 <_sungetc_r+0x60>
 801ee66:	3b01      	subs	r3, #1
 801ee68:	3201      	adds	r2, #1
 801ee6a:	6023      	str	r3, [r4, #0]
 801ee6c:	6062      	str	r2, [r4, #4]
 801ee6e:	e7d5      	b.n	801ee1c <_sungetc_r+0xc>
 801ee70:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801ee74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ee78:	6363      	str	r3, [r4, #52]	; 0x34
 801ee7a:	2303      	movs	r3, #3
 801ee7c:	63a3      	str	r3, [r4, #56]	; 0x38
 801ee7e:	4623      	mov	r3, r4
 801ee80:	f803 5f46 	strb.w	r5, [r3, #70]!
 801ee84:	6023      	str	r3, [r4, #0]
 801ee86:	2301      	movs	r3, #1
 801ee88:	e7dc      	b.n	801ee44 <_sungetc_r+0x34>

0801ee8a <__ssrefill_r>:
 801ee8a:	b510      	push	{r4, lr}
 801ee8c:	460c      	mov	r4, r1
 801ee8e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801ee90:	b169      	cbz	r1, 801eeae <__ssrefill_r+0x24>
 801ee92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ee96:	4299      	cmp	r1, r3
 801ee98:	d001      	beq.n	801ee9e <__ssrefill_r+0x14>
 801ee9a:	f7fb fc77 	bl	801a78c <_free_r>
 801ee9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801eea0:	6063      	str	r3, [r4, #4]
 801eea2:	2000      	movs	r0, #0
 801eea4:	6360      	str	r0, [r4, #52]	; 0x34
 801eea6:	b113      	cbz	r3, 801eeae <__ssrefill_r+0x24>
 801eea8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801eeaa:	6023      	str	r3, [r4, #0]
 801eeac:	bd10      	pop	{r4, pc}
 801eeae:	6923      	ldr	r3, [r4, #16]
 801eeb0:	6023      	str	r3, [r4, #0]
 801eeb2:	2300      	movs	r3, #0
 801eeb4:	6063      	str	r3, [r4, #4]
 801eeb6:	89a3      	ldrh	r3, [r4, #12]
 801eeb8:	f043 0320 	orr.w	r3, r3, #32
 801eebc:	81a3      	strh	r3, [r4, #12]
 801eebe:	f04f 30ff 	mov.w	r0, #4294967295
 801eec2:	e7f3      	b.n	801eeac <__ssrefill_r+0x22>

0801eec4 <__ssvfiscanf_r>:
 801eec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eec8:	460c      	mov	r4, r1
 801eeca:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801eece:	2100      	movs	r1, #0
 801eed0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801eed4:	49b2      	ldr	r1, [pc, #712]	; (801f1a0 <__ssvfiscanf_r+0x2dc>)
 801eed6:	91a0      	str	r1, [sp, #640]	; 0x280
 801eed8:	f10d 0804 	add.w	r8, sp, #4
 801eedc:	49b1      	ldr	r1, [pc, #708]	; (801f1a4 <__ssvfiscanf_r+0x2e0>)
 801eede:	4fb2      	ldr	r7, [pc, #712]	; (801f1a8 <__ssvfiscanf_r+0x2e4>)
 801eee0:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801f1ac <__ssvfiscanf_r+0x2e8>
 801eee4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801eee8:	4606      	mov	r6, r0
 801eeea:	91a1      	str	r1, [sp, #644]	; 0x284
 801eeec:	9300      	str	r3, [sp, #0]
 801eeee:	f892 a000 	ldrb.w	sl, [r2]
 801eef2:	f1ba 0f00 	cmp.w	sl, #0
 801eef6:	f000 8151 	beq.w	801f19c <__ssvfiscanf_r+0x2d8>
 801eefa:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801eefe:	f013 0308 	ands.w	r3, r3, #8
 801ef02:	f102 0501 	add.w	r5, r2, #1
 801ef06:	d019      	beq.n	801ef3c <__ssvfiscanf_r+0x78>
 801ef08:	6863      	ldr	r3, [r4, #4]
 801ef0a:	2b00      	cmp	r3, #0
 801ef0c:	dd0f      	ble.n	801ef2e <__ssvfiscanf_r+0x6a>
 801ef0e:	6823      	ldr	r3, [r4, #0]
 801ef10:	781a      	ldrb	r2, [r3, #0]
 801ef12:	5cba      	ldrb	r2, [r7, r2]
 801ef14:	0712      	lsls	r2, r2, #28
 801ef16:	d401      	bmi.n	801ef1c <__ssvfiscanf_r+0x58>
 801ef18:	462a      	mov	r2, r5
 801ef1a:	e7e8      	b.n	801eeee <__ssvfiscanf_r+0x2a>
 801ef1c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801ef1e:	3201      	adds	r2, #1
 801ef20:	9245      	str	r2, [sp, #276]	; 0x114
 801ef22:	6862      	ldr	r2, [r4, #4]
 801ef24:	3301      	adds	r3, #1
 801ef26:	3a01      	subs	r2, #1
 801ef28:	6062      	str	r2, [r4, #4]
 801ef2a:	6023      	str	r3, [r4, #0]
 801ef2c:	e7ec      	b.n	801ef08 <__ssvfiscanf_r+0x44>
 801ef2e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ef30:	4621      	mov	r1, r4
 801ef32:	4630      	mov	r0, r6
 801ef34:	4798      	blx	r3
 801ef36:	2800      	cmp	r0, #0
 801ef38:	d0e9      	beq.n	801ef0e <__ssvfiscanf_r+0x4a>
 801ef3a:	e7ed      	b.n	801ef18 <__ssvfiscanf_r+0x54>
 801ef3c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 801ef40:	f040 8083 	bne.w	801f04a <__ssvfiscanf_r+0x186>
 801ef44:	9341      	str	r3, [sp, #260]	; 0x104
 801ef46:	9343      	str	r3, [sp, #268]	; 0x10c
 801ef48:	7853      	ldrb	r3, [r2, #1]
 801ef4a:	2b2a      	cmp	r3, #42	; 0x2a
 801ef4c:	bf02      	ittt	eq
 801ef4e:	2310      	moveq	r3, #16
 801ef50:	1c95      	addeq	r5, r2, #2
 801ef52:	9341      	streq	r3, [sp, #260]	; 0x104
 801ef54:	220a      	movs	r2, #10
 801ef56:	46ab      	mov	fp, r5
 801ef58:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801ef5c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801ef60:	2b09      	cmp	r3, #9
 801ef62:	d91d      	bls.n	801efa0 <__ssvfiscanf_r+0xdc>
 801ef64:	4891      	ldr	r0, [pc, #580]	; (801f1ac <__ssvfiscanf_r+0x2e8>)
 801ef66:	2203      	movs	r2, #3
 801ef68:	f7e1 f94a 	bl	8000200 <memchr>
 801ef6c:	b140      	cbz	r0, 801ef80 <__ssvfiscanf_r+0xbc>
 801ef6e:	2301      	movs	r3, #1
 801ef70:	eba0 0009 	sub.w	r0, r0, r9
 801ef74:	fa03 f000 	lsl.w	r0, r3, r0
 801ef78:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801ef7a:	4318      	orrs	r0, r3
 801ef7c:	9041      	str	r0, [sp, #260]	; 0x104
 801ef7e:	465d      	mov	r5, fp
 801ef80:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ef84:	2b78      	cmp	r3, #120	; 0x78
 801ef86:	d806      	bhi.n	801ef96 <__ssvfiscanf_r+0xd2>
 801ef88:	2b57      	cmp	r3, #87	; 0x57
 801ef8a:	d810      	bhi.n	801efae <__ssvfiscanf_r+0xea>
 801ef8c:	2b25      	cmp	r3, #37	; 0x25
 801ef8e:	d05c      	beq.n	801f04a <__ssvfiscanf_r+0x186>
 801ef90:	d856      	bhi.n	801f040 <__ssvfiscanf_r+0x17c>
 801ef92:	2b00      	cmp	r3, #0
 801ef94:	d074      	beq.n	801f080 <__ssvfiscanf_r+0x1bc>
 801ef96:	2303      	movs	r3, #3
 801ef98:	9347      	str	r3, [sp, #284]	; 0x11c
 801ef9a:	230a      	movs	r3, #10
 801ef9c:	9342      	str	r3, [sp, #264]	; 0x108
 801ef9e:	e081      	b.n	801f0a4 <__ssvfiscanf_r+0x1e0>
 801efa0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801efa2:	fb02 1303 	mla	r3, r2, r3, r1
 801efa6:	3b30      	subs	r3, #48	; 0x30
 801efa8:	9343      	str	r3, [sp, #268]	; 0x10c
 801efaa:	465d      	mov	r5, fp
 801efac:	e7d3      	b.n	801ef56 <__ssvfiscanf_r+0x92>
 801efae:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801efb2:	2a20      	cmp	r2, #32
 801efb4:	d8ef      	bhi.n	801ef96 <__ssvfiscanf_r+0xd2>
 801efb6:	a101      	add	r1, pc, #4	; (adr r1, 801efbc <__ssvfiscanf_r+0xf8>)
 801efb8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801efbc:	0801f08f 	.word	0x0801f08f
 801efc0:	0801ef97 	.word	0x0801ef97
 801efc4:	0801ef97 	.word	0x0801ef97
 801efc8:	0801f0ed 	.word	0x0801f0ed
 801efcc:	0801ef97 	.word	0x0801ef97
 801efd0:	0801ef97 	.word	0x0801ef97
 801efd4:	0801ef97 	.word	0x0801ef97
 801efd8:	0801ef97 	.word	0x0801ef97
 801efdc:	0801ef97 	.word	0x0801ef97
 801efe0:	0801ef97 	.word	0x0801ef97
 801efe4:	0801ef97 	.word	0x0801ef97
 801efe8:	0801f103 	.word	0x0801f103
 801efec:	0801f0d9 	.word	0x0801f0d9
 801eff0:	0801f047 	.word	0x0801f047
 801eff4:	0801f047 	.word	0x0801f047
 801eff8:	0801f047 	.word	0x0801f047
 801effc:	0801ef97 	.word	0x0801ef97
 801f000:	0801f0dd 	.word	0x0801f0dd
 801f004:	0801ef97 	.word	0x0801ef97
 801f008:	0801ef97 	.word	0x0801ef97
 801f00c:	0801ef97 	.word	0x0801ef97
 801f010:	0801ef97 	.word	0x0801ef97
 801f014:	0801f113 	.word	0x0801f113
 801f018:	0801f0e5 	.word	0x0801f0e5
 801f01c:	0801f087 	.word	0x0801f087
 801f020:	0801ef97 	.word	0x0801ef97
 801f024:	0801ef97 	.word	0x0801ef97
 801f028:	0801f10f 	.word	0x0801f10f
 801f02c:	0801ef97 	.word	0x0801ef97
 801f030:	0801f0d9 	.word	0x0801f0d9
 801f034:	0801ef97 	.word	0x0801ef97
 801f038:	0801ef97 	.word	0x0801ef97
 801f03c:	0801f08f 	.word	0x0801f08f
 801f040:	3b45      	subs	r3, #69	; 0x45
 801f042:	2b02      	cmp	r3, #2
 801f044:	d8a7      	bhi.n	801ef96 <__ssvfiscanf_r+0xd2>
 801f046:	2305      	movs	r3, #5
 801f048:	e02b      	b.n	801f0a2 <__ssvfiscanf_r+0x1de>
 801f04a:	6863      	ldr	r3, [r4, #4]
 801f04c:	2b00      	cmp	r3, #0
 801f04e:	dd0d      	ble.n	801f06c <__ssvfiscanf_r+0x1a8>
 801f050:	6823      	ldr	r3, [r4, #0]
 801f052:	781a      	ldrb	r2, [r3, #0]
 801f054:	4552      	cmp	r2, sl
 801f056:	f040 80a1 	bne.w	801f19c <__ssvfiscanf_r+0x2d8>
 801f05a:	3301      	adds	r3, #1
 801f05c:	6862      	ldr	r2, [r4, #4]
 801f05e:	6023      	str	r3, [r4, #0]
 801f060:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801f062:	3a01      	subs	r2, #1
 801f064:	3301      	adds	r3, #1
 801f066:	6062      	str	r2, [r4, #4]
 801f068:	9345      	str	r3, [sp, #276]	; 0x114
 801f06a:	e755      	b.n	801ef18 <__ssvfiscanf_r+0x54>
 801f06c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801f06e:	4621      	mov	r1, r4
 801f070:	4630      	mov	r0, r6
 801f072:	4798      	blx	r3
 801f074:	2800      	cmp	r0, #0
 801f076:	d0eb      	beq.n	801f050 <__ssvfiscanf_r+0x18c>
 801f078:	9844      	ldr	r0, [sp, #272]	; 0x110
 801f07a:	2800      	cmp	r0, #0
 801f07c:	f040 8084 	bne.w	801f188 <__ssvfiscanf_r+0x2c4>
 801f080:	f04f 30ff 	mov.w	r0, #4294967295
 801f084:	e086      	b.n	801f194 <__ssvfiscanf_r+0x2d0>
 801f086:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801f088:	f042 0220 	orr.w	r2, r2, #32
 801f08c:	9241      	str	r2, [sp, #260]	; 0x104
 801f08e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801f090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f094:	9241      	str	r2, [sp, #260]	; 0x104
 801f096:	2210      	movs	r2, #16
 801f098:	2b6f      	cmp	r3, #111	; 0x6f
 801f09a:	9242      	str	r2, [sp, #264]	; 0x108
 801f09c:	bf34      	ite	cc
 801f09e:	2303      	movcc	r3, #3
 801f0a0:	2304      	movcs	r3, #4
 801f0a2:	9347      	str	r3, [sp, #284]	; 0x11c
 801f0a4:	6863      	ldr	r3, [r4, #4]
 801f0a6:	2b00      	cmp	r3, #0
 801f0a8:	dd41      	ble.n	801f12e <__ssvfiscanf_r+0x26a>
 801f0aa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801f0ac:	0659      	lsls	r1, r3, #25
 801f0ae:	d404      	bmi.n	801f0ba <__ssvfiscanf_r+0x1f6>
 801f0b0:	6823      	ldr	r3, [r4, #0]
 801f0b2:	781a      	ldrb	r2, [r3, #0]
 801f0b4:	5cba      	ldrb	r2, [r7, r2]
 801f0b6:	0712      	lsls	r2, r2, #28
 801f0b8:	d440      	bmi.n	801f13c <__ssvfiscanf_r+0x278>
 801f0ba:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801f0bc:	2b02      	cmp	r3, #2
 801f0be:	dc4f      	bgt.n	801f160 <__ssvfiscanf_r+0x29c>
 801f0c0:	466b      	mov	r3, sp
 801f0c2:	4622      	mov	r2, r4
 801f0c4:	a941      	add	r1, sp, #260	; 0x104
 801f0c6:	4630      	mov	r0, r6
 801f0c8:	f000 f9ce 	bl	801f468 <_scanf_chars>
 801f0cc:	2801      	cmp	r0, #1
 801f0ce:	d065      	beq.n	801f19c <__ssvfiscanf_r+0x2d8>
 801f0d0:	2802      	cmp	r0, #2
 801f0d2:	f47f af21 	bne.w	801ef18 <__ssvfiscanf_r+0x54>
 801f0d6:	e7cf      	b.n	801f078 <__ssvfiscanf_r+0x1b4>
 801f0d8:	220a      	movs	r2, #10
 801f0da:	e7dd      	b.n	801f098 <__ssvfiscanf_r+0x1d4>
 801f0dc:	2300      	movs	r3, #0
 801f0de:	9342      	str	r3, [sp, #264]	; 0x108
 801f0e0:	2303      	movs	r3, #3
 801f0e2:	e7de      	b.n	801f0a2 <__ssvfiscanf_r+0x1de>
 801f0e4:	2308      	movs	r3, #8
 801f0e6:	9342      	str	r3, [sp, #264]	; 0x108
 801f0e8:	2304      	movs	r3, #4
 801f0ea:	e7da      	b.n	801f0a2 <__ssvfiscanf_r+0x1de>
 801f0ec:	4629      	mov	r1, r5
 801f0ee:	4640      	mov	r0, r8
 801f0f0:	f000 fb18 	bl	801f724 <__sccl>
 801f0f4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801f0f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f0fa:	9341      	str	r3, [sp, #260]	; 0x104
 801f0fc:	4605      	mov	r5, r0
 801f0fe:	2301      	movs	r3, #1
 801f100:	e7cf      	b.n	801f0a2 <__ssvfiscanf_r+0x1de>
 801f102:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801f104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f108:	9341      	str	r3, [sp, #260]	; 0x104
 801f10a:	2300      	movs	r3, #0
 801f10c:	e7c9      	b.n	801f0a2 <__ssvfiscanf_r+0x1de>
 801f10e:	2302      	movs	r3, #2
 801f110:	e7c7      	b.n	801f0a2 <__ssvfiscanf_r+0x1de>
 801f112:	9841      	ldr	r0, [sp, #260]	; 0x104
 801f114:	06c3      	lsls	r3, r0, #27
 801f116:	f53f aeff 	bmi.w	801ef18 <__ssvfiscanf_r+0x54>
 801f11a:	9b00      	ldr	r3, [sp, #0]
 801f11c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801f11e:	1d19      	adds	r1, r3, #4
 801f120:	9100      	str	r1, [sp, #0]
 801f122:	681b      	ldr	r3, [r3, #0]
 801f124:	07c0      	lsls	r0, r0, #31
 801f126:	bf4c      	ite	mi
 801f128:	801a      	strhmi	r2, [r3, #0]
 801f12a:	601a      	strpl	r2, [r3, #0]
 801f12c:	e6f4      	b.n	801ef18 <__ssvfiscanf_r+0x54>
 801f12e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801f130:	4621      	mov	r1, r4
 801f132:	4630      	mov	r0, r6
 801f134:	4798      	blx	r3
 801f136:	2800      	cmp	r0, #0
 801f138:	d0b7      	beq.n	801f0aa <__ssvfiscanf_r+0x1e6>
 801f13a:	e79d      	b.n	801f078 <__ssvfiscanf_r+0x1b4>
 801f13c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801f13e:	3201      	adds	r2, #1
 801f140:	9245      	str	r2, [sp, #276]	; 0x114
 801f142:	6862      	ldr	r2, [r4, #4]
 801f144:	3a01      	subs	r2, #1
 801f146:	2a00      	cmp	r2, #0
 801f148:	6062      	str	r2, [r4, #4]
 801f14a:	dd02      	ble.n	801f152 <__ssvfiscanf_r+0x28e>
 801f14c:	3301      	adds	r3, #1
 801f14e:	6023      	str	r3, [r4, #0]
 801f150:	e7ae      	b.n	801f0b0 <__ssvfiscanf_r+0x1ec>
 801f152:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801f154:	4621      	mov	r1, r4
 801f156:	4630      	mov	r0, r6
 801f158:	4798      	blx	r3
 801f15a:	2800      	cmp	r0, #0
 801f15c:	d0a8      	beq.n	801f0b0 <__ssvfiscanf_r+0x1ec>
 801f15e:	e78b      	b.n	801f078 <__ssvfiscanf_r+0x1b4>
 801f160:	2b04      	cmp	r3, #4
 801f162:	dc06      	bgt.n	801f172 <__ssvfiscanf_r+0x2ae>
 801f164:	466b      	mov	r3, sp
 801f166:	4622      	mov	r2, r4
 801f168:	a941      	add	r1, sp, #260	; 0x104
 801f16a:	4630      	mov	r0, r6
 801f16c:	f000 f9d4 	bl	801f518 <_scanf_i>
 801f170:	e7ac      	b.n	801f0cc <__ssvfiscanf_r+0x208>
 801f172:	4b0f      	ldr	r3, [pc, #60]	; (801f1b0 <__ssvfiscanf_r+0x2ec>)
 801f174:	2b00      	cmp	r3, #0
 801f176:	f43f aecf 	beq.w	801ef18 <__ssvfiscanf_r+0x54>
 801f17a:	466b      	mov	r3, sp
 801f17c:	4622      	mov	r2, r4
 801f17e:	a941      	add	r1, sp, #260	; 0x104
 801f180:	4630      	mov	r0, r6
 801f182:	f7fc f817 	bl	801b1b4 <_scanf_float>
 801f186:	e7a1      	b.n	801f0cc <__ssvfiscanf_r+0x208>
 801f188:	89a3      	ldrh	r3, [r4, #12]
 801f18a:	f013 0f40 	tst.w	r3, #64	; 0x40
 801f18e:	bf18      	it	ne
 801f190:	f04f 30ff 	movne.w	r0, #4294967295
 801f194:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801f198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f19c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801f19e:	e7f9      	b.n	801f194 <__ssvfiscanf_r+0x2d0>
 801f1a0:	0801ee11 	.word	0x0801ee11
 801f1a4:	0801ee8b 	.word	0x0801ee8b
 801f1a8:	08021709 	.word	0x08021709
 801f1ac:	08021baa 	.word	0x08021baa
 801f1b0:	0801b1b5 	.word	0x0801b1b5

0801f1b4 <__sfputc_r>:
 801f1b4:	6893      	ldr	r3, [r2, #8]
 801f1b6:	3b01      	subs	r3, #1
 801f1b8:	2b00      	cmp	r3, #0
 801f1ba:	b410      	push	{r4}
 801f1bc:	6093      	str	r3, [r2, #8]
 801f1be:	da08      	bge.n	801f1d2 <__sfputc_r+0x1e>
 801f1c0:	6994      	ldr	r4, [r2, #24]
 801f1c2:	42a3      	cmp	r3, r4
 801f1c4:	db01      	blt.n	801f1ca <__sfputc_r+0x16>
 801f1c6:	290a      	cmp	r1, #10
 801f1c8:	d103      	bne.n	801f1d2 <__sfputc_r+0x1e>
 801f1ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f1ce:	f7fd bb7d 	b.w	801c8cc <__swbuf_r>
 801f1d2:	6813      	ldr	r3, [r2, #0]
 801f1d4:	1c58      	adds	r0, r3, #1
 801f1d6:	6010      	str	r0, [r2, #0]
 801f1d8:	7019      	strb	r1, [r3, #0]
 801f1da:	4608      	mov	r0, r1
 801f1dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f1e0:	4770      	bx	lr

0801f1e2 <__sfputs_r>:
 801f1e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f1e4:	4606      	mov	r6, r0
 801f1e6:	460f      	mov	r7, r1
 801f1e8:	4614      	mov	r4, r2
 801f1ea:	18d5      	adds	r5, r2, r3
 801f1ec:	42ac      	cmp	r4, r5
 801f1ee:	d101      	bne.n	801f1f4 <__sfputs_r+0x12>
 801f1f0:	2000      	movs	r0, #0
 801f1f2:	e007      	b.n	801f204 <__sfputs_r+0x22>
 801f1f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f1f8:	463a      	mov	r2, r7
 801f1fa:	4630      	mov	r0, r6
 801f1fc:	f7ff ffda 	bl	801f1b4 <__sfputc_r>
 801f200:	1c43      	adds	r3, r0, #1
 801f202:	d1f3      	bne.n	801f1ec <__sfputs_r+0xa>
 801f204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f208 <_vfiprintf_r>:
 801f208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f20c:	460d      	mov	r5, r1
 801f20e:	b09d      	sub	sp, #116	; 0x74
 801f210:	4614      	mov	r4, r2
 801f212:	4698      	mov	r8, r3
 801f214:	4606      	mov	r6, r0
 801f216:	b118      	cbz	r0, 801f220 <_vfiprintf_r+0x18>
 801f218:	6983      	ldr	r3, [r0, #24]
 801f21a:	b90b      	cbnz	r3, 801f220 <_vfiprintf_r+0x18>
 801f21c:	f7fb f9b8 	bl	801a590 <__sinit>
 801f220:	4b89      	ldr	r3, [pc, #548]	; (801f448 <_vfiprintf_r+0x240>)
 801f222:	429d      	cmp	r5, r3
 801f224:	d11b      	bne.n	801f25e <_vfiprintf_r+0x56>
 801f226:	6875      	ldr	r5, [r6, #4]
 801f228:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f22a:	07d9      	lsls	r1, r3, #31
 801f22c:	d405      	bmi.n	801f23a <_vfiprintf_r+0x32>
 801f22e:	89ab      	ldrh	r3, [r5, #12]
 801f230:	059a      	lsls	r2, r3, #22
 801f232:	d402      	bmi.n	801f23a <_vfiprintf_r+0x32>
 801f234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f236:	f7fb fa6e 	bl	801a716 <__retarget_lock_acquire_recursive>
 801f23a:	89ab      	ldrh	r3, [r5, #12]
 801f23c:	071b      	lsls	r3, r3, #28
 801f23e:	d501      	bpl.n	801f244 <_vfiprintf_r+0x3c>
 801f240:	692b      	ldr	r3, [r5, #16]
 801f242:	b9eb      	cbnz	r3, 801f280 <_vfiprintf_r+0x78>
 801f244:	4629      	mov	r1, r5
 801f246:	4630      	mov	r0, r6
 801f248:	f7fd fba4 	bl	801c994 <__swsetup_r>
 801f24c:	b1c0      	cbz	r0, 801f280 <_vfiprintf_r+0x78>
 801f24e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f250:	07dc      	lsls	r4, r3, #31
 801f252:	d50e      	bpl.n	801f272 <_vfiprintf_r+0x6a>
 801f254:	f04f 30ff 	mov.w	r0, #4294967295
 801f258:	b01d      	add	sp, #116	; 0x74
 801f25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f25e:	4b7b      	ldr	r3, [pc, #492]	; (801f44c <_vfiprintf_r+0x244>)
 801f260:	429d      	cmp	r5, r3
 801f262:	d101      	bne.n	801f268 <_vfiprintf_r+0x60>
 801f264:	68b5      	ldr	r5, [r6, #8]
 801f266:	e7df      	b.n	801f228 <_vfiprintf_r+0x20>
 801f268:	4b79      	ldr	r3, [pc, #484]	; (801f450 <_vfiprintf_r+0x248>)
 801f26a:	429d      	cmp	r5, r3
 801f26c:	bf08      	it	eq
 801f26e:	68f5      	ldreq	r5, [r6, #12]
 801f270:	e7da      	b.n	801f228 <_vfiprintf_r+0x20>
 801f272:	89ab      	ldrh	r3, [r5, #12]
 801f274:	0598      	lsls	r0, r3, #22
 801f276:	d4ed      	bmi.n	801f254 <_vfiprintf_r+0x4c>
 801f278:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f27a:	f7fb fa4d 	bl	801a718 <__retarget_lock_release_recursive>
 801f27e:	e7e9      	b.n	801f254 <_vfiprintf_r+0x4c>
 801f280:	2300      	movs	r3, #0
 801f282:	9309      	str	r3, [sp, #36]	; 0x24
 801f284:	2320      	movs	r3, #32
 801f286:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f28a:	f8cd 800c 	str.w	r8, [sp, #12]
 801f28e:	2330      	movs	r3, #48	; 0x30
 801f290:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801f454 <_vfiprintf_r+0x24c>
 801f294:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f298:	f04f 0901 	mov.w	r9, #1
 801f29c:	4623      	mov	r3, r4
 801f29e:	469a      	mov	sl, r3
 801f2a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f2a4:	b10a      	cbz	r2, 801f2aa <_vfiprintf_r+0xa2>
 801f2a6:	2a25      	cmp	r2, #37	; 0x25
 801f2a8:	d1f9      	bne.n	801f29e <_vfiprintf_r+0x96>
 801f2aa:	ebba 0b04 	subs.w	fp, sl, r4
 801f2ae:	d00b      	beq.n	801f2c8 <_vfiprintf_r+0xc0>
 801f2b0:	465b      	mov	r3, fp
 801f2b2:	4622      	mov	r2, r4
 801f2b4:	4629      	mov	r1, r5
 801f2b6:	4630      	mov	r0, r6
 801f2b8:	f7ff ff93 	bl	801f1e2 <__sfputs_r>
 801f2bc:	3001      	adds	r0, #1
 801f2be:	f000 80aa 	beq.w	801f416 <_vfiprintf_r+0x20e>
 801f2c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f2c4:	445a      	add	r2, fp
 801f2c6:	9209      	str	r2, [sp, #36]	; 0x24
 801f2c8:	f89a 3000 	ldrb.w	r3, [sl]
 801f2cc:	2b00      	cmp	r3, #0
 801f2ce:	f000 80a2 	beq.w	801f416 <_vfiprintf_r+0x20e>
 801f2d2:	2300      	movs	r3, #0
 801f2d4:	f04f 32ff 	mov.w	r2, #4294967295
 801f2d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f2dc:	f10a 0a01 	add.w	sl, sl, #1
 801f2e0:	9304      	str	r3, [sp, #16]
 801f2e2:	9307      	str	r3, [sp, #28]
 801f2e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f2e8:	931a      	str	r3, [sp, #104]	; 0x68
 801f2ea:	4654      	mov	r4, sl
 801f2ec:	2205      	movs	r2, #5
 801f2ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f2f2:	4858      	ldr	r0, [pc, #352]	; (801f454 <_vfiprintf_r+0x24c>)
 801f2f4:	f7e0 ff84 	bl	8000200 <memchr>
 801f2f8:	9a04      	ldr	r2, [sp, #16]
 801f2fa:	b9d8      	cbnz	r0, 801f334 <_vfiprintf_r+0x12c>
 801f2fc:	06d1      	lsls	r1, r2, #27
 801f2fe:	bf44      	itt	mi
 801f300:	2320      	movmi	r3, #32
 801f302:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f306:	0713      	lsls	r3, r2, #28
 801f308:	bf44      	itt	mi
 801f30a:	232b      	movmi	r3, #43	; 0x2b
 801f30c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f310:	f89a 3000 	ldrb.w	r3, [sl]
 801f314:	2b2a      	cmp	r3, #42	; 0x2a
 801f316:	d015      	beq.n	801f344 <_vfiprintf_r+0x13c>
 801f318:	9a07      	ldr	r2, [sp, #28]
 801f31a:	4654      	mov	r4, sl
 801f31c:	2000      	movs	r0, #0
 801f31e:	f04f 0c0a 	mov.w	ip, #10
 801f322:	4621      	mov	r1, r4
 801f324:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f328:	3b30      	subs	r3, #48	; 0x30
 801f32a:	2b09      	cmp	r3, #9
 801f32c:	d94e      	bls.n	801f3cc <_vfiprintf_r+0x1c4>
 801f32e:	b1b0      	cbz	r0, 801f35e <_vfiprintf_r+0x156>
 801f330:	9207      	str	r2, [sp, #28]
 801f332:	e014      	b.n	801f35e <_vfiprintf_r+0x156>
 801f334:	eba0 0308 	sub.w	r3, r0, r8
 801f338:	fa09 f303 	lsl.w	r3, r9, r3
 801f33c:	4313      	orrs	r3, r2
 801f33e:	9304      	str	r3, [sp, #16]
 801f340:	46a2      	mov	sl, r4
 801f342:	e7d2      	b.n	801f2ea <_vfiprintf_r+0xe2>
 801f344:	9b03      	ldr	r3, [sp, #12]
 801f346:	1d19      	adds	r1, r3, #4
 801f348:	681b      	ldr	r3, [r3, #0]
 801f34a:	9103      	str	r1, [sp, #12]
 801f34c:	2b00      	cmp	r3, #0
 801f34e:	bfbb      	ittet	lt
 801f350:	425b      	neglt	r3, r3
 801f352:	f042 0202 	orrlt.w	r2, r2, #2
 801f356:	9307      	strge	r3, [sp, #28]
 801f358:	9307      	strlt	r3, [sp, #28]
 801f35a:	bfb8      	it	lt
 801f35c:	9204      	strlt	r2, [sp, #16]
 801f35e:	7823      	ldrb	r3, [r4, #0]
 801f360:	2b2e      	cmp	r3, #46	; 0x2e
 801f362:	d10c      	bne.n	801f37e <_vfiprintf_r+0x176>
 801f364:	7863      	ldrb	r3, [r4, #1]
 801f366:	2b2a      	cmp	r3, #42	; 0x2a
 801f368:	d135      	bne.n	801f3d6 <_vfiprintf_r+0x1ce>
 801f36a:	9b03      	ldr	r3, [sp, #12]
 801f36c:	1d1a      	adds	r2, r3, #4
 801f36e:	681b      	ldr	r3, [r3, #0]
 801f370:	9203      	str	r2, [sp, #12]
 801f372:	2b00      	cmp	r3, #0
 801f374:	bfb8      	it	lt
 801f376:	f04f 33ff 	movlt.w	r3, #4294967295
 801f37a:	3402      	adds	r4, #2
 801f37c:	9305      	str	r3, [sp, #20]
 801f37e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801f464 <_vfiprintf_r+0x25c>
 801f382:	7821      	ldrb	r1, [r4, #0]
 801f384:	2203      	movs	r2, #3
 801f386:	4650      	mov	r0, sl
 801f388:	f7e0 ff3a 	bl	8000200 <memchr>
 801f38c:	b140      	cbz	r0, 801f3a0 <_vfiprintf_r+0x198>
 801f38e:	2340      	movs	r3, #64	; 0x40
 801f390:	eba0 000a 	sub.w	r0, r0, sl
 801f394:	fa03 f000 	lsl.w	r0, r3, r0
 801f398:	9b04      	ldr	r3, [sp, #16]
 801f39a:	4303      	orrs	r3, r0
 801f39c:	3401      	adds	r4, #1
 801f39e:	9304      	str	r3, [sp, #16]
 801f3a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f3a4:	482c      	ldr	r0, [pc, #176]	; (801f458 <_vfiprintf_r+0x250>)
 801f3a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f3aa:	2206      	movs	r2, #6
 801f3ac:	f7e0 ff28 	bl	8000200 <memchr>
 801f3b0:	2800      	cmp	r0, #0
 801f3b2:	d03f      	beq.n	801f434 <_vfiprintf_r+0x22c>
 801f3b4:	4b29      	ldr	r3, [pc, #164]	; (801f45c <_vfiprintf_r+0x254>)
 801f3b6:	bb1b      	cbnz	r3, 801f400 <_vfiprintf_r+0x1f8>
 801f3b8:	9b03      	ldr	r3, [sp, #12]
 801f3ba:	3307      	adds	r3, #7
 801f3bc:	f023 0307 	bic.w	r3, r3, #7
 801f3c0:	3308      	adds	r3, #8
 801f3c2:	9303      	str	r3, [sp, #12]
 801f3c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f3c6:	443b      	add	r3, r7
 801f3c8:	9309      	str	r3, [sp, #36]	; 0x24
 801f3ca:	e767      	b.n	801f29c <_vfiprintf_r+0x94>
 801f3cc:	fb0c 3202 	mla	r2, ip, r2, r3
 801f3d0:	460c      	mov	r4, r1
 801f3d2:	2001      	movs	r0, #1
 801f3d4:	e7a5      	b.n	801f322 <_vfiprintf_r+0x11a>
 801f3d6:	2300      	movs	r3, #0
 801f3d8:	3401      	adds	r4, #1
 801f3da:	9305      	str	r3, [sp, #20]
 801f3dc:	4619      	mov	r1, r3
 801f3de:	f04f 0c0a 	mov.w	ip, #10
 801f3e2:	4620      	mov	r0, r4
 801f3e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f3e8:	3a30      	subs	r2, #48	; 0x30
 801f3ea:	2a09      	cmp	r2, #9
 801f3ec:	d903      	bls.n	801f3f6 <_vfiprintf_r+0x1ee>
 801f3ee:	2b00      	cmp	r3, #0
 801f3f0:	d0c5      	beq.n	801f37e <_vfiprintf_r+0x176>
 801f3f2:	9105      	str	r1, [sp, #20]
 801f3f4:	e7c3      	b.n	801f37e <_vfiprintf_r+0x176>
 801f3f6:	fb0c 2101 	mla	r1, ip, r1, r2
 801f3fa:	4604      	mov	r4, r0
 801f3fc:	2301      	movs	r3, #1
 801f3fe:	e7f0      	b.n	801f3e2 <_vfiprintf_r+0x1da>
 801f400:	ab03      	add	r3, sp, #12
 801f402:	9300      	str	r3, [sp, #0]
 801f404:	462a      	mov	r2, r5
 801f406:	4b16      	ldr	r3, [pc, #88]	; (801f460 <_vfiprintf_r+0x258>)
 801f408:	a904      	add	r1, sp, #16
 801f40a:	4630      	mov	r0, r6
 801f40c:	f7fb fb08 	bl	801aa20 <_printf_float>
 801f410:	4607      	mov	r7, r0
 801f412:	1c78      	adds	r0, r7, #1
 801f414:	d1d6      	bne.n	801f3c4 <_vfiprintf_r+0x1bc>
 801f416:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f418:	07d9      	lsls	r1, r3, #31
 801f41a:	d405      	bmi.n	801f428 <_vfiprintf_r+0x220>
 801f41c:	89ab      	ldrh	r3, [r5, #12]
 801f41e:	059a      	lsls	r2, r3, #22
 801f420:	d402      	bmi.n	801f428 <_vfiprintf_r+0x220>
 801f422:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f424:	f7fb f978 	bl	801a718 <__retarget_lock_release_recursive>
 801f428:	89ab      	ldrh	r3, [r5, #12]
 801f42a:	065b      	lsls	r3, r3, #25
 801f42c:	f53f af12 	bmi.w	801f254 <_vfiprintf_r+0x4c>
 801f430:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f432:	e711      	b.n	801f258 <_vfiprintf_r+0x50>
 801f434:	ab03      	add	r3, sp, #12
 801f436:	9300      	str	r3, [sp, #0]
 801f438:	462a      	mov	r2, r5
 801f43a:	4b09      	ldr	r3, [pc, #36]	; (801f460 <_vfiprintf_r+0x258>)
 801f43c:	a904      	add	r1, sp, #16
 801f43e:	4630      	mov	r0, r6
 801f440:	f7fb fd92 	bl	801af68 <_printf_i>
 801f444:	e7e4      	b.n	801f410 <_vfiprintf_r+0x208>
 801f446:	bf00      	nop
 801f448:	0802182c 	.word	0x0802182c
 801f44c:	0802184c 	.word	0x0802184c
 801f450:	0802180c 	.word	0x0802180c
 801f454:	08021ba4 	.word	0x08021ba4
 801f458:	08021bae 	.word	0x08021bae
 801f45c:	0801aa21 	.word	0x0801aa21
 801f460:	0801f1e3 	.word	0x0801f1e3
 801f464:	08021baa 	.word	0x08021baa

0801f468 <_scanf_chars>:
 801f468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f46c:	4615      	mov	r5, r2
 801f46e:	688a      	ldr	r2, [r1, #8]
 801f470:	4680      	mov	r8, r0
 801f472:	460c      	mov	r4, r1
 801f474:	b932      	cbnz	r2, 801f484 <_scanf_chars+0x1c>
 801f476:	698a      	ldr	r2, [r1, #24]
 801f478:	2a00      	cmp	r2, #0
 801f47a:	bf0c      	ite	eq
 801f47c:	2201      	moveq	r2, #1
 801f47e:	f04f 32ff 	movne.w	r2, #4294967295
 801f482:	608a      	str	r2, [r1, #8]
 801f484:	6822      	ldr	r2, [r4, #0]
 801f486:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801f514 <_scanf_chars+0xac>
 801f48a:	06d1      	lsls	r1, r2, #27
 801f48c:	bf5f      	itttt	pl
 801f48e:	681a      	ldrpl	r2, [r3, #0]
 801f490:	1d11      	addpl	r1, r2, #4
 801f492:	6019      	strpl	r1, [r3, #0]
 801f494:	6816      	ldrpl	r6, [r2, #0]
 801f496:	2700      	movs	r7, #0
 801f498:	69a0      	ldr	r0, [r4, #24]
 801f49a:	b188      	cbz	r0, 801f4c0 <_scanf_chars+0x58>
 801f49c:	2801      	cmp	r0, #1
 801f49e:	d107      	bne.n	801f4b0 <_scanf_chars+0x48>
 801f4a0:	682b      	ldr	r3, [r5, #0]
 801f4a2:	781a      	ldrb	r2, [r3, #0]
 801f4a4:	6963      	ldr	r3, [r4, #20]
 801f4a6:	5c9b      	ldrb	r3, [r3, r2]
 801f4a8:	b953      	cbnz	r3, 801f4c0 <_scanf_chars+0x58>
 801f4aa:	bb27      	cbnz	r7, 801f4f6 <_scanf_chars+0x8e>
 801f4ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f4b0:	2802      	cmp	r0, #2
 801f4b2:	d120      	bne.n	801f4f6 <_scanf_chars+0x8e>
 801f4b4:	682b      	ldr	r3, [r5, #0]
 801f4b6:	781b      	ldrb	r3, [r3, #0]
 801f4b8:	f813 3009 	ldrb.w	r3, [r3, r9]
 801f4bc:	071b      	lsls	r3, r3, #28
 801f4be:	d41a      	bmi.n	801f4f6 <_scanf_chars+0x8e>
 801f4c0:	6823      	ldr	r3, [r4, #0]
 801f4c2:	06da      	lsls	r2, r3, #27
 801f4c4:	bf5e      	ittt	pl
 801f4c6:	682b      	ldrpl	r3, [r5, #0]
 801f4c8:	781b      	ldrbpl	r3, [r3, #0]
 801f4ca:	f806 3b01 	strbpl.w	r3, [r6], #1
 801f4ce:	682a      	ldr	r2, [r5, #0]
 801f4d0:	686b      	ldr	r3, [r5, #4]
 801f4d2:	3201      	adds	r2, #1
 801f4d4:	602a      	str	r2, [r5, #0]
 801f4d6:	68a2      	ldr	r2, [r4, #8]
 801f4d8:	3b01      	subs	r3, #1
 801f4da:	3a01      	subs	r2, #1
 801f4dc:	606b      	str	r3, [r5, #4]
 801f4de:	3701      	adds	r7, #1
 801f4e0:	60a2      	str	r2, [r4, #8]
 801f4e2:	b142      	cbz	r2, 801f4f6 <_scanf_chars+0x8e>
 801f4e4:	2b00      	cmp	r3, #0
 801f4e6:	dcd7      	bgt.n	801f498 <_scanf_chars+0x30>
 801f4e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801f4ec:	4629      	mov	r1, r5
 801f4ee:	4640      	mov	r0, r8
 801f4f0:	4798      	blx	r3
 801f4f2:	2800      	cmp	r0, #0
 801f4f4:	d0d0      	beq.n	801f498 <_scanf_chars+0x30>
 801f4f6:	6823      	ldr	r3, [r4, #0]
 801f4f8:	f013 0310 	ands.w	r3, r3, #16
 801f4fc:	d105      	bne.n	801f50a <_scanf_chars+0xa2>
 801f4fe:	68e2      	ldr	r2, [r4, #12]
 801f500:	3201      	adds	r2, #1
 801f502:	60e2      	str	r2, [r4, #12]
 801f504:	69a2      	ldr	r2, [r4, #24]
 801f506:	b102      	cbz	r2, 801f50a <_scanf_chars+0xa2>
 801f508:	7033      	strb	r3, [r6, #0]
 801f50a:	6923      	ldr	r3, [r4, #16]
 801f50c:	441f      	add	r7, r3
 801f50e:	6127      	str	r7, [r4, #16]
 801f510:	2000      	movs	r0, #0
 801f512:	e7cb      	b.n	801f4ac <_scanf_chars+0x44>
 801f514:	08021709 	.word	0x08021709

0801f518 <_scanf_i>:
 801f518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f51c:	4698      	mov	r8, r3
 801f51e:	4b74      	ldr	r3, [pc, #464]	; (801f6f0 <_scanf_i+0x1d8>)
 801f520:	460c      	mov	r4, r1
 801f522:	4682      	mov	sl, r0
 801f524:	4616      	mov	r6, r2
 801f526:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801f52a:	b087      	sub	sp, #28
 801f52c:	ab03      	add	r3, sp, #12
 801f52e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801f532:	4b70      	ldr	r3, [pc, #448]	; (801f6f4 <_scanf_i+0x1dc>)
 801f534:	69a1      	ldr	r1, [r4, #24]
 801f536:	4a70      	ldr	r2, [pc, #448]	; (801f6f8 <_scanf_i+0x1e0>)
 801f538:	2903      	cmp	r1, #3
 801f53a:	bf18      	it	ne
 801f53c:	461a      	movne	r2, r3
 801f53e:	68a3      	ldr	r3, [r4, #8]
 801f540:	9201      	str	r2, [sp, #4]
 801f542:	1e5a      	subs	r2, r3, #1
 801f544:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801f548:	bf88      	it	hi
 801f54a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801f54e:	4627      	mov	r7, r4
 801f550:	bf82      	ittt	hi
 801f552:	eb03 0905 	addhi.w	r9, r3, r5
 801f556:	f240 135d 	movwhi	r3, #349	; 0x15d
 801f55a:	60a3      	strhi	r3, [r4, #8]
 801f55c:	f857 3b1c 	ldr.w	r3, [r7], #28
 801f560:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801f564:	bf98      	it	ls
 801f566:	f04f 0900 	movls.w	r9, #0
 801f56a:	6023      	str	r3, [r4, #0]
 801f56c:	463d      	mov	r5, r7
 801f56e:	f04f 0b00 	mov.w	fp, #0
 801f572:	6831      	ldr	r1, [r6, #0]
 801f574:	ab03      	add	r3, sp, #12
 801f576:	7809      	ldrb	r1, [r1, #0]
 801f578:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801f57c:	2202      	movs	r2, #2
 801f57e:	f7e0 fe3f 	bl	8000200 <memchr>
 801f582:	b328      	cbz	r0, 801f5d0 <_scanf_i+0xb8>
 801f584:	f1bb 0f01 	cmp.w	fp, #1
 801f588:	d159      	bne.n	801f63e <_scanf_i+0x126>
 801f58a:	6862      	ldr	r2, [r4, #4]
 801f58c:	b92a      	cbnz	r2, 801f59a <_scanf_i+0x82>
 801f58e:	6822      	ldr	r2, [r4, #0]
 801f590:	2308      	movs	r3, #8
 801f592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f596:	6063      	str	r3, [r4, #4]
 801f598:	6022      	str	r2, [r4, #0]
 801f59a:	6822      	ldr	r2, [r4, #0]
 801f59c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801f5a0:	6022      	str	r2, [r4, #0]
 801f5a2:	68a2      	ldr	r2, [r4, #8]
 801f5a4:	1e51      	subs	r1, r2, #1
 801f5a6:	60a1      	str	r1, [r4, #8]
 801f5a8:	b192      	cbz	r2, 801f5d0 <_scanf_i+0xb8>
 801f5aa:	6832      	ldr	r2, [r6, #0]
 801f5ac:	1c51      	adds	r1, r2, #1
 801f5ae:	6031      	str	r1, [r6, #0]
 801f5b0:	7812      	ldrb	r2, [r2, #0]
 801f5b2:	f805 2b01 	strb.w	r2, [r5], #1
 801f5b6:	6872      	ldr	r2, [r6, #4]
 801f5b8:	3a01      	subs	r2, #1
 801f5ba:	2a00      	cmp	r2, #0
 801f5bc:	6072      	str	r2, [r6, #4]
 801f5be:	dc07      	bgt.n	801f5d0 <_scanf_i+0xb8>
 801f5c0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801f5c4:	4631      	mov	r1, r6
 801f5c6:	4650      	mov	r0, sl
 801f5c8:	4790      	blx	r2
 801f5ca:	2800      	cmp	r0, #0
 801f5cc:	f040 8085 	bne.w	801f6da <_scanf_i+0x1c2>
 801f5d0:	f10b 0b01 	add.w	fp, fp, #1
 801f5d4:	f1bb 0f03 	cmp.w	fp, #3
 801f5d8:	d1cb      	bne.n	801f572 <_scanf_i+0x5a>
 801f5da:	6863      	ldr	r3, [r4, #4]
 801f5dc:	b90b      	cbnz	r3, 801f5e2 <_scanf_i+0xca>
 801f5de:	230a      	movs	r3, #10
 801f5e0:	6063      	str	r3, [r4, #4]
 801f5e2:	6863      	ldr	r3, [r4, #4]
 801f5e4:	4945      	ldr	r1, [pc, #276]	; (801f6fc <_scanf_i+0x1e4>)
 801f5e6:	6960      	ldr	r0, [r4, #20]
 801f5e8:	1ac9      	subs	r1, r1, r3
 801f5ea:	f000 f89b 	bl	801f724 <__sccl>
 801f5ee:	f04f 0b00 	mov.w	fp, #0
 801f5f2:	68a3      	ldr	r3, [r4, #8]
 801f5f4:	6822      	ldr	r2, [r4, #0]
 801f5f6:	2b00      	cmp	r3, #0
 801f5f8:	d03d      	beq.n	801f676 <_scanf_i+0x15e>
 801f5fa:	6831      	ldr	r1, [r6, #0]
 801f5fc:	6960      	ldr	r0, [r4, #20]
 801f5fe:	f891 c000 	ldrb.w	ip, [r1]
 801f602:	f810 000c 	ldrb.w	r0, [r0, ip]
 801f606:	2800      	cmp	r0, #0
 801f608:	d035      	beq.n	801f676 <_scanf_i+0x15e>
 801f60a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801f60e:	d124      	bne.n	801f65a <_scanf_i+0x142>
 801f610:	0510      	lsls	r0, r2, #20
 801f612:	d522      	bpl.n	801f65a <_scanf_i+0x142>
 801f614:	f10b 0b01 	add.w	fp, fp, #1
 801f618:	f1b9 0f00 	cmp.w	r9, #0
 801f61c:	d003      	beq.n	801f626 <_scanf_i+0x10e>
 801f61e:	3301      	adds	r3, #1
 801f620:	f109 39ff 	add.w	r9, r9, #4294967295
 801f624:	60a3      	str	r3, [r4, #8]
 801f626:	6873      	ldr	r3, [r6, #4]
 801f628:	3b01      	subs	r3, #1
 801f62a:	2b00      	cmp	r3, #0
 801f62c:	6073      	str	r3, [r6, #4]
 801f62e:	dd1b      	ble.n	801f668 <_scanf_i+0x150>
 801f630:	6833      	ldr	r3, [r6, #0]
 801f632:	3301      	adds	r3, #1
 801f634:	6033      	str	r3, [r6, #0]
 801f636:	68a3      	ldr	r3, [r4, #8]
 801f638:	3b01      	subs	r3, #1
 801f63a:	60a3      	str	r3, [r4, #8]
 801f63c:	e7d9      	b.n	801f5f2 <_scanf_i+0xda>
 801f63e:	f1bb 0f02 	cmp.w	fp, #2
 801f642:	d1ae      	bne.n	801f5a2 <_scanf_i+0x8a>
 801f644:	6822      	ldr	r2, [r4, #0]
 801f646:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801f64a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801f64e:	d1bf      	bne.n	801f5d0 <_scanf_i+0xb8>
 801f650:	2310      	movs	r3, #16
 801f652:	6063      	str	r3, [r4, #4]
 801f654:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801f658:	e7a2      	b.n	801f5a0 <_scanf_i+0x88>
 801f65a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801f65e:	6022      	str	r2, [r4, #0]
 801f660:	780b      	ldrb	r3, [r1, #0]
 801f662:	f805 3b01 	strb.w	r3, [r5], #1
 801f666:	e7de      	b.n	801f626 <_scanf_i+0x10e>
 801f668:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801f66c:	4631      	mov	r1, r6
 801f66e:	4650      	mov	r0, sl
 801f670:	4798      	blx	r3
 801f672:	2800      	cmp	r0, #0
 801f674:	d0df      	beq.n	801f636 <_scanf_i+0x11e>
 801f676:	6823      	ldr	r3, [r4, #0]
 801f678:	05d9      	lsls	r1, r3, #23
 801f67a:	d50d      	bpl.n	801f698 <_scanf_i+0x180>
 801f67c:	42bd      	cmp	r5, r7
 801f67e:	d909      	bls.n	801f694 <_scanf_i+0x17c>
 801f680:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801f684:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f688:	4632      	mov	r2, r6
 801f68a:	4650      	mov	r0, sl
 801f68c:	4798      	blx	r3
 801f68e:	f105 39ff 	add.w	r9, r5, #4294967295
 801f692:	464d      	mov	r5, r9
 801f694:	42bd      	cmp	r5, r7
 801f696:	d028      	beq.n	801f6ea <_scanf_i+0x1d2>
 801f698:	6822      	ldr	r2, [r4, #0]
 801f69a:	f012 0210 	ands.w	r2, r2, #16
 801f69e:	d113      	bne.n	801f6c8 <_scanf_i+0x1b0>
 801f6a0:	702a      	strb	r2, [r5, #0]
 801f6a2:	6863      	ldr	r3, [r4, #4]
 801f6a4:	9e01      	ldr	r6, [sp, #4]
 801f6a6:	4639      	mov	r1, r7
 801f6a8:	4650      	mov	r0, sl
 801f6aa:	47b0      	blx	r6
 801f6ac:	f8d8 3000 	ldr.w	r3, [r8]
 801f6b0:	6821      	ldr	r1, [r4, #0]
 801f6b2:	1d1a      	adds	r2, r3, #4
 801f6b4:	f8c8 2000 	str.w	r2, [r8]
 801f6b8:	f011 0f20 	tst.w	r1, #32
 801f6bc:	681b      	ldr	r3, [r3, #0]
 801f6be:	d00f      	beq.n	801f6e0 <_scanf_i+0x1c8>
 801f6c0:	6018      	str	r0, [r3, #0]
 801f6c2:	68e3      	ldr	r3, [r4, #12]
 801f6c4:	3301      	adds	r3, #1
 801f6c6:	60e3      	str	r3, [r4, #12]
 801f6c8:	1bed      	subs	r5, r5, r7
 801f6ca:	44ab      	add	fp, r5
 801f6cc:	6925      	ldr	r5, [r4, #16]
 801f6ce:	445d      	add	r5, fp
 801f6d0:	6125      	str	r5, [r4, #16]
 801f6d2:	2000      	movs	r0, #0
 801f6d4:	b007      	add	sp, #28
 801f6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6da:	f04f 0b00 	mov.w	fp, #0
 801f6de:	e7ca      	b.n	801f676 <_scanf_i+0x15e>
 801f6e0:	07ca      	lsls	r2, r1, #31
 801f6e2:	bf4c      	ite	mi
 801f6e4:	8018      	strhmi	r0, [r3, #0]
 801f6e6:	6018      	strpl	r0, [r3, #0]
 801f6e8:	e7eb      	b.n	801f6c2 <_scanf_i+0x1aa>
 801f6ea:	2001      	movs	r0, #1
 801f6ec:	e7f2      	b.n	801f6d4 <_scanf_i+0x1bc>
 801f6ee:	bf00      	nop
 801f6f0:	080214f0 	.word	0x080214f0
 801f6f4:	0801c841 	.word	0x0801c841
 801f6f8:	0801c731 	.word	0x0801c731
 801f6fc:	08021bce 	.word	0x08021bce

0801f700 <_read_r>:
 801f700:	b538      	push	{r3, r4, r5, lr}
 801f702:	4d07      	ldr	r5, [pc, #28]	; (801f720 <_read_r+0x20>)
 801f704:	4604      	mov	r4, r0
 801f706:	4608      	mov	r0, r1
 801f708:	4611      	mov	r1, r2
 801f70a:	2200      	movs	r2, #0
 801f70c:	602a      	str	r2, [r5, #0]
 801f70e:	461a      	mov	r2, r3
 801f710:	f7e3 fd30 	bl	8003174 <_read>
 801f714:	1c43      	adds	r3, r0, #1
 801f716:	d102      	bne.n	801f71e <_read_r+0x1e>
 801f718:	682b      	ldr	r3, [r5, #0]
 801f71a:	b103      	cbz	r3, 801f71e <_read_r+0x1e>
 801f71c:	6023      	str	r3, [r4, #0]
 801f71e:	bd38      	pop	{r3, r4, r5, pc}
 801f720:	20008fb0 	.word	0x20008fb0

0801f724 <__sccl>:
 801f724:	b570      	push	{r4, r5, r6, lr}
 801f726:	780b      	ldrb	r3, [r1, #0]
 801f728:	4604      	mov	r4, r0
 801f72a:	2b5e      	cmp	r3, #94	; 0x5e
 801f72c:	bf0b      	itete	eq
 801f72e:	784b      	ldrbeq	r3, [r1, #1]
 801f730:	1c48      	addne	r0, r1, #1
 801f732:	1c88      	addeq	r0, r1, #2
 801f734:	2200      	movne	r2, #0
 801f736:	bf08      	it	eq
 801f738:	2201      	moveq	r2, #1
 801f73a:	1e61      	subs	r1, r4, #1
 801f73c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801f740:	f801 2f01 	strb.w	r2, [r1, #1]!
 801f744:	42a9      	cmp	r1, r5
 801f746:	d1fb      	bne.n	801f740 <__sccl+0x1c>
 801f748:	b90b      	cbnz	r3, 801f74e <__sccl+0x2a>
 801f74a:	3801      	subs	r0, #1
 801f74c:	bd70      	pop	{r4, r5, r6, pc}
 801f74e:	f082 0101 	eor.w	r1, r2, #1
 801f752:	54e1      	strb	r1, [r4, r3]
 801f754:	1c42      	adds	r2, r0, #1
 801f756:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801f75a:	2d2d      	cmp	r5, #45	; 0x2d
 801f75c:	f102 36ff 	add.w	r6, r2, #4294967295
 801f760:	4610      	mov	r0, r2
 801f762:	d006      	beq.n	801f772 <__sccl+0x4e>
 801f764:	2d5d      	cmp	r5, #93	; 0x5d
 801f766:	d0f1      	beq.n	801f74c <__sccl+0x28>
 801f768:	b90d      	cbnz	r5, 801f76e <__sccl+0x4a>
 801f76a:	4630      	mov	r0, r6
 801f76c:	e7ee      	b.n	801f74c <__sccl+0x28>
 801f76e:	462b      	mov	r3, r5
 801f770:	e7ef      	b.n	801f752 <__sccl+0x2e>
 801f772:	7816      	ldrb	r6, [r2, #0]
 801f774:	2e5d      	cmp	r6, #93	; 0x5d
 801f776:	d0fa      	beq.n	801f76e <__sccl+0x4a>
 801f778:	42b3      	cmp	r3, r6
 801f77a:	dcf8      	bgt.n	801f76e <__sccl+0x4a>
 801f77c:	4618      	mov	r0, r3
 801f77e:	3001      	adds	r0, #1
 801f780:	4286      	cmp	r6, r0
 801f782:	5421      	strb	r1, [r4, r0]
 801f784:	dcfb      	bgt.n	801f77e <__sccl+0x5a>
 801f786:	43d8      	mvns	r0, r3
 801f788:	4430      	add	r0, r6
 801f78a:	1c5d      	adds	r5, r3, #1
 801f78c:	42b3      	cmp	r3, r6
 801f78e:	bfa8      	it	ge
 801f790:	2000      	movge	r0, #0
 801f792:	182b      	adds	r3, r5, r0
 801f794:	3202      	adds	r2, #2
 801f796:	e7de      	b.n	801f756 <__sccl+0x32>

0801f798 <__submore>:
 801f798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f79c:	460c      	mov	r4, r1
 801f79e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801f7a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f7a4:	4299      	cmp	r1, r3
 801f7a6:	d11d      	bne.n	801f7e4 <__submore+0x4c>
 801f7a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801f7ac:	f7fb f83e 	bl	801a82c <_malloc_r>
 801f7b0:	b918      	cbnz	r0, 801f7ba <__submore+0x22>
 801f7b2:	f04f 30ff 	mov.w	r0, #4294967295
 801f7b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f7ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f7be:	63a3      	str	r3, [r4, #56]	; 0x38
 801f7c0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801f7c4:	6360      	str	r0, [r4, #52]	; 0x34
 801f7c6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801f7ca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801f7ce:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801f7d2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801f7d6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801f7da:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801f7de:	6020      	str	r0, [r4, #0]
 801f7e0:	2000      	movs	r0, #0
 801f7e2:	e7e8      	b.n	801f7b6 <__submore+0x1e>
 801f7e4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801f7e6:	0077      	lsls	r7, r6, #1
 801f7e8:	463a      	mov	r2, r7
 801f7ea:	f7ff f98f 	bl	801eb0c <_realloc_r>
 801f7ee:	4605      	mov	r5, r0
 801f7f0:	2800      	cmp	r0, #0
 801f7f2:	d0de      	beq.n	801f7b2 <__submore+0x1a>
 801f7f4:	eb00 0806 	add.w	r8, r0, r6
 801f7f8:	4601      	mov	r1, r0
 801f7fa:	4632      	mov	r2, r6
 801f7fc:	4640      	mov	r0, r8
 801f7fe:	f7fa ff95 	bl	801a72c <memcpy>
 801f802:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801f806:	f8c4 8000 	str.w	r8, [r4]
 801f80a:	e7e9      	b.n	801f7e0 <__submore+0x48>

0801f80c <__ascii_wctomb>:
 801f80c:	b149      	cbz	r1, 801f822 <__ascii_wctomb+0x16>
 801f80e:	2aff      	cmp	r2, #255	; 0xff
 801f810:	bf85      	ittet	hi
 801f812:	238a      	movhi	r3, #138	; 0x8a
 801f814:	6003      	strhi	r3, [r0, #0]
 801f816:	700a      	strbls	r2, [r1, #0]
 801f818:	f04f 30ff 	movhi.w	r0, #4294967295
 801f81c:	bf98      	it	ls
 801f81e:	2001      	movls	r0, #1
 801f820:	4770      	bx	lr
 801f822:	4608      	mov	r0, r1
 801f824:	4770      	bx	lr
	...

0801f828 <_fstat_r>:
 801f828:	b538      	push	{r3, r4, r5, lr}
 801f82a:	4d07      	ldr	r5, [pc, #28]	; (801f848 <_fstat_r+0x20>)
 801f82c:	2300      	movs	r3, #0
 801f82e:	4604      	mov	r4, r0
 801f830:	4608      	mov	r0, r1
 801f832:	4611      	mov	r1, r2
 801f834:	602b      	str	r3, [r5, #0]
 801f836:	f7e3 fce2 	bl	80031fe <_fstat>
 801f83a:	1c43      	adds	r3, r0, #1
 801f83c:	d102      	bne.n	801f844 <_fstat_r+0x1c>
 801f83e:	682b      	ldr	r3, [r5, #0]
 801f840:	b103      	cbz	r3, 801f844 <_fstat_r+0x1c>
 801f842:	6023      	str	r3, [r4, #0]
 801f844:	bd38      	pop	{r3, r4, r5, pc}
 801f846:	bf00      	nop
 801f848:	20008fb0 	.word	0x20008fb0

0801f84c <_isatty_r>:
 801f84c:	b538      	push	{r3, r4, r5, lr}
 801f84e:	4d06      	ldr	r5, [pc, #24]	; (801f868 <_isatty_r+0x1c>)
 801f850:	2300      	movs	r3, #0
 801f852:	4604      	mov	r4, r0
 801f854:	4608      	mov	r0, r1
 801f856:	602b      	str	r3, [r5, #0]
 801f858:	f7e3 fce1 	bl	800321e <_isatty>
 801f85c:	1c43      	adds	r3, r0, #1
 801f85e:	d102      	bne.n	801f866 <_isatty_r+0x1a>
 801f860:	682b      	ldr	r3, [r5, #0]
 801f862:	b103      	cbz	r3, 801f866 <_isatty_r+0x1a>
 801f864:	6023      	str	r3, [r4, #0]
 801f866:	bd38      	pop	{r3, r4, r5, pc}
 801f868:	20008fb0 	.word	0x20008fb0

0801f86c <_malloc_usable_size_r>:
 801f86c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f870:	1f18      	subs	r0, r3, #4
 801f872:	2b00      	cmp	r3, #0
 801f874:	bfbc      	itt	lt
 801f876:	580b      	ldrlt	r3, [r1, r0]
 801f878:	18c0      	addlt	r0, r0, r3
 801f87a:	4770      	bx	lr

0801f87c <_init>:
 801f87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f87e:	bf00      	nop
 801f880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f882:	bc08      	pop	{r3}
 801f884:	469e      	mov	lr, r3
 801f886:	4770      	bx	lr

0801f888 <_fini>:
 801f888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f88a:	bf00      	nop
 801f88c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f88e:	bc08      	pop	{r3}
 801f890:	469e      	mov	lr, r3
 801f892:	4770      	bx	lr
